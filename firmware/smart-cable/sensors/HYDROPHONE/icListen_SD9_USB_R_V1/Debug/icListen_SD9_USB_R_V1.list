
icListen_SD9_USB_R_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4d0  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  0800b6c0  0800b6c0  0001b6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8fc  0800b8fc  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8fc  0800b8fc  0001b8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b904  0800b904  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b904  0800b904  0001b904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b908  0800b908  0001b908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b90c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ba4  20000094  0800b9a0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c38  0800b9a0  00023c38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021bff  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fa8  00000000  00000000  00041cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae0  00000000  00000000  00046c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f8  00000000  00000000  00048748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000075da  00000000  00000000  0004a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fb4d  00000000  00000000  0005161a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca733  00000000  00000000  00071167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013b89a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075a4  00000000  00000000  0013b8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000094 	.word	0x20000094
 800020c:	00000000 	.word	0x00000000
 8000210:	0800b6a8 	.word	0x0800b6a8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000098 	.word	0x20000098
 800022c:	0800b6a8 	.word	0x0800b6a8

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b976 	b.w	8000544 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	4688      	mov	r8, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14d      	bne.n	800031c <__udivmoddi4+0xac>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d968      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000286:	fab2 f282 	clz	r2, r2
 800028a:	b152      	cbz	r2, 80002a2 <__udivmoddi4+0x32>
 800028c:	fa01 f302 	lsl.w	r3, r1, r2
 8000290:	f1c2 0120 	rsb	r1, r2, #32
 8000294:	fa20 f101 	lsr.w	r1, r0, r1
 8000298:	fa0c fc02 	lsl.w	ip, ip, r2
 800029c:	ea41 0803 	orr.w	r8, r1, r3
 80002a0:	4094      	lsls	r4, r2
 80002a2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002a6:	fbb8 f7f1 	udiv	r7, r8, r1
 80002aa:	fa1f fe8c 	uxth.w	lr, ip
 80002ae:	fb01 8817 	mls	r8, r1, r7, r8
 80002b2:	fb07 f00e 	mul.w	r0, r7, lr
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002bc:	4298      	cmp	r0, r3
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x66>
 80002c0:	eb1c 0303 	adds.w	r3, ip, r3
 80002c4:	f107 35ff 	add.w	r5, r7, #4294967295
 80002c8:	f080 811e 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002cc:	4298      	cmp	r0, r3
 80002ce:	f240 811b 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d2:	3f02      	subs	r7, #2
 80002d4:	4463      	add	r3, ip
 80002d6:	1a1b      	subs	r3, r3, r0
 80002d8:	fbb3 f0f1 	udiv	r0, r3, r1
 80002dc:	fb01 3310 	mls	r3, r1, r0, r3
 80002e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002e4:	b2a4      	uxth	r4, r4
 80002e6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0404 	adds.w	r4, ip, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8109 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8106 	bls.w	800050c <__udivmoddi4+0x29c>
 8000300:	4464      	add	r4, ip
 8000302:	3802      	subs	r0, #2
 8000304:	2100      	movs	r1, #0
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800030e:	b11e      	cbz	r6, 8000318 <__udivmoddi4+0xa8>
 8000310:	2300      	movs	r3, #0
 8000312:	40d4      	lsrs	r4, r2
 8000314:	e9c6 4300 	strd	r4, r3, [r6]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d908      	bls.n	8000332 <__udivmoddi4+0xc2>
 8000320:	2e00      	cmp	r6, #0
 8000322:	f000 80ee 	beq.w	8000502 <__udivmoddi4+0x292>
 8000326:	2100      	movs	r1, #0
 8000328:	e9c6 0500 	strd	r0, r5, [r6]
 800032c:	4608      	mov	r0, r1
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f183 	clz	r1, r3
 8000336:	2900      	cmp	r1, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fc 	bhi.w	800053c <__udivmoddi4+0x2cc>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0303 	sbc.w	r3, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	4698      	mov	r8, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d0e2      	beq.n	8000318 <__udivmoddi4+0xa8>
 8000352:	e9c6 4800 	strd	r4, r8, [r6]
 8000356:	e7df      	b.n	8000318 <__udivmoddi4+0xa8>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8091 	bne.w	8000488 <__udivmoddi4+0x218>
 8000366:	eba1 000c 	sub.w	r0, r1, ip
 800036a:	2101      	movs	r1, #1
 800036c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000370:	fa1f fe8c 	uxth.w	lr, ip
 8000374:	fbb0 f3f7 	udiv	r3, r0, r7
 8000378:	fb07 0013 	mls	r0, r7, r3, r0
 800037c:	0c25      	lsrs	r5, r4, #16
 800037e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	42a8      	cmp	r0, r5
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0505 	adds.w	r5, ip, r5
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	42a8      	cmp	r0, r5
 8000396:	f200 80ce 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 800039a:	4643      	mov	r3, r8
 800039c:	1a2d      	subs	r5, r5, r0
 800039e:	fbb5 f0f7 	udiv	r0, r5, r7
 80003a2:	fb07 5510 	mls	r5, r7, r0, r5
 80003a6:	fb0e fe00 	mul.w	lr, lr, r0
 80003aa:	b2a4      	uxth	r4, r4
 80003ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80b6 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 80003c4:	4628      	mov	r0, r5
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79e      	b.n	800030e <__udivmoddi4+0x9e>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa25 fa07 	lsr.w	sl, r5, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fbba f8f9 	udiv	r8, sl, r9
 80003ea:	fa20 f307 	lsr.w	r3, r0, r7
 80003ee:	fb09 aa18 	mls	sl, r9, r8, sl
 80003f2:	408d      	lsls	r5, r1
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	431d      	orrs	r5, r3
 80003fa:	fa00 f301 	lsl.w	r3, r0, r1
 80003fe:	fb08 f00e 	mul.w	r0, r8, lr
 8000402:	0c2c      	lsrs	r4, r5, #16
 8000404:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000408:	42a0      	cmp	r0, r4
 800040a:	fa02 f201 	lsl.w	r2, r2, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	42a0      	cmp	r0, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1a24      	subs	r4, r4, r0
 800042a:	fbb4 f0f9 	udiv	r0, r4, r9
 800042e:	fb09 4410 	mls	r4, r9, r0, r4
 8000432:	fb00 fe0e 	mul.w	lr, r0, lr
 8000436:	b2ad      	uxth	r5, r5
 8000438:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f100 35ff 	add.w	r5, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9502 	umull	r9, r5, r0, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	2e00      	cmp	r6, #0
 800046a:	d069      	beq.n	8000540 <__udivmoddi4+0x2d0>
 800046c:	ebb3 0208 	subs.w	r2, r3, r8
 8000470:	eb64 040e 	sbc.w	r4, r4, lr
 8000474:	fa22 f301 	lsr.w	r3, r2, r1
 8000478:	fa04 f707 	lsl.w	r7, r4, r7
 800047c:	431f      	orrs	r7, r3
 800047e:	40cc      	lsrs	r4, r1
 8000480:	e9c6 7400 	strd	r7, r4, [r6]
 8000484:	2100      	movs	r1, #0
 8000486:	e747      	b.n	8000318 <__udivmoddi4+0xa8>
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	f1c2 0120 	rsb	r1, r2, #32
 8000490:	fa25 f301 	lsr.w	r3, r5, r1
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa20 f101 	lsr.w	r1, r0, r1
 800049c:	4095      	lsls	r5, r2
 800049e:	430d      	orrs	r5, r1
 80004a0:	fbb3 f1f7 	udiv	r1, r3, r7
 80004a4:	fb07 3311 	mls	r3, r7, r1, r3
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	0c28      	lsrs	r0, r5, #16
 80004ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004b2:	fb01 f30e 	mul.w	r3, r1, lr
 80004b6:	4283      	cmp	r3, r0
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0000 	adds.w	r0, ip, r0
 80004c2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	4283      	cmp	r3, r0
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3902      	subs	r1, #2
 80004ce:	4460      	add	r0, ip
 80004d0:	1ac0      	subs	r0, r0, r3
 80004d2:	fbb0 f3f7 	udiv	r3, r0, r7
 80004d6:	fb07 0013 	mls	r0, r7, r3, r0
 80004da:	b2ad      	uxth	r5, r5
 80004dc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004e0:	fb03 f00e 	mul.w	r0, r3, lr
 80004e4:	42a8      	cmp	r0, r5
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0505 	adds.w	r5, ip, r5
 80004ec:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	42a8      	cmp	r0, r5
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4465      	add	r5, ip
 80004fa:	1a28      	subs	r0, r5, r0
 80004fc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e707      	b.n	8000318 <__udivmoddi4+0xa8>
 8000508:	462f      	mov	r7, r5
 800050a:	e6e4      	b.n	80002d6 <__udivmoddi4+0x66>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f9      	b.n	8000304 <__udivmoddi4+0x94>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4643      	mov	r3, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4628      	mov	r0, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4641      	mov	r1, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	4464      	add	r4, ip
 8000532:	3802      	subs	r0, #2
 8000534:	e747      	b.n	80003c6 <__udivmoddi4+0x156>
 8000536:	3b02      	subs	r3, #2
 8000538:	4465      	add	r5, ip
 800053a:	e72f      	b.n	800039c <__udivmoddi4+0x12c>
 800053c:	4608      	mov	r0, r1
 800053e:	e706      	b.n	800034e <__udivmoddi4+0xde>
 8000540:	4631      	mov	r1, r6
 8000542:	e6e9      	b.n	8000318 <__udivmoddi4+0xa8>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	4a06      	ldr	r2, [pc, #24]	; (8000570 <vApplicationGetIdleTaskMemory+0x28>)
 8000558:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	4a05      	ldr	r2, [pc, #20]	; (8000574 <vApplicationGetIdleTaskMemory+0x2c>)
 800055e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2280      	movs	r2, #128	; 0x80
 8000564:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	200000b0 	.word	0x200000b0
 8000574:	20000164 	.word	0x20000164

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b09e      	sub	sp, #120	; 0x78
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fce1 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f875 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f98b 	bl	80008a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800058a:	f000 f8db 	bl	8000744 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800058e:	f000 f95d 	bl	800084c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000592:	f000 f90d 	bl	80007b0 <MX_TIM2_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AppliEvent */
  osMessageQDef(AppliEvent, 16, uint16_t);
 8000596:	4b2c      	ldr	r3, [pc, #176]	; (8000648 <main+0xd0>)
 8000598:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800059c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800059e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AppliEventHandle = osMessageCreate(osMessageQ(AppliEvent), NULL);
 80005a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f007 fe88 	bl	80082be <osMessageCreate>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a26      	ldr	r2, [pc, #152]	; (800064c <main+0xd4>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_rx */
  osMessageQDef(USB_rx, 10, uint32_t);
 80005b4:	4b26      	ldr	r3, [pc, #152]	; (8000650 <main+0xd8>)
 80005b6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80005ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_rxHandle = osMessageCreate(osMessageQ(USB_rx), NULL);
 80005c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f007 fe79 	bl	80082be <osMessageCreate>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a21      	ldr	r2, [pc, #132]	; (8000654 <main+0xdc>)
 80005d0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <main+0xe0>)
 80005d4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005d8:	461d      	mov	r5, r3
 80005da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f007 fe06 	bl	80081fe <osThreadCreate>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a19      	ldr	r2, [pc, #100]	; (800065c <main+0xe4>)
 80005f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_t */
  osThreadDef(storage_t, storage_f, osPriorityNormal, 0, 512);
 80005f8:	4b19      	ldr	r3, [pc, #100]	; (8000660 <main+0xe8>)
 80005fa:	f107 0420 	add.w	r4, r7, #32
 80005fe:	461d      	mov	r5, r3
 8000600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000604:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000608:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  storage_tHandle = osThreadCreate(osThread(storage_t), NULL);
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f007 fdf3 	bl	80081fe <osThreadCreate>
 8000618:	4603      	mov	r3, r0
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <main+0xec>)
 800061c:	6013      	str	r3, [r2, #0]

  /* definition and creation of icListen_t */
  osThreadDef(icListen_t, icListen_f, osPriorityNormal, 0, 256);
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <main+0xf0>)
 8000620:	1d3c      	adds	r4, r7, #4
 8000622:	461d      	mov	r5, r3
 8000624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000628:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  icListen_tHandle = osThreadCreate(osThread(icListen_t), NULL);
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f007 fde2 	bl	80081fe <osThreadCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	4a0b      	ldr	r2, [pc, #44]	; (800066c <main+0xf4>)
 800063e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000640:	f007 fdd6 	bl	80081f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0xcc>
 8000646:	bf00      	nop
 8000648:	0800b6e4 	.word	0x0800b6e4
 800064c:	20000454 	.word	0x20000454
 8000650:	0800b6f4 	.word	0x0800b6f4
 8000654:	20000458 	.word	0x20000458
 8000658:	0800b704 	.word	0x0800b704
 800065c:	20000448 	.word	0x20000448
 8000660:	0800b720 	.word	0x0800b720
 8000664:	2000044c 	.word	0x2000044c
 8000668:	0800b73c 	.word	0x0800b73c
 800066c:	20000450 	.word	0x20000450

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b09c      	sub	sp, #112	; 0x70
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800067a:	2238      	movs	r2, #56	; 0x38
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f00a fb36 	bl	800acf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2220      	movs	r2, #32
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f00a fb28 	bl	800acf0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80006aa:	2304      	movs	r3, #4
 80006ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ae:	2301      	movs	r3, #1
 80006b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80006b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80006cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006d0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV2;
 80006d2:	2310      	movs	r3, #16
 80006d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fd20 	bl	8003120 <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006e6:	f000 fa15 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2302      	movs	r3, #2
 80006f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000704:	2101      	movs	r1, #1
 8000706:	4618      	mov	r0, r3
 8000708:	f003 f820 	bl	800374c <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000712:	f000 f9ff 	bl	8000b14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000716:	2310      	movs	r3, #16
 8000718:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV2;
 800071a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	4618      	mov	r0, r3
 8000724:	f003 fa5a 	bl	8003bdc <HAL_RCCEx_PeriphCLKConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800072e:	f000 f9f1 	bl	8000b14 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000732:	4b03      	ldr	r3, [pc, #12]	; (8000740 <SystemClock_Config+0xd0>)
 8000734:	2201      	movs	r2, #1
 8000736:	601a      	str	r2, [r3, #0]
}
 8000738:	bf00      	nop
 800073a:	3770      	adds	r7, #112	; 0x70
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	42420070 	.word	0x42420070

08000744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_SPI1_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_SPI1_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000778:	2210      	movs	r2, #16
 800077a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000790:	220a      	movs	r2, #10
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000796:	f003 fb53 	bl	8003e40 <HAL_SPI_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 f9b8 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000364 	.word	0x20000364
 80007ac:	40013000 	.word	0x40013000

080007b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_TIM2_Init+0x98>)
 80007ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_TIM2_Init+0x98>)
 80007d6:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80007da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_TIM2_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_TIM2_Init+0x98>)
 80007e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_TIM2_Init+0x98>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_TIM2_Init+0x98>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f6:	4814      	ldr	r0, [pc, #80]	; (8000848 <MX_TIM2_Init+0x98>)
 80007f8:	f003 fca9 	bl	800414e <HAL_TIM_Base_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000802:	f000 f987 	bl	8000b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	4619      	mov	r1, r3
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_TIM2_Init+0x98>)
 8000814:	f003 fe4c 	bl	80044b0 <HAL_TIM_ConfigClockSource>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800081e:	f000 f979 	bl	8000b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800082a:	463b      	mov	r3, r7
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_TIM2_Init+0x98>)
 8000830:	f004 f828 	bl	8004884 <HAL_TIMEx_MasterConfigSynchronization>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800083a:	f000 f96b 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200003bc 	.word	0x200003bc

0800084c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_USART1_UART_Init+0x4c>)
 8000852:	4a12      	ldr	r2, [pc, #72]	; (800089c <MX_USART1_UART_Init+0x50>)
 8000854:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <MX_USART1_UART_Init+0x4c>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_USART1_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_USART1_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_USART1_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_USART1_UART_Init+0x4c>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_USART1_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_USART1_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_USART1_UART_Init+0x4c>)
 8000884:	f004 f876 	bl	8004974 <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800088e:	f000 f941 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000404 	.word	0x20000404
 800089c:	40013800 	.word	0x40013800

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b4:	4b36      	ldr	r3, [pc, #216]	; (8000990 <MX_GPIO_Init+0xf0>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a35      	ldr	r2, [pc, #212]	; (8000990 <MX_GPIO_Init+0xf0>)
 80008ba:	f043 0320 	orr.w	r3, r3, #32
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b33      	ldr	r3, [pc, #204]	; (8000990 <MX_GPIO_Init+0xf0>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0320 	and.w	r3, r3, #32
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008cc:	4b30      	ldr	r3, [pc, #192]	; (8000990 <MX_GPIO_Init+0xf0>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a2f      	ldr	r2, [pc, #188]	; (8000990 <MX_GPIO_Init+0xf0>)
 80008d2:	f043 0310 	orr.w	r3, r3, #16
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <MX_GPIO_Init+0xf0>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0310 	and.w	r3, r3, #16
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e4:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <MX_GPIO_Init+0xf0>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a29      	ldr	r2, [pc, #164]	; (8000990 <MX_GPIO_Init+0xf0>)
 80008ea:	f043 0304 	orr.w	r3, r3, #4
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b27      	ldr	r3, [pc, #156]	; (8000990 <MX_GPIO_Init+0xf0>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fc:	4b24      	ldr	r3, [pc, #144]	; (8000990 <MX_GPIO_Init+0xf0>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a23      	ldr	r2, [pc, #140]	; (8000990 <MX_GPIO_Init+0xf0>)
 8000902:	f043 0308 	orr.w	r3, r3, #8
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b21      	ldr	r3, [pc, #132]	; (8000990 <MX_GPIO_Init+0xf0>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0308 	and.w	r3, r3, #8
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_SD3_GPIO_Port, SS_SD3_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2102      	movs	r1, #2
 8000918:	481e      	ldr	r0, [pc, #120]	; (8000994 <MX_GPIO_Init+0xf4>)
 800091a:	f000 ff0f 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin, GPIO_PIN_SET);
 800091e:	2201      	movs	r2, #1
 8000920:	2186      	movs	r1, #134	; 0x86
 8000922:	481d      	ldr	r0, [pc, #116]	; (8000998 <MX_GPIO_Init+0xf8>)
 8000924:	f000 ff0a 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_VBUS_GPIO_Port, USB_VBUS_Pin, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2101      	movs	r1, #1
 800092c:	481b      	ldr	r0, [pc, #108]	; (800099c <MX_GPIO_Init+0xfc>)
 800092e:	f000 ff05 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_SD3_Pin */
  GPIO_InitStruct.Pin = SS_SD3_Pin;
 8000932:	2302      	movs	r3, #2
 8000934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2302      	movs	r3, #2
 8000940:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SS_SD3_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	4619      	mov	r1, r3
 8000948:	4812      	ldr	r0, [pc, #72]	; (8000994 <MX_GPIO_Init+0xf4>)
 800094a:	f000 fd73 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_SD1_Pin SS_SD2_Pin SS_SD4_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin;
 800094e:	2386      	movs	r3, #134	; 0x86
 8000950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2302      	movs	r3, #2
 800095c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 0310 	add.w	r3, r7, #16
 8000962:	4619      	mov	r1, r3
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <MX_GPIO_Init+0xf8>)
 8000966:	f000 fd65 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800096a:	2301      	movs	r3, #1
 800096c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2302      	movs	r3, #2
 8000978:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 0310 	add.w	r3, r7, #16
 800097e:	4619      	mov	r1, r3
 8000980:	4806      	ldr	r0, [pc, #24]	; (800099c <MX_GPIO_Init+0xfc>)
 8000982:	f000 fd57 	bl	8001434 <HAL_GPIO_Init>

}
 8000986:	bf00      	nop
 8000988:	3720      	adds	r7, #32
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000
 8000994:	40011000 	.word	0x40011000
 8000998:	40010800 	.word	0x40010800
 800099c:	40010c00 	.word	0x40010c00

080009a0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart1,uart_tx_msg,1);
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
	...

080009b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80009bc:	f009 fe7c 	bl	800a6b8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

   osEvent event;
   HAL_UART_Transmit(&huart1,"USB start\n",10,100);
 80009c0:	2364      	movs	r3, #100	; 0x64
 80009c2:	220a      	movs	r2, #10
 80009c4:	4915      	ldr	r1, [pc, #84]	; (8000a1c <StartDefaultTask+0x68>)
 80009c6:	4816      	ldr	r0, [pc, #88]	; (8000a20 <StartDefaultTask+0x6c>)
 80009c8:	f004 f821 	bl	8004a0e <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <StartDefaultTask+0x70>)
 80009ce:	6819      	ldr	r1, [r3, #0]
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	f04f 32ff 	mov.w	r2, #4294967295
 80009d8:	4618      	mov	r0, r3
 80009da:	f007 fcd9 	bl	8008390 <osMessageGet>

	  if(event.status == osEventMessage)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	2b10      	cmp	r3, #16
 80009e2:	d115      	bne.n	8000a10 <StartDefaultTask+0x5c>
	  {
		switch(event.value.v)
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	d006      	beq.n	80009f8 <StartDefaultTask+0x44>
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d812      	bhi.n	8000a14 <StartDefaultTask+0x60>
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d012      	beq.n	8000a18 <StartDefaultTask+0x64>
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d004      	beq.n	8000a00 <StartDefaultTask+0x4c>
		 case APPLICATION_START:
		   //set_line_coding();
		 break;

		 default:
		 break;
 80009f6:	e00d      	b.n	8000a14 <StartDefaultTask+0x60>
			 usb_status=0;
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <StartDefaultTask+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
		 break;
 80009fe:	e00c      	b.n	8000a1a <StartDefaultTask+0x66>
			 osDelay(5000);
 8000a00:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a04:	f007 fc47 	bl	8008296 <osDelay>
			 usb_status=1;
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <StartDefaultTask+0x74>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
		 break;
 8000a0e:	e004      	b.n	8000a1a <StartDefaultTask+0x66>
		 }
	   }
 8000a10:	bf00      	nop
 8000a12:	e7db      	b.n	80009cc <StartDefaultTask+0x18>
		 break;
 8000a14:	bf00      	nop
 8000a16:	e7d9      	b.n	80009cc <StartDefaultTask+0x18>
		 break;
 8000a18:	bf00      	nop
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 8000a1a:	e7d7      	b.n	80009cc <StartDefaultTask+0x18>
 8000a1c:	0800b758 	.word	0x0800b758
 8000a20:	20000404 	.word	0x20000404
 8000a24:	20000454 	.word	0x20000454
 8000a28:	200004c4 	.word	0x200004c4

08000a2c <storage_f>:
* @retval None
*/

/* USER CODE END Header_storage_f */
void storage_f(void const * argument)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN storage_f */
  osDelay(500);
 8000a34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a38:	f007 fc2d 	bl	8008296 <osDelay>
  */

  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 8000a3c:	20c8      	movs	r0, #200	; 0xc8
 8000a3e:	f007 fc2a 	bl	8008296 <osDelay>
 8000a42:	e7fb      	b.n	8000a3c <storage_f+0x10>

08000a44 <icListen_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_icListen_f */
void icListen_f(void const * argument)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN icListen_f */
	osEvent event;
  /* Infinite loop */
  usb_status=0;
 8000a4c:	4b23      	ldr	r3, [pc, #140]	; (8000adc <icListen_f+0x98>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
  uint16_t prev_seq;

  while(usb_status==0)
 8000a52:	e002      	b.n	8000a5a <icListen_f+0x16>
  {
	  osDelay(1);
 8000a54:	2001      	movs	r0, #1
 8000a56:	f007 fc1e 	bl	8008296 <osDelay>
  while(usb_status==0)
 8000a5a:	4b20      	ldr	r3, [pc, #128]	; (8000adc <icListen_f+0x98>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d0f8      	beq.n	8000a54 <icListen_f+0x10>
  }
  set_time();
 8000a62:	f009 fdc3 	bl	800a5ec <set_time>
  osDelay(100);
 8000a66:	2064      	movs	r0, #100	; 0x64
 8000a68:	f007 fc15 	bl	8008296 <osDelay>
  enquire_device();
 8000a6c:	f009 fdce 	bl	800a60c <enquire_device>
  osDelay(100);
 8000a70:	2064      	movs	r0, #100	; 0x64
 8000a72:	f007 fc10 	bl	8008296 <osDelay>
  job_setup();
 8000a76:	f009 fde9 	bl	800a64c <job_setup>
  osDelay(2000);
 8000a7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a7e:	f007 fc0a 	bl	8008296 <osDelay>
  collect_data();
 8000a82:	f009 fdd3 	bl	800a62c <collect_data>
  for(;;)
  {
	  if(usb_status==1){
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <icListen_f+0x98>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d1fb      	bne.n	8000a86 <icListen_f+0x42>
	   event = osMessageGet(USB_rxHandle, osWaitForever);
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <icListen_f+0x9c>)
 8000a90:	6819      	ldr	r1, [r3, #0]
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f007 fc78 	bl	8008390 <osMessageGet>
	   if(event.status == osEventMessage)
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	2b10      	cmp	r3, #16
 8000aa4:	d1ef      	bne.n	8000a86 <icListen_f+0x42>
	   {
		   if(event.value.v!=(prev_seq+1) || event.value.v==0){
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	8afa      	ldrh	r2, [r7, #22]
 8000aaa:	3201      	adds	r2, #1
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d102      	bne.n	8000ab6 <icListen_f+0x72>
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d10f      	bne.n	8000ad6 <icListen_f+0x92>
	         //HAL_UART_Transmit(&huart1,temp,strlen(temp),100);
	         //sprintf(temp,"Mask:%d\n",wav_full_hdr_p->mask_hdr.mask);
	         //HAL_UART_Transmit(&huart1,temp,strlen(temp),100);
	         //sprintf(temp,"S:%d D:%d L:%d G:%d S:%d HS:%d MF:%d\n",wav_full_hdr_p->wav_hdr.seq_num,wav_full_hdr_p->wav_hdr.bit_depth,wav_full_hdr_p->wav_hdr.num_of_bytes,wav_full_hdr_p->wav_hdr.gain,wav_full_hdr_p->wav_hdr.sample_rate,wav_full_hdr_p->wav_hdr.sensitivity,wav_full_hdr_p->wav_hdr.full_scale_mv);
	         //HAL_UART_Transmit(&huart1,temp,strlen(temp),100);
		     sprintf(temp,"Seq:%d\n",event.value.v);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	490a      	ldr	r1, [pc, #40]	; (8000ae4 <icListen_f+0xa0>)
 8000abc:	480a      	ldr	r0, [pc, #40]	; (8000ae8 <icListen_f+0xa4>)
 8000abe:	f00a fa75 	bl	800afac <siprintf>
		     HAL_UART_Transmit(&huart1,temp,strlen(temp),100);
 8000ac2:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <icListen_f+0xa4>)
 8000ac4:	f7ff fbb4 	bl	8000230 <strlen>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	2364      	movs	r3, #100	; 0x64
 8000ace:	4906      	ldr	r1, [pc, #24]	; (8000ae8 <icListen_f+0xa4>)
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <icListen_f+0xa8>)
 8000ad2:	f003 ff9c 	bl	8004a0e <HAL_UART_Transmit>
		   }
		   prev_seq=event.value.v;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	82fb      	strh	r3, [r7, #22]
	  if(usb_status==1){
 8000ada:	e7d4      	b.n	8000a86 <icListen_f+0x42>
 8000adc:	200004c4 	.word	0x200004c4
 8000ae0:	20000458 	.word	0x20000458
 8000ae4:	0800b764 	.word	0x0800b764
 8000ae8:	20000460 	.word	0x20000460
 8000aec:	20000404 	.word	0x20000404

08000af0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d101      	bne.n	8000b06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b02:	f000 fa35 	bl	8000f70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40012c00 	.word	0x40012c00

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <Error_Handler+0x8>
	...

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_MspInit+0x68>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <HAL_MspInit+0x68>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6193      	str	r3, [r2, #24]
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_MspInit+0x68>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_MspInit+0x68>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <HAL_MspInit+0x68>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	61d3      	str	r3, [r2, #28]
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_MspInit+0x68>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	210f      	movs	r1, #15
 8000b5a:	f06f 0001 	mvn.w	r0, #1
 8000b5e:	f000 fafc 	bl	800115a <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_MspInit+0x6c>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_MspInit+0x6c>)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010000 	.word	0x40010000

08000b90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a26      	ldr	r2, [pc, #152]	; (8000c44 <HAL_SPI_MspInit+0xb4>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d145      	bne.n	8000c3c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bb0:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <HAL_SPI_MspInit+0xb8>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a24      	ldr	r2, [pc, #144]	; (8000c48 <HAL_SPI_MspInit+0xb8>)
 8000bb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <HAL_SPI_MspInit+0xb8>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <HAL_SPI_MspInit+0xb8>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a1e      	ldr	r2, [pc, #120]	; (8000c48 <HAL_SPI_MspInit+0xb8>)
 8000bce:	f043 0308 	orr.w	r3, r3, #8
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <HAL_SPI_MspInit+0xb8>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0308 	and.w	r3, r3, #8
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000be0:	2328      	movs	r3, #40	; 0x28
 8000be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4816      	ldr	r0, [pc, #88]	; (8000c4c <HAL_SPI_MspInit+0xbc>)
 8000bf4:	f000 fc1e 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bf8:	2310      	movs	r3, #16
 8000bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4810      	ldr	r0, [pc, #64]	; (8000c4c <HAL_SPI_MspInit+0xbc>)
 8000c0c:	f000 fc12 	bl	8001434 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_SPI_MspInit+0xc0>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
 8000c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c18:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_SPI_MspInit+0xc0>)
 8000c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2a:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2105      	movs	r1, #5
 8000c30:	2023      	movs	r0, #35	; 0x23
 8000c32:	f000 fa92 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000c36:	2023      	movs	r0, #35	; 0x23
 8000c38:	f000 faab 	bl	8001192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40013000 	.word	0x40013000
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010c00 	.word	0x40010c00
 8000c50:	40010000 	.word	0x40010000

08000c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c64:	d113      	bne.n	8000c8e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <HAL_TIM_Base_MspInit+0x44>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <HAL_TIM_Base_MspInit+0x44>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	61d3      	str	r3, [r2, #28]
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <HAL_TIM_Base_MspInit+0x44>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2105      	movs	r1, #5
 8000c82:	201c      	movs	r0, #28
 8000c84:	f000 fa69 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c88:	201c      	movs	r0, #28
 8000c8a:	f000 fa82 	bl	8001192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000

08000c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a20      	ldr	r2, [pc, #128]	; (8000d38 <HAL_UART_MspInit+0x9c>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d139      	bne.n	8000d30 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <HAL_UART_MspInit+0xa0>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a1e      	ldr	r2, [pc, #120]	; (8000d3c <HAL_UART_MspInit+0xa0>)
 8000cc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <HAL_UART_MspInit+0xa0>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <HAL_UART_MspInit+0xa0>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a18      	ldr	r2, [pc, #96]	; (8000d3c <HAL_UART_MspInit+0xa0>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <HAL_UART_MspInit+0xa0>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480f      	ldr	r0, [pc, #60]	; (8000d40 <HAL_UART_MspInit+0xa4>)
 8000d02:	f000 fb97 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4809      	ldr	r0, [pc, #36]	; (8000d40 <HAL_UART_MspInit+0xa4>)
 8000d1c:	f000 fb8a 	bl	8001434 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2105      	movs	r1, #5
 8000d24:	2025      	movs	r0, #37	; 0x25
 8000d26:	f000 fa18 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d2a:	2025      	movs	r0, #37	; 0x25
 8000d2c:	f000 fa31 	bl	8001192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	3720      	adds	r7, #32
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40013800 	.word	0x40013800
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010800 	.word	0x40010800

08000d44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08c      	sub	sp, #48	; 0x30
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	2019      	movs	r0, #25
 8000d5a:	f000 f9fe 	bl	800115a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d5e:	2019      	movs	r0, #25
 8000d60:	f000 fa17 	bl	8001192 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <HAL_InitTick+0x9c>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a1d      	ldr	r2, [pc, #116]	; (8000de0 <HAL_InitTick+0x9c>)
 8000d6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <HAL_InitTick+0x9c>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d7c:	f107 0210 	add.w	r2, r7, #16
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4611      	mov	r1, r2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 feda 	bl	8003b40 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d8c:	f002 fec4 	bl	8003b18 <HAL_RCC_GetPCLK2Freq>
 8000d90:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d94:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <HAL_InitTick+0xa0>)
 8000d96:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9a:	0c9b      	lsrs	r3, r3, #18
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_InitTick+0xa4>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <HAL_InitTick+0xa8>)
 8000da4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <HAL_InitTick+0xa4>)
 8000da8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000dae:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <HAL_InitTick+0xa4>)
 8000db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_InitTick+0xa4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_InitTick+0xa4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000dc0:	4809      	ldr	r0, [pc, #36]	; (8000de8 <HAL_InitTick+0xa4>)
 8000dc2:	f003 f9c4 	bl	800414e <HAL_TIM_Base_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d104      	bne.n	8000dd6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000dcc:	4806      	ldr	r0, [pc, #24]	; (8000de8 <HAL_InitTick+0xa4>)
 8000dce:	f003 fa0d 	bl	80041ec <HAL_TIM_Base_Start_IT>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3730      	adds	r7, #48	; 0x30
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40021000 	.word	0x40021000
 8000de4:	431bde83 	.word	0x431bde83
 8000de8:	200004c8 	.word	0x200004c8
 8000dec:	40012c00 	.word	0x40012c00

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
	...

08000e1c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <TIM1_UP_IRQHandler+0x10>)
 8000e22:	f003 fa3d 	bl	80042a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200004c8 	.word	0x200004c8

08000e30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <TIM2_IRQHandler+0x10>)
 8000e36:	f003 fa33 	bl	80042a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200003bc 	.word	0x200003bc

08000e44 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <SPI1_IRQHandler+0x10>)
 8000e4a:	f003 f87d 	bl	8003f48 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000364 	.word	0x20000364

08000e58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <USART1_IRQHandler+0x10>)
 8000e5e:	f003 fe69 	bl	8004b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000404 	.word	0x20000404

08000e6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <OTG_FS_IRQHandler+0x10>)
 8000e72:	f000 fee1 	bl	8001c38 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20003924 	.word	0x20003924

08000e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e88:	4a14      	ldr	r2, [pc, #80]	; (8000edc <_sbrk+0x5c>)
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <_sbrk+0x60>)
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <_sbrk+0x64>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <_sbrk+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d207      	bcs.n	8000ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb0:	f009 fed4 	bl	800ac5c <__errno>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	e009      	b.n	8000ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <_sbrk+0x64>)
 8000ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20010000 	.word	0x20010000
 8000ee0:	00000400 	.word	0x00000400
 8000ee4:	20000510 	.word	0x20000510
 8000ee8:	20003c38 	.word	0x20003c38

08000eec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000efa:	490d      	ldr	r1, [pc, #52]	; (8000f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f10:	4c0a      	ldr	r4, [pc, #40]	; (8000f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f1e:	f7ff ffe5 	bl	8000eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f22:	f009 fea1 	bl	800ac68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f26:	f7ff fb27 	bl	8000578 <main>
  bx lr
 8000f2a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000f34:	0800b90c 	.word	0x0800b90c
  ldr r2, =_sbss
 8000f38:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000f3c:	20003c38 	.word	0x20003c38

08000f40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC1_2_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_Init+0x28>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_Init+0x28>)
 8000f4e:	f043 0310 	orr.w	r3, r3, #16
 8000f52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 f8f5 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f7ff fef2 	bl	8000d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff fdde 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40022000 	.word	0x40022000

08000f70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x1c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_IncTick+0x20>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a03      	ldr	r2, [pc, #12]	; (8000f90 <HAL_IncTick+0x20>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000514 	.word	0x20000514

08000f94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b02      	ldr	r3, [pc, #8]	; (8000fa4 <HAL_GetTick+0x10>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	20000514 	.word	0x20000514

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff fff0 	bl	8000f94 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffe0 	bl	8000f94 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db0b      	blt.n	800107e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	4906      	ldr	r1, [pc, #24]	; (8001088 <__NVIC_EnableIRQ+0x34>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	2001      	movs	r0, #1
 8001076:	fa00 f202 	lsl.w	r2, r0, r2
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	e000e100 	.word	0xe000e100

0800108c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	db0a      	blt.n	80010b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	490c      	ldr	r1, [pc, #48]	; (80010d8 <__NVIC_SetPriority+0x4c>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b4:	e00a      	b.n	80010cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4908      	ldr	r1, [pc, #32]	; (80010dc <__NVIC_SetPriority+0x50>)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	3b04      	subs	r3, #4
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	440b      	add	r3, r1
 80010ca:	761a      	strb	r2, [r3, #24]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f1c3 0307 	rsb	r3, r3, #7
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	bf28      	it	cs
 80010fe:	2304      	movcs	r3, #4
 8001100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3304      	adds	r3, #4
 8001106:	2b06      	cmp	r3, #6
 8001108:	d902      	bls.n	8001110 <NVIC_EncodePriority+0x30>
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3b03      	subs	r3, #3
 800110e:	e000      	b.n	8001112 <NVIC_EncodePriority+0x32>
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	f04f 32ff 	mov.w	r2, #4294967295
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43da      	mvns	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001128:	f04f 31ff 	mov.w	r1, #4294967295
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	43d9      	mvns	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	4313      	orrs	r3, r2
         );
}
 800113a:	4618      	mov	r0, r3
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff4f 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800116c:	f7ff ff64 	bl	8001038 <__NVIC_GetPriorityGrouping>
 8001170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	6978      	ldr	r0, [r7, #20]
 8001178:	f7ff ffb2 	bl	80010e0 <NVIC_EncodePriority>
 800117c:	4602      	mov	r2, r0
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff81 	bl	800108c <__NVIC_SetPriority>
}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff57 	bl	8001054 <__NVIC_EnableIRQ>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b085      	sub	sp, #20
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d008      	beq.n	80011d6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2204      	movs	r2, #4
 80011c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e020      	b.n	8001218 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f022 020e 	bic.w	r2, r2, #14
 80011e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0201 	bic.w	r2, r2, #1
 80011f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011fe:	2101      	movs	r1, #1
 8001200:	fa01 f202 	lsl.w	r2, r1, r2
 8001204:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001216:	7bfb      	ldrb	r3, [r7, #15]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
	...

08001224 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001236:	2b02      	cmp	r3, #2
 8001238:	d005      	beq.n	8001246 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2204      	movs	r2, #4
 800123e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e0d6      	b.n	80013f4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 020e 	bic.w	r2, r2, #14
 8001254:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 0201 	bic.w	r2, r2, #1
 8001264:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	4b64      	ldr	r3, [pc, #400]	; (8001400 <HAL_DMA_Abort_IT+0x1dc>)
 800126e:	429a      	cmp	r2, r3
 8001270:	d958      	bls.n	8001324 <HAL_DMA_Abort_IT+0x100>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a63      	ldr	r2, [pc, #396]	; (8001404 <HAL_DMA_Abort_IT+0x1e0>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d04f      	beq.n	800131c <HAL_DMA_Abort_IT+0xf8>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a61      	ldr	r2, [pc, #388]	; (8001408 <HAL_DMA_Abort_IT+0x1e4>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d048      	beq.n	8001318 <HAL_DMA_Abort_IT+0xf4>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a60      	ldr	r2, [pc, #384]	; (800140c <HAL_DMA_Abort_IT+0x1e8>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d040      	beq.n	8001312 <HAL_DMA_Abort_IT+0xee>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a5e      	ldr	r2, [pc, #376]	; (8001410 <HAL_DMA_Abort_IT+0x1ec>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d038      	beq.n	800130c <HAL_DMA_Abort_IT+0xe8>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a5d      	ldr	r2, [pc, #372]	; (8001414 <HAL_DMA_Abort_IT+0x1f0>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d030      	beq.n	8001306 <HAL_DMA_Abort_IT+0xe2>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a5b      	ldr	r2, [pc, #364]	; (8001418 <HAL_DMA_Abort_IT+0x1f4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d028      	beq.n	8001300 <HAL_DMA_Abort_IT+0xdc>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a53      	ldr	r2, [pc, #332]	; (8001400 <HAL_DMA_Abort_IT+0x1dc>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d020      	beq.n	80012fa <HAL_DMA_Abort_IT+0xd6>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a57      	ldr	r2, [pc, #348]	; (800141c <HAL_DMA_Abort_IT+0x1f8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d019      	beq.n	80012f6 <HAL_DMA_Abort_IT+0xd2>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a56      	ldr	r2, [pc, #344]	; (8001420 <HAL_DMA_Abort_IT+0x1fc>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d012      	beq.n	80012f2 <HAL_DMA_Abort_IT+0xce>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a54      	ldr	r2, [pc, #336]	; (8001424 <HAL_DMA_Abort_IT+0x200>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00a      	beq.n	80012ec <HAL_DMA_Abort_IT+0xc8>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a53      	ldr	r2, [pc, #332]	; (8001428 <HAL_DMA_Abort_IT+0x204>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d102      	bne.n	80012e6 <HAL_DMA_Abort_IT+0xc2>
 80012e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e4:	e01b      	b.n	800131e <HAL_DMA_Abort_IT+0xfa>
 80012e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ea:	e018      	b.n	800131e <HAL_DMA_Abort_IT+0xfa>
 80012ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f0:	e015      	b.n	800131e <HAL_DMA_Abort_IT+0xfa>
 80012f2:	2310      	movs	r3, #16
 80012f4:	e013      	b.n	800131e <HAL_DMA_Abort_IT+0xfa>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e011      	b.n	800131e <HAL_DMA_Abort_IT+0xfa>
 80012fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012fe:	e00e      	b.n	800131e <HAL_DMA_Abort_IT+0xfa>
 8001300:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001304:	e00b      	b.n	800131e <HAL_DMA_Abort_IT+0xfa>
 8001306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800130a:	e008      	b.n	800131e <HAL_DMA_Abort_IT+0xfa>
 800130c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001310:	e005      	b.n	800131e <HAL_DMA_Abort_IT+0xfa>
 8001312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001316:	e002      	b.n	800131e <HAL_DMA_Abort_IT+0xfa>
 8001318:	2310      	movs	r3, #16
 800131a:	e000      	b.n	800131e <HAL_DMA_Abort_IT+0xfa>
 800131c:	2301      	movs	r3, #1
 800131e:	4a43      	ldr	r2, [pc, #268]	; (800142c <HAL_DMA_Abort_IT+0x208>)
 8001320:	6053      	str	r3, [r2, #4]
 8001322:	e057      	b.n	80013d4 <HAL_DMA_Abort_IT+0x1b0>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a36      	ldr	r2, [pc, #216]	; (8001404 <HAL_DMA_Abort_IT+0x1e0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d04f      	beq.n	80013ce <HAL_DMA_Abort_IT+0x1aa>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a35      	ldr	r2, [pc, #212]	; (8001408 <HAL_DMA_Abort_IT+0x1e4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d048      	beq.n	80013ca <HAL_DMA_Abort_IT+0x1a6>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a33      	ldr	r2, [pc, #204]	; (800140c <HAL_DMA_Abort_IT+0x1e8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d040      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x1a0>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a32      	ldr	r2, [pc, #200]	; (8001410 <HAL_DMA_Abort_IT+0x1ec>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d038      	beq.n	80013be <HAL_DMA_Abort_IT+0x19a>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a30      	ldr	r2, [pc, #192]	; (8001414 <HAL_DMA_Abort_IT+0x1f0>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d030      	beq.n	80013b8 <HAL_DMA_Abort_IT+0x194>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a2f      	ldr	r2, [pc, #188]	; (8001418 <HAL_DMA_Abort_IT+0x1f4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d028      	beq.n	80013b2 <HAL_DMA_Abort_IT+0x18e>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a26      	ldr	r2, [pc, #152]	; (8001400 <HAL_DMA_Abort_IT+0x1dc>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d020      	beq.n	80013ac <HAL_DMA_Abort_IT+0x188>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a2b      	ldr	r2, [pc, #172]	; (800141c <HAL_DMA_Abort_IT+0x1f8>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d019      	beq.n	80013a8 <HAL_DMA_Abort_IT+0x184>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a29      	ldr	r2, [pc, #164]	; (8001420 <HAL_DMA_Abort_IT+0x1fc>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d012      	beq.n	80013a4 <HAL_DMA_Abort_IT+0x180>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a28      	ldr	r2, [pc, #160]	; (8001424 <HAL_DMA_Abort_IT+0x200>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d00a      	beq.n	800139e <HAL_DMA_Abort_IT+0x17a>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a26      	ldr	r2, [pc, #152]	; (8001428 <HAL_DMA_Abort_IT+0x204>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d102      	bne.n	8001398 <HAL_DMA_Abort_IT+0x174>
 8001392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001396:	e01b      	b.n	80013d0 <HAL_DMA_Abort_IT+0x1ac>
 8001398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139c:	e018      	b.n	80013d0 <HAL_DMA_Abort_IT+0x1ac>
 800139e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a2:	e015      	b.n	80013d0 <HAL_DMA_Abort_IT+0x1ac>
 80013a4:	2310      	movs	r3, #16
 80013a6:	e013      	b.n	80013d0 <HAL_DMA_Abort_IT+0x1ac>
 80013a8:	2301      	movs	r3, #1
 80013aa:	e011      	b.n	80013d0 <HAL_DMA_Abort_IT+0x1ac>
 80013ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013b0:	e00e      	b.n	80013d0 <HAL_DMA_Abort_IT+0x1ac>
 80013b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013b6:	e00b      	b.n	80013d0 <HAL_DMA_Abort_IT+0x1ac>
 80013b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013bc:	e008      	b.n	80013d0 <HAL_DMA_Abort_IT+0x1ac>
 80013be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c2:	e005      	b.n	80013d0 <HAL_DMA_Abort_IT+0x1ac>
 80013c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c8:	e002      	b.n	80013d0 <HAL_DMA_Abort_IT+0x1ac>
 80013ca:	2310      	movs	r3, #16
 80013cc:	e000      	b.n	80013d0 <HAL_DMA_Abort_IT+0x1ac>
 80013ce:	2301      	movs	r3, #1
 80013d0:	4a17      	ldr	r2, [pc, #92]	; (8001430 <HAL_DMA_Abort_IT+0x20c>)
 80013d2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	4798      	blx	r3
    } 
  }
  return status;
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40020080 	.word	0x40020080
 8001404:	40020008 	.word	0x40020008
 8001408:	4002001c 	.word	0x4002001c
 800140c:	40020030 	.word	0x40020030
 8001410:	40020044 	.word	0x40020044
 8001414:	40020058 	.word	0x40020058
 8001418:	4002006c 	.word	0x4002006c
 800141c:	40020408 	.word	0x40020408
 8001420:	4002041c 	.word	0x4002041c
 8001424:	40020430 	.word	0x40020430
 8001428:	40020444 	.word	0x40020444
 800142c:	40020400 	.word	0x40020400
 8001430:	40020000 	.word	0x40020000

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b08b      	sub	sp, #44	; 0x2c
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001446:	e169      	b.n	800171c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001448:	2201      	movs	r2, #1
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	69fa      	ldr	r2, [r7, #28]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	429a      	cmp	r2, r3
 8001462:	f040 8158 	bne.w	8001716 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4a9a      	ldr	r2, [pc, #616]	; (80016d4 <HAL_GPIO_Init+0x2a0>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d05e      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 8001470:	4a98      	ldr	r2, [pc, #608]	; (80016d4 <HAL_GPIO_Init+0x2a0>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d875      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 8001476:	4a98      	ldr	r2, [pc, #608]	; (80016d8 <HAL_GPIO_Init+0x2a4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d058      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 800147c:	4a96      	ldr	r2, [pc, #600]	; (80016d8 <HAL_GPIO_Init+0x2a4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d86f      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 8001482:	4a96      	ldr	r2, [pc, #600]	; (80016dc <HAL_GPIO_Init+0x2a8>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d052      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 8001488:	4a94      	ldr	r2, [pc, #592]	; (80016dc <HAL_GPIO_Init+0x2a8>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d869      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 800148e:	4a94      	ldr	r2, [pc, #592]	; (80016e0 <HAL_GPIO_Init+0x2ac>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d04c      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 8001494:	4a92      	ldr	r2, [pc, #584]	; (80016e0 <HAL_GPIO_Init+0x2ac>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d863      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 800149a:	4a92      	ldr	r2, [pc, #584]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d046      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 80014a0:	4a90      	ldr	r2, [pc, #576]	; (80016e4 <HAL_GPIO_Init+0x2b0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d85d      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 80014a6:	2b12      	cmp	r3, #18
 80014a8:	d82a      	bhi.n	8001500 <HAL_GPIO_Init+0xcc>
 80014aa:	2b12      	cmp	r3, #18
 80014ac:	d859      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 80014ae:	a201      	add	r2, pc, #4	; (adr r2, 80014b4 <HAL_GPIO_Init+0x80>)
 80014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b4:	0800152f 	.word	0x0800152f
 80014b8:	08001509 	.word	0x08001509
 80014bc:	0800151b 	.word	0x0800151b
 80014c0:	0800155d 	.word	0x0800155d
 80014c4:	08001563 	.word	0x08001563
 80014c8:	08001563 	.word	0x08001563
 80014cc:	08001563 	.word	0x08001563
 80014d0:	08001563 	.word	0x08001563
 80014d4:	08001563 	.word	0x08001563
 80014d8:	08001563 	.word	0x08001563
 80014dc:	08001563 	.word	0x08001563
 80014e0:	08001563 	.word	0x08001563
 80014e4:	08001563 	.word	0x08001563
 80014e8:	08001563 	.word	0x08001563
 80014ec:	08001563 	.word	0x08001563
 80014f0:	08001563 	.word	0x08001563
 80014f4:	08001563 	.word	0x08001563
 80014f8:	08001511 	.word	0x08001511
 80014fc:	08001525 	.word	0x08001525
 8001500:	4a79      	ldr	r2, [pc, #484]	; (80016e8 <HAL_GPIO_Init+0x2b4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d013      	beq.n	800152e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001506:	e02c      	b.n	8001562 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	623b      	str	r3, [r7, #32]
          break;
 800150e:	e029      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	3304      	adds	r3, #4
 8001516:	623b      	str	r3, [r7, #32]
          break;
 8001518:	e024      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	3308      	adds	r3, #8
 8001520:	623b      	str	r3, [r7, #32]
          break;
 8001522:	e01f      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	330c      	adds	r3, #12
 800152a:	623b      	str	r3, [r7, #32]
          break;
 800152c:	e01a      	b.n	8001564 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001536:	2304      	movs	r3, #4
 8001538:	623b      	str	r3, [r7, #32]
          break;
 800153a:	e013      	b.n	8001564 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d105      	bne.n	8001550 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001544:	2308      	movs	r3, #8
 8001546:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	611a      	str	r2, [r3, #16]
          break;
 800154e:	e009      	b.n	8001564 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001550:	2308      	movs	r3, #8
 8001552:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	615a      	str	r2, [r3, #20]
          break;
 800155a:	e003      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	e000      	b.n	8001564 <HAL_GPIO_Init+0x130>
          break;
 8001562:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2bff      	cmp	r3, #255	; 0xff
 8001568:	d801      	bhi.n	800156e <HAL_GPIO_Init+0x13a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	e001      	b.n	8001572 <HAL_GPIO_Init+0x13e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3304      	adds	r3, #4
 8001572:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2bff      	cmp	r3, #255	; 0xff
 8001578:	d802      	bhi.n	8001580 <HAL_GPIO_Init+0x14c>
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	e002      	b.n	8001586 <HAL_GPIO_Init+0x152>
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	3b08      	subs	r3, #8
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	210f      	movs	r1, #15
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	401a      	ands	r2, r3
 8001598:	6a39      	ldr	r1, [r7, #32]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	431a      	orrs	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 80b1 	beq.w	8001716 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015b4:	4b4d      	ldr	r3, [pc, #308]	; (80016ec <HAL_GPIO_Init+0x2b8>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a4c      	ldr	r2, [pc, #304]	; (80016ec <HAL_GPIO_Init+0x2b8>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <HAL_GPIO_Init+0x2b8>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015cc:	4a48      	ldr	r2, [pc, #288]	; (80016f0 <HAL_GPIO_Init+0x2bc>)
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	220f      	movs	r2, #15
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a40      	ldr	r2, [pc, #256]	; (80016f4 <HAL_GPIO_Init+0x2c0>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d013      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a3f      	ldr	r2, [pc, #252]	; (80016f8 <HAL_GPIO_Init+0x2c4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d00d      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a3e      	ldr	r2, [pc, #248]	; (80016fc <HAL_GPIO_Init+0x2c8>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d007      	beq.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a3d      	ldr	r2, [pc, #244]	; (8001700 <HAL_GPIO_Init+0x2cc>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d101      	bne.n	8001614 <HAL_GPIO_Init+0x1e0>
 8001610:	2303      	movs	r3, #3
 8001612:	e006      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 8001614:	2304      	movs	r3, #4
 8001616:	e004      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 8001618:	2302      	movs	r3, #2
 800161a:	e002      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 8001620:	2300      	movs	r3, #0
 8001622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001624:	f002 0203 	and.w	r2, r2, #3
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	4093      	lsls	r3, r2
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4313      	orrs	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001632:	492f      	ldr	r1, [pc, #188]	; (80016f0 <HAL_GPIO_Init+0x2bc>)
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3302      	adds	r3, #2
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800164c:	4b2d      	ldr	r3, [pc, #180]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	492c      	ldr	r1, [pc, #176]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	600b      	str	r3, [r1, #0]
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800165a:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	43db      	mvns	r3, r3
 8001662:	4928      	ldr	r1, [pc, #160]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 8001664:	4013      	ands	r3, r2
 8001666:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d006      	beq.n	8001682 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001674:	4b23      	ldr	r3, [pc, #140]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	4922      	ldr	r1, [pc, #136]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
 8001680:	e006      	b.n	8001690 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	43db      	mvns	r3, r3
 800168a:	491e      	ldr	r1, [pc, #120]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 800168c:	4013      	ands	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	4918      	ldr	r1, [pc, #96]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	608b      	str	r3, [r1, #8]
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4914      	ldr	r1, [pc, #80]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d021      	beq.n	8001708 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	490e      	ldr	r1, [pc, #56]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	60cb      	str	r3, [r1, #12]
 80016d0:	e021      	b.n	8001716 <HAL_GPIO_Init+0x2e2>
 80016d2:	bf00      	nop
 80016d4:	10320000 	.word	0x10320000
 80016d8:	10310000 	.word	0x10310000
 80016dc:	10220000 	.word	0x10220000
 80016e0:	10210000 	.word	0x10210000
 80016e4:	10120000 	.word	0x10120000
 80016e8:	10110000 	.word	0x10110000
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000
 80016f4:	40010800 	.word	0x40010800
 80016f8:	40010c00 	.word	0x40010c00
 80016fc:	40011000 	.word	0x40011000
 8001700:	40011400 	.word	0x40011400
 8001704:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_GPIO_Init+0x304>)
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	43db      	mvns	r3, r3
 8001710:	4909      	ldr	r1, [pc, #36]	; (8001738 <HAL_GPIO_Init+0x304>)
 8001712:	4013      	ands	r3, r2
 8001714:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	3301      	adds	r3, #1
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	fa22 f303 	lsr.w	r3, r2, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	f47f ae8e 	bne.w	8001448 <HAL_GPIO_Init+0x14>
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	372c      	adds	r7, #44	; 0x2c
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	40010400 	.word	0x40010400

0800173c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
 8001748:	4613      	mov	r3, r2
 800174a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800174c:	787b      	ldrb	r3, [r7, #1]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001758:	e003      	b.n	8001762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	041a      	lsls	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	611a      	str	r2, [r3, #16]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800176c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800176e:	b08f      	sub	sp, #60	; 0x3c
 8001770:	af0a      	add	r7, sp, #40	; 0x28
 8001772:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e054      	b.n	8001828 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d106      	bne.n	800179e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f008 fff5 	bl	800a788 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2203      	movs	r2, #3
 80017a2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f003 fddb 	bl	8005378 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	687e      	ldr	r6, [r7, #4]
 80017ca:	466d      	mov	r5, sp
 80017cc:	f106 0410 	add.w	r4, r6, #16
 80017d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80017e0:	1d33      	adds	r3, r6, #4
 80017e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e4:	6838      	ldr	r0, [r7, #0]
 80017e6:	f003 fd95 	bl	8005314 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2101      	movs	r1, #1
 80017f0:	4618      	mov	r0, r3
 80017f2:	f003 fdd1 	bl	8005398 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	687e      	ldr	r6, [r7, #4]
 80017fe:	466d      	mov	r5, sp
 8001800:	f106 0410 	add.w	r4, r6, #16
 8001804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001806:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800180a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001810:	e885 0003 	stmia.w	r5, {r0, r1}
 8001814:	1d33      	adds	r3, r6, #4
 8001816:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001818:	6838      	ldr	r0, [r7, #0]
 800181a:	f003 ff2f 	bl	800567c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001830 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b089      	sub	sp, #36	; 0x24
 8001834:	af04      	add	r7, sp, #16
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	4608      	mov	r0, r1
 800183a:	4611      	mov	r1, r2
 800183c:	461a      	mov	r2, r3
 800183e:	4603      	mov	r3, r0
 8001840:	70fb      	strb	r3, [r7, #3]
 8001842:	460b      	mov	r3, r1
 8001844:	70bb      	strb	r3, [r7, #2]
 8001846:	4613      	mov	r3, r2
 8001848:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_HCD_HC_Init+0x28>
 8001854:	2302      	movs	r3, #2
 8001856:	e076      	b.n	8001946 <HAL_HCD_HC_Init+0x116>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	212c      	movs	r1, #44	; 0x2c
 8001866:	fb01 f303 	mul.w	r3, r1, r3
 800186a:	4413      	add	r3, r2
 800186c:	333d      	adds	r3, #61	; 0x3d
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	212c      	movs	r1, #44	; 0x2c
 8001878:	fb01 f303 	mul.w	r3, r1, r3
 800187c:	4413      	add	r3, r2
 800187e:	3338      	adds	r3, #56	; 0x38
 8001880:	787a      	ldrb	r2, [r7, #1]
 8001882:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	212c      	movs	r1, #44	; 0x2c
 800188a:	fb01 f303 	mul.w	r3, r1, r3
 800188e:	4413      	add	r3, r2
 8001890:	3340      	adds	r3, #64	; 0x40
 8001892:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001894:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001896:	78fb      	ldrb	r3, [r7, #3]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	212c      	movs	r1, #44	; 0x2c
 800189c:	fb01 f303 	mul.w	r3, r1, r3
 80018a0:	4413      	add	r3, r2
 80018a2:	3339      	adds	r3, #57	; 0x39
 80018a4:	78fa      	ldrb	r2, [r7, #3]
 80018a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	212c      	movs	r1, #44	; 0x2c
 80018ae:	fb01 f303 	mul.w	r3, r1, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	333f      	adds	r3, #63	; 0x3f
 80018b6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	78ba      	ldrb	r2, [r7, #2]
 80018c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018c4:	b2d0      	uxtb	r0, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	212c      	movs	r1, #44	; 0x2c
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	333a      	adds	r3, #58	; 0x3a
 80018d2:	4602      	mov	r2, r0
 80018d4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80018d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	da09      	bge.n	80018f2 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	212c      	movs	r1, #44	; 0x2c
 80018e4:	fb01 f303 	mul.w	r3, r1, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	333b      	adds	r3, #59	; 0x3b
 80018ec:	2201      	movs	r2, #1
 80018ee:	701a      	strb	r2, [r3, #0]
 80018f0:	e008      	b.n	8001904 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	212c      	movs	r1, #44	; 0x2c
 80018f8:	fb01 f303 	mul.w	r3, r1, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	333b      	adds	r3, #59	; 0x3b
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	212c      	movs	r1, #44	; 0x2c
 800190a:	fb01 f303 	mul.w	r3, r1, r3
 800190e:	4413      	add	r3, r2
 8001910:	333c      	adds	r3, #60	; 0x3c
 8001912:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001916:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	787c      	ldrb	r4, [r7, #1]
 800191e:	78ba      	ldrb	r2, [r7, #2]
 8001920:	78f9      	ldrb	r1, [r7, #3]
 8001922:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	4623      	mov	r3, r4
 8001934:	f003 ffda 	bl	80058ec <USB_HC_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	bd90      	pop	{r4, r7, pc}

0800194e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b084      	sub	sp, #16
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	460b      	mov	r3, r1
 8001958:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_HCD_HC_Halt+0x1e>
 8001968:	2302      	movs	r3, #2
 800196a:	e00f      	b.n	800198c <HAL_HCD_HC_Halt+0x3e>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f004 f9b5 	bl	8005cec <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800198a:	7bfb      	ldrb	r3, [r7, #15]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	4608      	mov	r0, r1
 800199e:	4611      	mov	r1, r2
 80019a0:	461a      	mov	r2, r3
 80019a2:	4603      	mov	r3, r0
 80019a4:	70fb      	strb	r3, [r7, #3]
 80019a6:	460b      	mov	r3, r1
 80019a8:	70bb      	strb	r3, [r7, #2]
 80019aa:	4613      	mov	r3, r2
 80019ac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	212c      	movs	r1, #44	; 0x2c
 80019b4:	fb01 f303 	mul.w	r3, r1, r3
 80019b8:	4413      	add	r3, r2
 80019ba:	333b      	adds	r3, #59	; 0x3b
 80019bc:	78ba      	ldrb	r2, [r7, #2]
 80019be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	212c      	movs	r1, #44	; 0x2c
 80019c6:	fb01 f303 	mul.w	r3, r1, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	333f      	adds	r3, #63	; 0x3f
 80019ce:	787a      	ldrb	r2, [r7, #1]
 80019d0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80019d2:	7c3b      	ldrb	r3, [r7, #16]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d112      	bne.n	80019fe <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	212c      	movs	r1, #44	; 0x2c
 80019de:	fb01 f303 	mul.w	r3, r1, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	3342      	adds	r3, #66	; 0x42
 80019e6:	2203      	movs	r2, #3
 80019e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	212c      	movs	r1, #44	; 0x2c
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	333d      	adds	r3, #61	; 0x3d
 80019f8:	7f3a      	ldrb	r2, [r7, #28]
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	e008      	b.n	8001a10 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	212c      	movs	r1, #44	; 0x2c
 8001a04:	fb01 f303 	mul.w	r3, r1, r3
 8001a08:	4413      	add	r3, r2
 8001a0a:	3342      	adds	r3, #66	; 0x42
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a10:	787b      	ldrb	r3, [r7, #1]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	f200 80c6 	bhi.w	8001ba4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001a18:	a201      	add	r2, pc, #4	; (adr r2, 8001a20 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1e:	bf00      	nop
 8001a20:	08001a31 	.word	0x08001a31
 8001a24:	08001b91 	.word	0x08001b91
 8001a28:	08001a95 	.word	0x08001a95
 8001a2c:	08001b13 	.word	0x08001b13
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a30:	7c3b      	ldrb	r3, [r7, #16]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	f040 80b8 	bne.w	8001ba8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001a38:	78bb      	ldrb	r3, [r7, #2]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f040 80b4 	bne.w	8001ba8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001a40:	8b3b      	ldrh	r3, [r7, #24]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d108      	bne.n	8001a58 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	212c      	movs	r1, #44	; 0x2c
 8001a4c:	fb01 f303 	mul.w	r3, r1, r3
 8001a50:	4413      	add	r3, r2
 8001a52:	3355      	adds	r3, #85	; 0x55
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	212c      	movs	r1, #44	; 0x2c
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	3355      	adds	r3, #85	; 0x55
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d109      	bne.n	8001a80 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	212c      	movs	r1, #44	; 0x2c
 8001a72:	fb01 f303 	mul.w	r3, r1, r3
 8001a76:	4413      	add	r3, r2
 8001a78:	3342      	adds	r3, #66	; 0x42
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a7e:	e093      	b.n	8001ba8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	212c      	movs	r1, #44	; 0x2c
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3342      	adds	r3, #66	; 0x42
 8001a8e:	2202      	movs	r2, #2
 8001a90:	701a      	strb	r2, [r3, #0]
      break;
 8001a92:	e089      	b.n	8001ba8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a94:	78bb      	ldrb	r3, [r7, #2]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d11d      	bne.n	8001ad6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	212c      	movs	r1, #44	; 0x2c
 8001aa0:	fb01 f303 	mul.w	r3, r1, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3355      	adds	r3, #85	; 0x55
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d109      	bne.n	8001ac2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	212c      	movs	r1, #44	; 0x2c
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	3342      	adds	r3, #66	; 0x42
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ac0:	e073      	b.n	8001baa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ac2:	78fb      	ldrb	r3, [r7, #3]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	212c      	movs	r1, #44	; 0x2c
 8001ac8:	fb01 f303 	mul.w	r3, r1, r3
 8001acc:	4413      	add	r3, r2
 8001ace:	3342      	adds	r3, #66	; 0x42
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	701a      	strb	r2, [r3, #0]
      break;
 8001ad4:	e069      	b.n	8001baa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ad6:	78fb      	ldrb	r3, [r7, #3]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	212c      	movs	r1, #44	; 0x2c
 8001adc:	fb01 f303 	mul.w	r3, r1, r3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3354      	adds	r3, #84	; 0x54
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d109      	bne.n	8001afe <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	212c      	movs	r1, #44	; 0x2c
 8001af0:	fb01 f303 	mul.w	r3, r1, r3
 8001af4:	4413      	add	r3, r2
 8001af6:	3342      	adds	r3, #66	; 0x42
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
      break;
 8001afc:	e055      	b.n	8001baa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	212c      	movs	r1, #44	; 0x2c
 8001b04:	fb01 f303 	mul.w	r3, r1, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	3342      	adds	r3, #66	; 0x42
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	701a      	strb	r2, [r3, #0]
      break;
 8001b10:	e04b      	b.n	8001baa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b12:	78bb      	ldrb	r3, [r7, #2]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d11d      	bne.n	8001b54 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	212c      	movs	r1, #44	; 0x2c
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	3355      	adds	r3, #85	; 0x55
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d109      	bne.n	8001b40 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	212c      	movs	r1, #44	; 0x2c
 8001b32:	fb01 f303 	mul.w	r3, r1, r3
 8001b36:	4413      	add	r3, r2
 8001b38:	3342      	adds	r3, #66	; 0x42
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b3e:	e034      	b.n	8001baa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	212c      	movs	r1, #44	; 0x2c
 8001b46:	fb01 f303 	mul.w	r3, r1, r3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3342      	adds	r3, #66	; 0x42
 8001b4e:	2202      	movs	r2, #2
 8001b50:	701a      	strb	r2, [r3, #0]
      break;
 8001b52:	e02a      	b.n	8001baa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	212c      	movs	r1, #44	; 0x2c
 8001b5a:	fb01 f303 	mul.w	r3, r1, r3
 8001b5e:	4413      	add	r3, r2
 8001b60:	3354      	adds	r3, #84	; 0x54
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d109      	bne.n	8001b7c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	212c      	movs	r1, #44	; 0x2c
 8001b6e:	fb01 f303 	mul.w	r3, r1, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	3342      	adds	r3, #66	; 0x42
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
      break;
 8001b7a:	e016      	b.n	8001baa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	212c      	movs	r1, #44	; 0x2c
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	3342      	adds	r3, #66	; 0x42
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	701a      	strb	r2, [r3, #0]
      break;
 8001b8e:	e00c      	b.n	8001baa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	212c      	movs	r1, #44	; 0x2c
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3342      	adds	r3, #66	; 0x42
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
      break;
 8001ba2:	e002      	b.n	8001baa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001ba4:	bf00      	nop
 8001ba6:	e000      	b.n	8001baa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001ba8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	212c      	movs	r1, #44	; 0x2c
 8001bb0:	fb01 f303 	mul.w	r3, r1, r3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3344      	adds	r3, #68	; 0x44
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	8b3a      	ldrh	r2, [r7, #24]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	202c      	movs	r0, #44	; 0x2c
 8001bc4:	fb00 f303 	mul.w	r3, r0, r3
 8001bc8:	440b      	add	r3, r1
 8001bca:	334c      	adds	r3, #76	; 0x4c
 8001bcc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	212c      	movs	r1, #44	; 0x2c
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	3360      	adds	r3, #96	; 0x60
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	212c      	movs	r1, #44	; 0x2c
 8001be6:	fb01 f303 	mul.w	r3, r1, r3
 8001bea:	4413      	add	r3, r2
 8001bec:	3350      	adds	r3, #80	; 0x50
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	212c      	movs	r1, #44	; 0x2c
 8001bf8:	fb01 f303 	mul.w	r3, r1, r3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3339      	adds	r3, #57	; 0x39
 8001c00:	78fa      	ldrb	r2, [r7, #3]
 8001c02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	212c      	movs	r1, #44	; 0x2c
 8001c0a:	fb01 f303 	mul.w	r3, r1, r3
 8001c0e:	4413      	add	r3, r2
 8001c10:	3361      	adds	r3, #97	; 0x61
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	222c      	movs	r2, #44	; 0x2c
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	3338      	adds	r3, #56	; 0x38
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	4413      	add	r3, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f003 ff57 	bl	8005adc <USB_HC_StartXfer>
 8001c2e:	4603      	mov	r3, r0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fcd4 	bl	80055fc <USB_GetMode>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	f040 80ef 	bne.w	8001e3a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f003 fcb9 	bl	80055d8 <USB_ReadInterrupts>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80e5 	beq.w	8001e38 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 fcb0 	bl	80055d8 <USB_ReadInterrupts>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c82:	d104      	bne.n	8001c8e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 fca0 	bl	80055d8 <USB_ReadInterrupts>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ca2:	d104      	bne.n	8001cae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 fc90 	bl	80055d8 <USB_ReadInterrupts>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cc2:	d104      	bne.n	8001cce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ccc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 fc80 	bl	80055d8 <USB_ReadInterrupts>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d103      	bne.n	8001cea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f003 fc72 	bl	80055d8 <USB_ReadInterrupts>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cfe:	d115      	bne.n	8001d2c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d08:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d108      	bne.n	8001d2c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f008 fd74 	bl	800a808 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2101      	movs	r1, #1
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 fd1e 	bl	8005768 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 fc51 	bl	80055d8 <USB_ReadInterrupts>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d40:	d102      	bne.n	8001d48 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f001 f978 	bl	8003038 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 fc43 	bl	80055d8 <USB_ReadInterrupts>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d106      	bne.n	8001d6a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f008 fd37 	bl	800a7d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2208      	movs	r2, #8
 8001d68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 fc32 	bl	80055d8 <USB_ReadInterrupts>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d101      	bne.n	8001d82 <HAL_HCD_IRQHandler+0x14a>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <HAL_HCD_IRQHandler+0x14c>
 8001d82:	2300      	movs	r3, #0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d012      	beq.n	8001dae <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699a      	ldr	r2, [r3, #24]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0210 	bic.w	r2, r2, #16
 8001d96:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f001 f87b 	bl	8002e94 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	699a      	ldr	r2, [r3, #24]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 0210 	orr.w	r2, r2, #16
 8001dac:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 fc10 	bl	80055d8 <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dc2:	d13a      	bne.n	8001e3a <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 ff7f 	bl	8005ccc <USB_HC_ReadInterrupt>
 8001dce:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	e025      	b.n	8001e22 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	fa22 f303 	lsr.w	r3, r2, r3
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d018      	beq.n	8001e1c <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e00:	d106      	bne.n	8001e10 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	4619      	mov	r1, r3
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f8a9 	bl	8001f60 <HCD_HC_IN_IRQHandler>
 8001e0e:	e005      	b.n	8001e1c <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	4619      	mov	r1, r3
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 fca2 	bl	8002760 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d3d4      	bcc.n	8001dd6 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e34:	615a      	str	r2, [r3, #20]
 8001e36:	e000      	b.n	8001e3a <HAL_HCD_IRQHandler+0x202>
      return;
 8001e38:	bf00      	nop
    }
  }
}
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_HCD_Start+0x16>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e013      	b.n	8001e7e <HAL_HCD_Start+0x3e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2101      	movs	r1, #1
 8001e64:	4618      	mov	r0, r3
 8001e66:	f003 fce2 	bl	800582e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 fa72 	bl	8005358 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_HCD_Stop+0x16>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e00d      	b.n	8001eb8 <HAL_HCD_Stop+0x32>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f004 f83a 	bl	8005f22 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f003 fc84 	bl	80057da <USB_ResetPort>
 8001ed2:	4603      	mov	r3, r0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	212c      	movs	r1, #44	; 0x2c
 8001eee:	fb01 f303 	mul.w	r3, r1, r3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3360      	adds	r3, #96	; 0x60
 8001ef6:	781b      	ldrb	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	212c      	movs	r1, #44	; 0x2c
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	3350      	adds	r3, #80	; 0x50
 8001f1c:	681b      	ldr	r3, [r3, #0]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f003 fcc8 	bl	80058ca <USB_GetCurrentFrame>
 8001f3a:	4603      	mov	r3, r0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f003 fca4 	bl	800589e <USB_GetHostSpeed>
 8001f56:	4603      	mov	r3, r0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d119      	bne.n	8001fc4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	015a      	lsls	r2, r3, #5
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	0151      	lsls	r1, r2, #5
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	440a      	add	r2, r1
 8001fb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	60d3      	str	r3, [r2, #12]
 8001fc2:	e101      	b.n	80021c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	015a      	lsls	r2, r3, #5
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fda:	d12b      	bne.n	8002034 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	015a      	lsls	r2, r3, #5
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	212c      	movs	r1, #44	; 0x2c
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3361      	adds	r3, #97	; 0x61
 8001ffe:	2207      	movs	r2, #7
 8002000:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4413      	add	r3, r2
 800200a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	0151      	lsls	r1, r2, #5
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	440a      	add	r2, r1
 8002018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f003 fe5d 	bl	8005cec <USB_HC_Halt>
 8002032:	e0c9      	b.n	80021c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4413      	add	r3, r2
 800203c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b20      	cmp	r3, #32
 8002048:	d109      	bne.n	800205e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	015a      	lsls	r2, r3, #5
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4413      	add	r3, r2
 8002052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002056:	461a      	mov	r2, r3
 8002058:	2320      	movs	r3, #32
 800205a:	6093      	str	r3, [r2, #8]
 800205c:	e0b4      	b.n	80021c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4413      	add	r3, r2
 8002066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b08      	cmp	r3, #8
 8002072:	d133      	bne.n	80020dc <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	0151      	lsls	r1, r2, #5
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	440a      	add	r2, r1
 800208a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800208e:	f043 0302 	orr.w	r3, r3, #2
 8002092:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	212c      	movs	r1, #44	; 0x2c
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	3361      	adds	r3, #97	; 0x61
 80020a2:	2205      	movs	r2, #5
 80020a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b2:	461a      	mov	r2, r3
 80020b4:	2310      	movs	r3, #16
 80020b6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	015a      	lsls	r2, r3, #5
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4413      	add	r3, r2
 80020c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c4:	461a      	mov	r2, r3
 80020c6:	2308      	movs	r3, #8
 80020c8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f003 fe09 	bl	8005cec <USB_HC_Halt>
 80020da:	e075      	b.n	80021c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f2:	d134      	bne.n	800215e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	0151      	lsls	r1, r2, #5
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	440a      	add	r2, r1
 800210a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800210e:	f043 0302 	orr.w	r3, r3, #2
 8002112:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	212c      	movs	r1, #44	; 0x2c
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4413      	add	r3, r2
 8002120:	3361      	adds	r3, #97	; 0x61
 8002122:	2208      	movs	r2, #8
 8002124:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	461a      	mov	r2, r3
 8002134:	2310      	movs	r3, #16
 8002136:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4413      	add	r3, r2
 8002140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002144:	461a      	mov	r2, r3
 8002146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800214a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f003 fdc8 	bl	8005cec <USB_HC_Halt>
 800215c:	e034      	b.n	80021c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4413      	add	r3, r2
 8002166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002170:	2b80      	cmp	r3, #128	; 0x80
 8002172:	d129      	bne.n	80021c8 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4413      	add	r3, r2
 800217c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	0151      	lsls	r1, r2, #5
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	440a      	add	r2, r1
 800218a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	212c      	movs	r1, #44	; 0x2c
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	4413      	add	r3, r2
 80021a0:	3361      	adds	r3, #97	; 0x61
 80021a2:	2206      	movs	r2, #6
 80021a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f003 fd9b 	bl	8005cec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c2:	461a      	mov	r2, r3
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021de:	d122      	bne.n	8002226 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	015a      	lsls	r2, r3, #5
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	0151      	lsls	r1, r2, #5
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	440a      	add	r2, r1
 80021f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f003 fd6e 	bl	8005cec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4413      	add	r3, r2
 8002218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221c:	461a      	mov	r2, r3
 800221e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002222:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002224:	e298      	b.n	8002758 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4413      	add	r3, r2
 800222e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b01      	cmp	r3, #1
 800223a:	f040 80fd 	bne.w	8002438 <HCD_HC_IN_IRQHandler+0x4d8>
    hhcd->hc[ch_num].state = HC_XFRC;
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	3361      	adds	r3, #97	; 0x61
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	335c      	adds	r3, #92	; 0x5c
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	461a      	mov	r2, r3
 8002270:	2301      	movs	r3, #1
 8002272:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	333f      	adds	r3, #63	; 0x3f
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d009      	beq.n	800229c <HCD_HC_IN_IRQHandler+0x33c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	333f      	adds	r3, #63	; 0x3f
 8002296:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002298:	2b02      	cmp	r3, #2
 800229a:	d121      	bne.n	80022e0 <HCD_HC_IN_IRQHandler+0x380>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	0151      	lsls	r1, r2, #5
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	440a      	add	r2, r1
 80022b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022b6:	f043 0302 	orr.w	r3, r3, #2
 80022ba:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	4611      	mov	r1, r2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f003 fd10 	bl	8005cec <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d8:	461a      	mov	r2, r3
 80022da:	2310      	movs	r3, #16
 80022dc:	6093      	str	r3, [r2, #8]
 80022de:	e066      	b.n	80023ae <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	333f      	adds	r3, #63	; 0x3f
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d127      	bne.n	8002344 <HCD_HC_IN_IRQHandler+0x3e4>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	0151      	lsls	r1, r2, #5
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	440a      	add	r2, r1
 800230a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800230e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002312:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	212c      	movs	r1, #44	; 0x2c
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	4413      	add	r3, r2
 8002320:	3360      	adds	r3, #96	; 0x60
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	b2d9      	uxtb	r1, r3
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	202c      	movs	r0, #44	; 0x2c
 8002330:	fb00 f303 	mul.w	r3, r0, r3
 8002334:	4413      	add	r3, r2
 8002336:	3360      	adds	r3, #96	; 0x60
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f008 fa71 	bl	800a824 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002342:	e034      	b.n	80023ae <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	212c      	movs	r1, #44	; 0x2c
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	333f      	adds	r3, #63	; 0x3f
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d12a      	bne.n	80023ae <HCD_HC_IN_IRQHandler+0x44e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	212c      	movs	r1, #44	; 0x2c
 800235e:	fb01 f303 	mul.w	r3, r1, r3
 8002362:	4413      	add	r3, r2
 8002364:	3360      	adds	r3, #96	; 0x60
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	212c      	movs	r1, #44	; 0x2c
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	4413      	add	r3, r2
 8002376:	3354      	adds	r3, #84	; 0x54
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	f083 0301 	eor.w	r3, r3, #1
 800237e:	b2d8      	uxtb	r0, r3
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	212c      	movs	r1, #44	; 0x2c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	3354      	adds	r3, #84	; 0x54
 800238e:	4602      	mov	r2, r0
 8002390:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	b2d9      	uxtb	r1, r3
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	202c      	movs	r0, #44	; 0x2c
 800239c:	fb00 f303 	mul.w	r3, r0, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	3360      	adds	r3, #96	; 0x60
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f008 fa3b 	bl	800a824 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d12b      	bne.n	800240e <HCD_HC_IN_IRQHandler+0x4ae>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	212c      	movs	r1, #44	; 0x2c
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	3348      	adds	r3, #72	; 0x48
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	202c      	movs	r0, #44	; 0x2c
 80023cc:	fb00 f202 	mul.w	r2, r0, r2
 80023d0:	440a      	add	r2, r1
 80023d2:	3240      	adds	r2, #64	; 0x40
 80023d4:	8812      	ldrh	r2, [r2, #0]
 80023d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 81ba 	beq.w	8002758 <HCD_HC_IN_IRQHandler+0x7f8>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	212c      	movs	r1, #44	; 0x2c
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	3354      	adds	r3, #84	; 0x54
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	f083 0301 	eor.w	r3, r3, #1
 80023f8:	b2d8      	uxtb	r0, r3
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	212c      	movs	r1, #44	; 0x2c
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	4413      	add	r3, r2
 8002406:	3354      	adds	r3, #84	; 0x54
 8002408:	4602      	mov	r2, r0
 800240a:	701a      	strb	r2, [r3, #0]
}
 800240c:	e1a4      	b.n	8002758 <HCD_HC_IN_IRQHandler+0x7f8>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	3354      	adds	r3, #84	; 0x54
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	f083 0301 	eor.w	r3, r3, #1
 8002422:	b2d8      	uxtb	r0, r3
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	3354      	adds	r3, #84	; 0x54
 8002432:	4602      	mov	r2, r0
 8002434:	701a      	strb	r2, [r3, #0]
}
 8002436:	e18f      	b.n	8002758 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b02      	cmp	r3, #2
 800244c:	f040 8106 	bne.w	800265c <HCD_HC_IN_IRQHandler+0x6fc>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	0151      	lsls	r1, r2, #5
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	440a      	add	r2, r1
 8002466:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800246a:	f023 0302 	bic.w	r3, r3, #2
 800246e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	212c      	movs	r1, #44	; 0x2c
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	4413      	add	r3, r2
 800247c:	3361      	adds	r3, #97	; 0x61
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d109      	bne.n	8002498 <HCD_HC_IN_IRQHandler+0x538>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	212c      	movs	r1, #44	; 0x2c
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	4413      	add	r3, r2
 8002490:	3360      	adds	r3, #96	; 0x60
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	e0c9      	b.n	800262c <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	212c      	movs	r1, #44	; 0x2c
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	3361      	adds	r3, #97	; 0x61
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	d109      	bne.n	80024c0 <HCD_HC_IN_IRQHandler+0x560>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	212c      	movs	r1, #44	; 0x2c
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	3360      	adds	r3, #96	; 0x60
 80024ba:	2205      	movs	r2, #5
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	e0b5      	b.n	800262c <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	212c      	movs	r1, #44	; 0x2c
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	3361      	adds	r3, #97	; 0x61
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b06      	cmp	r3, #6
 80024d2:	d009      	beq.n	80024e8 <HCD_HC_IN_IRQHandler+0x588>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	212c      	movs	r1, #44	; 0x2c
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	4413      	add	r3, r2
 80024e0:	3361      	adds	r3, #97	; 0x61
 80024e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d150      	bne.n	800258a <HCD_HC_IN_IRQHandler+0x62a>
      hhcd->hc[ch_num].ErrCnt++;
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	335c      	adds	r3, #92	; 0x5c
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	202c      	movs	r0, #44	; 0x2c
 8002500:	fb00 f303 	mul.w	r3, r0, r3
 8002504:	440b      	add	r3, r1
 8002506:	335c      	adds	r3, #92	; 0x5c
 8002508:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	212c      	movs	r1, #44	; 0x2c
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	4413      	add	r3, r2
 8002516:	335c      	adds	r3, #92	; 0x5c
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d912      	bls.n	8002544 <HCD_HC_IN_IRQHandler+0x5e4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	335c      	adds	r3, #92	; 0x5c
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	3360      	adds	r3, #96	; 0x60
 800253e:	2204      	movs	r2, #4
 8002540:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002542:	e073      	b.n	800262c <HCD_HC_IN_IRQHandler+0x6cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3360      	adds	r3, #96	; 0x60
 8002552:	2202      	movs	r2, #2
 8002554:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	015a      	lsls	r2, r3, #5
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4413      	add	r3, r2
 800255e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800256c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002574:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4413      	add	r3, r2
 800257e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002582:	461a      	mov	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002588:	e050      	b.n	800262c <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	212c      	movs	r1, #44	; 0x2c
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	4413      	add	r3, r2
 8002596:	3361      	adds	r3, #97	; 0x61
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b03      	cmp	r3, #3
 800259c:	d122      	bne.n	80025e4 <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	3360      	adds	r3, #96	; 0x60
 80025ac:	2202      	movs	r2, #2
 80025ae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025c6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025ce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	461a      	mov	r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e023      	b.n	800262c <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	212c      	movs	r1, #44	; 0x2c
 80025ea:	fb01 f303 	mul.w	r3, r1, r3
 80025ee:	4413      	add	r3, r2
 80025f0:	3361      	adds	r3, #97	; 0x61
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b07      	cmp	r3, #7
 80025f6:	d119      	bne.n	800262c <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt++;
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	335c      	adds	r3, #92	; 0x5c
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	202c      	movs	r0, #44	; 0x2c
 8002610:	fb00 f303 	mul.w	r3, r0, r3
 8002614:	440b      	add	r3, r1
 8002616:	335c      	adds	r3, #92	; 0x5c
 8002618:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	3360      	adds	r3, #96	; 0x60
 8002628:	2204      	movs	r2, #4
 800262a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4413      	add	r3, r2
 8002634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002638:	461a      	mov	r2, r3
 800263a:	2302      	movs	r3, #2
 800263c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	b2d9      	uxtb	r1, r3
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	202c      	movs	r0, #44	; 0x2c
 8002648:	fb00 f303 	mul.w	r3, r0, r3
 800264c:	4413      	add	r3, r2
 800264e:	3360      	adds	r3, #96	; 0x60
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f008 f8e5 	bl	800a824 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800265a:	e07d      	b.n	8002758 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4413      	add	r3, r2
 8002664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b10      	cmp	r3, #16
 8002670:	d172      	bne.n	8002758 <HCD_HC_IN_IRQHandler+0x7f8>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	333f      	adds	r3, #63	; 0x3f
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b03      	cmp	r3, #3
 8002684:	d121      	bne.n	80026ca <HCD_HC_IN_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	212c      	movs	r1, #44	; 0x2c
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	335c      	adds	r3, #92	; 0x5c
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	0151      	lsls	r1, r2, #5
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	440a      	add	r2, r1
 80026ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026b2:	f043 0302 	orr.w	r3, r3, #2
 80026b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f003 fb12 	bl	8005cec <USB_HC_Halt>
 80026c8:	e03d      	b.n	8002746 <HCD_HC_IN_IRQHandler+0x7e6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	212c      	movs	r1, #44	; 0x2c
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	333f      	adds	r3, #63	; 0x3f
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <HCD_HC_IN_IRQHandler+0x792>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	333f      	adds	r3, #63	; 0x3f
 80026ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d129      	bne.n	8002746 <HCD_HC_IN_IRQHandler+0x7e6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	335c      	adds	r3, #92	; 0x5c
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	212c      	movs	r1, #44	; 0x2c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4413      	add	r3, r2
 8002710:	3361      	adds	r3, #97	; 0x61
 8002712:	2203      	movs	r2, #3
 8002714:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	015a      	lsls	r2, r3, #5
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4413      	add	r3, r2
 800271e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	0151      	lsls	r1, r2, #5
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	440a      	add	r2, r1
 800272c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f003 fad3 	bl	8005cec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002752:	461a      	mov	r2, r3
 8002754:	2310      	movs	r3, #16
 8002756:	6093      	str	r3, [r2, #8]
}
 8002758:	bf00      	nop
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	4413      	add	r3, r2
 8002782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b04      	cmp	r3, #4
 800278e:	d119      	bne.n	80027c4 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279c:	461a      	mov	r2, r3
 800279e:	2304      	movs	r3, #4
 80027a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	0151      	lsls	r1, r2, #5
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	440a      	add	r2, r1
 80027b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80027c2:	e363      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	d13e      	bne.n	8002858 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	461a      	mov	r2, r3
 80027e8:	2320      	movs	r3, #32
 80027ea:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	212c      	movs	r1, #44	; 0x2c
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	333d      	adds	r3, #61	; 0x3d
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	f040 8345 	bne.w	8002e8c <HCD_HC_OUT_IRQHandler+0x72c>
      hhcd->hc[ch_num].do_ping = 0U;
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	212c      	movs	r1, #44	; 0x2c
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	333d      	adds	r3, #61	; 0x3d
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	3360      	adds	r3, #96	; 0x60
 8002822:	2202      	movs	r2, #2
 8002824:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	4413      	add	r3, r2
 800282e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	0151      	lsls	r1, r2, #5
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	440a      	add	r2, r1
 800283c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002840:	f043 0302 	orr.w	r3, r3, #2
 8002844:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f003 fa4b 	bl	8005cec <USB_HC_Halt>
}
 8002856:	e319      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	4413      	add	r3, r2
 8002860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800286e:	d122      	bne.n	80028b6 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	0151      	lsls	r1, r2, #5
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	440a      	add	r2, r1
 8002886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800288a:	f043 0302 	orr.w	r3, r3, #2
 800288e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	4611      	mov	r1, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f003 fa26 	bl	8005cec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ac:	461a      	mov	r2, r3
 80028ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b2:	6093      	str	r3, [r2, #8]
}
 80028b4:	e2ea      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d150      	bne.n	800296e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	212c      	movs	r1, #44	; 0x2c
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	335c      	adds	r3, #92	; 0x5c
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f0:	2b40      	cmp	r3, #64	; 0x40
 80028f2:	d111      	bne.n	8002918 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	212c      	movs	r1, #44	; 0x2c
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	333d      	adds	r3, #61	; 0x3d
 8002902:	2201      	movs	r2, #1
 8002904:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	4413      	add	r3, r2
 800290e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002912:	461a      	mov	r2, r3
 8002914:	2340      	movs	r3, #64	; 0x40
 8002916:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	0151      	lsls	r1, r2, #5
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	440a      	add	r2, r1
 800292e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002932:	f043 0302 	orr.w	r3, r3, #2
 8002936:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f003 f9d2 	bl	8005cec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002954:	461a      	mov	r2, r3
 8002956:	2301      	movs	r3, #1
 8002958:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	212c      	movs	r1, #44	; 0x2c
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	4413      	add	r3, r2
 8002966:	3361      	adds	r3, #97	; 0x61
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
}
 800296c:	e28e      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002980:	2b40      	cmp	r3, #64	; 0x40
 8002982:	d13c      	bne.n	80029fe <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	3361      	adds	r3, #97	; 0x61
 8002992:	2204      	movs	r2, #4
 8002994:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	333d      	adds	r3, #61	; 0x3d
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	335c      	adds	r3, #92	; 0x5c
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	0151      	lsls	r1, r2, #5
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	440a      	add	r2, r1
 80029d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029d4:	f043 0302 	orr.w	r3, r3, #2
 80029d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f003 f981 	bl	8005cec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f6:	461a      	mov	r2, r3
 80029f8:	2340      	movs	r3, #64	; 0x40
 80029fa:	6093      	str	r3, [r2, #8]
}
 80029fc:	e246      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d12a      	bne.n	8002a6a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	461a      	mov	r2, r3
 8002a22:	2308      	movs	r3, #8
 8002a24:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	0151      	lsls	r1, r2, #5
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	440a      	add	r2, r1
 8002a3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a40:	f043 0302 	orr.w	r3, r3, #2
 8002a44:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f003 f94b 	bl	8005cec <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	212c      	movs	r1, #44	; 0x2c
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	3361      	adds	r3, #97	; 0x61
 8002a64:	2205      	movs	r2, #5
 8002a66:	701a      	strb	r2, [r3, #0]
}
 8002a68:	e210      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d133      	bne.n	8002ae8 <HCD_HC_OUT_IRQHandler+0x388>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	335c      	adds	r3, #92	; 0x5c
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3361      	adds	r3, #97	; 0x61
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	0151      	lsls	r1, r2, #5
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	440a      	add	r2, r1
 8002aba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002abe:	f043 0302 	orr.w	r3, r3, #2
 8002ac2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f003 f90c 	bl	8005cec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2310      	movs	r3, #16
 8002ae4:	6093      	str	r3, [r2, #8]
}
 8002ae6:	e1d1      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	2b80      	cmp	r3, #128	; 0x80
 8002afc:	d12a      	bne.n	8002b54 <HCD_HC_OUT_IRQHandler+0x3f4>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	3361      	adds	r3, #97	; 0x61
 8002b0c:	2206      	movs	r2, #6
 8002b0e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	0151      	lsls	r1, r2, #5
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	440a      	add	r2, r1
 8002b26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b2a:	f043 0302 	orr.w	r3, r3, #2
 8002b2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f003 f8d6 	bl	8005cec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	6093      	str	r3, [r2, #8]
}
 8002b52:	e19b      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6a:	d134      	bne.n	8002bd6 <HCD_HC_OUT_IRQHandler+0x476>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	0151      	lsls	r1, r2, #5
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	440a      	add	r2, r1
 8002b82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b86:	f043 0302 	orr.w	r3, r3, #2
 8002b8a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f003 f8a8 	bl	8005cec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2310      	movs	r3, #16
 8002bac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3361      	adds	r3, #97	; 0x61
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	701a      	strb	r2, [r3, #0]
}
 8002bd4:	e15a      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	015a      	lsls	r2, r3, #5
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	f040 814f 	bne.w	8002e8c <HCD_HC_OUT_IRQHandler+0x72c>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	0151      	lsls	r1, r2, #5
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	440a      	add	r2, r1
 8002c04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c08:	f023 0302 	bic.w	r3, r3, #2
 8002c0c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3361      	adds	r3, #97	; 0x61
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d17d      	bne.n	8002d1e <HCD_HC_OUT_IRQHandler+0x5be>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	212c      	movs	r1, #44	; 0x2c
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3360      	adds	r3, #96	; 0x60
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	212c      	movs	r1, #44	; 0x2c
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	4413      	add	r3, r2
 8002c40:	333f      	adds	r3, #63	; 0x3f
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d00a      	beq.n	8002c5e <HCD_HC_OUT_IRQHandler+0x4fe>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	333f      	adds	r3, #63	; 0x3f
 8002c56:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	f040 8100 	bne.w	8002e5e <HCD_HC_OUT_IRQHandler+0x6fe>
        if (hhcd->Init.dma_enable == 0U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d113      	bne.n	8002c8e <HCD_HC_OUT_IRQHandler+0x52e>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	212c      	movs	r1, #44	; 0x2c
 8002c6c:	fb01 f303 	mul.w	r3, r1, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	3355      	adds	r3, #85	; 0x55
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	f083 0301 	eor.w	r3, r3, #1
 8002c7a:	b2d8      	uxtb	r0, r3
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	212c      	movs	r1, #44	; 0x2c
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	3355      	adds	r3, #85	; 0x55
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	f040 80e3 	bne.w	8002e5e <HCD_HC_OUT_IRQHandler+0x6fe>
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	334c      	adds	r3, #76	; 0x4c
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 80d8 	beq.w	8002e5e <HCD_HC_OUT_IRQHandler+0x6fe>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	334c      	adds	r3, #76	; 0x4c
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	202c      	movs	r0, #44	; 0x2c
 8002cc4:	fb00 f202 	mul.w	r2, r0, r2
 8002cc8:	440a      	add	r2, r1
 8002cca:	3240      	adds	r2, #64	; 0x40
 8002ccc:	8812      	ldrh	r2, [r2, #0]
 8002cce:	4413      	add	r3, r2
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	202c      	movs	r0, #44	; 0x2c
 8002cd8:	fb00 f202 	mul.w	r2, r0, r2
 8002cdc:	440a      	add	r2, r1
 8002cde:	3240      	adds	r2, #64	; 0x40
 8002ce0:	8812      	ldrh	r2, [r2, #0]
 8002ce2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80b5 	beq.w	8002e5e <HCD_HC_OUT_IRQHandler+0x6fe>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3355      	adds	r3, #85	; 0x55
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	f083 0301 	eor.w	r3, r3, #1
 8002d08:	b2d8      	uxtb	r0, r3
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	3355      	adds	r3, #85	; 0x55
 8002d18:	4602      	mov	r2, r0
 8002d1a:	701a      	strb	r2, [r3, #0]
 8002d1c:	e09f      	b.n	8002e5e <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	212c      	movs	r1, #44	; 0x2c
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	3361      	adds	r3, #97	; 0x61
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d109      	bne.n	8002d46 <HCD_HC_OUT_IRQHandler+0x5e6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	212c      	movs	r1, #44	; 0x2c
 8002d38:	fb01 f303 	mul.w	r3, r1, r3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3360      	adds	r3, #96	; 0x60
 8002d40:	2202      	movs	r2, #2
 8002d42:	701a      	strb	r2, [r3, #0]
 8002d44:	e08b      	b.n	8002e5e <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	212c      	movs	r1, #44	; 0x2c
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	3361      	adds	r3, #97	; 0x61
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d109      	bne.n	8002d6e <HCD_HC_OUT_IRQHandler+0x60e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	212c      	movs	r1, #44	; 0x2c
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	3360      	adds	r3, #96	; 0x60
 8002d68:	2202      	movs	r2, #2
 8002d6a:	701a      	strb	r2, [r3, #0]
 8002d6c:	e077      	b.n	8002e5e <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	212c      	movs	r1, #44	; 0x2c
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	3361      	adds	r3, #97	; 0x61
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b05      	cmp	r3, #5
 8002d80:	d109      	bne.n	8002d96 <HCD_HC_OUT_IRQHandler+0x636>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	212c      	movs	r1, #44	; 0x2c
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3360      	adds	r3, #96	; 0x60
 8002d90:	2205      	movs	r2, #5
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	e063      	b.n	8002e5e <HCD_HC_OUT_IRQHandler+0x6fe>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	212c      	movs	r1, #44	; 0x2c
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	3361      	adds	r3, #97	; 0x61
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d009      	beq.n	8002dbe <HCD_HC_OUT_IRQHandler+0x65e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	212c      	movs	r1, #44	; 0x2c
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	3361      	adds	r3, #97	; 0x61
 8002db8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d14f      	bne.n	8002e5e <HCD_HC_OUT_IRQHandler+0x6fe>
      hhcd->hc[ch_num].ErrCnt++;
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	212c      	movs	r1, #44	; 0x2c
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	335c      	adds	r3, #92	; 0x5c
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	202c      	movs	r0, #44	; 0x2c
 8002dd6:	fb00 f303 	mul.w	r3, r0, r3
 8002dda:	440b      	add	r3, r1
 8002ddc:	335c      	adds	r3, #92	; 0x5c
 8002dde:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	212c      	movs	r1, #44	; 0x2c
 8002de6:	fb01 f303 	mul.w	r3, r1, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	335c      	adds	r3, #92	; 0x5c
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d912      	bls.n	8002e1a <HCD_HC_OUT_IRQHandler+0x6ba>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	212c      	movs	r1, #44	; 0x2c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	335c      	adds	r3, #92	; 0x5c
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	212c      	movs	r1, #44	; 0x2c
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	3360      	adds	r3, #96	; 0x60
 8002e14:	2204      	movs	r2, #4
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e021      	b.n	8002e5e <HCD_HC_OUT_IRQHandler+0x6fe>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	212c      	movs	r1, #44	; 0x2c
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	4413      	add	r3, r2
 8002e26:	3360      	adds	r3, #96	; 0x60
 8002e28:	2202      	movs	r2, #2
 8002e2a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e42:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e4a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e58:	461a      	mov	r2, r3
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	b2d9      	uxtb	r1, r3
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	202c      	movs	r0, #44	; 0x2c
 8002e7a:	fb00 f303 	mul.w	r3, r0, r3
 8002e7e:	4413      	add	r3, r2
 8002e80:	3360      	adds	r3, #96	; 0x60
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f007 fccc 	bl	800a824 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e8c:	bf00      	nop
 8002e8e:	3720      	adds	r7, #32
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08a      	sub	sp, #40	; 0x28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	0c5b      	lsrs	r3, r3, #17
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ec8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d004      	beq.n	8002eda <HCD_RXQLVL_IRQHandler+0x46>
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2b05      	cmp	r3, #5
 8002ed4:	f000 80a9 	beq.w	800302a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002ed8:	e0aa      	b.n	8003030 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80a6 	beq.w	800302e <HCD_RXQLVL_IRQHandler+0x19a>
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	212c      	movs	r1, #44	; 0x2c
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	3344      	adds	r3, #68	; 0x44
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 809b 	beq.w	800302e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	212c      	movs	r1, #44	; 0x2c
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	3350      	adds	r3, #80	; 0x50
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	441a      	add	r2, r3
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	202c      	movs	r0, #44	; 0x2c
 8002f12:	fb00 f303 	mul.w	r3, r0, r3
 8002f16:	440b      	add	r3, r1
 8002f18:	334c      	adds	r3, #76	; 0x4c
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d87a      	bhi.n	8003016 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	212c      	movs	r1, #44	; 0x2c
 8002f2a:	fb01 f303 	mul.w	r3, r1, r3
 8002f2e:	4413      	add	r3, r2
 8002f30:	3344      	adds	r3, #68	; 0x44
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	b292      	uxth	r2, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f002 faf6 	bl	800552a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	212c      	movs	r1, #44	; 0x2c
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	4413      	add	r3, r2
 8002f4a:	3344      	adds	r3, #68	; 0x44
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	441a      	add	r2, r3
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	202c      	movs	r0, #44	; 0x2c
 8002f58:	fb00 f303 	mul.w	r3, r0, r3
 8002f5c:	440b      	add	r3, r1
 8002f5e:	3344      	adds	r3, #68	; 0x44
 8002f60:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	212c      	movs	r1, #44	; 0x2c
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3350      	adds	r3, #80	; 0x50
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	441a      	add	r2, r3
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	202c      	movs	r0, #44	; 0x2c
 8002f7c:	fb00 f303 	mul.w	r3, r0, r3
 8002f80:	440b      	add	r3, r1
 8002f82:	3350      	adds	r3, #80	; 0x50
 8002f84:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	0cdb      	lsrs	r3, r3, #19
 8002f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f9a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	212c      	movs	r1, #44	; 0x2c
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3340      	adds	r3, #64	; 0x40
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d13c      	bne.n	800302e <HCD_RXQLVL_IRQHandler+0x19a>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d039      	beq.n	800302e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fd0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fd8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3354      	adds	r3, #84	; 0x54
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	f083 0301 	eor.w	r3, r3, #1
 8003000:	b2d8      	uxtb	r0, r3
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	212c      	movs	r1, #44	; 0x2c
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	4413      	add	r3, r2
 800300e:	3354      	adds	r3, #84	; 0x54
 8003010:	4602      	mov	r2, r0
 8003012:	701a      	strb	r2, [r3, #0]
      break;
 8003014:	e00b      	b.n	800302e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	212c      	movs	r1, #44	; 0x2c
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	4413      	add	r3, r2
 8003022:	3360      	adds	r3, #96	; 0x60
 8003024:	2204      	movs	r2, #4
 8003026:	701a      	strb	r2, [r3, #0]
      break;
 8003028:	e001      	b.n	800302e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800302a:	bf00      	nop
 800302c:	e000      	b.n	8003030 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800302e:	bf00      	nop
  }
}
 8003030:	bf00      	nop
 8003032:	3728      	adds	r7, #40	; 0x28
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003064:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b02      	cmp	r3, #2
 800306e:	d10b      	bne.n	8003088 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b01      	cmp	r3, #1
 8003078:	d102      	bne.n	8003080 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f007 fbb6 	bl	800a7ec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f043 0302 	orr.w	r3, r3, #2
 8003086:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b08      	cmp	r3, #8
 8003090:	d132      	bne.n	80030f8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f043 0308 	orr.w	r3, r3, #8
 8003098:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d126      	bne.n	80030f2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d113      	bne.n	80030d4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80030b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030b6:	d106      	bne.n	80030c6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2102      	movs	r1, #2
 80030be:	4618      	mov	r0, r3
 80030c0:	f002 fb52 	bl	8005768 <USB_InitFSLSPClkSel>
 80030c4:	e011      	b.n	80030ea <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2101      	movs	r1, #1
 80030cc:	4618      	mov	r0, r3
 80030ce:	f002 fb4b 	bl	8005768 <USB_InitFSLSPClkSel>
 80030d2:	e00a      	b.n	80030ea <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d106      	bne.n	80030ea <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030e2:	461a      	mov	r2, r3
 80030e4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80030e8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f007 fbac 	bl	800a848 <HAL_HCD_PortEnabled_Callback>
 80030f0:	e002      	b.n	80030f8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f007 fbb6 	bl	800a864 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d103      	bne.n	800310a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f043 0320 	orr.w	r3, r3, #32
 8003108:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003110:	461a      	mov	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	6013      	str	r3, [r2, #0]
}
 8003116:	bf00      	nop
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e304      	b.n	800373c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 8087 	beq.w	800324e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003140:	4b92      	ldr	r3, [pc, #584]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	2b04      	cmp	r3, #4
 800314a:	d00c      	beq.n	8003166 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800314c:	4b8f      	ldr	r3, [pc, #572]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 030c 	and.w	r3, r3, #12
 8003154:	2b08      	cmp	r3, #8
 8003156:	d112      	bne.n	800317e <HAL_RCC_OscConfig+0x5e>
 8003158:	4b8c      	ldr	r3, [pc, #560]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003164:	d10b      	bne.n	800317e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003166:	4b89      	ldr	r3, [pc, #548]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d06c      	beq.n	800324c <HAL_RCC_OscConfig+0x12c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d168      	bne.n	800324c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e2de      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003186:	d106      	bne.n	8003196 <HAL_RCC_OscConfig+0x76>
 8003188:	4b80      	ldr	r3, [pc, #512]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a7f      	ldr	r2, [pc, #508]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 800318e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	e02e      	b.n	80031f4 <HAL_RCC_OscConfig+0xd4>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x98>
 800319e:	4b7b      	ldr	r3, [pc, #492]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a7a      	ldr	r2, [pc, #488]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 80031a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	4b78      	ldr	r3, [pc, #480]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a77      	ldr	r2, [pc, #476]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 80031b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e01d      	b.n	80031f4 <HAL_RCC_OscConfig+0xd4>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0xbc>
 80031c2:	4b72      	ldr	r3, [pc, #456]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a71      	ldr	r2, [pc, #452]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 80031c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	4b6f      	ldr	r3, [pc, #444]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a6e      	ldr	r2, [pc, #440]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 80031d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e00b      	b.n	80031f4 <HAL_RCC_OscConfig+0xd4>
 80031dc:	4b6b      	ldr	r3, [pc, #428]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a6a      	ldr	r2, [pc, #424]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 80031e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	4b68      	ldr	r3, [pc, #416]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a67      	ldr	r2, [pc, #412]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 80031ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d013      	beq.n	8003224 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fc:	f7fd feca 	bl	8000f94 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003204:	f7fd fec6 	bl	8000f94 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	; 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e292      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	4b5d      	ldr	r3, [pc, #372]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0xe4>
 8003222:	e014      	b.n	800324e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003224:	f7fd feb6 	bl	8000f94 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800322c:	f7fd feb2 	bl	8000f94 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e27e      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	4b53      	ldr	r3, [pc, #332]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x10c>
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d063      	beq.n	8003322 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800325a:	4b4c      	ldr	r3, [pc, #304]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003266:	4b49      	ldr	r3, [pc, #292]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b08      	cmp	r3, #8
 8003270:	d11c      	bne.n	80032ac <HAL_RCC_OscConfig+0x18c>
 8003272:	4b46      	ldr	r3, [pc, #280]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d116      	bne.n	80032ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327e:	4b43      	ldr	r3, [pc, #268]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_RCC_OscConfig+0x176>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e252      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003296:	4b3d      	ldr	r3, [pc, #244]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4939      	ldr	r1, [pc, #228]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032aa:	e03a      	b.n	8003322 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d020      	beq.n	80032f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b4:	4b36      	ldr	r3, [pc, #216]	; (8003390 <HAL_RCC_OscConfig+0x270>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ba:	f7fd fe6b 	bl	8000f94 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fd fe67 	bl	8000f94 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e233      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d4:	4b2d      	ldr	r3, [pc, #180]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e0:	4b2a      	ldr	r3, [pc, #168]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4927      	ldr	r1, [pc, #156]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	600b      	str	r3, [r1, #0]
 80032f4:	e015      	b.n	8003322 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f6:	4b26      	ldr	r3, [pc, #152]	; (8003390 <HAL_RCC_OscConfig+0x270>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7fd fe4a 	bl	8000f94 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003304:	f7fd fe46 	bl	8000f94 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e212      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003316:	4b1d      	ldr	r3, [pc, #116]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d03a      	beq.n	80033a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d019      	beq.n	800336a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003336:	4b17      	ldr	r3, [pc, #92]	; (8003394 <HAL_RCC_OscConfig+0x274>)
 8003338:	2201      	movs	r2, #1
 800333a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333c:	f7fd fe2a 	bl	8000f94 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003344:	f7fd fe26 	bl	8000f94 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e1f2      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003356:	4b0d      	ldr	r3, [pc, #52]	; (800338c <HAL_RCC_OscConfig+0x26c>)
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003362:	2001      	movs	r0, #1
 8003364:	f000 fc1c 	bl	8003ba0 <RCC_Delay>
 8003368:	e01c      	b.n	80033a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <HAL_RCC_OscConfig+0x274>)
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003370:	f7fd fe10 	bl	8000f94 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003376:	e00f      	b.n	8003398 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003378:	f7fd fe0c 	bl	8000f94 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d908      	bls.n	8003398 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e1d8      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
 8003390:	42420000 	.word	0x42420000
 8003394:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003398:	4b9b      	ldr	r3, [pc, #620]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e9      	bne.n	8003378 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 80a6 	beq.w	80034fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b2:	2300      	movs	r3, #0
 80033b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b6:	4b94      	ldr	r3, [pc, #592]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10d      	bne.n	80033de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c2:	4b91      	ldr	r3, [pc, #580]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	4a90      	ldr	r2, [pc, #576]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 80033c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033cc:	61d3      	str	r3, [r2, #28]
 80033ce:	4b8e      	ldr	r3, [pc, #568]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033da:	2301      	movs	r3, #1
 80033dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033de:	4b8b      	ldr	r3, [pc, #556]	; (800360c <HAL_RCC_OscConfig+0x4ec>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d118      	bne.n	800341c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ea:	4b88      	ldr	r3, [pc, #544]	; (800360c <HAL_RCC_OscConfig+0x4ec>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a87      	ldr	r2, [pc, #540]	; (800360c <HAL_RCC_OscConfig+0x4ec>)
 80033f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f6:	f7fd fdcd 	bl	8000f94 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fe:	f7fd fdc9 	bl	8000f94 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b64      	cmp	r3, #100	; 0x64
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e195      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003410:	4b7e      	ldr	r3, [pc, #504]	; (800360c <HAL_RCC_OscConfig+0x4ec>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d106      	bne.n	8003432 <HAL_RCC_OscConfig+0x312>
 8003424:	4b78      	ldr	r3, [pc, #480]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	4a77      	ldr	r2, [pc, #476]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6213      	str	r3, [r2, #32]
 8003430:	e02d      	b.n	800348e <HAL_RCC_OscConfig+0x36e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10c      	bne.n	8003454 <HAL_RCC_OscConfig+0x334>
 800343a:	4b73      	ldr	r3, [pc, #460]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	4a72      	ldr	r2, [pc, #456]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003440:	f023 0301 	bic.w	r3, r3, #1
 8003444:	6213      	str	r3, [r2, #32]
 8003446:	4b70      	ldr	r3, [pc, #448]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	4a6f      	ldr	r2, [pc, #444]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800344c:	f023 0304 	bic.w	r3, r3, #4
 8003450:	6213      	str	r3, [r2, #32]
 8003452:	e01c      	b.n	800348e <HAL_RCC_OscConfig+0x36e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b05      	cmp	r3, #5
 800345a:	d10c      	bne.n	8003476 <HAL_RCC_OscConfig+0x356>
 800345c:	4b6a      	ldr	r3, [pc, #424]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	4a69      	ldr	r2, [pc, #420]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003462:	f043 0304 	orr.w	r3, r3, #4
 8003466:	6213      	str	r3, [r2, #32]
 8003468:	4b67      	ldr	r3, [pc, #412]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	4a66      	ldr	r2, [pc, #408]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6213      	str	r3, [r2, #32]
 8003474:	e00b      	b.n	800348e <HAL_RCC_OscConfig+0x36e>
 8003476:	4b64      	ldr	r3, [pc, #400]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	4a63      	ldr	r2, [pc, #396]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800347c:	f023 0301 	bic.w	r3, r3, #1
 8003480:	6213      	str	r3, [r2, #32]
 8003482:	4b61      	ldr	r3, [pc, #388]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	4a60      	ldr	r2, [pc, #384]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003488:	f023 0304 	bic.w	r3, r3, #4
 800348c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d015      	beq.n	80034c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003496:	f7fd fd7d 	bl	8000f94 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349c:	e00a      	b.n	80034b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349e:	f7fd fd79 	bl	8000f94 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e143      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b4:	4b54      	ldr	r3, [pc, #336]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0ee      	beq.n	800349e <HAL_RCC_OscConfig+0x37e>
 80034c0:	e014      	b.n	80034ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c2:	f7fd fd67 	bl	8000f94 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c8:	e00a      	b.n	80034e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ca:	f7fd fd63 	bl	8000f94 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e12d      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e0:	4b49      	ldr	r3, [pc, #292]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ee      	bne.n	80034ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d105      	bne.n	80034fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f2:	4b45      	ldr	r3, [pc, #276]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	4a44      	ldr	r2, [pc, #272]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 80034f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fc:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 808c 	beq.w	8003620 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003508:	4b3f      	ldr	r3, [pc, #252]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003514:	d10e      	bne.n	8003534 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003516:	4b3c      	ldr	r3, [pc, #240]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800351e:	2b08      	cmp	r3, #8
 8003520:	d108      	bne.n	8003534 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003522:	4b39      	ldr	r3, [pc, #228]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800352a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352e:	d101      	bne.n	8003534 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e103      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	2b02      	cmp	r3, #2
 800353a:	d14e      	bne.n	80035da <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800353c:	4b32      	ldr	r3, [pc, #200]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d009      	beq.n	800355c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003548:	4b2f      	ldr	r3, [pc, #188]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0ef      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800355c:	4b2c      	ldr	r3, [pc, #176]	; (8003610 <HAL_RCC_OscConfig+0x4f0>)
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003562:	f7fd fd17 	bl	8000f94 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800356a:	f7fd fd13 	bl	8000f94 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b64      	cmp	r3, #100	; 0x64
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e0df      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800357c:	4b22      	ldr	r3, [pc, #136]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f0      	bne.n	800356a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003588:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003594:	491c      	ldr	r1, [pc, #112]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003596:	4313      	orrs	r3, r2
 8003598:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800359a:	4b1b      	ldr	r3, [pc, #108]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	4918      	ldr	r1, [pc, #96]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80035ac:	4b18      	ldr	r3, [pc, #96]	; (8003610 <HAL_RCC_OscConfig+0x4f0>)
 80035ae:	2201      	movs	r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b2:	f7fd fcef 	bl	8000f94 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80035ba:	f7fd fceb 	bl	8000f94 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b64      	cmp	r3, #100	; 0x64
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e0b7      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80035cc:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCC_OscConfig+0x49a>
 80035d8:	e022      	b.n	8003620 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80035da:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 80035e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80035e6:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <HAL_RCC_OscConfig+0x4f0>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fd fcd2 	bl	8000f94 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80035f2:	e00f      	b.n	8003614 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80035f4:	f7fd fcce 	bl	8000f94 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d908      	bls.n	8003614 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e09a      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	40007000 	.word	0x40007000
 8003610:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003614:	4b4b      	ldr	r3, [pc, #300]	; (8003744 <HAL_RCC_OscConfig+0x624>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e9      	bne.n	80035f4 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8088 	beq.w	800373a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800362a:	4b46      	ldr	r3, [pc, #280]	; (8003744 <HAL_RCC_OscConfig+0x624>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b08      	cmp	r3, #8
 8003634:	d068      	beq.n	8003708 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d14d      	bne.n	80036da <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363e:	4b42      	ldr	r3, [pc, #264]	; (8003748 <HAL_RCC_OscConfig+0x628>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7fd fca6 	bl	8000f94 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364c:	f7fd fca2 	bl	8000f94 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e06e      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800365e:	4b39      	ldr	r3, [pc, #228]	; (8003744 <HAL_RCC_OscConfig+0x624>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003672:	d10f      	bne.n	8003694 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003674:	4b33      	ldr	r3, [pc, #204]	; (8003744 <HAL_RCC_OscConfig+0x624>)
 8003676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4931      	ldr	r1, [pc, #196]	; (8003744 <HAL_RCC_OscConfig+0x624>)
 800367e:	4313      	orrs	r3, r2
 8003680:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003682:	4b30      	ldr	r3, [pc, #192]	; (8003744 <HAL_RCC_OscConfig+0x624>)
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	f023 020f 	bic.w	r2, r3, #15
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	492d      	ldr	r1, [pc, #180]	; (8003744 <HAL_RCC_OscConfig+0x624>)
 8003690:	4313      	orrs	r3, r2
 8003692:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003694:	4b2b      	ldr	r3, [pc, #172]	; (8003744 <HAL_RCC_OscConfig+0x624>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	430b      	orrs	r3, r1
 80036a6:	4927      	ldr	r1, [pc, #156]	; (8003744 <HAL_RCC_OscConfig+0x624>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ac:	4b26      	ldr	r3, [pc, #152]	; (8003748 <HAL_RCC_OscConfig+0x628>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b2:	f7fd fc6f 	bl	8000f94 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ba:	f7fd fc6b 	bl	8000f94 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e037      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036cc:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <HAL_RCC_OscConfig+0x624>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCC_OscConfig+0x59a>
 80036d8:	e02f      	b.n	800373a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036da:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_RCC_OscConfig+0x628>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7fd fc58 	bl	8000f94 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e8:	f7fd fc54 	bl	8000f94 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e020      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036fa:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_RCC_OscConfig+0x624>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x5c8>
 8003706:	e018      	b.n	800373a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e013      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_RCC_OscConfig+0x624>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	429a      	cmp	r2, r3
 8003726:	d106      	bne.n	8003736 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003732:	429a      	cmp	r2, r3
 8003734:	d001      	beq.n	800373a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000
 8003748:	42420060 	.word	0x42420060

0800374c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0d0      	b.n	8003902 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003760:	4b6a      	ldr	r3, [pc, #424]	; (800390c <HAL_RCC_ClockConfig+0x1c0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d910      	bls.n	8003790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376e:	4b67      	ldr	r3, [pc, #412]	; (800390c <HAL_RCC_ClockConfig+0x1c0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 0207 	bic.w	r2, r3, #7
 8003776:	4965      	ldr	r1, [pc, #404]	; (800390c <HAL_RCC_ClockConfig+0x1c0>)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	4313      	orrs	r3, r2
 800377c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800377e:	4b63      	ldr	r3, [pc, #396]	; (800390c <HAL_RCC_ClockConfig+0x1c0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d001      	beq.n	8003790 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0b8      	b.n	8003902 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d020      	beq.n	80037de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037a8:	4b59      	ldr	r3, [pc, #356]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	4a58      	ldr	r2, [pc, #352]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 80037ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037c0:	4b53      	ldr	r3, [pc, #332]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4a52      	ldr	r2, [pc, #328]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 80037c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037cc:	4b50      	ldr	r3, [pc, #320]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	494d      	ldr	r1, [pc, #308]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d040      	beq.n	800386c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d107      	bne.n	8003802 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	4b47      	ldr	r3, [pc, #284]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d115      	bne.n	800382a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e07f      	b.n	8003902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d107      	bne.n	800381a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380a:	4b41      	ldr	r3, [pc, #260]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e073      	b.n	8003902 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381a:	4b3d      	ldr	r3, [pc, #244]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e06b      	b.n	8003902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800382a:	4b39      	ldr	r3, [pc, #228]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f023 0203 	bic.w	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4936      	ldr	r1, [pc, #216]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800383c:	f7fd fbaa 	bl	8000f94 <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	e00a      	b.n	800385a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003844:	f7fd fba6 	bl	8000f94 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e053      	b.n	8003902 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385a:	4b2d      	ldr	r3, [pc, #180]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 020c 	and.w	r2, r3, #12
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	429a      	cmp	r2, r3
 800386a:	d1eb      	bne.n	8003844 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800386c:	4b27      	ldr	r3, [pc, #156]	; (800390c <HAL_RCC_ClockConfig+0x1c0>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d210      	bcs.n	800389c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387a:	4b24      	ldr	r3, [pc, #144]	; (800390c <HAL_RCC_ClockConfig+0x1c0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 0207 	bic.w	r2, r3, #7
 8003882:	4922      	ldr	r1, [pc, #136]	; (800390c <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b20      	ldr	r3, [pc, #128]	; (800390c <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e032      	b.n	8003902 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a8:	4b19      	ldr	r3, [pc, #100]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4916      	ldr	r1, [pc, #88]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038c6:	4b12      	ldr	r3, [pc, #72]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	490e      	ldr	r1, [pc, #56]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038da:	f000 f821 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 80038de:	4602      	mov	r2, r0
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	490a      	ldr	r1, [pc, #40]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80038ec:	5ccb      	ldrb	r3, [r1, r3]
 80038ee:	fa22 f303 	lsr.w	r3, r2, r3
 80038f2:	4a09      	ldr	r2, [pc, #36]	; (8003918 <HAL_RCC_ClockConfig+0x1cc>)
 80038f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038f6:	4b09      	ldr	r3, [pc, #36]	; (800391c <HAL_RCC_ClockConfig+0x1d0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fd fa22 	bl	8000d44 <HAL_InitTick>

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40022000 	.word	0x40022000
 8003910:	40021000 	.word	0x40021000
 8003914:	0800b7d0 	.word	0x0800b7d0
 8003918:	20000000 	.word	0x20000000
 800391c:	20000004 	.word	0x20000004

08003920 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003924:	b099      	sub	sp, #100	; 0x64
 8003926:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8003928:	4b66      	ldr	r3, [pc, #408]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800392a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800392e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003930:	c407      	stmia	r4!, {r0, r1, r2}
 8003932:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8003934:	4b64      	ldr	r3, [pc, #400]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003936:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800393a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800393c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	657b      	str	r3, [r7, #84]	; 0x54
 8003944:	2300      	movs	r3, #0
 8003946:	653b      	str	r3, [r7, #80]	; 0x50
 8003948:	2300      	movs	r3, #0
 800394a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800394c:	2300      	movs	r3, #0
 800394e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t sysclockfreq = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	64bb      	str	r3, [r7, #72]	; 0x48
 8003958:	2300      	movs	r3, #0
 800395a:	647b      	str	r3, [r7, #68]	; 0x44
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800395c:	4b5b      	ldr	r3, [pc, #364]	; (8003acc <HAL_RCC_GetSysClockFreq+0x1ac>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003964:	f003 030c 	and.w	r3, r3, #12
 8003968:	2b04      	cmp	r3, #4
 800396a:	d002      	beq.n	8003972 <HAL_RCC_GetSysClockFreq+0x52>
 800396c:	2b08      	cmp	r3, #8
 800396e:	d003      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0x58>
 8003970:	e09f      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003972:	4b57      	ldr	r3, [pc, #348]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8003974:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8003976:	e09f      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800397a:	0c9b      	lsrs	r3, r3, #18
 800397c:	f003 030f 	and.w	r3, r3, #15
 8003980:	3340      	adds	r3, #64	; 0x40
 8003982:	f107 0220 	add.w	r2, r7, #32
 8003986:	4413      	add	r3, r2
 8003988:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800398c:	64fb      	str	r3, [r7, #76]	; 0x4c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800398e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 8084 	beq.w	8003aa2 <HAL_RCC_GetSysClockFreq+0x182>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800399a:	4b4c      	ldr	r3, [pc, #304]	; (8003acc <HAL_RCC_GetSysClockFreq+0x1ac>)
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	3340      	adds	r3, #64	; 0x40
 80039a4:	f107 0220 	add.w	r2, r7, #32
 80039a8:	4413      	add	r3, r2
 80039aa:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80039ae:	653b      	str	r3, [r7, #80]	; 0x50
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80039b0:	4b46      	ldr	r3, [pc, #280]	; (8003acc <HAL_RCC_GetSysClockFreq+0x1ac>)
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d060      	beq.n	8003a7e <HAL_RCC_GetSysClockFreq+0x15e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80039bc:	4b43      	ldr	r3, [pc, #268]	; (8003acc <HAL_RCC_GetSysClockFreq+0x1ac>)
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	3301      	adds	r3, #1
 80039c8:	64bb      	str	r3, [r7, #72]	; 0x48
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80039ca:	4b40      	ldr	r3, [pc, #256]	; (8003acc <HAL_RCC_GetSysClockFreq+0x1ac>)
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	0a1b      	lsrs	r3, r3, #8
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	3302      	adds	r3, #2
 80039d6:	647b      	str	r3, [r7, #68]	; 0x44
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80039d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039da:	2200      	movs	r2, #0
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	617a      	str	r2, [r7, #20]
 80039e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e2:	2200      	movs	r2, #0
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	61fa      	str	r2, [r7, #28]
 80039e8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80039ec:	4622      	mov	r2, r4
 80039ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80039f2:	4684      	mov	ip, r0
 80039f4:	fb0c f202 	mul.w	r2, ip, r2
 80039f8:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80039fc:	468c      	mov	ip, r1
 80039fe:	4618      	mov	r0, r3
 8003a00:	4621      	mov	r1, r4
 8003a02:	4603      	mov	r3, r0
 8003a04:	fb03 f30c 	mul.w	r3, r3, ip
 8003a08:	4413      	add	r3, r2
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	69b9      	ldr	r1, [r7, #24]
 8003a0e:	fba2 8901 	umull	r8, r9, r2, r1
 8003a12:	444b      	add	r3, r9
 8003a14:	4699      	mov	r9, r3
 8003a16:	4b2e      	ldr	r3, [pc, #184]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8003a18:	fb03 f209 	mul.w	r2, r3, r9
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	fb03 f308 	mul.w	r3, r3, r8
 8003a22:	4413      	add	r3, r2
 8003a24:	4a2a      	ldr	r2, [pc, #168]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8003a26:	fba8 ab02 	umull	sl, fp, r8, r2
 8003a2a:	445b      	add	r3, fp
 8003a2c:	469b      	mov	fp, r3
 8003a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a30:	2200      	movs	r2, #0
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	60fa      	str	r2, [r7, #12]
 8003a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a38:	2200      	movs	r2, #0
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003a42:	4622      	mov	r2, r4
 8003a44:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003a48:	4641      	mov	r1, r8
 8003a4a:	fb01 f202 	mul.w	r2, r1, r2
 8003a4e:	46cc      	mov	ip, r9
 8003a50:	4618      	mov	r0, r3
 8003a52:	4621      	mov	r1, r4
 8003a54:	4603      	mov	r3, r0
 8003a56:	fb03 f30c 	mul.w	r3, r3, ip
 8003a5a:	4413      	add	r3, r2
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4641      	mov	r1, r8
 8003a60:	fba2 5601 	umull	r5, r6, r2, r1
 8003a64:	4433      	add	r3, r6
 8003a66:	461e      	mov	r6, r3
 8003a68:	462a      	mov	r2, r5
 8003a6a:	4633      	mov	r3, r6
 8003a6c:	4650      	mov	r0, sl
 8003a6e:	4659      	mov	r1, fp
 8003a70:	f7fc fbe6 	bl	8000240 <__aeabi_uldivmod>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4613      	mov	r3, r2
 8003a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a7c:	e007      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0x16e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a80:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8003a82:	fb03 f202 	mul.w	r2, r3, r2
 8003a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003a8e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003a92:	461a      	mov	r2, r3
 8003a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d108      	bne.n	8003aac <HAL_RCC_GetSysClockFreq+0x18c>
        {
          pllclk = pllclk / 2;
 8003a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a9c:	085b      	lsrs	r3, r3, #1
 8003a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aa0:	e004      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x18c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa4:	4a0b      	ldr	r2, [pc, #44]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x1b4>)
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      sysclockfreq = pllclk;
 8003aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aae:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8003ab0:	e002      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ab4:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8003ab6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ab8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3764      	adds	r7, #100	; 0x64
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ac4:	0800b76c 	.word	0x0800b76c
 8003ac8:	0800b77c 	.word	0x0800b77c
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	00989680 	.word	0x00989680
 8003ad4:	003d0900 	.word	0x003d0900
 8003ad8:	007a1200 	.word	0x007a1200

08003adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae0:	4b02      	ldr	r3, [pc, #8]	; (8003aec <HAL_RCC_GetHCLKFreq+0x10>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr
 8003aec:	20000000 	.word	0x20000000

08003af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003af4:	f7ff fff2 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003af8:	4602      	mov	r2, r0
 8003afa:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	4903      	ldr	r1, [pc, #12]	; (8003b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b06:	5ccb      	ldrb	r3, [r1, r3]
 8003b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40021000 	.word	0x40021000
 8003b14:	0800b7e0 	.word	0x0800b7e0

08003b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b1c:	f7ff ffde 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b20:	4602      	mov	r2, r0
 8003b22:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	0adb      	lsrs	r3, r3, #11
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	4903      	ldr	r1, [pc, #12]	; (8003b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b2e:	5ccb      	ldrb	r3, [r1, r3]
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	0800b7e0 	.word	0x0800b7e0

08003b40 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	220f      	movs	r2, #15
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b50:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <HAL_RCC_GetClockConfig+0x58>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 0203 	and.w	r2, r3, #3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b5c:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <HAL_RCC_GetClockConfig+0x58>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_RCC_GetClockConfig+0x58>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003b74:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <HAL_RCC_GetClockConfig+0x58>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	08db      	lsrs	r3, r3, #3
 8003b7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <HAL_RCC_GetClockConfig+0x5c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0207 	and.w	r2, r3, #7
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40022000 	.word	0x40022000

08003ba0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ba8:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <RCC_Delay+0x34>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a0a      	ldr	r2, [pc, #40]	; (8003bd8 <RCC_Delay+0x38>)
 8003bae:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb2:	0a5b      	lsrs	r3, r3, #9
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	fb02 f303 	mul.w	r3, r2, r3
 8003bba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bbc:	bf00      	nop
  }
  while (Delay --);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1e5a      	subs	r2, r3, #1
 8003bc2:	60fa      	str	r2, [r7, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f9      	bne.n	8003bbc <RCC_Delay+0x1c>
}
 8003bc8:	bf00      	nop
 8003bca:	bf00      	nop
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr
 8003bd4:	20000000 	.word	0x20000000
 8003bd8:	10624dd3 	.word	0x10624dd3

08003bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	2300      	movs	r3, #0
 8003bea:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d07d      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c00:	4b8b      	ldr	r3, [pc, #556]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10d      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c0c:	4b88      	ldr	r3, [pc, #544]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	4a87      	ldr	r2, [pc, #540]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c16:	61d3      	str	r3, [r2, #28]
 8003c18:	4b85      	ldr	r3, [pc, #532]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c24:	2301      	movs	r3, #1
 8003c26:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c28:	4b82      	ldr	r3, [pc, #520]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d118      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c34:	4b7f      	ldr	r3, [pc, #508]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a7e      	ldr	r2, [pc, #504]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c40:	f7fd f9a8 	bl	8000f94 <HAL_GetTick>
 8003c44:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c46:	e008      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c48:	f7fd f9a4 	bl	8000f94 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e0e5      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5a:	4b76      	ldr	r3, [pc, #472]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c66:	4b72      	ldr	r3, [pc, #456]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6e:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d02e      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d027      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c84:	4b6a      	ldr	r3, [pc, #424]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c8e:	4b6a      	ldr	r3, [pc, #424]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c94:	4b68      	ldr	r3, [pc, #416]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c9a:	4a65      	ldr	r2, [pc, #404]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d014      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003caa:	f7fd f973 	bl	8000f94 <HAL_GetTick>
 8003cae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb0:	e00a      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb2:	f7fd f96f 	bl	8000f94 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e0ae      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc8:	4b59      	ldr	r3, [pc, #356]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0ee      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cd4:	4b56      	ldr	r3, [pc, #344]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4953      	ldr	r1, [pc, #332]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ce6:	7efb      	ldrb	r3, [r7, #27]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d105      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cec:	4b50      	ldr	r3, [pc, #320]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	4a4f      	ldr	r2, [pc, #316]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d04:	4b4a      	ldr	r3, [pc, #296]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4947      	ldr	r1, [pc, #284]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d008      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003d22:	4b43      	ldr	r3, [pc, #268]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	4940      	ldr	r1, [pc, #256]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8003d40:	4b3b      	ldr	r3, [pc, #236]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	4938      	ldr	r1, [pc, #224]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8003d52:	4b37      	ldr	r3, [pc, #220]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d105      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8003d5e:	4b34      	ldr	r3, [pc, #208]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d148      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8003d74:	4b2e      	ldr	r3, [pc, #184]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d138      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003d80:	4b2b      	ldr	r3, [pc, #172]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d009      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8003d8c:	4b28      	ldr	r3, [pc, #160]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e042      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8003da0:	4b23      	ldr	r3, [pc, #140]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	4920      	ldr	r1, [pc, #128]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8003db2:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	491c      	ldr	r1, [pc, #112]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8003dc4:	4b1d      	ldr	r3, [pc, #116]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7fd f8e3 	bl	8000f94 <HAL_GetTick>
 8003dce:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003dd2:	f7fd f8df 	bl	8000f94 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b64      	cmp	r3, #100	; 0x64
 8003dde:	d901      	bls.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e020      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003de4:	4b12      	ldr	r3, [pc, #72]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003df0:	e009      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8003df2:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d001      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e00f      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d008      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e12:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	4904      	ldr	r1, [pc, #16]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3720      	adds	r7, #32
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40007000 	.word	0x40007000
 8003e38:	42420440 	.word	0x42420440
 8003e3c:	42420070 	.word	0x42420070

08003e40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e076      	b.n	8003f40 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d108      	bne.n	8003e6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e62:	d009      	beq.n	8003e78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	61da      	str	r2, [r3, #28]
 8003e6a:	e005      	b.n	8003e78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fc fe7c 	bl	8000b90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efc:	ea42 0103 	orr.w	r1, r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	0c1a      	lsrs	r2, r3, #16
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f002 0204 	and.w	r2, r2, #4
 8003f1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	69da      	ldr	r2, [r3, #28]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	099b      	lsrs	r3, r3, #6
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10f      	bne.n	8003f8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	099b      	lsrs	r3, r3, #6
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d004      	beq.n	8003f8c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	4798      	blx	r3
    return;
 8003f8a:	e0be      	b.n	800410a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_SPI_IRQHandler+0x66>
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	09db      	lsrs	r3, r3, #7
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d004      	beq.n	8003fae <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4798      	blx	r3
    return;
 8003fac:	e0ad      	b.n	800410a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d106      	bne.n	8003fc8 <HAL_SPI_IRQHandler+0x80>
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	099b      	lsrs	r3, r3, #6
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 80a1 	beq.w	800410a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 809a 	beq.w	800410a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	099b      	lsrs	r3, r3, #6
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d023      	beq.n	800402a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d011      	beq.n	8004012 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	f043 0204 	orr.w	r2, r3, #4
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	e00b      	b.n	800402a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004012:	2300      	movs	r3, #0
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	693b      	ldr	r3, [r7, #16]
        return;
 8004028:	e06f      	b.n	800410a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	095b      	lsrs	r3, r3, #5
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d014      	beq.n	8004060 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403a:	f043 0201 	orr.w	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004064:	2b00      	cmp	r3, #0
 8004066:	d04f      	beq.n	8004108 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004076:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d104      	bne.n	8004094 <HAL_SPI_IRQHandler+0x14c>
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d034      	beq.n	80040fe <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0203 	bic.w	r2, r2, #3
 80040a2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d011      	beq.n	80040d0 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b0:	4a17      	ldr	r2, [pc, #92]	; (8004110 <HAL_SPI_IRQHandler+0x1c8>)
 80040b2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fd f8b3 	bl	8001224 <HAL_DMA_Abort_IT>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d016      	beq.n	8004106 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040dc:	4a0c      	ldr	r2, [pc, #48]	; (8004110 <HAL_SPI_IRQHandler+0x1c8>)
 80040de:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fd f89d 	bl	8001224 <HAL_DMA_Abort_IT>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80040fc:	e003      	b.n	8004106 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f808 	bl	8004114 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004104:	e000      	b.n	8004108 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004106:	bf00      	nop
    return;
 8004108:	bf00      	nop
  }
}
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	08004127 	.word	0x08004127

08004114 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr

08004126 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f7ff ffe7 	bl	8004114 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004146:	bf00      	nop
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e041      	b.n	80041e4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d106      	bne.n	800417a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7fc fd6d 	bl	8000c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2202      	movs	r2, #2
 800417e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3304      	adds	r3, #4
 800418a:	4619      	mov	r1, r3
 800418c:	4610      	mov	r0, r2
 800418e:	f000 fa77 	bl	8004680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d001      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e03f      	b.n	8004284 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0201 	orr.w	r2, r2, #1
 800421a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1b      	ldr	r2, [pc, #108]	; (8004290 <HAL_TIM_Base_Start_IT+0xa4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d013      	beq.n	800424e <HAL_TIM_Base_Start_IT+0x62>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422e:	d00e      	beq.n	800424e <HAL_TIM_Base_Start_IT+0x62>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a17      	ldr	r2, [pc, #92]	; (8004294 <HAL_TIM_Base_Start_IT+0xa8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d009      	beq.n	800424e <HAL_TIM_Base_Start_IT+0x62>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a16      	ldr	r2, [pc, #88]	; (8004298 <HAL_TIM_Base_Start_IT+0xac>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d004      	beq.n	800424e <HAL_TIM_Base_Start_IT+0x62>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a14      	ldr	r2, [pc, #80]	; (800429c <HAL_TIM_Base_Start_IT+0xb0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d111      	bne.n	8004272 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2b06      	cmp	r3, #6
 800425e:	d010      	beq.n	8004282 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004270:	e007      	b.n	8004282 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0201 	orr.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40012c00 	.word	0x40012c00
 8004294:	40000400 	.word	0x40000400
 8004298:	40000800 	.word	0x40000800
 800429c:	40000c00 	.word	0x40000c00

080042a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d122      	bne.n	80042fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d11b      	bne.n	80042fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f06f 0202 	mvn.w	r2, #2
 80042cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f9b1 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 80042e8:	e005      	b.n	80042f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f9a4 	bl	8004638 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f9b3 	bl	800465c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0304 	and.w	r3, r3, #4
 8004306:	2b04      	cmp	r3, #4
 8004308:	d122      	bne.n	8004350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b04      	cmp	r3, #4
 8004316:	d11b      	bne.n	8004350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0204 	mvn.w	r2, #4
 8004320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2202      	movs	r2, #2
 8004326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f987 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 800433c:	e005      	b.n	800434a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f97a 	bl	8004638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f989 	bl	800465c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b08      	cmp	r3, #8
 800435c:	d122      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b08      	cmp	r3, #8
 800436a:	d11b      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0208 	mvn.w	r2, #8
 8004374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2204      	movs	r2, #4
 800437a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f95d 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 8004390:	e005      	b.n	800439e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f950 	bl	8004638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f95f 	bl	800465c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0310 	and.w	r3, r3, #16
 80043ae:	2b10      	cmp	r3, #16
 80043b0:	d122      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d11b      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0210 	mvn.w	r2, #16
 80043c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2208      	movs	r2, #8
 80043ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f933 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 80043e4:	e005      	b.n	80043f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f926 	bl	8004638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f935 	bl	800465c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b01      	cmp	r3, #1
 8004404:	d10e      	bne.n	8004424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b01      	cmp	r3, #1
 8004412:	d107      	bne.n	8004424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f06f 0201 	mvn.w	r2, #1
 800441c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fc fb66 	bl	8000af0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442e:	2b80      	cmp	r3, #128	; 0x80
 8004430:	d10e      	bne.n	8004450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443c:	2b80      	cmp	r3, #128	; 0x80
 800443e:	d107      	bne.n	8004450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fa89 	bl	8004962 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445a:	2b40      	cmp	r3, #64	; 0x40
 800445c:	d10e      	bne.n	800447c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004468:	2b40      	cmp	r3, #64	; 0x40
 800446a:	d107      	bne.n	800447c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f8f9 	bl	800466e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b20      	cmp	r3, #32
 8004488:	d10e      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0320 	and.w	r3, r3, #32
 8004494:	2b20      	cmp	r3, #32
 8004496:	d107      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0220 	mvn.w	r2, #32
 80044a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fa54 	bl	8004950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044a8:	bf00      	nop
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_TIM_ConfigClockSource+0x18>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e0b3      	b.n	8004630 <HAL_TIM_ConfigClockSource+0x180>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004500:	d03e      	beq.n	8004580 <HAL_TIM_ConfigClockSource+0xd0>
 8004502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004506:	f200 8087 	bhi.w	8004618 <HAL_TIM_ConfigClockSource+0x168>
 800450a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450e:	f000 8085 	beq.w	800461c <HAL_TIM_ConfigClockSource+0x16c>
 8004512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004516:	d87f      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x168>
 8004518:	2b70      	cmp	r3, #112	; 0x70
 800451a:	d01a      	beq.n	8004552 <HAL_TIM_ConfigClockSource+0xa2>
 800451c:	2b70      	cmp	r3, #112	; 0x70
 800451e:	d87b      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x168>
 8004520:	2b60      	cmp	r3, #96	; 0x60
 8004522:	d050      	beq.n	80045c6 <HAL_TIM_ConfigClockSource+0x116>
 8004524:	2b60      	cmp	r3, #96	; 0x60
 8004526:	d877      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x168>
 8004528:	2b50      	cmp	r3, #80	; 0x50
 800452a:	d03c      	beq.n	80045a6 <HAL_TIM_ConfigClockSource+0xf6>
 800452c:	2b50      	cmp	r3, #80	; 0x50
 800452e:	d873      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x168>
 8004530:	2b40      	cmp	r3, #64	; 0x40
 8004532:	d058      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0x136>
 8004534:	2b40      	cmp	r3, #64	; 0x40
 8004536:	d86f      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x168>
 8004538:	2b30      	cmp	r3, #48	; 0x30
 800453a:	d064      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x156>
 800453c:	2b30      	cmp	r3, #48	; 0x30
 800453e:	d86b      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x168>
 8004540:	2b20      	cmp	r3, #32
 8004542:	d060      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x156>
 8004544:	2b20      	cmp	r3, #32
 8004546:	d867      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x168>
 8004548:	2b00      	cmp	r3, #0
 800454a:	d05c      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x156>
 800454c:	2b10      	cmp	r3, #16
 800454e:	d05a      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004550:	e062      	b.n	8004618 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6899      	ldr	r1, [r3, #8]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f000 f970 	bl	8004846 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004574:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	609a      	str	r2, [r3, #8]
      break;
 800457e:	e04e      	b.n	800461e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6818      	ldr	r0, [r3, #0]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	6899      	ldr	r1, [r3, #8]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f000 f959 	bl	8004846 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045a2:	609a      	str	r2, [r3, #8]
      break;
 80045a4:	e03b      	b.n	800461e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6859      	ldr	r1, [r3, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	461a      	mov	r2, r3
 80045b4:	f000 f8d0 	bl	8004758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2150      	movs	r1, #80	; 0x50
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 f927 	bl	8004812 <TIM_ITRx_SetConfig>
      break;
 80045c4:	e02b      	b.n	800461e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6859      	ldr	r1, [r3, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	461a      	mov	r2, r3
 80045d4:	f000 f8ee 	bl	80047b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2160      	movs	r1, #96	; 0x60
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f917 	bl	8004812 <TIM_ITRx_SetConfig>
      break;
 80045e4:	e01b      	b.n	800461e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6859      	ldr	r1, [r3, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	461a      	mov	r2, r3
 80045f4:	f000 f8b0 	bl	8004758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2140      	movs	r1, #64	; 0x40
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 f907 	bl	8004812 <TIM_ITRx_SetConfig>
      break;
 8004604:	e00b      	b.n	800461e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4619      	mov	r1, r3
 8004610:	4610      	mov	r0, r2
 8004612:	f000 f8fe 	bl	8004812 <TIM_ITRx_SetConfig>
        break;
 8004616:	e002      	b.n	800461e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004618:	bf00      	nop
 800461a:	e000      	b.n	800461e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800461c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr

0800466e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr

08004680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a2d      	ldr	r2, [pc, #180]	; (8004748 <TIM_Base_SetConfig+0xc8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00f      	beq.n	80046b8 <TIM_Base_SetConfig+0x38>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469e:	d00b      	beq.n	80046b8 <TIM_Base_SetConfig+0x38>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a2a      	ldr	r2, [pc, #168]	; (800474c <TIM_Base_SetConfig+0xcc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d007      	beq.n	80046b8 <TIM_Base_SetConfig+0x38>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a29      	ldr	r2, [pc, #164]	; (8004750 <TIM_Base_SetConfig+0xd0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d003      	beq.n	80046b8 <TIM_Base_SetConfig+0x38>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a28      	ldr	r2, [pc, #160]	; (8004754 <TIM_Base_SetConfig+0xd4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d108      	bne.n	80046ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a1e      	ldr	r2, [pc, #120]	; (8004748 <TIM_Base_SetConfig+0xc8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00f      	beq.n	80046f2 <TIM_Base_SetConfig+0x72>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d8:	d00b      	beq.n	80046f2 <TIM_Base_SetConfig+0x72>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a1b      	ldr	r2, [pc, #108]	; (800474c <TIM_Base_SetConfig+0xcc>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d007      	beq.n	80046f2 <TIM_Base_SetConfig+0x72>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a1a      	ldr	r2, [pc, #104]	; (8004750 <TIM_Base_SetConfig+0xd0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d003      	beq.n	80046f2 <TIM_Base_SetConfig+0x72>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a19      	ldr	r2, [pc, #100]	; (8004754 <TIM_Base_SetConfig+0xd4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d108      	bne.n	8004704 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a07      	ldr	r2, [pc, #28]	; (8004748 <TIM_Base_SetConfig+0xc8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d103      	bne.n	8004738 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	615a      	str	r2, [r3, #20]
}
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr
 8004748:	40012c00 	.word	0x40012c00
 800474c:	40000400 	.word	0x40000400
 8004750:	40000800 	.word	0x40000800
 8004754:	40000c00 	.word	0x40000c00

08004758 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f023 0201 	bic.w	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f023 030a 	bic.w	r3, r3, #10
 8004794:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr

080047b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	f023 0210 	bic.w	r2, r3, #16
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	031b      	lsls	r3, r3, #12
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	621a      	str	r2, [r3, #32]
}
 8004808:	bf00      	nop
 800480a:	371c      	adds	r7, #28
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr

08004812 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004812:	b480      	push	{r7}
 8004814:	b085      	sub	sp, #20
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004828:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	f043 0307 	orr.w	r3, r3, #7
 8004834:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	609a      	str	r2, [r3, #8]
}
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr

08004846 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004846:	b480      	push	{r7}
 8004848:	b087      	sub	sp, #28
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004860:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	021a      	lsls	r2, r3, #8
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	431a      	orrs	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4313      	orrs	r3, r2
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	609a      	str	r2, [r3, #8]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr

08004884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004898:	2302      	movs	r3, #2
 800489a:	e04b      	b.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a19      	ldr	r2, [pc, #100]	; (8004940 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d013      	beq.n	8004908 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e8:	d00e      	beq.n	8004908 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a15      	ldr	r2, [pc, #84]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d009      	beq.n	8004908 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a13      	ldr	r2, [pc, #76]	; (8004948 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d004      	beq.n	8004908 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a12      	ldr	r2, [pc, #72]	; (800494c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d10c      	bne.n	8004922 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800490e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	4313      	orrs	r3, r2
 8004918:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	40012c00 	.word	0x40012c00
 8004944:	40000400 	.word	0x40000400
 8004948:	40000800 	.word	0x40000800
 800494c:	40000c00 	.word	0x40000c00

08004950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr

08004962 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e03f      	b.n	8004a06 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fc f97e 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2224      	movs	r2, #36	; 0x24
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fc1d 	bl	80051f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695a      	ldr	r2, [r3, #20]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b08a      	sub	sp, #40	; 0x28
 8004a12:	af02      	add	r7, sp, #8
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	603b      	str	r3, [r7, #0]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b20      	cmp	r3, #32
 8004a2c:	d17c      	bne.n	8004b28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <HAL_UART_Transmit+0x2c>
 8004a34:	88fb      	ldrh	r3, [r7, #6]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e075      	b.n	8004b2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d101      	bne.n	8004a4c <HAL_UART_Transmit+0x3e>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e06e      	b.n	8004b2a <HAL_UART_Transmit+0x11c>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2221      	movs	r2, #33	; 0x21
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a62:	f7fc fa97 	bl	8000f94 <HAL_GetTick>
 8004a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	88fa      	ldrh	r2, [r7, #6]
 8004a6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	88fa      	ldrh	r2, [r7, #6]
 8004a72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7c:	d108      	bne.n	8004a90 <HAL_UART_Transmit+0x82>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d104      	bne.n	8004a90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	61bb      	str	r3, [r7, #24]
 8004a8e:	e003      	b.n	8004a98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004aa0:	e02a      	b.n	8004af8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2180      	movs	r1, #128	; 0x80
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 fa08 	bl	8004ec2 <UART_WaitOnFlagUntilTimeout>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e036      	b.n	8004b2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10b      	bne.n	8004ada <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ad0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	3302      	adds	r3, #2
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	e007      	b.n	8004aea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	781a      	ldrb	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1cf      	bne.n	8004aa2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2140      	movs	r1, #64	; 0x40
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f9d8 	bl	8004ec2 <UART_WaitOnFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e006      	b.n	8004b2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	e000      	b.n	8004b2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b28:	2302      	movs	r3, #2
  }
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3720      	adds	r7, #32
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08a      	sub	sp, #40	; 0x28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10d      	bne.n	8004b86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	f003 0320 	and.w	r3, r3, #32
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <HAL_UART_IRQHandler+0x52>
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	f003 0320 	and.w	r3, r3, #32
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fa90 	bl	80050a4 <UART_Receive_IT>
      return;
 8004b84:	e17b      	b.n	8004e7e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 80b1 	beq.w	8004cf0 <HAL_UART_IRQHandler+0x1bc>
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d105      	bne.n	8004ba4 <HAL_UART_IRQHandler+0x70>
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 80a6 	beq.w	8004cf0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x90>
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	f043 0201 	orr.w	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <HAL_UART_IRQHandler+0xb0>
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d005      	beq.n	8004be4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	f043 0202 	orr.w	r2, r3, #2
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <HAL_UART_IRQHandler+0xd0>
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	f043 0204 	orr.w	r2, r3, #4
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00f      	beq.n	8004c2e <HAL_UART_IRQHandler+0xfa>
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d104      	bne.n	8004c22 <HAL_UART_IRQHandler+0xee>
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	f043 0208 	orr.w	r2, r3, #8
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 811e 	beq.w	8004e74 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d007      	beq.n	8004c52 <HAL_UART_IRQHandler+0x11e>
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	f003 0320 	and.w	r3, r3, #32
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fa29 	bl	80050a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf14      	ite	ne
 8004c60:	2301      	movne	r3, #1
 8004c62:	2300      	moveq	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d102      	bne.n	8004c7a <HAL_UART_IRQHandler+0x146>
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d031      	beq.n	8004cde <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f96b 	bl	8004f56 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d023      	beq.n	8004cd6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695a      	ldr	r2, [r3, #20]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c9c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d013      	beq.n	8004cce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	4a76      	ldr	r2, [pc, #472]	; (8004e84 <HAL_UART_IRQHandler+0x350>)
 8004cac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fc fab6 	bl	8001224 <HAL_DMA_Abort_IT>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d016      	beq.n	8004cec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ccc:	e00e      	b.n	8004cec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f8e3 	bl	8004e9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd4:	e00a      	b.n	8004cec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f8df 	bl	8004e9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cdc:	e006      	b.n	8004cec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f8db 	bl	8004e9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004cea:	e0c3      	b.n	8004e74 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cec:	bf00      	nop
    return;
 8004cee:	e0c1      	b.n	8004e74 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	f040 80a1 	bne.w	8004e3c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 809b 	beq.w	8004e3c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 8095 	beq.w	8004e3c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d04e      	beq.n	8004dd4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004d40:	8a3b      	ldrh	r3, [r7, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 8098 	beq.w	8004e78 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d4c:	8a3a      	ldrh	r2, [r7, #16]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	f080 8092 	bcs.w	8004e78 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	8a3a      	ldrh	r2, [r7, #16]
 8004d58:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	2b20      	cmp	r3, #32
 8004d62:	d02b      	beq.n	8004dbc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d72:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0201 	bic.w	r2, r2, #1
 8004d82:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d92:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0210 	bic.w	r2, r2, #16
 8004db0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fc f9f9 	bl	80011ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	4619      	mov	r1, r3
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f86d 	bl	8004eac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004dd2:	e051      	b.n	8004e78 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d047      	beq.n	8004e7c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004dec:	8a7b      	ldrh	r3, [r7, #18]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d044      	beq.n	8004e7c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e00:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695a      	ldr	r2, [r3, #20]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0201 	bic.w	r2, r2, #1
 8004e10:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0210 	bic.w	r2, r2, #16
 8004e2e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e30:	8a7b      	ldrh	r3, [r7, #18]
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f839 	bl	8004eac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e3a:	e01f      	b.n	8004e7c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d008      	beq.n	8004e58 <HAL_UART_IRQHandler+0x324>
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f8c0 	bl	8004fd6 <UART_Transmit_IT>
    return;
 8004e56:	e012      	b.n	8004e7e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00d      	beq.n	8004e7e <HAL_UART_IRQHandler+0x34a>
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d008      	beq.n	8004e7e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f901 	bl	8005074 <UART_EndTransmit_IT>
    return;
 8004e72:	e004      	b.n	8004e7e <HAL_UART_IRQHandler+0x34a>
    return;
 8004e74:	bf00      	nop
 8004e76:	e002      	b.n	8004e7e <HAL_UART_IRQHandler+0x34a>
      return;
 8004e78:	bf00      	nop
 8004e7a:	e000      	b.n	8004e7e <HAL_UART_IRQHandler+0x34a>
      return;
 8004e7c:	bf00      	nop
  }
}
 8004e7e:	3728      	adds	r7, #40	; 0x28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	08004faf 	.word	0x08004faf

08004e88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bc80      	pop	{r7}
 8004e98:	4770      	bx	lr

08004e9a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bc80      	pop	{r7}
 8004eaa:	4770      	bx	lr

08004eac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr

08004ec2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	603b      	str	r3, [r7, #0]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed2:	e02c      	b.n	8004f2e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eda:	d028      	beq.n	8004f2e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d007      	beq.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ee2:	f7fc f857 	bl	8000f94 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d21d      	bcs.n	8004f2e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f00:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0201 	bic.w	r2, r2, #1
 8004f10:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e00f      	b.n	8004f4e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4013      	ands	r3, r2
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	bf0c      	ite	eq
 8004f3e:	2301      	moveq	r3, #1
 8004f40:	2300      	movne	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	461a      	mov	r2, r3
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d0c3      	beq.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f6c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695a      	ldr	r2, [r3, #20]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0201 	bic.w	r2, r2, #1
 8004f7c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d107      	bne.n	8004f96 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0210 	bic.w	r2, r2, #16
 8004f94:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr

08004fae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f7ff ff66 	bl	8004e9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fce:	bf00      	nop
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b21      	cmp	r3, #33	; 0x21
 8004fe8:	d13e      	bne.n	8005068 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff2:	d114      	bne.n	800501e <UART_Transmit_IT+0x48>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d110      	bne.n	800501e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005010:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	1c9a      	adds	r2, r3, #2
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	621a      	str	r2, [r3, #32]
 800501c:	e008      	b.n	8005030 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	1c59      	adds	r1, r3, #1
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6211      	str	r1, [r2, #32]
 8005028:	781a      	ldrb	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29b      	uxth	r3, r3
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	4619      	mov	r1, r3
 800503e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10f      	bne.n	8005064 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005052:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005062:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	e000      	b.n	800506a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005068:	2302      	movs	r3, #2
  }
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr

08005074 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800508a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7ff fef7 	bl	8004e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b22      	cmp	r3, #34	; 0x22
 80050b6:	f040 8099 	bne.w	80051ec <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c2:	d117      	bne.n	80050f4 <UART_Receive_IT+0x50>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d113      	bne.n	80050f4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	1c9a      	adds	r2, r3, #2
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	629a      	str	r2, [r3, #40]	; 0x28
 80050f2:	e026      	b.n	8005142 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005106:	d007      	beq.n	8005118 <UART_Receive_IT+0x74>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <UART_Receive_IT+0x82>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d106      	bne.n	8005126 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	b2da      	uxtb	r2, r3
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	701a      	strb	r2, [r3, #0]
 8005124:	e008      	b.n	8005138 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005132:	b2da      	uxtb	r2, r3
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005146:	b29b      	uxth	r3, r3
 8005148:	3b01      	subs	r3, #1
 800514a:	b29b      	uxth	r3, r3
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	4619      	mov	r1, r3
 8005150:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005152:	2b00      	cmp	r3, #0
 8005154:	d148      	bne.n	80051e8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0220 	bic.w	r2, r2, #32
 8005164:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005174:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695a      	ldr	r2, [r3, #20]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0201 	bic.w	r2, r2, #1
 8005184:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005192:	2b01      	cmp	r3, #1
 8005194:	d123      	bne.n	80051de <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0210 	bic.w	r2, r2, #16
 80051aa:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0310 	and.w	r3, r3, #16
 80051b6:	2b10      	cmp	r3, #16
 80051b8:	d10a      	bne.n	80051d0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051d4:	4619      	mov	r1, r3
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff fe68 	bl	8004eac <HAL_UARTEx_RxEventCallback>
 80051dc:	e002      	b.n	80051e4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fb fbde 	bl	80009a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	e002      	b.n	80051ee <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	e000      	b.n	80051ee <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80051ec:	2302      	movs	r3, #2
  }
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005232:	f023 030c 	bic.w	r3, r3, #12
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6812      	ldr	r2, [r2, #0]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	430b      	orrs	r3, r1
 800523e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a2c      	ldr	r2, [pc, #176]	; (800530c <UART_SetConfig+0x114>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d103      	bne.n	8005268 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005260:	f7fe fc5a 	bl	8003b18 <HAL_RCC_GetPCLK2Freq>
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	e002      	b.n	800526e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005268:	f7fe fc42 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 800526c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	009a      	lsls	r2, r3, #2
 8005278:	441a      	add	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	fbb2 f3f3 	udiv	r3, r2, r3
 8005284:	4a22      	ldr	r2, [pc, #136]	; (8005310 <UART_SetConfig+0x118>)
 8005286:	fba2 2303 	umull	r2, r3, r2, r3
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	0119      	lsls	r1, r3, #4
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4613      	mov	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	009a      	lsls	r2, r3, #2
 8005298:	441a      	add	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80052a4:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <UART_SetConfig+0x118>)
 80052a6:	fba3 0302 	umull	r0, r3, r3, r2
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	2064      	movs	r0, #100	; 0x64
 80052ae:	fb00 f303 	mul.w	r3, r0, r3
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	3332      	adds	r3, #50	; 0x32
 80052b8:	4a15      	ldr	r2, [pc, #84]	; (8005310 <UART_SetConfig+0x118>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052c4:	4419      	add	r1, r3
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4613      	mov	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	009a      	lsls	r2, r3, #2
 80052d0:	441a      	add	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80052dc:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <UART_SetConfig+0x118>)
 80052de:	fba3 0302 	umull	r0, r3, r3, r2
 80052e2:	095b      	lsrs	r3, r3, #5
 80052e4:	2064      	movs	r0, #100	; 0x64
 80052e6:	fb00 f303 	mul.w	r3, r0, r3
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	3332      	adds	r3, #50	; 0x32
 80052f0:	4a07      	ldr	r2, [pc, #28]	; (8005310 <UART_SetConfig+0x118>)
 80052f2:	fba2 2303 	umull	r2, r3, r2, r3
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	f003 020f 	and.w	r2, r3, #15
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	440a      	add	r2, r1
 8005302:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005304:	bf00      	nop
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40013800 	.word	0x40013800
 8005310:	51eb851f 	.word	0x51eb851f

08005314 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005314:	b084      	sub	sp, #16
 8005316:	b580      	push	{r7, lr}
 8005318:	b084      	sub	sp, #16
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	f107 001c 	add.w	r0, r7, #28
 8005322:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f970 	bl	8005618 <USB_CoreReset>
 8005338:	4603      	mov	r3, r0
 800533a:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8005348:	7bfb      	ldrb	r3, [r7, #15]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005354:	b004      	add	sp, #16
 8005356:	4770      	bx	lr

08005358 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f043 0201 	orr.w	r2, r3, #1
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr

08005378 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f023 0201 	bic.w	r2, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr

08005398 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d115      	bne.n	80053e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053c6:	2001      	movs	r0, #1
 80053c8:	f7fb fdee 	bl	8000fa8 <HAL_Delay>
      ms++;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3301      	adds	r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f912 	bl	80055fc <USB_GetMode>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d01e      	beq.n	800541c <USB_SetCurrentMode+0x84>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b31      	cmp	r3, #49	; 0x31
 80053e2:	d9f0      	bls.n	80053c6 <USB_SetCurrentMode+0x2e>
 80053e4:	e01a      	b.n	800541c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053e6:	78fb      	ldrb	r3, [r7, #3]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d115      	bne.n	8005418 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053f8:	2001      	movs	r0, #1
 80053fa:	f7fb fdd5 	bl	8000fa8 <HAL_Delay>
      ms++;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3301      	adds	r3, #1
 8005402:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f8f9 	bl	80055fc <USB_GetMode>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d005      	beq.n	800541c <USB_SetCurrentMode+0x84>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b31      	cmp	r3, #49	; 0x31
 8005414:	d9f0      	bls.n	80053f8 <USB_SetCurrentMode+0x60>
 8005416:	e001      	b.n	800541c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e005      	b.n	8005428 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b32      	cmp	r3, #50	; 0x32
 8005420:	d101      	bne.n	8005426 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e000      	b.n	8005428 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	019b      	lsls	r3, r3, #6
 8005442:	f043 0220 	orr.w	r2, r3, #32
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3301      	adds	r3, #1
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4a08      	ldr	r2, [pc, #32]	; (8005474 <USB_FlushTxFifo+0x44>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d901      	bls.n	800545c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e006      	b.n	800546a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b20      	cmp	r3, #32
 8005466:	d0f0      	beq.n	800544a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	bc80      	pop	{r7}
 8005472:	4770      	bx	lr
 8005474:	00030d40 	.word	0x00030d40

08005478 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005480:	2300      	movs	r3, #0
 8005482:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2210      	movs	r2, #16
 8005488:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	3301      	adds	r3, #1
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4a08      	ldr	r2, [pc, #32]	; (80054b4 <USB_FlushRxFifo+0x3c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d901      	bls.n	800549c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e006      	b.n	80054aa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	2b10      	cmp	r3, #16
 80054a6:	d0f0      	beq.n	800548a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr
 80054b4:	00030d40 	.word	0x00030d40

080054b8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b089      	sub	sp, #36	; 0x24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	4611      	mov	r1, r2
 80054c4:	461a      	mov	r2, r3
 80054c6:	460b      	mov	r3, r1
 80054c8:	71fb      	strb	r3, [r7, #7]
 80054ca:	4613      	mov	r3, r2
 80054cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80054d6:	88bb      	ldrh	r3, [r7, #4]
 80054d8:	3303      	adds	r3, #3
 80054da:	089b      	lsrs	r3, r3, #2
 80054dc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80054de:	2300      	movs	r3, #0
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	e018      	b.n	8005516 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80054e4:	79fb      	ldrb	r3, [r7, #7]
 80054e6:	031a      	lsls	r2, r3, #12
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f0:	461a      	mov	r2, r3
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	3301      	adds	r3, #1
 80054fc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	3301      	adds	r3, #1
 8005502:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	3301      	adds	r3, #1
 8005508:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3301      	adds	r3, #1
 800550e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	3301      	adds	r3, #1
 8005514:	61bb      	str	r3, [r7, #24]
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	429a      	cmp	r2, r3
 800551c:	d3e2      	bcc.n	80054e4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3724      	adds	r7, #36	; 0x24
 8005524:	46bd      	mov	sp, r7
 8005526:	bc80      	pop	{r7}
 8005528:	4770      	bx	lr

0800552a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800552a:	b480      	push	{r7}
 800552c:	b08b      	sub	sp, #44	; 0x2c
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	4613      	mov	r3, r2
 8005536:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005540:	88fb      	ldrh	r3, [r7, #6]
 8005542:	089b      	lsrs	r3, r3, #2
 8005544:	b29b      	uxth	r3, r3
 8005546:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005548:	88fb      	ldrh	r3, [r7, #6]
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005550:	2300      	movs	r3, #0
 8005552:	623b      	str	r3, [r7, #32]
 8005554:	e014      	b.n	8005580 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	601a      	str	r2, [r3, #0]
    pDest++;
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	3301      	adds	r3, #1
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	3301      	adds	r3, #1
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	3301      	adds	r3, #1
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	3301      	adds	r3, #1
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	3301      	adds	r3, #1
 800557e:	623b      	str	r3, [r7, #32]
 8005580:	6a3a      	ldr	r2, [r7, #32]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	429a      	cmp	r2, r3
 8005586:	d3e6      	bcc.n	8005556 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005588:	8bfb      	ldrh	r3, [r7, #30]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d01e      	beq.n	80055cc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005598:	461a      	mov	r2, r3
 800559a:	f107 0310 	add.w	r3, r7, #16
 800559e:	6812      	ldr	r2, [r2, #0]
 80055a0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	fa22 f303 	lsr.w	r3, r2, r3
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	701a      	strb	r2, [r3, #0]
      i++;
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	3301      	adds	r3, #1
 80055b8:	623b      	str	r3, [r7, #32]
      pDest++;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	3301      	adds	r3, #1
 80055be:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80055c0:	8bfb      	ldrh	r3, [r7, #30]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80055c6:	8bfb      	ldrh	r3, [r7, #30]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1ea      	bne.n	80055a2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	372c      	adds	r7, #44	; 0x2c
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4013      	ands	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055f0:	68fb      	ldr	r3, [r7, #12]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bc80      	pop	{r7}
 80055fa:	4770      	bx	lr

080055fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	f003 0301 	and.w	r3, r3, #1
}
 800560c:	4618      	mov	r0, r3
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr
	...

08005618 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3301      	adds	r3, #1
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4a12      	ldr	r2, [pc, #72]	; (8005678 <USB_CoreReset+0x60>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d901      	bls.n	8005636 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e01b      	b.n	800566e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	daf2      	bge.n	8005624 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f043 0201 	orr.w	r2, r3, #1
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3301      	adds	r3, #1
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4a08      	ldr	r2, [pc, #32]	; (8005678 <USB_CoreReset+0x60>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d901      	bls.n	8005660 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e006      	b.n	800566e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b01      	cmp	r3, #1
 800566a:	d0f0      	beq.n	800564e <USB_CoreReset+0x36>

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	bc80      	pop	{r7}
 8005676:	4770      	bx	lr
 8005678:	00030d40 	.word	0x00030d40

0800567c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800567c:	b084      	sub	sp, #16
 800567e:	b580      	push	{r7, lr}
 8005680:	b084      	sub	sp, #16
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	f107 001c 	add.w	r0, r7, #28
 800568a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005698:	461a      	mov	r2, r3
 800569a:	2300      	movs	r3, #0
 800569c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ae:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056c4:	f023 0304 	bic.w	r3, r3, #4
 80056c8:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80056ca:	2110      	movs	r1, #16
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7ff feaf 	bl	8005430 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff fed0 	bl	8005478 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	e015      	b.n	800570a <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ea:	461a      	mov	r2, r3
 80056ec:	f04f 33ff 	mov.w	r3, #4294967295
 80056f0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fe:	461a      	mov	r2, r3
 8005700:	2300      	movs	r3, #0
 8005702:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3301      	adds	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	429a      	cmp	r2, r3
 8005710:	d3e5      	bcc.n	80056de <USB_HostInit+0x62>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f04f 32ff 	mov.w	r2, #4294967295
 800571e:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2280      	movs	r2, #128	; 0x80
 8005724:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a0c      	ldr	r2, [pc, #48]	; (800575c <USB_HostInit+0xe0>)
 800572a:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a0c      	ldr	r2, [pc, #48]	; (8005760 <USB_HostInit+0xe4>)
 8005730:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	f043 0210 	orr.w	r2, r3, #16
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699a      	ldr	r2, [r3, #24]
 8005744:	4b07      	ldr	r3, [pc, #28]	; (8005764 <USB_HostInit+0xe8>)
 8005746:	4313      	orrs	r3, r2
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005758:	b004      	add	sp, #16
 800575a:	4770      	bx	lr
 800575c:	00600080 	.word	0x00600080
 8005760:	004000e0 	.word	0x004000e0
 8005764:	a3200008 	.word	0xa3200008

08005768 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005786:	f023 0303 	bic.w	r3, r3, #3
 800578a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	68f9      	ldr	r1, [r7, #12]
 800579c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80057a0:	4313      	orrs	r3, r2
 80057a2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d107      	bne.n	80057ba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057b0:	461a      	mov	r2, r3
 80057b2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80057b6:	6053      	str	r3, [r2, #4]
 80057b8:	e009      	b.n	80057ce <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80057ba:	78fb      	ldrb	r3, [r7, #3]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d106      	bne.n	80057ce <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057c6:	461a      	mov	r2, r3
 80057c8:	f241 7370 	movw	r3, #6000	; 0x1770
 80057cc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr

080057da <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80057fa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005808:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800580a:	2064      	movs	r0, #100	; 0x64
 800580c:	f7fb fbcc 	bl	8000fa8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800581c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800581e:	200a      	movs	r0, #10
 8005820:	f7fb fbc2 	bl	8000fa8 <HAL_Delay>

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	460b      	mov	r3, r1
 8005838:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005852:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d109      	bne.n	8005872 <USB_DriveVbus+0x44>
 800585e:	78fb      	ldrb	r3, [r7, #3]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d106      	bne.n	8005872 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800586c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005870:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587c:	d109      	bne.n	8005892 <USB_DriveVbus+0x64>
 800587e:	78fb      	ldrb	r3, [r7, #3]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d106      	bne.n	8005892 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800588c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005890:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr

0800589e <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800589e:	b480      	push	{r7}
 80058a0:	b085      	sub	sp, #20
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	0c5b      	lsrs	r3, r3, #17
 80058bc:	f003 0303 	and.w	r3, r3, #3
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bc80      	pop	{r7}
 80058c8:	4770      	bx	lr

080058ca <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b085      	sub	sp, #20
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	b29b      	uxth	r3, r3
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bc80      	pop	{r7}
 80058e8:	4770      	bx	lr
	...

080058ec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	4608      	mov	r0, r1
 80058f6:	4611      	mov	r1, r2
 80058f8:	461a      	mov	r2, r3
 80058fa:	4603      	mov	r3, r0
 80058fc:	70fb      	strb	r3, [r7, #3]
 80058fe:	460b      	mov	r3, r1
 8005900:	70bb      	strb	r3, [r7, #2]
 8005902:	4613      	mov	r3, r2
 8005904:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800590e:	78fb      	ldrb	r3, [r7, #3]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4413      	add	r3, r2
 8005916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591a:	461a      	mov	r2, r3
 800591c:	f04f 33ff 	mov.w	r3, #4294967295
 8005920:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005922:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005926:	2b03      	cmp	r3, #3
 8005928:	d867      	bhi.n	80059fa <USB_HC_Init+0x10e>
 800592a:	a201      	add	r2, pc, #4	; (adr r2, 8005930 <USB_HC_Init+0x44>)
 800592c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005930:	08005941 	.word	0x08005941
 8005934:	080059bd 	.word	0x080059bd
 8005938:	08005941 	.word	0x08005941
 800593c:	0800597f 	.word	0x0800597f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	4413      	add	r3, r2
 8005948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594c:	461a      	mov	r2, r3
 800594e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005952:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005954:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005958:	2b00      	cmp	r3, #0
 800595a:	da51      	bge.n	8005a00 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	4413      	add	r3, r2
 8005964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	78fa      	ldrb	r2, [r7, #3]
 800596c:	0151      	lsls	r1, r2, #5
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	440a      	add	r2, r1
 8005972:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800597a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800597c:	e040      	b.n	8005a00 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800597e:	78fb      	ldrb	r3, [r7, #3]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	4413      	add	r3, r2
 8005986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598a:	461a      	mov	r2, r3
 800598c:	f240 639d 	movw	r3, #1693	; 0x69d
 8005990:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005992:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005996:	2b00      	cmp	r3, #0
 8005998:	da34      	bge.n	8005a04 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800599a:	78fb      	ldrb	r3, [r7, #3]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	78fa      	ldrb	r2, [r7, #3]
 80059aa:	0151      	lsls	r1, r2, #5
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	440a      	add	r2, r1
 80059b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b8:	60d3      	str	r3, [r2, #12]
      }

      break;
 80059ba:	e023      	b.n	8005a04 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80059bc:	78fb      	ldrb	r3, [r7, #3]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c8:	461a      	mov	r2, r3
 80059ca:	f240 2325 	movw	r3, #549	; 0x225
 80059ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80059d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	da17      	bge.n	8005a08 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	78fa      	ldrb	r2, [r7, #3]
 80059e8:	0151      	lsls	r1, r2, #5
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	440a      	add	r2, r1
 80059ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059f2:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80059f6:	60d3      	str	r3, [r2, #12]
      }
      break;
 80059f8:	e006      	b.n	8005a08 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	77fb      	strb	r3, [r7, #31]
      break;
 80059fe:	e004      	b.n	8005a0a <USB_HC_Init+0x11e>
      break;
 8005a00:	bf00      	nop
 8005a02:	e002      	b.n	8005a0a <USB_HC_Init+0x11e>
      break;
 8005a04:	bf00      	nop
 8005a06:	e000      	b.n	8005a0a <USB_HC_Init+0x11e>
      break;
 8005a08:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a10:	699a      	ldr	r2, [r3, #24]
 8005a12:	78fb      	ldrb	r3, [r7, #3]
 8005a14:	f003 030f 	and.w	r3, r3, #15
 8005a18:	2101      	movs	r1, #1
 8005a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1e:	6939      	ldr	r1, [r7, #16]
 8005a20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a24:	4313      	orrs	r3, r2
 8005a26:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005a34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	da03      	bge.n	8005a44 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005a3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a40:	61bb      	str	r3, [r7, #24]
 8005a42:	e001      	b.n	8005a48 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff ff28 	bl	800589e <USB_GetHostSpeed>
 8005a4e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005a50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d106      	bne.n	8005a66 <USB_HC_Init+0x17a>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d003      	beq.n	8005a66 <USB_HC_Init+0x17a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	e001      	b.n	8005a6a <USB_HC_Init+0x17e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a6a:	787b      	ldrb	r3, [r7, #1]
 8005a6c:	059b      	lsls	r3, r3, #22
 8005a6e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005a72:	78bb      	ldrb	r3, [r7, #2]
 8005a74:	02db      	lsls	r3, r3, #11
 8005a76:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a7a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005a7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a80:	049b      	lsls	r3, r3, #18
 8005a82:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005a86:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005a88:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005a8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005a8e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	0159      	lsls	r1, r3, #5
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	440b      	add	r3, r1
 8005a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005aa6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005aa8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d10f      	bne.n	8005ad0 <USB_HC_Init+0x1e4>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	78fa      	ldrb	r2, [r7, #3]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ace:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005ad0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3720      	adds	r7, #32
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop

08005adc <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b088      	sub	sp, #32
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	785b      	ldrb	r3, [r3, #1]
 8005aee:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005af0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005af4:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d018      	beq.n	8005b30 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	8912      	ldrh	r2, [r2, #8]
 8005b06:	4413      	add	r3, r2
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	8912      	ldrh	r2, [r2, #8]
 8005b0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b12:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8005b14:	8bfa      	ldrh	r2, [r7, #30]
 8005b16:	8a7b      	ldrh	r3, [r7, #18]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d90b      	bls.n	8005b34 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8005b1c:	8a7b      	ldrh	r3, [r7, #18]
 8005b1e:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b20:	8bfb      	ldrh	r3, [r7, #30]
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	8912      	ldrh	r2, [r2, #8]
 8005b26:	fb03 f202 	mul.w	r2, r3, r2
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	611a      	str	r2, [r3, #16]
 8005b2e:	e001      	b.n	8005b34 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8005b30:	2301      	movs	r3, #1
 8005b32:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	78db      	ldrb	r3, [r3, #3]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b3c:	8bfb      	ldrh	r3, [r7, #30]
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	8912      	ldrh	r2, [r2, #8]
 8005b42:	fb03 f202 	mul.w	r2, r3, r2
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	611a      	str	r2, [r3, #16]
 8005b4a:	e003      	b.n	8005b54 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	695a      	ldr	r2, [r3, #20]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b5c:	8bfb      	ldrh	r3, [r7, #30]
 8005b5e:	04d9      	lsls	r1, r3, #19
 8005b60:	4b59      	ldr	r3, [pc, #356]	; (8005cc8 <USB_HC_StartXfer+0x1ec>)
 8005b62:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b64:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	7a9b      	ldrb	r3, [r3, #10]
 8005b6a:	075b      	lsls	r3, r3, #29
 8005b6c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b70:	6979      	ldr	r1, [r7, #20]
 8005b72:	0148      	lsls	r0, r1, #5
 8005b74:	69b9      	ldr	r1, [r7, #24]
 8005b76:	4401      	add	r1, r0
 8005b78:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b7c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b7e:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	bf0c      	ite	eq
 8005b90:	2301      	moveq	r3, #1
 8005b92:	2300      	movne	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bb2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005bb6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	7c7b      	ldrb	r3, [r7, #17]
 8005bc8:	075b      	lsls	r3, r3, #29
 8005bca:	6979      	ldr	r1, [r7, #20]
 8005bcc:	0148      	lsls	r0, r1, #5
 8005bce:	69b9      	ldr	r1, [r7, #24]
 8005bd0:	4401      	add	r1, r0
 8005bd2:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bf0:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	78db      	ldrb	r3, [r3, #3]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d004      	beq.n	8005c04 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c00:	60bb      	str	r3, [r7, #8]
 8005c02:	e003      	b.n	8005c0c <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c0a:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c12:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c20:	461a      	mov	r2, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	78db      	ldrb	r3, [r3, #3]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d147      	bne.n	8005cbe <USB_HC_StartXfer+0x1e2>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d043      	beq.n	8005cbe <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	79db      	ldrb	r3, [r3, #7]
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d830      	bhi.n	8005ca0 <USB_HC_StartXfer+0x1c4>
 8005c3e:	a201      	add	r2, pc, #4	; (adr r2, 8005c44 <USB_HC_StartXfer+0x168>)
 8005c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c44:	08005c55 	.word	0x08005c55
 8005c48:	08005c79 	.word	0x08005c79
 8005c4c:	08005c55 	.word	0x08005c55
 8005c50:	08005c79 	.word	0x08005c79
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	3303      	adds	r3, #3
 8005c5a:	089b      	lsrs	r3, r3, #2
 8005c5c:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005c5e:	89fa      	ldrh	r2, [r7, #14]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d91c      	bls.n	8005ca4 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	f043 0220 	orr.w	r2, r3, #32
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c76:	e015      	b.n	8005ca4 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	3303      	adds	r3, #3
 8005c7e:	089b      	lsrs	r3, r3, #2
 8005c80:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005c82:	89fa      	ldrh	r2, [r7, #14]
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d90a      	bls.n	8005ca8 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c9e:	e003      	b.n	8005ca8 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8005ca0:	bf00      	nop
 8005ca2:	e002      	b.n	8005caa <USB_HC_StartXfer+0x1ce>
        break;
 8005ca4:	bf00      	nop
 8005ca6:	e000      	b.n	8005caa <USB_HC_StartXfer+0x1ce>
        break;
 8005ca8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68d9      	ldr	r1, [r3, #12]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	785a      	ldrb	r2, [r3, #1]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff fbfd 	bl	80054b8 <USB_WritePacket>
  }

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3720      	adds	r7, #32
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	1ff80000 	.word	0x1ff80000

08005ccc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	b29b      	uxth	r3, r3
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bc80      	pop	{r7}
 8005cea:	4770      	bx	lr

08005cec <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b089      	sub	sp, #36	; 0x24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	0c9b      	lsrs	r3, r3, #18
 8005d14:	f003 0303 	and.w	r3, r3, #3
 8005d18:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	0fdb      	lsrs	r3, r3, #31
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f003 0320 	and.w	r3, r3, #32
 8005d38:	2b20      	cmp	r3, #32
 8005d3a:	d104      	bne.n	8005d46 <USB_HC_Halt+0x5a>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	e0e8      	b.n	8005f18 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <USB_HC_Halt+0x66>
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d173      	bne.n	8005e3a <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	0151      	lsls	r1, r2, #5
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	440a      	add	r2, r1
 8005d68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d70:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f040 80cb 	bne.w	8005f16 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d143      	bne.n	8005e14 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	0151      	lsls	r1, r2, #5
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	440a      	add	r2, r1
 8005da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005da6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005daa:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dca:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	0151      	lsls	r1, r2, #5
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	440a      	add	r2, r1
 8005de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005de6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dea:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	3301      	adds	r3, #1
 8005df0:	61fb      	str	r3, [r7, #28]
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005df8:	d81d      	bhi.n	8005e36 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e10:	d0ec      	beq.n	8005dec <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e12:	e080      	b.n	8005f16 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	0151      	lsls	r1, r2, #5
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	440a      	add	r2, r1
 8005e2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e32:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e34:	e06f      	b.n	8005f16 <USB_HC_Halt+0x22a>
            break;
 8005e36:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e38:	e06d      	b.n	8005f16 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	0151      	lsls	r1, r2, #5
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	440a      	add	r2, r1
 8005e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e58:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d143      	bne.n	8005ef2 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	0151      	lsls	r1, r2, #5
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	440a      	add	r2, r1
 8005e80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e88:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	0151      	lsls	r1, r2, #5
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	440a      	add	r2, r1
 8005ea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ea8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ec4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ec8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	61fb      	str	r3, [r7, #28]
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ed6:	d81d      	bhi.n	8005f14 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eee:	d0ec      	beq.n	8005eca <USB_HC_Halt+0x1de>
 8005ef0:	e011      	b.n	8005f16 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	0151      	lsls	r1, r2, #5
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	440a      	add	r2, r1
 8005f08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	e000      	b.n	8005f16 <USB_HC_Halt+0x22a>
          break;
 8005f14:	bf00      	nop
    }
  }

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3724      	adds	r7, #36	; 0x24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bc80      	pop	{r7}
 8005f20:	4770      	bx	lr

08005f22 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b086      	sub	sp, #24
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff fa20 	bl	8005378 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005f38:	2110      	movs	r1, #16
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7ff fa78 	bl	8005430 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff fa99 	bl	8005478 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005f46:	2300      	movs	r3, #0
 8005f48:	613b      	str	r3, [r7, #16]
 8005f4a:	e01f      	b.n	8005f8c <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f62:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f6a:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f72:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f80:	461a      	mov	r2, r3
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	2b0f      	cmp	r3, #15
 8005f90:	d9dc      	bls.n	8005f4c <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005f92:	2300      	movs	r3, #0
 8005f94:	613b      	str	r3, [r7, #16]
 8005f96:	e034      	b.n	8006002 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fae:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fb6:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fbe:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fcc:	461a      	mov	r2, r3
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fde:	d80c      	bhi.n	8005ffa <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ff6:	d0ec      	beq.n	8005fd2 <USB_StopHost+0xb0>
 8005ff8:	e000      	b.n	8005ffc <USB_StopHost+0xda>
        break;
 8005ffa:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	3301      	adds	r3, #1
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	2b0f      	cmp	r3, #15
 8006006:	d9c7      	bls.n	8005f98 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800600e:	461a      	mov	r2, r3
 8006010:	f04f 33ff 	mov.w	r3, #4294967295
 8006014:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f04f 32ff 	mov.w	r2, #4294967295
 800601c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3718      	adds	r7, #24
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006028:	b590      	push	{r4, r7, lr}
 800602a:	b089      	sub	sp, #36	; 0x24
 800602c:	af04      	add	r7, sp, #16
 800602e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006030:	2301      	movs	r3, #1
 8006032:	2202      	movs	r2, #2
 8006034:	2102      	movs	r1, #2
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fd69 	bl	8006b0e <USBH_FindInterface>
 800603c:	4603      	mov	r3, r0
 800603e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	2bff      	cmp	r3, #255	; 0xff
 8006044:	d002      	beq.n	800604c <USBH_CDC_InterfaceInit+0x24>
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d901      	bls.n	8006050 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800604c:	2302      	movs	r3, #2
 800604e:	e13d      	b.n	80062cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fd3f 	bl	8006ad8 <USBH_SelectInterface>
 800605a:	4603      	mov	r3, r0
 800605c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800605e:	7bbb      	ldrb	r3, [r7, #14]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006064:	2302      	movs	r3, #2
 8006066:	e131      	b.n	80062cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800606e:	2050      	movs	r0, #80	; 0x50
 8006070:	f004 fe20 	bl	800acb4 <malloc>
 8006074:	4603      	mov	r3, r0
 8006076:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006088:	2302      	movs	r3, #2
 800608a:	e11f      	b.n	80062cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800608c:	2250      	movs	r2, #80	; 0x50
 800608e:	2100      	movs	r1, #0
 8006090:	68b8      	ldr	r0, [r7, #8]
 8006092:	f004 fe2d 	bl	800acf0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006096:	7bfb      	ldrb	r3, [r7, #15]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	211a      	movs	r1, #26
 800609c:	fb01 f303 	mul.w	r3, r1, r3
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	b25b      	sxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	da15      	bge.n	80060da <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	211a      	movs	r1, #26
 80060b4:	fb01 f303 	mul.w	r3, r1, r3
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80060be:	781a      	ldrb	r2, [r3, #0]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	211a      	movs	r1, #26
 80060ca:	fb01 f303 	mul.w	r3, r1, r3
 80060ce:	4413      	add	r3, r2
 80060d0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060d4:	881a      	ldrh	r2, [r3, #0]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	785b      	ldrb	r3, [r3, #1]
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f002 f800 	bl	80080e6 <USBH_AllocPipe>
 80060e6:	4603      	mov	r3, r0
 80060e8:	461a      	mov	r2, r3
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	7819      	ldrb	r1, [r3, #0]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	7858      	ldrb	r0, [r3, #1]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	8952      	ldrh	r2, [r2, #10]
 8006106:	9202      	str	r2, [sp, #8]
 8006108:	2203      	movs	r2, #3
 800610a:	9201      	str	r2, [sp, #4]
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	4623      	mov	r3, r4
 8006110:	4602      	mov	r2, r0
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 ffb8 	bl	8008088 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2200      	movs	r2, #0
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f004 fd19 	bl	800ab58 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006126:	2300      	movs	r3, #0
 8006128:	2200      	movs	r2, #0
 800612a:	210a      	movs	r1, #10
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fcee 	bl	8006b0e <USBH_FindInterface>
 8006132:	4603      	mov	r3, r0
 8006134:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006136:	7bfb      	ldrb	r3, [r7, #15]
 8006138:	2bff      	cmp	r3, #255	; 0xff
 800613a:	d002      	beq.n	8006142 <USBH_CDC_InterfaceInit+0x11a>
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d901      	bls.n	8006146 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006142:	2302      	movs	r3, #2
 8006144:	e0c2      	b.n	80062cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	211a      	movs	r1, #26
 800614c:	fb01 f303 	mul.w	r3, r1, r3
 8006150:	4413      	add	r3, r2
 8006152:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	b25b      	sxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	da16      	bge.n	800618c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800615e:	7bfb      	ldrb	r3, [r7, #15]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	211a      	movs	r1, #26
 8006164:	fb01 f303 	mul.w	r3, r1, r3
 8006168:	4413      	add	r3, r2
 800616a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800616e:	781a      	ldrb	r2, [r3, #0]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	211a      	movs	r1, #26
 800617a:	fb01 f303 	mul.w	r3, r1, r3
 800617e:	4413      	add	r3, r2
 8006180:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006184:	881a      	ldrh	r2, [r3, #0]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	835a      	strh	r2, [r3, #26]
 800618a:	e015      	b.n	80061b8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	211a      	movs	r1, #26
 8006192:	fb01 f303 	mul.w	r3, r1, r3
 8006196:	4413      	add	r3, r2
 8006198:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800619c:	781a      	ldrb	r2, [r3, #0]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	211a      	movs	r1, #26
 80061a8:	fb01 f303 	mul.w	r3, r1, r3
 80061ac:	4413      	add	r3, r2
 80061ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80061b2:	881a      	ldrh	r2, [r3, #0]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	211a      	movs	r1, #26
 80061be:	fb01 f303 	mul.w	r3, r1, r3
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	b25b      	sxtb	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	da16      	bge.n	80061fe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	211a      	movs	r1, #26
 80061d6:	fb01 f303 	mul.w	r3, r1, r3
 80061da:	4413      	add	r3, r2
 80061dc:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80061e0:	781a      	ldrb	r2, [r3, #0]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	211a      	movs	r1, #26
 80061ec:	fb01 f303 	mul.w	r3, r1, r3
 80061f0:	4413      	add	r3, r2
 80061f2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80061f6:	881a      	ldrh	r2, [r3, #0]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	835a      	strh	r2, [r3, #26]
 80061fc:	e015      	b.n	800622a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	211a      	movs	r1, #26
 8006204:	fb01 f303 	mul.w	r3, r1, r3
 8006208:	4413      	add	r3, r2
 800620a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800620e:	781a      	ldrb	r2, [r3, #0]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	211a      	movs	r1, #26
 800621a:	fb01 f303 	mul.w	r3, r1, r3
 800621e:	4413      	add	r3, r2
 8006220:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006224:	881a      	ldrh	r2, [r3, #0]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	7b9b      	ldrb	r3, [r3, #14]
 800622e:	4619      	mov	r1, r3
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f001 ff58 	bl	80080e6 <USBH_AllocPipe>
 8006236:	4603      	mov	r3, r0
 8006238:	461a      	mov	r2, r3
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	7bdb      	ldrb	r3, [r3, #15]
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 ff4e 	bl	80080e6 <USBH_AllocPipe>
 800624a:	4603      	mov	r3, r0
 800624c:	461a      	mov	r2, r3
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	7b59      	ldrb	r1, [r3, #13]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	7b98      	ldrb	r0, [r3, #14]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	8b12      	ldrh	r2, [r2, #24]
 800626a:	9202      	str	r2, [sp, #8]
 800626c:	2202      	movs	r2, #2
 800626e:	9201      	str	r2, [sp, #4]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	4623      	mov	r3, r4
 8006274:	4602      	mov	r2, r0
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f001 ff06 	bl	8008088 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	7b19      	ldrb	r1, [r3, #12]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	7bd8      	ldrb	r0, [r3, #15]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	8b52      	ldrh	r2, [r2, #26]
 8006294:	9202      	str	r2, [sp, #8]
 8006296:	2202      	movs	r2, #2
 8006298:	9201      	str	r2, [sp, #4]
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	4623      	mov	r3, r4
 800629e:	4602      	mov	r2, r0
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f001 fef1 	bl	8008088 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	7b5b      	ldrb	r3, [r3, #13]
 80062b2:	2200      	movs	r2, #0
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f004 fc4e 	bl	800ab58 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	7b1b      	ldrb	r3, [r3, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	4619      	mov	r1, r3
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f004 fc47 	bl	800ab58 <USBH_LL_SetToggle>

  return USBH_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd90      	pop	{r4, r7, pc}

080062d4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00e      	beq.n	800630c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	4619      	mov	r1, r3
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f001 fee6 	bl	80080c6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f001 ff10 	bl	8008126 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	7b1b      	ldrb	r3, [r3, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00e      	beq.n	8006332 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	7b1b      	ldrb	r3, [r3, #12]
 8006318:	4619      	mov	r1, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f001 fed3 	bl	80080c6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	7b1b      	ldrb	r3, [r3, #12]
 8006324:	4619      	mov	r1, r3
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f001 fefd 	bl	8008126 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	7b5b      	ldrb	r3, [r3, #13]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00e      	beq.n	8006358 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	7b5b      	ldrb	r3, [r3, #13]
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 fec0 	bl	80080c6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	7b5b      	ldrb	r3, [r3, #13]
 800634a:	4619      	mov	r1, r3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f001 feea 	bl	8008126 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00b      	beq.n	800637c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	4618      	mov	r0, r3
 800636e:	f004 fca9 	bl	800acc4 <free>
    phost->pActiveClass->pData = 0U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006378:	2200      	movs	r2, #0
 800637a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b084      	sub	sp, #16
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800638e:	2302      	movs	r3, #2
 8006390:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	3340      	adds	r3, #64	; 0x40
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f8d9 	bl	800655a <GetLineCoding>
 80063a8:	4603      	mov	r3, r0
 80063aa:	73fb      	strb	r3, [r7, #15]
  if (status == USBH_OK)
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d105      	bne.n	80063be <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80063b8:	2102      	movs	r1, #2
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	4798      	blx	r3
  }
  return status;
 80063be:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80063d0:	2301      	movs	r3, #1
 80063d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d877      	bhi.n	80064dc <USBH_CDC_Process+0x114>
 80063ec:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <USBH_CDC_Process+0x2c>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	08006409 	.word	0x08006409
 80063f8:	0800640f 	.word	0x0800640f
 80063fc:	0800643f 	.word	0x0800643f
 8006400:	080064b3 	.word	0x080064b3
 8006404:	080064c1 	.word	0x080064c1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	73fb      	strb	r3, [r7, #15]
      break;
 800640c:	e06d      	b.n	80064ea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f8bf 	bl	8006598 <SetLineCoding>
 800641a:	4603      	mov	r3, r0
 800641c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d104      	bne.n	800642e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800642c:	e058      	b.n	80064e0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800642e:	7bbb      	ldrb	r3, [r7, #14]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d055      	beq.n	80064e0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2204      	movs	r2, #4
 8006438:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800643c:	e050      	b.n	80064e0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	3340      	adds	r3, #64	; 0x40
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f888 	bl	800655a <GetLineCoding>
 800644a:	4603      	mov	r3, r0
 800644c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800644e:	7bbb      	ldrb	r3, [r7, #14]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d126      	bne.n	80064a2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006466:	791b      	ldrb	r3, [r3, #4]
 8006468:	429a      	cmp	r2, r3
 800646a:	d13b      	bne.n	80064e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006476:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006478:	429a      	cmp	r2, r3
 800647a:	d133      	bne.n	80064e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006486:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006488:	429a      	cmp	r2, r3
 800648a:	d12b      	bne.n	80064e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006494:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006496:	429a      	cmp	r2, r3
 8006498:	d124      	bne.n	80064e4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fa3c 	bl	8006918 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80064a0:	e020      	b.n	80064e4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80064a2:	7bbb      	ldrb	r3, [r7, #14]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d01d      	beq.n	80064e4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2204      	movs	r2, #4
 80064ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80064b0:	e018      	b.n	80064e4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f90a 	bl	80066cc <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f999 	bl	80067f0 <CDC_ProcessReception>
      break;
 80064be:	e014      	b.n	80064ea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80064c0:	2100      	movs	r1, #0
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f001 f8d1 	bl	800766a <USBH_ClrFeature>
 80064c8:	4603      	mov	r3, r0
 80064ca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80064cc:	7bbb      	ldrb	r3, [r7, #14]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE ;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80064da:	e005      	b.n	80064e8 <USBH_CDC_Process+0x120>

    default:
      break;
 80064dc:	bf00      	nop
 80064de:	e004      	b.n	80064ea <USBH_CDC_Process+0x122>
      break;
 80064e0:	bf00      	nop
 80064e2:	e002      	b.n	80064ea <USBH_CDC_Process+0x122>
      break;
 80064e4:	bf00      	nop
 80064e6:	e000      	b.n	80064ea <USBH_CDC_Process+0x122>
      break;
 80064e8:	bf00      	nop

  }

  return status;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	bc80      	pop	{r7}
 8006506:	4770      	bx	lr

08006508 <USBH_CDC_Stop>:
  *         Stop current CDC Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_CDC_Stop(USBH_HandleTypeDef *phost)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b0b      	cmp	r3, #11
 8006522:	d115      	bne.n	8006550 <USBH_CDC_Stop+0x48>
  {
    CDC_Handle->state = CDC_IDLE_STATE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f001 fdc7 	bl	80080c6 <USBH_ClosePipe>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	7b1b      	ldrb	r3, [r3, #12]
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f001 fdc1 	bl	80080c6 <USBH_ClosePipe>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	7b5b      	ldrb	r3, [r3, #13]
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 fdbb 	bl	80080c6 <USBH_ClosePipe>
  }
  return USBH_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b082      	sub	sp, #8
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	22a1      	movs	r2, #161	; 0xa1
 8006568:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2221      	movs	r2, #33	; 0x21
 800656e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2207      	movs	r2, #7
 8006580:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2207      	movs	r2, #7
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f001 fa49 	bl	8007a20 <USBH_CtlReq>
 800658e:	4603      	mov	r3, r0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2221      	movs	r2, #33	; 0x21
 80065a6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2207      	movs	r2, #7
 80065be:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2207      	movs	r2, #7
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f001 fa2a 	bl	8007a20 <USBH_CtlReq>
 80065cc:	4603      	mov	r3, r0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b086      	sub	sp, #24
 80065da:	af00      	add	r7, sp, #0
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80065e2:	2301      	movs	r3, #1
 80065e4:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d004      	beq.n	8006604 <USBH_CDC_Transmit+0x2e>
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006600:	2b03      	cmp	r3, #3
 8006602:	d11d      	bne.n	8006640 <USBH_CDC_Transmit+0x6a>
  {
    CDC_Handle->pTxData = pbuff;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2203      	movs	r2, #3
 8006614:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2204      	movs	r2, #4
 8006628:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006638:	2200      	movs	r2, #0
 800663a:	4619      	mov	r1, r3
 800663c:	f001 fe68 	bl	8008310 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 8006640:	7dfb      	ldrb	r3, [r7, #23]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3718      	adds	r7, #24
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <USBH_CDC_Receive>:
* @brief  This function prepares the state before issuing the class specific commands
* @param  None
* @retval None
*/
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006658:	2301      	movs	r3, #1
 800665a:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800666c:	2b00      	cmp	r3, #0
 800666e:	d004      	beq.n	800667a <USBH_CDC_Receive+0x2e>
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006676:	2b03      	cmp	r3, #3
 8006678:	d120      	bne.n	80066bc <USBH_CDC_Receive+0x70>
  {
	wav_full_hdr_p=(icListen_wav_full_header*)pbuff;
 800667a:	4a13      	ldr	r2, [pc, #76]	; (80066c8 <USBH_CDC_Receive+0x7c>)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	6013      	str	r3, [r2, #0]
    CDC_Handle->pRxData = pbuff;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	2203      	movs	r2, #3
 8006690:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	2203      	movs	r2, #3
 8006698:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2204      	movs	r2, #4
 80066a4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80066b4:	2200      	movs	r2, #0
 80066b6:	4619      	mov	r1, r3
 80066b8:	f001 fe2a 	bl	8008310 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	2000045c 	.word	0x2000045c

080066cc <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af02      	add	r7, sp, #8
 80066d2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80066de:	2300      	movs	r3, #0
 80066e0:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d002      	beq.n	80066f2 <CDC_ProcessTransmission+0x26>
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d023      	beq.n	8006738 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80066f0:	e07a      	b.n	80067e8 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	8b12      	ldrh	r2, [r2, #24]
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d90b      	bls.n	8006716 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	69d9      	ldr	r1, [r3, #28]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8b1a      	ldrh	r2, [r3, #24]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	7b5b      	ldrb	r3, [r3, #13]
 800670a:	2001      	movs	r0, #1
 800670c:	9000      	str	r0, [sp, #0]
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f001 fc77 	bl	8008002 <USBH_BulkSendData>
 8006714:	e00b      	b.n	800672e <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800671e:	b29a      	uxth	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	7b5b      	ldrb	r3, [r3, #13]
 8006724:	2001      	movs	r0, #1
 8006726:	9000      	str	r0, [sp, #0]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 fc6a 	bl	8008002 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2202      	movs	r2, #2
 8006732:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006736:	e057      	b.n	80067e8 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	7b5b      	ldrb	r3, [r3, #13]
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f004 f9e0 	bl	800ab04 <USBH_LL_GetURBState>
 8006744:	4603      	mov	r3, r0
 8006746:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006748:	7afb      	ldrb	r3, [r7, #11]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d136      	bne.n	80067bc <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	8b12      	ldrh	r2, [r2, #24]
 8006756:	4293      	cmp	r3, r2
 8006758:	d90e      	bls.n	8006778 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	8b12      	ldrh	r2, [r2, #24]
 8006762:	1a9a      	subs	r2, r3, r2
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	8b12      	ldrh	r2, [r2, #24]
 8006770:	441a      	add	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	61da      	str	r2, [r3, #28]
 8006776:	e002      	b.n	800677e <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	2b00      	cmp	r3, #0
 8006784:	d004      	beq.n	8006790 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800678e:	e006      	b.n	800679e <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f003 ff79 	bl	800a690 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2204      	movs	r2, #4
 80067a2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80067b2:	2200      	movs	r2, #0
 80067b4:	4619      	mov	r1, r3
 80067b6:	f001 fdab 	bl	8008310 <osMessagePut>
      break;
 80067ba:	e014      	b.n	80067e6 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80067bc:	7afb      	ldrb	r3, [r7, #11]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d111      	bne.n	80067e6 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2204      	movs	r2, #4
 80067ce:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80067de:	2200      	movs	r2, #0
 80067e0:	4619      	mov	r1, r3
 80067e2:	f001 fd95 	bl	8008310 <osMessagePut>
      break;
 80067e6:	bf00      	nop
  }
}
 80067e8:	bf00      	nop
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006802:	2300      	movs	r3, #0
 8006804:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800680c:	2b03      	cmp	r3, #3
 800680e:	d002      	beq.n	8006816 <CDC_ProcessReception+0x26>
 8006810:	2b04      	cmp	r3, #4
 8006812:	d00e      	beq.n	8006832 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006814:	e077      	b.n	8006906 <CDC_ProcessReception+0x116>
      USBH_BulkReceiveData(phost,
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	6a19      	ldr	r1, [r3, #32]
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	8b5a      	ldrh	r2, [r3, #26]
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	7b1b      	ldrb	r3, [r3, #12]
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 fc12 	bl	800804c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2204      	movs	r2, #4
 800682c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006830:	e069      	b.n	8006906 <CDC_ProcessReception+0x116>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	7b1b      	ldrb	r3, [r3, #12]
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f004 f963 	bl	800ab04 <USBH_LL_GetURBState>
 800683e:	4603      	mov	r3, r0
 8006840:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006842:	7cfb      	ldrb	r3, [r7, #19]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d15d      	bne.n	8006904 <CDC_ProcessReception+0x114>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	7b1b      	ldrb	r3, [r3, #12]
 800684c:	4619      	mov	r1, r3
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f004 f8c6 	bl	800a9e0 <USBH_LL_GetLastXferSize>
 8006854:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (CDC_Handle->RxDataLength > CDC_Handle->DataItf.InEpSize))
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	429a      	cmp	r2, r3
 800685e:	d03a      	beq.n	80068d6 <CDC_ProcessReception+0xe6>
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	8b52      	ldrh	r2, [r2, #26]
 8006868:	4293      	cmp	r3, r2
 800686a:	d934      	bls.n	80068d6 <CDC_ProcessReception+0xe6>
          CDC_Handle->RxDataLength -= length ;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	1ad2      	subs	r2, r2, r3
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	6a1a      	ldr	r2, [r3, #32]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	441a      	add	r2, r3
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	621a      	str	r2, [r3, #32]
          if((wav_full_hdr_p->basic_hdr.length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 8006884:	4b22      	ldr	r3, [pc, #136]	; (8006910 <CDC_ProcessReception+0x120>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	885b      	ldrh	r3, [r3, #2]
 800688a:	b29b      	uxth	r3, r3
 800688c:	3306      	adds	r3, #6
 800688e:	461a      	mov	r2, r3
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006894:	f5c3 637a 	rsb	r3, r3, #4000	; 0xfa0
 8006898:	429a      	cmp	r2, r3
 800689a:	d117      	bne.n	80068cc <CDC_ProcessReception+0xdc>
              CDC_Handle->data_rx_state = CDC_IDLE;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
              switch(wav_full_hdr_p->basic_hdr.type)
 80068a4:	4b1a      	ldr	r3, [pc, #104]	; (8006910 <CDC_ProcessReception+0x120>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	785b      	ldrb	r3, [r3, #1]
 80068aa:	2b43      	cmp	r3, #67	; 0x43
 80068ac:	d11b      	bne.n	80068e6 <CDC_ProcessReception+0xf6>
            	   osMessagePut(USB_rxHandle,(uint32_t)wav_full_hdr_p->wav_hdr.seq_num,0);
 80068ae:	4b19      	ldr	r3, [pc, #100]	; (8006914 <CDC_ProcessReception+0x124>)
 80068b0:	6818      	ldr	r0, [r3, #0]
 80068b2:	4b17      	ldr	r3, [pc, #92]	; (8006910 <CDC_ProcessReception+0x120>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	2200      	movs	r2, #0
 80068be:	4619      	mov	r1, r3
 80068c0:	f001 fd26 	bl	8008310 <osMessagePut>
            	   collect_data();
 80068c4:	f003 feb2 	bl	800a62c <collect_data>
               break;
 80068c8:	bf00      	nop
          if((wav_full_hdr_p->basic_hdr.length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 80068ca:	e00c      	b.n	80068e6 <CDC_ProcessReception+0xf6>
        	CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2203      	movs	r2, #3
 80068d0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          if((wav_full_hdr_p->basic_hdr.length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 80068d4:	e007      	b.n	80068e6 <CDC_ProcessReception+0xf6>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f003 fee0 	bl	800a6a4 <USBH_CDC_ReceiveCallback>
 80068e4:	e000      	b.n	80068e8 <CDC_ProcessReception+0xf8>
          if((wav_full_hdr_p->basic_hdr.length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 80068e6:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2204      	movs	r2, #4
 80068ec:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80068fc:	2200      	movs	r2, #0
 80068fe:	4619      	mov	r1, r3
 8006900:	f001 fd06 	bl	8008310 <osMessagePut>
      break;
 8006904:	bf00      	nop
  }
}
 8006906:	bf00      	nop
 8006908:	3718      	adds	r7, #24
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	2000045c 	.word	0x2000045c
 8006914:	20000458 	.word	0x20000458

08006918 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr
	...

0800692c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800692c:	b5b0      	push	{r4, r5, r7, lr}
 800692e:	b090      	sub	sp, #64	; 0x40
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	4613      	mov	r3, r2
 8006938:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d101      	bne.n	8006944 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006940:	2302      	movs	r3, #2
 8006942:	e04d      	b.n	80069e0 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	79fa      	ldrb	r2, [r7, #7]
 8006948:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 f847 	bl	80069f0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8006990:	4b15      	ldr	r3, [pc, #84]	; (80069e8 <USBH_Init+0xbc>)
 8006992:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8006996:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006998:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800699c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069a0:	2100      	movs	r1, #0
 80069a2:	4618      	mov	r0, r3
 80069a4:	f001 fc8b 	bl	80082be <osMessageCreate>
 80069a8:	4602      	mov	r2, r0
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80069b0:	4b0e      	ldr	r3, [pc, #56]	; (80069ec <USBH_Init+0xc0>)
 80069b2:	f107 0414 	add.w	r4, r7, #20
 80069b6:	461d      	mov	r5, r3
 80069b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80069c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 80069c4:	f107 0314 	add.w	r3, r7, #20
 80069c8:	68f9      	ldr	r1, [r7, #12]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f001 fc17 	bl	80081fe <osThreadCreate>
 80069d0:	4602      	mov	r2, r0
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f003 ff51 	bl	800a880 <USBH_LL_Init>

  return USBH_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3740      	adds	r7, #64	; 0x40
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bdb0      	pop	{r4, r5, r7, pc}
 80069e8:	0800b79c 	.word	0x0800b79c
 80069ec:	0800b7ac 	.word	0x0800b7ac

080069f0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80069fc:	2300      	movs	r3, #0
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	e008      	b.n	8006a14 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	32e0      	adds	r2, #224	; 0xe0
 8006a08:	2100      	movs	r1, #0
 8006a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3301      	adds	r3, #1
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b0e      	cmp	r3, #14
 8006a18:	d9f3      	bls.n	8006a02 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	e009      	b.n	8006a34 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3301      	adds	r3, #1
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a3a:	d3f1      	bcc.n	8006a20 <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2240      	movs	r2, #64	; 0x40
 8006a60:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr

08006a84 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d017      	beq.n	8006ac8 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10f      	bne.n	8006ac2 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aa8:	1c59      	adds	r1, r3, #1
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	33dc      	adds	r3, #220	; 0xdc
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	73fb      	strb	r3, [r7, #15]
 8006ac0:	e004      	b.n	8006acc <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	73fb      	strb	r3, [r7, #15]
 8006ac6:	e001      	b.n	8006acc <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006ac8:	2302      	movs	r3, #2
 8006aca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bc80      	pop	{r7}
 8006ad6:	4770      	bx	lr

08006ad8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 8006aee:	78fa      	ldrb	r2, [r7, #3]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d204      	bcs.n	8006afe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	78fa      	ldrb	r2, [r7, #3]
 8006af8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8006afc:	e001      	b.n	8006b02 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006afe:	2302      	movs	r3, #2
 8006b00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bc80      	pop	{r7}
 8006b0c:	4770      	bx	lr

08006b0e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b087      	sub	sp, #28
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	4608      	mov	r0, r1
 8006b18:	4611      	mov	r1, r2
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	70fb      	strb	r3, [r7, #3]
 8006b20:	460b      	mov	r3, r1
 8006b22:	70bb      	strb	r3, [r7, #2]
 8006b24:	4613      	mov	r3, r2
 8006b26:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f203 3336 	addw	r3, r3, #822	; 0x336
 8006b36:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b38:	e025      	b.n	8006b86 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
 8006b3c:	221a      	movs	r2, #26
 8006b3e:	fb02 f303 	mul.w	r3, r2, r3
 8006b42:	3308      	adds	r3, #8
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	4413      	add	r3, r2
 8006b48:	3302      	adds	r3, #2
 8006b4a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	795b      	ldrb	r3, [r3, #5]
 8006b50:	78fa      	ldrb	r2, [r7, #3]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d002      	beq.n	8006b5c <USBH_FindInterface+0x4e>
 8006b56:	78fb      	ldrb	r3, [r7, #3]
 8006b58:	2bff      	cmp	r3, #255	; 0xff
 8006b5a:	d111      	bne.n	8006b80 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b60:	78ba      	ldrb	r2, [r7, #2]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d002      	beq.n	8006b6c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b66:	78bb      	ldrb	r3, [r7, #2]
 8006b68:	2bff      	cmp	r3, #255	; 0xff
 8006b6a:	d109      	bne.n	8006b80 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b70:	787a      	ldrb	r2, [r7, #1]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d002      	beq.n	8006b7c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b76:	787b      	ldrb	r3, [r7, #1]
 8006b78:	2bff      	cmp	r3, #255	; 0xff
 8006b7a:	d101      	bne.n	8006b80 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006b7c:	7dfb      	ldrb	r3, [r7, #23]
 8006b7e:	e006      	b.n	8006b8e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006b80:	7dfb      	ldrb	r3, [r7, #23]
 8006b82:	3301      	adds	r3, #1
 8006b84:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b86:	7dfb      	ldrb	r3, [r7, #23]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d9d6      	bls.n	8006b3a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006b8c:	23ff      	movs	r3, #255	; 0xff
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bc80      	pop	{r7}
 8006b96:	4770      	bx	lr

08006b98 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f003 fea5 	bl	800a8f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f003 ffbe 	bl	800ab2a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af04      	add	r7, sp, #16
 8006bbe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d102      	bne.n	8006bda <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2203      	movs	r2, #3
 8006bd8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b0b      	cmp	r3, #11
 8006be2:	f200 81e4 	bhi.w	8006fae <USBH_Process+0x3f6>
 8006be6:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <USBH_Process+0x34>)
 8006be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bec:	08006c1d 	.word	0x08006c1d
 8006bf0:	08006c5b 	.word	0x08006c5b
 8006bf4:	08006c6f 	.word	0x08006c6f
 8006bf8:	08006f2d 	.word	0x08006f2d
 8006bfc:	08006faf 	.word	0x08006faf
 8006c00:	08006d2f 	.word	0x08006d2f
 8006c04:	08006ec7 	.word	0x08006ec7
 8006c08:	08006d5f 	.word	0x08006d5f
 8006c0c:	08006d9b 	.word	0x08006d9b
 8006c10:	08006dd5 	.word	0x08006dd5
 8006c14:	08006e1d 	.word	0x08006e1d
 8006c18:	08006f15 	.word	0x08006f15
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 81c4 	beq.w	8006fb2 <USBH_Process+0x3fa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006c30:	20c8      	movs	r0, #200	; 0xc8
 8006c32:	f003 ffc0 	bl	800abb6 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f003 feb7 	bl	800a9aa <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006c50:	2200      	movs	r2, #0
 8006c52:	4619      	mov	r1, r3
 8006c54:	f001 fb5c 	bl	8008310 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006c58:	e1ab      	b.n	8006fb2 <USBH_Process+0x3fa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	f040 81a8 	bne.w	8006fb6 <USBH_Process+0x3fe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2202      	movs	r2, #2
 8006c6a:	701a      	strb	r2, [r3, #0]
      }
      break;
 8006c6c:	e1a3      	b.n	8006fb6 <USBH_Process+0x3fe>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <USBH_Process+0xcc>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006c7e:	2104      	movs	r1, #4
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006c84:	2064      	movs	r0, #100	; 0x64
 8006c86:	f003 ff96 	bl	800abb6 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f003 fe66 	bl	800a95c <USBH_LL_GetSpeed>
 8006c90:	4603      	mov	r3, r0
 8006c92:	461a      	mov	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2205      	movs	r2, #5
 8006c9e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 fa1f 	bl	80080e6 <USBH_AllocPipe>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	461a      	mov	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006cb0:	2180      	movs	r1, #128	; 0x80
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f001 fa17 	bl	80080e6 <USBH_AllocPipe>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	461a      	mov	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	7919      	ldrb	r1, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 8006cd4:	b292      	uxth	r2, r2
 8006cd6:	9202      	str	r2, [sp, #8]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	9201      	str	r2, [sp, #4]
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2280      	movs	r2, #128	; 0x80
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 f9d0 	bl	8008088 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	7959      	ldrb	r1, [r3, #5]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 8006cfc:	b292      	uxth	r2, r2
 8006cfe:	9202      	str	r2, [sp, #8]
 8006d00:	2200      	movs	r2, #0
 8006d02:	9201      	str	r2, [sp, #4]
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	4603      	mov	r3, r0
 8006d08:	2200      	movs	r2, #0
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f001 f9bc 	bl	8008088 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006d24:	2200      	movs	r2, #0
 8006d26:	4619      	mov	r1, r3
 8006d28:	f001 faf2 	bl	8008310 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d2c:	e14c      	b.n	8006fc8 <USBH_Process+0x410>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f950 	bl	8006fd4 <USBH_HandleEnum>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f040 813f 	bne.w	8006fba <USBH_Process+0x402>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d103      	bne.n	8006d56 <USBH_Process+0x19e>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2208      	movs	r2, #8
 8006d52:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 8006d54:	e131      	b.n	8006fba <USBH_Process+0x402>
          phost->gState = HOST_INPUT;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2207      	movs	r2, #7
 8006d5a:	701a      	strb	r2, [r3, #0]
      break;
 8006d5c:	e12d      	b.n	8006fba <USBH_Process+0x402>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 812a 	beq.w	8006fbe <USBH_Process+0x406>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006d70:	2101      	movs	r1, #1
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2208      	movs	r2, #8
 8006d7a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2205      	movs	r2, #5
 8006d80:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006d90:	2200      	movs	r2, #0
 8006d92:	4619      	mov	r1, r3
 8006d94:	f001 fabc 	bl	8008310 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006d98:	e111      	b.n	8006fbe <USBH_Process+0x406>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fc19 	bl	80075dc <USBH_SetCfg>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d102      	bne.n	8006db6 <USBH_Process+0x1fe>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2209      	movs	r2, #9
 8006db4:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006dca:	2200      	movs	r2, #0
 8006dcc:	4619      	mov	r1, r3
 8006dce:	f001 fa9f 	bl	8008310 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006dd2:	e0f9      	b.n	8006fc8 <USBH_Process+0x410>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <USBH_Process+0x240>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006de2:	2101      	movs	r1, #1
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fc1c 	bl	8007622 <USBH_SetFeature>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d106      	bne.n	8006dfe <USBH_Process+0x246>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	220a      	movs	r2, #10
 8006df4:	701a      	strb	r2, [r3, #0]
 8006df6:	e002      	b.n	8006dfe <USBH_Process+0x246>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	220a      	movs	r2, #10
 8006dfc:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006e12:	2200      	movs	r2, #0
 8006e14:	4619      	mov	r1, r3
 8006e16:	f001 fa7b 	bl	8008310 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e1a:	e0d5      	b.n	8006fc8 <USBH_Process+0x410>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d040      	beq.n	8006ea8 <USBH_Process+0x2f0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e2e:	2300      	movs	r3, #0
 8006e30:	73fb      	strb	r3, [r7, #15]
 8006e32:	e017      	b.n	8006e64 <USBH_Process+0x2ac>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	33dc      	adds	r3, #220	; 0xdc
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	791a      	ldrb	r2, [r3, #4]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d108      	bne.n	8006e5e <USBH_Process+0x2a6>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	33dc      	adds	r3, #220	; 0xdc
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	3301      	adds	r3, #1
 8006e62:	73fb      	strb	r3, [r7, #15]
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0e4      	beq.n	8006e34 <USBH_Process+0x27c>
          }
        }

        if (phost->pActiveClass != NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d016      	beq.n	8006ea2 <USBH_Process+0x2ea>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	4798      	blx	r3
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d109      	bne.n	8006e9a <USBH_Process+0x2e2>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2206      	movs	r2, #6
 8006e8a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006e92:	2103      	movs	r1, #3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	4798      	blx	r3
 8006e98:	e006      	b.n	8006ea8 <USBH_Process+0x2f0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	220d      	movs	r2, #13
 8006e9e:	701a      	strb	r2, [r3, #0]
 8006ea0:	e002      	b.n	8006ea8 <USBH_Process+0x2f0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	220d      	movs	r2, #13
 8006ea6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2205      	movs	r2, #5
 8006eac:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	f001 fa26 	bl	8008310 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ec4:	e080      	b.n	8006fc8 <USBH_Process+0x410>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00f      	beq.n	8006ef0 <USBH_Process+0x338>
      {
        status = phost->pActiveClass->Requests(phost);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	4798      	blx	r3
 8006edc:	4603      	mov	r3, r0
 8006ede:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d16c      	bne.n	8006fc2 <USBH_Process+0x40a>
        {
          phost->gState = HOST_CLASS;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	220b      	movs	r2, #11
 8006eec:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006eee:	e068      	b.n	8006fc2 <USBH_Process+0x40a>
        phost->gState = HOST_ABORT_STATE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	220d      	movs	r2, #13
 8006ef4:	701a      	strb	r2, [r3, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2205      	movs	r2, #5
 8006efa:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	f001 f9ff 	bl	8008310 <osMessagePut>
      break;
 8006f12:	e056      	b.n	8006fc2 <USBH_Process+0x40a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d053      	beq.n	8006fc6 <USBH_Process+0x40e>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	4798      	blx	r3
      }
      break;
 8006f2a:	e04c      	b.n	8006fc6 <USBH_Process+0x40e>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff fd5b 	bl	80069f0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d009      	beq.n	8006f58 <USBH_Process+0x3a0>
      {
        phost->pActiveClass->DeInit(phost);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      }

      if (phost->pUser != NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d005      	beq.n	8006f6e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006f68:	2105      	movs	r1, #5
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d107      	bne.n	8006f8a <USBH_Process+0x3d2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7ff fe08 	bl	8006b98 <USBH_Start>
 8006f88:	e002      	b.n	8006f90 <USBH_Process+0x3d8>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f003 fcb0 	bl	800a8f0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	f001 f9b2 	bl	8008310 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006fac:	e00c      	b.n	8006fc8 <USBH_Process+0x410>

    case HOST_ABORT_STATE:
    default :
      break;
 8006fae:	bf00      	nop
 8006fb0:	e00a      	b.n	8006fc8 <USBH_Process+0x410>
      break;
 8006fb2:	bf00      	nop
 8006fb4:	e008      	b.n	8006fc8 <USBH_Process+0x410>
      break;
 8006fb6:	bf00      	nop
 8006fb8:	e006      	b.n	8006fc8 <USBH_Process+0x410>
      break;
 8006fba:	bf00      	nop
 8006fbc:	e004      	b.n	8006fc8 <USBH_Process+0x410>
    break;
 8006fbe:	bf00      	nop
 8006fc0:	e002      	b.n	8006fc8 <USBH_Process+0x410>
      break;
 8006fc2:	bf00      	nop
 8006fc4:	e000      	b.n	8006fc8 <USBH_Process+0x410>
      break;
 8006fc6:	bf00      	nop
  }
  return USBH_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop

08006fd4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b088      	sub	sp, #32
 8006fd8:	af04      	add	r7, sp, #16
 8006fda:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	785b      	ldrb	r3, [r3, #1]
 8006fe4:	2b07      	cmp	r3, #7
 8006fe6:	f200 8132 	bhi.w	800724e <USBH_HandleEnum+0x27a>
 8006fea:	a201      	add	r2, pc, #4	; (adr r2, 8006ff0 <USBH_HandleEnum+0x1c>)
 8006fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff0:	08007011 	.word	0x08007011
 8006ff4:	08007083 	.word	0x08007083
 8006ff8:	0800709b 	.word	0x0800709b
 8006ffc:	08007111 	.word	0x08007111
 8007000:	08007129 	.word	0x08007129
 8007004:	08007147 	.word	0x08007147
 8007008:	080071b3 	.word	0x080071b3
 800700c:	08007203 	.word	0x08007203
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8007010:	2108      	movs	r1, #8
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fa12 	bl	800743c <USBH_Get_DevDesc>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	f040 8119 	bne.w	8007252 <USBH_HandleEnum+0x27e>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	7919      	ldrb	r1, [r3, #4]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8007044:	b292      	uxth	r2, r2
 8007046:	9202      	str	r2, [sp, #8]
 8007048:	2200      	movs	r2, #0
 800704a:	9201      	str	r2, [sp, #4]
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	4603      	mov	r3, r0
 8007050:	2280      	movs	r2, #128	; 0x80
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f001 f818 	bl	8008088 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	7959      	ldrb	r1, [r3, #5]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800706c:	b292      	uxth	r2, r2
 800706e:	9202      	str	r2, [sp, #8]
 8007070:	2200      	movs	r2, #0
 8007072:	9201      	str	r2, [sp, #4]
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	4603      	mov	r3, r0
 8007078:	2200      	movs	r2, #0
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 f804 	bl	8008088 <USBH_OpenPipe>
      }
      break;
 8007080:	e0e7      	b.n	8007252 <USBH_HandleEnum+0x27e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 8007082:	2112      	movs	r1, #18
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f9d9 	bl	800743c <USBH_Get_DevDesc>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	f040 80e2 	bne.w	8007256 <USBH_HandleEnum+0x282>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2202      	movs	r2, #2
 8007096:	705a      	strb	r2, [r3, #1]

      }
      break;
 8007098:	e0dd      	b.n	8007256 <USBH_HandleEnum+0x282>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800709a:	2101      	movs	r1, #1
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fa79 	bl	8007594 <USBH_SetAddress>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f040 80d8 	bne.w	800725a <USBH_HandleEnum+0x286>
      {
        USBH_Delay(2U);
 80070aa:	2002      	movs	r0, #2
 80070ac:	f003 fd83 	bl	800abb6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2203      	movs	r2, #3
 80070bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	7919      	ldrb	r1, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 80070d2:	b292      	uxth	r2, r2
 80070d4:	9202      	str	r2, [sp, #8]
 80070d6:	2200      	movs	r2, #0
 80070d8:	9201      	str	r2, [sp, #4]
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	4603      	mov	r3, r0
 80070de:	2280      	movs	r2, #128	; 0x80
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 ffd1 	bl	8008088 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	7959      	ldrb	r1, [r3, #5]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 80070fa:	b292      	uxth	r2, r2
 80070fc:	9202      	str	r2, [sp, #8]
 80070fe:	2200      	movs	r2, #0
 8007100:	9201      	str	r2, [sp, #4]
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	4603      	mov	r3, r0
 8007106:	2200      	movs	r2, #0
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 ffbd 	bl	8008088 <USBH_OpenPipe>
      }
      break;
 800710e:	e0a4      	b.n	800725a <USBH_HandleEnum+0x286>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 8007110:	2109      	movs	r1, #9
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f9ba 	bl	800748c <USBH_Get_CfgDesc>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	f040 809f 	bne.w	800725e <USBH_HandleEnum+0x28a>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2204      	movs	r2, #4
 8007124:	705a      	strb	r2, [r3, #1]
      }
      break;
 8007126:	e09a      	b.n	800725e <USBH_HandleEnum+0x28a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f9ab 	bl	800748c <USBH_Get_CfgDesc>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	f040 8092 	bne.w	8007262 <USBH_HandleEnum+0x28e>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2205      	movs	r2, #5
 8007142:	705a      	strb	r2, [r3, #1]
      }
      break;
 8007144:	e08d      	b.n	8007262 <USBH_HandleEnum+0x28e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800714c:	2b00      	cmp	r3, #0
 800714e:	d01e      	beq.n	800718e <USBH_HandleEnum+0x1ba>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800715c:	23ff      	movs	r3, #255	; 0xff
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f9b8 	bl	80074d4 <USBH_Get_StringDesc>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d17d      	bne.n	8007266 <USBH_HandleEnum+0x292>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2206      	movs	r2, #6
 800716e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2205      	movs	r2, #5
 8007174:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007184:	2200      	movs	r2, #0
 8007186:	4619      	mov	r1, r3
 8007188:	f001 f8c2 	bl	8008310 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800718c:	e06b      	b.n	8007266 <USBH_HandleEnum+0x292>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2206      	movs	r2, #6
 8007192:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2205      	movs	r2, #5
 8007198:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80071a8:	2200      	movs	r2, #0
 80071aa:	4619      	mov	r1, r3
 80071ac:	f001 f8b0 	bl	8008310 <osMessagePut>
      break;
 80071b0:	e059      	b.n	8007266 <USBH_HandleEnum+0x292>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d010      	beq.n	80071de <USBH_HandleEnum+0x20a>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 80071c8:	23ff      	movs	r3, #255	; 0xff
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f982 	bl	80074d4 <USBH_Get_StringDesc>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d149      	bne.n	800726a <USBH_HandleEnum+0x296>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2207      	movs	r2, #7
 80071da:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80071dc:	e045      	b.n	800726a <USBH_HandleEnum+0x296>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2207      	movs	r2, #7
 80071e2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2205      	movs	r2, #5
 80071e8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80071f8:	2200      	movs	r2, #0
 80071fa:	4619      	mov	r1, r3
 80071fc:	f001 f888 	bl	8008310 <osMessagePut>
      break;
 8007200:	e033      	b.n	800726a <USBH_HandleEnum+0x296>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00f      	beq.n	800722c <USBH_HandleEnum+0x258>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8007218:	23ff      	movs	r3, #255	; 0xff
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f95a 	bl	80074d4 <USBH_Get_StringDesc>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d123      	bne.n	800726e <USBH_HandleEnum+0x29a>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800722a:	e020      	b.n	800726e <USBH_HandleEnum+0x29a>
        Status = USBH_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2205      	movs	r2, #5
 8007234:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007244:	2200      	movs	r2, #0
 8007246:	4619      	mov	r1, r3
 8007248:	f001 f862 	bl	8008310 <osMessagePut>
      break;
 800724c:	e00f      	b.n	800726e <USBH_HandleEnum+0x29a>

    default:
      break;
 800724e:	bf00      	nop
 8007250:	e00e      	b.n	8007270 <USBH_HandleEnum+0x29c>
      break;
 8007252:	bf00      	nop
 8007254:	e00c      	b.n	8007270 <USBH_HandleEnum+0x29c>
      break;
 8007256:	bf00      	nop
 8007258:	e00a      	b.n	8007270 <USBH_HandleEnum+0x29c>
      break;
 800725a:	bf00      	nop
 800725c:	e008      	b.n	8007270 <USBH_HandleEnum+0x29c>
      break;
 800725e:	bf00      	nop
 8007260:	e006      	b.n	8007270 <USBH_HandleEnum+0x29c>
      break;
 8007262:	bf00      	nop
 8007264:	e004      	b.n	8007270 <USBH_HandleEnum+0x29c>
      break;
 8007266:	bf00      	nop
 8007268:	e002      	b.n	8007270 <USBH_HandleEnum+0x29c>
      break;
 800726a:	bf00      	nop
 800726c:	e000      	b.n	8007270 <USBH_HandleEnum+0x29c>
      break;
 800726e:	bf00      	nop
  }
  return Status;
 8007270:	7bfb      	ldrb	r3, [r7, #15]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop

0800727c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 800728e:	bf00      	nop
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	bc80      	pop	{r7}
 8007296:	4770      	bx	lr

08007298 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f804 	bl	80072bc <USBH_HandleSof>
}
 80072b4:	bf00      	nop
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b0b      	cmp	r3, #11
 80072cc:	d10a      	bne.n	80072e4 <USBH_HandleSof+0x28>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d005      	beq.n	80072e4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	4798      	blx	r3
  }
}
 80072e4:	bf00      	nop
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007310:	2200      	movs	r2, #0
 8007312:	4619      	mov	r1, r3
 8007314:	f000 fffc 	bl	8008310 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007318:	bf00      	nop
}
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 8007330:	bf00      	nop
}
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	bc80      	pop	{r7}
 8007338:	4770      	bx	lr

0800733a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b082      	sub	sp, #8
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800736e:	2200      	movs	r2, #0
 8007370:	4619      	mov	r1, r3
 8007372:	f000 ffcd 	bl	8008310 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f003 fac0 	bl	800a926 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	791b      	ldrb	r3, [r3, #4]
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 feba 	bl	8008126 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	795b      	ldrb	r3, [r3, #5]
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 feb4 	bl	8008126 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80073d2:	2200      	movs	r2, #0
 80073d4:	4619      	mov	r1, r3
 80073d6:	f000 ff9b 	bl	8008310 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 80073f2:	f107 030c 	add.w	r3, r7, #12
 80073f6:	f04f 32ff 	mov.w	r2, #4294967295
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 ffc8 	bl	8008390 <osMessageGet>
    if (event.status == osEventMessage)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2b10      	cmp	r3, #16
 8007404:	d1f2      	bne.n	80073ec <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff fbd6 	bl	8006bb8 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800740c:	e7ee      	b.n	80073ec <USBH_Process_OS+0x8>

0800740e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b082      	sub	sp, #8
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800742a:	2200      	movs	r2, #0
 800742c:	4619      	mov	r1, r3
 800742e:	f000 ff6f 	bl	8008310 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af02      	add	r7, sp, #8
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800744e:	78fb      	ldrb	r3, [r7, #3]
 8007450:	b29b      	uxth	r3, r3
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	4613      	mov	r3, r2
 8007456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800745a:	2100      	movs	r1, #0
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f864 	bl	800752a <USBH_GetDescriptor>
 8007462:	4603      	mov	r3, r0
 8007464:	73fb      	strb	r3, [r7, #15]
 8007466:	7bfb      	ldrb	r3, [r7, #15]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10a      	bne.n	8007482 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007478:	78fa      	ldrb	r2, [r7, #3]
 800747a:	b292      	uxth	r2, r2
 800747c:	4619      	mov	r1, r3
 800747e:	f000 f918 	bl	80076b2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007482:	7bfb      	ldrb	r3, [r7, #15]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af02      	add	r7, sp, #8
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	331c      	adds	r3, #28
 800749c:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800749e:	887b      	ldrh	r3, [r7, #2]
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074a8:	2100      	movs	r1, #0
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f83d 	bl	800752a <USBH_GetDescriptor>
 80074b0:	4603      	mov	r3, r0
 80074b2:	72fb      	strb	r3, [r7, #11]
 80074b4:	7afb      	ldrb	r3, [r7, #11]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d107      	bne.n	80074ca <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f203 3336 	addw	r3, r3, #822	; 0x336
 80074c0:	887a      	ldrh	r2, [r7, #2]
 80074c2:	68f9      	ldr	r1, [r7, #12]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 f963 	bl	8007790 <USBH_ParseCfgDesc>
  }

  return status;
 80074ca:	7afb      	ldrb	r3, [r7, #11]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b088      	sub	sp, #32
 80074d8:	af02      	add	r7, sp, #8
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	607a      	str	r2, [r7, #4]
 80074de:	461a      	mov	r2, r3
 80074e0:	460b      	mov	r3, r1
 80074e2:	72fb      	strb	r3, [r7, #11]
 80074e4:	4613      	mov	r3, r2
 80074e6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80074e8:	7afb      	ldrb	r3, [r7, #11]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80074f0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80074f8:	893b      	ldrh	r3, [r7, #8]
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	460b      	mov	r3, r1
 80074fe:	2100      	movs	r1, #0
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 f812 	bl	800752a <USBH_GetDescriptor>
 8007506:	4603      	mov	r3, r0
 8007508:	75fb      	strb	r3, [r7, #23]
 800750a:	7dfb      	ldrb	r3, [r7, #23]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d107      	bne.n	8007520 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007516:	893a      	ldrh	r2, [r7, #8]
 8007518:	6879      	ldr	r1, [r7, #4]
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fa34 	bl	8007988 <USBH_ParseStringDesc>
  }

  return status;
 8007520:	7dfb      	ldrb	r3, [r7, #23]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3718      	adds	r7, #24
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b084      	sub	sp, #16
 800752e:	af00      	add	r7, sp, #0
 8007530:	60f8      	str	r0, [r7, #12]
 8007532:	607b      	str	r3, [r7, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	72fb      	strb	r3, [r7, #11]
 8007538:	4613      	mov	r3, r2
 800753a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	789b      	ldrb	r3, [r3, #2]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d11c      	bne.n	800757e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007544:	7afb      	ldrb	r3, [r7, #11]
 8007546:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800754a:	b2da      	uxtb	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2206      	movs	r2, #6
 8007554:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	893a      	ldrh	r2, [r7, #8]
 800755a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800755c:	893b      	ldrh	r3, [r7, #8]
 800755e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007566:	d104      	bne.n	8007572 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f240 4209 	movw	r2, #1033	; 0x409
 800756e:	829a      	strh	r2, [r3, #20]
 8007570:	e002      	b.n	8007578 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8b3a      	ldrh	r2, [r7, #24]
 800757c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800757e:	8b3b      	ldrh	r3, [r7, #24]
 8007580:	461a      	mov	r2, r3
 8007582:	6879      	ldr	r1, [r7, #4]
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 fa4b 	bl	8007a20 <USBH_CtlReq>
 800758a:	4603      	mov	r3, r0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	789b      	ldrb	r3, [r3, #2]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d10f      	bne.n	80075c8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2205      	movs	r2, #5
 80075b2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80075b4:	78fb      	ldrb	r3, [r7, #3]
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80075c8:	2200      	movs	r2, #0
 80075ca:	2100      	movs	r1, #0
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fa27 	bl	8007a20 <USBH_CtlReq>
 80075d2:	4603      	mov	r3, r0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	789b      	ldrb	r3, [r3, #2]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d10e      	bne.n	800760e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2209      	movs	r2, #9
 80075fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	887a      	ldrh	r2, [r7, #2]
 8007600:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800760e:	2200      	movs	r2, #0
 8007610:	2100      	movs	r1, #0
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fa04 	bl	8007a20 <USBH_CtlReq>
 8007618:	4603      	mov	r3, r0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b082      	sub	sp, #8
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	460b      	mov	r3, r1
 800762c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	789b      	ldrb	r3, [r3, #2]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d10f      	bne.n	8007656 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2203      	movs	r2, #3
 8007640:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007642:	78fb      	ldrb	r3, [r7, #3]
 8007644:	b29a      	uxth	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007656:	2200      	movs	r2, #0
 8007658:	2100      	movs	r1, #0
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f9e0 	bl	8007a20 <USBH_CtlReq>
 8007660:	4603      	mov	r3, r0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b082      	sub	sp, #8
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	460b      	mov	r3, r1
 8007674:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	789b      	ldrb	r3, [r3, #2]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d10f      	bne.n	800769e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2202      	movs	r2, #2
 8007682:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	b29a      	uxth	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800769e:	2200      	movs	r2, #0
 80076a0:	2100      	movs	r1, #0
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f9bc 	bl	8007a20 <USBH_CtlReq>
 80076a8:	4603      	mov	r3, r0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b085      	sub	sp, #20
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	4613      	mov	r3, r2
 80076be:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	781a      	ldrb	r2, [r3, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	785a      	ldrb	r2, [r3, #1]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	3302      	adds	r3, #2
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	3303      	adds	r3, #3
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	b29b      	uxth	r3, r3
 80076e0:	021b      	lsls	r3, r3, #8
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	4313      	orrs	r3, r2
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	791a      	ldrb	r2, [r3, #4]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	795a      	ldrb	r2, [r3, #5]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	799a      	ldrb	r2, [r3, #6]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	79da      	ldrb	r2, [r3, #7]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800770c:	88fb      	ldrh	r3, [r7, #6]
 800770e:	2b08      	cmp	r3, #8
 8007710:	d939      	bls.n	8007786 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	3308      	adds	r3, #8
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	b29a      	uxth	r2, r3
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	3309      	adds	r3, #9
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	b29b      	uxth	r3, r3
 8007722:	021b      	lsls	r3, r3, #8
 8007724:	b29b      	uxth	r3, r3
 8007726:	4313      	orrs	r3, r2
 8007728:	b29a      	uxth	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	330a      	adds	r3, #10
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	b29a      	uxth	r2, r3
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	330b      	adds	r3, #11
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	b29b      	uxth	r3, r3
 800773e:	021b      	lsls	r3, r3, #8
 8007740:	b29b      	uxth	r3, r3
 8007742:	4313      	orrs	r3, r2
 8007744:	b29a      	uxth	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	330c      	adds	r3, #12
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	b29a      	uxth	r2, r3
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	330d      	adds	r3, #13
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	b29b      	uxth	r3, r3
 800775a:	021b      	lsls	r3, r3, #8
 800775c:	b29b      	uxth	r3, r3
 800775e:	4313      	orrs	r3, r2
 8007760:	b29a      	uxth	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	7b9a      	ldrb	r2, [r3, #14]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	7bda      	ldrb	r2, [r3, #15]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	7c1a      	ldrb	r2, [r3, #16]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	7c5a      	ldrb	r2, [r3, #17]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	745a      	strb	r2, [r3, #17]
  }
}
 8007786:	bf00      	nop
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	bc80      	pop	{r7}
 800778e:	4770      	bx	lr

08007790 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b08a      	sub	sp, #40	; 0x28
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	4613      	mov	r3, r2
 800779c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	781a      	ldrb	r2, [r3, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	785a      	ldrb	r2, [r3, #1]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	3302      	adds	r3, #2
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	3303      	adds	r3, #3
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	021b      	lsls	r3, r3, #8
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	4313      	orrs	r3, r2
 80077d8:	b29a      	uxth	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	791a      	ldrb	r2, [r3, #4]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	795a      	ldrb	r2, [r3, #5]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	799a      	ldrb	r2, [r3, #6]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	79da      	ldrb	r2, [r3, #7]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	7a1a      	ldrb	r2, [r3, #8]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	2b09      	cmp	r3, #9
 800780a:	d95f      	bls.n	80078cc <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800780c:	2309      	movs	r3, #9
 800780e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007810:	2300      	movs	r3, #0
 8007812:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007814:	e051      	b.n	80078ba <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007816:	f107 0316 	add.w	r3, r7, #22
 800781a:	4619      	mov	r1, r3
 800781c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800781e:	f000 f8e5 	bl	80079ec <USBH_GetNextDesc>
 8007822:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	785b      	ldrb	r3, [r3, #1]
 8007828:	2b04      	cmp	r3, #4
 800782a:	d146      	bne.n	80078ba <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800782c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007830:	221a      	movs	r2, #26
 8007832:	fb02 f303 	mul.w	r3, r2, r3
 8007836:	3308      	adds	r3, #8
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	4413      	add	r3, r2
 800783c:	3302      	adds	r3, #2
 800783e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007842:	69f8      	ldr	r0, [r7, #28]
 8007844:	f000 f846 	bl	80078d4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007848:	2300      	movs	r3, #0
 800784a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800784e:	2300      	movs	r3, #0
 8007850:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007852:	e022      	b.n	800789a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007854:	f107 0316 	add.w	r3, r7, #22
 8007858:	4619      	mov	r1, r3
 800785a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800785c:	f000 f8c6 	bl	80079ec <USBH_GetNextDesc>
 8007860:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	785b      	ldrb	r3, [r3, #1]
 8007866:	2b05      	cmp	r3, #5
 8007868:	d117      	bne.n	800789a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800786a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800786e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007872:	3201      	adds	r2, #1
 8007874:	00d2      	lsls	r2, r2, #3
 8007876:	211a      	movs	r1, #26
 8007878:	fb01 f303 	mul.w	r3, r1, r3
 800787c:	4413      	add	r3, r2
 800787e:	3308      	adds	r3, #8
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	4413      	add	r3, r2
 8007884:	3304      	adds	r3, #4
 8007886:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007888:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800788a:	69b8      	ldr	r0, [r7, #24]
 800788c:	f000 f850 	bl	8007930 <USBH_ParseEPDesc>
            ep_ix++;
 8007890:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007894:	3301      	adds	r3, #1
 8007896:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	791b      	ldrb	r3, [r3, #4]
 800789e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d204      	bcs.n	80078b0 <USBH_ParseCfgDesc+0x120>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	885a      	ldrh	r2, [r3, #2]
 80078aa:	8afb      	ldrh	r3, [r7, #22]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d8d1      	bhi.n	8007854 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80078b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078b4:	3301      	adds	r3, #1
 80078b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80078ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d804      	bhi.n	80078cc <USBH_ParseCfgDesc+0x13c>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	885a      	ldrh	r2, [r3, #2]
 80078c6:	8afb      	ldrh	r3, [r7, #22]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d8a4      	bhi.n	8007816 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80078cc:	bf00      	nop
 80078ce:	3728      	adds	r7, #40	; 0x28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	781a      	ldrb	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	785a      	ldrb	r2, [r3, #1]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	789a      	ldrb	r2, [r3, #2]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	78da      	ldrb	r2, [r3, #3]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	791a      	ldrb	r2, [r3, #4]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	795a      	ldrb	r2, [r3, #5]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	799a      	ldrb	r2, [r3, #6]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	79da      	ldrb	r2, [r3, #7]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	7a1a      	ldrb	r2, [r3, #8]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	721a      	strb	r2, [r3, #8]
}
 8007926:	bf00      	nop
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	bc80      	pop	{r7}
 800792e:	4770      	bx	lr

08007930 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	781a      	ldrb	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	785a      	ldrb	r2, [r3, #1]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	789a      	ldrb	r2, [r3, #2]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	78da      	ldrb	r2, [r3, #3]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	3304      	adds	r3, #4
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	b29a      	uxth	r2, r3
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	3305      	adds	r3, #5
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	b29b      	uxth	r3, r3
 800796a:	021b      	lsls	r3, r3, #8
 800796c:	b29b      	uxth	r3, r3
 800796e:	4313      	orrs	r3, r2
 8007970:	b29a      	uxth	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	799a      	ldrb	r2, [r3, #6]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	719a      	strb	r2, [r3, #6]
}
 800797e:	bf00      	nop
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	bc80      	pop	{r7}
 8007986:	4770      	bx	lr

08007988 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	4613      	mov	r3, r2
 8007994:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3301      	adds	r3, #1
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b03      	cmp	r3, #3
 800799e:	d120      	bne.n	80079e2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	1e9a      	subs	r2, r3, #2
 80079a6:	88fb      	ldrh	r3, [r7, #6]
 80079a8:	4293      	cmp	r3, r2
 80079aa:	bf28      	it	cs
 80079ac:	4613      	movcs	r3, r2
 80079ae:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	3302      	adds	r3, #2
 80079b4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80079b6:	2300      	movs	r3, #0
 80079b8:	82fb      	strh	r3, [r7, #22]
 80079ba:	e00b      	b.n	80079d4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80079bc:	8afb      	ldrh	r3, [r7, #22]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4413      	add	r3, r2
 80079c2:	781a      	ldrb	r2, [r3, #0]
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	3301      	adds	r3, #1
 80079cc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80079ce:	8afb      	ldrh	r3, [r7, #22]
 80079d0:	3302      	adds	r3, #2
 80079d2:	82fb      	strh	r3, [r7, #22]
 80079d4:	8afa      	ldrh	r2, [r7, #22]
 80079d6:	8abb      	ldrh	r3, [r7, #20]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d3ef      	bcc.n	80079bc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	2200      	movs	r2, #0
 80079e0:	701a      	strb	r2, [r3, #0]
  }
}
 80079e2:	bf00      	nop
 80079e4:	371c      	adds	r7, #28
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bc80      	pop	{r7}
 80079ea:	4770      	bx	lr

080079ec <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	881a      	ldrh	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	4413      	add	r3, r2
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4413      	add	r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007a14:	68fb      	ldr	r3, [r7, #12]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bc80      	pop	{r7}
 8007a1e:	4770      	bx	lr

08007a20 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	789b      	ldrb	r3, [r3, #2]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d002      	beq.n	8007a40 <USBH_CtlReq+0x20>
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d01d      	beq.n	8007a7a <USBH_CtlReq+0x5a>
        }
      }
      break;

    default:
      break;
 8007a3e:	e042      	b.n	8007ac6 <USBH_CtlReq+0xa6>
      phost->Control.buff = buff;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	88fa      	ldrh	r2, [r7, #6]
 8007a4a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2202      	movs	r2, #2
 8007a56:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2203      	movs	r2, #3
 8007a60:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007a70:	2200      	movs	r2, #0
 8007a72:	4619      	mov	r1, r3
 8007a74:	f000 fc4c 	bl	8008310 <osMessagePut>
      break;
 8007a78:	e025      	b.n	8007ac6 <USBH_CtlReq+0xa6>
      status = USBH_HandleControl(phost);
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 f828 	bl	8007ad0 <USBH_HandleControl>
 8007a80:	4603      	mov	r3, r0
 8007a82:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d108      	bne.n	8007a9c <USBH_CtlReq+0x7c>
        phost->RequestState = CMD_SEND;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	75fb      	strb	r3, [r7, #23]
      break;
 8007a9a:	e013      	b.n	8007ac4 <USBH_CtlReq+0xa4>
      else if (status == USBH_NOT_SUPPORTED)
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d108      	bne.n	8007ab4 <USBH_CtlReq+0x94>
        phost->RequestState = CMD_SEND;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab2:	e007      	b.n	8007ac4 <USBH_CtlReq+0xa4>
        if (status == USBH_FAIL)
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d104      	bne.n	8007ac4 <USBH_CtlReq+0xa4>
          phost->RequestState = CMD_SEND;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ac4:	bf00      	nop
  }
  return status;
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007adc:	2300      	movs	r3, #0
 8007ade:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	7e1b      	ldrb	r3, [r3, #24]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	2b0a      	cmp	r3, #10
 8007ae8:	f200 821d 	bhi.w	8007f26 <USBH_HandleControl+0x456>
 8007aec:	a201      	add	r2, pc, #4	; (adr r2, 8007af4 <USBH_HandleControl+0x24>)
 8007aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af2:	bf00      	nop
 8007af4:	08007b21 	.word	0x08007b21
 8007af8:	08007b3b 	.word	0x08007b3b
 8007afc:	08007bdd 	.word	0x08007bdd
 8007b00:	08007c03 	.word	0x08007c03
 8007b04:	08007c8f 	.word	0x08007c8f
 8007b08:	08007cb9 	.word	0x08007cb9
 8007b0c:	08007d7b 	.word	0x08007d7b
 8007b10:	08007d9d 	.word	0x08007d9d
 8007b14:	08007e2f 	.word	0x08007e2f
 8007b18:	08007e55 	.word	0x08007e55
 8007b1c:	08007ee7 	.word	0x08007ee7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f103 0110 	add.w	r1, r3, #16
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	795b      	ldrb	r3, [r3, #5]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fa0b 	bl	8007f48 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2202      	movs	r2, #2
 8007b36:	761a      	strb	r2, [r3, #24]
      break;
 8007b38:	e200      	b.n	8007f3c <USBH_HandleControl+0x46c>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	795b      	ldrb	r3, [r3, #5]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f002 ffdf 	bl	800ab04 <USBH_LL_GetURBState>
 8007b46:	4603      	mov	r3, r0
 8007b48:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007b4a:	7bbb      	ldrb	r3, [r7, #14]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d12c      	bne.n	8007baa <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	7c1b      	ldrb	r3, [r3, #16]
 8007b54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b58:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	8adb      	ldrh	r3, [r3, #22]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00a      	beq.n	8007b78 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007b62:	7b7b      	ldrb	r3, [r7, #13]
 8007b64:	2b80      	cmp	r3, #128	; 0x80
 8007b66:	d103      	bne.n	8007b70 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2203      	movs	r2, #3
 8007b6c:	761a      	strb	r2, [r3, #24]
 8007b6e:	e00d      	b.n	8007b8c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2205      	movs	r2, #5
 8007b74:	761a      	strb	r2, [r3, #24]
 8007b76:	e009      	b.n	8007b8c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8007b78:	7b7b      	ldrb	r3, [r7, #13]
 8007b7a:	2b80      	cmp	r3, #128	; 0x80
 8007b7c:	d103      	bne.n	8007b86 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2209      	movs	r2, #9
 8007b82:	761a      	strb	r2, [r3, #24]
 8007b84:	e002      	b.n	8007b8c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2207      	movs	r2, #7
 8007b8a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2203      	movs	r2, #3
 8007b90:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	f000 fbb4 	bl	8008310 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ba8:	e1bf      	b.n	8007f2a <USBH_HandleControl+0x45a>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	d003      	beq.n	8007bb8 <USBH_HandleControl+0xe8>
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	f040 81b9 	bne.w	8007f2a <USBH_HandleControl+0x45a>
          phost->Control.state = CTRL_ERROR;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	220b      	movs	r2, #11
 8007bbc:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2203      	movs	r2, #3
 8007bc2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	f000 fb9b 	bl	8008310 <osMessagePut>
      break;
 8007bda:	e1a6      	b.n	8007f2a <USBH_HandleControl+0x45a>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6899      	ldr	r1, [r3, #8]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	899a      	ldrh	r2, [r3, #12]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	791b      	ldrb	r3, [r3, #4]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f9e6 	bl	8007fc6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2204      	movs	r2, #4
 8007bfe:	761a      	strb	r2, [r3, #24]
      break;
 8007c00:	e19c      	b.n	8007f3c <USBH_HandleControl+0x46c>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	791b      	ldrb	r3, [r3, #4]
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f002 ff7b 	bl	800ab04 <USBH_LL_GetURBState>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d110      	bne.n	8007c3a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2209      	movs	r2, #9
 8007c1c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2203      	movs	r2, #3
 8007c22:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007c32:	2200      	movs	r2, #0
 8007c34:	4619      	mov	r1, r3
 8007c36:	f000 fb6b 	bl	8008310 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007c3a:	7bbb      	ldrb	r3, [r7, #14]
 8007c3c:	2b05      	cmp	r3, #5
 8007c3e:	d110      	bne.n	8007c62 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007c40:	2303      	movs	r3, #3
 8007c42:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2203      	movs	r2, #3
 8007c48:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007c58:	2200      	movs	r2, #0
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	f000 fb58 	bl	8008310 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007c60:	e165      	b.n	8007f2e <USBH_HandleControl+0x45e>
        if (URB_Status == USBH_URB_ERROR)
 8007c62:	7bbb      	ldrb	r3, [r7, #14]
 8007c64:	2b04      	cmp	r3, #4
 8007c66:	f040 8162 	bne.w	8007f2e <USBH_HandleControl+0x45e>
          phost->Control.state = CTRL_ERROR;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	220b      	movs	r2, #11
 8007c6e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2203      	movs	r2, #3
 8007c74:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007c84:	2200      	movs	r2, #0
 8007c86:	4619      	mov	r1, r3
 8007c88:	f000 fb42 	bl	8008310 <osMessagePut>
      break;
 8007c8c:	e14f      	b.n	8007f2e <USBH_HandleControl+0x45e>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6899      	ldr	r1, [r3, #8]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	899a      	ldrh	r2, [r3, #12]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	795b      	ldrb	r3, [r3, #5]
 8007c9a:	2001      	movs	r0, #1
 8007c9c:	9000      	str	r0, [sp, #0]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f96c 	bl	8007f7c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2206      	movs	r2, #6
 8007cb4:	761a      	strb	r2, [r3, #24]
      break;
 8007cb6:	e141      	b.n	8007f3c <USBH_HandleControl+0x46c>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	795b      	ldrb	r3, [r3, #5]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f002 ff20 	bl	800ab04 <USBH_LL_GetURBState>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d111      	bne.n	8007cf2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2207      	movs	r2, #7
 8007cd2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2203      	movs	r2, #3
 8007cd8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007ce8:	2200      	movs	r2, #0
 8007cea:	4619      	mov	r1, r3
 8007cec:	f000 fb10 	bl	8008310 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007cf0:	e11f      	b.n	8007f32 <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_STALL)
 8007cf2:	7bbb      	ldrb	r3, [r7, #14]
 8007cf4:	2b05      	cmp	r3, #5
 8007cf6:	d113      	bne.n	8007d20 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	220c      	movs	r2, #12
 8007cfc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2203      	movs	r2, #3
 8007d06:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007d16:	2200      	movs	r2, #0
 8007d18:	4619      	mov	r1, r3
 8007d1a:	f000 faf9 	bl	8008310 <osMessagePut>
      break;
 8007d1e:	e108      	b.n	8007f32 <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d111      	bne.n	8007d4a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2205      	movs	r2, #5
 8007d2a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2203      	movs	r2, #3
 8007d30:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007d40:	2200      	movs	r2, #0
 8007d42:	4619      	mov	r1, r3
 8007d44:	f000 fae4 	bl	8008310 <osMessagePut>
      break;
 8007d48:	e0f3      	b.n	8007f32 <USBH_HandleControl+0x462>
        if (URB_Status == USBH_URB_ERROR)
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	f040 80f0 	bne.w	8007f32 <USBH_HandleControl+0x462>
          phost->Control.state = CTRL_ERROR;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	220b      	movs	r2, #11
 8007d56:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007d58:	2302      	movs	r3, #2
 8007d5a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2203      	movs	r2, #3
 8007d60:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007d70:	2200      	movs	r2, #0
 8007d72:	4619      	mov	r1, r3
 8007d74:	f000 facc 	bl	8008310 <osMessagePut>
      break;
 8007d78:	e0db      	b.n	8007f32 <USBH_HandleControl+0x462>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	791b      	ldrb	r3, [r3, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	2100      	movs	r1, #0
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f91f 	bl	8007fc6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2208      	movs	r2, #8
 8007d98:	761a      	strb	r2, [r3, #24]

      break;
 8007d9a:	e0cf      	b.n	8007f3c <USBH_HandleControl+0x46c>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	791b      	ldrb	r3, [r3, #4]
 8007da0:	4619      	mov	r1, r3
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f002 feae 	bl	800ab04 <USBH_LL_GetURBState>
 8007da8:	4603      	mov	r3, r0
 8007daa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007dac:	7bbb      	ldrb	r3, [r7, #14]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d113      	bne.n	8007dda <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	220d      	movs	r2, #13
 8007db6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007db8:	2300      	movs	r3, #0
 8007dba:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2203      	movs	r2, #3
 8007dc0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	f000 fa9c 	bl	8008310 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007dd8:	e0ad      	b.n	8007f36 <USBH_HandleControl+0x466>
      else if (URB_Status == USBH_URB_ERROR)
 8007dda:	7bbb      	ldrb	r3, [r7, #14]
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d111      	bne.n	8007e04 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	220b      	movs	r2, #11
 8007de4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2203      	movs	r2, #3
 8007dea:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	f000 fa87 	bl	8008310 <osMessagePut>
      break;
 8007e02:	e098      	b.n	8007f36 <USBH_HandleControl+0x466>
        if (URB_Status == USBH_URB_STALL)
 8007e04:	7bbb      	ldrb	r3, [r7, #14]
 8007e06:	2b05      	cmp	r3, #5
 8007e08:	f040 8095 	bne.w	8007f36 <USBH_HandleControl+0x466>
          status = USBH_NOT_SUPPORTED;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2203      	movs	r2, #3
 8007e14:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007e24:	2200      	movs	r2, #0
 8007e26:	4619      	mov	r1, r3
 8007e28:	f000 fa72 	bl	8008310 <osMessagePut>
      break;
 8007e2c:	e083      	b.n	8007f36 <USBH_HandleControl+0x466>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	795b      	ldrb	r3, [r3, #5]
 8007e32:	2201      	movs	r2, #1
 8007e34:	9200      	str	r2, [sp, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	2100      	movs	r1, #0
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f89e 	bl	8007f7c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	220a      	movs	r2, #10
 8007e50:	761a      	strb	r2, [r3, #24]
      break;
 8007e52:	e073      	b.n	8007f3c <USBH_HandleControl+0x46c>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	795b      	ldrb	r3, [r3, #5]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f002 fe52 	bl	800ab04 <USBH_LL_GetURBState>
 8007e60:	4603      	mov	r3, r0
 8007e62:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d113      	bne.n	8007e92 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	220d      	movs	r2, #13
 8007e72:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2203      	movs	r2, #3
 8007e78:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007e88:	2200      	movs	r2, #0
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	f000 fa40 	bl	8008310 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e90:	e053      	b.n	8007f3a <USBH_HandleControl+0x46a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d111      	bne.n	8007ebc <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2209      	movs	r2, #9
 8007e9c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2203      	movs	r2, #3
 8007ea2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	f000 fa2b 	bl	8008310 <osMessagePut>
      break;
 8007eba:	e03e      	b.n	8007f3a <USBH_HandleControl+0x46a>
        if (URB_Status == USBH_URB_ERROR)
 8007ebc:	7bbb      	ldrb	r3, [r7, #14]
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	d13b      	bne.n	8007f3a <USBH_HandleControl+0x46a>
          phost->Control.state = CTRL_ERROR;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	220b      	movs	r2, #11
 8007ec6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2203      	movs	r2, #3
 8007ecc:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007edc:	2200      	movs	r2, #0
 8007ede:	4619      	mov	r1, r3
 8007ee0:	f000 fa16 	bl	8008310 <osMessagePut>
      break;
 8007ee4:	e029      	b.n	8007f3a <USBH_HandleControl+0x46a>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	7e5b      	ldrb	r3, [r3, #25]
 8007eea:	3301      	adds	r3, #1
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	765a      	strb	r2, [r3, #25]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	7e5b      	ldrb	r3, [r3, #25]
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d806      	bhi.n	8007f08 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007f06:	e019      	b.n	8007f3c <USBH_HandleControl+0x46c>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8007f0e:	2106      	movs	r1, #6
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007f20:	2302      	movs	r3, #2
 8007f22:	73fb      	strb	r3, [r7, #15]
      break;
 8007f24:	e00a      	b.n	8007f3c <USBH_HandleControl+0x46c>

    default:
      break;
 8007f26:	bf00      	nop
 8007f28:	e008      	b.n	8007f3c <USBH_HandleControl+0x46c>
      break;
 8007f2a:	bf00      	nop
 8007f2c:	e006      	b.n	8007f3c <USBH_HandleControl+0x46c>
      break;
 8007f2e:	bf00      	nop
 8007f30:	e004      	b.n	8007f3c <USBH_HandleControl+0x46c>
      break;
 8007f32:	bf00      	nop
 8007f34:	e002      	b.n	8007f3c <USBH_HandleControl+0x46c>
      break;
 8007f36:	bf00      	nop
 8007f38:	e000      	b.n	8007f3c <USBH_HandleControl+0x46c>
      break;
 8007f3a:	bf00      	nop
  }

  return status;
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop

08007f48 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af04      	add	r7, sp, #16
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	4613      	mov	r3, r2
 8007f54:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f56:	79f9      	ldrb	r1, [r7, #7]
 8007f58:	2300      	movs	r3, #0
 8007f5a:	9303      	str	r3, [sp, #12]
 8007f5c:	2308      	movs	r3, #8
 8007f5e:	9302      	str	r3, [sp, #8]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	9301      	str	r3, [sp, #4]
 8007f64:	2300      	movs	r3, #0
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	2300      	movs	r3, #0
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f002 fd98 	bl	800aaa2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b088      	sub	sp, #32
 8007f80:	af04      	add	r7, sp, #16
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	4611      	mov	r1, r2
 8007f88:	461a      	mov	r2, r3
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	80fb      	strh	r3, [r7, #6]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007fa0:	7979      	ldrb	r1, [r7, #5]
 8007fa2:	7e3b      	ldrb	r3, [r7, #24]
 8007fa4:	9303      	str	r3, [sp, #12]
 8007fa6:	88fb      	ldrh	r3, [r7, #6]
 8007fa8:	9302      	str	r3, [sp, #8]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	9301      	str	r3, [sp, #4]
 8007fae:	2301      	movs	r3, #1
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f002 fd73 	bl	800aaa2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b088      	sub	sp, #32
 8007fca:	af04      	add	r7, sp, #16
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	80fb      	strh	r3, [r7, #6]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007fdc:	7979      	ldrb	r1, [r7, #5]
 8007fde:	2300      	movs	r3, #0
 8007fe0:	9303      	str	r3, [sp, #12]
 8007fe2:	88fb      	ldrh	r3, [r7, #6]
 8007fe4:	9302      	str	r3, [sp, #8]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	9301      	str	r3, [sp, #4]
 8007fea:	2301      	movs	r3, #1
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f002 fd55 	bl	800aaa2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007ff8:	2300      	movs	r3, #0

}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b088      	sub	sp, #32
 8008006:	af04      	add	r7, sp, #16
 8008008:	60f8      	str	r0, [r7, #12]
 800800a:	60b9      	str	r1, [r7, #8]
 800800c:	4611      	mov	r1, r2
 800800e:	461a      	mov	r2, r3
 8008010:	460b      	mov	r3, r1
 8008012:	80fb      	strh	r3, [r7, #6]
 8008014:	4613      	mov	r3, r2
 8008016:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800801e:	2b00      	cmp	r3, #0
 8008020:	d001      	beq.n	8008026 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008022:	2300      	movs	r3, #0
 8008024:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008026:	7979      	ldrb	r1, [r7, #5]
 8008028:	7e3b      	ldrb	r3, [r7, #24]
 800802a:	9303      	str	r3, [sp, #12]
 800802c:	88fb      	ldrh	r3, [r7, #6]
 800802e:	9302      	str	r3, [sp, #8]
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	9301      	str	r3, [sp, #4]
 8008034:	2301      	movs	r3, #1
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	2302      	movs	r3, #2
 800803a:	2200      	movs	r2, #0
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f002 fd30 	bl	800aaa2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b088      	sub	sp, #32
 8008050:	af04      	add	r7, sp, #16
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	4611      	mov	r1, r2
 8008058:	461a      	mov	r2, r3
 800805a:	460b      	mov	r3, r1
 800805c:	80fb      	strh	r3, [r7, #6]
 800805e:	4613      	mov	r3, r2
 8008060:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008062:	7979      	ldrb	r1, [r7, #5]
 8008064:	2300      	movs	r3, #0
 8008066:	9303      	str	r3, [sp, #12]
 8008068:	88fb      	ldrh	r3, [r7, #6]
 800806a:	9302      	str	r3, [sp, #8]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	9301      	str	r3, [sp, #4]
 8008070:	2301      	movs	r3, #1
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	2302      	movs	r3, #2
 8008076:	2201      	movs	r2, #1
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f002 fd12 	bl	800aaa2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af04      	add	r7, sp, #16
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	4608      	mov	r0, r1
 8008092:	4611      	mov	r1, r2
 8008094:	461a      	mov	r2, r3
 8008096:	4603      	mov	r3, r0
 8008098:	70fb      	strb	r3, [r7, #3]
 800809a:	460b      	mov	r3, r1
 800809c:	70bb      	strb	r3, [r7, #2]
 800809e:	4613      	mov	r3, r2
 80080a0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80080a2:	7878      	ldrb	r0, [r7, #1]
 80080a4:	78ba      	ldrb	r2, [r7, #2]
 80080a6:	78f9      	ldrb	r1, [r7, #3]
 80080a8:	8b3b      	ldrh	r3, [r7, #24]
 80080aa:	9302      	str	r3, [sp, #8]
 80080ac:	7d3b      	ldrb	r3, [r7, #20]
 80080ae:	9301      	str	r3, [sp, #4]
 80080b0:	7c3b      	ldrb	r3, [r7, #16]
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	4603      	mov	r3, r0
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f002 fca5 	bl	800aa06 <USBH_LL_OpenPipe>

  return USBH_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b082      	sub	sp, #8
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	460b      	mov	r3, r1
 80080d0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80080d2:	78fb      	ldrb	r3, [r7, #3]
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f002 fcc4 	bl	800aa64 <USBH_LL_ClosePipe>

  return USBH_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	460b      	mov	r3, r1
 80080f0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f832 	bl	800815c <USBH_GetFreePipe>
 80080f8:	4603      	mov	r3, r0
 80080fa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80080fc:	89fb      	ldrh	r3, [r7, #14]
 80080fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008102:	4293      	cmp	r3, r2
 8008104:	d009      	beq.n	800811a <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008106:	78fb      	ldrb	r3, [r7, #3]
 8008108:	89fa      	ldrh	r2, [r7, #14]
 800810a:	f002 020f 	and.w	r2, r2, #15
 800810e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	32e0      	adds	r2, #224	; 0xe0
 8008116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 800811a:	89fb      	ldrh	r3, [r7, #14]
 800811c:	b2db      	uxtb	r3, r3
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	460b      	mov	r3, r1
 8008130:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008132:	78fb      	ldrb	r3, [r7, #3]
 8008134:	2b0a      	cmp	r3, #10
 8008136:	d80b      	bhi.n	8008150 <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008138:	78fa      	ldrb	r2, [r7, #3]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	32e0      	adds	r2, #224	; 0xe0
 800813e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008142:	78fa      	ldrb	r2, [r7, #3]
 8008144:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	32e0      	adds	r2, #224	; 0xe0
 800814c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	bc80      	pop	{r7}
 800815a:	4770      	bx	lr

0800815c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008168:	2300      	movs	r3, #0
 800816a:	73fb      	strb	r3, [r7, #15]
 800816c:	e00e      	b.n	800818c <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800816e:	7bfa      	ldrb	r2, [r7, #15]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	32e0      	adds	r2, #224	; 0xe0
 8008174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d102      	bne.n	8008186 <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 8008180:	7bfb      	ldrb	r3, [r7, #15]
 8008182:	b29b      	uxth	r3, r3
 8008184:	e007      	b.n	8008196 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8008186:	7bfb      	ldrb	r3, [r7, #15]
 8008188:	3301      	adds	r3, #1
 800818a:	73fb      	strb	r3, [r7, #15]
 800818c:	7bfb      	ldrb	r3, [r7, #15]
 800818e:	2b0a      	cmp	r3, #10
 8008190:	d9ed      	bls.n	800816e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008192:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008196:	4618      	mov	r0, r3
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	bc80      	pop	{r7}
 800819e:	4770      	bx	lr

080081a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	4603      	mov	r3, r0
 80081a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80081aa:	2300      	movs	r3, #0
 80081ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80081ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80081b2:	2b84      	cmp	r3, #132	; 0x84
 80081b4:	d005      	beq.n	80081c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80081b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	4413      	add	r3, r2
 80081be:	3303      	adds	r3, #3
 80081c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80081c2:	68fb      	ldr	r3, [r7, #12]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bc80      	pop	{r7}
 80081cc:	4770      	bx	lr

080081ce <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081d4:	f3ef 8305 	mrs	r3, IPSR
 80081d8:	607b      	str	r3, [r7, #4]
  return(result);
 80081da:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80081dc:	2b00      	cmp	r3, #0
 80081de:	bf14      	ite	ne
 80081e0:	2301      	movne	r3, #1
 80081e2:	2300      	moveq	r3, #0
 80081e4:	b2db      	uxtb	r3, r3
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bc80      	pop	{r7}
 80081ee:	4770      	bx	lr

080081f0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80081f4:	f001 f908 	bl	8009408 <vTaskStartScheduler>
  
  return osOK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	bd80      	pop	{r7, pc}

080081fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80081fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008200:	b089      	sub	sp, #36	; 0x24
 8008202:	af04      	add	r7, sp, #16
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d020      	beq.n	8008252 <osThreadCreate+0x54>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d01c      	beq.n	8008252 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685c      	ldr	r4, [r3, #4]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681d      	ldr	r5, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	691e      	ldr	r6, [r3, #16]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800822a:	4618      	mov	r0, r3
 800822c:	f7ff ffb8 	bl	80081a0 <makeFreeRtosPriority>
 8008230:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800823a:	9202      	str	r2, [sp, #8]
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	9100      	str	r1, [sp, #0]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	4632      	mov	r2, r6
 8008244:	4629      	mov	r1, r5
 8008246:	4620      	mov	r0, r4
 8008248:	f000 ff08 	bl	800905c <xTaskCreateStatic>
 800824c:	4603      	mov	r3, r0
 800824e:	60fb      	str	r3, [r7, #12]
 8008250:	e01c      	b.n	800828c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685c      	ldr	r4, [r3, #4]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800825e:	b29e      	uxth	r6, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008266:	4618      	mov	r0, r3
 8008268:	f7ff ff9a 	bl	80081a0 <makeFreeRtosPriority>
 800826c:	4602      	mov	r2, r0
 800826e:	f107 030c 	add.w	r3, r7, #12
 8008272:	9301      	str	r3, [sp, #4]
 8008274:	9200      	str	r2, [sp, #0]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	4632      	mov	r2, r6
 800827a:	4629      	mov	r1, r5
 800827c:	4620      	mov	r0, r4
 800827e:	f000 ff49 	bl	8009114 <xTaskCreate>
 8008282:	4603      	mov	r3, r0
 8008284:	2b01      	cmp	r3, #1
 8008286:	d001      	beq.n	800828c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008288:	2300      	movs	r3, #0
 800828a:	e000      	b.n	800828e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800828c:	68fb      	ldr	r3, [r7, #12]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008296 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d001      	beq.n	80082ac <osDelay+0x16>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	e000      	b.n	80082ae <osDelay+0x18>
 80082ac:	2301      	movs	r3, #1
 80082ae:	4618      	mov	r0, r3
 80082b0:	f001 f876 	bl	80093a0 <vTaskDelay>
  
  return osOK;
 80082b4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80082be:	b590      	push	{r4, r7, lr}
 80082c0:	b085      	sub	sp, #20
 80082c2:	af02      	add	r7, sp, #8
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d011      	beq.n	80082f4 <osMessageCreate+0x36>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00d      	beq.n	80082f4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6818      	ldr	r0, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6859      	ldr	r1, [r3, #4]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	689a      	ldr	r2, [r3, #8]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	2400      	movs	r4, #0
 80082ea:	9400      	str	r4, [sp, #0]
 80082ec:	f000 f9dc 	bl	80086a8 <xQueueGenericCreateStatic>
 80082f0:	4603      	mov	r3, r0
 80082f2:	e008      	b.n	8008306 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6818      	ldr	r0, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	4619      	mov	r1, r3
 8008300:	f000 fa49 	bl	8008796 <xQueueGenericCreate>
 8008304:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008306:	4618      	mov	r0, r3
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	bd90      	pop	{r4, r7, pc}
	...

08008310 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800831c:	2300      	movs	r3, #0
 800831e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d101      	bne.n	800832e <osMessagePut+0x1e>
    ticks = 1;
 800832a:	2301      	movs	r3, #1
 800832c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800832e:	f7ff ff4e 	bl	80081ce <inHandlerMode>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d018      	beq.n	800836a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008338:	f107 0210 	add.w	r2, r7, #16
 800833c:	f107 0108 	add.w	r1, r7, #8
 8008340:	2300      	movs	r3, #0
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f000 fb82 	bl	8008a4c <xQueueGenericSendFromISR>
 8008348:	4603      	mov	r3, r0
 800834a:	2b01      	cmp	r3, #1
 800834c:	d001      	beq.n	8008352 <osMessagePut+0x42>
      return osErrorOS;
 800834e:	23ff      	movs	r3, #255	; 0xff
 8008350:	e018      	b.n	8008384 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d014      	beq.n	8008382 <osMessagePut+0x72>
 8008358:	4b0c      	ldr	r3, [pc, #48]	; (800838c <osMessagePut+0x7c>)
 800835a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	e00b      	b.n	8008382 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800836a:	f107 0108 	add.w	r1, r7, #8
 800836e:	2300      	movs	r3, #0
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 fa6c 	bl	8008850 <xQueueGenericSend>
 8008378:	4603      	mov	r3, r0
 800837a:	2b01      	cmp	r3, #1
 800837c:	d001      	beq.n	8008382 <osMessagePut+0x72>
      return osErrorOS;
 800837e:	23ff      	movs	r3, #255	; 0xff
 8008380:	e000      	b.n	8008384 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3718      	adds	r7, #24
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	e000ed04 	.word	0xe000ed04

08008390 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008390:	b590      	push	{r4, r7, lr}
 8008392:	b08b      	sub	sp, #44	; 0x2c
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80083a0:	2300      	movs	r3, #0
 80083a2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10a      	bne.n	80083c0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80083aa:	2380      	movs	r3, #128	; 0x80
 80083ac:	617b      	str	r3, [r7, #20]
    return event;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	461c      	mov	r4, r3
 80083b2:	f107 0314 	add.w	r3, r7, #20
 80083b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80083be:	e054      	b.n	800846a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80083c0:	2300      	movs	r3, #0
 80083c2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80083c4:	2300      	movs	r3, #0
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ce:	d103      	bne.n	80083d8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80083d0:	f04f 33ff 	mov.w	r3, #4294967295
 80083d4:	627b      	str	r3, [r7, #36]	; 0x24
 80083d6:	e009      	b.n	80083ec <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d006      	beq.n	80083ec <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80083e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d101      	bne.n	80083ec <osMessageGet+0x5c>
      ticks = 1;
 80083e8:	2301      	movs	r3, #1
 80083ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80083ec:	f7ff feef 	bl	80081ce <inHandlerMode>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d01c      	beq.n	8008430 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80083f6:	f107 0220 	add.w	r2, r7, #32
 80083fa:	f107 0314 	add.w	r3, r7, #20
 80083fe:	3304      	adds	r3, #4
 8008400:	4619      	mov	r1, r3
 8008402:	68b8      	ldr	r0, [r7, #8]
 8008404:	f000 fc9a 	bl	8008d3c <xQueueReceiveFromISR>
 8008408:	4603      	mov	r3, r0
 800840a:	2b01      	cmp	r3, #1
 800840c:	d102      	bne.n	8008414 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800840e:	2310      	movs	r3, #16
 8008410:	617b      	str	r3, [r7, #20]
 8008412:	e001      	b.n	8008418 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008414:	2300      	movs	r3, #0
 8008416:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008418:	6a3b      	ldr	r3, [r7, #32]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d01d      	beq.n	800845a <osMessageGet+0xca>
 800841e:	4b15      	ldr	r3, [pc, #84]	; (8008474 <osMessageGet+0xe4>)
 8008420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	f3bf 8f6f 	isb	sy
 800842e:	e014      	b.n	800845a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008430:	f107 0314 	add.w	r3, r7, #20
 8008434:	3304      	adds	r3, #4
 8008436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008438:	4619      	mov	r1, r3
 800843a:	68b8      	ldr	r0, [r7, #8]
 800843c:	f000 fb9e 	bl	8008b7c <xQueueReceive>
 8008440:	4603      	mov	r3, r0
 8008442:	2b01      	cmp	r3, #1
 8008444:	d102      	bne.n	800844c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008446:	2310      	movs	r3, #16
 8008448:	617b      	str	r3, [r7, #20]
 800844a:	e006      	b.n	800845a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <osMessageGet+0xc6>
 8008452:	2300      	movs	r3, #0
 8008454:	e000      	b.n	8008458 <osMessageGet+0xc8>
 8008456:	2340      	movs	r3, #64	; 0x40
 8008458:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	461c      	mov	r4, r3
 800845e:	f107 0314 	add.w	r3, r7, #20
 8008462:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008466:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	372c      	adds	r7, #44	; 0x2c
 800846e:	46bd      	mov	sp, r7
 8008470:	bd90      	pop	{r4, r7, pc}
 8008472:	bf00      	nop
 8008474:	e000ed04 	.word	0xe000ed04

08008478 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f103 0208 	add.w	r2, r3, #8
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f04f 32ff 	mov.w	r2, #4294967295
 8008490:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f103 0208 	add.w	r2, r3, #8
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f103 0208 	add.w	r2, r3, #8
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bc80      	pop	{r7}
 80084b4:	4770      	bx	lr

080084b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80084b6:	b480      	push	{r7}
 80084b8:	b083      	sub	sp, #12
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bc80      	pop	{r7}
 80084cc:	4770      	bx	lr

080084ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084ce:	b480      	push	{r7}
 80084d0:	b085      	sub	sp, #20
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	689a      	ldr	r2, [r3, #8]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	683a      	ldr	r2, [r7, #0]
 80084f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	1c5a      	adds	r2, r3, #1
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	601a      	str	r2, [r3, #0]
}
 800850a:	bf00      	nop
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	bc80      	pop	{r7}
 8008512:	4770      	bx	lr

08008514 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852a:	d103      	bne.n	8008534 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	60fb      	str	r3, [r7, #12]
 8008532:	e00c      	b.n	800854e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	3308      	adds	r3, #8
 8008538:	60fb      	str	r3, [r7, #12]
 800853a:	e002      	b.n	8008542 <vListInsert+0x2e>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	60fb      	str	r3, [r7, #12]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	429a      	cmp	r2, r3
 800854c:	d2f6      	bcs.n	800853c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	685a      	ldr	r2, [r3, #4]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	1c5a      	adds	r2, r3, #1
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	601a      	str	r2, [r3, #0]
}
 800857a:	bf00      	nop
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	bc80      	pop	{r7}
 8008582:	4770      	bx	lr

08008584 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	6892      	ldr	r2, [r2, #8]
 800859a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	6852      	ldr	r2, [r2, #4]
 80085a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d103      	bne.n	80085b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689a      	ldr	r2, [r3, #8]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	1e5a      	subs	r2, r3, #1
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bc80      	pop	{r7}
 80085d4:	4770      	bx	lr
	...

080085d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10a      	bne.n	8008602 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80085fe:	bf00      	nop
 8008600:	e7fe      	b.n	8008600 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008602:	f001 fd1b 	bl	800a03c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800860e:	68f9      	ldr	r1, [r7, #12]
 8008610:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008612:	fb01 f303 	mul.w	r3, r1, r3
 8008616:	441a      	add	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008632:	3b01      	subs	r3, #1
 8008634:	68f9      	ldr	r1, [r7, #12]
 8008636:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008638:	fb01 f303 	mul.w	r3, r1, r3
 800863c:	441a      	add	r2, r3
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	22ff      	movs	r2, #255	; 0xff
 8008646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	22ff      	movs	r2, #255	; 0xff
 800864e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d114      	bne.n	8008682 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d01a      	beq.n	8008696 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	3310      	adds	r3, #16
 8008664:	4618      	mov	r0, r3
 8008666:	f001 f927 	bl	80098b8 <xTaskRemoveFromEventList>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d012      	beq.n	8008696 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008670:	4b0c      	ldr	r3, [pc, #48]	; (80086a4 <xQueueGenericReset+0xcc>)
 8008672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	e009      	b.n	8008696 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3310      	adds	r3, #16
 8008686:	4618      	mov	r0, r3
 8008688:	f7ff fef6 	bl	8008478 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3324      	adds	r3, #36	; 0x24
 8008690:	4618      	mov	r0, r3
 8008692:	f7ff fef1 	bl	8008478 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008696:	f001 fd01 	bl	800a09c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800869a:	2301      	movs	r3, #1
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	e000ed04 	.word	0xe000ed04

080086a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b08e      	sub	sp, #56	; 0x38
 80086ac:	af02      	add	r7, sp, #8
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10a      	bne.n	80086d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80086bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086ce:	bf00      	nop
 80086d0:	e7fe      	b.n	80086d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10a      	bne.n	80086ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086ea:	bf00      	nop
 80086ec:	e7fe      	b.n	80086ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <xQueueGenericCreateStatic+0x52>
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <xQueueGenericCreateStatic+0x56>
 80086fa:	2301      	movs	r3, #1
 80086fc:	e000      	b.n	8008700 <xQueueGenericCreateStatic+0x58>
 80086fe:	2300      	movs	r3, #0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10a      	bne.n	800871a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	623b      	str	r3, [r7, #32]
}
 8008716:	bf00      	nop
 8008718:	e7fe      	b.n	8008718 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d102      	bne.n	8008726 <xQueueGenericCreateStatic+0x7e>
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <xQueueGenericCreateStatic+0x82>
 8008726:	2301      	movs	r3, #1
 8008728:	e000      	b.n	800872c <xQueueGenericCreateStatic+0x84>
 800872a:	2300      	movs	r3, #0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10a      	bne.n	8008746 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	61fb      	str	r3, [r7, #28]
}
 8008742:	bf00      	nop
 8008744:	e7fe      	b.n	8008744 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008746:	2348      	movs	r3, #72	; 0x48
 8008748:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	2b48      	cmp	r3, #72	; 0x48
 800874e:	d00a      	beq.n	8008766 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	61bb      	str	r3, [r7, #24]
}
 8008762:	bf00      	nop
 8008764:	e7fe      	b.n	8008764 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00d      	beq.n	800878c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008778:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800877c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	4613      	mov	r3, r2
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	68b9      	ldr	r1, [r7, #8]
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 f843 	bl	8008812 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800878c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800878e:	4618      	mov	r0, r3
 8008790:	3730      	adds	r7, #48	; 0x30
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008796:	b580      	push	{r7, lr}
 8008798:	b08a      	sub	sp, #40	; 0x28
 800879a:	af02      	add	r7, sp, #8
 800879c:	60f8      	str	r0, [r7, #12]
 800879e:	60b9      	str	r1, [r7, #8]
 80087a0:	4613      	mov	r3, r2
 80087a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10a      	bne.n	80087c0 <xQueueGenericCreate+0x2a>
	__asm volatile
 80087aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ae:	f383 8811 	msr	BASEPRI, r3
 80087b2:	f3bf 8f6f 	isb	sy
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	613b      	str	r3, [r7, #16]
}
 80087bc:	bf00      	nop
 80087be:	e7fe      	b.n	80087be <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d102      	bne.n	80087cc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80087c6:	2300      	movs	r3, #0
 80087c8:	61fb      	str	r3, [r7, #28]
 80087ca:	e004      	b.n	80087d6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	fb02 f303 	mul.w	r3, r2, r3
 80087d4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	3348      	adds	r3, #72	; 0x48
 80087da:	4618      	mov	r0, r3
 80087dc:	f001 fd2e 	bl	800a23c <pvPortMalloc>
 80087e0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00f      	beq.n	8008808 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	3348      	adds	r3, #72	; 0x48
 80087ec:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087f6:	79fa      	ldrb	r2, [r7, #7]
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	4613      	mov	r3, r2
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	68b9      	ldr	r1, [r7, #8]
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f000 f805 	bl	8008812 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008808:	69bb      	ldr	r3, [r7, #24]
	}
 800880a:	4618      	mov	r0, r3
 800880c:	3720      	adds	r7, #32
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b084      	sub	sp, #16
 8008816:	af00      	add	r7, sp, #0
 8008818:	60f8      	str	r0, [r7, #12]
 800881a:	60b9      	str	r1, [r7, #8]
 800881c:	607a      	str	r2, [r7, #4]
 800881e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d103      	bne.n	800882e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	69ba      	ldr	r2, [r7, #24]
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	e002      	b.n	8008834 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008840:	2101      	movs	r1, #1
 8008842:	69b8      	ldr	r0, [r7, #24]
 8008844:	f7ff fec8 	bl	80085d8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008848:	bf00      	nop
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b08e      	sub	sp, #56	; 0x38
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800885e:	2300      	movs	r3, #0
 8008860:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10a      	bne.n	8008882 <xQueueGenericSend+0x32>
	__asm volatile
 800886c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800887e:	bf00      	nop
 8008880:	e7fe      	b.n	8008880 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d103      	bne.n	8008890 <xQueueGenericSend+0x40>
 8008888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <xQueueGenericSend+0x44>
 8008890:	2301      	movs	r3, #1
 8008892:	e000      	b.n	8008896 <xQueueGenericSend+0x46>
 8008894:	2300      	movs	r3, #0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10a      	bne.n	80088b0 <xQueueGenericSend+0x60>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80088ac:	bf00      	nop
 80088ae:	e7fe      	b.n	80088ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d103      	bne.n	80088be <xQueueGenericSend+0x6e>
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d101      	bne.n	80088c2 <xQueueGenericSend+0x72>
 80088be:	2301      	movs	r3, #1
 80088c0:	e000      	b.n	80088c4 <xQueueGenericSend+0x74>
 80088c2:	2300      	movs	r3, #0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10a      	bne.n	80088de <xQueueGenericSend+0x8e>
	__asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	623b      	str	r3, [r7, #32]
}
 80088da:	bf00      	nop
 80088dc:	e7fe      	b.n	80088dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088de:	f001 f9af 	bl	8009c40 <xTaskGetSchedulerState>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d102      	bne.n	80088ee <xQueueGenericSend+0x9e>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <xQueueGenericSend+0xa2>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e000      	b.n	80088f4 <xQueueGenericSend+0xa4>
 80088f2:	2300      	movs	r3, #0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10a      	bne.n	800890e <xQueueGenericSend+0xbe>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	61fb      	str	r3, [r7, #28]
}
 800890a:	bf00      	nop
 800890c:	e7fe      	b.n	800890c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800890e:	f001 fb95 	bl	800a03c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800891a:	429a      	cmp	r2, r3
 800891c:	d302      	bcc.n	8008924 <xQueueGenericSend+0xd4>
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2b02      	cmp	r3, #2
 8008922:	d129      	bne.n	8008978 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	68b9      	ldr	r1, [r7, #8]
 8008928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800892a:	f000 fa87 	bl	8008e3c <prvCopyDataToQueue>
 800892e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	2b00      	cmp	r3, #0
 8008936:	d010      	beq.n	800895a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893a:	3324      	adds	r3, #36	; 0x24
 800893c:	4618      	mov	r0, r3
 800893e:	f000 ffbb 	bl	80098b8 <xTaskRemoveFromEventList>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d013      	beq.n	8008970 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008948:	4b3f      	ldr	r3, [pc, #252]	; (8008a48 <xQueueGenericSend+0x1f8>)
 800894a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800894e:	601a      	str	r2, [r3, #0]
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	e00a      	b.n	8008970 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800895a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895c:	2b00      	cmp	r3, #0
 800895e:	d007      	beq.n	8008970 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008960:	4b39      	ldr	r3, [pc, #228]	; (8008a48 <xQueueGenericSend+0x1f8>)
 8008962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008970:	f001 fb94 	bl	800a09c <vPortExitCritical>
				return pdPASS;
 8008974:	2301      	movs	r3, #1
 8008976:	e063      	b.n	8008a40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d103      	bne.n	8008986 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800897e:	f001 fb8d 	bl	800a09c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008982:	2300      	movs	r3, #0
 8008984:	e05c      	b.n	8008a40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008988:	2b00      	cmp	r3, #0
 800898a:	d106      	bne.n	800899a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800898c:	f107 0314 	add.w	r3, r7, #20
 8008990:	4618      	mov	r0, r3
 8008992:	f000 fff3 	bl	800997c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008996:	2301      	movs	r3, #1
 8008998:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800899a:	f001 fb7f 	bl	800a09c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800899e:	f000 fd9d 	bl	80094dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089a2:	f001 fb4b 	bl	800a03c <vPortEnterCritical>
 80089a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089ac:	b25b      	sxtb	r3, r3
 80089ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b2:	d103      	bne.n	80089bc <xQueueGenericSend+0x16c>
 80089b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089c2:	b25b      	sxtb	r3, r3
 80089c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c8:	d103      	bne.n	80089d2 <xQueueGenericSend+0x182>
 80089ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089d2:	f001 fb63 	bl	800a09c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089d6:	1d3a      	adds	r2, r7, #4
 80089d8:	f107 0314 	add.w	r3, r7, #20
 80089dc:	4611      	mov	r1, r2
 80089de:	4618      	mov	r0, r3
 80089e0:	f000 ffe2 	bl	80099a8 <xTaskCheckForTimeOut>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d124      	bne.n	8008a34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80089ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089ec:	f000 fb1e 	bl	800902c <prvIsQueueFull>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d018      	beq.n	8008a28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80089f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f8:	3310      	adds	r3, #16
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	4611      	mov	r1, r2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 ff36 	bl	8009870 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a06:	f000 faa9 	bl	8008f5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a0a:	f000 fd75 	bl	80094f8 <xTaskResumeAll>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f47f af7c 	bne.w	800890e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008a16:	4b0c      	ldr	r3, [pc, #48]	; (8008a48 <xQueueGenericSend+0x1f8>)
 8008a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	e772      	b.n	800890e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a2a:	f000 fa97 	bl	8008f5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a2e:	f000 fd63 	bl	80094f8 <xTaskResumeAll>
 8008a32:	e76c      	b.n	800890e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a36:	f000 fa91 	bl	8008f5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a3a:	f000 fd5d 	bl	80094f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a3e:	2300      	movs	r3, #0
		}
	}
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3738      	adds	r7, #56	; 0x38
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	e000ed04 	.word	0xe000ed04

08008a4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b08e      	sub	sp, #56	; 0x38
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
 8008a58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10a      	bne.n	8008a7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a76:	bf00      	nop
 8008a78:	e7fe      	b.n	8008a78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d103      	bne.n	8008a88 <xQueueGenericSendFromISR+0x3c>
 8008a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d101      	bne.n	8008a8c <xQueueGenericSendFromISR+0x40>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e000      	b.n	8008a8e <xQueueGenericSendFromISR+0x42>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10a      	bne.n	8008aa8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	623b      	str	r3, [r7, #32]
}
 8008aa4:	bf00      	nop
 8008aa6:	e7fe      	b.n	8008aa6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d103      	bne.n	8008ab6 <xQueueGenericSendFromISR+0x6a>
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d101      	bne.n	8008aba <xQueueGenericSendFromISR+0x6e>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e000      	b.n	8008abc <xQueueGenericSendFromISR+0x70>
 8008aba:	2300      	movs	r3, #0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10a      	bne.n	8008ad6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	61fb      	str	r3, [r7, #28]
}
 8008ad2:	bf00      	nop
 8008ad4:	e7fe      	b.n	8008ad4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ad6:	f001 fb73 	bl	800a1c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ada:	f3ef 8211 	mrs	r2, BASEPRI
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	61ba      	str	r2, [r7, #24]
 8008af0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008af2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008af4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d302      	bcc.n	8008b08 <xQueueGenericSendFromISR+0xbc>
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d12c      	bne.n	8008b62 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	68b9      	ldr	r1, [r7, #8]
 8008b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b18:	f000 f990 	bl	8008e3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b1c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b24:	d112      	bne.n	8008b4c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d016      	beq.n	8008b5c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	3324      	adds	r3, #36	; 0x24
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 fec0 	bl	80098b8 <xTaskRemoveFromEventList>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00e      	beq.n	8008b5c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00b      	beq.n	8008b5c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	601a      	str	r2, [r3, #0]
 8008b4a:	e007      	b.n	8008b5c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b50:	3301      	adds	r3, #1
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	b25a      	sxtb	r2, r3
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008b60:	e001      	b.n	8008b66 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b62:	2300      	movs	r3, #0
 8008b64:	637b      	str	r3, [r7, #52]	; 0x34
 8008b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b68:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3738      	adds	r7, #56	; 0x38
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08c      	sub	sp, #48	; 0x30
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10a      	bne.n	8008bac <xQueueReceive+0x30>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	623b      	str	r3, [r7, #32]
}
 8008ba8:	bf00      	nop
 8008baa:	e7fe      	b.n	8008baa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d103      	bne.n	8008bba <xQueueReceive+0x3e>
 8008bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <xQueueReceive+0x42>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e000      	b.n	8008bc0 <xQueueReceive+0x44>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d10a      	bne.n	8008bda <xQueueReceive+0x5e>
	__asm volatile
 8008bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc8:	f383 8811 	msr	BASEPRI, r3
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	61fb      	str	r3, [r7, #28]
}
 8008bd6:	bf00      	nop
 8008bd8:	e7fe      	b.n	8008bd8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bda:	f001 f831 	bl	8009c40 <xTaskGetSchedulerState>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d102      	bne.n	8008bea <xQueueReceive+0x6e>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <xQueueReceive+0x72>
 8008bea:	2301      	movs	r3, #1
 8008bec:	e000      	b.n	8008bf0 <xQueueReceive+0x74>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10a      	bne.n	8008c0a <xQueueReceive+0x8e>
	__asm volatile
 8008bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	61bb      	str	r3, [r7, #24]
}
 8008c06:	bf00      	nop
 8008c08:	e7fe      	b.n	8008c08 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c0a:	f001 fa17 	bl	800a03c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d01f      	beq.n	8008c5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c1a:	68b9      	ldr	r1, [r7, #8]
 8008c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c1e:	f000 f977 	bl	8008f10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c24:	1e5a      	subs	r2, r3, #1
 8008c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00f      	beq.n	8008c52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c34:	3310      	adds	r3, #16
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fe3e 	bl	80098b8 <xTaskRemoveFromEventList>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d007      	beq.n	8008c52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c42:	4b3d      	ldr	r3, [pc, #244]	; (8008d38 <xQueueReceive+0x1bc>)
 8008c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c48:	601a      	str	r2, [r3, #0]
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c52:	f001 fa23 	bl	800a09c <vPortExitCritical>
				return pdPASS;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e069      	b.n	8008d2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d103      	bne.n	8008c68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c60:	f001 fa1c 	bl	800a09c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c64:	2300      	movs	r3, #0
 8008c66:	e062      	b.n	8008d2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d106      	bne.n	8008c7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c6e:	f107 0310 	add.w	r3, r7, #16
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 fe82 	bl	800997c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c7c:	f001 fa0e 	bl	800a09c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c80:	f000 fc2c 	bl	80094dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c84:	f001 f9da 	bl	800a03c <vPortEnterCritical>
 8008c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c8e:	b25b      	sxtb	r3, r3
 8008c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c94:	d103      	bne.n	8008c9e <xQueueReceive+0x122>
 8008c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ca4:	b25b      	sxtb	r3, r3
 8008ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008caa:	d103      	bne.n	8008cb4 <xQueueReceive+0x138>
 8008cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cb4:	f001 f9f2 	bl	800a09c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cb8:	1d3a      	adds	r2, r7, #4
 8008cba:	f107 0310 	add.w	r3, r7, #16
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 fe71 	bl	80099a8 <xTaskCheckForTimeOut>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d123      	bne.n	8008d14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cce:	f000 f997 	bl	8009000 <prvIsQueueEmpty>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d017      	beq.n	8008d08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	3324      	adds	r3, #36	; 0x24
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	4611      	mov	r1, r2
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 fdc5 	bl	8009870 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ce8:	f000 f938 	bl	8008f5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008cec:	f000 fc04 	bl	80094f8 <xTaskResumeAll>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d189      	bne.n	8008c0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008cf6:	4b10      	ldr	r3, [pc, #64]	; (8008d38 <xQueueReceive+0x1bc>)
 8008cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	e780      	b.n	8008c0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d0a:	f000 f927 	bl	8008f5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d0e:	f000 fbf3 	bl	80094f8 <xTaskResumeAll>
 8008d12:	e77a      	b.n	8008c0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d16:	f000 f921 	bl	8008f5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d1a:	f000 fbed 	bl	80094f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d20:	f000 f96e 	bl	8009000 <prvIsQueueEmpty>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f43f af6f 	beq.w	8008c0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3730      	adds	r7, #48	; 0x30
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	e000ed04 	.word	0xe000ed04

08008d3c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b08e      	sub	sp, #56	; 0x38
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10a      	bne.n	8008d68 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	623b      	str	r3, [r7, #32]
}
 8008d64:	bf00      	nop
 8008d66:	e7fe      	b.n	8008d66 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d103      	bne.n	8008d76 <xQueueReceiveFromISR+0x3a>
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d101      	bne.n	8008d7a <xQueueReceiveFromISR+0x3e>
 8008d76:	2301      	movs	r3, #1
 8008d78:	e000      	b.n	8008d7c <xQueueReceiveFromISR+0x40>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10a      	bne.n	8008d96 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	61fb      	str	r3, [r7, #28]
}
 8008d92:	bf00      	nop
 8008d94:	e7fe      	b.n	8008d94 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d96:	f001 fa13 	bl	800a1c0 <vPortValidateInterruptPriority>
	__asm volatile
 8008d9a:	f3ef 8211 	mrs	r2, BASEPRI
 8008d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	61ba      	str	r2, [r7, #24]
 8008db0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008db2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008db4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d02f      	beq.n	8008e22 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008dcc:	68b9      	ldr	r1, [r7, #8]
 8008dce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dd0:	f000 f89e 	bl	8008f10 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd6:	1e5a      	subs	r2, r3, #1
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dda:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008ddc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de4:	d112      	bne.n	8008e0c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d016      	beq.n	8008e1c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	3310      	adds	r3, #16
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 fd60 	bl	80098b8 <xTaskRemoveFromEventList>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00e      	beq.n	8008e1c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00b      	beq.n	8008e1c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	601a      	str	r2, [r3, #0]
 8008e0a:	e007      	b.n	8008e1c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e10:	3301      	adds	r3, #1
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	b25a      	sxtb	r2, r3
 8008e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8008e20:	e001      	b.n	8008e26 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008e22:	2300      	movs	r3, #0
 8008e24:	637b      	str	r3, [r7, #52]	; 0x34
 8008e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	f383 8811 	msr	BASEPRI, r3
}
 8008e30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3738      	adds	r7, #56	; 0x38
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b086      	sub	sp, #24
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10d      	bne.n	8008e76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d14d      	bne.n	8008efe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f000 ff08 	bl	8009c7c <xTaskPriorityDisinherit>
 8008e6c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	605a      	str	r2, [r3, #4]
 8008e74:	e043      	b.n	8008efe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d119      	bne.n	8008eb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6898      	ldr	r0, [r3, #8]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e84:	461a      	mov	r2, r3
 8008e86:	68b9      	ldr	r1, [r7, #8]
 8008e88:	f001 ff24 	bl	800acd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	689a      	ldr	r2, [r3, #8]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e94:	441a      	add	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	689a      	ldr	r2, [r3, #8]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d32b      	bcc.n	8008efe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	609a      	str	r2, [r3, #8]
 8008eae:	e026      	b.n	8008efe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	68d8      	ldr	r0, [r3, #12]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb8:	461a      	mov	r2, r3
 8008eba:	68b9      	ldr	r1, [r7, #8]
 8008ebc:	f001 ff0a 	bl	800acd4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	68da      	ldr	r2, [r3, #12]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec8:	425b      	negs	r3, r3
 8008eca:	441a      	add	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	68da      	ldr	r2, [r3, #12]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d207      	bcs.n	8008eec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee4:	425b      	negs	r3, r3
 8008ee6:	441a      	add	r2, r3
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d105      	bne.n	8008efe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d002      	beq.n	8008efe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	3b01      	subs	r3, #1
 8008efc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	1c5a      	adds	r2, r3, #1
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008f06:	697b      	ldr	r3, [r7, #20]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3718      	adds	r7, #24
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d018      	beq.n	8008f54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68da      	ldr	r2, [r3, #12]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	441a      	add	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	68da      	ldr	r2, [r3, #12]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d303      	bcc.n	8008f44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68d9      	ldr	r1, [r3, #12]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	6838      	ldr	r0, [r7, #0]
 8008f50:	f001 fec0 	bl	800acd4 <memcpy>
	}
}
 8008f54:	bf00      	nop
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f64:	f001 f86a 	bl	800a03c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f70:	e011      	b.n	8008f96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d012      	beq.n	8008fa0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	3324      	adds	r3, #36	; 0x24
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f000 fc9a 	bl	80098b8 <xTaskRemoveFromEventList>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f8a:	f000 fd6f 	bl	8009a6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
 8008f90:	3b01      	subs	r3, #1
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	dce9      	bgt.n	8008f72 <prvUnlockQueue+0x16>
 8008f9e:	e000      	b.n	8008fa2 <prvUnlockQueue+0x46>
					break;
 8008fa0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	22ff      	movs	r2, #255	; 0xff
 8008fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008faa:	f001 f877 	bl	800a09c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008fae:	f001 f845 	bl	800a03c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fba:	e011      	b.n	8008fe0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d012      	beq.n	8008fea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3310      	adds	r3, #16
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 fc75 	bl	80098b8 <xTaskRemoveFromEventList>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d001      	beq.n	8008fd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008fd4:	f000 fd4a 	bl	8009a6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	dce9      	bgt.n	8008fbc <prvUnlockQueue+0x60>
 8008fe8:	e000      	b.n	8008fec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008fea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	22ff      	movs	r2, #255	; 0xff
 8008ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008ff4:	f001 f852 	bl	800a09c <vPortExitCritical>
}
 8008ff8:	bf00      	nop
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009008:	f001 f818 	bl	800a03c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009010:	2b00      	cmp	r3, #0
 8009012:	d102      	bne.n	800901a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009014:	2301      	movs	r3, #1
 8009016:	60fb      	str	r3, [r7, #12]
 8009018:	e001      	b.n	800901e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800901a:	2300      	movs	r3, #0
 800901c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800901e:	f001 f83d 	bl	800a09c <vPortExitCritical>

	return xReturn;
 8009022:	68fb      	ldr	r3, [r7, #12]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009034:	f001 f802 	bl	800a03c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009040:	429a      	cmp	r2, r3
 8009042:	d102      	bne.n	800904a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009044:	2301      	movs	r3, #1
 8009046:	60fb      	str	r3, [r7, #12]
 8009048:	e001      	b.n	800904e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800904a:	2300      	movs	r3, #0
 800904c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800904e:	f001 f825 	bl	800a09c <vPortExitCritical>

	return xReturn;
 8009052:	68fb      	ldr	r3, [r7, #12]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800905c:	b580      	push	{r7, lr}
 800905e:	b08e      	sub	sp, #56	; 0x38
 8009060:	af04      	add	r7, sp, #16
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
 8009068:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800906a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10a      	bne.n	8009086 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	623b      	str	r3, [r7, #32]
}
 8009082:	bf00      	nop
 8009084:	e7fe      	b.n	8009084 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10a      	bne.n	80090a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009090:	f383 8811 	msr	BASEPRI, r3
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	61fb      	str	r3, [r7, #28]
}
 800909e:	bf00      	nop
 80090a0:	e7fe      	b.n	80090a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80090a2:	23b4      	movs	r3, #180	; 0xb4
 80090a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	2bb4      	cmp	r3, #180	; 0xb4
 80090aa:	d00a      	beq.n	80090c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	61bb      	str	r3, [r7, #24]
}
 80090be:	bf00      	nop
 80090c0:	e7fe      	b.n	80090c0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80090c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d01e      	beq.n	8009106 <xTaskCreateStatic+0xaa>
 80090c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d01b      	beq.n	8009106 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80090d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090d6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	2202      	movs	r2, #2
 80090dc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80090e0:	2300      	movs	r3, #0
 80090e2:	9303      	str	r3, [sp, #12]
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	9302      	str	r3, [sp, #8]
 80090e8:	f107 0314 	add.w	r3, r7, #20
 80090ec:	9301      	str	r3, [sp, #4]
 80090ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	68b9      	ldr	r1, [r7, #8]
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f000 f851 	bl	80091a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009100:	f000 f8e4 	bl	80092cc <prvAddNewTaskToReadyList>
 8009104:	e001      	b.n	800910a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8009106:	2300      	movs	r3, #0
 8009108:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800910a:	697b      	ldr	r3, [r7, #20]
	}
 800910c:	4618      	mov	r0, r3
 800910e:	3728      	adds	r7, #40	; 0x28
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08c      	sub	sp, #48	; 0x30
 8009118:	af04      	add	r7, sp, #16
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	603b      	str	r3, [r7, #0]
 8009120:	4613      	mov	r3, r2
 8009122:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009124:	88fb      	ldrh	r3, [r7, #6]
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4618      	mov	r0, r3
 800912a:	f001 f887 	bl	800a23c <pvPortMalloc>
 800912e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00e      	beq.n	8009154 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009136:	20b4      	movs	r0, #180	; 0xb4
 8009138:	f001 f880 	bl	800a23c <pvPortMalloc>
 800913c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d003      	beq.n	800914c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	697a      	ldr	r2, [r7, #20]
 8009148:	631a      	str	r2, [r3, #48]	; 0x30
 800914a:	e005      	b.n	8009158 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800914c:	6978      	ldr	r0, [r7, #20]
 800914e:	f001 f939 	bl	800a3c4 <vPortFree>
 8009152:	e001      	b.n	8009158 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009154:	2300      	movs	r3, #0
 8009156:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d017      	beq.n	800918e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009166:	88fa      	ldrh	r2, [r7, #6]
 8009168:	2300      	movs	r3, #0
 800916a:	9303      	str	r3, [sp, #12]
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	9302      	str	r3, [sp, #8]
 8009170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009172:	9301      	str	r3, [sp, #4]
 8009174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	68b9      	ldr	r1, [r7, #8]
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f000 f80f 	bl	80091a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009182:	69f8      	ldr	r0, [r7, #28]
 8009184:	f000 f8a2 	bl	80092cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009188:	2301      	movs	r3, #1
 800918a:	61bb      	str	r3, [r7, #24]
 800918c:	e002      	b.n	8009194 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800918e:	f04f 33ff 	mov.w	r3, #4294967295
 8009192:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009194:	69bb      	ldr	r3, [r7, #24]
	}
 8009196:	4618      	mov	r0, r3
 8009198:	3720      	adds	r7, #32
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
	...

080091a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b088      	sub	sp, #32
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
 80091ac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80091ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80091b8:	3b01      	subs	r3, #1
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	f023 0307 	bic.w	r3, r3, #7
 80091c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	f003 0307 	and.w	r3, r3, #7
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00a      	beq.n	80091e8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80091d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d6:	f383 8811 	msr	BASEPRI, r3
 80091da:	f3bf 8f6f 	isb	sy
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	617b      	str	r3, [r7, #20]
}
 80091e4:	bf00      	nop
 80091e6:	e7fe      	b.n	80091e6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091e8:	2300      	movs	r3, #0
 80091ea:	61fb      	str	r3, [r7, #28]
 80091ec:	e012      	b.n	8009214 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	4413      	add	r3, r2
 80091f4:	7819      	ldrb	r1, [r3, #0]
 80091f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	4413      	add	r3, r2
 80091fc:	3334      	adds	r3, #52	; 0x34
 80091fe:	460a      	mov	r2, r1
 8009200:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	4413      	add	r3, r2
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d006      	beq.n	800921c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	3301      	adds	r3, #1
 8009212:	61fb      	str	r3, [r7, #28]
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	2b0f      	cmp	r3, #15
 8009218:	d9e9      	bls.n	80091ee <prvInitialiseNewTask+0x4e>
 800921a:	e000      	b.n	800921e <prvInitialiseNewTask+0x7e>
		{
			break;
 800921c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800921e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009220:	2200      	movs	r2, #0
 8009222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009228:	2b06      	cmp	r3, #6
 800922a:	d901      	bls.n	8009230 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800922c:	2306      	movs	r3, #6
 800922e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009234:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800923a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800923c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923e:	2200      	movs	r2, #0
 8009240:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009244:	3304      	adds	r3, #4
 8009246:	4618      	mov	r0, r3
 8009248:	f7ff f935 	bl	80084b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800924c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924e:	3318      	adds	r3, #24
 8009250:	4618      	mov	r0, r3
 8009252:	f7ff f930 	bl	80084b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800925a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800925c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925e:	f1c3 0207 	rsb	r2, r3, #7
 8009262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009264:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800926a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800926c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926e:	2200      	movs	r2, #0
 8009270:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009276:	2200      	movs	r2, #0
 8009278:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800927c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927e:	334c      	adds	r3, #76	; 0x4c
 8009280:	2260      	movs	r2, #96	; 0x60
 8009282:	2100      	movs	r1, #0
 8009284:	4618      	mov	r0, r3
 8009286:	f001 fd33 	bl	800acf0 <memset>
 800928a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928c:	4a0c      	ldr	r2, [pc, #48]	; (80092c0 <prvInitialiseNewTask+0x120>)
 800928e:	651a      	str	r2, [r3, #80]	; 0x50
 8009290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009292:	4a0c      	ldr	r2, [pc, #48]	; (80092c4 <prvInitialiseNewTask+0x124>)
 8009294:	655a      	str	r2, [r3, #84]	; 0x54
 8009296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009298:	4a0b      	ldr	r2, [pc, #44]	; (80092c8 <prvInitialiseNewTask+0x128>)
 800929a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	68f9      	ldr	r1, [r7, #12]
 80092a0:	69b8      	ldr	r0, [r7, #24]
 80092a2:	f000 fdd7 	bl	8009e54 <pxPortInitialiseStack>
 80092a6:	4602      	mov	r2, r0
 80092a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092aa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80092ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d002      	beq.n	80092b8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80092b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092b8:	bf00      	nop
 80092ba:	3720      	adds	r7, #32
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	0800b888 	.word	0x0800b888
 80092c4:	0800b8a8 	.word	0x0800b8a8
 80092c8:	0800b868 	.word	0x0800b868

080092cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80092d4:	f000 feb2 	bl	800a03c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80092d8:	4b2a      	ldr	r3, [pc, #168]	; (8009384 <prvAddNewTaskToReadyList+0xb8>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3301      	adds	r3, #1
 80092de:	4a29      	ldr	r2, [pc, #164]	; (8009384 <prvAddNewTaskToReadyList+0xb8>)
 80092e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80092e2:	4b29      	ldr	r3, [pc, #164]	; (8009388 <prvAddNewTaskToReadyList+0xbc>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d109      	bne.n	80092fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80092ea:	4a27      	ldr	r2, [pc, #156]	; (8009388 <prvAddNewTaskToReadyList+0xbc>)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80092f0:	4b24      	ldr	r3, [pc, #144]	; (8009384 <prvAddNewTaskToReadyList+0xb8>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d110      	bne.n	800931a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80092f8:	f000 fbdc 	bl	8009ab4 <prvInitialiseTaskLists>
 80092fc:	e00d      	b.n	800931a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80092fe:	4b23      	ldr	r3, [pc, #140]	; (800938c <prvAddNewTaskToReadyList+0xc0>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d109      	bne.n	800931a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009306:	4b20      	ldr	r3, [pc, #128]	; (8009388 <prvAddNewTaskToReadyList+0xbc>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009310:	429a      	cmp	r2, r3
 8009312:	d802      	bhi.n	800931a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009314:	4a1c      	ldr	r2, [pc, #112]	; (8009388 <prvAddNewTaskToReadyList+0xbc>)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800931a:	4b1d      	ldr	r3, [pc, #116]	; (8009390 <prvAddNewTaskToReadyList+0xc4>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3301      	adds	r3, #1
 8009320:	4a1b      	ldr	r2, [pc, #108]	; (8009390 <prvAddNewTaskToReadyList+0xc4>)
 8009322:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009328:	2201      	movs	r2, #1
 800932a:	409a      	lsls	r2, r3
 800932c:	4b19      	ldr	r3, [pc, #100]	; (8009394 <prvAddNewTaskToReadyList+0xc8>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4313      	orrs	r3, r2
 8009332:	4a18      	ldr	r2, [pc, #96]	; (8009394 <prvAddNewTaskToReadyList+0xc8>)
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933a:	4613      	mov	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4413      	add	r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	4a15      	ldr	r2, [pc, #84]	; (8009398 <prvAddNewTaskToReadyList+0xcc>)
 8009344:	441a      	add	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	3304      	adds	r3, #4
 800934a:	4619      	mov	r1, r3
 800934c:	4610      	mov	r0, r2
 800934e:	f7ff f8be 	bl	80084ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009352:	f000 fea3 	bl	800a09c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009356:	4b0d      	ldr	r3, [pc, #52]	; (800938c <prvAddNewTaskToReadyList+0xc0>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00e      	beq.n	800937c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800935e:	4b0a      	ldr	r3, [pc, #40]	; (8009388 <prvAddNewTaskToReadyList+0xbc>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009368:	429a      	cmp	r2, r3
 800936a:	d207      	bcs.n	800937c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800936c:	4b0b      	ldr	r3, [pc, #44]	; (800939c <prvAddNewTaskToReadyList+0xd0>)
 800936e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800937c:	bf00      	nop
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	20000618 	.word	0x20000618
 8009388:	20000518 	.word	0x20000518
 800938c:	20000624 	.word	0x20000624
 8009390:	20000634 	.word	0x20000634
 8009394:	20000620 	.word	0x20000620
 8009398:	2000051c 	.word	0x2000051c
 800939c:	e000ed04 	.word	0xe000ed04

080093a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80093a8:	2300      	movs	r3, #0
 80093aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d017      	beq.n	80093e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80093b2:	4b13      	ldr	r3, [pc, #76]	; (8009400 <vTaskDelay+0x60>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <vTaskDelay+0x30>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	60bb      	str	r3, [r7, #8]
}
 80093cc:	bf00      	nop
 80093ce:	e7fe      	b.n	80093ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80093d0:	f000 f884 	bl	80094dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80093d4:	2100      	movs	r1, #0
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fcd6 	bl	8009d88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80093dc:	f000 f88c 	bl	80094f8 <xTaskResumeAll>
 80093e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d107      	bne.n	80093f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80093e8:	4b06      	ldr	r3, [pc, #24]	; (8009404 <vTaskDelay+0x64>)
 80093ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ee:	601a      	str	r2, [r3, #0]
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093f8:	bf00      	nop
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	20000640 	.word	0x20000640
 8009404:	e000ed04 	.word	0xe000ed04

08009408 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b08a      	sub	sp, #40	; 0x28
 800940c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800940e:	2300      	movs	r3, #0
 8009410:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009412:	2300      	movs	r3, #0
 8009414:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009416:	463a      	mov	r2, r7
 8009418:	1d39      	adds	r1, r7, #4
 800941a:	f107 0308 	add.w	r3, r7, #8
 800941e:	4618      	mov	r0, r3
 8009420:	f7f7 f892 	bl	8000548 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009424:	6839      	ldr	r1, [r7, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	9202      	str	r2, [sp, #8]
 800942c:	9301      	str	r3, [sp, #4]
 800942e:	2300      	movs	r3, #0
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	2300      	movs	r3, #0
 8009434:	460a      	mov	r2, r1
 8009436:	4921      	ldr	r1, [pc, #132]	; (80094bc <vTaskStartScheduler+0xb4>)
 8009438:	4821      	ldr	r0, [pc, #132]	; (80094c0 <vTaskStartScheduler+0xb8>)
 800943a:	f7ff fe0f 	bl	800905c <xTaskCreateStatic>
 800943e:	4603      	mov	r3, r0
 8009440:	4a20      	ldr	r2, [pc, #128]	; (80094c4 <vTaskStartScheduler+0xbc>)
 8009442:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009444:	4b1f      	ldr	r3, [pc, #124]	; (80094c4 <vTaskStartScheduler+0xbc>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800944c:	2301      	movs	r3, #1
 800944e:	617b      	str	r3, [r7, #20]
 8009450:	e001      	b.n	8009456 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009452:	2300      	movs	r3, #0
 8009454:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d11b      	bne.n	8009494 <vTaskStartScheduler+0x8c>
	__asm volatile
 800945c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009460:	f383 8811 	msr	BASEPRI, r3
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	613b      	str	r3, [r7, #16]
}
 800946e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009470:	4b15      	ldr	r3, [pc, #84]	; (80094c8 <vTaskStartScheduler+0xc0>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	334c      	adds	r3, #76	; 0x4c
 8009476:	4a15      	ldr	r2, [pc, #84]	; (80094cc <vTaskStartScheduler+0xc4>)
 8009478:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800947a:	4b15      	ldr	r3, [pc, #84]	; (80094d0 <vTaskStartScheduler+0xc8>)
 800947c:	f04f 32ff 	mov.w	r2, #4294967295
 8009480:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009482:	4b14      	ldr	r3, [pc, #80]	; (80094d4 <vTaskStartScheduler+0xcc>)
 8009484:	2201      	movs	r2, #1
 8009486:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009488:	4b13      	ldr	r3, [pc, #76]	; (80094d8 <vTaskStartScheduler+0xd0>)
 800948a:	2200      	movs	r2, #0
 800948c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800948e:	f000 fd63 	bl	8009f58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009492:	e00e      	b.n	80094b2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800949a:	d10a      	bne.n	80094b2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800949c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a0:	f383 8811 	msr	BASEPRI, r3
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	60fb      	str	r3, [r7, #12]
}
 80094ae:	bf00      	nop
 80094b0:	e7fe      	b.n	80094b0 <vTaskStartScheduler+0xa8>
}
 80094b2:	bf00      	nop
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	0800b7c8 	.word	0x0800b7c8
 80094c0:	08009a85 	.word	0x08009a85
 80094c4:	2000063c 	.word	0x2000063c
 80094c8:	20000518 	.word	0x20000518
 80094cc:	20000030 	.word	0x20000030
 80094d0:	20000638 	.word	0x20000638
 80094d4:	20000624 	.word	0x20000624
 80094d8:	2000061c 	.word	0x2000061c

080094dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80094dc:	b480      	push	{r7}
 80094de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80094e0:	4b04      	ldr	r3, [pc, #16]	; (80094f4 <vTaskSuspendAll+0x18>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	3301      	adds	r3, #1
 80094e6:	4a03      	ldr	r2, [pc, #12]	; (80094f4 <vTaskSuspendAll+0x18>)
 80094e8:	6013      	str	r3, [r2, #0]
}
 80094ea:	bf00      	nop
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bc80      	pop	{r7}
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	20000640 	.word	0x20000640

080094f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80094fe:	2300      	movs	r3, #0
 8009500:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009502:	2300      	movs	r3, #0
 8009504:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009506:	4b41      	ldr	r3, [pc, #260]	; (800960c <xTaskResumeAll+0x114>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10a      	bne.n	8009524 <xTaskResumeAll+0x2c>
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	603b      	str	r3, [r7, #0]
}
 8009520:	bf00      	nop
 8009522:	e7fe      	b.n	8009522 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009524:	f000 fd8a 	bl	800a03c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009528:	4b38      	ldr	r3, [pc, #224]	; (800960c <xTaskResumeAll+0x114>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3b01      	subs	r3, #1
 800952e:	4a37      	ldr	r2, [pc, #220]	; (800960c <xTaskResumeAll+0x114>)
 8009530:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009532:	4b36      	ldr	r3, [pc, #216]	; (800960c <xTaskResumeAll+0x114>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d161      	bne.n	80095fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800953a:	4b35      	ldr	r3, [pc, #212]	; (8009610 <xTaskResumeAll+0x118>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d05d      	beq.n	80095fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009542:	e02e      	b.n	80095a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009544:	4b33      	ldr	r3, [pc, #204]	; (8009614 <xTaskResumeAll+0x11c>)
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	3318      	adds	r3, #24
 8009550:	4618      	mov	r0, r3
 8009552:	f7ff f817 	bl	8008584 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	3304      	adds	r3, #4
 800955a:	4618      	mov	r0, r3
 800955c:	f7ff f812 	bl	8008584 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009564:	2201      	movs	r2, #1
 8009566:	409a      	lsls	r2, r3
 8009568:	4b2b      	ldr	r3, [pc, #172]	; (8009618 <xTaskResumeAll+0x120>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4313      	orrs	r3, r2
 800956e:	4a2a      	ldr	r2, [pc, #168]	; (8009618 <xTaskResumeAll+0x120>)
 8009570:	6013      	str	r3, [r2, #0]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009576:	4613      	mov	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	4413      	add	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4a27      	ldr	r2, [pc, #156]	; (800961c <xTaskResumeAll+0x124>)
 8009580:	441a      	add	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3304      	adds	r3, #4
 8009586:	4619      	mov	r1, r3
 8009588:	4610      	mov	r0, r2
 800958a:	f7fe ffa0 	bl	80084ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009592:	4b23      	ldr	r3, [pc, #140]	; (8009620 <xTaskResumeAll+0x128>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009598:	429a      	cmp	r2, r3
 800959a:	d302      	bcc.n	80095a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800959c:	4b21      	ldr	r3, [pc, #132]	; (8009624 <xTaskResumeAll+0x12c>)
 800959e:	2201      	movs	r2, #1
 80095a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095a2:	4b1c      	ldr	r3, [pc, #112]	; (8009614 <xTaskResumeAll+0x11c>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1cc      	bne.n	8009544 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80095b0:	f000 fb22 	bl	8009bf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80095b4:	4b1c      	ldr	r3, [pc, #112]	; (8009628 <xTaskResumeAll+0x130>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d010      	beq.n	80095e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80095c0:	f000 f836 	bl	8009630 <xTaskIncrementTick>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d002      	beq.n	80095d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80095ca:	4b16      	ldr	r3, [pc, #88]	; (8009624 <xTaskResumeAll+0x12c>)
 80095cc:	2201      	movs	r2, #1
 80095ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	3b01      	subs	r3, #1
 80095d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1f1      	bne.n	80095c0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80095dc:	4b12      	ldr	r3, [pc, #72]	; (8009628 <xTaskResumeAll+0x130>)
 80095de:	2200      	movs	r2, #0
 80095e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80095e2:	4b10      	ldr	r3, [pc, #64]	; (8009624 <xTaskResumeAll+0x12c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d009      	beq.n	80095fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80095ea:	2301      	movs	r3, #1
 80095ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80095ee:	4b0f      	ldr	r3, [pc, #60]	; (800962c <xTaskResumeAll+0x134>)
 80095f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095f4:	601a      	str	r2, [r3, #0]
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095fe:	f000 fd4d 	bl	800a09c <vPortExitCritical>

	return xAlreadyYielded;
 8009602:	68bb      	ldr	r3, [r7, #8]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	20000640 	.word	0x20000640
 8009610:	20000618 	.word	0x20000618
 8009614:	200005d8 	.word	0x200005d8
 8009618:	20000620 	.word	0x20000620
 800961c:	2000051c 	.word	0x2000051c
 8009620:	20000518 	.word	0x20000518
 8009624:	2000062c 	.word	0x2000062c
 8009628:	20000628 	.word	0x20000628
 800962c:	e000ed04 	.word	0xe000ed04

08009630 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009636:	2300      	movs	r3, #0
 8009638:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800963a:	4b51      	ldr	r3, [pc, #324]	; (8009780 <xTaskIncrementTick+0x150>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	f040 808d 	bne.w	800975e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009644:	4b4f      	ldr	r3, [pc, #316]	; (8009784 <xTaskIncrementTick+0x154>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	3301      	adds	r3, #1
 800964a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800964c:	4a4d      	ldr	r2, [pc, #308]	; (8009784 <xTaskIncrementTick+0x154>)
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d120      	bne.n	800969a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009658:	4b4b      	ldr	r3, [pc, #300]	; (8009788 <xTaskIncrementTick+0x158>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00a      	beq.n	8009678 <xTaskIncrementTick+0x48>
	__asm volatile
 8009662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	603b      	str	r3, [r7, #0]
}
 8009674:	bf00      	nop
 8009676:	e7fe      	b.n	8009676 <xTaskIncrementTick+0x46>
 8009678:	4b43      	ldr	r3, [pc, #268]	; (8009788 <xTaskIncrementTick+0x158>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	60fb      	str	r3, [r7, #12]
 800967e:	4b43      	ldr	r3, [pc, #268]	; (800978c <xTaskIncrementTick+0x15c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a41      	ldr	r2, [pc, #260]	; (8009788 <xTaskIncrementTick+0x158>)
 8009684:	6013      	str	r3, [r2, #0]
 8009686:	4a41      	ldr	r2, [pc, #260]	; (800978c <xTaskIncrementTick+0x15c>)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6013      	str	r3, [r2, #0]
 800968c:	4b40      	ldr	r3, [pc, #256]	; (8009790 <xTaskIncrementTick+0x160>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3301      	adds	r3, #1
 8009692:	4a3f      	ldr	r2, [pc, #252]	; (8009790 <xTaskIncrementTick+0x160>)
 8009694:	6013      	str	r3, [r2, #0]
 8009696:	f000 faaf 	bl	8009bf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800969a:	4b3e      	ldr	r3, [pc, #248]	; (8009794 <xTaskIncrementTick+0x164>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d34d      	bcc.n	8009740 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096a4:	4b38      	ldr	r3, [pc, #224]	; (8009788 <xTaskIncrementTick+0x158>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d101      	bne.n	80096b2 <xTaskIncrementTick+0x82>
 80096ae:	2301      	movs	r3, #1
 80096b0:	e000      	b.n	80096b4 <xTaskIncrementTick+0x84>
 80096b2:	2300      	movs	r3, #0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d004      	beq.n	80096c2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096b8:	4b36      	ldr	r3, [pc, #216]	; (8009794 <xTaskIncrementTick+0x164>)
 80096ba:	f04f 32ff 	mov.w	r2, #4294967295
 80096be:	601a      	str	r2, [r3, #0]
					break;
 80096c0:	e03e      	b.n	8009740 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80096c2:	4b31      	ldr	r3, [pc, #196]	; (8009788 <xTaskIncrementTick+0x158>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096d2:	693a      	ldr	r2, [r7, #16]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d203      	bcs.n	80096e2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096da:	4a2e      	ldr	r2, [pc, #184]	; (8009794 <xTaskIncrementTick+0x164>)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6013      	str	r3, [r2, #0]
						break;
 80096e0:	e02e      	b.n	8009740 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	3304      	adds	r3, #4
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fe ff4c 	bl	8008584 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d004      	beq.n	80096fe <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	3318      	adds	r3, #24
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fe ff43 	bl	8008584 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009702:	2201      	movs	r2, #1
 8009704:	409a      	lsls	r2, r3
 8009706:	4b24      	ldr	r3, [pc, #144]	; (8009798 <xTaskIncrementTick+0x168>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4313      	orrs	r3, r2
 800970c:	4a22      	ldr	r2, [pc, #136]	; (8009798 <xTaskIncrementTick+0x168>)
 800970e:	6013      	str	r3, [r2, #0]
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009714:	4613      	mov	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4413      	add	r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4a1f      	ldr	r2, [pc, #124]	; (800979c <xTaskIncrementTick+0x16c>)
 800971e:	441a      	add	r2, r3
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	3304      	adds	r3, #4
 8009724:	4619      	mov	r1, r3
 8009726:	4610      	mov	r0, r2
 8009728:	f7fe fed1 	bl	80084ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009730:	4b1b      	ldr	r3, [pc, #108]	; (80097a0 <xTaskIncrementTick+0x170>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009736:	429a      	cmp	r2, r3
 8009738:	d3b4      	bcc.n	80096a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800973a:	2301      	movs	r3, #1
 800973c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800973e:	e7b1      	b.n	80096a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009740:	4b17      	ldr	r3, [pc, #92]	; (80097a0 <xTaskIncrementTick+0x170>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009746:	4915      	ldr	r1, [pc, #84]	; (800979c <xTaskIncrementTick+0x16c>)
 8009748:	4613      	mov	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4413      	add	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	440b      	add	r3, r1
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d907      	bls.n	8009768 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009758:	2301      	movs	r3, #1
 800975a:	617b      	str	r3, [r7, #20]
 800975c:	e004      	b.n	8009768 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800975e:	4b11      	ldr	r3, [pc, #68]	; (80097a4 <xTaskIncrementTick+0x174>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3301      	adds	r3, #1
 8009764:	4a0f      	ldr	r2, [pc, #60]	; (80097a4 <xTaskIncrementTick+0x174>)
 8009766:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009768:	4b0f      	ldr	r3, [pc, #60]	; (80097a8 <xTaskIncrementTick+0x178>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009770:	2301      	movs	r3, #1
 8009772:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009774:	697b      	ldr	r3, [r7, #20]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3718      	adds	r7, #24
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	20000640 	.word	0x20000640
 8009784:	2000061c 	.word	0x2000061c
 8009788:	200005d0 	.word	0x200005d0
 800978c:	200005d4 	.word	0x200005d4
 8009790:	20000630 	.word	0x20000630
 8009794:	20000638 	.word	0x20000638
 8009798:	20000620 	.word	0x20000620
 800979c:	2000051c 	.word	0x2000051c
 80097a0:	20000518 	.word	0x20000518
 80097a4:	20000628 	.word	0x20000628
 80097a8:	2000062c 	.word	0x2000062c

080097ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80097ac:	b480      	push	{r7}
 80097ae:	b087      	sub	sp, #28
 80097b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80097b2:	4b29      	ldr	r3, [pc, #164]	; (8009858 <vTaskSwitchContext+0xac>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d003      	beq.n	80097c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80097ba:	4b28      	ldr	r3, [pc, #160]	; (800985c <vTaskSwitchContext+0xb0>)
 80097bc:	2201      	movs	r2, #1
 80097be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80097c0:	e044      	b.n	800984c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80097c2:	4b26      	ldr	r3, [pc, #152]	; (800985c <vTaskSwitchContext+0xb0>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80097c8:	4b25      	ldr	r3, [pc, #148]	; (8009860 <vTaskSwitchContext+0xb4>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	fab3 f383 	clz	r3, r3
 80097d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80097d6:	7afb      	ldrb	r3, [r7, #11]
 80097d8:	f1c3 031f 	rsb	r3, r3, #31
 80097dc:	617b      	str	r3, [r7, #20]
 80097de:	4921      	ldr	r1, [pc, #132]	; (8009864 <vTaskSwitchContext+0xb8>)
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	4613      	mov	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4413      	add	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	440b      	add	r3, r1
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10a      	bne.n	8009808 <vTaskSwitchContext+0x5c>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	607b      	str	r3, [r7, #4]
}
 8009804:	bf00      	nop
 8009806:	e7fe      	b.n	8009806 <vTaskSwitchContext+0x5a>
 8009808:	697a      	ldr	r2, [r7, #20]
 800980a:	4613      	mov	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4413      	add	r3, r2
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	4a14      	ldr	r2, [pc, #80]	; (8009864 <vTaskSwitchContext+0xb8>)
 8009814:	4413      	add	r3, r2
 8009816:	613b      	str	r3, [r7, #16]
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	685a      	ldr	r2, [r3, #4]
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	605a      	str	r2, [r3, #4]
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	3308      	adds	r3, #8
 800982a:	429a      	cmp	r2, r3
 800982c:	d104      	bne.n	8009838 <vTaskSwitchContext+0x8c>
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	685a      	ldr	r2, [r3, #4]
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	605a      	str	r2, [r3, #4]
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	4a0a      	ldr	r2, [pc, #40]	; (8009868 <vTaskSwitchContext+0xbc>)
 8009840:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009842:	4b09      	ldr	r3, [pc, #36]	; (8009868 <vTaskSwitchContext+0xbc>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	334c      	adds	r3, #76	; 0x4c
 8009848:	4a08      	ldr	r2, [pc, #32]	; (800986c <vTaskSwitchContext+0xc0>)
 800984a:	6013      	str	r3, [r2, #0]
}
 800984c:	bf00      	nop
 800984e:	371c      	adds	r7, #28
 8009850:	46bd      	mov	sp, r7
 8009852:	bc80      	pop	{r7}
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	20000640 	.word	0x20000640
 800985c:	2000062c 	.word	0x2000062c
 8009860:	20000620 	.word	0x20000620
 8009864:	2000051c 	.word	0x2000051c
 8009868:	20000518 	.word	0x20000518
 800986c:	20000030 	.word	0x20000030

08009870 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10a      	bne.n	8009896 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	60fb      	str	r3, [r7, #12]
}
 8009892:	bf00      	nop
 8009894:	e7fe      	b.n	8009894 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009896:	4b07      	ldr	r3, [pc, #28]	; (80098b4 <vTaskPlaceOnEventList+0x44>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3318      	adds	r3, #24
 800989c:	4619      	mov	r1, r3
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f7fe fe38 	bl	8008514 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80098a4:	2101      	movs	r1, #1
 80098a6:	6838      	ldr	r0, [r7, #0]
 80098a8:	f000 fa6e 	bl	8009d88 <prvAddCurrentTaskToDelayedList>
}
 80098ac:	bf00      	nop
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	20000518 	.word	0x20000518

080098b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10a      	bne.n	80098e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	60fb      	str	r3, [r7, #12]
}
 80098e0:	bf00      	nop
 80098e2:	e7fe      	b.n	80098e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	3318      	adds	r3, #24
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fe fe4b 	bl	8008584 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098ee:	4b1d      	ldr	r3, [pc, #116]	; (8009964 <xTaskRemoveFromEventList+0xac>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d11c      	bne.n	8009930 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	3304      	adds	r3, #4
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe fe42 	bl	8008584 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009904:	2201      	movs	r2, #1
 8009906:	409a      	lsls	r2, r3
 8009908:	4b17      	ldr	r3, [pc, #92]	; (8009968 <xTaskRemoveFromEventList+0xb0>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4313      	orrs	r3, r2
 800990e:	4a16      	ldr	r2, [pc, #88]	; (8009968 <xTaskRemoveFromEventList+0xb0>)
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009916:	4613      	mov	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	4a13      	ldr	r2, [pc, #76]	; (800996c <xTaskRemoveFromEventList+0xb4>)
 8009920:	441a      	add	r2, r3
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	3304      	adds	r3, #4
 8009926:	4619      	mov	r1, r3
 8009928:	4610      	mov	r0, r2
 800992a:	f7fe fdd0 	bl	80084ce <vListInsertEnd>
 800992e:	e005      	b.n	800993c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	3318      	adds	r3, #24
 8009934:	4619      	mov	r1, r3
 8009936:	480e      	ldr	r0, [pc, #56]	; (8009970 <xTaskRemoveFromEventList+0xb8>)
 8009938:	f7fe fdc9 	bl	80084ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009940:	4b0c      	ldr	r3, [pc, #48]	; (8009974 <xTaskRemoveFromEventList+0xbc>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009946:	429a      	cmp	r2, r3
 8009948:	d905      	bls.n	8009956 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800994a:	2301      	movs	r3, #1
 800994c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800994e:	4b0a      	ldr	r3, [pc, #40]	; (8009978 <xTaskRemoveFromEventList+0xc0>)
 8009950:	2201      	movs	r2, #1
 8009952:	601a      	str	r2, [r3, #0]
 8009954:	e001      	b.n	800995a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009956:	2300      	movs	r3, #0
 8009958:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800995a:	697b      	ldr	r3, [r7, #20]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	20000640 	.word	0x20000640
 8009968:	20000620 	.word	0x20000620
 800996c:	2000051c 	.word	0x2000051c
 8009970:	200005d8 	.word	0x200005d8
 8009974:	20000518 	.word	0x20000518
 8009978:	2000062c 	.word	0x2000062c

0800997c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009984:	4b06      	ldr	r3, [pc, #24]	; (80099a0 <vTaskInternalSetTimeOutState+0x24>)
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800998c:	4b05      	ldr	r3, [pc, #20]	; (80099a4 <vTaskInternalSetTimeOutState+0x28>)
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	605a      	str	r2, [r3, #4]
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	bc80      	pop	{r7}
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	20000630 	.word	0x20000630
 80099a4:	2000061c 	.word	0x2000061c

080099a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b088      	sub	sp, #32
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10a      	bne.n	80099ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80099b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099bc:	f383 8811 	msr	BASEPRI, r3
 80099c0:	f3bf 8f6f 	isb	sy
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	613b      	str	r3, [r7, #16]
}
 80099ca:	bf00      	nop
 80099cc:	e7fe      	b.n	80099cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10a      	bne.n	80099ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80099d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	60fb      	str	r3, [r7, #12]
}
 80099e6:	bf00      	nop
 80099e8:	e7fe      	b.n	80099e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80099ea:	f000 fb27 	bl	800a03c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80099ee:	4b1d      	ldr	r3, [pc, #116]	; (8009a64 <xTaskCheckForTimeOut+0xbc>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	69ba      	ldr	r2, [r7, #24]
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a06:	d102      	bne.n	8009a0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	61fb      	str	r3, [r7, #28]
 8009a0c:	e023      	b.n	8009a56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	4b15      	ldr	r3, [pc, #84]	; (8009a68 <xTaskCheckForTimeOut+0xc0>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d007      	beq.n	8009a2a <xTaskCheckForTimeOut+0x82>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	69ba      	ldr	r2, [r7, #24]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d302      	bcc.n	8009a2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a24:	2301      	movs	r3, #1
 8009a26:	61fb      	str	r3, [r7, #28]
 8009a28:	e015      	b.n	8009a56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d20b      	bcs.n	8009a4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	1ad2      	subs	r2, r2, r3
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f7ff ff9b 	bl	800997c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a46:	2300      	movs	r3, #0
 8009a48:	61fb      	str	r3, [r7, #28]
 8009a4a:	e004      	b.n	8009a56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a52:	2301      	movs	r3, #1
 8009a54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a56:	f000 fb21 	bl	800a09c <vPortExitCritical>

	return xReturn;
 8009a5a:	69fb      	ldr	r3, [r7, #28]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3720      	adds	r7, #32
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	2000061c 	.word	0x2000061c
 8009a68:	20000630 	.word	0x20000630

08009a6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a70:	4b03      	ldr	r3, [pc, #12]	; (8009a80 <vTaskMissedYield+0x14>)
 8009a72:	2201      	movs	r2, #1
 8009a74:	601a      	str	r2, [r3, #0]
}
 8009a76:	bf00      	nop
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bc80      	pop	{r7}
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	2000062c 	.word	0x2000062c

08009a84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a8c:	f000 f852 	bl	8009b34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a90:	4b06      	ldr	r3, [pc, #24]	; (8009aac <prvIdleTask+0x28>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d9f9      	bls.n	8009a8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a98:	4b05      	ldr	r3, [pc, #20]	; (8009ab0 <prvIdleTask+0x2c>)
 8009a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a9e:	601a      	str	r2, [r3, #0]
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009aa8:	e7f0      	b.n	8009a8c <prvIdleTask+0x8>
 8009aaa:	bf00      	nop
 8009aac:	2000051c 	.word	0x2000051c
 8009ab0:	e000ed04 	.word	0xe000ed04

08009ab4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009aba:	2300      	movs	r3, #0
 8009abc:	607b      	str	r3, [r7, #4]
 8009abe:	e00c      	b.n	8009ada <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4413      	add	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4a12      	ldr	r2, [pc, #72]	; (8009b14 <prvInitialiseTaskLists+0x60>)
 8009acc:	4413      	add	r3, r2
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fe fcd2 	bl	8008478 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	607b      	str	r3, [r7, #4]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2b06      	cmp	r3, #6
 8009ade:	d9ef      	bls.n	8009ac0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ae0:	480d      	ldr	r0, [pc, #52]	; (8009b18 <prvInitialiseTaskLists+0x64>)
 8009ae2:	f7fe fcc9 	bl	8008478 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ae6:	480d      	ldr	r0, [pc, #52]	; (8009b1c <prvInitialiseTaskLists+0x68>)
 8009ae8:	f7fe fcc6 	bl	8008478 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009aec:	480c      	ldr	r0, [pc, #48]	; (8009b20 <prvInitialiseTaskLists+0x6c>)
 8009aee:	f7fe fcc3 	bl	8008478 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009af2:	480c      	ldr	r0, [pc, #48]	; (8009b24 <prvInitialiseTaskLists+0x70>)
 8009af4:	f7fe fcc0 	bl	8008478 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009af8:	480b      	ldr	r0, [pc, #44]	; (8009b28 <prvInitialiseTaskLists+0x74>)
 8009afa:	f7fe fcbd 	bl	8008478 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009afe:	4b0b      	ldr	r3, [pc, #44]	; (8009b2c <prvInitialiseTaskLists+0x78>)
 8009b00:	4a05      	ldr	r2, [pc, #20]	; (8009b18 <prvInitialiseTaskLists+0x64>)
 8009b02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b04:	4b0a      	ldr	r3, [pc, #40]	; (8009b30 <prvInitialiseTaskLists+0x7c>)
 8009b06:	4a05      	ldr	r2, [pc, #20]	; (8009b1c <prvInitialiseTaskLists+0x68>)
 8009b08:	601a      	str	r2, [r3, #0]
}
 8009b0a:	bf00      	nop
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	2000051c 	.word	0x2000051c
 8009b18:	200005a8 	.word	0x200005a8
 8009b1c:	200005bc 	.word	0x200005bc
 8009b20:	200005d8 	.word	0x200005d8
 8009b24:	200005ec 	.word	0x200005ec
 8009b28:	20000604 	.word	0x20000604
 8009b2c:	200005d0 	.word	0x200005d0
 8009b30:	200005d4 	.word	0x200005d4

08009b34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b3a:	e019      	b.n	8009b70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b3c:	f000 fa7e 	bl	800a03c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009b40:	4b10      	ldr	r3, [pc, #64]	; (8009b84 <prvCheckTasksWaitingTermination+0x50>)
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7fe fd19 	bl	8008584 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b52:	4b0d      	ldr	r3, [pc, #52]	; (8009b88 <prvCheckTasksWaitingTermination+0x54>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	3b01      	subs	r3, #1
 8009b58:	4a0b      	ldr	r2, [pc, #44]	; (8009b88 <prvCheckTasksWaitingTermination+0x54>)
 8009b5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b5c:	4b0b      	ldr	r3, [pc, #44]	; (8009b8c <prvCheckTasksWaitingTermination+0x58>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	3b01      	subs	r3, #1
 8009b62:	4a0a      	ldr	r2, [pc, #40]	; (8009b8c <prvCheckTasksWaitingTermination+0x58>)
 8009b64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b66:	f000 fa99 	bl	800a09c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f810 	bl	8009b90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b70:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <prvCheckTasksWaitingTermination+0x58>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1e1      	bne.n	8009b3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b78:	bf00      	nop
 8009b7a:	bf00      	nop
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	200005ec 	.word	0x200005ec
 8009b88:	20000618 	.word	0x20000618
 8009b8c:	20000600 	.word	0x20000600

08009b90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	334c      	adds	r3, #76	; 0x4c
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f001 f999 	bl	800aed4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d108      	bne.n	8009bbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f000 fc07 	bl	800a3c4 <vPortFree>
				vPortFree( pxTCB );
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fc04 	bl	800a3c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009bbc:	e018      	b.n	8009bf0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d103      	bne.n	8009bd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fbfb 	bl	800a3c4 <vPortFree>
	}
 8009bce:	e00f      	b.n	8009bf0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d00a      	beq.n	8009bf0 <prvDeleteTCB+0x60>
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	60fb      	str	r3, [r7, #12]
}
 8009bec:	bf00      	nop
 8009bee:	e7fe      	b.n	8009bee <prvDeleteTCB+0x5e>
	}
 8009bf0:	bf00      	nop
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bfe:	4b0e      	ldr	r3, [pc, #56]	; (8009c38 <prvResetNextTaskUnblockTime+0x40>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d101      	bne.n	8009c0c <prvResetNextTaskUnblockTime+0x14>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e000      	b.n	8009c0e <prvResetNextTaskUnblockTime+0x16>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d004      	beq.n	8009c1c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c12:	4b0a      	ldr	r3, [pc, #40]	; (8009c3c <prvResetNextTaskUnblockTime+0x44>)
 8009c14:	f04f 32ff 	mov.w	r2, #4294967295
 8009c18:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c1a:	e008      	b.n	8009c2e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009c1c:	4b06      	ldr	r3, [pc, #24]	; (8009c38 <prvResetNextTaskUnblockTime+0x40>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	4a04      	ldr	r2, [pc, #16]	; (8009c3c <prvResetNextTaskUnblockTime+0x44>)
 8009c2c:	6013      	str	r3, [r2, #0]
}
 8009c2e:	bf00      	nop
 8009c30:	370c      	adds	r7, #12
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bc80      	pop	{r7}
 8009c36:	4770      	bx	lr
 8009c38:	200005d0 	.word	0x200005d0
 8009c3c:	20000638 	.word	0x20000638

08009c40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c46:	4b0b      	ldr	r3, [pc, #44]	; (8009c74 <xTaskGetSchedulerState+0x34>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d102      	bne.n	8009c54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	607b      	str	r3, [r7, #4]
 8009c52:	e008      	b.n	8009c66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c54:	4b08      	ldr	r3, [pc, #32]	; (8009c78 <xTaskGetSchedulerState+0x38>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d102      	bne.n	8009c62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	607b      	str	r3, [r7, #4]
 8009c60:	e001      	b.n	8009c66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c62:	2300      	movs	r3, #0
 8009c64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c66:	687b      	ldr	r3, [r7, #4]
	}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bc80      	pop	{r7}
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	20000624 	.word	0x20000624
 8009c78:	20000640 	.word	0x20000640

08009c7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d06e      	beq.n	8009d70 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c92:	4b3a      	ldr	r3, [pc, #232]	; (8009d7c <xTaskPriorityDisinherit+0x100>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	693a      	ldr	r2, [r7, #16]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d00a      	beq.n	8009cb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca0:	f383 8811 	msr	BASEPRI, r3
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	60fb      	str	r3, [r7, #12]
}
 8009cae:	bf00      	nop
 8009cb0:	e7fe      	b.n	8009cb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d10a      	bne.n	8009cd0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	60bb      	str	r3, [r7, #8]
}
 8009ccc:	bf00      	nop
 8009cce:	e7fe      	b.n	8009cce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cd4:	1e5a      	subs	r2, r3, #1
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d044      	beq.n	8009d70 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d140      	bne.n	8009d70 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fe fc46 	bl	8008584 <uxListRemove>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d115      	bne.n	8009d2a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d02:	491f      	ldr	r1, [pc, #124]	; (8009d80 <xTaskPriorityDisinherit+0x104>)
 8009d04:	4613      	mov	r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4413      	add	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	440b      	add	r3, r1
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10a      	bne.n	8009d2a <xTaskPriorityDisinherit+0xae>
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d18:	2201      	movs	r2, #1
 8009d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d1e:	43da      	mvns	r2, r3
 8009d20:	4b18      	ldr	r3, [pc, #96]	; (8009d84 <xTaskPriorityDisinherit+0x108>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4013      	ands	r3, r2
 8009d26:	4a17      	ldr	r2, [pc, #92]	; (8009d84 <xTaskPriorityDisinherit+0x108>)
 8009d28:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d36:	f1c3 0207 	rsb	r2, r3, #7
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d42:	2201      	movs	r2, #1
 8009d44:	409a      	lsls	r2, r3
 8009d46:	4b0f      	ldr	r3, [pc, #60]	; (8009d84 <xTaskPriorityDisinherit+0x108>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	4a0d      	ldr	r2, [pc, #52]	; (8009d84 <xTaskPriorityDisinherit+0x108>)
 8009d4e:	6013      	str	r3, [r2, #0]
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d54:	4613      	mov	r3, r2
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4413      	add	r3, r2
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	4a08      	ldr	r2, [pc, #32]	; (8009d80 <xTaskPriorityDisinherit+0x104>)
 8009d5e:	441a      	add	r2, r3
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	3304      	adds	r3, #4
 8009d64:	4619      	mov	r1, r3
 8009d66:	4610      	mov	r0, r2
 8009d68:	f7fe fbb1 	bl	80084ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d70:	697b      	ldr	r3, [r7, #20]
	}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3718      	adds	r7, #24
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20000518 	.word	0x20000518
 8009d80:	2000051c 	.word	0x2000051c
 8009d84:	20000620 	.word	0x20000620

08009d88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d92:	4b29      	ldr	r3, [pc, #164]	; (8009e38 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d98:	4b28      	ldr	r3, [pc, #160]	; (8009e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	3304      	adds	r3, #4
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7fe fbf0 	bl	8008584 <uxListRemove>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10b      	bne.n	8009dc2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009daa:	4b24      	ldr	r3, [pc, #144]	; (8009e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db0:	2201      	movs	r2, #1
 8009db2:	fa02 f303 	lsl.w	r3, r2, r3
 8009db6:	43da      	mvns	r2, r3
 8009db8:	4b21      	ldr	r3, [pc, #132]	; (8009e40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	4a20      	ldr	r2, [pc, #128]	; (8009e40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009dc0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc8:	d10a      	bne.n	8009de0 <prvAddCurrentTaskToDelayedList+0x58>
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d007      	beq.n	8009de0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dd0:	4b1a      	ldr	r3, [pc, #104]	; (8009e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3304      	adds	r3, #4
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	481a      	ldr	r0, [pc, #104]	; (8009e44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009dda:	f7fe fb78 	bl	80084ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009dde:	e026      	b.n	8009e2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4413      	add	r3, r2
 8009de6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009de8:	4b14      	ldr	r3, [pc, #80]	; (8009e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d209      	bcs.n	8009e0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009df8:	4b13      	ldr	r3, [pc, #76]	; (8009e48 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	4b0f      	ldr	r3, [pc, #60]	; (8009e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	3304      	adds	r3, #4
 8009e02:	4619      	mov	r1, r3
 8009e04:	4610      	mov	r0, r2
 8009e06:	f7fe fb85 	bl	8008514 <vListInsert>
}
 8009e0a:	e010      	b.n	8009e2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e0c:	4b0f      	ldr	r3, [pc, #60]	; (8009e4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	4b0a      	ldr	r3, [pc, #40]	; (8009e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3304      	adds	r3, #4
 8009e16:	4619      	mov	r1, r3
 8009e18:	4610      	mov	r0, r2
 8009e1a:	f7fe fb7b 	bl	8008514 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e1e:	4b0c      	ldr	r3, [pc, #48]	; (8009e50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68ba      	ldr	r2, [r7, #8]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d202      	bcs.n	8009e2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009e28:	4a09      	ldr	r2, [pc, #36]	; (8009e50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	6013      	str	r3, [r2, #0]
}
 8009e2e:	bf00      	nop
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	2000061c 	.word	0x2000061c
 8009e3c:	20000518 	.word	0x20000518
 8009e40:	20000620 	.word	0x20000620
 8009e44:	20000604 	.word	0x20000604
 8009e48:	200005d4 	.word	0x200005d4
 8009e4c:	200005d0 	.word	0x200005d0
 8009e50:	20000638 	.word	0x20000638

08009e54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	3b04      	subs	r3, #4
 8009e64:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009e6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	3b04      	subs	r3, #4
 8009e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	f023 0201 	bic.w	r2, r3, #1
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	3b04      	subs	r3, #4
 8009e82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e84:	4a08      	ldr	r2, [pc, #32]	; (8009ea8 <pxPortInitialiseStack+0x54>)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	3b14      	subs	r3, #20
 8009e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	3b20      	subs	r3, #32
 8009e9a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3714      	adds	r7, #20
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bc80      	pop	{r7}
 8009ea6:	4770      	bx	lr
 8009ea8:	08009ead 	.word	0x08009ead

08009eac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009eb6:	4b12      	ldr	r3, [pc, #72]	; (8009f00 <prvTaskExitError+0x54>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ebe:	d00a      	beq.n	8009ed6 <prvTaskExitError+0x2a>
	__asm volatile
 8009ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec4:	f383 8811 	msr	BASEPRI, r3
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	60fb      	str	r3, [r7, #12]
}
 8009ed2:	bf00      	nop
 8009ed4:	e7fe      	b.n	8009ed4 <prvTaskExitError+0x28>
	__asm volatile
 8009ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eda:	f383 8811 	msr	BASEPRI, r3
 8009ede:	f3bf 8f6f 	isb	sy
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	60bb      	str	r3, [r7, #8]
}
 8009ee8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009eea:	bf00      	nop
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d0fc      	beq.n	8009eec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ef2:	bf00      	nop
 8009ef4:	bf00      	nop
 8009ef6:	3714      	adds	r7, #20
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bc80      	pop	{r7}
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	2000002c 	.word	0x2000002c
	...

08009f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f10:	4b07      	ldr	r3, [pc, #28]	; (8009f30 <pxCurrentTCBConst2>)
 8009f12:	6819      	ldr	r1, [r3, #0]
 8009f14:	6808      	ldr	r0, [r1, #0]
 8009f16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009f1a:	f380 8809 	msr	PSP, r0
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f04f 0000 	mov.w	r0, #0
 8009f26:	f380 8811 	msr	BASEPRI, r0
 8009f2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009f2e:	4770      	bx	lr

08009f30 <pxCurrentTCBConst2>:
 8009f30:	20000518 	.word	0x20000518
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f34:	bf00      	nop
 8009f36:	bf00      	nop

08009f38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009f38:	4806      	ldr	r0, [pc, #24]	; (8009f54 <prvPortStartFirstTask+0x1c>)
 8009f3a:	6800      	ldr	r0, [r0, #0]
 8009f3c:	6800      	ldr	r0, [r0, #0]
 8009f3e:	f380 8808 	msr	MSP, r0
 8009f42:	b662      	cpsie	i
 8009f44:	b661      	cpsie	f
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	df00      	svc	0
 8009f50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f52:	bf00      	nop
 8009f54:	e000ed08 	.word	0xe000ed08

08009f58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f5e:	4b32      	ldr	r3, [pc, #200]	; (800a028 <xPortStartScheduler+0xd0>)
 8009f60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	22ff      	movs	r2, #255	; 0xff
 8009f6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f78:	78fb      	ldrb	r3, [r7, #3]
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009f80:	b2da      	uxtb	r2, r3
 8009f82:	4b2a      	ldr	r3, [pc, #168]	; (800a02c <xPortStartScheduler+0xd4>)
 8009f84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f86:	4b2a      	ldr	r3, [pc, #168]	; (800a030 <xPortStartScheduler+0xd8>)
 8009f88:	2207      	movs	r2, #7
 8009f8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f8c:	e009      	b.n	8009fa2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009f8e:	4b28      	ldr	r3, [pc, #160]	; (800a030 <xPortStartScheduler+0xd8>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3b01      	subs	r3, #1
 8009f94:	4a26      	ldr	r2, [pc, #152]	; (800a030 <xPortStartScheduler+0xd8>)
 8009f96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f98:	78fb      	ldrb	r3, [r7, #3]
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fa2:	78fb      	ldrb	r3, [r7, #3]
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009faa:	2b80      	cmp	r3, #128	; 0x80
 8009fac:	d0ef      	beq.n	8009f8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009fae:	4b20      	ldr	r3, [pc, #128]	; (800a030 <xPortStartScheduler+0xd8>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f1c3 0307 	rsb	r3, r3, #7
 8009fb6:	2b04      	cmp	r3, #4
 8009fb8:	d00a      	beq.n	8009fd0 <xPortStartScheduler+0x78>
	__asm volatile
 8009fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	60bb      	str	r3, [r7, #8]
}
 8009fcc:	bf00      	nop
 8009fce:	e7fe      	b.n	8009fce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009fd0:	4b17      	ldr	r3, [pc, #92]	; (800a030 <xPortStartScheduler+0xd8>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	021b      	lsls	r3, r3, #8
 8009fd6:	4a16      	ldr	r2, [pc, #88]	; (800a030 <xPortStartScheduler+0xd8>)
 8009fd8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009fda:	4b15      	ldr	r3, [pc, #84]	; (800a030 <xPortStartScheduler+0xd8>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009fe2:	4a13      	ldr	r2, [pc, #76]	; (800a030 <xPortStartScheduler+0xd8>)
 8009fe4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009fee:	4b11      	ldr	r3, [pc, #68]	; (800a034 <xPortStartScheduler+0xdc>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a10      	ldr	r2, [pc, #64]	; (800a034 <xPortStartScheduler+0xdc>)
 8009ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ff8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ffa:	4b0e      	ldr	r3, [pc, #56]	; (800a034 <xPortStartScheduler+0xdc>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a0d      	ldr	r2, [pc, #52]	; (800a034 <xPortStartScheduler+0xdc>)
 800a000:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a004:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a006:	f000 f8b9 	bl	800a17c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a00a:	4b0b      	ldr	r3, [pc, #44]	; (800a038 <xPortStartScheduler+0xe0>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a010:	f7ff ff92 	bl	8009f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a014:	f7ff fbca 	bl	80097ac <vTaskSwitchContext>
	prvTaskExitError();
 800a018:	f7ff ff48 	bl	8009eac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	e000e400 	.word	0xe000e400
 800a02c:	20000644 	.word	0x20000644
 800a030:	20000648 	.word	0x20000648
 800a034:	e000ed20 	.word	0xe000ed20
 800a038:	2000002c 	.word	0x2000002c

0800a03c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	607b      	str	r3, [r7, #4]
}
 800a054:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a056:	4b0f      	ldr	r3, [pc, #60]	; (800a094 <vPortEnterCritical+0x58>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3301      	adds	r3, #1
 800a05c:	4a0d      	ldr	r2, [pc, #52]	; (800a094 <vPortEnterCritical+0x58>)
 800a05e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a060:	4b0c      	ldr	r3, [pc, #48]	; (800a094 <vPortEnterCritical+0x58>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d10f      	bne.n	800a088 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a068:	4b0b      	ldr	r3, [pc, #44]	; (800a098 <vPortEnterCritical+0x5c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00a      	beq.n	800a088 <vPortEnterCritical+0x4c>
	__asm volatile
 800a072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	603b      	str	r3, [r7, #0]
}
 800a084:	bf00      	nop
 800a086:	e7fe      	b.n	800a086 <vPortEnterCritical+0x4a>
	}
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bc80      	pop	{r7}
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	2000002c 	.word	0x2000002c
 800a098:	e000ed04 	.word	0xe000ed04

0800a09c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a0a2:	4b11      	ldr	r3, [pc, #68]	; (800a0e8 <vPortExitCritical+0x4c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d10a      	bne.n	800a0c0 <vPortExitCritical+0x24>
	__asm volatile
 800a0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ae:	f383 8811 	msr	BASEPRI, r3
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	607b      	str	r3, [r7, #4]
}
 800a0bc:	bf00      	nop
 800a0be:	e7fe      	b.n	800a0be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a0c0:	4b09      	ldr	r3, [pc, #36]	; (800a0e8 <vPortExitCritical+0x4c>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	4a08      	ldr	r2, [pc, #32]	; (800a0e8 <vPortExitCritical+0x4c>)
 800a0c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0ca:	4b07      	ldr	r3, [pc, #28]	; (800a0e8 <vPortExitCritical+0x4c>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d105      	bne.n	800a0de <vPortExitCritical+0x42>
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	f383 8811 	msr	BASEPRI, r3
}
 800a0dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0de:	bf00      	nop
 800a0e0:	370c      	adds	r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bc80      	pop	{r7}
 800a0e6:	4770      	bx	lr
 800a0e8:	2000002c 	.word	0x2000002c
 800a0ec:	00000000 	.word	0x00000000

0800a0f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0f0:	f3ef 8009 	mrs	r0, PSP
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	4b0d      	ldr	r3, [pc, #52]	; (800a130 <pxCurrentTCBConst>)
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a100:	6010      	str	r0, [r2, #0]
 800a102:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a106:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a10a:	f380 8811 	msr	BASEPRI, r0
 800a10e:	f7ff fb4d 	bl	80097ac <vTaskSwitchContext>
 800a112:	f04f 0000 	mov.w	r0, #0
 800a116:	f380 8811 	msr	BASEPRI, r0
 800a11a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a11e:	6819      	ldr	r1, [r3, #0]
 800a120:	6808      	ldr	r0, [r1, #0]
 800a122:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a126:	f380 8809 	msr	PSP, r0
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	4770      	bx	lr

0800a130 <pxCurrentTCBConst>:
 800a130:	20000518 	.word	0x20000518
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a134:	bf00      	nop
 800a136:	bf00      	nop

0800a138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	607b      	str	r3, [r7, #4]
}
 800a150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a152:	f7ff fa6d 	bl	8009630 <xTaskIncrementTick>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d003      	beq.n	800a164 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a15c:	4b06      	ldr	r3, [pc, #24]	; (800a178 <SysTick_Handler+0x40>)
 800a15e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a162:	601a      	str	r2, [r3, #0]
 800a164:	2300      	movs	r3, #0
 800a166:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	f383 8811 	msr	BASEPRI, r3
}
 800a16e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	e000ed04 	.word	0xe000ed04

0800a17c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a17c:	b480      	push	{r7}
 800a17e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a180:	4b0a      	ldr	r3, [pc, #40]	; (800a1ac <vPortSetupTimerInterrupt+0x30>)
 800a182:	2200      	movs	r2, #0
 800a184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a186:	4b0a      	ldr	r3, [pc, #40]	; (800a1b0 <vPortSetupTimerInterrupt+0x34>)
 800a188:	2200      	movs	r2, #0
 800a18a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a18c:	4b09      	ldr	r3, [pc, #36]	; (800a1b4 <vPortSetupTimerInterrupt+0x38>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a09      	ldr	r2, [pc, #36]	; (800a1b8 <vPortSetupTimerInterrupt+0x3c>)
 800a192:	fba2 2303 	umull	r2, r3, r2, r3
 800a196:	099b      	lsrs	r3, r3, #6
 800a198:	4a08      	ldr	r2, [pc, #32]	; (800a1bc <vPortSetupTimerInterrupt+0x40>)
 800a19a:	3b01      	subs	r3, #1
 800a19c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a19e:	4b03      	ldr	r3, [pc, #12]	; (800a1ac <vPortSetupTimerInterrupt+0x30>)
 800a1a0:	2207      	movs	r2, #7
 800a1a2:	601a      	str	r2, [r3, #0]
}
 800a1a4:	bf00      	nop
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bc80      	pop	{r7}
 800a1aa:	4770      	bx	lr
 800a1ac:	e000e010 	.word	0xe000e010
 800a1b0:	e000e018 	.word	0xe000e018
 800a1b4:	20000000 	.word	0x20000000
 800a1b8:	10624dd3 	.word	0x10624dd3
 800a1bc:	e000e014 	.word	0xe000e014

0800a1c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1c6:	f3ef 8305 	mrs	r3, IPSR
 800a1ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2b0f      	cmp	r3, #15
 800a1d0:	d914      	bls.n	800a1fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a1d2:	4a16      	ldr	r2, [pc, #88]	; (800a22c <vPortValidateInterruptPriority+0x6c>)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a1dc:	4b14      	ldr	r3, [pc, #80]	; (800a230 <vPortValidateInterruptPriority+0x70>)
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	7afa      	ldrb	r2, [r7, #11]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d20a      	bcs.n	800a1fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ea:	f383 8811 	msr	BASEPRI, r3
 800a1ee:	f3bf 8f6f 	isb	sy
 800a1f2:	f3bf 8f4f 	dsb	sy
 800a1f6:	607b      	str	r3, [r7, #4]
}
 800a1f8:	bf00      	nop
 800a1fa:	e7fe      	b.n	800a1fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a1fc:	4b0d      	ldr	r3, [pc, #52]	; (800a234 <vPortValidateInterruptPriority+0x74>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a204:	4b0c      	ldr	r3, [pc, #48]	; (800a238 <vPortValidateInterruptPriority+0x78>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d90a      	bls.n	800a222 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	603b      	str	r3, [r7, #0]
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <vPortValidateInterruptPriority+0x60>
	}
 800a222:	bf00      	nop
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	bc80      	pop	{r7}
 800a22a:	4770      	bx	lr
 800a22c:	e000e3f0 	.word	0xe000e3f0
 800a230:	20000644 	.word	0x20000644
 800a234:	e000ed0c 	.word	0xe000ed0c
 800a238:	20000648 	.word	0x20000648

0800a23c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b08a      	sub	sp, #40	; 0x28
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a244:	2300      	movs	r3, #0
 800a246:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a248:	f7ff f948 	bl	80094dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a24c:	4b58      	ldr	r3, [pc, #352]	; (800a3b0 <pvPortMalloc+0x174>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a254:	f000 f910 	bl	800a478 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a258:	4b56      	ldr	r3, [pc, #344]	; (800a3b4 <pvPortMalloc+0x178>)
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4013      	ands	r3, r2
 800a260:	2b00      	cmp	r3, #0
 800a262:	f040 808e 	bne.w	800a382 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d01d      	beq.n	800a2a8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a26c:	2208      	movs	r2, #8
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	4413      	add	r3, r2
 800a272:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f003 0307 	and.w	r3, r3, #7
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d014      	beq.n	800a2a8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f023 0307 	bic.w	r3, r3, #7
 800a284:	3308      	adds	r3, #8
 800a286:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f003 0307 	and.w	r3, r3, #7
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00a      	beq.n	800a2a8 <pvPortMalloc+0x6c>
	__asm volatile
 800a292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	617b      	str	r3, [r7, #20]
}
 800a2a4:	bf00      	nop
 800a2a6:	e7fe      	b.n	800a2a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d069      	beq.n	800a382 <pvPortMalloc+0x146>
 800a2ae:	4b42      	ldr	r3, [pc, #264]	; (800a3b8 <pvPortMalloc+0x17c>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d864      	bhi.n	800a382 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2b8:	4b40      	ldr	r3, [pc, #256]	; (800a3bc <pvPortMalloc+0x180>)
 800a2ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2bc:	4b3f      	ldr	r3, [pc, #252]	; (800a3bc <pvPortMalloc+0x180>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2c2:	e004      	b.n	800a2ce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d903      	bls.n	800a2e0 <pvPortMalloc+0xa4>
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1f1      	bne.n	800a2c4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a2e0:	4b33      	ldr	r3, [pc, #204]	; (800a3b0 <pvPortMalloc+0x174>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d04b      	beq.n	800a382 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2208      	movs	r2, #8
 800a2f0:	4413      	add	r3, r2
 800a2f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fe:	685a      	ldr	r2, [r3, #4]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	1ad2      	subs	r2, r2, r3
 800a304:	2308      	movs	r3, #8
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	429a      	cmp	r2, r3
 800a30a:	d91f      	bls.n	800a34c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a30c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4413      	add	r3, r2
 800a312:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	f003 0307 	and.w	r3, r3, #7
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00a      	beq.n	800a334 <pvPortMalloc+0xf8>
	__asm volatile
 800a31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	613b      	str	r3, [r7, #16]
}
 800a330:	bf00      	nop
 800a332:	e7fe      	b.n	800a332 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	1ad2      	subs	r2, r2, r3
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a346:	69b8      	ldr	r0, [r7, #24]
 800a348:	f000 f8f8 	bl	800a53c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a34c:	4b1a      	ldr	r3, [pc, #104]	; (800a3b8 <pvPortMalloc+0x17c>)
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	4a18      	ldr	r2, [pc, #96]	; (800a3b8 <pvPortMalloc+0x17c>)
 800a358:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a35a:	4b17      	ldr	r3, [pc, #92]	; (800a3b8 <pvPortMalloc+0x17c>)
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	4b18      	ldr	r3, [pc, #96]	; (800a3c0 <pvPortMalloc+0x184>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	429a      	cmp	r2, r3
 800a364:	d203      	bcs.n	800a36e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a366:	4b14      	ldr	r3, [pc, #80]	; (800a3b8 <pvPortMalloc+0x17c>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a15      	ldr	r2, [pc, #84]	; (800a3c0 <pvPortMalloc+0x184>)
 800a36c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a370:	685a      	ldr	r2, [r3, #4]
 800a372:	4b10      	ldr	r3, [pc, #64]	; (800a3b4 <pvPortMalloc+0x178>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	431a      	orrs	r2, r3
 800a378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	2200      	movs	r2, #0
 800a380:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a382:	f7ff f8b9 	bl	80094f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	f003 0307 	and.w	r3, r3, #7
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00a      	beq.n	800a3a6 <pvPortMalloc+0x16a>
	__asm volatile
 800a390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a394:	f383 8811 	msr	BASEPRI, r3
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	60fb      	str	r3, [r7, #12]
}
 800a3a2:	bf00      	nop
 800a3a4:	e7fe      	b.n	800a3a4 <pvPortMalloc+0x168>
	return pvReturn;
 800a3a6:	69fb      	ldr	r3, [r7, #28]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3728      	adds	r7, #40	; 0x28
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	20002594 	.word	0x20002594
 800a3b4:	200025a0 	.word	0x200025a0
 800a3b8:	20002598 	.word	0x20002598
 800a3bc:	2000258c 	.word	0x2000258c
 800a3c0:	2000259c 	.word	0x2000259c

0800a3c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b086      	sub	sp, #24
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d048      	beq.n	800a468 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a3d6:	2308      	movs	r3, #8
 800a3d8:	425b      	negs	r3, r3
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	4413      	add	r3, r2
 800a3de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	4b21      	ldr	r3, [pc, #132]	; (800a470 <vPortFree+0xac>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10a      	bne.n	800a408 <vPortFree+0x44>
	__asm volatile
 800a3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f6:	f383 8811 	msr	BASEPRI, r3
 800a3fa:	f3bf 8f6f 	isb	sy
 800a3fe:	f3bf 8f4f 	dsb	sy
 800a402:	60fb      	str	r3, [r7, #12]
}
 800a404:	bf00      	nop
 800a406:	e7fe      	b.n	800a406 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00a      	beq.n	800a426 <vPortFree+0x62>
	__asm volatile
 800a410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	60bb      	str	r3, [r7, #8]
}
 800a422:	bf00      	nop
 800a424:	e7fe      	b.n	800a424 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	685a      	ldr	r2, [r3, #4]
 800a42a:	4b11      	ldr	r3, [pc, #68]	; (800a470 <vPortFree+0xac>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4013      	ands	r3, r2
 800a430:	2b00      	cmp	r3, #0
 800a432:	d019      	beq.n	800a468 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d115      	bne.n	800a468 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	685a      	ldr	r2, [r3, #4]
 800a440:	4b0b      	ldr	r3, [pc, #44]	; (800a470 <vPortFree+0xac>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	43db      	mvns	r3, r3
 800a446:	401a      	ands	r2, r3
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a44c:	f7ff f846 	bl	80094dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	685a      	ldr	r2, [r3, #4]
 800a454:	4b07      	ldr	r3, [pc, #28]	; (800a474 <vPortFree+0xb0>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4413      	add	r3, r2
 800a45a:	4a06      	ldr	r2, [pc, #24]	; (800a474 <vPortFree+0xb0>)
 800a45c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a45e:	6938      	ldr	r0, [r7, #16]
 800a460:	f000 f86c 	bl	800a53c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a464:	f7ff f848 	bl	80094f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a468:	bf00      	nop
 800a46a:	3718      	adds	r7, #24
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	200025a0 	.word	0x200025a0
 800a474:	20002598 	.word	0x20002598

0800a478 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a47e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800a482:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a484:	4b27      	ldr	r3, [pc, #156]	; (800a524 <prvHeapInit+0xac>)
 800a486:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f003 0307 	and.w	r3, r3, #7
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00c      	beq.n	800a4ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3307      	adds	r3, #7
 800a496:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f023 0307 	bic.w	r3, r3, #7
 800a49e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	4a1f      	ldr	r2, [pc, #124]	; (800a524 <prvHeapInit+0xac>)
 800a4a8:	4413      	add	r3, r2
 800a4aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4b0:	4a1d      	ldr	r2, [pc, #116]	; (800a528 <prvHeapInit+0xb0>)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4b6:	4b1c      	ldr	r3, [pc, #112]	; (800a528 <prvHeapInit+0xb0>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a4c4:	2208      	movs	r2, #8
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	1a9b      	subs	r3, r3, r2
 800a4ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f023 0307 	bic.w	r3, r3, #7
 800a4d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	4a15      	ldr	r2, [pc, #84]	; (800a52c <prvHeapInit+0xb4>)
 800a4d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a4da:	4b14      	ldr	r3, [pc, #80]	; (800a52c <prvHeapInit+0xb4>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a4e2:	4b12      	ldr	r3, [pc, #72]	; (800a52c <prvHeapInit+0xb4>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	1ad2      	subs	r2, r2, r3
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a4f8:	4b0c      	ldr	r3, [pc, #48]	; (800a52c <prvHeapInit+0xb4>)
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	4a0a      	ldr	r2, [pc, #40]	; (800a530 <prvHeapInit+0xb8>)
 800a506:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	4a09      	ldr	r2, [pc, #36]	; (800a534 <prvHeapInit+0xbc>)
 800a50e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a510:	4b09      	ldr	r3, [pc, #36]	; (800a538 <prvHeapInit+0xc0>)
 800a512:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a516:	601a      	str	r2, [r3, #0]
}
 800a518:	bf00      	nop
 800a51a:	3714      	adds	r7, #20
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bc80      	pop	{r7}
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop
 800a524:	2000064c 	.word	0x2000064c
 800a528:	2000258c 	.word	0x2000258c
 800a52c:	20002594 	.word	0x20002594
 800a530:	2000259c 	.word	0x2000259c
 800a534:	20002598 	.word	0x20002598
 800a538:	200025a0 	.word	0x200025a0

0800a53c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a544:	4b27      	ldr	r3, [pc, #156]	; (800a5e4 <prvInsertBlockIntoFreeList+0xa8>)
 800a546:	60fb      	str	r3, [r7, #12]
 800a548:	e002      	b.n	800a550 <prvInsertBlockIntoFreeList+0x14>
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	429a      	cmp	r2, r3
 800a558:	d8f7      	bhi.n	800a54a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	4413      	add	r3, r2
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d108      	bne.n	800a57e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	685a      	ldr	r2, [r3, #4]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	441a      	add	r2, r3
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	441a      	add	r2, r3
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d118      	bne.n	800a5c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	4b14      	ldr	r3, [pc, #80]	; (800a5e8 <prvInsertBlockIntoFreeList+0xac>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d00d      	beq.n	800a5ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	685a      	ldr	r2, [r3, #4]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	441a      	add	r2, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	601a      	str	r2, [r3, #0]
 800a5b8:	e008      	b.n	800a5cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a5ba:	4b0b      	ldr	r3, [pc, #44]	; (800a5e8 <prvInsertBlockIntoFreeList+0xac>)
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	601a      	str	r2, [r3, #0]
 800a5c2:	e003      	b.n	800a5cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d002      	beq.n	800a5da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5da:	bf00      	nop
 800a5dc:	3714      	adds	r7, #20
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bc80      	pop	{r7}
 800a5e2:	4770      	bx	lr
 800a5e4:	2000258c 	.word	0x2000258c
 800a5e8:	20002594 	.word	0x20002594

0800a5ec <set_time>:
/*
 * -- Insert your variables declaration here --
 */
/* USER CODE BEGIN 0 */

void set_time(){
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	af00      	add	r7, sp, #0

  USBH_CDC_Stop(&hUsbHostFS);
 800a5f0:	4804      	ldr	r0, [pc, #16]	; (800a604 <set_time+0x18>)
 800a5f2:	f7fb ff89 	bl	8006508 <USBH_CDC_Stop>
  USBH_CDC_Transmit(&hUsbHostFS,set_time_cmd,10);
 800a5f6:	220a      	movs	r2, #10
 800a5f8:	4903      	ldr	r1, [pc, #12]	; (800a608 <set_time+0x1c>)
 800a5fa:	4802      	ldr	r0, [pc, #8]	; (800a604 <set_time+0x18>)
 800a5fc:	f7fb ffeb 	bl	80065d6 <USBH_CDC_Transmit>
}
 800a600:	bf00      	nop
 800a602:	bd80      	pop	{r7, pc}
 800a604:	20003544 	.word	0x20003544
 800a608:	0800b85c 	.word	0x0800b85c

0800a60c <enquire_device>:
void enquire_device(){
 800a60c:	b580      	push	{r7, lr}
 800a60e:	af00      	add	r7, sp, #0

  USBH_CDC_Stop(&hUsbHostFS);
 800a610:	4804      	ldr	r0, [pc, #16]	; (800a624 <enquire_device+0x18>)
 800a612:	f7fb ff79 	bl	8006508 <USBH_CDC_Stop>
  USBH_CDC_Transmit(&hUsbHostFS,enquire_device_cmd,6);
 800a616:	2206      	movs	r2, #6
 800a618:	4903      	ldr	r1, [pc, #12]	; (800a628 <enquire_device+0x1c>)
 800a61a:	4802      	ldr	r0, [pc, #8]	; (800a624 <enquire_device+0x18>)
 800a61c:	f7fb ffdb 	bl	80065d6 <USBH_CDC_Transmit>
}
 800a620:	bf00      	nop
 800a622:	bd80      	pop	{r7, pc}
 800a624:	20003544 	.word	0x20003544
 800a628:	0800b7e8 	.word	0x0800b7e8

0800a62c <collect_data>:

void collect_data(){
 800a62c:	b580      	push	{r7, lr}
 800a62e:	af00      	add	r7, sp, #0

  USBH_CDC_Stop(&hUsbHostFS);
 800a630:	4804      	ldr	r0, [pc, #16]	; (800a644 <collect_data+0x18>)
 800a632:	f7fb ff69 	bl	8006508 <USBH_CDC_Stop>
  USBH_CDC_Transmit(&hUsbHostFS,collect_data_cmd,7);
 800a636:	2207      	movs	r2, #7
 800a638:	4903      	ldr	r1, [pc, #12]	; (800a648 <collect_data+0x1c>)
 800a63a:	4802      	ldr	r0, [pc, #8]	; (800a644 <collect_data+0x18>)
 800a63c:	f7fb ffcb 	bl	80065d6 <USBH_CDC_Transmit>
}
 800a640:	bf00      	nop
 800a642:	bd80      	pop	{r7, pc}
 800a644:	20003544 	.word	0x20003544
 800a648:	0800b7f0 	.word	0x0800b7f0

0800a64c <job_setup>:

void job_setup(){
 800a64c:	b580      	push	{r7, lr}
 800a64e:	af00      	add	r7, sp, #0

  USBH_CDC_Stop(&hUsbHostFS);
 800a650:	4804      	ldr	r0, [pc, #16]	; (800a664 <job_setup+0x18>)
 800a652:	f7fb ff59 	bl	8006508 <USBH_CDC_Stop>
  USBH_CDC_Transmit(&hUsbHostFS,job_setup_cmd,98);
 800a656:	2262      	movs	r2, #98	; 0x62
 800a658:	4903      	ldr	r1, [pc, #12]	; (800a668 <job_setup+0x1c>)
 800a65a:	4802      	ldr	r0, [pc, #8]	; (800a664 <job_setup+0x18>)
 800a65c:	f7fb ffbb 	bl	80065d6 <USBH_CDC_Transmit>
}
 800a660:	bf00      	nop
 800a662:	bd80      	pop	{r7, pc}
 800a664:	20003544 	.word	0x20003544
 800a668:	0800b7f8 	.word	0x0800b7f8

0800a66c <receive_function>:

void stop_function(){
  USBH_CDC_Stop(&hUsbHostFS);
}
void receive_function(){
 800a66c:	b580      	push	{r7, lr}
 800a66e:	af00      	add	r7, sp, #0
  USBH_CDC_Stop(&hUsbHostFS);
 800a670:	4805      	ldr	r0, [pc, #20]	; (800a688 <receive_function+0x1c>)
 800a672:	f7fb ff49 	bl	8006508 <USBH_CDC_Stop>
  USBH_CDC_Receive(&hUsbHostFS,usb_rx_buff,USB_RX_BUFF_SIZE);
 800a676:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800a67a:	4904      	ldr	r1, [pc, #16]	; (800a68c <receive_function+0x20>)
 800a67c:	4802      	ldr	r0, [pc, #8]	; (800a688 <receive_function+0x1c>)
 800a67e:	f7fb ffe5 	bl	800664c <USBH_CDC_Receive>
}
 800a682:	bf00      	nop
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	20003544 	.word	0x20003544
 800a68c:	200025a4 	.word	0x200025a4

0800a690 <USBH_CDC_TransmitCallback>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  receive_function();
 800a698:	f7ff ffe8 	bl	800a66c <receive_function>
}
 800a69c:	bf00      	nop
 800a69e:	3708      	adds	r7, #8
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <USBH_CDC_ReceiveCallback>:


void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bc80      	pop	{r7}
 800a6b4:	4770      	bx	lr
	...

0800a6b8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	af00      	add	r7, sp, #0


  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a6bc:	2201      	movs	r2, #1
 800a6be:	490e      	ldr	r1, [pc, #56]	; (800a6f8 <MX_USB_HOST_Init+0x40>)
 800a6c0:	480e      	ldr	r0, [pc, #56]	; (800a6fc <MX_USB_HOST_Init+0x44>)
 800a6c2:	f7fc f933 	bl	800692c <USBH_Init>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d001      	beq.n	800a6d0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a6cc:	f7f6 fa22 	bl	8000b14 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a6d0:	490b      	ldr	r1, [pc, #44]	; (800a700 <MX_USB_HOST_Init+0x48>)
 800a6d2:	480a      	ldr	r0, [pc, #40]	; (800a6fc <MX_USB_HOST_Init+0x44>)
 800a6d4:	f7fc f9d6 	bl	8006a84 <USBH_RegisterClass>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a6de:	f7f6 fa19 	bl	8000b14 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a6e2:	4806      	ldr	r0, [pc, #24]	; (800a6fc <MX_USB_HOST_Init+0x44>)
 800a6e4:	f7fc fa58 	bl	8006b98 <USBH_Start>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d001      	beq.n	800a6f2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a6ee:	f7f6 fa11 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a6f2:	bf00      	nop
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	0800a705 	.word	0x0800a705
 800a6fc:	20003544 	.word	0x20003544
 800a700:	2000000c 	.word	0x2000000c

0800a704 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	460b      	mov	r3, r1
 800a70e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a710:	78fb      	ldrb	r3, [r7, #3]
 800a712:	3b01      	subs	r3, #1
 800a714:	2b04      	cmp	r3, #4
 800a716:	d82e      	bhi.n	800a776 <USBH_UserProcess+0x72>
 800a718:	a201      	add	r2, pc, #4	; (adr r2, 800a720 <USBH_UserProcess+0x1c>)
 800a71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71e:	bf00      	nop
 800a720:	0800a777 	.word	0x0800a777
 800a724:	0800a74b 	.word	0x0800a74b
 800a728:	0800a777 	.word	0x0800a777
 800a72c:	0800a761 	.word	0x0800a761
 800a730:	0800a735 	.word	0x0800a735
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a734:	4b12      	ldr	r3, [pc, #72]	; (800a780 <USBH_UserProcess+0x7c>)
 800a736:	2203      	movs	r2, #3
 800a738:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_DISCONNECT, 0);
 800a73a:	4b12      	ldr	r3, [pc, #72]	; (800a784 <USBH_UserProcess+0x80>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2200      	movs	r2, #0
 800a740:	2103      	movs	r1, #3
 800a742:	4618      	mov	r0, r3
 800a744:	f7fd fde4 	bl	8008310 <osMessagePut>
  break;
 800a748:	e016      	b.n	800a778 <USBH_UserProcess+0x74>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a74a:	4b0d      	ldr	r3, [pc, #52]	; (800a780 <USBH_UserProcess+0x7c>)
 800a74c:	2202      	movs	r2, #2
 800a74e:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_READY, 0);
 800a750:	4b0c      	ldr	r3, [pc, #48]	; (800a784 <USBH_UserProcess+0x80>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2200      	movs	r2, #0
 800a756:	2102      	movs	r1, #2
 800a758:	4618      	mov	r0, r3
 800a75a:	f7fd fdd9 	bl	8008310 <osMessagePut>
  break;
 800a75e:	e00b      	b.n	800a778 <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a760:	4b07      	ldr	r3, [pc, #28]	; (800a780 <USBH_UserProcess+0x7c>)
 800a762:	2201      	movs	r2, #1
 800a764:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_START, 0);
 800a766:	4b07      	ldr	r3, [pc, #28]	; (800a784 <USBH_UserProcess+0x80>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2200      	movs	r2, #0
 800a76c:	2101      	movs	r1, #1
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fd fdce 	bl	8008310 <osMessagePut>
  break;
 800a774:	e000      	b.n	800a778 <USBH_UserProcess+0x74>

  default:
  break;
 800a776:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a778:	bf00      	nop
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	20003920 	.word	0x20003920
 800a784:	20000454 	.word	0x20000454

0800a788 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a798:	d113      	bne.n	800a7c2 <HAL_HCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a79a:	4b0c      	ldr	r3, [pc, #48]	; (800a7cc <HAL_HCD_MspInit+0x44>)
 800a79c:	695b      	ldr	r3, [r3, #20]
 800a79e:	4a0b      	ldr	r2, [pc, #44]	; (800a7cc <HAL_HCD_MspInit+0x44>)
 800a7a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a7a4:	6153      	str	r3, [r2, #20]
 800a7a6:	4b09      	ldr	r3, [pc, #36]	; (800a7cc <HAL_HCD_MspInit+0x44>)
 800a7a8:	695b      	ldr	r3, [r3, #20]
 800a7aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a7ae:	60fb      	str	r3, [r7, #12]
 800a7b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	2105      	movs	r1, #5
 800a7b6:	2043      	movs	r0, #67	; 0x43
 800a7b8:	f7f6 fccf 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a7bc:	2043      	movs	r0, #67	; 0x43
 800a7be:	f7f6 fce8 	bl	8001192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a7c2:	bf00      	nop
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	40021000 	.word	0x40021000

0800a7d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fc fd5a 	bl	8007298 <USBH_LL_IncTimer>
}
 800a7e4:	bf00      	nop
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fc fd9d 	bl	800733a <USBH_LL_Connect>
}
 800a800:	bf00      	nop
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a816:	4618      	mov	r0, r3
 800a818:	f7fc fdb2 	bl	8007380 <USBH_LL_Disconnect>
}
 800a81c:	bf00      	nop
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	460b      	mov	r3, r1
 800a82e:	70fb      	strb	r3, [r7, #3]
 800a830:	4613      	mov	r3, r2
 800a832:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fc fde7 	bl	800740e <USBH_LL_NotifyURBChange>
#endif
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a856:	4618      	mov	r0, r3
 800a858:	f7fc fd48 	bl	80072ec <USBH_LL_PortEnabled>
}
 800a85c:	bf00      	nop
 800a85e:	3708      	adds	r7, #8
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a872:	4618      	mov	r0, r3
 800a874:	f7fc fd54 	bl	8007320 <USBH_LL_PortDisabled>
}
 800a878:	bf00      	nop
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d127      	bne.n	800a8e2 <USBH_LL_Init+0x62>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a892:	4a16      	ldr	r2, [pc, #88]	; (800a8ec <USBH_LL_Init+0x6c>)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a13      	ldr	r2, [pc, #76]	; (800a8ec <USBH_LL_Init+0x6c>)
 800a89e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a8a2:	4b12      	ldr	r3, [pc, #72]	; (800a8ec <USBH_LL_Init+0x6c>)
 800a8a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a8a8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a8aa:	4b10      	ldr	r3, [pc, #64]	; (800a8ec <USBH_LL_Init+0x6c>)
 800a8ac:	2208      	movs	r2, #8
 800a8ae:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a8b0:	4b0e      	ldr	r3, [pc, #56]	; (800a8ec <USBH_LL_Init+0x6c>)
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a8b6:	4b0d      	ldr	r3, [pc, #52]	; (800a8ec <USBH_LL_Init+0x6c>)
 800a8b8:	2202      	movs	r2, #2
 800a8ba:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a8bc:	4b0b      	ldr	r3, [pc, #44]	; (800a8ec <USBH_LL_Init+0x6c>)
 800a8be:	2201      	movs	r2, #1
 800a8c0:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a8c2:	480a      	ldr	r0, [pc, #40]	; (800a8ec <USBH_LL_Init+0x6c>)
 800a8c4:	f7f6 ff52 	bl	800176c <HAL_HCD_Init>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <USBH_LL_Init+0x52>
  {
    Error_Handler( );
 800a8ce:	f7f6 f921 	bl	8000b14 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a8d2:	4806      	ldr	r0, [pc, #24]	; (800a8ec <USBH_LL_Init+0x6c>)
 800a8d4:	f7f7 fb28 	bl	8001f28 <HAL_HCD_GetCurrentFrame>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	4619      	mov	r1, r3
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f7fc fccd 	bl	800727c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	20003924 	.word	0x20003924

0800a8f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a906:	4618      	mov	r0, r3
 800a908:	f7f7 fa9a 	bl	8001e40 <HAL_HCD_Start>
 800a90c:	4603      	mov	r3, r0
 800a90e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a910:	7bfb      	ldrb	r3, [r7, #15]
 800a912:	4618      	mov	r0, r3
 800a914:	f000 f95a 	bl	800abcc <USBH_Get_USB_Status>
 800a918:	4603      	mov	r3, r0
 800a91a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a91c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b084      	sub	sp, #16
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a92e:	2300      	movs	r3, #0
 800a930:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7f7 faa2 	bl	8001e86 <HAL_HCD_Stop>
 800a942:	4603      	mov	r3, r0
 800a944:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a946:	7bfb      	ldrb	r3, [r7, #15]
 800a948:	4618      	mov	r0, r3
 800a94a:	f000 f93f 	bl	800abcc <USBH_Get_USB_Status>
 800a94e:	4603      	mov	r3, r0
 800a950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a952:	7bbb      	ldrb	r3, [r7, #14]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a964:	2301      	movs	r3, #1
 800a966:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a96e:	4618      	mov	r0, r3
 800a970:	f7f7 fae8 	bl	8001f44 <HAL_HCD_GetCurrentSpeed>
 800a974:	4603      	mov	r3, r0
 800a976:	2b02      	cmp	r3, #2
 800a978:	d00c      	beq.n	800a994 <USBH_LL_GetSpeed+0x38>
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d80d      	bhi.n	800a99a <USBH_LL_GetSpeed+0x3e>
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d002      	beq.n	800a988 <USBH_LL_GetSpeed+0x2c>
 800a982:	2b01      	cmp	r3, #1
 800a984:	d003      	beq.n	800a98e <USBH_LL_GetSpeed+0x32>
 800a986:	e008      	b.n	800a99a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a988:	2300      	movs	r3, #0
 800a98a:	73fb      	strb	r3, [r7, #15]
    break;
 800a98c:	e008      	b.n	800a9a0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a98e:	2301      	movs	r3, #1
 800a990:	73fb      	strb	r3, [r7, #15]
    break;
 800a992:	e005      	b.n	800a9a0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a994:	2302      	movs	r3, #2
 800a996:	73fb      	strb	r3, [r7, #15]
    break;
 800a998:	e002      	b.n	800a9a0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a99a:	2301      	movs	r3, #1
 800a99c:	73fb      	strb	r3, [r7, #15]
    break;
 800a99e:	bf00      	nop
  }
  return  speed;
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b084      	sub	sp, #16
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7f7 fa7d 	bl	8001ec0 <HAL_HCD_ResetPort>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f000 f8fd 	bl	800abcc <USBH_Get_USB_Status>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a9f2:	78fa      	ldrb	r2, [r7, #3]
 800a9f4:	4611      	mov	r1, r2
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7f7 fa83 	bl	8001f02 <HAL_HCD_HC_GetXferCount>
 800a9fc:	4603      	mov	r3, r0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aa06:	b590      	push	{r4, r7, lr}
 800aa08:	b089      	sub	sp, #36	; 0x24
 800aa0a:	af04      	add	r7, sp, #16
 800aa0c:	6078      	str	r0, [r7, #4]
 800aa0e:	4608      	mov	r0, r1
 800aa10:	4611      	mov	r1, r2
 800aa12:	461a      	mov	r2, r3
 800aa14:	4603      	mov	r3, r0
 800aa16:	70fb      	strb	r3, [r7, #3]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	70bb      	strb	r3, [r7, #2]
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa20:	2300      	movs	r3, #0
 800aa22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa24:	2300      	movs	r3, #0
 800aa26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 800aa2e:	787c      	ldrb	r4, [r7, #1]
 800aa30:	78ba      	ldrb	r2, [r7, #2]
 800aa32:	78f9      	ldrb	r1, [r7, #3]
 800aa34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aa36:	9302      	str	r3, [sp, #8]
 800aa38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aa3c:	9301      	str	r3, [sp, #4]
 800aa3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	4623      	mov	r3, r4
 800aa46:	f7f6 fef3 	bl	8001830 <HAL_HCD_HC_Init>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa4e:	7bfb      	ldrb	r3, [r7, #15]
 800aa50:	4618      	mov	r0, r3
 800aa52:	f000 f8bb 	bl	800abcc <USBH_Get_USB_Status>
 800aa56:	4603      	mov	r3, r0
 800aa58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3714      	adds	r7, #20
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd90      	pop	{r4, r7, pc}

0800aa64 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa70:	2300      	movs	r3, #0
 800aa72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa74:	2300      	movs	r3, #0
 800aa76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800aa7e:	78fa      	ldrb	r2, [r7, #3]
 800aa80:	4611      	mov	r1, r2
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7f6 ff63 	bl	800194e <HAL_HCD_HC_Halt>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f000 f89c 	bl	800abcc <USBH_Get_USB_Status>
 800aa94:	4603      	mov	r3, r0
 800aa96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa98:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800aaa2:	b590      	push	{r4, r7, lr}
 800aaa4:	b089      	sub	sp, #36	; 0x24
 800aaa6:	af04      	add	r7, sp, #16
 800aaa8:	6078      	str	r0, [r7, #4]
 800aaaa:	4608      	mov	r0, r1
 800aaac:	4611      	mov	r1, r2
 800aaae:	461a      	mov	r2, r3
 800aab0:	4603      	mov	r3, r0
 800aab2:	70fb      	strb	r3, [r7, #3]
 800aab4:	460b      	mov	r3, r1
 800aab6:	70bb      	strb	r3, [r7, #2]
 800aab8:	4613      	mov	r3, r2
 800aaba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aabc:	2300      	movs	r3, #0
 800aabe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aac0:	2300      	movs	r3, #0
 800aac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 800aaca:	787c      	ldrb	r4, [r7, #1]
 800aacc:	78ba      	ldrb	r2, [r7, #2]
 800aace:	78f9      	ldrb	r1, [r7, #3]
 800aad0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aad4:	9303      	str	r3, [sp, #12]
 800aad6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aad8:	9302      	str	r3, [sp, #8]
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	9301      	str	r3, [sp, #4]
 800aade:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aae2:	9300      	str	r3, [sp, #0]
 800aae4:	4623      	mov	r3, r4
 800aae6:	f7f6 ff55 	bl	8001994 <HAL_HCD_HC_SubmitRequest>
 800aaea:	4603      	mov	r3, r0
 800aaec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800aaee:	7bfb      	ldrb	r3, [r7, #15]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 f86b 	bl	800abcc <USBH_Get_USB_Status>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aafa:	7bbb      	ldrb	r3, [r7, #14]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3714      	adds	r7, #20
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd90      	pop	{r4, r7, pc}

0800ab04 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ab16:	78fa      	ldrb	r2, [r7, #3]
 800ab18:	4611      	mov	r1, r2
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7f7 f9de 	bl	8001edc <HAL_HCD_HC_GetURBState>
 800ab20:	4603      	mov	r3, r0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b082      	sub	sp, #8
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
 800ab32:	460b      	mov	r3, r1
 800ab34:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d103      	bne.n	800ab48 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ab40:	78fb      	ldrb	r3, [r7, #3]
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 f86e 	bl	800ac24 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ab48:	20c8      	movs	r0, #200	; 0xc8
 800ab4a:	f7f6 fa2d 	bl	8000fa8 <HAL_Delay>
  return USBH_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	460b      	mov	r3, r1
 800ab62:	70fb      	strb	r3, [r7, #3]
 800ab64:	4613      	mov	r3, r2
 800ab66:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ab6e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ab70:	78fb      	ldrb	r3, [r7, #3]
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	212c      	movs	r1, #44	; 0x2c
 800ab76:	fb01 f303 	mul.w	r3, r1, r3
 800ab7a:	4413      	add	r3, r2
 800ab7c:	333b      	adds	r3, #59	; 0x3b
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d009      	beq.n	800ab98 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ab84:	78fb      	ldrb	r3, [r7, #3]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	212c      	movs	r1, #44	; 0x2c
 800ab8a:	fb01 f303 	mul.w	r3, r1, r3
 800ab8e:	4413      	add	r3, r2
 800ab90:	3354      	adds	r3, #84	; 0x54
 800ab92:	78ba      	ldrb	r2, [r7, #2]
 800ab94:	701a      	strb	r2, [r3, #0]
 800ab96:	e008      	b.n	800abaa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ab98:	78fb      	ldrb	r3, [r7, #3]
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	212c      	movs	r1, #44	; 0x2c
 800ab9e:	fb01 f303 	mul.w	r3, r1, r3
 800aba2:	4413      	add	r3, r2
 800aba4:	3355      	adds	r3, #85	; 0x55
 800aba6:	78ba      	ldrb	r2, [r7, #2]
 800aba8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3714      	adds	r7, #20
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bc80      	pop	{r7}
 800abb4:	4770      	bx	lr

0800abb6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b082      	sub	sp, #8
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7f6 f9f2 	bl	8000fa8 <HAL_Delay>
}
 800abc4:	bf00      	nop
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	4603      	mov	r3, r0
 800abd4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abda:	79fb      	ldrb	r3, [r7, #7]
 800abdc:	2b03      	cmp	r3, #3
 800abde:	d817      	bhi.n	800ac10 <USBH_Get_USB_Status+0x44>
 800abe0:	a201      	add	r2, pc, #4	; (adr r2, 800abe8 <USBH_Get_USB_Status+0x1c>)
 800abe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe6:	bf00      	nop
 800abe8:	0800abf9 	.word	0x0800abf9
 800abec:	0800abff 	.word	0x0800abff
 800abf0:	0800ac05 	.word	0x0800ac05
 800abf4:	0800ac0b 	.word	0x0800ac0b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	73fb      	strb	r3, [r7, #15]
    break;
 800abfc:	e00b      	b.n	800ac16 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800abfe:	2302      	movs	r3, #2
 800ac00:	73fb      	strb	r3, [r7, #15]
    break;
 800ac02:	e008      	b.n	800ac16 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ac04:	2301      	movs	r3, #1
 800ac06:	73fb      	strb	r3, [r7, #15]
    break;
 800ac08:	e005      	b.n	800ac16 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ac0a:	2302      	movs	r3, #2
 800ac0c:	73fb      	strb	r3, [r7, #15]
    break;
 800ac0e:	e002      	b.n	800ac16 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ac10:	2302      	movs	r3, #2
 800ac12:	73fb      	strb	r3, [r7, #15]
    break;
 800ac14:	bf00      	nop
  }
  return usb_status;
 800ac16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bc80      	pop	{r7}
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop

0800ac24 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ac2e:	79fb      	ldrb	r3, [r7, #7]
 800ac30:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ac32:	79fb      	ldrb	r3, [r7, #7]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d102      	bne.n	800ac3e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	73fb      	strb	r3, [r7, #15]
 800ac3c:	e001      	b.n	800ac42 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,(GPIO_PinState)data);
 800ac42:	7bfb      	ldrb	r3, [r7, #15]
 800ac44:	461a      	mov	r2, r3
 800ac46:	2101      	movs	r1, #1
 800ac48:	4803      	ldr	r0, [pc, #12]	; (800ac58 <MX_DriverVbusFS+0x34>)
 800ac4a:	f7f6 fd77 	bl	800173c <HAL_GPIO_WritePin>
}
 800ac4e:	bf00      	nop
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	40010c00 	.word	0x40010c00

0800ac5c <__errno>:
 800ac5c:	4b01      	ldr	r3, [pc, #4]	; (800ac64 <__errno+0x8>)
 800ac5e:	6818      	ldr	r0, [r3, #0]
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	20000030 	.word	0x20000030

0800ac68 <__libc_init_array>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	2600      	movs	r6, #0
 800ac6c:	4d0c      	ldr	r5, [pc, #48]	; (800aca0 <__libc_init_array+0x38>)
 800ac6e:	4c0d      	ldr	r4, [pc, #52]	; (800aca4 <__libc_init_array+0x3c>)
 800ac70:	1b64      	subs	r4, r4, r5
 800ac72:	10a4      	asrs	r4, r4, #2
 800ac74:	42a6      	cmp	r6, r4
 800ac76:	d109      	bne.n	800ac8c <__libc_init_array+0x24>
 800ac78:	f000 fd16 	bl	800b6a8 <_init>
 800ac7c:	2600      	movs	r6, #0
 800ac7e:	4d0a      	ldr	r5, [pc, #40]	; (800aca8 <__libc_init_array+0x40>)
 800ac80:	4c0a      	ldr	r4, [pc, #40]	; (800acac <__libc_init_array+0x44>)
 800ac82:	1b64      	subs	r4, r4, r5
 800ac84:	10a4      	asrs	r4, r4, #2
 800ac86:	42a6      	cmp	r6, r4
 800ac88:	d105      	bne.n	800ac96 <__libc_init_array+0x2e>
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}
 800ac8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac90:	4798      	blx	r3
 800ac92:	3601      	adds	r6, #1
 800ac94:	e7ee      	b.n	800ac74 <__libc_init_array+0xc>
 800ac96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac9a:	4798      	blx	r3
 800ac9c:	3601      	adds	r6, #1
 800ac9e:	e7f2      	b.n	800ac86 <__libc_init_array+0x1e>
 800aca0:	0800b904 	.word	0x0800b904
 800aca4:	0800b904 	.word	0x0800b904
 800aca8:	0800b904 	.word	0x0800b904
 800acac:	0800b908 	.word	0x0800b908

0800acb0 <__retarget_lock_acquire_recursive>:
 800acb0:	4770      	bx	lr

0800acb2 <__retarget_lock_release_recursive>:
 800acb2:	4770      	bx	lr

0800acb4 <malloc>:
 800acb4:	4b02      	ldr	r3, [pc, #8]	; (800acc0 <malloc+0xc>)
 800acb6:	4601      	mov	r1, r0
 800acb8:	6818      	ldr	r0, [r3, #0]
 800acba:	f000 b889 	b.w	800add0 <_malloc_r>
 800acbe:	bf00      	nop
 800acc0:	20000030 	.word	0x20000030

0800acc4 <free>:
 800acc4:	4b02      	ldr	r3, [pc, #8]	; (800acd0 <free+0xc>)
 800acc6:	4601      	mov	r1, r0
 800acc8:	6818      	ldr	r0, [r3, #0]
 800acca:	f000 b819 	b.w	800ad00 <_free_r>
 800acce:	bf00      	nop
 800acd0:	20000030 	.word	0x20000030

0800acd4 <memcpy>:
 800acd4:	440a      	add	r2, r1
 800acd6:	4291      	cmp	r1, r2
 800acd8:	f100 33ff 	add.w	r3, r0, #4294967295
 800acdc:	d100      	bne.n	800ace0 <memcpy+0xc>
 800acde:	4770      	bx	lr
 800ace0:	b510      	push	{r4, lr}
 800ace2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ace6:	4291      	cmp	r1, r2
 800ace8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acec:	d1f9      	bne.n	800ace2 <memcpy+0xe>
 800acee:	bd10      	pop	{r4, pc}

0800acf0 <memset>:
 800acf0:	4603      	mov	r3, r0
 800acf2:	4402      	add	r2, r0
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d100      	bne.n	800acfa <memset+0xa>
 800acf8:	4770      	bx	lr
 800acfa:	f803 1b01 	strb.w	r1, [r3], #1
 800acfe:	e7f9      	b.n	800acf4 <memset+0x4>

0800ad00 <_free_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	4605      	mov	r5, r0
 800ad04:	2900      	cmp	r1, #0
 800ad06:	d040      	beq.n	800ad8a <_free_r+0x8a>
 800ad08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad0c:	1f0c      	subs	r4, r1, #4
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	bfb8      	it	lt
 800ad12:	18e4      	addlt	r4, r4, r3
 800ad14:	f000 f96a 	bl	800afec <__malloc_lock>
 800ad18:	4a1c      	ldr	r2, [pc, #112]	; (800ad8c <_free_r+0x8c>)
 800ad1a:	6813      	ldr	r3, [r2, #0]
 800ad1c:	b933      	cbnz	r3, 800ad2c <_free_r+0x2c>
 800ad1e:	6063      	str	r3, [r4, #4]
 800ad20:	6014      	str	r4, [r2, #0]
 800ad22:	4628      	mov	r0, r5
 800ad24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad28:	f000 b966 	b.w	800aff8 <__malloc_unlock>
 800ad2c:	42a3      	cmp	r3, r4
 800ad2e:	d908      	bls.n	800ad42 <_free_r+0x42>
 800ad30:	6820      	ldr	r0, [r4, #0]
 800ad32:	1821      	adds	r1, r4, r0
 800ad34:	428b      	cmp	r3, r1
 800ad36:	bf01      	itttt	eq
 800ad38:	6819      	ldreq	r1, [r3, #0]
 800ad3a:	685b      	ldreq	r3, [r3, #4]
 800ad3c:	1809      	addeq	r1, r1, r0
 800ad3e:	6021      	streq	r1, [r4, #0]
 800ad40:	e7ed      	b.n	800ad1e <_free_r+0x1e>
 800ad42:	461a      	mov	r2, r3
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	b10b      	cbz	r3, 800ad4c <_free_r+0x4c>
 800ad48:	42a3      	cmp	r3, r4
 800ad4a:	d9fa      	bls.n	800ad42 <_free_r+0x42>
 800ad4c:	6811      	ldr	r1, [r2, #0]
 800ad4e:	1850      	adds	r0, r2, r1
 800ad50:	42a0      	cmp	r0, r4
 800ad52:	d10b      	bne.n	800ad6c <_free_r+0x6c>
 800ad54:	6820      	ldr	r0, [r4, #0]
 800ad56:	4401      	add	r1, r0
 800ad58:	1850      	adds	r0, r2, r1
 800ad5a:	4283      	cmp	r3, r0
 800ad5c:	6011      	str	r1, [r2, #0]
 800ad5e:	d1e0      	bne.n	800ad22 <_free_r+0x22>
 800ad60:	6818      	ldr	r0, [r3, #0]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	4401      	add	r1, r0
 800ad66:	6011      	str	r1, [r2, #0]
 800ad68:	6053      	str	r3, [r2, #4]
 800ad6a:	e7da      	b.n	800ad22 <_free_r+0x22>
 800ad6c:	d902      	bls.n	800ad74 <_free_r+0x74>
 800ad6e:	230c      	movs	r3, #12
 800ad70:	602b      	str	r3, [r5, #0]
 800ad72:	e7d6      	b.n	800ad22 <_free_r+0x22>
 800ad74:	6820      	ldr	r0, [r4, #0]
 800ad76:	1821      	adds	r1, r4, r0
 800ad78:	428b      	cmp	r3, r1
 800ad7a:	bf01      	itttt	eq
 800ad7c:	6819      	ldreq	r1, [r3, #0]
 800ad7e:	685b      	ldreq	r3, [r3, #4]
 800ad80:	1809      	addeq	r1, r1, r0
 800ad82:	6021      	streq	r1, [r4, #0]
 800ad84:	6063      	str	r3, [r4, #4]
 800ad86:	6054      	str	r4, [r2, #4]
 800ad88:	e7cb      	b.n	800ad22 <_free_r+0x22>
 800ad8a:	bd38      	pop	{r3, r4, r5, pc}
 800ad8c:	20003c2c 	.word	0x20003c2c

0800ad90 <sbrk_aligned>:
 800ad90:	b570      	push	{r4, r5, r6, lr}
 800ad92:	4e0e      	ldr	r6, [pc, #56]	; (800adcc <sbrk_aligned+0x3c>)
 800ad94:	460c      	mov	r4, r1
 800ad96:	6831      	ldr	r1, [r6, #0]
 800ad98:	4605      	mov	r5, r0
 800ad9a:	b911      	cbnz	r1, 800ada2 <sbrk_aligned+0x12>
 800ad9c:	f000 f8f6 	bl	800af8c <_sbrk_r>
 800ada0:	6030      	str	r0, [r6, #0]
 800ada2:	4621      	mov	r1, r4
 800ada4:	4628      	mov	r0, r5
 800ada6:	f000 f8f1 	bl	800af8c <_sbrk_r>
 800adaa:	1c43      	adds	r3, r0, #1
 800adac:	d00a      	beq.n	800adc4 <sbrk_aligned+0x34>
 800adae:	1cc4      	adds	r4, r0, #3
 800adb0:	f024 0403 	bic.w	r4, r4, #3
 800adb4:	42a0      	cmp	r0, r4
 800adb6:	d007      	beq.n	800adc8 <sbrk_aligned+0x38>
 800adb8:	1a21      	subs	r1, r4, r0
 800adba:	4628      	mov	r0, r5
 800adbc:	f000 f8e6 	bl	800af8c <_sbrk_r>
 800adc0:	3001      	adds	r0, #1
 800adc2:	d101      	bne.n	800adc8 <sbrk_aligned+0x38>
 800adc4:	f04f 34ff 	mov.w	r4, #4294967295
 800adc8:	4620      	mov	r0, r4
 800adca:	bd70      	pop	{r4, r5, r6, pc}
 800adcc:	20003c30 	.word	0x20003c30

0800add0 <_malloc_r>:
 800add0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add4:	1ccd      	adds	r5, r1, #3
 800add6:	f025 0503 	bic.w	r5, r5, #3
 800adda:	3508      	adds	r5, #8
 800addc:	2d0c      	cmp	r5, #12
 800adde:	bf38      	it	cc
 800ade0:	250c      	movcc	r5, #12
 800ade2:	2d00      	cmp	r5, #0
 800ade4:	4607      	mov	r7, r0
 800ade6:	db01      	blt.n	800adec <_malloc_r+0x1c>
 800ade8:	42a9      	cmp	r1, r5
 800adea:	d905      	bls.n	800adf8 <_malloc_r+0x28>
 800adec:	230c      	movs	r3, #12
 800adee:	2600      	movs	r6, #0
 800adf0:	603b      	str	r3, [r7, #0]
 800adf2:	4630      	mov	r0, r6
 800adf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf8:	4e2e      	ldr	r6, [pc, #184]	; (800aeb4 <_malloc_r+0xe4>)
 800adfa:	f000 f8f7 	bl	800afec <__malloc_lock>
 800adfe:	6833      	ldr	r3, [r6, #0]
 800ae00:	461c      	mov	r4, r3
 800ae02:	bb34      	cbnz	r4, 800ae52 <_malloc_r+0x82>
 800ae04:	4629      	mov	r1, r5
 800ae06:	4638      	mov	r0, r7
 800ae08:	f7ff ffc2 	bl	800ad90 <sbrk_aligned>
 800ae0c:	1c43      	adds	r3, r0, #1
 800ae0e:	4604      	mov	r4, r0
 800ae10:	d14d      	bne.n	800aeae <_malloc_r+0xde>
 800ae12:	6834      	ldr	r4, [r6, #0]
 800ae14:	4626      	mov	r6, r4
 800ae16:	2e00      	cmp	r6, #0
 800ae18:	d140      	bne.n	800ae9c <_malloc_r+0xcc>
 800ae1a:	6823      	ldr	r3, [r4, #0]
 800ae1c:	4631      	mov	r1, r6
 800ae1e:	4638      	mov	r0, r7
 800ae20:	eb04 0803 	add.w	r8, r4, r3
 800ae24:	f000 f8b2 	bl	800af8c <_sbrk_r>
 800ae28:	4580      	cmp	r8, r0
 800ae2a:	d13a      	bne.n	800aea2 <_malloc_r+0xd2>
 800ae2c:	6821      	ldr	r1, [r4, #0]
 800ae2e:	3503      	adds	r5, #3
 800ae30:	1a6d      	subs	r5, r5, r1
 800ae32:	f025 0503 	bic.w	r5, r5, #3
 800ae36:	3508      	adds	r5, #8
 800ae38:	2d0c      	cmp	r5, #12
 800ae3a:	bf38      	it	cc
 800ae3c:	250c      	movcc	r5, #12
 800ae3e:	4638      	mov	r0, r7
 800ae40:	4629      	mov	r1, r5
 800ae42:	f7ff ffa5 	bl	800ad90 <sbrk_aligned>
 800ae46:	3001      	adds	r0, #1
 800ae48:	d02b      	beq.n	800aea2 <_malloc_r+0xd2>
 800ae4a:	6823      	ldr	r3, [r4, #0]
 800ae4c:	442b      	add	r3, r5
 800ae4e:	6023      	str	r3, [r4, #0]
 800ae50:	e00e      	b.n	800ae70 <_malloc_r+0xa0>
 800ae52:	6822      	ldr	r2, [r4, #0]
 800ae54:	1b52      	subs	r2, r2, r5
 800ae56:	d41e      	bmi.n	800ae96 <_malloc_r+0xc6>
 800ae58:	2a0b      	cmp	r2, #11
 800ae5a:	d916      	bls.n	800ae8a <_malloc_r+0xba>
 800ae5c:	1961      	adds	r1, r4, r5
 800ae5e:	42a3      	cmp	r3, r4
 800ae60:	6025      	str	r5, [r4, #0]
 800ae62:	bf18      	it	ne
 800ae64:	6059      	strne	r1, [r3, #4]
 800ae66:	6863      	ldr	r3, [r4, #4]
 800ae68:	bf08      	it	eq
 800ae6a:	6031      	streq	r1, [r6, #0]
 800ae6c:	5162      	str	r2, [r4, r5]
 800ae6e:	604b      	str	r3, [r1, #4]
 800ae70:	4638      	mov	r0, r7
 800ae72:	f104 060b 	add.w	r6, r4, #11
 800ae76:	f000 f8bf 	bl	800aff8 <__malloc_unlock>
 800ae7a:	f026 0607 	bic.w	r6, r6, #7
 800ae7e:	1d23      	adds	r3, r4, #4
 800ae80:	1af2      	subs	r2, r6, r3
 800ae82:	d0b6      	beq.n	800adf2 <_malloc_r+0x22>
 800ae84:	1b9b      	subs	r3, r3, r6
 800ae86:	50a3      	str	r3, [r4, r2]
 800ae88:	e7b3      	b.n	800adf2 <_malloc_r+0x22>
 800ae8a:	6862      	ldr	r2, [r4, #4]
 800ae8c:	42a3      	cmp	r3, r4
 800ae8e:	bf0c      	ite	eq
 800ae90:	6032      	streq	r2, [r6, #0]
 800ae92:	605a      	strne	r2, [r3, #4]
 800ae94:	e7ec      	b.n	800ae70 <_malloc_r+0xa0>
 800ae96:	4623      	mov	r3, r4
 800ae98:	6864      	ldr	r4, [r4, #4]
 800ae9a:	e7b2      	b.n	800ae02 <_malloc_r+0x32>
 800ae9c:	4634      	mov	r4, r6
 800ae9e:	6876      	ldr	r6, [r6, #4]
 800aea0:	e7b9      	b.n	800ae16 <_malloc_r+0x46>
 800aea2:	230c      	movs	r3, #12
 800aea4:	4638      	mov	r0, r7
 800aea6:	603b      	str	r3, [r7, #0]
 800aea8:	f000 f8a6 	bl	800aff8 <__malloc_unlock>
 800aeac:	e7a1      	b.n	800adf2 <_malloc_r+0x22>
 800aeae:	6025      	str	r5, [r4, #0]
 800aeb0:	e7de      	b.n	800ae70 <_malloc_r+0xa0>
 800aeb2:	bf00      	nop
 800aeb4:	20003c2c 	.word	0x20003c2c

0800aeb8 <cleanup_glue>:
 800aeb8:	b538      	push	{r3, r4, r5, lr}
 800aeba:	460c      	mov	r4, r1
 800aebc:	6809      	ldr	r1, [r1, #0]
 800aebe:	4605      	mov	r5, r0
 800aec0:	b109      	cbz	r1, 800aec6 <cleanup_glue+0xe>
 800aec2:	f7ff fff9 	bl	800aeb8 <cleanup_glue>
 800aec6:	4621      	mov	r1, r4
 800aec8:	4628      	mov	r0, r5
 800aeca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aece:	f7ff bf17 	b.w	800ad00 <_free_r>
	...

0800aed4 <_reclaim_reent>:
 800aed4:	4b2c      	ldr	r3, [pc, #176]	; (800af88 <_reclaim_reent+0xb4>)
 800aed6:	b570      	push	{r4, r5, r6, lr}
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4604      	mov	r4, r0
 800aedc:	4283      	cmp	r3, r0
 800aede:	d051      	beq.n	800af84 <_reclaim_reent+0xb0>
 800aee0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800aee2:	b143      	cbz	r3, 800aef6 <_reclaim_reent+0x22>
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d14a      	bne.n	800af80 <_reclaim_reent+0xac>
 800aeea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aeec:	6819      	ldr	r1, [r3, #0]
 800aeee:	b111      	cbz	r1, 800aef6 <_reclaim_reent+0x22>
 800aef0:	4620      	mov	r0, r4
 800aef2:	f7ff ff05 	bl	800ad00 <_free_r>
 800aef6:	6961      	ldr	r1, [r4, #20]
 800aef8:	b111      	cbz	r1, 800af00 <_reclaim_reent+0x2c>
 800aefa:	4620      	mov	r0, r4
 800aefc:	f7ff ff00 	bl	800ad00 <_free_r>
 800af00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800af02:	b111      	cbz	r1, 800af0a <_reclaim_reent+0x36>
 800af04:	4620      	mov	r0, r4
 800af06:	f7ff fefb 	bl	800ad00 <_free_r>
 800af0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800af0c:	b111      	cbz	r1, 800af14 <_reclaim_reent+0x40>
 800af0e:	4620      	mov	r0, r4
 800af10:	f7ff fef6 	bl	800ad00 <_free_r>
 800af14:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800af16:	b111      	cbz	r1, 800af1e <_reclaim_reent+0x4a>
 800af18:	4620      	mov	r0, r4
 800af1a:	f7ff fef1 	bl	800ad00 <_free_r>
 800af1e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800af20:	b111      	cbz	r1, 800af28 <_reclaim_reent+0x54>
 800af22:	4620      	mov	r0, r4
 800af24:	f7ff feec 	bl	800ad00 <_free_r>
 800af28:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800af2a:	b111      	cbz	r1, 800af32 <_reclaim_reent+0x5e>
 800af2c:	4620      	mov	r0, r4
 800af2e:	f7ff fee7 	bl	800ad00 <_free_r>
 800af32:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800af34:	b111      	cbz	r1, 800af3c <_reclaim_reent+0x68>
 800af36:	4620      	mov	r0, r4
 800af38:	f7ff fee2 	bl	800ad00 <_free_r>
 800af3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af3e:	b111      	cbz	r1, 800af46 <_reclaim_reent+0x72>
 800af40:	4620      	mov	r0, r4
 800af42:	f7ff fedd 	bl	800ad00 <_free_r>
 800af46:	69a3      	ldr	r3, [r4, #24]
 800af48:	b1e3      	cbz	r3, 800af84 <_reclaim_reent+0xb0>
 800af4a:	4620      	mov	r0, r4
 800af4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800af4e:	4798      	blx	r3
 800af50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800af52:	b1b9      	cbz	r1, 800af84 <_reclaim_reent+0xb0>
 800af54:	4620      	mov	r0, r4
 800af56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af5a:	f7ff bfad 	b.w	800aeb8 <cleanup_glue>
 800af5e:	5949      	ldr	r1, [r1, r5]
 800af60:	b941      	cbnz	r1, 800af74 <_reclaim_reent+0xa0>
 800af62:	3504      	adds	r5, #4
 800af64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af66:	2d80      	cmp	r5, #128	; 0x80
 800af68:	68d9      	ldr	r1, [r3, #12]
 800af6a:	d1f8      	bne.n	800af5e <_reclaim_reent+0x8a>
 800af6c:	4620      	mov	r0, r4
 800af6e:	f7ff fec7 	bl	800ad00 <_free_r>
 800af72:	e7ba      	b.n	800aeea <_reclaim_reent+0x16>
 800af74:	680e      	ldr	r6, [r1, #0]
 800af76:	4620      	mov	r0, r4
 800af78:	f7ff fec2 	bl	800ad00 <_free_r>
 800af7c:	4631      	mov	r1, r6
 800af7e:	e7ef      	b.n	800af60 <_reclaim_reent+0x8c>
 800af80:	2500      	movs	r5, #0
 800af82:	e7ef      	b.n	800af64 <_reclaim_reent+0x90>
 800af84:	bd70      	pop	{r4, r5, r6, pc}
 800af86:	bf00      	nop
 800af88:	20000030 	.word	0x20000030

0800af8c <_sbrk_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	2300      	movs	r3, #0
 800af90:	4d05      	ldr	r5, [pc, #20]	; (800afa8 <_sbrk_r+0x1c>)
 800af92:	4604      	mov	r4, r0
 800af94:	4608      	mov	r0, r1
 800af96:	602b      	str	r3, [r5, #0]
 800af98:	f7f5 ff72 	bl	8000e80 <_sbrk>
 800af9c:	1c43      	adds	r3, r0, #1
 800af9e:	d102      	bne.n	800afa6 <_sbrk_r+0x1a>
 800afa0:	682b      	ldr	r3, [r5, #0]
 800afa2:	b103      	cbz	r3, 800afa6 <_sbrk_r+0x1a>
 800afa4:	6023      	str	r3, [r4, #0]
 800afa6:	bd38      	pop	{r3, r4, r5, pc}
 800afa8:	20003c34 	.word	0x20003c34

0800afac <siprintf>:
 800afac:	b40e      	push	{r1, r2, r3}
 800afae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800afb2:	b500      	push	{lr}
 800afb4:	b09c      	sub	sp, #112	; 0x70
 800afb6:	ab1d      	add	r3, sp, #116	; 0x74
 800afb8:	9002      	str	r0, [sp, #8]
 800afba:	9006      	str	r0, [sp, #24]
 800afbc:	9107      	str	r1, [sp, #28]
 800afbe:	9104      	str	r1, [sp, #16]
 800afc0:	4808      	ldr	r0, [pc, #32]	; (800afe4 <siprintf+0x38>)
 800afc2:	4909      	ldr	r1, [pc, #36]	; (800afe8 <siprintf+0x3c>)
 800afc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800afc8:	9105      	str	r1, [sp, #20]
 800afca:	6800      	ldr	r0, [r0, #0]
 800afcc:	a902      	add	r1, sp, #8
 800afce:	9301      	str	r3, [sp, #4]
 800afd0:	f000 f874 	bl	800b0bc <_svfiprintf_r>
 800afd4:	2200      	movs	r2, #0
 800afd6:	9b02      	ldr	r3, [sp, #8]
 800afd8:	701a      	strb	r2, [r3, #0]
 800afda:	b01c      	add	sp, #112	; 0x70
 800afdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800afe0:	b003      	add	sp, #12
 800afe2:	4770      	bx	lr
 800afe4:	20000030 	.word	0x20000030
 800afe8:	ffff0208 	.word	0xffff0208

0800afec <__malloc_lock>:
 800afec:	4801      	ldr	r0, [pc, #4]	; (800aff4 <__malloc_lock+0x8>)
 800afee:	f7ff be5f 	b.w	800acb0 <__retarget_lock_acquire_recursive>
 800aff2:	bf00      	nop
 800aff4:	20003c28 	.word	0x20003c28

0800aff8 <__malloc_unlock>:
 800aff8:	4801      	ldr	r0, [pc, #4]	; (800b000 <__malloc_unlock+0x8>)
 800affa:	f7ff be5a 	b.w	800acb2 <__retarget_lock_release_recursive>
 800affe:	bf00      	nop
 800b000:	20003c28 	.word	0x20003c28

0800b004 <__ssputs_r>:
 800b004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b008:	688e      	ldr	r6, [r1, #8]
 800b00a:	4682      	mov	sl, r0
 800b00c:	429e      	cmp	r6, r3
 800b00e:	460c      	mov	r4, r1
 800b010:	4690      	mov	r8, r2
 800b012:	461f      	mov	r7, r3
 800b014:	d838      	bhi.n	800b088 <__ssputs_r+0x84>
 800b016:	898a      	ldrh	r2, [r1, #12]
 800b018:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b01c:	d032      	beq.n	800b084 <__ssputs_r+0x80>
 800b01e:	6825      	ldr	r5, [r4, #0]
 800b020:	6909      	ldr	r1, [r1, #16]
 800b022:	3301      	adds	r3, #1
 800b024:	eba5 0901 	sub.w	r9, r5, r1
 800b028:	6965      	ldr	r5, [r4, #20]
 800b02a:	444b      	add	r3, r9
 800b02c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b030:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b034:	106d      	asrs	r5, r5, #1
 800b036:	429d      	cmp	r5, r3
 800b038:	bf38      	it	cc
 800b03a:	461d      	movcc	r5, r3
 800b03c:	0553      	lsls	r3, r2, #21
 800b03e:	d531      	bpl.n	800b0a4 <__ssputs_r+0xa0>
 800b040:	4629      	mov	r1, r5
 800b042:	f7ff fec5 	bl	800add0 <_malloc_r>
 800b046:	4606      	mov	r6, r0
 800b048:	b950      	cbnz	r0, 800b060 <__ssputs_r+0x5c>
 800b04a:	230c      	movs	r3, #12
 800b04c:	f04f 30ff 	mov.w	r0, #4294967295
 800b050:	f8ca 3000 	str.w	r3, [sl]
 800b054:	89a3      	ldrh	r3, [r4, #12]
 800b056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b05a:	81a3      	strh	r3, [r4, #12]
 800b05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b060:	464a      	mov	r2, r9
 800b062:	6921      	ldr	r1, [r4, #16]
 800b064:	f7ff fe36 	bl	800acd4 <memcpy>
 800b068:	89a3      	ldrh	r3, [r4, #12]
 800b06a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b06e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b072:	81a3      	strh	r3, [r4, #12]
 800b074:	6126      	str	r6, [r4, #16]
 800b076:	444e      	add	r6, r9
 800b078:	6026      	str	r6, [r4, #0]
 800b07a:	463e      	mov	r6, r7
 800b07c:	6165      	str	r5, [r4, #20]
 800b07e:	eba5 0509 	sub.w	r5, r5, r9
 800b082:	60a5      	str	r5, [r4, #8]
 800b084:	42be      	cmp	r6, r7
 800b086:	d900      	bls.n	800b08a <__ssputs_r+0x86>
 800b088:	463e      	mov	r6, r7
 800b08a:	4632      	mov	r2, r6
 800b08c:	4641      	mov	r1, r8
 800b08e:	6820      	ldr	r0, [r4, #0]
 800b090:	f000 fab8 	bl	800b604 <memmove>
 800b094:	68a3      	ldr	r3, [r4, #8]
 800b096:	2000      	movs	r0, #0
 800b098:	1b9b      	subs	r3, r3, r6
 800b09a:	60a3      	str	r3, [r4, #8]
 800b09c:	6823      	ldr	r3, [r4, #0]
 800b09e:	4433      	add	r3, r6
 800b0a0:	6023      	str	r3, [r4, #0]
 800b0a2:	e7db      	b.n	800b05c <__ssputs_r+0x58>
 800b0a4:	462a      	mov	r2, r5
 800b0a6:	f000 fac7 	bl	800b638 <_realloc_r>
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d1e1      	bne.n	800b074 <__ssputs_r+0x70>
 800b0b0:	4650      	mov	r0, sl
 800b0b2:	6921      	ldr	r1, [r4, #16]
 800b0b4:	f7ff fe24 	bl	800ad00 <_free_r>
 800b0b8:	e7c7      	b.n	800b04a <__ssputs_r+0x46>
	...

0800b0bc <_svfiprintf_r>:
 800b0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c0:	4698      	mov	r8, r3
 800b0c2:	898b      	ldrh	r3, [r1, #12]
 800b0c4:	4607      	mov	r7, r0
 800b0c6:	061b      	lsls	r3, r3, #24
 800b0c8:	460d      	mov	r5, r1
 800b0ca:	4614      	mov	r4, r2
 800b0cc:	b09d      	sub	sp, #116	; 0x74
 800b0ce:	d50e      	bpl.n	800b0ee <_svfiprintf_r+0x32>
 800b0d0:	690b      	ldr	r3, [r1, #16]
 800b0d2:	b963      	cbnz	r3, 800b0ee <_svfiprintf_r+0x32>
 800b0d4:	2140      	movs	r1, #64	; 0x40
 800b0d6:	f7ff fe7b 	bl	800add0 <_malloc_r>
 800b0da:	6028      	str	r0, [r5, #0]
 800b0dc:	6128      	str	r0, [r5, #16]
 800b0de:	b920      	cbnz	r0, 800b0ea <_svfiprintf_r+0x2e>
 800b0e0:	230c      	movs	r3, #12
 800b0e2:	603b      	str	r3, [r7, #0]
 800b0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e8:	e0d1      	b.n	800b28e <_svfiprintf_r+0x1d2>
 800b0ea:	2340      	movs	r3, #64	; 0x40
 800b0ec:	616b      	str	r3, [r5, #20]
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b0f2:	2320      	movs	r3, #32
 800b0f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0f8:	2330      	movs	r3, #48	; 0x30
 800b0fa:	f04f 0901 	mov.w	r9, #1
 800b0fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800b102:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b2a8 <_svfiprintf_r+0x1ec>
 800b106:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b10a:	4623      	mov	r3, r4
 800b10c:	469a      	mov	sl, r3
 800b10e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b112:	b10a      	cbz	r2, 800b118 <_svfiprintf_r+0x5c>
 800b114:	2a25      	cmp	r2, #37	; 0x25
 800b116:	d1f9      	bne.n	800b10c <_svfiprintf_r+0x50>
 800b118:	ebba 0b04 	subs.w	fp, sl, r4
 800b11c:	d00b      	beq.n	800b136 <_svfiprintf_r+0x7a>
 800b11e:	465b      	mov	r3, fp
 800b120:	4622      	mov	r2, r4
 800b122:	4629      	mov	r1, r5
 800b124:	4638      	mov	r0, r7
 800b126:	f7ff ff6d 	bl	800b004 <__ssputs_r>
 800b12a:	3001      	adds	r0, #1
 800b12c:	f000 80aa 	beq.w	800b284 <_svfiprintf_r+0x1c8>
 800b130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b132:	445a      	add	r2, fp
 800b134:	9209      	str	r2, [sp, #36]	; 0x24
 800b136:	f89a 3000 	ldrb.w	r3, [sl]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f000 80a2 	beq.w	800b284 <_svfiprintf_r+0x1c8>
 800b140:	2300      	movs	r3, #0
 800b142:	f04f 32ff 	mov.w	r2, #4294967295
 800b146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b14a:	f10a 0a01 	add.w	sl, sl, #1
 800b14e:	9304      	str	r3, [sp, #16]
 800b150:	9307      	str	r3, [sp, #28]
 800b152:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b156:	931a      	str	r3, [sp, #104]	; 0x68
 800b158:	4654      	mov	r4, sl
 800b15a:	2205      	movs	r2, #5
 800b15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b160:	4851      	ldr	r0, [pc, #324]	; (800b2a8 <_svfiprintf_r+0x1ec>)
 800b162:	f000 fa41 	bl	800b5e8 <memchr>
 800b166:	9a04      	ldr	r2, [sp, #16]
 800b168:	b9d8      	cbnz	r0, 800b1a2 <_svfiprintf_r+0xe6>
 800b16a:	06d0      	lsls	r0, r2, #27
 800b16c:	bf44      	itt	mi
 800b16e:	2320      	movmi	r3, #32
 800b170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b174:	0711      	lsls	r1, r2, #28
 800b176:	bf44      	itt	mi
 800b178:	232b      	movmi	r3, #43	; 0x2b
 800b17a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b17e:	f89a 3000 	ldrb.w	r3, [sl]
 800b182:	2b2a      	cmp	r3, #42	; 0x2a
 800b184:	d015      	beq.n	800b1b2 <_svfiprintf_r+0xf6>
 800b186:	4654      	mov	r4, sl
 800b188:	2000      	movs	r0, #0
 800b18a:	f04f 0c0a 	mov.w	ip, #10
 800b18e:	9a07      	ldr	r2, [sp, #28]
 800b190:	4621      	mov	r1, r4
 800b192:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b196:	3b30      	subs	r3, #48	; 0x30
 800b198:	2b09      	cmp	r3, #9
 800b19a:	d94e      	bls.n	800b23a <_svfiprintf_r+0x17e>
 800b19c:	b1b0      	cbz	r0, 800b1cc <_svfiprintf_r+0x110>
 800b19e:	9207      	str	r2, [sp, #28]
 800b1a0:	e014      	b.n	800b1cc <_svfiprintf_r+0x110>
 800b1a2:	eba0 0308 	sub.w	r3, r0, r8
 800b1a6:	fa09 f303 	lsl.w	r3, r9, r3
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	46a2      	mov	sl, r4
 800b1ae:	9304      	str	r3, [sp, #16]
 800b1b0:	e7d2      	b.n	800b158 <_svfiprintf_r+0x9c>
 800b1b2:	9b03      	ldr	r3, [sp, #12]
 800b1b4:	1d19      	adds	r1, r3, #4
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	9103      	str	r1, [sp, #12]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	bfbb      	ittet	lt
 800b1be:	425b      	neglt	r3, r3
 800b1c0:	f042 0202 	orrlt.w	r2, r2, #2
 800b1c4:	9307      	strge	r3, [sp, #28]
 800b1c6:	9307      	strlt	r3, [sp, #28]
 800b1c8:	bfb8      	it	lt
 800b1ca:	9204      	strlt	r2, [sp, #16]
 800b1cc:	7823      	ldrb	r3, [r4, #0]
 800b1ce:	2b2e      	cmp	r3, #46	; 0x2e
 800b1d0:	d10c      	bne.n	800b1ec <_svfiprintf_r+0x130>
 800b1d2:	7863      	ldrb	r3, [r4, #1]
 800b1d4:	2b2a      	cmp	r3, #42	; 0x2a
 800b1d6:	d135      	bne.n	800b244 <_svfiprintf_r+0x188>
 800b1d8:	9b03      	ldr	r3, [sp, #12]
 800b1da:	3402      	adds	r4, #2
 800b1dc:	1d1a      	adds	r2, r3, #4
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	9203      	str	r2, [sp, #12]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	bfb8      	it	lt
 800b1e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1ea:	9305      	str	r3, [sp, #20]
 800b1ec:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b2ac <_svfiprintf_r+0x1f0>
 800b1f0:	2203      	movs	r2, #3
 800b1f2:	4650      	mov	r0, sl
 800b1f4:	7821      	ldrb	r1, [r4, #0]
 800b1f6:	f000 f9f7 	bl	800b5e8 <memchr>
 800b1fa:	b140      	cbz	r0, 800b20e <_svfiprintf_r+0x152>
 800b1fc:	2340      	movs	r3, #64	; 0x40
 800b1fe:	eba0 000a 	sub.w	r0, r0, sl
 800b202:	fa03 f000 	lsl.w	r0, r3, r0
 800b206:	9b04      	ldr	r3, [sp, #16]
 800b208:	3401      	adds	r4, #1
 800b20a:	4303      	orrs	r3, r0
 800b20c:	9304      	str	r3, [sp, #16]
 800b20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b212:	2206      	movs	r2, #6
 800b214:	4826      	ldr	r0, [pc, #152]	; (800b2b0 <_svfiprintf_r+0x1f4>)
 800b216:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b21a:	f000 f9e5 	bl	800b5e8 <memchr>
 800b21e:	2800      	cmp	r0, #0
 800b220:	d038      	beq.n	800b294 <_svfiprintf_r+0x1d8>
 800b222:	4b24      	ldr	r3, [pc, #144]	; (800b2b4 <_svfiprintf_r+0x1f8>)
 800b224:	bb1b      	cbnz	r3, 800b26e <_svfiprintf_r+0x1b2>
 800b226:	9b03      	ldr	r3, [sp, #12]
 800b228:	3307      	adds	r3, #7
 800b22a:	f023 0307 	bic.w	r3, r3, #7
 800b22e:	3308      	adds	r3, #8
 800b230:	9303      	str	r3, [sp, #12]
 800b232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b234:	4433      	add	r3, r6
 800b236:	9309      	str	r3, [sp, #36]	; 0x24
 800b238:	e767      	b.n	800b10a <_svfiprintf_r+0x4e>
 800b23a:	460c      	mov	r4, r1
 800b23c:	2001      	movs	r0, #1
 800b23e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b242:	e7a5      	b.n	800b190 <_svfiprintf_r+0xd4>
 800b244:	2300      	movs	r3, #0
 800b246:	f04f 0c0a 	mov.w	ip, #10
 800b24a:	4619      	mov	r1, r3
 800b24c:	3401      	adds	r4, #1
 800b24e:	9305      	str	r3, [sp, #20]
 800b250:	4620      	mov	r0, r4
 800b252:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b256:	3a30      	subs	r2, #48	; 0x30
 800b258:	2a09      	cmp	r2, #9
 800b25a:	d903      	bls.n	800b264 <_svfiprintf_r+0x1a8>
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d0c5      	beq.n	800b1ec <_svfiprintf_r+0x130>
 800b260:	9105      	str	r1, [sp, #20]
 800b262:	e7c3      	b.n	800b1ec <_svfiprintf_r+0x130>
 800b264:	4604      	mov	r4, r0
 800b266:	2301      	movs	r3, #1
 800b268:	fb0c 2101 	mla	r1, ip, r1, r2
 800b26c:	e7f0      	b.n	800b250 <_svfiprintf_r+0x194>
 800b26e:	ab03      	add	r3, sp, #12
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	462a      	mov	r2, r5
 800b274:	4638      	mov	r0, r7
 800b276:	4b10      	ldr	r3, [pc, #64]	; (800b2b8 <_svfiprintf_r+0x1fc>)
 800b278:	a904      	add	r1, sp, #16
 800b27a:	f3af 8000 	nop.w
 800b27e:	1c42      	adds	r2, r0, #1
 800b280:	4606      	mov	r6, r0
 800b282:	d1d6      	bne.n	800b232 <_svfiprintf_r+0x176>
 800b284:	89ab      	ldrh	r3, [r5, #12]
 800b286:	065b      	lsls	r3, r3, #25
 800b288:	f53f af2c 	bmi.w	800b0e4 <_svfiprintf_r+0x28>
 800b28c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b28e:	b01d      	add	sp, #116	; 0x74
 800b290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b294:	ab03      	add	r3, sp, #12
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	462a      	mov	r2, r5
 800b29a:	4638      	mov	r0, r7
 800b29c:	4b06      	ldr	r3, [pc, #24]	; (800b2b8 <_svfiprintf_r+0x1fc>)
 800b29e:	a904      	add	r1, sp, #16
 800b2a0:	f000 f87c 	bl	800b39c <_printf_i>
 800b2a4:	e7eb      	b.n	800b27e <_svfiprintf_r+0x1c2>
 800b2a6:	bf00      	nop
 800b2a8:	0800b8c8 	.word	0x0800b8c8
 800b2ac:	0800b8ce 	.word	0x0800b8ce
 800b2b0:	0800b8d2 	.word	0x0800b8d2
 800b2b4:	00000000 	.word	0x00000000
 800b2b8:	0800b005 	.word	0x0800b005

0800b2bc <_printf_common>:
 800b2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c0:	4616      	mov	r6, r2
 800b2c2:	4699      	mov	r9, r3
 800b2c4:	688a      	ldr	r2, [r1, #8]
 800b2c6:	690b      	ldr	r3, [r1, #16]
 800b2c8:	4607      	mov	r7, r0
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	bfb8      	it	lt
 800b2ce:	4613      	movlt	r3, r2
 800b2d0:	6033      	str	r3, [r6, #0]
 800b2d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b2dc:	b10a      	cbz	r2, 800b2e2 <_printf_common+0x26>
 800b2de:	3301      	adds	r3, #1
 800b2e0:	6033      	str	r3, [r6, #0]
 800b2e2:	6823      	ldr	r3, [r4, #0]
 800b2e4:	0699      	lsls	r1, r3, #26
 800b2e6:	bf42      	ittt	mi
 800b2e8:	6833      	ldrmi	r3, [r6, #0]
 800b2ea:	3302      	addmi	r3, #2
 800b2ec:	6033      	strmi	r3, [r6, #0]
 800b2ee:	6825      	ldr	r5, [r4, #0]
 800b2f0:	f015 0506 	ands.w	r5, r5, #6
 800b2f4:	d106      	bne.n	800b304 <_printf_common+0x48>
 800b2f6:	f104 0a19 	add.w	sl, r4, #25
 800b2fa:	68e3      	ldr	r3, [r4, #12]
 800b2fc:	6832      	ldr	r2, [r6, #0]
 800b2fe:	1a9b      	subs	r3, r3, r2
 800b300:	42ab      	cmp	r3, r5
 800b302:	dc28      	bgt.n	800b356 <_printf_common+0x9a>
 800b304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b308:	1e13      	subs	r3, r2, #0
 800b30a:	6822      	ldr	r2, [r4, #0]
 800b30c:	bf18      	it	ne
 800b30e:	2301      	movne	r3, #1
 800b310:	0692      	lsls	r2, r2, #26
 800b312:	d42d      	bmi.n	800b370 <_printf_common+0xb4>
 800b314:	4649      	mov	r1, r9
 800b316:	4638      	mov	r0, r7
 800b318:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b31c:	47c0      	blx	r8
 800b31e:	3001      	adds	r0, #1
 800b320:	d020      	beq.n	800b364 <_printf_common+0xa8>
 800b322:	6823      	ldr	r3, [r4, #0]
 800b324:	68e5      	ldr	r5, [r4, #12]
 800b326:	f003 0306 	and.w	r3, r3, #6
 800b32a:	2b04      	cmp	r3, #4
 800b32c:	bf18      	it	ne
 800b32e:	2500      	movne	r5, #0
 800b330:	6832      	ldr	r2, [r6, #0]
 800b332:	f04f 0600 	mov.w	r6, #0
 800b336:	68a3      	ldr	r3, [r4, #8]
 800b338:	bf08      	it	eq
 800b33a:	1aad      	subeq	r5, r5, r2
 800b33c:	6922      	ldr	r2, [r4, #16]
 800b33e:	bf08      	it	eq
 800b340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b344:	4293      	cmp	r3, r2
 800b346:	bfc4      	itt	gt
 800b348:	1a9b      	subgt	r3, r3, r2
 800b34a:	18ed      	addgt	r5, r5, r3
 800b34c:	341a      	adds	r4, #26
 800b34e:	42b5      	cmp	r5, r6
 800b350:	d11a      	bne.n	800b388 <_printf_common+0xcc>
 800b352:	2000      	movs	r0, #0
 800b354:	e008      	b.n	800b368 <_printf_common+0xac>
 800b356:	2301      	movs	r3, #1
 800b358:	4652      	mov	r2, sl
 800b35a:	4649      	mov	r1, r9
 800b35c:	4638      	mov	r0, r7
 800b35e:	47c0      	blx	r8
 800b360:	3001      	adds	r0, #1
 800b362:	d103      	bne.n	800b36c <_printf_common+0xb0>
 800b364:	f04f 30ff 	mov.w	r0, #4294967295
 800b368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b36c:	3501      	adds	r5, #1
 800b36e:	e7c4      	b.n	800b2fa <_printf_common+0x3e>
 800b370:	2030      	movs	r0, #48	; 0x30
 800b372:	18e1      	adds	r1, r4, r3
 800b374:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b378:	1c5a      	adds	r2, r3, #1
 800b37a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b37e:	4422      	add	r2, r4
 800b380:	3302      	adds	r3, #2
 800b382:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b386:	e7c5      	b.n	800b314 <_printf_common+0x58>
 800b388:	2301      	movs	r3, #1
 800b38a:	4622      	mov	r2, r4
 800b38c:	4649      	mov	r1, r9
 800b38e:	4638      	mov	r0, r7
 800b390:	47c0      	blx	r8
 800b392:	3001      	adds	r0, #1
 800b394:	d0e6      	beq.n	800b364 <_printf_common+0xa8>
 800b396:	3601      	adds	r6, #1
 800b398:	e7d9      	b.n	800b34e <_printf_common+0x92>
	...

0800b39c <_printf_i>:
 800b39c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3a0:	7e0f      	ldrb	r7, [r1, #24]
 800b3a2:	4691      	mov	r9, r2
 800b3a4:	2f78      	cmp	r7, #120	; 0x78
 800b3a6:	4680      	mov	r8, r0
 800b3a8:	460c      	mov	r4, r1
 800b3aa:	469a      	mov	sl, r3
 800b3ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b3ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b3b2:	d807      	bhi.n	800b3c4 <_printf_i+0x28>
 800b3b4:	2f62      	cmp	r7, #98	; 0x62
 800b3b6:	d80a      	bhi.n	800b3ce <_printf_i+0x32>
 800b3b8:	2f00      	cmp	r7, #0
 800b3ba:	f000 80d9 	beq.w	800b570 <_printf_i+0x1d4>
 800b3be:	2f58      	cmp	r7, #88	; 0x58
 800b3c0:	f000 80a4 	beq.w	800b50c <_printf_i+0x170>
 800b3c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b3cc:	e03a      	b.n	800b444 <_printf_i+0xa8>
 800b3ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b3d2:	2b15      	cmp	r3, #21
 800b3d4:	d8f6      	bhi.n	800b3c4 <_printf_i+0x28>
 800b3d6:	a101      	add	r1, pc, #4	; (adr r1, 800b3dc <_printf_i+0x40>)
 800b3d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3dc:	0800b435 	.word	0x0800b435
 800b3e0:	0800b449 	.word	0x0800b449
 800b3e4:	0800b3c5 	.word	0x0800b3c5
 800b3e8:	0800b3c5 	.word	0x0800b3c5
 800b3ec:	0800b3c5 	.word	0x0800b3c5
 800b3f0:	0800b3c5 	.word	0x0800b3c5
 800b3f4:	0800b449 	.word	0x0800b449
 800b3f8:	0800b3c5 	.word	0x0800b3c5
 800b3fc:	0800b3c5 	.word	0x0800b3c5
 800b400:	0800b3c5 	.word	0x0800b3c5
 800b404:	0800b3c5 	.word	0x0800b3c5
 800b408:	0800b557 	.word	0x0800b557
 800b40c:	0800b479 	.word	0x0800b479
 800b410:	0800b539 	.word	0x0800b539
 800b414:	0800b3c5 	.word	0x0800b3c5
 800b418:	0800b3c5 	.word	0x0800b3c5
 800b41c:	0800b579 	.word	0x0800b579
 800b420:	0800b3c5 	.word	0x0800b3c5
 800b424:	0800b479 	.word	0x0800b479
 800b428:	0800b3c5 	.word	0x0800b3c5
 800b42c:	0800b3c5 	.word	0x0800b3c5
 800b430:	0800b541 	.word	0x0800b541
 800b434:	682b      	ldr	r3, [r5, #0]
 800b436:	1d1a      	adds	r2, r3, #4
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	602a      	str	r2, [r5, #0]
 800b43c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b444:	2301      	movs	r3, #1
 800b446:	e0a4      	b.n	800b592 <_printf_i+0x1f6>
 800b448:	6820      	ldr	r0, [r4, #0]
 800b44a:	6829      	ldr	r1, [r5, #0]
 800b44c:	0606      	lsls	r6, r0, #24
 800b44e:	f101 0304 	add.w	r3, r1, #4
 800b452:	d50a      	bpl.n	800b46a <_printf_i+0xce>
 800b454:	680e      	ldr	r6, [r1, #0]
 800b456:	602b      	str	r3, [r5, #0]
 800b458:	2e00      	cmp	r6, #0
 800b45a:	da03      	bge.n	800b464 <_printf_i+0xc8>
 800b45c:	232d      	movs	r3, #45	; 0x2d
 800b45e:	4276      	negs	r6, r6
 800b460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b464:	230a      	movs	r3, #10
 800b466:	485e      	ldr	r0, [pc, #376]	; (800b5e0 <_printf_i+0x244>)
 800b468:	e019      	b.n	800b49e <_printf_i+0x102>
 800b46a:	680e      	ldr	r6, [r1, #0]
 800b46c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b470:	602b      	str	r3, [r5, #0]
 800b472:	bf18      	it	ne
 800b474:	b236      	sxthne	r6, r6
 800b476:	e7ef      	b.n	800b458 <_printf_i+0xbc>
 800b478:	682b      	ldr	r3, [r5, #0]
 800b47a:	6820      	ldr	r0, [r4, #0]
 800b47c:	1d19      	adds	r1, r3, #4
 800b47e:	6029      	str	r1, [r5, #0]
 800b480:	0601      	lsls	r1, r0, #24
 800b482:	d501      	bpl.n	800b488 <_printf_i+0xec>
 800b484:	681e      	ldr	r6, [r3, #0]
 800b486:	e002      	b.n	800b48e <_printf_i+0xf2>
 800b488:	0646      	lsls	r6, r0, #25
 800b48a:	d5fb      	bpl.n	800b484 <_printf_i+0xe8>
 800b48c:	881e      	ldrh	r6, [r3, #0]
 800b48e:	2f6f      	cmp	r7, #111	; 0x6f
 800b490:	bf0c      	ite	eq
 800b492:	2308      	moveq	r3, #8
 800b494:	230a      	movne	r3, #10
 800b496:	4852      	ldr	r0, [pc, #328]	; (800b5e0 <_printf_i+0x244>)
 800b498:	2100      	movs	r1, #0
 800b49a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b49e:	6865      	ldr	r5, [r4, #4]
 800b4a0:	2d00      	cmp	r5, #0
 800b4a2:	bfa8      	it	ge
 800b4a4:	6821      	ldrge	r1, [r4, #0]
 800b4a6:	60a5      	str	r5, [r4, #8]
 800b4a8:	bfa4      	itt	ge
 800b4aa:	f021 0104 	bicge.w	r1, r1, #4
 800b4ae:	6021      	strge	r1, [r4, #0]
 800b4b0:	b90e      	cbnz	r6, 800b4b6 <_printf_i+0x11a>
 800b4b2:	2d00      	cmp	r5, #0
 800b4b4:	d04d      	beq.n	800b552 <_printf_i+0x1b6>
 800b4b6:	4615      	mov	r5, r2
 800b4b8:	fbb6 f1f3 	udiv	r1, r6, r3
 800b4bc:	fb03 6711 	mls	r7, r3, r1, r6
 800b4c0:	5dc7      	ldrb	r7, [r0, r7]
 800b4c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b4c6:	4637      	mov	r7, r6
 800b4c8:	42bb      	cmp	r3, r7
 800b4ca:	460e      	mov	r6, r1
 800b4cc:	d9f4      	bls.n	800b4b8 <_printf_i+0x11c>
 800b4ce:	2b08      	cmp	r3, #8
 800b4d0:	d10b      	bne.n	800b4ea <_printf_i+0x14e>
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	07de      	lsls	r6, r3, #31
 800b4d6:	d508      	bpl.n	800b4ea <_printf_i+0x14e>
 800b4d8:	6923      	ldr	r3, [r4, #16]
 800b4da:	6861      	ldr	r1, [r4, #4]
 800b4dc:	4299      	cmp	r1, r3
 800b4de:	bfde      	ittt	le
 800b4e0:	2330      	movle	r3, #48	; 0x30
 800b4e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b4e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b4ea:	1b52      	subs	r2, r2, r5
 800b4ec:	6122      	str	r2, [r4, #16]
 800b4ee:	464b      	mov	r3, r9
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	4640      	mov	r0, r8
 800b4f4:	f8cd a000 	str.w	sl, [sp]
 800b4f8:	aa03      	add	r2, sp, #12
 800b4fa:	f7ff fedf 	bl	800b2bc <_printf_common>
 800b4fe:	3001      	adds	r0, #1
 800b500:	d14c      	bne.n	800b59c <_printf_i+0x200>
 800b502:	f04f 30ff 	mov.w	r0, #4294967295
 800b506:	b004      	add	sp, #16
 800b508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b50c:	4834      	ldr	r0, [pc, #208]	; (800b5e0 <_printf_i+0x244>)
 800b50e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b512:	6829      	ldr	r1, [r5, #0]
 800b514:	6823      	ldr	r3, [r4, #0]
 800b516:	f851 6b04 	ldr.w	r6, [r1], #4
 800b51a:	6029      	str	r1, [r5, #0]
 800b51c:	061d      	lsls	r5, r3, #24
 800b51e:	d514      	bpl.n	800b54a <_printf_i+0x1ae>
 800b520:	07df      	lsls	r7, r3, #31
 800b522:	bf44      	itt	mi
 800b524:	f043 0320 	orrmi.w	r3, r3, #32
 800b528:	6023      	strmi	r3, [r4, #0]
 800b52a:	b91e      	cbnz	r6, 800b534 <_printf_i+0x198>
 800b52c:	6823      	ldr	r3, [r4, #0]
 800b52e:	f023 0320 	bic.w	r3, r3, #32
 800b532:	6023      	str	r3, [r4, #0]
 800b534:	2310      	movs	r3, #16
 800b536:	e7af      	b.n	800b498 <_printf_i+0xfc>
 800b538:	6823      	ldr	r3, [r4, #0]
 800b53a:	f043 0320 	orr.w	r3, r3, #32
 800b53e:	6023      	str	r3, [r4, #0]
 800b540:	2378      	movs	r3, #120	; 0x78
 800b542:	4828      	ldr	r0, [pc, #160]	; (800b5e4 <_printf_i+0x248>)
 800b544:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b548:	e7e3      	b.n	800b512 <_printf_i+0x176>
 800b54a:	0659      	lsls	r1, r3, #25
 800b54c:	bf48      	it	mi
 800b54e:	b2b6      	uxthmi	r6, r6
 800b550:	e7e6      	b.n	800b520 <_printf_i+0x184>
 800b552:	4615      	mov	r5, r2
 800b554:	e7bb      	b.n	800b4ce <_printf_i+0x132>
 800b556:	682b      	ldr	r3, [r5, #0]
 800b558:	6826      	ldr	r6, [r4, #0]
 800b55a:	1d18      	adds	r0, r3, #4
 800b55c:	6961      	ldr	r1, [r4, #20]
 800b55e:	6028      	str	r0, [r5, #0]
 800b560:	0635      	lsls	r5, r6, #24
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	d501      	bpl.n	800b56a <_printf_i+0x1ce>
 800b566:	6019      	str	r1, [r3, #0]
 800b568:	e002      	b.n	800b570 <_printf_i+0x1d4>
 800b56a:	0670      	lsls	r0, r6, #25
 800b56c:	d5fb      	bpl.n	800b566 <_printf_i+0x1ca>
 800b56e:	8019      	strh	r1, [r3, #0]
 800b570:	2300      	movs	r3, #0
 800b572:	4615      	mov	r5, r2
 800b574:	6123      	str	r3, [r4, #16]
 800b576:	e7ba      	b.n	800b4ee <_printf_i+0x152>
 800b578:	682b      	ldr	r3, [r5, #0]
 800b57a:	2100      	movs	r1, #0
 800b57c:	1d1a      	adds	r2, r3, #4
 800b57e:	602a      	str	r2, [r5, #0]
 800b580:	681d      	ldr	r5, [r3, #0]
 800b582:	6862      	ldr	r2, [r4, #4]
 800b584:	4628      	mov	r0, r5
 800b586:	f000 f82f 	bl	800b5e8 <memchr>
 800b58a:	b108      	cbz	r0, 800b590 <_printf_i+0x1f4>
 800b58c:	1b40      	subs	r0, r0, r5
 800b58e:	6060      	str	r0, [r4, #4]
 800b590:	6863      	ldr	r3, [r4, #4]
 800b592:	6123      	str	r3, [r4, #16]
 800b594:	2300      	movs	r3, #0
 800b596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b59a:	e7a8      	b.n	800b4ee <_printf_i+0x152>
 800b59c:	462a      	mov	r2, r5
 800b59e:	4649      	mov	r1, r9
 800b5a0:	4640      	mov	r0, r8
 800b5a2:	6923      	ldr	r3, [r4, #16]
 800b5a4:	47d0      	blx	sl
 800b5a6:	3001      	adds	r0, #1
 800b5a8:	d0ab      	beq.n	800b502 <_printf_i+0x166>
 800b5aa:	6823      	ldr	r3, [r4, #0]
 800b5ac:	079b      	lsls	r3, r3, #30
 800b5ae:	d413      	bmi.n	800b5d8 <_printf_i+0x23c>
 800b5b0:	68e0      	ldr	r0, [r4, #12]
 800b5b2:	9b03      	ldr	r3, [sp, #12]
 800b5b4:	4298      	cmp	r0, r3
 800b5b6:	bfb8      	it	lt
 800b5b8:	4618      	movlt	r0, r3
 800b5ba:	e7a4      	b.n	800b506 <_printf_i+0x16a>
 800b5bc:	2301      	movs	r3, #1
 800b5be:	4632      	mov	r2, r6
 800b5c0:	4649      	mov	r1, r9
 800b5c2:	4640      	mov	r0, r8
 800b5c4:	47d0      	blx	sl
 800b5c6:	3001      	adds	r0, #1
 800b5c8:	d09b      	beq.n	800b502 <_printf_i+0x166>
 800b5ca:	3501      	adds	r5, #1
 800b5cc:	68e3      	ldr	r3, [r4, #12]
 800b5ce:	9903      	ldr	r1, [sp, #12]
 800b5d0:	1a5b      	subs	r3, r3, r1
 800b5d2:	42ab      	cmp	r3, r5
 800b5d4:	dcf2      	bgt.n	800b5bc <_printf_i+0x220>
 800b5d6:	e7eb      	b.n	800b5b0 <_printf_i+0x214>
 800b5d8:	2500      	movs	r5, #0
 800b5da:	f104 0619 	add.w	r6, r4, #25
 800b5de:	e7f5      	b.n	800b5cc <_printf_i+0x230>
 800b5e0:	0800b8d9 	.word	0x0800b8d9
 800b5e4:	0800b8ea 	.word	0x0800b8ea

0800b5e8 <memchr>:
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	b510      	push	{r4, lr}
 800b5ec:	b2c9      	uxtb	r1, r1
 800b5ee:	4402      	add	r2, r0
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	d101      	bne.n	800b5fa <memchr+0x12>
 800b5f6:	2000      	movs	r0, #0
 800b5f8:	e003      	b.n	800b602 <memchr+0x1a>
 800b5fa:	7804      	ldrb	r4, [r0, #0]
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	428c      	cmp	r4, r1
 800b600:	d1f6      	bne.n	800b5f0 <memchr+0x8>
 800b602:	bd10      	pop	{r4, pc}

0800b604 <memmove>:
 800b604:	4288      	cmp	r0, r1
 800b606:	b510      	push	{r4, lr}
 800b608:	eb01 0402 	add.w	r4, r1, r2
 800b60c:	d902      	bls.n	800b614 <memmove+0x10>
 800b60e:	4284      	cmp	r4, r0
 800b610:	4623      	mov	r3, r4
 800b612:	d807      	bhi.n	800b624 <memmove+0x20>
 800b614:	1e43      	subs	r3, r0, #1
 800b616:	42a1      	cmp	r1, r4
 800b618:	d008      	beq.n	800b62c <memmove+0x28>
 800b61a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b61e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b622:	e7f8      	b.n	800b616 <memmove+0x12>
 800b624:	4601      	mov	r1, r0
 800b626:	4402      	add	r2, r0
 800b628:	428a      	cmp	r2, r1
 800b62a:	d100      	bne.n	800b62e <memmove+0x2a>
 800b62c:	bd10      	pop	{r4, pc}
 800b62e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b636:	e7f7      	b.n	800b628 <memmove+0x24>

0800b638 <_realloc_r>:
 800b638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b63c:	4680      	mov	r8, r0
 800b63e:	4614      	mov	r4, r2
 800b640:	460e      	mov	r6, r1
 800b642:	b921      	cbnz	r1, 800b64e <_realloc_r+0x16>
 800b644:	4611      	mov	r1, r2
 800b646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b64a:	f7ff bbc1 	b.w	800add0 <_malloc_r>
 800b64e:	b92a      	cbnz	r2, 800b65c <_realloc_r+0x24>
 800b650:	f7ff fb56 	bl	800ad00 <_free_r>
 800b654:	4625      	mov	r5, r4
 800b656:	4628      	mov	r0, r5
 800b658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b65c:	f000 f81b 	bl	800b696 <_malloc_usable_size_r>
 800b660:	4284      	cmp	r4, r0
 800b662:	4607      	mov	r7, r0
 800b664:	d802      	bhi.n	800b66c <_realloc_r+0x34>
 800b666:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b66a:	d812      	bhi.n	800b692 <_realloc_r+0x5a>
 800b66c:	4621      	mov	r1, r4
 800b66e:	4640      	mov	r0, r8
 800b670:	f7ff fbae 	bl	800add0 <_malloc_r>
 800b674:	4605      	mov	r5, r0
 800b676:	2800      	cmp	r0, #0
 800b678:	d0ed      	beq.n	800b656 <_realloc_r+0x1e>
 800b67a:	42bc      	cmp	r4, r7
 800b67c:	4622      	mov	r2, r4
 800b67e:	4631      	mov	r1, r6
 800b680:	bf28      	it	cs
 800b682:	463a      	movcs	r2, r7
 800b684:	f7ff fb26 	bl	800acd4 <memcpy>
 800b688:	4631      	mov	r1, r6
 800b68a:	4640      	mov	r0, r8
 800b68c:	f7ff fb38 	bl	800ad00 <_free_r>
 800b690:	e7e1      	b.n	800b656 <_realloc_r+0x1e>
 800b692:	4635      	mov	r5, r6
 800b694:	e7df      	b.n	800b656 <_realloc_r+0x1e>

0800b696 <_malloc_usable_size_r>:
 800b696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b69a:	1f18      	subs	r0, r3, #4
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	bfbc      	itt	lt
 800b6a0:	580b      	ldrlt	r3, [r1, r0]
 800b6a2:	18c0      	addlt	r0, r0, r3
 800b6a4:	4770      	bx	lr
	...

0800b6a8 <_init>:
 800b6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6aa:	bf00      	nop
 800b6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ae:	bc08      	pop	{r3}
 800b6b0:	469e      	mov	lr, r3
 800b6b2:	4770      	bx	lr

0800b6b4 <_fini>:
 800b6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6b6:	bf00      	nop
 800b6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ba:	bc08      	pop	{r3}
 800b6bc:	469e      	mov	lr, r3
 800b6be:	4770      	bx	lr
