
icListen_SD9_USB_R_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acf4  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800aee4  0800aee4  0001aee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b030  0800b030  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b030  0800b030  0001b030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b038  0800b038  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b038  0800b038  0001b038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b03c  0800b03c  0001b03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800b040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d9c  2000009c  0800b0dc  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e38  0800b0dc  00022e38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000217d7  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f32  00000000  00000000  0004189c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  000467d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c8  00000000  00000000  00048280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006cd2  00000000  00000000  00049b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f376  00000000  00000000  0005081a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca4d5  00000000  00000000  0006fb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a065  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072e4  00000000  00000000  0013a0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000009c 	.word	0x2000009c
 800020c:	00000000 	.word	0x00000000
 8000210:	0800aecc 	.word	0x0800aecc

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000a0 	.word	0x200000a0
 800022c:	0800aecc 	.word	0x0800aecc

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b976 	b.w	8000534 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000296:	fbb8 f7f1 	udiv	r7, r8, r1
 800029a:	fa1f fe8c 	uxth.w	lr, ip
 800029e:	fb01 8817 	mls	r8, r1, r7, r8
 80002a2:	fb07 f00e 	mul.w	r0, r7, lr
 80002a6:	0c23      	lsrs	r3, r4, #16
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	4298      	cmp	r0, r3
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x66>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f107 35ff 	add.w	r5, r7, #4294967295
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4298      	cmp	r0, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	3f02      	subs	r7, #2
 80002c4:	4463      	add	r3, ip
 80002c6:	1a1b      	subs	r3, r3, r0
 80002c8:	fbb3 f0f1 	udiv	r0, r3, r1
 80002cc:	fb01 3310 	mls	r3, r1, r0, r3
 80002d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002da:	45a6      	cmp	lr, r4
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0404 	adds.w	r4, ip, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8109 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8106 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f0:	4464      	add	r4, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	2100      	movs	r1, #0
 80002f6:	eba4 040e 	sub.w	r4, r4, lr
 80002fa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	2300      	movs	r3, #0
 8000302:	40d4      	lsrs	r4, r2
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80fc 	bhi.w	800052c <__udivmoddi4+0x2cc>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 000c 	sub.w	r0, r1, ip
 800035a:	2101      	movs	r1, #1
 800035c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000360:	fa1f fe8c 	uxth.w	lr, ip
 8000364:	fbb0 f3f7 	udiv	r3, r0, r7
 8000368:	fb07 0013 	mls	r0, r7, r3, r0
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80ce 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000392:	fb07 5510 	mls	r5, r7, r0, r5
 8000396:	fb0e fe00 	mul.w	lr, lr, r0
 800039a:	b2a4      	uxth	r4, r4
 800039c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80b6 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa25 fa07 	lsr.w	sl, r5, r7
 80003d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d6:	fbba f8f9 	udiv	r8, sl, r9
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	fb09 aa18 	mls	sl, r9, r8, sl
 80003e2:	408d      	lsls	r5, r1
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	431d      	orrs	r5, r3
 80003ea:	fa00 f301 	lsl.w	r3, r0, r1
 80003ee:	fb08 f00e 	mul.w	r0, r8, lr
 80003f2:	0c2c      	lsrs	r4, r5, #16
 80003f4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003f8:	42a0      	cmp	r0, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a0      	cmp	r0, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1a24      	subs	r4, r4, r0
 800041a:	fbb4 f0f9 	udiv	r0, r4, r9
 800041e:	fb09 4410 	mls	r4, r9, r0, r4
 8000422:	fb00 fe0e 	mul.w	lr, r0, lr
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f100 35ff 	add.w	r5, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9502 	umull	r9, r5, r0, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2d0>
 800045c:	ebb3 0208 	subs.w	r2, r3, r8
 8000460:	eb64 040e 	sbc.w	r4, r4, lr
 8000464:	fa22 f301 	lsr.w	r3, r2, r1
 8000468:	fa04 f707 	lsl.w	r7, r4, r7
 800046c:	431f      	orrs	r7, r3
 800046e:	40cc      	lsrs	r4, r1
 8000470:	e9c6 7400 	strd	r7, r4, [r6]
 8000474:	2100      	movs	r1, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa8>
 8000478:	fa0c fc02 	lsl.w	ip, ip, r2
 800047c:	f1c2 0120 	rsb	r1, r2, #32
 8000480:	fa25 f301 	lsr.w	r3, r5, r1
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa20 f101 	lsr.w	r1, r0, r1
 800048c:	4095      	lsls	r5, r2
 800048e:	430d      	orrs	r5, r1
 8000490:	fbb3 f1f7 	udiv	r1, r3, r7
 8000494:	fb07 3311 	mls	r3, r7, r1, r3
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	0c28      	lsrs	r0, r5, #16
 800049e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004a2:	fb01 f30e 	mul.w	r3, r1, lr
 80004a6:	4283      	cmp	r3, r0
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0000 	adds.w	r0, ip, r0
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4283      	cmp	r3, r0
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4460      	add	r0, ip
 80004c0:	1ac0      	subs	r0, r0, r3
 80004c2:	fbb0 f3f7 	udiv	r3, r0, r7
 80004c6:	fb07 0013 	mls	r0, r7, r3, r0
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004d0:	fb03 f00e 	mul.w	r0, r3, lr
 80004d4:	42a8      	cmp	r0, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42a8      	cmp	r0, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1a28      	subs	r0, r5, r0
 80004ec:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	462f      	mov	r7, r5
 80004fa:	e6e4      	b.n	80002c6 <__udivmoddi4+0x66>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f9      	b.n	80002f4 <__udivmoddi4+0x94>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4643      	mov	r3, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4628      	mov	r0, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e747      	b.n	80003b6 <__udivmoddi4+0x156>
 8000526:	3b02      	subs	r3, #2
 8000528:	4465      	add	r5, ip
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x12c>
 800052c:	4608      	mov	r0, r1
 800052e:	e706      	b.n	800033e <__udivmoddi4+0xde>
 8000530:	4631      	mov	r1, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa8>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	4a06      	ldr	r2, [pc, #24]	; (8000560 <vApplicationGetIdleTaskMemory+0x28>)
 8000548:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	4a05      	ldr	r2, [pc, #20]	; (8000564 <vApplicationGetIdleTaskMemory+0x2c>)
 800054e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	200000b8 	.word	0x200000b8
 8000564:	2000016c 	.word	0x2000016c

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b096      	sub	sp, #88	; 0x58
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fc67 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f85d 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f973 	bl	8000860 <MX_GPIO_Init>
  MX_SPI1_Init();
 800057a:	f000 f8c3 	bl	8000704 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800057e:	f000 f945 	bl	800080c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000582:	f000 f8f5 	bl	8000770 <MX_TIM2_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AppliEvent */
  osMessageQDef(AppliEvent, 16, uint16_t);
 8000586:	4b22      	ldr	r3, [pc, #136]	; (8000610 <main+0xa8>)
 8000588:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800058c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800058e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AppliEventHandle = osMessageCreate(osMessageQ(AppliEvent), NULL);
 8000592:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f007 fe22 	bl	80081e2 <osMessageCreate>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a1c      	ldr	r2, [pc, #112]	; (8000614 <main+0xac>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_rx */
  osMessageQDef(USB_rx, 80, uint8_t);
 80005a4:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <main+0xb0>)
 80005a6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_rxHandle = osMessageCreate(osMessageQ(USB_rx), NULL);
 80005b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f007 fe13 	bl	80081e2 <osMessageCreate>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a17      	ldr	r2, [pc, #92]	; (800061c <main+0xb4>)
 80005c0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <main+0xb8>)
 80005c4:	f107 041c 	add.w	r4, r7, #28
 80005c8:	461d      	mov	r5, r3
 80005ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f007 fda0 	bl	8008122 <osThreadCreate>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a0f      	ldr	r2, [pc, #60]	; (8000624 <main+0xbc>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_t */
  osThreadDef(storage_t, storage_f, osPriorityNormal, 0, 256);
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <main+0xc0>)
 80005ea:	463c      	mov	r4, r7
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  storage_tHandle = osThreadCreate(osThread(storage_t), NULL);
 80005fa:	463b      	mov	r3, r7
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f007 fd8f 	bl	8008122 <osThreadCreate>
 8000604:	4603      	mov	r3, r0
 8000606:	4a09      	ldr	r2, [pc, #36]	; (800062c <main+0xc4>)
 8000608:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800060a:	f007 fd83 	bl	8008114 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060e:	e7fe      	b.n	800060e <main+0xa6>
 8000610:	0800aefc 	.word	0x0800aefc
 8000614:	20000458 	.word	0x20000458
 8000618:	0800af0c 	.word	0x0800af0c
 800061c:	2000045c 	.word	0x2000045c
 8000620:	0800af1c 	.word	0x0800af1c
 8000624:	20000450 	.word	0x20000450
 8000628:	0800af38 	.word	0x0800af38
 800062c:	20000454 	.word	0x20000454

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b09c      	sub	sp, #112	; 0x70
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800063a:	2238      	movs	r2, #56	; 0x38
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f00a fada 	bl	800abf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2220      	movs	r2, #32
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f00a facc 	bl	800abf8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000668:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800066a:	2304      	movs	r3, #4
 800066c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066e:	2301      	movs	r3, #1
 8000670:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8000672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000680:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000682:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000686:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 800068c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000690:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV2;
 8000692:	2310      	movs	r3, #16
 8000694:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800069a:	4618      	mov	r0, r3
 800069c:	f002 fcbe 	bl	800301c <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006a6:	f000 f9b3 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2302      	movs	r3, #2
 80006b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c4:	2101      	movs	r1, #1
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 ffbe 	bl	8003648 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006d2:	f000 f99d 	bl	8000a10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006d6:	2310      	movs	r3, #16
 80006d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV2;
 80006da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006de:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 f9f8 	bl	8003ad8 <HAL_RCCEx_PeriphCLKConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ee:	f000 f98f 	bl	8000a10 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80006f2:	4b03      	ldr	r3, [pc, #12]	; (8000700 <SystemClock_Config+0xd0>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	601a      	str	r2, [r3, #0]
}
 80006f8:	bf00      	nop
 80006fa:	3770      	adds	r7, #112	; 0x70
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	42420070 	.word	0x42420070

08000704 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_SPI1_Init+0x64>)
 800070a:	4a18      	ldr	r2, [pc, #96]	; (800076c <MX_SPI1_Init+0x68>)
 800070c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_SPI1_Init+0x64>)
 8000710:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000714:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_SPI1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_SPI1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_SPI1_Init+0x64>)
 8000730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000734:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_SPI1_Init+0x64>)
 8000738:	2208      	movs	r2, #8
 800073a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_SPI1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_SPI1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_SPI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_SPI1_Init+0x64>)
 8000750:	220a      	movs	r2, #10
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_SPI1_Init+0x64>)
 8000756:	f003 faf1 	bl	8003d3c <HAL_SPI_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000760:	f000 f956 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000036c 	.word	0x2000036c
 800076c:	40013000 	.word	0x40013000

08000770 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000784:	463b      	mov	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <MX_TIM2_Init+0x98>)
 800078e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000792:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 8000794:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <MX_TIM2_Init+0x98>)
 8000796:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800079a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079c:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_TIM2_Init+0x98>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <MX_TIM2_Init+0x98>)
 80007a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_TIM2_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_TIM2_Init+0x98>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007b6:	4814      	ldr	r0, [pc, #80]	; (8000808 <MX_TIM2_Init+0x98>)
 80007b8:	f003 fc47 	bl	800404a <HAL_TIM_Base_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007c2:	f000 f925 	bl	8000a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	4619      	mov	r1, r3
 80007d2:	480d      	ldr	r0, [pc, #52]	; (8000808 <MX_TIM2_Init+0x98>)
 80007d4:	f003 fdea 	bl	80043ac <HAL_TIM_ConfigClockSource>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007de:	f000 f917 	bl	8000a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	4619      	mov	r1, r3
 80007ee:	4806      	ldr	r0, [pc, #24]	; (8000808 <MX_TIM2_Init+0x98>)
 80007f0:	f003 ffc6 	bl	8004780 <HAL_TIMEx_MasterConfigSynchronization>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007fa:	f000 f909 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200003c4 	.word	0x200003c4

0800080c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_USART1_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_USART1_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_USART1_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_USART1_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_USART1_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_USART1_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_USART1_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_USART1_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_USART1_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_USART1_UART_Init+0x4c>)
 8000844:	f004 f814 	bl	8004870 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f8df 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	2000040c 	.word	0x2000040c
 800085c:	40013800 	.word	0x40013800

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000874:	4b36      	ldr	r3, [pc, #216]	; (8000950 <MX_GPIO_Init+0xf0>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a35      	ldr	r2, [pc, #212]	; (8000950 <MX_GPIO_Init+0xf0>)
 800087a:	f043 0320 	orr.w	r3, r3, #32
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b33      	ldr	r3, [pc, #204]	; (8000950 <MX_GPIO_Init+0xf0>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0320 	and.w	r3, r3, #32
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088c:	4b30      	ldr	r3, [pc, #192]	; (8000950 <MX_GPIO_Init+0xf0>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a2f      	ldr	r2, [pc, #188]	; (8000950 <MX_GPIO_Init+0xf0>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <MX_GPIO_Init+0xf0>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0310 	and.w	r3, r3, #16
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <MX_GPIO_Init+0xf0>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a29      	ldr	r2, [pc, #164]	; (8000950 <MX_GPIO_Init+0xf0>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b27      	ldr	r3, [pc, #156]	; (8000950 <MX_GPIO_Init+0xf0>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0304 	and.w	r3, r3, #4
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008bc:	4b24      	ldr	r3, [pc, #144]	; (8000950 <MX_GPIO_Init+0xf0>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a23      	ldr	r2, [pc, #140]	; (8000950 <MX_GPIO_Init+0xf0>)
 80008c2:	f043 0308 	orr.w	r3, r3, #8
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b21      	ldr	r3, [pc, #132]	; (8000950 <MX_GPIO_Init+0xf0>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0308 	and.w	r3, r3, #8
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2102      	movs	r1, #2
 80008d8:	481e      	ldr	r0, [pc, #120]	; (8000954 <MX_GPIO_Init+0xf4>)
 80008da:	f000 fead 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin, GPIO_PIN_SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	2186      	movs	r1, #134	; 0x86
 80008e2:	481d      	ldr	r0, [pc, #116]	; (8000958 <MX_GPIO_Init+0xf8>)
 80008e4:	f000 fea8 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_VBUS_GPIO_Port, USB_VBUS_Pin, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2101      	movs	r1, #1
 80008ec:	481b      	ldr	r0, [pc, #108]	; (800095c <MX_GPIO_Init+0xfc>)
 80008ee:	f000 fea3 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008f2:	2302      	movs	r3, #2
 80008f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2302      	movs	r3, #2
 8000900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4619      	mov	r1, r3
 8000908:	4812      	ldr	r0, [pc, #72]	; (8000954 <MX_GPIO_Init+0xf4>)
 800090a:	f000 fd11 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_SD1_Pin SS_SD2_Pin SS_SD4_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin;
 800090e:	2386      	movs	r3, #134	; 0x86
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2302      	movs	r3, #2
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4619      	mov	r1, r3
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <MX_GPIO_Init+0xf8>)
 8000926:	f000 fd03 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800092a:	2301      	movs	r3, #1
 800092c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2302      	movs	r3, #2
 8000938:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 0310 	add.w	r3, r7, #16
 800093e:	4619      	mov	r1, r3
 8000940:	4806      	ldr	r0, [pc, #24]	; (800095c <MX_GPIO_Init+0xfc>)
 8000942:	f000 fcf5 	bl	8001330 <HAL_GPIO_Init>

}
 8000946:	bf00      	nop
 8000948:	3720      	adds	r7, #32
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000
 8000954:	40011000 	.word	0x40011000
 8000958:	40010800 	.word	0x40010800
 800095c:	40010c00 	.word	0x40010c00

08000960 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart1,uart_tx_msg,1);
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
	...

08000974 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800097c:	f009 fe20 	bl	800a5c0 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
   osEvent event;
   uint8_t ttt=3;
 8000980:	2303      	movs	r3, #3
 8000982:	75fb      	strb	r3, [r7, #23]
  /* Infinite loop */
  for(;;)
  {
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <StartDefaultTask+0x5c>)
 8000986:	6819      	ldr	r1, [r3, #0]
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	f04f 32ff 	mov.w	r2, #4294967295
 8000990:	4618      	mov	r0, r3
 8000992:	f007 fc8f 	bl	80082b4 <osMessageGet>

	  if(event.status == osEventMessage)
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	2b10      	cmp	r3, #16
 800099a:	d113      	bne.n	80009c4 <StartDefaultTask+0x50>
	  {
		switch(event.value.v)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2b03      	cmp	r3, #3
 80009a0:	d012      	beq.n	80009c8 <StartDefaultTask+0x54>
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	d812      	bhi.n	80009cc <StartDefaultTask+0x58>
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d009      	beq.n	80009be <StartDefaultTask+0x4a>
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d000      	beq.n	80009b0 <StartDefaultTask+0x3c>
		   set_line_coding();
		   //HAL_UART_Transmit(&huart1,"S",1,1);
		 break;

		 default:
		 break;
 80009ae:	e00d      	b.n	80009cc <StartDefaultTask+0x58>
			  send_function();
 80009b0:	f009 fdac 	bl	800a50c <send_function>
			  osDelay(2000);
 80009b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009b8:	f007 fbff 	bl	80081ba <osDelay>
			  send_function();
 80009bc:	e7f8      	b.n	80009b0 <StartDefaultTask+0x3c>
		   set_line_coding();
 80009be:	f009 fdc5 	bl	800a54c <set_line_coding>
		 break;
 80009c2:	e004      	b.n	80009ce <StartDefaultTask+0x5a>
		 }
	   }
 80009c4:	bf00      	nop
 80009c6:	e7dd      	b.n	8000984 <StartDefaultTask+0x10>
		 break;
 80009c8:	bf00      	nop
 80009ca:	e7db      	b.n	8000984 <StartDefaultTask+0x10>
		 break;
 80009cc:	bf00      	nop
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 80009ce:	e7d9      	b.n	8000984 <StartDefaultTask+0x10>
 80009d0:	20000458 	.word	0x20000458

080009d4 <storage_f>:
* @retval None
*/

/* USER CODE END Header_storage_f */
void storage_f(void const * argument)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN storage_f */
  osDelay(500);
 80009dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e0:	f007 fbeb 	bl	80081ba <osDelay>
 // HAL_UART_Transmit(&huart1,"FATFS finished\n",15,100);

  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 80009e4:	20c8      	movs	r0, #200	; 0xc8
 80009e6:	f007 fbe8 	bl	80081ba <osDelay>
 80009ea:	e7fb      	b.n	80009e4 <storage_f+0x10>

080009ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d101      	bne.n	8000a02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009fe:	f000 fa35 	bl	8000e6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40012c00 	.word	0x40012c00

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_MspInit+0x68>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <HAL_MspInit+0x68>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6193      	str	r3, [r2, #24]
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_MspInit+0x68>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_MspInit+0x68>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4a11      	ldr	r2, [pc, #68]	; (8000a84 <HAL_MspInit+0x68>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a44:	61d3      	str	r3, [r2, #28]
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <HAL_MspInit+0x68>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	210f      	movs	r1, #15
 8000a56:	f06f 0001 	mvn.w	r0, #1
 8000a5a:	f000 fafc 	bl	8001056 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_MspInit+0x6c>)
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <HAL_MspInit+0x6c>)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40010000 	.word	0x40010000

08000a8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a26      	ldr	r2, [pc, #152]	; (8000b40 <HAL_SPI_MspInit+0xb4>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d145      	bne.n	8000b38 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aac:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <HAL_SPI_MspInit+0xb8>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a24      	ldr	r2, [pc, #144]	; (8000b44 <HAL_SPI_MspInit+0xb8>)
 8000ab2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <HAL_SPI_MspInit+0xb8>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <HAL_SPI_MspInit+0xb8>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a1e      	ldr	r2, [pc, #120]	; (8000b44 <HAL_SPI_MspInit+0xb8>)
 8000aca:	f043 0308 	orr.w	r3, r3, #8
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <HAL_SPI_MspInit+0xb8>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f003 0308 	and.w	r3, r3, #8
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000adc:	2328      	movs	r3, #40	; 0x28
 8000ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	4816      	ldr	r0, [pc, #88]	; (8000b48 <HAL_SPI_MspInit+0xbc>)
 8000af0:	f000 fc1e 	bl	8001330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000af4:	2310      	movs	r3, #16
 8000af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	4810      	ldr	r0, [pc, #64]	; (8000b48 <HAL_SPI_MspInit+0xbc>)
 8000b08:	f000 fc12 	bl	8001330 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_SPI_MspInit+0xc0>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <HAL_SPI_MspInit+0xc0>)
 8000b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b26:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2105      	movs	r1, #5
 8000b2c:	2023      	movs	r0, #35	; 0x23
 8000b2e:	f000 fa92 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b32:	2023      	movs	r0, #35	; 0x23
 8000b34:	f000 faab 	bl	800108e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40013000 	.word	0x40013000
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010c00 	.word	0x40010c00
 8000b4c:	40010000 	.word	0x40010000

08000b50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b60:	d113      	bne.n	8000b8a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_TIM_Base_MspInit+0x44>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <HAL_TIM_Base_MspInit+0x44>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	61d3      	str	r3, [r2, #28]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_TIM_Base_MspInit+0x44>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2105      	movs	r1, #5
 8000b7e:	201c      	movs	r0, #28
 8000b80:	f000 fa69 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b84:	201c      	movs	r0, #28
 8000b86:	f000 fa82 	bl	800108e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a20      	ldr	r2, [pc, #128]	; (8000c34 <HAL_UART_MspInit+0x9c>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d139      	bne.n	8000c2c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <HAL_UART_MspInit+0xa0>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a1e      	ldr	r2, [pc, #120]	; (8000c38 <HAL_UART_MspInit+0xa0>)
 8000bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <HAL_UART_MspInit+0xa0>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd0:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <HAL_UART_MspInit+0xa0>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a18      	ldr	r2, [pc, #96]	; (8000c38 <HAL_UART_MspInit+0xa0>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <HAL_UART_MspInit+0xa0>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0310 	add.w	r3, r7, #16
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480f      	ldr	r0, [pc, #60]	; (8000c3c <HAL_UART_MspInit+0xa4>)
 8000bfe:	f000 fb97 	bl	8001330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4619      	mov	r1, r3
 8000c16:	4809      	ldr	r0, [pc, #36]	; (8000c3c <HAL_UART_MspInit+0xa4>)
 8000c18:	f000 fb8a 	bl	8001330 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2105      	movs	r1, #5
 8000c20:	2025      	movs	r0, #37	; 0x25
 8000c22:	f000 fa18 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c26:	2025      	movs	r0, #37	; 0x25
 8000c28:	f000 fa31 	bl	800108e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c2c:	bf00      	nop
 8000c2e:	3720      	adds	r7, #32
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40013800 	.word	0x40013800
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010800 	.word	0x40010800

08000c40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	2019      	movs	r0, #25
 8000c56:	f000 f9fe 	bl	8001056 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c5a:	2019      	movs	r0, #25
 8000c5c:	f000 fa17 	bl	800108e <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <HAL_InitTick+0x9c>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a1d      	ldr	r2, [pc, #116]	; (8000cdc <HAL_InitTick+0x9c>)
 8000c66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <HAL_InitTick+0x9c>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c78:	f107 0210 	add.w	r2, r7, #16
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4611      	mov	r1, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 feda 	bl	8003a3c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c88:	f002 fec4 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 8000c8c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c90:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <HAL_InitTick+0xa0>)
 8000c92:	fba2 2303 	umull	r2, r3, r2, r3
 8000c96:	0c9b      	lsrs	r3, r3, #18
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_InitTick+0xa4>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <HAL_InitTick+0xa8>)
 8000ca0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_InitTick+0xa4>)
 8000ca4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ca8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000caa:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <HAL_InitTick+0xa4>)
 8000cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <HAL_InitTick+0xa4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_InitTick+0xa4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000cbc:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <HAL_InitTick+0xa4>)
 8000cbe:	f003 f9c4 	bl	800404a <HAL_TIM_Base_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d104      	bne.n	8000cd2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000cc8:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <HAL_InitTick+0xa4>)
 8000cca:	f003 fa0d 	bl	80040e8 <HAL_TIM_Base_Start_IT>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3730      	adds	r7, #48	; 0x30
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	431bde83 	.word	0x431bde83
 8000ce4:	20000460 	.word	0x20000460
 8000ce8:	40012c00 	.word	0x40012c00

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
	...

08000d18 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <TIM1_UP_IRQHandler+0x10>)
 8000d1e:	f003 fa3d 	bl	800419c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000460 	.word	0x20000460

08000d2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <TIM2_IRQHandler+0x10>)
 8000d32:	f003 fa33 	bl	800419c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200003c4 	.word	0x200003c4

08000d40 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <SPI1_IRQHandler+0x10>)
 8000d46:	f003 f87d 	bl	8003e44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000036c 	.word	0x2000036c

08000d54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <USART1_IRQHandler+0x10>)
 8000d5a:	f003 fe69 	bl	8004a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000040c 	.word	0x2000040c

08000d68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <OTG_FS_IRQHandler+0x10>)
 8000d6e:	f000 fee1 	bl	8001b34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20002b24 	.word	0x20002b24

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f009 feda 	bl	800ab64 <__errno>
 8000db0:	4603      	mov	r3, r0
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20010000 	.word	0x20010000
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	200004a8 	.word	0x200004a8
 8000de4:	20002e38 	.word	0x20002e38

08000de8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df4:	480c      	ldr	r0, [pc, #48]	; (8000e28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000df6:	490d      	ldr	r1, [pc, #52]	; (8000e2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	; (8000e38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e1a:	f7ff ffe5 	bl	8000de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f009 fea7 	bl	800ab70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e22:	f7ff fba1 	bl	8000568 <main>
  bx lr
 8000e26:	4770      	bx	lr
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000e30:	0800b040 	.word	0x0800b040
  ldr r2, =_sbss
 8000e34:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000e38:	20002e38 	.word	0x20002e38

08000e3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC1_2_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_Init+0x28>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_Init+0x28>)
 8000e4a:	f043 0310 	orr.w	r3, r3, #16
 8000e4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e50:	2003      	movs	r0, #3
 8000e52:	f000 f8f5 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e56:	200f      	movs	r0, #15
 8000e58:	f7ff fef2 	bl	8000c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e5c:	f7ff fdde 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40022000 	.word	0x40022000

08000e6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <HAL_IncTick+0x1c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <HAL_IncTick+0x20>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a03      	ldr	r2, [pc, #12]	; (8000e8c <HAL_IncTick+0x20>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	200004ac 	.word	0x200004ac

08000e90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b02      	ldr	r3, [pc, #8]	; (8000ea0 <HAL_GetTick+0x10>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	200004ac 	.word	0x200004ac

08000ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff fff0 	bl	8000e90 <HAL_GetTick>
 8000eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebc:	d005      	beq.n	8000eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_Delay+0x44>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eca:	bf00      	nop
 8000ecc:	f7ff ffe0 	bl	8000e90 <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d8f7      	bhi.n	8000ecc <HAL_Delay+0x28>
  {
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60d3      	str	r3, [r2, #12]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4906      	ldr	r1, [pc, #24]	; (8000f84 <__NVIC_EnableIRQ+0x34>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db0a      	blt.n	8000fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	490c      	ldr	r1, [pc, #48]	; (8000fd4 <__NVIC_SetPriority+0x4c>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb0:	e00a      	b.n	8000fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <__NVIC_SetPriority+0x50>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	761a      	strb	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	bf28      	it	cs
 8000ffa:	2304      	movcs	r3, #4
 8000ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3304      	adds	r3, #4
 8001002:	2b06      	cmp	r3, #6
 8001004:	d902      	bls.n	800100c <NVIC_EncodePriority+0x30>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3b03      	subs	r3, #3
 800100a:	e000      	b.n	800100e <NVIC_EncodePriority+0x32>
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	f04f 32ff 	mov.w	r2, #4294967295
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001024:	f04f 31ff 	mov.w	r1, #4294967295
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43d9      	mvns	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	4313      	orrs	r3, r2
         );
}
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	; 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff4f 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001068:	f7ff ff64 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 800106c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff ffb2 	bl	8000fdc <NVIC_EncodePriority>
 8001078:	4602      	mov	r2, r0
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff81 	bl	8000f88 <__NVIC_SetPriority>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff57 	bl	8000f50 <__NVIC_EnableIRQ>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b085      	sub	sp, #20
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d008      	beq.n	80010d2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2204      	movs	r2, #4
 80010c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e020      	b.n	8001114 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 020e 	bic.w	r2, r2, #14
 80010e0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 0201 	bic.w	r2, r2, #1
 80010f0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fa:	2101      	movs	r1, #1
 80010fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001100:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001112:	7bfb      	ldrb	r3, [r7, #15]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
	...

08001120 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001132:	2b02      	cmp	r3, #2
 8001134:	d005      	beq.n	8001142 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2204      	movs	r2, #4
 800113a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
 8001140:	e0d6      	b.n	80012f0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 020e 	bic.w	r2, r2, #14
 8001150:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 0201 	bic.w	r2, r2, #1
 8001160:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	4b64      	ldr	r3, [pc, #400]	; (80012fc <HAL_DMA_Abort_IT+0x1dc>)
 800116a:	429a      	cmp	r2, r3
 800116c:	d958      	bls.n	8001220 <HAL_DMA_Abort_IT+0x100>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a63      	ldr	r2, [pc, #396]	; (8001300 <HAL_DMA_Abort_IT+0x1e0>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d04f      	beq.n	8001218 <HAL_DMA_Abort_IT+0xf8>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a61      	ldr	r2, [pc, #388]	; (8001304 <HAL_DMA_Abort_IT+0x1e4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d048      	beq.n	8001214 <HAL_DMA_Abort_IT+0xf4>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a60      	ldr	r2, [pc, #384]	; (8001308 <HAL_DMA_Abort_IT+0x1e8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d040      	beq.n	800120e <HAL_DMA_Abort_IT+0xee>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a5e      	ldr	r2, [pc, #376]	; (800130c <HAL_DMA_Abort_IT+0x1ec>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d038      	beq.n	8001208 <HAL_DMA_Abort_IT+0xe8>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a5d      	ldr	r2, [pc, #372]	; (8001310 <HAL_DMA_Abort_IT+0x1f0>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d030      	beq.n	8001202 <HAL_DMA_Abort_IT+0xe2>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a5b      	ldr	r2, [pc, #364]	; (8001314 <HAL_DMA_Abort_IT+0x1f4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d028      	beq.n	80011fc <HAL_DMA_Abort_IT+0xdc>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a53      	ldr	r2, [pc, #332]	; (80012fc <HAL_DMA_Abort_IT+0x1dc>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d020      	beq.n	80011f6 <HAL_DMA_Abort_IT+0xd6>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a57      	ldr	r2, [pc, #348]	; (8001318 <HAL_DMA_Abort_IT+0x1f8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d019      	beq.n	80011f2 <HAL_DMA_Abort_IT+0xd2>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a56      	ldr	r2, [pc, #344]	; (800131c <HAL_DMA_Abort_IT+0x1fc>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d012      	beq.n	80011ee <HAL_DMA_Abort_IT+0xce>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a54      	ldr	r2, [pc, #336]	; (8001320 <HAL_DMA_Abort_IT+0x200>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00a      	beq.n	80011e8 <HAL_DMA_Abort_IT+0xc8>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a53      	ldr	r2, [pc, #332]	; (8001324 <HAL_DMA_Abort_IT+0x204>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d102      	bne.n	80011e2 <HAL_DMA_Abort_IT+0xc2>
 80011dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e0:	e01b      	b.n	800121a <HAL_DMA_Abort_IT+0xfa>
 80011e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e6:	e018      	b.n	800121a <HAL_DMA_Abort_IT+0xfa>
 80011e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ec:	e015      	b.n	800121a <HAL_DMA_Abort_IT+0xfa>
 80011ee:	2310      	movs	r3, #16
 80011f0:	e013      	b.n	800121a <HAL_DMA_Abort_IT+0xfa>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e011      	b.n	800121a <HAL_DMA_Abort_IT+0xfa>
 80011f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011fa:	e00e      	b.n	800121a <HAL_DMA_Abort_IT+0xfa>
 80011fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001200:	e00b      	b.n	800121a <HAL_DMA_Abort_IT+0xfa>
 8001202:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001206:	e008      	b.n	800121a <HAL_DMA_Abort_IT+0xfa>
 8001208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120c:	e005      	b.n	800121a <HAL_DMA_Abort_IT+0xfa>
 800120e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001212:	e002      	b.n	800121a <HAL_DMA_Abort_IT+0xfa>
 8001214:	2310      	movs	r3, #16
 8001216:	e000      	b.n	800121a <HAL_DMA_Abort_IT+0xfa>
 8001218:	2301      	movs	r3, #1
 800121a:	4a43      	ldr	r2, [pc, #268]	; (8001328 <HAL_DMA_Abort_IT+0x208>)
 800121c:	6053      	str	r3, [r2, #4]
 800121e:	e057      	b.n	80012d0 <HAL_DMA_Abort_IT+0x1b0>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a36      	ldr	r2, [pc, #216]	; (8001300 <HAL_DMA_Abort_IT+0x1e0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d04f      	beq.n	80012ca <HAL_DMA_Abort_IT+0x1aa>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a35      	ldr	r2, [pc, #212]	; (8001304 <HAL_DMA_Abort_IT+0x1e4>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d048      	beq.n	80012c6 <HAL_DMA_Abort_IT+0x1a6>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a33      	ldr	r2, [pc, #204]	; (8001308 <HAL_DMA_Abort_IT+0x1e8>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d040      	beq.n	80012c0 <HAL_DMA_Abort_IT+0x1a0>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a32      	ldr	r2, [pc, #200]	; (800130c <HAL_DMA_Abort_IT+0x1ec>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d038      	beq.n	80012ba <HAL_DMA_Abort_IT+0x19a>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a30      	ldr	r2, [pc, #192]	; (8001310 <HAL_DMA_Abort_IT+0x1f0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d030      	beq.n	80012b4 <HAL_DMA_Abort_IT+0x194>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a2f      	ldr	r2, [pc, #188]	; (8001314 <HAL_DMA_Abort_IT+0x1f4>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d028      	beq.n	80012ae <HAL_DMA_Abort_IT+0x18e>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a26      	ldr	r2, [pc, #152]	; (80012fc <HAL_DMA_Abort_IT+0x1dc>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d020      	beq.n	80012a8 <HAL_DMA_Abort_IT+0x188>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a2b      	ldr	r2, [pc, #172]	; (8001318 <HAL_DMA_Abort_IT+0x1f8>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d019      	beq.n	80012a4 <HAL_DMA_Abort_IT+0x184>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a29      	ldr	r2, [pc, #164]	; (800131c <HAL_DMA_Abort_IT+0x1fc>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d012      	beq.n	80012a0 <HAL_DMA_Abort_IT+0x180>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a28      	ldr	r2, [pc, #160]	; (8001320 <HAL_DMA_Abort_IT+0x200>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d00a      	beq.n	800129a <HAL_DMA_Abort_IT+0x17a>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a26      	ldr	r2, [pc, #152]	; (8001324 <HAL_DMA_Abort_IT+0x204>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d102      	bne.n	8001294 <HAL_DMA_Abort_IT+0x174>
 800128e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001292:	e01b      	b.n	80012cc <HAL_DMA_Abort_IT+0x1ac>
 8001294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001298:	e018      	b.n	80012cc <HAL_DMA_Abort_IT+0x1ac>
 800129a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800129e:	e015      	b.n	80012cc <HAL_DMA_Abort_IT+0x1ac>
 80012a0:	2310      	movs	r3, #16
 80012a2:	e013      	b.n	80012cc <HAL_DMA_Abort_IT+0x1ac>
 80012a4:	2301      	movs	r3, #1
 80012a6:	e011      	b.n	80012cc <HAL_DMA_Abort_IT+0x1ac>
 80012a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012ac:	e00e      	b.n	80012cc <HAL_DMA_Abort_IT+0x1ac>
 80012ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012b2:	e00b      	b.n	80012cc <HAL_DMA_Abort_IT+0x1ac>
 80012b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b8:	e008      	b.n	80012cc <HAL_DMA_Abort_IT+0x1ac>
 80012ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012be:	e005      	b.n	80012cc <HAL_DMA_Abort_IT+0x1ac>
 80012c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c4:	e002      	b.n	80012cc <HAL_DMA_Abort_IT+0x1ac>
 80012c6:	2310      	movs	r3, #16
 80012c8:	e000      	b.n	80012cc <HAL_DMA_Abort_IT+0x1ac>
 80012ca:	2301      	movs	r3, #1
 80012cc:	4a17      	ldr	r2, [pc, #92]	; (800132c <HAL_DMA_Abort_IT+0x20c>)
 80012ce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	4798      	blx	r3
    } 
  }
  return status;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40020080 	.word	0x40020080
 8001300:	40020008 	.word	0x40020008
 8001304:	4002001c 	.word	0x4002001c
 8001308:	40020030 	.word	0x40020030
 800130c:	40020044 	.word	0x40020044
 8001310:	40020058 	.word	0x40020058
 8001314:	4002006c 	.word	0x4002006c
 8001318:	40020408 	.word	0x40020408
 800131c:	4002041c 	.word	0x4002041c
 8001320:	40020430 	.word	0x40020430
 8001324:	40020444 	.word	0x40020444
 8001328:	40020400 	.word	0x40020400
 800132c:	40020000 	.word	0x40020000

08001330 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001330:	b480      	push	{r7}
 8001332:	b08b      	sub	sp, #44	; 0x2c
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001342:	e169      	b.n	8001618 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001344:	2201      	movs	r2, #1
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	429a      	cmp	r2, r3
 800135e:	f040 8158 	bne.w	8001612 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4a9a      	ldr	r2, [pc, #616]	; (80015d0 <HAL_GPIO_Init+0x2a0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d05e      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 800136c:	4a98      	ldr	r2, [pc, #608]	; (80015d0 <HAL_GPIO_Init+0x2a0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d875      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 8001372:	4a98      	ldr	r2, [pc, #608]	; (80015d4 <HAL_GPIO_Init+0x2a4>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d058      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 8001378:	4a96      	ldr	r2, [pc, #600]	; (80015d4 <HAL_GPIO_Init+0x2a4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d86f      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 800137e:	4a96      	ldr	r2, [pc, #600]	; (80015d8 <HAL_GPIO_Init+0x2a8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d052      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 8001384:	4a94      	ldr	r2, [pc, #592]	; (80015d8 <HAL_GPIO_Init+0x2a8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d869      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 800138a:	4a94      	ldr	r2, [pc, #592]	; (80015dc <HAL_GPIO_Init+0x2ac>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d04c      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 8001390:	4a92      	ldr	r2, [pc, #584]	; (80015dc <HAL_GPIO_Init+0x2ac>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d863      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 8001396:	4a92      	ldr	r2, [pc, #584]	; (80015e0 <HAL_GPIO_Init+0x2b0>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d046      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 800139c:	4a90      	ldr	r2, [pc, #576]	; (80015e0 <HAL_GPIO_Init+0x2b0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d85d      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 80013a2:	2b12      	cmp	r3, #18
 80013a4:	d82a      	bhi.n	80013fc <HAL_GPIO_Init+0xcc>
 80013a6:	2b12      	cmp	r3, #18
 80013a8:	d859      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 80013aa:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <HAL_GPIO_Init+0x80>)
 80013ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b0:	0800142b 	.word	0x0800142b
 80013b4:	08001405 	.word	0x08001405
 80013b8:	08001417 	.word	0x08001417
 80013bc:	08001459 	.word	0x08001459
 80013c0:	0800145f 	.word	0x0800145f
 80013c4:	0800145f 	.word	0x0800145f
 80013c8:	0800145f 	.word	0x0800145f
 80013cc:	0800145f 	.word	0x0800145f
 80013d0:	0800145f 	.word	0x0800145f
 80013d4:	0800145f 	.word	0x0800145f
 80013d8:	0800145f 	.word	0x0800145f
 80013dc:	0800145f 	.word	0x0800145f
 80013e0:	0800145f 	.word	0x0800145f
 80013e4:	0800145f 	.word	0x0800145f
 80013e8:	0800145f 	.word	0x0800145f
 80013ec:	0800145f 	.word	0x0800145f
 80013f0:	0800145f 	.word	0x0800145f
 80013f4:	0800140d 	.word	0x0800140d
 80013f8:	08001421 	.word	0x08001421
 80013fc:	4a79      	ldr	r2, [pc, #484]	; (80015e4 <HAL_GPIO_Init+0x2b4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d013      	beq.n	800142a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001402:	e02c      	b.n	800145e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	623b      	str	r3, [r7, #32]
          break;
 800140a:	e029      	b.n	8001460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	3304      	adds	r3, #4
 8001412:	623b      	str	r3, [r7, #32]
          break;
 8001414:	e024      	b.n	8001460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	3308      	adds	r3, #8
 800141c:	623b      	str	r3, [r7, #32]
          break;
 800141e:	e01f      	b.n	8001460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	330c      	adds	r3, #12
 8001426:	623b      	str	r3, [r7, #32]
          break;
 8001428:	e01a      	b.n	8001460 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001432:	2304      	movs	r3, #4
 8001434:	623b      	str	r3, [r7, #32]
          break;
 8001436:	e013      	b.n	8001460 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d105      	bne.n	800144c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001440:	2308      	movs	r3, #8
 8001442:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	611a      	str	r2, [r3, #16]
          break;
 800144a:	e009      	b.n	8001460 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800144c:	2308      	movs	r3, #8
 800144e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69fa      	ldr	r2, [r7, #28]
 8001454:	615a      	str	r2, [r3, #20]
          break;
 8001456:	e003      	b.n	8001460 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
          break;
 800145c:	e000      	b.n	8001460 <HAL_GPIO_Init+0x130>
          break;
 800145e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	2bff      	cmp	r3, #255	; 0xff
 8001464:	d801      	bhi.n	800146a <HAL_GPIO_Init+0x13a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	e001      	b.n	800146e <HAL_GPIO_Init+0x13e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3304      	adds	r3, #4
 800146e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2bff      	cmp	r3, #255	; 0xff
 8001474:	d802      	bhi.n	800147c <HAL_GPIO_Init+0x14c>
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	e002      	b.n	8001482 <HAL_GPIO_Init+0x152>
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	3b08      	subs	r3, #8
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	210f      	movs	r1, #15
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	401a      	ands	r2, r3
 8001494:	6a39      	ldr	r1, [r7, #32]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	431a      	orrs	r2, r3
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 80b1 	beq.w	8001612 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014b0:	4b4d      	ldr	r3, [pc, #308]	; (80015e8 <HAL_GPIO_Init+0x2b8>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a4c      	ldr	r2, [pc, #304]	; (80015e8 <HAL_GPIO_Init+0x2b8>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b4a      	ldr	r3, [pc, #296]	; (80015e8 <HAL_GPIO_Init+0x2b8>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014c8:	4a48      	ldr	r2, [pc, #288]	; (80015ec <HAL_GPIO_Init+0x2bc>)
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	4013      	ands	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a40      	ldr	r2, [pc, #256]	; (80015f0 <HAL_GPIO_Init+0x2c0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d013      	beq.n	800151c <HAL_GPIO_Init+0x1ec>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a3f      	ldr	r2, [pc, #252]	; (80015f4 <HAL_GPIO_Init+0x2c4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d00d      	beq.n	8001518 <HAL_GPIO_Init+0x1e8>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a3e      	ldr	r2, [pc, #248]	; (80015f8 <HAL_GPIO_Init+0x2c8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d007      	beq.n	8001514 <HAL_GPIO_Init+0x1e4>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a3d      	ldr	r2, [pc, #244]	; (80015fc <HAL_GPIO_Init+0x2cc>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d101      	bne.n	8001510 <HAL_GPIO_Init+0x1e0>
 800150c:	2303      	movs	r3, #3
 800150e:	e006      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 8001510:	2304      	movs	r3, #4
 8001512:	e004      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 8001514:	2302      	movs	r3, #2
 8001516:	e002      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 800151c:	2300      	movs	r3, #0
 800151e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001520:	f002 0203 	and.w	r2, r2, #3
 8001524:	0092      	lsls	r2, r2, #2
 8001526:	4093      	lsls	r3, r2
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	4313      	orrs	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800152e:	492f      	ldr	r1, [pc, #188]	; (80015ec <HAL_GPIO_Init+0x2bc>)
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3302      	adds	r3, #2
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d006      	beq.n	8001556 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001548:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <HAL_GPIO_Init+0x2d0>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	492c      	ldr	r1, [pc, #176]	; (8001600 <HAL_GPIO_Init+0x2d0>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]
 8001554:	e006      	b.n	8001564 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001556:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <HAL_GPIO_Init+0x2d0>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	43db      	mvns	r3, r3
 800155e:	4928      	ldr	r1, [pc, #160]	; (8001600 <HAL_GPIO_Init+0x2d0>)
 8001560:	4013      	ands	r3, r2
 8001562:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d006      	beq.n	800157e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001570:	4b23      	ldr	r3, [pc, #140]	; (8001600 <HAL_GPIO_Init+0x2d0>)
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	4922      	ldr	r1, [pc, #136]	; (8001600 <HAL_GPIO_Init+0x2d0>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800157e:	4b20      	ldr	r3, [pc, #128]	; (8001600 <HAL_GPIO_Init+0x2d0>)
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	43db      	mvns	r3, r3
 8001586:	491e      	ldr	r1, [pc, #120]	; (8001600 <HAL_GPIO_Init+0x2d0>)
 8001588:	4013      	ands	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_GPIO_Init+0x2d0>)
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	4918      	ldr	r1, [pc, #96]	; (8001600 <HAL_GPIO_Init+0x2d0>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <HAL_GPIO_Init+0x2d0>)
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	4914      	ldr	r1, [pc, #80]	; (8001600 <HAL_GPIO_Init+0x2d0>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d021      	beq.n	8001604 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_GPIO_Init+0x2d0>)
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	490e      	ldr	r1, [pc, #56]	; (8001600 <HAL_GPIO_Init+0x2d0>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	60cb      	str	r3, [r1, #12]
 80015cc:	e021      	b.n	8001612 <HAL_GPIO_Init+0x2e2>
 80015ce:	bf00      	nop
 80015d0:	10320000 	.word	0x10320000
 80015d4:	10310000 	.word	0x10310000
 80015d8:	10220000 	.word	0x10220000
 80015dc:	10210000 	.word	0x10210000
 80015e0:	10120000 	.word	0x10120000
 80015e4:	10110000 	.word	0x10110000
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010000 	.word	0x40010000
 80015f0:	40010800 	.word	0x40010800
 80015f4:	40010c00 	.word	0x40010c00
 80015f8:	40011000 	.word	0x40011000
 80015fc:	40011400 	.word	0x40011400
 8001600:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_GPIO_Init+0x304>)
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	43db      	mvns	r3, r3
 800160c:	4909      	ldr	r1, [pc, #36]	; (8001634 <HAL_GPIO_Init+0x304>)
 800160e:	4013      	ands	r3, r2
 8001610:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	3301      	adds	r3, #1
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	fa22 f303 	lsr.w	r3, r2, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	f47f ae8e 	bne.w	8001344 <HAL_GPIO_Init+0x14>
  }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	372c      	adds	r7, #44	; 0x2c
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	40010400 	.word	0x40010400

08001638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
 8001644:	4613      	mov	r3, r2
 8001646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001648:	787b      	ldrb	r3, [r7, #1]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001654:	e003      	b.n	800165e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001656:	887b      	ldrh	r3, [r7, #2]
 8001658:	041a      	lsls	r2, r3, #16
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	611a      	str	r2, [r3, #16]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166a:	b08f      	sub	sp, #60	; 0x3c
 800166c:	af0a      	add	r7, sp, #40	; 0x28
 800166e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e054      	b.n	8001724 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d106      	bne.n	800169a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f008 fffb 	bl	800a690 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2203      	movs	r2, #3
 800169e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f003 fddb 	bl	8005274 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	687e      	ldr	r6, [r7, #4]
 80016c6:	466d      	mov	r5, sp
 80016c8:	f106 0410 	add.w	r4, r6, #16
 80016cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80016dc:	1d33      	adds	r3, r6, #4
 80016de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016e0:	6838      	ldr	r0, [r7, #0]
 80016e2:	f003 fd95 	bl	8005210 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2101      	movs	r1, #1
 80016ec:	4618      	mov	r0, r3
 80016ee:	f003 fdd1 	bl	8005294 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	687e      	ldr	r6, [r7, #4]
 80016fa:	466d      	mov	r5, sp
 80016fc:	f106 0410 	add.w	r4, r6, #16
 8001700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001708:	e894 0003 	ldmia.w	r4, {r0, r1}
 800170c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001710:	1d33      	adds	r3, r6, #4
 8001712:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001714:	6838      	ldr	r0, [r7, #0]
 8001716:	f003 ff2f 	bl	8005578 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800172c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af04      	add	r7, sp, #16
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	4608      	mov	r0, r1
 8001736:	4611      	mov	r1, r2
 8001738:	461a      	mov	r2, r3
 800173a:	4603      	mov	r3, r0
 800173c:	70fb      	strb	r3, [r7, #3]
 800173e:	460b      	mov	r3, r1
 8001740:	70bb      	strb	r3, [r7, #2]
 8001742:	4613      	mov	r3, r2
 8001744:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_HCD_HC_Init+0x28>
 8001750:	2302      	movs	r3, #2
 8001752:	e076      	b.n	8001842 <HAL_HCD_HC_Init+0x116>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	212c      	movs	r1, #44	; 0x2c
 8001762:	fb01 f303 	mul.w	r3, r1, r3
 8001766:	4413      	add	r3, r2
 8001768:	333d      	adds	r3, #61	; 0x3d
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	212c      	movs	r1, #44	; 0x2c
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	4413      	add	r3, r2
 800177a:	3338      	adds	r3, #56	; 0x38
 800177c:	787a      	ldrb	r2, [r7, #1]
 800177e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	212c      	movs	r1, #44	; 0x2c
 8001786:	fb01 f303 	mul.w	r3, r1, r3
 800178a:	4413      	add	r3, r2
 800178c:	3340      	adds	r3, #64	; 0x40
 800178e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001790:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	212c      	movs	r1, #44	; 0x2c
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	3339      	adds	r3, #57	; 0x39
 80017a0:	78fa      	ldrb	r2, [r7, #3]
 80017a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	212c      	movs	r1, #44	; 0x2c
 80017aa:	fb01 f303 	mul.w	r3, r1, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	333f      	adds	r3, #63	; 0x3f
 80017b2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	78ba      	ldrb	r2, [r7, #2]
 80017bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017c0:	b2d0      	uxtb	r0, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	212c      	movs	r1, #44	; 0x2c
 80017c6:	fb01 f303 	mul.w	r3, r1, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	333a      	adds	r3, #58	; 0x3a
 80017ce:	4602      	mov	r2, r0
 80017d0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80017d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	da09      	bge.n	80017ee <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	212c      	movs	r1, #44	; 0x2c
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	333b      	adds	r3, #59	; 0x3b
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
 80017ec:	e008      	b.n	8001800 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	212c      	movs	r1, #44	; 0x2c
 80017f4:	fb01 f303 	mul.w	r3, r1, r3
 80017f8:	4413      	add	r3, r2
 80017fa:	333b      	adds	r3, #59	; 0x3b
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	212c      	movs	r1, #44	; 0x2c
 8001806:	fb01 f303 	mul.w	r3, r1, r3
 800180a:	4413      	add	r3, r2
 800180c:	333c      	adds	r3, #60	; 0x3c
 800180e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001812:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	787c      	ldrb	r4, [r7, #1]
 800181a:	78ba      	ldrb	r2, [r7, #2]
 800181c:	78f9      	ldrb	r1, [r7, #3]
 800181e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001820:	9302      	str	r3, [sp, #8]
 8001822:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	f897 3020 	ldrb.w	r3, [r7, #32]
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	4623      	mov	r3, r4
 8001830:	f003 ffda 	bl	80057e8 <USB_HC_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001840:	7bfb      	ldrb	r3, [r7, #15]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bd90      	pop	{r4, r7, pc}

0800184a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_HCD_HC_Halt+0x1e>
 8001864:	2302      	movs	r3, #2
 8001866:	e00f      	b.n	8001888 <HAL_HCD_HC_Halt+0x3e>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f004 f9b5 	bl	8005be8 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001886:	7bfb      	ldrb	r3, [r7, #15]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	4608      	mov	r0, r1
 800189a:	4611      	mov	r1, r2
 800189c:	461a      	mov	r2, r3
 800189e:	4603      	mov	r3, r0
 80018a0:	70fb      	strb	r3, [r7, #3]
 80018a2:	460b      	mov	r3, r1
 80018a4:	70bb      	strb	r3, [r7, #2]
 80018a6:	4613      	mov	r3, r2
 80018a8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	212c      	movs	r1, #44	; 0x2c
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	333b      	adds	r3, #59	; 0x3b
 80018b8:	78ba      	ldrb	r2, [r7, #2]
 80018ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	212c      	movs	r1, #44	; 0x2c
 80018c2:	fb01 f303 	mul.w	r3, r1, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	333f      	adds	r3, #63	; 0x3f
 80018ca:	787a      	ldrb	r2, [r7, #1]
 80018cc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80018ce:	7c3b      	ldrb	r3, [r7, #16]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d112      	bne.n	80018fa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	212c      	movs	r1, #44	; 0x2c
 80018da:	fb01 f303 	mul.w	r3, r1, r3
 80018de:	4413      	add	r3, r2
 80018e0:	3342      	adds	r3, #66	; 0x42
 80018e2:	2203      	movs	r2, #3
 80018e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	212c      	movs	r1, #44	; 0x2c
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	333d      	adds	r3, #61	; 0x3d
 80018f4:	7f3a      	ldrb	r2, [r7, #28]
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	e008      	b.n	800190c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	212c      	movs	r1, #44	; 0x2c
 8001900:	fb01 f303 	mul.w	r3, r1, r3
 8001904:	4413      	add	r3, r2
 8001906:	3342      	adds	r3, #66	; 0x42
 8001908:	2202      	movs	r2, #2
 800190a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800190c:	787b      	ldrb	r3, [r7, #1]
 800190e:	2b03      	cmp	r3, #3
 8001910:	f200 80c6 	bhi.w	8001aa0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001914:	a201      	add	r2, pc, #4	; (adr r2, 800191c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191a:	bf00      	nop
 800191c:	0800192d 	.word	0x0800192d
 8001920:	08001a8d 	.word	0x08001a8d
 8001924:	08001991 	.word	0x08001991
 8001928:	08001a0f 	.word	0x08001a0f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800192c:	7c3b      	ldrb	r3, [r7, #16]
 800192e:	2b01      	cmp	r3, #1
 8001930:	f040 80b8 	bne.w	8001aa4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001934:	78bb      	ldrb	r3, [r7, #2]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 80b4 	bne.w	8001aa4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800193c:	8b3b      	ldrh	r3, [r7, #24]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d108      	bne.n	8001954 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	212c      	movs	r1, #44	; 0x2c
 8001948:	fb01 f303 	mul.w	r3, r1, r3
 800194c:	4413      	add	r3, r2
 800194e:	3355      	adds	r3, #85	; 0x55
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	212c      	movs	r1, #44	; 0x2c
 800195a:	fb01 f303 	mul.w	r3, r1, r3
 800195e:	4413      	add	r3, r2
 8001960:	3355      	adds	r3, #85	; 0x55
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d109      	bne.n	800197c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	212c      	movs	r1, #44	; 0x2c
 800196e:	fb01 f303 	mul.w	r3, r1, r3
 8001972:	4413      	add	r3, r2
 8001974:	3342      	adds	r3, #66	; 0x42
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800197a:	e093      	b.n	8001aa4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	212c      	movs	r1, #44	; 0x2c
 8001982:	fb01 f303 	mul.w	r3, r1, r3
 8001986:	4413      	add	r3, r2
 8001988:	3342      	adds	r3, #66	; 0x42
 800198a:	2202      	movs	r2, #2
 800198c:	701a      	strb	r2, [r3, #0]
      break;
 800198e:	e089      	b.n	8001aa4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001990:	78bb      	ldrb	r3, [r7, #2]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d11d      	bne.n	80019d2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	212c      	movs	r1, #44	; 0x2c
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	3355      	adds	r3, #85	; 0x55
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	212c      	movs	r1, #44	; 0x2c
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	3342      	adds	r3, #66	; 0x42
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80019bc:	e073      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	212c      	movs	r1, #44	; 0x2c
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	4413      	add	r3, r2
 80019ca:	3342      	adds	r3, #66	; 0x42
 80019cc:	2202      	movs	r2, #2
 80019ce:	701a      	strb	r2, [r3, #0]
      break;
 80019d0:	e069      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	212c      	movs	r1, #44	; 0x2c
 80019d8:	fb01 f303 	mul.w	r3, r1, r3
 80019dc:	4413      	add	r3, r2
 80019de:	3354      	adds	r3, #84	; 0x54
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	212c      	movs	r1, #44	; 0x2c
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	3342      	adds	r3, #66	; 0x42
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
      break;
 80019f8:	e055      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	212c      	movs	r1, #44	; 0x2c
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	3342      	adds	r3, #66	; 0x42
 8001a08:	2202      	movs	r2, #2
 8001a0a:	701a      	strb	r2, [r3, #0]
      break;
 8001a0c:	e04b      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a0e:	78bb      	ldrb	r3, [r7, #2]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d11d      	bne.n	8001a50 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	212c      	movs	r1, #44	; 0x2c
 8001a1a:	fb01 f303 	mul.w	r3, r1, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	3355      	adds	r3, #85	; 0x55
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d109      	bne.n	8001a3c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	212c      	movs	r1, #44	; 0x2c
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	3342      	adds	r3, #66	; 0x42
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a3a:	e034      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	212c      	movs	r1, #44	; 0x2c
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	3342      	adds	r3, #66	; 0x42
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	701a      	strb	r2, [r3, #0]
      break;
 8001a4e:	e02a      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	212c      	movs	r1, #44	; 0x2c
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3354      	adds	r3, #84	; 0x54
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	212c      	movs	r1, #44	; 0x2c
 8001a6a:	fb01 f303 	mul.w	r3, r1, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	3342      	adds	r3, #66	; 0x42
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
      break;
 8001a76:	e016      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	212c      	movs	r1, #44	; 0x2c
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	3342      	adds	r3, #66	; 0x42
 8001a86:	2202      	movs	r2, #2
 8001a88:	701a      	strb	r2, [r3, #0]
      break;
 8001a8a:	e00c      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	212c      	movs	r1, #44	; 0x2c
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	3342      	adds	r3, #66	; 0x42
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
      break;
 8001a9e:	e002      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001aa0:	bf00      	nop
 8001aa2:	e000      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001aa4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	212c      	movs	r1, #44	; 0x2c
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3344      	adds	r3, #68	; 0x44
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	8b3a      	ldrh	r2, [r7, #24]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	202c      	movs	r0, #44	; 0x2c
 8001ac0:	fb00 f303 	mul.w	r3, r0, r3
 8001ac4:	440b      	add	r3, r1
 8001ac6:	334c      	adds	r3, #76	; 0x4c
 8001ac8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	212c      	movs	r1, #44	; 0x2c
 8001ad0:	fb01 f303 	mul.w	r3, r1, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3360      	adds	r3, #96	; 0x60
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	212c      	movs	r1, #44	; 0x2c
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3350      	adds	r3, #80	; 0x50
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	212c      	movs	r1, #44	; 0x2c
 8001af4:	fb01 f303 	mul.w	r3, r1, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	3339      	adds	r3, #57	; 0x39
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	212c      	movs	r1, #44	; 0x2c
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3361      	adds	r3, #97	; 0x61
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	222c      	movs	r2, #44	; 0x2c
 8001b1a:	fb02 f303 	mul.w	r3, r2, r3
 8001b1e:	3338      	adds	r3, #56	; 0x38
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	4413      	add	r3, r2
 8001b24:	4619      	mov	r1, r3
 8001b26:	f003 ff57 	bl	80059d8 <USB_HC_StartXfer>
 8001b2a:	4603      	mov	r3, r0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 fcd4 	bl	80054f8 <USB_GetMode>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	f040 80ef 	bne.w	8001d36 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 fcb9 	bl	80054d4 <USB_ReadInterrupts>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80e5 	beq.w	8001d34 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 fcb0 	bl	80054d4 <USB_ReadInterrupts>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b7e:	d104      	bne.n	8001b8a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f003 fca0 	bl	80054d4 <USB_ReadInterrupts>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b9e:	d104      	bne.n	8001baa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ba8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 fc90 	bl	80054d4 <USB_ReadInterrupts>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bbe:	d104      	bne.n	8001bca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 fc80 	bl	80054d4 <USB_ReadInterrupts>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d103      	bne.n	8001be6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2202      	movs	r2, #2
 8001be4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 fc72 	bl	80054d4 <USB_ReadInterrupts>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bfa:	d115      	bne.n	8001c28 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c04:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d108      	bne.n	8001c28 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f008 fd7a 	bl	800a710 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2101      	movs	r1, #1
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 fd1e 	bl	8005664 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f003 fc51 	bl	80054d4 <USB_ReadInterrupts>
 8001c32:	4603      	mov	r3, r0
 8001c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c3c:	d102      	bne.n	8001c44 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f001 f978 	bl	8002f34 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f003 fc43 	bl	80054d4 <USB_ReadInterrupts>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d106      	bne.n	8001c66 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f008 fd3d 	bl	800a6d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2208      	movs	r2, #8
 8001c64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 fc32 	bl	80054d4 <USB_ReadInterrupts>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	2b10      	cmp	r3, #16
 8001c78:	d101      	bne.n	8001c7e <HAL_HCD_IRQHandler+0x14a>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_HCD_IRQHandler+0x14c>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d012      	beq.n	8001caa <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699a      	ldr	r2, [r3, #24]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0210 	bic.w	r2, r2, #16
 8001c92:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f001 f87b 	bl	8002d90 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699a      	ldr	r2, [r3, #24]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0210 	orr.w	r2, r2, #16
 8001ca8:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f003 fc10 	bl	80054d4 <USB_ReadInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cbe:	d13a      	bne.n	8001d36 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f003 ff7f 	bl	8005bc8 <USB_HC_ReadInterrupt>
 8001cca:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	e025      	b.n	8001d1e <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	fa22 f303 	lsr.w	r3, r2, r3
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d018      	beq.n	8001d18 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	015a      	lsls	r2, r3, #5
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cfc:	d106      	bne.n	8001d0c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	4619      	mov	r1, r3
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f8a9 	bl	8001e5c <HCD_HC_IN_IRQHandler>
 8001d0a:	e005      	b.n	8001d18 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	4619      	mov	r1, r3
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 fca2 	bl	800265c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d3d4      	bcc.n	8001cd2 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d30:	615a      	str	r2, [r3, #20]
 8001d32:	e000      	b.n	8001d36 <HAL_HCD_IRQHandler+0x202>
      return;
 8001d34:	bf00      	nop
    }
  }
}
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_HCD_Start+0x16>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e013      	b.n	8001d7a <HAL_HCD_Start+0x3e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2101      	movs	r1, #1
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 fce2 	bl	800572a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f003 fa72 	bl	8005254 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_HCD_Stop+0x16>
 8001d94:	2302      	movs	r3, #2
 8001d96:	e00d      	b.n	8001db4 <HAL_HCD_Stop+0x32>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f004 f83a 	bl	8005e1e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 fc84 	bl	80056d6 <USB_ResetPort>
 8001dce:	4603      	mov	r3, r0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	212c      	movs	r1, #44	; 0x2c
 8001dea:	fb01 f303 	mul.w	r3, r1, r3
 8001dee:	4413      	add	r3, r2
 8001df0:	3360      	adds	r3, #96	; 0x60
 8001df2:	781b      	ldrb	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	460b      	mov	r3, r1
 8001e08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	212c      	movs	r1, #44	; 0x2c
 8001e10:	fb01 f303 	mul.w	r3, r1, r3
 8001e14:	4413      	add	r3, r2
 8001e16:	3350      	adds	r3, #80	; 0x50
 8001e18:	681b      	ldr	r3, [r3, #0]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 fcc8 	bl	80057c6 <USB_GetCurrentFrame>
 8001e36:	4603      	mov	r3, r0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f003 fca4 	bl	800579a <USB_GetHostSpeed>
 8001e52:	4603      	mov	r3, r0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	015a      	lsls	r2, r3, #5
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d119      	bne.n	8001ec0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	015a      	lsls	r2, r3, #5
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	0151      	lsls	r1, r2, #5
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	440a      	add	r2, r1
 8001eb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	60d3      	str	r3, [r2, #12]
 8001ebe:	e101      	b.n	80020c4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed6:	d12b      	bne.n	8001f30 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	015a      	lsls	r2, r3, #5
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	212c      	movs	r1, #44	; 0x2c
 8001ef2:	fb01 f303 	mul.w	r3, r1, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3361      	adds	r3, #97	; 0x61
 8001efa:	2207      	movs	r2, #7
 8001efc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	0151      	lsls	r1, r2, #5
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	440a      	add	r2, r1
 8001f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f003 fe5d 	bl	8005be8 <USB_HC_Halt>
 8001f2e:	e0c9      	b.n	80020c4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b20      	cmp	r3, #32
 8001f44:	d109      	bne.n	8001f5a <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f52:	461a      	mov	r2, r3
 8001f54:	2320      	movs	r3, #32
 8001f56:	6093      	str	r3, [r2, #8]
 8001f58:	e0b4      	b.n	80020c4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d133      	bne.n	8001fd8 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	015a      	lsls	r2, r3, #5
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	0151      	lsls	r1, r2, #5
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	440a      	add	r2, r1
 8001f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f8a:	f043 0302 	orr.w	r3, r3, #2
 8001f8e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	212c      	movs	r1, #44	; 0x2c
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3361      	adds	r3, #97	; 0x61
 8001f9e:	2205      	movs	r2, #5
 8001fa0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	015a      	lsls	r2, r3, #5
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2310      	movs	r3, #16
 8001fb2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	2308      	movs	r3, #8
 8001fc4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 fe09 	bl	8005be8 <USB_HC_Halt>
 8001fd6:	e075      	b.n	80020c4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	015a      	lsls	r2, r3, #5
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fee:	d134      	bne.n	800205a <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	0151      	lsls	r1, r2, #5
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	440a      	add	r2, r1
 8002006:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800200a:	f043 0302 	orr.w	r3, r3, #2
 800200e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	212c      	movs	r1, #44	; 0x2c
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	3361      	adds	r3, #97	; 0x61
 800201e:	2208      	movs	r2, #8
 8002020:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202e:	461a      	mov	r2, r3
 8002030:	2310      	movs	r3, #16
 8002032:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4413      	add	r3, r2
 800203c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002040:	461a      	mov	r2, r3
 8002042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002046:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	4611      	mov	r1, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f003 fdc8 	bl	8005be8 <USB_HC_Halt>
 8002058:	e034      	b.n	80020c4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4413      	add	r3, r2
 8002062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206c:	2b80      	cmp	r3, #128	; 0x80
 800206e:	d129      	bne.n	80020c4 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4413      	add	r3, r2
 8002078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	0151      	lsls	r1, r2, #5
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	440a      	add	r2, r1
 8002086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800208a:	f043 0302 	orr.w	r3, r3, #2
 800208e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	212c      	movs	r1, #44	; 0x2c
 8002096:	fb01 f303 	mul.w	r3, r1, r3
 800209a:	4413      	add	r3, r2
 800209c:	3361      	adds	r3, #97	; 0x61
 800209e:	2206      	movs	r2, #6
 80020a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f003 fd9b 	bl	8005be8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020be:	461a      	mov	r2, r3
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020da:	d122      	bne.n	8002122 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	0151      	lsls	r1, r2, #5
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	440a      	add	r2, r1
 80020f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020f6:	f043 0302 	orr.w	r3, r3, #2
 80020fa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f003 fd6e 	bl	8005be8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4413      	add	r3, r2
 8002114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002118:	461a      	mov	r2, r3
 800211a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800211e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002120:	e298      	b.n	8002654 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4413      	add	r3, r2
 800212a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b01      	cmp	r3, #1
 8002136:	f040 80fd 	bne.w	8002334 <HCD_HC_IN_IRQHandler+0x4d8>
    hhcd->hc[ch_num].state = HC_XFRC;
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	3361      	adds	r3, #97	; 0x61
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	335c      	adds	r3, #92	; 0x5c
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4413      	add	r3, r2
 8002166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216a:	461a      	mov	r2, r3
 800216c:	2301      	movs	r3, #1
 800216e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	212c      	movs	r1, #44	; 0x2c
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	333f      	adds	r3, #63	; 0x3f
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d009      	beq.n	8002198 <HCD_HC_IN_IRQHandler+0x33c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	333f      	adds	r3, #63	; 0x3f
 8002192:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002194:	2b02      	cmp	r3, #2
 8002196:	d121      	bne.n	80021dc <HCD_HC_IN_IRQHandler+0x380>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	015a      	lsls	r2, r3, #5
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4413      	add	r3, r2
 80021a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	0151      	lsls	r1, r2, #5
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	440a      	add	r2, r1
 80021ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021b2:	f043 0302 	orr.w	r3, r3, #2
 80021b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	4611      	mov	r1, r2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 fd10 	bl	8005be8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d4:	461a      	mov	r2, r3
 80021d6:	2310      	movs	r3, #16
 80021d8:	6093      	str	r3, [r2, #8]
 80021da:	e066      	b.n	80022aa <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	212c      	movs	r1, #44	; 0x2c
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	333f      	adds	r3, #63	; 0x3f
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d127      	bne.n	8002240 <HCD_HC_IN_IRQHandler+0x3e4>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	0151      	lsls	r1, r2, #5
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	440a      	add	r2, r1
 8002206:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800220a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800220e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	212c      	movs	r1, #44	; 0x2c
 8002216:	fb01 f303 	mul.w	r3, r1, r3
 800221a:	4413      	add	r3, r2
 800221c:	3360      	adds	r3, #96	; 0x60
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	b2d9      	uxtb	r1, r3
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	202c      	movs	r0, #44	; 0x2c
 800222c:	fb00 f303 	mul.w	r3, r0, r3
 8002230:	4413      	add	r3, r2
 8002232:	3360      	adds	r3, #96	; 0x60
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f008 fa77 	bl	800a72c <HAL_HCD_HC_NotifyURBChange_Callback>
 800223e:	e034      	b.n	80022aa <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	212c      	movs	r1, #44	; 0x2c
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	4413      	add	r3, r2
 800224c:	333f      	adds	r3, #63	; 0x3f
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d12a      	bne.n	80022aa <HCD_HC_IN_IRQHandler+0x44e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	212c      	movs	r1, #44	; 0x2c
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4413      	add	r3, r2
 8002260:	3360      	adds	r3, #96	; 0x60
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	3354      	adds	r3, #84	; 0x54
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	f083 0301 	eor.w	r3, r3, #1
 800227a:	b2d8      	uxtb	r0, r3
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	212c      	movs	r1, #44	; 0x2c
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4413      	add	r3, r2
 8002288:	3354      	adds	r3, #84	; 0x54
 800228a:	4602      	mov	r2, r0
 800228c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	b2d9      	uxtb	r1, r3
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	202c      	movs	r0, #44	; 0x2c
 8002298:	fb00 f303 	mul.w	r3, r0, r3
 800229c:	4413      	add	r3, r2
 800229e:	3360      	adds	r3, #96	; 0x60
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f008 fa41 	bl	800a72c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d12b      	bne.n	800230a <HCD_HC_IN_IRQHandler+0x4ae>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3348      	adds	r3, #72	; 0x48
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	202c      	movs	r0, #44	; 0x2c
 80022c8:	fb00 f202 	mul.w	r2, r0, r2
 80022cc:	440a      	add	r2, r1
 80022ce:	3240      	adds	r2, #64	; 0x40
 80022d0:	8812      	ldrh	r2, [r2, #0]
 80022d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 81ba 	beq.w	8002654 <HCD_HC_IN_IRQHandler+0x7f8>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	3354      	adds	r3, #84	; 0x54
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f083 0301 	eor.w	r3, r3, #1
 80022f4:	b2d8      	uxtb	r0, r3
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	212c      	movs	r1, #44	; 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	3354      	adds	r3, #84	; 0x54
 8002304:	4602      	mov	r2, r0
 8002306:	701a      	strb	r2, [r3, #0]
}
 8002308:	e1a4      	b.n	8002654 <HCD_HC_IN_IRQHandler+0x7f8>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3354      	adds	r3, #84	; 0x54
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	f083 0301 	eor.w	r3, r3, #1
 800231e:	b2d8      	uxtb	r0, r3
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	3354      	adds	r3, #84	; 0x54
 800232e:	4602      	mov	r2, r0
 8002330:	701a      	strb	r2, [r3, #0]
}
 8002332:	e18f      	b.n	8002654 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4413      	add	r3, r2
 800233c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b02      	cmp	r3, #2
 8002348:	f040 8106 	bne.w	8002558 <HCD_HC_IN_IRQHandler+0x6fc>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	0151      	lsls	r1, r2, #5
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	440a      	add	r2, r1
 8002362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002366:	f023 0302 	bic.w	r3, r3, #2
 800236a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	212c      	movs	r1, #44	; 0x2c
 8002372:	fb01 f303 	mul.w	r3, r1, r3
 8002376:	4413      	add	r3, r2
 8002378:	3361      	adds	r3, #97	; 0x61
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d109      	bne.n	8002394 <HCD_HC_IN_IRQHandler+0x538>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	212c      	movs	r1, #44	; 0x2c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	3360      	adds	r3, #96	; 0x60
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]
 8002392:	e0c9      	b.n	8002528 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3361      	adds	r3, #97	; 0x61
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	d109      	bne.n	80023bc <HCD_HC_IN_IRQHandler+0x560>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	3360      	adds	r3, #96	; 0x60
 80023b6:	2205      	movs	r2, #5
 80023b8:	701a      	strb	r2, [r3, #0]
 80023ba:	e0b5      	b.n	8002528 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	3361      	adds	r3, #97	; 0x61
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b06      	cmp	r3, #6
 80023ce:	d009      	beq.n	80023e4 <HCD_HC_IN_IRQHandler+0x588>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	212c      	movs	r1, #44	; 0x2c
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	4413      	add	r3, r2
 80023dc:	3361      	adds	r3, #97	; 0x61
 80023de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d150      	bne.n	8002486 <HCD_HC_IN_IRQHandler+0x62a>
      hhcd->hc[ch_num].ErrCnt++;
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	212c      	movs	r1, #44	; 0x2c
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	335c      	adds	r3, #92	; 0x5c
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	202c      	movs	r0, #44	; 0x2c
 80023fc:	fb00 f303 	mul.w	r3, r0, r3
 8002400:	440b      	add	r3, r1
 8002402:	335c      	adds	r3, #92	; 0x5c
 8002404:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	335c      	adds	r3, #92	; 0x5c
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d912      	bls.n	8002440 <HCD_HC_IN_IRQHandler+0x5e4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	212c      	movs	r1, #44	; 0x2c
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	335c      	adds	r3, #92	; 0x5c
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	212c      	movs	r1, #44	; 0x2c
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	3360      	adds	r3, #96	; 0x60
 800243a:	2204      	movs	r2, #4
 800243c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800243e:	e073      	b.n	8002528 <HCD_HC_IN_IRQHandler+0x6cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	212c      	movs	r1, #44	; 0x2c
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	3360      	adds	r3, #96	; 0x60
 800244e:	2202      	movs	r2, #2
 8002450:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002468:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002470:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247e:	461a      	mov	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002484:	e050      	b.n	8002528 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	3361      	adds	r3, #97	; 0x61
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b03      	cmp	r3, #3
 8002498:	d122      	bne.n	80024e0 <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	3360      	adds	r3, #96	; 0x60
 80024a8:	2202      	movs	r2, #2
 80024aa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024c2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024ca:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d8:	461a      	mov	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e023      	b.n	8002528 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	3361      	adds	r3, #97	; 0x61
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b07      	cmp	r3, #7
 80024f2:	d119      	bne.n	8002528 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt++;
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	335c      	adds	r3, #92	; 0x5c
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	202c      	movs	r0, #44	; 0x2c
 800250c:	fb00 f303 	mul.w	r3, r0, r3
 8002510:	440b      	add	r3, r1
 8002512:	335c      	adds	r3, #92	; 0x5c
 8002514:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	212c      	movs	r1, #44	; 0x2c
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	4413      	add	r3, r2
 8002522:	3360      	adds	r3, #96	; 0x60
 8002524:	2204      	movs	r2, #4
 8002526:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4413      	add	r3, r2
 8002530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002534:	461a      	mov	r2, r3
 8002536:	2302      	movs	r3, #2
 8002538:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	b2d9      	uxtb	r1, r3
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	202c      	movs	r0, #44	; 0x2c
 8002544:	fb00 f303 	mul.w	r3, r0, r3
 8002548:	4413      	add	r3, r2
 800254a:	3360      	adds	r3, #96	; 0x60
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f008 f8eb 	bl	800a72c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002556:	e07d      	b.n	8002654 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b10      	cmp	r3, #16
 800256c:	d172      	bne.n	8002654 <HCD_HC_IN_IRQHandler+0x7f8>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	212c      	movs	r1, #44	; 0x2c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	333f      	adds	r3, #63	; 0x3f
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b03      	cmp	r3, #3
 8002580:	d121      	bne.n	80025c6 <HCD_HC_IN_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	212c      	movs	r1, #44	; 0x2c
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4413      	add	r3, r2
 800258e:	335c      	adds	r3, #92	; 0x5c
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4413      	add	r3, r2
 800259c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	0151      	lsls	r1, r2, #5
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	440a      	add	r2, r1
 80025aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ae:	f043 0302 	orr.w	r3, r3, #2
 80025b2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 fb12 	bl	8005be8 <USB_HC_Halt>
 80025c4:	e03d      	b.n	8002642 <HCD_HC_IN_IRQHandler+0x7e6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	333f      	adds	r3, #63	; 0x3f
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d009      	beq.n	80025ee <HCD_HC_IN_IRQHandler+0x792>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	333f      	adds	r3, #63	; 0x3f
 80025e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d129      	bne.n	8002642 <HCD_HC_IN_IRQHandler+0x7e6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	335c      	adds	r3, #92	; 0x5c
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	212c      	movs	r1, #44	; 0x2c
 8002606:	fb01 f303 	mul.w	r3, r1, r3
 800260a:	4413      	add	r3, r2
 800260c:	3361      	adds	r3, #97	; 0x61
 800260e:	2203      	movs	r2, #3
 8002610:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4413      	add	r3, r2
 800261a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	0151      	lsls	r1, r2, #5
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	440a      	add	r2, r1
 8002628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800262c:	f043 0302 	orr.w	r3, r3, #2
 8002630:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f003 fad3 	bl	8005be8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	461a      	mov	r2, r3
 8002650:	2310      	movs	r3, #16
 8002652:	6093      	str	r3, [r2, #8]
}
 8002654:	bf00      	nop
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002672:	78fb      	ldrb	r3, [r7, #3]
 8002674:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b04      	cmp	r3, #4
 800268a:	d119      	bne.n	80026c0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002698:	461a      	mov	r2, r3
 800269a:	2304      	movs	r3, #4
 800269c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	0151      	lsls	r1, r2, #5
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	440a      	add	r2, r1
 80026b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80026be:	e363      	b.n	8002d88 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d13e      	bne.n	8002754 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e2:	461a      	mov	r2, r3
 80026e4:	2320      	movs	r3, #32
 80026e6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	333d      	adds	r3, #61	; 0x3d
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	f040 8345 	bne.w	8002d88 <HCD_HC_OUT_IRQHandler+0x72c>
      hhcd->hc[ch_num].do_ping = 0U;
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	212c      	movs	r1, #44	; 0x2c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	333d      	adds	r3, #61	; 0x3d
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	212c      	movs	r1, #44	; 0x2c
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	3360      	adds	r3, #96	; 0x60
 800271e:	2202      	movs	r2, #2
 8002720:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	0151      	lsls	r1, r2, #5
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	440a      	add	r2, r1
 8002738:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f003 fa4b 	bl	8005be8 <USB_HC_Halt>
}
 8002752:	e319      	b.n	8002d88 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800276a:	d122      	bne.n	80027b2 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	0151      	lsls	r1, r2, #5
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	440a      	add	r2, r1
 8002782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002786:	f043 0302 	orr.w	r3, r3, #2
 800278a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f003 fa26 	bl	8005be8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a8:	461a      	mov	r2, r3
 80027aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027ae:	6093      	str	r3, [r2, #8]
}
 80027b0:	e2ea      	b.n	8002d88 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	015a      	lsls	r2, r3, #5
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d150      	bne.n	800286a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	335c      	adds	r3, #92	; 0x5c
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ec:	2b40      	cmp	r3, #64	; 0x40
 80027ee:	d111      	bne.n	8002814 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	212c      	movs	r1, #44	; 0x2c
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	333d      	adds	r3, #61	; 0x3d
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	4413      	add	r3, r2
 800280a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280e:	461a      	mov	r2, r3
 8002810:	2340      	movs	r3, #64	; 0x40
 8002812:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	4413      	add	r3, r2
 800281c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	0151      	lsls	r1, r2, #5
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	440a      	add	r2, r1
 800282a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800282e:	f043 0302 	orr.w	r3, r3, #2
 8002832:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f003 f9d2 	bl	8005be8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002850:	461a      	mov	r2, r3
 8002852:	2301      	movs	r3, #1
 8002854:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	3361      	adds	r3, #97	; 0x61
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
}
 8002868:	e28e      	b.n	8002d88 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	4413      	add	r3, r2
 8002872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287c:	2b40      	cmp	r3, #64	; 0x40
 800287e:	d13c      	bne.n	80028fa <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	3361      	adds	r3, #97	; 0x61
 800288e:	2204      	movs	r2, #4
 8002890:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	333d      	adds	r3, #61	; 0x3d
 80028a0:	2201      	movs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	212c      	movs	r1, #44	; 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	335c      	adds	r3, #92	; 0x5c
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	0151      	lsls	r1, r2, #5
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	440a      	add	r2, r1
 80028cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f003 f981 	bl	8005be8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f2:	461a      	mov	r2, r3
 80028f4:	2340      	movs	r3, #64	; 0x40
 80028f6:	6093      	str	r3, [r2, #8]
}
 80028f8:	e246      	b.n	8002d88 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4413      	add	r3, r2
 8002902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b08      	cmp	r3, #8
 800290e:	d12a      	bne.n	8002966 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	461a      	mov	r2, r3
 800291e:	2308      	movs	r3, #8
 8002920:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4413      	add	r3, r2
 800292a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	0151      	lsls	r1, r2, #5
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	440a      	add	r2, r1
 8002938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800293c:	f043 0302 	orr.w	r3, r3, #2
 8002940:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f003 f94b 	bl	8005be8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	212c      	movs	r1, #44	; 0x2c
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	4413      	add	r3, r2
 800295e:	3361      	adds	r3, #97	; 0x61
 8002960:	2205      	movs	r2, #5
 8002962:	701a      	strb	r2, [r3, #0]
}
 8002964:	e210      	b.n	8002d88 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	4413      	add	r3, r2
 800296e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b10      	cmp	r3, #16
 800297a:	d133      	bne.n	80029e4 <HCD_HC_OUT_IRQHandler+0x388>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	335c      	adds	r3, #92	; 0x5c
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	3361      	adds	r3, #97	; 0x61
 800299c:	2203      	movs	r2, #3
 800299e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	0151      	lsls	r1, r2, #5
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	440a      	add	r2, r1
 80029b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ba:	f043 0302 	orr.w	r3, r3, #2
 80029be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f003 f90c 	bl	8005be8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	461a      	mov	r2, r3
 80029de:	2310      	movs	r3, #16
 80029e0:	6093      	str	r3, [r2, #8]
}
 80029e2:	e1d1      	b.n	8002d88 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f6:	2b80      	cmp	r3, #128	; 0x80
 80029f8:	d12a      	bne.n	8002a50 <HCD_HC_OUT_IRQHandler+0x3f4>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	3361      	adds	r3, #97	; 0x61
 8002a08:	2206      	movs	r2, #6
 8002a0a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	0151      	lsls	r1, r2, #5
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	440a      	add	r2, r1
 8002a22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a26:	f043 0302 	orr.w	r3, r3, #2
 8002a2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f003 f8d6 	bl	8005be8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	6093      	str	r3, [r2, #8]
}
 8002a4e:	e19b      	b.n	8002d88 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a66:	d134      	bne.n	8002ad2 <HCD_HC_OUT_IRQHandler+0x476>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	0151      	lsls	r1, r2, #5
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	440a      	add	r2, r1
 8002a7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a82:	f043 0302 	orr.w	r3, r3, #2
 8002a86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	4611      	mov	r1, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f003 f8a8 	bl	8005be8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	2310      	movs	r3, #16
 8002aa8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002abc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3361      	adds	r3, #97	; 0x61
 8002acc:	2208      	movs	r2, #8
 8002ace:	701a      	strb	r2, [r3, #0]
}
 8002ad0:	e15a      	b.n	8002d88 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	f040 814f 	bne.w	8002d88 <HCD_HC_OUT_IRQHandler+0x72c>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	0151      	lsls	r1, r2, #5
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	440a      	add	r2, r1
 8002b00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b04:	f023 0302 	bic.w	r3, r3, #2
 8002b08:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	212c      	movs	r1, #44	; 0x2c
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	3361      	adds	r3, #97	; 0x61
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d17d      	bne.n	8002c1a <HCD_HC_OUT_IRQHandler+0x5be>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3360      	adds	r3, #96	; 0x60
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	333f      	adds	r3, #63	; 0x3f
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d00a      	beq.n	8002b5a <HCD_HC_OUT_IRQHandler+0x4fe>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	212c      	movs	r1, #44	; 0x2c
 8002b4a:	fb01 f303 	mul.w	r3, r1, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	333f      	adds	r3, #63	; 0x3f
 8002b52:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	f040 8100 	bne.w	8002d5a <HCD_HC_OUT_IRQHandler+0x6fe>
        if (hhcd->Init.dma_enable == 0U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d113      	bne.n	8002b8a <HCD_HC_OUT_IRQHandler+0x52e>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3355      	adds	r3, #85	; 0x55
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	f083 0301 	eor.w	r3, r3, #1
 8002b76:	b2d8      	uxtb	r0, r3
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	3355      	adds	r3, #85	; 0x55
 8002b86:	4602      	mov	r2, r0
 8002b88:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	f040 80e3 	bne.w	8002d5a <HCD_HC_OUT_IRQHandler+0x6fe>
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	334c      	adds	r3, #76	; 0x4c
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80d8 	beq.w	8002d5a <HCD_HC_OUT_IRQHandler+0x6fe>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	334c      	adds	r3, #76	; 0x4c
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	202c      	movs	r0, #44	; 0x2c
 8002bc0:	fb00 f202 	mul.w	r2, r0, r2
 8002bc4:	440a      	add	r2, r1
 8002bc6:	3240      	adds	r2, #64	; 0x40
 8002bc8:	8812      	ldrh	r2, [r2, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	202c      	movs	r0, #44	; 0x2c
 8002bd4:	fb00 f202 	mul.w	r2, r0, r2
 8002bd8:	440a      	add	r2, r1
 8002bda:	3240      	adds	r2, #64	; 0x40
 8002bdc:	8812      	ldrh	r2, [r2, #0]
 8002bde:	fbb3 f3f2 	udiv	r3, r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80b5 	beq.w	8002d5a <HCD_HC_OUT_IRQHandler+0x6fe>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3355      	adds	r3, #85	; 0x55
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	f083 0301 	eor.w	r3, r3, #1
 8002c04:	b2d8      	uxtb	r0, r3
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	3355      	adds	r3, #85	; 0x55
 8002c14:	4602      	mov	r2, r0
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	e09f      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	3361      	adds	r3, #97	; 0x61
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d109      	bne.n	8002c42 <HCD_HC_OUT_IRQHandler+0x5e6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3360      	adds	r3, #96	; 0x60
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	701a      	strb	r2, [r3, #0]
 8002c40:	e08b      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	212c      	movs	r1, #44	; 0x2c
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3361      	adds	r3, #97	; 0x61
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d109      	bne.n	8002c6a <HCD_HC_OUT_IRQHandler+0x60e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	212c      	movs	r1, #44	; 0x2c
 8002c5c:	fb01 f303 	mul.w	r3, r1, r3
 8002c60:	4413      	add	r3, r2
 8002c62:	3360      	adds	r3, #96	; 0x60
 8002c64:	2202      	movs	r2, #2
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	e077      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	212c      	movs	r1, #44	; 0x2c
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	4413      	add	r3, r2
 8002c76:	3361      	adds	r3, #97	; 0x61
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b05      	cmp	r3, #5
 8002c7c:	d109      	bne.n	8002c92 <HCD_HC_OUT_IRQHandler+0x636>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	212c      	movs	r1, #44	; 0x2c
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	3360      	adds	r3, #96	; 0x60
 8002c8c:	2205      	movs	r2, #5
 8002c8e:	701a      	strb	r2, [r3, #0]
 8002c90:	e063      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6fe>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	212c      	movs	r1, #44	; 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3361      	adds	r3, #97	; 0x61
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d009      	beq.n	8002cba <HCD_HC_OUT_IRQHandler+0x65e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	212c      	movs	r1, #44	; 0x2c
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3361      	adds	r3, #97	; 0x61
 8002cb4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d14f      	bne.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6fe>
      hhcd->hc[ch_num].ErrCnt++;
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	335c      	adds	r3, #92	; 0x5c
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	202c      	movs	r0, #44	; 0x2c
 8002cd2:	fb00 f303 	mul.w	r3, r0, r3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	335c      	adds	r3, #92	; 0x5c
 8002cda:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	212c      	movs	r1, #44	; 0x2c
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	335c      	adds	r3, #92	; 0x5c
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d912      	bls.n	8002d16 <HCD_HC_OUT_IRQHandler+0x6ba>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	335c      	adds	r3, #92	; 0x5c
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	212c      	movs	r1, #44	; 0x2c
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3360      	adds	r3, #96	; 0x60
 8002d10:	2204      	movs	r2, #4
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e021      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6fe>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	212c      	movs	r1, #44	; 0x2c
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	3360      	adds	r3, #96	; 0x60
 8002d24:	2202      	movs	r2, #2
 8002d26:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d3e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d46:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d54:	461a      	mov	r2, r3
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d66:	461a      	mov	r2, r3
 8002d68:	2302      	movs	r3, #2
 8002d6a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	b2d9      	uxtb	r1, r3
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	202c      	movs	r0, #44	; 0x2c
 8002d76:	fb00 f303 	mul.w	r3, r0, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3360      	adds	r3, #96	; 0x60
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f007 fcd2 	bl	800a72c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d88:	bf00      	nop
 8002d8a:	3720      	adds	r7, #32
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	0c5b      	lsrs	r3, r3, #17
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dc4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d004      	beq.n	8002dd6 <HCD_RXQLVL_IRQHandler+0x46>
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2b05      	cmp	r3, #5
 8002dd0:	f000 80a9 	beq.w	8002f26 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002dd4:	e0aa      	b.n	8002f2c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 80a6 	beq.w	8002f2a <HCD_RXQLVL_IRQHandler+0x19a>
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	3344      	adds	r3, #68	; 0x44
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 809b 	beq.w	8002f2a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	212c      	movs	r1, #44	; 0x2c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	3350      	adds	r3, #80	; 0x50
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	441a      	add	r2, r3
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	202c      	movs	r0, #44	; 0x2c
 8002e0e:	fb00 f303 	mul.w	r3, r0, r3
 8002e12:	440b      	add	r3, r1
 8002e14:	334c      	adds	r3, #76	; 0x4c
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d87a      	bhi.n	8002f12 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	212c      	movs	r1, #44	; 0x2c
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3344      	adds	r3, #68	; 0x44
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	b292      	uxth	r2, r2
 8002e34:	4619      	mov	r1, r3
 8002e36:	f002 faf6 	bl	8005426 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	3344      	adds	r3, #68	; 0x44
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	441a      	add	r2, r3
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	202c      	movs	r0, #44	; 0x2c
 8002e54:	fb00 f303 	mul.w	r3, r0, r3
 8002e58:	440b      	add	r3, r1
 8002e5a:	3344      	adds	r3, #68	; 0x44
 8002e5c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	212c      	movs	r1, #44	; 0x2c
 8002e64:	fb01 f303 	mul.w	r3, r1, r3
 8002e68:	4413      	add	r3, r2
 8002e6a:	3350      	adds	r3, #80	; 0x50
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	441a      	add	r2, r3
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	202c      	movs	r0, #44	; 0x2c
 8002e78:	fb00 f303 	mul.w	r3, r0, r3
 8002e7c:	440b      	add	r3, r1
 8002e7e:	3350      	adds	r3, #80	; 0x50
 8002e80:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	0cdb      	lsrs	r3, r3, #19
 8002e92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e96:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	212c      	movs	r1, #44	; 0x2c
 8002e9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3340      	adds	r3, #64	; 0x40
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d13c      	bne.n	8002f2a <HCD_RXQLVL_IRQHandler+0x19a>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d039      	beq.n	8002f2a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ecc:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ed4:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	212c      	movs	r1, #44	; 0x2c
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3354      	adds	r3, #84	; 0x54
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	f083 0301 	eor.w	r3, r3, #1
 8002efc:	b2d8      	uxtb	r0, r3
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	3354      	adds	r3, #84	; 0x54
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	701a      	strb	r2, [r3, #0]
      break;
 8002f10:	e00b      	b.n	8002f2a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	212c      	movs	r1, #44	; 0x2c
 8002f18:	fb01 f303 	mul.w	r3, r1, r3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3360      	adds	r3, #96	; 0x60
 8002f20:	2204      	movs	r2, #4
 8002f22:	701a      	strb	r2, [r3, #0]
      break;
 8002f24:	e001      	b.n	8002f2a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f26:	bf00      	nop
 8002f28:	e000      	b.n	8002f2c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f2a:	bf00      	nop
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	3728      	adds	r7, #40	; 0x28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f60:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d10b      	bne.n	8002f84 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d102      	bne.n	8002f7c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f007 fbbc 	bl	800a6f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f043 0302 	orr.w	r3, r3, #2
 8002f82:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d132      	bne.n	8002ff4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f043 0308 	orr.w	r3, r3, #8
 8002f94:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d126      	bne.n	8002fee <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d113      	bne.n	8002fd0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002fae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fb2:	d106      	bne.n	8002fc2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2102      	movs	r1, #2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f002 fb52 	bl	8005664 <USB_InitFSLSPClkSel>
 8002fc0:	e011      	b.n	8002fe6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f002 fb4b 	bl	8005664 <USB_InitFSLSPClkSel>
 8002fce:	e00a      	b.n	8002fe6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d106      	bne.n	8002fe6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002fe4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f007 fbb2 	bl	800a750 <HAL_HCD_PortEnabled_Callback>
 8002fec:	e002      	b.n	8002ff4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f007 fbbc 	bl	800a76c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b20      	cmp	r3, #32
 8002ffc:	d103      	bne.n	8003006 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f043 0320 	orr.w	r3, r3, #32
 8003004:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800300c:	461a      	mov	r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	6013      	str	r3, [r2, #0]
}
 8003012:	bf00      	nop
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e304      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 8087 	beq.w	800314a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800303c:	4b92      	ldr	r3, [pc, #584]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b04      	cmp	r3, #4
 8003046:	d00c      	beq.n	8003062 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003048:	4b8f      	ldr	r3, [pc, #572]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b08      	cmp	r3, #8
 8003052:	d112      	bne.n	800307a <HAL_RCC_OscConfig+0x5e>
 8003054:	4b8c      	ldr	r3, [pc, #560]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003060:	d10b      	bne.n	800307a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003062:	4b89      	ldr	r3, [pc, #548]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d06c      	beq.n	8003148 <HAL_RCC_OscConfig+0x12c>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d168      	bne.n	8003148 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e2de      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003082:	d106      	bne.n	8003092 <HAL_RCC_OscConfig+0x76>
 8003084:	4b80      	ldr	r3, [pc, #512]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a7f      	ldr	r2, [pc, #508]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 800308a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	e02e      	b.n	80030f0 <HAL_RCC_OscConfig+0xd4>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10c      	bne.n	80030b4 <HAL_RCC_OscConfig+0x98>
 800309a:	4b7b      	ldr	r3, [pc, #492]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a7a      	ldr	r2, [pc, #488]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	4b78      	ldr	r3, [pc, #480]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a77      	ldr	r2, [pc, #476]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	e01d      	b.n	80030f0 <HAL_RCC_OscConfig+0xd4>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0xbc>
 80030be:	4b72      	ldr	r3, [pc, #456]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a71      	ldr	r2, [pc, #452]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b6f      	ldr	r3, [pc, #444]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a6e      	ldr	r2, [pc, #440]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e00b      	b.n	80030f0 <HAL_RCC_OscConfig+0xd4>
 80030d8:	4b6b      	ldr	r3, [pc, #428]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a6a      	ldr	r2, [pc, #424]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 80030de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b68      	ldr	r3, [pc, #416]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a67      	ldr	r2, [pc, #412]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 80030ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d013      	beq.n	8003120 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fd feca 	bl	8000e90 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003100:	f7fd fec6 	bl	8000e90 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	; 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e292      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003112:	4b5d      	ldr	r3, [pc, #372]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0xe4>
 800311e:	e014      	b.n	800314a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fd feb6 	bl	8000e90 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003128:	f7fd feb2 	bl	8000e90 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	; 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e27e      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313a:	4b53      	ldr	r3, [pc, #332]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x10c>
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d063      	beq.n	800321e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003156:	4b4c      	ldr	r3, [pc, #304]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003162:	4b49      	ldr	r3, [pc, #292]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	2b08      	cmp	r3, #8
 800316c:	d11c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x18c>
 800316e:	4b46      	ldr	r3, [pc, #280]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d116      	bne.n	80031a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317a:	4b43      	ldr	r3, [pc, #268]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_RCC_OscConfig+0x176>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d001      	beq.n	8003192 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e252      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003192:	4b3d      	ldr	r3, [pc, #244]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4939      	ldr	r1, [pc, #228]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a6:	e03a      	b.n	800321e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d020      	beq.n	80031f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b0:	4b36      	ldr	r3, [pc, #216]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b6:	f7fd fe6b 	bl	8000e90 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031be:	f7fd fe67 	bl	8000e90 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e233      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d0:	4b2d      	ldr	r3, [pc, #180]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031dc:	4b2a      	ldr	r3, [pc, #168]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4927      	ldr	r1, [pc, #156]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]
 80031f0:	e015      	b.n	800321e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f2:	4b26      	ldr	r3, [pc, #152]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7fd fe4a 	bl	8000e90 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003200:	f7fd fe46 	bl	8000e90 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e212      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003212:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d03a      	beq.n	80032a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d019      	beq.n	8003266 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003232:	4b17      	ldr	r3, [pc, #92]	; (8003290 <HAL_RCC_OscConfig+0x274>)
 8003234:	2201      	movs	r2, #1
 8003236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003238:	f7fd fe2a 	bl	8000e90 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003240:	f7fd fe26 	bl	8000e90 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e1f2      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003252:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <HAL_RCC_OscConfig+0x26c>)
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800325e:	2001      	movs	r0, #1
 8003260:	f000 fc1c 	bl	8003a9c <RCC_Delay>
 8003264:	e01c      	b.n	80032a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <HAL_RCC_OscConfig+0x274>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326c:	f7fd fe10 	bl	8000e90 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003272:	e00f      	b.n	8003294 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003274:	f7fd fe0c 	bl	8000e90 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d908      	bls.n	8003294 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e1d8      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
 8003286:	bf00      	nop
 8003288:	40021000 	.word	0x40021000
 800328c:	42420000 	.word	0x42420000
 8003290:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003294:	4b9b      	ldr	r3, [pc, #620]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1e9      	bne.n	8003274 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80a6 	beq.w	80033fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ae:	2300      	movs	r3, #0
 80032b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032b2:	4b94      	ldr	r3, [pc, #592]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10d      	bne.n	80032da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032be:	4b91      	ldr	r3, [pc, #580]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	4a90      	ldr	r2, [pc, #576]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 80032c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c8:	61d3      	str	r3, [r2, #28]
 80032ca:	4b8e      	ldr	r3, [pc, #568]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d6:	2301      	movs	r3, #1
 80032d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032da:	4b8b      	ldr	r3, [pc, #556]	; (8003508 <HAL_RCC_OscConfig+0x4ec>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d118      	bne.n	8003318 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e6:	4b88      	ldr	r3, [pc, #544]	; (8003508 <HAL_RCC_OscConfig+0x4ec>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a87      	ldr	r2, [pc, #540]	; (8003508 <HAL_RCC_OscConfig+0x4ec>)
 80032ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f2:	f7fd fdcd 	bl	8000e90 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fa:	f7fd fdc9 	bl	8000e90 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b64      	cmp	r3, #100	; 0x64
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e195      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330c:	4b7e      	ldr	r3, [pc, #504]	; (8003508 <HAL_RCC_OscConfig+0x4ec>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f0      	beq.n	80032fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d106      	bne.n	800332e <HAL_RCC_OscConfig+0x312>
 8003320:	4b78      	ldr	r3, [pc, #480]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	4a77      	ldr	r2, [pc, #476]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	6213      	str	r3, [r2, #32]
 800332c:	e02d      	b.n	800338a <HAL_RCC_OscConfig+0x36e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10c      	bne.n	8003350 <HAL_RCC_OscConfig+0x334>
 8003336:	4b73      	ldr	r3, [pc, #460]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	4a72      	ldr	r2, [pc, #456]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 800333c:	f023 0301 	bic.w	r3, r3, #1
 8003340:	6213      	str	r3, [r2, #32]
 8003342:	4b70      	ldr	r3, [pc, #448]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	4a6f      	ldr	r2, [pc, #444]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 8003348:	f023 0304 	bic.w	r3, r3, #4
 800334c:	6213      	str	r3, [r2, #32]
 800334e:	e01c      	b.n	800338a <HAL_RCC_OscConfig+0x36e>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	2b05      	cmp	r3, #5
 8003356:	d10c      	bne.n	8003372 <HAL_RCC_OscConfig+0x356>
 8003358:	4b6a      	ldr	r3, [pc, #424]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	4a69      	ldr	r2, [pc, #420]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 800335e:	f043 0304 	orr.w	r3, r3, #4
 8003362:	6213      	str	r3, [r2, #32]
 8003364:	4b67      	ldr	r3, [pc, #412]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	4a66      	ldr	r2, [pc, #408]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6213      	str	r3, [r2, #32]
 8003370:	e00b      	b.n	800338a <HAL_RCC_OscConfig+0x36e>
 8003372:	4b64      	ldr	r3, [pc, #400]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	4a63      	ldr	r2, [pc, #396]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	6213      	str	r3, [r2, #32]
 800337e:	4b61      	ldr	r3, [pc, #388]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	4a60      	ldr	r2, [pc, #384]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 8003384:	f023 0304 	bic.w	r3, r3, #4
 8003388:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d015      	beq.n	80033be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003392:	f7fd fd7d 	bl	8000e90 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003398:	e00a      	b.n	80033b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339a:	f7fd fd79 	bl	8000e90 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e143      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b0:	4b54      	ldr	r3, [pc, #336]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0ee      	beq.n	800339a <HAL_RCC_OscConfig+0x37e>
 80033bc:	e014      	b.n	80033e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033be:	f7fd fd67 	bl	8000e90 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c4:	e00a      	b.n	80033dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c6:	f7fd fd63 	bl	8000e90 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e12d      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033dc:	4b49      	ldr	r3, [pc, #292]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1ee      	bne.n	80033c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d105      	bne.n	80033fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ee:	4b45      	ldr	r3, [pc, #276]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	4a44      	ldr	r2, [pc, #272]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 80033f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 808c 	beq.w	800351c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003404:	4b3f      	ldr	r3, [pc, #252]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800340c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003410:	d10e      	bne.n	8003430 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003412:	4b3c      	ldr	r3, [pc, #240]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800341a:	2b08      	cmp	r3, #8
 800341c:	d108      	bne.n	8003430 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800341e:	4b39      	ldr	r3, [pc, #228]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342a:	d101      	bne.n	8003430 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e103      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	2b02      	cmp	r3, #2
 8003436:	d14e      	bne.n	80034d6 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003438:	4b32      	ldr	r3, [pc, #200]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d009      	beq.n	8003458 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003444:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0ef      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003458:	4b2c      	ldr	r3, [pc, #176]	; (800350c <HAL_RCC_OscConfig+0x4f0>)
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345e:	f7fd fd17 	bl	8000e90 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003466:	f7fd fd13 	bl	8000e90 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b64      	cmp	r3, #100	; 0x64
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e0df      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003478:	4b22      	ldr	r3, [pc, #136]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f0      	bne.n	8003466 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003484:	4b1f      	ldr	r3, [pc, #124]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003490:	491c      	ldr	r1, [pc, #112]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 8003492:	4313      	orrs	r3, r2
 8003494:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003496:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	4918      	ldr	r1, [pc, #96]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80034a8:	4b18      	ldr	r3, [pc, #96]	; (800350c <HAL_RCC_OscConfig+0x4f0>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ae:	f7fd fcef 	bl	8000e90 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80034b6:	f7fd fceb 	bl	8000e90 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b64      	cmp	r3, #100	; 0x64
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e0b7      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80034c8:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCC_OscConfig+0x49a>
 80034d4:	e022      	b.n	800351c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <HAL_RCC_OscConfig+0x4e8>)
 80034dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80034e2:	4b0a      	ldr	r3, [pc, #40]	; (800350c <HAL_RCC_OscConfig+0x4f0>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fd fcd2 	bl	8000e90 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80034ee:	e00f      	b.n	8003510 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80034f0:	f7fd fcce 	bl	8000e90 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	; 0x64
 80034fc:	d908      	bls.n	8003510 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e09a      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
 8003502:	bf00      	nop
 8003504:	40021000 	.word	0x40021000
 8003508:	40007000 	.word	0x40007000
 800350c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003510:	4b4b      	ldr	r3, [pc, #300]	; (8003640 <HAL_RCC_OscConfig+0x624>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e9      	bne.n	80034f0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8088 	beq.w	8003636 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003526:	4b46      	ldr	r3, [pc, #280]	; (8003640 <HAL_RCC_OscConfig+0x624>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b08      	cmp	r3, #8
 8003530:	d068      	beq.n	8003604 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d14d      	bne.n	80035d6 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353a:	4b42      	ldr	r3, [pc, #264]	; (8003644 <HAL_RCC_OscConfig+0x628>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fd fca6 	bl	8000e90 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003548:	f7fd fca2 	bl	8000e90 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e06e      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800355a:	4b39      	ldr	r3, [pc, #228]	; (8003640 <HAL_RCC_OscConfig+0x624>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356e:	d10f      	bne.n	8003590 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003570:	4b33      	ldr	r3, [pc, #204]	; (8003640 <HAL_RCC_OscConfig+0x624>)
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4931      	ldr	r1, [pc, #196]	; (8003640 <HAL_RCC_OscConfig+0x624>)
 800357a:	4313      	orrs	r3, r2
 800357c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800357e:	4b30      	ldr	r3, [pc, #192]	; (8003640 <HAL_RCC_OscConfig+0x624>)
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	f023 020f 	bic.w	r2, r3, #15
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	492d      	ldr	r1, [pc, #180]	; (8003640 <HAL_RCC_OscConfig+0x624>)
 800358c:	4313      	orrs	r3, r2
 800358e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003590:	4b2b      	ldr	r3, [pc, #172]	; (8003640 <HAL_RCC_OscConfig+0x624>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	430b      	orrs	r3, r1
 80035a2:	4927      	ldr	r1, [pc, #156]	; (8003640 <HAL_RCC_OscConfig+0x624>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a8:	4b26      	ldr	r3, [pc, #152]	; (8003644 <HAL_RCC_OscConfig+0x628>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ae:	f7fd fc6f 	bl	8000e90 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b6:	f7fd fc6b 	bl	8000e90 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e037      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035c8:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <HAL_RCC_OscConfig+0x624>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <HAL_RCC_OscConfig+0x59a>
 80035d4:	e02f      	b.n	8003636 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d6:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_RCC_OscConfig+0x628>)
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035dc:	f7fd fc58 	bl	8000e90 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e4:	f7fd fc54 	bl	8000e90 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e020      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <HAL_RCC_OscConfig+0x624>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x5c8>
 8003602:	e018      	b.n	8003636 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e013      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_RCC_OscConfig+0x624>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	429a      	cmp	r2, r3
 8003622:	d106      	bne.n	8003632 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d001      	beq.n	8003636 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40021000 	.word	0x40021000
 8003644:	42420060 	.word	0x42420060

08003648 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0d0      	b.n	80037fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800365c:	4b6a      	ldr	r3, [pc, #424]	; (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d910      	bls.n	800368c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366a:	4b67      	ldr	r3, [pc, #412]	; (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 0207 	bic.w	r2, r3, #7
 8003672:	4965      	ldr	r1, [pc, #404]	; (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	4313      	orrs	r3, r2
 8003678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800367a:	4b63      	ldr	r3, [pc, #396]	; (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d001      	beq.n	800368c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0b8      	b.n	80037fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d020      	beq.n	80036da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036a4:	4b59      	ldr	r3, [pc, #356]	; (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4a58      	ldr	r2, [pc, #352]	; (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80036aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036bc:	4b53      	ldr	r3, [pc, #332]	; (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	4a52      	ldr	r2, [pc, #328]	; (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c8:	4b50      	ldr	r3, [pc, #320]	; (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	494d      	ldr	r1, [pc, #308]	; (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d040      	beq.n	8003768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d107      	bne.n	80036fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ee:	4b47      	ldr	r3, [pc, #284]	; (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d115      	bne.n	8003726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e07f      	b.n	80037fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d107      	bne.n	8003716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003706:	4b41      	ldr	r3, [pc, #260]	; (800380c <HAL_RCC_ClockConfig+0x1c4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e073      	b.n	80037fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003716:	4b3d      	ldr	r3, [pc, #244]	; (800380c <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e06b      	b.n	80037fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003726:	4b39      	ldr	r3, [pc, #228]	; (800380c <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f023 0203 	bic.w	r2, r3, #3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4936      	ldr	r1, [pc, #216]	; (800380c <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	4313      	orrs	r3, r2
 8003736:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003738:	f7fd fbaa 	bl	8000e90 <HAL_GetTick>
 800373c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373e:	e00a      	b.n	8003756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003740:	f7fd fba6 	bl	8000e90 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	f241 3288 	movw	r2, #5000	; 0x1388
 800374e:	4293      	cmp	r3, r2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e053      	b.n	80037fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003756:	4b2d      	ldr	r3, [pc, #180]	; (800380c <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 020c 	and.w	r2, r3, #12
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	429a      	cmp	r2, r3
 8003766:	d1eb      	bne.n	8003740 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003768:	4b27      	ldr	r3, [pc, #156]	; (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d210      	bcs.n	8003798 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003776:	4b24      	ldr	r3, [pc, #144]	; (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 0207 	bic.w	r2, r3, #7
 800377e:	4922      	ldr	r1, [pc, #136]	; (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	4313      	orrs	r3, r2
 8003784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003786:	4b20      	ldr	r3, [pc, #128]	; (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e032      	b.n	80037fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037a4:	4b19      	ldr	r3, [pc, #100]	; (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4916      	ldr	r1, [pc, #88]	; (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037c2:	4b12      	ldr	r3, [pc, #72]	; (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	490e      	ldr	r1, [pc, #56]	; (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037d6:	f000 f821 	bl	800381c <HAL_RCC_GetSysClockFreq>
 80037da:	4602      	mov	r2, r0
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	490a      	ldr	r1, [pc, #40]	; (8003810 <HAL_RCC_ClockConfig+0x1c8>)
 80037e8:	5ccb      	ldrb	r3, [r1, r3]
 80037ea:	fa22 f303 	lsr.w	r3, r2, r3
 80037ee:	4a09      	ldr	r2, [pc, #36]	; (8003814 <HAL_RCC_ClockConfig+0x1cc>)
 80037f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037f2:	4b09      	ldr	r3, [pc, #36]	; (8003818 <HAL_RCC_ClockConfig+0x1d0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fd fa22 	bl	8000c40 <HAL_InitTick>

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40022000 	.word	0x40022000
 800380c:	40021000 	.word	0x40021000
 8003810:	0800afb8 	.word	0x0800afb8
 8003814:	20000000 	.word	0x20000000
 8003818:	20000004 	.word	0x20000004

0800381c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800381c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003820:	b099      	sub	sp, #100	; 0x64
 8003822:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8003824:	4b66      	ldr	r3, [pc, #408]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003826:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800382a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800382c:	c407      	stmia	r4!, {r0, r1, r2}
 800382e:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8003830:	4b64      	ldr	r3, [pc, #400]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003832:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8003836:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003838:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	657b      	str	r3, [r7, #84]	; 0x54
 8003840:	2300      	movs	r3, #0
 8003842:	653b      	str	r3, [r7, #80]	; 0x50
 8003844:	2300      	movs	r3, #0
 8003846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003848:	2300      	movs	r3, #0
 800384a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t sysclockfreq = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	64bb      	str	r3, [r7, #72]	; 0x48
 8003854:	2300      	movs	r3, #0
 8003856:	647b      	str	r3, [r7, #68]	; 0x44
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003858:	4b5b      	ldr	r3, [pc, #364]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800385e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b04      	cmp	r3, #4
 8003866:	d002      	beq.n	800386e <HAL_RCC_GetSysClockFreq+0x52>
 8003868:	2b08      	cmp	r3, #8
 800386a:	d003      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x58>
 800386c:	e09f      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800386e:	4b57      	ldr	r3, [pc, #348]	; (80039cc <HAL_RCC_GetSysClockFreq+0x1b0>)
 8003870:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8003872:	e09f      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003876:	0c9b      	lsrs	r3, r3, #18
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	3340      	adds	r3, #64	; 0x40
 800387e:	f107 0220 	add.w	r2, r7, #32
 8003882:	4413      	add	r3, r2
 8003884:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8003888:	64fb      	str	r3, [r7, #76]	; 0x4c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800388a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800388c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 8084 	beq.w	800399e <HAL_RCC_GetSysClockFreq+0x182>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003896:	4b4c      	ldr	r3, [pc, #304]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	3340      	adds	r3, #64	; 0x40
 80038a0:	f107 0220 	add.w	r2, r7, #32
 80038a4:	4413      	add	r3, r2
 80038a6:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80038aa:	653b      	str	r3, [r7, #80]	; 0x50
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80038ac:	4b46      	ldr	r3, [pc, #280]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d060      	beq.n	800397a <HAL_RCC_GetSysClockFreq+0x15e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80038b8:	4b43      	ldr	r3, [pc, #268]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	3301      	adds	r3, #1
 80038c4:	64bb      	str	r3, [r7, #72]	; 0x48
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80038c6:	4b40      	ldr	r3, [pc, #256]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	0a1b      	lsrs	r3, r3, #8
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	3302      	adds	r3, #2
 80038d2:	647b      	str	r3, [r7, #68]	; 0x44
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80038d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d6:	2200      	movs	r2, #0
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	617a      	str	r2, [r7, #20]
 80038dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038de:	2200      	movs	r2, #0
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	61fa      	str	r2, [r7, #28]
 80038e4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80038e8:	4622      	mov	r2, r4
 80038ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80038ee:	4684      	mov	ip, r0
 80038f0:	fb0c f202 	mul.w	r2, ip, r2
 80038f4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80038f8:	468c      	mov	ip, r1
 80038fa:	4618      	mov	r0, r3
 80038fc:	4621      	mov	r1, r4
 80038fe:	4603      	mov	r3, r0
 8003900:	fb03 f30c 	mul.w	r3, r3, ip
 8003904:	4413      	add	r3, r2
 8003906:	4602      	mov	r2, r0
 8003908:	69b9      	ldr	r1, [r7, #24]
 800390a:	fba2 8901 	umull	r8, r9, r2, r1
 800390e:	444b      	add	r3, r9
 8003910:	4699      	mov	r9, r3
 8003912:	4b2e      	ldr	r3, [pc, #184]	; (80039cc <HAL_RCC_GetSysClockFreq+0x1b0>)
 8003914:	fb03 f209 	mul.w	r2, r3, r9
 8003918:	2300      	movs	r3, #0
 800391a:	fb03 f308 	mul.w	r3, r3, r8
 800391e:	4413      	add	r3, r2
 8003920:	4a2a      	ldr	r2, [pc, #168]	; (80039cc <HAL_RCC_GetSysClockFreq+0x1b0>)
 8003922:	fba8 ab02 	umull	sl, fp, r8, r2
 8003926:	445b      	add	r3, fp
 8003928:	469b      	mov	fp, r3
 800392a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392c:	2200      	movs	r2, #0
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	60fa      	str	r2, [r7, #12]
 8003932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003934:	2200      	movs	r2, #0
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800393e:	4622      	mov	r2, r4
 8003940:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003944:	4641      	mov	r1, r8
 8003946:	fb01 f202 	mul.w	r2, r1, r2
 800394a:	46cc      	mov	ip, r9
 800394c:	4618      	mov	r0, r3
 800394e:	4621      	mov	r1, r4
 8003950:	4603      	mov	r3, r0
 8003952:	fb03 f30c 	mul.w	r3, r3, ip
 8003956:	4413      	add	r3, r2
 8003958:	4602      	mov	r2, r0
 800395a:	4641      	mov	r1, r8
 800395c:	fba2 5601 	umull	r5, r6, r2, r1
 8003960:	4433      	add	r3, r6
 8003962:	461e      	mov	r6, r3
 8003964:	462a      	mov	r2, r5
 8003966:	4633      	mov	r3, r6
 8003968:	4650      	mov	r0, sl
 800396a:	4659      	mov	r1, fp
 800396c:	f7fc fc60 	bl	8000230 <__aeabi_uldivmod>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4613      	mov	r3, r2
 8003976:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003978:	e007      	b.n	800398a <HAL_RCC_GetSysClockFreq+0x16e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800397a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800397c:	4a13      	ldr	r2, [pc, #76]	; (80039cc <HAL_RCC_GetSysClockFreq+0x1b0>)
 800397e:	fb03 f202 	mul.w	r2, r3, r2
 8003982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003984:	fbb2 f3f3 	udiv	r3, r2, r3
 8003988:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800398a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800398e:	461a      	mov	r2, r3
 8003990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003992:	4293      	cmp	r3, r2
 8003994:	d108      	bne.n	80039a8 <HAL_RCC_GetSysClockFreq+0x18c>
        {
          pllclk = pllclk / 2;
 8003996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003998:	085b      	lsrs	r3, r3, #1
 800399a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800399c:	e004      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0x18c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800399e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a0:	4a0b      	ldr	r2, [pc, #44]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x1b4>)
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
 80039a6:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      sysclockfreq = pllclk;
 80039a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039aa:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 80039ac:	e002      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039ae:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039b0:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 80039b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3764      	adds	r7, #100	; 0x64
 80039ba:	46bd      	mov	sp, r7
 80039bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c0:	0800af54 	.word	0x0800af54
 80039c4:	0800af64 	.word	0x0800af64
 80039c8:	40021000 	.word	0x40021000
 80039cc:	00989680 	.word	0x00989680
 80039d0:	003d0900 	.word	0x003d0900
 80039d4:	007a1200 	.word	0x007a1200

080039d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039dc:	4b02      	ldr	r3, [pc, #8]	; (80039e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80039de:	681b      	ldr	r3, [r3, #0]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr
 80039e8:	20000000 	.word	0x20000000

080039ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039f0:	f7ff fff2 	bl	80039d8 <HAL_RCC_GetHCLKFreq>
 80039f4:	4602      	mov	r2, r0
 80039f6:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	4903      	ldr	r1, [pc, #12]	; (8003a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a02:	5ccb      	ldrb	r3, [r1, r3]
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	0800afc8 	.word	0x0800afc8

08003a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a18:	f7ff ffde 	bl	80039d8 <HAL_RCC_GetHCLKFreq>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	0adb      	lsrs	r3, r3, #11
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	4903      	ldr	r1, [pc, #12]	; (8003a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a2a:	5ccb      	ldrb	r3, [r1, r3]
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40021000 	.word	0x40021000
 8003a38:	0800afc8 	.word	0x0800afc8

08003a3c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	220f      	movs	r2, #15
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <HAL_RCC_GetClockConfig+0x58>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 0203 	and.w	r2, r3, #3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a58:	4b0e      	ldr	r3, [pc, #56]	; (8003a94 <HAL_RCC_GetClockConfig+0x58>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_RCC_GetClockConfig+0x58>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003a70:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <HAL_RCC_GetClockConfig+0x58>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	08db      	lsrs	r3, r3, #3
 8003a76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a7e:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <HAL_RCC_GetClockConfig+0x5c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0207 	and.w	r2, r3, #7
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr
 8003a94:	40021000 	.word	0x40021000
 8003a98:	40022000 	.word	0x40022000

08003a9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <RCC_Delay+0x34>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a0a      	ldr	r2, [pc, #40]	; (8003ad4 <RCC_Delay+0x38>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	0a5b      	lsrs	r3, r3, #9
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ab8:	bf00      	nop
  }
  while (Delay --);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1e5a      	subs	r2, r3, #1
 8003abe:	60fa      	str	r2, [r7, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f9      	bne.n	8003ab8 <RCC_Delay+0x1c>
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr
 8003ad0:	20000000 	.word	0x20000000
 8003ad4:	10624dd3 	.word	0x10624dd3

08003ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d07d      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8003af8:	2300      	movs	r3, #0
 8003afa:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afc:	4b8b      	ldr	r3, [pc, #556]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10d      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b08:	4b88      	ldr	r3, [pc, #544]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	4a87      	ldr	r2, [pc, #540]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b12:	61d3      	str	r3, [r2, #28]
 8003b14:	4b85      	ldr	r3, [pc, #532]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b20:	2301      	movs	r3, #1
 8003b22:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b24:	4b82      	ldr	r3, [pc, #520]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d118      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b30:	4b7f      	ldr	r3, [pc, #508]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a7e      	ldr	r2, [pc, #504]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b3c:	f7fd f9a8 	bl	8000e90 <HAL_GetTick>
 8003b40:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b42:	e008      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b44:	f7fd f9a4 	bl	8000e90 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	; 0x64
 8003b50:	d901      	bls.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e0e5      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b56:	4b76      	ldr	r3, [pc, #472]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b62:	4b72      	ldr	r3, [pc, #456]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b6a:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d02e      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d027      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b80:	4b6a      	ldr	r3, [pc, #424]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b88:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b8a:	4b6a      	ldr	r3, [pc, #424]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b90:	4b68      	ldr	r3, [pc, #416]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b96:	4a65      	ldr	r2, [pc, #404]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d014      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba6:	f7fd f973 	bl	8000e90 <HAL_GetTick>
 8003baa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bae:	f7fd f96f 	bl	8000e90 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e0ae      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc4:	4b59      	ldr	r3, [pc, #356]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ee      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bd0:	4b56      	ldr	r3, [pc, #344]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	4953      	ldr	r1, [pc, #332]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003be2:	7efb      	ldrb	r3, [r7, #27]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d105      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be8:	4b50      	ldr	r3, [pc, #320]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	4a4f      	ldr	r2, [pc, #316]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c00:	4b4a      	ldr	r3, [pc, #296]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	4947      	ldr	r1, [pc, #284]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d008      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003c1e:	4b43      	ldr	r3, [pc, #268]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	4940      	ldr	r1, [pc, #256]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8003c3c:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	4938      	ldr	r1, [pc, #224]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8003c4e:	4b37      	ldr	r3, [pc, #220]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d105      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8003c5a:	4b34      	ldr	r3, [pc, #208]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8003c66:	2301      	movs	r3, #1
 8003c68:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d148      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8003c70:	4b2e      	ldr	r3, [pc, #184]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d138      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003c7c:	4b2b      	ldr	r3, [pc, #172]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8003c88:	4b28      	ldr	r3, [pc, #160]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d001      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e042      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8003c9c:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	4920      	ldr	r1, [pc, #128]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8003cae:	4b1f      	ldr	r3, [pc, #124]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	491c      	ldr	r1, [pc, #112]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8003cc0:	4b1d      	ldr	r3, [pc, #116]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc6:	f7fd f8e3 	bl	8000e90 <HAL_GetTick>
 8003cca:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cce:	f7fd f8df 	bl	8000e90 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b64      	cmp	r3, #100	; 0x64
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e020      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ce0:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0f0      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003cec:	e009      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8003cee:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d001      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e00f      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d0e:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	4904      	ldr	r1, [pc, #16]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	40007000 	.word	0x40007000
 8003d34:	42420440 	.word	0x42420440
 8003d38:	42420070 	.word	0x42420070

08003d3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e076      	b.n	8003e3c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d108      	bne.n	8003d68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d5e:	d009      	beq.n	8003d74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	61da      	str	r2, [r3, #28]
 8003d66:	e005      	b.n	8003d74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7fc fe7c 	bl	8000a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003daa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df8:	ea42 0103 	orr.w	r1, r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	0c1a      	lsrs	r2, r3, #16
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f002 0204 	and.w	r2, r2, #4
 8003e1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69da      	ldr	r2, [r3, #28]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	099b      	lsrs	r3, r3, #6
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10f      	bne.n	8003e88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d004      	beq.n	8003e88 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	4798      	blx	r3
    return;
 8003e86:	e0be      	b.n	8004006 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	085b      	lsrs	r3, r3, #1
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <HAL_SPI_IRQHandler+0x66>
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	09db      	lsrs	r3, r3, #7
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d004      	beq.n	8003eaa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	4798      	blx	r3
    return;
 8003ea8:	e0ad      	b.n	8004006 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <HAL_SPI_IRQHandler+0x80>
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	099b      	lsrs	r3, r3, #6
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80a1 	beq.w	8004006 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 809a 	beq.w	8004006 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	099b      	lsrs	r3, r3, #6
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d023      	beq.n	8003f26 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d011      	beq.n	8003f0e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eee:	f043 0204 	orr.w	r2, r3, #4
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	e00b      	b.n	8003f26 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	693b      	ldr	r3, [r7, #16]
        return;
 8003f24:	e06f      	b.n	8004006 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d014      	beq.n	8003f5c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f36:	f043 0201 	orr.w	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d04f      	beq.n	8004004 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f72:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d104      	bne.n	8003f90 <HAL_SPI_IRQHandler+0x14c>
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d034      	beq.n	8003ffa <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0203 	bic.w	r2, r2, #3
 8003f9e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d011      	beq.n	8003fcc <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fac:	4a17      	ldr	r2, [pc, #92]	; (800400c <HAL_SPI_IRQHandler+0x1c8>)
 8003fae:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fd f8b3 	bl	8001120 <HAL_DMA_Abort_IT>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d016      	beq.n	8004002 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd8:	4a0c      	ldr	r2, [pc, #48]	; (800400c <HAL_SPI_IRQHandler+0x1c8>)
 8003fda:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fd f89d 	bl	8001120 <HAL_DMA_Abort_IT>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003ff8:	e003      	b.n	8004002 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f808 	bl	8004010 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004000:	e000      	b.n	8004004 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004002:	bf00      	nop
    return;
 8004004:	bf00      	nop
  }
}
 8004006:	3720      	adds	r7, #32
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	08004023 	.word	0x08004023

08004010 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b084      	sub	sp, #16
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7ff ffe7 	bl	8004010 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e041      	b.n	80040e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d106      	bne.n	8004076 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7fc fd6d 	bl	8000b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2202      	movs	r2, #2
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3304      	adds	r3, #4
 8004086:	4619      	mov	r1, r3
 8004088:	4610      	mov	r0, r2
 800408a:	f000 fa77 	bl	800457c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d001      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e03f      	b.n	8004180 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1b      	ldr	r2, [pc, #108]	; (800418c <HAL_TIM_Base_Start_IT+0xa4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d013      	beq.n	800414a <HAL_TIM_Base_Start_IT+0x62>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412a:	d00e      	beq.n	800414a <HAL_TIM_Base_Start_IT+0x62>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a17      	ldr	r2, [pc, #92]	; (8004190 <HAL_TIM_Base_Start_IT+0xa8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d009      	beq.n	800414a <HAL_TIM_Base_Start_IT+0x62>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a16      	ldr	r2, [pc, #88]	; (8004194 <HAL_TIM_Base_Start_IT+0xac>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d004      	beq.n	800414a <HAL_TIM_Base_Start_IT+0x62>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a14      	ldr	r2, [pc, #80]	; (8004198 <HAL_TIM_Base_Start_IT+0xb0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d111      	bne.n	800416e <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b06      	cmp	r3, #6
 800415a:	d010      	beq.n	800417e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416c:	e007      	b.n	800417e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40012c00 	.word	0x40012c00
 8004190:	40000400 	.word	0x40000400
 8004194:	40000800 	.word	0x40000800
 8004198:	40000c00 	.word	0x40000c00

0800419c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d122      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d11b      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0202 	mvn.w	r2, #2
 80041c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f9b1 	bl	8004546 <HAL_TIM_IC_CaptureCallback>
 80041e4:	e005      	b.n	80041f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f9a4 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f9b3 	bl	8004558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b04      	cmp	r3, #4
 8004204:	d122      	bne.n	800424c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b04      	cmp	r3, #4
 8004212:	d11b      	bne.n	800424c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0204 	mvn.w	r2, #4
 800421c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2202      	movs	r2, #2
 8004222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f987 	bl	8004546 <HAL_TIM_IC_CaptureCallback>
 8004238:	e005      	b.n	8004246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f97a 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f989 	bl	8004558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b08      	cmp	r3, #8
 8004258:	d122      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b08      	cmp	r3, #8
 8004266:	d11b      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0208 	mvn.w	r2, #8
 8004270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2204      	movs	r2, #4
 8004276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f95d 	bl	8004546 <HAL_TIM_IC_CaptureCallback>
 800428c:	e005      	b.n	800429a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f950 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f95f 	bl	8004558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0310 	and.w	r3, r3, #16
 80042aa:	2b10      	cmp	r3, #16
 80042ac:	d122      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b10      	cmp	r3, #16
 80042ba:	d11b      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0210 	mvn.w	r2, #16
 80042c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2208      	movs	r2, #8
 80042ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f933 	bl	8004546 <HAL_TIM_IC_CaptureCallback>
 80042e0:	e005      	b.n	80042ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f926 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f935 	bl	8004558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d10e      	bne.n	8004320 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b01      	cmp	r3, #1
 800430e:	d107      	bne.n	8004320 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0201 	mvn.w	r2, #1
 8004318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7fc fb66 	bl	80009ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432a:	2b80      	cmp	r3, #128	; 0x80
 800432c:	d10e      	bne.n	800434c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004338:	2b80      	cmp	r3, #128	; 0x80
 800433a:	d107      	bne.n	800434c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fa89 	bl	800485e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004356:	2b40      	cmp	r3, #64	; 0x40
 8004358:	d10e      	bne.n	8004378 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b40      	cmp	r3, #64	; 0x40
 8004366:	d107      	bne.n	8004378 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f8f9 	bl	800456a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b20      	cmp	r3, #32
 8004384:	d10e      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0320 	and.w	r3, r3, #32
 8004390:	2b20      	cmp	r3, #32
 8004392:	d107      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0220 	mvn.w	r2, #32
 800439c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fa54 	bl	800484c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_TIM_ConfigClockSource+0x18>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e0b3      	b.n	800452c <HAL_TIM_ConfigClockSource+0x180>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043fc:	d03e      	beq.n	800447c <HAL_TIM_ConfigClockSource+0xd0>
 80043fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004402:	f200 8087 	bhi.w	8004514 <HAL_TIM_ConfigClockSource+0x168>
 8004406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800440a:	f000 8085 	beq.w	8004518 <HAL_TIM_ConfigClockSource+0x16c>
 800440e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004412:	d87f      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x168>
 8004414:	2b70      	cmp	r3, #112	; 0x70
 8004416:	d01a      	beq.n	800444e <HAL_TIM_ConfigClockSource+0xa2>
 8004418:	2b70      	cmp	r3, #112	; 0x70
 800441a:	d87b      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x168>
 800441c:	2b60      	cmp	r3, #96	; 0x60
 800441e:	d050      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0x116>
 8004420:	2b60      	cmp	r3, #96	; 0x60
 8004422:	d877      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x168>
 8004424:	2b50      	cmp	r3, #80	; 0x50
 8004426:	d03c      	beq.n	80044a2 <HAL_TIM_ConfigClockSource+0xf6>
 8004428:	2b50      	cmp	r3, #80	; 0x50
 800442a:	d873      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x168>
 800442c:	2b40      	cmp	r3, #64	; 0x40
 800442e:	d058      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x136>
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	d86f      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x168>
 8004434:	2b30      	cmp	r3, #48	; 0x30
 8004436:	d064      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x156>
 8004438:	2b30      	cmp	r3, #48	; 0x30
 800443a:	d86b      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x168>
 800443c:	2b20      	cmp	r3, #32
 800443e:	d060      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x156>
 8004440:	2b20      	cmp	r3, #32
 8004442:	d867      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x168>
 8004444:	2b00      	cmp	r3, #0
 8004446:	d05c      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x156>
 8004448:	2b10      	cmp	r3, #16
 800444a:	d05a      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800444c:	e062      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6899      	ldr	r1, [r3, #8]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f000 f970 	bl	8004742 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004470:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	609a      	str	r2, [r3, #8]
      break;
 800447a:	e04e      	b.n	800451a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	6899      	ldr	r1, [r3, #8]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f000 f959 	bl	8004742 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800449e:	609a      	str	r2, [r3, #8]
      break;
 80044a0:	e03b      	b.n	800451a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6859      	ldr	r1, [r3, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	461a      	mov	r2, r3
 80044b0:	f000 f8d0 	bl	8004654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2150      	movs	r1, #80	; 0x50
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f927 	bl	800470e <TIM_ITRx_SetConfig>
      break;
 80044c0:	e02b      	b.n	800451a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6859      	ldr	r1, [r3, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	461a      	mov	r2, r3
 80044d0:	f000 f8ee 	bl	80046b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2160      	movs	r1, #96	; 0x60
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 f917 	bl	800470e <TIM_ITRx_SetConfig>
      break;
 80044e0:	e01b      	b.n	800451a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6859      	ldr	r1, [r3, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	461a      	mov	r2, r3
 80044f0:	f000 f8b0 	bl	8004654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2140      	movs	r1, #64	; 0x40
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f907 	bl	800470e <TIM_ITRx_SetConfig>
      break;
 8004500:	e00b      	b.n	800451a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4619      	mov	r1, r3
 800450c:	4610      	mov	r0, r2
 800450e:	f000 f8fe 	bl	800470e <TIM_ITRx_SetConfig>
        break;
 8004512:	e002      	b.n	800451a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004514:	bf00      	nop
 8004516:	e000      	b.n	800451a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004518:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr

08004546 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr

0800456a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a2d      	ldr	r2, [pc, #180]	; (8004644 <TIM_Base_SetConfig+0xc8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00f      	beq.n	80045b4 <TIM_Base_SetConfig+0x38>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459a:	d00b      	beq.n	80045b4 <TIM_Base_SetConfig+0x38>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a2a      	ldr	r2, [pc, #168]	; (8004648 <TIM_Base_SetConfig+0xcc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d007      	beq.n	80045b4 <TIM_Base_SetConfig+0x38>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a29      	ldr	r2, [pc, #164]	; (800464c <TIM_Base_SetConfig+0xd0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d003      	beq.n	80045b4 <TIM_Base_SetConfig+0x38>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a28      	ldr	r2, [pc, #160]	; (8004650 <TIM_Base_SetConfig+0xd4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d108      	bne.n	80045c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a1e      	ldr	r2, [pc, #120]	; (8004644 <TIM_Base_SetConfig+0xc8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00f      	beq.n	80045ee <TIM_Base_SetConfig+0x72>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d4:	d00b      	beq.n	80045ee <TIM_Base_SetConfig+0x72>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a1b      	ldr	r2, [pc, #108]	; (8004648 <TIM_Base_SetConfig+0xcc>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d007      	beq.n	80045ee <TIM_Base_SetConfig+0x72>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a1a      	ldr	r2, [pc, #104]	; (800464c <TIM_Base_SetConfig+0xd0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d003      	beq.n	80045ee <TIM_Base_SetConfig+0x72>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a19      	ldr	r2, [pc, #100]	; (8004650 <TIM_Base_SetConfig+0xd4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d108      	bne.n	8004600 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a07      	ldr	r2, [pc, #28]	; (8004644 <TIM_Base_SetConfig+0xc8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d103      	bne.n	8004634 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	615a      	str	r2, [r3, #20]
}
 800463a:	bf00      	nop
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr
 8004644:	40012c00 	.word	0x40012c00
 8004648:	40000400 	.word	0x40000400
 800464c:	40000800 	.word	0x40000800
 8004650:	40000c00 	.word	0x40000c00

08004654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	f023 0201 	bic.w	r2, r3, #1
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800467e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f023 030a 	bic.w	r3, r3, #10
 8004690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	621a      	str	r2, [r3, #32]
}
 80046a6:	bf00      	nop
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr

080046b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f023 0210 	bic.w	r2, r3, #16
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	031b      	lsls	r3, r3, #12
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	621a      	str	r2, [r3, #32]
}
 8004704:	bf00      	nop
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr

0800470e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	f043 0307 	orr.w	r3, r3, #7
 8004730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	609a      	str	r2, [r3, #8]
}
 8004738:	bf00      	nop
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr

08004742 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004742:	b480      	push	{r7}
 8004744:	b087      	sub	sp, #28
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800475c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	021a      	lsls	r2, r3, #8
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	431a      	orrs	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4313      	orrs	r3, r2
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	609a      	str	r2, [r3, #8]
}
 8004776:	bf00      	nop
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr

08004780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004794:	2302      	movs	r3, #2
 8004796:	e04b      	b.n	8004830 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a19      	ldr	r2, [pc, #100]	; (800483c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d013      	beq.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e4:	d00e      	beq.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a15      	ldr	r2, [pc, #84]	; (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d009      	beq.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a13      	ldr	r2, [pc, #76]	; (8004844 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d004      	beq.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a12      	ldr	r2, [pc, #72]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d10c      	bne.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800480a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	4313      	orrs	r3, r2
 8004814:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40012c00 	.word	0x40012c00
 8004840:	40000400 	.word	0x40000400
 8004844:	40000800 	.word	0x40000800
 8004848:	40000c00 	.word	0x40000c00

0800484c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	bc80      	pop	{r7}
 800485c:	4770      	bx	lr

0800485e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr

08004870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e03f      	b.n	8004902 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fc f97e 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2224      	movs	r2, #36	; 0x24
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fc1d 	bl	80050f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695a      	ldr	r2, [r3, #20]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b08a      	sub	sp, #40	; 0x28
 800490e:	af02      	add	r7, sp, #8
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	603b      	str	r3, [r7, #0]
 8004916:	4613      	mov	r3, r2
 8004918:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b20      	cmp	r3, #32
 8004928:	d17c      	bne.n	8004a24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_UART_Transmit+0x2c>
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e075      	b.n	8004a26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_UART_Transmit+0x3e>
 8004944:	2302      	movs	r3, #2
 8004946:	e06e      	b.n	8004a26 <HAL_UART_Transmit+0x11c>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2221      	movs	r2, #33	; 0x21
 800495a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800495e:	f7fc fa97 	bl	8000e90 <HAL_GetTick>
 8004962:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	88fa      	ldrh	r2, [r7, #6]
 8004968:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	88fa      	ldrh	r2, [r7, #6]
 800496e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004978:	d108      	bne.n	800498c <HAL_UART_Transmit+0x82>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d104      	bne.n	800498c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004982:	2300      	movs	r3, #0
 8004984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	61bb      	str	r3, [r7, #24]
 800498a:	e003      	b.n	8004994 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004990:	2300      	movs	r3, #0
 8004992:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800499c:	e02a      	b.n	80049f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2200      	movs	r2, #0
 80049a6:	2180      	movs	r1, #128	; 0x80
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 fa08 	bl	8004dbe <UART_WaitOnFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e036      	b.n	8004a26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10b      	bne.n	80049d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	3302      	adds	r3, #2
 80049d2:	61bb      	str	r3, [r7, #24]
 80049d4:	e007      	b.n	80049e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	781a      	ldrb	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	3301      	adds	r3, #1
 80049e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1cf      	bne.n	800499e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2200      	movs	r2, #0
 8004a06:	2140      	movs	r1, #64	; 0x40
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 f9d8 	bl	8004dbe <UART_WaitOnFlagUntilTimeout>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e006      	b.n	8004a26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e000      	b.n	8004a26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a24:	2302      	movs	r3, #2
  }
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3720      	adds	r7, #32
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08a      	sub	sp, #40	; 0x28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10d      	bne.n	8004a82 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_UART_IRQHandler+0x52>
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fa90 	bl	8004fa0 <UART_Receive_IT>
      return;
 8004a80:	e17b      	b.n	8004d7a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80b1 	beq.w	8004bec <HAL_UART_IRQHandler+0x1bc>
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d105      	bne.n	8004aa0 <HAL_UART_IRQHandler+0x70>
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 80a6 	beq.w	8004bec <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x90>
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	f043 0201 	orr.w	r2, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_UART_IRQHandler+0xb0>
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	f043 0202 	orr.w	r2, r3, #2
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <HAL_UART_IRQHandler+0xd0>
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af8:	f043 0204 	orr.w	r2, r3, #4
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00f      	beq.n	8004b2a <HAL_UART_IRQHandler+0xfa>
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d104      	bne.n	8004b1e <HAL_UART_IRQHandler+0xee>
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d005      	beq.n	8004b2a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f043 0208 	orr.w	r2, r3, #8
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 811e 	beq.w	8004d70 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d007      	beq.n	8004b4e <HAL_UART_IRQHandler+0x11e>
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fa29 	bl	8004fa0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bf14      	ite	ne
 8004b5c:	2301      	movne	r3, #1
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d102      	bne.n	8004b76 <HAL_UART_IRQHandler+0x146>
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d031      	beq.n	8004bda <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f96b 	bl	8004e52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d023      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695a      	ldr	r2, [r3, #20]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b98:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d013      	beq.n	8004bca <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	4a76      	ldr	r2, [pc, #472]	; (8004d80 <HAL_UART_IRQHandler+0x350>)
 8004ba8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fc fab6 	bl	8001120 <HAL_DMA_Abort_IT>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d016      	beq.n	8004be8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc8:	e00e      	b.n	8004be8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f8e3 	bl	8004d96 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd0:	e00a      	b.n	8004be8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f8df 	bl	8004d96 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd8:	e006      	b.n	8004be8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f8db 	bl	8004d96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004be6:	e0c3      	b.n	8004d70 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be8:	bf00      	nop
    return;
 8004bea:	e0c1      	b.n	8004d70 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	f040 80a1 	bne.w	8004d38 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 809b 	beq.w	8004d38 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8095 	beq.w	8004d38 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d04e      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004c3c:	8a3b      	ldrh	r3, [r7, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 8098 	beq.w	8004d74 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c48:	8a3a      	ldrh	r2, [r7, #16]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	f080 8092 	bcs.w	8004d74 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8a3a      	ldrh	r2, [r7, #16]
 8004c54:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d02b      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c6e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0201 	bic.w	r2, r2, #1
 8004c7e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695a      	ldr	r2, [r3, #20]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c8e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0210 	bic.w	r2, r2, #16
 8004cac:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fc f9f9 	bl	80010aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f86d 	bl	8004da8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004cce:	e051      	b.n	8004d74 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d047      	beq.n	8004d78 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004ce8:	8a7b      	ldrh	r3, [r7, #18]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d044      	beq.n	8004d78 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004cfc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695a      	ldr	r2, [r3, #20]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0201 	bic.w	r2, r2, #1
 8004d0c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0210 	bic.w	r2, r2, #16
 8004d2a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d2c:	8a7b      	ldrh	r3, [r7, #18]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f839 	bl	8004da8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004d36:	e01f      	b.n	8004d78 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d008      	beq.n	8004d54 <HAL_UART_IRQHandler+0x324>
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f8c0 	bl	8004ed2 <UART_Transmit_IT>
    return;
 8004d52:	e012      	b.n	8004d7a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00d      	beq.n	8004d7a <HAL_UART_IRQHandler+0x34a>
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d008      	beq.n	8004d7a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f901 	bl	8004f70 <UART_EndTransmit_IT>
    return;
 8004d6e:	e004      	b.n	8004d7a <HAL_UART_IRQHandler+0x34a>
    return;
 8004d70:	bf00      	nop
 8004d72:	e002      	b.n	8004d7a <HAL_UART_IRQHandler+0x34a>
      return;
 8004d74:	bf00      	nop
 8004d76:	e000      	b.n	8004d7a <HAL_UART_IRQHandler+0x34a>
      return;
 8004d78:	bf00      	nop
  }
}
 8004d7a:	3728      	adds	r7, #40	; 0x28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	08004eab 	.word	0x08004eab

08004d84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc80      	pop	{r7}
 8004d94:	4770      	bx	lr

08004d96 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bc80      	pop	{r7}
 8004da6:	4770      	bx	lr

08004da8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bc80      	pop	{r7}
 8004dbc:	4770      	bx	lr

08004dbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	603b      	str	r3, [r7, #0]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dce:	e02c      	b.n	8004e2a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd6:	d028      	beq.n	8004e2a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <UART_WaitOnFlagUntilTimeout+0x30>
 8004dde:	f7fc f857 	bl	8000e90 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d21d      	bcs.n	8004e2a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004dfc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695a      	ldr	r2, [r3, #20]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0201 	bic.w	r2, r2, #1
 8004e0c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e00f      	b.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4013      	ands	r3, r2
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	bf0c      	ite	eq
 8004e3a:	2301      	moveq	r3, #1
 8004e3c:	2300      	movne	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d0c3      	beq.n	8004dd0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e68:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695a      	ldr	r2, [r3, #20]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0201 	bic.w	r2, r2, #1
 8004e78:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d107      	bne.n	8004e92 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0210 	bic.w	r2, r2, #16
 8004e90:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bc80      	pop	{r7}
 8004ea8:	4770      	bx	lr

08004eaa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f7ff ff66 	bl	8004d96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eca:	bf00      	nop
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b085      	sub	sp, #20
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b21      	cmp	r3, #33	; 0x21
 8004ee4:	d13e      	bne.n	8004f64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eee:	d114      	bne.n	8004f1a <UART_Transmit_IT+0x48>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d110      	bne.n	8004f1a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	1c9a      	adds	r2, r3, #2
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	621a      	str	r2, [r3, #32]
 8004f18:	e008      	b.n	8004f2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	1c59      	adds	r1, r3, #1
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6211      	str	r1, [r2, #32]
 8004f24:	781a      	ldrb	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10f      	bne.n	8004f60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	e000      	b.n	8004f66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f64:	2302      	movs	r3, #2
  }
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr

08004f70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff fef7 	bl	8004d84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b22      	cmp	r3, #34	; 0x22
 8004fb2:	f040 8099 	bne.w	80050e8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fbe:	d117      	bne.n	8004ff0 <UART_Receive_IT+0x50>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d113      	bne.n	8004ff0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	1c9a      	adds	r2, r3, #2
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	629a      	str	r2, [r3, #40]	; 0x28
 8004fee:	e026      	b.n	800503e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005002:	d007      	beq.n	8005014 <UART_Receive_IT+0x74>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <UART_Receive_IT+0x82>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	b2da      	uxtb	r2, r3
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	701a      	strb	r2, [r3, #0]
 8005020:	e008      	b.n	8005034 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800502e:	b2da      	uxtb	r2, r3
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29b      	uxth	r3, r3
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	4619      	mov	r1, r3
 800504c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800504e:	2b00      	cmp	r3, #0
 8005050:	d148      	bne.n	80050e4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0220 	bic.w	r2, r2, #32
 8005060:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005070:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695a      	ldr	r2, [r3, #20]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0201 	bic.w	r2, r2, #1
 8005080:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508e:	2b01      	cmp	r3, #1
 8005090:	d123      	bne.n	80050da <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0210 	bic.w	r2, r2, #16
 80050a6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0310 	and.w	r3, r3, #16
 80050b2:	2b10      	cmp	r3, #16
 80050b4:	d10a      	bne.n	80050cc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050d0:	4619      	mov	r1, r3
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7ff fe68 	bl	8004da8 <HAL_UARTEx_RxEventCallback>
 80050d8:	e002      	b.n	80050e0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fb fc40 	bl	8000960 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	e002      	b.n	80050ea <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	e000      	b.n	80050ea <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80050e8:	2302      	movs	r3, #2
  }
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	4313      	orrs	r3, r2
 8005122:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800512e:	f023 030c 	bic.w	r3, r3, #12
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6812      	ldr	r2, [r2, #0]
 8005136:	68b9      	ldr	r1, [r7, #8]
 8005138:	430b      	orrs	r3, r1
 800513a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699a      	ldr	r2, [r3, #24]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a2c      	ldr	r2, [pc, #176]	; (8005208 <UART_SetConfig+0x114>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d103      	bne.n	8005164 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800515c:	f7fe fc5a 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	e002      	b.n	800516a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005164:	f7fe fc42 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8005168:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	009a      	lsls	r2, r3, #2
 8005174:	441a      	add	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005180:	4a22      	ldr	r2, [pc, #136]	; (800520c <UART_SetConfig+0x118>)
 8005182:	fba2 2303 	umull	r2, r3, r2, r3
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	0119      	lsls	r1, r3, #4
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	009a      	lsls	r2, r3, #2
 8005194:	441a      	add	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	fbb2 f2f3 	udiv	r2, r2, r3
 80051a0:	4b1a      	ldr	r3, [pc, #104]	; (800520c <UART_SetConfig+0x118>)
 80051a2:	fba3 0302 	umull	r0, r3, r3, r2
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	2064      	movs	r0, #100	; 0x64
 80051aa:	fb00 f303 	mul.w	r3, r0, r3
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	3332      	adds	r3, #50	; 0x32
 80051b4:	4a15      	ldr	r2, [pc, #84]	; (800520c <UART_SetConfig+0x118>)
 80051b6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ba:	095b      	lsrs	r3, r3, #5
 80051bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051c0:	4419      	add	r1, r3
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4613      	mov	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	009a      	lsls	r2, r3, #2
 80051cc:	441a      	add	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80051d8:	4b0c      	ldr	r3, [pc, #48]	; (800520c <UART_SetConfig+0x118>)
 80051da:	fba3 0302 	umull	r0, r3, r3, r2
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	2064      	movs	r0, #100	; 0x64
 80051e2:	fb00 f303 	mul.w	r3, r0, r3
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	3332      	adds	r3, #50	; 0x32
 80051ec:	4a07      	ldr	r2, [pc, #28]	; (800520c <UART_SetConfig+0x118>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	f003 020f 	and.w	r2, r3, #15
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	440a      	add	r2, r1
 80051fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005200:	bf00      	nop
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40013800 	.word	0x40013800
 800520c:	51eb851f 	.word	0x51eb851f

08005210 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005210:	b084      	sub	sp, #16
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	f107 001c 	add.w	r0, r7, #28
 800521e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f970 	bl	8005514 <USB_CoreReset>
 8005234:	4603      	mov	r3, r0
 8005236:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005250:	b004      	add	sp, #16
 8005252:	4770      	bx	lr

08005254 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f043 0201 	orr.w	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr

08005274 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f023 0201 	bic.w	r2, r3, #1
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr

08005294 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d115      	bne.n	80052e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052c2:	2001      	movs	r0, #1
 80052c4:	f7fb fdee 	bl	8000ea4 <HAL_Delay>
      ms++;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3301      	adds	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f912 	bl	80054f8 <USB_GetMode>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d01e      	beq.n	8005318 <USB_SetCurrentMode+0x84>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b31      	cmp	r3, #49	; 0x31
 80052de:	d9f0      	bls.n	80052c2 <USB_SetCurrentMode+0x2e>
 80052e0:	e01a      	b.n	8005318 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d115      	bne.n	8005314 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052f4:	2001      	movs	r0, #1
 80052f6:	f7fb fdd5 	bl	8000ea4 <HAL_Delay>
      ms++;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3301      	adds	r3, #1
 80052fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f8f9 	bl	80054f8 <USB_GetMode>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d005      	beq.n	8005318 <USB_SetCurrentMode+0x84>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b31      	cmp	r3, #49	; 0x31
 8005310:	d9f0      	bls.n	80052f4 <USB_SetCurrentMode+0x60>
 8005312:	e001      	b.n	8005318 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e005      	b.n	8005324 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b32      	cmp	r3, #50	; 0x32
 800531c:	d101      	bne.n	8005322 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e000      	b.n	8005324 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	019b      	lsls	r3, r3, #6
 800533e:	f043 0220 	orr.w	r2, r3, #32
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3301      	adds	r3, #1
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4a08      	ldr	r2, [pc, #32]	; (8005370 <USB_FlushTxFifo+0x44>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d901      	bls.n	8005358 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e006      	b.n	8005366 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	f003 0320 	and.w	r3, r3, #32
 8005360:	2b20      	cmp	r3, #32
 8005362:	d0f0      	beq.n	8005346 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	bc80      	pop	{r7}
 800536e:	4770      	bx	lr
 8005370:	00030d40 	.word	0x00030d40

08005374 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2210      	movs	r2, #16
 8005384:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3301      	adds	r3, #1
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4a08      	ldr	r2, [pc, #32]	; (80053b0 <USB_FlushRxFifo+0x3c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d901      	bls.n	8005398 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e006      	b.n	80053a6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f003 0310 	and.w	r3, r3, #16
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d0f0      	beq.n	8005386 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr
 80053b0:	00030d40 	.word	0x00030d40

080053b4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b089      	sub	sp, #36	; 0x24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	4611      	mov	r1, r2
 80053c0:	461a      	mov	r2, r3
 80053c2:	460b      	mov	r3, r1
 80053c4:	71fb      	strb	r3, [r7, #7]
 80053c6:	4613      	mov	r3, r2
 80053c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80053d2:	88bb      	ldrh	r3, [r7, #4]
 80053d4:	3303      	adds	r3, #3
 80053d6:	089b      	lsrs	r3, r3, #2
 80053d8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80053da:	2300      	movs	r3, #0
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	e018      	b.n	8005412 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053e0:	79fb      	ldrb	r3, [r7, #7]
 80053e2:	031a      	lsls	r2, r3, #12
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ec:	461a      	mov	r2, r3
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6013      	str	r3, [r2, #0]
    pSrc++;
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	3301      	adds	r3, #1
 80053f8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	3301      	adds	r3, #1
 80053fe:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	3301      	adds	r3, #1
 8005404:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	3301      	adds	r3, #1
 800540a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	3301      	adds	r3, #1
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	429a      	cmp	r2, r3
 8005418:	d3e2      	bcc.n	80053e0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3724      	adds	r7, #36	; 0x24
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr

08005426 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005426:	b480      	push	{r7}
 8005428:	b08b      	sub	sp, #44	; 0x2c
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	4613      	mov	r3, r2
 8005432:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800543c:	88fb      	ldrh	r3, [r7, #6]
 800543e:	089b      	lsrs	r3, r3, #2
 8005440:	b29b      	uxth	r3, r3
 8005442:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005444:	88fb      	ldrh	r3, [r7, #6]
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800544c:	2300      	movs	r3, #0
 800544e:	623b      	str	r3, [r7, #32]
 8005450:	e014      	b.n	800547c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	601a      	str	r2, [r3, #0]
    pDest++;
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	3301      	adds	r3, #1
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	3301      	adds	r3, #1
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	3301      	adds	r3, #1
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	3301      	adds	r3, #1
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	3301      	adds	r3, #1
 800547a:	623b      	str	r3, [r7, #32]
 800547c:	6a3a      	ldr	r2, [r7, #32]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	429a      	cmp	r2, r3
 8005482:	d3e6      	bcc.n	8005452 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005484:	8bfb      	ldrh	r3, [r7, #30]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d01e      	beq.n	80054c8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005494:	461a      	mov	r2, r3
 8005496:	f107 0310 	add.w	r3, r7, #16
 800549a:	6812      	ldr	r2, [r2, #0]
 800549c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	fa22 f303 	lsr.w	r3, r2, r3
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	701a      	strb	r2, [r3, #0]
      i++;
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	3301      	adds	r3, #1
 80054b4:	623b      	str	r3, [r7, #32]
      pDest++;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	3301      	adds	r3, #1
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80054bc:	8bfb      	ldrh	r3, [r7, #30]
 80054be:	3b01      	subs	r3, #1
 80054c0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80054c2:	8bfb      	ldrh	r3, [r7, #30]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1ea      	bne.n	800549e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	372c      	adds	r7, #44	; 0x2c
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr

080054d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4013      	ands	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80054ec:	68fb      	ldr	r3, [r7, #12]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr

080054f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	f003 0301 	and.w	r3, r3, #1
}
 8005508:	4618      	mov	r0, r3
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	bc80      	pop	{r7}
 8005510:	4770      	bx	lr
	...

08005514 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3301      	adds	r3, #1
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4a12      	ldr	r2, [pc, #72]	; (8005574 <USB_CoreReset+0x60>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e01b      	b.n	800556a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	daf2      	bge.n	8005520 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f043 0201 	orr.w	r2, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3301      	adds	r3, #1
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4a08      	ldr	r2, [pc, #32]	; (8005574 <USB_CoreReset+0x60>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d901      	bls.n	800555c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e006      	b.n	800556a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b01      	cmp	r3, #1
 8005566:	d0f0      	beq.n	800554a <USB_CoreReset+0x36>

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr
 8005574:	00030d40 	.word	0x00030d40

08005578 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005578:	b084      	sub	sp, #16
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	f107 001c 	add.w	r0, r7, #28
 8005586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005594:	461a      	mov	r2, r3
 8005596:	2300      	movs	r3, #0
 8005598:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055c0:	f023 0304 	bic.w	r3, r3, #4
 80055c4:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80055c6:	2110      	movs	r1, #16
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff feaf 	bl	800532c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff fed0 	bl	8005374 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	e015      	b.n	8005606 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e6:	461a      	mov	r2, r3
 80055e8:	f04f 33ff 	mov.w	r3, #4294967295
 80055ec:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055fa:	461a      	mov	r2, r3
 80055fc:	2300      	movs	r3, #0
 80055fe:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3301      	adds	r3, #1
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	429a      	cmp	r2, r3
 800560c:	d3e5      	bcc.n	80055da <USB_HostInit+0x62>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f04f 32ff 	mov.w	r2, #4294967295
 800561a:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2280      	movs	r2, #128	; 0x80
 8005620:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a0c      	ldr	r2, [pc, #48]	; (8005658 <USB_HostInit+0xe0>)
 8005626:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a0c      	ldr	r2, [pc, #48]	; (800565c <USB_HostInit+0xe4>)
 800562c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	f043 0210 	orr.w	r2, r3, #16
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699a      	ldr	r2, [r3, #24]
 8005640:	4b07      	ldr	r3, [pc, #28]	; (8005660 <USB_HostInit+0xe8>)
 8005642:	4313      	orrs	r3, r2
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005654:	b004      	add	sp, #16
 8005656:	4770      	bx	lr
 8005658:	00600080 	.word	0x00600080
 800565c:	004000e0 	.word	0x004000e0
 8005660:	a3200008 	.word	0xa3200008

08005664 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005682:	f023 0303 	bic.w	r3, r3, #3
 8005686:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	68f9      	ldr	r1, [r7, #12]
 8005698:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800569c:	4313      	orrs	r3, r2
 800569e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d107      	bne.n	80056b6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ac:	461a      	mov	r2, r3
 80056ae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80056b2:	6053      	str	r3, [r2, #4]
 80056b4:	e009      	b.n	80056ca <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d106      	bne.n	80056ca <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056c2:	461a      	mov	r2, r3
 80056c4:	f241 7370 	movw	r3, #6000	; 0x1770
 80056c8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bc80      	pop	{r7}
 80056d4:	4770      	bx	lr

080056d6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b084      	sub	sp, #16
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80056f6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005704:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005706:	2064      	movs	r0, #100	; 0x64
 8005708:	f7fb fbcc 	bl	8000ea4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005718:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800571a:	200a      	movs	r0, #10
 800571c:	f7fb fbc2 	bl	8000ea4 <HAL_Delay>

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800572a:	b480      	push	{r7}
 800572c:	b085      	sub	sp, #20
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	460b      	mov	r3, r1
 8005734:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800574e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d109      	bne.n	800576e <USB_DriveVbus+0x44>
 800575a:	78fb      	ldrb	r3, [r7, #3]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d106      	bne.n	800576e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005768:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800576c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005778:	d109      	bne.n	800578e <USB_DriveVbus+0x64>
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d106      	bne.n	800578e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800578c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr

0800579a <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800579a:	b480      	push	{r7}
 800579c:	b085      	sub	sp, #20
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	0c5b      	lsrs	r3, r3, #17
 80057b8:	f003 0303 	and.w	r3, r3, #3
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bc80      	pop	{r7}
 80057c4:	4770      	bx	lr

080057c6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b085      	sub	sp, #20
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	b29b      	uxth	r3, r3
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bc80      	pop	{r7}
 80057e4:	4770      	bx	lr
	...

080057e8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	4608      	mov	r0, r1
 80057f2:	4611      	mov	r1, r2
 80057f4:	461a      	mov	r2, r3
 80057f6:	4603      	mov	r3, r0
 80057f8:	70fb      	strb	r3, [r7, #3]
 80057fa:	460b      	mov	r3, r1
 80057fc:	70bb      	strb	r3, [r7, #2]
 80057fe:	4613      	mov	r3, r2
 8005800:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800580a:	78fb      	ldrb	r3, [r7, #3]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	4413      	add	r3, r2
 8005812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005816:	461a      	mov	r2, r3
 8005818:	f04f 33ff 	mov.w	r3, #4294967295
 800581c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800581e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005822:	2b03      	cmp	r3, #3
 8005824:	d867      	bhi.n	80058f6 <USB_HC_Init+0x10e>
 8005826:	a201      	add	r2, pc, #4	; (adr r2, 800582c <USB_HC_Init+0x44>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	0800583d 	.word	0x0800583d
 8005830:	080058b9 	.word	0x080058b9
 8005834:	0800583d 	.word	0x0800583d
 8005838:	0800587b 	.word	0x0800587b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4413      	add	r3, r2
 8005844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005848:	461a      	mov	r2, r3
 800584a:	f240 439d 	movw	r3, #1181	; 0x49d
 800584e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005850:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005854:	2b00      	cmp	r3, #0
 8005856:	da51      	bge.n	80058fc <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	4413      	add	r3, r2
 8005860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	78fa      	ldrb	r2, [r7, #3]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	440a      	add	r2, r1
 800586e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005876:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005878:	e040      	b.n	80058fc <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800587a:	78fb      	ldrb	r3, [r7, #3]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4413      	add	r3, r2
 8005882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005886:	461a      	mov	r2, r3
 8005888:	f240 639d 	movw	r3, #1693	; 0x69d
 800588c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800588e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005892:	2b00      	cmp	r3, #0
 8005894:	da34      	bge.n	8005900 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005896:	78fb      	ldrb	r3, [r7, #3]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	4413      	add	r3, r2
 800589e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	78fa      	ldrb	r2, [r7, #3]
 80058a6:	0151      	lsls	r1, r2, #5
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	440a      	add	r2, r1
 80058ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b4:	60d3      	str	r3, [r2, #12]
      }

      break;
 80058b6:	e023      	b.n	8005900 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80058b8:	78fb      	ldrb	r3, [r7, #3]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c4:	461a      	mov	r2, r3
 80058c6:	f240 2325 	movw	r3, #549	; 0x225
 80058ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80058cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	da17      	bge.n	8005904 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	78fa      	ldrb	r2, [r7, #3]
 80058e4:	0151      	lsls	r1, r2, #5
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	440a      	add	r2, r1
 80058ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058ee:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80058f2:	60d3      	str	r3, [r2, #12]
      }
      break;
 80058f4:	e006      	b.n	8005904 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	77fb      	strb	r3, [r7, #31]
      break;
 80058fa:	e004      	b.n	8005906 <USB_HC_Init+0x11e>
      break;
 80058fc:	bf00      	nop
 80058fe:	e002      	b.n	8005906 <USB_HC_Init+0x11e>
      break;
 8005900:	bf00      	nop
 8005902:	e000      	b.n	8005906 <USB_HC_Init+0x11e>
      break;
 8005904:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	78fb      	ldrb	r3, [r7, #3]
 8005910:	f003 030f 	and.w	r3, r3, #15
 8005914:	2101      	movs	r1, #1
 8005916:	fa01 f303 	lsl.w	r3, r1, r3
 800591a:	6939      	ldr	r1, [r7, #16]
 800591c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005920:	4313      	orrs	r3, r2
 8005922:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005930:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005934:	2b00      	cmp	r3, #0
 8005936:	da03      	bge.n	8005940 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005938:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800593c:	61bb      	str	r3, [r7, #24]
 800593e:	e001      	b.n	8005944 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff ff28 	bl	800579a <USB_GetHostSpeed>
 800594a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800594c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005950:	2b02      	cmp	r3, #2
 8005952:	d106      	bne.n	8005962 <USB_HC_Init+0x17a>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b02      	cmp	r3, #2
 8005958:	d003      	beq.n	8005962 <USB_HC_Init+0x17a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800595a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	e001      	b.n	8005966 <USB_HC_Init+0x17e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005966:	787b      	ldrb	r3, [r7, #1]
 8005968:	059b      	lsls	r3, r3, #22
 800596a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800596e:	78bb      	ldrb	r3, [r7, #2]
 8005970:	02db      	lsls	r3, r3, #11
 8005972:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005976:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005978:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800597c:	049b      	lsls	r3, r3, #18
 800597e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005982:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005984:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005986:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800598a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	0159      	lsls	r1, r3, #5
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	440b      	add	r3, r1
 8005998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059a2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80059a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d10f      	bne.n	80059cc <USB_HC_Init+0x1e4>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	78fa      	ldrb	r2, [r7, #3]
 80059bc:	0151      	lsls	r1, r2, #5
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	440a      	add	r2, r1
 80059c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059ca:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80059cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3720      	adds	r7, #32
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop

080059d8 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80059ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059f0:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d018      	beq.n	8005a2c <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	8912      	ldrh	r2, [r2, #8]
 8005a02:	4413      	add	r3, r2
 8005a04:	3b01      	subs	r3, #1
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	8912      	ldrh	r2, [r2, #8]
 8005a0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a0e:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8005a10:	8bfa      	ldrh	r2, [r7, #30]
 8005a12:	8a7b      	ldrh	r3, [r7, #18]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d90b      	bls.n	8005a30 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8005a18:	8a7b      	ldrh	r3, [r7, #18]
 8005a1a:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a1c:	8bfb      	ldrh	r3, [r7, #30]
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	8912      	ldrh	r2, [r2, #8]
 8005a22:	fb03 f202 	mul.w	r2, r3, r2
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	611a      	str	r2, [r3, #16]
 8005a2a:	e001      	b.n	8005a30 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	78db      	ldrb	r3, [r3, #3]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d007      	beq.n	8005a48 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a38:	8bfb      	ldrh	r3, [r7, #30]
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	8912      	ldrh	r2, [r2, #8]
 8005a3e:	fb03 f202 	mul.w	r2, r3, r2
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	611a      	str	r2, [r3, #16]
 8005a46:	e003      	b.n	8005a50 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a58:	8bfb      	ldrh	r3, [r7, #30]
 8005a5a:	04d9      	lsls	r1, r3, #19
 8005a5c:	4b59      	ldr	r3, [pc, #356]	; (8005bc4 <USB_HC_StartXfer+0x1ec>)
 8005a5e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a60:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	7a9b      	ldrb	r3, [r3, #10]
 8005a66:	075b      	lsls	r3, r3, #29
 8005a68:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a6c:	6979      	ldr	r1, [r7, #20]
 8005a6e:	0148      	lsls	r0, r1, #5
 8005a70:	69b9      	ldr	r1, [r7, #24]
 8005a72:	4401      	add	r1, r0
 8005a74:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a78:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a7a:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	bf0c      	ite	eq
 8005a8c:	2301      	moveq	r3, #1
 8005a8e:	2300      	movne	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	0151      	lsls	r1, r2, #5
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	440a      	add	r2, r1
 8005aaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ab2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	7c7b      	ldrb	r3, [r7, #17]
 8005ac4:	075b      	lsls	r3, r3, #29
 8005ac6:	6979      	ldr	r1, [r7, #20]
 8005ac8:	0148      	lsls	r0, r1, #5
 8005aca:	69b9      	ldr	r1, [r7, #24]
 8005acc:	4401      	add	r1, r0
 8005ace:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005aec:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	78db      	ldrb	r3, [r3, #3]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d004      	beq.n	8005b00 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005afc:	60bb      	str	r3, [r7, #8]
 8005afe:	e003      	b.n	8005b08 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b06:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b0e:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	78db      	ldrb	r3, [r3, #3]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d147      	bne.n	8005bba <USB_HC_StartXfer+0x1e2>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d043      	beq.n	8005bba <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	79db      	ldrb	r3, [r3, #7]
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d830      	bhi.n	8005b9c <USB_HC_StartXfer+0x1c4>
 8005b3a:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <USB_HC_StartXfer+0x168>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b51 	.word	0x08005b51
 8005b44:	08005b75 	.word	0x08005b75
 8005b48:	08005b51 	.word	0x08005b51
 8005b4c:	08005b75 	.word	0x08005b75
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	3303      	adds	r3, #3
 8005b56:	089b      	lsrs	r3, r3, #2
 8005b58:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005b5a:	89fa      	ldrh	r2, [r7, #14]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d91c      	bls.n	8005ba0 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f043 0220 	orr.w	r2, r3, #32
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b72:	e015      	b.n	8005ba0 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	3303      	adds	r3, #3
 8005b7a:	089b      	lsrs	r3, r3, #2
 8005b7c:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005b7e:	89fa      	ldrh	r2, [r7, #14]
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d90a      	bls.n	8005ba4 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b9a:	e003      	b.n	8005ba4 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8005b9c:	bf00      	nop
 8005b9e:	e002      	b.n	8005ba6 <USB_HC_StartXfer+0x1ce>
        break;
 8005ba0:	bf00      	nop
 8005ba2:	e000      	b.n	8005ba6 <USB_HC_StartXfer+0x1ce>
        break;
 8005ba4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68d9      	ldr	r1, [r3, #12]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	785a      	ldrb	r2, [r3, #1]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff fbfd 	bl	80053b4 <USB_WritePacket>
  }

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3720      	adds	r7, #32
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	1ff80000 	.word	0x1ff80000

08005bc8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	b29b      	uxth	r3, r3
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bc80      	pop	{r7}
 8005be6:	4770      	bx	lr

08005be8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b089      	sub	sp, #36	; 0x24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	0c9b      	lsrs	r3, r3, #18
 8005c10:	f003 0303 	and.w	r3, r3, #3
 8005c14:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	0fdb      	lsrs	r3, r3, #31
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 0320 	and.w	r3, r3, #32
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	d104      	bne.n	8005c42 <USB_HC_Halt+0x5a>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e0e8      	b.n	8005e14 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <USB_HC_Halt+0x66>
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d173      	bne.n	8005d36 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	0151      	lsls	r1, r2, #5
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	440a      	add	r2, r1
 8005c64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c6c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f040 80cb 	bne.w	8005e12 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d143      	bne.n	8005d10 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	0151      	lsls	r1, r2, #5
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	440a      	add	r2, r1
 8005c9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ca2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ca6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cc6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	0151      	lsls	r1, r2, #5
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	440a      	add	r2, r1
 8005cde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ce2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ce6:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	3301      	adds	r3, #1
 8005cec:	61fb      	str	r3, [r7, #28]
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cf4:	d81d      	bhi.n	8005d32 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d0c:	d0ec      	beq.n	8005ce8 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d0e:	e080      	b.n	8005e12 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	0151      	lsls	r1, r2, #5
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	440a      	add	r2, r1
 8005d26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d2e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d30:	e06f      	b.n	8005e12 <USB_HC_Halt+0x22a>
            break;
 8005d32:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d34:	e06d      	b.n	8005e12 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	0151      	lsls	r1, r2, #5
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	440a      	add	r2, r1
 8005d4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d54:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d143      	bne.n	8005dee <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d84:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	0151      	lsls	r1, r2, #5
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	440a      	add	r2, r1
 8005d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005da0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005da4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	0151      	lsls	r1, r2, #5
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	440a      	add	r2, r1
 8005dbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dc4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	61fb      	str	r3, [r7, #28]
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dd2:	d81d      	bhi.n	8005e10 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005de6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dea:	d0ec      	beq.n	8005dc6 <USB_HC_Halt+0x1de>
 8005dec:	e011      	b.n	8005e12 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	0151      	lsls	r1, r2, #5
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	440a      	add	r2, r1
 8005e04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	e000      	b.n	8005e12 <USB_HC_Halt+0x22a>
          break;
 8005e10:	bf00      	nop
    }
  }

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3724      	adds	r7, #36	; 0x24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bc80      	pop	{r7}
 8005e1c:	4770      	bx	lr

08005e1e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b086      	sub	sp, #24
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7ff fa20 	bl	8005274 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005e34:	2110      	movs	r1, #16
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff fa78 	bl	800532c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff fa99 	bl	8005374 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005e42:	2300      	movs	r3, #0
 8005e44:	613b      	str	r3, [r7, #16]
 8005e46:	e01f      	b.n	8005e88 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e5e:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e66:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e6e:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	3301      	adds	r3, #1
 8005e86:	613b      	str	r3, [r7, #16]
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	2b0f      	cmp	r3, #15
 8005e8c:	d9dc      	bls.n	8005e48 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005e8e:	2300      	movs	r3, #0
 8005e90:	613b      	str	r3, [r7, #16]
 8005e92:	e034      	b.n	8005efe <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eaa:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005eb2:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005eba:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec8:	461a      	mov	r2, r3
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eda:	d80c      	bhi.n	8005ef6 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ef2:	d0ec      	beq.n	8005ece <USB_StopHost+0xb0>
 8005ef4:	e000      	b.n	8005ef8 <USB_StopHost+0xda>
        break;
 8005ef6:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	3301      	adds	r3, #1
 8005efc:	613b      	str	r3, [r7, #16]
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b0f      	cmp	r3, #15
 8005f02:	d9c7      	bls.n	8005e94 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f10:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f04f 32ff 	mov.w	r2, #4294967295
 8005f18:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3718      	adds	r7, #24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005f24:	b590      	push	{r4, r7, lr}
 8005f26:	b089      	sub	sp, #36	; 0x24
 8005f28:	af04      	add	r7, sp, #16
 8005f2a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	2202      	movs	r2, #2
 8005f30:	2102      	movs	r1, #2
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fd7d 	bl	8006a32 <USBH_FindInterface>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
 8005f3e:	2bff      	cmp	r3, #255	; 0xff
 8005f40:	d002      	beq.n	8005f48 <USBH_CDC_InterfaceInit+0x24>
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d901      	bls.n	8005f4c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e13d      	b.n	80061c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fd53 	bl	80069fc <USBH_SelectInterface>
 8005f56:	4603      	mov	r3, r0
 8005f58:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005f5a:	7bbb      	ldrb	r3, [r7, #14]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005f60:	2302      	movs	r3, #2
 8005f62:	e131      	b.n	80061c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005f6a:	2050      	movs	r0, #80	; 0x50
 8005f6c:	f004 fe26 	bl	800abbc <malloc>
 8005f70:	4603      	mov	r3, r0
 8005f72:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005f84:	2302      	movs	r3, #2
 8005f86:	e11f      	b.n	80061c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005f88:	2250      	movs	r2, #80	; 0x50
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	68b8      	ldr	r0, [r7, #8]
 8005f8e:	f004 fe33 	bl	800abf8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	211a      	movs	r1, #26
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	b25b      	sxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	da15      	bge.n	8005fd6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	211a      	movs	r1, #26
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005fba:	781a      	ldrb	r2, [r3, #0]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	211a      	movs	r1, #26
 8005fc6:	fb01 f303 	mul.w	r3, r1, r3
 8005fca:	4413      	add	r3, r2
 8005fcc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fd0:	881a      	ldrh	r2, [r3, #0]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	785b      	ldrb	r3, [r3, #1]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f002 f814 	bl	800800a <USBH_AllocPipe>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	7819      	ldrb	r1, [r3, #0]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	7858      	ldrb	r0, [r3, #1]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	8952      	ldrh	r2, [r2, #10]
 8006002:	9202      	str	r2, [sp, #8]
 8006004:	2203      	movs	r2, #3
 8006006:	9201      	str	r2, [sp, #4]
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	4623      	mov	r3, r4
 800600c:	4602      	mov	r2, r0
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f001 ffcc 	bl	8007fac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2200      	movs	r2, #0
 800601a:	4619      	mov	r1, r3
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f004 fd1f 	bl	800aa60 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006022:	2300      	movs	r3, #0
 8006024:	2200      	movs	r2, #0
 8006026:	210a      	movs	r1, #10
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fd02 	bl	8006a32 <USBH_FindInterface>
 800602e:	4603      	mov	r3, r0
 8006030:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	2bff      	cmp	r3, #255	; 0xff
 8006036:	d002      	beq.n	800603e <USBH_CDC_InterfaceInit+0x11a>
 8006038:	7bfb      	ldrb	r3, [r7, #15]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d901      	bls.n	8006042 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800603e:	2302      	movs	r3, #2
 8006040:	e0c2      	b.n	80061c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006042:	7bfb      	ldrb	r3, [r7, #15]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	211a      	movs	r1, #26
 8006048:	fb01 f303 	mul.w	r3, r1, r3
 800604c:	4413      	add	r3, r2
 800604e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	b25b      	sxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	da16      	bge.n	8006088 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800605a:	7bfb      	ldrb	r3, [r7, #15]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	211a      	movs	r1, #26
 8006060:	fb01 f303 	mul.w	r3, r1, r3
 8006064:	4413      	add	r3, r2
 8006066:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800606a:	781a      	ldrb	r2, [r3, #0]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	211a      	movs	r1, #26
 8006076:	fb01 f303 	mul.w	r3, r1, r3
 800607a:	4413      	add	r3, r2
 800607c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006080:	881a      	ldrh	r2, [r3, #0]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	835a      	strh	r2, [r3, #26]
 8006086:	e015      	b.n	80060b4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006088:	7bfb      	ldrb	r3, [r7, #15]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	211a      	movs	r1, #26
 800608e:	fb01 f303 	mul.w	r3, r1, r3
 8006092:	4413      	add	r3, r2
 8006094:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006098:	781a      	ldrb	r2, [r3, #0]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800609e:	7bfb      	ldrb	r3, [r7, #15]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	211a      	movs	r1, #26
 80060a4:	fb01 f303 	mul.w	r3, r1, r3
 80060a8:	4413      	add	r3, r2
 80060aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060ae:	881a      	ldrh	r2, [r3, #0]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	211a      	movs	r1, #26
 80060ba:	fb01 f303 	mul.w	r3, r1, r3
 80060be:	4413      	add	r3, r2
 80060c0:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	b25b      	sxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	da16      	bge.n	80060fa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	211a      	movs	r1, #26
 80060d2:	fb01 f303 	mul.w	r3, r1, r3
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80060dc:	781a      	ldrb	r2, [r3, #0]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80060e2:	7bfb      	ldrb	r3, [r7, #15]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	211a      	movs	r1, #26
 80060e8:	fb01 f303 	mul.w	r3, r1, r3
 80060ec:	4413      	add	r3, r2
 80060ee:	f203 3356 	addw	r3, r3, #854	; 0x356
 80060f2:	881a      	ldrh	r2, [r3, #0]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	835a      	strh	r2, [r3, #26]
 80060f8:	e015      	b.n	8006126 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80060fa:	7bfb      	ldrb	r3, [r7, #15]
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	211a      	movs	r1, #26
 8006100:	fb01 f303 	mul.w	r3, r1, r3
 8006104:	4413      	add	r3, r2
 8006106:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800610a:	781a      	ldrb	r2, [r3, #0]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	211a      	movs	r1, #26
 8006116:	fb01 f303 	mul.w	r3, r1, r3
 800611a:	4413      	add	r3, r2
 800611c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006120:	881a      	ldrh	r2, [r3, #0]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	7b9b      	ldrb	r3, [r3, #14]
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f001 ff6c 	bl	800800a <USBH_AllocPipe>
 8006132:	4603      	mov	r3, r0
 8006134:	461a      	mov	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	7bdb      	ldrb	r3, [r3, #15]
 800613e:	4619      	mov	r1, r3
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f001 ff62 	bl	800800a <USBH_AllocPipe>
 8006146:	4603      	mov	r3, r0
 8006148:	461a      	mov	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	7b59      	ldrb	r1, [r3, #13]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	7b98      	ldrb	r0, [r3, #14]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	8b12      	ldrh	r2, [r2, #24]
 8006166:	9202      	str	r2, [sp, #8]
 8006168:	2202      	movs	r2, #2
 800616a:	9201      	str	r2, [sp, #4]
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	4623      	mov	r3, r4
 8006170:	4602      	mov	r2, r0
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 ff1a 	bl	8007fac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	7b19      	ldrb	r1, [r3, #12]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	7bd8      	ldrb	r0, [r3, #15]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	8b52      	ldrh	r2, [r2, #26]
 8006190:	9202      	str	r2, [sp, #8]
 8006192:	2202      	movs	r2, #2
 8006194:	9201      	str	r2, [sp, #4]
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	4623      	mov	r3, r4
 800619a:	4602      	mov	r2, r0
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f001 ff05 	bl	8007fac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	7b5b      	ldrb	r3, [r3, #13]
 80061ae:	2200      	movs	r2, #0
 80061b0:	4619      	mov	r1, r3
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f004 fc54 	bl	800aa60 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	7b1b      	ldrb	r3, [r3, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f004 fc4d 	bl	800aa60 <USBH_LL_SetToggle>

  return USBH_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd90      	pop	{r4, r7, pc}

080061d0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00e      	beq.n	8006208 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f001 fefa 	bl	8007fea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	4619      	mov	r1, r3
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f001 ff24 	bl	800804a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	7b1b      	ldrb	r3, [r3, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00e      	beq.n	800622e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	7b1b      	ldrb	r3, [r3, #12]
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f001 fee7 	bl	8007fea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	7b1b      	ldrb	r3, [r3, #12]
 8006220:	4619      	mov	r1, r3
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f001 ff11 	bl	800804a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	7b5b      	ldrb	r3, [r3, #13]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00e      	beq.n	8006254 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	7b5b      	ldrb	r3, [r3, #13]
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 fed4 	bl	8007fea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	7b5b      	ldrb	r3, [r3, #13]
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 fefe 	bl	800804a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00b      	beq.n	8006278 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	4618      	mov	r0, r3
 800626a:	f004 fcaf 	bl	800abcc <free>
    phost->pActiveClass->pData = 0U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006274:	2200      	movs	r2, #0
 8006276:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b084      	sub	sp, #16
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800628a:	2302      	movs	r3, #2
 800628c:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	3340      	adds	r3, #64	; 0x40
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f8d9 	bl	8006456 <GetLineCoding>
 80062a4:	4603      	mov	r3, r0
 80062a6:	73fb      	strb	r3, [r7, #15]
  if (status == USBH_OK)
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d105      	bne.n	80062ba <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80062b4:	2102      	movs	r1, #2
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	4798      	blx	r3
  }
  return status;
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80062cc:	2301      	movs	r3, #1
 80062ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d877      	bhi.n	80063d8 <USBH_CDC_Process+0x114>
 80062e8:	a201      	add	r2, pc, #4	; (adr r2, 80062f0 <USBH_CDC_Process+0x2c>)
 80062ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ee:	bf00      	nop
 80062f0:	08006305 	.word	0x08006305
 80062f4:	0800630b 	.word	0x0800630b
 80062f8:	0800633b 	.word	0x0800633b
 80062fc:	080063af 	.word	0x080063af
 8006300:	080063bd 	.word	0x080063bd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006304:	2300      	movs	r3, #0
 8006306:	73fb      	strb	r3, [r7, #15]
      break;
 8006308:	e06d      	b.n	80063e6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800630e:	4619      	mov	r1, r3
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f8bf 	bl	8006494 <SetLineCoding>
 8006316:	4603      	mov	r3, r0
 8006318:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800631a:	7bbb      	ldrb	r3, [r7, #14]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d104      	bne.n	800632a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006328:	e058      	b.n	80063dc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800632a:	7bbb      	ldrb	r3, [r7, #14]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d055      	beq.n	80063dc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2204      	movs	r2, #4
 8006334:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006338:	e050      	b.n	80063dc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	3340      	adds	r3, #64	; 0x40
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f888 	bl	8006456 <GetLineCoding>
 8006346:	4603      	mov	r3, r0
 8006348:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800634a:	7bbb      	ldrb	r3, [r7, #14]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d126      	bne.n	800639e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006362:	791b      	ldrb	r3, [r3, #4]
 8006364:	429a      	cmp	r2, r3
 8006366:	d13b      	bne.n	80063e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006372:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006374:	429a      	cmp	r2, r3
 8006376:	d133      	bne.n	80063e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006382:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006384:	429a      	cmp	r2, r3
 8006386:	d12b      	bne.n	80063e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006390:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006392:	429a      	cmp	r2, r3
 8006394:	d124      	bne.n	80063e0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa51 	bl	800683e <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800639c:	e020      	b.n	80063e0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800639e:	7bbb      	ldrb	r3, [r7, #14]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d01d      	beq.n	80063e0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2204      	movs	r2, #4
 80063a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80063ac:	e018      	b.n	80063e0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f94a 	bl	8006648 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f9d9 	bl	800676c <CDC_ProcessReception>
      break;
 80063ba:	e014      	b.n	80063e6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80063bc:	2100      	movs	r1, #0
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f001 f8e5 	bl	800758e <USBH_ClrFeature>
 80063c4:	4603      	mov	r3, r0
 80063c6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80063c8:	7bbb      	ldrb	r3, [r7, #14]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE ;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80063d6:	e005      	b.n	80063e4 <USBH_CDC_Process+0x120>

    default:
      break;
 80063d8:	bf00      	nop
 80063da:	e004      	b.n	80063e6 <USBH_CDC_Process+0x122>
      break;
 80063dc:	bf00      	nop
 80063de:	e002      	b.n	80063e6 <USBH_CDC_Process+0x122>
      break;
 80063e0:	bf00      	nop
 80063e2:	e000      	b.n	80063e6 <USBH_CDC_Process+0x122>
      break;
 80063e4:	bf00      	nop

  }

  return status;
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	bc80      	pop	{r7}
 8006402:	4770      	bx	lr

08006404 <USBH_CDC_Stop>:
  *         Stop current CDC Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_CDC_Stop(USBH_HandleTypeDef *phost)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b0b      	cmp	r3, #11
 800641e:	d115      	bne.n	800644c <USBH_CDC_Stop+0x48>
  {
    CDC_Handle->state = CDC_IDLE_STATE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	4619      	mov	r1, r3
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f001 fddb 	bl	8007fea <USBH_ClosePipe>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	7b1b      	ldrb	r3, [r3, #12]
 8006438:	4619      	mov	r1, r3
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f001 fdd5 	bl	8007fea <USBH_ClosePipe>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	7b5b      	ldrb	r3, [r3, #13]
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 fdcf 	bl	8007fea <USBH_ClosePipe>
  }
  return USBH_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b082      	sub	sp, #8
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	22a1      	movs	r2, #161	; 0xa1
 8006464:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2221      	movs	r2, #33	; 0x21
 800646a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2207      	movs	r2, #7
 800647c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2207      	movs	r2, #7
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f001 fa5d 	bl	8007944 <USBH_CtlReq>
 800648a:	4603      	mov	r3, r0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2221      	movs	r2, #33	; 0x21
 80064a2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2220      	movs	r2, #32
 80064a8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2207      	movs	r2, #7
 80064ba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2207      	movs	r2, #7
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f001 fa3e 	bl	8007944 <USBH_CtlReq>
 80064c8:	4603      	mov	r3, r0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <USBH_CDC_SetLineCoding>:
* @param  None
* @retval None
*/
USBH_StatusTypeDef USBH_CDC_SetLineCoding(USBH_HandleTypeDef *phost,
                                          CDC_LineCodingTypeDef *linecoding)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b084      	sub	sp, #16
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	6039      	str	r1, [r7, #0]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b0b      	cmp	r3, #11
 80064ee:	d114      	bne.n	800651a <USBH_CDC_SetLineCoding+0x48>
  {
    CDC_Handle->state = CDC_SET_LINE_CODING_STATE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->pUserLineCoding = linecoding;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	649a      	str	r2, [r3, #72]	; 0x48

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2204      	movs	r2, #4
 8006502:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006512:	2200      	movs	r2, #0
 8006514:	4619      	mov	r1, r3
 8006516:	f001 fe8d 	bl	8008234 <osMessagePut>
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }

  return USBH_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <USBH_CDC_GetLastReceivedDataSize>:
  * @brief  This function return last received data size
  * @param  None
  * @retval None
  */
uint16_t USBH_CDC_GetLastReceivedDataSize(USBH_HandleTypeDef *phost)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t dataSize;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	60bb      	str	r3, [r7, #8]

  if (phost->gState == HOST_CLASS)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b0b      	cmp	r3, #11
 800653e:	d107      	bne.n	8006550 <USBH_CDC_GetLastReceivedDataSize+0x2c>
  {
    dataSize = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	7b1b      	ldrb	r3, [r3, #12]
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f004 f9ce 	bl	800a8e8 <USBH_LL_GetLastXferSize>
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	e001      	b.n	8006554 <USBH_CDC_GetLastReceivedDataSize+0x30>
  }
  else
  {
    dataSize =  0U;
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]
  }

  return (uint16_t)dataSize;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	b29b      	uxth	r3, r3
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800656c:	2301      	movs	r3, #1
 800656e:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006580:	2b00      	cmp	r3, #0
 8006582:	d004      	beq.n	800658e <USBH_CDC_Transmit+0x2e>
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800658a:	2b03      	cmp	r3, #3
 800658c:	d11d      	bne.n	80065ca <USBH_CDC_Transmit+0x6a>
  {
    CDC_Handle->pTxData = pbuff;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	2203      	movs	r2, #3
 800659e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2204      	movs	r2, #4
 80065b2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80065c2:	2200      	movs	r2, #0
 80065c4:	4619      	mov	r1, r3
 80065c6:	f001 fe35 	bl	8008234 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <USBH_CDC_Receive>:
* @brief  This function prepares the state before issuing the class specific commands
* @param  None
* @retval None
*/
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80065e0:	2301      	movs	r3, #1
 80065e2:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d004      	beq.n	8006602 <USBH_CDC_Receive+0x2e>
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d11d      	bne.n	800663e <USBH_CDC_Receive+0x6a>
  {
    CDC_Handle->pRxData = pbuff;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	2203      	movs	r2, #3
 8006612:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2203      	movs	r2, #3
 800661a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2204      	movs	r2, #4
 8006626:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006636:	2200      	movs	r2, #0
 8006638:	4619      	mov	r1, r3
 800663a:	f001 fdfb 	bl	8008234 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 800663e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af02      	add	r7, sp, #8
 800664e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800665a:	2300      	movs	r3, #0
 800665c:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006664:	2b01      	cmp	r3, #1
 8006666:	d002      	beq.n	800666e <CDC_ProcessTransmission+0x26>
 8006668:	2b02      	cmp	r3, #2
 800666a:	d023      	beq.n	80066b4 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800666c:	e07a      	b.n	8006764 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	8b12      	ldrh	r2, [r2, #24]
 8006676:	4293      	cmp	r3, r2
 8006678:	d90b      	bls.n	8006692 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	69d9      	ldr	r1, [r3, #28]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8b1a      	ldrh	r2, [r3, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	7b5b      	ldrb	r3, [r3, #13]
 8006686:	2001      	movs	r0, #1
 8006688:	9000      	str	r0, [sp, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f001 fc4b 	bl	8007f26 <USBH_BulkSendData>
 8006690:	e00b      	b.n	80066aa <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800669a:	b29a      	uxth	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	7b5b      	ldrb	r3, [r3, #13]
 80066a0:	2001      	movs	r0, #1
 80066a2:	9000      	str	r0, [sp, #0]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 fc3e 	bl	8007f26 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2202      	movs	r2, #2
 80066ae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80066b2:	e057      	b.n	8006764 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	7b5b      	ldrb	r3, [r3, #13]
 80066b8:	4619      	mov	r1, r3
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f004 f9a6 	bl	800aa0c <USBH_LL_GetURBState>
 80066c0:	4603      	mov	r3, r0
 80066c2:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80066c4:	7afb      	ldrb	r3, [r7, #11]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d136      	bne.n	8006738 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	8b12      	ldrh	r2, [r2, #24]
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d90e      	bls.n	80066f4 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	8b12      	ldrh	r2, [r2, #24]
 80066de:	1a9a      	subs	r2, r3, r2
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	8b12      	ldrh	r2, [r2, #24]
 80066ec:	441a      	add	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	61da      	str	r2, [r3, #28]
 80066f2:	e002      	b.n	80066fa <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d004      	beq.n	800670c <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800670a:	e006      	b.n	800671a <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f003 ff33 	bl	800a580 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2204      	movs	r2, #4
 800671e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800672e:	2200      	movs	r2, #0
 8006730:	4619      	mov	r1, r3
 8006732:	f001 fd7f 	bl	8008234 <osMessagePut>
      break;
 8006736:	e014      	b.n	8006762 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006738:	7afb      	ldrb	r3, [r7, #11]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d111      	bne.n	8006762 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2204      	movs	r2, #4
 800674a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800675a:	2200      	movs	r2, #0
 800675c:	4619      	mov	r1, r3
 800675e:	f001 fd69 	bl	8008234 <osMessagePut>
      break;
 8006762:	bf00      	nop
  }
}
 8006764:	bf00      	nop
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800677e:	2300      	movs	r3, #0
 8006780:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006788:	2b03      	cmp	r3, #3
 800678a:	d002      	beq.n	8006792 <CDC_ProcessReception+0x26>
 800678c:	2b04      	cmp	r3, #4
 800678e:	d00e      	beq.n	80067ae <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006790:	e051      	b.n	8006836 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	6a19      	ldr	r1, [r3, #32]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	8b5a      	ldrh	r2, [r3, #26]
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	7b1b      	ldrb	r3, [r3, #12]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f001 fbe6 	bl	8007f70 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	2204      	movs	r2, #4
 80067a8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80067ac:	e043      	b.n	8006836 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	7b1b      	ldrb	r3, [r3, #12]
 80067b2:	4619      	mov	r1, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f004 f929 	bl	800aa0c <USBH_LL_GetURBState>
 80067ba:	4603      	mov	r3, r0
 80067bc:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80067be:	7cfb      	ldrb	r3, [r7, #19]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d137      	bne.n	8006834 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	7b1b      	ldrb	r3, [r3, #12]
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f004 f88c 	bl	800a8e8 <USBH_LL_GetLastXferSize>
 80067d0:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d016      	beq.n	800680a <CDC_ProcessReception+0x9e>
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	8b5b      	ldrh	r3, [r3, #26]
 80067e0:	461a      	mov	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d910      	bls.n	800680a <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	1ad2      	subs	r2, r2, r3
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	6a1a      	ldr	r2, [r3, #32]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	441a      	add	r2, r3
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	2203      	movs	r2, #3
 8006804:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8006808:	e006      	b.n	8006818 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f003 febe 	bl	800a594 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2204      	movs	r2, #4
 800681c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800682c:	2200      	movs	r2, #0
 800682e:	4619      	mov	r1, r3
 8006830:	f001 fd00 	bl	8008234 <osMessagePut>
      break;
 8006834:	bf00      	nop
  }
}
 8006836:	bf00      	nop
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800683e:	b480      	push	{r7}
 8006840:	b083      	sub	sp, #12
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	bc80      	pop	{r7}
 800684e:	4770      	bx	lr

08006850 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006850:	b5b0      	push	{r4, r5, r7, lr}
 8006852:	b090      	sub	sp, #64	; 0x40
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	4613      	mov	r3, r2
 800685c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006864:	2302      	movs	r3, #2
 8006866:	e04d      	b.n	8006904 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	79fa      	ldrb	r2, [r7, #7]
 800686c:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 f847 	bl	8006914 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80068b4:	4b15      	ldr	r3, [pc, #84]	; (800690c <USBH_Init+0xbc>)
 80068b6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80068ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 80068c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80068c4:	2100      	movs	r1, #0
 80068c6:	4618      	mov	r0, r3
 80068c8:	f001 fc8b 	bl	80081e2 <osMessageCreate>
 80068cc:	4602      	mov	r2, r0
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80068d4:	4b0e      	ldr	r3, [pc, #56]	; (8006910 <USBH_Init+0xc0>)
 80068d6:	f107 0414 	add.w	r4, r7, #20
 80068da:	461d      	mov	r5, r3
 80068dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80068e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 80068e8:	f107 0314 	add.w	r3, r7, #20
 80068ec:	68f9      	ldr	r1, [r7, #12]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f001 fc17 	bl	8008122 <osThreadCreate>
 80068f4:	4602      	mov	r2, r0
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f003 ff43 	bl	800a788 <USBH_LL_Init>

  return USBH_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3740      	adds	r7, #64	; 0x40
 8006908:	46bd      	mov	sp, r7
 800690a:	bdb0      	pop	{r4, r5, r7, pc}
 800690c:	0800af84 	.word	0x0800af84
 8006910:	0800af94 	.word	0x0800af94

08006914 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006920:	2300      	movs	r3, #0
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	e008      	b.n	8006938 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	32e0      	adds	r2, #224	; 0xe0
 800692c:	2100      	movs	r1, #0
 800692e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3301      	adds	r3, #1
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b0e      	cmp	r3, #14
 800693c:	d9f3      	bls.n	8006926 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	e009      	b.n	8006958 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4413      	add	r3, r2
 800694a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800694e:	2200      	movs	r2, #0
 8006950:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	3301      	adds	r3, #1
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800695e:	d3f1      	bcc.n	8006944 <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2240      	movs	r2, #64	; 0x40
 8006984:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bc80      	pop	{r7}
 80069a6:	4770      	bx	lr

080069a8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d017      	beq.n	80069ec <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10f      	bne.n	80069e6 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069cc:	1c59      	adds	r1, r3, #1
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	33dc      	adds	r3, #220	; 0xdc
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	73fb      	strb	r3, [r7, #15]
 80069e4:	e004      	b.n	80069f0 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80069e6:	2302      	movs	r3, #2
 80069e8:	73fb      	strb	r3, [r7, #15]
 80069ea:	e001      	b.n	80069f0 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80069ec:	2302      	movs	r3, #2
 80069ee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bc80      	pop	{r7}
 80069fa:	4770      	bx	lr

080069fc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 8006a12:	78fa      	ldrb	r2, [r7, #3]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d204      	bcs.n	8006a22 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	78fa      	ldrb	r2, [r7, #3]
 8006a1c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8006a20:	e001      	b.n	8006a26 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006a22:	2302      	movs	r3, #2
 8006a24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bc80      	pop	{r7}
 8006a30:	4770      	bx	lr

08006a32 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b087      	sub	sp, #28
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	4608      	mov	r0, r1
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	461a      	mov	r2, r3
 8006a40:	4603      	mov	r3, r0
 8006a42:	70fb      	strb	r3, [r7, #3]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70bb      	strb	r3, [r7, #2]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f203 3336 	addw	r3, r3, #822	; 0x336
 8006a5a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a5c:	e025      	b.n	8006aaa <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006a5e:	7dfb      	ldrb	r3, [r7, #23]
 8006a60:	221a      	movs	r2, #26
 8006a62:	fb02 f303 	mul.w	r3, r2, r3
 8006a66:	3308      	adds	r3, #8
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	3302      	adds	r3, #2
 8006a6e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	795b      	ldrb	r3, [r3, #5]
 8006a74:	78fa      	ldrb	r2, [r7, #3]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d002      	beq.n	8006a80 <USBH_FindInterface+0x4e>
 8006a7a:	78fb      	ldrb	r3, [r7, #3]
 8006a7c:	2bff      	cmp	r3, #255	; 0xff
 8006a7e:	d111      	bne.n	8006aa4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006a84:	78ba      	ldrb	r2, [r7, #2]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d002      	beq.n	8006a90 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a8a:	78bb      	ldrb	r3, [r7, #2]
 8006a8c:	2bff      	cmp	r3, #255	; 0xff
 8006a8e:	d109      	bne.n	8006aa4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a94:	787a      	ldrb	r2, [r7, #1]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d002      	beq.n	8006aa0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a9a:	787b      	ldrb	r3, [r7, #1]
 8006a9c:	2bff      	cmp	r3, #255	; 0xff
 8006a9e:	d101      	bne.n	8006aa4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006aa0:	7dfb      	ldrb	r3, [r7, #23]
 8006aa2:	e006      	b.n	8006ab2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006aa4:	7dfb      	ldrb	r3, [r7, #23]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006aaa:	7dfb      	ldrb	r3, [r7, #23]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d9d6      	bls.n	8006a5e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006ab0:	23ff      	movs	r3, #255	; 0xff
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	371c      	adds	r7, #28
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bc80      	pop	{r7}
 8006aba:	4770      	bx	lr

08006abc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f003 fe97 	bl	800a7f8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006aca:	2101      	movs	r1, #1
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f003 ffb0 	bl	800aa32 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af04      	add	r7, sp, #16
 8006ae2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d102      	bne.n	8006afe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2203      	movs	r2, #3
 8006afc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b0b      	cmp	r3, #11
 8006b06:	f200 81e4 	bhi.w	8006ed2 <USBH_Process+0x3f6>
 8006b0a:	a201      	add	r2, pc, #4	; (adr r2, 8006b10 <USBH_Process+0x34>)
 8006b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b10:	08006b41 	.word	0x08006b41
 8006b14:	08006b7f 	.word	0x08006b7f
 8006b18:	08006b93 	.word	0x08006b93
 8006b1c:	08006e51 	.word	0x08006e51
 8006b20:	08006ed3 	.word	0x08006ed3
 8006b24:	08006c53 	.word	0x08006c53
 8006b28:	08006deb 	.word	0x08006deb
 8006b2c:	08006c83 	.word	0x08006c83
 8006b30:	08006cbf 	.word	0x08006cbf
 8006b34:	08006cf9 	.word	0x08006cf9
 8006b38:	08006d41 	.word	0x08006d41
 8006b3c:	08006e39 	.word	0x08006e39
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 81c4 	beq.w	8006ed6 <USBH_Process+0x3fa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006b54:	20c8      	movs	r0, #200	; 0xc8
 8006b56:	f003 ffb2 	bl	800aabe <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f003 fea9 	bl	800a8b2 <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006b74:	2200      	movs	r2, #0
 8006b76:	4619      	mov	r1, r3
 8006b78:	f001 fb5c 	bl	8008234 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006b7c:	e1ab      	b.n	8006ed6 <USBH_Process+0x3fa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	f040 81a8 	bne.w	8006eda <USBH_Process+0x3fe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8006b90:	e1a3      	b.n	8006eda <USBH_Process+0x3fe>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d005      	beq.n	8006ba8 <USBH_Process+0xcc>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006ba2:	2104      	movs	r1, #4
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006ba8:	2064      	movs	r0, #100	; 0x64
 8006baa:	f003 ff88 	bl	800aabe <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f003 fe58 	bl	800a864 <USBH_LL_GetSpeed>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2205      	movs	r2, #5
 8006bc2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f001 fa1f 	bl	800800a <USBH_AllocPipe>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	461a      	mov	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006bd4:	2180      	movs	r1, #128	; 0x80
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f001 fa17 	bl	800800a <USBH_AllocPipe>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	461a      	mov	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	7919      	ldrb	r1, [r3, #4]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 8006bf8:	b292      	uxth	r2, r2
 8006bfa:	9202      	str	r2, [sp, #8]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	9201      	str	r2, [sp, #4]
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	4603      	mov	r3, r0
 8006c04:	2280      	movs	r2, #128	; 0x80
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 f9d0 	bl	8007fac <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	7959      	ldrb	r1, [r3, #5]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 8006c20:	b292      	uxth	r2, r2
 8006c22:	9202      	str	r2, [sp, #8]
 8006c24:	2200      	movs	r2, #0
 8006c26:	9201      	str	r2, [sp, #4]
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f001 f9bc 	bl	8007fac <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006c48:	2200      	movs	r2, #0
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	f001 faf2 	bl	8008234 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c50:	e14c      	b.n	8006eec <USBH_Process+0x410>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f950 	bl	8006ef8 <USBH_HandleEnum>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f040 813f 	bne.w	8006ede <USBH_Process+0x402>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d103      	bne.n	8006c7a <USBH_Process+0x19e>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2208      	movs	r2, #8
 8006c76:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 8006c78:	e131      	b.n	8006ede <USBH_Process+0x402>
          phost->gState = HOST_INPUT;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2207      	movs	r2, #7
 8006c7e:	701a      	strb	r2, [r3, #0]
      break;
 8006c80:	e12d      	b.n	8006ede <USBH_Process+0x402>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 812a 	beq.w	8006ee2 <USBH_Process+0x406>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006c94:	2101      	movs	r1, #1
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2208      	movs	r2, #8
 8006c9e:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2205      	movs	r2, #5
 8006ca4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	f001 fabc 	bl	8008234 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006cbc:	e111      	b.n	8006ee2 <USBH_Process+0x406>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fc19 	bl	8007500 <USBH_SetCfg>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d102      	bne.n	8006cda <USBH_Process+0x1fe>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2209      	movs	r2, #9
 8006cd8:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006cee:	2200      	movs	r2, #0
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	f001 fa9f 	bl	8008234 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006cf6:	e0f9      	b.n	8006eec <USBH_Process+0x410>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006cfe:	f003 0320 	and.w	r3, r3, #32
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00a      	beq.n	8006d1c <USBH_Process+0x240>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006d06:	2101      	movs	r1, #1
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fc1c 	bl	8007546 <USBH_SetFeature>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d106      	bne.n	8006d22 <USBH_Process+0x246>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	220a      	movs	r2, #10
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	e002      	b.n	8006d22 <USBH_Process+0x246>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	220a      	movs	r2, #10
 8006d20:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006d36:	2200      	movs	r2, #0
 8006d38:	4619      	mov	r1, r3
 8006d3a:	f001 fa7b 	bl	8008234 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d3e:	e0d5      	b.n	8006eec <USBH_Process+0x410>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d040      	beq.n	8006dcc <USBH_Process+0x2f0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d52:	2300      	movs	r3, #0
 8006d54:	73fb      	strb	r3, [r7, #15]
 8006d56:	e017      	b.n	8006d88 <USBH_Process+0x2ac>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	33dc      	adds	r3, #220	; 0xdc
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	791a      	ldrb	r2, [r3, #4]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d108      	bne.n	8006d82 <USBH_Process+0x2a6>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006d70:	7bfb      	ldrb	r3, [r7, #15]
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	33dc      	adds	r3, #220	; 0xdc
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	3301      	adds	r3, #1
 8006d86:	73fb      	strb	r3, [r7, #15]
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0e4      	beq.n	8006d58 <USBH_Process+0x27c>
          }
        }

        if (phost->pActiveClass != NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d016      	beq.n	8006dc6 <USBH_Process+0x2ea>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	4798      	blx	r3
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d109      	bne.n	8006dbe <USBH_Process+0x2e2>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2206      	movs	r2, #6
 8006dae:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006db6:	2103      	movs	r1, #3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	4798      	blx	r3
 8006dbc:	e006      	b.n	8006dcc <USBH_Process+0x2f0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	220d      	movs	r2, #13
 8006dc2:	701a      	strb	r2, [r3, #0]
 8006dc4:	e002      	b.n	8006dcc <USBH_Process+0x2f0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	220d      	movs	r2, #13
 8006dca:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2205      	movs	r2, #5
 8006dd0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006de0:	2200      	movs	r2, #0
 8006de2:	4619      	mov	r1, r3
 8006de4:	f001 fa26 	bl	8008234 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006de8:	e080      	b.n	8006eec <USBH_Process+0x410>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00f      	beq.n	8006e14 <USBH_Process+0x338>
      {
        status = phost->pActiveClass->Requests(phost);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	4798      	blx	r3
 8006e00:	4603      	mov	r3, r0
 8006e02:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d16c      	bne.n	8006ee6 <USBH_Process+0x40a>
        {
          phost->gState = HOST_CLASS;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	220b      	movs	r2, #11
 8006e10:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006e12:	e068      	b.n	8006ee6 <USBH_Process+0x40a>
        phost->gState = HOST_ABORT_STATE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	220d      	movs	r2, #13
 8006e18:	701a      	strb	r2, [r3, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2205      	movs	r2, #5
 8006e1e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006e2e:	2200      	movs	r2, #0
 8006e30:	4619      	mov	r1, r3
 8006e32:	f001 f9ff 	bl	8008234 <osMessagePut>
      break;
 8006e36:	e056      	b.n	8006ee6 <USBH_Process+0x40a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d053      	beq.n	8006eea <USBH_Process+0x40e>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	4798      	blx	r3
      }
      break;
 8006e4e:	e04c      	b.n	8006eea <USBH_Process+0x40e>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f7ff fd5b 	bl	8006914 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d009      	beq.n	8006e7c <USBH_Process+0x3a0>
      {
        phost->pActiveClass->DeInit(phost);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      }

      if (phost->pUser != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d005      	beq.n	8006e92 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006e8c:	2105      	movs	r1, #5
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d107      	bne.n	8006eae <USBH_Process+0x3d2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7ff fe08 	bl	8006abc <USBH_Start>
 8006eac:	e002      	b.n	8006eb4 <USBH_Process+0x3d8>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f003 fca2 	bl	800a7f8 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006ec8:	2200      	movs	r2, #0
 8006eca:	4619      	mov	r1, r3
 8006ecc:	f001 f9b2 	bl	8008234 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ed0:	e00c      	b.n	8006eec <USBH_Process+0x410>

    case HOST_ABORT_STATE:
    default :
      break;
 8006ed2:	bf00      	nop
 8006ed4:	e00a      	b.n	8006eec <USBH_Process+0x410>
      break;
 8006ed6:	bf00      	nop
 8006ed8:	e008      	b.n	8006eec <USBH_Process+0x410>
      break;
 8006eda:	bf00      	nop
 8006edc:	e006      	b.n	8006eec <USBH_Process+0x410>
      break;
 8006ede:	bf00      	nop
 8006ee0:	e004      	b.n	8006eec <USBH_Process+0x410>
    break;
 8006ee2:	bf00      	nop
 8006ee4:	e002      	b.n	8006eec <USBH_Process+0x410>
      break;
 8006ee6:	bf00      	nop
 8006ee8:	e000      	b.n	8006eec <USBH_Process+0x410>
      break;
 8006eea:	bf00      	nop
  }
  return USBH_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop

08006ef8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b088      	sub	sp, #32
 8006efc:	af04      	add	r7, sp, #16
 8006efe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006f00:	2301      	movs	r3, #1
 8006f02:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	785b      	ldrb	r3, [r3, #1]
 8006f08:	2b07      	cmp	r3, #7
 8006f0a:	f200 8132 	bhi.w	8007172 <USBH_HandleEnum+0x27a>
 8006f0e:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <USBH_HandleEnum+0x1c>)
 8006f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f14:	08006f35 	.word	0x08006f35
 8006f18:	08006fa7 	.word	0x08006fa7
 8006f1c:	08006fbf 	.word	0x08006fbf
 8006f20:	08007035 	.word	0x08007035
 8006f24:	0800704d 	.word	0x0800704d
 8006f28:	0800706b 	.word	0x0800706b
 8006f2c:	080070d7 	.word	0x080070d7
 8006f30:	08007127 	.word	0x08007127
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8006f34:	2108      	movs	r1, #8
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fa12 	bl	8007360 <USBH_Get_DevDesc>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f040 8119 	bne.w	8007176 <USBH_HandleEnum+0x27e>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	7919      	ldrb	r1, [r3, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8006f68:	b292      	uxth	r2, r2
 8006f6a:	9202      	str	r2, [sp, #8]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	9201      	str	r2, [sp, #4]
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	4603      	mov	r3, r0
 8006f74:	2280      	movs	r2, #128	; 0x80
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 f818 	bl	8007fac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	7959      	ldrb	r1, [r3, #5]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8006f90:	b292      	uxth	r2, r2
 8006f92:	9202      	str	r2, [sp, #8]
 8006f94:	2200      	movs	r2, #0
 8006f96:	9201      	str	r2, [sp, #4]
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f001 f804 	bl	8007fac <USBH_OpenPipe>
      }
      break;
 8006fa4:	e0e7      	b.n	8007176 <USBH_HandleEnum+0x27e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 8006fa6:	2112      	movs	r1, #18
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f9d9 	bl	8007360 <USBH_Get_DevDesc>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f040 80e2 	bne.w	800717a <USBH_HandleEnum+0x282>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2202      	movs	r2, #2
 8006fba:	705a      	strb	r2, [r3, #1]

      }
      break;
 8006fbc:	e0dd      	b.n	800717a <USBH_HandleEnum+0x282>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fa79 	bl	80074b8 <USBH_SetAddress>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f040 80d8 	bne.w	800717e <USBH_HandleEnum+0x286>
      {
        USBH_Delay(2U);
 8006fce:	2002      	movs	r0, #2
 8006fd0:	f003 fd75 	bl	800aabe <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2203      	movs	r2, #3
 8006fe0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	7919      	ldrb	r1, [r3, #4]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8006ff6:	b292      	uxth	r2, r2
 8006ff8:	9202      	str	r2, [sp, #8]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	9201      	str	r2, [sp, #4]
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	4603      	mov	r3, r0
 8007002:	2280      	movs	r2, #128	; 0x80
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 ffd1 	bl	8007fac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	7959      	ldrb	r1, [r3, #5]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800701e:	b292      	uxth	r2, r2
 8007020:	9202      	str	r2, [sp, #8]
 8007022:	2200      	movs	r2, #0
 8007024:	9201      	str	r2, [sp, #4]
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	4603      	mov	r3, r0
 800702a:	2200      	movs	r2, #0
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 ffbd 	bl	8007fac <USBH_OpenPipe>
      }
      break;
 8007032:	e0a4      	b.n	800717e <USBH_HandleEnum+0x286>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 8007034:	2109      	movs	r1, #9
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f9ba 	bl	80073b0 <USBH_Get_CfgDesc>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	f040 809f 	bne.w	8007182 <USBH_HandleEnum+0x28a>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2204      	movs	r2, #4
 8007048:	705a      	strb	r2, [r3, #1]
      }
      break;
 800704a:	e09a      	b.n	8007182 <USBH_HandleEnum+0x28a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 8007052:	4619      	mov	r1, r3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f9ab 	bl	80073b0 <USBH_Get_CfgDesc>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	f040 8092 	bne.w	8007186 <USBH_HandleEnum+0x28e>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2205      	movs	r2, #5
 8007066:	705a      	strb	r2, [r3, #1]
      }
      break;
 8007068:	e08d      	b.n	8007186 <USBH_HandleEnum+0x28e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01e      	beq.n	80070b2 <USBH_HandleEnum+0x1ba>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8007080:	23ff      	movs	r3, #255	; 0xff
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f9b8 	bl	80073f8 <USBH_Get_StringDesc>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d17d      	bne.n	800718a <USBH_HandleEnum+0x292>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2206      	movs	r2, #6
 8007092:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2205      	movs	r2, #5
 8007098:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80070a8:	2200      	movs	r2, #0
 80070aa:	4619      	mov	r1, r3
 80070ac:	f001 f8c2 	bl	8008234 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80070b0:	e06b      	b.n	800718a <USBH_HandleEnum+0x292>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2206      	movs	r2, #6
 80070b6:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2205      	movs	r2, #5
 80070bc:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80070cc:	2200      	movs	r2, #0
 80070ce:	4619      	mov	r1, r3
 80070d0:	f001 f8b0 	bl	8008234 <osMessagePut>
      break;
 80070d4:	e059      	b.n	800718a <USBH_HandleEnum+0x292>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d010      	beq.n	8007102 <USBH_HandleEnum+0x20a>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 80070ec:	23ff      	movs	r3, #255	; 0xff
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f982 	bl	80073f8 <USBH_Get_StringDesc>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d149      	bne.n	800718e <USBH_HandleEnum+0x296>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2207      	movs	r2, #7
 80070fe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007100:	e045      	b.n	800718e <USBH_HandleEnum+0x296>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2207      	movs	r2, #7
 8007106:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2205      	movs	r2, #5
 800710c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800711c:	2200      	movs	r2, #0
 800711e:	4619      	mov	r1, r3
 8007120:	f001 f888 	bl	8008234 <osMessagePut>
      break;
 8007124:	e033      	b.n	800718e <USBH_HandleEnum+0x296>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00f      	beq.n	8007150 <USBH_HandleEnum+0x258>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800713c:	23ff      	movs	r3, #255	; 0xff
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f95a 	bl	80073f8 <USBH_Get_StringDesc>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d123      	bne.n	8007192 <USBH_HandleEnum+0x29a>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800714e:	e020      	b.n	8007192 <USBH_HandleEnum+0x29a>
        Status = USBH_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2205      	movs	r2, #5
 8007158:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007168:	2200      	movs	r2, #0
 800716a:	4619      	mov	r1, r3
 800716c:	f001 f862 	bl	8008234 <osMessagePut>
      break;
 8007170:	e00f      	b.n	8007192 <USBH_HandleEnum+0x29a>

    default:
      break;
 8007172:	bf00      	nop
 8007174:	e00e      	b.n	8007194 <USBH_HandleEnum+0x29c>
      break;
 8007176:	bf00      	nop
 8007178:	e00c      	b.n	8007194 <USBH_HandleEnum+0x29c>
      break;
 800717a:	bf00      	nop
 800717c:	e00a      	b.n	8007194 <USBH_HandleEnum+0x29c>
      break;
 800717e:	bf00      	nop
 8007180:	e008      	b.n	8007194 <USBH_HandleEnum+0x29c>
      break;
 8007182:	bf00      	nop
 8007184:	e006      	b.n	8007194 <USBH_HandleEnum+0x29c>
      break;
 8007186:	bf00      	nop
 8007188:	e004      	b.n	8007194 <USBH_HandleEnum+0x29c>
      break;
 800718a:	bf00      	nop
 800718c:	e002      	b.n	8007194 <USBH_HandleEnum+0x29c>
      break;
 800718e:	bf00      	nop
 8007190:	e000      	b.n	8007194 <USBH_HandleEnum+0x29c>
      break;
 8007192:	bf00      	nop
  }
  return Status;
 8007194:	7bfb      	ldrb	r3, [r7, #15]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop

080071a0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 80071b2:	bf00      	nop
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bc80      	pop	{r7}
 80071ba:	4770      	bx	lr

080071bc <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80071ca:	1c5a      	adds	r2, r3, #1
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f804 	bl	80071e0 <USBH_HandleSof>
}
 80071d8:	bf00      	nop
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b0b      	cmp	r3, #11
 80071f0:	d10a      	bne.n	8007208 <USBH_HandleSof+0x28>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d005      	beq.n	8007208 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	4798      	blx	r3
  }
}
 8007208:	bf00      	nop
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007234:	2200      	movs	r2, #0
 8007236:	4619      	mov	r1, r3
 8007238:	f000 fffc 	bl	8008234 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800723c:	bf00      	nop
}
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 8007254:	bf00      	nop
}
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	bc80      	pop	{r7}
 800725c:	4770      	bx	lr

0800725e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b082      	sub	sp, #8
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007292:	2200      	movs	r2, #0
 8007294:	4619      	mov	r1, r3
 8007296:	f000 ffcd 	bl	8008234 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f003 fab2 	bl	800a82e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	791b      	ldrb	r3, [r3, #4]
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 feba 	bl	800804a <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	795b      	ldrb	r3, [r3, #5]
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 feb4 	bl	800804a <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80072f6:	2200      	movs	r2, #0
 80072f8:	4619      	mov	r1, r3
 80072fa:	f000 ff9b 	bl	8008234 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 8007316:	f107 030c 	add.w	r3, r7, #12
 800731a:	f04f 32ff 	mov.w	r2, #4294967295
 800731e:	4618      	mov	r0, r3
 8007320:	f000 ffc8 	bl	80082b4 <osMessageGet>
    if (event.status == osEventMessage)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b10      	cmp	r3, #16
 8007328:	d1f2      	bne.n	8007310 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7ff fbd6 	bl	8006adc <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007330:	e7ee      	b.n	8007310 <USBH_Process_OS+0x8>

08007332 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800734e:	2200      	movs	r2, #0
 8007350:	4619      	mov	r1, r3
 8007352:	f000 ff6f 	bl	8008234 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af02      	add	r7, sp, #8
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007372:	78fb      	ldrb	r3, [r7, #3]
 8007374:	b29b      	uxth	r3, r3
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	4613      	mov	r3, r2
 800737a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800737e:	2100      	movs	r1, #0
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f864 	bl	800744e <USBH_GetDescriptor>
 8007386:	4603      	mov	r3, r0
 8007388:	73fb      	strb	r3, [r7, #15]
 800738a:	7bfb      	ldrb	r3, [r7, #15]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10a      	bne.n	80073a6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800739c:	78fa      	ldrb	r2, [r7, #3]
 800739e:	b292      	uxth	r2, r2
 80073a0:	4619      	mov	r1, r3
 80073a2:	f000 f918 	bl	80075d6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	460b      	mov	r3, r1
 80073ba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	331c      	adds	r3, #28
 80073c0:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80073c2:	887b      	ldrh	r3, [r7, #2]
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073cc:	2100      	movs	r1, #0
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f83d 	bl	800744e <USBH_GetDescriptor>
 80073d4:	4603      	mov	r3, r0
 80073d6:	72fb      	strb	r3, [r7, #11]
 80073d8:	7afb      	ldrb	r3, [r7, #11]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d107      	bne.n	80073ee <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f203 3336 	addw	r3, r3, #822	; 0x336
 80073e4:	887a      	ldrh	r2, [r7, #2]
 80073e6:	68f9      	ldr	r1, [r7, #12]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f000 f963 	bl	80076b4 <USBH_ParseCfgDesc>
  }

  return status;
 80073ee:	7afb      	ldrb	r3, [r7, #11]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af02      	add	r7, sp, #8
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	607a      	str	r2, [r7, #4]
 8007402:	461a      	mov	r2, r3
 8007404:	460b      	mov	r3, r1
 8007406:	72fb      	strb	r3, [r7, #11]
 8007408:	4613      	mov	r3, r2
 800740a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800740c:	7afb      	ldrb	r3, [r7, #11]
 800740e:	b29b      	uxth	r3, r3
 8007410:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007414:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800741c:	893b      	ldrh	r3, [r7, #8]
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	460b      	mov	r3, r1
 8007422:	2100      	movs	r1, #0
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 f812 	bl	800744e <USBH_GetDescriptor>
 800742a:	4603      	mov	r3, r0
 800742c:	75fb      	strb	r3, [r7, #23]
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d107      	bne.n	8007444 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800743a:	893a      	ldrh	r2, [r7, #8]
 800743c:	6879      	ldr	r1, [r7, #4]
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fa34 	bl	80078ac <USBH_ParseStringDesc>
  }

  return status;
 8007444:	7dfb      	ldrb	r3, [r7, #23]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	60f8      	str	r0, [r7, #12]
 8007456:	607b      	str	r3, [r7, #4]
 8007458:	460b      	mov	r3, r1
 800745a:	72fb      	strb	r3, [r7, #11]
 800745c:	4613      	mov	r3, r2
 800745e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	789b      	ldrb	r3, [r3, #2]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d11c      	bne.n	80074a2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007468:	7afb      	ldrb	r3, [r7, #11]
 800746a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800746e:	b2da      	uxtb	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2206      	movs	r2, #6
 8007478:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	893a      	ldrh	r2, [r7, #8]
 800747e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007480:	893b      	ldrh	r3, [r7, #8]
 8007482:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800748a:	d104      	bne.n	8007496 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f240 4209 	movw	r2, #1033	; 0x409
 8007492:	829a      	strh	r2, [r3, #20]
 8007494:	e002      	b.n	800749c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	8b3a      	ldrh	r2, [r7, #24]
 80074a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80074a2:	8b3b      	ldrh	r3, [r7, #24]
 80074a4:	461a      	mov	r2, r3
 80074a6:	6879      	ldr	r1, [r7, #4]
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 fa4b 	bl	8007944 <USBH_CtlReq>
 80074ae:	4603      	mov	r3, r0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	460b      	mov	r3, r1
 80074c2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	789b      	ldrb	r3, [r3, #2]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d10f      	bne.n	80074ec <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2205      	movs	r2, #5
 80074d6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80074d8:	78fb      	ldrb	r3, [r7, #3]
 80074da:	b29a      	uxth	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80074ec:	2200      	movs	r2, #0
 80074ee:	2100      	movs	r1, #0
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fa27 	bl	8007944 <USBH_CtlReq>
 80074f6:	4603      	mov	r3, r0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	789b      	ldrb	r3, [r3, #2]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d10e      	bne.n	8007532 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2209      	movs	r2, #9
 800751e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	887a      	ldrh	r2, [r7, #2]
 8007524:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007532:	2200      	movs	r2, #0
 8007534:	2100      	movs	r1, #0
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fa04 	bl	8007944 <USBH_CtlReq>
 800753c:	4603      	mov	r3, r0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b082      	sub	sp, #8
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	460b      	mov	r3, r1
 8007550:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	789b      	ldrb	r3, [r3, #2]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d10f      	bne.n	800757a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2203      	movs	r2, #3
 8007564:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007566:	78fb      	ldrb	r3, [r7, #3]
 8007568:	b29a      	uxth	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800757a:	2200      	movs	r2, #0
 800757c:	2100      	movs	r1, #0
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f9e0 	bl	8007944 <USBH_CtlReq>
 8007584:	4603      	mov	r3, r0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	460b      	mov	r3, r1
 8007598:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	789b      	ldrb	r3, [r3, #2]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d10f      	bne.n	80075c2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2202      	movs	r2, #2
 80075a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80075b4:	78fb      	ldrb	r3, [r7, #3]
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80075c2:	2200      	movs	r2, #0
 80075c4:	2100      	movs	r1, #0
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f9bc 	bl	8007944 <USBH_CtlReq>
 80075cc:	4603      	mov	r3, r0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b085      	sub	sp, #20
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	4613      	mov	r3, r2
 80075e2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	781a      	ldrb	r2, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	785a      	ldrb	r2, [r3, #1]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	3302      	adds	r3, #2
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	3303      	adds	r3, #3
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	021b      	lsls	r3, r3, #8
 8007606:	b29b      	uxth	r3, r3
 8007608:	4313      	orrs	r3, r2
 800760a:	b29a      	uxth	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	791a      	ldrb	r2, [r3, #4]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	795a      	ldrb	r2, [r3, #5]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	799a      	ldrb	r2, [r3, #6]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	79da      	ldrb	r2, [r3, #7]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007630:	88fb      	ldrh	r3, [r7, #6]
 8007632:	2b08      	cmp	r3, #8
 8007634:	d939      	bls.n	80076aa <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	3308      	adds	r3, #8
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	b29a      	uxth	r2, r3
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	3309      	adds	r3, #9
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	021b      	lsls	r3, r3, #8
 8007648:	b29b      	uxth	r3, r3
 800764a:	4313      	orrs	r3, r2
 800764c:	b29a      	uxth	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	330a      	adds	r3, #10
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	b29a      	uxth	r2, r3
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	330b      	adds	r3, #11
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	b29b      	uxth	r3, r3
 8007662:	021b      	lsls	r3, r3, #8
 8007664:	b29b      	uxth	r3, r3
 8007666:	4313      	orrs	r3, r2
 8007668:	b29a      	uxth	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	330c      	adds	r3, #12
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	b29a      	uxth	r2, r3
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	330d      	adds	r3, #13
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	b29b      	uxth	r3, r3
 800767e:	021b      	lsls	r3, r3, #8
 8007680:	b29b      	uxth	r3, r3
 8007682:	4313      	orrs	r3, r2
 8007684:	b29a      	uxth	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	7b9a      	ldrb	r2, [r3, #14]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	7bda      	ldrb	r2, [r3, #15]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	7c1a      	ldrb	r2, [r3, #16]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	7c5a      	ldrb	r2, [r3, #17]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	745a      	strb	r2, [r3, #17]
  }
}
 80076aa:	bf00      	nop
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bc80      	pop	{r7}
 80076b2:	4770      	bx	lr

080076b4 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b08a      	sub	sp, #40	; 0x28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	4613      	mov	r3, r2
 80076c0:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	781a      	ldrb	r2, [r3, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	785a      	ldrb	r2, [r3, #1]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	3302      	adds	r3, #2
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	3303      	adds	r3, #3
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	021b      	lsls	r3, r3, #8
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	4313      	orrs	r3, r2
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	791a      	ldrb	r2, [r3, #4]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	795a      	ldrb	r2, [r3, #5]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	799a      	ldrb	r2, [r3, #6]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	79da      	ldrb	r2, [r3, #7]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	7a1a      	ldrb	r2, [r3, #8]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800772a:	88fb      	ldrh	r3, [r7, #6]
 800772c:	2b09      	cmp	r3, #9
 800772e:	d95f      	bls.n	80077f0 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007730:	2309      	movs	r3, #9
 8007732:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007734:	2300      	movs	r3, #0
 8007736:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007738:	e051      	b.n	80077de <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800773a:	f107 0316 	add.w	r3, r7, #22
 800773e:	4619      	mov	r1, r3
 8007740:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007742:	f000 f8e5 	bl	8007910 <USBH_GetNextDesc>
 8007746:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	785b      	ldrb	r3, [r3, #1]
 800774c:	2b04      	cmp	r3, #4
 800774e:	d146      	bne.n	80077de <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007750:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007754:	221a      	movs	r2, #26
 8007756:	fb02 f303 	mul.w	r3, r2, r3
 800775a:	3308      	adds	r3, #8
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	4413      	add	r3, r2
 8007760:	3302      	adds	r3, #2
 8007762:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007766:	69f8      	ldr	r0, [r7, #28]
 8007768:	f000 f846 	bl	80077f8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007772:	2300      	movs	r3, #0
 8007774:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007776:	e022      	b.n	80077be <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007778:	f107 0316 	add.w	r3, r7, #22
 800777c:	4619      	mov	r1, r3
 800777e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007780:	f000 f8c6 	bl	8007910 <USBH_GetNextDesc>
 8007784:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	785b      	ldrb	r3, [r3, #1]
 800778a:	2b05      	cmp	r3, #5
 800778c:	d117      	bne.n	80077be <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800778e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007792:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007796:	3201      	adds	r2, #1
 8007798:	00d2      	lsls	r2, r2, #3
 800779a:	211a      	movs	r1, #26
 800779c:	fb01 f303 	mul.w	r3, r1, r3
 80077a0:	4413      	add	r3, r2
 80077a2:	3308      	adds	r3, #8
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	4413      	add	r3, r2
 80077a8:	3304      	adds	r3, #4
 80077aa:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80077ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077ae:	69b8      	ldr	r0, [r7, #24]
 80077b0:	f000 f850 	bl	8007854 <USBH_ParseEPDesc>
            ep_ix++;
 80077b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80077b8:	3301      	adds	r3, #1
 80077ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	791b      	ldrb	r3, [r3, #4]
 80077c2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d204      	bcs.n	80077d4 <USBH_ParseCfgDesc+0x120>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	885a      	ldrh	r2, [r3, #2]
 80077ce:	8afb      	ldrh	r3, [r7, #22]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d8d1      	bhi.n	8007778 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80077d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077d8:	3301      	adds	r3, #1
 80077da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80077de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d804      	bhi.n	80077f0 <USBH_ParseCfgDesc+0x13c>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	885a      	ldrh	r2, [r3, #2]
 80077ea:	8afb      	ldrh	r3, [r7, #22]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d8a4      	bhi.n	800773a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80077f0:	bf00      	nop
 80077f2:	3728      	adds	r7, #40	; 0x28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	781a      	ldrb	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	785a      	ldrb	r2, [r3, #1]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	789a      	ldrb	r2, [r3, #2]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	78da      	ldrb	r2, [r3, #3]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	791a      	ldrb	r2, [r3, #4]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	795a      	ldrb	r2, [r3, #5]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	799a      	ldrb	r2, [r3, #6]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	79da      	ldrb	r2, [r3, #7]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	7a1a      	ldrb	r2, [r3, #8]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	721a      	strb	r2, [r3, #8]
}
 800784a:	bf00      	nop
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	bc80      	pop	{r7}
 8007852:	4770      	bx	lr

08007854 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781a      	ldrb	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	785a      	ldrb	r2, [r3, #1]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	789a      	ldrb	r2, [r3, #2]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	78da      	ldrb	r2, [r3, #3]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	3304      	adds	r3, #4
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	b29a      	uxth	r2, r3
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	3305      	adds	r3, #5
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	b29b      	uxth	r3, r3
 800788e:	021b      	lsls	r3, r3, #8
 8007890:	b29b      	uxth	r3, r3
 8007892:	4313      	orrs	r3, r2
 8007894:	b29a      	uxth	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	799a      	ldrb	r2, [r3, #6]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	719a      	strb	r2, [r3, #6]
}
 80078a2:	bf00      	nop
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bc80      	pop	{r7}
 80078aa:	4770      	bx	lr

080078ac <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b087      	sub	sp, #28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	4613      	mov	r3, r2
 80078b8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3301      	adds	r3, #1
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b03      	cmp	r3, #3
 80078c2:	d120      	bne.n	8007906 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	1e9a      	subs	r2, r3, #2
 80078ca:	88fb      	ldrh	r3, [r7, #6]
 80078cc:	4293      	cmp	r3, r2
 80078ce:	bf28      	it	cs
 80078d0:	4613      	movcs	r3, r2
 80078d2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3302      	adds	r3, #2
 80078d8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80078da:	2300      	movs	r3, #0
 80078dc:	82fb      	strh	r3, [r7, #22]
 80078de:	e00b      	b.n	80078f8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80078e0:	8afb      	ldrh	r3, [r7, #22]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	4413      	add	r3, r2
 80078e6:	781a      	ldrb	r2, [r3, #0]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	701a      	strb	r2, [r3, #0]
      pdest++;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	3301      	adds	r3, #1
 80078f0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80078f2:	8afb      	ldrh	r3, [r7, #22]
 80078f4:	3302      	adds	r3, #2
 80078f6:	82fb      	strh	r3, [r7, #22]
 80078f8:	8afa      	ldrh	r2, [r7, #22]
 80078fa:	8abb      	ldrh	r3, [r7, #20]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d3ef      	bcc.n	80078e0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2200      	movs	r2, #0
 8007904:	701a      	strb	r2, [r3, #0]
  }
}
 8007906:	bf00      	nop
 8007908:	371c      	adds	r7, #28
 800790a:	46bd      	mov	sp, r7
 800790c:	bc80      	pop	{r7}
 800790e:	4770      	bx	lr

08007910 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	881a      	ldrh	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	b29b      	uxth	r3, r3
 8007924:	4413      	add	r3, r2
 8007926:	b29a      	uxth	r2, r3
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4413      	add	r3, r2
 8007936:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007938:	68fb      	ldr	r3, [r7, #12]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	bc80      	pop	{r7}
 8007942:	4770      	bx	lr

08007944 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	4613      	mov	r3, r2
 8007950:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007952:	2301      	movs	r3, #1
 8007954:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	789b      	ldrb	r3, [r3, #2]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d002      	beq.n	8007964 <USBH_CtlReq+0x20>
 800795e:	2b02      	cmp	r3, #2
 8007960:	d01d      	beq.n	800799e <USBH_CtlReq+0x5a>
        }
      }
      break;

    default:
      break;
 8007962:	e042      	b.n	80079ea <USBH_CtlReq+0xa6>
      phost->Control.buff = buff;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	88fa      	ldrh	r2, [r7, #6]
 800796e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2201      	movs	r2, #1
 8007974:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2202      	movs	r2, #2
 800797a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800797c:	2301      	movs	r3, #1
 800797e:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2203      	movs	r2, #3
 8007984:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007994:	2200      	movs	r2, #0
 8007996:	4619      	mov	r1, r3
 8007998:	f000 fc4c 	bl	8008234 <osMessagePut>
      break;
 800799c:	e025      	b.n	80079ea <USBH_CtlReq+0xa6>
      status = USBH_HandleControl(phost);
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 f828 	bl	80079f4 <USBH_HandleControl>
 80079a4:	4603      	mov	r3, r0
 80079a6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d108      	bne.n	80079c0 <USBH_CtlReq+0x7c>
        phost->RequestState = CMD_SEND;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2201      	movs	r2, #1
 80079b2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	75fb      	strb	r3, [r7, #23]
      break;
 80079be:	e013      	b.n	80079e8 <USBH_CtlReq+0xa4>
      else if (status == USBH_NOT_SUPPORTED)
 80079c0:	7dfb      	ldrb	r3, [r7, #23]
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d108      	bne.n	80079d8 <USBH_CtlReq+0x94>
        phost->RequestState = CMD_SEND;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80079d2:	2303      	movs	r3, #3
 80079d4:	75fb      	strb	r3, [r7, #23]
      break;
 80079d6:	e007      	b.n	80079e8 <USBH_CtlReq+0xa4>
        if (status == USBH_FAIL)
 80079d8:	7dfb      	ldrb	r3, [r7, #23]
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d104      	bne.n	80079e8 <USBH_CtlReq+0xa4>
          phost->RequestState = CMD_SEND;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 80079e4:	2302      	movs	r3, #2
 80079e6:	75fb      	strb	r3, [r7, #23]
      break;
 80079e8:	bf00      	nop
  }
  return status;
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3718      	adds	r7, #24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af02      	add	r7, sp, #8
 80079fa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80079fc:	2301      	movs	r3, #1
 80079fe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a00:	2300      	movs	r3, #0
 8007a02:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	7e1b      	ldrb	r3, [r3, #24]
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	2b0a      	cmp	r3, #10
 8007a0c:	f200 821d 	bhi.w	8007e4a <USBH_HandleControl+0x456>
 8007a10:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <USBH_HandleControl+0x24>)
 8007a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a16:	bf00      	nop
 8007a18:	08007a45 	.word	0x08007a45
 8007a1c:	08007a5f 	.word	0x08007a5f
 8007a20:	08007b01 	.word	0x08007b01
 8007a24:	08007b27 	.word	0x08007b27
 8007a28:	08007bb3 	.word	0x08007bb3
 8007a2c:	08007bdd 	.word	0x08007bdd
 8007a30:	08007c9f 	.word	0x08007c9f
 8007a34:	08007cc1 	.word	0x08007cc1
 8007a38:	08007d53 	.word	0x08007d53
 8007a3c:	08007d79 	.word	0x08007d79
 8007a40:	08007e0b 	.word	0x08007e0b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f103 0110 	add.w	r1, r3, #16
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	795b      	ldrb	r3, [r3, #5]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fa0b 	bl	8007e6c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2202      	movs	r2, #2
 8007a5a:	761a      	strb	r2, [r3, #24]
      break;
 8007a5c:	e200      	b.n	8007e60 <USBH_HandleControl+0x46c>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	795b      	ldrb	r3, [r3, #5]
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f002 ffd1 	bl	800aa0c <USBH_LL_GetURBState>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d12c      	bne.n	8007ace <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	7c1b      	ldrb	r3, [r3, #16]
 8007a78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a7c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	8adb      	ldrh	r3, [r3, #22]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007a86:	7b7b      	ldrb	r3, [r7, #13]
 8007a88:	2b80      	cmp	r3, #128	; 0x80
 8007a8a:	d103      	bne.n	8007a94 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2203      	movs	r2, #3
 8007a90:	761a      	strb	r2, [r3, #24]
 8007a92:	e00d      	b.n	8007ab0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2205      	movs	r2, #5
 8007a98:	761a      	strb	r2, [r3, #24]
 8007a9a:	e009      	b.n	8007ab0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8007a9c:	7b7b      	ldrb	r3, [r7, #13]
 8007a9e:	2b80      	cmp	r3, #128	; 0x80
 8007aa0:	d103      	bne.n	8007aaa <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2209      	movs	r2, #9
 8007aa6:	761a      	strb	r2, [r3, #24]
 8007aa8:	e002      	b.n	8007ab0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2207      	movs	r2, #7
 8007aae:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2203      	movs	r2, #3
 8007ab4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	f000 fbb4 	bl	8008234 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007acc:	e1bf      	b.n	8007e4e <USBH_HandleControl+0x45a>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d003      	beq.n	8007adc <USBH_HandleControl+0xe8>
 8007ad4:	7bbb      	ldrb	r3, [r7, #14]
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	f040 81b9 	bne.w	8007e4e <USBH_HandleControl+0x45a>
          phost->Control.state = CTRL_ERROR;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	220b      	movs	r2, #11
 8007ae0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2203      	movs	r2, #3
 8007ae6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007af6:	2200      	movs	r2, #0
 8007af8:	4619      	mov	r1, r3
 8007afa:	f000 fb9b 	bl	8008234 <osMessagePut>
      break;
 8007afe:	e1a6      	b.n	8007e4e <USBH_HandleControl+0x45a>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6899      	ldr	r1, [r3, #8]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	899a      	ldrh	r2, [r3, #12]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	791b      	ldrb	r3, [r3, #4]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f9e6 	bl	8007eea <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2204      	movs	r2, #4
 8007b22:	761a      	strb	r2, [r3, #24]
      break;
 8007b24:	e19c      	b.n	8007e60 <USBH_HandleControl+0x46c>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	791b      	ldrb	r3, [r3, #4]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f002 ff6d 	bl	800aa0c <USBH_LL_GetURBState>
 8007b32:	4603      	mov	r3, r0
 8007b34:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d110      	bne.n	8007b5e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2209      	movs	r2, #9
 8007b40:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2203      	movs	r2, #3
 8007b46:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007b56:	2200      	movs	r2, #0
 8007b58:	4619      	mov	r1, r3
 8007b5a:	f000 fb6b 	bl	8008234 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007b5e:	7bbb      	ldrb	r3, [r7, #14]
 8007b60:	2b05      	cmp	r3, #5
 8007b62:	d110      	bne.n	8007b86 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007b64:	2303      	movs	r3, #3
 8007b66:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2203      	movs	r2, #3
 8007b6c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	4619      	mov	r1, r3
 8007b80:	f000 fb58 	bl	8008234 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b84:	e165      	b.n	8007e52 <USBH_HandleControl+0x45e>
        if (URB_Status == USBH_URB_ERROR)
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	2b04      	cmp	r3, #4
 8007b8a:	f040 8162 	bne.w	8007e52 <USBH_HandleControl+0x45e>
          phost->Control.state = CTRL_ERROR;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	220b      	movs	r2, #11
 8007b92:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2203      	movs	r2, #3
 8007b98:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007ba8:	2200      	movs	r2, #0
 8007baa:	4619      	mov	r1, r3
 8007bac:	f000 fb42 	bl	8008234 <osMessagePut>
      break;
 8007bb0:	e14f      	b.n	8007e52 <USBH_HandleControl+0x45e>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6899      	ldr	r1, [r3, #8]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	899a      	ldrh	r2, [r3, #12]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	795b      	ldrb	r3, [r3, #5]
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	9000      	str	r0, [sp, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f96c 	bl	8007ea0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2206      	movs	r2, #6
 8007bd8:	761a      	strb	r2, [r3, #24]
      break;
 8007bda:	e141      	b.n	8007e60 <USBH_HandleControl+0x46c>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	795b      	ldrb	r3, [r3, #5]
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f002 ff12 	bl	800aa0c <USBH_LL_GetURBState>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d111      	bne.n	8007c16 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2207      	movs	r2, #7
 8007bf6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2203      	movs	r2, #3
 8007bfc:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	4619      	mov	r1, r3
 8007c10:	f000 fb10 	bl	8008234 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007c14:	e11f      	b.n	8007e56 <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_STALL)
 8007c16:	7bbb      	ldrb	r3, [r7, #14]
 8007c18:	2b05      	cmp	r3, #5
 8007c1a:	d113      	bne.n	8007c44 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	220c      	movs	r2, #12
 8007c20:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007c22:	2303      	movs	r3, #3
 8007c24:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2203      	movs	r2, #3
 8007c2a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	f000 faf9 	bl	8008234 <osMessagePut>
      break;
 8007c42:	e108      	b.n	8007e56 <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d111      	bne.n	8007c6e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2205      	movs	r2, #5
 8007c4e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2203      	movs	r2, #3
 8007c54:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007c64:	2200      	movs	r2, #0
 8007c66:	4619      	mov	r1, r3
 8007c68:	f000 fae4 	bl	8008234 <osMessagePut>
      break;
 8007c6c:	e0f3      	b.n	8007e56 <USBH_HandleControl+0x462>
        if (URB_Status == USBH_URB_ERROR)
 8007c6e:	7bbb      	ldrb	r3, [r7, #14]
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	f040 80f0 	bne.w	8007e56 <USBH_HandleControl+0x462>
          phost->Control.state = CTRL_ERROR;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	220b      	movs	r2, #11
 8007c7a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2203      	movs	r2, #3
 8007c84:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007c94:	2200      	movs	r2, #0
 8007c96:	4619      	mov	r1, r3
 8007c98:	f000 facc 	bl	8008234 <osMessagePut>
      break;
 8007c9c:	e0db      	b.n	8007e56 <USBH_HandleControl+0x462>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	791b      	ldrb	r3, [r3, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f91f 	bl	8007eea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2208      	movs	r2, #8
 8007cbc:	761a      	strb	r2, [r3, #24]

      break;
 8007cbe:	e0cf      	b.n	8007e60 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	791b      	ldrb	r3, [r3, #4]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f002 fea0 	bl	800aa0c <USBH_LL_GetURBState>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d113      	bne.n	8007cfe <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	220d      	movs	r2, #13
 8007cda:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2203      	movs	r2, #3
 8007ce4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	f000 fa9c 	bl	8008234 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007cfc:	e0ad      	b.n	8007e5a <USBH_HandleControl+0x466>
      else if (URB_Status == USBH_URB_ERROR)
 8007cfe:	7bbb      	ldrb	r3, [r7, #14]
 8007d00:	2b04      	cmp	r3, #4
 8007d02:	d111      	bne.n	8007d28 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	220b      	movs	r2, #11
 8007d08:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2203      	movs	r2, #3
 8007d0e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007d1e:	2200      	movs	r2, #0
 8007d20:	4619      	mov	r1, r3
 8007d22:	f000 fa87 	bl	8008234 <osMessagePut>
      break;
 8007d26:	e098      	b.n	8007e5a <USBH_HandleControl+0x466>
        if (URB_Status == USBH_URB_STALL)
 8007d28:	7bbb      	ldrb	r3, [r7, #14]
 8007d2a:	2b05      	cmp	r3, #5
 8007d2c:	f040 8095 	bne.w	8007e5a <USBH_HandleControl+0x466>
          status = USBH_NOT_SUPPORTED;
 8007d30:	2303      	movs	r3, #3
 8007d32:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2203      	movs	r2, #3
 8007d38:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007d48:	2200      	movs	r2, #0
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	f000 fa72 	bl	8008234 <osMessagePut>
      break;
 8007d50:	e083      	b.n	8007e5a <USBH_HandleControl+0x466>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	795b      	ldrb	r3, [r3, #5]
 8007d56:	2201      	movs	r2, #1
 8007d58:	9200      	str	r2, [sp, #0]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f89e 	bl	8007ea0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	220a      	movs	r2, #10
 8007d74:	761a      	strb	r2, [r3, #24]
      break;
 8007d76:	e073      	b.n	8007e60 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	795b      	ldrb	r3, [r3, #5]
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f002 fe44 	bl	800aa0c <USBH_LL_GetURBState>
 8007d84:	4603      	mov	r3, r0
 8007d86:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d113      	bne.n	8007db6 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	220d      	movs	r2, #13
 8007d96:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2203      	movs	r2, #3
 8007d9c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007dac:	2200      	movs	r2, #0
 8007dae:	4619      	mov	r1, r3
 8007db0:	f000 fa40 	bl	8008234 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007db4:	e053      	b.n	8007e5e <USBH_HandleControl+0x46a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007db6:	7bbb      	ldrb	r3, [r7, #14]
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d111      	bne.n	8007de0 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2209      	movs	r2, #9
 8007dc0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2203      	movs	r2, #3
 8007dc6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	4619      	mov	r1, r3
 8007dda:	f000 fa2b 	bl	8008234 <osMessagePut>
      break;
 8007dde:	e03e      	b.n	8007e5e <USBH_HandleControl+0x46a>
        if (URB_Status == USBH_URB_ERROR)
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d13b      	bne.n	8007e5e <USBH_HandleControl+0x46a>
          phost->Control.state = CTRL_ERROR;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	220b      	movs	r2, #11
 8007dea:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2203      	movs	r2, #3
 8007df0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8007e00:	2200      	movs	r2, #0
 8007e02:	4619      	mov	r1, r3
 8007e04:	f000 fa16 	bl	8008234 <osMessagePut>
      break;
 8007e08:	e029      	b.n	8007e5e <USBH_HandleControl+0x46a>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	7e5b      	ldrb	r3, [r3, #25]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	765a      	strb	r2, [r3, #25]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	7e5b      	ldrb	r3, [r3, #25]
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d806      	bhi.n	8007e2c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007e2a:	e019      	b.n	8007e60 <USBH_HandleControl+0x46c>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8007e32:	2106      	movs	r1, #6
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007e44:	2302      	movs	r3, #2
 8007e46:	73fb      	strb	r3, [r7, #15]
      break;
 8007e48:	e00a      	b.n	8007e60 <USBH_HandleControl+0x46c>

    default:
      break;
 8007e4a:	bf00      	nop
 8007e4c:	e008      	b.n	8007e60 <USBH_HandleControl+0x46c>
      break;
 8007e4e:	bf00      	nop
 8007e50:	e006      	b.n	8007e60 <USBH_HandleControl+0x46c>
      break;
 8007e52:	bf00      	nop
 8007e54:	e004      	b.n	8007e60 <USBH_HandleControl+0x46c>
      break;
 8007e56:	bf00      	nop
 8007e58:	e002      	b.n	8007e60 <USBH_HandleControl+0x46c>
      break;
 8007e5a:	bf00      	nop
 8007e5c:	e000      	b.n	8007e60 <USBH_HandleControl+0x46c>
      break;
 8007e5e:	bf00      	nop
  }

  return status;
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop

08007e6c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b088      	sub	sp, #32
 8007e70:	af04      	add	r7, sp, #16
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	4613      	mov	r3, r2
 8007e78:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e7a:	79f9      	ldrb	r1, [r7, #7]
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9303      	str	r3, [sp, #12]
 8007e80:	2308      	movs	r3, #8
 8007e82:	9302      	str	r3, [sp, #8]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	2300      	movs	r3, #0
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	2200      	movs	r2, #0
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f002 fd8a 	bl	800a9aa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b088      	sub	sp, #32
 8007ea4:	af04      	add	r7, sp, #16
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	4611      	mov	r1, r2
 8007eac:	461a      	mov	r2, r3
 8007eae:	460b      	mov	r3, r1
 8007eb0:	80fb      	strh	r3, [r7, #6]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ec4:	7979      	ldrb	r1, [r7, #5]
 8007ec6:	7e3b      	ldrb	r3, [r7, #24]
 8007ec8:	9303      	str	r3, [sp, #12]
 8007eca:	88fb      	ldrh	r3, [r7, #6]
 8007ecc:	9302      	str	r3, [sp, #8]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	2200      	movs	r2, #0
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f002 fd65 	bl	800a9aa <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b088      	sub	sp, #32
 8007eee:	af04      	add	r7, sp, #16
 8007ef0:	60f8      	str	r0, [r7, #12]
 8007ef2:	60b9      	str	r1, [r7, #8]
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	460b      	mov	r3, r1
 8007efa:	80fb      	strh	r3, [r7, #6]
 8007efc:	4613      	mov	r3, r2
 8007efe:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f00:	7979      	ldrb	r1, [r7, #5]
 8007f02:	2300      	movs	r3, #0
 8007f04:	9303      	str	r3, [sp, #12]
 8007f06:	88fb      	ldrh	r3, [r7, #6]
 8007f08:	9302      	str	r3, [sp, #8]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	9301      	str	r3, [sp, #4]
 8007f0e:	2301      	movs	r3, #1
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	2300      	movs	r3, #0
 8007f14:	2201      	movs	r2, #1
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f002 fd47 	bl	800a9aa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007f1c:	2300      	movs	r3, #0

}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b088      	sub	sp, #32
 8007f2a:	af04      	add	r7, sp, #16
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	4611      	mov	r1, r2
 8007f32:	461a      	mov	r2, r3
 8007f34:	460b      	mov	r3, r1
 8007f36:	80fb      	strh	r3, [r7, #6]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f4a:	7979      	ldrb	r1, [r7, #5]
 8007f4c:	7e3b      	ldrb	r3, [r7, #24]
 8007f4e:	9303      	str	r3, [sp, #12]
 8007f50:	88fb      	ldrh	r3, [r7, #6]
 8007f52:	9302      	str	r3, [sp, #8]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	9301      	str	r3, [sp, #4]
 8007f58:	2301      	movs	r3, #1
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	2200      	movs	r2, #0
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f002 fd22 	bl	800a9aa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b088      	sub	sp, #32
 8007f74:	af04      	add	r7, sp, #16
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	460b      	mov	r3, r1
 8007f80:	80fb      	strh	r3, [r7, #6]
 8007f82:	4613      	mov	r3, r2
 8007f84:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f86:	7979      	ldrb	r1, [r7, #5]
 8007f88:	2300      	movs	r3, #0
 8007f8a:	9303      	str	r3, [sp, #12]
 8007f8c:	88fb      	ldrh	r3, [r7, #6]
 8007f8e:	9302      	str	r3, [sp, #8]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	9301      	str	r3, [sp, #4]
 8007f94:	2301      	movs	r3, #1
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	2302      	movs	r3, #2
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f002 fd04 	bl	800a9aa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af04      	add	r7, sp, #16
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	4608      	mov	r0, r1
 8007fb6:	4611      	mov	r1, r2
 8007fb8:	461a      	mov	r2, r3
 8007fba:	4603      	mov	r3, r0
 8007fbc:	70fb      	strb	r3, [r7, #3]
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	70bb      	strb	r3, [r7, #2]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007fc6:	7878      	ldrb	r0, [r7, #1]
 8007fc8:	78ba      	ldrb	r2, [r7, #2]
 8007fca:	78f9      	ldrb	r1, [r7, #3]
 8007fcc:	8b3b      	ldrh	r3, [r7, #24]
 8007fce:	9302      	str	r3, [sp, #8]
 8007fd0:	7d3b      	ldrb	r3, [r7, #20]
 8007fd2:	9301      	str	r3, [sp, #4]
 8007fd4:	7c3b      	ldrb	r3, [r7, #16]
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	4603      	mov	r3, r0
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f002 fc97 	bl	800a90e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b082      	sub	sp, #8
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007ff6:	78fb      	ldrb	r3, [r7, #3]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f002 fcb6 	bl	800a96c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b084      	sub	sp, #16
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	460b      	mov	r3, r1
 8008014:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f832 	bl	8008080 <USBH_GetFreePipe>
 800801c:	4603      	mov	r3, r0
 800801e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008020:	89fb      	ldrh	r3, [r7, #14]
 8008022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008026:	4293      	cmp	r3, r2
 8008028:	d009      	beq.n	800803e <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800802a:	78fb      	ldrb	r3, [r7, #3]
 800802c:	89fa      	ldrh	r2, [r7, #14]
 800802e:	f002 020f 	and.w	r2, r2, #15
 8008032:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	32e0      	adds	r2, #224	; 0xe0
 800803a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 800803e:	89fb      	ldrh	r3, [r7, #14]
 8008040:	b2db      	uxtb	r3, r3
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800804a:	b480      	push	{r7}
 800804c:	b083      	sub	sp, #12
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	460b      	mov	r3, r1
 8008054:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008056:	78fb      	ldrb	r3, [r7, #3]
 8008058:	2b0a      	cmp	r3, #10
 800805a:	d80b      	bhi.n	8008074 <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800805c:	78fa      	ldrb	r2, [r7, #3]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	32e0      	adds	r2, #224	; 0xe0
 8008062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008066:	78fa      	ldrb	r2, [r7, #3]
 8008068:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	32e0      	adds	r2, #224	; 0xe0
 8008070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	bc80      	pop	{r7}
 800807e:	4770      	bx	lr

08008080 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008088:	2300      	movs	r3, #0
 800808a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800808c:	2300      	movs	r3, #0
 800808e:	73fb      	strb	r3, [r7, #15]
 8008090:	e00e      	b.n	80080b0 <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008092:	7bfa      	ldrb	r2, [r7, #15]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	32e0      	adds	r2, #224	; 0xe0
 8008098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800809c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d102      	bne.n	80080aa <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	e007      	b.n	80080ba <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
 80080ac:	3301      	adds	r3, #1
 80080ae:	73fb      	strb	r3, [r7, #15]
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	2b0a      	cmp	r3, #10
 80080b4:	d9ed      	bls.n	8008092 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80080b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	bc80      	pop	{r7}
 80080c2:	4770      	bx	lr

080080c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	4603      	mov	r3, r0
 80080cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80080ce:	2300      	movs	r3, #0
 80080d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80080d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80080d6:	2b84      	cmp	r3, #132	; 0x84
 80080d8:	d005      	beq.n	80080e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80080da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	4413      	add	r3, r2
 80080e2:	3303      	adds	r3, #3
 80080e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80080e6:	68fb      	ldr	r3, [r7, #12]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bc80      	pop	{r7}
 80080f0:	4770      	bx	lr

080080f2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b083      	sub	sp, #12
 80080f6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080f8:	f3ef 8305 	mrs	r3, IPSR
 80080fc:	607b      	str	r3, [r7, #4]
  return(result);
 80080fe:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008100:	2b00      	cmp	r3, #0
 8008102:	bf14      	ite	ne
 8008104:	2301      	movne	r3, #1
 8008106:	2300      	moveq	r3, #0
 8008108:	b2db      	uxtb	r3, r3
}
 800810a:	4618      	mov	r0, r3
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	bc80      	pop	{r7}
 8008112:	4770      	bx	lr

08008114 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008118:	f001 f908 	bl	800932c <vTaskStartScheduler>
  
  return osOK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	bd80      	pop	{r7, pc}

08008122 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008122:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008124:	b089      	sub	sp, #36	; 0x24
 8008126:	af04      	add	r7, sp, #16
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d020      	beq.n	8008176 <osThreadCreate+0x54>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d01c      	beq.n	8008176 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685c      	ldr	r4, [r3, #4]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681d      	ldr	r5, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	691e      	ldr	r6, [r3, #16]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800814e:	4618      	mov	r0, r3
 8008150:	f7ff ffb8 	bl	80080c4 <makeFreeRtosPriority>
 8008154:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800815e:	9202      	str	r2, [sp, #8]
 8008160:	9301      	str	r3, [sp, #4]
 8008162:	9100      	str	r1, [sp, #0]
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	4632      	mov	r2, r6
 8008168:	4629      	mov	r1, r5
 800816a:	4620      	mov	r0, r4
 800816c:	f000 ff08 	bl	8008f80 <xTaskCreateStatic>
 8008170:	4603      	mov	r3, r0
 8008172:	60fb      	str	r3, [r7, #12]
 8008174:	e01c      	b.n	80081b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685c      	ldr	r4, [r3, #4]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008182:	b29e      	uxth	r6, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800818a:	4618      	mov	r0, r3
 800818c:	f7ff ff9a 	bl	80080c4 <makeFreeRtosPriority>
 8008190:	4602      	mov	r2, r0
 8008192:	f107 030c 	add.w	r3, r7, #12
 8008196:	9301      	str	r3, [sp, #4]
 8008198:	9200      	str	r2, [sp, #0]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	4632      	mov	r2, r6
 800819e:	4629      	mov	r1, r5
 80081a0:	4620      	mov	r0, r4
 80081a2:	f000 ff49 	bl	8009038 <xTaskCreate>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d001      	beq.n	80081b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80081ac:	2300      	movs	r3, #0
 80081ae:	e000      	b.n	80081b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80081b0:	68fb      	ldr	r3, [r7, #12]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d001      	beq.n	80081d0 <osDelay+0x16>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	e000      	b.n	80081d2 <osDelay+0x18>
 80081d0:	2301      	movs	r3, #1
 80081d2:	4618      	mov	r0, r3
 80081d4:	f001 f876 	bl	80092c4 <vTaskDelay>
  
  return osOK;
 80081d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80081e2:	b590      	push	{r4, r7, lr}
 80081e4:	b085      	sub	sp, #20
 80081e6:	af02      	add	r7, sp, #8
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d011      	beq.n	8008218 <osMessageCreate+0x36>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00d      	beq.n	8008218 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6818      	ldr	r0, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6859      	ldr	r1, [r3, #4]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	689a      	ldr	r2, [r3, #8]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	2400      	movs	r4, #0
 800820e:	9400      	str	r4, [sp, #0]
 8008210:	f000 f9dc 	bl	80085cc <xQueueGenericCreateStatic>
 8008214:	4603      	mov	r3, r0
 8008216:	e008      	b.n	800822a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6818      	ldr	r0, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	4619      	mov	r1, r3
 8008224:	f000 fa49 	bl	80086ba <xQueueGenericCreate>
 8008228:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800822a:	4618      	mov	r0, r3
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	bd90      	pop	{r4, r7, pc}
	...

08008234 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008240:	2300      	movs	r3, #0
 8008242:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <osMessagePut+0x1e>
    ticks = 1;
 800824e:	2301      	movs	r3, #1
 8008250:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008252:	f7ff ff4e 	bl	80080f2 <inHandlerMode>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d018      	beq.n	800828e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800825c:	f107 0210 	add.w	r2, r7, #16
 8008260:	f107 0108 	add.w	r1, r7, #8
 8008264:	2300      	movs	r3, #0
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 fb82 	bl	8008970 <xQueueGenericSendFromISR>
 800826c:	4603      	mov	r3, r0
 800826e:	2b01      	cmp	r3, #1
 8008270:	d001      	beq.n	8008276 <osMessagePut+0x42>
      return osErrorOS;
 8008272:	23ff      	movs	r3, #255	; 0xff
 8008274:	e018      	b.n	80082a8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d014      	beq.n	80082a6 <osMessagePut+0x72>
 800827c:	4b0c      	ldr	r3, [pc, #48]	; (80082b0 <osMessagePut+0x7c>)
 800827e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	e00b      	b.n	80082a6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800828e:	f107 0108 	add.w	r1, r7, #8
 8008292:	2300      	movs	r3, #0
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 fa6c 	bl	8008774 <xQueueGenericSend>
 800829c:	4603      	mov	r3, r0
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d001      	beq.n	80082a6 <osMessagePut+0x72>
      return osErrorOS;
 80082a2:	23ff      	movs	r3, #255	; 0xff
 80082a4:	e000      	b.n	80082a8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	e000ed04 	.word	0xe000ed04

080082b4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80082b4:	b590      	push	{r4, r7, lr}
 80082b6:	b08b      	sub	sp, #44	; 0x2c
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80082c4:	2300      	movs	r3, #0
 80082c6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10a      	bne.n	80082e4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80082ce:	2380      	movs	r3, #128	; 0x80
 80082d0:	617b      	str	r3, [r7, #20]
    return event;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	461c      	mov	r4, r3
 80082d6:	f107 0314 	add.w	r3, r7, #20
 80082da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80082de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80082e2:	e054      	b.n	800838e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80082e4:	2300      	movs	r3, #0
 80082e6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f2:	d103      	bne.n	80082fc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80082f4:	f04f 33ff 	mov.w	r3, #4294967295
 80082f8:	627b      	str	r3, [r7, #36]	; 0x24
 80082fa:	e009      	b.n	8008310 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d006      	beq.n	8008310 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <osMessageGet+0x5c>
      ticks = 1;
 800830c:	2301      	movs	r3, #1
 800830e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008310:	f7ff feef 	bl	80080f2 <inHandlerMode>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d01c      	beq.n	8008354 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800831a:	f107 0220 	add.w	r2, r7, #32
 800831e:	f107 0314 	add.w	r3, r7, #20
 8008322:	3304      	adds	r3, #4
 8008324:	4619      	mov	r1, r3
 8008326:	68b8      	ldr	r0, [r7, #8]
 8008328:	f000 fc9a 	bl	8008c60 <xQueueReceiveFromISR>
 800832c:	4603      	mov	r3, r0
 800832e:	2b01      	cmp	r3, #1
 8008330:	d102      	bne.n	8008338 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008332:	2310      	movs	r3, #16
 8008334:	617b      	str	r3, [r7, #20]
 8008336:	e001      	b.n	800833c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008338:	2300      	movs	r3, #0
 800833a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d01d      	beq.n	800837e <osMessageGet+0xca>
 8008342:	4b15      	ldr	r3, [pc, #84]	; (8008398 <osMessageGet+0xe4>)
 8008344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	e014      	b.n	800837e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008354:	f107 0314 	add.w	r3, r7, #20
 8008358:	3304      	adds	r3, #4
 800835a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800835c:	4619      	mov	r1, r3
 800835e:	68b8      	ldr	r0, [r7, #8]
 8008360:	f000 fb9e 	bl	8008aa0 <xQueueReceive>
 8008364:	4603      	mov	r3, r0
 8008366:	2b01      	cmp	r3, #1
 8008368:	d102      	bne.n	8008370 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800836a:	2310      	movs	r3, #16
 800836c:	617b      	str	r3, [r7, #20]
 800836e:	e006      	b.n	800837e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	2b00      	cmp	r3, #0
 8008374:	d101      	bne.n	800837a <osMessageGet+0xc6>
 8008376:	2300      	movs	r3, #0
 8008378:	e000      	b.n	800837c <osMessageGet+0xc8>
 800837a:	2340      	movs	r3, #64	; 0x40
 800837c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	461c      	mov	r4, r3
 8008382:	f107 0314 	add.w	r3, r7, #20
 8008386:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800838a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	372c      	adds	r7, #44	; 0x2c
 8008392:	46bd      	mov	sp, r7
 8008394:	bd90      	pop	{r4, r7, pc}
 8008396:	bf00      	nop
 8008398:	e000ed04 	.word	0xe000ed04

0800839c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f103 0208 	add.w	r2, r3, #8
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f04f 32ff 	mov.w	r2, #4294967295
 80083b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f103 0208 	add.w	r2, r3, #8
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f103 0208 	add.w	r2, r3, #8
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bc80      	pop	{r7}
 80083d8:	4770      	bx	lr

080083da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bc80      	pop	{r7}
 80083f0:	4770      	bx	lr

080083f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083f2:	b480      	push	{r7}
 80083f4:	b085      	sub	sp, #20
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	689a      	ldr	r2, [r3, #8]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	1c5a      	adds	r2, r3, #1
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	601a      	str	r2, [r3, #0]
}
 800842e:	bf00      	nop
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	bc80      	pop	{r7}
 8008436:	4770      	bx	lr

08008438 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800844e:	d103      	bne.n	8008458 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	60fb      	str	r3, [r7, #12]
 8008456:	e00c      	b.n	8008472 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	3308      	adds	r3, #8
 800845c:	60fb      	str	r3, [r7, #12]
 800845e:	e002      	b.n	8008466 <vListInsert+0x2e>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	60fb      	str	r3, [r7, #12]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	429a      	cmp	r2, r3
 8008470:	d2f6      	bcs.n	8008460 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	1c5a      	adds	r2, r3, #1
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	601a      	str	r2, [r3, #0]
}
 800849e:	bf00      	nop
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bc80      	pop	{r7}
 80084a6:	4770      	bx	lr

080084a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	6892      	ldr	r2, [r2, #8]
 80084be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	6852      	ldr	r2, [r2, #4]
 80084c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d103      	bne.n	80084dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	689a      	ldr	r2, [r3, #8]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	1e5a      	subs	r2, r3, #1
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bc80      	pop	{r7}
 80084f8:	4770      	bx	lr
	...

080084fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10a      	bne.n	8008526 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008522:	bf00      	nop
 8008524:	e7fe      	b.n	8008524 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008526:	f001 fd19 	bl	8009f5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008532:	68f9      	ldr	r1, [r7, #12]
 8008534:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008536:	fb01 f303 	mul.w	r3, r1, r3
 800853a:	441a      	add	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008556:	3b01      	subs	r3, #1
 8008558:	68f9      	ldr	r1, [r7, #12]
 800855a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800855c:	fb01 f303 	mul.w	r3, r1, r3
 8008560:	441a      	add	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	22ff      	movs	r2, #255	; 0xff
 800856a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	22ff      	movs	r2, #255	; 0xff
 8008572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d114      	bne.n	80085a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d01a      	beq.n	80085ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	3310      	adds	r3, #16
 8008588:	4618      	mov	r0, r3
 800858a:	f001 f927 	bl	80097dc <xTaskRemoveFromEventList>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d012      	beq.n	80085ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008594:	4b0c      	ldr	r3, [pc, #48]	; (80085c8 <xQueueGenericReset+0xcc>)
 8008596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	e009      	b.n	80085ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	3310      	adds	r3, #16
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7ff fef6 	bl	800839c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	3324      	adds	r3, #36	; 0x24
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7ff fef1 	bl	800839c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80085ba:	f001 fcff 	bl	8009fbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80085be:	2301      	movs	r3, #1
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	e000ed04 	.word	0xe000ed04

080085cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08e      	sub	sp, #56	; 0x38
 80085d0:	af02      	add	r7, sp, #8
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
 80085d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10a      	bne.n	80085f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085f2:	bf00      	nop
 80085f4:	e7fe      	b.n	80085f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10a      	bne.n	8008612 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800860e:	bf00      	nop
 8008610:	e7fe      	b.n	8008610 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d002      	beq.n	800861e <xQueueGenericCreateStatic+0x52>
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <xQueueGenericCreateStatic+0x56>
 800861e:	2301      	movs	r3, #1
 8008620:	e000      	b.n	8008624 <xQueueGenericCreateStatic+0x58>
 8008622:	2300      	movs	r3, #0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10a      	bne.n	800863e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	623b      	str	r3, [r7, #32]
}
 800863a:	bf00      	nop
 800863c:	e7fe      	b.n	800863c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d102      	bne.n	800864a <xQueueGenericCreateStatic+0x7e>
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d101      	bne.n	800864e <xQueueGenericCreateStatic+0x82>
 800864a:	2301      	movs	r3, #1
 800864c:	e000      	b.n	8008650 <xQueueGenericCreateStatic+0x84>
 800864e:	2300      	movs	r3, #0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10a      	bne.n	800866a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	61fb      	str	r3, [r7, #28]
}
 8008666:	bf00      	nop
 8008668:	e7fe      	b.n	8008668 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800866a:	2348      	movs	r3, #72	; 0x48
 800866c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2b48      	cmp	r3, #72	; 0x48
 8008672:	d00a      	beq.n	800868a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	61bb      	str	r3, [r7, #24]
}
 8008686:	bf00      	nop
 8008688:	e7fe      	b.n	8008688 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00d      	beq.n	80086b0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800869c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80086a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	4613      	mov	r3, r2
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	68b9      	ldr	r1, [r7, #8]
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f000 f843 	bl	8008736 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80086b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3730      	adds	r7, #48	; 0x30
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b08a      	sub	sp, #40	; 0x28
 80086be:	af02      	add	r7, sp, #8
 80086c0:	60f8      	str	r0, [r7, #12]
 80086c2:	60b9      	str	r1, [r7, #8]
 80086c4:	4613      	mov	r3, r2
 80086c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10a      	bne.n	80086e4 <xQueueGenericCreate+0x2a>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	613b      	str	r3, [r7, #16]
}
 80086e0:	bf00      	nop
 80086e2:	e7fe      	b.n	80086e2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d102      	bne.n	80086f0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80086ea:	2300      	movs	r3, #0
 80086ec:	61fb      	str	r3, [r7, #28]
 80086ee:	e004      	b.n	80086fa <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	fb02 f303 	mul.w	r3, r2, r3
 80086f8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	3348      	adds	r3, #72	; 0x48
 80086fe:	4618      	mov	r0, r3
 8008700:	f001 fd2c 	bl	800a15c <pvPortMalloc>
 8008704:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00f      	beq.n	800872c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	3348      	adds	r3, #72	; 0x48
 8008710:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800871a:	79fa      	ldrb	r2, [r7, #7]
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	4613      	mov	r3, r2
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	68b9      	ldr	r1, [r7, #8]
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 f805 	bl	8008736 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800872c:	69bb      	ldr	r3, [r7, #24]
	}
 800872e:	4618      	mov	r0, r3
 8008730:	3720      	adds	r7, #32
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	60f8      	str	r0, [r7, #12]
 800873e:	60b9      	str	r1, [r7, #8]
 8008740:	607a      	str	r2, [r7, #4]
 8008742:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d103      	bne.n	8008752 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	69ba      	ldr	r2, [r7, #24]
 800874e:	601a      	str	r2, [r3, #0]
 8008750:	e002      	b.n	8008758 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008764:	2101      	movs	r1, #1
 8008766:	69b8      	ldr	r0, [r7, #24]
 8008768:	f7ff fec8 	bl	80084fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800876c:	bf00      	nop
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08e      	sub	sp, #56	; 0x38
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008782:	2300      	movs	r3, #0
 8008784:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10a      	bne.n	80087a6 <xQueueGenericSend+0x32>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087a2:	bf00      	nop
 80087a4:	e7fe      	b.n	80087a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d103      	bne.n	80087b4 <xQueueGenericSend+0x40>
 80087ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <xQueueGenericSend+0x44>
 80087b4:	2301      	movs	r3, #1
 80087b6:	e000      	b.n	80087ba <xQueueGenericSend+0x46>
 80087b8:	2300      	movs	r3, #0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10a      	bne.n	80087d4 <xQueueGenericSend+0x60>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087d0:	bf00      	nop
 80087d2:	e7fe      	b.n	80087d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d103      	bne.n	80087e2 <xQueueGenericSend+0x6e>
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d101      	bne.n	80087e6 <xQueueGenericSend+0x72>
 80087e2:	2301      	movs	r3, #1
 80087e4:	e000      	b.n	80087e8 <xQueueGenericSend+0x74>
 80087e6:	2300      	movs	r3, #0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10a      	bne.n	8008802 <xQueueGenericSend+0x8e>
	__asm volatile
 80087ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f0:	f383 8811 	msr	BASEPRI, r3
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	623b      	str	r3, [r7, #32]
}
 80087fe:	bf00      	nop
 8008800:	e7fe      	b.n	8008800 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008802:	f001 f9af 	bl	8009b64 <xTaskGetSchedulerState>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d102      	bne.n	8008812 <xQueueGenericSend+0x9e>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d101      	bne.n	8008816 <xQueueGenericSend+0xa2>
 8008812:	2301      	movs	r3, #1
 8008814:	e000      	b.n	8008818 <xQueueGenericSend+0xa4>
 8008816:	2300      	movs	r3, #0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10a      	bne.n	8008832 <xQueueGenericSend+0xbe>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	61fb      	str	r3, [r7, #28]
}
 800882e:	bf00      	nop
 8008830:	e7fe      	b.n	8008830 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008832:	f001 fb93 	bl	8009f5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883e:	429a      	cmp	r2, r3
 8008840:	d302      	bcc.n	8008848 <xQueueGenericSend+0xd4>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b02      	cmp	r3, #2
 8008846:	d129      	bne.n	800889c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	68b9      	ldr	r1, [r7, #8]
 800884c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800884e:	f000 fa87 	bl	8008d60 <prvCopyDataToQueue>
 8008852:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	2b00      	cmp	r3, #0
 800885a:	d010      	beq.n	800887e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800885c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885e:	3324      	adds	r3, #36	; 0x24
 8008860:	4618      	mov	r0, r3
 8008862:	f000 ffbb 	bl	80097dc <xTaskRemoveFromEventList>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d013      	beq.n	8008894 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800886c:	4b3f      	ldr	r3, [pc, #252]	; (800896c <xQueueGenericSend+0x1f8>)
 800886e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	e00a      	b.n	8008894 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800887e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008880:	2b00      	cmp	r3, #0
 8008882:	d007      	beq.n	8008894 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008884:	4b39      	ldr	r3, [pc, #228]	; (800896c <xQueueGenericSend+0x1f8>)
 8008886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008894:	f001 fb92 	bl	8009fbc <vPortExitCritical>
				return pdPASS;
 8008898:	2301      	movs	r3, #1
 800889a:	e063      	b.n	8008964 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d103      	bne.n	80088aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088a2:	f001 fb8b 	bl	8009fbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80088a6:	2300      	movs	r3, #0
 80088a8:	e05c      	b.n	8008964 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d106      	bne.n	80088be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088b0:	f107 0314 	add.w	r3, r7, #20
 80088b4:	4618      	mov	r0, r3
 80088b6:	f000 fff3 	bl	80098a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088ba:	2301      	movs	r3, #1
 80088bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088be:	f001 fb7d 	bl	8009fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088c2:	f000 fd9d 	bl	8009400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088c6:	f001 fb49 	bl	8009f5c <vPortEnterCritical>
 80088ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088d0:	b25b      	sxtb	r3, r3
 80088d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d6:	d103      	bne.n	80088e0 <xQueueGenericSend+0x16c>
 80088d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088e6:	b25b      	sxtb	r3, r3
 80088e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ec:	d103      	bne.n	80088f6 <xQueueGenericSend+0x182>
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088f6:	f001 fb61 	bl	8009fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088fa:	1d3a      	adds	r2, r7, #4
 80088fc:	f107 0314 	add.w	r3, r7, #20
 8008900:	4611      	mov	r1, r2
 8008902:	4618      	mov	r0, r3
 8008904:	f000 ffe2 	bl	80098cc <xTaskCheckForTimeOut>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d124      	bne.n	8008958 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800890e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008910:	f000 fb1e 	bl	8008f50 <prvIsQueueFull>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d018      	beq.n	800894c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	3310      	adds	r3, #16
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	4611      	mov	r1, r2
 8008922:	4618      	mov	r0, r3
 8008924:	f000 ff36 	bl	8009794 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800892a:	f000 faa9 	bl	8008e80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800892e:	f000 fd75 	bl	800941c <xTaskResumeAll>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	f47f af7c 	bne.w	8008832 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800893a:	4b0c      	ldr	r3, [pc, #48]	; (800896c <xQueueGenericSend+0x1f8>)
 800893c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	e772      	b.n	8008832 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800894c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800894e:	f000 fa97 	bl	8008e80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008952:	f000 fd63 	bl	800941c <xTaskResumeAll>
 8008956:	e76c      	b.n	8008832 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800895a:	f000 fa91 	bl	8008e80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800895e:	f000 fd5d 	bl	800941c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008962:	2300      	movs	r3, #0
		}
	}
}
 8008964:	4618      	mov	r0, r3
 8008966:	3738      	adds	r7, #56	; 0x38
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	e000ed04 	.word	0xe000ed04

08008970 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b08e      	sub	sp, #56	; 0x38
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10a      	bne.n	800899e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	627b      	str	r3, [r7, #36]	; 0x24
}
 800899a:	bf00      	nop
 800899c:	e7fe      	b.n	800899c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d103      	bne.n	80089ac <xQueueGenericSendFromISR+0x3c>
 80089a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <xQueueGenericSendFromISR+0x40>
 80089ac:	2301      	movs	r3, #1
 80089ae:	e000      	b.n	80089b2 <xQueueGenericSendFromISR+0x42>
 80089b0:	2300      	movs	r3, #0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10a      	bne.n	80089cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80089b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ba:	f383 8811 	msr	BASEPRI, r3
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	623b      	str	r3, [r7, #32]
}
 80089c8:	bf00      	nop
 80089ca:	e7fe      	b.n	80089ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d103      	bne.n	80089da <xQueueGenericSendFromISR+0x6a>
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <xQueueGenericSendFromISR+0x6e>
 80089da:	2301      	movs	r3, #1
 80089dc:	e000      	b.n	80089e0 <xQueueGenericSendFromISR+0x70>
 80089de:	2300      	movs	r3, #0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10a      	bne.n	80089fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	61fb      	str	r3, [r7, #28]
}
 80089f6:	bf00      	nop
 80089f8:	e7fe      	b.n	80089f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089fa:	f001 fb71 	bl	800a0e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089fe:	f3ef 8211 	mrs	r2, BASEPRI
 8008a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a06:	f383 8811 	msr	BASEPRI, r3
 8008a0a:	f3bf 8f6f 	isb	sy
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	61ba      	str	r2, [r7, #24]
 8008a14:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a16:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d302      	bcc.n	8008a2c <xQueueGenericSendFromISR+0xbc>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d12c      	bne.n	8008a86 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	68b9      	ldr	r1, [r7, #8]
 8008a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a3c:	f000 f990 	bl	8008d60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a40:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a48:	d112      	bne.n	8008a70 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d016      	beq.n	8008a80 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a54:	3324      	adds	r3, #36	; 0x24
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 fec0 	bl	80097dc <xTaskRemoveFromEventList>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00e      	beq.n	8008a80 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00b      	beq.n	8008a80 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	601a      	str	r2, [r3, #0]
 8008a6e:	e007      	b.n	8008a80 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a74:	3301      	adds	r3, #1
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	b25a      	sxtb	r2, r3
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a80:	2301      	movs	r3, #1
 8008a82:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008a84:	e001      	b.n	8008a8a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a86:	2300      	movs	r3, #0
 8008a88:	637b      	str	r3, [r7, #52]	; 0x34
 8008a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3738      	adds	r7, #56	; 0x38
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b08c      	sub	sp, #48	; 0x30
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008aac:	2300      	movs	r3, #0
 8008aae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10a      	bne.n	8008ad0 <xQueueReceive+0x30>
	__asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	623b      	str	r3, [r7, #32]
}
 8008acc:	bf00      	nop
 8008ace:	e7fe      	b.n	8008ace <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d103      	bne.n	8008ade <xQueueReceive+0x3e>
 8008ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d101      	bne.n	8008ae2 <xQueueReceive+0x42>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e000      	b.n	8008ae4 <xQueueReceive+0x44>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10a      	bne.n	8008afe <xQueueReceive+0x5e>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	61fb      	str	r3, [r7, #28]
}
 8008afa:	bf00      	nop
 8008afc:	e7fe      	b.n	8008afc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008afe:	f001 f831 	bl	8009b64 <xTaskGetSchedulerState>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d102      	bne.n	8008b0e <xQueueReceive+0x6e>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d101      	bne.n	8008b12 <xQueueReceive+0x72>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e000      	b.n	8008b14 <xQueueReceive+0x74>
 8008b12:	2300      	movs	r3, #0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10a      	bne.n	8008b2e <xQueueReceive+0x8e>
	__asm volatile
 8008b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1c:	f383 8811 	msr	BASEPRI, r3
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	61bb      	str	r3, [r7, #24]
}
 8008b2a:	bf00      	nop
 8008b2c:	e7fe      	b.n	8008b2c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b2e:	f001 fa15 	bl	8009f5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d01f      	beq.n	8008b7e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b3e:	68b9      	ldr	r1, [r7, #8]
 8008b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b42:	f000 f977 	bl	8008e34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	1e5a      	subs	r2, r3, #1
 8008b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00f      	beq.n	8008b76 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b58:	3310      	adds	r3, #16
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 fe3e 	bl	80097dc <xTaskRemoveFromEventList>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d007      	beq.n	8008b76 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b66:	4b3d      	ldr	r3, [pc, #244]	; (8008c5c <xQueueReceive+0x1bc>)
 8008b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b6c:	601a      	str	r2, [r3, #0]
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b76:	f001 fa21 	bl	8009fbc <vPortExitCritical>
				return pdPASS;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e069      	b.n	8008c52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d103      	bne.n	8008b8c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b84:	f001 fa1a 	bl	8009fbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	e062      	b.n	8008c52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d106      	bne.n	8008ba0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b92:	f107 0310 	add.w	r3, r7, #16
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 fe82 	bl	80098a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ba0:	f001 fa0c 	bl	8009fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ba4:	f000 fc2c 	bl	8009400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ba8:	f001 f9d8 	bl	8009f5c <vPortEnterCritical>
 8008bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bb2:	b25b      	sxtb	r3, r3
 8008bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb8:	d103      	bne.n	8008bc2 <xQueueReceive+0x122>
 8008bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bc8:	b25b      	sxtb	r3, r3
 8008bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bce:	d103      	bne.n	8008bd8 <xQueueReceive+0x138>
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bd8:	f001 f9f0 	bl	8009fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bdc:	1d3a      	adds	r2, r7, #4
 8008bde:	f107 0310 	add.w	r3, r7, #16
 8008be2:	4611      	mov	r1, r2
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 fe71 	bl	80098cc <xTaskCheckForTimeOut>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d123      	bne.n	8008c38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bf2:	f000 f997 	bl	8008f24 <prvIsQueueEmpty>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d017      	beq.n	8008c2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfe:	3324      	adds	r3, #36	; 0x24
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	4611      	mov	r1, r2
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 fdc5 	bl	8009794 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c0c:	f000 f938 	bl	8008e80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c10:	f000 fc04 	bl	800941c <xTaskResumeAll>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d189      	bne.n	8008b2e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008c1a:	4b10      	ldr	r3, [pc, #64]	; (8008c5c <xQueueReceive+0x1bc>)
 8008c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c20:	601a      	str	r2, [r3, #0]
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	e780      	b.n	8008b2e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c2e:	f000 f927 	bl	8008e80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c32:	f000 fbf3 	bl	800941c <xTaskResumeAll>
 8008c36:	e77a      	b.n	8008b2e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c3a:	f000 f921 	bl	8008e80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c3e:	f000 fbed 	bl	800941c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c44:	f000 f96e 	bl	8008f24 <prvIsQueueEmpty>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f43f af6f 	beq.w	8008b2e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3730      	adds	r7, #48	; 0x30
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	e000ed04 	.word	0xe000ed04

08008c60 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b08e      	sub	sp, #56	; 0x38
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10a      	bne.n	8008c8c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	623b      	str	r3, [r7, #32]
}
 8008c88:	bf00      	nop
 8008c8a:	e7fe      	b.n	8008c8a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d103      	bne.n	8008c9a <xQueueReceiveFromISR+0x3a>
 8008c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <xQueueReceiveFromISR+0x3e>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e000      	b.n	8008ca0 <xQueueReceiveFromISR+0x40>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10a      	bne.n	8008cba <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	61fb      	str	r3, [r7, #28]
}
 8008cb6:	bf00      	nop
 8008cb8:	e7fe      	b.n	8008cb8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cba:	f001 fa11 	bl	800a0e0 <vPortValidateInterruptPriority>
	__asm volatile
 8008cbe:	f3ef 8211 	mrs	r2, BASEPRI
 8008cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	61ba      	str	r2, [r7, #24]
 8008cd4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008cd6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cde:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d02f      	beq.n	8008d46 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008cf0:	68b9      	ldr	r1, [r7, #8]
 8008cf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cf4:	f000 f89e 	bl	8008e34 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfa:	1e5a      	subs	r2, r3, #1
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008d00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d08:	d112      	bne.n	8008d30 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d016      	beq.n	8008d40 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	3310      	adds	r3, #16
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 fd60 	bl	80097dc <xTaskRemoveFromEventList>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00e      	beq.n	8008d40 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00b      	beq.n	8008d40 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	e007      	b.n	8008d40 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d34:	3301      	adds	r3, #1
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	b25a      	sxtb	r2, r3
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008d40:	2301      	movs	r3, #1
 8008d42:	637b      	str	r3, [r7, #52]	; 0x34
 8008d44:	e001      	b.n	8008d4a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008d46:	2300      	movs	r3, #0
 8008d48:	637b      	str	r3, [r7, #52]	; 0x34
 8008d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f383 8811 	msr	BASEPRI, r3
}
 8008d54:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3738      	adds	r7, #56	; 0x38
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10d      	bne.n	8008d9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d14d      	bne.n	8008e22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f000 ff08 	bl	8009ba0 <xTaskPriorityDisinherit>
 8008d90:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	605a      	str	r2, [r3, #4]
 8008d98:	e043      	b.n	8008e22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d119      	bne.n	8008dd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6898      	ldr	r0, [r3, #8]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da8:	461a      	mov	r2, r3
 8008daa:	68b9      	ldr	r1, [r7, #8]
 8008dac:	f001 ff16 	bl	800abdc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	689a      	ldr	r2, [r3, #8]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db8:	441a      	add	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	689a      	ldr	r2, [r3, #8]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d32b      	bcc.n	8008e22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	609a      	str	r2, [r3, #8]
 8008dd2:	e026      	b.n	8008e22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	68d8      	ldr	r0, [r3, #12]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ddc:	461a      	mov	r2, r3
 8008dde:	68b9      	ldr	r1, [r7, #8]
 8008de0:	f001 fefc 	bl	800abdc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	68da      	ldr	r2, [r3, #12]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dec:	425b      	negs	r3, r3
 8008dee:	441a      	add	r2, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	68da      	ldr	r2, [r3, #12]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d207      	bcs.n	8008e10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e08:	425b      	negs	r3, r3
 8008e0a:	441a      	add	r2, r3
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d105      	bne.n	8008e22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d002      	beq.n	8008e22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	1c5a      	adds	r2, r3, #1
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008e2a:	697b      	ldr	r3, [r7, #20]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3718      	adds	r7, #24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d018      	beq.n	8008e78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68da      	ldr	r2, [r3, #12]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4e:	441a      	add	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68da      	ldr	r2, [r3, #12]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d303      	bcc.n	8008e68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	68d9      	ldr	r1, [r3, #12]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e70:	461a      	mov	r2, r3
 8008e72:	6838      	ldr	r0, [r7, #0]
 8008e74:	f001 feb2 	bl	800abdc <memcpy>
	}
}
 8008e78:	bf00      	nop
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e88:	f001 f868 	bl	8009f5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e94:	e011      	b.n	8008eba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d012      	beq.n	8008ec4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	3324      	adds	r3, #36	; 0x24
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f000 fc9a 	bl	80097dc <xTaskRemoveFromEventList>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008eae:	f000 fd6f 	bl	8009990 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008eb2:	7bfb      	ldrb	r3, [r7, #15]
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	dce9      	bgt.n	8008e96 <prvUnlockQueue+0x16>
 8008ec2:	e000      	b.n	8008ec6 <prvUnlockQueue+0x46>
					break;
 8008ec4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	22ff      	movs	r2, #255	; 0xff
 8008eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008ece:	f001 f875 	bl	8009fbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ed2:	f001 f843 	bl	8009f5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008edc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ede:	e011      	b.n	8008f04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d012      	beq.n	8008f0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	3310      	adds	r3, #16
 8008eec:	4618      	mov	r0, r3
 8008eee:	f000 fc75 	bl	80097dc <xTaskRemoveFromEventList>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ef8:	f000 fd4a 	bl	8009990 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008efc:	7bbb      	ldrb	r3, [r7, #14]
 8008efe:	3b01      	subs	r3, #1
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	dce9      	bgt.n	8008ee0 <prvUnlockQueue+0x60>
 8008f0c:	e000      	b.n	8008f10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008f0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	22ff      	movs	r2, #255	; 0xff
 8008f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008f18:	f001 f850 	bl	8009fbc <vPortExitCritical>
}
 8008f1c:	bf00      	nop
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f2c:	f001 f816 	bl	8009f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d102      	bne.n	8008f3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	60fb      	str	r3, [r7, #12]
 8008f3c:	e001      	b.n	8008f42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f42:	f001 f83b 	bl	8009fbc <vPortExitCritical>

	return xReturn;
 8008f46:	68fb      	ldr	r3, [r7, #12]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f58:	f001 f800 	bl	8009f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d102      	bne.n	8008f6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	e001      	b.n	8008f72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f72:	f001 f823 	bl	8009fbc <vPortExitCritical>

	return xReturn;
 8008f76:	68fb      	ldr	r3, [r7, #12]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b08e      	sub	sp, #56	; 0x38
 8008f84:	af04      	add	r7, sp, #16
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
 8008f8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10a      	bne.n	8008faa <xTaskCreateStatic+0x2a>
	__asm volatile
 8008f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	623b      	str	r3, [r7, #32]
}
 8008fa6:	bf00      	nop
 8008fa8:	e7fe      	b.n	8008fa8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10a      	bne.n	8008fc6 <xTaskCreateStatic+0x46>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	61fb      	str	r3, [r7, #28]
}
 8008fc2:	bf00      	nop
 8008fc4:	e7fe      	b.n	8008fc4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008fc6:	23b4      	movs	r3, #180	; 0xb4
 8008fc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	2bb4      	cmp	r3, #180	; 0xb4
 8008fce:	d00a      	beq.n	8008fe6 <xTaskCreateStatic+0x66>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	61bb      	str	r3, [r7, #24]
}
 8008fe2:	bf00      	nop
 8008fe4:	e7fe      	b.n	8008fe4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d01e      	beq.n	800902a <xTaskCreateStatic+0xaa>
 8008fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d01b      	beq.n	800902a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ffa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffe:	2202      	movs	r2, #2
 8009000:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009004:	2300      	movs	r3, #0
 8009006:	9303      	str	r3, [sp, #12]
 8009008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900a:	9302      	str	r3, [sp, #8]
 800900c:	f107 0314 	add.w	r3, r7, #20
 8009010:	9301      	str	r3, [sp, #4]
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	68b9      	ldr	r1, [r7, #8]
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 f851 	bl	80090c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009022:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009024:	f000 f8e4 	bl	80091f0 <prvAddNewTaskToReadyList>
 8009028:	e001      	b.n	800902e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800902a:	2300      	movs	r3, #0
 800902c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800902e:	697b      	ldr	r3, [r7, #20]
	}
 8009030:	4618      	mov	r0, r3
 8009032:	3728      	adds	r7, #40	; 0x28
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009038:	b580      	push	{r7, lr}
 800903a:	b08c      	sub	sp, #48	; 0x30
 800903c:	af04      	add	r7, sp, #16
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	603b      	str	r3, [r7, #0]
 8009044:	4613      	mov	r3, r2
 8009046:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009048:	88fb      	ldrh	r3, [r7, #6]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4618      	mov	r0, r3
 800904e:	f001 f885 	bl	800a15c <pvPortMalloc>
 8009052:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00e      	beq.n	8009078 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800905a:	20b4      	movs	r0, #180	; 0xb4
 800905c:	f001 f87e 	bl	800a15c <pvPortMalloc>
 8009060:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d003      	beq.n	8009070 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	631a      	str	r2, [r3, #48]	; 0x30
 800906e:	e005      	b.n	800907c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009070:	6978      	ldr	r0, [r7, #20]
 8009072:	f001 f937 	bl	800a2e4 <vPortFree>
 8009076:	e001      	b.n	800907c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009078:	2300      	movs	r3, #0
 800907a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d017      	beq.n	80090b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800908a:	88fa      	ldrh	r2, [r7, #6]
 800908c:	2300      	movs	r3, #0
 800908e:	9303      	str	r3, [sp, #12]
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	9302      	str	r3, [sp, #8]
 8009094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009096:	9301      	str	r3, [sp, #4]
 8009098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	68b9      	ldr	r1, [r7, #8]
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f000 f80f 	bl	80090c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090a6:	69f8      	ldr	r0, [r7, #28]
 80090a8:	f000 f8a2 	bl	80091f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80090ac:	2301      	movs	r3, #1
 80090ae:	61bb      	str	r3, [r7, #24]
 80090b0:	e002      	b.n	80090b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80090b2:	f04f 33ff 	mov.w	r3, #4294967295
 80090b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80090b8:	69bb      	ldr	r3, [r7, #24]
	}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3720      	adds	r7, #32
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b088      	sub	sp, #32
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
 80090d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80090d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80090dc:	3b01      	subs	r3, #1
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	f023 0307 	bic.w	r3, r3, #7
 80090ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	f003 0307 	and.w	r3, r3, #7
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00a      	beq.n	800910c <prvInitialiseNewTask+0x48>
	__asm volatile
 80090f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	617b      	str	r3, [r7, #20]
}
 8009108:	bf00      	nop
 800910a:	e7fe      	b.n	800910a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800910c:	2300      	movs	r3, #0
 800910e:	61fb      	str	r3, [r7, #28]
 8009110:	e012      	b.n	8009138 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	4413      	add	r3, r2
 8009118:	7819      	ldrb	r1, [r3, #0]
 800911a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	4413      	add	r3, r2
 8009120:	3334      	adds	r3, #52	; 0x34
 8009122:	460a      	mov	r2, r1
 8009124:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	4413      	add	r3, r2
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d006      	beq.n	8009140 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	3301      	adds	r3, #1
 8009136:	61fb      	str	r3, [r7, #28]
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	2b0f      	cmp	r3, #15
 800913c:	d9e9      	bls.n	8009112 <prvInitialiseNewTask+0x4e>
 800913e:	e000      	b.n	8009142 <prvInitialiseNewTask+0x7e>
		{
			break;
 8009140:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	2b06      	cmp	r3, #6
 800914e:	d901      	bls.n	8009154 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009150:	2306      	movs	r3, #6
 8009152:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009158:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800915e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009162:	2200      	movs	r2, #0
 8009164:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009168:	3304      	adds	r3, #4
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff f935 	bl	80083da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009172:	3318      	adds	r3, #24
 8009174:	4618      	mov	r0, r3
 8009176:	f7ff f930 	bl	80083da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800917e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009182:	f1c3 0207 	rsb	r2, r3, #7
 8009186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009188:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800918e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009192:	2200      	movs	r2, #0
 8009194:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919a:	2200      	movs	r2, #0
 800919c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80091a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a2:	334c      	adds	r3, #76	; 0x4c
 80091a4:	2260      	movs	r2, #96	; 0x60
 80091a6:	2100      	movs	r1, #0
 80091a8:	4618      	mov	r0, r3
 80091aa:	f001 fd25 	bl	800abf8 <memset>
 80091ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b0:	4a0c      	ldr	r2, [pc, #48]	; (80091e4 <prvInitialiseNewTask+0x120>)
 80091b2:	651a      	str	r2, [r3, #80]	; 0x50
 80091b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b6:	4a0c      	ldr	r2, [pc, #48]	; (80091e8 <prvInitialiseNewTask+0x124>)
 80091b8:	655a      	str	r2, [r3, #84]	; 0x54
 80091ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091bc:	4a0b      	ldr	r2, [pc, #44]	; (80091ec <prvInitialiseNewTask+0x128>)
 80091be:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091c0:	683a      	ldr	r2, [r7, #0]
 80091c2:	68f9      	ldr	r1, [r7, #12]
 80091c4:	69b8      	ldr	r0, [r7, #24]
 80091c6:	f000 fdd7 	bl	8009d78 <pxPortInitialiseStack>
 80091ca:	4602      	mov	r2, r0
 80091cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ce:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80091d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d002      	beq.n	80091dc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091dc:	bf00      	nop
 80091de:	3720      	adds	r7, #32
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	0800aff0 	.word	0x0800aff0
 80091e8:	0800b010 	.word	0x0800b010
 80091ec:	0800afd0 	.word	0x0800afd0

080091f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091f8:	f000 feb0 	bl	8009f5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091fc:	4b2a      	ldr	r3, [pc, #168]	; (80092a8 <prvAddNewTaskToReadyList+0xb8>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3301      	adds	r3, #1
 8009202:	4a29      	ldr	r2, [pc, #164]	; (80092a8 <prvAddNewTaskToReadyList+0xb8>)
 8009204:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009206:	4b29      	ldr	r3, [pc, #164]	; (80092ac <prvAddNewTaskToReadyList+0xbc>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d109      	bne.n	8009222 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800920e:	4a27      	ldr	r2, [pc, #156]	; (80092ac <prvAddNewTaskToReadyList+0xbc>)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009214:	4b24      	ldr	r3, [pc, #144]	; (80092a8 <prvAddNewTaskToReadyList+0xb8>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d110      	bne.n	800923e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800921c:	f000 fbdc 	bl	80099d8 <prvInitialiseTaskLists>
 8009220:	e00d      	b.n	800923e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009222:	4b23      	ldr	r3, [pc, #140]	; (80092b0 <prvAddNewTaskToReadyList+0xc0>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d109      	bne.n	800923e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800922a:	4b20      	ldr	r3, [pc, #128]	; (80092ac <prvAddNewTaskToReadyList+0xbc>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009234:	429a      	cmp	r2, r3
 8009236:	d802      	bhi.n	800923e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009238:	4a1c      	ldr	r2, [pc, #112]	; (80092ac <prvAddNewTaskToReadyList+0xbc>)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800923e:	4b1d      	ldr	r3, [pc, #116]	; (80092b4 <prvAddNewTaskToReadyList+0xc4>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3301      	adds	r3, #1
 8009244:	4a1b      	ldr	r2, [pc, #108]	; (80092b4 <prvAddNewTaskToReadyList+0xc4>)
 8009246:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924c:	2201      	movs	r2, #1
 800924e:	409a      	lsls	r2, r3
 8009250:	4b19      	ldr	r3, [pc, #100]	; (80092b8 <prvAddNewTaskToReadyList+0xc8>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4313      	orrs	r3, r2
 8009256:	4a18      	ldr	r2, [pc, #96]	; (80092b8 <prvAddNewTaskToReadyList+0xc8>)
 8009258:	6013      	str	r3, [r2, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925e:	4613      	mov	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4a15      	ldr	r2, [pc, #84]	; (80092bc <prvAddNewTaskToReadyList+0xcc>)
 8009268:	441a      	add	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	3304      	adds	r3, #4
 800926e:	4619      	mov	r1, r3
 8009270:	4610      	mov	r0, r2
 8009272:	f7ff f8be 	bl	80083f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009276:	f000 fea1 	bl	8009fbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800927a:	4b0d      	ldr	r3, [pc, #52]	; (80092b0 <prvAddNewTaskToReadyList+0xc0>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00e      	beq.n	80092a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009282:	4b0a      	ldr	r3, [pc, #40]	; (80092ac <prvAddNewTaskToReadyList+0xbc>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928c:	429a      	cmp	r2, r3
 800928e:	d207      	bcs.n	80092a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009290:	4b0b      	ldr	r3, [pc, #44]	; (80092c0 <prvAddNewTaskToReadyList+0xd0>)
 8009292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009296:	601a      	str	r2, [r3, #0]
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	200005b0 	.word	0x200005b0
 80092ac:	200004b0 	.word	0x200004b0
 80092b0:	200005bc 	.word	0x200005bc
 80092b4:	200005cc 	.word	0x200005cc
 80092b8:	200005b8 	.word	0x200005b8
 80092bc:	200004b4 	.word	0x200004b4
 80092c0:	e000ed04 	.word	0xe000ed04

080092c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80092cc:	2300      	movs	r3, #0
 80092ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d017      	beq.n	8009306 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80092d6:	4b13      	ldr	r3, [pc, #76]	; (8009324 <vTaskDelay+0x60>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00a      	beq.n	80092f4 <vTaskDelay+0x30>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	60bb      	str	r3, [r7, #8]
}
 80092f0:	bf00      	nop
 80092f2:	e7fe      	b.n	80092f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80092f4:	f000 f884 	bl	8009400 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092f8:	2100      	movs	r1, #0
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fcd6 	bl	8009cac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009300:	f000 f88c 	bl	800941c <xTaskResumeAll>
 8009304:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d107      	bne.n	800931c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800930c:	4b06      	ldr	r3, [pc, #24]	; (8009328 <vTaskDelay+0x64>)
 800930e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800931c:	bf00      	nop
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	200005d8 	.word	0x200005d8
 8009328:	e000ed04 	.word	0xe000ed04

0800932c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b08a      	sub	sp, #40	; 0x28
 8009330:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009332:	2300      	movs	r3, #0
 8009334:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009336:	2300      	movs	r3, #0
 8009338:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800933a:	463a      	mov	r2, r7
 800933c:	1d39      	adds	r1, r7, #4
 800933e:	f107 0308 	add.w	r3, r7, #8
 8009342:	4618      	mov	r0, r3
 8009344:	f7f7 f8f8 	bl	8000538 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	9202      	str	r2, [sp, #8]
 8009350:	9301      	str	r3, [sp, #4]
 8009352:	2300      	movs	r3, #0
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	2300      	movs	r3, #0
 8009358:	460a      	mov	r2, r1
 800935a:	4921      	ldr	r1, [pc, #132]	; (80093e0 <vTaskStartScheduler+0xb4>)
 800935c:	4821      	ldr	r0, [pc, #132]	; (80093e4 <vTaskStartScheduler+0xb8>)
 800935e:	f7ff fe0f 	bl	8008f80 <xTaskCreateStatic>
 8009362:	4603      	mov	r3, r0
 8009364:	4a20      	ldr	r2, [pc, #128]	; (80093e8 <vTaskStartScheduler+0xbc>)
 8009366:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009368:	4b1f      	ldr	r3, [pc, #124]	; (80093e8 <vTaskStartScheduler+0xbc>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009370:	2301      	movs	r3, #1
 8009372:	617b      	str	r3, [r7, #20]
 8009374:	e001      	b.n	800937a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009376:	2300      	movs	r3, #0
 8009378:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d11b      	bne.n	80093b8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	613b      	str	r3, [r7, #16]
}
 8009392:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009394:	4b15      	ldr	r3, [pc, #84]	; (80093ec <vTaskStartScheduler+0xc0>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	334c      	adds	r3, #76	; 0x4c
 800939a:	4a15      	ldr	r2, [pc, #84]	; (80093f0 <vTaskStartScheduler+0xc4>)
 800939c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800939e:	4b15      	ldr	r3, [pc, #84]	; (80093f4 <vTaskStartScheduler+0xc8>)
 80093a0:	f04f 32ff 	mov.w	r2, #4294967295
 80093a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80093a6:	4b14      	ldr	r3, [pc, #80]	; (80093f8 <vTaskStartScheduler+0xcc>)
 80093a8:	2201      	movs	r2, #1
 80093aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80093ac:	4b13      	ldr	r3, [pc, #76]	; (80093fc <vTaskStartScheduler+0xd0>)
 80093ae:	2200      	movs	r2, #0
 80093b0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80093b2:	f000 fd61 	bl	8009e78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80093b6:	e00e      	b.n	80093d6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093be:	d10a      	bne.n	80093d6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	60fb      	str	r3, [r7, #12]
}
 80093d2:	bf00      	nop
 80093d4:	e7fe      	b.n	80093d4 <vTaskStartScheduler+0xa8>
}
 80093d6:	bf00      	nop
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	0800afb0 	.word	0x0800afb0
 80093e4:	080099a9 	.word	0x080099a9
 80093e8:	200005d4 	.word	0x200005d4
 80093ec:	200004b0 	.word	0x200004b0
 80093f0:	20000038 	.word	0x20000038
 80093f4:	200005d0 	.word	0x200005d0
 80093f8:	200005bc 	.word	0x200005bc
 80093fc:	200005b4 	.word	0x200005b4

08009400 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009400:	b480      	push	{r7}
 8009402:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009404:	4b04      	ldr	r3, [pc, #16]	; (8009418 <vTaskSuspendAll+0x18>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	3301      	adds	r3, #1
 800940a:	4a03      	ldr	r2, [pc, #12]	; (8009418 <vTaskSuspendAll+0x18>)
 800940c:	6013      	str	r3, [r2, #0]
}
 800940e:	bf00      	nop
 8009410:	46bd      	mov	sp, r7
 8009412:	bc80      	pop	{r7}
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	200005d8 	.word	0x200005d8

0800941c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009422:	2300      	movs	r3, #0
 8009424:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009426:	2300      	movs	r3, #0
 8009428:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800942a:	4b41      	ldr	r3, [pc, #260]	; (8009530 <xTaskResumeAll+0x114>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10a      	bne.n	8009448 <xTaskResumeAll+0x2c>
	__asm volatile
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	603b      	str	r3, [r7, #0]
}
 8009444:	bf00      	nop
 8009446:	e7fe      	b.n	8009446 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009448:	f000 fd88 	bl	8009f5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800944c:	4b38      	ldr	r3, [pc, #224]	; (8009530 <xTaskResumeAll+0x114>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3b01      	subs	r3, #1
 8009452:	4a37      	ldr	r2, [pc, #220]	; (8009530 <xTaskResumeAll+0x114>)
 8009454:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009456:	4b36      	ldr	r3, [pc, #216]	; (8009530 <xTaskResumeAll+0x114>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d161      	bne.n	8009522 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800945e:	4b35      	ldr	r3, [pc, #212]	; (8009534 <xTaskResumeAll+0x118>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d05d      	beq.n	8009522 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009466:	e02e      	b.n	80094c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009468:	4b33      	ldr	r3, [pc, #204]	; (8009538 <xTaskResumeAll+0x11c>)
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3318      	adds	r3, #24
 8009474:	4618      	mov	r0, r3
 8009476:	f7ff f817 	bl	80084a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	3304      	adds	r3, #4
 800947e:	4618      	mov	r0, r3
 8009480:	f7ff f812 	bl	80084a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009488:	2201      	movs	r2, #1
 800948a:	409a      	lsls	r2, r3
 800948c:	4b2b      	ldr	r3, [pc, #172]	; (800953c <xTaskResumeAll+0x120>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4313      	orrs	r3, r2
 8009492:	4a2a      	ldr	r2, [pc, #168]	; (800953c <xTaskResumeAll+0x120>)
 8009494:	6013      	str	r3, [r2, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800949a:	4613      	mov	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4413      	add	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4a27      	ldr	r2, [pc, #156]	; (8009540 <xTaskResumeAll+0x124>)
 80094a4:	441a      	add	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	3304      	adds	r3, #4
 80094aa:	4619      	mov	r1, r3
 80094ac:	4610      	mov	r0, r2
 80094ae:	f7fe ffa0 	bl	80083f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b6:	4b23      	ldr	r3, [pc, #140]	; (8009544 <xTaskResumeAll+0x128>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094bc:	429a      	cmp	r2, r3
 80094be:	d302      	bcc.n	80094c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80094c0:	4b21      	ldr	r3, [pc, #132]	; (8009548 <xTaskResumeAll+0x12c>)
 80094c2:	2201      	movs	r2, #1
 80094c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094c6:	4b1c      	ldr	r3, [pc, #112]	; (8009538 <xTaskResumeAll+0x11c>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1cc      	bne.n	8009468 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d001      	beq.n	80094d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80094d4:	f000 fb22 	bl	8009b1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80094d8:	4b1c      	ldr	r3, [pc, #112]	; (800954c <xTaskResumeAll+0x130>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d010      	beq.n	8009506 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094e4:	f000 f836 	bl	8009554 <xTaskIncrementTick>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80094ee:	4b16      	ldr	r3, [pc, #88]	; (8009548 <xTaskResumeAll+0x12c>)
 80094f0:	2201      	movs	r2, #1
 80094f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	3b01      	subs	r3, #1
 80094f8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1f1      	bne.n	80094e4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009500:	4b12      	ldr	r3, [pc, #72]	; (800954c <xTaskResumeAll+0x130>)
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009506:	4b10      	ldr	r3, [pc, #64]	; (8009548 <xTaskResumeAll+0x12c>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d009      	beq.n	8009522 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800950e:	2301      	movs	r3, #1
 8009510:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009512:	4b0f      	ldr	r3, [pc, #60]	; (8009550 <xTaskResumeAll+0x134>)
 8009514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009522:	f000 fd4b 	bl	8009fbc <vPortExitCritical>

	return xAlreadyYielded;
 8009526:	68bb      	ldr	r3, [r7, #8]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	200005d8 	.word	0x200005d8
 8009534:	200005b0 	.word	0x200005b0
 8009538:	20000570 	.word	0x20000570
 800953c:	200005b8 	.word	0x200005b8
 8009540:	200004b4 	.word	0x200004b4
 8009544:	200004b0 	.word	0x200004b0
 8009548:	200005c4 	.word	0x200005c4
 800954c:	200005c0 	.word	0x200005c0
 8009550:	e000ed04 	.word	0xe000ed04

08009554 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800955a:	2300      	movs	r3, #0
 800955c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800955e:	4b51      	ldr	r3, [pc, #324]	; (80096a4 <xTaskIncrementTick+0x150>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	f040 808d 	bne.w	8009682 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009568:	4b4f      	ldr	r3, [pc, #316]	; (80096a8 <xTaskIncrementTick+0x154>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3301      	adds	r3, #1
 800956e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009570:	4a4d      	ldr	r2, [pc, #308]	; (80096a8 <xTaskIncrementTick+0x154>)
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d120      	bne.n	80095be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800957c:	4b4b      	ldr	r3, [pc, #300]	; (80096ac <xTaskIncrementTick+0x158>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00a      	beq.n	800959c <xTaskIncrementTick+0x48>
	__asm volatile
 8009586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	603b      	str	r3, [r7, #0]
}
 8009598:	bf00      	nop
 800959a:	e7fe      	b.n	800959a <xTaskIncrementTick+0x46>
 800959c:	4b43      	ldr	r3, [pc, #268]	; (80096ac <xTaskIncrementTick+0x158>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	60fb      	str	r3, [r7, #12]
 80095a2:	4b43      	ldr	r3, [pc, #268]	; (80096b0 <xTaskIncrementTick+0x15c>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a41      	ldr	r2, [pc, #260]	; (80096ac <xTaskIncrementTick+0x158>)
 80095a8:	6013      	str	r3, [r2, #0]
 80095aa:	4a41      	ldr	r2, [pc, #260]	; (80096b0 <xTaskIncrementTick+0x15c>)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6013      	str	r3, [r2, #0]
 80095b0:	4b40      	ldr	r3, [pc, #256]	; (80096b4 <xTaskIncrementTick+0x160>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	3301      	adds	r3, #1
 80095b6:	4a3f      	ldr	r2, [pc, #252]	; (80096b4 <xTaskIncrementTick+0x160>)
 80095b8:	6013      	str	r3, [r2, #0]
 80095ba:	f000 faaf 	bl	8009b1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80095be:	4b3e      	ldr	r3, [pc, #248]	; (80096b8 <xTaskIncrementTick+0x164>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	693a      	ldr	r2, [r7, #16]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d34d      	bcc.n	8009664 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095c8:	4b38      	ldr	r3, [pc, #224]	; (80096ac <xTaskIncrementTick+0x158>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <xTaskIncrementTick+0x82>
 80095d2:	2301      	movs	r3, #1
 80095d4:	e000      	b.n	80095d8 <xTaskIncrementTick+0x84>
 80095d6:	2300      	movs	r3, #0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d004      	beq.n	80095e6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095dc:	4b36      	ldr	r3, [pc, #216]	; (80096b8 <xTaskIncrementTick+0x164>)
 80095de:	f04f 32ff 	mov.w	r2, #4294967295
 80095e2:	601a      	str	r2, [r3, #0]
					break;
 80095e4:	e03e      	b.n	8009664 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80095e6:	4b31      	ldr	r3, [pc, #196]	; (80096ac <xTaskIncrementTick+0x158>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d203      	bcs.n	8009606 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80095fe:	4a2e      	ldr	r2, [pc, #184]	; (80096b8 <xTaskIncrementTick+0x164>)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6013      	str	r3, [r2, #0]
						break;
 8009604:	e02e      	b.n	8009664 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	3304      	adds	r3, #4
 800960a:	4618      	mov	r0, r3
 800960c:	f7fe ff4c 	bl	80084a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009614:	2b00      	cmp	r3, #0
 8009616:	d004      	beq.n	8009622 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	3318      	adds	r3, #24
 800961c:	4618      	mov	r0, r3
 800961e:	f7fe ff43 	bl	80084a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009626:	2201      	movs	r2, #1
 8009628:	409a      	lsls	r2, r3
 800962a:	4b24      	ldr	r3, [pc, #144]	; (80096bc <xTaskIncrementTick+0x168>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4313      	orrs	r3, r2
 8009630:	4a22      	ldr	r2, [pc, #136]	; (80096bc <xTaskIncrementTick+0x168>)
 8009632:	6013      	str	r3, [r2, #0]
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009638:	4613      	mov	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4a1f      	ldr	r2, [pc, #124]	; (80096c0 <xTaskIncrementTick+0x16c>)
 8009642:	441a      	add	r2, r3
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	3304      	adds	r3, #4
 8009648:	4619      	mov	r1, r3
 800964a:	4610      	mov	r0, r2
 800964c:	f7fe fed1 	bl	80083f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009654:	4b1b      	ldr	r3, [pc, #108]	; (80096c4 <xTaskIncrementTick+0x170>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965a:	429a      	cmp	r2, r3
 800965c:	d3b4      	bcc.n	80095c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800965e:	2301      	movs	r3, #1
 8009660:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009662:	e7b1      	b.n	80095c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009664:	4b17      	ldr	r3, [pc, #92]	; (80096c4 <xTaskIncrementTick+0x170>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800966a:	4915      	ldr	r1, [pc, #84]	; (80096c0 <xTaskIncrementTick+0x16c>)
 800966c:	4613      	mov	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	440b      	add	r3, r1
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d907      	bls.n	800968c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800967c:	2301      	movs	r3, #1
 800967e:	617b      	str	r3, [r7, #20]
 8009680:	e004      	b.n	800968c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009682:	4b11      	ldr	r3, [pc, #68]	; (80096c8 <xTaskIncrementTick+0x174>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3301      	adds	r3, #1
 8009688:	4a0f      	ldr	r2, [pc, #60]	; (80096c8 <xTaskIncrementTick+0x174>)
 800968a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800968c:	4b0f      	ldr	r3, [pc, #60]	; (80096cc <xTaskIncrementTick+0x178>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009694:	2301      	movs	r3, #1
 8009696:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009698:	697b      	ldr	r3, [r7, #20]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3718      	adds	r7, #24
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	200005d8 	.word	0x200005d8
 80096a8:	200005b4 	.word	0x200005b4
 80096ac:	20000568 	.word	0x20000568
 80096b0:	2000056c 	.word	0x2000056c
 80096b4:	200005c8 	.word	0x200005c8
 80096b8:	200005d0 	.word	0x200005d0
 80096bc:	200005b8 	.word	0x200005b8
 80096c0:	200004b4 	.word	0x200004b4
 80096c4:	200004b0 	.word	0x200004b0
 80096c8:	200005c0 	.word	0x200005c0
 80096cc:	200005c4 	.word	0x200005c4

080096d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096d0:	b480      	push	{r7}
 80096d2:	b087      	sub	sp, #28
 80096d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096d6:	4b29      	ldr	r3, [pc, #164]	; (800977c <vTaskSwitchContext+0xac>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d003      	beq.n	80096e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096de:	4b28      	ldr	r3, [pc, #160]	; (8009780 <vTaskSwitchContext+0xb0>)
 80096e0:	2201      	movs	r2, #1
 80096e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096e4:	e044      	b.n	8009770 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80096e6:	4b26      	ldr	r3, [pc, #152]	; (8009780 <vTaskSwitchContext+0xb0>)
 80096e8:	2200      	movs	r2, #0
 80096ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80096ec:	4b25      	ldr	r3, [pc, #148]	; (8009784 <vTaskSwitchContext+0xb4>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	fab3 f383 	clz	r3, r3
 80096f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80096fa:	7afb      	ldrb	r3, [r7, #11]
 80096fc:	f1c3 031f 	rsb	r3, r3, #31
 8009700:	617b      	str	r3, [r7, #20]
 8009702:	4921      	ldr	r1, [pc, #132]	; (8009788 <vTaskSwitchContext+0xb8>)
 8009704:	697a      	ldr	r2, [r7, #20]
 8009706:	4613      	mov	r3, r2
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	4413      	add	r3, r2
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	440b      	add	r3, r1
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10a      	bne.n	800972c <vTaskSwitchContext+0x5c>
	__asm volatile
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	607b      	str	r3, [r7, #4]
}
 8009728:	bf00      	nop
 800972a:	e7fe      	b.n	800972a <vTaskSwitchContext+0x5a>
 800972c:	697a      	ldr	r2, [r7, #20]
 800972e:	4613      	mov	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4a14      	ldr	r2, [pc, #80]	; (8009788 <vTaskSwitchContext+0xb8>)
 8009738:	4413      	add	r3, r2
 800973a:	613b      	str	r3, [r7, #16]
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	685a      	ldr	r2, [r3, #4]
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	605a      	str	r2, [r3, #4]
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	685a      	ldr	r2, [r3, #4]
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	3308      	adds	r3, #8
 800974e:	429a      	cmp	r2, r3
 8009750:	d104      	bne.n	800975c <vTaskSwitchContext+0x8c>
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	685a      	ldr	r2, [r3, #4]
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	605a      	str	r2, [r3, #4]
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	4a0a      	ldr	r2, [pc, #40]	; (800978c <vTaskSwitchContext+0xbc>)
 8009764:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009766:	4b09      	ldr	r3, [pc, #36]	; (800978c <vTaskSwitchContext+0xbc>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	334c      	adds	r3, #76	; 0x4c
 800976c:	4a08      	ldr	r2, [pc, #32]	; (8009790 <vTaskSwitchContext+0xc0>)
 800976e:	6013      	str	r3, [r2, #0]
}
 8009770:	bf00      	nop
 8009772:	371c      	adds	r7, #28
 8009774:	46bd      	mov	sp, r7
 8009776:	bc80      	pop	{r7}
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	200005d8 	.word	0x200005d8
 8009780:	200005c4 	.word	0x200005c4
 8009784:	200005b8 	.word	0x200005b8
 8009788:	200004b4 	.word	0x200004b4
 800978c:	200004b0 	.word	0x200004b0
 8009790:	20000038 	.word	0x20000038

08009794 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10a      	bne.n	80097ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80097a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a8:	f383 8811 	msr	BASEPRI, r3
 80097ac:	f3bf 8f6f 	isb	sy
 80097b0:	f3bf 8f4f 	dsb	sy
 80097b4:	60fb      	str	r3, [r7, #12]
}
 80097b6:	bf00      	nop
 80097b8:	e7fe      	b.n	80097b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097ba:	4b07      	ldr	r3, [pc, #28]	; (80097d8 <vTaskPlaceOnEventList+0x44>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	3318      	adds	r3, #24
 80097c0:	4619      	mov	r1, r3
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7fe fe38 	bl	8008438 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80097c8:	2101      	movs	r1, #1
 80097ca:	6838      	ldr	r0, [r7, #0]
 80097cc:	f000 fa6e 	bl	8009cac <prvAddCurrentTaskToDelayedList>
}
 80097d0:	bf00      	nop
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	200004b0 	.word	0x200004b0

080097dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10a      	bne.n	8009808 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	60fb      	str	r3, [r7, #12]
}
 8009804:	bf00      	nop
 8009806:	e7fe      	b.n	8009806 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	3318      	adds	r3, #24
 800980c:	4618      	mov	r0, r3
 800980e:	f7fe fe4b 	bl	80084a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009812:	4b1d      	ldr	r3, [pc, #116]	; (8009888 <xTaskRemoveFromEventList+0xac>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d11c      	bne.n	8009854 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	3304      	adds	r3, #4
 800981e:	4618      	mov	r0, r3
 8009820:	f7fe fe42 	bl	80084a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009828:	2201      	movs	r2, #1
 800982a:	409a      	lsls	r2, r3
 800982c:	4b17      	ldr	r3, [pc, #92]	; (800988c <xTaskRemoveFromEventList+0xb0>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4313      	orrs	r3, r2
 8009832:	4a16      	ldr	r2, [pc, #88]	; (800988c <xTaskRemoveFromEventList+0xb0>)
 8009834:	6013      	str	r3, [r2, #0]
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800983a:	4613      	mov	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4a13      	ldr	r2, [pc, #76]	; (8009890 <xTaskRemoveFromEventList+0xb4>)
 8009844:	441a      	add	r2, r3
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	3304      	adds	r3, #4
 800984a:	4619      	mov	r1, r3
 800984c:	4610      	mov	r0, r2
 800984e:	f7fe fdd0 	bl	80083f2 <vListInsertEnd>
 8009852:	e005      	b.n	8009860 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	3318      	adds	r3, #24
 8009858:	4619      	mov	r1, r3
 800985a:	480e      	ldr	r0, [pc, #56]	; (8009894 <xTaskRemoveFromEventList+0xb8>)
 800985c:	f7fe fdc9 	bl	80083f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009864:	4b0c      	ldr	r3, [pc, #48]	; (8009898 <xTaskRemoveFromEventList+0xbc>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986a:	429a      	cmp	r2, r3
 800986c:	d905      	bls.n	800987a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800986e:	2301      	movs	r3, #1
 8009870:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009872:	4b0a      	ldr	r3, [pc, #40]	; (800989c <xTaskRemoveFromEventList+0xc0>)
 8009874:	2201      	movs	r2, #1
 8009876:	601a      	str	r2, [r3, #0]
 8009878:	e001      	b.n	800987e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800987a:	2300      	movs	r3, #0
 800987c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800987e:	697b      	ldr	r3, [r7, #20]
}
 8009880:	4618      	mov	r0, r3
 8009882:	3718      	adds	r7, #24
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	200005d8 	.word	0x200005d8
 800988c:	200005b8 	.word	0x200005b8
 8009890:	200004b4 	.word	0x200004b4
 8009894:	20000570 	.word	0x20000570
 8009898:	200004b0 	.word	0x200004b0
 800989c:	200005c4 	.word	0x200005c4

080098a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098a8:	4b06      	ldr	r3, [pc, #24]	; (80098c4 <vTaskInternalSetTimeOutState+0x24>)
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80098b0:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <vTaskInternalSetTimeOutState+0x28>)
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	605a      	str	r2, [r3, #4]
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	bc80      	pop	{r7}
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	200005c8 	.word	0x200005c8
 80098c8:	200005b4 	.word	0x200005b4

080098cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b088      	sub	sp, #32
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d10a      	bne.n	80098f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80098dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e0:	f383 8811 	msr	BASEPRI, r3
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	613b      	str	r3, [r7, #16]
}
 80098ee:	bf00      	nop
 80098f0:	e7fe      	b.n	80098f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10a      	bne.n	800990e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80098f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fc:	f383 8811 	msr	BASEPRI, r3
 8009900:	f3bf 8f6f 	isb	sy
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	60fb      	str	r3, [r7, #12]
}
 800990a:	bf00      	nop
 800990c:	e7fe      	b.n	800990c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800990e:	f000 fb25 	bl	8009f5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009912:	4b1d      	ldr	r3, [pc, #116]	; (8009988 <xTaskCheckForTimeOut+0xbc>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	69ba      	ldr	r2, [r7, #24]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992a:	d102      	bne.n	8009932 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800992c:	2300      	movs	r3, #0
 800992e:	61fb      	str	r3, [r7, #28]
 8009930:	e023      	b.n	800997a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	4b15      	ldr	r3, [pc, #84]	; (800998c <xTaskCheckForTimeOut+0xc0>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	429a      	cmp	r2, r3
 800993c:	d007      	beq.n	800994e <xTaskCheckForTimeOut+0x82>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	69ba      	ldr	r2, [r7, #24]
 8009944:	429a      	cmp	r2, r3
 8009946:	d302      	bcc.n	800994e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009948:	2301      	movs	r3, #1
 800994a:	61fb      	str	r3, [r7, #28]
 800994c:	e015      	b.n	800997a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	429a      	cmp	r2, r3
 8009956:	d20b      	bcs.n	8009970 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	1ad2      	subs	r2, r2, r3
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f7ff ff9b 	bl	80098a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800996a:	2300      	movs	r3, #0
 800996c:	61fb      	str	r3, [r7, #28]
 800996e:	e004      	b.n	800997a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	2200      	movs	r2, #0
 8009974:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009976:	2301      	movs	r3, #1
 8009978:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800997a:	f000 fb1f 	bl	8009fbc <vPortExitCritical>

	return xReturn;
 800997e:	69fb      	ldr	r3, [r7, #28]
}
 8009980:	4618      	mov	r0, r3
 8009982:	3720      	adds	r7, #32
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	200005b4 	.word	0x200005b4
 800998c:	200005c8 	.word	0x200005c8

08009990 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009990:	b480      	push	{r7}
 8009992:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009994:	4b03      	ldr	r3, [pc, #12]	; (80099a4 <vTaskMissedYield+0x14>)
 8009996:	2201      	movs	r2, #1
 8009998:	601a      	str	r2, [r3, #0]
}
 800999a:	bf00      	nop
 800999c:	46bd      	mov	sp, r7
 800999e:	bc80      	pop	{r7}
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	200005c4 	.word	0x200005c4

080099a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80099b0:	f000 f852 	bl	8009a58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099b4:	4b06      	ldr	r3, [pc, #24]	; (80099d0 <prvIdleTask+0x28>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d9f9      	bls.n	80099b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80099bc:	4b05      	ldr	r3, [pc, #20]	; (80099d4 <prvIdleTask+0x2c>)
 80099be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099c2:	601a      	str	r2, [r3, #0]
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099cc:	e7f0      	b.n	80099b0 <prvIdleTask+0x8>
 80099ce:	bf00      	nop
 80099d0:	200004b4 	.word	0x200004b4
 80099d4:	e000ed04 	.word	0xe000ed04

080099d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099de:	2300      	movs	r3, #0
 80099e0:	607b      	str	r3, [r7, #4]
 80099e2:	e00c      	b.n	80099fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	4613      	mov	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4413      	add	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4a12      	ldr	r2, [pc, #72]	; (8009a38 <prvInitialiseTaskLists+0x60>)
 80099f0:	4413      	add	r3, r2
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fe fcd2 	bl	800839c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3301      	adds	r3, #1
 80099fc:	607b      	str	r3, [r7, #4]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2b06      	cmp	r3, #6
 8009a02:	d9ef      	bls.n	80099e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a04:	480d      	ldr	r0, [pc, #52]	; (8009a3c <prvInitialiseTaskLists+0x64>)
 8009a06:	f7fe fcc9 	bl	800839c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a0a:	480d      	ldr	r0, [pc, #52]	; (8009a40 <prvInitialiseTaskLists+0x68>)
 8009a0c:	f7fe fcc6 	bl	800839c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a10:	480c      	ldr	r0, [pc, #48]	; (8009a44 <prvInitialiseTaskLists+0x6c>)
 8009a12:	f7fe fcc3 	bl	800839c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a16:	480c      	ldr	r0, [pc, #48]	; (8009a48 <prvInitialiseTaskLists+0x70>)
 8009a18:	f7fe fcc0 	bl	800839c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a1c:	480b      	ldr	r0, [pc, #44]	; (8009a4c <prvInitialiseTaskLists+0x74>)
 8009a1e:	f7fe fcbd 	bl	800839c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a22:	4b0b      	ldr	r3, [pc, #44]	; (8009a50 <prvInitialiseTaskLists+0x78>)
 8009a24:	4a05      	ldr	r2, [pc, #20]	; (8009a3c <prvInitialiseTaskLists+0x64>)
 8009a26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a28:	4b0a      	ldr	r3, [pc, #40]	; (8009a54 <prvInitialiseTaskLists+0x7c>)
 8009a2a:	4a05      	ldr	r2, [pc, #20]	; (8009a40 <prvInitialiseTaskLists+0x68>)
 8009a2c:	601a      	str	r2, [r3, #0]
}
 8009a2e:	bf00      	nop
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	200004b4 	.word	0x200004b4
 8009a3c:	20000540 	.word	0x20000540
 8009a40:	20000554 	.word	0x20000554
 8009a44:	20000570 	.word	0x20000570
 8009a48:	20000584 	.word	0x20000584
 8009a4c:	2000059c 	.word	0x2000059c
 8009a50:	20000568 	.word	0x20000568
 8009a54:	2000056c 	.word	0x2000056c

08009a58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a5e:	e019      	b.n	8009a94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a60:	f000 fa7c 	bl	8009f5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009a64:	4b10      	ldr	r3, [pc, #64]	; (8009aa8 <prvCheckTasksWaitingTermination+0x50>)
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3304      	adds	r3, #4
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7fe fd19 	bl	80084a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a76:	4b0d      	ldr	r3, [pc, #52]	; (8009aac <prvCheckTasksWaitingTermination+0x54>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	4a0b      	ldr	r2, [pc, #44]	; (8009aac <prvCheckTasksWaitingTermination+0x54>)
 8009a7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a80:	4b0b      	ldr	r3, [pc, #44]	; (8009ab0 <prvCheckTasksWaitingTermination+0x58>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	3b01      	subs	r3, #1
 8009a86:	4a0a      	ldr	r2, [pc, #40]	; (8009ab0 <prvCheckTasksWaitingTermination+0x58>)
 8009a88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a8a:	f000 fa97 	bl	8009fbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f810 	bl	8009ab4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a94:	4b06      	ldr	r3, [pc, #24]	; (8009ab0 <prvCheckTasksWaitingTermination+0x58>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1e1      	bne.n	8009a60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a9c:	bf00      	nop
 8009a9e:	bf00      	nop
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	20000584 	.word	0x20000584
 8009aac:	200005b0 	.word	0x200005b0
 8009ab0:	20000598 	.word	0x20000598

08009ab4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	334c      	adds	r3, #76	; 0x4c
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f001 f98b 	bl	800addc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d108      	bne.n	8009ae2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 fc05 	bl	800a2e4 <vPortFree>
				vPortFree( pxTCB );
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fc02 	bl	800a2e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ae0:	e018      	b.n	8009b14 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d103      	bne.n	8009af4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fbf9 	bl	800a2e4 <vPortFree>
	}
 8009af2:	e00f      	b.n	8009b14 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	d00a      	beq.n	8009b14 <prvDeleteTCB+0x60>
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	60fb      	str	r3, [r7, #12]
}
 8009b10:	bf00      	nop
 8009b12:	e7fe      	b.n	8009b12 <prvDeleteTCB+0x5e>
	}
 8009b14:	bf00      	nop
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b22:	4b0e      	ldr	r3, [pc, #56]	; (8009b5c <prvResetNextTaskUnblockTime+0x40>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d101      	bne.n	8009b30 <prvResetNextTaskUnblockTime+0x14>
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e000      	b.n	8009b32 <prvResetNextTaskUnblockTime+0x16>
 8009b30:	2300      	movs	r3, #0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d004      	beq.n	8009b40 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b36:	4b0a      	ldr	r3, [pc, #40]	; (8009b60 <prvResetNextTaskUnblockTime+0x44>)
 8009b38:	f04f 32ff 	mov.w	r2, #4294967295
 8009b3c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b3e:	e008      	b.n	8009b52 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009b40:	4b06      	ldr	r3, [pc, #24]	; (8009b5c <prvResetNextTaskUnblockTime+0x40>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	4a04      	ldr	r2, [pc, #16]	; (8009b60 <prvResetNextTaskUnblockTime+0x44>)
 8009b50:	6013      	str	r3, [r2, #0]
}
 8009b52:	bf00      	nop
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bc80      	pop	{r7}
 8009b5a:	4770      	bx	lr
 8009b5c:	20000568 	.word	0x20000568
 8009b60:	200005d0 	.word	0x200005d0

08009b64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b6a:	4b0b      	ldr	r3, [pc, #44]	; (8009b98 <xTaskGetSchedulerState+0x34>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d102      	bne.n	8009b78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b72:	2301      	movs	r3, #1
 8009b74:	607b      	str	r3, [r7, #4]
 8009b76:	e008      	b.n	8009b8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b78:	4b08      	ldr	r3, [pc, #32]	; (8009b9c <xTaskGetSchedulerState+0x38>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d102      	bne.n	8009b86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b80:	2302      	movs	r3, #2
 8009b82:	607b      	str	r3, [r7, #4]
 8009b84:	e001      	b.n	8009b8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b86:	2300      	movs	r3, #0
 8009b88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b8a:	687b      	ldr	r3, [r7, #4]
	}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bc80      	pop	{r7}
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	200005bc 	.word	0x200005bc
 8009b9c:	200005d8 	.word	0x200005d8

08009ba0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009bac:	2300      	movs	r3, #0
 8009bae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d06e      	beq.n	8009c94 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009bb6:	4b3a      	ldr	r3, [pc, #232]	; (8009ca0 <xTaskPriorityDisinherit+0x100>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	693a      	ldr	r2, [r7, #16]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d00a      	beq.n	8009bd6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	60fb      	str	r3, [r7, #12]
}
 8009bd2:	bf00      	nop
 8009bd4:	e7fe      	b.n	8009bd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10a      	bne.n	8009bf4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	60bb      	str	r3, [r7, #8]
}
 8009bf0:	bf00      	nop
 8009bf2:	e7fe      	b.n	8009bf2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bf8:	1e5a      	subs	r2, r3, #1
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d044      	beq.n	8009c94 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d140      	bne.n	8009c94 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	3304      	adds	r3, #4
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7fe fc46 	bl	80084a8 <uxListRemove>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d115      	bne.n	8009c4e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c26:	491f      	ldr	r1, [pc, #124]	; (8009ca4 <xTaskPriorityDisinherit+0x104>)
 8009c28:	4613      	mov	r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4413      	add	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	440b      	add	r3, r1
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d10a      	bne.n	8009c4e <xTaskPriorityDisinherit+0xae>
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c42:	43da      	mvns	r2, r3
 8009c44:	4b18      	ldr	r3, [pc, #96]	; (8009ca8 <xTaskPriorityDisinherit+0x108>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4013      	ands	r3, r2
 8009c4a:	4a17      	ldr	r2, [pc, #92]	; (8009ca8 <xTaskPriorityDisinherit+0x108>)
 8009c4c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5a:	f1c3 0207 	rsb	r2, r3, #7
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c66:	2201      	movs	r2, #1
 8009c68:	409a      	lsls	r2, r3
 8009c6a:	4b0f      	ldr	r3, [pc, #60]	; (8009ca8 <xTaskPriorityDisinherit+0x108>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	4a0d      	ldr	r2, [pc, #52]	; (8009ca8 <xTaskPriorityDisinherit+0x108>)
 8009c72:	6013      	str	r3, [r2, #0]
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c78:	4613      	mov	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4413      	add	r3, r2
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4a08      	ldr	r2, [pc, #32]	; (8009ca4 <xTaskPriorityDisinherit+0x104>)
 8009c82:	441a      	add	r2, r3
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	3304      	adds	r3, #4
 8009c88:	4619      	mov	r1, r3
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	f7fe fbb1 	bl	80083f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c90:	2301      	movs	r3, #1
 8009c92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c94:	697b      	ldr	r3, [r7, #20]
	}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3718      	adds	r7, #24
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	200004b0 	.word	0x200004b0
 8009ca4:	200004b4 	.word	0x200004b4
 8009ca8:	200005b8 	.word	0x200005b8

08009cac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009cb6:	4b29      	ldr	r3, [pc, #164]	; (8009d5c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cbc:	4b28      	ldr	r3, [pc, #160]	; (8009d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	3304      	adds	r3, #4
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fe fbf0 	bl	80084a8 <uxListRemove>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10b      	bne.n	8009ce6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009cce:	4b24      	ldr	r3, [pc, #144]	; (8009d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cda:	43da      	mvns	r2, r3
 8009cdc:	4b21      	ldr	r3, [pc, #132]	; (8009d64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	4a20      	ldr	r2, [pc, #128]	; (8009d64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ce4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cec:	d10a      	bne.n	8009d04 <prvAddCurrentTaskToDelayedList+0x58>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d007      	beq.n	8009d04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cf4:	4b1a      	ldr	r3, [pc, #104]	; (8009d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	3304      	adds	r3, #4
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	481a      	ldr	r0, [pc, #104]	; (8009d68 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009cfe:	f7fe fb78 	bl	80083f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d02:	e026      	b.n	8009d52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4413      	add	r3, r2
 8009d0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d0c:	4b14      	ldr	r3, [pc, #80]	; (8009d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68ba      	ldr	r2, [r7, #8]
 8009d12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d209      	bcs.n	8009d30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d1c:	4b13      	ldr	r3, [pc, #76]	; (8009d6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	4b0f      	ldr	r3, [pc, #60]	; (8009d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	3304      	adds	r3, #4
 8009d26:	4619      	mov	r1, r3
 8009d28:	4610      	mov	r0, r2
 8009d2a:	f7fe fb85 	bl	8008438 <vListInsert>
}
 8009d2e:	e010      	b.n	8009d52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d30:	4b0f      	ldr	r3, [pc, #60]	; (8009d70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	4b0a      	ldr	r3, [pc, #40]	; (8009d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	3304      	adds	r3, #4
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	f7fe fb7b 	bl	8008438 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d42:	4b0c      	ldr	r3, [pc, #48]	; (8009d74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d202      	bcs.n	8009d52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009d4c:	4a09      	ldr	r2, [pc, #36]	; (8009d74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	6013      	str	r3, [r2, #0]
}
 8009d52:	bf00      	nop
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	200005b4 	.word	0x200005b4
 8009d60:	200004b0 	.word	0x200004b0
 8009d64:	200005b8 	.word	0x200005b8
 8009d68:	2000059c 	.word	0x2000059c
 8009d6c:	2000056c 	.word	0x2000056c
 8009d70:	20000568 	.word	0x20000568
 8009d74:	200005d0 	.word	0x200005d0

08009d78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	3b04      	subs	r3, #4
 8009d88:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	3b04      	subs	r3, #4
 8009d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	f023 0201 	bic.w	r2, r3, #1
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	3b04      	subs	r3, #4
 8009da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009da8:	4a08      	ldr	r2, [pc, #32]	; (8009dcc <pxPortInitialiseStack+0x54>)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3b14      	subs	r3, #20
 8009db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	3b20      	subs	r3, #32
 8009dbe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3714      	adds	r7, #20
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bc80      	pop	{r7}
 8009dca:	4770      	bx	lr
 8009dcc:	08009dd1 	.word	0x08009dd1

08009dd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009dda:	4b12      	ldr	r3, [pc, #72]	; (8009e24 <prvTaskExitError+0x54>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de2:	d00a      	beq.n	8009dfa <prvTaskExitError+0x2a>
	__asm volatile
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	60fb      	str	r3, [r7, #12]
}
 8009df6:	bf00      	nop
 8009df8:	e7fe      	b.n	8009df8 <prvTaskExitError+0x28>
	__asm volatile
 8009dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	60bb      	str	r3, [r7, #8]
}
 8009e0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e0e:	bf00      	nop
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d0fc      	beq.n	8009e10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e16:	bf00      	nop
 8009e18:	bf00      	nop
 8009e1a:	3714      	adds	r7, #20
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bc80      	pop	{r7}
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	2000002c 	.word	0x2000002c
	...

08009e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e30:	4b07      	ldr	r3, [pc, #28]	; (8009e50 <pxCurrentTCBConst2>)
 8009e32:	6819      	ldr	r1, [r3, #0]
 8009e34:	6808      	ldr	r0, [r1, #0]
 8009e36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009e3a:	f380 8809 	msr	PSP, r0
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f04f 0000 	mov.w	r0, #0
 8009e46:	f380 8811 	msr	BASEPRI, r0
 8009e4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009e4e:	4770      	bx	lr

08009e50 <pxCurrentTCBConst2>:
 8009e50:	200004b0 	.word	0x200004b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop

08009e58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009e58:	4806      	ldr	r0, [pc, #24]	; (8009e74 <prvPortStartFirstTask+0x1c>)
 8009e5a:	6800      	ldr	r0, [r0, #0]
 8009e5c:	6800      	ldr	r0, [r0, #0]
 8009e5e:	f380 8808 	msr	MSP, r0
 8009e62:	b662      	cpsie	i
 8009e64:	b661      	cpsie	f
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	df00      	svc	0
 8009e70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e72:	bf00      	nop
 8009e74:	e000ed08 	.word	0xe000ed08

08009e78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e7e:	4b32      	ldr	r3, [pc, #200]	; (8009f48 <xPortStartScheduler+0xd0>)
 8009e80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	22ff      	movs	r2, #255	; 0xff
 8009e8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e98:	78fb      	ldrb	r3, [r7, #3]
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ea0:	b2da      	uxtb	r2, r3
 8009ea2:	4b2a      	ldr	r3, [pc, #168]	; (8009f4c <xPortStartScheduler+0xd4>)
 8009ea4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ea6:	4b2a      	ldr	r3, [pc, #168]	; (8009f50 <xPortStartScheduler+0xd8>)
 8009ea8:	2207      	movs	r2, #7
 8009eaa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009eac:	e009      	b.n	8009ec2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009eae:	4b28      	ldr	r3, [pc, #160]	; (8009f50 <xPortStartScheduler+0xd8>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	4a26      	ldr	r2, [pc, #152]	; (8009f50 <xPortStartScheduler+0xd8>)
 8009eb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009eb8:	78fb      	ldrb	r3, [r7, #3]
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	005b      	lsls	r3, r3, #1
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ec2:	78fb      	ldrb	r3, [r7, #3]
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eca:	2b80      	cmp	r3, #128	; 0x80
 8009ecc:	d0ef      	beq.n	8009eae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ece:	4b20      	ldr	r3, [pc, #128]	; (8009f50 <xPortStartScheduler+0xd8>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f1c3 0307 	rsb	r3, r3, #7
 8009ed6:	2b04      	cmp	r3, #4
 8009ed8:	d00a      	beq.n	8009ef0 <xPortStartScheduler+0x78>
	__asm volatile
 8009eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	60bb      	str	r3, [r7, #8]
}
 8009eec:	bf00      	nop
 8009eee:	e7fe      	b.n	8009eee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ef0:	4b17      	ldr	r3, [pc, #92]	; (8009f50 <xPortStartScheduler+0xd8>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	021b      	lsls	r3, r3, #8
 8009ef6:	4a16      	ldr	r2, [pc, #88]	; (8009f50 <xPortStartScheduler+0xd8>)
 8009ef8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009efa:	4b15      	ldr	r3, [pc, #84]	; (8009f50 <xPortStartScheduler+0xd8>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f02:	4a13      	ldr	r2, [pc, #76]	; (8009f50 <xPortStartScheduler+0xd8>)
 8009f04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f0e:	4b11      	ldr	r3, [pc, #68]	; (8009f54 <xPortStartScheduler+0xdc>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a10      	ldr	r2, [pc, #64]	; (8009f54 <xPortStartScheduler+0xdc>)
 8009f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009f18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f1a:	4b0e      	ldr	r3, [pc, #56]	; (8009f54 <xPortStartScheduler+0xdc>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a0d      	ldr	r2, [pc, #52]	; (8009f54 <xPortStartScheduler+0xdc>)
 8009f20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009f24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f26:	f000 f8b9 	bl	800a09c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f2a:	4b0b      	ldr	r3, [pc, #44]	; (8009f58 <xPortStartScheduler+0xe0>)
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f30:	f7ff ff92 	bl	8009e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f34:	f7ff fbcc 	bl	80096d0 <vTaskSwitchContext>
	prvTaskExitError();
 8009f38:	f7ff ff4a 	bl	8009dd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	e000e400 	.word	0xe000e400
 8009f4c:	200005dc 	.word	0x200005dc
 8009f50:	200005e0 	.word	0x200005e0
 8009f54:	e000ed20 	.word	0xe000ed20
 8009f58:	2000002c 	.word	0x2000002c

08009f5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
	__asm volatile
 8009f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	607b      	str	r3, [r7, #4]
}
 8009f74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f76:	4b0f      	ldr	r3, [pc, #60]	; (8009fb4 <vPortEnterCritical+0x58>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	4a0d      	ldr	r2, [pc, #52]	; (8009fb4 <vPortEnterCritical+0x58>)
 8009f7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f80:	4b0c      	ldr	r3, [pc, #48]	; (8009fb4 <vPortEnterCritical+0x58>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d10f      	bne.n	8009fa8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f88:	4b0b      	ldr	r3, [pc, #44]	; (8009fb8 <vPortEnterCritical+0x5c>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00a      	beq.n	8009fa8 <vPortEnterCritical+0x4c>
	__asm volatile
 8009f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	603b      	str	r3, [r7, #0]
}
 8009fa4:	bf00      	nop
 8009fa6:	e7fe      	b.n	8009fa6 <vPortEnterCritical+0x4a>
	}
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bc80      	pop	{r7}
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	2000002c 	.word	0x2000002c
 8009fb8:	e000ed04 	.word	0xe000ed04

08009fbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009fc2:	4b11      	ldr	r3, [pc, #68]	; (800a008 <vPortExitCritical+0x4c>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10a      	bne.n	8009fe0 <vPortExitCritical+0x24>
	__asm volatile
 8009fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fce:	f383 8811 	msr	BASEPRI, r3
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	f3bf 8f4f 	dsb	sy
 8009fda:	607b      	str	r3, [r7, #4]
}
 8009fdc:	bf00      	nop
 8009fde:	e7fe      	b.n	8009fde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009fe0:	4b09      	ldr	r3, [pc, #36]	; (800a008 <vPortExitCritical+0x4c>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	4a08      	ldr	r2, [pc, #32]	; (800a008 <vPortExitCritical+0x4c>)
 8009fe8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009fea:	4b07      	ldr	r3, [pc, #28]	; (800a008 <vPortExitCritical+0x4c>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d105      	bne.n	8009ffe <vPortExitCritical+0x42>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	f383 8811 	msr	BASEPRI, r3
}
 8009ffc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ffe:	bf00      	nop
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	bc80      	pop	{r7}
 800a006:	4770      	bx	lr
 800a008:	2000002c 	.word	0x2000002c
 800a00c:	00000000 	.word	0x00000000

0800a010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a010:	f3ef 8009 	mrs	r0, PSP
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	4b0d      	ldr	r3, [pc, #52]	; (800a050 <pxCurrentTCBConst>)
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a020:	6010      	str	r0, [r2, #0]
 800a022:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a026:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a02a:	f380 8811 	msr	BASEPRI, r0
 800a02e:	f7ff fb4f 	bl	80096d0 <vTaskSwitchContext>
 800a032:	f04f 0000 	mov.w	r0, #0
 800a036:	f380 8811 	msr	BASEPRI, r0
 800a03a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a03e:	6819      	ldr	r1, [r3, #0]
 800a040:	6808      	ldr	r0, [r1, #0]
 800a042:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a046:	f380 8809 	msr	PSP, r0
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	4770      	bx	lr

0800a050 <pxCurrentTCBConst>:
 800a050:	200004b0 	.word	0x200004b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a054:	bf00      	nop
 800a056:	bf00      	nop

0800a058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	607b      	str	r3, [r7, #4]
}
 800a070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a072:	f7ff fa6f 	bl	8009554 <xTaskIncrementTick>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d003      	beq.n	800a084 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a07c:	4b06      	ldr	r3, [pc, #24]	; (800a098 <SysTick_Handler+0x40>)
 800a07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a082:	601a      	str	r2, [r3, #0]
 800a084:	2300      	movs	r3, #0
 800a086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	f383 8811 	msr	BASEPRI, r3
}
 800a08e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a090:	bf00      	nop
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	e000ed04 	.word	0xe000ed04

0800a09c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a09c:	b480      	push	{r7}
 800a09e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a0a0:	4b0a      	ldr	r3, [pc, #40]	; (800a0cc <vPortSetupTimerInterrupt+0x30>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a0a6:	4b0a      	ldr	r3, [pc, #40]	; (800a0d0 <vPortSetupTimerInterrupt+0x34>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a0ac:	4b09      	ldr	r3, [pc, #36]	; (800a0d4 <vPortSetupTimerInterrupt+0x38>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a09      	ldr	r2, [pc, #36]	; (800a0d8 <vPortSetupTimerInterrupt+0x3c>)
 800a0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b6:	099b      	lsrs	r3, r3, #6
 800a0b8:	4a08      	ldr	r2, [pc, #32]	; (800a0dc <vPortSetupTimerInterrupt+0x40>)
 800a0ba:	3b01      	subs	r3, #1
 800a0bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a0be:	4b03      	ldr	r3, [pc, #12]	; (800a0cc <vPortSetupTimerInterrupt+0x30>)
 800a0c0:	2207      	movs	r2, #7
 800a0c2:	601a      	str	r2, [r3, #0]
}
 800a0c4:	bf00      	nop
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bc80      	pop	{r7}
 800a0ca:	4770      	bx	lr
 800a0cc:	e000e010 	.word	0xe000e010
 800a0d0:	e000e018 	.word	0xe000e018
 800a0d4:	20000000 	.word	0x20000000
 800a0d8:	10624dd3 	.word	0x10624dd3
 800a0dc:	e000e014 	.word	0xe000e014

0800a0e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0e6:	f3ef 8305 	mrs	r3, IPSR
 800a0ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2b0f      	cmp	r3, #15
 800a0f0:	d914      	bls.n	800a11c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0f2:	4a16      	ldr	r2, [pc, #88]	; (800a14c <vPortValidateInterruptPriority+0x6c>)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0fc:	4b14      	ldr	r3, [pc, #80]	; (800a150 <vPortValidateInterruptPriority+0x70>)
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	7afa      	ldrb	r2, [r7, #11]
 800a102:	429a      	cmp	r2, r3
 800a104:	d20a      	bcs.n	800a11c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	607b      	str	r3, [r7, #4]
}
 800a118:	bf00      	nop
 800a11a:	e7fe      	b.n	800a11a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a11c:	4b0d      	ldr	r3, [pc, #52]	; (800a154 <vPortValidateInterruptPriority+0x74>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a124:	4b0c      	ldr	r3, [pc, #48]	; (800a158 <vPortValidateInterruptPriority+0x78>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d90a      	bls.n	800a142 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a130:	f383 8811 	msr	BASEPRI, r3
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	603b      	str	r3, [r7, #0]
}
 800a13e:	bf00      	nop
 800a140:	e7fe      	b.n	800a140 <vPortValidateInterruptPriority+0x60>
	}
 800a142:	bf00      	nop
 800a144:	3714      	adds	r7, #20
 800a146:	46bd      	mov	sp, r7
 800a148:	bc80      	pop	{r7}
 800a14a:	4770      	bx	lr
 800a14c:	e000e3f0 	.word	0xe000e3f0
 800a150:	200005dc 	.word	0x200005dc
 800a154:	e000ed0c 	.word	0xe000ed0c
 800a158:	200005e0 	.word	0x200005e0

0800a15c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b08a      	sub	sp, #40	; 0x28
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a164:	2300      	movs	r3, #0
 800a166:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a168:	f7ff f94a 	bl	8009400 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a16c:	4b58      	ldr	r3, [pc, #352]	; (800a2d0 <pvPortMalloc+0x174>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d101      	bne.n	800a178 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a174:	f000 f910 	bl	800a398 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a178:	4b56      	ldr	r3, [pc, #344]	; (800a2d4 <pvPortMalloc+0x178>)
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4013      	ands	r3, r2
 800a180:	2b00      	cmp	r3, #0
 800a182:	f040 808e 	bne.w	800a2a2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d01d      	beq.n	800a1c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a18c:	2208      	movs	r2, #8
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4413      	add	r3, r2
 800a192:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f003 0307 	and.w	r3, r3, #7
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d014      	beq.n	800a1c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f023 0307 	bic.w	r3, r3, #7
 800a1a4:	3308      	adds	r3, #8
 800a1a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f003 0307 	and.w	r3, r3, #7
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00a      	beq.n	800a1c8 <pvPortMalloc+0x6c>
	__asm volatile
 800a1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	617b      	str	r3, [r7, #20]
}
 800a1c4:	bf00      	nop
 800a1c6:	e7fe      	b.n	800a1c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d069      	beq.n	800a2a2 <pvPortMalloc+0x146>
 800a1ce:	4b42      	ldr	r3, [pc, #264]	; (800a2d8 <pvPortMalloc+0x17c>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d864      	bhi.n	800a2a2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a1d8:	4b40      	ldr	r3, [pc, #256]	; (800a2dc <pvPortMalloc+0x180>)
 800a1da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1dc:	4b3f      	ldr	r3, [pc, #252]	; (800a2dc <pvPortMalloc+0x180>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1e2:	e004      	b.n	800a1ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d903      	bls.n	800a200 <pvPortMalloc+0xa4>
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1f1      	bne.n	800a1e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a200:	4b33      	ldr	r3, [pc, #204]	; (800a2d0 <pvPortMalloc+0x174>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a206:	429a      	cmp	r2, r3
 800a208:	d04b      	beq.n	800a2a2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a20a:	6a3b      	ldr	r3, [r7, #32]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2208      	movs	r2, #8
 800a210:	4413      	add	r3, r2
 800a212:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	6a3b      	ldr	r3, [r7, #32]
 800a21a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21e:	685a      	ldr	r2, [r3, #4]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	1ad2      	subs	r2, r2, r3
 800a224:	2308      	movs	r3, #8
 800a226:	005b      	lsls	r3, r3, #1
 800a228:	429a      	cmp	r2, r3
 800a22a:	d91f      	bls.n	800a26c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a22c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4413      	add	r3, r2
 800a232:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	f003 0307 	and.w	r3, r3, #7
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00a      	beq.n	800a254 <pvPortMalloc+0xf8>
	__asm volatile
 800a23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	613b      	str	r3, [r7, #16]
}
 800a250:	bf00      	nop
 800a252:	e7fe      	b.n	800a252 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	685a      	ldr	r2, [r3, #4]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	1ad2      	subs	r2, r2, r3
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a266:	69b8      	ldr	r0, [r7, #24]
 800a268:	f000 f8f8 	bl	800a45c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a26c:	4b1a      	ldr	r3, [pc, #104]	; (800a2d8 <pvPortMalloc+0x17c>)
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	4a18      	ldr	r2, [pc, #96]	; (800a2d8 <pvPortMalloc+0x17c>)
 800a278:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a27a:	4b17      	ldr	r3, [pc, #92]	; (800a2d8 <pvPortMalloc+0x17c>)
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	4b18      	ldr	r3, [pc, #96]	; (800a2e0 <pvPortMalloc+0x184>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	429a      	cmp	r2, r3
 800a284:	d203      	bcs.n	800a28e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a286:	4b14      	ldr	r3, [pc, #80]	; (800a2d8 <pvPortMalloc+0x17c>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a15      	ldr	r2, [pc, #84]	; (800a2e0 <pvPortMalloc+0x184>)
 800a28c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a290:	685a      	ldr	r2, [r3, #4]
 800a292:	4b10      	ldr	r3, [pc, #64]	; (800a2d4 <pvPortMalloc+0x178>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	431a      	orrs	r2, r3
 800a298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29e:	2200      	movs	r2, #0
 800a2a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a2a2:	f7ff f8bb 	bl	800941c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	f003 0307 	and.w	r3, r3, #7
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00a      	beq.n	800a2c6 <pvPortMalloc+0x16a>
	__asm volatile
 800a2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b4:	f383 8811 	msr	BASEPRI, r3
 800a2b8:	f3bf 8f6f 	isb	sy
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	60fb      	str	r3, [r7, #12]
}
 800a2c2:	bf00      	nop
 800a2c4:	e7fe      	b.n	800a2c4 <pvPortMalloc+0x168>
	return pvReturn;
 800a2c6:	69fb      	ldr	r3, [r7, #28]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3728      	adds	r7, #40	; 0x28
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	2000252c 	.word	0x2000252c
 800a2d4:	20002538 	.word	0x20002538
 800a2d8:	20002530 	.word	0x20002530
 800a2dc:	20002524 	.word	0x20002524
 800a2e0:	20002534 	.word	0x20002534

0800a2e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d048      	beq.n	800a388 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2f6:	2308      	movs	r3, #8
 800a2f8:	425b      	negs	r3, r3
 800a2fa:	697a      	ldr	r2, [r7, #20]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	685a      	ldr	r2, [r3, #4]
 800a308:	4b21      	ldr	r3, [pc, #132]	; (800a390 <vPortFree+0xac>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4013      	ands	r3, r2
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d10a      	bne.n	800a328 <vPortFree+0x44>
	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	60fb      	str	r3, [r7, #12]
}
 800a324:	bf00      	nop
 800a326:	e7fe      	b.n	800a326 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00a      	beq.n	800a346 <vPortFree+0x62>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	60bb      	str	r3, [r7, #8]
}
 800a342:	bf00      	nop
 800a344:	e7fe      	b.n	800a344 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	685a      	ldr	r2, [r3, #4]
 800a34a:	4b11      	ldr	r3, [pc, #68]	; (800a390 <vPortFree+0xac>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4013      	ands	r3, r2
 800a350:	2b00      	cmp	r3, #0
 800a352:	d019      	beq.n	800a388 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d115      	bne.n	800a388 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	4b0b      	ldr	r3, [pc, #44]	; (800a390 <vPortFree+0xac>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	43db      	mvns	r3, r3
 800a366:	401a      	ands	r2, r3
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a36c:	f7ff f848 	bl	8009400 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	685a      	ldr	r2, [r3, #4]
 800a374:	4b07      	ldr	r3, [pc, #28]	; (800a394 <vPortFree+0xb0>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4413      	add	r3, r2
 800a37a:	4a06      	ldr	r2, [pc, #24]	; (800a394 <vPortFree+0xb0>)
 800a37c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a37e:	6938      	ldr	r0, [r7, #16]
 800a380:	f000 f86c 	bl	800a45c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a384:	f7ff f84a 	bl	800941c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a388:	bf00      	nop
 800a38a:	3718      	adds	r7, #24
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	20002538 	.word	0x20002538
 800a394:	20002530 	.word	0x20002530

0800a398 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a39e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800a3a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a3a4:	4b27      	ldr	r3, [pc, #156]	; (800a444 <prvHeapInit+0xac>)
 800a3a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f003 0307 	and.w	r3, r3, #7
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d00c      	beq.n	800a3cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	3307      	adds	r3, #7
 800a3b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f023 0307 	bic.w	r3, r3, #7
 800a3be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	4a1f      	ldr	r2, [pc, #124]	; (800a444 <prvHeapInit+0xac>)
 800a3c8:	4413      	add	r3, r2
 800a3ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3d0:	4a1d      	ldr	r2, [pc, #116]	; (800a448 <prvHeapInit+0xb0>)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3d6:	4b1c      	ldr	r3, [pc, #112]	; (800a448 <prvHeapInit+0xb0>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3e4:	2208      	movs	r2, #8
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	1a9b      	subs	r3, r3, r2
 800a3ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f023 0307 	bic.w	r3, r3, #7
 800a3f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	4a15      	ldr	r2, [pc, #84]	; (800a44c <prvHeapInit+0xb4>)
 800a3f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3fa:	4b14      	ldr	r3, [pc, #80]	; (800a44c <prvHeapInit+0xb4>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2200      	movs	r2, #0
 800a400:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a402:	4b12      	ldr	r3, [pc, #72]	; (800a44c <prvHeapInit+0xb4>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2200      	movs	r2, #0
 800a408:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	1ad2      	subs	r2, r2, r3
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a418:	4b0c      	ldr	r3, [pc, #48]	; (800a44c <prvHeapInit+0xb4>)
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	4a0a      	ldr	r2, [pc, #40]	; (800a450 <prvHeapInit+0xb8>)
 800a426:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	4a09      	ldr	r2, [pc, #36]	; (800a454 <prvHeapInit+0xbc>)
 800a42e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a430:	4b09      	ldr	r3, [pc, #36]	; (800a458 <prvHeapInit+0xc0>)
 800a432:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a436:	601a      	str	r2, [r3, #0]
}
 800a438:	bf00      	nop
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bc80      	pop	{r7}
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	200005e4 	.word	0x200005e4
 800a448:	20002524 	.word	0x20002524
 800a44c:	2000252c 	.word	0x2000252c
 800a450:	20002534 	.word	0x20002534
 800a454:	20002530 	.word	0x20002530
 800a458:	20002538 	.word	0x20002538

0800a45c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a464:	4b27      	ldr	r3, [pc, #156]	; (800a504 <prvInsertBlockIntoFreeList+0xa8>)
 800a466:	60fb      	str	r3, [r7, #12]
 800a468:	e002      	b.n	800a470 <prvInsertBlockIntoFreeList+0x14>
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	429a      	cmp	r2, r3
 800a478:	d8f7      	bhi.n	800a46a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	4413      	add	r3, r2
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d108      	bne.n	800a49e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	685a      	ldr	r2, [r3, #4]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	441a      	add	r2, r3
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	68ba      	ldr	r2, [r7, #8]
 800a4a8:	441a      	add	r2, r3
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d118      	bne.n	800a4e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	4b14      	ldr	r3, [pc, #80]	; (800a508 <prvInsertBlockIntoFreeList+0xac>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d00d      	beq.n	800a4da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685a      	ldr	r2, [r3, #4]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	441a      	add	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	601a      	str	r2, [r3, #0]
 800a4d8:	e008      	b.n	800a4ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4da:	4b0b      	ldr	r3, [pc, #44]	; (800a508 <prvInsertBlockIntoFreeList+0xac>)
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	601a      	str	r2, [r3, #0]
 800a4e2:	e003      	b.n	800a4ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d002      	beq.n	800a4fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4fa:	bf00      	nop
 800a4fc:	3714      	adds	r7, #20
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bc80      	pop	{r7}
 800a502:	4770      	bx	lr
 800a504:	20002524 	.word	0x20002524
 800a508:	2000252c 	.word	0x2000252c

0800a50c <send_function>:
/*
 * -- Insert your variables declaration here --
 */
/* USER CODE BEGIN 0 */

void send_function(){
 800a50c:	b580      	push	{r7, lr}
 800a50e:	af00      	add	r7, sp, #0
  USBH_CDC_Stop(&hUsbHostFS);
 800a510:	4804      	ldr	r0, [pc, #16]	; (800a524 <send_function+0x18>)
 800a512:	f7fb ff77 	bl	8006404 <USBH_CDC_Stop>
  USBH_CDC_Transmit(&hUsbHostFS,read_info,6);
 800a516:	2206      	movs	r2, #6
 800a518:	4903      	ldr	r1, [pc, #12]	; (800a528 <send_function+0x1c>)
 800a51a:	4802      	ldr	r0, [pc, #8]	; (800a524 <send_function+0x18>)
 800a51c:	f7fc f820 	bl	8006560 <USBH_CDC_Transmit>
}
 800a520:	bf00      	nop
 800a522:	bd80      	pop	{r7, pc}
 800a524:	20002744 	.word	0x20002744
 800a528:	20000030 	.word	0x20000030

0800a52c <receive_function>:

void receive_function(){
 800a52c:	b580      	push	{r7, lr}
 800a52e:	af00      	add	r7, sp, #0
  USBH_CDC_Stop(&hUsbHostFS);
 800a530:	4804      	ldr	r0, [pc, #16]	; (800a544 <receive_function+0x18>)
 800a532:	f7fb ff67 	bl	8006404 <USBH_CDC_Stop>
  USBH_CDC_Receive(&hUsbHostFS,usb_rx_buff,1);
 800a536:	2201      	movs	r2, #1
 800a538:	4903      	ldr	r1, [pc, #12]	; (800a548 <receive_function+0x1c>)
 800a53a:	4802      	ldr	r0, [pc, #8]	; (800a544 <receive_function+0x18>)
 800a53c:	f7fc f84a 	bl	80065d4 <USBH_CDC_Receive>
}
 800a540:	bf00      	nop
 800a542:	bd80      	pop	{r7, pc}
 800a544:	20002744 	.word	0x20002744
 800a548:	20002544 	.word	0x20002544

0800a54c <set_line_coding>:

void set_line_coding(){
 800a54c:	b580      	push	{r7, lr}
 800a54e:	af00      	add	r7, sp, #0
	FrameFormat.b.dwDTERate = 115200;
 800a550:	4b09      	ldr	r3, [pc, #36]	; (800a578 <set_line_coding+0x2c>)
 800a552:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a556:	601a      	str	r2, [r3, #0]
	FrameFormat.b.bCharFormat = 0;
 800a558:	4b07      	ldr	r3, [pc, #28]	; (800a578 <set_line_coding+0x2c>)
 800a55a:	2200      	movs	r2, #0
 800a55c:	711a      	strb	r2, [r3, #4]
	FrameFormat.b.bDataBits = 8;
 800a55e:	4b06      	ldr	r3, [pc, #24]	; (800a578 <set_line_coding+0x2c>)
 800a560:	2208      	movs	r2, #8
 800a562:	719a      	strb	r2, [r3, #6]
	FrameFormat.b.bParityType = 0;
 800a564:	4b04      	ldr	r3, [pc, #16]	; (800a578 <set_line_coding+0x2c>)
 800a566:	2200      	movs	r2, #0
 800a568:	715a      	strb	r2, [r3, #5]

	USBH_CDC_SetLineCoding(&hUsbHostFS, &FrameFormat);
 800a56a:	4903      	ldr	r1, [pc, #12]	; (800a578 <set_line_coding+0x2c>)
 800a56c:	4803      	ldr	r0, [pc, #12]	; (800a57c <set_line_coding+0x30>)
 800a56e:	f7fb ffb0 	bl	80064d2 <USBH_CDC_SetLineCoding>
}
 800a572:	bf00      	nop
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	2000253c 	.word	0x2000253c
 800a57c:	20002744 	.word	0x20002744

0800a580 <USBH_CDC_TransmitCallback>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  //osMessagePut(USB_rxHandle,(uint8_t*)'a',0);
  receive_function();
 800a588:	f7ff ffd0 	bl	800a52c <receive_function>

}
 800a58c:	bf00      	nop
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBH_CDC_ReceiveCallback>:

void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]

   HAL_UART_Transmit(&huart1,usb_rx_buff,USBH_CDC_GetLastReceivedDataSize(phost),100);
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f7fb ffc1 	bl	8006524 <USBH_CDC_GetLastReceivedDataSize>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	2364      	movs	r3, #100	; 0x64
 800a5a8:	4903      	ldr	r1, [pc, #12]	; (800a5b8 <USBH_CDC_ReceiveCallback+0x24>)
 800a5aa:	4804      	ldr	r0, [pc, #16]	; (800a5bc <USBH_CDC_ReceiveCallback+0x28>)
 800a5ac:	f7fa f9ad 	bl	800490a <HAL_UART_Transmit>
  // receive_function();
}
 800a5b0:	bf00      	nop
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	20002544 	.word	0x20002544
 800a5bc:	2000040c 	.word	0x2000040c

0800a5c0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	af00      	add	r7, sp, #0


  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	490e      	ldr	r1, [pc, #56]	; (800a600 <MX_USB_HOST_Init+0x40>)
 800a5c8:	480e      	ldr	r0, [pc, #56]	; (800a604 <MX_USB_HOST_Init+0x44>)
 800a5ca:	f7fc f941 	bl	8006850 <USBH_Init>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d001      	beq.n	800a5d8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a5d4:	f7f6 fa1c 	bl	8000a10 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a5d8:	490b      	ldr	r1, [pc, #44]	; (800a608 <MX_USB_HOST_Init+0x48>)
 800a5da:	480a      	ldr	r0, [pc, #40]	; (800a604 <MX_USB_HOST_Init+0x44>)
 800a5dc:	f7fc f9e4 	bl	80069a8 <USBH_RegisterClass>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a5e6:	f7f6 fa13 	bl	8000a10 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a5ea:	4806      	ldr	r0, [pc, #24]	; (800a604 <MX_USB_HOST_Init+0x44>)
 800a5ec:	f7fc fa66 	bl	8006abc <USBH_Start>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d001      	beq.n	800a5fa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a5f6:	f7f6 fa0b 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a5fa:	bf00      	nop
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	0800a60d 	.word	0x0800a60d
 800a604:	20002744 	.word	0x20002744
 800a608:	2000000c 	.word	0x2000000c

0800a60c <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	460b      	mov	r3, r1
 800a616:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a618:	78fb      	ldrb	r3, [r7, #3]
 800a61a:	3b01      	subs	r3, #1
 800a61c:	2b04      	cmp	r3, #4
 800a61e:	d82e      	bhi.n	800a67e <USBH_UserProcess+0x72>
 800a620:	a201      	add	r2, pc, #4	; (adr r2, 800a628 <USBH_UserProcess+0x1c>)
 800a622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a626:	bf00      	nop
 800a628:	0800a67f 	.word	0x0800a67f
 800a62c:	0800a653 	.word	0x0800a653
 800a630:	0800a67f 	.word	0x0800a67f
 800a634:	0800a669 	.word	0x0800a669
 800a638:	0800a63d 	.word	0x0800a63d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a63c:	4b12      	ldr	r3, [pc, #72]	; (800a688 <USBH_UserProcess+0x7c>)
 800a63e:	2203      	movs	r2, #3
 800a640:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_DISCONNECT, 0);
 800a642:	4b12      	ldr	r3, [pc, #72]	; (800a68c <USBH_UserProcess+0x80>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2200      	movs	r2, #0
 800a648:	2103      	movs	r1, #3
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fd fdf2 	bl	8008234 <osMessagePut>
  break;
 800a650:	e016      	b.n	800a680 <USBH_UserProcess+0x74>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a652:	4b0d      	ldr	r3, [pc, #52]	; (800a688 <USBH_UserProcess+0x7c>)
 800a654:	2202      	movs	r2, #2
 800a656:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_READY, 0);
 800a658:	4b0c      	ldr	r3, [pc, #48]	; (800a68c <USBH_UserProcess+0x80>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2200      	movs	r2, #0
 800a65e:	2102      	movs	r1, #2
 800a660:	4618      	mov	r0, r3
 800a662:	f7fd fde7 	bl	8008234 <osMessagePut>
  break;
 800a666:	e00b      	b.n	800a680 <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a668:	4b07      	ldr	r3, [pc, #28]	; (800a688 <USBH_UserProcess+0x7c>)
 800a66a:	2201      	movs	r2, #1
 800a66c:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_START, 0);
 800a66e:	4b07      	ldr	r3, [pc, #28]	; (800a68c <USBH_UserProcess+0x80>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2200      	movs	r2, #0
 800a674:	2101      	movs	r1, #1
 800a676:	4618      	mov	r0, r3
 800a678:	f7fd fddc 	bl	8008234 <osMessagePut>
  break;
 800a67c:	e000      	b.n	800a680 <USBH_UserProcess+0x74>

  default:
  break;
 800a67e:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a680:	bf00      	nop
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	20002b20 	.word	0x20002b20
 800a68c:	20000458 	.word	0x20000458

0800a690 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6a0:	d113      	bne.n	800a6ca <HAL_HCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a6a2:	4b0c      	ldr	r3, [pc, #48]	; (800a6d4 <HAL_HCD_MspInit+0x44>)
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	4a0b      	ldr	r2, [pc, #44]	; (800a6d4 <HAL_HCD_MspInit+0x44>)
 800a6a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a6ac:	6153      	str	r3, [r2, #20]
 800a6ae:	4b09      	ldr	r3, [pc, #36]	; (800a6d4 <HAL_HCD_MspInit+0x44>)
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6b6:	60fb      	str	r3, [r7, #12]
 800a6b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	2105      	movs	r1, #5
 800a6be:	2043      	movs	r0, #67	; 0x43
 800a6c0:	f7f6 fcc9 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a6c4:	2043      	movs	r0, #67	; 0x43
 800a6c6:	f7f6 fce2 	bl	800108e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a6ca:	bf00      	nop
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	40021000 	.word	0x40021000

0800a6d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fc fd68 	bl	80071bc <USBH_LL_IncTimer>
}
 800a6ec:	bf00      	nop
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a702:	4618      	mov	r0, r3
 800a704:	f7fc fdab 	bl	800725e <USBH_LL_Connect>
}
 800a708:	bf00      	nop
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fc fdc0 	bl	80072a4 <USBH_LL_Disconnect>
}
 800a724:	bf00      	nop
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	460b      	mov	r3, r1
 800a736:	70fb      	strb	r3, [r7, #3]
 800a738:	4613      	mov	r3, r2
 800a73a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a742:	4618      	mov	r0, r3
 800a744:	f7fc fdf5 	bl	8007332 <USBH_LL_NotifyURBChange>
#endif
}
 800a748:	bf00      	nop
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fc fd56 	bl	8007210 <USBH_LL_PortEnabled>
}
 800a764:	bf00      	nop
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fc fd62 	bl	8007244 <USBH_LL_PortDisabled>
}
 800a780:	bf00      	nop
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 800a796:	2b01      	cmp	r3, #1
 800a798:	d127      	bne.n	800a7ea <USBH_LL_Init+0x62>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a79a:	4a16      	ldr	r2, [pc, #88]	; (800a7f4 <USBH_LL_Init+0x6c>)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a13      	ldr	r2, [pc, #76]	; (800a7f4 <USBH_LL_Init+0x6c>)
 800a7a6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a7aa:	4b12      	ldr	r3, [pc, #72]	; (800a7f4 <USBH_LL_Init+0x6c>)
 800a7ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a7b0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a7b2:	4b10      	ldr	r3, [pc, #64]	; (800a7f4 <USBH_LL_Init+0x6c>)
 800a7b4:	2208      	movs	r2, #8
 800a7b6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a7b8:	4b0e      	ldr	r3, [pc, #56]	; (800a7f4 <USBH_LL_Init+0x6c>)
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a7be:	4b0d      	ldr	r3, [pc, #52]	; (800a7f4 <USBH_LL_Init+0x6c>)
 800a7c0:	2202      	movs	r2, #2
 800a7c2:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a7c4:	4b0b      	ldr	r3, [pc, #44]	; (800a7f4 <USBH_LL_Init+0x6c>)
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a7ca:	480a      	ldr	r0, [pc, #40]	; (800a7f4 <USBH_LL_Init+0x6c>)
 800a7cc:	f7f6 ff4c 	bl	8001668 <HAL_HCD_Init>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d001      	beq.n	800a7da <USBH_LL_Init+0x52>
  {
    Error_Handler( );
 800a7d6:	f7f6 f91b 	bl	8000a10 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a7da:	4806      	ldr	r0, [pc, #24]	; (800a7f4 <USBH_LL_Init+0x6c>)
 800a7dc:	f7f7 fb22 	bl	8001e24 <HAL_HCD_GetCurrentFrame>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f7fc fcdb 	bl	80071a0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	20002b24 	.word	0x20002b24

0800a7f8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a800:	2300      	movs	r3, #0
 800a802:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a804:	2300      	movs	r3, #0
 800a806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a80e:	4618      	mov	r0, r3
 800a810:	f7f7 fa94 	bl	8001d3c <HAL_HCD_Start>
 800a814:	4603      	mov	r3, r0
 800a816:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a818:	7bfb      	ldrb	r3, [r7, #15]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f000 f95a 	bl	800aad4 <USBH_Get_USB_Status>
 800a820:	4603      	mov	r3, r0
 800a822:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a824:	7bbb      	ldrb	r3, [r7, #14]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b084      	sub	sp, #16
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a83a:	2300      	movs	r3, #0
 800a83c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a844:	4618      	mov	r0, r3
 800a846:	f7f7 fa9c 	bl	8001d82 <HAL_HCD_Stop>
 800a84a:	4603      	mov	r3, r0
 800a84c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a84e:	7bfb      	ldrb	r3, [r7, #15]
 800a850:	4618      	mov	r0, r3
 800a852:	f000 f93f 	bl	800aad4 <USBH_Get_USB_Status>
 800a856:	4603      	mov	r3, r0
 800a858:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a85a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3710      	adds	r7, #16
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a86c:	2301      	movs	r3, #1
 800a86e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a876:	4618      	mov	r0, r3
 800a878:	f7f7 fae2 	bl	8001e40 <HAL_HCD_GetCurrentSpeed>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d00c      	beq.n	800a89c <USBH_LL_GetSpeed+0x38>
 800a882:	2b02      	cmp	r3, #2
 800a884:	d80d      	bhi.n	800a8a2 <USBH_LL_GetSpeed+0x3e>
 800a886:	2b00      	cmp	r3, #0
 800a888:	d002      	beq.n	800a890 <USBH_LL_GetSpeed+0x2c>
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d003      	beq.n	800a896 <USBH_LL_GetSpeed+0x32>
 800a88e:	e008      	b.n	800a8a2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a890:	2300      	movs	r3, #0
 800a892:	73fb      	strb	r3, [r7, #15]
    break;
 800a894:	e008      	b.n	800a8a8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a896:	2301      	movs	r3, #1
 800a898:	73fb      	strb	r3, [r7, #15]
    break;
 800a89a:	e005      	b.n	800a8a8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a89c:	2302      	movs	r3, #2
 800a89e:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a0:	e002      	b.n	800a8a8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a6:	bf00      	nop
  }
  return  speed;
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b084      	sub	sp, #16
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7f7 fa77 	bl	8001dbc <HAL_HCD_ResetPort>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f000 f8fd 	bl	800aad4 <USBH_Get_USB_Status>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a8fa:	78fa      	ldrb	r2, [r7, #3]
 800a8fc:	4611      	mov	r1, r2
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7f7 fa7d 	bl	8001dfe <HAL_HCD_HC_GetXferCount>
 800a904:	4603      	mov	r3, r0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3708      	adds	r7, #8
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a90e:	b590      	push	{r4, r7, lr}
 800a910:	b089      	sub	sp, #36	; 0x24
 800a912:	af04      	add	r7, sp, #16
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	4608      	mov	r0, r1
 800a918:	4611      	mov	r1, r2
 800a91a:	461a      	mov	r2, r3
 800a91c:	4603      	mov	r3, r0
 800a91e:	70fb      	strb	r3, [r7, #3]
 800a920:	460b      	mov	r3, r1
 800a922:	70bb      	strb	r3, [r7, #2]
 800a924:	4613      	mov	r3, r2
 800a926:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a928:	2300      	movs	r3, #0
 800a92a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 800a936:	787c      	ldrb	r4, [r7, #1]
 800a938:	78ba      	ldrb	r2, [r7, #2]
 800a93a:	78f9      	ldrb	r1, [r7, #3]
 800a93c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a93e:	9302      	str	r3, [sp, #8]
 800a940:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a944:	9301      	str	r3, [sp, #4]
 800a946:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	4623      	mov	r3, r4
 800a94e:	f7f6 feed 	bl	800172c <HAL_HCD_HC_Init>
 800a952:	4603      	mov	r3, r0
 800a954:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a956:	7bfb      	ldrb	r3, [r7, #15]
 800a958:	4618      	mov	r0, r3
 800a95a:	f000 f8bb 	bl	800aad4 <USBH_Get_USB_Status>
 800a95e:	4603      	mov	r3, r0
 800a960:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a962:	7bbb      	ldrb	r3, [r7, #14]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3714      	adds	r7, #20
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd90      	pop	{r4, r7, pc}

0800a96c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	460b      	mov	r3, r1
 800a976:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a986:	78fa      	ldrb	r2, [r7, #3]
 800a988:	4611      	mov	r1, r2
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7f6 ff5d 	bl	800184a <HAL_HCD_HC_Halt>
 800a990:	4603      	mov	r3, r0
 800a992:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a994:	7bfb      	ldrb	r3, [r7, #15]
 800a996:	4618      	mov	r0, r3
 800a998:	f000 f89c 	bl	800aad4 <USBH_Get_USB_Status>
 800a99c:	4603      	mov	r3, r0
 800a99e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a9aa:	b590      	push	{r4, r7, lr}
 800a9ac:	b089      	sub	sp, #36	; 0x24
 800a9ae:	af04      	add	r7, sp, #16
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	4608      	mov	r0, r1
 800a9b4:	4611      	mov	r1, r2
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	70fb      	strb	r3, [r7, #3]
 800a9bc:	460b      	mov	r3, r1
 800a9be:	70bb      	strb	r3, [r7, #2]
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 800a9d2:	787c      	ldrb	r4, [r7, #1]
 800a9d4:	78ba      	ldrb	r2, [r7, #2]
 800a9d6:	78f9      	ldrb	r1, [r7, #3]
 800a9d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a9dc:	9303      	str	r3, [sp, #12]
 800a9de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a9e0:	9302      	str	r3, [sp, #8]
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e4:	9301      	str	r3, [sp, #4]
 800a9e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a9ea:	9300      	str	r3, [sp, #0]
 800a9ec:	4623      	mov	r3, r4
 800a9ee:	f7f6 ff4f 	bl	8001890 <HAL_HCD_HC_SubmitRequest>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a9f6:	7bfb      	ldrb	r3, [r7, #15]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f000 f86b 	bl	800aad4 <USBH_Get_USB_Status>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa02:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3714      	adds	r7, #20
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd90      	pop	{r4, r7, pc}

0800aa0c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	460b      	mov	r3, r1
 800aa16:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800aa1e:	78fa      	ldrb	r2, [r7, #3]
 800aa20:	4611      	mov	r1, r2
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7f7 f9d8 	bl	8001dd8 <HAL_HCD_HC_GetURBState>
 800aa28:	4603      	mov	r3, r0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b082      	sub	sp, #8
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d103      	bne.n	800aa50 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800aa48:	78fb      	ldrb	r3, [r7, #3]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f000 f86e 	bl	800ab2c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800aa50:	20c8      	movs	r0, #200	; 0xc8
 800aa52:	f7f6 fa27 	bl	8000ea4 <HAL_Delay>
  return USBH_OK;
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	460b      	mov	r3, r1
 800aa6a:	70fb      	strb	r3, [r7, #3]
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800aa76:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800aa78:	78fb      	ldrb	r3, [r7, #3]
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	212c      	movs	r1, #44	; 0x2c
 800aa7e:	fb01 f303 	mul.w	r3, r1, r3
 800aa82:	4413      	add	r3, r2
 800aa84:	333b      	adds	r3, #59	; 0x3b
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d009      	beq.n	800aaa0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800aa8c:	78fb      	ldrb	r3, [r7, #3]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	212c      	movs	r1, #44	; 0x2c
 800aa92:	fb01 f303 	mul.w	r3, r1, r3
 800aa96:	4413      	add	r3, r2
 800aa98:	3354      	adds	r3, #84	; 0x54
 800aa9a:	78ba      	ldrb	r2, [r7, #2]
 800aa9c:	701a      	strb	r2, [r3, #0]
 800aa9e:	e008      	b.n	800aab2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800aaa0:	78fb      	ldrb	r3, [r7, #3]
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	212c      	movs	r1, #44	; 0x2c
 800aaa6:	fb01 f303 	mul.w	r3, r1, r3
 800aaaa:	4413      	add	r3, r2
 800aaac:	3355      	adds	r3, #85	; 0x55
 800aaae:	78ba      	ldrb	r2, [r7, #2]
 800aab0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3714      	adds	r7, #20
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bc80      	pop	{r7}
 800aabc:	4770      	bx	lr

0800aabe <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b082      	sub	sp, #8
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7f6 f9ec 	bl	8000ea4 <HAL_Delay>
}
 800aacc:	bf00      	nop
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	4603      	mov	r3, r0
 800aadc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aae2:	79fb      	ldrb	r3, [r7, #7]
 800aae4:	2b03      	cmp	r3, #3
 800aae6:	d817      	bhi.n	800ab18 <USBH_Get_USB_Status+0x44>
 800aae8:	a201      	add	r2, pc, #4	; (adr r2, 800aaf0 <USBH_Get_USB_Status+0x1c>)
 800aaea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaee:	bf00      	nop
 800aaf0:	0800ab01 	.word	0x0800ab01
 800aaf4:	0800ab07 	.word	0x0800ab07
 800aaf8:	0800ab0d 	.word	0x0800ab0d
 800aafc:	0800ab13 	.word	0x0800ab13
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ab00:	2300      	movs	r3, #0
 800ab02:	73fb      	strb	r3, [r7, #15]
    break;
 800ab04:	e00b      	b.n	800ab1e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ab06:	2302      	movs	r3, #2
 800ab08:	73fb      	strb	r3, [r7, #15]
    break;
 800ab0a:	e008      	b.n	800ab1e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ab10:	e005      	b.n	800ab1e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ab12:	2302      	movs	r3, #2
 800ab14:	73fb      	strb	r3, [r7, #15]
    break;
 800ab16:	e002      	b.n	800ab1e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ab18:	2302      	movs	r3, #2
 800ab1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab1c:	bf00      	nop
  }
  return usb_status;
 800ab1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3714      	adds	r7, #20
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bc80      	pop	{r7}
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop

0800ab2c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	4603      	mov	r3, r0
 800ab34:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ab36:	79fb      	ldrb	r3, [r7, #7]
 800ab38:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ab3a:	79fb      	ldrb	r3, [r7, #7]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d102      	bne.n	800ab46 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ab40:	2301      	movs	r3, #1
 800ab42:	73fb      	strb	r3, [r7, #15]
 800ab44:	e001      	b.n	800ab4a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ab46:	2300      	movs	r3, #0
 800ab48:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,(GPIO_PinState)data);
 800ab4a:	7bfb      	ldrb	r3, [r7, #15]
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	2101      	movs	r1, #1
 800ab50:	4803      	ldr	r0, [pc, #12]	; (800ab60 <MX_DriverVbusFS+0x34>)
 800ab52:	f7f6 fd71 	bl	8001638 <HAL_GPIO_WritePin>
}
 800ab56:	bf00      	nop
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	40010c00 	.word	0x40010c00

0800ab64 <__errno>:
 800ab64:	4b01      	ldr	r3, [pc, #4]	; (800ab6c <__errno+0x8>)
 800ab66:	6818      	ldr	r0, [r3, #0]
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	20000038 	.word	0x20000038

0800ab70 <__libc_init_array>:
 800ab70:	b570      	push	{r4, r5, r6, lr}
 800ab72:	2600      	movs	r6, #0
 800ab74:	4d0c      	ldr	r5, [pc, #48]	; (800aba8 <__libc_init_array+0x38>)
 800ab76:	4c0d      	ldr	r4, [pc, #52]	; (800abac <__libc_init_array+0x3c>)
 800ab78:	1b64      	subs	r4, r4, r5
 800ab7a:	10a4      	asrs	r4, r4, #2
 800ab7c:	42a6      	cmp	r6, r4
 800ab7e:	d109      	bne.n	800ab94 <__libc_init_array+0x24>
 800ab80:	f000 f9a4 	bl	800aecc <_init>
 800ab84:	2600      	movs	r6, #0
 800ab86:	4d0a      	ldr	r5, [pc, #40]	; (800abb0 <__libc_init_array+0x40>)
 800ab88:	4c0a      	ldr	r4, [pc, #40]	; (800abb4 <__libc_init_array+0x44>)
 800ab8a:	1b64      	subs	r4, r4, r5
 800ab8c:	10a4      	asrs	r4, r4, #2
 800ab8e:	42a6      	cmp	r6, r4
 800ab90:	d105      	bne.n	800ab9e <__libc_init_array+0x2e>
 800ab92:	bd70      	pop	{r4, r5, r6, pc}
 800ab94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab98:	4798      	blx	r3
 800ab9a:	3601      	adds	r6, #1
 800ab9c:	e7ee      	b.n	800ab7c <__libc_init_array+0xc>
 800ab9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aba2:	4798      	blx	r3
 800aba4:	3601      	adds	r6, #1
 800aba6:	e7f2      	b.n	800ab8e <__libc_init_array+0x1e>
 800aba8:	0800b038 	.word	0x0800b038
 800abac:	0800b038 	.word	0x0800b038
 800abb0:	0800b038 	.word	0x0800b038
 800abb4:	0800b03c 	.word	0x0800b03c

0800abb8 <__retarget_lock_acquire_recursive>:
 800abb8:	4770      	bx	lr

0800abba <__retarget_lock_release_recursive>:
 800abba:	4770      	bx	lr

0800abbc <malloc>:
 800abbc:	4b02      	ldr	r3, [pc, #8]	; (800abc8 <malloc+0xc>)
 800abbe:	4601      	mov	r1, r0
 800abc0:	6818      	ldr	r0, [r3, #0]
 800abc2:	f000 b889 	b.w	800acd8 <_malloc_r>
 800abc6:	bf00      	nop
 800abc8:	20000038 	.word	0x20000038

0800abcc <free>:
 800abcc:	4b02      	ldr	r3, [pc, #8]	; (800abd8 <free+0xc>)
 800abce:	4601      	mov	r1, r0
 800abd0:	6818      	ldr	r0, [r3, #0]
 800abd2:	f000 b819 	b.w	800ac08 <_free_r>
 800abd6:	bf00      	nop
 800abd8:	20000038 	.word	0x20000038

0800abdc <memcpy>:
 800abdc:	440a      	add	r2, r1
 800abde:	4291      	cmp	r1, r2
 800abe0:	f100 33ff 	add.w	r3, r0, #4294967295
 800abe4:	d100      	bne.n	800abe8 <memcpy+0xc>
 800abe6:	4770      	bx	lr
 800abe8:	b510      	push	{r4, lr}
 800abea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abee:	4291      	cmp	r1, r2
 800abf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abf4:	d1f9      	bne.n	800abea <memcpy+0xe>
 800abf6:	bd10      	pop	{r4, pc}

0800abf8 <memset>:
 800abf8:	4603      	mov	r3, r0
 800abfa:	4402      	add	r2, r0
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d100      	bne.n	800ac02 <memset+0xa>
 800ac00:	4770      	bx	lr
 800ac02:	f803 1b01 	strb.w	r1, [r3], #1
 800ac06:	e7f9      	b.n	800abfc <memset+0x4>

0800ac08 <_free_r>:
 800ac08:	b538      	push	{r3, r4, r5, lr}
 800ac0a:	4605      	mov	r5, r0
 800ac0c:	2900      	cmp	r1, #0
 800ac0e:	d040      	beq.n	800ac92 <_free_r+0x8a>
 800ac10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac14:	1f0c      	subs	r4, r1, #4
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	bfb8      	it	lt
 800ac1a:	18e4      	addlt	r4, r4, r3
 800ac1c:	f000 f94a 	bl	800aeb4 <__malloc_lock>
 800ac20:	4a1c      	ldr	r2, [pc, #112]	; (800ac94 <_free_r+0x8c>)
 800ac22:	6813      	ldr	r3, [r2, #0]
 800ac24:	b933      	cbnz	r3, 800ac34 <_free_r+0x2c>
 800ac26:	6063      	str	r3, [r4, #4]
 800ac28:	6014      	str	r4, [r2, #0]
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac30:	f000 b946 	b.w	800aec0 <__malloc_unlock>
 800ac34:	42a3      	cmp	r3, r4
 800ac36:	d908      	bls.n	800ac4a <_free_r+0x42>
 800ac38:	6820      	ldr	r0, [r4, #0]
 800ac3a:	1821      	adds	r1, r4, r0
 800ac3c:	428b      	cmp	r3, r1
 800ac3e:	bf01      	itttt	eq
 800ac40:	6819      	ldreq	r1, [r3, #0]
 800ac42:	685b      	ldreq	r3, [r3, #4]
 800ac44:	1809      	addeq	r1, r1, r0
 800ac46:	6021      	streq	r1, [r4, #0]
 800ac48:	e7ed      	b.n	800ac26 <_free_r+0x1e>
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	b10b      	cbz	r3, 800ac54 <_free_r+0x4c>
 800ac50:	42a3      	cmp	r3, r4
 800ac52:	d9fa      	bls.n	800ac4a <_free_r+0x42>
 800ac54:	6811      	ldr	r1, [r2, #0]
 800ac56:	1850      	adds	r0, r2, r1
 800ac58:	42a0      	cmp	r0, r4
 800ac5a:	d10b      	bne.n	800ac74 <_free_r+0x6c>
 800ac5c:	6820      	ldr	r0, [r4, #0]
 800ac5e:	4401      	add	r1, r0
 800ac60:	1850      	adds	r0, r2, r1
 800ac62:	4283      	cmp	r3, r0
 800ac64:	6011      	str	r1, [r2, #0]
 800ac66:	d1e0      	bne.n	800ac2a <_free_r+0x22>
 800ac68:	6818      	ldr	r0, [r3, #0]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	4401      	add	r1, r0
 800ac6e:	6011      	str	r1, [r2, #0]
 800ac70:	6053      	str	r3, [r2, #4]
 800ac72:	e7da      	b.n	800ac2a <_free_r+0x22>
 800ac74:	d902      	bls.n	800ac7c <_free_r+0x74>
 800ac76:	230c      	movs	r3, #12
 800ac78:	602b      	str	r3, [r5, #0]
 800ac7a:	e7d6      	b.n	800ac2a <_free_r+0x22>
 800ac7c:	6820      	ldr	r0, [r4, #0]
 800ac7e:	1821      	adds	r1, r4, r0
 800ac80:	428b      	cmp	r3, r1
 800ac82:	bf01      	itttt	eq
 800ac84:	6819      	ldreq	r1, [r3, #0]
 800ac86:	685b      	ldreq	r3, [r3, #4]
 800ac88:	1809      	addeq	r1, r1, r0
 800ac8a:	6021      	streq	r1, [r4, #0]
 800ac8c:	6063      	str	r3, [r4, #4]
 800ac8e:	6054      	str	r4, [r2, #4]
 800ac90:	e7cb      	b.n	800ac2a <_free_r+0x22>
 800ac92:	bd38      	pop	{r3, r4, r5, pc}
 800ac94:	20002e2c 	.word	0x20002e2c

0800ac98 <sbrk_aligned>:
 800ac98:	b570      	push	{r4, r5, r6, lr}
 800ac9a:	4e0e      	ldr	r6, [pc, #56]	; (800acd4 <sbrk_aligned+0x3c>)
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	6831      	ldr	r1, [r6, #0]
 800aca0:	4605      	mov	r5, r0
 800aca2:	b911      	cbnz	r1, 800acaa <sbrk_aligned+0x12>
 800aca4:	f000 f8f6 	bl	800ae94 <_sbrk_r>
 800aca8:	6030      	str	r0, [r6, #0]
 800acaa:	4621      	mov	r1, r4
 800acac:	4628      	mov	r0, r5
 800acae:	f000 f8f1 	bl	800ae94 <_sbrk_r>
 800acb2:	1c43      	adds	r3, r0, #1
 800acb4:	d00a      	beq.n	800accc <sbrk_aligned+0x34>
 800acb6:	1cc4      	adds	r4, r0, #3
 800acb8:	f024 0403 	bic.w	r4, r4, #3
 800acbc:	42a0      	cmp	r0, r4
 800acbe:	d007      	beq.n	800acd0 <sbrk_aligned+0x38>
 800acc0:	1a21      	subs	r1, r4, r0
 800acc2:	4628      	mov	r0, r5
 800acc4:	f000 f8e6 	bl	800ae94 <_sbrk_r>
 800acc8:	3001      	adds	r0, #1
 800acca:	d101      	bne.n	800acd0 <sbrk_aligned+0x38>
 800accc:	f04f 34ff 	mov.w	r4, #4294967295
 800acd0:	4620      	mov	r0, r4
 800acd2:	bd70      	pop	{r4, r5, r6, pc}
 800acd4:	20002e30 	.word	0x20002e30

0800acd8 <_malloc_r>:
 800acd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acdc:	1ccd      	adds	r5, r1, #3
 800acde:	f025 0503 	bic.w	r5, r5, #3
 800ace2:	3508      	adds	r5, #8
 800ace4:	2d0c      	cmp	r5, #12
 800ace6:	bf38      	it	cc
 800ace8:	250c      	movcc	r5, #12
 800acea:	2d00      	cmp	r5, #0
 800acec:	4607      	mov	r7, r0
 800acee:	db01      	blt.n	800acf4 <_malloc_r+0x1c>
 800acf0:	42a9      	cmp	r1, r5
 800acf2:	d905      	bls.n	800ad00 <_malloc_r+0x28>
 800acf4:	230c      	movs	r3, #12
 800acf6:	2600      	movs	r6, #0
 800acf8:	603b      	str	r3, [r7, #0]
 800acfa:	4630      	mov	r0, r6
 800acfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad00:	4e2e      	ldr	r6, [pc, #184]	; (800adbc <_malloc_r+0xe4>)
 800ad02:	f000 f8d7 	bl	800aeb4 <__malloc_lock>
 800ad06:	6833      	ldr	r3, [r6, #0]
 800ad08:	461c      	mov	r4, r3
 800ad0a:	bb34      	cbnz	r4, 800ad5a <_malloc_r+0x82>
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	4638      	mov	r0, r7
 800ad10:	f7ff ffc2 	bl	800ac98 <sbrk_aligned>
 800ad14:	1c43      	adds	r3, r0, #1
 800ad16:	4604      	mov	r4, r0
 800ad18:	d14d      	bne.n	800adb6 <_malloc_r+0xde>
 800ad1a:	6834      	ldr	r4, [r6, #0]
 800ad1c:	4626      	mov	r6, r4
 800ad1e:	2e00      	cmp	r6, #0
 800ad20:	d140      	bne.n	800ada4 <_malloc_r+0xcc>
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	4631      	mov	r1, r6
 800ad26:	4638      	mov	r0, r7
 800ad28:	eb04 0803 	add.w	r8, r4, r3
 800ad2c:	f000 f8b2 	bl	800ae94 <_sbrk_r>
 800ad30:	4580      	cmp	r8, r0
 800ad32:	d13a      	bne.n	800adaa <_malloc_r+0xd2>
 800ad34:	6821      	ldr	r1, [r4, #0]
 800ad36:	3503      	adds	r5, #3
 800ad38:	1a6d      	subs	r5, r5, r1
 800ad3a:	f025 0503 	bic.w	r5, r5, #3
 800ad3e:	3508      	adds	r5, #8
 800ad40:	2d0c      	cmp	r5, #12
 800ad42:	bf38      	it	cc
 800ad44:	250c      	movcc	r5, #12
 800ad46:	4638      	mov	r0, r7
 800ad48:	4629      	mov	r1, r5
 800ad4a:	f7ff ffa5 	bl	800ac98 <sbrk_aligned>
 800ad4e:	3001      	adds	r0, #1
 800ad50:	d02b      	beq.n	800adaa <_malloc_r+0xd2>
 800ad52:	6823      	ldr	r3, [r4, #0]
 800ad54:	442b      	add	r3, r5
 800ad56:	6023      	str	r3, [r4, #0]
 800ad58:	e00e      	b.n	800ad78 <_malloc_r+0xa0>
 800ad5a:	6822      	ldr	r2, [r4, #0]
 800ad5c:	1b52      	subs	r2, r2, r5
 800ad5e:	d41e      	bmi.n	800ad9e <_malloc_r+0xc6>
 800ad60:	2a0b      	cmp	r2, #11
 800ad62:	d916      	bls.n	800ad92 <_malloc_r+0xba>
 800ad64:	1961      	adds	r1, r4, r5
 800ad66:	42a3      	cmp	r3, r4
 800ad68:	6025      	str	r5, [r4, #0]
 800ad6a:	bf18      	it	ne
 800ad6c:	6059      	strne	r1, [r3, #4]
 800ad6e:	6863      	ldr	r3, [r4, #4]
 800ad70:	bf08      	it	eq
 800ad72:	6031      	streq	r1, [r6, #0]
 800ad74:	5162      	str	r2, [r4, r5]
 800ad76:	604b      	str	r3, [r1, #4]
 800ad78:	4638      	mov	r0, r7
 800ad7a:	f104 060b 	add.w	r6, r4, #11
 800ad7e:	f000 f89f 	bl	800aec0 <__malloc_unlock>
 800ad82:	f026 0607 	bic.w	r6, r6, #7
 800ad86:	1d23      	adds	r3, r4, #4
 800ad88:	1af2      	subs	r2, r6, r3
 800ad8a:	d0b6      	beq.n	800acfa <_malloc_r+0x22>
 800ad8c:	1b9b      	subs	r3, r3, r6
 800ad8e:	50a3      	str	r3, [r4, r2]
 800ad90:	e7b3      	b.n	800acfa <_malloc_r+0x22>
 800ad92:	6862      	ldr	r2, [r4, #4]
 800ad94:	42a3      	cmp	r3, r4
 800ad96:	bf0c      	ite	eq
 800ad98:	6032      	streq	r2, [r6, #0]
 800ad9a:	605a      	strne	r2, [r3, #4]
 800ad9c:	e7ec      	b.n	800ad78 <_malloc_r+0xa0>
 800ad9e:	4623      	mov	r3, r4
 800ada0:	6864      	ldr	r4, [r4, #4]
 800ada2:	e7b2      	b.n	800ad0a <_malloc_r+0x32>
 800ada4:	4634      	mov	r4, r6
 800ada6:	6876      	ldr	r6, [r6, #4]
 800ada8:	e7b9      	b.n	800ad1e <_malloc_r+0x46>
 800adaa:	230c      	movs	r3, #12
 800adac:	4638      	mov	r0, r7
 800adae:	603b      	str	r3, [r7, #0]
 800adb0:	f000 f886 	bl	800aec0 <__malloc_unlock>
 800adb4:	e7a1      	b.n	800acfa <_malloc_r+0x22>
 800adb6:	6025      	str	r5, [r4, #0]
 800adb8:	e7de      	b.n	800ad78 <_malloc_r+0xa0>
 800adba:	bf00      	nop
 800adbc:	20002e2c 	.word	0x20002e2c

0800adc0 <cleanup_glue>:
 800adc0:	b538      	push	{r3, r4, r5, lr}
 800adc2:	460c      	mov	r4, r1
 800adc4:	6809      	ldr	r1, [r1, #0]
 800adc6:	4605      	mov	r5, r0
 800adc8:	b109      	cbz	r1, 800adce <cleanup_glue+0xe>
 800adca:	f7ff fff9 	bl	800adc0 <cleanup_glue>
 800adce:	4621      	mov	r1, r4
 800add0:	4628      	mov	r0, r5
 800add2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800add6:	f7ff bf17 	b.w	800ac08 <_free_r>
	...

0800addc <_reclaim_reent>:
 800addc:	4b2c      	ldr	r3, [pc, #176]	; (800ae90 <_reclaim_reent+0xb4>)
 800adde:	b570      	push	{r4, r5, r6, lr}
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4604      	mov	r4, r0
 800ade4:	4283      	cmp	r3, r0
 800ade6:	d051      	beq.n	800ae8c <_reclaim_reent+0xb0>
 800ade8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800adea:	b143      	cbz	r3, 800adfe <_reclaim_reent+0x22>
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d14a      	bne.n	800ae88 <_reclaim_reent+0xac>
 800adf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adf4:	6819      	ldr	r1, [r3, #0]
 800adf6:	b111      	cbz	r1, 800adfe <_reclaim_reent+0x22>
 800adf8:	4620      	mov	r0, r4
 800adfa:	f7ff ff05 	bl	800ac08 <_free_r>
 800adfe:	6961      	ldr	r1, [r4, #20]
 800ae00:	b111      	cbz	r1, 800ae08 <_reclaim_reent+0x2c>
 800ae02:	4620      	mov	r0, r4
 800ae04:	f7ff ff00 	bl	800ac08 <_free_r>
 800ae08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ae0a:	b111      	cbz	r1, 800ae12 <_reclaim_reent+0x36>
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	f7ff fefb 	bl	800ac08 <_free_r>
 800ae12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ae14:	b111      	cbz	r1, 800ae1c <_reclaim_reent+0x40>
 800ae16:	4620      	mov	r0, r4
 800ae18:	f7ff fef6 	bl	800ac08 <_free_r>
 800ae1c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ae1e:	b111      	cbz	r1, 800ae26 <_reclaim_reent+0x4a>
 800ae20:	4620      	mov	r0, r4
 800ae22:	f7ff fef1 	bl	800ac08 <_free_r>
 800ae26:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ae28:	b111      	cbz	r1, 800ae30 <_reclaim_reent+0x54>
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f7ff feec 	bl	800ac08 <_free_r>
 800ae30:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ae32:	b111      	cbz	r1, 800ae3a <_reclaim_reent+0x5e>
 800ae34:	4620      	mov	r0, r4
 800ae36:	f7ff fee7 	bl	800ac08 <_free_r>
 800ae3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ae3c:	b111      	cbz	r1, 800ae44 <_reclaim_reent+0x68>
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f7ff fee2 	bl	800ac08 <_free_r>
 800ae44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae46:	b111      	cbz	r1, 800ae4e <_reclaim_reent+0x72>
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f7ff fedd 	bl	800ac08 <_free_r>
 800ae4e:	69a3      	ldr	r3, [r4, #24]
 800ae50:	b1e3      	cbz	r3, 800ae8c <_reclaim_reent+0xb0>
 800ae52:	4620      	mov	r0, r4
 800ae54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ae56:	4798      	blx	r3
 800ae58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ae5a:	b1b9      	cbz	r1, 800ae8c <_reclaim_reent+0xb0>
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae62:	f7ff bfad 	b.w	800adc0 <cleanup_glue>
 800ae66:	5949      	ldr	r1, [r1, r5]
 800ae68:	b941      	cbnz	r1, 800ae7c <_reclaim_reent+0xa0>
 800ae6a:	3504      	adds	r5, #4
 800ae6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae6e:	2d80      	cmp	r5, #128	; 0x80
 800ae70:	68d9      	ldr	r1, [r3, #12]
 800ae72:	d1f8      	bne.n	800ae66 <_reclaim_reent+0x8a>
 800ae74:	4620      	mov	r0, r4
 800ae76:	f7ff fec7 	bl	800ac08 <_free_r>
 800ae7a:	e7ba      	b.n	800adf2 <_reclaim_reent+0x16>
 800ae7c:	680e      	ldr	r6, [r1, #0]
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f7ff fec2 	bl	800ac08 <_free_r>
 800ae84:	4631      	mov	r1, r6
 800ae86:	e7ef      	b.n	800ae68 <_reclaim_reent+0x8c>
 800ae88:	2500      	movs	r5, #0
 800ae8a:	e7ef      	b.n	800ae6c <_reclaim_reent+0x90>
 800ae8c:	bd70      	pop	{r4, r5, r6, pc}
 800ae8e:	bf00      	nop
 800ae90:	20000038 	.word	0x20000038

0800ae94 <_sbrk_r>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	2300      	movs	r3, #0
 800ae98:	4d05      	ldr	r5, [pc, #20]	; (800aeb0 <_sbrk_r+0x1c>)
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	4608      	mov	r0, r1
 800ae9e:	602b      	str	r3, [r5, #0]
 800aea0:	f7f5 ff6c 	bl	8000d7c <_sbrk>
 800aea4:	1c43      	adds	r3, r0, #1
 800aea6:	d102      	bne.n	800aeae <_sbrk_r+0x1a>
 800aea8:	682b      	ldr	r3, [r5, #0]
 800aeaa:	b103      	cbz	r3, 800aeae <_sbrk_r+0x1a>
 800aeac:	6023      	str	r3, [r4, #0]
 800aeae:	bd38      	pop	{r3, r4, r5, pc}
 800aeb0:	20002e34 	.word	0x20002e34

0800aeb4 <__malloc_lock>:
 800aeb4:	4801      	ldr	r0, [pc, #4]	; (800aebc <__malloc_lock+0x8>)
 800aeb6:	f7ff be7f 	b.w	800abb8 <__retarget_lock_acquire_recursive>
 800aeba:	bf00      	nop
 800aebc:	20002e28 	.word	0x20002e28

0800aec0 <__malloc_unlock>:
 800aec0:	4801      	ldr	r0, [pc, #4]	; (800aec8 <__malloc_unlock+0x8>)
 800aec2:	f7ff be7a 	b.w	800abba <__retarget_lock_release_recursive>
 800aec6:	bf00      	nop
 800aec8:	20002e28 	.word	0x20002e28

0800aecc <_init>:
 800aecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aece:	bf00      	nop
 800aed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aed2:	bc08      	pop	{r3}
 800aed4:	469e      	mov	lr, r3
 800aed6:	4770      	bx	lr

0800aed8 <_fini>:
 800aed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeda:	bf00      	nop
 800aedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aede:	bc08      	pop	{r3}
 800aee0:	469e      	mov	lr, r3
 800aee2:	4770      	bx	lr
