
UVP6_V3.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2c0  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  0800e4b0  0800e4b0  0001e4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee18  0800ee18  00020420  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee18  0800ee18  0001ee18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee20  0800ee20  00020420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee20  0800ee20  0001ee20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee24  0800ee24  0001ee24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000420  20000000  0800ee28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009bc0  20000420  0800f248  00020420  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009fe0  0800f248  00029fe0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020420  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c06  00000000  00000000  00020449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f2a  00000000  00000000  0003a04f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  0003df80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001418  00000000  00000000  0003f530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ff0  00000000  00000000  00040948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188b8  00000000  00000000  00064938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6a34  00000000  00000000  0007d1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00143c24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007050  00000000  00000000  00143c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000420 	.word	0x20000420
 800020c:	00000000 	.word	0x00000000
 8000210:	0800e498 	.word	0x0800e498

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000424 	.word	0x20000424
 800022c:	0800e498 	.word	0x0800e498

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_drsub>:
 8000254:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000258:	e002      	b.n	8000260 <__adddf3>
 800025a:	bf00      	nop

0800025c <__aeabi_dsub>:
 800025c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000260 <__adddf3>:
 8000260:	b530      	push	{r4, r5, lr}
 8000262:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000266:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800026a:	ea94 0f05 	teq	r4, r5
 800026e:	bf08      	it	eq
 8000270:	ea90 0f02 	teqeq	r0, r2
 8000274:	bf1f      	itttt	ne
 8000276:	ea54 0c00 	orrsne.w	ip, r4, r0
 800027a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000282:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000286:	f000 80e2 	beq.w	800044e <__adddf3+0x1ee>
 800028a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000292:	bfb8      	it	lt
 8000294:	426d      	neglt	r5, r5
 8000296:	dd0c      	ble.n	80002b2 <__adddf3+0x52>
 8000298:	442c      	add	r4, r5
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	ea82 0000 	eor.w	r0, r2, r0
 80002a6:	ea83 0101 	eor.w	r1, r3, r1
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	2d36      	cmp	r5, #54	; 0x36
 80002b4:	bf88      	it	hi
 80002b6:	bd30      	pophi	{r4, r5, pc}
 80002b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x70>
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002dc:	d002      	beq.n	80002e4 <__adddf3+0x84>
 80002de:	4252      	negs	r2, r2
 80002e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e4:	ea94 0f05 	teq	r4, r5
 80002e8:	f000 80a7 	beq.w	800043a <__adddf3+0x1da>
 80002ec:	f1a4 0401 	sub.w	r4, r4, #1
 80002f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f4:	db0d      	blt.n	8000312 <__adddf3+0xb2>
 80002f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002fa:	fa22 f205 	lsr.w	r2, r2, r5
 80002fe:	1880      	adds	r0, r0, r2
 8000300:	f141 0100 	adc.w	r1, r1, #0
 8000304:	fa03 f20e 	lsl.w	r2, r3, lr
 8000308:	1880      	adds	r0, r0, r2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	4159      	adcs	r1, r3
 8000310:	e00e      	b.n	8000330 <__adddf3+0xd0>
 8000312:	f1a5 0520 	sub.w	r5, r5, #32
 8000316:	f10e 0e20 	add.w	lr, lr, #32
 800031a:	2a01      	cmp	r2, #1
 800031c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000320:	bf28      	it	cs
 8000322:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	18c0      	adds	r0, r0, r3
 800032c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000334:	d507      	bpl.n	8000346 <__adddf3+0xe6>
 8000336:	f04f 0e00 	mov.w	lr, #0
 800033a:	f1dc 0c00 	rsbs	ip, ip, #0
 800033e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000342:	eb6e 0101 	sbc.w	r1, lr, r1
 8000346:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800034a:	d31b      	bcc.n	8000384 <__adddf3+0x124>
 800034c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000350:	d30c      	bcc.n	800036c <__adddf3+0x10c>
 8000352:	0849      	lsrs	r1, r1, #1
 8000354:	ea5f 0030 	movs.w	r0, r0, rrx
 8000358:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800035c:	f104 0401 	add.w	r4, r4, #1
 8000360:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000364:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000368:	f080 809a 	bcs.w	80004a0 <__adddf3+0x240>
 800036c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000370:	bf08      	it	eq
 8000372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000376:	f150 0000 	adcs.w	r0, r0, #0
 800037a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037e:	ea41 0105 	orr.w	r1, r1, r5
 8000382:	bd30      	pop	{r4, r5, pc}
 8000384:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000388:	4140      	adcs	r0, r0
 800038a:	eb41 0101 	adc.w	r1, r1, r1
 800038e:	3c01      	subs	r4, #1
 8000390:	bf28      	it	cs
 8000392:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000396:	d2e9      	bcs.n	800036c <__adddf3+0x10c>
 8000398:	f091 0f00 	teq	r1, #0
 800039c:	bf04      	itt	eq
 800039e:	4601      	moveq	r1, r0
 80003a0:	2000      	moveq	r0, #0
 80003a2:	fab1 f381 	clz	r3, r1
 80003a6:	bf08      	it	eq
 80003a8:	3320      	addeq	r3, #32
 80003aa:	f1a3 030b 	sub.w	r3, r3, #11
 80003ae:	f1b3 0220 	subs.w	r2, r3, #32
 80003b2:	da0c      	bge.n	80003ce <__adddf3+0x16e>
 80003b4:	320c      	adds	r2, #12
 80003b6:	dd08      	ble.n	80003ca <__adddf3+0x16a>
 80003b8:	f102 0c14 	add.w	ip, r2, #20
 80003bc:	f1c2 020c 	rsb	r2, r2, #12
 80003c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c4:	fa21 f102 	lsr.w	r1, r1, r2
 80003c8:	e00c      	b.n	80003e4 <__adddf3+0x184>
 80003ca:	f102 0214 	add.w	r2, r2, #20
 80003ce:	bfd8      	it	le
 80003d0:	f1c2 0c20 	rsble	ip, r2, #32
 80003d4:	fa01 f102 	lsl.w	r1, r1, r2
 80003d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003dc:	bfdc      	itt	le
 80003de:	ea41 010c 	orrle.w	r1, r1, ip
 80003e2:	4090      	lslle	r0, r2
 80003e4:	1ae4      	subs	r4, r4, r3
 80003e6:	bfa2      	ittt	ge
 80003e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ec:	4329      	orrge	r1, r5
 80003ee:	bd30      	popge	{r4, r5, pc}
 80003f0:	ea6f 0404 	mvn.w	r4, r4
 80003f4:	3c1f      	subs	r4, #31
 80003f6:	da1c      	bge.n	8000432 <__adddf3+0x1d2>
 80003f8:	340c      	adds	r4, #12
 80003fa:	dc0e      	bgt.n	800041a <__adddf3+0x1ba>
 80003fc:	f104 0414 	add.w	r4, r4, #20
 8000400:	f1c4 0220 	rsb	r2, r4, #32
 8000404:	fa20 f004 	lsr.w	r0, r0, r4
 8000408:	fa01 f302 	lsl.w	r3, r1, r2
 800040c:	ea40 0003 	orr.w	r0, r0, r3
 8000410:	fa21 f304 	lsr.w	r3, r1, r4
 8000414:	ea45 0103 	orr.w	r1, r5, r3
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f1c4 040c 	rsb	r4, r4, #12
 800041e:	f1c4 0220 	rsb	r2, r4, #32
 8000422:	fa20 f002 	lsr.w	r0, r0, r2
 8000426:	fa01 f304 	lsl.w	r3, r1, r4
 800042a:	ea40 0003 	orr.w	r0, r0, r3
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	fa21 f004 	lsr.w	r0, r1, r4
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f094 0f00 	teq	r4, #0
 800043e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000442:	bf06      	itte	eq
 8000444:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000448:	3401      	addeq	r4, #1
 800044a:	3d01      	subne	r5, #1
 800044c:	e74e      	b.n	80002ec <__adddf3+0x8c>
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf18      	it	ne
 8000454:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000458:	d029      	beq.n	80004ae <__adddf3+0x24e>
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	d005      	beq.n	8000472 <__adddf3+0x212>
 8000466:	ea54 0c00 	orrs.w	ip, r4, r0
 800046a:	bf04      	itt	eq
 800046c:	4619      	moveq	r1, r3
 800046e:	4610      	moveq	r0, r2
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea91 0f03 	teq	r1, r3
 8000476:	bf1e      	ittt	ne
 8000478:	2100      	movne	r1, #0
 800047a:	2000      	movne	r0, #0
 800047c:	bd30      	popne	{r4, r5, pc}
 800047e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000482:	d105      	bne.n	8000490 <__adddf3+0x230>
 8000484:	0040      	lsls	r0, r0, #1
 8000486:	4149      	adcs	r1, r1
 8000488:	bf28      	it	cs
 800048a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000494:	bf3c      	itt	cc
 8000496:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800049a:	bd30      	popcc	{r4, r5, pc}
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a8:	f04f 0000 	mov.w	r0, #0
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf1a      	itte	ne
 80004b4:	4619      	movne	r1, r3
 80004b6:	4610      	movne	r0, r2
 80004b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004bc:	bf1c      	itt	ne
 80004be:	460b      	movne	r3, r1
 80004c0:	4602      	movne	r2, r0
 80004c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c6:	bf06      	itte	eq
 80004c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004cc:	ea91 0f03 	teqeq	r1, r3
 80004d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	bf00      	nop

080004d8 <__aeabi_ui2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f04f 0500 	mov.w	r5, #0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e750      	b.n	8000398 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_i2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000510:	bf48      	it	mi
 8000512:	4240      	negmi	r0, r0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e73e      	b.n	8000398 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_f2d>:
 800051c:	0042      	lsls	r2, r0, #1
 800051e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000522:	ea4f 0131 	mov.w	r1, r1, rrx
 8000526:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800052a:	bf1f      	itttt	ne
 800052c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000530:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000534:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000538:	4770      	bxne	lr
 800053a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053e:	bf08      	it	eq
 8000540:	4770      	bxeq	lr
 8000542:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000546:	bf04      	itt	eq
 8000548:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000558:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800055c:	e71c      	b.n	8000398 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_ul2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f04f 0500 	mov.w	r5, #0
 800056e:	e00a      	b.n	8000586 <__aeabi_l2d+0x16>

08000570 <__aeabi_l2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057e:	d502      	bpl.n	8000586 <__aeabi_l2d+0x16>
 8000580:	4240      	negs	r0, r0
 8000582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000586:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000592:	f43f aed8 	beq.w	8000346 <__adddf3+0xe6>
 8000596:	f04f 0203 	mov.w	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ae:	f1c2 0320 	rsb	r3, r2, #32
 80005b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80005be:	ea40 000e 	orr.w	r0, r0, lr
 80005c2:	fa21 f102 	lsr.w	r1, r1, r2
 80005c6:	4414      	add	r4, r2
 80005c8:	e6bd      	b.n	8000346 <__adddf3+0xe6>
 80005ca:	bf00      	nop

080005cc <__aeabi_dmul>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8de 	bleq	80007a8 <__aeabi_dmul+0x1dc>
 80005ec:	442c      	add	r4, r5
 80005ee:	ea81 0603 	eor.w	r6, r1, r3
 80005f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fe:	bf18      	it	ne
 8000600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000604:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800060c:	d038      	beq.n	8000680 <__aeabi_dmul+0xb4>
 800060e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000622:	f04f 0600 	mov.w	r6, #0
 8000626:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062a:	f09c 0f00 	teq	ip, #0
 800062e:	bf18      	it	ne
 8000630:	f04e 0e01 	orrne.w	lr, lr, #1
 8000634:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000638:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800063c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000640:	d204      	bcs.n	800064c <__aeabi_dmul+0x80>
 8000642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000646:	416d      	adcs	r5, r5
 8000648:	eb46 0606 	adc.w	r6, r6, r6
 800064c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800065c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000660:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000664:	bf88      	it	hi
 8000666:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800066a:	d81e      	bhi.n	80006aa <__aeabi_dmul+0xde>
 800066c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000670:	bf08      	it	eq
 8000672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000676:	f150 0000 	adcs.w	r0, r0, #0
 800067a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000684:	ea46 0101 	orr.w	r1, r6, r1
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	ea81 0103 	eor.w	r1, r1, r3
 8000690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000694:	bfc2      	ittt	gt
 8000696:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069e:	bd70      	popgt	{r4, r5, r6, pc}
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f04f 0e00 	mov.w	lr, #0
 80006a8:	3c01      	subs	r4, #1
 80006aa:	f300 80ab 	bgt.w	8000804 <__aeabi_dmul+0x238>
 80006ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006b2:	bfde      	ittt	le
 80006b4:	2000      	movle	r0, #0
 80006b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ba:	bd70      	pople	{r4, r5, r6, pc}
 80006bc:	f1c4 0400 	rsb	r4, r4, #0
 80006c0:	3c20      	subs	r4, #32
 80006c2:	da35      	bge.n	8000730 <__aeabi_dmul+0x164>
 80006c4:	340c      	adds	r4, #12
 80006c6:	dc1b      	bgt.n	8000700 <__aeabi_dmul+0x134>
 80006c8:	f104 0414 	add.w	r4, r4, #20
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f305 	lsl.w	r3, r0, r5
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	fa21 f604 	lsr.w	r6, r1, r4
 80006f0:	eb42 0106 	adc.w	r1, r2, r6
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 040c 	rsb	r4, r4, #12
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f304 	lsl.w	r3, r0, r4
 800070c:	fa20 f005 	lsr.w	r0, r0, r5
 8000710:	fa01 f204 	lsl.w	r2, r1, r4
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	f141 0100 	adc.w	r1, r1, #0
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f205 	lsl.w	r2, r0, r5
 8000738:	ea4e 0e02 	orr.w	lr, lr, r2
 800073c:	fa20 f304 	lsr.w	r3, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea43 0302 	orr.w	r3, r3, r2
 8000748:	fa21 f004 	lsr.w	r0, r1, r4
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	fa21 f204 	lsr.w	r2, r1, r4
 8000754:	ea20 0002 	bic.w	r0, r0, r2
 8000758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f094 0f00 	teq	r4, #0
 800076c:	d10f      	bne.n	800078e <__aeabi_dmul+0x1c2>
 800076e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000772:	0040      	lsls	r0, r0, #1
 8000774:	eb41 0101 	adc.w	r1, r1, r1
 8000778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3c01      	subeq	r4, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1a6>
 8000782:	ea41 0106 	orr.w	r1, r1, r6
 8000786:	f095 0f00 	teq	r5, #0
 800078a:	bf18      	it	ne
 800078c:	4770      	bxne	lr
 800078e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	eb43 0303 	adc.w	r3, r3, r3
 8000798:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3d01      	subeq	r5, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1c6>
 80007a2:	ea43 0306 	orr.w	r3, r3, r6
 80007a6:	4770      	bx	lr
 80007a8:	ea94 0f0c 	teq	r4, ip
 80007ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b0:	bf18      	it	ne
 80007b2:	ea95 0f0c 	teqne	r5, ip
 80007b6:	d00c      	beq.n	80007d2 <__aeabi_dmul+0x206>
 80007b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007bc:	bf18      	it	ne
 80007be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c2:	d1d1      	bne.n	8000768 <__aeabi_dmul+0x19c>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d6:	bf06      	itte	eq
 80007d8:	4610      	moveq	r0, r2
 80007da:	4619      	moveq	r1, r3
 80007dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e0:	d019      	beq.n	8000816 <__aeabi_dmul+0x24a>
 80007e2:	ea94 0f0c 	teq	r4, ip
 80007e6:	d102      	bne.n	80007ee <__aeabi_dmul+0x222>
 80007e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ec:	d113      	bne.n	8000816 <__aeabi_dmul+0x24a>
 80007ee:	ea95 0f0c 	teq	r5, ip
 80007f2:	d105      	bne.n	8000800 <__aeabi_dmul+0x234>
 80007f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f8:	bf1c      	itt	ne
 80007fa:	4610      	movne	r0, r2
 80007fc:	4619      	movne	r1, r3
 80007fe:	d10a      	bne.n	8000816 <__aeabi_dmul+0x24a>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081e:	bd70      	pop	{r4, r5, r6, pc}

08000820 <__aeabi_ddiv>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000826:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800082a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082e:	bf1d      	ittte	ne
 8000830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000834:	ea94 0f0c 	teqne	r4, ip
 8000838:	ea95 0f0c 	teqne	r5, ip
 800083c:	f000 f8a7 	bleq	800098e <__aeabi_ddiv+0x16e>
 8000840:	eba4 0405 	sub.w	r4, r4, r5
 8000844:	ea81 0e03 	eor.w	lr, r1, r3
 8000848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800084c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000850:	f000 8088 	beq.w	8000964 <__aeabi_ddiv+0x144>
 8000854:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000858:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800085c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000864:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800086c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000870:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000874:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000878:	429d      	cmp	r5, r3
 800087a:	bf08      	it	eq
 800087c:	4296      	cmpeq	r6, r2
 800087e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000882:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000886:	d202      	bcs.n	800088e <__aeabi_ddiv+0x6e>
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	1ab6      	subs	r6, r6, r2
 8000890:	eb65 0503 	sbc.w	r5, r5, r3
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000900:	d018      	beq.n	8000934 <__aeabi_ddiv+0x114>
 8000902:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800090a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800091a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091e:	d1c0      	bne.n	80008a2 <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	d10b      	bne.n	800093e <__aeabi_ddiv+0x11e>
 8000926:	ea41 0100 	orr.w	r1, r1, r0
 800092a:	f04f 0000 	mov.w	r0, #0
 800092e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000932:	e7b6      	b.n	80008a2 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	bf04      	itt	eq
 800093a:	4301      	orreq	r1, r0
 800093c:	2000      	moveq	r0, #0
 800093e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000942:	bf88      	it	hi
 8000944:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000948:	f63f aeaf 	bhi.w	80006aa <__aeabi_dmul+0xde>
 800094c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000950:	bf04      	itt	eq
 8000952:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800095a:	f150 0000 	adcs.w	r0, r0, #0
 800095e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800096c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000970:	bfc2      	ittt	gt
 8000972:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097a:	bd70      	popgt	{r4, r5, r6, pc}
 800097c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000980:	f04f 0e00 	mov.w	lr, #0
 8000984:	3c01      	subs	r4, #1
 8000986:	e690      	b.n	80006aa <__aeabi_dmul+0xde>
 8000988:	ea45 0e06 	orr.w	lr, r5, r6
 800098c:	e68d      	b.n	80006aa <__aeabi_dmul+0xde>
 800098e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000992:	ea94 0f0c 	teq	r4, ip
 8000996:	bf08      	it	eq
 8000998:	ea95 0f0c 	teqeq	r5, ip
 800099c:	f43f af3b 	beq.w	8000816 <__aeabi_dmul+0x24a>
 80009a0:	ea94 0f0c 	teq	r4, ip
 80009a4:	d10a      	bne.n	80009bc <__aeabi_ddiv+0x19c>
 80009a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009aa:	f47f af34 	bne.w	8000816 <__aeabi_dmul+0x24a>
 80009ae:	ea95 0f0c 	teq	r5, ip
 80009b2:	f47f af25 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e72c      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009bc:	ea95 0f0c 	teq	r5, ip
 80009c0:	d106      	bne.n	80009d0 <__aeabi_ddiv+0x1b0>
 80009c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c6:	f43f aefd 	beq.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e722      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d4:	bf18      	it	ne
 80009d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009da:	f47f aec5 	bne.w	8000768 <__aeabi_dmul+0x19c>
 80009de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009e2:	f47f af0d 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ea:	f47f aeeb 	bne.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ee:	e712      	b.n	8000816 <__aeabi_dmul+0x24a>

080009f0 <__gedf2>:
 80009f0:	f04f 3cff 	mov.w	ip, #4294967295
 80009f4:	e006      	b.n	8000a04 <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__ledf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	e002      	b.n	8000a04 <__cmpdf2+0x4>
 80009fe:	bf00      	nop

08000a00 <__cmpdf2>:
 8000a00:	f04f 0c01 	mov.w	ip, #1
 8000a04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a1a:	d01b      	beq.n	8000a54 <__cmpdf2+0x54>
 8000a1c:	b001      	add	sp, #4
 8000a1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a22:	bf0c      	ite	eq
 8000a24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a28:	ea91 0f03 	teqne	r1, r3
 8000a2c:	bf02      	ittt	eq
 8000a2e:	ea90 0f02 	teqeq	r0, r2
 8000a32:	2000      	moveq	r0, #0
 8000a34:	4770      	bxeq	lr
 8000a36:	f110 0f00 	cmn.w	r0, #0
 8000a3a:	ea91 0f03 	teq	r1, r3
 8000a3e:	bf58      	it	pl
 8000a40:	4299      	cmppl	r1, r3
 8000a42:	bf08      	it	eq
 8000a44:	4290      	cmpeq	r0, r2
 8000a46:	bf2c      	ite	cs
 8000a48:	17d8      	asrcs	r0, r3, #31
 8000a4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4e:	f040 0001 	orr.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d102      	bne.n	8000a64 <__cmpdf2+0x64>
 8000a5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a62:	d107      	bne.n	8000a74 <__cmpdf2+0x74>
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d1d6      	bne.n	8000a1c <__cmpdf2+0x1c>
 8000a6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a72:	d0d3      	beq.n	8000a1c <__cmpdf2+0x1c>
 8000a74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdrcmple>:
 8000a7c:	4684      	mov	ip, r0
 8000a7e:	4610      	mov	r0, r2
 8000a80:	4662      	mov	r2, ip
 8000a82:	468c      	mov	ip, r1
 8000a84:	4619      	mov	r1, r3
 8000a86:	4663      	mov	r3, ip
 8000a88:	e000      	b.n	8000a8c <__aeabi_cdcmpeq>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdcmpeq>:
 8000a8c:	b501      	push	{r0, lr}
 8000a8e:	f7ff ffb7 	bl	8000a00 <__cmpdf2>
 8000a92:	2800      	cmp	r0, #0
 8000a94:	bf48      	it	mi
 8000a96:	f110 0f00 	cmnmi.w	r0, #0
 8000a9a:	bd01      	pop	{r0, pc}

08000a9c <__aeabi_dcmpeq>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff fff4 	bl	8000a8c <__aeabi_cdcmpeq>
 8000aa4:	bf0c      	ite	eq
 8000aa6:	2001      	moveq	r0, #1
 8000aa8:	2000      	movne	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmplt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffea 	bl	8000a8c <__aeabi_cdcmpeq>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmple>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffe0 	bl	8000a8c <__aeabi_cdcmpeq>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpge>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffce 	bl	8000a7c <__aeabi_cdrcmple>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpgt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffc4 	bl	8000a7c <__aeabi_cdrcmple>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpun>:
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x10>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d10a      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x20>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0001 	mov.w	r0, #1
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_frsub>:
 8000c5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c60:	e002      	b.n	8000c68 <__addsf3>
 8000c62:	bf00      	nop

08000c64 <__aeabi_fsub>:
 8000c64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c68 <__addsf3>:
 8000c68:	0042      	lsls	r2, r0, #1
 8000c6a:	bf1f      	itttt	ne
 8000c6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c70:	ea92 0f03 	teqne	r2, r3
 8000c74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7c:	d06a      	beq.n	8000d54 <__addsf3+0xec>
 8000c7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c86:	bfc1      	itttt	gt
 8000c88:	18d2      	addgt	r2, r2, r3
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	4048      	eorgt	r0, r1
 8000c8e:	4041      	eorgt	r1, r0
 8000c90:	bfb8      	it	lt
 8000c92:	425b      	neglt	r3, r3
 8000c94:	2b19      	cmp	r3, #25
 8000c96:	bf88      	it	hi
 8000c98:	4770      	bxhi	lr
 8000c9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ca6:	bf18      	it	ne
 8000ca8:	4240      	negne	r0, r0
 8000caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cb2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cb6:	bf18      	it	ne
 8000cb8:	4249      	negne	r1, r1
 8000cba:	ea92 0f03 	teq	r2, r3
 8000cbe:	d03f      	beq.n	8000d40 <__addsf3+0xd8>
 8000cc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc4:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc8:	eb10 000c 	adds.w	r0, r0, ip
 8000ccc:	f1c3 0320 	rsb	r3, r3, #32
 8000cd0:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__addsf3+0x78>
 8000cda:	4249      	negs	r1, r1
 8000cdc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ce0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce4:	d313      	bcc.n	8000d0e <__addsf3+0xa6>
 8000ce6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cea:	d306      	bcc.n	8000cfa <__addsf3+0x92>
 8000cec:	0840      	lsrs	r0, r0, #1
 8000cee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cf2:	f102 0201 	add.w	r2, r2, #1
 8000cf6:	2afe      	cmp	r2, #254	; 0xfe
 8000cf8:	d251      	bcs.n	8000d9e <__addsf3+0x136>
 8000cfa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	ea40 0003 	orr.w	r0, r0, r3
 8000d0c:	4770      	bx	lr
 8000d0e:	0049      	lsls	r1, r1, #1
 8000d10:	eb40 0000 	adc.w	r0, r0, r0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	bf28      	it	cs
 8000d18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d1c:	d2ed      	bcs.n	8000cfa <__addsf3+0x92>
 8000d1e:	fab0 fc80 	clz	ip, r0
 8000d22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d26:	ebb2 020c 	subs.w	r2, r2, ip
 8000d2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2e:	bfaa      	itet	ge
 8000d30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d34:	4252      	neglt	r2, r2
 8000d36:	4318      	orrge	r0, r3
 8000d38:	bfbc      	itt	lt
 8000d3a:	40d0      	lsrlt	r0, r2
 8000d3c:	4318      	orrlt	r0, r3
 8000d3e:	4770      	bx	lr
 8000d40:	f092 0f00 	teq	r2, #0
 8000d44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d48:	bf06      	itte	eq
 8000d4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d4e:	3201      	addeq	r2, #1
 8000d50:	3b01      	subne	r3, #1
 8000d52:	e7b5      	b.n	8000cc0 <__addsf3+0x58>
 8000d54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d5c:	bf18      	it	ne
 8000d5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d62:	d021      	beq.n	8000da8 <__addsf3+0x140>
 8000d64:	ea92 0f03 	teq	r2, r3
 8000d68:	d004      	beq.n	8000d74 <__addsf3+0x10c>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	bf08      	it	eq
 8000d70:	4608      	moveq	r0, r1
 8000d72:	4770      	bx	lr
 8000d74:	ea90 0f01 	teq	r0, r1
 8000d78:	bf1c      	itt	ne
 8000d7a:	2000      	movne	r0, #0
 8000d7c:	4770      	bxne	lr
 8000d7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d82:	d104      	bne.n	8000d8e <__addsf3+0x126>
 8000d84:	0040      	lsls	r0, r0, #1
 8000d86:	bf28      	it	cs
 8000d88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d8c:	4770      	bx	lr
 8000d8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d92:	bf3c      	itt	cc
 8000d94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d98:	4770      	bxcc	lr
 8000d9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000da2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da6:	4770      	bx	lr
 8000da8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dac:	bf16      	itet	ne
 8000dae:	4608      	movne	r0, r1
 8000db0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db4:	4601      	movne	r1, r0
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	bf06      	itte	eq
 8000dba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dbe:	ea90 0f01 	teqeq	r0, r1
 8000dc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_ui2f>:
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e004      	b.n	8000dd8 <__aeabi_i2f+0x8>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_i2f>:
 8000dd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd4:	bf48      	it	mi
 8000dd6:	4240      	negmi	r0, r0
 8000dd8:	ea5f 0c00 	movs.w	ip, r0
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de4:	4601      	mov	r1, r0
 8000de6:	f04f 0000 	mov.w	r0, #0
 8000dea:	e01c      	b.n	8000e26 <__aeabi_l2f+0x2a>

08000dec <__aeabi_ul2f>:
 8000dec:	ea50 0201 	orrs.w	r2, r0, r1
 8000df0:	bf08      	it	eq
 8000df2:	4770      	bxeq	lr
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e00a      	b.n	8000e10 <__aeabi_l2f+0x14>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_l2f>:
 8000dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000e00:	bf08      	it	eq
 8000e02:	4770      	bxeq	lr
 8000e04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e08:	d502      	bpl.n	8000e10 <__aeabi_l2f+0x14>
 8000e0a:	4240      	negs	r0, r0
 8000e0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e10:	ea5f 0c01 	movs.w	ip, r1
 8000e14:	bf02      	ittt	eq
 8000e16:	4684      	moveq	ip, r0
 8000e18:	4601      	moveq	r1, r0
 8000e1a:	2000      	moveq	r0, #0
 8000e1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e20:	bf08      	it	eq
 8000e22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e2a:	fabc f28c 	clz	r2, ip
 8000e2e:	3a08      	subs	r2, #8
 8000e30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e34:	db10      	blt.n	8000e58 <__aeabi_l2f+0x5c>
 8000e36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e40:	f1c2 0220 	rsb	r2, r2, #32
 8000e44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	eb43 0002 	adc.w	r0, r3, r2
 8000e50:	bf08      	it	eq
 8000e52:	f020 0001 	biceq.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	f102 0220 	add.w	r2, r2, #32
 8000e5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e60:	f1c2 0220 	rsb	r2, r2, #32
 8000e64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e68:	fa21 f202 	lsr.w	r2, r1, r2
 8000e6c:	eb43 0002 	adc.w	r0, r3, r2
 8000e70:	bf08      	it	eq
 8000e72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e76:	4770      	bx	lr

08000e78 <__aeabi_fmul>:
 8000e78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e80:	bf1e      	ittt	ne
 8000e82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e86:	ea92 0f0c 	teqne	r2, ip
 8000e8a:	ea93 0f0c 	teqne	r3, ip
 8000e8e:	d06f      	beq.n	8000f70 <__aeabi_fmul+0xf8>
 8000e90:	441a      	add	r2, r3
 8000e92:	ea80 0c01 	eor.w	ip, r0, r1
 8000e96:	0240      	lsls	r0, r0, #9
 8000e98:	bf18      	it	ne
 8000e9a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e9e:	d01e      	beq.n	8000ede <__aeabi_fmul+0x66>
 8000ea0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ea4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ea8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000eac:	fba0 3101 	umull	r3, r1, r0, r1
 8000eb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000eb8:	bf3e      	ittt	cc
 8000eba:	0049      	lslcc	r1, r1, #1
 8000ebc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ec0:	005b      	lslcc	r3, r3, #1
 8000ec2:	ea40 0001 	orr.w	r0, r0, r1
 8000ec6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eca:	2afd      	cmp	r2, #253	; 0xfd
 8000ecc:	d81d      	bhi.n	8000f0a <__aeabi_fmul+0x92>
 8000ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ed2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed6:	bf08      	it	eq
 8000ed8:	f020 0001 	biceq.w	r0, r0, #1
 8000edc:	4770      	bx	lr
 8000ede:	f090 0f00 	teq	r0, #0
 8000ee2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee6:	bf08      	it	eq
 8000ee8:	0249      	lsleq	r1, r1, #9
 8000eea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ef2:	3a7f      	subs	r2, #127	; 0x7f
 8000ef4:	bfc2      	ittt	gt
 8000ef6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000efa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000efe:	4770      	bxgt	lr
 8000f00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	3a01      	subs	r2, #1
 8000f0a:	dc5d      	bgt.n	8000fc8 <__aeabi_fmul+0x150>
 8000f0c:	f112 0f19 	cmn.w	r2, #25
 8000f10:	bfdc      	itt	le
 8000f12:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000f16:	4770      	bxle	lr
 8000f18:	f1c2 0200 	rsb	r2, r2, #0
 8000f1c:	0041      	lsls	r1, r0, #1
 8000f1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000f22:	f1c2 0220 	rsb	r2, r2, #32
 8000f26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f2e:	f140 0000 	adc.w	r0, r0, #0
 8000f32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f36:	bf08      	it	eq
 8000f38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f3c:	4770      	bx	lr
 8000f3e:	f092 0f00 	teq	r2, #0
 8000f42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f46:	bf02      	ittt	eq
 8000f48:	0040      	lsleq	r0, r0, #1
 8000f4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4e:	3a01      	subeq	r2, #1
 8000f50:	d0f9      	beq.n	8000f46 <__aeabi_fmul+0xce>
 8000f52:	ea40 000c 	orr.w	r0, r0, ip
 8000f56:	f093 0f00 	teq	r3, #0
 8000f5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0049      	lsleq	r1, r1, #1
 8000f62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f66:	3b01      	subeq	r3, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fmul+0xe6>
 8000f6a:	ea41 010c 	orr.w	r1, r1, ip
 8000f6e:	e78f      	b.n	8000e90 <__aeabi_fmul+0x18>
 8000f70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f74:	ea92 0f0c 	teq	r2, ip
 8000f78:	bf18      	it	ne
 8000f7a:	ea93 0f0c 	teqne	r3, ip
 8000f7e:	d00a      	beq.n	8000f96 <__aeabi_fmul+0x11e>
 8000f80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f84:	bf18      	it	ne
 8000f86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f8a:	d1d8      	bne.n	8000f3e <__aeabi_fmul+0xc6>
 8000f8c:	ea80 0001 	eor.w	r0, r0, r1
 8000f90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f94:	4770      	bx	lr
 8000f96:	f090 0f00 	teq	r0, #0
 8000f9a:	bf17      	itett	ne
 8000f9c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000fa0:	4608      	moveq	r0, r1
 8000fa2:	f091 0f00 	teqne	r1, #0
 8000fa6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000faa:	d014      	beq.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fac:	ea92 0f0c 	teq	r2, ip
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_fmul+0x13e>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d10f      	bne.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fb6:	ea93 0f0c 	teq	r3, ip
 8000fba:	d103      	bne.n	8000fc4 <__aeabi_fmul+0x14c>
 8000fbc:	024b      	lsls	r3, r1, #9
 8000fbe:	bf18      	it	ne
 8000fc0:	4608      	movne	r0, r1
 8000fc2:	d108      	bne.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fc4:	ea80 0001 	eor.w	r0, r0, r1
 8000fc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd4:	4770      	bx	lr
 8000fd6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fda:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fde:	4770      	bx	lr

08000fe0 <__aeabi_fdiv>:
 8000fe0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fe4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fe8:	bf1e      	ittt	ne
 8000fea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fee:	ea92 0f0c 	teqne	r2, ip
 8000ff2:	ea93 0f0c 	teqne	r3, ip
 8000ff6:	d069      	beq.n	80010cc <__aeabi_fdiv+0xec>
 8000ff8:	eba2 0203 	sub.w	r2, r2, r3
 8000ffc:	ea80 0c01 	eor.w	ip, r0, r1
 8001000:	0249      	lsls	r1, r1, #9
 8001002:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001006:	d037      	beq.n	8001078 <__aeabi_fdiv+0x98>
 8001008:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800100c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001010:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001014:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001018:	428b      	cmp	r3, r1
 800101a:	bf38      	it	cc
 800101c:	005b      	lslcc	r3, r3, #1
 800101e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001022:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001026:	428b      	cmp	r3, r1
 8001028:	bf24      	itt	cs
 800102a:	1a5b      	subcs	r3, r3, r1
 800102c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001030:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001034:	bf24      	itt	cs
 8001036:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800103a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800103e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001042:	bf24      	itt	cs
 8001044:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001048:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800104c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001050:	bf24      	itt	cs
 8001052:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001056:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	bf18      	it	ne
 800105e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001062:	d1e0      	bne.n	8001026 <__aeabi_fdiv+0x46>
 8001064:	2afd      	cmp	r2, #253	; 0xfd
 8001066:	f63f af50 	bhi.w	8000f0a <__aeabi_fmul+0x92>
 800106a:	428b      	cmp	r3, r1
 800106c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001070:	bf08      	it	eq
 8001072:	f020 0001 	biceq.w	r0, r0, #1
 8001076:	4770      	bx	lr
 8001078:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800107c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001080:	327f      	adds	r2, #127	; 0x7f
 8001082:	bfc2      	ittt	gt
 8001084:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001088:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800108c:	4770      	bxgt	lr
 800108e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	3a01      	subs	r2, #1
 8001098:	e737      	b.n	8000f0a <__aeabi_fmul+0x92>
 800109a:	f092 0f00 	teq	r2, #0
 800109e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80010a2:	bf02      	ittt	eq
 80010a4:	0040      	lsleq	r0, r0, #1
 80010a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80010aa:	3a01      	subeq	r2, #1
 80010ac:	d0f9      	beq.n	80010a2 <__aeabi_fdiv+0xc2>
 80010ae:	ea40 000c 	orr.w	r0, r0, ip
 80010b2:	f093 0f00 	teq	r3, #0
 80010b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80010ba:	bf02      	ittt	eq
 80010bc:	0049      	lsleq	r1, r1, #1
 80010be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010c2:	3b01      	subeq	r3, #1
 80010c4:	d0f9      	beq.n	80010ba <__aeabi_fdiv+0xda>
 80010c6:	ea41 010c 	orr.w	r1, r1, ip
 80010ca:	e795      	b.n	8000ff8 <__aeabi_fdiv+0x18>
 80010cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010d0:	ea92 0f0c 	teq	r2, ip
 80010d4:	d108      	bne.n	80010e8 <__aeabi_fdiv+0x108>
 80010d6:	0242      	lsls	r2, r0, #9
 80010d8:	f47f af7d 	bne.w	8000fd6 <__aeabi_fmul+0x15e>
 80010dc:	ea93 0f0c 	teq	r3, ip
 80010e0:	f47f af70 	bne.w	8000fc4 <__aeabi_fmul+0x14c>
 80010e4:	4608      	mov	r0, r1
 80010e6:	e776      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 80010e8:	ea93 0f0c 	teq	r3, ip
 80010ec:	d104      	bne.n	80010f8 <__aeabi_fdiv+0x118>
 80010ee:	024b      	lsls	r3, r1, #9
 80010f0:	f43f af4c 	beq.w	8000f8c <__aeabi_fmul+0x114>
 80010f4:	4608      	mov	r0, r1
 80010f6:	e76e      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 80010f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010fc:	bf18      	it	ne
 80010fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001102:	d1ca      	bne.n	800109a <__aeabi_fdiv+0xba>
 8001104:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001108:	f47f af5c 	bne.w	8000fc4 <__aeabi_fmul+0x14c>
 800110c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001110:	f47f af3c 	bne.w	8000f8c <__aeabi_fmul+0x114>
 8001114:	e75f      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 8001116:	bf00      	nop

08001118 <__gesf2>:
 8001118:	f04f 3cff 	mov.w	ip, #4294967295
 800111c:	e006      	b.n	800112c <__cmpsf2+0x4>
 800111e:	bf00      	nop

08001120 <__lesf2>:
 8001120:	f04f 0c01 	mov.w	ip, #1
 8001124:	e002      	b.n	800112c <__cmpsf2+0x4>
 8001126:	bf00      	nop

08001128 <__cmpsf2>:
 8001128:	f04f 0c01 	mov.w	ip, #1
 800112c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001130:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001134:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001138:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800113c:	bf18      	it	ne
 800113e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001142:	d011      	beq.n	8001168 <__cmpsf2+0x40>
 8001144:	b001      	add	sp, #4
 8001146:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800114a:	bf18      	it	ne
 800114c:	ea90 0f01 	teqne	r0, r1
 8001150:	bf58      	it	pl
 8001152:	ebb2 0003 	subspl.w	r0, r2, r3
 8001156:	bf88      	it	hi
 8001158:	17c8      	asrhi	r0, r1, #31
 800115a:	bf38      	it	cc
 800115c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001160:	bf18      	it	ne
 8001162:	f040 0001 	orrne.w	r0, r0, #1
 8001166:	4770      	bx	lr
 8001168:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800116c:	d102      	bne.n	8001174 <__cmpsf2+0x4c>
 800116e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001172:	d105      	bne.n	8001180 <__cmpsf2+0x58>
 8001174:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001178:	d1e4      	bne.n	8001144 <__cmpsf2+0x1c>
 800117a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800117e:	d0e1      	beq.n	8001144 <__cmpsf2+0x1c>
 8001180:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <__aeabi_cfrcmple>:
 8001188:	4684      	mov	ip, r0
 800118a:	4608      	mov	r0, r1
 800118c:	4661      	mov	r1, ip
 800118e:	e7ff      	b.n	8001190 <__aeabi_cfcmpeq>

08001190 <__aeabi_cfcmpeq>:
 8001190:	b50f      	push	{r0, r1, r2, r3, lr}
 8001192:	f7ff ffc9 	bl	8001128 <__cmpsf2>
 8001196:	2800      	cmp	r0, #0
 8001198:	bf48      	it	mi
 800119a:	f110 0f00 	cmnmi.w	r0, #0
 800119e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080011a0 <__aeabi_fcmpeq>:
 80011a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a4:	f7ff fff4 	bl	8001190 <__aeabi_cfcmpeq>
 80011a8:	bf0c      	ite	eq
 80011aa:	2001      	moveq	r0, #1
 80011ac:	2000      	movne	r0, #0
 80011ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b2:	bf00      	nop

080011b4 <__aeabi_fcmplt>:
 80011b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b8:	f7ff ffea 	bl	8001190 <__aeabi_cfcmpeq>
 80011bc:	bf34      	ite	cc
 80011be:	2001      	movcc	r0, #1
 80011c0:	2000      	movcs	r0, #0
 80011c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c6:	bf00      	nop

080011c8 <__aeabi_fcmple>:
 80011c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011cc:	f7ff ffe0 	bl	8001190 <__aeabi_cfcmpeq>
 80011d0:	bf94      	ite	ls
 80011d2:	2001      	movls	r0, #1
 80011d4:	2000      	movhi	r0, #0
 80011d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011da:	bf00      	nop

080011dc <__aeabi_fcmpge>:
 80011dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011e0:	f7ff ffd2 	bl	8001188 <__aeabi_cfrcmple>
 80011e4:	bf94      	ite	ls
 80011e6:	2001      	movls	r0, #1
 80011e8:	2000      	movhi	r0, #0
 80011ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ee:	bf00      	nop

080011f0 <__aeabi_fcmpgt>:
 80011f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011f4:	f7ff ffc8 	bl	8001188 <__aeabi_cfrcmple>
 80011f8:	bf34      	ite	cc
 80011fa:	2001      	movcc	r0, #1
 80011fc:	2000      	movcs	r0, #0
 80011fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001202:	bf00      	nop

08001204 <__aeabi_fcmpun>:
 8001204:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001208:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800120c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001210:	d102      	bne.n	8001218 <__aeabi_fcmpun+0x14>
 8001212:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001216:	d108      	bne.n	800122a <__aeabi_fcmpun+0x26>
 8001218:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800121c:	d102      	bne.n	8001224 <__aeabi_fcmpun+0x20>
 800121e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001222:	d102      	bne.n	800122a <__aeabi_fcmpun+0x26>
 8001224:	f04f 0000 	mov.w	r0, #0
 8001228:	4770      	bx	lr
 800122a:	f04f 0001 	mov.w	r0, #1
 800122e:	4770      	bx	lr

08001230 <__aeabi_uldivmod>:
 8001230:	b953      	cbnz	r3, 8001248 <__aeabi_uldivmod+0x18>
 8001232:	b94a      	cbnz	r2, 8001248 <__aeabi_uldivmod+0x18>
 8001234:	2900      	cmp	r1, #0
 8001236:	bf08      	it	eq
 8001238:	2800      	cmpeq	r0, #0
 800123a:	bf1c      	itt	ne
 800123c:	f04f 31ff 	movne.w	r1, #4294967295
 8001240:	f04f 30ff 	movne.w	r0, #4294967295
 8001244:	f000 b9ae 	b.w	80015a4 <__aeabi_idiv0>
 8001248:	f1ad 0c08 	sub.w	ip, sp, #8
 800124c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001250:	f000 f83e 	bl	80012d0 <__udivmoddi4>
 8001254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800125c:	b004      	add	sp, #16
 800125e:	4770      	bx	lr

08001260 <__aeabi_d2lz>:
 8001260:	b538      	push	{r3, r4, r5, lr}
 8001262:	4605      	mov	r5, r0
 8001264:	460c      	mov	r4, r1
 8001266:	2200      	movs	r2, #0
 8001268:	2300      	movs	r3, #0
 800126a:	4628      	mov	r0, r5
 800126c:	4621      	mov	r1, r4
 800126e:	f7ff fc1f 	bl	8000ab0 <__aeabi_dcmplt>
 8001272:	b928      	cbnz	r0, 8001280 <__aeabi_d2lz+0x20>
 8001274:	4628      	mov	r0, r5
 8001276:	4621      	mov	r1, r4
 8001278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800127c:	f000 b80a 	b.w	8001294 <__aeabi_d2ulz>
 8001280:	4628      	mov	r0, r5
 8001282:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001286:	f000 f805 	bl	8001294 <__aeabi_d2ulz>
 800128a:	4240      	negs	r0, r0
 800128c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001290:	bd38      	pop	{r3, r4, r5, pc}
 8001292:	bf00      	nop

08001294 <__aeabi_d2ulz>:
 8001294:	b5d0      	push	{r4, r6, r7, lr}
 8001296:	2200      	movs	r2, #0
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <__aeabi_d2ulz+0x34>)
 800129a:	4606      	mov	r6, r0
 800129c:	460f      	mov	r7, r1
 800129e:	f7ff f995 	bl	80005cc <__aeabi_dmul>
 80012a2:	f7ff fc6b 	bl	8000b7c <__aeabi_d2uiz>
 80012a6:	4604      	mov	r4, r0
 80012a8:	f7ff f916 	bl	80004d8 <__aeabi_ui2d>
 80012ac:	2200      	movs	r2, #0
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <__aeabi_d2ulz+0x38>)
 80012b0:	f7ff f98c 	bl	80005cc <__aeabi_dmul>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4630      	mov	r0, r6
 80012ba:	4639      	mov	r1, r7
 80012bc:	f7fe ffce 	bl	800025c <__aeabi_dsub>
 80012c0:	f7ff fc5c 	bl	8000b7c <__aeabi_d2uiz>
 80012c4:	4621      	mov	r1, r4
 80012c6:	bdd0      	pop	{r4, r6, r7, pc}
 80012c8:	3df00000 	.word	0x3df00000
 80012cc:	41f00000 	.word	0x41f00000

080012d0 <__udivmoddi4>:
 80012d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012d4:	9e08      	ldr	r6, [sp, #32]
 80012d6:	460d      	mov	r5, r1
 80012d8:	4604      	mov	r4, r0
 80012da:	4688      	mov	r8, r1
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d14d      	bne.n	800137c <__udivmoddi4+0xac>
 80012e0:	428a      	cmp	r2, r1
 80012e2:	4694      	mov	ip, r2
 80012e4:	d968      	bls.n	80013b8 <__udivmoddi4+0xe8>
 80012e6:	fab2 f282 	clz	r2, r2
 80012ea:	b152      	cbz	r2, 8001302 <__udivmoddi4+0x32>
 80012ec:	fa01 f302 	lsl.w	r3, r1, r2
 80012f0:	f1c2 0120 	rsb	r1, r2, #32
 80012f4:	fa20 f101 	lsr.w	r1, r0, r1
 80012f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80012fc:	ea41 0803 	orr.w	r8, r1, r3
 8001300:	4094      	lsls	r4, r2
 8001302:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001306:	fbb8 f7f1 	udiv	r7, r8, r1
 800130a:	fa1f fe8c 	uxth.w	lr, ip
 800130e:	fb01 8817 	mls	r8, r1, r7, r8
 8001312:	fb07 f00e 	mul.w	r0, r7, lr
 8001316:	0c23      	lsrs	r3, r4, #16
 8001318:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800131c:	4298      	cmp	r0, r3
 800131e:	d90a      	bls.n	8001336 <__udivmoddi4+0x66>
 8001320:	eb1c 0303 	adds.w	r3, ip, r3
 8001324:	f107 35ff 	add.w	r5, r7, #4294967295
 8001328:	f080 811e 	bcs.w	8001568 <__udivmoddi4+0x298>
 800132c:	4298      	cmp	r0, r3
 800132e:	f240 811b 	bls.w	8001568 <__udivmoddi4+0x298>
 8001332:	3f02      	subs	r7, #2
 8001334:	4463      	add	r3, ip
 8001336:	1a1b      	subs	r3, r3, r0
 8001338:	fbb3 f0f1 	udiv	r0, r3, r1
 800133c:	fb01 3310 	mls	r3, r1, r0, r3
 8001340:	fb00 fe0e 	mul.w	lr, r0, lr
 8001344:	b2a4      	uxth	r4, r4
 8001346:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800134a:	45a6      	cmp	lr, r4
 800134c:	d90a      	bls.n	8001364 <__udivmoddi4+0x94>
 800134e:	eb1c 0404 	adds.w	r4, ip, r4
 8001352:	f100 33ff 	add.w	r3, r0, #4294967295
 8001356:	f080 8109 	bcs.w	800156c <__udivmoddi4+0x29c>
 800135a:	45a6      	cmp	lr, r4
 800135c:	f240 8106 	bls.w	800156c <__udivmoddi4+0x29c>
 8001360:	4464      	add	r4, ip
 8001362:	3802      	subs	r0, #2
 8001364:	2100      	movs	r1, #0
 8001366:	eba4 040e 	sub.w	r4, r4, lr
 800136a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800136e:	b11e      	cbz	r6, 8001378 <__udivmoddi4+0xa8>
 8001370:	2300      	movs	r3, #0
 8001372:	40d4      	lsrs	r4, r2
 8001374:	e9c6 4300 	strd	r4, r3, [r6]
 8001378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800137c:	428b      	cmp	r3, r1
 800137e:	d908      	bls.n	8001392 <__udivmoddi4+0xc2>
 8001380:	2e00      	cmp	r6, #0
 8001382:	f000 80ee 	beq.w	8001562 <__udivmoddi4+0x292>
 8001386:	2100      	movs	r1, #0
 8001388:	e9c6 0500 	strd	r0, r5, [r6]
 800138c:	4608      	mov	r0, r1
 800138e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001392:	fab3 f183 	clz	r1, r3
 8001396:	2900      	cmp	r1, #0
 8001398:	d14a      	bne.n	8001430 <__udivmoddi4+0x160>
 800139a:	42ab      	cmp	r3, r5
 800139c:	d302      	bcc.n	80013a4 <__udivmoddi4+0xd4>
 800139e:	4282      	cmp	r2, r0
 80013a0:	f200 80fc 	bhi.w	800159c <__udivmoddi4+0x2cc>
 80013a4:	1a84      	subs	r4, r0, r2
 80013a6:	eb65 0303 	sbc.w	r3, r5, r3
 80013aa:	2001      	movs	r0, #1
 80013ac:	4698      	mov	r8, r3
 80013ae:	2e00      	cmp	r6, #0
 80013b0:	d0e2      	beq.n	8001378 <__udivmoddi4+0xa8>
 80013b2:	e9c6 4800 	strd	r4, r8, [r6]
 80013b6:	e7df      	b.n	8001378 <__udivmoddi4+0xa8>
 80013b8:	b902      	cbnz	r2, 80013bc <__udivmoddi4+0xec>
 80013ba:	deff      	udf	#255	; 0xff
 80013bc:	fab2 f282 	clz	r2, r2
 80013c0:	2a00      	cmp	r2, #0
 80013c2:	f040 8091 	bne.w	80014e8 <__udivmoddi4+0x218>
 80013c6:	eba1 000c 	sub.w	r0, r1, ip
 80013ca:	2101      	movs	r1, #1
 80013cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013d0:	fa1f fe8c 	uxth.w	lr, ip
 80013d4:	fbb0 f3f7 	udiv	r3, r0, r7
 80013d8:	fb07 0013 	mls	r0, r7, r3, r0
 80013dc:	0c25      	lsrs	r5, r4, #16
 80013de:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80013e2:	fb0e f003 	mul.w	r0, lr, r3
 80013e6:	42a8      	cmp	r0, r5
 80013e8:	d908      	bls.n	80013fc <__udivmoddi4+0x12c>
 80013ea:	eb1c 0505 	adds.w	r5, ip, r5
 80013ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80013f2:	d202      	bcs.n	80013fa <__udivmoddi4+0x12a>
 80013f4:	42a8      	cmp	r0, r5
 80013f6:	f200 80ce 	bhi.w	8001596 <__udivmoddi4+0x2c6>
 80013fa:	4643      	mov	r3, r8
 80013fc:	1a2d      	subs	r5, r5, r0
 80013fe:	fbb5 f0f7 	udiv	r0, r5, r7
 8001402:	fb07 5510 	mls	r5, r7, r0, r5
 8001406:	fb0e fe00 	mul.w	lr, lr, r0
 800140a:	b2a4      	uxth	r4, r4
 800140c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001410:	45a6      	cmp	lr, r4
 8001412:	d908      	bls.n	8001426 <__udivmoddi4+0x156>
 8001414:	eb1c 0404 	adds.w	r4, ip, r4
 8001418:	f100 35ff 	add.w	r5, r0, #4294967295
 800141c:	d202      	bcs.n	8001424 <__udivmoddi4+0x154>
 800141e:	45a6      	cmp	lr, r4
 8001420:	f200 80b6 	bhi.w	8001590 <__udivmoddi4+0x2c0>
 8001424:	4628      	mov	r0, r5
 8001426:	eba4 040e 	sub.w	r4, r4, lr
 800142a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800142e:	e79e      	b.n	800136e <__udivmoddi4+0x9e>
 8001430:	f1c1 0720 	rsb	r7, r1, #32
 8001434:	408b      	lsls	r3, r1
 8001436:	fa22 fc07 	lsr.w	ip, r2, r7
 800143a:	ea4c 0c03 	orr.w	ip, ip, r3
 800143e:	fa25 fa07 	lsr.w	sl, r5, r7
 8001442:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001446:	fbba f8f9 	udiv	r8, sl, r9
 800144a:	fa20 f307 	lsr.w	r3, r0, r7
 800144e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001452:	408d      	lsls	r5, r1
 8001454:	fa1f fe8c 	uxth.w	lr, ip
 8001458:	431d      	orrs	r5, r3
 800145a:	fa00 f301 	lsl.w	r3, r0, r1
 800145e:	fb08 f00e 	mul.w	r0, r8, lr
 8001462:	0c2c      	lsrs	r4, r5, #16
 8001464:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001468:	42a0      	cmp	r0, r4
 800146a:	fa02 f201 	lsl.w	r2, r2, r1
 800146e:	d90b      	bls.n	8001488 <__udivmoddi4+0x1b8>
 8001470:	eb1c 0404 	adds.w	r4, ip, r4
 8001474:	f108 3aff 	add.w	sl, r8, #4294967295
 8001478:	f080 8088 	bcs.w	800158c <__udivmoddi4+0x2bc>
 800147c:	42a0      	cmp	r0, r4
 800147e:	f240 8085 	bls.w	800158c <__udivmoddi4+0x2bc>
 8001482:	f1a8 0802 	sub.w	r8, r8, #2
 8001486:	4464      	add	r4, ip
 8001488:	1a24      	subs	r4, r4, r0
 800148a:	fbb4 f0f9 	udiv	r0, r4, r9
 800148e:	fb09 4410 	mls	r4, r9, r0, r4
 8001492:	fb00 fe0e 	mul.w	lr, r0, lr
 8001496:	b2ad      	uxth	r5, r5
 8001498:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800149c:	45a6      	cmp	lr, r4
 800149e:	d908      	bls.n	80014b2 <__udivmoddi4+0x1e2>
 80014a0:	eb1c 0404 	adds.w	r4, ip, r4
 80014a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80014a8:	d26c      	bcs.n	8001584 <__udivmoddi4+0x2b4>
 80014aa:	45a6      	cmp	lr, r4
 80014ac:	d96a      	bls.n	8001584 <__udivmoddi4+0x2b4>
 80014ae:	3802      	subs	r0, #2
 80014b0:	4464      	add	r4, ip
 80014b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80014b6:	fba0 9502 	umull	r9, r5, r0, r2
 80014ba:	eba4 040e 	sub.w	r4, r4, lr
 80014be:	42ac      	cmp	r4, r5
 80014c0:	46c8      	mov	r8, r9
 80014c2:	46ae      	mov	lr, r5
 80014c4:	d356      	bcc.n	8001574 <__udivmoddi4+0x2a4>
 80014c6:	d053      	beq.n	8001570 <__udivmoddi4+0x2a0>
 80014c8:	2e00      	cmp	r6, #0
 80014ca:	d069      	beq.n	80015a0 <__udivmoddi4+0x2d0>
 80014cc:	ebb3 0208 	subs.w	r2, r3, r8
 80014d0:	eb64 040e 	sbc.w	r4, r4, lr
 80014d4:	fa22 f301 	lsr.w	r3, r2, r1
 80014d8:	fa04 f707 	lsl.w	r7, r4, r7
 80014dc:	431f      	orrs	r7, r3
 80014de:	40cc      	lsrs	r4, r1
 80014e0:	e9c6 7400 	strd	r7, r4, [r6]
 80014e4:	2100      	movs	r1, #0
 80014e6:	e747      	b.n	8001378 <__udivmoddi4+0xa8>
 80014e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80014ec:	f1c2 0120 	rsb	r1, r2, #32
 80014f0:	fa25 f301 	lsr.w	r3, r5, r1
 80014f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80014f8:	fa20 f101 	lsr.w	r1, r0, r1
 80014fc:	4095      	lsls	r5, r2
 80014fe:	430d      	orrs	r5, r1
 8001500:	fbb3 f1f7 	udiv	r1, r3, r7
 8001504:	fb07 3311 	mls	r3, r7, r1, r3
 8001508:	fa1f fe8c 	uxth.w	lr, ip
 800150c:	0c28      	lsrs	r0, r5, #16
 800150e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001512:	fb01 f30e 	mul.w	r3, r1, lr
 8001516:	4283      	cmp	r3, r0
 8001518:	fa04 f402 	lsl.w	r4, r4, r2
 800151c:	d908      	bls.n	8001530 <__udivmoddi4+0x260>
 800151e:	eb1c 0000 	adds.w	r0, ip, r0
 8001522:	f101 38ff 	add.w	r8, r1, #4294967295
 8001526:	d22f      	bcs.n	8001588 <__udivmoddi4+0x2b8>
 8001528:	4283      	cmp	r3, r0
 800152a:	d92d      	bls.n	8001588 <__udivmoddi4+0x2b8>
 800152c:	3902      	subs	r1, #2
 800152e:	4460      	add	r0, ip
 8001530:	1ac0      	subs	r0, r0, r3
 8001532:	fbb0 f3f7 	udiv	r3, r0, r7
 8001536:	fb07 0013 	mls	r0, r7, r3, r0
 800153a:	b2ad      	uxth	r5, r5
 800153c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001540:	fb03 f00e 	mul.w	r0, r3, lr
 8001544:	42a8      	cmp	r0, r5
 8001546:	d908      	bls.n	800155a <__udivmoddi4+0x28a>
 8001548:	eb1c 0505 	adds.w	r5, ip, r5
 800154c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001550:	d216      	bcs.n	8001580 <__udivmoddi4+0x2b0>
 8001552:	42a8      	cmp	r0, r5
 8001554:	d914      	bls.n	8001580 <__udivmoddi4+0x2b0>
 8001556:	3b02      	subs	r3, #2
 8001558:	4465      	add	r5, ip
 800155a:	1a28      	subs	r0, r5, r0
 800155c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001560:	e738      	b.n	80013d4 <__udivmoddi4+0x104>
 8001562:	4631      	mov	r1, r6
 8001564:	4630      	mov	r0, r6
 8001566:	e707      	b.n	8001378 <__udivmoddi4+0xa8>
 8001568:	462f      	mov	r7, r5
 800156a:	e6e4      	b.n	8001336 <__udivmoddi4+0x66>
 800156c:	4618      	mov	r0, r3
 800156e:	e6f9      	b.n	8001364 <__udivmoddi4+0x94>
 8001570:	454b      	cmp	r3, r9
 8001572:	d2a9      	bcs.n	80014c8 <__udivmoddi4+0x1f8>
 8001574:	ebb9 0802 	subs.w	r8, r9, r2
 8001578:	eb65 0e0c 	sbc.w	lr, r5, ip
 800157c:	3801      	subs	r0, #1
 800157e:	e7a3      	b.n	80014c8 <__udivmoddi4+0x1f8>
 8001580:	4643      	mov	r3, r8
 8001582:	e7ea      	b.n	800155a <__udivmoddi4+0x28a>
 8001584:	4628      	mov	r0, r5
 8001586:	e794      	b.n	80014b2 <__udivmoddi4+0x1e2>
 8001588:	4641      	mov	r1, r8
 800158a:	e7d1      	b.n	8001530 <__udivmoddi4+0x260>
 800158c:	46d0      	mov	r8, sl
 800158e:	e77b      	b.n	8001488 <__udivmoddi4+0x1b8>
 8001590:	4464      	add	r4, ip
 8001592:	3802      	subs	r0, #2
 8001594:	e747      	b.n	8001426 <__udivmoddi4+0x156>
 8001596:	3b02      	subs	r3, #2
 8001598:	4465      	add	r5, ip
 800159a:	e72f      	b.n	80013fc <__udivmoddi4+0x12c>
 800159c:	4608      	mov	r0, r1
 800159e:	e706      	b.n	80013ae <__udivmoddi4+0xde>
 80015a0:	4631      	mov	r1, r6
 80015a2:	e6e9      	b.n	8001378 <__udivmoddi4+0xa8>

080015a4 <__aeabi_idiv0>:
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop

080015a8 <uvp6_init>:
int (*uvp6_functions[UVP6_MSG_NUM_OF_FUNCTIONS])(uvp6* uvp6_obj,uint8_t* msg);
char*  uvp6_messages_strings[UVP6_MSG_NUM_OF_FUNCTIONS];
const char* uvp6_commands_strings[]={"$start:ACQ_CSCS_002H","$stop;\n","$stop;\n","$start:ACQ_CSCS_052L"};

void uvp6_init(uvp6* uvp6_obj,osMessageQId events_q_Handle)
{
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b092      	sub	sp, #72	; 0x48
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
	uvp6_messages_init(uvp6_obj);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f9ec 	bl	8001990 <uvp6_messages_init>

	uvp6_obj->power_status=UVP6_POWER_IS_UNKNOWN;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2202      	movs	r2, #2
 80015bc:	735a      	strb	r2, [r3, #13]

	//osMessageQDef(uvp6_events_q, 20, uint8_t);
	//uvp6_obj->events_q= osMessageCreate(osMessageQ(uvp6_events_q), NULL);

	uvp6_obj->events_q = events_q_Handle;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	609a      	str	r2, [r3, #8]

	osMessageQDef(uvp6_media_rx_q, 20, uint16_t);
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <uvp6_init+0x80>)
 80015c6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80015ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uvp6_obj->media_rx_messages_q= osMessageCreate(osMessageQ(uvp6_media_rx_q), NULL);
 80015d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f005 fec0 	bl	800735c <osMessageCreate>
 80015dc:	4602      	mov	r2, r0
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	601a      	str	r2, [r3, #0]

	osMessageQDef(uvp6_media_tx_q, 400, uint8_t);
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <uvp6_init+0x84>)
 80015e4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80015e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uvp6_obj->media_tx_q = osMessageCreate(osMessageQ(uvp6_media_tx_q), NULL);
 80015ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f005 feb1 	bl	800735c <osMessageCreate>
 80015fa:	4602      	mov	r2, r0
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	605a      	str	r2, [r3, #4]

	osThreadDef(uvp6_task, uvp6_loop, osPriorityNormal, 0, 512);
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <uvp6_init+0x88>)
 8001602:	f107 040c 	add.w	r4, r7, #12
 8001606:	461d      	mov	r5, r3
 8001608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(uvp6_task), uvp6_obj);
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4618      	mov	r0, r3
 800161c:	f005 fd87 	bl	800712e <osThreadCreate>
}
 8001620:	bf00      	nop
 8001622:	3748      	adds	r7, #72	; 0x48
 8001624:	46bd      	mov	sp, r7
 8001626:	bdb0      	pop	{r4, r5, r7, pc}
 8001628:	0800e4f4 	.word	0x0800e4f4
 800162c:	0800e504 	.word	0x0800e504
 8001630:	0800e514 	.word	0x0800e514

08001634 <uvp6_media_process_byte>:

void uvp6_media_process_byte(uvp6* uvp6_obj,uint8_t rx_byte)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	70fb      	strb	r3, [r7, #3]
	if(uvp6_obj->media_status==UVP6_MEDIA_READY)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7b9b      	ldrb	r3, [r3, #14]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d15f      	bne.n	8001708 <uvp6_media_process_byte+0xd4>
	{
		uvp6_obj->rx_buffer[uvp6_obj->rx_buffer_indx]=rx_byte;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f8b3 34c1 	ldrh.w	r3, [r3, #1217]	; 0x4c1
 800164e:	b29b      	uxth	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	78fa      	ldrb	r2, [r7, #3]
 8001658:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
		if(rx_byte=='\n')
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	2b0a      	cmp	r3, #10
 8001660:	d133      	bne.n	80016ca <uvp6_media_process_byte+0x96>
		{
			uvp6_obj->rx_buffer[uvp6_obj->rx_buffer_indx]=0x00;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f8b3 34c1 	ldrh.w	r3, [r3, #1217]	; 0x4c1
 8001668:	b29b      	uxth	r3, r3
 800166a:	461a      	mov	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	2200      	movs	r2, #0
 8001672:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			osMessagePut(uvp6_obj->media_rx_messages_q,uvp6_obj->rx_buffer_new_string_indx,1);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f8b3 34c3 	ldrh.w	r3, [r3, #1219]	; 0x4c3
 8001680:	b29b      	uxth	r3, r3
 8001682:	2201      	movs	r2, #1
 8001684:	4619      	mov	r1, r3
 8001686:	f005 fe91 	bl	80073ac <osMessagePut>
			if(uvp6_obj->rx_buffer_indx>UVP6_RX_BUFFER_THR) uvp6_obj->rx_buffer_indx=0;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f8b3 34c1 	ldrh.w	r3, [r3, #1217]	; 0x4c1
 8001690:	b29b      	uxth	r3, r3
 8001692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001696:	d907      	bls.n	80016a8 <uvp6_media_process_byte+0x74>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 24c1 	strb.w	r2, [r3, #1217]	; 0x4c1
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 24c2 	strb.w	r2, [r3, #1218]	; 0x4c2
 80016a6:	e008      	b.n	80016ba <uvp6_media_process_byte+0x86>
			else  uvp6_obj->rx_buffer_indx++;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f8b3 34c1 	ldrh.w	r3, [r3, #1217]	; 0x4c1
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	3301      	adds	r3, #1
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f8a3 24c1 	strh.w	r2, [r3, #1217]	; 0x4c1
			uvp6_obj->rx_buffer_new_string_indx=uvp6_obj->rx_buffer_indx;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f8b3 34c1 	ldrh.w	r3, [r3, #1217]	; 0x4c1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f8a3 24c3 	strh.w	r2, [r3, #1219]	; 0x4c3
 80016c8:	e008      	b.n	80016dc <uvp6_media_process_byte+0xa8>
		}
		else uvp6_obj->rx_buffer_indx++;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f8b3 34c1 	ldrh.w	r3, [r3, #1217]	; 0x4c1
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	3301      	adds	r3, #1
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f8a3 24c1 	strh.w	r2, [r3, #1217]	; 0x4c1
		if(uvp6_obj->rx_buffer_indx==UVP6_RX_BUFFER_SIZE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f8b3 34c1 	ldrh.w	r3, [r3, #1217]	; 0x4c1
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e8:	d11c      	bne.n	8001724 <uvp6_media_process_byte+0xf0>
		{
			uvp6_obj->rx_buffer_indx=0;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 24c1 	strb.w	r2, [r3, #1217]	; 0x4c1
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 24c2 	strb.w	r2, [r3, #1218]	; 0x4c2
			uvp6_obj->rx_buffer_new_string_indx=uvp6_obj->rx_buffer_indx;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f8b3 34c1 	ldrh.w	r3, [r3, #1217]	; 0x4c1
 80016fe:	b29a      	uxth	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f8a3 24c3 	strh.w	r2, [r3, #1219]	; 0x4c3
	else
	{
		uvp6_obj->rx_buffer_indx=0;
		uvp6_obj->rx_buffer_new_string_indx=uvp6_obj->rx_buffer_indx;
	}
}
 8001706:	e00d      	b.n	8001724 <uvp6_media_process_byte+0xf0>
		uvp6_obj->rx_buffer_indx=0;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 24c1 	strb.w	r2, [r3, #1217]	; 0x4c1
 8001710:	2200      	movs	r2, #0
 8001712:	f883 24c2 	strb.w	r2, [r3, #1218]	; 0x4c2
		uvp6_obj->rx_buffer_new_string_indx=uvp6_obj->rx_buffer_indx;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f8b3 34c1 	ldrh.w	r3, [r3, #1217]	; 0x4c1
 800171c:	b29a      	uxth	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f8a3 24c3 	strh.w	r2, [r3, #1219]	; 0x4c3
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <uvp6_loop>:

void uvp6_loop(uvp6* uvp6_obj)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 uint16_t msg_indx;
 for(;;)
 {
	if(xQueueReceive(uvp6_obj->media_rx_messages_q,&msg_indx,0))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f107 010a 	add.w	r1, r7, #10
 800173c:	2200      	movs	r2, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f006 faf8 	bl	8007d34 <xQueueReceive>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d008      	beq.n	800175c <uvp6_loop+0x30>
	{
		uint8_t* msg=uvp6_obj->rx_buffer+msg_indx;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	33c1      	adds	r3, #193	; 0xc1
 800174e:	897a      	ldrh	r2, [r7, #10]
 8001750:	4413      	add	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]
		uvp6_parse_message(uvp6_obj,msg);
 8001754:	68f9      	ldr	r1, [r7, #12]
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f8ca 	bl	80018f0 <uvp6_parse_message>
	}
	osDelay(1);
 800175c:	2001      	movs	r0, #1
 800175e:	f005 fd32 	bl	80071c6 <osDelay>
	if(xQueueReceive(uvp6_obj->media_rx_messages_q,&msg_indx,0))
 8001762:	e7e7      	b.n	8001734 <uvp6_loop+0x8>

08001764 <uvp6_media_get_byte>:

}


uint8_t uvp6_media_get_byte(uvp6* uvp6_obj,uint8_t* tx_byte)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(uvp6_obj->media_tx_q,0);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6859      	ldr	r1, [r3, #4]
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	2200      	movs	r2, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f005 fe57 	bl	800742c <osMessageGet>
	if(res.status==osEventMessage)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2b10      	cmp	r3, #16
 8001782:	d105      	bne.n	8001790 <uvp6_media_get_byte+0x2c>
     {
		*tx_byte=res.value.v;
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	701a      	strb	r2, [r3, #0]
		return UVP6_F_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	e000      	b.n	8001792 <uvp6_media_get_byte+0x2e>
     }
   return UVP6_F_ERR;
 8001790:	2301      	movs	r3, #1
}
 8001792:	4618      	mov	r0, r3
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <uvp6_send_cmd>:


void uvp6_send_cmd(uvp6* uvp6_obj,uint8_t cmd_id,void* arg)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b092      	sub	sp, #72	; 0x48
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	460b      	mov	r3, r1
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	72fb      	strb	r3, [r7, #11]
 char tmp_cmd[40];
 switch(cmd_id)
 80017aa:	7afb      	ldrb	r3, [r7, #11]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d041      	beq.n	8001834 <uvp6_send_cmd+0x98>
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	f300 8094 	bgt.w	80018de <uvp6_send_cmd+0x142>
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <uvp6_send_cmd+0x24>
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d074      	beq.n	80018a8 <uvp6_send_cmd+0x10c>
	   }

	 break;
 }

}
 80017be:	e08e      	b.n	80018de <uvp6_send_cmd+0x142>
       tmp_cmd[0]=0x00;
 80017c0:	2300      	movs	r3, #0
 80017c2:	753b      	strb	r3, [r7, #20]
       strcat(tmp_cmd,uvp6_commands_strings[UVP6_CMD_START_H_ACQ]);
 80017c4:	4b48      	ldr	r3, [pc, #288]	; (80018e8 <uvp6_send_cmd+0x14c>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4611      	mov	r1, r2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f009 f9a7 	bl	800ab22 <strcat>
       strcat(tmp_cmd,(char*)arg);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	4618      	mov	r0, r3
 80017dc:	f009 f9a1 	bl	800ab22 <strcat>
       strcat(tmp_cmd,";\n");
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fd2d 	bl	8000244 <strlen>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4413      	add	r3, r2
 80017f4:	4a3d      	ldr	r2, [pc, #244]	; (80018ec <uvp6_send_cmd+0x150>)
 80017f6:	8811      	ldrh	r1, [r2, #0]
 80017f8:	7892      	ldrb	r2, [r2, #2]
 80017fa:	8019      	strh	r1, [r3, #0]
 80017fc:	709a      	strb	r2, [r3, #2]
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 80017fe:	2300      	movs	r3, #0
 8001800:	647b      	str	r3, [r7, #68]	; 0x44
 8001802:	e00d      	b.n	8001820 <uvp6_send_cmd+0x84>
  		   osMessagePut(uvp6_obj->media_tx_q,tmp_cmd[i],0);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6858      	ldr	r0, [r3, #4]
 8001808:	f107 0214 	add.w	r2, r7, #20
 800180c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800180e:	4413      	add	r3, r2
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2200      	movs	r2, #0
 8001814:	4619      	mov	r1, r3
 8001816:	f005 fdc9 	bl	80073ac <osMessagePut>
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 800181a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800181c:	3301      	adds	r3, #1
 800181e:	647b      	str	r3, [r7, #68]	; 0x44
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fd0d 	bl	8000244 <strlen>
 800182a:	4602      	mov	r2, r0
 800182c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800182e:	429a      	cmp	r2, r3
 8001830:	d8e8      	bhi.n	8001804 <uvp6_send_cmd+0x68>
	 break;
 8001832:	e054      	b.n	80018de <uvp6_send_cmd+0x142>
       tmp_cmd[0]=0x00;
 8001834:	2300      	movs	r3, #0
 8001836:	753b      	strb	r3, [r7, #20]
       strcat(tmp_cmd,uvp6_commands_strings[UVP6_CMD_START_L_ACQ]);
 8001838:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <uvp6_send_cmd+0x14c>)
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f009 f96d 	bl	800ab22 <strcat>
       strcat(tmp_cmd,(char*)arg);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4618      	mov	r0, r3
 8001850:	f009 f967 	bl	800ab22 <strcat>
       strcat(tmp_cmd,";\n");
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fcf3 	bl	8000244 <strlen>
 800185e:	4603      	mov	r3, r0
 8001860:	461a      	mov	r2, r3
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4413      	add	r3, r2
 8001868:	4a20      	ldr	r2, [pc, #128]	; (80018ec <uvp6_send_cmd+0x150>)
 800186a:	8811      	ldrh	r1, [r2, #0]
 800186c:	7892      	ldrb	r2, [r2, #2]
 800186e:	8019      	strh	r1, [r3, #0]
 8001870:	709a      	strb	r2, [r3, #2]
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 8001872:	2300      	movs	r3, #0
 8001874:	643b      	str	r3, [r7, #64]	; 0x40
 8001876:	e00d      	b.n	8001894 <uvp6_send_cmd+0xf8>
  		   osMessagePut(uvp6_obj->media_tx_q,tmp_cmd[i],0);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6858      	ldr	r0, [r3, #4]
 800187c:	f107 0214 	add.w	r2, r7, #20
 8001880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001882:	4413      	add	r3, r2
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2200      	movs	r2, #0
 8001888:	4619      	mov	r1, r3
 800188a:	f005 fd8f 	bl	80073ac <osMessagePut>
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 800188e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001890:	3301      	adds	r3, #1
 8001892:	643b      	str	r3, [r7, #64]	; 0x40
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fcd3 	bl	8000244 <strlen>
 800189e:	4602      	mov	r2, r0
 80018a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d8e8      	bhi.n	8001878 <uvp6_send_cmd+0xdc>
	 break;
 80018a6:	e01a      	b.n	80018de <uvp6_send_cmd+0x142>
	   for(int i=0;i<strlen(uvp6_commands_strings[UVP6_CMD_STOP_ACQ]);i++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ac:	e00d      	b.n	80018ca <uvp6_send_cmd+0x12e>
		   osMessagePut(uvp6_obj->media_tx_q,*(uvp6_commands_strings[UVP6_CMD_STOP_ACQ]+i),0);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6858      	ldr	r0, [r3, #4]
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <uvp6_send_cmd+0x14c>)
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018b8:	4413      	add	r3, r2
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2200      	movs	r2, #0
 80018be:	4619      	mov	r1, r3
 80018c0:	f005 fd74 	bl	80073ac <osMessagePut>
	   for(int i=0;i<strlen(uvp6_commands_strings[UVP6_CMD_STOP_ACQ]);i++)
 80018c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018c6:	3301      	adds	r3, #1
 80018c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <uvp6_send_cmd+0x14c>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fcb8 	bl	8000244 <strlen>
 80018d4:	4602      	mov	r2, r0
 80018d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d8:	429a      	cmp	r2, r3
 80018da:	d8e8      	bhi.n	80018ae <uvp6_send_cmd+0x112>
	 break;
 80018dc:	bf00      	nop
}
 80018de:	bf00      	nop
 80018e0:	3748      	adds	r7, #72	; 0x48
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000000 	.word	0x20000000
 80018ec:	0800e530 	.word	0x0800e530

080018f0 <uvp6_parse_message>:
}



int uvp6_parse_message(uvp6* uvp6_obj,uint8_t* msg)
{
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,":,;");//header
 80018fa:	4922      	ldr	r1, [pc, #136]	; (8001984 <uvp6_parse_message+0x94>)
 80018fc:	6838      	ldr	r0, [r7, #0]
 80018fe:	f009 ff99 	bl	800b834 <strtok>
 8001902:	6138      	str	r0, [r7, #16]
	uint8_t* tmp_ptr;
	for(int i=0;i<UVP6_MSG_NUM_OF_FUNCTIONS;i++)
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e033      	b.n	8001972 <uvp6_parse_message+0x82>
	{
	   if(strlen(pch)==strlen(uvp6_messages_strings[i]))
 800190a:	6938      	ldr	r0, [r7, #16]
 800190c:	f7fe fc9a 	bl	8000244 <strlen>
 8001910:	4604      	mov	r4, r0
 8001912:	4a1d      	ldr	r2, [pc, #116]	; (8001988 <uvp6_parse_message+0x98>)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fc92 	bl	8000244 <strlen>
 8001920:	4603      	mov	r3, r0
 8001922:	429c      	cmp	r4, r3
 8001924:	d122      	bne.n	800196c <uvp6_parse_message+0x7c>
	   {
		  tmp_ptr=0;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
		  tmp_ptr=strstr(pch,uvp6_messages_strings[i]);
 800192a:	4a17      	ldr	r2, [pc, #92]	; (8001988 <uvp6_parse_message+0x98>)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	4619      	mov	r1, r3
 8001934:	6938      	ldr	r0, [r7, #16]
 8001936:	f009 f90b 	bl	800ab50 <strstr>
 800193a:	60f8      	str	r0, [r7, #12]
		  if(tmp_ptr)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d014      	beq.n	800196c <uvp6_parse_message+0x7c>
		   {
			 if(uvp6_functions[i](uvp6_obj,msg+strlen(tmp_ptr)+1)==UVP6_F_OK) return UVP6_F_OK;
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <uvp6_parse_message+0x9c>)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f7fe fc7a 	bl	8000244 <strlen>
 8001950:	4603      	mov	r3, r0
 8001952:	3301      	adds	r3, #1
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4619      	mov	r1, r3
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	47a0      	blx	r4
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <uvp6_parse_message+0x78>
 8001964:	2300      	movs	r3, #0
 8001966:	e008      	b.n	800197a <uvp6_parse_message+0x8a>
	         else return UVP6_F_ERR;
 8001968:	2301      	movs	r3, #1
 800196a:	e006      	b.n	800197a <uvp6_parse_message+0x8a>
	for(int i=0;i<UVP6_MSG_NUM_OF_FUNCTIONS;i++)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3301      	adds	r3, #1
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	2b06      	cmp	r3, #6
 8001976:	ddc8      	ble.n	800190a <uvp6_parse_message+0x1a>
		   }
		}
	 }
	 return UVP6_F_ERR;
 8001978:	2301      	movs	r3, #1

}
 800197a:	4618      	mov	r0, r3
 800197c:	371c      	adds	r7, #28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd90      	pop	{r4, r7, pc}
 8001982:	bf00      	nop
 8001984:	0800e534 	.word	0x0800e534
 8001988:	20000458 	.word	0x20000458
 800198c:	2000043c 	.word	0x2000043c

08001990 <uvp6_messages_init>:

void uvp6_messages_init(uvp6* uvp6_obj)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

	uvp6_functions[UVP6_MSG_HW_CONF] = UVP6_MSG_HW_CONF_f;
 8001998:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <uvp6_messages_init+0x68>)
 800199a:	4a18      	ldr	r2, [pc, #96]	; (80019fc <uvp6_messages_init+0x6c>)
 800199c:	601a      	str	r2, [r3, #0]
	uvp6_functions[UVP6_MSG_BLACK_DATA] = UVP6_MSG_BLACK_DATA_f;
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <uvp6_messages_init+0x68>)
 80019a0:	4a17      	ldr	r2, [pc, #92]	; (8001a00 <uvp6_messages_init+0x70>)
 80019a2:	605a      	str	r2, [r3, #4]
	uvp6_functions[UVP6_MSG_LPM_DATA] = UVP6_MSG_LPM_DATA_f;
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <uvp6_messages_init+0x68>)
 80019a6:	4a17      	ldr	r2, [pc, #92]	; (8001a04 <uvp6_messages_init+0x74>)
 80019a8:	609a      	str	r2, [r3, #8]
	uvp6_functions[UVP6_MSG_ACQ_CONF] = UVP6_MSG_ACQ_CONF_f;
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <uvp6_messages_init+0x68>)
 80019ac:	4a16      	ldr	r2, [pc, #88]	; (8001a08 <uvp6_messages_init+0x78>)
 80019ae:	60da      	str	r2, [r3, #12]
	uvp6_functions[UVP6_MSG_START_ACK] = UVP6_MSG_START_ACK_f;
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <uvp6_messages_init+0x68>)
 80019b2:	4a16      	ldr	r2, [pc, #88]	; (8001a0c <uvp6_messages_init+0x7c>)
 80019b4:	611a      	str	r2, [r3, #16]
	uvp6_functions[UVP6_MSG_START_ERR] = UVP6_MSG_START_ERR_f;
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <uvp6_messages_init+0x68>)
 80019b8:	4a15      	ldr	r2, [pc, #84]	; (8001a10 <uvp6_messages_init+0x80>)
 80019ba:	615a      	str	r2, [r3, #20]
	uvp6_functions[UVP6_MSG_STOP_ACK] = UVP6_MSG_STOP_ACK_f;
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <uvp6_messages_init+0x68>)
 80019be:	4a15      	ldr	r2, [pc, #84]	; (8001a14 <uvp6_messages_init+0x84>)
 80019c0:	619a      	str	r2, [r3, #24]

	uvp6_messages_strings[UVP6_MSG_HW_CONF] = "HW_CONF";
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <uvp6_messages_init+0x88>)
 80019c4:	4a15      	ldr	r2, [pc, #84]	; (8001a1c <uvp6_messages_init+0x8c>)
 80019c6:	601a      	str	r2, [r3, #0]
	uvp6_messages_strings[UVP6_MSG_BLACK_DATA] = "BLACK_DATA";
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <uvp6_messages_init+0x88>)
 80019ca:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <uvp6_messages_init+0x90>)
 80019cc:	605a      	str	r2, [r3, #4]
	uvp6_messages_strings[UVP6_MSG_LPM_DATA] = "LPM_DATA";
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <uvp6_messages_init+0x88>)
 80019d0:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <uvp6_messages_init+0x94>)
 80019d2:	609a      	str	r2, [r3, #8]
	uvp6_messages_strings[UVP6_MSG_ACQ_CONF] = "ACQ_CONF";
 80019d4:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <uvp6_messages_init+0x88>)
 80019d6:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <uvp6_messages_init+0x98>)
 80019d8:	60da      	str	r2, [r3, #12]
	uvp6_messages_strings[UVP6_MSG_START_ACK] = "$startack";
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <uvp6_messages_init+0x88>)
 80019dc:	4a13      	ldr	r2, [pc, #76]	; (8001a2c <uvp6_messages_init+0x9c>)
 80019de:	611a      	str	r2, [r3, #16]
	uvp6_messages_strings[UVP6_MSG_START_ERR] = "$starterr";
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <uvp6_messages_init+0x88>)
 80019e2:	4a13      	ldr	r2, [pc, #76]	; (8001a30 <uvp6_messages_init+0xa0>)
 80019e4:	615a      	str	r2, [r3, #20]
	uvp6_messages_strings[UVP6_MSG_STOP_ACK] = "$stopack";
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <uvp6_messages_init+0x88>)
 80019e8:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <uvp6_messages_init+0xa4>)
 80019ea:	619a      	str	r2, [r3, #24]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	2000043c 	.word	0x2000043c
 80019fc:	08001a39 	.word	0x08001a39
 8001a00:	08001a5b 	.word	0x08001a5b
 8001a04:	08001a71 	.word	0x08001a71
 8001a08:	08001b89 	.word	0x08001b89
 8001a0c:	08001bab 	.word	0x08001bab
 8001a10:	08001bcd 	.word	0x08001bcd
 8001a14:	08001c11 	.word	0x08001c11
 8001a18:	20000458 	.word	0x20000458
 8001a1c:	0800e538 	.word	0x0800e538
 8001a20:	0800e540 	.word	0x0800e540
 8001a24:	0800e54c 	.word	0x0800e54c
 8001a28:	0800e558 	.word	0x0800e558
 8001a2c:	0800e564 	.word	0x0800e564
 8001a30:	0800e570 	.word	0x0800e570
 8001a34:	0800e57c 	.word	0x0800e57c

08001a38 <UVP6_MSG_HW_CONF_f>:


int UVP6_MSG_HW_CONF_f(uvp6* uvp6_obj,uint8_t* msg)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
   osMessagePut(uvp6_obj->events_q,UVP6_EVNT_BOOTED,1);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2201      	movs	r2, #1
 8001a48:	2164      	movs	r1, #100	; 0x64
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f005 fcae 	bl	80073ac <osMessagePut>
   return UVP6_F_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <UVP6_MSG_BLACK_DATA_f>:
int UVP6_MSG_BLACK_DATA_f(uvp6* uvp6_obj,uint8_t* msg)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
	return UVP6_F_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <UVP6_MSG_LPM_DATA_f>:
int UVP6_MSG_LPM_DATA_f(uvp6* uvp6_obj,uint8_t* msg)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,",");//pressure
 8001a7a:	4941      	ldr	r1, [pc, #260]	; (8001b80 <UVP6_MSG_LPM_DATA_f+0x110>)
 8001a7c:	6838      	ldr	r0, [r7, #0]
 8001a7e:	f009 fed9 	bl	800b834 <strtok>
 8001a82:	60f8      	str	r0, [r7, #12]
	uvp6_obj->lpm_data.pressure=strtof(pch,NULL);
 8001a84:	2100      	movs	r1, #0
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f009 fe82 	bl	800b790 <strtof>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f8c3 200f 	str.w	r2, [r3, #15]
	pch = strtok (NULL,",");//date
 8001a94:	493a      	ldr	r1, [pc, #232]	; (8001b80 <UVP6_MSG_LPM_DATA_f+0x110>)
 8001a96:	2000      	movs	r0, #0
 8001a98:	f009 fecc 	bl	800b834 <strtok>
 8001a9c:	60f8      	str	r0, [r7, #12]
	strcpy(uvp6_obj->lpm_data.date,pch);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3313      	adds	r3, #19
 8001aa2:	68f9      	ldr	r1, [r7, #12]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f009 f84b 	bl	800ab40 <strcpy>
	pch = strtok (NULL,",");//time
 8001aaa:	4935      	ldr	r1, [pc, #212]	; (8001b80 <UVP6_MSG_LPM_DATA_f+0x110>)
 8001aac:	2000      	movs	r0, #0
 8001aae:	f009 fec1 	bl	800b834 <strtok>
 8001ab2:	60f8      	str	r0, [r7, #12]
	strcpy(uvp6_obj->lpm_data.time,pch);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	331d      	adds	r3, #29
 8001ab8:	68f9      	ldr	r1, [r7, #12]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f009 f840 	bl	800ab40 <strcpy>
	pch = strtok (NULL,",");//num_of_images
 8001ac0:	492f      	ldr	r1, [pc, #188]	; (8001b80 <UVP6_MSG_LPM_DATA_f+0x110>)
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f009 feb6 	bl	800b834 <strtok>
 8001ac8:	60f8      	str	r0, [r7, #12]
	uvp6_obj->lpm_data.number_of_images=strtoul(pch,NULL,0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f00a f804 	bl	800badc <strtoul>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
	pch = strtok (NULL,",");//temperature
 8001ada:	4929      	ldr	r1, [pc, #164]	; (8001b80 <UVP6_MSG_LPM_DATA_f+0x110>)
 8001adc:	2000      	movs	r0, #0
 8001ade:	f009 fea9 	bl	800b834 <strtok>
 8001ae2:	60f8      	str	r0, [r7, #12]
	uvp6_obj->lpm_data.temperature=strtof(pch,NULL);
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f009 fe52 	bl	800b790 <strtof>
 8001aec:	4602      	mov	r2, r0
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
	//data
	for(int i=0;i<UVP6_NUM_OF_CATEGORIES;i++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	e016      	b.n	8001b26 <UVP6_MSG_LPM_DATA_f+0xb6>
	{
		if(pch = strtok (NULL,","))//data i
 8001af8:	4921      	ldr	r1, [pc, #132]	; (8001b80 <UVP6_MSG_LPM_DATA_f+0x110>)
 8001afa:	2000      	movs	r0, #0
 8001afc:	f009 fe9a 	bl	800b834 <strtok>
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00b      	beq.n	8001b20 <UVP6_MSG_LPM_DATA_f+0xb0>
		{
		 uvp6_obj->lpm_data.data[i]=strtoul(pch,NULL,0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f009 ffe5 	bl	800badc <strtoul>
 8001b12:	4601      	mov	r1, r0
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3308      	adds	r3, #8
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	60d9      	str	r1, [r3, #12]
	for(int i=0;i<UVP6_NUM_OF_CATEGORIES;i++)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3301      	adds	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2b11      	cmp	r3, #17
 8001b2a:	dde5      	ble.n	8001af8 <UVP6_MSG_LPM_DATA_f+0x88>
		}

	}
	//grey levels
	for(int i=0;i<UVP6_NUM_OF_CATEGORIES;i++)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	e016      	b.n	8001b60 <UVP6_MSG_LPM_DATA_f+0xf0>
	{
		if(pch = strtok (NULL,",;"))//grey level i
 8001b32:	4914      	ldr	r1, [pc, #80]	; (8001b84 <UVP6_MSG_LPM_DATA_f+0x114>)
 8001b34:	2000      	movs	r0, #0
 8001b36:	f009 fe7d 	bl	800b834 <strtok>
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00b      	beq.n	8001b5a <UVP6_MSG_LPM_DATA_f+0xea>
		{
		 uvp6_obj->lpm_data.grey_levels[i]=strtoul(pch,NULL,0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f009 ffc8 	bl	800badc <strtoul>
 8001b4c:	4601      	mov	r1, r0
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	331a      	adds	r3, #26
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	60d9      	str	r1, [r3, #12]
	for(int i=0;i<UVP6_NUM_OF_CATEGORIES;i++)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	2b11      	cmp	r3, #17
 8001b64:	dde5      	ble.n	8001b32 <UVP6_MSG_LPM_DATA_f+0xc2>
		}
	}

	osMessagePut(uvp6_obj->events_q,UVP6_EVNT_LPM_DATA_RCVD,1);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	2165      	movs	r1, #101	; 0x65
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f005 fc1c 	bl	80073ac <osMessagePut>
	return UVP6_F_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	0800e588 	.word	0x0800e588
 8001b84:	0800e58c 	.word	0x0800e58c

08001b88 <UVP6_MSG_ACQ_CONF_f>:

int UVP6_MSG_ACQ_CONF_f(uvp6* uvp6_obj,uint8_t* msg)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
	osMessagePut(uvp6_obj->events_q,UVP6_EVNT_ACQ_CONF_RCVD,1);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2201      	movs	r2, #1
 8001b98:	2167      	movs	r1, #103	; 0x67
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f005 fc06 	bl	80073ac <osMessagePut>
	//uvp6_obj->status=UVP6_IDLE;
	return UVP6_F_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <UVP6_MSG_START_ACK_f>:


int UVP6_MSG_START_ACK_f(uvp6* uvp6_obj,uint8_t* msg)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
	osMessagePut(uvp6_obj->events_q,UVP6_EVNT_START_ACK_RCVD,1);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2168      	movs	r1, #104	; 0x68
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f005 fbf5 	bl	80073ac <osMessagePut>
	return UVP6_F_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <UVP6_MSG_START_ERR_f>:

int UVP6_MSG_START_ERR_f(uvp6* uvp6_obj,uint8_t* msg)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,";");//error num
 8001bd6:	490d      	ldr	r1, [pc, #52]	; (8001c0c <UVP6_MSG_START_ERR_f+0x40>)
 8001bd8:	6838      	ldr	r0, [r7, #0]
 8001bda:	f009 fe2b 	bl	800b834 <strtok>
 8001bde:	60f8      	str	r0, [r7, #12]
	uvp6_obj->start_error=strtol(pch,NULL,10);
 8001be0:	220a      	movs	r2, #10
 8001be2:	2100      	movs	r1, #0
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f009 fefd 	bl	800b9e4 <strtol>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	osMessagePut(uvp6_obj->events_q,UVP6_EVNT_START_ERR_RCVD,1);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	2169      	movs	r1, #105	; 0x69
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f005 fbd5 	bl	80073ac <osMessagePut>
	return UVP6_F_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	0800e590 	.word	0x0800e590

08001c10 <UVP6_MSG_STOP_ACK_f>:

int UVP6_MSG_STOP_ACK_f(uvp6* uvp6_obj,uint8_t* msg)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
	osMessagePut(uvp6_obj->events_q,UVP6_EVNT_STOP_ACK_RCVD,1);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	216a      	movs	r1, #106	; 0x6a
 8001c22:	4618      	mov	r0, r3
 8001c24:	f005 fbc2 	bl	80073ac <osMessagePut>
	return UVP6_F_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <base64encode>:
 */
#include "base64.h"
#include "string.h"

int base64encode(void* data_buf, uint32_t dataLength, char* result, uint32_t resultSize)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b09c      	sub	sp, #112	; 0x70
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	603b      	str	r3, [r7, #0]
   const char base64chars[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
 8001c42:	4a6c      	ldr	r2, [pc, #432]	; (8001df4 <base64encode+0x1c0>)
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	4611      	mov	r1, r2
 8001c4a:	2241      	movs	r2, #65	; 0x41
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f008 f939 	bl	8009ec4 <memcpy>
   uint8_t *data = ( uint8_t *)data_buf;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	65fb      	str	r3, [r7, #92]	; 0x5c
   size_t resultIndex = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	66fb      	str	r3, [r7, #108]	; 0x6c
   size_t x;
   uint32_t n = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	667b      	str	r3, [r7, #100]	; 0x64
   int padCount = dataLength % 3;
 8001c5e:	68b9      	ldr	r1, [r7, #8]
 8001c60:	4b65      	ldr	r3, [pc, #404]	; (8001df8 <base64encode+0x1c4>)
 8001c62:	fba3 2301 	umull	r2, r3, r3, r1
 8001c66:	085a      	lsrs	r2, r3, #1
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	1aca      	subs	r2, r1, r3
 8001c70:	663a      	str	r2, [r7, #96]	; 0x60
   uint8_t n0, n1, n2, n3;

   for (x = 0; x < dataLength; x += 3)
 8001c72:	2300      	movs	r3, #0
 8001c74:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c76:	e091      	b.n	8001d9c <base64encode+0x168>
   {
      n = ((uint32_t)data[x]) << 16;
 8001c78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001c7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c7c:	4413      	add	r3, r2
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	041b      	lsls	r3, r3, #16
 8001c82:	667b      	str	r3, [r7, #100]	; 0x64
      if((x+1) < dataLength)
 8001c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c86:	3301      	adds	r3, #1
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d908      	bls.n	8001ca0 <base64encode+0x6c>
         n += ((uint32_t)data[x+1]) << 8;
 8001c8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c90:	3301      	adds	r3, #1
 8001c92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001c94:	4413      	add	r3, r2
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	021b      	lsls	r3, r3, #8
 8001c9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c9c:	4413      	add	r3, r2
 8001c9e:	667b      	str	r3, [r7, #100]	; 0x64
      if((x+2) < dataLength)
 8001ca0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d908      	bls.n	8001cbc <base64encode+0x88>
         n += data[x+2];
 8001caa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cac:	3302      	adds	r3, #2
 8001cae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001cb0:	4413      	add	r3, r2
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cb8:	4413      	add	r3, r2
 8001cba:	667b      	str	r3, [r7, #100]	; 0x64

      n0 = (uint8_t)(n >> 18) & 63;
 8001cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cbe:	0c9b      	lsrs	r3, r3, #18
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cc6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
      n1 = (uint8_t)(n >> 12) & 63;
 8001cca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ccc:	0b1b      	lsrs	r3, r3, #12
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cd4:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
      n2 = (uint8_t)(n >> 6) & 63;
 8001cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cda:	099b      	lsrs	r3, r3, #6
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ce2:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
      n3 = (uint8_t)n & 63;
 8001ce6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cee:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

      if(resultIndex >= resultSize) return 1;   /* indicate failure: buffer too small */
 8001cf2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d301      	bcc.n	8001cfe <base64encode+0xca>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e076      	b.n	8001dec <base64encode+0x1b8>
      result[resultIndex++] = base64chars[n0];
 8001cfe:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d04:	1c59      	adds	r1, r3, #1
 8001d06:	66f9      	str	r1, [r7, #108]	; 0x6c
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3270      	adds	r2, #112	; 0x70
 8001d0e:	443a      	add	r2, r7
 8001d10:	f812 2c5c 	ldrb.w	r2, [r2, #-92]
 8001d14:	701a      	strb	r2, [r3, #0]
      if(resultIndex >= resultSize) return 1;   /* indicate failure: buffer too small */
 8001d16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d301      	bcc.n	8001d22 <base64encode+0xee>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e064      	b.n	8001dec <base64encode+0x1b8>
      result[resultIndex++] = base64chars[n1];
 8001d22:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 8001d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d28:	1c59      	adds	r1, r3, #1
 8001d2a:	66f9      	str	r1, [r7, #108]	; 0x6c
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	440b      	add	r3, r1
 8001d30:	3270      	adds	r2, #112	; 0x70
 8001d32:	443a      	add	r2, r7
 8001d34:	f812 2c5c 	ldrb.w	r2, [r2, #-92]
 8001d38:	701a      	strb	r2, [r3, #0]

      if((x+1) < dataLength)
 8001d3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d911      	bls.n	8001d68 <base64encode+0x134>
      {
         if(resultIndex >= resultSize) return 1;   /* indicate failure: buffer too small */
 8001d44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d301      	bcc.n	8001d50 <base64encode+0x11c>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e04d      	b.n	8001dec <base64encode+0x1b8>
         result[resultIndex++] = base64chars[n2];
 8001d50:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8001d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d56:	1c59      	adds	r1, r3, #1
 8001d58:	66f9      	str	r1, [r7, #108]	; 0x6c
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3270      	adds	r2, #112	; 0x70
 8001d60:	443a      	add	r2, r7
 8001d62:	f812 2c5c 	ldrb.w	r2, [r2, #-92]
 8001d66:	701a      	strb	r2, [r3, #0]
      }

      if((x+2) < dataLength)
 8001d68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d911      	bls.n	8001d96 <base64encode+0x162>
      {
         if(resultIndex >= resultSize) return 1;   /* indicate failure: buffer too small */
 8001d72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d301      	bcc.n	8001d7e <base64encode+0x14a>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e036      	b.n	8001dec <base64encode+0x1b8>
         result[resultIndex++] = base64chars[n3];
 8001d7e:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8001d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d84:	1c59      	adds	r1, r3, #1
 8001d86:	66f9      	str	r1, [r7, #108]	; 0x6c
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	440b      	add	r3, r1
 8001d8c:	3270      	adds	r2, #112	; 0x70
 8001d8e:	443a      	add	r2, r7
 8001d90:	f812 2c5c 	ldrb.w	r2, [r2, #-92]
 8001d94:	701a      	strb	r2, [r3, #0]
   for (x = 0; x < dataLength; x += 3)
 8001d96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d98:	3303      	adds	r3, #3
 8001d9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	f4ff af69 	bcc.w	8001c78 <base64encode+0x44>
      }
   }

   if (padCount > 0)
 8001da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	dd13      	ble.n	8001dd4 <base64encode+0x1a0>
   {
      for (; padCount < 3; padCount++)
 8001dac:	e00f      	b.n	8001dce <base64encode+0x19a>
      {
         if(resultIndex >= resultSize) return 1;   /* indicate failure: buffer too small */
 8001dae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d301      	bcc.n	8001dba <base64encode+0x186>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e018      	b.n	8001dec <base64encode+0x1b8>
         result[resultIndex++] = '=';
 8001dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	223d      	movs	r2, #61	; 0x3d
 8001dc6:	701a      	strb	r2, [r3, #0]
      for (; padCount < 3; padCount++)
 8001dc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dca:	3301      	adds	r3, #1
 8001dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8001dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	ddec      	ble.n	8001dae <base64encode+0x17a>
      }
   }
   if(resultIndex >= resultSize) return 1;   /* indicate failure: buffer too small */
 8001dd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d301      	bcc.n	8001de0 <base64encode+0x1ac>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e005      	b.n	8001dec <base64encode+0x1b8>
   result[resultIndex] = 0;
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de4:	4413      	add	r3, r2
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
   return 0;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3770      	adds	r7, #112	; 0x70
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	0800e594 	.word	0x0800e594
 8001df8:	aaaaaaab 	.word	0xaaaaaaab

08001dfc <calc_XOR>:

uint8_t calc_XOR(char* buffer,uint32_t size)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
	uint8_t xor=buffer[0];
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	73fb      	strb	r3, [r7, #15]
	for(int i=1;i<size;i++)
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	e009      	b.n	8001e26 <calc_XOR+0x2a>
	{
		xor=xor^buffer[i];
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	4413      	add	r3, r2
 8001e18:	781a      	ldrb	r2, [r3, #0]
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	4053      	eors	r3, r2
 8001e1e:	73fb      	strb	r3, [r7, #15]
	for(int i=1;i<size;i++)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	3301      	adds	r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d8f1      	bhi.n	8001e12 <calc_XOR+0x16>
	}

	return xor;
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr

08001e3a <disp_proc_get_event>:

#include "disp_proc.h"


F_RES disp_proc_get_event(proc_dispatcher* self_object,uint32_t* event)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(self_object->events_q_Handle,1);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4618      	mov	r0, r3
 8001e52:	f005 faeb 	bl	800742c <osMessageGet>
	if(res.status==osEventMessage){
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b10      	cmp	r3, #16
 8001e5a:	d104      	bne.n	8001e66 <disp_proc_get_event+0x2c>
		*event=res.value.v;
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	601a      	str	r2, [r3, #0]
		return F_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e004      	b.n	8001e70 <disp_proc_get_event+0x36>
	}
	else  if(res.status==osEventTimeout)return F_TIMEOUT;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2b40      	cmp	r3, #64	; 0x40
 8001e6a:	d101      	bne.n	8001e70 <disp_proc_get_event+0x36>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e7ff      	b.n	8001e70 <disp_proc_get_event+0x36>
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <disp_proc_send_event>:

F_RES disp_proc_send_event(proc_dispatcher* self_object,osMessageQId out_Q,uint32_t event)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
	if(osMessagePut(out_Q,(uint32_t)event,1))
 8001e84:	2201      	movs	r2, #1
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	68b8      	ldr	r0, [r7, #8]
 8001e8a:	f005 fa8f 	bl	80073ac <osMessagePut>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <disp_proc_send_event+0x20>
	{
     return F_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	e000      	b.n	8001e9a <disp_proc_send_event+0x22>
	}
	return F_ERR;
 8001e98:	2301      	movs	r3, #1
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <disp_proc_init>:




void disp_proc_init(proc_dispatcher* self_object,osMessageQId workers_cmd_q_Handle,osMessageQId events_q_Handle)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
	self_object->workers_cmd_q_Handle=workers_cmd_q_Handle;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	self_object->events_q_Handle=events_q_Handle;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	fsm_init();
 8001ebe:	f001 fa89 	bl	80033d4 <fsm_init>
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <disp_proc_init_func>:

void disp_proc_init_func(proc_dispatcher* self_object,uint32_t proc_ID,void* func_ptr,
		osMessageQId inQ, proc_queue_gen_flag in_gen_flag , void* proc_self_object,uint32_t events_num,uint32_t* evnt)
{
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b089      	sub	sp, #36	; 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	603b      	str	r3, [r7, #0]

	if(in_gen_flag==PROC_CREATE_NEW_Q){
 8001eda:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d113      	bne.n	8001f0a <disp_proc_init_func+0x3e>
		osMessageQDef(proc_func_in_q, DISP_PROC_Q_LEN, uint32_t);
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <disp_proc_init_func+0xac>)
 8001ee4:	f107 0410 	add.w	r4, r7, #16
 8001ee8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		self_object->processes[proc_ID].proc_arg.inQ_handle = osMessageCreate(osMessageQ(proc_func_in_q), NULL);
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f005 fa31 	bl	800735c <osMessageCreate>
 8001efa:	4601      	mov	r1, r0
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	015b      	lsls	r3, r3, #5
 8001f02:	4413      	add	r3, r2
 8001f04:	3308      	adds	r3, #8
 8001f06:	6019      	str	r1, [r3, #0]
 8001f08:	e006      	b.n	8001f18 <disp_proc_init_func+0x4c>
	}
	else{
		self_object->processes[proc_ID].proc_arg.inQ_handle = inQ;
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	015b      	lsls	r3, r3, #5
 8001f10:	4413      	add	r3, r2
 8001f12:	3308      	adds	r3, #8
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	601a      	str	r2, [r3, #0]
	}

	self_object->processes[proc_ID].proc_arg.outQ_handle = self_object->events_q_Handle;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8001f1e:	68f9      	ldr	r1, [r7, #12]
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	015b      	lsls	r3, r3, #5
 8001f24:	440b      	add	r3, r1
 8001f26:	330c      	adds	r3, #12
 8001f28:	601a      	str	r2, [r3, #0]

	self_object->processes[proc_ID].proc_arg.func_self_object=proc_self_object;
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	015b      	lsls	r3, r3, #5
 8001f30:	4413      	add	r3, r2
 8001f32:	3304      	adds	r3, #4
 8001f34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f36:	601a      	str	r2, [r3, #0]
	self_object->processes[proc_ID].proc_func_ptr=func_ptr;
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	68f9      	ldr	r1, [r7, #12]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	015b      	lsls	r3, r3, #5
 8001f40:	440b      	add	r3, r1
 8001f42:	601a      	str	r2, [r3, #0]
	self_object->processes[proc_ID].events.size=events_num;
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	015b      	lsls	r3, r3, #5
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3318      	adds	r3, #24
 8001f4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f50:	601a      	str	r2, [r3, #0]
	self_object->processes[proc_ID].events.evnt=evnt;
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	015b      	lsls	r3, r3, #5
 8001f58:	4413      	add	r3, r2
 8001f5a:	331c      	adds	r3, #28
 8001f5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f5e:	601a      	str	r2, [r3, #0]
	self_object->processes[proc_ID].state=PROC_STOPPED;
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	015b      	lsls	r3, r3, #5
 8001f66:	4413      	add	r3, r2
 8001f68:	3314      	adds	r3, #20
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
}
 8001f6e:	bf00      	nop
 8001f70:	3724      	adds	r7, #36	; 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd90      	pop	{r4, r7, pc}
 8001f76:	bf00      	nop
 8001f78:	0800e5d8 	.word	0x0800e5d8

08001f7c <disp_proc_start>:

F_RES  disp_proc_start(proc_dispatcher* self_object,uint32_t proc_ID,void* func_args)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
	if(self_object->processes[proc_ID].state!=PROC_STARTED&&self_object->processes[proc_ID].state!=PROC_START_PENDING){
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	015b      	lsls	r3, r3, #5
 8001f8e:	4413      	add	r3, r2
 8001f90:	3314      	adds	r3, #20
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d01f      	beq.n	8001fd8 <disp_proc_start+0x5c>
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	015b      	lsls	r3, r3, #5
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3314      	adds	r3, #20
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d017      	beq.n	8001fd8 <disp_proc_start+0x5c>
	  self_object->processes[proc_ID].proc_arg.func_args=func_args;
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	015b      	lsls	r3, r3, #5
 8001fae:	4413      	add	r3, r2
 8001fb0:	3310      	adds	r3, #16
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	601a      	str	r2, [r3, #0]
	  self_object->processes[proc_ID].state=PROC_START_PENDING;
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	015b      	lsls	r3, r3, #5
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3314      	adds	r3, #20
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	701a      	strb	r2, [r3, #0]
	  osMessagePut(self_object->workers_cmd_q_Handle,proc_ID,1);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8001fca:	2201      	movs	r2, #1
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f005 f9ec 	bl	80073ac <osMessagePut>
	  return F_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e000      	b.n	8001fda <disp_proc_start+0x5e>
	}
	return F_ERR;
 8001fd8:	2301      	movs	r3, #1
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <disp_proc_execute>:

void disp_proc_execute(proc_dispatcher* self_object,uint32_t proc_ID)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
	self_object->processes[proc_ID].state=PROC_STARTED;
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	015b      	lsls	r3, r3, #5
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3314      	adds	r3, #20
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
	self_object->processes[proc_ID].proc_func_ptr(&self_object->processes[proc_ID].proc_arg);
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	015b      	lsls	r3, r3, #5
 8002000:	4413      	add	r3, r2
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	0152      	lsls	r2, r2, #5
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	440a      	add	r2, r1
 800200c:	3204      	adds	r2, #4
 800200e:	4610      	mov	r0, r2
 8002010:	4798      	blx	r3
    //move dependent event from in to out here
	self_object->processes[proc_ID].state=PROC_STOPPED;
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	015b      	lsls	r3, r3, #5
 8002018:	4413      	add	r3, r2
 800201a:	3314      	adds	r3, #20
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <disp_proc_set_EA_table>:

void disp_proc_set_EA_table(proc_dispatcher* self_object,EA_table_t*  EA_table)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
	self_object->EA_table=EA_table;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <disp_proc_loop>:

extern UART_HandleTypeDef huart5;
void disp_proc_loop(proc_dispatcher* self_object)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
    uint32_t last_event;
    //char tt[100];

    for(;;)
    {
     if(disp_proc_get_event(self_object,&last_event)==F_OK){
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	4619      	mov	r1, r3
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fef1 	bl	8001e3a <disp_proc_get_event>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f6      	bne.n	800204c <disp_proc_loop+0x8>

      for(int i=0;i<DISP_NUM_OF_PROCESSES;i++)
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	e021      	b.n	80020a8 <disp_proc_loop+0x64>
      {
        if(self_object->processes[i].state==PROC_STARTED){
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	015b      	lsls	r3, r3, #5
 800206a:	4413      	add	r3, r2
 800206c:	3314      	adds	r3, #20
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d116      	bne.n	80020a2 <disp_proc_loop+0x5e>
        	if(disp_proc_check_event(last_event,&self_object->processes[i].events)==F_OK){
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	015b      	lsls	r3, r3, #5
 800207a:	3318      	adds	r3, #24
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	4413      	add	r3, r2
 8002080:	4619      	mov	r1, r3
 8002082:	f000 f836 	bl	80020f2 <disp_proc_check_event>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10a      	bne.n	80020a2 <disp_proc_loop+0x5e>
        		disp_proc_send_event(self_object,self_object->processes[i].proc_arg.inQ_handle,last_event);
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	015b      	lsls	r3, r3, #5
 8002092:	4413      	add	r3, r2
 8002094:	3308      	adds	r3, #8
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4619      	mov	r1, r3
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff feeb 	bl	8001e78 <disp_proc_send_event>
      for(int i=0;i<DISP_NUM_OF_PROCESSES;i++)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3301      	adds	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b0b      	cmp	r3, #11
 80020ac:	ddda      	ble.n	8002064 <disp_proc_loop+0x20>
        }
      }
      //EA table check
     // sprintf(tt,"Num_of_events:%d\n",self_object->EA_table->num_of_events);
      //HAL_UART_Transmit(&huart5,tt,strlen(tt),100);
      for(int y=0;y<(self_object->EA_table->num_of_events);y++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	e016      	b.n	80020e2 <disp_proc_loop+0x9e>
      {
         // sprintf(tt,"Event:%d\n",self_object->EA_table->EAT[y].event);
          //HAL_UART_Transmit(&huart5,tt,strlen(tt),100);
    	  if(last_event==self_object->EA_table->EAT[y].event) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d108      	bne.n	80020dc <disp_proc_loop+0x98>
    		  self_object->EA_table->EAT[y].action();
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4798      	blx	r3
      for(int y=0;y<(self_object->EA_table->num_of_events);y++)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	3301      	adds	r3, #1
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d8e1      	bhi.n	80020b4 <disp_proc_loop+0x70>
     if(disp_proc_get_event(self_object,&last_event)==F_OK){
 80020f0:	e7ac      	b.n	800204c <disp_proc_loop+0x8>

080020f2 <disp_proc_check_event>:
     }
    }
}

F_RES disp_proc_check_event(uint32_t event,proc_events_t* events)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b085      	sub	sp, #20
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	for(int i=0;i<events->size;i++){
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	e00d      	b.n	800211e <disp_proc_check_event+0x2c>
		if(events->evnt[i]==event) return F_OK;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	429a      	cmp	r2, r3
 8002112:	d101      	bne.n	8002118 <disp_proc_check_event+0x26>
 8002114:	2300      	movs	r3, #0
 8002116:	e008      	b.n	800212a <disp_proc_check_event+0x38>
	for(int i=0;i<events->size;i++){
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	3301      	adds	r3, #1
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	429a      	cmp	r2, r3
 8002126:	d8ec      	bhi.n	8002102 <disp_proc_check_event+0x10>
	}
	return F_ERR;
 8002128:	2301      	movs	r3, #1
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <lpm_sum_messages>:
extern float bloc_GPS_lat;
extern float bloc_GPS_lon;


void lpm_sum_messages(uvp6* uvp6_obj,lpm_data_str* lpm_messages_buffer)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  lpm_messages_buffer->temperature+=uvp6_obj->lpm_data.temperature;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	f8d3 3019 	ldr.w	r3, [r3, #25]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fd8c 	bl	8000c68 <__addsf3>
 8002150:	4603      	mov	r3, r0
 8002152:	461a      	mov	r2, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f8c3 2019 	str.w	r2, [r3, #25]
  lpm_messages_buffer->pressure+=uvp6_obj->lpm_data.pressure;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fd7e 	bl	8000c68 <__addsf3>
 800216c:	4603      	mov	r3, r0
 800216e:	461a      	mov	r2, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	601a      	str	r2, [r3, #0]
  lpm_messages_buffer->number_of_images+=uvp6_obj->lpm_data.number_of_images;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	f8d3 2015 	ldr.w	r2, [r3, #21]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	441a      	add	r2, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	f8c3 2015 	str.w	r2, [r3, #21]
  for(int y=0;y<UVP6_NUM_OF_CATEGORIES;y++){
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	e034      	b.n	80021f6 <lpm_sum_messages+0xc2>
	lpm_messages_buffer->data[y]+=uvp6_obj->lpm_data.data[y];
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	3306      	adds	r3, #6
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3308      	adds	r3, #8
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	441a      	add	r2, r3
 80021a8:	6839      	ldr	r1, [r7, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	3306      	adds	r3, #6
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	f8c3 2005 	str.w	r2, [r3, #5]
	lpm_messages_buffer->grey_levels[y]+=(uvp6_obj->lpm_data.grey_levels[y]*uvp6_obj->lpm_data.data[y]);
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3318      	adds	r3, #24
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	331a      	adds	r3, #26
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	68d9      	ldr	r1, [r3, #12]
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	3308      	adds	r3, #8
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4403      	add	r3, r0
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	441a      	add	r2, r3
 80021e2:	6839      	ldr	r1, [r7, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3318      	adds	r3, #24
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	f8c3 2005 	str.w	r2, [r3, #5]
  for(int y=0;y<UVP6_NUM_OF_CATEGORIES;y++){
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	3301      	adds	r3, #1
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b11      	cmp	r3, #17
 80021fa:	ddc7      	ble.n	800218c <lpm_sum_messages+0x58>
  }
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <lpm_aggregate_messages>:

F_RES lpm_aggregate_messages(uvp6* uvp6_obj,lpm_data_str* lpm_messages_buffer,uint32_t* lpm_buffer_num_of_msgs)
{
 8002206:	b590      	push	{r4, r7, lr}
 8002208:	b087      	sub	sp, #28
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
   if(lpm_buffer_num_of_msgs==0) return F_ERR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <lpm_aggregate_messages+0x16>
 8002218:	2301      	movs	r3, #1
 800221a:	e052      	b.n	80022c2 <lpm_aggregate_messages+0xbc>
   lpm_messages_buffer->temperature=lpm_messages_buffer->temperature/(float)(*lpm_buffer_num_of_msgs);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f8d3 4019 	ldr.w	r4, [r3, #25]
 8002222:	4623      	mov	r3, r4
 8002224:	461c      	mov	r4, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fdcc 	bl	8000dc8 <__aeabi_ui2f>
 8002230:	4603      	mov	r3, r0
 8002232:	4619      	mov	r1, r3
 8002234:	4620      	mov	r0, r4
 8002236:	f7fe fed3 	bl	8000fe0 <__aeabi_fdiv>
 800223a:	4603      	mov	r3, r0
 800223c:	461a      	mov	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f8c3 2019 	str.w	r2, [r3, #25]
   lpm_messages_buffer->pressure=lpm_messages_buffer->pressure/(float)(*lpm_buffer_num_of_msgs);
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	681c      	ldr	r4, [r3, #0]
 8002248:	4623      	mov	r3, r4
 800224a:	461c      	mov	r4, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe fdb9 	bl	8000dc8 <__aeabi_ui2f>
 8002256:	4603      	mov	r3, r0
 8002258:	4619      	mov	r1, r3
 800225a:	4620      	mov	r0, r4
 800225c:	f7fe fec0 	bl	8000fe0 <__aeabi_fdiv>
 8002260:	4603      	mov	r3, r0
 8002262:	461a      	mov	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	601a      	str	r2, [r3, #0]
   for(int y=0;y<UVP6_NUM_OF_CATEGORIES;y++){
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e022      	b.n	80022b4 <lpm_aggregate_messages+0xae>
	   if(lpm_messages_buffer->data[y]>0){
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	3306      	adds	r3, #6
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d016      	beq.n	80022ae <lpm_aggregate_messages+0xa8>
		   lpm_messages_buffer->grey_levels[y]=(lpm_messages_buffer->grey_levels[y]/lpm_messages_buffer->data[y]);
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	3318      	adds	r3, #24
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800228e:	68b9      	ldr	r1, [r7, #8]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	3306      	adds	r3, #6
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800229c:	fbb2 f2f3 	udiv	r2, r2, r3
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	3318      	adds	r3, #24
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	f8c3 2005 	str.w	r2, [r3, #5]
   for(int y=0;y<UVP6_NUM_OF_CATEGORIES;y++){
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3301      	adds	r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2b11      	cmp	r3, #17
 80022b8:	ddd9      	ble.n	800226e <lpm_aggregate_messages+0x68>
	   }
   }
   *lpm_buffer_num_of_msgs=0;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
   return F_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd90      	pop	{r4, r7, pc}
	...

080022cc <lpm_aggregate_and_close_bloc>:

F_RES lpm_aggregate_and_close_bloc(uvp6* uvp6_obj,char* res,lpm_data_str* lpm_messages_buffer,uint32_t* lpm_buffer_num_of_msgs)
{
 80022cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d0:	b0d7      	sub	sp, #348	; 0x15c
 80022d2:	af2e      	add	r7, sp, #184	; 0xb8
 80022d4:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 80022d8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80022dc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  	if(lpm_aggregate_messages(uvp6_obj,lpm_messages_buffer,lpm_buffer_num_of_msgs)==F_OK){
 80022e4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80022e8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80022ec:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80022f0:	f7ff ff89 	bl	8002206 <lpm_aggregate_messages>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f040 814e 	bne.w	8002598 <lpm_aggregate_and_close_bloc+0x2cc>
	sprintf(res,"LPM_DATA,%s %s,%f,%f,%f,%u,%f,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u;\r\n",
						  lpm_messages_buffer->date,
 80022fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002300:	3304      	adds	r3, #4
 8002302:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						  lpm_messages_buffer->time,
 8002306:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800230a:	f103 010e 	add.w	r1, r3, #14
 800230e:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
						  lpm_messages_buffer->pressure,
 8002312:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002316:	681b      	ldr	r3, [r3, #0]
	sprintf(res,"LPM_DATA,%s %s,%f,%f,%f,%u,%f,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u;\r\n",
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe f8ff 	bl	800051c <__aeabi_f2d>
 800231e:	4680      	mov	r8, r0
 8002320:	4689      	mov	r9, r1
 8002322:	4ba0      	ldr	r3, [pc, #640]	; (80025a4 <lpm_aggregate_and_close_bloc+0x2d8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe f8f8 	bl	800051c <__aeabi_f2d>
 800232c:	4682      	mov	sl, r0
 800232e:	468b      	mov	fp, r1
 8002330:	4b9d      	ldr	r3, [pc, #628]	; (80025a8 <lpm_aggregate_and_close_bloc+0x2dc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe f8f1 	bl	800051c <__aeabi_f2d>
 800233a:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
 800233e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002342:	f8d3 4015 	ldr.w	r4, [r3, #21]
 8002346:	67fc      	str	r4, [r7, #124]	; 0x7c
						  bloc_GPS_lat,
						  bloc_GPS_lon,
						  lpm_messages_buffer->number_of_images,
						  lpm_messages_buffer->temperature,
 8002348:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800234c:	f8d3 3019 	ldr.w	r3, [r3, #25]
	sprintf(res,"LPM_DATA,%s %s,%f,%f,%f,%u,%f,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u;\r\n",
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe f8e3 	bl	800051c <__aeabi_f2d>
 8002356:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
 800235a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800235e:	f8d3 501d 	ldr.w	r5, [r3, #29]
 8002362:	67bd      	str	r5, [r7, #120]	; 0x78
 8002364:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002368:	f8d3 6021 	ldr.w	r6, [r3, #33]	; 0x21
 800236c:	66fe      	str	r6, [r7, #108]	; 0x6c
 800236e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002372:	f8d3 c025 	ldr.w	ip, [r3, #37]	; 0x25
 8002376:	f8c7 c068 	str.w	ip, [r7, #104]	; 0x68
 800237a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800237e:	f8d3 e029 	ldr.w	lr, [r3, #41]	; 0x29
 8002382:	f8c7 e064 	str.w	lr, [r7, #100]	; 0x64
 8002386:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800238a:	f8d3 202d 	ldr.w	r2, [r3, #45]	; 0x2d
 800238e:	663a      	str	r2, [r7, #96]	; 0x60
 8002390:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002394:	f8d3 4031 	ldr.w	r4, [r3, #49]	; 0x31
 8002398:	65fc      	str	r4, [r7, #92]	; 0x5c
 800239a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800239e:	f8d3 5035 	ldr.w	r5, [r3, #53]	; 0x35
 80023a2:	65bd      	str	r5, [r7, #88]	; 0x58
 80023a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023a8:	f8d3 6039 	ldr.w	r6, [r3, #57]	; 0x39
 80023ac:	657e      	str	r6, [r7, #84]	; 0x54
 80023ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023b2:	f8d3 c03d 	ldr.w	ip, [r3, #61]	; 0x3d
 80023b6:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 80023ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023be:	f8d3 e041 	ldr.w	lr, [r3, #65]	; 0x41
 80023c2:	f8c7 e04c 	str.w	lr, [r7, #76]	; 0x4c
 80023c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023ca:	f8d3 3045 	ldr.w	r3, [r3, #69]	; 0x45
 80023ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80023d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023d4:	f8d3 2049 	ldr.w	r2, [r3, #73]	; 0x49
 80023d8:	647a      	str	r2, [r7, #68]	; 0x44
 80023da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023de:	f8d3 004d 	ldr.w	r0, [r3, #77]	; 0x4d
 80023e2:	6438      	str	r0, [r7, #64]	; 0x40
 80023e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023e8:	f8d3 4051 	ldr.w	r4, [r3, #81]	; 0x51
 80023ec:	63fc      	str	r4, [r7, #60]	; 0x3c
 80023ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023f2:	f8d3 5055 	ldr.w	r5, [r3, #85]	; 0x55
 80023f6:	63bd      	str	r5, [r7, #56]	; 0x38
 80023f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023fc:	f8d3 6059 	ldr.w	r6, [r3, #89]	; 0x59
 8002400:	637e      	str	r6, [r7, #52]	; 0x34
 8002402:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002406:	f8d3 c05d 	ldr.w	ip, [r3, #93]	; 0x5d
 800240a:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 800240e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002412:	f8d3 e061 	ldr.w	lr, [r3, #97]	; 0x61
 8002416:	f8c7 e02c 	str.w	lr, [r7, #44]	; 0x2c
 800241a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800241e:	f8d3 3065 	ldr.w	r3, [r3, #101]	; 0x65
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
 8002424:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002428:	f8d3 2069 	ldr.w	r2, [r3, #105]	; 0x69
 800242c:	627a      	str	r2, [r7, #36]	; 0x24
 800242e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002432:	f8d3 106d 	ldr.w	r1, [r3, #109]	; 0x6d
 8002436:	6239      	str	r1, [r7, #32]
 8002438:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800243c:	f8d3 0071 	ldr.w	r0, [r3, #113]	; 0x71
 8002440:	61f8      	str	r0, [r7, #28]
 8002442:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002446:	f8d3 4075 	ldr.w	r4, [r3, #117]	; 0x75
 800244a:	61bc      	str	r4, [r7, #24]
 800244c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002450:	f8d3 5079 	ldr.w	r5, [r3, #121]	; 0x79
 8002454:	617d      	str	r5, [r7, #20]
 8002456:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800245a:	f8d3 607d 	ldr.w	r6, [r3, #125]	; 0x7d
 800245e:	613e      	str	r6, [r7, #16]
 8002460:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002464:	f8d3 c081 	ldr.w	ip, [r3, #129]	; 0x81
 8002468:	f8c7 c00c 	str.w	ip, [r7, #12]
 800246c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002470:	f8d3 e085 	ldr.w	lr, [r3, #133]	; 0x85
 8002474:	f8c7 e008 	str.w	lr, [r7, #8]
 8002478:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800247c:	f8d3 3089 	ldr.w	r3, [r3, #137]	; 0x89
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002486:	f8d3 208d 	ldr.w	r2, [r3, #141]	; 0x8d
 800248a:	603a      	str	r2, [r7, #0]
 800248c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002490:	f8d3 6091 	ldr.w	r6, [r3, #145]	; 0x91
 8002494:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002498:	f8d3 5095 	ldr.w	r5, [r3, #149]	; 0x95
 800249c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024a0:	f8d3 4099 	ldr.w	r4, [r3, #153]	; 0x99
 80024a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024a8:	f8d3 009d 	ldr.w	r0, [r3, #157]	; 0x9d
 80024ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024b0:	f8d3 10a1 	ldr.w	r1, [r3, #161]	; 0xa1
 80024b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024b8:	f8d3 20a5 	ldr.w	r2, [r3, #165]	; 0xa5
 80024bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024c0:	f8d3 30a9 	ldr.w	r3, [r3, #169]	; 0xa9
 80024c4:	932d      	str	r3, [sp, #180]	; 0xb4
 80024c6:	922c      	str	r2, [sp, #176]	; 0xb0
 80024c8:	912b      	str	r1, [sp, #172]	; 0xac
 80024ca:	902a      	str	r0, [sp, #168]	; 0xa8
 80024cc:	9429      	str	r4, [sp, #164]	; 0xa4
 80024ce:	9528      	str	r5, [sp, #160]	; 0xa0
 80024d0:	9627      	str	r6, [sp, #156]	; 0x9c
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	9226      	str	r2, [sp, #152]	; 0x98
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	9325      	str	r3, [sp, #148]	; 0x94
 80024da:	f8d7 e008 	ldr.w	lr, [r7, #8]
 80024de:	f8cd e090 	str.w	lr, [sp, #144]	; 0x90
 80024e2:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 80024e6:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
 80024ea:	693e      	ldr	r6, [r7, #16]
 80024ec:	9622      	str	r6, [sp, #136]	; 0x88
 80024ee:	697d      	ldr	r5, [r7, #20]
 80024f0:	9521      	str	r5, [sp, #132]	; 0x84
 80024f2:	69bc      	ldr	r4, [r7, #24]
 80024f4:	9420      	str	r4, [sp, #128]	; 0x80
 80024f6:	69f8      	ldr	r0, [r7, #28]
 80024f8:	901f      	str	r0, [sp, #124]	; 0x7c
 80024fa:	6a39      	ldr	r1, [r7, #32]
 80024fc:	911e      	str	r1, [sp, #120]	; 0x78
 80024fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002500:	921d      	str	r2, [sp, #116]	; 0x74
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002504:	931c      	str	r3, [sp, #112]	; 0x70
 8002506:	f8d7 e02c 	ldr.w	lr, [r7, #44]	; 0x2c
 800250a:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 800250e:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
 8002512:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
 8002516:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8002518:	9619      	str	r6, [sp, #100]	; 0x64
 800251a:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 800251c:	9518      	str	r5, [sp, #96]	; 0x60
 800251e:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8002520:	9417      	str	r4, [sp, #92]	; 0x5c
 8002522:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002524:	9016      	str	r0, [sp, #88]	; 0x58
 8002526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002528:	9215      	str	r2, [sp, #84]	; 0x54
 800252a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800252c:	9314      	str	r3, [sp, #80]	; 0x50
 800252e:	f8d7 e04c 	ldr.w	lr, [r7, #76]	; 0x4c
 8002532:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 8002536:	f8d7 c050 	ldr.w	ip, [r7, #80]	; 0x50
 800253a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800253e:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 8002540:	9611      	str	r6, [sp, #68]	; 0x44
 8002542:	6dbd      	ldr	r5, [r7, #88]	; 0x58
 8002544:	9510      	str	r5, [sp, #64]	; 0x40
 8002546:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8002548:	940f      	str	r4, [sp, #60]	; 0x3c
 800254a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800254c:	920e      	str	r2, [sp, #56]	; 0x38
 800254e:	f8d7 e064 	ldr.w	lr, [r7, #100]	; 0x64
 8002552:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8002556:	f8d7 c068 	ldr.w	ip, [r7, #104]	; 0x68
 800255a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 800255e:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 8002560:	960b      	str	r6, [sp, #44]	; 0x2c
 8002562:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 8002564:	950a      	str	r5, [sp, #40]	; 0x28
 8002566:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800256a:	e9cd 1208 	strd	r1, r2, [sp, #32]
 800256e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8002570:	9406      	str	r4, [sp, #24]
 8002572:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002576:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800257a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800257e:	e9cd 8900 	strd	r8, r9, [sp]
 8002582:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002586:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800258a:	4908      	ldr	r1, [pc, #32]	; (80025ac <lpm_aggregate_and_close_bloc+0x2e0>)
 800258c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002590:	f008 fa64 	bl	800aa5c <siprintf>
						  lpm_messages_buffer->grey_levels[14],
						  lpm_messages_buffer->grey_levels[15],
						  lpm_messages_buffer->grey_levels[16],
						  lpm_messages_buffer->grey_levels[17]
    );
	return F_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	e000      	b.n	800259a <lpm_aggregate_and_close_bloc+0x2ce>
  }
  return F_ERR;
 8002598:	2301      	movs	r3, #1
}
 800259a:	4618      	mov	r0, r3
 800259c:	37a4      	adds	r7, #164	; 0xa4
 800259e:	46bd      	mov	sp, r7
 80025a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025a4:	200009d8 	.word	0x200009d8
 80025a8:	200009dc 	.word	0x200009dc
 80025ac:	0800e5e8 	.word	0x0800e5e8

080025b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4a06      	ldr	r2, [pc, #24]	; (80025d8 <vApplicationGetIdleTaskMemory+0x28>)
 80025c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	4a05      	ldr	r2, [pc, #20]	; (80025dc <vApplicationGetIdleTaskMemory+0x2c>)
 80025c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2280      	movs	r2, #128	; 0x80
 80025cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	20000474 	.word	0x20000474
 80025dc:	20000528 	.word	0x20000528

080025e0 <uvp6_power_on_proc>:

uint32_t  uvp6_power_on_events[]={0};
#define   uvp6_power_on_events_num                                             0

void uvp6_power_on_proc(proc_arg_t* proc_arg)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 uvp6* uvp6_obj=proc_arg->func_self_object;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]
 if(uvp6_obj->power_status!=UVP6_POWER_IS_ON){
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	7b5b      	ldrb	r3, [r3, #13]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00e      	beq.n	8002614 <uvp6_power_on_proc+0x34>
   HAL_GPIO_WritePin(SENSOR_PWR_CTRL_GPIO_Port, SENSOR_PWR_CTRL_Pin, GPIO_PIN_SET);
 80025f6:	2201      	movs	r2, #1
 80025f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025fc:	4807      	ldr	r0, [pc, #28]	; (800261c <uvp6_power_on_proc+0x3c>)
 80025fe:	f003 f821 	bl	8005644 <HAL_GPIO_WritePin>
   fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_POWERED_ON);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2170      	movs	r1, #112	; 0x70
 8002608:	4618      	mov	r0, r3
 800260a:	f000 ffeb 	bl	80035e4 <fsm_generate_event>
   uvp6_obj->power_status=UVP6_POWER_IS_ON;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	735a      	strb	r2, [r3, #13]
 }
}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40010c00 	.word	0x40010c00

08002620 <uvp6_power_off_proc>:

uint32_t  uvp6_power_off_events[]={0};
#define   uvp6_power_off_events_num                                            0

void uvp6_power_off_proc(proc_arg_t* proc_arg)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 uvp6* uvp6_obj=proc_arg->func_self_object;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]
 if(uvp6_obj->power_status!=UVP6_POWER_IS_OFF){
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	7b5b      	ldrb	r3, [r3, #13]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d00e      	beq.n	8002654 <uvp6_power_off_proc+0x34>
  HAL_GPIO_WritePin(SENSOR_PWR_CTRL_GPIO_Port, SENSOR_PWR_CTRL_Pin, GPIO_PIN_RESET);
 8002636:	2200      	movs	r2, #0
 8002638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800263c:	4807      	ldr	r0, [pc, #28]	; (800265c <uvp6_power_off_proc+0x3c>)
 800263e:	f003 f801 	bl	8005644 <HAL_GPIO_WritePin>
  fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_POWERED_OFF);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	216f      	movs	r1, #111	; 0x6f
 8002648:	4618      	mov	r0, r3
 800264a:	f000 ffcb 	bl	80035e4 <fsm_generate_event>
  uvp6_obj->power_status=UVP6_POWER_IS_OFF;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	735a      	strb	r2, [r3, #13]
 }
}
 8002654:	bf00      	nop
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40010c00 	.word	0x40010c00

08002660 <uvp6_stop_proc>:
uint32_t  uvp6_stop_events[]={UVP6_EVNT_STOP_ACK_RCVD,
		                      UVP6_EVNT_START_ERR_RCVD};
#define   uvp6_stop_events_num                 2

void uvp6_stop_proc(proc_arg_t* proc_arg)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	uvp6* uvp6_obj=proc_arg->func_self_object;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	613b      	str	r3, [r7, #16]
	uint8_t retry_timeout_num=UVP6_CONNECTION_RETRIES;
 800266e:	230a      	movs	r3, #10
 8002670:	75fb      	strb	r3, [r7, #23]
	uint8_t retry_busy_num=UVP6_CONNECTION_RETRIES;
 8002672:	230a      	movs	r3, #10
 8002674:	75bb      	strb	r3, [r7, #22]
	uint32_t in_event;
	F_RES    res;

	do{
	 uvp6_send_cmd(uvp6_obj,UVP6_CMD_STOP_ACQ,NULL);
 8002676:	2200      	movs	r2, #0
 8002678:	2101      	movs	r1, #1
 800267a:	6938      	ldr	r0, [r7, #16]
 800267c:	f7ff f88e 	bl	800179c <uvp6_send_cmd>
	 res=fsm_take_event(proc_arg->inQ_handle,&in_event,UVP6_RESPONSE_TIMEOUT);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f107 0108 	add.w	r1, r7, #8
 8002688:	f241 3288 	movw	r2, #5000	; 0x1388
 800268c:	4618      	mov	r0, r3
 800268e:	f000 ffb8 	bl	8003602 <fsm_take_event>
 8002692:	4603      	mov	r3, r0
 8002694:	73fb      	strb	r3, [r7, #15]
	 if(res==F_OK){
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10b      	bne.n	80026b4 <uvp6_stop_proc+0x54>
		  if( in_event==UVP6_EVNT_STOP_ACK_RCVD)break;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b6a      	cmp	r3, #106	; 0x6a
 80026a0:	d015      	beq.n	80026ce <uvp6_stop_proc+0x6e>
		  else if( in_event==UVP6_EVNT_START_ERR_RCVD){
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b69      	cmp	r3, #105	; 0x69
 80026a6:	d10b      	bne.n	80026c0 <uvp6_stop_proc+0x60>
			  retry_busy_num--;
 80026a8:	7dbb      	ldrb	r3, [r7, #22]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	75bb      	strb	r3, [r7, #22]
			  retry_timeout_num=UVP6_CONNECTION_RETRIES;
 80026ae:	230a      	movs	r3, #10
 80026b0:	75fb      	strb	r3, [r7, #23]
 80026b2:	e005      	b.n	80026c0 <uvp6_stop_proc+0x60>
		  }
	 }
	 else if(res==F_TIMEOUT) retry_timeout_num--;
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d102      	bne.n	80026c0 <uvp6_stop_proc+0x60>
 80026ba:	7dfb      	ldrb	r3, [r7, #23]
 80026bc:	3b01      	subs	r3, #1
 80026be:	75fb      	strb	r3, [r7, #23]
	}while(retry_timeout_num!=0 && retry_busy_num!=0);
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d004      	beq.n	80026d0 <uvp6_stop_proc+0x70>
 80026c6:	7dbb      	ldrb	r3, [r7, #22]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1d4      	bne.n	8002676 <uvp6_stop_proc+0x16>
 80026cc:	e000      	b.n	80026d0 <uvp6_stop_proc+0x70>
		  if( in_event==UVP6_EVNT_STOP_ACK_RCVD)break;
 80026ce:	bf00      	nop

	if(retry_busy_num==0){
 80026d0:	7dbb      	ldrb	r3, [r7, #22]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10c      	bne.n	80026f0 <uvp6_stop_proc+0x90>
		fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_ERR_BUSY);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	216c      	movs	r1, #108	; 0x6c
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 ff81 	bl	80035e4 <fsm_generate_event>
		fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_UVP6_NOT_STOPPED);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 ff7a 	bl	80035e4 <fsm_generate_event>
	}
	if(retry_timeout_num==0){
 80026f0:	7dfb      	ldrb	r3, [r7, #23]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10d      	bne.n	8002712 <uvp6_stop_proc+0xb2>
		fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_ERR_NO_RESPONSE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	216b      	movs	r1, #107	; 0x6b
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 ff71 	bl	80035e4 <fsm_generate_event>
		fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_UVP6_NOT_STOPPED);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800270a:	4618      	mov	r0, r3
 800270c:	f000 ff6a 	bl	80035e4 <fsm_generate_event>
	}
	else fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_UVP6_STOPPED);
}
 8002710:	e006      	b.n	8002720 <uvp6_stop_proc+0xc0>
	else fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_UVP6_STOPPED);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f240 112f 	movw	r1, #303	; 0x12f
 800271a:	4618      	mov	r0, r3
 800271c:	f000 ff62 	bl	80035e4 <fsm_generate_event>
}
 8002720:	bf00      	nop
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <uvp6_startL_proc>:
uint32_t  uvp6_startL_events[]={UVP6_EVNT_START_ACK_RCVD,
		                        UVP6_EVNT_START_ERR_RCVD};
#define   uvp6_startL_events_num                     2

void uvp6_startL_proc(proc_arg_t* proc_arg)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	uvp6* uvp6_obj=proc_arg->func_self_object;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	613b      	str	r3, [r7, #16]
	uint8_t retry_timeout_num=UVP6_CONNECTION_RETRIES;
 8002736:	230a      	movs	r3, #10
 8002738:	75fb      	strb	r3, [r7, #23]
	uint8_t retry_busy_num=UVP6_CONNECTION_RETRIES;
 800273a:	230a      	movs	r3, #10
 800273c:	75bb      	strb	r3, [r7, #22]
	uint32_t in_event;
	F_RES    res;

	do{
	 uvp6_send_cmd(uvp6_obj,UVP6_CMD_START_L_ACQ,NULL);
 800273e:	2200      	movs	r2, #0
 8002740:	2103      	movs	r1, #3
 8002742:	6938      	ldr	r0, [r7, #16]
 8002744:	f7ff f82a 	bl	800179c <uvp6_send_cmd>
	 res=fsm_take_event(proc_arg->inQ_handle,&in_event,UVP6_RESPONSE_TIMEOUT);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f107 0108 	add.w	r1, r7, #8
 8002750:	f241 3288 	movw	r2, #5000	; 0x1388
 8002754:	4618      	mov	r0, r3
 8002756:	f000 ff54 	bl	8003602 <fsm_take_event>
 800275a:	4603      	mov	r3, r0
 800275c:	73fb      	strb	r3, [r7, #15]
	 if(res==F_OK){
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10b      	bne.n	800277c <uvp6_startL_proc+0x54>
		  if( in_event==UVP6_EVNT_START_ACK_RCVD)break;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b68      	cmp	r3, #104	; 0x68
 8002768:	d015      	beq.n	8002796 <uvp6_startL_proc+0x6e>
		  else if( in_event==UVP6_EVNT_START_ERR_RCVD){
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b69      	cmp	r3, #105	; 0x69
 800276e:	d10b      	bne.n	8002788 <uvp6_startL_proc+0x60>
			  retry_busy_num--;
 8002770:	7dbb      	ldrb	r3, [r7, #22]
 8002772:	3b01      	subs	r3, #1
 8002774:	75bb      	strb	r3, [r7, #22]
			  retry_timeout_num=UVP6_CONNECTION_RETRIES;
 8002776:	230a      	movs	r3, #10
 8002778:	75fb      	strb	r3, [r7, #23]
 800277a:	e005      	b.n	8002788 <uvp6_startL_proc+0x60>
			  // here should be more detailed evnt
		  }
	 }
	 else if(res==F_TIMEOUT) retry_timeout_num--;
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d102      	bne.n	8002788 <uvp6_startL_proc+0x60>
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	3b01      	subs	r3, #1
 8002786:	75fb      	strb	r3, [r7, #23]
	}while(retry_timeout_num!=0 && retry_busy_num!=0);
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d004      	beq.n	8002798 <uvp6_startL_proc+0x70>
 800278e:	7dbb      	ldrb	r3, [r7, #22]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1d4      	bne.n	800273e <uvp6_startL_proc+0x16>
 8002794:	e000      	b.n	8002798 <uvp6_startL_proc+0x70>
		  if( in_event==UVP6_EVNT_START_ACK_RCVD)break;
 8002796:	bf00      	nop

	if(retry_busy_num==0){
 8002798:	7dbb      	ldrb	r3, [r7, #22]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10c      	bne.n	80027b8 <uvp6_startL_proc+0x90>
		fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_ERR_BUSY);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	216c      	movs	r1, #108	; 0x6c
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 ff1d 	bl	80035e4 <fsm_generate_event>
		fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_UVP6_NOT_STARTED);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f240 112d 	movw	r1, #301	; 0x12d
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 ff16 	bl	80035e4 <fsm_generate_event>
	}
	if(retry_timeout_num==0){
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10d      	bne.n	80027da <uvp6_startL_proc+0xb2>
		fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_ERR_NO_RESPONSE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	216b      	movs	r1, #107	; 0x6b
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 ff0d 	bl	80035e4 <fsm_generate_event>
		fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_UVP6_NOT_STARTED);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f240 112d 	movw	r1, #301	; 0x12d
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 ff06 	bl	80035e4 <fsm_generate_event>
	}
	else fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_STARTED_LOW_PROFILE);
}
 80027d8:	e005      	b.n	80027e6 <uvp6_startL_proc+0xbe>
	else fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_STARTED_LOW_PROFILE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	216d      	movs	r1, #109	; 0x6d
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 feff 	bl	80035e4 <fsm_generate_event>
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <uvp6_startH_proc>:
uint32_t  uvp6_startH_events[]={UVP6_EVNT_START_ACK_RCVD,
		                        UVP6_EVNT_START_ERR_RCVD};
#define   uvp6_startH_events_num                      2

void uvp6_startH_proc(proc_arg_t* proc_arg)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
	uvp6* uvp6_obj=proc_arg->func_self_object;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	613b      	str	r3, [r7, #16]
	uint8_t retry_timeout_num=UVP6_CONNECTION_RETRIES;
 80027fc:	230a      	movs	r3, #10
 80027fe:	75fb      	strb	r3, [r7, #23]
	uint8_t retry_busy_num=UVP6_CONNECTION_RETRIES;
 8002800:	230a      	movs	r3, #10
 8002802:	75bb      	strb	r3, [r7, #22]
	uint32_t in_event;
	F_RES    res;

	do{
	 uvp6_send_cmd(uvp6_obj,UVP6_CMD_START_H_ACQ,NULL);
 8002804:	2200      	movs	r2, #0
 8002806:	2100      	movs	r1, #0
 8002808:	6938      	ldr	r0, [r7, #16]
 800280a:	f7fe ffc7 	bl	800179c <uvp6_send_cmd>
	 res=fsm_take_event(proc_arg->inQ_handle,&in_event,UVP6_RESPONSE_TIMEOUT);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f107 0108 	add.w	r1, r7, #8
 8002816:	f241 3288 	movw	r2, #5000	; 0x1388
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fef1 	bl	8003602 <fsm_take_event>
 8002820:	4603      	mov	r3, r0
 8002822:	73fb      	strb	r3, [r7, #15]
	 if(res==F_OK){
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10b      	bne.n	8002842 <uvp6_startH_proc+0x54>
		  if( in_event==UVP6_EVNT_START_ACK_RCVD)break;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b68      	cmp	r3, #104	; 0x68
 800282e:	d015      	beq.n	800285c <uvp6_startH_proc+0x6e>
		  else if( in_event==UVP6_EVNT_START_ERR_RCVD){
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b69      	cmp	r3, #105	; 0x69
 8002834:	d10b      	bne.n	800284e <uvp6_startH_proc+0x60>
			  retry_busy_num--;
 8002836:	7dbb      	ldrb	r3, [r7, #22]
 8002838:	3b01      	subs	r3, #1
 800283a:	75bb      	strb	r3, [r7, #22]
			  retry_timeout_num=UVP6_CONNECTION_RETRIES;
 800283c:	230a      	movs	r3, #10
 800283e:	75fb      	strb	r3, [r7, #23]
 8002840:	e005      	b.n	800284e <uvp6_startH_proc+0x60>
			  // here should be more detailed evnt
		  }
	 }
	 else if(res==F_TIMEOUT) retry_timeout_num--;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d102      	bne.n	800284e <uvp6_startH_proc+0x60>
 8002848:	7dfb      	ldrb	r3, [r7, #23]
 800284a:	3b01      	subs	r3, #1
 800284c:	75fb      	strb	r3, [r7, #23]
	}while(retry_timeout_num!=0 && retry_busy_num!=0);
 800284e:	7dfb      	ldrb	r3, [r7, #23]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d004      	beq.n	800285e <uvp6_startH_proc+0x70>
 8002854:	7dbb      	ldrb	r3, [r7, #22]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1d4      	bne.n	8002804 <uvp6_startH_proc+0x16>
 800285a:	e000      	b.n	800285e <uvp6_startH_proc+0x70>
		  if( in_event==UVP6_EVNT_START_ACK_RCVD)break;
 800285c:	bf00      	nop

	if(retry_busy_num==0){
 800285e:	7dbb      	ldrb	r3, [r7, #22]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10c      	bne.n	800287e <uvp6_startH_proc+0x90>
		fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_ERR_BUSY);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	216c      	movs	r1, #108	; 0x6c
 800286a:	4618      	mov	r0, r3
 800286c:	f000 feba 	bl	80035e4 <fsm_generate_event>
		fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_UVP6_NOT_STARTED);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f240 112d 	movw	r1, #301	; 0x12d
 8002878:	4618      	mov	r0, r3
 800287a:	f000 feb3 	bl	80035e4 <fsm_generate_event>
	}
	if(retry_timeout_num==0){
 800287e:	7dfb      	ldrb	r3, [r7, #23]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10d      	bne.n	80028a0 <uvp6_startH_proc+0xb2>
		fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_ERR_NO_RESPONSE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	216b      	movs	r1, #107	; 0x6b
 800288a:	4618      	mov	r0, r3
 800288c:	f000 feaa 	bl	80035e4 <fsm_generate_event>
		fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_UVP6_NOT_STARTED);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f240 112d 	movw	r1, #301	; 0x12d
 8002898:	4618      	mov	r0, r3
 800289a:	f000 fea3 	bl	80035e4 <fsm_generate_event>
	}
	else fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_STARTED_HIGH_PROFILE);
}
 800289e:	e005      	b.n	80028ac <uvp6_startH_proc+0xbe>
	else fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_STARTED_HIGH_PROFILE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	216e      	movs	r1, #110	; 0x6e
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fe9c 	bl	80035e4 <fsm_generate_event>
}
 80028ac:	bf00      	nop
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <uvp6_lpm_data_agg_proc>:
		                              UVP6_EVNT_LPM_DATA_BLOC_END_REACHED,
									  FSM_EVNT_READY_FOR_LPM_DATA};
#define   uvp6_lpm_data_agg_events_num                3

void uvp6_lpm_data_agg_proc(proc_arg_t* proc_arg)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	uvp6* uvp6_obj=proc_arg->func_self_object;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	613b      	str	r3, [r7, #16]
	uint32_t in_event;

	while(1)
	{
	 if(fsm_take_event(proc_arg->inQ_handle,&in_event,osWaitForever)==F_OK){
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f107 010c 	add.w	r1, r7, #12
 80028ca:	f04f 32ff 	mov.w	r2, #4294967295
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fe97 	bl	8003602 <fsm_take_event>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f3      	bne.n	80028c2 <uvp6_lpm_data_agg_proc+0xe>
	   if(in_event==UVP6_EVNT_LPM_DATA_RCVD){
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b65      	cmp	r3, #101	; 0x65
 80028de:	d15a      	bne.n	8002996 <uvp6_lpm_data_agg_proc+0xe2>
		 lpm_buffer_num_of_msgs++;
 80028e0:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <uvp6_lpm_data_agg_proc+0x13c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	4a42      	ldr	r2, [pc, #264]	; (80029f0 <uvp6_lpm_data_agg_proc+0x13c>)
 80028e8:	6013      	str	r3, [r2, #0]
		 if(lpm_buffer_num_of_msgs==1){
 80028ea:	4b41      	ldr	r3, [pc, #260]	; (80029f0 <uvp6_lpm_data_agg_proc+0x13c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d133      	bne.n	800295a <uvp6_lpm_data_agg_proc+0xa6>
		   bloc_GPS_lat=glider1.gps_lat;
 80028f2:	4b40      	ldr	r3, [pc, #256]	; (80029f4 <uvp6_lpm_data_agg_proc+0x140>)
 80028f4:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80028f8:	4a3f      	ldr	r2, [pc, #252]	; (80029f8 <uvp6_lpm_data_agg_proc+0x144>)
 80028fa:	6013      	str	r3, [r2, #0]
		   bloc_GPS_lon=glider1.gps_lon;
 80028fc:	4b3d      	ldr	r3, [pc, #244]	; (80029f4 <uvp6_lpm_data_agg_proc+0x140>)
 80028fe:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8002902:	4a3e      	ldr	r2, [pc, #248]	; (80029fc <uvp6_lpm_data_agg_proc+0x148>)
 8002904:	6013      	str	r3, [r2, #0]
		   memcpy(&lpm_messages_buffer,&uvp6_obj->lpm_data,sizeof(uvp6_obj->lpm_data));
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	330f      	adds	r3, #15
 800290a:	4a3d      	ldr	r2, [pc, #244]	; (8002a00 <uvp6_lpm_data_agg_proc+0x14c>)
 800290c:	4610      	mov	r0, r2
 800290e:	4619      	mov	r1, r3
 8002910:	23ad      	movs	r3, #173	; 0xad
 8002912:	461a      	mov	r2, r3
 8002914:	f007 fad6 	bl	8009ec4 <memcpy>
		   for(int y=0;y<UVP6_NUM_OF_CATEGORIES;y++){
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	e019      	b.n	8002952 <uvp6_lpm_data_agg_proc+0x9e>
			lpm_messages_buffer.grey_levels[y]=(lpm_messages_buffer.grey_levels[y]*lpm_messages_buffer.data[y]);
 800291e:	4a38      	ldr	r2, [pc, #224]	; (8002a00 <uvp6_lpm_data_agg_proc+0x14c>)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	3318      	adds	r3, #24
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800292c:	4934      	ldr	r1, [pc, #208]	; (8002a00 <uvp6_lpm_data_agg_proc+0x14c>)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3306      	adds	r3, #6
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800293a:	fb03 f202 	mul.w	r2, r3, r2
 800293e:	4930      	ldr	r1, [pc, #192]	; (8002a00 <uvp6_lpm_data_agg_proc+0x14c>)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	3318      	adds	r3, #24
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	f8c3 2005 	str.w	r2, [r3, #5]
		   for(int y=0;y<UVP6_NUM_OF_CATEGORIES;y++){
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	3301      	adds	r3, #1
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b11      	cmp	r3, #17
 8002956:	dde2      	ble.n	800291e <uvp6_lpm_data_agg_proc+0x6a>
 8002958:	e003      	b.n	8002962 <uvp6_lpm_data_agg_proc+0xae>
		   }
		 }
		 else lpm_sum_messages(uvp6_obj,&lpm_messages_buffer);
 800295a:	4929      	ldr	r1, [pc, #164]	; (8002a00 <uvp6_lpm_data_agg_proc+0x14c>)
 800295c:	6938      	ldr	r0, [r7, #16]
 800295e:	f7ff fbe9 	bl	8002134 <lpm_sum_messages>
		 if(lpm_bloc_depth_size==0.0)
 8002962:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <uvp6_lpm_data_agg_proc+0x150>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f04f 0100 	mov.w	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fc18 	bl	80011a0 <__aeabi_fcmpeq>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d03b      	beq.n	80029ee <uvp6_lpm_data_agg_proc+0x13a>
		 {
			if(lpm_aggregate_and_close_bloc(uvp6_obj,lmp_data_bloc_msg,&lpm_messages_buffer,&lpm_buffer_num_of_msgs)==F_OK){
 8002976:	4b1e      	ldr	r3, [pc, #120]	; (80029f0 <uvp6_lpm_data_agg_proc+0x13c>)
 8002978:	4a21      	ldr	r2, [pc, #132]	; (8002a00 <uvp6_lpm_data_agg_proc+0x14c>)
 800297a:	4923      	ldr	r1, [pc, #140]	; (8002a08 <uvp6_lpm_data_agg_proc+0x154>)
 800297c:	6938      	ldr	r0, [r7, #16]
 800297e:	f7ff fca5 	bl	80022cc <lpm_aggregate_and_close_bloc>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d19c      	bne.n	80028c2 <uvp6_lpm_data_agg_proc+0xe>
			    fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_LPM_AGG_DATA_READY);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2172      	movs	r1, #114	; 0x72
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fe28 	bl	80035e4 <fsm_generate_event>
 8002994:	e795      	b.n	80028c2 <uvp6_lpm_data_agg_proc+0xe>
			}
		 }
	   }
	   else if(in_event==UVP6_EVNT_LPM_DATA_BLOC_END_REACHED){
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b71      	cmp	r3, #113	; 0x71
 800299a:	d11a      	bne.n	80029d2 <uvp6_lpm_data_agg_proc+0x11e>
		    if(lpm_buffer_num_of_msgs>0){
 800299c:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <uvp6_lpm_data_agg_proc+0x13c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00f      	beq.n	80029c4 <uvp6_lpm_data_agg_proc+0x110>
			  if(lpm_aggregate_and_close_bloc(uvp6_obj,lmp_data_bloc_msg,&lpm_messages_buffer,&lpm_buffer_num_of_msgs)==F_OK){
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <uvp6_lpm_data_agg_proc+0x13c>)
 80029a6:	4a16      	ldr	r2, [pc, #88]	; (8002a00 <uvp6_lpm_data_agg_proc+0x14c>)
 80029a8:	4917      	ldr	r1, [pc, #92]	; (8002a08 <uvp6_lpm_data_agg_proc+0x154>)
 80029aa:	6938      	ldr	r0, [r7, #16]
 80029ac:	f7ff fc8e 	bl	80022cc <lpm_aggregate_and_close_bloc>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d185      	bne.n	80028c2 <uvp6_lpm_data_agg_proc+0xe>
				fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_LPM_AGG_DATA_READY);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2172      	movs	r1, #114	; 0x72
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 fe11 	bl	80035e4 <fsm_generate_event>
 80029c2:	e77e      	b.n	80028c2 <uvp6_lpm_data_agg_proc+0xe>
			  }
		    }
		    else fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_LPM_AGG_NOTHING_TO_SEND);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2174      	movs	r1, #116	; 0x74
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fe0a 	bl	80035e4 <fsm_generate_event>
 80029d0:	e777      	b.n	80028c2 <uvp6_lpm_data_agg_proc+0xe>
	   }
	   else if(in_event==FSM_EVNT_READY_FOR_LPM_DATA){
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80029d8:	f47f af73 	bne.w	80028c2 <uvp6_lpm_data_agg_proc+0xe>
		   lpm_buffer_num_of_msgs=0;
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <uvp6_lpm_data_agg_proc+0x13c>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
		   fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_LPM_BUFFER_CLEARED);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2173      	movs	r1, #115	; 0x73
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fdfb 	bl	80035e4 <fsm_generate_event>
	 if(fsm_take_event(proc_arg->inQ_handle,&in_event,osWaitForever)==F_OK){
 80029ee:	e768      	b.n	80028c2 <uvp6_lpm_data_agg_proc+0xe>
 80029f0:	20000728 	.word	0x20000728
 80029f4:	2000111c 	.word	0x2000111c
 80029f8:	200009d8 	.word	0x200009d8
 80029fc:	200009dc 	.word	0x200009dc
 8002a00:	2000072c 	.word	0x2000072c
 8002a04:	200009d0 	.word	0x200009d0
 8002a08:	200007dc 	.word	0x200007dc

08002a0c <slocum_open_file_proc>:

uint32_t  slocum_open_file_events[]={SLOCUM_EVNT_FILE_CREATE_ERR_RCVD};
#define   slocum_open_file_events_num                                 1

void slocum_open_file_proc(proc_arg_t* proc_arg)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b090      	sub	sp, #64	; 0x40
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	slocum* slocum_obj=proc_arg->func_self_object;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t retry_num=SLOCUM_CONNECTION_RETRIES;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	memory_region_pointer ptr1;
	char filename[30];
	uint32_t in_event;
	F_RES res;

	sprintf(filename,"%s%u.uv6",slocum_obj->mission_id+2,slocum_obj->dive_climb_counter);
 8002a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a22:	333b      	adds	r3, #59	; 0x3b
 8002a24:	1c9a      	adds	r2, r3, #2
 8002a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a28:	f8d3 3043 	ldr.w	r3, [r3, #67]	; 0x43
 8002a2c:	f107 000c 	add.w	r0, r7, #12
 8002a30:	4923      	ldr	r1, [pc, #140]	; (8002ac0 <slocum_open_file_proc+0xb4>)
 8002a32:	f008 f813 	bl	800aa5c <siprintf>
    ptr1.start_addr=filename;
 8002a36:	f107 030c 	add.w	r3, r7, #12
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	ptr1.size=strlen(filename);
 8002a3c:	f107 030c 	add.w	r3, r7, #12
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fd fbff 	bl	8000244 <strlen>
 8002a46:	4603      	mov	r3, r0
 8002a48:	633b      	str	r3, [r7, #48]	; 0x30

	do{
	   slocum_send_cmd(slocum_obj,SLOCUM_CMD_OPEN_FILE_W,&ptr1);
 8002a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2102      	movs	r1, #2
 8002a52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a54:	f001 fbda 	bl	800420c <slocum_send_cmd>

	   res=fsm_take_event(proc_arg->inQ_handle,&in_event,SLOCUM_RESPONSE_TIMEOUT);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f107 0108 	add.w	r1, r7, #8
 8002a60:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 fdcc 	bl	8003602 <fsm_take_event>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	   if(res==F_OK){
 8002a70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d109      	bne.n	8002a8c <slocum_open_file_proc+0x80>
	    if( in_event==SLOCUM_EVNT_FILE_CREATE_ERR_RCVD){
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b80      	cmp	r3, #128	; 0x80
 8002a7c:	d10f      	bne.n	8002a9e <slocum_open_file_proc+0x92>
	    	fsm_generate_event(proc_arg->outQ_handle,SLOCUM_EVNT_FILE_OPEN_ERR);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2189      	movs	r1, #137	; 0x89
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 fdad 	bl	80035e4 <fsm_generate_event>
 8002a8a:	e016      	b.n	8002aba <slocum_open_file_proc+0xae>
	    	return;
	    }
	   }
	   else if(res==F_TIMEOUT) retry_num--;
 8002a8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d104      	bne.n	8002a9e <slocum_open_file_proc+0x92>
 8002a94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	}while(retry_num>0);
 8002a9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1d1      	bne.n	8002a4a <slocum_open_file_proc+0x3e>

	if(retry_num==0) fsm_generate_event(proc_arg->outQ_handle,SLOCUM_EVNT_FILE_OPENED);
 8002aa6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d105      	bne.n	8002aba <slocum_open_file_proc+0xae>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2188      	movs	r1, #136	; 0x88
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fd95 	bl	80035e4 <fsm_generate_event>
}
 8002aba:	3740      	adds	r7, #64	; 0x40
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	0800e678 	.word	0x0800e678

08002ac4 <slocum_close_file_proc>:

uint32_t  slocum_close_file_events[]={SLOCUM_EVNT_FILE_CREATE_ERR_RCVD};
#define   slocum_close_file_events_num                                 1

void slocum_close_file_proc(proc_arg_t* proc_arg)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b090      	sub	sp, #64	; 0x40
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	slocum* slocum_obj=proc_arg->func_self_object;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t retry_num=SLOCUM_CONNECTION_RETRIES;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	memory_region_pointer ptr1;
	char filename[30];
	uint32_t in_event;
	F_RES res;

	sprintf(filename,"fcstub.tmp");
 8002ad8:	f107 030c 	add.w	r3, r7, #12
 8002adc:	4924      	ldr	r1, [pc, #144]	; (8002b70 <slocum_close_file_proc+0xac>)
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f007 ffbc 	bl	800aa5c <siprintf>
    ptr1.start_addr=filename;
 8002ae4:	f107 030c 	add.w	r3, r7, #12
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
	ptr1.size=strlen(filename);
 8002aea:	f107 030c 	add.w	r3, r7, #12
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fd fba8 	bl	8000244 <strlen>
 8002af4:	4603      	mov	r3, r0
 8002af6:	633b      	str	r3, [r7, #48]	; 0x30

	do{
	   slocum_send_cmd(slocum_obj,SLOCUM_CMD_OPEN_FILE_W,&ptr1);
 8002af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002afc:	461a      	mov	r2, r3
 8002afe:	2102      	movs	r1, #2
 8002b00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b02:	f001 fb83 	bl	800420c <slocum_send_cmd>

	   res=fsm_take_event(proc_arg->inQ_handle,&in_event,SLOCUM_RESPONSE_TIMEOUT);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f107 0108 	add.w	r1, r7, #8
 8002b0e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fd75 	bl	8003602 <fsm_take_event>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	   if(res==F_OK){
 8002b1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <slocum_close_file_proc+0x76>
	    if( in_event==SLOCUM_EVNT_FILE_CREATE_ERR_RCVD){
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b80      	cmp	r3, #128	; 0x80
 8002b2a:	d10f      	bne.n	8002b4c <slocum_close_file_proc+0x88>
	    	fsm_generate_event(proc_arg->outQ_handle,SLOCUM_EVNT_FILE_CLOSE_ERR);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2187      	movs	r1, #135	; 0x87
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fd56 	bl	80035e4 <fsm_generate_event>
 8002b38:	e016      	b.n	8002b68 <slocum_close_file_proc+0xa4>
	    	return;
	    }
	   }
	   else if(res==F_TIMEOUT) retry_num--;
 8002b3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d104      	bne.n	8002b4c <slocum_close_file_proc+0x88>
 8002b42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b46:	3b01      	subs	r3, #1
 8002b48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	}while(retry_num>0);
 8002b4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1d1      	bne.n	8002af8 <slocum_close_file_proc+0x34>

	if(retry_num==0) fsm_generate_event(proc_arg->outQ_handle,SLOCUM_EVNT_FILE_CLOSED);
 8002b54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d105      	bne.n	8002b68 <slocum_close_file_proc+0xa4>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	218b      	movs	r1, #139	; 0x8b
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fd3e 	bl	80035e4 <fsm_generate_event>
}
 8002b68:	3740      	adds	r7, #64	; 0x40
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	0800e684 	.word	0x0800e684

08002b74 <slocum_write_to_file_proc>:

uint32_t  slocum_write_to_file_events[]={SLOCUM_EVNT_FILE_WRITE_S_ERR_RCVD};
#define   slocum_write_to_file_events_num                                 1
void slocum_write_to_file_proc(proc_arg_t* proc_arg)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	slocum* slocum_obj=proc_arg->func_self_object;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	61fb      	str	r3, [r7, #28]

    uint32_t in_event;
    memory_region_pointer ptr1;
    F_RES res;

    ptr1.start_addr=lmp_data_bloc_msg;
 8002b82:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <slocum_write_to_file_proc+0x74>)
 8002b84:	60fb      	str	r3, [r7, #12]
	ptr1.size=strlen(lmp_data_bloc_msg);
 8002b86:	4818      	ldr	r0, [pc, #96]	; (8002be8 <slocum_write_to_file_proc+0x74>)
 8002b88:	f7fd fb5c 	bl	8000244 <strlen>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	613b      	str	r3, [r7, #16]
  	slocum_send_cmd(slocum_obj,SLOCUM_CMD_WRITE_FILE_DATA,&ptr1);
 8002b90:	f107 030c 	add.w	r3, r7, #12
 8002b94:	461a      	mov	r2, r3
 8002b96:	2103      	movs	r1, #3
 8002b98:	69f8      	ldr	r0, [r7, #28]
 8002b9a:	f001 fb37 	bl	800420c <slocum_send_cmd>

  	res=fsm_take_event(proc_arg->inQ_handle,&in_event,SLOCUM_RESPONSE_TIMEOUT);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f107 0114 	add.w	r1, r7, #20
 8002ba6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fd29 	bl	8003602 <fsm_take_event>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	76fb      	strb	r3, [r7, #27]
    if(res==F_OK){
 8002bb4:	7efb      	ldrb	r3, [r7, #27]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <slocum_write_to_file_proc+0x5a>
       if( in_event==SLOCUM_EVNT_FILE_WRITE_S_ERR_RCVD){
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b81      	cmp	r3, #129	; 0x81
 8002bbe:	d10f      	bne.n	8002be0 <slocum_write_to_file_proc+0x6c>
      	fsm_generate_event(proc_arg->outQ_handle,SLOCUM_EVNT_FILE_WRITE_ERR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2186      	movs	r1, #134	; 0x86
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fd0c 	bl	80035e4 <fsm_generate_event>
 8002bcc:	e008      	b.n	8002be0 <slocum_write_to_file_proc+0x6c>
      	return;
       }
    }
    else if(res==F_TIMEOUT) fsm_generate_event(proc_arg->outQ_handle,SLOCUM_EVNT_FILE_DATA_WRITTEN);
 8002bce:	7efb      	ldrb	r3, [r7, #27]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d105      	bne.n	8002be0 <slocum_write_to_file_proc+0x6c>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	218a      	movs	r1, #138	; 0x8a
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fd02 	bl	80035e4 <fsm_generate_event>
}
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	200007dc 	.word	0x200007dc

08002bec <slocum_depth_analyzer_proc>:
		                                 UVP6_EVNT_LPM_AGG_DATA_READY,
										 UVP6_EVNT_LPM_BUFFER_CLEARED};
#define slocum_depth_analyzer_events_num                      3


void slocum_depth_analyzer_proc(proc_arg_t* proc_arg){
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]

	slocum* slocum_obj=proc_arg->func_self_object;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]
	uint32_t in_event;
	uvp6_sensor1.profile_zone=UVP6_PROFILE_L;
 8002bfa:	4b9c      	ldr	r3, [pc, #624]	; (8002e6c <slocum_depth_analyzer_proc+0x280>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

	while(1)
	{
	 if(fsm_take_event(proc_arg->inQ_handle,&in_event,osWaitForever)==F_OK){
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f107 0108 	add.w	r1, r7, #8
 8002c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fcf7 	bl	8003602 <fsm_take_event>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f3      	bne.n	8002c02 <slocum_depth_analyzer_proc+0x16>
	   if(in_event==SLOCUM_EVNT_DEPTH_RCVD){
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b7d      	cmp	r3, #125	; 0x7d
 8002c1e:	f040 810c 	bne.w	8002e3a <slocum_depth_analyzer_proc+0x24e>
		   if(slocum_obj->prev_depth>UVP6_DEPTH_LH_PROFILE&&slocum_obj->last_depth<=UVP6_DEPTH_LH_PROFILE){
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8002c28:	4991      	ldr	r1, [pc, #580]	; (8002e70 <slocum_depth_analyzer_proc+0x284>)
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe fae0 	bl	80011f0 <__aeabi_fcmpgt>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d014      	beq.n	8002c60 <slocum_depth_analyzer_proc+0x74>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8002c3c:	498c      	ldr	r1, [pc, #560]	; (8002e70 <slocum_depth_analyzer_proc+0x284>)
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe fac2 	bl	80011c8 <__aeabi_fcmple>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <slocum_depth_analyzer_proc+0x74>
			   uvp6_sensor1.profile_zone=UVP6_PROFILE_L;
 8002c4a:	4b88      	ldr	r3, [pc, #544]	; (8002e6c <slocum_depth_analyzer_proc+0x280>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
			   fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_DEPTH_LH_REACHED_FROM_BOTTOM);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2176      	movs	r1, #118	; 0x76
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fcc3 	bl	80035e4 <fsm_generate_event>
 8002c5e:	e01d      	b.n	8002c9c <slocum_depth_analyzer_proc+0xb0>
		   }

		   else if(slocum_obj->prev_depth<UVP6_DEPTH_LH_PROFILE&&slocum_obj->last_depth>=UVP6_DEPTH_LH_PROFILE){
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8002c66:	4982      	ldr	r1, [pc, #520]	; (8002e70 <slocum_depth_analyzer_proc+0x284>)
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe faa3 	bl	80011b4 <__aeabi_fcmplt>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d013      	beq.n	8002c9c <slocum_depth_analyzer_proc+0xb0>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8002c7a:	497d      	ldr	r1, [pc, #500]	; (8002e70 <slocum_depth_analyzer_proc+0x284>)
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe faad 	bl	80011dc <__aeabi_fcmpge>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d009      	beq.n	8002c9c <slocum_depth_analyzer_proc+0xb0>
			   uvp6_sensor1.profile_zone=UVP6_PROFILE_H;
 8002c88:	4b78      	ldr	r3, [pc, #480]	; (8002e6c <slocum_depth_analyzer_proc+0x280>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
			   fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_DEPTH_LH_REACHED_FROM_TOP);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2175      	movs	r1, #117	; 0x75
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fca4 	bl	80035e4 <fsm_generate_event>
		   }

          if(glider1.last_depth<lpm_bloc_depth_start){
 8002c9c:	4b75      	ldr	r3, [pc, #468]	; (8002e74 <slocum_depth_analyzer_proc+0x288>)
 8002c9e:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8002ca2:	4a75      	ldr	r2, [pc, #468]	; (8002e78 <slocum_depth_analyzer_proc+0x28c>)
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe fa83 	bl	80011b4 <__aeabi_fcmplt>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d05a      	beq.n	8002d6a <slocum_depth_analyzer_proc+0x17e>
            if(glider1.last_depth<(lpm_bloc_depth_start-lpm_bloc_depth_size)){
 8002cb4:	4b6f      	ldr	r3, [pc, #444]	; (8002e74 <slocum_depth_analyzer_proc+0x288>)
 8002cb6:	f8d3 4012 	ldr.w	r4, [r3, #18]
 8002cba:	4623      	mov	r3, r4
 8002cbc:	461c      	mov	r4, r3
 8002cbe:	4b6e      	ldr	r3, [pc, #440]	; (8002e78 <slocum_depth_analyzer_proc+0x28c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a6e      	ldr	r2, [pc, #440]	; (8002e7c <slocum_depth_analyzer_proc+0x290>)
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd ffcb 	bl	8000c64 <__aeabi_fsub>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f7fe fa6e 	bl	80011b4 <__aeabi_fcmplt>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8106 	beq.w	8002eec <slocum_depth_analyzer_proc+0x300>
              lpm_bloc_depth_start=glider1.last_depth;
 8002ce0:	4b64      	ldr	r3, [pc, #400]	; (8002e74 <slocum_depth_analyzer_proc+0x288>)
 8002ce2:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8002ce6:	4a64      	ldr	r2, [pc, #400]	; (8002e78 <slocum_depth_analyzer_proc+0x28c>)
 8002ce8:	6013      	str	r3, [r2, #0]

       	      if(lpm_bloc_depth_start>1000.0) lpm_bloc_depth_size=20.0;
 8002cea:	4b63      	ldr	r3, [pc, #396]	; (8002e78 <slocum_depth_analyzer_proc+0x28c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4964      	ldr	r1, [pc, #400]	; (8002e80 <slocum_depth_analyzer_proc+0x294>)
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fe fa7d 	bl	80011f0 <__aeabi_fcmpgt>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <slocum_depth_analyzer_proc+0x118>
 8002cfc:	4b5f      	ldr	r3, [pc, #380]	; (8002e7c <slocum_depth_analyzer_proc+0x290>)
 8002cfe:	4a61      	ldr	r2, [pc, #388]	; (8002e84 <slocum_depth_analyzer_proc+0x298>)
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	e02b      	b.n	8002d5c <slocum_depth_analyzer_proc+0x170>
       	      else if(lpm_bloc_depth_start>500.0) lpm_bloc_depth_size=20.0;
 8002d04:	4b5c      	ldr	r3, [pc, #368]	; (8002e78 <slocum_depth_analyzer_proc+0x28c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	495f      	ldr	r1, [pc, #380]	; (8002e88 <slocum_depth_analyzer_proc+0x29c>)
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe fa70 	bl	80011f0 <__aeabi_fcmpgt>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <slocum_depth_analyzer_proc+0x132>
 8002d16:	4b59      	ldr	r3, [pc, #356]	; (8002e7c <slocum_depth_analyzer_proc+0x290>)
 8002d18:	4a5a      	ldr	r2, [pc, #360]	; (8002e84 <slocum_depth_analyzer_proc+0x298>)
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	e01e      	b.n	8002d5c <slocum_depth_analyzer_proc+0x170>
       	      else if(lpm_bloc_depth_start>100.0) lpm_bloc_depth_size=10.0;
 8002d1e:	4b56      	ldr	r3, [pc, #344]	; (8002e78 <slocum_depth_analyzer_proc+0x28c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4953      	ldr	r1, [pc, #332]	; (8002e70 <slocum_depth_analyzer_proc+0x284>)
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe fa63 	bl	80011f0 <__aeabi_fcmpgt>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <slocum_depth_analyzer_proc+0x14c>
 8002d30:	4b52      	ldr	r3, [pc, #328]	; (8002e7c <slocum_depth_analyzer_proc+0x290>)
 8002d32:	4a56      	ldr	r2, [pc, #344]	; (8002e8c <slocum_depth_analyzer_proc+0x2a0>)
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	e011      	b.n	8002d5c <slocum_depth_analyzer_proc+0x170>
       	      else if(lpm_bloc_depth_start>2.0) lpm_bloc_depth_size=5.0;
 8002d38:	4b4f      	ldr	r3, [pc, #316]	; (8002e78 <slocum_depth_analyzer_proc+0x28c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe fa55 	bl	80011f0 <__aeabi_fcmpgt>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <slocum_depth_analyzer_proc+0x168>
 8002d4c:	4b4b      	ldr	r3, [pc, #300]	; (8002e7c <slocum_depth_analyzer_proc+0x290>)
 8002d4e:	4a50      	ldr	r2, [pc, #320]	; (8002e90 <slocum_depth_analyzer_proc+0x2a4>)
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e003      	b.n	8002d5c <slocum_depth_analyzer_proc+0x170>
       	      else lpm_bloc_depth_size=0.0;
 8002d54:	4b49      	ldr	r3, [pc, #292]	; (8002e7c <slocum_depth_analyzer_proc+0x290>)
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
       	      fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_LPM_DATA_BLOC_END_REACHED);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2171      	movs	r1, #113	; 0x71
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fc3e 	bl	80035e4 <fsm_generate_event>
 8002d68:	e74b      	b.n	8002c02 <slocum_depth_analyzer_proc+0x16>
            }
          }
          else if (glider1.last_depth>lpm_bloc_depth_start){
 8002d6a:	4b42      	ldr	r3, [pc, #264]	; (8002e74 <slocum_depth_analyzer_proc+0x288>)
 8002d6c:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8002d70:	4a41      	ldr	r2, [pc, #260]	; (8002e78 <slocum_depth_analyzer_proc+0x28c>)
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fe fa3a 	bl	80011f0 <__aeabi_fcmpgt>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80b4 	beq.w	8002eec <slocum_depth_analyzer_proc+0x300>
            if(glider1.last_depth>(lpm_bloc_depth_start+lpm_bloc_depth_size)){
 8002d84:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <slocum_depth_analyzer_proc+0x288>)
 8002d86:	f8d3 4012 	ldr.w	r4, [r3, #18]
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	461c      	mov	r4, r3
 8002d8e:	4b3a      	ldr	r3, [pc, #232]	; (8002e78 <slocum_depth_analyzer_proc+0x28c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a3a      	ldr	r2, [pc, #232]	; (8002e7c <slocum_depth_analyzer_proc+0x290>)
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd ff65 	bl	8000c68 <__addsf3>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4619      	mov	r1, r3
 8002da2:	4620      	mov	r0, r4
 8002da4:	f7fe fa24 	bl	80011f0 <__aeabi_fcmpgt>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 809e 	beq.w	8002eec <slocum_depth_analyzer_proc+0x300>
              lpm_bloc_depth_start=glider1.last_depth;
 8002db0:	4b30      	ldr	r3, [pc, #192]	; (8002e74 <slocum_depth_analyzer_proc+0x288>)
 8002db2:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8002db6:	4a30      	ldr	r2, [pc, #192]	; (8002e78 <slocum_depth_analyzer_proc+0x28c>)
 8002db8:	6013      	str	r3, [r2, #0]

       	      if(lpm_bloc_depth_start>1000.0) lpm_bloc_depth_size=20.0;
 8002dba:	4b2f      	ldr	r3, [pc, #188]	; (8002e78 <slocum_depth_analyzer_proc+0x28c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4930      	ldr	r1, [pc, #192]	; (8002e80 <slocum_depth_analyzer_proc+0x294>)
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fe fa15 	bl	80011f0 <__aeabi_fcmpgt>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <slocum_depth_analyzer_proc+0x1e8>
 8002dcc:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <slocum_depth_analyzer_proc+0x290>)
 8002dce:	4a2d      	ldr	r2, [pc, #180]	; (8002e84 <slocum_depth_analyzer_proc+0x298>)
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	e02b      	b.n	8002e2c <slocum_depth_analyzer_proc+0x240>
       	      else if(lpm_bloc_depth_start>500.0) lpm_bloc_depth_size=20.0;
 8002dd4:	4b28      	ldr	r3, [pc, #160]	; (8002e78 <slocum_depth_analyzer_proc+0x28c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	492b      	ldr	r1, [pc, #172]	; (8002e88 <slocum_depth_analyzer_proc+0x29c>)
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe fa08 	bl	80011f0 <__aeabi_fcmpgt>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <slocum_depth_analyzer_proc+0x202>
 8002de6:	4b25      	ldr	r3, [pc, #148]	; (8002e7c <slocum_depth_analyzer_proc+0x290>)
 8002de8:	4a26      	ldr	r2, [pc, #152]	; (8002e84 <slocum_depth_analyzer_proc+0x298>)
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	e01e      	b.n	8002e2c <slocum_depth_analyzer_proc+0x240>
       	      else if(lpm_bloc_depth_start>100.0) lpm_bloc_depth_size=10.0;
 8002dee:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <slocum_depth_analyzer_proc+0x28c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	491f      	ldr	r1, [pc, #124]	; (8002e70 <slocum_depth_analyzer_proc+0x284>)
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fe f9fb 	bl	80011f0 <__aeabi_fcmpgt>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <slocum_depth_analyzer_proc+0x21c>
 8002e00:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <slocum_depth_analyzer_proc+0x290>)
 8002e02:	4a22      	ldr	r2, [pc, #136]	; (8002e8c <slocum_depth_analyzer_proc+0x2a0>)
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	e011      	b.n	8002e2c <slocum_depth_analyzer_proc+0x240>
       	      else if(lpm_bloc_depth_start>2.0) lpm_bloc_depth_size=5.0;
 8002e08:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <slocum_depth_analyzer_proc+0x28c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe f9ed 	bl	80011f0 <__aeabi_fcmpgt>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <slocum_depth_analyzer_proc+0x238>
 8002e1c:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <slocum_depth_analyzer_proc+0x290>)
 8002e1e:	4a1c      	ldr	r2, [pc, #112]	; (8002e90 <slocum_depth_analyzer_proc+0x2a4>)
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	e003      	b.n	8002e2c <slocum_depth_analyzer_proc+0x240>
       	      else lpm_bloc_depth_size=0.0;
 8002e24:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <slocum_depth_analyzer_proc+0x290>)
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
       	      fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_LPM_DATA_BLOC_END_REACHED);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2171      	movs	r1, #113	; 0x71
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fbd6 	bl	80035e4 <fsm_generate_event>
 8002e38:	e6e3      	b.n	8002c02 <slocum_depth_analyzer_proc+0x16>
            }
          }

	   }
	   else if(in_event==UVP6_EVNT_LPM_AGG_DATA_READY ||in_event==UVP6_EVNT_LPM_BUFFER_CLEARED){
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b72      	cmp	r3, #114	; 0x72
 8002e3e:	d003      	beq.n	8002e48 <slocum_depth_analyzer_proc+0x25c>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b73      	cmp	r3, #115	; 0x73
 8002e44:	f47f aedd 	bne.w	8002c02 <slocum_depth_analyzer_proc+0x16>
		   lpm_bloc_depth_start=glider1.last_depth;
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <slocum_depth_analyzer_proc+0x288>)
 8002e4a:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <slocum_depth_analyzer_proc+0x28c>)
 8002e50:	6013      	str	r3, [r2, #0]
		   if(lpm_bloc_depth_start>1000.0) lpm_bloc_depth_size=20.0;
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <slocum_depth_analyzer_proc+0x28c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	490a      	ldr	r1, [pc, #40]	; (8002e80 <slocum_depth_analyzer_proc+0x294>)
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe f9c9 	bl	80011f0 <__aeabi_fcmpgt>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d017      	beq.n	8002e94 <slocum_depth_analyzer_proc+0x2a8>
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <slocum_depth_analyzer_proc+0x290>)
 8002e66:	4a07      	ldr	r2, [pc, #28]	; (8002e84 <slocum_depth_analyzer_proc+0x298>)
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	e6ca      	b.n	8002c02 <slocum_depth_analyzer_proc+0x16>
 8002e6c:	20000c54 	.word	0x20000c54
 8002e70:	42c80000 	.word	0x42c80000
 8002e74:	2000111c 	.word	0x2000111c
 8002e78:	200009d4 	.word	0x200009d4
 8002e7c:	200009d0 	.word	0x200009d0
 8002e80:	447a0000 	.word	0x447a0000
 8002e84:	41a00000 	.word	0x41a00000
 8002e88:	43fa0000 	.word	0x43fa0000
 8002e8c:	41200000 	.word	0x41200000
 8002e90:	40a00000 	.word	0x40a00000
		   else if(lpm_bloc_depth_start>500.0) lpm_bloc_depth_size=20.0;
 8002e94:	4b16      	ldr	r3, [pc, #88]	; (8002ef0 <slocum_depth_analyzer_proc+0x304>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4916      	ldr	r1, [pc, #88]	; (8002ef4 <slocum_depth_analyzer_proc+0x308>)
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe f9a8 	bl	80011f0 <__aeabi_fcmpgt>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <slocum_depth_analyzer_proc+0x2c2>
 8002ea6:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <slocum_depth_analyzer_proc+0x30c>)
 8002ea8:	4a14      	ldr	r2, [pc, #80]	; (8002efc <slocum_depth_analyzer_proc+0x310>)
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	e6a9      	b.n	8002c02 <slocum_depth_analyzer_proc+0x16>
		   else if(lpm_bloc_depth_start>100.0) lpm_bloc_depth_size=10.0;
 8002eae:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <slocum_depth_analyzer_proc+0x304>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4913      	ldr	r1, [pc, #76]	; (8002f00 <slocum_depth_analyzer_proc+0x314>)
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe f99b 	bl	80011f0 <__aeabi_fcmpgt>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <slocum_depth_analyzer_proc+0x2dc>
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <slocum_depth_analyzer_proc+0x30c>)
 8002ec2:	4a10      	ldr	r2, [pc, #64]	; (8002f04 <slocum_depth_analyzer_proc+0x318>)
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	e69c      	b.n	8002c02 <slocum_depth_analyzer_proc+0x16>
		   else if(lpm_bloc_depth_start>2.0) lpm_bloc_depth_size=5.0;
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <slocum_depth_analyzer_proc+0x304>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fe f98d 	bl	80011f0 <__aeabi_fcmpgt>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <slocum_depth_analyzer_proc+0x2f8>
 8002edc:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <slocum_depth_analyzer_proc+0x30c>)
 8002ede:	4a0a      	ldr	r2, [pc, #40]	; (8002f08 <slocum_depth_analyzer_proc+0x31c>)
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	e68e      	b.n	8002c02 <slocum_depth_analyzer_proc+0x16>
		   else lpm_bloc_depth_size=0.0;
 8002ee4:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <slocum_depth_analyzer_proc+0x30c>)
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
	 if(fsm_take_event(proc_arg->inQ_handle,&in_event,osWaitForever)==F_OK){
 8002eec:	e689      	b.n	8002c02 <slocum_depth_analyzer_proc+0x16>
 8002eee:	bf00      	nop
 8002ef0:	200009d4 	.word	0x200009d4
 8002ef4:	43fa0000 	.word	0x43fa0000
 8002ef8:	200009d0 	.word	0x200009d0
 8002efc:	41a00000 	.word	0x41a00000
 8002f00:	42c80000 	.word	0x42c80000
 8002f04:	41200000 	.word	0x41200000
 8002f08:	40a00000 	.word	0x40a00000

08002f0c <slocum_final_depth_state_analyzer_proc>:
		                                             SLOCUM_EVNT_FINAL_DEPTH_DIVING_RCVD,
													 SLOCUM_EVNT_FINAL_DEPTH_CLIMBING_RCVD};
#define slocum_final_depth_state_analyzer_events_num                      3


void slocum_final_depth_state_analyzer_proc(proc_arg_t* proc_arg){
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

	slocum* slocum_obj=proc_arg->func_self_object;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]
	uint32_t in_event;


	while(1)
	{
	 if(fsm_take_event(proc_arg->inQ_handle,&in_event,osWaitForever)==F_OK){
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f107 0108 	add.w	r1, r7, #8
 8002f22:	f04f 32ff 	mov.w	r2, #4294967295
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fb6b 	bl	8003602 <fsm_take_event>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f3      	bne.n	8002f1a <slocum_final_depth_state_analyzer_proc+0xe>
	   if(in_event==SLOCUM_EVNT_FINAL_DEPTH_AT_SURFACE_RCVD){
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b82      	cmp	r3, #130	; 0x82
 8002f36:	d110      	bne.n	8002f5a <slocum_final_depth_state_analyzer_proc+0x4e>
		   if(slocum_obj->dcs_state==GLIDER_STATE_CLIMBING){
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d1eb      	bne.n	8002f1a <slocum_final_depth_state_analyzer_proc+0xe>
			   slocum_obj->dcs_state=GLIDER_STATE_AT_SURFACE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2202      	movs	r2, #2
 8002f46:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			   fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_CLIMB_TO_SURFACE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f240 1135 	movw	r1, #309	; 0x135
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fb46 	bl	80035e4 <fsm_generate_event>
 8002f58:	e7df      	b.n	8002f1a <slocum_final_depth_state_analyzer_proc+0xe>
		   }
	   }
	   else if(in_event==SLOCUM_EVNT_FINAL_DEPTH_DIVING_RCVD){
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b83      	cmp	r3, #131	; 0x83
 8002f5e:	d121      	bne.n	8002fa4 <slocum_final_depth_state_analyzer_proc+0x98>
		   if(slocum_obj->dcs_state==GLIDER_STATE_AT_SURFACE){
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d10b      	bne.n	8002f82 <slocum_final_depth_state_analyzer_proc+0x76>
			   slocum_obj->dcs_state=GLIDER_STATE_DIVING;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			   fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_SURFACE_TO_DIVE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f44f 719b 	mov.w	r1, #310	; 0x136
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 fb32 	bl	80035e4 <fsm_generate_event>
 8002f80:	e7cb      	b.n	8002f1a <slocum_final_depth_state_analyzer_proc+0xe>
		   }
		   else if(slocum_obj->dcs_state==GLIDER_STATE_CLIMBING){
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d1c6      	bne.n	8002f1a <slocum_final_depth_state_analyzer_proc+0xe>
			   slocum_obj->dcs_state=GLIDER_STATE_DIVING;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			   fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_CLIMB_TO_DIVE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f240 1137 	movw	r1, #311	; 0x137
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fb21 	bl	80035e4 <fsm_generate_event>
 8002fa2:	e7ba      	b.n	8002f1a <slocum_final_depth_state_analyzer_proc+0xe>
		   }
	   }
	   else if(in_event==SLOCUM_EVNT_FINAL_DEPTH_CLIMBING_RCVD){
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b84      	cmp	r3, #132	; 0x84
 8002fa8:	d1b7      	bne.n	8002f1a <slocum_final_depth_state_analyzer_proc+0xe>
		   if(slocum_obj->dcs_state==GLIDER_STATE_DIVING){
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1b2      	bne.n	8002f1a <slocum_final_depth_state_analyzer_proc+0xe>
			   slocum_obj->dcs_state=GLIDER_STATE_CLIMBING;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			   fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_DIVE_TO_CLIMB);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fb0d 	bl	80035e4 <fsm_generate_event>
	 if(fsm_take_event(proc_arg->inQ_handle,&in_event,osWaitForever)==F_OK){
 8002fca:	e7a6      	b.n	8002f1a <slocum_final_depth_state_analyzer_proc+0xe>

08002fcc <slocum_send_evnt_proc>:
										UVP6_EVNT_START_ACK_RCVD

                                  };
#define   slocum_send_evnt_events_num                                 27
void slocum_send_evnt_proc(proc_arg_t* proc_arg)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
	slocum* slocum_obj=proc_arg->func_self_object;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	617b      	str	r3, [r7, #20]
    uint32_t in_event;
    F_RES res;
    while(1)
    {
  	 res=fsm_take_event(proc_arg->inQ_handle,&in_event,osWaitForever);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f107 010c 	add.w	r1, r7, #12
 8002fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fb0b 	bl	8003602 <fsm_take_event>
 8002fec:	4603      	mov	r3, r0
 8002fee:	74fb      	strb	r3, [r7, #19]
     if(res==F_OK){
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f1      	bne.n	8002fda <slocum_send_evnt_proc+0xe>
    	 slocum_send_evnt(slocum_obj,in_event);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	6978      	ldr	r0, [r7, #20]
 8002ffc:	f001 f8c6 	bl	800418c <slocum_send_evnt>
  	 res=fsm_take_event(proc_arg->inQ_handle,&in_event,osWaitForever);
 8003000:	e7eb      	b.n	8002fda <slocum_send_evnt_proc+0xe>
	...

08003004 <init_act>:
//---------------- EA tables description END ----------------------


//-----------------BEGIN ACTION FUNCTIONS------------------------------
void  init_act()
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
	disp_proc_set_EA_table(&dispatcher1,&fsm_S0_dos_active);
 8003008:	4910      	ldr	r1, [pc, #64]	; (800304c <init_act+0x48>)
 800300a:	4811      	ldr	r0, [pc, #68]	; (8003050 <init_act+0x4c>)
 800300c:	f7ff f80c 	bl	8002028 <disp_proc_set_EA_table>
	fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_S0);
 8003010:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <init_act+0x4c>)
 8003012:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8003016:	21c8      	movs	r1, #200	; 0xc8
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fae3 	bl	80035e4 <fsm_generate_event>
	if(disp_proc_start(&dispatcher1, SLOCUM_PROC_DEPTH_ANALYZER, NULL)==F_ERR){/*err processing*/}
 800301e:	2200      	movs	r2, #0
 8003020:	2109      	movs	r1, #9
 8003022:	480b      	ldr	r0, [pc, #44]	; (8003050 <init_act+0x4c>)
 8003024:	f7fe ffaa 	bl	8001f7c <disp_proc_start>
	if(disp_proc_start(&dispatcher1, UVP6_PROC_LPM_DATA_AGG, NULL)==F_ERR){/*err processing*/}
 8003028:	2200      	movs	r2, #0
 800302a:	2105      	movs	r1, #5
 800302c:	4808      	ldr	r0, [pc, #32]	; (8003050 <init_act+0x4c>)
 800302e:	f7fe ffa5 	bl	8001f7c <disp_proc_start>
	if(disp_proc_start(&dispatcher1, SLOCUM_PROC_EVENTS, NULL)==F_ERR){/*err processing*/}
 8003032:	2200      	movs	r2, #0
 8003034:	210a      	movs	r1, #10
 8003036:	4806      	ldr	r0, [pc, #24]	; (8003050 <init_act+0x4c>)
 8003038:	f7fe ffa0 	bl	8001f7c <disp_proc_start>
	if(disp_proc_start(&dispatcher1, SLOCUM_PROC_FINAL_DEPTH_ANALYZER, NULL)==F_ERR){/*err processing*/}
 800303c:	2200      	movs	r2, #0
 800303e:	210b      	movs	r1, #11
 8003040:	4803      	ldr	r0, [pc, #12]	; (8003050 <init_act+0x4c>)
 8003042:	f7fe ff9b 	bl	8001f7c <disp_proc_start>
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	200001ec 	.word	0x200001ec
 8003050:	20000ac8 	.word	0x20000ac8

08003054 <start_mission>:

void start_mission()
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
	disp_proc_set_EA_table(&dispatcher1,&fsm_S1_mission_start);
 8003058:	4908      	ldr	r1, [pc, #32]	; (800307c <start_mission+0x28>)
 800305a:	4809      	ldr	r0, [pc, #36]	; (8003080 <start_mission+0x2c>)
 800305c:	f7fe ffe4 	bl	8002028 <disp_proc_set_EA_table>
	glider1.dcs_state=GLIDER_STATE_AT_SURFACE;  // "fake state" for trigger dive
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <start_mission+0x30>)
 8003062:	2202      	movs	r2, #2
 8003064:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_S1);
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <start_mission+0x2c>)
 800306a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800306e:	21c9      	movs	r1, #201	; 0xc9
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fab7 	bl	80035e4 <fsm_generate_event>
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	200001f4 	.word	0x200001f4
 8003080:	20000ac8 	.word	0x20000ac8
 8003084:	2000111c 	.word	0x2000111c

08003088 <go_dos>:
void go_dos()
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
	if(disp_proc_start(&dispatcher1, UVP6_PROC_POWER_OFF, NULL)==F_ERR){/*err processing*/}
 800308c:	2200      	movs	r2, #0
 800308e:	2104      	movs	r1, #4
 8003090:	4807      	ldr	r0, [pc, #28]	; (80030b0 <go_dos+0x28>)
 8003092:	f7fe ff73 	bl	8001f7c <disp_proc_start>
	disp_proc_set_EA_table(&dispatcher1,&fsm_S0_dos_active);
 8003096:	4907      	ldr	r1, [pc, #28]	; (80030b4 <go_dos+0x2c>)
 8003098:	4805      	ldr	r0, [pc, #20]	; (80030b0 <go_dos+0x28>)
 800309a:	f7fe ffc5 	bl	8002028 <disp_proc_set_EA_table>
	fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_S0);
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <go_dos+0x28>)
 80030a0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80030a4:	21c8      	movs	r1, #200	; 0xc8
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fa9c 	bl	80035e4 <fsm_generate_event>
}
 80030ac:	bf00      	nop
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20000ac8 	.word	0x20000ac8
 80030b4:	200001ec 	.word	0x200001ec

080030b8 <stop_and_go_dos>:
void stop_and_go_dos()
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
	disp_proc_set_EA_table(&dispatcher1,&fsm_S7_stop_and_go_dos);
 80030bc:	4908      	ldr	r1, [pc, #32]	; (80030e0 <stop_and_go_dos+0x28>)
 80030be:	4809      	ldr	r0, [pc, #36]	; (80030e4 <stop_and_go_dos+0x2c>)
 80030c0:	f7fe ffb2 	bl	8002028 <disp_proc_set_EA_table>
	fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_S7);
 80030c4:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <stop_and_go_dos+0x2c>)
 80030c6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80030ca:	21cf      	movs	r1, #207	; 0xcf
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fa89 	bl	80035e4 <fsm_generate_event>
	if(disp_proc_start(&dispatcher1, UVP6_PROC_STOP, NULL)==F_ERR){/*err processing*/}
 80030d2:	2200      	movs	r2, #0
 80030d4:	2100      	movs	r1, #0
 80030d6:	4803      	ldr	r0, [pc, #12]	; (80030e4 <stop_and_go_dos+0x2c>)
 80030d8:	f7fe ff50 	bl	8001f7c <disp_proc_start>
}
 80030dc:	bf00      	nop
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	2000021c 	.word	0x2000021c
 80030e4:	20000ac8 	.word	0x20000ac8

080030e8 <set_power_on>:
//-------
void set_power_on()
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
	if(disp_proc_start(&dispatcher1, UVP6_PROC_POWER_ON, NULL)==F_ERR){/*err processing*/}
 80030ec:	2200      	movs	r2, #0
 80030ee:	2103      	movs	r1, #3
 80030f0:	4802      	ldr	r0, [pc, #8]	; (80030fc <set_power_on+0x14>)
 80030f2:	f7fe ff43 	bl	8001f7c <disp_proc_start>
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000ac8 	.word	0x20000ac8

08003100 <set_power_off>:
void  set_power_off()
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
	if(disp_proc_start(&dispatcher1, UVP6_PROC_POWER_OFF, NULL)==F_ERR){/*err processing*/}
 8003104:	2200      	movs	r2, #0
 8003106:	2104      	movs	r1, #4
 8003108:	4802      	ldr	r0, [pc, #8]	; (8003114 <set_power_off+0x14>)
 800310a:	f7fe ff37 	bl	8001f7c <disp_proc_start>
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000ac8 	.word	0x20000ac8

08003118 <save_data>:

void save_data()
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
	fsm_generate_event(dispatcher1.events_q_Handle,UVP6_EVNT_LPM_DATA_BLOC_END_REACHED);
 800311c:	4b04      	ldr	r3, [pc, #16]	; (8003130 <save_data+0x18>)
 800311e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8003122:	2171      	movs	r1, #113	; 0x71
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fa5d 	bl	80035e4 <fsm_generate_event>
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000ac8 	.word	0x20000ac8

08003134 <open_file>:

void open_file()
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
	if(disp_proc_start(&dispatcher1, SLOCUM_PROC_FILE_OPEN, NULL)==F_ERR){/*err processing*/}
 8003138:	2200      	movs	r2, #0
 800313a:	2106      	movs	r1, #6
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <open_file+0x14>)
 800313e:	f7fe ff1d 	bl	8001f7c <disp_proc_start>
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000ac8 	.word	0x20000ac8

0800314c <config_sensor>:
void config_sensor()
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
	if(uvp6_sensor1.profile_zone==UVP6_PROFILE_H){
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <config_sensor+0x34>)
 8003152:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003156:	2b01      	cmp	r3, #1
 8003158:	d105      	bne.n	8003166 <config_sensor+0x1a>
	 if(disp_proc_start(&dispatcher1, UVP6_PROC_START_HIGH_PROFILE, NULL)==F_ERR){/*err processing*/}
 800315a:	2200      	movs	r2, #0
 800315c:	2102      	movs	r1, #2
 800315e:	4809      	ldr	r0, [pc, #36]	; (8003184 <config_sensor+0x38>)
 8003160:	f7fe ff0c 	bl	8001f7c <disp_proc_start>
	}
	else if(uvp6_sensor1.profile_zone==UVP6_PROFILE_L){
	 if(disp_proc_start(&dispatcher1, UVP6_PROC_START_LOW_PROFILE, NULL)==F_ERR){/*err processing*/}
	}
}
 8003164:	e009      	b.n	800317a <config_sensor+0x2e>
	else if(uvp6_sensor1.profile_zone==UVP6_PROFILE_L){
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <config_sensor+0x34>)
 8003168:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d104      	bne.n	800317a <config_sensor+0x2e>
	 if(disp_proc_start(&dispatcher1, UVP6_PROC_START_LOW_PROFILE, NULL)==F_ERR){/*err processing*/}
 8003170:	2200      	movs	r2, #0
 8003172:	2101      	movs	r1, #1
 8003174:	4803      	ldr	r0, [pc, #12]	; (8003184 <config_sensor+0x38>)
 8003176:	f7fe ff01 	bl	8001f7c <disp_proc_start>
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000c54 	.word	0x20000c54
 8003184:	20000ac8 	.word	0x20000ac8

08003188 <stop_and_report>:

void stop_and_report()
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
	glider1.dive_climb_counter++;
 800318c:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <stop_and_report+0x68>)
 800318e:	f8d3 3043 	ldr.w	r3, [r3, #67]	; 0x43
 8003192:	3301      	adds	r3, #1
 8003194:	4a16      	ldr	r2, [pc, #88]	; (80031f0 <stop_and_report+0x68>)
 8003196:	f8c2 3043 	str.w	r3, [r2, #67]	; 0x43
	glider1.dive_climb_counter%=SLOCUM_DIVE_COUNTER_MAX;
 800319a:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <stop_and_report+0x68>)
 800319c:	f8d3 2043 	ldr.w	r2, [r3, #67]	; 0x43
 80031a0:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <stop_and_report+0x6c>)
 80031a2:	fba3 1302 	umull	r1, r3, r3, r2
 80031a6:	1ad1      	subs	r1, r2, r3
 80031a8:	0849      	lsrs	r1, r1, #1
 80031aa:	440b      	add	r3, r1
 80031ac:	0a5b      	lsrs	r3, r3, #9
 80031ae:	f240 31e7 	movw	r1, #999	; 0x3e7
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	4a0d      	ldr	r2, [pc, #52]	; (80031f0 <stop_and_report+0x68>)
 80031ba:	f8c2 3043 	str.w	r3, [r2, #67]	; 0x43

	close_file();
 80031be:	f000 f8af 	bl	8003320 <close_file>
	set_power_off();
 80031c2:	f7ff ff9d 	bl	8003100 <set_power_off>

	disp_proc_set_EA_table(&dispatcher1,&fsm_S1_mission_start);
 80031c6:	490c      	ldr	r1, [pc, #48]	; (80031f8 <stop_and_report+0x70>)
 80031c8:	480c      	ldr	r0, [pc, #48]	; (80031fc <stop_and_report+0x74>)
 80031ca:	f7fe ff2d 	bl	8002028 <disp_proc_set_EA_table>
	fsm_generate_event(dispatcher1.events_q_Handle,FSM_EVNT_ERR_SENSOR_NOT_RESPOND);
 80031ce:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <stop_and_report+0x74>)
 80031d0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80031d4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fa03 	bl	80035e4 <fsm_generate_event>
	fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_S1);
 80031de:	4b07      	ldr	r3, [pc, #28]	; (80031fc <stop_and_report+0x74>)
 80031e0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80031e4:	21c9      	movs	r1, #201	; 0xc9
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f9fc 	bl	80035e4 <fsm_generate_event>

}
 80031ec:	bf00      	nop
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	2000111c 	.word	0x2000111c
 80031f4:	06680a41 	.word	0x06680a41
 80031f8:	200001f4 	.word	0x200001f4
 80031fc:	20000ac8 	.word	0x20000ac8

08003200 <clear_lpm_data>:

void clear_lpm_data()
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0

	fsm_generate_event(dispatcher1.events_q_Handle,FSM_EVNT_READY_FOR_LPM_DATA);
 8003204:	4b04      	ldr	r3, [pc, #16]	; (8003218 <clear_lpm_data+0x18>)
 8003206:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800320a:	f44f 7199 	mov.w	r1, #306	; 0x132
 800320e:	4618      	mov	r0, r3
 8003210:	f000 f9e8 	bl	80035e4 <fsm_generate_event>

}
 8003214:	bf00      	nop
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20000ac8 	.word	0x20000ac8

0800321c <write_data>:
void write_data()
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
	if(disp_proc_start(&dispatcher1, SLOCUM_PROC_FILE_WRITE, NULL)==F_ERR){/*err processing*/}
 8003220:	2200      	movs	r2, #0
 8003222:	2107      	movs	r1, #7
 8003224:	4802      	ldr	r0, [pc, #8]	; (8003230 <write_data+0x14>)
 8003226:	f7fe fea9 	bl	8001f7c <disp_proc_start>
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000ac8 	.word	0x20000ac8

08003234 <uvp6_stop>:
void uvp6_stop()
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
	if(disp_proc_start(&dispatcher1, UVP6_PROC_STOP, NULL)==F_ERR){/*err processing*/}
 8003238:	2200      	movs	r2, #0
 800323a:	2100      	movs	r1, #0
 800323c:	4802      	ldr	r0, [pc, #8]	; (8003248 <uvp6_stop+0x14>)
 800323e:	f7fe fe9d 	bl	8001f7c <disp_proc_start>
}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000ac8 	.word	0x20000ac8

0800324c <S1_wait_mission_id>:
}

//-------

void S1_wait_mission_id()
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
	if(uvp6_sensor1.power_status==UVP6_POWER_IS_ON){
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <S1_wait_mission_id+0x28>)
 8003252:	7b5b      	ldrb	r3, [r3, #13]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10a      	bne.n	800326e <S1_wait_mission_id+0x22>
	   disp_proc_set_EA_table(&dispatcher1,&fsm_S3_mission_id);
 8003258:	4907      	ldr	r1, [pc, #28]	; (8003278 <S1_wait_mission_id+0x2c>)
 800325a:	4808      	ldr	r0, [pc, #32]	; (800327c <S1_wait_mission_id+0x30>)
 800325c:	f7fe fee4 	bl	8002028 <disp_proc_set_EA_table>
	   fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_S3);
 8003260:	4b06      	ldr	r3, [pc, #24]	; (800327c <S1_wait_mission_id+0x30>)
 8003262:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8003266:	21cb      	movs	r1, #203	; 0xcb
 8003268:	4618      	mov	r0, r3
 800326a:	f000 f9bb 	bl	80035e4 <fsm_generate_event>
	}
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000c54 	.word	0x20000c54
 8003278:	200001fc 	.word	0x200001fc
 800327c:	20000ac8 	.word	0x20000ac8

08003280 <S3_start_pre_conf>:

//-------

void S3_start_pre_conf()
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
	disp_proc_set_EA_table(&dispatcher1,&fsm_S4_pre_conf);
 8003284:	490a      	ldr	r1, [pc, #40]	; (80032b0 <S3_start_pre_conf+0x30>)
 8003286:	480b      	ldr	r0, [pc, #44]	; (80032b4 <S3_start_pre_conf+0x34>)
 8003288:	f7fe fece 	bl	8002028 <disp_proc_set_EA_table>
	fsm_generate_event(dispatcher1.events_q_Handle,FSM_EVNT_READY_FOR_PRE_CONFIG);
 800328c:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <S3_start_pre_conf+0x34>)
 800328e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8003292:	f44f 7198 	mov.w	r1, #304	; 0x130
 8003296:	4618      	mov	r0, r3
 8003298:	f000 f9a4 	bl	80035e4 <fsm_generate_event>
	fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_S4);
 800329c:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <S3_start_pre_conf+0x34>)
 800329e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80032a2:	21cc      	movs	r1, #204	; 0xcc
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 f99d 	bl	80035e4 <fsm_generate_event>
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000204 	.word	0x20000204
 80032b4:	20000ac8 	.word	0x20000ac8

080032b8 <start_measurement>:

//-------

void start_measurement()
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
	disp_proc_set_EA_table(&dispatcher1,&fsm_S5_measure);
 80032bc:	490a      	ldr	r1, [pc, #40]	; (80032e8 <start_measurement+0x30>)
 80032be:	480b      	ldr	r0, [pc, #44]	; (80032ec <start_measurement+0x34>)
 80032c0:	f7fe feb2 	bl	8002028 <disp_proc_set_EA_table>
	fsm_generate_event(dispatcher1.events_q_Handle,FSM_EVNT_PRE_CONFIG_FINISHED);
 80032c4:	4b09      	ldr	r3, [pc, #36]	; (80032ec <start_measurement+0x34>)
 80032c6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80032ca:	f240 1131 	movw	r1, #305	; 0x131
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f988 	bl	80035e4 <fsm_generate_event>
	fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_S5);
 80032d4:	4b05      	ldr	r3, [pc, #20]	; (80032ec <start_measurement+0x34>)
 80032d6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80032da:	21cd      	movs	r1, #205	; 0xcd
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 f981 	bl	80035e4 <fsm_generate_event>
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	2000020c 	.word	0x2000020c
 80032ec:	20000ac8 	.word	0x20000ac8

080032f0 <stop_measurements>:

//------

void stop_measurements()
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
	if(disp_proc_start(&dispatcher1, UVP6_PROC_STOP, NULL)==F_ERR){/*err processing*/}
 80032f4:	2200      	movs	r2, #0
 80032f6:	2100      	movs	r1, #0
 80032f8:	4807      	ldr	r0, [pc, #28]	; (8003318 <stop_measurements+0x28>)
 80032fa:	f7fe fe3f 	bl	8001f7c <disp_proc_start>
	disp_proc_set_EA_table(&dispatcher1,&fsm_S6_post_conf);
 80032fe:	4907      	ldr	r1, [pc, #28]	; (800331c <stop_measurements+0x2c>)
 8003300:	4805      	ldr	r0, [pc, #20]	; (8003318 <stop_measurements+0x28>)
 8003302:	f7fe fe91 	bl	8002028 <disp_proc_set_EA_table>
	fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_S6);
 8003306:	4b04      	ldr	r3, [pc, #16]	; (8003318 <stop_measurements+0x28>)
 8003308:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800330c:	21ce      	movs	r1, #206	; 0xce
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f968 	bl	80035e4 <fsm_generate_event>
}
 8003314:	bf00      	nop
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000ac8 	.word	0x20000ac8
 800331c:	20000214 	.word	0x20000214

08003320 <close_file>:

//-------

void close_file()
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
	if(disp_proc_start(&dispatcher1, SLOCUM_PROC_FILE_CLOSE, NULL)==F_ERR){/*err processing*/}
 8003324:	2200      	movs	r2, #0
 8003326:	2108      	movs	r1, #8
 8003328:	4802      	ldr	r0, [pc, #8]	; (8003334 <close_file+0x14>)
 800332a:	f7fe fe27 	bl	8001f7c <disp_proc_start>
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000ac8 	.word	0x20000ac8

08003338 <S6_select_state>:

void S6_select_state()
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
	glider1.dive_climb_counter++;
 800333c:	4b21      	ldr	r3, [pc, #132]	; (80033c4 <S6_select_state+0x8c>)
 800333e:	f8d3 3043 	ldr.w	r3, [r3, #67]	; 0x43
 8003342:	3301      	adds	r3, #1
 8003344:	4a1f      	ldr	r2, [pc, #124]	; (80033c4 <S6_select_state+0x8c>)
 8003346:	f8c2 3043 	str.w	r3, [r2, #67]	; 0x43
	glider1.dive_climb_counter%=SLOCUM_DIVE_COUNTER_MAX;
 800334a:	4b1e      	ldr	r3, [pc, #120]	; (80033c4 <S6_select_state+0x8c>)
 800334c:	f8d3 2043 	ldr.w	r2, [r3, #67]	; 0x43
 8003350:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <S6_select_state+0x90>)
 8003352:	fba3 1302 	umull	r1, r3, r3, r2
 8003356:	1ad1      	subs	r1, r2, r3
 8003358:	0849      	lsrs	r1, r1, #1
 800335a:	440b      	add	r3, r1
 800335c:	0a5b      	lsrs	r3, r3, #9
 800335e:	f240 31e7 	movw	r1, #999	; 0x3e7
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	4a16      	ldr	r2, [pc, #88]	; (80033c4 <S6_select_state+0x8c>)
 800336a:	f8c2 3043 	str.w	r3, [r2, #67]	; 0x43


	if(glider1.dcs_state==GLIDER_STATE_AT_SURFACE){
 800336e:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <S6_select_state+0x8c>)
 8003370:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003374:	2b02      	cmp	r3, #2
 8003376:	d113      	bne.n	80033a0 <S6_select_state+0x68>
		disp_proc_set_EA_table(&dispatcher1,&fsm_S1_mission_start);
 8003378:	4914      	ldr	r1, [pc, #80]	; (80033cc <S6_select_state+0x94>)
 800337a:	4815      	ldr	r0, [pc, #84]	; (80033d0 <S6_select_state+0x98>)
 800337c:	f7fe fe54 	bl	8002028 <disp_proc_set_EA_table>
		fsm_generate_event(dispatcher1.events_q_Handle,FSM_EVNT_SURFACED);
 8003380:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <S6_select_state+0x98>)
 8003382:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8003386:	f44f 719a 	mov.w	r1, #308	; 0x134
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f92a 	bl	80035e4 <fsm_generate_event>
		fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_S1);
 8003390:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <S6_select_state+0x98>)
 8003392:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8003396:	21c9      	movs	r1, #201	; 0xc9
 8003398:	4618      	mov	r0, r3
 800339a:	f000 f923 	bl	80035e4 <fsm_generate_event>
	}
	else if(glider1.dcs_state==GLIDER_STATE_CLIMBING){
		S3_start_pre_conf();
	}

}
 800339e:	e00e      	b.n	80033be <S6_select_state+0x86>
	else if(glider1.dcs_state==GLIDER_STATE_DIVING){
 80033a0:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <S6_select_state+0x8c>)
 80033a2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d102      	bne.n	80033b0 <S6_select_state+0x78>
		S3_start_pre_conf();
 80033aa:	f7ff ff69 	bl	8003280 <S3_start_pre_conf>
}
 80033ae:	e006      	b.n	80033be <S6_select_state+0x86>
	else if(glider1.dcs_state==GLIDER_STATE_CLIMBING){
 80033b0:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <S6_select_state+0x8c>)
 80033b2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <S6_select_state+0x86>
		S3_start_pre_conf();
 80033ba:	f7ff ff61 	bl	8003280 <S3_start_pre_conf>
}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	2000111c 	.word	0x2000111c
 80033c8:	06680a41 	.word	0x06680a41
 80033cc:	200001f4 	.word	0x200001f4
 80033d0:	20000ac8 	.word	0x20000ac8

080033d4 <fsm_init>:




void fsm_init()
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af04      	add	r7, sp, #16
	disp_proc_init_func(&dispatcher1, UVP6_PROC_POWER_ON,&uvp6_power_on_proc,proc_inQ1Handle,PROC_LINK_Q,&uvp6_sensor1,uvp6_power_on_events_num,uvp6_power_on_events);
 80033da:	4b5c      	ldr	r3, [pc, #368]	; (800354c <fsm_init+0x178>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a5c      	ldr	r2, [pc, #368]	; (8003550 <fsm_init+0x17c>)
 80033e0:	9203      	str	r2, [sp, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	9202      	str	r2, [sp, #8]
 80033e6:	4a5b      	ldr	r2, [pc, #364]	; (8003554 <fsm_init+0x180>)
 80033e8:	9201      	str	r2, [sp, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	9200      	str	r2, [sp, #0]
 80033ee:	4a5a      	ldr	r2, [pc, #360]	; (8003558 <fsm_init+0x184>)
 80033f0:	2103      	movs	r1, #3
 80033f2:	485a      	ldr	r0, [pc, #360]	; (800355c <fsm_init+0x188>)
 80033f4:	f7fe fd6a 	bl	8001ecc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, UVP6_PROC_POWER_OFF,&uvp6_power_off_proc,proc_inQ2Handle,PROC_LINK_Q,&uvp6_sensor1,uvp6_power_off_events_num,uvp6_power_off_events);
 80033f8:	4b59      	ldr	r3, [pc, #356]	; (8003560 <fsm_init+0x18c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a59      	ldr	r2, [pc, #356]	; (8003564 <fsm_init+0x190>)
 80033fe:	9203      	str	r2, [sp, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	9202      	str	r2, [sp, #8]
 8003404:	4a53      	ldr	r2, [pc, #332]	; (8003554 <fsm_init+0x180>)
 8003406:	9201      	str	r2, [sp, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	9200      	str	r2, [sp, #0]
 800340c:	4a56      	ldr	r2, [pc, #344]	; (8003568 <fsm_init+0x194>)
 800340e:	2104      	movs	r1, #4
 8003410:	4852      	ldr	r0, [pc, #328]	; (800355c <fsm_init+0x188>)
 8003412:	f7fe fd5b 	bl	8001ecc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, UVP6_PROC_STOP,&uvp6_stop_proc,proc_inQ3Handle,PROC_LINK_Q,&uvp6_sensor1,uvp6_stop_events_num,uvp6_stop_events);
 8003416:	4b55      	ldr	r3, [pc, #340]	; (800356c <fsm_init+0x198>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a55      	ldr	r2, [pc, #340]	; (8003570 <fsm_init+0x19c>)
 800341c:	9203      	str	r2, [sp, #12]
 800341e:	2202      	movs	r2, #2
 8003420:	9202      	str	r2, [sp, #8]
 8003422:	4a4c      	ldr	r2, [pc, #304]	; (8003554 <fsm_init+0x180>)
 8003424:	9201      	str	r2, [sp, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	9200      	str	r2, [sp, #0]
 800342a:	4a52      	ldr	r2, [pc, #328]	; (8003574 <fsm_init+0x1a0>)
 800342c:	2100      	movs	r1, #0
 800342e:	484b      	ldr	r0, [pc, #300]	; (800355c <fsm_init+0x188>)
 8003430:	f7fe fd4c 	bl	8001ecc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, UVP6_PROC_START_LOW_PROFILE,&uvp6_startL_proc,proc_inQ4Handle,PROC_LINK_Q,&uvp6_sensor1,uvp6_startL_events_num,uvp6_startL_events);
 8003434:	4b50      	ldr	r3, [pc, #320]	; (8003578 <fsm_init+0x1a4>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a50      	ldr	r2, [pc, #320]	; (800357c <fsm_init+0x1a8>)
 800343a:	9203      	str	r2, [sp, #12]
 800343c:	2202      	movs	r2, #2
 800343e:	9202      	str	r2, [sp, #8]
 8003440:	4a44      	ldr	r2, [pc, #272]	; (8003554 <fsm_init+0x180>)
 8003442:	9201      	str	r2, [sp, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	9200      	str	r2, [sp, #0]
 8003448:	4a4d      	ldr	r2, [pc, #308]	; (8003580 <fsm_init+0x1ac>)
 800344a:	2101      	movs	r1, #1
 800344c:	4843      	ldr	r0, [pc, #268]	; (800355c <fsm_init+0x188>)
 800344e:	f7fe fd3d 	bl	8001ecc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, UVP6_PROC_START_HIGH_PROFILE,&uvp6_startH_proc,proc_inQ5Handle,PROC_LINK_Q,&uvp6_sensor1,uvp6_startH_events_num,uvp6_startH_events);
 8003452:	4b4c      	ldr	r3, [pc, #304]	; (8003584 <fsm_init+0x1b0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a4c      	ldr	r2, [pc, #304]	; (8003588 <fsm_init+0x1b4>)
 8003458:	9203      	str	r2, [sp, #12]
 800345a:	2202      	movs	r2, #2
 800345c:	9202      	str	r2, [sp, #8]
 800345e:	4a3d      	ldr	r2, [pc, #244]	; (8003554 <fsm_init+0x180>)
 8003460:	9201      	str	r2, [sp, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	9200      	str	r2, [sp, #0]
 8003466:	4a49      	ldr	r2, [pc, #292]	; (800358c <fsm_init+0x1b8>)
 8003468:	2102      	movs	r1, #2
 800346a:	483c      	ldr	r0, [pc, #240]	; (800355c <fsm_init+0x188>)
 800346c:	f7fe fd2e 	bl	8001ecc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, UVP6_PROC_LPM_DATA_AGG,&uvp6_lpm_data_agg_proc,proc_inQ6Handle,PROC_LINK_Q,&uvp6_sensor1,uvp6_lpm_data_agg_events_num,uvp6_lpm_data_agg_events);
 8003470:	4b47      	ldr	r3, [pc, #284]	; (8003590 <fsm_init+0x1bc>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a47      	ldr	r2, [pc, #284]	; (8003594 <fsm_init+0x1c0>)
 8003476:	9203      	str	r2, [sp, #12]
 8003478:	2203      	movs	r2, #3
 800347a:	9202      	str	r2, [sp, #8]
 800347c:	4a35      	ldr	r2, [pc, #212]	; (8003554 <fsm_init+0x180>)
 800347e:	9201      	str	r2, [sp, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	9200      	str	r2, [sp, #0]
 8003484:	4a44      	ldr	r2, [pc, #272]	; (8003598 <fsm_init+0x1c4>)
 8003486:	2105      	movs	r1, #5
 8003488:	4834      	ldr	r0, [pc, #208]	; (800355c <fsm_init+0x188>)
 800348a:	f7fe fd1f 	bl	8001ecc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, SLOCUM_PROC_FILE_OPEN,&slocum_open_file_proc,proc_inQ7Handle,PROC_LINK_Q,&glider1,slocum_open_file_events_num,slocum_open_file_events);
 800348e:	4b43      	ldr	r3, [pc, #268]	; (800359c <fsm_init+0x1c8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a43      	ldr	r2, [pc, #268]	; (80035a0 <fsm_init+0x1cc>)
 8003494:	9203      	str	r2, [sp, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	9202      	str	r2, [sp, #8]
 800349a:	4a42      	ldr	r2, [pc, #264]	; (80035a4 <fsm_init+0x1d0>)
 800349c:	9201      	str	r2, [sp, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	9200      	str	r2, [sp, #0]
 80034a2:	4a41      	ldr	r2, [pc, #260]	; (80035a8 <fsm_init+0x1d4>)
 80034a4:	2106      	movs	r1, #6
 80034a6:	482d      	ldr	r0, [pc, #180]	; (800355c <fsm_init+0x188>)
 80034a8:	f7fe fd10 	bl	8001ecc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, SLOCUM_PROC_FILE_CLOSE,&slocum_close_file_proc,proc_inQ8Handle,PROC_LINK_Q,&glider1,slocum_close_file_events_num,slocum_close_file_events);
 80034ac:	4b3f      	ldr	r3, [pc, #252]	; (80035ac <fsm_init+0x1d8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a3f      	ldr	r2, [pc, #252]	; (80035b0 <fsm_init+0x1dc>)
 80034b2:	9203      	str	r2, [sp, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	9202      	str	r2, [sp, #8]
 80034b8:	4a3a      	ldr	r2, [pc, #232]	; (80035a4 <fsm_init+0x1d0>)
 80034ba:	9201      	str	r2, [sp, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	9200      	str	r2, [sp, #0]
 80034c0:	4a3c      	ldr	r2, [pc, #240]	; (80035b4 <fsm_init+0x1e0>)
 80034c2:	2108      	movs	r1, #8
 80034c4:	4825      	ldr	r0, [pc, #148]	; (800355c <fsm_init+0x188>)
 80034c6:	f7fe fd01 	bl	8001ecc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, SLOCUM_PROC_FILE_WRITE,&slocum_write_to_file_proc,proc_inQ9Handle,PROC_LINK_Q,&glider1,slocum_write_to_file_events_num,slocum_write_to_file_events);
 80034ca:	4b3b      	ldr	r3, [pc, #236]	; (80035b8 <fsm_init+0x1e4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a3b      	ldr	r2, [pc, #236]	; (80035bc <fsm_init+0x1e8>)
 80034d0:	9203      	str	r2, [sp, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	9202      	str	r2, [sp, #8]
 80034d6:	4a33      	ldr	r2, [pc, #204]	; (80035a4 <fsm_init+0x1d0>)
 80034d8:	9201      	str	r2, [sp, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	9200      	str	r2, [sp, #0]
 80034de:	4a38      	ldr	r2, [pc, #224]	; (80035c0 <fsm_init+0x1ec>)
 80034e0:	2107      	movs	r1, #7
 80034e2:	481e      	ldr	r0, [pc, #120]	; (800355c <fsm_init+0x188>)
 80034e4:	f7fe fcf2 	bl	8001ecc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, SLOCUM_PROC_DEPTH_ANALYZER,&slocum_depth_analyzer_proc,proc_inQ10Handle,PROC_LINK_Q,&glider1,slocum_depth_analyzer_events_num,slocum_depth_analyzer_events);
 80034e8:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <fsm_init+0x1f0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a36      	ldr	r2, [pc, #216]	; (80035c8 <fsm_init+0x1f4>)
 80034ee:	9203      	str	r2, [sp, #12]
 80034f0:	2203      	movs	r2, #3
 80034f2:	9202      	str	r2, [sp, #8]
 80034f4:	4a2b      	ldr	r2, [pc, #172]	; (80035a4 <fsm_init+0x1d0>)
 80034f6:	9201      	str	r2, [sp, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	9200      	str	r2, [sp, #0]
 80034fc:	4a33      	ldr	r2, [pc, #204]	; (80035cc <fsm_init+0x1f8>)
 80034fe:	2109      	movs	r1, #9
 8003500:	4816      	ldr	r0, [pc, #88]	; (800355c <fsm_init+0x188>)
 8003502:	f7fe fce3 	bl	8001ecc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, SLOCUM_PROC_EVENTS,&slocum_send_evnt_proc,proc_inQ11Handle,PROC_LINK_Q,&glider1,slocum_send_evnt_events_num,slocum_send_evnt_events);
 8003506:	4b32      	ldr	r3, [pc, #200]	; (80035d0 <fsm_init+0x1fc>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a32      	ldr	r2, [pc, #200]	; (80035d4 <fsm_init+0x200>)
 800350c:	9203      	str	r2, [sp, #12]
 800350e:	221b      	movs	r2, #27
 8003510:	9202      	str	r2, [sp, #8]
 8003512:	4a24      	ldr	r2, [pc, #144]	; (80035a4 <fsm_init+0x1d0>)
 8003514:	9201      	str	r2, [sp, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	9200      	str	r2, [sp, #0]
 800351a:	4a2f      	ldr	r2, [pc, #188]	; (80035d8 <fsm_init+0x204>)
 800351c:	210a      	movs	r1, #10
 800351e:	480f      	ldr	r0, [pc, #60]	; (800355c <fsm_init+0x188>)
 8003520:	f7fe fcd4 	bl	8001ecc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, SLOCUM_PROC_FINAL_DEPTH_ANALYZER,&slocum_final_depth_state_analyzer_proc,NULL,PROC_CREATE_NEW_Q,&glider1,slocum_final_depth_state_analyzer_events_num,slocum_final_depth_state_analyzer_events);
 8003524:	4b2d      	ldr	r3, [pc, #180]	; (80035dc <fsm_init+0x208>)
 8003526:	9303      	str	r3, [sp, #12]
 8003528:	2303      	movs	r3, #3
 800352a:	9302      	str	r3, [sp, #8]
 800352c:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <fsm_init+0x1d0>)
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	2300      	movs	r3, #0
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2300      	movs	r3, #0
 8003536:	4a2a      	ldr	r2, [pc, #168]	; (80035e0 <fsm_init+0x20c>)
 8003538:	210b      	movs	r1, #11
 800353a:	4808      	ldr	r0, [pc, #32]	; (800355c <fsm_init+0x188>)
 800353c:	f7fe fcc6 	bl	8001ecc <disp_proc_init_func>




	//start action
	init_act();
 8003540:	f7ff fd60 	bl	8003004 <init_act>
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000a98 	.word	0x20000a98
 8003550:	200009e0 	.word	0x200009e0
 8003554:	20000c54 	.word	0x20000c54
 8003558:	080025e1 	.word	0x080025e1
 800355c:	20000ac8 	.word	0x20000ac8
 8003560:	20000a9c 	.word	0x20000a9c
 8003564:	200009e4 	.word	0x200009e4
 8003568:	08002621 	.word	0x08002621
 800356c:	20000aa0 	.word	0x20000aa0
 8003570:	20000010 	.word	0x20000010
 8003574:	08002661 	.word	0x08002661
 8003578:	20000aa4 	.word	0x20000aa4
 800357c:	20000018 	.word	0x20000018
 8003580:	08002729 	.word	0x08002729
 8003584:	20000aa8 	.word	0x20000aa8
 8003588:	20000020 	.word	0x20000020
 800358c:	080027ef 	.word	0x080027ef
 8003590:	20000aac 	.word	0x20000aac
 8003594:	20000028 	.word	0x20000028
 8003598:	080028b5 	.word	0x080028b5
 800359c:	20000ab0 	.word	0x20000ab0
 80035a0:	20000034 	.word	0x20000034
 80035a4:	2000111c 	.word	0x2000111c
 80035a8:	08002a0d 	.word	0x08002a0d
 80035ac:	20000ab4 	.word	0x20000ab4
 80035b0:	20000038 	.word	0x20000038
 80035b4:	08002ac5 	.word	0x08002ac5
 80035b8:	20000ab8 	.word	0x20000ab8
 80035bc:	2000003c 	.word	0x2000003c
 80035c0:	08002b75 	.word	0x08002b75
 80035c4:	20000abc 	.word	0x20000abc
 80035c8:	20000040 	.word	0x20000040
 80035cc:	08002bed 	.word	0x08002bed
 80035d0:	20000ac0 	.word	0x20000ac0
 80035d4:	20000058 	.word	0x20000058
 80035d8:	08002fcd 	.word	0x08002fcd
 80035dc:	2000004c 	.word	0x2000004c
 80035e0:	08002f0d 	.word	0x08002f0d

080035e4 <fsm_generate_event>:




void fsm_generate_event(osMessageQId out_Q,uint32_t event)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
	osMessagePut(out_Q,event,osWaitForever);
 80035ee:	f04f 32ff 	mov.w	r2, #4294967295
 80035f2:	6839      	ldr	r1, [r7, #0]
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f003 fed9 	bl	80073ac <osMessagePut>
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <fsm_take_event>:

F_RES fsm_take_event(osMessageQId Q_handle,uint32_t* event,uint32_t wait_time)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b088      	sub	sp, #32
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
	osEvent res;
	res=osMessageGet(Q_handle,wait_time);
 800360e:	f107 0314 	add.w	r3, r7, #20
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68f9      	ldr	r1, [r7, #12]
 8003616:	4618      	mov	r0, r3
 8003618:	f003 ff08 	bl	800742c <osMessageGet>
	if(res.status==osEventMessage){
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b10      	cmp	r3, #16
 8003620:	d104      	bne.n	800362c <fsm_take_event+0x2a>
		*event=res.value.v;
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	601a      	str	r2, [r3, #0]
		return F_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	e005      	b.n	8003638 <fsm_take_event+0x36>
	}
	else  if(res.status==osEventTimeout)return F_TIMEOUT;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2b40      	cmp	r3, #64	; 0x40
 8003630:	d101      	bne.n	8003636 <fsm_take_event+0x34>
 8003632:	2302      	movs	r3, #2
 8003634:	e000      	b.n	8003638 <fsm_take_event+0x36>
	return F_ERR;
 8003636:	2301      	movs	r3, #1
}
 8003638:	4618      	mov	r0, r3
 800363a:	3720      	adds	r7, #32
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003640:	b5b0      	push	{r4, r5, r7, lr}
 8003642:	b0ee      	sub	sp, #440	; 0x1b8
 8003644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003646:	f001 fc25 	bl	8004e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800364a:	f000 f9c9 	bl	80039e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800364e:	f000 fa69 	bl	8003b24 <MX_GPIO_Init>
  MX_UART5_Init();
 8003652:	f000 fa13 	bl	8003a7c <MX_UART5_Init>
  MX_USART1_UART_Init();
 8003656:	f000 fa3b 	bl	8003ad0 <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of slocum_uart_q_sem */
  osSemaphoreDef(slocum_uart_q_sem);
 800365a:	2300      	movs	r3, #0
 800365c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8003660:	2300      	movs	r3, #0
 8003662:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  slocum_uart_q_semHandle = osSemaphoreCreate(osSemaphore(slocum_uart_q_sem), 1);
 8003666:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800366a:	2101      	movs	r1, #1
 800366c:	4618      	mov	r0, r3
 800366e:	f003 fdbe 	bl	80071ee <osSemaphoreCreate>
 8003672:	4603      	mov	r3, r0
 8003674:	4ab9      	ldr	r2, [pc, #740]	; (800395c <main+0x31c>)
 8003676:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of worker_cmd_q */
  osMessageQDef(worker_cmd_q, 5, uint32_t);
 8003678:	4bb9      	ldr	r3, [pc, #740]	; (8003960 <main+0x320>)
 800367a:	f507 74d0 	add.w	r4, r7, #416	; 0x1a0
 800367e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003680:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  worker_cmd_qHandle = osMessageCreate(osMessageQ(worker_cmd_q), NULL);
 8003684:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003688:	2100      	movs	r1, #0
 800368a:	4618      	mov	r0, r3
 800368c:	f003 fe66 	bl	800735c <osMessageCreate>
 8003690:	4603      	mov	r3, r0
 8003692:	4ab4      	ldr	r2, [pc, #720]	; (8003964 <main+0x324>)
 8003694:	6013      	str	r3, [r2, #0]

  /* definition and creation of events_q */
  osMessageQDef(events_q, 16, uint32_t);
 8003696:	4bb4      	ldr	r3, [pc, #720]	; (8003968 <main+0x328>)
 8003698:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 800369c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800369e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  events_qHandle = osMessageCreate(osMessageQ(events_q), NULL);
 80036a2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80036a6:	2100      	movs	r1, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	f003 fe57 	bl	800735c <osMessageCreate>
 80036ae:	4603      	mov	r3, r0
 80036b0:	4aae      	ldr	r2, [pc, #696]	; (800396c <main+0x32c>)
 80036b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of proc_inQ1 */
  osMessageQDef(proc_inQ1, 10, uint32_t);
 80036b4:	4bae      	ldr	r3, [pc, #696]	; (8003970 <main+0x330>)
 80036b6:	f507 74c0 	add.w	r4, r7, #384	; 0x180
 80036ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  proc_inQ1Handle = osMessageCreate(osMessageQ(proc_inQ1), NULL);
 80036c0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80036c4:	2100      	movs	r1, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	f003 fe48 	bl	800735c <osMessageCreate>
 80036cc:	4603      	mov	r3, r0
 80036ce:	4aa9      	ldr	r2, [pc, #676]	; (8003974 <main+0x334>)
 80036d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of proc_inQ2 */
  osMessageQDef(proc_inQ2, 10, uint32_t);
 80036d2:	4ba7      	ldr	r3, [pc, #668]	; (8003970 <main+0x330>)
 80036d4:	f507 74b8 	add.w	r4, r7, #368	; 0x170
 80036d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  proc_inQ2Handle = osMessageCreate(osMessageQ(proc_inQ2), NULL);
 80036de:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f003 fe39 	bl	800735c <osMessageCreate>
 80036ea:	4603      	mov	r3, r0
 80036ec:	4aa2      	ldr	r2, [pc, #648]	; (8003978 <main+0x338>)
 80036ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of proc_inQ3 */
  osMessageQDef(proc_inQ3, 10, uint32_t);
 80036f0:	4b9f      	ldr	r3, [pc, #636]	; (8003970 <main+0x330>)
 80036f2:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 80036f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  proc_inQ3Handle = osMessageCreate(osMessageQ(proc_inQ3), NULL);
 80036fc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f003 fe2a 	bl	800735c <osMessageCreate>
 8003708:	4603      	mov	r3, r0
 800370a:	4a9c      	ldr	r2, [pc, #624]	; (800397c <main+0x33c>)
 800370c:	6013      	str	r3, [r2, #0]

  /* definition and creation of proc_inQ4 */
  osMessageQDef(proc_inQ4, 10, uint32_t);
 800370e:	4b98      	ldr	r3, [pc, #608]	; (8003970 <main+0x330>)
 8003710:	f507 74a8 	add.w	r4, r7, #336	; 0x150
 8003714:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003716:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  proc_inQ4Handle = osMessageCreate(osMessageQ(proc_inQ4), NULL);
 800371a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f003 fe1b 	bl	800735c <osMessageCreate>
 8003726:	4603      	mov	r3, r0
 8003728:	4a95      	ldr	r2, [pc, #596]	; (8003980 <main+0x340>)
 800372a:	6013      	str	r3, [r2, #0]

  /* definition and creation of proc_inQ5 */
  osMessageQDef(proc_inQ5, 10, uint32_t);
 800372c:	4b90      	ldr	r3, [pc, #576]	; (8003970 <main+0x330>)
 800372e:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 8003732:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003734:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  proc_inQ5Handle = osMessageCreate(osMessageQ(proc_inQ5), NULL);
 8003738:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800373c:	2100      	movs	r1, #0
 800373e:	4618      	mov	r0, r3
 8003740:	f003 fe0c 	bl	800735c <osMessageCreate>
 8003744:	4603      	mov	r3, r0
 8003746:	4a8f      	ldr	r2, [pc, #572]	; (8003984 <main+0x344>)
 8003748:	6013      	str	r3, [r2, #0]

  /* definition and creation of proc_inQ6 */
  osMessageQDef(proc_inQ6, 10, uint32_t);
 800374a:	4b89      	ldr	r3, [pc, #548]	; (8003970 <main+0x330>)
 800374c:	f507 7498 	add.w	r4, r7, #304	; 0x130
 8003750:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003752:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  proc_inQ6Handle = osMessageCreate(osMessageQ(proc_inQ6), NULL);
 8003756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800375a:	2100      	movs	r1, #0
 800375c:	4618      	mov	r0, r3
 800375e:	f003 fdfd 	bl	800735c <osMessageCreate>
 8003762:	4603      	mov	r3, r0
 8003764:	4a88      	ldr	r2, [pc, #544]	; (8003988 <main+0x348>)
 8003766:	6013      	str	r3, [r2, #0]

  /* definition and creation of proc_inQ7 */
  osMessageQDef(proc_inQ7, 10, uint32_t);
 8003768:	4b81      	ldr	r3, [pc, #516]	; (8003970 <main+0x330>)
 800376a:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800376e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003770:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  proc_inQ7Handle = osMessageCreate(osMessageQ(proc_inQ7), NULL);
 8003774:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003778:	2100      	movs	r1, #0
 800377a:	4618      	mov	r0, r3
 800377c:	f003 fdee 	bl	800735c <osMessageCreate>
 8003780:	4603      	mov	r3, r0
 8003782:	4a82      	ldr	r2, [pc, #520]	; (800398c <main+0x34c>)
 8003784:	6013      	str	r3, [r2, #0]

  /* definition and creation of proc_inQ8 */
  osMessageQDef(proc_inQ8, 10, uint32_t);
 8003786:	4b7a      	ldr	r3, [pc, #488]	; (8003970 <main+0x330>)
 8003788:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800378c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800378e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  proc_inQ8Handle = osMessageCreate(osMessageQ(proc_inQ8), NULL);
 8003792:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f003 fddf 	bl	800735c <osMessageCreate>
 800379e:	4603      	mov	r3, r0
 80037a0:	4a7b      	ldr	r2, [pc, #492]	; (8003990 <main+0x350>)
 80037a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of proc_inQ9 */
  osMessageQDef(proc_inQ9, 10, uint32_t);
 80037a4:	4b72      	ldr	r3, [pc, #456]	; (8003970 <main+0x330>)
 80037a6:	f507 7480 	add.w	r4, r7, #256	; 0x100
 80037aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  proc_inQ9Handle = osMessageCreate(osMessageQ(proc_inQ9), NULL);
 80037b0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80037b4:	2100      	movs	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f003 fdd0 	bl	800735c <osMessageCreate>
 80037bc:	4603      	mov	r3, r0
 80037be:	4a75      	ldr	r2, [pc, #468]	; (8003994 <main+0x354>)
 80037c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of proc_inQ10 */
  osMessageQDef(proc_inQ10, 10, uint32_t);
 80037c2:	4b6b      	ldr	r3, [pc, #428]	; (8003970 <main+0x330>)
 80037c4:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 80037c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  proc_inQ10Handle = osMessageCreate(osMessageQ(proc_inQ10), NULL);
 80037ce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f003 fdc1 	bl	800735c <osMessageCreate>
 80037da:	4603      	mov	r3, r0
 80037dc:	4a6e      	ldr	r2, [pc, #440]	; (8003998 <main+0x358>)
 80037de:	6013      	str	r3, [r2, #0]

  /* definition and creation of proc_inQ11 */
  osMessageQDef(proc_inQ11, 10, uint32_t);
 80037e0:	4b63      	ldr	r3, [pc, #396]	; (8003970 <main+0x330>)
 80037e2:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 80037e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  proc_inQ11Handle = osMessageCreate(osMessageQ(proc_inQ11), NULL);
 80037ec:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f003 fdb2 	bl	800735c <osMessageCreate>
 80037f8:	4603      	mov	r3, r0
 80037fa:	4a68      	ldr	r2, [pc, #416]	; (800399c <main+0x35c>)
 80037fc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 80037fe:	4b68      	ldr	r3, [pc, #416]	; (80039a0 <main+0x360>)
 8003800:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8003804:	461d      	mov	r5, r3
 8003806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800380a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800380e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003812:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003816:	2100      	movs	r1, #0
 8003818:	4618      	mov	r0, r3
 800381a:	f003 fc88 	bl	800712e <osThreadCreate>
 800381e:	4603      	mov	r3, r0
 8003820:	4a60      	ldr	r2, [pc, #384]	; (80039a4 <main+0x364>)
 8003822:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart_tx_t */
  osThreadDef(uart_tx_t, uart_tx_f, osPriorityNormal, 0, 512);
 8003824:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003828:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800382c:	4a5e      	ldr	r2, [pc, #376]	; (80039a8 <main+0x368>)
 800382e:	461c      	mov	r4, r3
 8003830:	4615      	mov	r5, r2
 8003832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003836:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800383a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart_tx_tHandle = osThreadCreate(osThread(uart_tx_t), NULL);
 800383e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003842:	2100      	movs	r1, #0
 8003844:	4618      	mov	r0, r3
 8003846:	f003 fc72 	bl	800712e <osThreadCreate>
 800384a:	4603      	mov	r3, r0
 800384c:	4a57      	ldr	r2, [pc, #348]	; (80039ac <main+0x36c>)
 800384e:	6013      	str	r3, [r2, #0]

  /* definition and creation of worker1_t */
  osThreadDef(worker1_t, worker1_f, osPriorityNormal, 0, 512);
 8003850:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003854:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003858:	4a55      	ldr	r2, [pc, #340]	; (80039b0 <main+0x370>)
 800385a:	461c      	mov	r4, r3
 800385c:	4615      	mov	r5, r2
 800385e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003862:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003866:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  worker1_tHandle = osThreadCreate(osThread(worker1_t), NULL);
 800386a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800386e:	2100      	movs	r1, #0
 8003870:	4618      	mov	r0, r3
 8003872:	f003 fc5c 	bl	800712e <osThreadCreate>
 8003876:	4603      	mov	r3, r0
 8003878:	4a4e      	ldr	r2, [pc, #312]	; (80039b4 <main+0x374>)
 800387a:	6013      	str	r3, [r2, #0]

  /* definition and creation of worker2_t */
  osThreadDef(worker2_t, worker2_f, osPriorityNormal, 0, 512);
 800387c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003880:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003884:	4a4c      	ldr	r2, [pc, #304]	; (80039b8 <main+0x378>)
 8003886:	461c      	mov	r4, r3
 8003888:	4615      	mov	r5, r2
 800388a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800388c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800388e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003892:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  worker2_tHandle = osThreadCreate(osThread(worker2_t), NULL);
 8003896:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800389a:	2100      	movs	r1, #0
 800389c:	4618      	mov	r0, r3
 800389e:	f003 fc46 	bl	800712e <osThreadCreate>
 80038a2:	4603      	mov	r3, r0
 80038a4:	4a45      	ldr	r2, [pc, #276]	; (80039bc <main+0x37c>)
 80038a6:	6013      	str	r3, [r2, #0]

  /* definition and creation of worker3_t */
  osThreadDef(worker3_t, worker3_f, osPriorityNormal, 0, 512);
 80038a8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80038ac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80038b0:	4a43      	ldr	r2, [pc, #268]	; (80039c0 <main+0x380>)
 80038b2:	461c      	mov	r4, r3
 80038b4:	4615      	mov	r5, r2
 80038b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  worker3_tHandle = osThreadCreate(osThread(worker3_t), NULL);
 80038c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f003 fc30 	bl	800712e <osThreadCreate>
 80038ce:	4603      	mov	r3, r0
 80038d0:	4a3c      	ldr	r2, [pc, #240]	; (80039c4 <main+0x384>)
 80038d2:	6013      	str	r3, [r2, #0]

  /* definition and creation of worker4_t */
  osThreadDef(worker4_t, worker4_f, osPriorityNormal, 0, 512);
 80038d4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80038d8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80038dc:	4a3a      	ldr	r2, [pc, #232]	; (80039c8 <main+0x388>)
 80038de:	461c      	mov	r4, r3
 80038e0:	4615      	mov	r5, r2
 80038e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  worker4_tHandle = osThreadCreate(osThread(worker4_t), NULL);
 80038ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f003 fc1a 	bl	800712e <osThreadCreate>
 80038fa:	4603      	mov	r3, r0
 80038fc:	4a33      	ldr	r2, [pc, #204]	; (80039cc <main+0x38c>)
 80038fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of worker5_t */
  osThreadDef(worker5_t, worker5_f, osPriorityNormal, 0, 512);
 8003900:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003904:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003908:	4a31      	ldr	r2, [pc, #196]	; (80039d0 <main+0x390>)
 800390a:	461c      	mov	r4, r3
 800390c:	4615      	mov	r5, r2
 800390e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003912:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003916:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  worker5_tHandle = osThreadCreate(osThread(worker5_t), NULL);
 800391a:	f107 031c 	add.w	r3, r7, #28
 800391e:	2100      	movs	r1, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f003 fc04 	bl	800712e <osThreadCreate>
 8003926:	4603      	mov	r3, r0
 8003928:	4a2a      	ldr	r2, [pc, #168]	; (80039d4 <main+0x394>)
 800392a:	6013      	str	r3, [r2, #0]

  /* definition and creation of worker6_t */
  osThreadDef(worker6_t, worker6_f, osPriorityNormal, 0, 512);
 800392c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003930:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003934:	4a28      	ldr	r2, [pc, #160]	; (80039d8 <main+0x398>)
 8003936:	461c      	mov	r4, r3
 8003938:	4615      	mov	r5, r2
 800393a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800393c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800393e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003942:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  worker6_tHandle = osThreadCreate(osThread(worker6_t), NULL);
 8003946:	463b      	mov	r3, r7
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f003 fbef 	bl	800712e <osThreadCreate>
 8003950:	4603      	mov	r3, r0
 8003952:	4a22      	ldr	r2, [pc, #136]	; (80039dc <main+0x39c>)
 8003954:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003956:	f003 fbe3 	bl	8007120 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800395a:	e7fe      	b.n	800395a <main+0x31a>
 800395c:	20000ac4 	.word	0x20000ac4
 8003960:	0800e6f0 	.word	0x0800e6f0
 8003964:	20000a90 	.word	0x20000a90
 8003968:	0800e700 	.word	0x0800e700
 800396c:	20000a94 	.word	0x20000a94
 8003970:	0800e710 	.word	0x0800e710
 8003974:	20000a98 	.word	0x20000a98
 8003978:	20000a9c 	.word	0x20000a9c
 800397c:	20000aa0 	.word	0x20000aa0
 8003980:	20000aa4 	.word	0x20000aa4
 8003984:	20000aa8 	.word	0x20000aa8
 8003988:	20000aac 	.word	0x20000aac
 800398c:	20000ab0 	.word	0x20000ab0
 8003990:	20000ab4 	.word	0x20000ab4
 8003994:	20000ab8 	.word	0x20000ab8
 8003998:	20000abc 	.word	0x20000abc
 800399c:	20000ac0 	.word	0x20000ac0
 80039a0:	0800e720 	.word	0x0800e720
 80039a4:	20000a70 	.word	0x20000a70
 80039a8:	0800e73c 	.word	0x0800e73c
 80039ac:	20000a74 	.word	0x20000a74
 80039b0:	0800e758 	.word	0x0800e758
 80039b4:	20000a78 	.word	0x20000a78
 80039b8:	0800e774 	.word	0x0800e774
 80039bc:	20000a7c 	.word	0x20000a7c
 80039c0:	0800e790 	.word	0x0800e790
 80039c4:	20000a80 	.word	0x20000a80
 80039c8:	0800e7ac 	.word	0x0800e7ac
 80039cc:	20000a84 	.word	0x20000a84
 80039d0:	0800e7c8 	.word	0x0800e7c8
 80039d4:	20000a88 	.word	0x20000a88
 80039d8:	0800e7e4 	.word	0x0800e7e4
 80039dc:	20000a8c 	.word	0x20000a8c

080039e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b094      	sub	sp, #80	; 0x50
 80039e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039e6:	f107 0318 	add.w	r3, r7, #24
 80039ea:	2238      	movs	r2, #56	; 0x38
 80039ec:	2100      	movs	r1, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	f006 fa76 	bl	8009ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	605a      	str	r2, [r3, #4]
 80039fc:	609a      	str	r2, [r3, #8]
 80039fe:	60da      	str	r2, [r3, #12]
 8003a00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a02:	2301      	movs	r3, #1
 8003a04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a10:	2301      	movs	r3, #1
 8003a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8003a22:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8003a26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a2c:	f107 0318 	add.w	r3, r7, #24
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 fe1f 	bl	8005674 <HAL_RCC_OscConfig>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8003a3c:	f000 fa74 	bl	8003f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a40:	230f      	movs	r3, #15
 8003a42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a44:	2302      	movs	r3, #2
 8003a46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a56:	1d3b      	adds	r3, r7, #4
 8003a58:	2102      	movs	r1, #2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f002 f920 	bl	8005ca0 <HAL_RCC_ClockConfig>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003a66:	f000 fa5f 	bl	8003f28 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8003a6a:	4b03      	ldr	r3, [pc, #12]	; (8003a78 <SystemClock_Config+0x98>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
}
 8003a70:	bf00      	nop
 8003a72:	3750      	adds	r7, #80	; 0x50
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	42420070 	.word	0x42420070

08003a7c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003a80:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <MX_UART5_Init+0x4c>)
 8003a82:	4a12      	ldr	r2, [pc, #72]	; (8003acc <MX_UART5_Init+0x50>)
 8003a84:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8003a86:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <MX_UART5_Init+0x4c>)
 8003a88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003a8c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003a8e:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <MX_UART5_Init+0x4c>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003a94:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <MX_UART5_Init+0x4c>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <MX_UART5_Init+0x4c>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003aa0:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <MX_UART5_Init+0x4c>)
 8003aa2:	220c      	movs	r2, #12
 8003aa4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aa6:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <MX_UART5_Init+0x4c>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <MX_UART5_Init+0x4c>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003ab2:	4805      	ldr	r0, [pc, #20]	; (8003ac8 <MX_UART5_Init+0x4c>)
 8003ab4:	f002 fd98 	bl	80065e8 <HAL_UART_Init>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003abe:	f000 fa33 	bl	8003f28 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	200009e8 	.word	0x200009e8
 8003acc:	40005000 	.word	0x40005000

08003ad0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ad4:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <MX_USART1_UART_Init+0x4c>)
 8003ad6:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <MX_USART1_UART_Init+0x50>)
 8003ad8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8003ada:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <MX_USART1_UART_Init+0x4c>)
 8003adc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003ae0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <MX_USART1_UART_Init+0x4c>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <MX_USART1_UART_Init+0x4c>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <MX_USART1_UART_Init+0x4c>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003af4:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <MX_USART1_UART_Init+0x4c>)
 8003af6:	220c      	movs	r2, #12
 8003af8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <MX_USART1_UART_Init+0x4c>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <MX_USART1_UART_Init+0x4c>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b06:	4805      	ldr	r0, [pc, #20]	; (8003b1c <MX_USART1_UART_Init+0x4c>)
 8003b08:	f002 fd6e 	bl	80065e8 <HAL_UART_Init>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003b12:	f000 fa09 	bl	8003f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000a2c 	.word	0x20000a2c
 8003b20:	40013800 	.word	0x40013800

08003b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b2a:	f107 0310 	add.w	r3, r7, #16
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	605a      	str	r2, [r3, #4]
 8003b34:	609a      	str	r2, [r3, #8]
 8003b36:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b38:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <MX_GPIO_Init+0xa8>)
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	4a23      	ldr	r2, [pc, #140]	; (8003bcc <MX_GPIO_Init+0xa8>)
 8003b3e:	f043 0320 	orr.w	r3, r3, #32
 8003b42:	6193      	str	r3, [r2, #24]
 8003b44:	4b21      	ldr	r3, [pc, #132]	; (8003bcc <MX_GPIO_Init+0xa8>)
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b50:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <MX_GPIO_Init+0xa8>)
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <MX_GPIO_Init+0xa8>)
 8003b56:	f043 0304 	orr.w	r3, r3, #4
 8003b5a:	6193      	str	r3, [r2, #24]
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <MX_GPIO_Init+0xa8>)
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b68:	4b18      	ldr	r3, [pc, #96]	; (8003bcc <MX_GPIO_Init+0xa8>)
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	4a17      	ldr	r2, [pc, #92]	; (8003bcc <MX_GPIO_Init+0xa8>)
 8003b6e:	f043 0310 	orr.w	r3, r3, #16
 8003b72:	6193      	str	r3, [r2, #24]
 8003b74:	4b15      	ldr	r3, [pc, #84]	; (8003bcc <MX_GPIO_Init+0xa8>)
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	607b      	str	r3, [r7, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b80:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <MX_GPIO_Init+0xa8>)
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	4a11      	ldr	r2, [pc, #68]	; (8003bcc <MX_GPIO_Init+0xa8>)
 8003b86:	f043 0308 	orr.w	r3, r3, #8
 8003b8a:	6193      	str	r3, [r2, #24]
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <MX_GPIO_Init+0xa8>)
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	603b      	str	r3, [r7, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SENSOR_PWR_CTRL_GPIO_Port, SENSOR_PWR_CTRL_Pin, GPIO_PIN_RESET);
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b9e:	480c      	ldr	r0, [pc, #48]	; (8003bd0 <MX_GPIO_Init+0xac>)
 8003ba0:	f001 fd50 	bl	8005644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SENSOR_PWR_CTRL_Pin */
  GPIO_InitStruct.Pin = SENSOR_PWR_CTRL_Pin;
 8003ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003baa:	2301      	movs	r3, #1
 8003bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR_PWR_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003bb6:	f107 0310 	add.w	r3, r7, #16
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4804      	ldr	r0, [pc, #16]	; (8003bd0 <MX_GPIO_Init+0xac>)
 8003bbe:	f001 fbbd 	bl	800533c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003bc2:	bf00      	nop
 8003bc4:	3720      	adds	r7, #32
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40010c00 	.word	0x40010c00

08003bd4 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */
uint8_t tmp1;
uint8_t tmp2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 if(huart==&UVP6_UART)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a11      	ldr	r2, [pc, #68]	; (8003c24 <HAL_UART_RxCpltCallback+0x50>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d10b      	bne.n	8003bfc <HAL_UART_RxCpltCallback+0x28>
 {   //send new received byte to uvp6 object
	 uvp6_media_process_byte(&uvp6_sensor1,uvp6_sensor1.media_rx_byte);
 8003be4:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <HAL_UART_RxCpltCallback+0x54>)
 8003be6:	7b1b      	ldrb	r3, [r3, #12]
 8003be8:	4619      	mov	r1, r3
 8003bea:	480f      	ldr	r0, [pc, #60]	; (8003c28 <HAL_UART_RxCpltCallback+0x54>)
 8003bec:	f7fd fd22 	bl	8001634 <uvp6_media_process_byte>
	 HAL_UART_Receive_IT(&UVP6_UART,&(uvp6_sensor1.media_rx_byte),1);
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	490e      	ldr	r1, [pc, #56]	; (8003c2c <HAL_UART_RxCpltCallback+0x58>)
 8003bf4:	480b      	ldr	r0, [pc, #44]	; (8003c24 <HAL_UART_RxCpltCallback+0x50>)
 8003bf6:	f002 fe1a 	bl	800682e <HAL_UART_Receive_IT>
 else if(huart==&GLIDER_UART)
 {
	 slocum_media_process_byte(&glider1,glider1.media_rx_byte);
	 HAL_UART_Receive_IT(&GLIDER_UART,&(glider1.media_rx_byte),1);
 }
}
 8003bfa:	e00e      	b.n	8003c1a <HAL_UART_RxCpltCallback+0x46>
 else if(huart==&GLIDER_UART)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a0c      	ldr	r2, [pc, #48]	; (8003c30 <HAL_UART_RxCpltCallback+0x5c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d10a      	bne.n	8003c1a <HAL_UART_RxCpltCallback+0x46>
	 slocum_media_process_byte(&glider1,glider1.media_rx_byte);
 8003c04:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <HAL_UART_RxCpltCallback+0x60>)
 8003c06:	7c1b      	ldrb	r3, [r3, #16]
 8003c08:	4619      	mov	r1, r3
 8003c0a:	480a      	ldr	r0, [pc, #40]	; (8003c34 <HAL_UART_RxCpltCallback+0x60>)
 8003c0c:	f000 fa23 	bl	8004056 <slocum_media_process_byte>
	 HAL_UART_Receive_IT(&GLIDER_UART,&(glider1.media_rx_byte),1);
 8003c10:	2201      	movs	r2, #1
 8003c12:	4909      	ldr	r1, [pc, #36]	; (8003c38 <HAL_UART_RxCpltCallback+0x64>)
 8003c14:	4806      	ldr	r0, [pc, #24]	; (8003c30 <HAL_UART_RxCpltCallback+0x5c>)
 8003c16:	f002 fe0a 	bl	800682e <HAL_UART_Receive_IT>
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000a2c 	.word	0x20000a2c
 8003c28:	20000c54 	.word	0x20000c54
 8003c2c:	20000c60 	.word	0x20000c60
 8003c30:	200009e8 	.word	0x200009e8
 8003c34:	2000111c 	.word	0x2000111c
 8003c38:	2000112c 	.word	0x2000112c

08003c3c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]

 if(huart==&UVP6_UART)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a12      	ldr	r2, [pc, #72]	; (8003c90 <HAL_UART_TxCpltCallback+0x54>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d10c      	bne.n	8003c66 <HAL_UART_TxCpltCallback+0x2a>
 {
	 if(uvp6_media_get_byte(&uvp6_sensor1,&tmp2)==UVP6_F_OK)
 8003c4c:	4911      	ldr	r1, [pc, #68]	; (8003c94 <HAL_UART_TxCpltCallback+0x58>)
 8003c4e:	4812      	ldr	r0, [pc, #72]	; (8003c98 <HAL_UART_TxCpltCallback+0x5c>)
 8003c50:	f7fd fd88 	bl	8001764 <uvp6_media_get_byte>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d115      	bne.n	8003c86 <HAL_UART_TxCpltCallback+0x4a>
	 {
	    HAL_UART_Transmit_IT(&UVP6_UART,&tmp2,1);
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	490d      	ldr	r1, [pc, #52]	; (8003c94 <HAL_UART_TxCpltCallback+0x58>)
 8003c5e:	480c      	ldr	r0, [pc, #48]	; (8003c90 <HAL_UART_TxCpltCallback+0x54>)
 8003c60:	f002 fda1 	bl	80067a6 <HAL_UART_Transmit_IT>
	 if(slocum_media_get_byte(&glider1,&tmp1)==SLOCUM_F_OK)
	 {
	    HAL_UART_Transmit_IT(&GLIDER_UART,&tmp1,1);
	 }
 }
}
 8003c64:	e00f      	b.n	8003c86 <HAL_UART_TxCpltCallback+0x4a>
 else if(huart==&GLIDER_UART)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a0c      	ldr	r2, [pc, #48]	; (8003c9c <HAL_UART_TxCpltCallback+0x60>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d10b      	bne.n	8003c86 <HAL_UART_TxCpltCallback+0x4a>
	 if(slocum_media_get_byte(&glider1,&tmp1)==SLOCUM_F_OK)
 8003c6e:	490c      	ldr	r1, [pc, #48]	; (8003ca0 <HAL_UART_TxCpltCallback+0x64>)
 8003c70:	480c      	ldr	r0, [pc, #48]	; (8003ca4 <HAL_UART_TxCpltCallback+0x68>)
 8003c72:	f000 fa70 	bl	8004156 <slocum_media_get_byte>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d104      	bne.n	8003c86 <HAL_UART_TxCpltCallback+0x4a>
	    HAL_UART_Transmit_IT(&GLIDER_UART,&tmp1,1);
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	4908      	ldr	r1, [pc, #32]	; (8003ca0 <HAL_UART_TxCpltCallback+0x64>)
 8003c80:	4806      	ldr	r0, [pc, #24]	; (8003c9c <HAL_UART_TxCpltCallback+0x60>)
 8003c82:	f002 fd90 	bl	80067a6 <HAL_UART_Transmit_IT>
}
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000a2c 	.word	0x20000a2c
 8003c94:	20001570 	.word	0x20001570
 8003c98:	20000c54 	.word	0x20000c54
 8003c9c:	200009e8 	.word	0x200009e8
 8003ca0:	2000156f 	.word	0x2000156f
 8003ca4:	2000111c 	.word	0x2000111c

08003ca8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  //mcu_flash_open(&data_flash);

  uvp6_init(&uvp6_sensor1,events_qHandle);
 8003cb0:	4b13      	ldr	r3, [pc, #76]	; (8003d00 <StartDefaultTask+0x58>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4813      	ldr	r0, [pc, #76]	; (8003d04 <StartDefaultTask+0x5c>)
 8003cb8:	f7fd fc76 	bl	80015a8 <uvp6_init>
  HAL_UART_Receive_IT(&UVP6_UART,&(uvp6_sensor1.media_rx_byte),1);
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	4912      	ldr	r1, [pc, #72]	; (8003d08 <StartDefaultTask+0x60>)
 8003cc0:	4812      	ldr	r0, [pc, #72]	; (8003d0c <StartDefaultTask+0x64>)
 8003cc2:	f002 fdb4 	bl	800682e <HAL_UART_Receive_IT>

  slocum_init(&glider1,events_qHandle,slocum_uart_q_semHandle);
 8003cc6:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <StartDefaultTask+0x58>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a11      	ldr	r2, [pc, #68]	; (8003d10 <StartDefaultTask+0x68>)
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4810      	ldr	r0, [pc, #64]	; (8003d14 <StartDefaultTask+0x6c>)
 8003cd2:	f000 f92f 	bl	8003f34 <slocum_init>
  HAL_UART_Receive_IT(&GLIDER_UART,&(glider1.media_rx_byte),1);
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	490f      	ldr	r1, [pc, #60]	; (8003d18 <StartDefaultTask+0x70>)
 8003cda:	4810      	ldr	r0, [pc, #64]	; (8003d1c <StartDefaultTask+0x74>)
 8003cdc:	f002 fda7 	bl	800682e <HAL_UART_Receive_IT>

  disp_proc_init(&dispatcher1,worker_cmd_qHandle,events_qHandle);
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <StartDefaultTask+0x78>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a06      	ldr	r2, [pc, #24]	; (8003d00 <StartDefaultTask+0x58>)
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	480e      	ldr	r0, [pc, #56]	; (8003d24 <StartDefaultTask+0x7c>)
 8003cec:	f7fe f8d9 	bl	8001ea2 <disp_proc_init>
  disp_proc_loop(&dispatcher1);
 8003cf0:	480c      	ldr	r0, [pc, #48]	; (8003d24 <StartDefaultTask+0x7c>)
 8003cf2:	f7fe f9a7 	bl	8002044 <disp_proc_loop>

  /* USER CODE END 5 */
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000a94 	.word	0x20000a94
 8003d04:	20000c54 	.word	0x20000c54
 8003d08:	20000c60 	.word	0x20000c60
 8003d0c:	20000a2c 	.word	0x20000a2c
 8003d10:	20000ac4 	.word	0x20000ac4
 8003d14:	2000111c 	.word	0x2000111c
 8003d18:	2000112c 	.word	0x2000112c
 8003d1c:	200009e8 	.word	0x200009e8
 8003d20:	20000a90 	.word	0x20000a90
 8003d24:	20000ac8 	.word	0x20000ac8

08003d28 <uart_tx_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_tx_f */
void uart_tx_f(void const * argument)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_tx_f */
  /* Infinite loop */
  uint8_t tmp1;
  uint8_t tmp2;
  uvp6_sensor1.media_status=UVP6_MEDIA_READY;
 8003d30:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <uart_tx_f+0x8c>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	739a      	strb	r2, [r3, #14]
  glider1.media_status=SLOCUM_MEDIA_READY;
 8003d36:	4b20      	ldr	r3, [pc, #128]	; (8003db8 <uart_tx_f+0x90>)
 8003d38:	220a      	movs	r2, #10
 8003d3a:	745a      	strb	r2, [r3, #17]
  #ifdef DEBUG_MSG
    HAL_UART_Transmit(&UVP6_UART,"U",1,100);
 8003d3c:	2364      	movs	r3, #100	; 0x64
 8003d3e:	2201      	movs	r2, #1
 8003d40:	491e      	ldr	r1, [pc, #120]	; (8003dbc <uart_tx_f+0x94>)
 8003d42:	481f      	ldr	r0, [pc, #124]	; (8003dc0 <uart_tx_f+0x98>)
 8003d44:	f002 fc9d 	bl	8006682 <HAL_UART_Transmit>
    HAL_UART_Transmit(&GLIDER_UART,"G",1,100);
 8003d48:	2364      	movs	r3, #100	; 0x64
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	491d      	ldr	r1, [pc, #116]	; (8003dc4 <uart_tx_f+0x9c>)
 8003d4e:	481e      	ldr	r0, [pc, #120]	; (8003dc8 <uart_tx_f+0xa0>)
 8003d50:	f002 fc97 	bl	8006682 <HAL_UART_Transmit>
  #endif

  for(;;)
  {
       if(GLIDER_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8003d54:	4b1c      	ldr	r3, [pc, #112]	; (8003dc8 <uart_tx_f+0xa0>)
 8003d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b21      	cmp	r3, #33	; 0x21
 8003d5e:	d00f      	beq.n	8003d80 <uart_tx_f+0x58>
       {
		if(slocum_media_get_byte(&glider1,&tmp1)==SLOCUM_F_OK)
 8003d60:	f107 030f 	add.w	r3, r7, #15
 8003d64:	4619      	mov	r1, r3
 8003d66:	4814      	ldr	r0, [pc, #80]	; (8003db8 <uart_tx_f+0x90>)
 8003d68:	f000 f9f5 	bl	8004156 <slocum_media_get_byte>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <uart_tx_f+0x58>
		{
		   HAL_UART_Transmit_IT(&GLIDER_UART,&tmp1,1);
 8003d72:	f107 030f 	add.w	r3, r7, #15
 8003d76:	2201      	movs	r2, #1
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4813      	ldr	r0, [pc, #76]	; (8003dc8 <uart_tx_f+0xa0>)
 8003d7c:	f002 fd13 	bl	80067a6 <HAL_UART_Transmit_IT>
		}
       }
       if(UVP6_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8003d80:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <uart_tx_f+0x98>)
 8003d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b21      	cmp	r3, #33	; 0x21
 8003d8a:	d00f      	beq.n	8003dac <uart_tx_f+0x84>
       {
		if(uvp6_media_get_byte(&uvp6_sensor1,&tmp2)==UVP6_F_OK)
 8003d8c:	f107 030e 	add.w	r3, r7, #14
 8003d90:	4619      	mov	r1, r3
 8003d92:	4808      	ldr	r0, [pc, #32]	; (8003db4 <uart_tx_f+0x8c>)
 8003d94:	f7fd fce6 	bl	8001764 <uvp6_media_get_byte>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <uart_tx_f+0x84>
		{
		   HAL_UART_Transmit_IT(&UVP6_UART,&tmp2,1);
 8003d9e:	f107 030e 	add.w	r3, r7, #14
 8003da2:	2201      	movs	r2, #1
 8003da4:	4619      	mov	r1, r3
 8003da6:	4806      	ldr	r0, [pc, #24]	; (8003dc0 <uart_tx_f+0x98>)
 8003da8:	f002 fcfd 	bl	80067a6 <HAL_UART_Transmit_IT>
		}
       }
    osDelay(1);
 8003dac:	2001      	movs	r0, #1
 8003dae:	f003 fa0a 	bl	80071c6 <osDelay>
       if(GLIDER_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8003db2:	e7cf      	b.n	8003d54 <uart_tx_f+0x2c>
 8003db4:	20000c54 	.word	0x20000c54
 8003db8:	2000111c 	.word	0x2000111c
 8003dbc:	0800e810 	.word	0x0800e810
 8003dc0:	20000a2c 	.word	0x20000a2c
 8003dc4:	0800e814 	.word	0x0800e814
 8003dc8:	200009e8 	.word	0x200009e8

08003dcc <worker1_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_worker1_f */
void worker1_f(void const * argument)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN worker1_f */
  /* Infinite loop */

  for(;;)
  {
	osEvent res=osMessageGet(worker_cmd_qHandle,osWaitForever);
 8003dd4:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <worker1_f+0x2c>)
 8003dd6:	6819      	ldr	r1, [r3, #0]
 8003dd8:	f107 030c 	add.w	r3, r7, #12
 8003ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8003de0:	4618      	mov	r0, r3
 8003de2:	f003 fb23 	bl	800742c <osMessageGet>
	if(res.status==osEventMessage){
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b10      	cmp	r3, #16
 8003dea:	d1f3      	bne.n	8003dd4 <worker1_f+0x8>
		disp_proc_execute(&dispatcher1,res.value.v);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4619      	mov	r1, r3
 8003df0:	4802      	ldr	r0, [pc, #8]	; (8003dfc <worker1_f+0x30>)
 8003df2:	f7fe f8f6 	bl	8001fe2 <disp_proc_execute>
  {
 8003df6:	e7ed      	b.n	8003dd4 <worker1_f+0x8>
 8003df8:	20000a90 	.word	0x20000a90
 8003dfc:	20000ac8 	.word	0x20000ac8

08003e00 <worker2_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_worker2_f */
void worker2_f(void const * argument)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN worker2_f */
  /* Infinite loop */

  for(;;)
  {
	osEvent res=osMessageGet(worker_cmd_qHandle,osWaitForever);
 8003e08:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <worker2_f+0x2c>)
 8003e0a:	6819      	ldr	r1, [r3, #0]
 8003e0c:	f107 030c 	add.w	r3, r7, #12
 8003e10:	f04f 32ff 	mov.w	r2, #4294967295
 8003e14:	4618      	mov	r0, r3
 8003e16:	f003 fb09 	bl	800742c <osMessageGet>
	if(res.status==osEventMessage){
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d1f3      	bne.n	8003e08 <worker2_f+0x8>
		disp_proc_execute(&dispatcher1,res.value.v);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4619      	mov	r1, r3
 8003e24:	4802      	ldr	r0, [pc, #8]	; (8003e30 <worker2_f+0x30>)
 8003e26:	f7fe f8dc 	bl	8001fe2 <disp_proc_execute>
  {
 8003e2a:	e7ed      	b.n	8003e08 <worker2_f+0x8>
 8003e2c:	20000a90 	.word	0x20000a90
 8003e30:	20000ac8 	.word	0x20000ac8

08003e34 <worker3_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_worker3_f */
void worker3_f(void const * argument)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN worker3_f */
  /* Infinite loop */
  for(;;)
  {

	osEvent res=osMessageGet(worker_cmd_qHandle,osWaitForever);
 8003e3c:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <worker3_f+0x2c>)
 8003e3e:	6819      	ldr	r1, [r3, #0]
 8003e40:	f107 030c 	add.w	r3, r7, #12
 8003e44:	f04f 32ff 	mov.w	r2, #4294967295
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f003 faef 	bl	800742c <osMessageGet>
	if(res.status==osEventMessage){
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b10      	cmp	r3, #16
 8003e52:	d1f3      	bne.n	8003e3c <worker3_f+0x8>
		disp_proc_execute(&dispatcher1,res.value.v);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4619      	mov	r1, r3
 8003e58:	4802      	ldr	r0, [pc, #8]	; (8003e64 <worker3_f+0x30>)
 8003e5a:	f7fe f8c2 	bl	8001fe2 <disp_proc_execute>
  {
 8003e5e:	e7ed      	b.n	8003e3c <worker3_f+0x8>
 8003e60:	20000a90 	.word	0x20000a90
 8003e64:	20000ac8 	.word	0x20000ac8

08003e68 <worker4_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_worker4_f */
void worker4_f(void const * argument)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN worker4_f */
  /* Infinite loop */
  for(;;)
  {
		osEvent res=osMessageGet(worker_cmd_qHandle,osWaitForever);
 8003e70:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <worker4_f+0x2c>)
 8003e72:	6819      	ldr	r1, [r3, #0]
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f003 fad5 	bl	800742c <osMessageGet>
		if(res.status==osEventMessage){
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d1f3      	bne.n	8003e70 <worker4_f+0x8>
			disp_proc_execute(&dispatcher1,res.value.v);
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4802      	ldr	r0, [pc, #8]	; (8003e98 <worker4_f+0x30>)
 8003e8e:	f7fe f8a8 	bl	8001fe2 <disp_proc_execute>
  {
 8003e92:	e7ed      	b.n	8003e70 <worker4_f+0x8>
 8003e94:	20000a90 	.word	0x20000a90
 8003e98:	20000ac8 	.word	0x20000ac8

08003e9c <worker5_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_worker5_f */
void worker5_f(void const * argument)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN worker5_f */
  /* Infinite loop */
  for(;;)
  {
	osEvent res=osMessageGet(worker_cmd_qHandle,osWaitForever);
 8003ea4:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <worker5_f+0x2c>)
 8003ea6:	6819      	ldr	r1, [r3, #0]
 8003ea8:	f107 030c 	add.w	r3, r7, #12
 8003eac:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f003 fabb 	bl	800742c <osMessageGet>
	if(res.status==osEventMessage){
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b10      	cmp	r3, #16
 8003eba:	d1f3      	bne.n	8003ea4 <worker5_f+0x8>
		disp_proc_execute(&dispatcher1,res.value.v);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4802      	ldr	r0, [pc, #8]	; (8003ecc <worker5_f+0x30>)
 8003ec2:	f7fe f88e 	bl	8001fe2 <disp_proc_execute>
  {
 8003ec6:	e7ed      	b.n	8003ea4 <worker5_f+0x8>
 8003ec8:	20000a90 	.word	0x20000a90
 8003ecc:	20000ac8 	.word	0x20000ac8

08003ed0 <worker6_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_worker6_f */
void worker6_f(void const * argument)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN worker6_f */
  /* Infinite loop */
  for(;;)
  {
		osEvent res=osMessageGet(worker_cmd_qHandle,osWaitForever);
 8003ed8:	4b08      	ldr	r3, [pc, #32]	; (8003efc <worker6_f+0x2c>)
 8003eda:	6819      	ldr	r1, [r3, #0]
 8003edc:	f107 030c 	add.w	r3, r7, #12
 8003ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f003 faa1 	bl	800742c <osMessageGet>
		if(res.status==osEventMessage){
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b10      	cmp	r3, #16
 8003eee:	d1f3      	bne.n	8003ed8 <worker6_f+0x8>
			disp_proc_execute(&dispatcher1,res.value.v);
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4802      	ldr	r0, [pc, #8]	; (8003f00 <worker6_f+0x30>)
 8003ef6:	f7fe f874 	bl	8001fe2 <disp_proc_execute>
  {
 8003efa:	e7ed      	b.n	8003ed8 <worker6_f+0x8>
 8003efc:	20000a90 	.word	0x20000a90
 8003f00:	20000ac8 	.word	0x20000ac8

08003f04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a04      	ldr	r2, [pc, #16]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d101      	bne.n	8003f1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003f16:	f000 ffd3 	bl	8004ec0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40012c00 	.word	0x40012c00

08003f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f2c:	b672      	cpsid	i
}
 8003f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f30:	e7fe      	b.n	8003f30 <Error_Handler+0x8>
	...

08003f34 <slocum_init>:
const char* slocum_commands_strings[]={"UV>","$FW,","\r\n","$FO,","$FC","$SW,0:"};



void slocum_init(slocum* slocum_obj,osMessageQId events_q_Handle,osSemaphoreId out_q_sem)
{
 8003f34:	b5b0      	push	{r4, r5, r7, lr}
 8003f36:	b094      	sub	sp, #80	; 0x50
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
	slocum_obj->last_depth=0.0;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f8c3 2012 	str.w	r2, [r3, #18]
	slocum_obj->prev_depth=0.0;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f8c3 2016 	str.w	r2, [r3, #22]
	slocum_obj->final_depth_state=GLIDER_FINAL_DEPTH_AT_SURFACE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	slocum_obj->timestamp=0;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	slocum_obj->dive_climb_counter=0;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	slocum_obj->dcs_state=GLIDER_STATE_AT_SURFACE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	slocum_obj->x_glider_dos=SLOCUM_X_GLIDER_DOS_ON;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	slocum_messages_init(slocum_obj);
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 fa79 	bl	8004498 <slocum_messages_init>

	//osMessageQDef(SLOCUM_events_q, 20, uint8_t);
	//slocum_obj->events_q= osMessageCreate(osMessageQ(SLOCUM_events_q), NULL);
	slocum_obj->events_q = events_q_Handle;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	609a      	str	r2, [r3, #8]
	slocum_obj->out_q_sem=out_q_sem;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	60da      	str	r2, [r3, #12]

	osMessageQDef(SLOCUM_media_rx_q, 20, uint16_t);
 8003fb2:	4b19      	ldr	r3, [pc, #100]	; (8004018 <slocum_init+0xe4>)
 8003fb4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003fb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	slocum_obj->media_rx_messages_q= osMessageCreate(osMessageQ(SLOCUM_media_rx_q), NULL);
 8003fbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f003 f9c9 	bl	800735c <osMessageCreate>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	601a      	str	r2, [r3, #0]

	osMessageQDef(SLOCUM_media_tx_q, 200, uint8_t);
 8003fd0:	4b12      	ldr	r3, [pc, #72]	; (800401c <slocum_init+0xe8>)
 8003fd2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003fd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	slocum_obj->media_tx_q = osMessageCreate(osMessageQ(SLOCUM_media_tx_q), NULL);
 8003fdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f003 f9ba 	bl	800735c <osMessageCreate>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	605a      	str	r2, [r3, #4]

	osThreadDef(SLOCUM_task, slocum_loop, osPriorityNormal, 0, 512);
 8003fee:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <slocum_init+0xec>)
 8003ff0:	f107 0414 	add.w	r4, r7, #20
 8003ff4:	461d      	mov	r5, r3
 8003ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ffa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ffe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(SLOCUM_task), slocum_obj);
 8004002:	f107 0314 	add.w	r3, r7, #20
 8004006:	68f9      	ldr	r1, [r7, #12]
 8004008:	4618      	mov	r0, r3
 800400a:	f003 f890 	bl	800712e <osThreadCreate>


}
 800400e:	bf00      	nop
 8004010:	3750      	adds	r7, #80	; 0x50
 8004012:	46bd      	mov	sp, r7
 8004014:	bdb0      	pop	{r4, r5, r7, pc}
 8004016:	bf00      	nop
 8004018:	0800e848 	.word	0x0800e848
 800401c:	0800e858 	.word	0x0800e858
 8004020:	0800e868 	.word	0x0800e868

08004024 <slocum_loop>:


void slocum_loop(slocum* slocum_obj)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	 uint16_t msg_indx;
	 for(;;)
	 {
		//test loopback
		if(xQueueReceive(slocum_obj->media_rx_messages_q,&msg_indx,0))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f107 010a 	add.w	r1, r7, #10
 8004034:	2200      	movs	r2, #0
 8004036:	4618      	mov	r0, r3
 8004038:	f003 fe7c 	bl	8007d34 <xQueueReceive>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f4      	beq.n	800402c <slocum_loop+0x8>
		{   uint8_t* msg=slocum_obj->rx_buffer+msg_indx;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	334f      	adds	r3, #79	; 0x4f
 8004046:	897a      	ldrh	r2, [r7, #10]
 8004048:	4413      	add	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]
		    slocum_parse_message(slocum_obj,msg);
 800404c:	68f9      	ldr	r1, [r7, #12]
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f9ee 	bl	8004430 <slocum_parse_message>
		if(xQueueReceive(slocum_obj->media_rx_messages_q,&msg_indx,0))
 8004054:	e7ea      	b.n	800402c <slocum_loop+0x8>

08004056 <slocum_media_process_byte>:

}


void slocum_media_process_byte(slocum* slocum_obj,uint8_t rx_byte)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	460b      	mov	r3, r1
 8004060:	70fb      	strb	r3, [r7, #3]
	if(slocum_obj->media_status==SLOCUM_MEDIA_READY && rx_byte!=0x00)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	7c5b      	ldrb	r3, [r3, #17]
 8004066:	2b0a      	cmp	r3, #10
 8004068:	d162      	bne.n	8004130 <slocum_media_process_byte+0xda>
 800406a:	78fb      	ldrb	r3, [r7, #3]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d05f      	beq.n	8004130 <slocum_media_process_byte+0xda>
	{
		slocum_obj->rx_buffer[slocum_obj->rx_buffer_indx]=rx_byte;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8b3 344f 	ldrh.w	r3, [r3, #1103]	; 0x44f
 8004076:	b29b      	uxth	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4413      	add	r3, r2
 800407e:	78fa      	ldrb	r2, [r7, #3]
 8004080:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		if(rx_byte=='\r')
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	2b0d      	cmp	r3, #13
 8004088:	d133      	bne.n	80040f2 <slocum_media_process_byte+0x9c>
		{
			slocum_obj->rx_buffer[slocum_obj->rx_buffer_indx]=0x00;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8b3 344f 	ldrh.w	r3, [r3, #1103]	; 0x44f
 8004090:	b29b      	uxth	r3, r3
 8004092:	461a      	mov	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4413      	add	r3, r2
 8004098:	2200      	movs	r2, #0
 800409a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			osMessagePut(slocum_obj->media_rx_messages_q,slocum_obj->rx_buffer_new_string_indx,1);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8b3 3451 	ldrh.w	r3, [r3, #1105]	; 0x451
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2201      	movs	r2, #1
 80040ac:	4619      	mov	r1, r3
 80040ae:	f003 f97d 	bl	80073ac <osMessagePut>
			if(slocum_obj->rx_buffer_indx>SLOCUM_RX_BUFFER_THR) slocum_obj->rx_buffer_indx=0;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8b3 344f 	ldrh.w	r3, [r3, #1103]	; 0x44f
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040be:	d907      	bls.n	80040d0 <slocum_media_process_byte+0x7a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 80040ce:	e008      	b.n	80040e2 <slocum_media_process_byte+0x8c>
			else  slocum_obj->rx_buffer_indx++;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b3 344f 	ldrh.w	r3, [r3, #1103]	; 0x44f
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3301      	adds	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8a3 244f 	strh.w	r2, [r3, #1103]	; 0x44f
			slocum_obj->rx_buffer_new_string_indx=slocum_obj->rx_buffer_indx;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8b3 344f 	ldrh.w	r3, [r3, #1103]	; 0x44f
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8a3 2451 	strh.w	r2, [r3, #1105]	; 0x451
 80040f0:	e008      	b.n	8004104 <slocum_media_process_byte+0xae>
		}
		else slocum_obj->rx_buffer_indx++;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8b3 344f 	ldrh.w	r3, [r3, #1103]	; 0x44f
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3301      	adds	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8a3 244f 	strh.w	r2, [r3, #1103]	; 0x44f
		if(slocum_obj->rx_buffer_indx==SLOCUM_RX_BUFFER_SIZE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8b3 344f 	ldrh.w	r3, [r3, #1103]	; 0x44f
 800410a:	b29b      	uxth	r3, r3
 800410c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004110:	d11d      	bne.n	800414e <slocum_media_process_byte+0xf8>
		{
			slocum_obj->rx_buffer_indx=0;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
			slocum_obj->rx_buffer_new_string_indx=slocum_obj->rx_buffer_indx;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8b3 344f 	ldrh.w	r3, [r3, #1103]	; 0x44f
 8004126:	b29a      	uxth	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8a3 2451 	strh.w	r2, [r3, #1105]	; 0x451
		if(slocum_obj->rx_buffer_indx==SLOCUM_RX_BUFFER_SIZE)
 800412e:	e00e      	b.n	800414e <slocum_media_process_byte+0xf8>
		}
	}
	else
	{
		slocum_obj->rx_buffer_indx=0;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
		slocum_obj->rx_buffer_new_string_indx=slocum_obj->rx_buffer_indx;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8b3 344f 	ldrh.w	r3, [r3, #1103]	; 0x44f
 8004144:	b29a      	uxth	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8a3 2451 	strh.w	r2, [r3, #1105]	; 0x451
	}
}
 800414c:	bf00      	nop
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <slocum_media_get_byte>:

uint8_t slocum_media_get_byte(slocum* slocum_obj,uint8_t* tx_byte)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b086      	sub	sp, #24
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	6039      	str	r1, [r7, #0]
  osEvent res=osMessageGet(slocum_obj->media_tx_q,0);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	f107 030c 	add.w	r3, r7, #12
 8004168:	2200      	movs	r2, #0
 800416a:	4618      	mov	r0, r3
 800416c:	f003 f95e 	bl	800742c <osMessageGet>
  if(res.status==osEventMessage){
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b10      	cmp	r3, #16
 8004174:	d105      	bne.n	8004182 <slocum_media_get_byte+0x2c>
	*tx_byte=res.value.v;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	b2da      	uxtb	r2, r3
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	701a      	strb	r2, [r3, #0]
	return SLOCUM_F_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	e000      	b.n	8004184 <slocum_media_get_byte+0x2e>
  }
  return SLOCUM_F_ERR;
 8004182:	2301      	movs	r3, #1
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <slocum_send_evnt>:

void slocum_send_evnt(slocum* slocum_obj,uint32_t evnt)
{
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	b087      	sub	sp, #28
 8004190:	af02      	add	r7, sp, #8
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint8_t xor;

  char* snd_buffer=malloc(SLOCUM_SND_BUFFER_SIZE);
 8004196:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800419a:	f005 fe83 	bl	8009ea4 <malloc>
 800419e:	4603      	mov	r3, r0
 80041a0:	60fb      	str	r3, [r7, #12]
  sprintf( snd_buffer,"%s%u",
 80041a2:	4b17      	ldr	r3, [pc, #92]	; (8004200 <slocum_send_evnt+0x74>)
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	4916      	ldr	r1, [pc, #88]	; (8004204 <slocum_send_evnt+0x78>)
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f006 fc56 	bl	800aa5c <siprintf>
		    slocum_commands_strings[SLOCUM_MSG_SEND_EVNT],
			evnt
			);
  xor=calc_XOR(snd_buffer+1,strlen(snd_buffer+1));
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	1c5c      	adds	r4, r3, #1
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3301      	adds	r3, #1
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fc f843 	bl	8000244 <strlen>
 80041be:	4603      	mov	r3, r0
 80041c0:	4619      	mov	r1, r3
 80041c2:	4620      	mov	r0, r4
 80041c4:	f7fd fe1a 	bl	8001dfc <calc_XOR>
 80041c8:	4603      	mov	r3, r0
 80041ca:	72fb      	strb	r3, [r7, #11]
  sprintf( snd_buffer,"%s*%02x%s",
 80041cc:	7afa      	ldrb	r2, [r7, #11]
 80041ce:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <slocum_send_evnt+0x74>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	4613      	mov	r3, r2
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	490b      	ldr	r1, [pc, #44]	; (8004208 <slocum_send_evnt+0x7c>)
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f006 fc3e 	bl	800aa5c <siprintf>
		    snd_buffer,
			xor,
			slocum_commands_strings[SLOCUM_MSG_EOL]);
  slocum_schedule_for_tx(slocum_obj,(uint8_t*)snd_buffer,strlen(snd_buffer));
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f7fc f82f 	bl	8000244 <strlen>
 80041e6:	4603      	mov	r3, r0
 80041e8:	461a      	mov	r2, r3
 80041ea:	68f9      	ldr	r1, [r7, #12]
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f8f3 	bl	80043d8 <slocum_schedule_for_tx>
  free(snd_buffer);
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f005 fe5e 	bl	8009eb4 <free>
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd90      	pop	{r4, r7, pc}
 8004200:	20000224 	.word	0x20000224
 8004204:	0800e884 	.word	0x0800e884
 8004208:	0800e88c 	.word	0x0800e88c

0800420c <slocum_send_cmd>:

void slocum_send_cmd(slocum* slocum_obj,uint8_t cmd_id,void* arg)
{
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b08b      	sub	sp, #44	; 0x2c
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	460b      	mov	r3, r1
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	72fb      	strb	r3, [r7, #11]
 memory_region_pointer* ptr1;
 uint8_t xor;
 char* base64_buffer=malloc(SLOCUM_BASE64_BUFFER_SIZE);
 800421a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800421e:	f005 fe41 	bl	8009ea4 <malloc>
 8004222:	4603      	mov	r3, r0
 8004224:	61fb      	str	r3, [r7, #28]
 char* snd_buffer=malloc(SLOCUM_SND_BUFFER_SIZE);
 8004226:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800422a:	f005 fe3b 	bl	8009ea4 <malloc>
 800422e:	4603      	mov	r3, r0
 8004230:	61bb      	str	r3, [r7, #24]
 uint32_t base64_buffer_size;

 switch(cmd_id)
 8004232:	7afb      	ldrb	r3, [r7, #11]
 8004234:	2b04      	cmp	r3, #4
 8004236:	f200 80bc 	bhi.w	80043b2 <slocum_send_cmd+0x1a6>
 800423a:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <slocum_send_cmd+0x34>)
 800423c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004240:	08004255 	.word	0x08004255
 8004244:	0800428b 	.word	0x0800428b
 8004248:	080042a1 	.word	0x080042a1
 800424c:	0800434b 	.word	0x0800434b
 8004250:	080042f9 	.word	0x080042f9
 {
     case SLOCUM_CMD_PROMPT:
    	 slocum_schedule_for_tx(slocum_obj,(uint8_t*)slocum_commands_strings[SLOCUM_CMD_PROMPT],strlen(slocum_commands_strings[SLOCUM_CMD_PROMPT]));
 8004254:	4b5c      	ldr	r3, [pc, #368]	; (80043c8 <slocum_send_cmd+0x1bc>)
 8004256:	681c      	ldr	r4, [r3, #0]
 8004258:	4b5b      	ldr	r3, [pc, #364]	; (80043c8 <slocum_send_cmd+0x1bc>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f7fb fff1 	bl	8000244 <strlen>
 8004262:	4603      	mov	r3, r0
 8004264:	461a      	mov	r2, r3
 8004266:	4621      	mov	r1, r4
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f8b5 	bl	80043d8 <slocum_schedule_for_tx>
    	 slocum_schedule_for_tx(slocum_obj,(uint8_t*)slocum_commands_strings[SLOCUM_MSG_EOL],strlen(slocum_commands_strings[SLOCUM_MSG_EOL]));
 800426e:	4b56      	ldr	r3, [pc, #344]	; (80043c8 <slocum_send_cmd+0x1bc>)
 8004270:	689c      	ldr	r4, [r3, #8]
 8004272:	4b55      	ldr	r3, [pc, #340]	; (80043c8 <slocum_send_cmd+0x1bc>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fb ffe4 	bl	8000244 <strlen>
 800427c:	4603      	mov	r3, r0
 800427e:	461a      	mov	r2, r3
 8004280:	4621      	mov	r1, r4
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f8a8 	bl	80043d8 <slocum_schedule_for_tx>
	 break;
 8004288:	e093      	b.n	80043b2 <slocum_send_cmd+0x1a6>

     case SLOCUM_CMD_SEND_DATA:
         ptr1=arg;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	613b      	str	r3, [r7, #16]
  	     slocum_schedule_for_tx(slocum_obj,(uint8_t*)ptr1->start_addr,ptr1->size);
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	6819      	ldr	r1, [r3, #0]
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	461a      	mov	r2, r3
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f89d 	bl	80043d8 <slocum_schedule_for_tx>
     break;
 800429e:	e088      	b.n	80043b2 <slocum_send_cmd+0x1a6>

     case SLOCUM_CMD_OPEN_FILE_W:
       ptr1=arg;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	613b      	str	r3, [r7, #16]

       sprintf(snd_buffer,"%s%s",
 80042a4:	4b48      	ldr	r3, [pc, #288]	; (80043c8 <slocum_send_cmd+0x1bc>)
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4947      	ldr	r1, [pc, #284]	; (80043cc <slocum_send_cmd+0x1c0>)
 80042ae:	69b8      	ldr	r0, [r7, #24]
 80042b0:	f006 fbd4 	bl	800aa5c <siprintf>
    		    slocum_commands_strings[SLOCUM_MSG_OPEN_FILE_W],
				ptr1->start_addr
				);
       xor=calc_XOR(snd_buffer+1,strlen(snd_buffer+1));
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	1c5c      	adds	r4, r3, #1
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	3301      	adds	r3, #1
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fb ffc1 	bl	8000244 <strlen>
 80042c2:	4603      	mov	r3, r0
 80042c4:	4619      	mov	r1, r3
 80042c6:	4620      	mov	r0, r4
 80042c8:	f7fd fd98 	bl	8001dfc <calc_XOR>
 80042cc:	4603      	mov	r3, r0
 80042ce:	75fb      	strb	r3, [r7, #23]
       sprintf(snd_buffer,"%s*%02x%s",
 80042d0:	7dfa      	ldrb	r2, [r7, #23]
 80042d2:	4b3d      	ldr	r3, [pc, #244]	; (80043c8 <slocum_send_cmd+0x1bc>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	4613      	mov	r3, r2
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	493c      	ldr	r1, [pc, #240]	; (80043d0 <slocum_send_cmd+0x1c4>)
 80042de:	69b8      	ldr	r0, [r7, #24]
 80042e0:	f006 fbbc 	bl	800aa5c <siprintf>
    		    snd_buffer,
				xor,
				slocum_commands_strings[SLOCUM_MSG_EOL]);

  	   slocum_schedule_for_tx(slocum_obj,(uint8_t*)snd_buffer,strlen(snd_buffer));
 80042e4:	69b8      	ldr	r0, [r7, #24]
 80042e6:	f7fb ffad 	bl	8000244 <strlen>
 80042ea:	4603      	mov	r3, r0
 80042ec:	461a      	mov	r2, r3
 80042ee:	69b9      	ldr	r1, [r7, #24]
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f871 	bl	80043d8 <slocum_schedule_for_tx>
     break;
 80042f6:	e05c      	b.n	80043b2 <slocum_send_cmd+0x1a6>

     case SLOCUM_CMD_CLOSE_FILE:

       sprintf(snd_buffer,"%s",
 80042f8:	4b33      	ldr	r3, [pc, #204]	; (80043c8 <slocum_send_cmd+0x1bc>)
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	461a      	mov	r2, r3
 80042fe:	4935      	ldr	r1, [pc, #212]	; (80043d4 <slocum_send_cmd+0x1c8>)
 8004300:	69b8      	ldr	r0, [r7, #24]
 8004302:	f006 fbab 	bl	800aa5c <siprintf>
    		    slocum_commands_strings[SLOCUM_MSG_CLOSE_FILE]
				);
       xor=calc_XOR(snd_buffer+1,strlen(snd_buffer+1));
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	1c5c      	adds	r4, r3, #1
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	3301      	adds	r3, #1
 800430e:	4618      	mov	r0, r3
 8004310:	f7fb ff98 	bl	8000244 <strlen>
 8004314:	4603      	mov	r3, r0
 8004316:	4619      	mov	r1, r3
 8004318:	4620      	mov	r0, r4
 800431a:	f7fd fd6f 	bl	8001dfc <calc_XOR>
 800431e:	4603      	mov	r3, r0
 8004320:	75fb      	strb	r3, [r7, #23]
       sprintf(snd_buffer,"%s*%02x%s",
 8004322:	7dfa      	ldrb	r2, [r7, #23]
 8004324:	4b28      	ldr	r3, [pc, #160]	; (80043c8 <slocum_send_cmd+0x1bc>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	4613      	mov	r3, r2
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4928      	ldr	r1, [pc, #160]	; (80043d0 <slocum_send_cmd+0x1c4>)
 8004330:	69b8      	ldr	r0, [r7, #24]
 8004332:	f006 fb93 	bl	800aa5c <siprintf>
    		    snd_buffer,
				xor,
				slocum_commands_strings[SLOCUM_MSG_EOL]);

       slocum_schedule_for_tx(slocum_obj,(uint8_t*)snd_buffer,strlen(snd_buffer));
 8004336:	69b8      	ldr	r0, [r7, #24]
 8004338:	f7fb ff84 	bl	8000244 <strlen>
 800433c:	4603      	mov	r3, r0
 800433e:	461a      	mov	r2, r3
 8004340:	69b9      	ldr	r1, [r7, #24]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f848 	bl	80043d8 <slocum_schedule_for_tx>
     break;
 8004348:	e033      	b.n	80043b2 <slocum_send_cmd+0x1a6>

     case SLOCUM_CMD_WRITE_FILE_DATA:
       ptr1=arg;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	613b      	str	r3, [r7, #16]
       base64encode((char*)ptr1->start_addr,(uint32_t)ptr1->size,base64_buffer,SLOCUM_BASE64_BUFFER_SIZE);
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	6859      	ldr	r1, [r3, #4]
 8004356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800435a:	69fa      	ldr	r2, [r7, #28]
 800435c:	f7fd fc6a 	bl	8001c34 <base64encode>
       sprintf( snd_buffer,"%s%s",
 8004360:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <slocum_send_cmd+0x1bc>)
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	4919      	ldr	r1, [pc, #100]	; (80043cc <slocum_send_cmd+0x1c0>)
 8004368:	69b8      	ldr	r0, [r7, #24]
 800436a:	f006 fb77 	bl	800aa5c <siprintf>
    		    slocum_commands_strings[SLOCUM_MSG_SLOCUM_CMD_WRITE_FILE_DATA],
				base64_buffer
				//ptr1->start_addr
				);
       xor=calc_XOR(snd_buffer+1,strlen(snd_buffer+1));
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	1c5c      	adds	r4, r3, #1
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	3301      	adds	r3, #1
 8004376:	4618      	mov	r0, r3
 8004378:	f7fb ff64 	bl	8000244 <strlen>
 800437c:	4603      	mov	r3, r0
 800437e:	4619      	mov	r1, r3
 8004380:	4620      	mov	r0, r4
 8004382:	f7fd fd3b 	bl	8001dfc <calc_XOR>
 8004386:	4603      	mov	r3, r0
 8004388:	75fb      	strb	r3, [r7, #23]
       sprintf( snd_buffer,"%s*%02x%s",
 800438a:	7dfa      	ldrb	r2, [r7, #23]
 800438c:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <slocum_send_cmd+0x1bc>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	4613      	mov	r3, r2
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	490e      	ldr	r1, [pc, #56]	; (80043d0 <slocum_send_cmd+0x1c4>)
 8004398:	69b8      	ldr	r0, [r7, #24]
 800439a:	f006 fb5f 	bl	800aa5c <siprintf>
    		    snd_buffer,
				xor,
				slocum_commands_strings[SLOCUM_MSG_EOL]);
       slocum_schedule_for_tx(slocum_obj,(uint8_t*)snd_buffer,strlen(snd_buffer));
 800439e:	69b8      	ldr	r0, [r7, #24]
 80043a0:	f7fb ff50 	bl	8000244 <strlen>
 80043a4:	4603      	mov	r3, r0
 80043a6:	461a      	mov	r2, r3
 80043a8:	69b9      	ldr	r1, [r7, #24]
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 f814 	bl	80043d8 <slocum_schedule_for_tx>
     break;
 80043b0:	bf00      	nop

 }
  free(snd_buffer);
 80043b2:	69b8      	ldr	r0, [r7, #24]
 80043b4:	f005 fd7e 	bl	8009eb4 <free>
  free(base64_buffer);
 80043b8:	69f8      	ldr	r0, [r7, #28]
 80043ba:	f005 fd7b 	bl	8009eb4 <free>
}
 80043be:	bf00      	nop
 80043c0:	3724      	adds	r7, #36	; 0x24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd90      	pop	{r4, r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000224 	.word	0x20000224
 80043cc:	0800e898 	.word	0x0800e898
 80043d0:	0800e88c 	.word	0x0800e88c
 80043d4:	0800e8a0 	.word	0x0800e8a0

080043d8 <slocum_schedule_for_tx>:

void slocum_schedule_for_tx(slocum* slocum_obj,uint8_t* message,uint32_t size)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 osSemaphoreWait(slocum_obj->out_q_sem,osWaitForever);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f04f 31ff 	mov.w	r1, #4294967295
 80043ec:	4618      	mov	r0, r3
 80043ee:	f002 ff31 	bl	8007254 <osSemaphoreWait>
 for(int i=0;i<size;i++)
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	e00d      	b.n	8004414 <slocum_schedule_for_tx+0x3c>
 {
   osMessagePut(slocum_obj->media_tx_q,*(message+i),osWaitForever);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6858      	ldr	r0, [r3, #4]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	4413      	add	r3, r2
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	f04f 32ff 	mov.w	r2, #4294967295
 8004408:	4619      	mov	r1, r3
 800440a:	f002 ffcf 	bl	80073ac <osMessagePut>
 for(int i=0;i<size;i++)
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	3301      	adds	r3, #1
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	429a      	cmp	r2, r3
 800441a:	d8ed      	bhi.n	80043f8 <slocum_schedule_for_tx+0x20>
 }
 osSemaphoreRelease(slocum_obj->out_q_sem);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	4618      	mov	r0, r3
 8004422:	f002 ff65 	bl	80072f0 <osSemaphoreRelease>
}
 8004426:	bf00      	nop
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <slocum_parse_message>:
	return SLOCUM_F_ERR;
}


int slocum_parse_message(slocum* slocum_obj,uint8_t* msg)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
 uint8_t* tmp_ptr;
 for(int i=0;i<SLOCUM_MSG_NUM_OF_FUNCTIONS;i++)
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	e01e      	b.n	800447e <slocum_parse_message+0x4e>
 {
	  tmp_ptr=0;
 8004440:	2300      	movs	r3, #0
 8004442:	60bb      	str	r3, [r7, #8]
	  tmp_ptr=strstr(msg,slocum_messages_strings[i]);
 8004444:	4a12      	ldr	r2, [pc, #72]	; (8004490 <slocum_parse_message+0x60>)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800444c:	4619      	mov	r1, r3
 800444e:	6838      	ldr	r0, [r7, #0]
 8004450:	f006 fb7e 	bl	800ab50 <strstr>
 8004454:	60b8      	str	r0, [r7, #8]
	  if(tmp_ptr)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00d      	beq.n	8004478 <slocum_parse_message+0x48>
		{
			if(slocum_functions[i](slocum_obj,msg)==SLOCUM_F_OK) return SLOCUM_F_OK;
 800445c:	4a0d      	ldr	r2, [pc, #52]	; (8004494 <slocum_parse_message+0x64>)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004464:	6839      	ldr	r1, [r7, #0]
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	4798      	blx	r3
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <slocum_parse_message+0x44>
 8004470:	2300      	movs	r3, #0
 8004472:	e008      	b.n	8004486 <slocum_parse_message+0x56>
      else return SLOCUM_F_ERR;
 8004474:	2301      	movs	r3, #1
 8004476:	e006      	b.n	8004486 <slocum_parse_message+0x56>
 for(int i=0;i<SLOCUM_MSG_NUM_OF_FUNCTIONS;i++)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3301      	adds	r3, #1
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	dddd      	ble.n	8004440 <slocum_parse_message+0x10>
		}
 }
 return SLOCUM_F_ERR;
 8004484:	2301      	movs	r3, #1
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20001578 	.word	0x20001578
 8004494:	20001574 	.word	0x20001574

08004498 <slocum_messages_init>:

void slocum_messages_init(slocum* slocum_obj)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
	slocum_functions[SLOCUM_MSG_SD] = SLOCUM_MSG_SD_f;
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <slocum_messages_init+0x20>)
 80044a2:	4a06      	ldr	r2, [pc, #24]	; (80044bc <slocum_messages_init+0x24>)
 80044a4:	601a      	str	r2, [r3, #0]
	slocum_messages_strings[SLOCUM_MSG_SD] = "$SD";
 80044a6:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <slocum_messages_init+0x28>)
 80044a8:	4a06      	ldr	r2, [pc, #24]	; (80044c4 <slocum_messages_init+0x2c>)
 80044aa:	601a      	str	r2, [r3, #0]
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20001574 	.word	0x20001574
 80044bc:	080044c9 	.word	0x080044c9
 80044c0:	20001578 	.word	0x20001578
 80044c4:	0800e8a4 	.word	0x0800e8a4

080044c8 <SLOCUM_MSG_SD_f>:

int SLOCUM_MSG_SD_f(slocum* slocum_obj,uint8_t* msg)
{
 80044c8:	b590      	push	{r4, r7, lr}
 80044ca:	b0a7      	sub	sp, #156	; 0x9c
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
	uint8_t crc;

	char tt[30];
	uint32_t ssd;

	pch = strtok (msg,"*");//msg
 80044d2:	49c2      	ldr	r1, [pc, #776]	; (80047dc <SLOCUM_MSG_SD_f+0x314>)
 80044d4:	6838      	ldr	r0, [r7, #0]
 80044d6:	f007 f9ad 	bl	800b834 <strtok>
 80044da:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	msg=(uint8_t*)pch;
 80044de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044e2:	603b      	str	r3, [r7, #0]

	pch = strtok (NULL,",");//crc
 80044e4:	49be      	ldr	r1, [pc, #760]	; (80047e0 <SLOCUM_MSG_SD_f+0x318>)
 80044e6:	2000      	movs	r0, #0
 80044e8:	f007 f9a4 	bl	800b834 <strtok>
 80044ec:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	crc=*pch;
 80044f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

	uint8_t msg_xor=calc_XOR(msg+1,strlen(msg+1));
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	1c5c      	adds	r4, r3, #1
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	3301      	adds	r3, #1
 8004502:	4618      	mov	r0, r3
 8004504:	f7fb fe9e 	bl	8000244 <strlen>
 8004508:	4603      	mov	r3, r0
 800450a:	4619      	mov	r1, r3
 800450c:	4620      	mov	r0, r4
 800450e:	f7fd fc75 	bl	8001dfc <calc_XOR>
 8004512:	4603      	mov	r3, r0
 8004514:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
	uint8_t e_xor=strtol(crc,NULL,16);
 8004518:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800451c:	2210      	movs	r2, #16
 800451e:	2100      	movs	r1, #0
 8004520:	4618      	mov	r0, r3
 8004522:	f007 fa5f 	bl	800b9e4 <strtol>
 8004526:	4603      	mov	r3, r0
 8004528:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
	//if(msg_xor!=e_xor) return;

	pch = strtok (msg,",");//header
 800452c:	49ac      	ldr	r1, [pc, #688]	; (80047e0 <SLOCUM_MSG_SD_f+0x318>)
 800452e:	6838      	ldr	r0, [r7, #0]
 8004530:	f007 f980 	bl	800b834 <strtok>
 8004534:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

	memset(params_str,0,20);
 8004538:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800453c:	2214      	movs	r2, #20
 800453e:	2100      	movs	r1, #0
 8004540:	4618      	mov	r0, r3
 8004542:	f005 fccd 	bl	8009ee0 <memset>
	for(int i=0;i<20;i++){
 8004546:	2300      	movs	r3, #0
 8004548:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800454c:	e017      	b.n	800457e <SLOCUM_MSG_SD_f+0xb6>
	 pch = strtok (NULL,",");
 800454e:	49a4      	ldr	r1, [pc, #656]	; (80047e0 <SLOCUM_MSG_SD_f+0x318>)
 8004550:	2000      	movs	r0, #0
 8004552:	f007 f96f 	bl	800b834 <strtok>
 8004556:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	 if(pch) params_str[i]=pch;
 800455a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800455e:	2b00      	cmp	r3, #0
 8004560:	d012      	beq.n	8004588 <SLOCUM_MSG_SD_f+0xc0>
 8004562:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	3398      	adds	r3, #152	; 0x98
 800456a:	443b      	add	r3, r7
 800456c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004570:	f843 2c6c 	str.w	r2, [r3, #-108]
	for(int i=0;i<20;i++){
 8004574:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004578:	3301      	adds	r3, #1
 800457a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800457e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004582:	2b13      	cmp	r3, #19
 8004584:	dde3      	ble.n	800454e <SLOCUM_MSG_SD_f+0x86>
 8004586:	e000      	b.n	800458a <SLOCUM_MSG_SD_f+0xc2>
	 else break;
 8004588:	bf00      	nop
	}

	for(int i=0;i<20;i++){
 800458a:	2300      	movs	r3, #0
 800458c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004590:	e20a      	b.n	80049a8 <SLOCUM_MSG_SD_f+0x4e0>
	 if(params_str[i]){
 8004592:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	3398      	adds	r3, #152	; 0x98
 800459a:	443b      	add	r3, r7
 800459c:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8207 	beq.w	80049b4 <SLOCUM_MSG_SD_f+0x4ec>
	  pch = strtok (params_str[i],":");
 80045a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	3398      	adds	r3, #152	; 0x98
 80045ae:	443b      	add	r3, r7
 80045b0:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 80045b4:	498b      	ldr	r1, [pc, #556]	; (80047e4 <SLOCUM_MSG_SD_f+0x31c>)
 80045b6:	4618      	mov	r0, r3
 80045b8:	f007 f93c 	bl	800b834 <strtok>
 80045bc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

	  if(strcmp(pch,"2")==0){
 80045c0:	4989      	ldr	r1, [pc, #548]	; (80047e8 <SLOCUM_MSG_SD_f+0x320>)
 80045c2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80045c6:	f7fb fe33 	bl	8000230 <strcmp>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d11d      	bne.n	800460c <SLOCUM_MSG_SD_f+0x144>
		  pch = strtok (NULL,".");
 80045d0:	4986      	ldr	r1, [pc, #536]	; (80047ec <SLOCUM_MSG_SD_f+0x324>)
 80045d2:	2000      	movs	r0, #0
 80045d4:	f007 f92e 	bl	800b834 <strtok>
 80045d8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		  if(pch){
 80045dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 81dc 	beq.w	800499e <SLOCUM_MSG_SD_f+0x4d6>
			slocum_obj->timestamp=(uint32_t)strtol(pch,NULL,10);
 80045e6:	220a      	movs	r2, #10
 80045e8:	2100      	movs	r1, #0
 80045ea:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80045ee:	f007 f9f9 	bl	800b9e4 <strtol>
 80045f2:	4603      	mov	r3, r0
 80045f4:	461a      	mov	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8c3 2037 	str.w	r2, [r3, #55]	; 0x37
  			osMessagePut(slocum_obj->events_q,SLOCUM_EVNT_CLK_RCVD,1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2201      	movs	r2, #1
 8004602:	217e      	movs	r1, #126	; 0x7e
 8004604:	4618      	mov	r0, r3
 8004606:	f002 fed1 	bl	80073ac <osMessagePut>
 800460a:	e1c8      	b.n	800499e <SLOCUM_MSG_SD_f+0x4d6>
		  }
	  }
	  else if(strcmp(pch,"3")==0){
 800460c:	4978      	ldr	r1, [pc, #480]	; (80047f0 <SLOCUM_MSG_SD_f+0x328>)
 800460e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004612:	f7fb fe0d 	bl	8000230 <strcmp>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d123      	bne.n	8004664 <SLOCUM_MSG_SD_f+0x19c>
		  pch = strtok (NULL,",");
 800461c:	4970      	ldr	r1, [pc, #448]	; (80047e0 <SLOCUM_MSG_SD_f+0x318>)
 800461e:	2000      	movs	r0, #0
 8004620:	f007 f908 	bl	800b834 <strtok>
 8004624:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		  if(pch){
 8004628:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 81b6 	beq.w	800499e <SLOCUM_MSG_SD_f+0x4d6>
			slocum_obj->prev_depth=slocum_obj->last_depth;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 2012 	ldr.w	r2, [r3, #18]
 8004638:	4613      	mov	r3, r2
 800463a:	461a      	mov	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8c3 2016 	str.w	r2, [r3, #22]
			slocum_obj->last_depth=strtof(pch,NULL);
 8004642:	2100      	movs	r1, #0
 8004644:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004648:	f007 f8a2 	bl	800b790 <strtof>
 800464c:	4602      	mov	r2, r0
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8c3 2012 	str.w	r2, [r3, #18]
			osMessagePut(slocum_obj->events_q,SLOCUM_EVNT_DEPTH_RCVD,1);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2201      	movs	r2, #1
 800465a:	217d      	movs	r1, #125	; 0x7d
 800465c:	4618      	mov	r0, r3
 800465e:	f002 fea5 	bl	80073ac <osMessagePut>
 8004662:	e19c      	b.n	800499e <SLOCUM_MSG_SD_f+0x4d6>
		  }
	  }
	  else if(strcmp(pch,"4")==0){
 8004664:	4963      	ldr	r1, [pc, #396]	; (80047f4 <SLOCUM_MSG_SD_f+0x32c>)
 8004666:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800466a:	f7fb fde1 	bl	8000230 <strcmp>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d149      	bne.n	8004708 <SLOCUM_MSG_SD_f+0x240>
		  pch = strtok (NULL,",");
 8004674:	495a      	ldr	r1, [pc, #360]	; (80047e0 <SLOCUM_MSG_SD_f+0x318>)
 8004676:	2000      	movs	r0, #0
 8004678:	f007 f8dc 	bl	800b834 <strtok>
 800467c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		  if(pch){
 8004680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 818a 	beq.w	800499e <SLOCUM_MSG_SD_f+0x4d6>
			uint32_t final_depth_state=strtol(pch,NULL,10);
 800468a:	220a      	movs	r2, #10
 800468c:	2100      	movs	r1, #0
 800468e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004692:	f007 f9a7 	bl	800b9e4 <strtol>
 8004696:	4603      	mov	r3, r0
 8004698:	67fb      	str	r3, [r7, #124]	; 0x7c
			if(final_depth_state==GLIDER_FINAL_DEPTH_AT_SURFACE
 800469a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800469c:	2b00      	cmp	r3, #0
 800469e:	d006      	beq.n	80046ae <SLOCUM_MSG_SD_f+0x1e6>
					               ||final_depth_state==GLIDER_FINAL_DEPTH_DIVINIG
 80046a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d003      	beq.n	80046ae <SLOCUM_MSG_SD_f+0x1e6>
								   ||final_depth_state==GLIDER_FINAL_DEPTH_CLIMBING){
 80046a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	f040 8178 	bne.w	800499e <SLOCUM_MSG_SD_f+0x4d6>
		       slocum_obj->final_depth_state=final_depth_state;
 80046ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		       if(slocum_obj->final_depth_state==GLIDER_FINAL_DEPTH_AT_SURFACE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d107      	bne.n	80046d2 <SLOCUM_MSG_SD_f+0x20a>
		    	                osMessagePut(slocum_obj->events_q,SLOCUM_EVNT_FINAL_DEPTH_AT_SURFACE_RCVD,1);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2201      	movs	r2, #1
 80046c8:	2182      	movs	r1, #130	; 0x82
 80046ca:	4618      	mov	r0, r3
 80046cc:	f002 fe6e 	bl	80073ac <osMessagePut>
 80046d0:	e165      	b.n	800499e <SLOCUM_MSG_SD_f+0x4d6>
		       else if(slocum_obj->final_depth_state==GLIDER_FINAL_DEPTH_DIVINIG)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d107      	bne.n	80046ec <SLOCUM_MSG_SD_f+0x224>
		    	                osMessagePut(slocum_obj->events_q,SLOCUM_EVNT_FINAL_DEPTH_DIVING_RCVD,1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	2201      	movs	r2, #1
 80046e2:	2183      	movs	r1, #131	; 0x83
 80046e4:	4618      	mov	r0, r3
 80046e6:	f002 fe61 	bl	80073ac <osMessagePut>
 80046ea:	e158      	b.n	800499e <SLOCUM_MSG_SD_f+0x4d6>
		       else if(slocum_obj->final_depth_state==GLIDER_FINAL_DEPTH_CLIMBING)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	f040 8153 	bne.w	800499e <SLOCUM_MSG_SD_f+0x4d6>
		    	                osMessagePut(slocum_obj->events_q,SLOCUM_EVNT_FINAL_DEPTH_CLIMBING_RCVD,1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2201      	movs	r2, #1
 80046fe:	2184      	movs	r1, #132	; 0x84
 8004700:	4618      	mov	r0, r3
 8004702:	f002 fe53 	bl	80073ac <osMessagePut>
 8004706:	e14a      	b.n	800499e <SLOCUM_MSG_SD_f+0x4d6>
		    }
		  }
	  }

	  else if(strcmp(pch,"5")==0){
 8004708:	493b      	ldr	r1, [pc, #236]	; (80047f8 <SLOCUM_MSG_SD_f+0x330>)
 800470a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800470e:	f7fb fd8f 	bl	8000230 <strcmp>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d119      	bne.n	800474c <SLOCUM_MSG_SD_f+0x284>
		  pch = strtok (NULL,",");
 8004718:	4931      	ldr	r1, [pc, #196]	; (80047e0 <SLOCUM_MSG_SD_f+0x318>)
 800471a:	2000      	movs	r0, #0
 800471c:	f007 f88a 	bl	800b834 <strtok>
 8004720:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		  if(pch){
 8004724:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8138 	beq.w	800499e <SLOCUM_MSG_SD_f+0x4d6>
			strcpy(slocum_obj->mission_id,pch);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	333b      	adds	r3, #59	; 0x3b
 8004732:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8004736:	4618      	mov	r0, r3
 8004738:	f006 fa02 	bl	800ab40 <strcpy>
  			osMessagePut(slocum_obj->events_q,SLOCUM_EVNT_MISSION_ID_RCVD,1);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2201      	movs	r2, #1
 8004742:	217f      	movs	r1, #127	; 0x7f
 8004744:	4618      	mov	r0, r3
 8004746:	f002 fe31 	bl	80073ac <osMessagePut>
 800474a:	e128      	b.n	800499e <SLOCUM_MSG_SD_f+0x4d6>
		  }
	  }
	  else if(strcmp(pch,"6")==0){
 800474c:	492b      	ldr	r1, [pc, #172]	; (80047fc <SLOCUM_MSG_SD_f+0x334>)
 800474e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004752:	f7fb fd6d 	bl	8000230 <strcmp>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d11b      	bne.n	8004794 <SLOCUM_MSG_SD_f+0x2cc>
		  pch = strtok (NULL,",");
 800475c:	4920      	ldr	r1, [pc, #128]	; (80047e0 <SLOCUM_MSG_SD_f+0x318>)
 800475e:	2000      	movs	r0, #0
 8004760:	f007 f868 	bl	800b834 <strtok>
 8004764:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		  if(pch){
 8004768:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8116 	beq.w	800499e <SLOCUM_MSG_SD_f+0x4d6>
			slocum_obj->gps_lon=strtof(pch,NULL);
 8004772:	2100      	movs	r1, #0
 8004774:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004778:	f007 f80a 	bl	800b790 <strtof>
 800477c:	4602      	mov	r2, r0
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8c3 201a 	str.w	r2, [r3, #26]
			osMessagePut(slocum_obj->events_q,SLOCUM_EVNT_GPS_LON_RCVD,1);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2201      	movs	r2, #1
 800478a:	2178      	movs	r1, #120	; 0x78
 800478c:	4618      	mov	r0, r3
 800478e:	f002 fe0d 	bl	80073ac <osMessagePut>
 8004792:	e104      	b.n	800499e <SLOCUM_MSG_SD_f+0x4d6>
		  }
	  }
	  else if(strcmp(pch,"7")==0){
 8004794:	491a      	ldr	r1, [pc, #104]	; (8004800 <SLOCUM_MSG_SD_f+0x338>)
 8004796:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800479a:	f7fb fd49 	bl	8000230 <strcmp>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d12f      	bne.n	8004804 <SLOCUM_MSG_SD_f+0x33c>
		  pch = strtok (NULL,",");
 80047a4:	490e      	ldr	r1, [pc, #56]	; (80047e0 <SLOCUM_MSG_SD_f+0x318>)
 80047a6:	2000      	movs	r0, #0
 80047a8:	f007 f844 	bl	800b834 <strtok>
 80047ac:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		  if(pch){
 80047b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80f2 	beq.w	800499e <SLOCUM_MSG_SD_f+0x4d6>
			slocum_obj->gps_lat=strtof(pch,NULL);
 80047ba:	2100      	movs	r1, #0
 80047bc:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80047c0:	f006 ffe6 	bl	800b790 <strtof>
 80047c4:	4602      	mov	r2, r0
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8c3 201e 	str.w	r2, [r3, #30]
			osMessagePut(slocum_obj->events_q,SLOCUM_EVNT_GPS_LAT_RCVD,1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2201      	movs	r2, #1
 80047d2:	2177      	movs	r1, #119	; 0x77
 80047d4:	4618      	mov	r0, r3
 80047d6:	f002 fde9 	bl	80073ac <osMessagePut>
 80047da:	e0e0      	b.n	800499e <SLOCUM_MSG_SD_f+0x4d6>
 80047dc:	0800e8a8 	.word	0x0800e8a8
 80047e0:	0800e8ac 	.word	0x0800e8ac
 80047e4:	0800e8b0 	.word	0x0800e8b0
 80047e8:	0800e8b4 	.word	0x0800e8b4
 80047ec:	0800e8b8 	.word	0x0800e8b8
 80047f0:	0800e8bc 	.word	0x0800e8bc
 80047f4:	0800e8c0 	.word	0x0800e8c0
 80047f8:	0800e8c4 	.word	0x0800e8c4
 80047fc:	0800e8c8 	.word	0x0800e8c8
 8004800:	0800e8cc 	.word	0x0800e8cc
		  }
	  }
	  else if(strcmp(pch,"8")==0){
 8004804:	496e      	ldr	r1, [pc, #440]	; (80049c0 <SLOCUM_MSG_SD_f+0x4f8>)
 8004806:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800480a:	f7fb fd11 	bl	8000230 <strcmp>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d11b      	bne.n	800484c <SLOCUM_MSG_SD_f+0x384>
		  pch = strtok (NULL,",");
 8004814:	496b      	ldr	r1, [pc, #428]	; (80049c4 <SLOCUM_MSG_SD_f+0x4fc>)
 8004816:	2000      	movs	r0, #0
 8004818:	f007 f80c 	bl	800b834 <strtok>
 800481c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		  if(pch){
 8004820:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80ba 	beq.w	800499e <SLOCUM_MSG_SD_f+0x4d6>
			slocum_obj->dive_target_depth=strtof(pch,NULL);
 800482a:	2100      	movs	r1, #0
 800482c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004830:	f006 ffae 	bl	800b790 <strtof>
 8004834:	4602      	mov	r2, r0
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8c3 2022 	str.w	r2, [r3, #34]	; 0x22
			osMessagePut(slocum_obj->events_q,SLOCUM_EVNT_DIVE_TARGET_DEPTH_RCVD,1);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2201      	movs	r2, #1
 8004842:	2179      	movs	r1, #121	; 0x79
 8004844:	4618      	mov	r0, r3
 8004846:	f002 fdb1 	bl	80073ac <osMessagePut>
 800484a:	e0a8      	b.n	800499e <SLOCUM_MSG_SD_f+0x4d6>
		  }
	  }
	  else if(strcmp(pch,"9")==0){
 800484c:	495e      	ldr	r1, [pc, #376]	; (80049c8 <SLOCUM_MSG_SD_f+0x500>)
 800484e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004852:	f7fb fced 	bl	8000230 <strcmp>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d13b      	bne.n	80048d4 <SLOCUM_MSG_SD_f+0x40c>
		  pch = strtok (NULL,",");
 800485c:	4959      	ldr	r1, [pc, #356]	; (80049c4 <SLOCUM_MSG_SD_f+0x4fc>)
 800485e:	2000      	movs	r0, #0
 8004860:	f006 ffe8 	bl	800b834 <strtok>
 8004864:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		  if(pch){
 8004868:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8096 	beq.w	800499e <SLOCUM_MSG_SD_f+0x4d6>
			uint32_t new_power_status=strtol(pch,NULL,10);
 8004872:	220a      	movs	r2, #10
 8004874:	2100      	movs	r1, #0
 8004876:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800487a:	f007 f8b3 	bl	800b9e4 <strtol>
 800487e:	4603      	mov	r3, r0
 8004880:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			if(new_power_status==UVP6_USER_PARAM_POWER_ON||new_power_status==UVP6_USER_PARAM_POWER_OFF)
 8004884:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004888:	2b00      	cmp	r3, #0
 800488a:	d004      	beq.n	8004896 <SLOCUM_MSG_SD_f+0x3ce>
 800488c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004890:	2b01      	cmp	r3, #1
 8004892:	f040 8084 	bne.w	800499e <SLOCUM_MSG_SD_f+0x4d6>
			{   slocum_obj->user_param_power_ctrl=new_power_status;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800489c:	f8c3 2047 	str.w	r2, [r3, #71]	; 0x47
				if(slocum_obj->user_param_power_ctrl==UVP6_USER_PARAM_POWER_ON)osMessagePut(slocum_obj->events_q,SLOCUM_EVNT_USER_PARAM_PWR_ON_RCVD,1);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8d3 3047 	ldr.w	r3, [r3, #71]	; 0x47
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d107      	bne.n	80048ba <SLOCUM_MSG_SD_f+0x3f2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2201      	movs	r2, #1
 80048b0:	217a      	movs	r1, #122	; 0x7a
 80048b2:	4618      	mov	r0, r3
 80048b4:	f002 fd7a 	bl	80073ac <osMessagePut>
 80048b8:	e071      	b.n	800499e <SLOCUM_MSG_SD_f+0x4d6>
				else if(slocum_obj->user_param_power_ctrl==UVP6_USER_PARAM_POWER_OFF)osMessagePut(slocum_obj->events_q,SLOCUM_EVNT_USER_PARAM_PWR_OFF_RCVD,1);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 3047 	ldr.w	r3, [r3, #71]	; 0x47
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d16c      	bne.n	800499e <SLOCUM_MSG_SD_f+0x4d6>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2201      	movs	r2, #1
 80048ca:	217b      	movs	r1, #123	; 0x7b
 80048cc:	4618      	mov	r0, r3
 80048ce:	f002 fd6d 	bl	80073ac <osMessagePut>
 80048d2:	e064      	b.n	800499e <SLOCUM_MSG_SD_f+0x4d6>
			}
		  }
	  }
	  else if(strcmp(pch,"10")==0){
 80048d4:	493d      	ldr	r1, [pc, #244]	; (80049cc <SLOCUM_MSG_SD_f+0x504>)
 80048d6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80048da:	f7fb fca9 	bl	8000230 <strcmp>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d11a      	bne.n	800491a <SLOCUM_MSG_SD_f+0x452>
		  pch = strtok (NULL,",");
 80048e4:	4937      	ldr	r1, [pc, #220]	; (80049c4 <SLOCUM_MSG_SD_f+0x4fc>)
 80048e6:	2000      	movs	r0, #0
 80048e8:	f006 ffa4 	bl	800b834 <strtok>
 80048ec:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		  if(pch){
 80048f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d052      	beq.n	800499e <SLOCUM_MSG_SD_f+0x4d6>
			slocum_obj->user_param_min_depth=strtof(pch,NULL);
 80048f8:	2100      	movs	r1, #0
 80048fa:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80048fe:	f006 ff47 	bl	800b790 <strtof>
 8004902:	4602      	mov	r2, r0
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8c3 204b 	str.w	r2, [r3, #75]	; 0x4b
			osMessagePut(slocum_obj->events_q,SLOCUM_EVNT_USER_PARAM_MIN_DEPTH_RCVD,1);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2201      	movs	r2, #1
 8004910:	217c      	movs	r1, #124	; 0x7c
 8004912:	4618      	mov	r0, r3
 8004914:	f002 fd4a 	bl	80073ac <osMessagePut>
 8004918:	e041      	b.n	800499e <SLOCUM_MSG_SD_f+0x4d6>
		  }
	  }
	  else if(strcmp(pch,"11")==0){
 800491a:	492d      	ldr	r1, [pc, #180]	; (80049d0 <SLOCUM_MSG_SD_f+0x508>)
 800491c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004920:	f7fb fc86 	bl	8000230 <strcmp>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d139      	bne.n	800499e <SLOCUM_MSG_SD_f+0x4d6>
		  pch = strtok (NULL,",");
 800492a:	4926      	ldr	r1, [pc, #152]	; (80049c4 <SLOCUM_MSG_SD_f+0x4fc>)
 800492c:	2000      	movs	r0, #0
 800492e:	f006 ff81 	bl	800b834 <strtok>
 8004932:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		  if(pch){
 8004936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800493a:	2b00      	cmp	r3, #0
 800493c:	d02f      	beq.n	800499e <SLOCUM_MSG_SD_f+0x4d6>
			uint32_t x_glider_dos=strtol(pch,NULL,10);
 800493e:	220a      	movs	r2, #10
 8004940:	2100      	movs	r1, #0
 8004942:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004946:	f007 f84d 	bl	800b9e4 <strtol>
 800494a:	4603      	mov	r3, r0
 800494c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if(x_glider_dos==SLOCUM_X_GLIDER_DOS_ON||x_glider_dos==SLOCUM_X_GLIDER_DOS_OFF){
 8004950:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004954:	2b01      	cmp	r3, #1
 8004956:	d003      	beq.n	8004960 <SLOCUM_MSG_SD_f+0x498>
 8004958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800495c:	2b00      	cmp	r3, #0
 800495e:	d11e      	bne.n	800499e <SLOCUM_MSG_SD_f+0x4d6>
                  slocum_obj->x_glider_dos=x_glider_dos;
 8004960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004964:	b2da      	uxtb	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				  if(slocum_obj->x_glider_dos==SLOCUM_X_GLIDER_DOS_ON)osMessagePut(slocum_obj->events_q,SLOCUM_EVNT_DOS_ON,1);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004972:	2b01      	cmp	r3, #1
 8004974:	d107      	bne.n	8004986 <SLOCUM_MSG_SD_f+0x4be>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2201      	movs	r2, #1
 800497c:	218f      	movs	r1, #143	; 0x8f
 800497e:	4618      	mov	r0, r3
 8004980:	f002 fd14 	bl	80073ac <osMessagePut>
 8004984:	e00b      	b.n	800499e <SLOCUM_MSG_SD_f+0x4d6>
				  else if(slocum_obj->x_glider_dos==SLOCUM_X_GLIDER_DOS_OFF)osMessagePut(slocum_obj->events_q,SLOCUM_EVNT_DOS_OFF,1);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800498c:	2b00      	cmp	r3, #0
 800498e:	d106      	bne.n	800499e <SLOCUM_MSG_SD_f+0x4d6>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2201      	movs	r2, #1
 8004996:	218e      	movs	r1, #142	; 0x8e
 8004998:	4618      	mov	r0, r3
 800499a:	f002 fd07 	bl	80073ac <osMessagePut>
	for(int i=0;i<20;i++){
 800499e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049a2:	3301      	adds	r3, #1
 80049a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049ac:	2b13      	cmp	r3, #19
 80049ae:	f77f adf0 	ble.w	8004592 <SLOCUM_MSG_SD_f+0xca>
 80049b2:	e000      	b.n	80049b6 <SLOCUM_MSG_SD_f+0x4ee>
			}
		   }
	  }

	 }
	 else break;
 80049b4:	bf00      	nop
	}
	return SLOCUM_F_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	379c      	adds	r7, #156	; 0x9c
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd90      	pop	{r4, r7, pc}
 80049c0:	0800e8d0 	.word	0x0800e8d0
 80049c4:	0800e8ac 	.word	0x0800e8ac
 80049c8:	0800e8d4 	.word	0x0800e8d4
 80049cc:	0800e8d8 	.word	0x0800e8d8
 80049d0:	0800e8dc 	.word	0x0800e8dc

080049d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80049da:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <HAL_MspInit+0x4c>)
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	4a10      	ldr	r2, [pc, #64]	; (8004a20 <HAL_MspInit+0x4c>)
 80049e0:	f043 0301 	orr.w	r3, r3, #1
 80049e4:	6193      	str	r3, [r2, #24]
 80049e6:	4b0e      	ldr	r3, [pc, #56]	; (8004a20 <HAL_MspInit+0x4c>)
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	607b      	str	r3, [r7, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049f2:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <HAL_MspInit+0x4c>)
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	4a0a      	ldr	r2, [pc, #40]	; (8004a20 <HAL_MspInit+0x4c>)
 80049f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049fc:	61d3      	str	r3, [r2, #28]
 80049fe:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <HAL_MspInit+0x4c>)
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a06:	603b      	str	r3, [r7, #0]
 8004a08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	210f      	movs	r1, #15
 8004a0e:	f06f 0001 	mvn.w	r0, #1
 8004a12:	f000 fb26 	bl	8005062 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	40021000 	.word	0x40021000

08004a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08c      	sub	sp, #48	; 0x30
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a2c:	f107 0320 	add.w	r3, r7, #32
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART5)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a46      	ldr	r2, [pc, #280]	; (8004b58 <HAL_UART_MspInit+0x134>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d145      	bne.n	8004ad0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004a44:	4b45      	ldr	r3, [pc, #276]	; (8004b5c <HAL_UART_MspInit+0x138>)
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	4a44      	ldr	r2, [pc, #272]	; (8004b5c <HAL_UART_MspInit+0x138>)
 8004a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a4e:	61d3      	str	r3, [r2, #28]
 8004a50:	4b42      	ldr	r3, [pc, #264]	; (8004b5c <HAL_UART_MspInit+0x138>)
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a5c:	4b3f      	ldr	r3, [pc, #252]	; (8004b5c <HAL_UART_MspInit+0x138>)
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	4a3e      	ldr	r2, [pc, #248]	; (8004b5c <HAL_UART_MspInit+0x138>)
 8004a62:	f043 0310 	orr.w	r3, r3, #16
 8004a66:	6193      	str	r3, [r2, #24]
 8004a68:	4b3c      	ldr	r3, [pc, #240]	; (8004b5c <HAL_UART_MspInit+0x138>)
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	f003 0310 	and.w	r3, r3, #16
 8004a70:	61bb      	str	r3, [r7, #24]
 8004a72:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a74:	4b39      	ldr	r3, [pc, #228]	; (8004b5c <HAL_UART_MspInit+0x138>)
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	4a38      	ldr	r2, [pc, #224]	; (8004b5c <HAL_UART_MspInit+0x138>)
 8004a7a:	f043 0320 	orr.w	r3, r3, #32
 8004a7e:	6193      	str	r3, [r2, #24]
 8004a80:	4b36      	ldr	r3, [pc, #216]	; (8004b5c <HAL_UART_MspInit+0x138>)
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a92:	2302      	movs	r3, #2
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a96:	2303      	movs	r3, #3
 8004a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a9a:	f107 0320 	add.w	r3, r7, #32
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	482f      	ldr	r0, [pc, #188]	; (8004b60 <HAL_UART_MspInit+0x13c>)
 8004aa2:	f000 fc4b 	bl	800533c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004aa6:	2304      	movs	r3, #4
 8004aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ab2:	f107 0320 	add.w	r3, r7, #32
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	482a      	ldr	r0, [pc, #168]	; (8004b64 <HAL_UART_MspInit+0x140>)
 8004aba:	f000 fc3f 	bl	800533c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2105      	movs	r1, #5
 8004ac2:	2035      	movs	r0, #53	; 0x35
 8004ac4:	f000 facd 	bl	8005062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004ac8:	2035      	movs	r0, #53	; 0x35
 8004aca:	f000 fae6 	bl	800509a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004ace:	e03e      	b.n	8004b4e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a24      	ldr	r2, [pc, #144]	; (8004b68 <HAL_UART_MspInit+0x144>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d139      	bne.n	8004b4e <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004ada:	4b20      	ldr	r3, [pc, #128]	; (8004b5c <HAL_UART_MspInit+0x138>)
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	4a1f      	ldr	r2, [pc, #124]	; (8004b5c <HAL_UART_MspInit+0x138>)
 8004ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ae4:	6193      	str	r3, [r2, #24]
 8004ae6:	4b1d      	ldr	r3, [pc, #116]	; (8004b5c <HAL_UART_MspInit+0x138>)
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004af2:	4b1a      	ldr	r3, [pc, #104]	; (8004b5c <HAL_UART_MspInit+0x138>)
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	4a19      	ldr	r2, [pc, #100]	; (8004b5c <HAL_UART_MspInit+0x138>)
 8004af8:	f043 0304 	orr.w	r3, r3, #4
 8004afc:	6193      	str	r3, [r2, #24]
 8004afe:	4b17      	ldr	r3, [pc, #92]	; (8004b5c <HAL_UART_MspInit+0x138>)
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b10:	2302      	movs	r3, #2
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b14:	2303      	movs	r3, #3
 8004b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b18:	f107 0320 	add.w	r3, r7, #32
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4813      	ldr	r0, [pc, #76]	; (8004b6c <HAL_UART_MspInit+0x148>)
 8004b20:	f000 fc0c 	bl	800533c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b32:	f107 0320 	add.w	r3, r7, #32
 8004b36:	4619      	mov	r1, r3
 8004b38:	480c      	ldr	r0, [pc, #48]	; (8004b6c <HAL_UART_MspInit+0x148>)
 8004b3a:	f000 fbff 	bl	800533c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2105      	movs	r1, #5
 8004b42:	2025      	movs	r0, #37	; 0x25
 8004b44:	f000 fa8d 	bl	8005062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004b48:	2025      	movs	r0, #37	; 0x25
 8004b4a:	f000 faa6 	bl	800509a <HAL_NVIC_EnableIRQ>
}
 8004b4e:	bf00      	nop
 8004b50:	3730      	adds	r7, #48	; 0x30
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40005000 	.word	0x40005000
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	40011000 	.word	0x40011000
 8004b64:	40011400 	.word	0x40011400
 8004b68:	40013800 	.word	0x40013800
 8004b6c:	40010800 	.word	0x40010800

08004b70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08c      	sub	sp, #48	; 0x30
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004b86:	4b2e      	ldr	r3, [pc, #184]	; (8004c40 <HAL_InitTick+0xd0>)
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	4a2d      	ldr	r2, [pc, #180]	; (8004c40 <HAL_InitTick+0xd0>)
 8004b8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b90:	6193      	str	r3, [r2, #24]
 8004b92:	4b2b      	ldr	r3, [pc, #172]	; (8004c40 <HAL_InitTick+0xd0>)
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b9a:	60bb      	str	r3, [r7, #8]
 8004b9c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004b9e:	f107 020c 	add.w	r2, r7, #12
 8004ba2:	f107 0310 	add.w	r3, r7, #16
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f001 fa73 	bl	8006094 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004bae:	f001 fa5d 	bl	800606c <HAL_RCC_GetPCLK2Freq>
 8004bb2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb6:	4a23      	ldr	r2, [pc, #140]	; (8004c44 <HAL_InitTick+0xd4>)
 8004bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbc:	0c9b      	lsrs	r3, r3, #18
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004bc2:	4b21      	ldr	r3, [pc, #132]	; (8004c48 <HAL_InitTick+0xd8>)
 8004bc4:	4a21      	ldr	r2, [pc, #132]	; (8004c4c <HAL_InitTick+0xdc>)
 8004bc6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004bc8:	4b1f      	ldr	r3, [pc, #124]	; (8004c48 <HAL_InitTick+0xd8>)
 8004bca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004bce:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004bd0:	4a1d      	ldr	r2, [pc, #116]	; (8004c48 <HAL_InitTick+0xd8>)
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004bd6:	4b1c      	ldr	r3, [pc, #112]	; (8004c48 <HAL_InitTick+0xd8>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bdc:	4b1a      	ldr	r3, [pc, #104]	; (8004c48 <HAL_InitTick+0xd8>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004be2:	4b19      	ldr	r3, [pc, #100]	; (8004c48 <HAL_InitTick+0xd8>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004be8:	4817      	ldr	r0, [pc, #92]	; (8004c48 <HAL_InitTick+0xd8>)
 8004bea:	f001 faa1 	bl	8006130 <HAL_TIM_Base_Init>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004bf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d11b      	bne.n	8004c34 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8004bfc:	4812      	ldr	r0, [pc, #72]	; (8004c48 <HAL_InitTick+0xd8>)
 8004bfe:	f001 faef 	bl	80061e0 <HAL_TIM_Base_Start_IT>
 8004c02:	4603      	mov	r3, r0
 8004c04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004c08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d111      	bne.n	8004c34 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004c10:	2019      	movs	r0, #25
 8004c12:	f000 fa42 	bl	800509a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b0f      	cmp	r3, #15
 8004c1a:	d808      	bhi.n	8004c2e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	2019      	movs	r0, #25
 8004c22:	f000 fa1e 	bl	8005062 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004c26:	4a0a      	ldr	r2, [pc, #40]	; (8004c50 <HAL_InitTick+0xe0>)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	e002      	b.n	8004c34 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004c34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3730      	adds	r7, #48	; 0x30
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40021000 	.word	0x40021000
 8004c44:	431bde83 	.word	0x431bde83
 8004c48:	2000157c 	.word	0x2000157c
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	20000240 	.word	0x20000240

08004c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c58:	e7fe      	b.n	8004c58 <NMI_Handler+0x4>

08004c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c5e:	e7fe      	b.n	8004c5e <HardFault_Handler+0x4>

08004c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c64:	e7fe      	b.n	8004c64 <MemManage_Handler+0x4>

08004c66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c66:	b480      	push	{r7}
 8004c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c6a:	e7fe      	b.n	8004c6a <BusFault_Handler+0x4>

08004c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c70:	e7fe      	b.n	8004c70 <UsageFault_Handler+0x4>

08004c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c72:	b480      	push	{r7}
 8004c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c76:	bf00      	nop
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr
	...

08004c80 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004c84:	4802      	ldr	r0, [pc, #8]	; (8004c90 <TIM1_UP_IRQHandler+0x10>)
 8004c86:	f001 fb05 	bl	8006294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004c8a:	bf00      	nop
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	2000157c 	.word	0x2000157c

08004c94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c98:	4802      	ldr	r0, [pc, #8]	; (8004ca4 <USART1_IRQHandler+0x10>)
 8004c9a:	f001 fdf9 	bl	8006890 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004c9e:	bf00      	nop
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000a2c 	.word	0x20000a2c

08004ca8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004cac:	4802      	ldr	r0, [pc, #8]	; (8004cb8 <UART5_IRQHandler+0x10>)
 8004cae:	f001 fdef 	bl	8006890 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004cb2:	bf00      	nop
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	200009e8 	.word	0x200009e8

08004cbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
	return 1;
 8004cc0:	2301      	movs	r3, #1
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr

08004cca <_kill>:

int _kill(int pid, int sig)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004cd4:	f004 ffc2 	bl	8009c5c <__errno>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2216      	movs	r2, #22
 8004cdc:	601a      	str	r2, [r3, #0]
	return -1;
 8004cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <_exit>:

void _exit (int status)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b082      	sub	sp, #8
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004cf2:	f04f 31ff 	mov.w	r1, #4294967295
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff ffe7 	bl	8004cca <_kill>
	while (1) {}		/* Make sure we hang here */
 8004cfc:	e7fe      	b.n	8004cfc <_exit+0x12>

08004cfe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b086      	sub	sp, #24
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	e00a      	b.n	8004d26 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004d10:	f3af 8000 	nop.w
 8004d14:	4601      	mov	r1, r0
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	60ba      	str	r2, [r7, #8]
 8004d1c:	b2ca      	uxtb	r2, r1
 8004d1e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	3301      	adds	r3, #1
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	dbf0      	blt.n	8004d10 <_read+0x12>
	}

return len;
 8004d2e:	687b      	ldr	r3, [r7, #4]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d44:	2300      	movs	r3, #0
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	e009      	b.n	8004d5e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	60ba      	str	r2, [r7, #8]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	dbf1      	blt.n	8004d4a <_write+0x12>
	}
	return len;
 8004d66:	687b      	ldr	r3, [r7, #4]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <_close>:

int _close(int file)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
	return -1;
 8004d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bc80      	pop	{r7}
 8004d84:	4770      	bx	lr

08004d86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d96:	605a      	str	r2, [r3, #4]
	return 0;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr

08004da4 <_isatty>:

int _isatty(int file)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	return 1;
 8004dac:	2301      	movs	r3, #1
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr

08004db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
	return 0;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004dd8:	4a14      	ldr	r2, [pc, #80]	; (8004e2c <_sbrk+0x5c>)
 8004dda:	4b15      	ldr	r3, [pc, #84]	; (8004e30 <_sbrk+0x60>)
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004de4:	4b13      	ldr	r3, [pc, #76]	; (8004e34 <_sbrk+0x64>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d102      	bne.n	8004df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004dec:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <_sbrk+0x64>)
 8004dee:	4a12      	ldr	r2, [pc, #72]	; (8004e38 <_sbrk+0x68>)
 8004df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004df2:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <_sbrk+0x64>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4413      	add	r3, r2
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d207      	bcs.n	8004e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e00:	f004 ff2c 	bl	8009c5c <__errno>
 8004e04:	4603      	mov	r3, r0
 8004e06:	220c      	movs	r2, #12
 8004e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e0e:	e009      	b.n	8004e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e10:	4b08      	ldr	r3, [pc, #32]	; (8004e34 <_sbrk+0x64>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e16:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <_sbrk+0x64>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	4a05      	ldr	r2, [pc, #20]	; (8004e34 <_sbrk+0x64>)
 8004e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e22:	68fb      	ldr	r3, [r7, #12]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20010000 	.word	0x20010000
 8004e30:	00000400 	.word	0x00000400
 8004e34:	200015c4 	.word	0x200015c4
 8004e38:	20009fe0 	.word	0x20009fe0

08004e3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e40:	bf00      	nop
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr

08004e48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004e48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004e4a:	e003      	b.n	8004e54 <LoopCopyDataInit>

08004e4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004e4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004e50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004e52:	3104      	adds	r1, #4

08004e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004e54:	480a      	ldr	r0, [pc, #40]	; (8004e80 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004e56:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004e58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004e5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004e5c:	d3f6      	bcc.n	8004e4c <CopyDataInit>
  ldr r2, =_sbss
 8004e5e:	4a0a      	ldr	r2, [pc, #40]	; (8004e88 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004e60:	e002      	b.n	8004e68 <LoopFillZerobss>

08004e62 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004e62:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004e64:	f842 3b04 	str.w	r3, [r2], #4

08004e68 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004e68:	4b08      	ldr	r3, [pc, #32]	; (8004e8c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004e6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004e6c:	d3f9      	bcc.n	8004e62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004e6e:	f7ff ffe5 	bl	8004e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e72:	f004 ffef 	bl	8009e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004e76:	f7fe fbe3 	bl	8003640 <main>
  bx lr
 8004e7a:	4770      	bx	lr
  ldr r3, =_sidata
 8004e7c:	0800ee28 	.word	0x0800ee28
  ldr r0, =_sdata
 8004e80:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004e84:	20000420 	.word	0x20000420
  ldr r2, =_sbss
 8004e88:	20000420 	.word	0x20000420
  ldr r3, = _ebss
 8004e8c:	20009fe0 	.word	0x20009fe0

08004e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e90:	e7fe      	b.n	8004e90 <ADC1_2_IRQHandler>
	...

08004e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e98:	4b08      	ldr	r3, [pc, #32]	; (8004ebc <HAL_Init+0x28>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a07      	ldr	r2, [pc, #28]	; (8004ebc <HAL_Init+0x28>)
 8004e9e:	f043 0310 	orr.w	r3, r3, #16
 8004ea2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ea4:	2003      	movs	r0, #3
 8004ea6:	f000 f8d1 	bl	800504c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004eaa:	2000      	movs	r0, #0
 8004eac:	f7ff fe60 	bl	8004b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004eb0:	f7ff fd90 	bl	80049d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40022000 	.word	0x40022000

08004ec0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <HAL_IncTick+0x1c>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <HAL_IncTick+0x20>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4413      	add	r3, r2
 8004ed0:	4a03      	ldr	r2, [pc, #12]	; (8004ee0 <HAL_IncTick+0x20>)
 8004ed2:	6013      	str	r3, [r2, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bc80      	pop	{r7}
 8004eda:	4770      	bx	lr
 8004edc:	20000244 	.word	0x20000244
 8004ee0:	200015c8 	.word	0x200015c8

08004ee4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ee8:	4b02      	ldr	r3, [pc, #8]	; (8004ef4 <HAL_GetTick+0x10>)
 8004eea:	681b      	ldr	r3, [r3, #0]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr
 8004ef4:	200015c8 	.word	0x200015c8

08004ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f08:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <__NVIC_SetPriorityGrouping+0x44>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f14:	4013      	ands	r3, r2
 8004f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f2a:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <__NVIC_SetPriorityGrouping+0x44>)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	60d3      	str	r3, [r2, #12]
}
 8004f30:	bf00      	nop
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bc80      	pop	{r7}
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	e000ed00 	.word	0xe000ed00

08004f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f44:	4b04      	ldr	r3, [pc, #16]	; (8004f58 <__NVIC_GetPriorityGrouping+0x18>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	0a1b      	lsrs	r3, r3, #8
 8004f4a:	f003 0307 	and.w	r3, r3, #7
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bc80      	pop	{r7}
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	e000ed00 	.word	0xe000ed00

08004f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	4603      	mov	r3, r0
 8004f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	db0b      	blt.n	8004f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	f003 021f 	and.w	r2, r3, #31
 8004f74:	4906      	ldr	r1, [pc, #24]	; (8004f90 <__NVIC_EnableIRQ+0x34>)
 8004f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr
 8004f90:	e000e100 	.word	0xe000e100

08004f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	6039      	str	r1, [r7, #0]
 8004f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	db0a      	blt.n	8004fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	490c      	ldr	r1, [pc, #48]	; (8004fe0 <__NVIC_SetPriority+0x4c>)
 8004fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb2:	0112      	lsls	r2, r2, #4
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fbc:	e00a      	b.n	8004fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	4908      	ldr	r1, [pc, #32]	; (8004fe4 <__NVIC_SetPriority+0x50>)
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	3b04      	subs	r3, #4
 8004fcc:	0112      	lsls	r2, r2, #4
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	761a      	strb	r2, [r3, #24]
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	e000e100 	.word	0xe000e100
 8004fe4:	e000ed00 	.word	0xe000ed00

08004fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b089      	sub	sp, #36	; 0x24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f1c3 0307 	rsb	r3, r3, #7
 8005002:	2b04      	cmp	r3, #4
 8005004:	bf28      	it	cs
 8005006:	2304      	movcs	r3, #4
 8005008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	3304      	adds	r3, #4
 800500e:	2b06      	cmp	r3, #6
 8005010:	d902      	bls.n	8005018 <NVIC_EncodePriority+0x30>
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	3b03      	subs	r3, #3
 8005016:	e000      	b.n	800501a <NVIC_EncodePriority+0x32>
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800501c:	f04f 32ff 	mov.w	r2, #4294967295
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	43da      	mvns	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	401a      	ands	r2, r3
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005030:	f04f 31ff 	mov.w	r1, #4294967295
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	fa01 f303 	lsl.w	r3, r1, r3
 800503a:	43d9      	mvns	r1, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005040:	4313      	orrs	r3, r2
         );
}
 8005042:	4618      	mov	r0, r3
 8005044:	3724      	adds	r7, #36	; 0x24
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr

0800504c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7ff ff4f 	bl	8004ef8 <__NVIC_SetPriorityGrouping>
}
 800505a:	bf00      	nop
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005062:	b580      	push	{r7, lr}
 8005064:	b086      	sub	sp, #24
 8005066:	af00      	add	r7, sp, #0
 8005068:	4603      	mov	r3, r0
 800506a:	60b9      	str	r1, [r7, #8]
 800506c:	607a      	str	r2, [r7, #4]
 800506e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005074:	f7ff ff64 	bl	8004f40 <__NVIC_GetPriorityGrouping>
 8005078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	6978      	ldr	r0, [r7, #20]
 8005080:	f7ff ffb2 	bl	8004fe8 <NVIC_EncodePriority>
 8005084:	4602      	mov	r2, r0
 8005086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800508a:	4611      	mov	r1, r2
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff ff81 	bl	8004f94 <__NVIC_SetPriority>
}
 8005092:	bf00      	nop
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	4603      	mov	r3, r0
 80050a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff ff57 	bl	8004f5c <__NVIC_EnableIRQ>
}
 80050ae:	bf00      	nop
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b085      	sub	sp, #20
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d008      	beq.n	80050de <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2204      	movs	r2, #4
 80050d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e020      	b.n	8005120 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 020e 	bic.w	r2, r2, #14
 80050ec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0201 	bic.w	r2, r2, #1
 80050fc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005106:	2101      	movs	r1, #1
 8005108:	fa01 f202 	lsl.w	r2, r1, r2
 800510c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800511e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr
	...

0800512c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800513e:	2b02      	cmp	r3, #2
 8005140:	d005      	beq.n	800514e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2204      	movs	r2, #4
 8005146:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	73fb      	strb	r3, [r7, #15]
 800514c:	e0d6      	b.n	80052fc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 020e 	bic.w	r2, r2, #14
 800515c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	4b64      	ldr	r3, [pc, #400]	; (8005308 <HAL_DMA_Abort_IT+0x1dc>)
 8005176:	429a      	cmp	r2, r3
 8005178:	d958      	bls.n	800522c <HAL_DMA_Abort_IT+0x100>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a63      	ldr	r2, [pc, #396]	; (800530c <HAL_DMA_Abort_IT+0x1e0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d04f      	beq.n	8005224 <HAL_DMA_Abort_IT+0xf8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a61      	ldr	r2, [pc, #388]	; (8005310 <HAL_DMA_Abort_IT+0x1e4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d048      	beq.n	8005220 <HAL_DMA_Abort_IT+0xf4>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a60      	ldr	r2, [pc, #384]	; (8005314 <HAL_DMA_Abort_IT+0x1e8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d040      	beq.n	800521a <HAL_DMA_Abort_IT+0xee>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a5e      	ldr	r2, [pc, #376]	; (8005318 <HAL_DMA_Abort_IT+0x1ec>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d038      	beq.n	8005214 <HAL_DMA_Abort_IT+0xe8>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a5d      	ldr	r2, [pc, #372]	; (800531c <HAL_DMA_Abort_IT+0x1f0>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d030      	beq.n	800520e <HAL_DMA_Abort_IT+0xe2>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a5b      	ldr	r2, [pc, #364]	; (8005320 <HAL_DMA_Abort_IT+0x1f4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d028      	beq.n	8005208 <HAL_DMA_Abort_IT+0xdc>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a53      	ldr	r2, [pc, #332]	; (8005308 <HAL_DMA_Abort_IT+0x1dc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d020      	beq.n	8005202 <HAL_DMA_Abort_IT+0xd6>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a57      	ldr	r2, [pc, #348]	; (8005324 <HAL_DMA_Abort_IT+0x1f8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d019      	beq.n	80051fe <HAL_DMA_Abort_IT+0xd2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a56      	ldr	r2, [pc, #344]	; (8005328 <HAL_DMA_Abort_IT+0x1fc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d012      	beq.n	80051fa <HAL_DMA_Abort_IT+0xce>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a54      	ldr	r2, [pc, #336]	; (800532c <HAL_DMA_Abort_IT+0x200>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00a      	beq.n	80051f4 <HAL_DMA_Abort_IT+0xc8>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a53      	ldr	r2, [pc, #332]	; (8005330 <HAL_DMA_Abort_IT+0x204>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d102      	bne.n	80051ee <HAL_DMA_Abort_IT+0xc2>
 80051e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051ec:	e01b      	b.n	8005226 <HAL_DMA_Abort_IT+0xfa>
 80051ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051f2:	e018      	b.n	8005226 <HAL_DMA_Abort_IT+0xfa>
 80051f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051f8:	e015      	b.n	8005226 <HAL_DMA_Abort_IT+0xfa>
 80051fa:	2310      	movs	r3, #16
 80051fc:	e013      	b.n	8005226 <HAL_DMA_Abort_IT+0xfa>
 80051fe:	2301      	movs	r3, #1
 8005200:	e011      	b.n	8005226 <HAL_DMA_Abort_IT+0xfa>
 8005202:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005206:	e00e      	b.n	8005226 <HAL_DMA_Abort_IT+0xfa>
 8005208:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800520c:	e00b      	b.n	8005226 <HAL_DMA_Abort_IT+0xfa>
 800520e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005212:	e008      	b.n	8005226 <HAL_DMA_Abort_IT+0xfa>
 8005214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005218:	e005      	b.n	8005226 <HAL_DMA_Abort_IT+0xfa>
 800521a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800521e:	e002      	b.n	8005226 <HAL_DMA_Abort_IT+0xfa>
 8005220:	2310      	movs	r3, #16
 8005222:	e000      	b.n	8005226 <HAL_DMA_Abort_IT+0xfa>
 8005224:	2301      	movs	r3, #1
 8005226:	4a43      	ldr	r2, [pc, #268]	; (8005334 <HAL_DMA_Abort_IT+0x208>)
 8005228:	6053      	str	r3, [r2, #4]
 800522a:	e057      	b.n	80052dc <HAL_DMA_Abort_IT+0x1b0>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a36      	ldr	r2, [pc, #216]	; (800530c <HAL_DMA_Abort_IT+0x1e0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d04f      	beq.n	80052d6 <HAL_DMA_Abort_IT+0x1aa>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a35      	ldr	r2, [pc, #212]	; (8005310 <HAL_DMA_Abort_IT+0x1e4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d048      	beq.n	80052d2 <HAL_DMA_Abort_IT+0x1a6>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a33      	ldr	r2, [pc, #204]	; (8005314 <HAL_DMA_Abort_IT+0x1e8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d040      	beq.n	80052cc <HAL_DMA_Abort_IT+0x1a0>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a32      	ldr	r2, [pc, #200]	; (8005318 <HAL_DMA_Abort_IT+0x1ec>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d038      	beq.n	80052c6 <HAL_DMA_Abort_IT+0x19a>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a30      	ldr	r2, [pc, #192]	; (800531c <HAL_DMA_Abort_IT+0x1f0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d030      	beq.n	80052c0 <HAL_DMA_Abort_IT+0x194>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a2f      	ldr	r2, [pc, #188]	; (8005320 <HAL_DMA_Abort_IT+0x1f4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d028      	beq.n	80052ba <HAL_DMA_Abort_IT+0x18e>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a26      	ldr	r2, [pc, #152]	; (8005308 <HAL_DMA_Abort_IT+0x1dc>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d020      	beq.n	80052b4 <HAL_DMA_Abort_IT+0x188>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a2b      	ldr	r2, [pc, #172]	; (8005324 <HAL_DMA_Abort_IT+0x1f8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d019      	beq.n	80052b0 <HAL_DMA_Abort_IT+0x184>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a29      	ldr	r2, [pc, #164]	; (8005328 <HAL_DMA_Abort_IT+0x1fc>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d012      	beq.n	80052ac <HAL_DMA_Abort_IT+0x180>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a28      	ldr	r2, [pc, #160]	; (800532c <HAL_DMA_Abort_IT+0x200>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00a      	beq.n	80052a6 <HAL_DMA_Abort_IT+0x17a>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a26      	ldr	r2, [pc, #152]	; (8005330 <HAL_DMA_Abort_IT+0x204>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d102      	bne.n	80052a0 <HAL_DMA_Abort_IT+0x174>
 800529a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800529e:	e01b      	b.n	80052d8 <HAL_DMA_Abort_IT+0x1ac>
 80052a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052a4:	e018      	b.n	80052d8 <HAL_DMA_Abort_IT+0x1ac>
 80052a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052aa:	e015      	b.n	80052d8 <HAL_DMA_Abort_IT+0x1ac>
 80052ac:	2310      	movs	r3, #16
 80052ae:	e013      	b.n	80052d8 <HAL_DMA_Abort_IT+0x1ac>
 80052b0:	2301      	movs	r3, #1
 80052b2:	e011      	b.n	80052d8 <HAL_DMA_Abort_IT+0x1ac>
 80052b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052b8:	e00e      	b.n	80052d8 <HAL_DMA_Abort_IT+0x1ac>
 80052ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80052be:	e00b      	b.n	80052d8 <HAL_DMA_Abort_IT+0x1ac>
 80052c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052c4:	e008      	b.n	80052d8 <HAL_DMA_Abort_IT+0x1ac>
 80052c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052ca:	e005      	b.n	80052d8 <HAL_DMA_Abort_IT+0x1ac>
 80052cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052d0:	e002      	b.n	80052d8 <HAL_DMA_Abort_IT+0x1ac>
 80052d2:	2310      	movs	r3, #16
 80052d4:	e000      	b.n	80052d8 <HAL_DMA_Abort_IT+0x1ac>
 80052d6:	2301      	movs	r3, #1
 80052d8:	4a17      	ldr	r2, [pc, #92]	; (8005338 <HAL_DMA_Abort_IT+0x20c>)
 80052da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	4798      	blx	r3
    } 
  }
  return status;
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	40020080 	.word	0x40020080
 800530c:	40020008 	.word	0x40020008
 8005310:	4002001c 	.word	0x4002001c
 8005314:	40020030 	.word	0x40020030
 8005318:	40020044 	.word	0x40020044
 800531c:	40020058 	.word	0x40020058
 8005320:	4002006c 	.word	0x4002006c
 8005324:	40020408 	.word	0x40020408
 8005328:	4002041c 	.word	0x4002041c
 800532c:	40020430 	.word	0x40020430
 8005330:	40020444 	.word	0x40020444
 8005334:	40020400 	.word	0x40020400
 8005338:	40020000 	.word	0x40020000

0800533c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800533c:	b480      	push	{r7}
 800533e:	b08b      	sub	sp, #44	; 0x2c
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005346:	2300      	movs	r3, #0
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800534a:	2300      	movs	r3, #0
 800534c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800534e:	e169      	b.n	8005624 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005350:	2201      	movs	r2, #1
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	4013      	ands	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	429a      	cmp	r2, r3
 800536a:	f040 8158 	bne.w	800561e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	4a9a      	ldr	r2, [pc, #616]	; (80055dc <HAL_GPIO_Init+0x2a0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d05e      	beq.n	8005436 <HAL_GPIO_Init+0xfa>
 8005378:	4a98      	ldr	r2, [pc, #608]	; (80055dc <HAL_GPIO_Init+0x2a0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d875      	bhi.n	800546a <HAL_GPIO_Init+0x12e>
 800537e:	4a98      	ldr	r2, [pc, #608]	; (80055e0 <HAL_GPIO_Init+0x2a4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d058      	beq.n	8005436 <HAL_GPIO_Init+0xfa>
 8005384:	4a96      	ldr	r2, [pc, #600]	; (80055e0 <HAL_GPIO_Init+0x2a4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d86f      	bhi.n	800546a <HAL_GPIO_Init+0x12e>
 800538a:	4a96      	ldr	r2, [pc, #600]	; (80055e4 <HAL_GPIO_Init+0x2a8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d052      	beq.n	8005436 <HAL_GPIO_Init+0xfa>
 8005390:	4a94      	ldr	r2, [pc, #592]	; (80055e4 <HAL_GPIO_Init+0x2a8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d869      	bhi.n	800546a <HAL_GPIO_Init+0x12e>
 8005396:	4a94      	ldr	r2, [pc, #592]	; (80055e8 <HAL_GPIO_Init+0x2ac>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d04c      	beq.n	8005436 <HAL_GPIO_Init+0xfa>
 800539c:	4a92      	ldr	r2, [pc, #584]	; (80055e8 <HAL_GPIO_Init+0x2ac>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d863      	bhi.n	800546a <HAL_GPIO_Init+0x12e>
 80053a2:	4a92      	ldr	r2, [pc, #584]	; (80055ec <HAL_GPIO_Init+0x2b0>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d046      	beq.n	8005436 <HAL_GPIO_Init+0xfa>
 80053a8:	4a90      	ldr	r2, [pc, #576]	; (80055ec <HAL_GPIO_Init+0x2b0>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d85d      	bhi.n	800546a <HAL_GPIO_Init+0x12e>
 80053ae:	2b12      	cmp	r3, #18
 80053b0:	d82a      	bhi.n	8005408 <HAL_GPIO_Init+0xcc>
 80053b2:	2b12      	cmp	r3, #18
 80053b4:	d859      	bhi.n	800546a <HAL_GPIO_Init+0x12e>
 80053b6:	a201      	add	r2, pc, #4	; (adr r2, 80053bc <HAL_GPIO_Init+0x80>)
 80053b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053bc:	08005437 	.word	0x08005437
 80053c0:	08005411 	.word	0x08005411
 80053c4:	08005423 	.word	0x08005423
 80053c8:	08005465 	.word	0x08005465
 80053cc:	0800546b 	.word	0x0800546b
 80053d0:	0800546b 	.word	0x0800546b
 80053d4:	0800546b 	.word	0x0800546b
 80053d8:	0800546b 	.word	0x0800546b
 80053dc:	0800546b 	.word	0x0800546b
 80053e0:	0800546b 	.word	0x0800546b
 80053e4:	0800546b 	.word	0x0800546b
 80053e8:	0800546b 	.word	0x0800546b
 80053ec:	0800546b 	.word	0x0800546b
 80053f0:	0800546b 	.word	0x0800546b
 80053f4:	0800546b 	.word	0x0800546b
 80053f8:	0800546b 	.word	0x0800546b
 80053fc:	0800546b 	.word	0x0800546b
 8005400:	08005419 	.word	0x08005419
 8005404:	0800542d 	.word	0x0800542d
 8005408:	4a79      	ldr	r2, [pc, #484]	; (80055f0 <HAL_GPIO_Init+0x2b4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d013      	beq.n	8005436 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800540e:	e02c      	b.n	800546a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	623b      	str	r3, [r7, #32]
          break;
 8005416:	e029      	b.n	800546c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	3304      	adds	r3, #4
 800541e:	623b      	str	r3, [r7, #32]
          break;
 8005420:	e024      	b.n	800546c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	3308      	adds	r3, #8
 8005428:	623b      	str	r3, [r7, #32]
          break;
 800542a:	e01f      	b.n	800546c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	330c      	adds	r3, #12
 8005432:	623b      	str	r3, [r7, #32]
          break;
 8005434:	e01a      	b.n	800546c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d102      	bne.n	8005444 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800543e:	2304      	movs	r3, #4
 8005440:	623b      	str	r3, [r7, #32]
          break;
 8005442:	e013      	b.n	800546c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d105      	bne.n	8005458 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800544c:	2308      	movs	r3, #8
 800544e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	611a      	str	r2, [r3, #16]
          break;
 8005456:	e009      	b.n	800546c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005458:	2308      	movs	r3, #8
 800545a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	615a      	str	r2, [r3, #20]
          break;
 8005462:	e003      	b.n	800546c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005464:	2300      	movs	r3, #0
 8005466:	623b      	str	r3, [r7, #32]
          break;
 8005468:	e000      	b.n	800546c <HAL_GPIO_Init+0x130>
          break;
 800546a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	2bff      	cmp	r3, #255	; 0xff
 8005470:	d801      	bhi.n	8005476 <HAL_GPIO_Init+0x13a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	e001      	b.n	800547a <HAL_GPIO_Init+0x13e>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3304      	adds	r3, #4
 800547a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	2bff      	cmp	r3, #255	; 0xff
 8005480:	d802      	bhi.n	8005488 <HAL_GPIO_Init+0x14c>
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	e002      	b.n	800548e <HAL_GPIO_Init+0x152>
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	3b08      	subs	r3, #8
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	210f      	movs	r1, #15
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	fa01 f303 	lsl.w	r3, r1, r3
 800549c:	43db      	mvns	r3, r3
 800549e:	401a      	ands	r2, r3
 80054a0:	6a39      	ldr	r1, [r7, #32]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	fa01 f303 	lsl.w	r3, r1, r3
 80054a8:	431a      	orrs	r2, r3
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 80b1 	beq.w	800561e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80054bc:	4b4d      	ldr	r3, [pc, #308]	; (80055f4 <HAL_GPIO_Init+0x2b8>)
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	4a4c      	ldr	r2, [pc, #304]	; (80055f4 <HAL_GPIO_Init+0x2b8>)
 80054c2:	f043 0301 	orr.w	r3, r3, #1
 80054c6:	6193      	str	r3, [r2, #24]
 80054c8:	4b4a      	ldr	r3, [pc, #296]	; (80055f4 <HAL_GPIO_Init+0x2b8>)
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	60bb      	str	r3, [r7, #8]
 80054d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80054d4:	4a48      	ldr	r2, [pc, #288]	; (80055f8 <HAL_GPIO_Init+0x2bc>)
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	089b      	lsrs	r3, r3, #2
 80054da:	3302      	adds	r3, #2
 80054dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	f003 0303 	and.w	r3, r3, #3
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	220f      	movs	r2, #15
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	43db      	mvns	r3, r3
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4013      	ands	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a40      	ldr	r2, [pc, #256]	; (80055fc <HAL_GPIO_Init+0x2c0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d013      	beq.n	8005528 <HAL_GPIO_Init+0x1ec>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a3f      	ldr	r2, [pc, #252]	; (8005600 <HAL_GPIO_Init+0x2c4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00d      	beq.n	8005524 <HAL_GPIO_Init+0x1e8>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a3e      	ldr	r2, [pc, #248]	; (8005604 <HAL_GPIO_Init+0x2c8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d007      	beq.n	8005520 <HAL_GPIO_Init+0x1e4>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a3d      	ldr	r2, [pc, #244]	; (8005608 <HAL_GPIO_Init+0x2cc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d101      	bne.n	800551c <HAL_GPIO_Init+0x1e0>
 8005518:	2303      	movs	r3, #3
 800551a:	e006      	b.n	800552a <HAL_GPIO_Init+0x1ee>
 800551c:	2304      	movs	r3, #4
 800551e:	e004      	b.n	800552a <HAL_GPIO_Init+0x1ee>
 8005520:	2302      	movs	r3, #2
 8005522:	e002      	b.n	800552a <HAL_GPIO_Init+0x1ee>
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <HAL_GPIO_Init+0x1ee>
 8005528:	2300      	movs	r3, #0
 800552a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552c:	f002 0203 	and.w	r2, r2, #3
 8005530:	0092      	lsls	r2, r2, #2
 8005532:	4093      	lsls	r3, r2
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800553a:	492f      	ldr	r1, [pc, #188]	; (80055f8 <HAL_GPIO_Init+0x2bc>)
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	089b      	lsrs	r3, r3, #2
 8005540:	3302      	adds	r3, #2
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d006      	beq.n	8005562 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005554:	4b2d      	ldr	r3, [pc, #180]	; (800560c <HAL_GPIO_Init+0x2d0>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	492c      	ldr	r1, [pc, #176]	; (800560c <HAL_GPIO_Init+0x2d0>)
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	4313      	orrs	r3, r2
 800555e:	600b      	str	r3, [r1, #0]
 8005560:	e006      	b.n	8005570 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005562:	4b2a      	ldr	r3, [pc, #168]	; (800560c <HAL_GPIO_Init+0x2d0>)
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	43db      	mvns	r3, r3
 800556a:	4928      	ldr	r1, [pc, #160]	; (800560c <HAL_GPIO_Init+0x2d0>)
 800556c:	4013      	ands	r3, r2
 800556e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d006      	beq.n	800558a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800557c:	4b23      	ldr	r3, [pc, #140]	; (800560c <HAL_GPIO_Init+0x2d0>)
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	4922      	ldr	r1, [pc, #136]	; (800560c <HAL_GPIO_Init+0x2d0>)
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	4313      	orrs	r3, r2
 8005586:	604b      	str	r3, [r1, #4]
 8005588:	e006      	b.n	8005598 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800558a:	4b20      	ldr	r3, [pc, #128]	; (800560c <HAL_GPIO_Init+0x2d0>)
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	43db      	mvns	r3, r3
 8005592:	491e      	ldr	r1, [pc, #120]	; (800560c <HAL_GPIO_Init+0x2d0>)
 8005594:	4013      	ands	r3, r2
 8005596:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d006      	beq.n	80055b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80055a4:	4b19      	ldr	r3, [pc, #100]	; (800560c <HAL_GPIO_Init+0x2d0>)
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	4918      	ldr	r1, [pc, #96]	; (800560c <HAL_GPIO_Init+0x2d0>)
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	608b      	str	r3, [r1, #8]
 80055b0:	e006      	b.n	80055c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80055b2:	4b16      	ldr	r3, [pc, #88]	; (800560c <HAL_GPIO_Init+0x2d0>)
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	43db      	mvns	r3, r3
 80055ba:	4914      	ldr	r1, [pc, #80]	; (800560c <HAL_GPIO_Init+0x2d0>)
 80055bc:	4013      	ands	r3, r2
 80055be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d021      	beq.n	8005610 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80055cc:	4b0f      	ldr	r3, [pc, #60]	; (800560c <HAL_GPIO_Init+0x2d0>)
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	490e      	ldr	r1, [pc, #56]	; (800560c <HAL_GPIO_Init+0x2d0>)
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60cb      	str	r3, [r1, #12]
 80055d8:	e021      	b.n	800561e <HAL_GPIO_Init+0x2e2>
 80055da:	bf00      	nop
 80055dc:	10320000 	.word	0x10320000
 80055e0:	10310000 	.word	0x10310000
 80055e4:	10220000 	.word	0x10220000
 80055e8:	10210000 	.word	0x10210000
 80055ec:	10120000 	.word	0x10120000
 80055f0:	10110000 	.word	0x10110000
 80055f4:	40021000 	.word	0x40021000
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40010800 	.word	0x40010800
 8005600:	40010c00 	.word	0x40010c00
 8005604:	40011000 	.word	0x40011000
 8005608:	40011400 	.word	0x40011400
 800560c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <HAL_GPIO_Init+0x304>)
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	43db      	mvns	r3, r3
 8005618:	4909      	ldr	r1, [pc, #36]	; (8005640 <HAL_GPIO_Init+0x304>)
 800561a:	4013      	ands	r3, r2
 800561c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	3301      	adds	r3, #1
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	fa22 f303 	lsr.w	r3, r2, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	f47f ae8e 	bne.w	8005350 <HAL_GPIO_Init+0x14>
  }
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop
 8005638:	372c      	adds	r7, #44	; 0x2c
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr
 8005640:	40010400 	.word	0x40010400

08005644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	807b      	strh	r3, [r7, #2]
 8005650:	4613      	mov	r3, r2
 8005652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005654:	787b      	ldrb	r3, [r7, #1]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800565a:	887a      	ldrh	r2, [r7, #2]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005660:	e003      	b.n	800566a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005662:	887b      	ldrh	r3, [r7, #2]
 8005664:	041a      	lsls	r2, r3, #16
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	611a      	str	r2, [r3, #16]
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	bc80      	pop	{r7}
 8005672:	4770      	bx	lr

08005674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e304      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 8087 	beq.w	80057a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005694:	4b92      	ldr	r3, [pc, #584]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f003 030c 	and.w	r3, r3, #12
 800569c:	2b04      	cmp	r3, #4
 800569e:	d00c      	beq.n	80056ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056a0:	4b8f      	ldr	r3, [pc, #572]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f003 030c 	and.w	r3, r3, #12
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d112      	bne.n	80056d2 <HAL_RCC_OscConfig+0x5e>
 80056ac:	4b8c      	ldr	r3, [pc, #560]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b8:	d10b      	bne.n	80056d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ba:	4b89      	ldr	r3, [pc, #548]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d06c      	beq.n	80057a0 <HAL_RCC_OscConfig+0x12c>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d168      	bne.n	80057a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e2de      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056da:	d106      	bne.n	80056ea <HAL_RCC_OscConfig+0x76>
 80056dc:	4b80      	ldr	r3, [pc, #512]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a7f      	ldr	r2, [pc, #508]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 80056e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	e02e      	b.n	8005748 <HAL_RCC_OscConfig+0xd4>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10c      	bne.n	800570c <HAL_RCC_OscConfig+0x98>
 80056f2:	4b7b      	ldr	r3, [pc, #492]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a7a      	ldr	r2, [pc, #488]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 80056f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	4b78      	ldr	r3, [pc, #480]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a77      	ldr	r2, [pc, #476]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 8005704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	e01d      	b.n	8005748 <HAL_RCC_OscConfig+0xd4>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005714:	d10c      	bne.n	8005730 <HAL_RCC_OscConfig+0xbc>
 8005716:	4b72      	ldr	r3, [pc, #456]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a71      	ldr	r2, [pc, #452]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 800571c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	4b6f      	ldr	r3, [pc, #444]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a6e      	ldr	r2, [pc, #440]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 8005728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	e00b      	b.n	8005748 <HAL_RCC_OscConfig+0xd4>
 8005730:	4b6b      	ldr	r3, [pc, #428]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a6a      	ldr	r2, [pc, #424]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 8005736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800573a:	6013      	str	r3, [r2, #0]
 800573c:	4b68      	ldr	r3, [pc, #416]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a67      	ldr	r2, [pc, #412]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 8005742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005746:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d013      	beq.n	8005778 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005750:	f7ff fbc8 	bl	8004ee4 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005758:	f7ff fbc4 	bl	8004ee4 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b64      	cmp	r3, #100	; 0x64
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e292      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800576a:	4b5d      	ldr	r3, [pc, #372]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0f0      	beq.n	8005758 <HAL_RCC_OscConfig+0xe4>
 8005776:	e014      	b.n	80057a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005778:	f7ff fbb4 	bl	8004ee4 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005780:	f7ff fbb0 	bl	8004ee4 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b64      	cmp	r3, #100	; 0x64
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e27e      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005792:	4b53      	ldr	r3, [pc, #332]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1f0      	bne.n	8005780 <HAL_RCC_OscConfig+0x10c>
 800579e:	e000      	b.n	80057a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d063      	beq.n	8005876 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057ae:	4b4c      	ldr	r3, [pc, #304]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f003 030c 	and.w	r3, r3, #12
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00b      	beq.n	80057d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80057ba:	4b49      	ldr	r3, [pc, #292]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f003 030c 	and.w	r3, r3, #12
 80057c2:	2b08      	cmp	r3, #8
 80057c4:	d11c      	bne.n	8005800 <HAL_RCC_OscConfig+0x18c>
 80057c6:	4b46      	ldr	r3, [pc, #280]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d116      	bne.n	8005800 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057d2:	4b43      	ldr	r3, [pc, #268]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d005      	beq.n	80057ea <HAL_RCC_OscConfig+0x176>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d001      	beq.n	80057ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e252      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ea:	4b3d      	ldr	r3, [pc, #244]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	4939      	ldr	r1, [pc, #228]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057fe:	e03a      	b.n	8005876 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d020      	beq.n	800584a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005808:	4b36      	ldr	r3, [pc, #216]	; (80058e4 <HAL_RCC_OscConfig+0x270>)
 800580a:	2201      	movs	r2, #1
 800580c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580e:	f7ff fb69 	bl	8004ee4 <HAL_GetTick>
 8005812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005814:	e008      	b.n	8005828 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005816:	f7ff fb65 	bl	8004ee4 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d901      	bls.n	8005828 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e233      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005828:	4b2d      	ldr	r3, [pc, #180]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0f0      	beq.n	8005816 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005834:	4b2a      	ldr	r3, [pc, #168]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	4927      	ldr	r1, [pc, #156]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 8005844:	4313      	orrs	r3, r2
 8005846:	600b      	str	r3, [r1, #0]
 8005848:	e015      	b.n	8005876 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800584a:	4b26      	ldr	r3, [pc, #152]	; (80058e4 <HAL_RCC_OscConfig+0x270>)
 800584c:	2200      	movs	r2, #0
 800584e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005850:	f7ff fb48 	bl	8004ee4 <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005858:	f7ff fb44 	bl	8004ee4 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e212      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800586a:	4b1d      	ldr	r3, [pc, #116]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f0      	bne.n	8005858 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b00      	cmp	r3, #0
 8005880:	d03a      	beq.n	80058f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d019      	beq.n	80058be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800588a:	4b17      	ldr	r3, [pc, #92]	; (80058e8 <HAL_RCC_OscConfig+0x274>)
 800588c:	2201      	movs	r2, #1
 800588e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005890:	f7ff fb28 	bl	8004ee4 <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005898:	f7ff fb24 	bl	8004ee4 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e1f2      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058aa:	4b0d      	ldr	r3, [pc, #52]	; (80058e0 <HAL_RCC_OscConfig+0x26c>)
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0f0      	beq.n	8005898 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80058b6:	2001      	movs	r0, #1
 80058b8:	f000 fc1c 	bl	80060f4 <RCC_Delay>
 80058bc:	e01c      	b.n	80058f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058be:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <HAL_RCC_OscConfig+0x274>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058c4:	f7ff fb0e 	bl	8004ee4 <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058ca:	e00f      	b.n	80058ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058cc:	f7ff fb0a 	bl	8004ee4 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d908      	bls.n	80058ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e1d8      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
 80058de:	bf00      	nop
 80058e0:	40021000 	.word	0x40021000
 80058e4:	42420000 	.word	0x42420000
 80058e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058ec:	4b9b      	ldr	r3, [pc, #620]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e9      	bne.n	80058cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 80a6 	beq.w	8005a52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005906:	2300      	movs	r3, #0
 8005908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800590a:	4b94      	ldr	r3, [pc, #592]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10d      	bne.n	8005932 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005916:	4b91      	ldr	r3, [pc, #580]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	4a90      	ldr	r2, [pc, #576]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 800591c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005920:	61d3      	str	r3, [r2, #28]
 8005922:	4b8e      	ldr	r3, [pc, #568]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800592a:	60bb      	str	r3, [r7, #8]
 800592c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800592e:	2301      	movs	r3, #1
 8005930:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005932:	4b8b      	ldr	r3, [pc, #556]	; (8005b60 <HAL_RCC_OscConfig+0x4ec>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593a:	2b00      	cmp	r3, #0
 800593c:	d118      	bne.n	8005970 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800593e:	4b88      	ldr	r3, [pc, #544]	; (8005b60 <HAL_RCC_OscConfig+0x4ec>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a87      	ldr	r2, [pc, #540]	; (8005b60 <HAL_RCC_OscConfig+0x4ec>)
 8005944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800594a:	f7ff facb 	bl	8004ee4 <HAL_GetTick>
 800594e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005950:	e008      	b.n	8005964 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005952:	f7ff fac7 	bl	8004ee4 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b64      	cmp	r3, #100	; 0x64
 800595e:	d901      	bls.n	8005964 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e195      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005964:	4b7e      	ldr	r3, [pc, #504]	; (8005b60 <HAL_RCC_OscConfig+0x4ec>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0f0      	beq.n	8005952 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d106      	bne.n	8005986 <HAL_RCC_OscConfig+0x312>
 8005978:	4b78      	ldr	r3, [pc, #480]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	4a77      	ldr	r2, [pc, #476]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 800597e:	f043 0301 	orr.w	r3, r3, #1
 8005982:	6213      	str	r3, [r2, #32]
 8005984:	e02d      	b.n	80059e2 <HAL_RCC_OscConfig+0x36e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10c      	bne.n	80059a8 <HAL_RCC_OscConfig+0x334>
 800598e:	4b73      	ldr	r3, [pc, #460]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	4a72      	ldr	r2, [pc, #456]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005994:	f023 0301 	bic.w	r3, r3, #1
 8005998:	6213      	str	r3, [r2, #32]
 800599a:	4b70      	ldr	r3, [pc, #448]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	4a6f      	ldr	r2, [pc, #444]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 80059a0:	f023 0304 	bic.w	r3, r3, #4
 80059a4:	6213      	str	r3, [r2, #32]
 80059a6:	e01c      	b.n	80059e2 <HAL_RCC_OscConfig+0x36e>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	2b05      	cmp	r3, #5
 80059ae:	d10c      	bne.n	80059ca <HAL_RCC_OscConfig+0x356>
 80059b0:	4b6a      	ldr	r3, [pc, #424]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	4a69      	ldr	r2, [pc, #420]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 80059b6:	f043 0304 	orr.w	r3, r3, #4
 80059ba:	6213      	str	r3, [r2, #32]
 80059bc:	4b67      	ldr	r3, [pc, #412]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	4a66      	ldr	r2, [pc, #408]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 80059c2:	f043 0301 	orr.w	r3, r3, #1
 80059c6:	6213      	str	r3, [r2, #32]
 80059c8:	e00b      	b.n	80059e2 <HAL_RCC_OscConfig+0x36e>
 80059ca:	4b64      	ldr	r3, [pc, #400]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	4a63      	ldr	r2, [pc, #396]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 80059d0:	f023 0301 	bic.w	r3, r3, #1
 80059d4:	6213      	str	r3, [r2, #32]
 80059d6:	4b61      	ldr	r3, [pc, #388]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	4a60      	ldr	r2, [pc, #384]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 80059dc:	f023 0304 	bic.w	r3, r3, #4
 80059e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d015      	beq.n	8005a16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ea:	f7ff fa7b 	bl	8004ee4 <HAL_GetTick>
 80059ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f0:	e00a      	b.n	8005a08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f2:	f7ff fa77 	bl	8004ee4 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e143      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a08:	4b54      	ldr	r3, [pc, #336]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0ee      	beq.n	80059f2 <HAL_RCC_OscConfig+0x37e>
 8005a14:	e014      	b.n	8005a40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a16:	f7ff fa65 	bl	8004ee4 <HAL_GetTick>
 8005a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a1c:	e00a      	b.n	8005a34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a1e:	f7ff fa61 	bl	8004ee4 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e12d      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a34:	4b49      	ldr	r3, [pc, #292]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1ee      	bne.n	8005a1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d105      	bne.n	8005a52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a46:	4b45      	ldr	r3, [pc, #276]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	4a44      	ldr	r2, [pc, #272]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a50:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 808c 	beq.w	8005b74 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005a5c:	4b3f      	ldr	r3, [pc, #252]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a68:	d10e      	bne.n	8005a88 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005a6a:	4b3c      	ldr	r3, [pc, #240]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d108      	bne.n	8005a88 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8005a76:	4b39      	ldr	r3, [pc, #228]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a82:	d101      	bne.n	8005a88 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e103      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d14e      	bne.n	8005b2e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005a90:	4b32      	ldr	r3, [pc, #200]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d009      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8005a9c:	4b2f      	ldr	r3, [pc, #188]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d001      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e0ef      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005ab0:	4b2c      	ldr	r3, [pc, #176]	; (8005b64 <HAL_RCC_OscConfig+0x4f0>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab6:	f7ff fa15 	bl	8004ee4 <HAL_GetTick>
 8005aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005abc:	e008      	b.n	8005ad0 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005abe:	f7ff fa11 	bl	8004ee4 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b64      	cmp	r3, #100	; 0x64
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e0df      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005ad0:	4b22      	ldr	r3, [pc, #136]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1f0      	bne.n	8005abe <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8005adc:	4b1f      	ldr	r3, [pc, #124]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae8:	491c      	ldr	r1, [pc, #112]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8005aee:	4b1b      	ldr	r3, [pc, #108]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	4918      	ldr	r1, [pc, #96]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8005b00:	4b18      	ldr	r3, [pc, #96]	; (8005b64 <HAL_RCC_OscConfig+0x4f0>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b06:	f7ff f9ed 	bl	8004ee4 <HAL_GetTick>
 8005b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005b0c:	e008      	b.n	8005b20 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b0e:	f7ff f9e9 	bl	8004ee4 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b64      	cmp	r3, #100	; 0x64
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e0b7      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005b20:	4b0e      	ldr	r3, [pc, #56]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0f0      	beq.n	8005b0e <HAL_RCC_OscConfig+0x49a>
 8005b2c:	e022      	b.n	8005b74 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8005b2e:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	4a0a      	ldr	r2, [pc, #40]	; (8005b5c <HAL_RCC_OscConfig+0x4e8>)
 8005b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005b3a:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <HAL_RCC_OscConfig+0x4f0>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b40:	f7ff f9d0 	bl	8004ee4 <HAL_GetTick>
 8005b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005b46:	e00f      	b.n	8005b68 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b48:	f7ff f9cc 	bl	8004ee4 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	2b64      	cmp	r3, #100	; 0x64
 8005b54:	d908      	bls.n	8005b68 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e09a      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
 8005b5a:	bf00      	nop
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	40007000 	.word	0x40007000
 8005b64:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005b68:	4b4b      	ldr	r3, [pc, #300]	; (8005c98 <HAL_RCC_OscConfig+0x624>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e9      	bne.n	8005b48 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 8088 	beq.w	8005c8e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b7e:	4b46      	ldr	r3, [pc, #280]	; (8005c98 <HAL_RCC_OscConfig+0x624>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f003 030c 	and.w	r3, r3, #12
 8005b86:	2b08      	cmp	r3, #8
 8005b88:	d068      	beq.n	8005c5c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d14d      	bne.n	8005c2e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b92:	4b42      	ldr	r3, [pc, #264]	; (8005c9c <HAL_RCC_OscConfig+0x628>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b98:	f7ff f9a4 	bl	8004ee4 <HAL_GetTick>
 8005b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba0:	f7ff f9a0 	bl	8004ee4 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e06e      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bb2:	4b39      	ldr	r3, [pc, #228]	; (8005c98 <HAL_RCC_OscConfig+0x624>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1f0      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bc6:	d10f      	bne.n	8005be8 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8005bc8:	4b33      	ldr	r3, [pc, #204]	; (8005c98 <HAL_RCC_OscConfig+0x624>)
 8005bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	4931      	ldr	r1, [pc, #196]	; (8005c98 <HAL_RCC_OscConfig+0x624>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005bd6:	4b30      	ldr	r3, [pc, #192]	; (8005c98 <HAL_RCC_OscConfig+0x624>)
 8005bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bda:	f023 020f 	bic.w	r2, r3, #15
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	492d      	ldr	r1, [pc, #180]	; (8005c98 <HAL_RCC_OscConfig+0x624>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005be8:	4b2b      	ldr	r3, [pc, #172]	; (8005c98 <HAL_RCC_OscConfig+0x624>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	4927      	ldr	r1, [pc, #156]	; (8005c98 <HAL_RCC_OscConfig+0x624>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c00:	4b26      	ldr	r3, [pc, #152]	; (8005c9c <HAL_RCC_OscConfig+0x628>)
 8005c02:	2201      	movs	r2, #1
 8005c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c06:	f7ff f96d 	bl	8004ee4 <HAL_GetTick>
 8005c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c0c:	e008      	b.n	8005c20 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c0e:	f7ff f969 	bl	8004ee4 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e037      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c20:	4b1d      	ldr	r3, [pc, #116]	; (8005c98 <HAL_RCC_OscConfig+0x624>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0f0      	beq.n	8005c0e <HAL_RCC_OscConfig+0x59a>
 8005c2c:	e02f      	b.n	8005c8e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c2e:	4b1b      	ldr	r3, [pc, #108]	; (8005c9c <HAL_RCC_OscConfig+0x628>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c34:	f7ff f956 	bl	8004ee4 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c3c:	f7ff f952 	bl	8004ee4 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e020      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c4e:	4b12      	ldr	r3, [pc, #72]	; (8005c98 <HAL_RCC_OscConfig+0x624>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f0      	bne.n	8005c3c <HAL_RCC_OscConfig+0x5c8>
 8005c5a:	e018      	b.n	8005c8e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e013      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <HAL_RCC_OscConfig+0x624>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d106      	bne.n	8005c8a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d001      	beq.n	8005c8e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	42420060 	.word	0x42420060

08005ca0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0d0      	b.n	8005e56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cb4:	4b6a      	ldr	r3, [pc, #424]	; (8005e60 <HAL_RCC_ClockConfig+0x1c0>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d910      	bls.n	8005ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cc2:	4b67      	ldr	r3, [pc, #412]	; (8005e60 <HAL_RCC_ClockConfig+0x1c0>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f023 0207 	bic.w	r2, r3, #7
 8005cca:	4965      	ldr	r1, [pc, #404]	; (8005e60 <HAL_RCC_ClockConfig+0x1c0>)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cd2:	4b63      	ldr	r3, [pc, #396]	; (8005e60 <HAL_RCC_ClockConfig+0x1c0>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d001      	beq.n	8005ce4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e0b8      	b.n	8005e56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d020      	beq.n	8005d32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d005      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cfc:	4b59      	ldr	r3, [pc, #356]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	4a58      	ldr	r2, [pc, #352]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005d02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0308 	and.w	r3, r3, #8
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d005      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d14:	4b53      	ldr	r3, [pc, #332]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	4a52      	ldr	r2, [pc, #328]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005d1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d20:	4b50      	ldr	r3, [pc, #320]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	494d      	ldr	r1, [pc, #308]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d040      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d107      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d46:	4b47      	ldr	r3, [pc, #284]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d115      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e07f      	b.n	8005e56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d107      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d5e:	4b41      	ldr	r3, [pc, #260]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d109      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e073      	b.n	8005e56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d6e:	4b3d      	ldr	r3, [pc, #244]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e06b      	b.n	8005e56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d7e:	4b39      	ldr	r3, [pc, #228]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f023 0203 	bic.w	r2, r3, #3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	4936      	ldr	r1, [pc, #216]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d90:	f7ff f8a8 	bl	8004ee4 <HAL_GetTick>
 8005d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d96:	e00a      	b.n	8005dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d98:	f7ff f8a4 	bl	8004ee4 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e053      	b.n	8005e56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dae:	4b2d      	ldr	r3, [pc, #180]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f003 020c 	and.w	r2, r3, #12
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d1eb      	bne.n	8005d98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc0:	4b27      	ldr	r3, [pc, #156]	; (8005e60 <HAL_RCC_ClockConfig+0x1c0>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0307 	and.w	r3, r3, #7
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d210      	bcs.n	8005df0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dce:	4b24      	ldr	r3, [pc, #144]	; (8005e60 <HAL_RCC_ClockConfig+0x1c0>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f023 0207 	bic.w	r2, r3, #7
 8005dd6:	4922      	ldr	r1, [pc, #136]	; (8005e60 <HAL_RCC_ClockConfig+0x1c0>)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dde:	4b20      	ldr	r3, [pc, #128]	; (8005e60 <HAL_RCC_ClockConfig+0x1c0>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d001      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e032      	b.n	8005e56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d008      	beq.n	8005e0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dfc:	4b19      	ldr	r3, [pc, #100]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	4916      	ldr	r1, [pc, #88]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d009      	beq.n	8005e2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e1a:	4b12      	ldr	r3, [pc, #72]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	490e      	ldr	r1, [pc, #56]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e2e:	f000 f821 	bl	8005e74 <HAL_RCC_GetSysClockFreq>
 8005e32:	4602      	mov	r2, r0
 8005e34:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	091b      	lsrs	r3, r3, #4
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	490a      	ldr	r1, [pc, #40]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005e40:	5ccb      	ldrb	r3, [r1, r3]
 8005e42:	fa22 f303 	lsr.w	r3, r2, r3
 8005e46:	4a09      	ldr	r2, [pc, #36]	; (8005e6c <HAL_RCC_ClockConfig+0x1cc>)
 8005e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e4a:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <HAL_RCC_ClockConfig+0x1d0>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fe fe8e 	bl	8004b70 <HAL_InitTick>

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	40022000 	.word	0x40022000
 8005e64:	40021000 	.word	0x40021000
 8005e68:	0800e908 	.word	0x0800e908
 8005e6c:	2000023c 	.word	0x2000023c
 8005e70:	20000240 	.word	0x20000240

08005e74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e78:	b099      	sub	sp, #100	; 0x64
 8005e7a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8005e7c:	4b66      	ldr	r3, [pc, #408]	; (8006018 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e7e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8005e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e84:	c407      	stmia	r4!, {r0, r1, r2}
 8005e86:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8005e88:	4b64      	ldr	r3, [pc, #400]	; (800601c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005e8a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8005e8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	657b      	str	r3, [r7, #84]	; 0x54
 8005e98:	2300      	movs	r3, #0
 8005e9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t sysclockfreq = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eac:	2300      	movs	r3, #0
 8005eae:	647b      	str	r3, [r7, #68]	; 0x44
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005eb0:	4b5b      	ldr	r3, [pc, #364]	; (8006020 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eb8:	f003 030c 	and.w	r3, r3, #12
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d002      	beq.n	8005ec6 <HAL_RCC_GetSysClockFreq+0x52>
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d003      	beq.n	8005ecc <HAL_RCC_GetSysClockFreq+0x58>
 8005ec4:	e09f      	b.n	8006006 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ec6:	4b57      	ldr	r3, [pc, #348]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8005ec8:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8005eca:	e09f      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ece:	0c9b      	lsrs	r3, r3, #18
 8005ed0:	f003 030f 	and.w	r3, r3, #15
 8005ed4:	3340      	adds	r3, #64	; 0x40
 8005ed6:	f107 0220 	add.w	r2, r7, #32
 8005eda:	4413      	add	r3, r2
 8005edc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8005ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 8084 	beq.w	8005ff6 <HAL_RCC_GetSysClockFreq+0x182>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005eee:	4b4c      	ldr	r3, [pc, #304]	; (8006020 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	3340      	adds	r3, #64	; 0x40
 8005ef8:	f107 0220 	add.w	r2, r7, #32
 8005efc:	4413      	add	r3, r2
 8005efe:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8005f02:	653b      	str	r3, [r7, #80]	; 0x50
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8005f04:	4b46      	ldr	r3, [pc, #280]	; (8006020 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d060      	beq.n	8005fd2 <HAL_RCC_GetSysClockFreq+0x15e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005f10:	4b43      	ldr	r3, [pc, #268]	; (8006020 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	091b      	lsrs	r3, r3, #4
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	64bb      	str	r3, [r7, #72]	; 0x48
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8005f1e:	4b40      	ldr	r3, [pc, #256]	; (8006020 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f22:	0a1b      	lsrs	r3, r3, #8
 8005f24:	f003 030f 	and.w	r3, r3, #15
 8005f28:	3302      	adds	r3, #2
 8005f2a:	647b      	str	r3, [r7, #68]	; 0x44
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8005f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f2e:	2200      	movs	r2, #0
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	617a      	str	r2, [r7, #20]
 8005f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f36:	2200      	movs	r2, #0
 8005f38:	61bb      	str	r3, [r7, #24]
 8005f3a:	61fa      	str	r2, [r7, #28]
 8005f3c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005f40:	4622      	mov	r2, r4
 8005f42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005f46:	4684      	mov	ip, r0
 8005f48:	fb0c f202 	mul.w	r2, ip, r2
 8005f4c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8005f50:	468c      	mov	ip, r1
 8005f52:	4618      	mov	r0, r3
 8005f54:	4621      	mov	r1, r4
 8005f56:	4603      	mov	r3, r0
 8005f58:	fb03 f30c 	mul.w	r3, r3, ip
 8005f5c:	4413      	add	r3, r2
 8005f5e:	4602      	mov	r2, r0
 8005f60:	69b9      	ldr	r1, [r7, #24]
 8005f62:	fba2 8901 	umull	r8, r9, r2, r1
 8005f66:	444b      	add	r3, r9
 8005f68:	4699      	mov	r9, r3
 8005f6a:	4b2e      	ldr	r3, [pc, #184]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8005f6c:	fb03 f209 	mul.w	r2, r3, r9
 8005f70:	2300      	movs	r3, #0
 8005f72:	fb03 f308 	mul.w	r3, r3, r8
 8005f76:	4413      	add	r3, r2
 8005f78:	4a2a      	ldr	r2, [pc, #168]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8005f7a:	fba8 ab02 	umull	sl, fp, r8, r2
 8005f7e:	445b      	add	r3, fp
 8005f80:	469b      	mov	fp, r3
 8005f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f84:	2200      	movs	r2, #0
 8005f86:	60bb      	str	r3, [r7, #8]
 8005f88:	60fa      	str	r2, [r7, #12]
 8005f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	603b      	str	r3, [r7, #0]
 8005f90:	607a      	str	r2, [r7, #4]
 8005f92:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005f96:	4622      	mov	r2, r4
 8005f98:	e9d7 8900 	ldrd	r8, r9, [r7]
 8005f9c:	4641      	mov	r1, r8
 8005f9e:	fb01 f202 	mul.w	r2, r1, r2
 8005fa2:	46cc      	mov	ip, r9
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	4603      	mov	r3, r0
 8005faa:	fb03 f30c 	mul.w	r3, r3, ip
 8005fae:	4413      	add	r3, r2
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	4641      	mov	r1, r8
 8005fb4:	fba2 5601 	umull	r5, r6, r2, r1
 8005fb8:	4433      	add	r3, r6
 8005fba:	461e      	mov	r6, r3
 8005fbc:	462a      	mov	r2, r5
 8005fbe:	4633      	mov	r3, r6
 8005fc0:	4650      	mov	r0, sl
 8005fc2:	4659      	mov	r1, fp
 8005fc4:	f7fb f934 	bl	8001230 <__aeabi_uldivmod>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4613      	mov	r3, r2
 8005fce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fd0:	e007      	b.n	8005fe2 <HAL_RCC_GetSysClockFreq+0x16e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8005fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd4:	4a13      	ldr	r2, [pc, #76]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8005fd6:	fb03 f202 	mul.w	r2, r3, r2
 8005fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8005fe2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d108      	bne.n	8006000 <HAL_RCC_GetSysClockFreq+0x18c>
        {
          pllclk = pllclk / 2;
 8005fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ff0:	085b      	lsrs	r3, r3, #1
 8005ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ff4:	e004      	b.n	8006000 <HAL_RCC_GetSysClockFreq+0x18c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff8:	4a0b      	ldr	r2, [pc, #44]	; (8006028 <HAL_RCC_GetSysClockFreq+0x1b4>)
 8005ffa:	fb02 f303 	mul.w	r3, r2, r3
 8005ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      sysclockfreq = pllclk;
 8006000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006002:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8006004:	e002      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006006:	4b09      	ldr	r3, [pc, #36]	; (800602c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006008:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 800600a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800600c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800600e:	4618      	mov	r0, r3
 8006010:	3764      	adds	r7, #100	; 0x64
 8006012:	46bd      	mov	sp, r7
 8006014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006018:	0800e8e0 	.word	0x0800e8e0
 800601c:	0800e8f0 	.word	0x0800e8f0
 8006020:	40021000 	.word	0x40021000
 8006024:	017d7840 	.word	0x017d7840
 8006028:	003d0900 	.word	0x003d0900
 800602c:	007a1200 	.word	0x007a1200

08006030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006034:	4b02      	ldr	r3, [pc, #8]	; (8006040 <HAL_RCC_GetHCLKFreq+0x10>)
 8006036:	681b      	ldr	r3, [r3, #0]
}
 8006038:	4618      	mov	r0, r3
 800603a:	46bd      	mov	sp, r7
 800603c:	bc80      	pop	{r7}
 800603e:	4770      	bx	lr
 8006040:	2000023c 	.word	0x2000023c

08006044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006048:	f7ff fff2 	bl	8006030 <HAL_RCC_GetHCLKFreq>
 800604c:	4602      	mov	r2, r0
 800604e:	4b05      	ldr	r3, [pc, #20]	; (8006064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	0a1b      	lsrs	r3, r3, #8
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	4903      	ldr	r1, [pc, #12]	; (8006068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800605a:	5ccb      	ldrb	r3, [r1, r3]
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006060:	4618      	mov	r0, r3
 8006062:	bd80      	pop	{r7, pc}
 8006064:	40021000 	.word	0x40021000
 8006068:	0800e918 	.word	0x0800e918

0800606c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006070:	f7ff ffde 	bl	8006030 <HAL_RCC_GetHCLKFreq>
 8006074:	4602      	mov	r2, r0
 8006076:	4b05      	ldr	r3, [pc, #20]	; (800608c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	0adb      	lsrs	r3, r3, #11
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	4903      	ldr	r1, [pc, #12]	; (8006090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006082:	5ccb      	ldrb	r3, [r1, r3]
 8006084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006088:	4618      	mov	r0, r3
 800608a:	bd80      	pop	{r7, pc}
 800608c:	40021000 	.word	0x40021000
 8006090:	0800e918 	.word	0x0800e918

08006094 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	220f      	movs	r2, #15
 80060a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80060a4:	4b11      	ldr	r3, [pc, #68]	; (80060ec <HAL_RCC_GetClockConfig+0x58>)
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f003 0203 	and.w	r2, r3, #3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80060b0:	4b0e      	ldr	r3, [pc, #56]	; (80060ec <HAL_RCC_GetClockConfig+0x58>)
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80060bc:	4b0b      	ldr	r3, [pc, #44]	; (80060ec <HAL_RCC_GetClockConfig+0x58>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80060c8:	4b08      	ldr	r3, [pc, #32]	; (80060ec <HAL_RCC_GetClockConfig+0x58>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	08db      	lsrs	r3, r3, #3
 80060ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060d6:	4b06      	ldr	r3, [pc, #24]	; (80060f0 <HAL_RCC_GetClockConfig+0x5c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0207 	and.w	r2, r3, #7
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bc80      	pop	{r7}
 80060ea:	4770      	bx	lr
 80060ec:	40021000 	.word	0x40021000
 80060f0:	40022000 	.word	0x40022000

080060f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <RCC_Delay+0x34>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a0a      	ldr	r2, [pc, #40]	; (800612c <RCC_Delay+0x38>)
 8006102:	fba2 2303 	umull	r2, r3, r2, r3
 8006106:	0a5b      	lsrs	r3, r3, #9
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	fb02 f303 	mul.w	r3, r2, r3
 800610e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006110:	bf00      	nop
  }
  while (Delay --);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	1e5a      	subs	r2, r3, #1
 8006116:	60fa      	str	r2, [r7, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1f9      	bne.n	8006110 <RCC_Delay+0x1c>
}
 800611c:	bf00      	nop
 800611e:	bf00      	nop
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr
 8006128:	2000023c 	.word	0x2000023c
 800612c:	10624dd3 	.word	0x10624dd3

08006130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e041      	b.n	80061c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d106      	bne.n	800615c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f839 	bl	80061ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3304      	adds	r3, #4
 800616c:	4619      	mov	r1, r3
 800616e:	4610      	mov	r0, r2
 8006170:	f000 f9bc 	bl	80064ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr

080061e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d001      	beq.n	80061f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e03f      	b.n	8006278 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1b      	ldr	r2, [pc, #108]	; (8006284 <HAL_TIM_Base_Start_IT+0xa4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d013      	beq.n	8006242 <HAL_TIM_Base_Start_IT+0x62>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006222:	d00e      	beq.n	8006242 <HAL_TIM_Base_Start_IT+0x62>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a17      	ldr	r2, [pc, #92]	; (8006288 <HAL_TIM_Base_Start_IT+0xa8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d009      	beq.n	8006242 <HAL_TIM_Base_Start_IT+0x62>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a16      	ldr	r2, [pc, #88]	; (800628c <HAL_TIM_Base_Start_IT+0xac>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d004      	beq.n	8006242 <HAL_TIM_Base_Start_IT+0x62>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a14      	ldr	r2, [pc, #80]	; (8006290 <HAL_TIM_Base_Start_IT+0xb0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d111      	bne.n	8006266 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b06      	cmp	r3, #6
 8006252:	d010      	beq.n	8006276 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f042 0201 	orr.w	r2, r2, #1
 8006262:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006264:	e007      	b.n	8006276 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0201 	orr.w	r2, r2, #1
 8006274:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	bc80      	pop	{r7}
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	40012c00 	.word	0x40012c00
 8006288:	40000400 	.word	0x40000400
 800628c:	40000800 	.word	0x40000800
 8006290:	40000c00 	.word	0x40000c00

08006294 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d122      	bne.n	80062f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d11b      	bne.n	80062f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f06f 0202 	mvn.w	r2, #2
 80062c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f8ed 	bl	80064b6 <HAL_TIM_IC_CaptureCallback>
 80062dc:	e005      	b.n	80062ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f8e0 	bl	80064a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f8ef 	bl	80064c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	f003 0304 	and.w	r3, r3, #4
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d122      	bne.n	8006344 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b04      	cmp	r3, #4
 800630a:	d11b      	bne.n	8006344 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f06f 0204 	mvn.w	r2, #4
 8006314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2202      	movs	r2, #2
 800631a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f8c3 	bl	80064b6 <HAL_TIM_IC_CaptureCallback>
 8006330:	e005      	b.n	800633e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f8b6 	bl	80064a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f8c5 	bl	80064c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b08      	cmp	r3, #8
 8006350:	d122      	bne.n	8006398 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f003 0308 	and.w	r3, r3, #8
 800635c:	2b08      	cmp	r3, #8
 800635e:	d11b      	bne.n	8006398 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0208 	mvn.w	r2, #8
 8006368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2204      	movs	r2, #4
 800636e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f899 	bl	80064b6 <HAL_TIM_IC_CaptureCallback>
 8006384:	e005      	b.n	8006392 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f88c 	bl	80064a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 f89b 	bl	80064c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f003 0310 	and.w	r3, r3, #16
 80063a2:	2b10      	cmp	r3, #16
 80063a4:	d122      	bne.n	80063ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f003 0310 	and.w	r3, r3, #16
 80063b0:	2b10      	cmp	r3, #16
 80063b2:	d11b      	bne.n	80063ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f06f 0210 	mvn.w	r2, #16
 80063bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2208      	movs	r2, #8
 80063c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f86f 	bl	80064b6 <HAL_TIM_IC_CaptureCallback>
 80063d8:	e005      	b.n	80063e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f862 	bl	80064a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f871 	bl	80064c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d10e      	bne.n	8006418 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b01      	cmp	r3, #1
 8006406:	d107      	bne.n	8006418 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f06f 0201 	mvn.w	r2, #1
 8006410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7fd fd76 	bl	8003f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006422:	2b80      	cmp	r3, #128	; 0x80
 8006424:	d10e      	bne.n	8006444 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006430:	2b80      	cmp	r3, #128	; 0x80
 8006432:	d107      	bne.n	8006444 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800643c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f8c9 	bl	80065d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644e:	2b40      	cmp	r3, #64	; 0x40
 8006450:	d10e      	bne.n	8006470 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645c:	2b40      	cmp	r3, #64	; 0x40
 800645e:	d107      	bne.n	8006470 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f835 	bl	80064da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b20      	cmp	r3, #32
 800647c:	d10e      	bne.n	800649c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f003 0320 	and.w	r3, r3, #32
 8006488:	2b20      	cmp	r3, #32
 800648a:	d107      	bne.n	800649c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f06f 0220 	mvn.w	r2, #32
 8006494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f894 	bl	80065c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800649c:	bf00      	nop
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bc80      	pop	{r7}
 80064b4:	4770      	bx	lr

080064b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bc80      	pop	{r7}
 80064c6:	4770      	bx	lr

080064c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bc80      	pop	{r7}
 80064d8:	4770      	bx	lr

080064da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr

080064ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a2d      	ldr	r2, [pc, #180]	; (80065b4 <TIM_Base_SetConfig+0xc8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d00f      	beq.n	8006524 <TIM_Base_SetConfig+0x38>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800650a:	d00b      	beq.n	8006524 <TIM_Base_SetConfig+0x38>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a2a      	ldr	r2, [pc, #168]	; (80065b8 <TIM_Base_SetConfig+0xcc>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d007      	beq.n	8006524 <TIM_Base_SetConfig+0x38>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a29      	ldr	r2, [pc, #164]	; (80065bc <TIM_Base_SetConfig+0xd0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <TIM_Base_SetConfig+0x38>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a28      	ldr	r2, [pc, #160]	; (80065c0 <TIM_Base_SetConfig+0xd4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d108      	bne.n	8006536 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a1e      	ldr	r2, [pc, #120]	; (80065b4 <TIM_Base_SetConfig+0xc8>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00f      	beq.n	800655e <TIM_Base_SetConfig+0x72>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006544:	d00b      	beq.n	800655e <TIM_Base_SetConfig+0x72>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a1b      	ldr	r2, [pc, #108]	; (80065b8 <TIM_Base_SetConfig+0xcc>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d007      	beq.n	800655e <TIM_Base_SetConfig+0x72>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a1a      	ldr	r2, [pc, #104]	; (80065bc <TIM_Base_SetConfig+0xd0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d003      	beq.n	800655e <TIM_Base_SetConfig+0x72>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a19      	ldr	r2, [pc, #100]	; (80065c0 <TIM_Base_SetConfig+0xd4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d108      	bne.n	8006570 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4313      	orrs	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a07      	ldr	r2, [pc, #28]	; (80065b4 <TIM_Base_SetConfig+0xc8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d103      	bne.n	80065a4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	691a      	ldr	r2, [r3, #16]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	615a      	str	r2, [r3, #20]
}
 80065aa:	bf00      	nop
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bc80      	pop	{r7}
 80065b2:	4770      	bx	lr
 80065b4:	40012c00 	.word	0x40012c00
 80065b8:	40000400 	.word	0x40000400
 80065bc:	40000800 	.word	0x40000800
 80065c0:	40000c00 	.word	0x40000c00

080065c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bc80      	pop	{r7}
 80065d4:	4770      	bx	lr

080065d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b083      	sub	sp, #12
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065de:	bf00      	nop
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bc80      	pop	{r7}
 80065e6:	4770      	bx	lr

080065e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e03f      	b.n	800667a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d106      	bne.n	8006614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7fe fa08 	bl	8004a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2224      	movs	r2, #36	; 0x24
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800662a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fcc1 	bl	8006fb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	691a      	ldr	r2, [r3, #16]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	695a      	ldr	r2, [r3, #20]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68da      	ldr	r2, [r3, #12]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2220      	movs	r2, #32
 800666c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b08a      	sub	sp, #40	; 0x28
 8006686:	af02      	add	r7, sp, #8
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	603b      	str	r3, [r7, #0]
 800668e:	4613      	mov	r3, r2
 8006690:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b20      	cmp	r3, #32
 80066a0:	d17c      	bne.n	800679c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <HAL_UART_Transmit+0x2c>
 80066a8:	88fb      	ldrh	r3, [r7, #6]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e075      	b.n	800679e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d101      	bne.n	80066c0 <HAL_UART_Transmit+0x3e>
 80066bc:	2302      	movs	r3, #2
 80066be:	e06e      	b.n	800679e <HAL_UART_Transmit+0x11c>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2221      	movs	r2, #33	; 0x21
 80066d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066d6:	f7fe fc05 	bl	8004ee4 <HAL_GetTick>
 80066da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	88fa      	ldrh	r2, [r7, #6]
 80066e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	88fa      	ldrh	r2, [r7, #6]
 80066e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f0:	d108      	bne.n	8006704 <HAL_UART_Transmit+0x82>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d104      	bne.n	8006704 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	61bb      	str	r3, [r7, #24]
 8006702:	e003      	b.n	800670c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006708:	2300      	movs	r3, #0
 800670a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006714:	e02a      	b.n	800676c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2200      	movs	r2, #0
 800671e:	2180      	movs	r1, #128	; 0x80
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 fa73 	bl	8006c0c <UART_WaitOnFlagUntilTimeout>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e036      	b.n	800679e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10b      	bne.n	800674e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006744:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	3302      	adds	r3, #2
 800674a:	61bb      	str	r3, [r7, #24]
 800674c:	e007      	b.n	800675e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	781a      	ldrb	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	3301      	adds	r3, #1
 800675c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006762:	b29b      	uxth	r3, r3
 8006764:	3b01      	subs	r3, #1
 8006766:	b29a      	uxth	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1cf      	bne.n	8006716 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2200      	movs	r2, #0
 800677e:	2140      	movs	r1, #64	; 0x40
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 fa43 	bl	8006c0c <UART_WaitOnFlagUntilTimeout>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e006      	b.n	800679e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2220      	movs	r2, #32
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	e000      	b.n	800679e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800679c:	2302      	movs	r3, #2
  }
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3720      	adds	r7, #32
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b085      	sub	sp, #20
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	4613      	mov	r3, r2
 80067b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b20      	cmp	r3, #32
 80067be:	d130      	bne.n	8006822 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <HAL_UART_Transmit_IT+0x26>
 80067c6:	88fb      	ldrh	r3, [r7, #6]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e029      	b.n	8006824 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d101      	bne.n	80067de <HAL_UART_Transmit_IT+0x38>
 80067da:	2302      	movs	r3, #2
 80067dc:	e022      	b.n	8006824 <HAL_UART_Transmit_IT+0x7e>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	88fa      	ldrh	r2, [r7, #6]
 80067f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	88fa      	ldrh	r2, [r7, #6]
 80067f6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2221      	movs	r2, #33	; 0x21
 8006802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68da      	ldr	r2, [r3, #12]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800681c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	e000      	b.n	8006824 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006822:	2302      	movs	r3, #2
  }
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	bc80      	pop	{r7}
 800682c:	4770      	bx	lr

0800682e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	60f8      	str	r0, [r7, #12]
 8006836:	60b9      	str	r1, [r7, #8]
 8006838:	4613      	mov	r3, r2
 800683a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b20      	cmp	r3, #32
 8006846:	d11d      	bne.n	8006884 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <HAL_UART_Receive_IT+0x26>
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e016      	b.n	8006886 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800685e:	2b01      	cmp	r3, #1
 8006860:	d101      	bne.n	8006866 <HAL_UART_Receive_IT+0x38>
 8006862:	2302      	movs	r3, #2
 8006864:	e00f      	b.n	8006886 <HAL_UART_Receive_IT+0x58>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006874:	88fb      	ldrh	r3, [r7, #6]
 8006876:	461a      	mov	r2, r3
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 fa10 	bl	8006ca0 <UART_Start_Receive_IT>
 8006880:	4603      	mov	r3, r0
 8006882:	e000      	b.n	8006886 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006884:	2302      	movs	r3, #2
  }
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
	...

08006890 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08a      	sub	sp, #40	; 0x28
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10d      	bne.n	80068e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	f003 0320 	and.w	r3, r3, #32
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d008      	beq.n	80068e2 <HAL_UART_IRQHandler+0x52>
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	f003 0320 	and.w	r3, r3, #32
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fac0 	bl	8006e60 <UART_Receive_IT>
      return;
 80068e0:	e17b      	b.n	8006bda <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 80b1 	beq.w	8006a4c <HAL_UART_IRQHandler+0x1bc>
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d105      	bne.n	8006900 <HAL_UART_IRQHandler+0x70>
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 80a6 	beq.w	8006a4c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <HAL_UART_IRQHandler+0x90>
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006910:	2b00      	cmp	r3, #0
 8006912:	d005      	beq.n	8006920 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006918:	f043 0201 	orr.w	r2, r3, #1
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	f003 0304 	and.w	r3, r3, #4
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <HAL_UART_IRQHandler+0xb0>
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d005      	beq.n	8006940 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006938:	f043 0202 	orr.w	r2, r3, #2
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <HAL_UART_IRQHandler+0xd0>
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	d005      	beq.n	8006960 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006958:	f043 0204 	orr.w	r2, r3, #4
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	f003 0308 	and.w	r3, r3, #8
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00f      	beq.n	800698a <HAL_UART_IRQHandler+0xfa>
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	f003 0320 	and.w	r3, r3, #32
 8006970:	2b00      	cmp	r3, #0
 8006972:	d104      	bne.n	800697e <HAL_UART_IRQHandler+0xee>
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d005      	beq.n	800698a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006982:	f043 0208 	orr.w	r2, r3, #8
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 811e 	beq.w	8006bd0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b00      	cmp	r3, #0
 800699c:	d007      	beq.n	80069ae <HAL_UART_IRQHandler+0x11e>
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fa59 	bl	8006e60 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	bf14      	ite	ne
 80069bc:	2301      	movne	r3, #1
 80069be:	2300      	moveq	r3, #0
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	f003 0308 	and.w	r3, r3, #8
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d102      	bne.n	80069d6 <HAL_UART_IRQHandler+0x146>
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d031      	beq.n	8006a3a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f99b 	bl	8006d12 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d023      	beq.n	8006a32 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	695a      	ldr	r2, [r3, #20]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069f8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d013      	beq.n	8006a2a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a06:	4a76      	ldr	r2, [pc, #472]	; (8006be0 <HAL_UART_IRQHandler+0x350>)
 8006a08:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fe fb8c 	bl	800512c <HAL_DMA_Abort_IT>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d016      	beq.n	8006a48 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a24:	4610      	mov	r0, r2
 8006a26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a28:	e00e      	b.n	8006a48 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f8da 	bl	8006be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a30:	e00a      	b.n	8006a48 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f8d6 	bl	8006be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a38:	e006      	b.n	8006a48 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f8d2 	bl	8006be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a46:	e0c3      	b.n	8006bd0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a48:	bf00      	nop
    return;
 8006a4a:	e0c1      	b.n	8006bd0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	f040 80a1 	bne.w	8006b98 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	f003 0310 	and.w	r3, r3, #16
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 809b 	beq.w	8006b98 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f003 0310 	and.w	r3, r3, #16
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 8095 	beq.w	8006b98 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	60fb      	str	r3, [r7, #12]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d04e      	beq.n	8006b30 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006a9c:	8a3b      	ldrh	r3, [r7, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 8098 	beq.w	8006bd4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006aa8:	8a3a      	ldrh	r2, [r7, #16]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	f080 8092 	bcs.w	8006bd4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	8a3a      	ldrh	r2, [r7, #16]
 8006ab4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	2b20      	cmp	r3, #32
 8006abe:	d02b      	beq.n	8006b18 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ace:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	695a      	ldr	r2, [r3, #20]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0201 	bic.w	r2, r2, #1
 8006ade:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	695a      	ldr	r2, [r3, #20]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aee:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0210 	bic.w	r2, r2, #16
 8006b0c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fe facf 	bl	80050b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f864 	bl	8006bf6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006b2e:	e051      	b.n	8006bd4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d047      	beq.n	8006bd8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006b48:	8a7b      	ldrh	r3, [r7, #18]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d044      	beq.n	8006bd8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68da      	ldr	r2, [r3, #12]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b5c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	695a      	ldr	r2, [r3, #20]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 0201 	bic.w	r2, r2, #1
 8006b6c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 0210 	bic.w	r2, r2, #16
 8006b8a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b8c:	8a7b      	ldrh	r3, [r7, #18]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f830 	bl	8006bf6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006b96:	e01f      	b.n	8006bd8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d008      	beq.n	8006bb4 <HAL_UART_IRQHandler+0x324>
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f8f0 	bl	8006d92 <UART_Transmit_IT>
    return;
 8006bb2:	e012      	b.n	8006bda <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00d      	beq.n	8006bda <HAL_UART_IRQHandler+0x34a>
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d008      	beq.n	8006bda <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f931 	bl	8006e30 <UART_EndTransmit_IT>
    return;
 8006bce:	e004      	b.n	8006bda <HAL_UART_IRQHandler+0x34a>
    return;
 8006bd0:	bf00      	nop
 8006bd2:	e002      	b.n	8006bda <HAL_UART_IRQHandler+0x34a>
      return;
 8006bd4:	bf00      	nop
 8006bd6:	e000      	b.n	8006bda <HAL_UART_IRQHandler+0x34a>
      return;
 8006bd8:	bf00      	nop
  }
}
 8006bda:	3728      	adds	r7, #40	; 0x28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	08006d6b 	.word	0x08006d6b

08006be4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bc80      	pop	{r7}
 8006bf4:	4770      	bx	lr

08006bf6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c02:	bf00      	nop
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr

08006c0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	603b      	str	r3, [r7, #0]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c1c:	e02c      	b.n	8006c78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c24:	d028      	beq.n	8006c78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d007      	beq.n	8006c3c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c2c:	f7fe f95a 	bl	8004ee4 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d21d      	bcs.n	8006c78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68da      	ldr	r2, [r3, #12]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	695a      	ldr	r2, [r3, #20]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f022 0201 	bic.w	r2, r2, #1
 8006c5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e00f      	b.n	8006c98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	4013      	ands	r3, r2
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	bf0c      	ite	eq
 8006c88:	2301      	moveq	r3, #1
 8006c8a:	2300      	movne	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	461a      	mov	r2, r3
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d0c3      	beq.n	8006c1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	88fa      	ldrh	r2, [r7, #6]
 8006cb8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	88fa      	ldrh	r2, [r7, #6]
 8006cbe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2222      	movs	r2, #34	; 0x22
 8006cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ce4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	695a      	ldr	r2, [r3, #20]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f042 0201 	orr.w	r2, r2, #1
 8006cf4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68da      	ldr	r2, [r3, #12]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f042 0220 	orr.w	r2, r2, #32
 8006d04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bc80      	pop	{r7}
 8006d10:	4770      	bx	lr

08006d12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b083      	sub	sp, #12
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68da      	ldr	r2, [r3, #12]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d28:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	695a      	ldr	r2, [r3, #20]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0201 	bic.w	r2, r2, #1
 8006d38:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d107      	bne.n	8006d52 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68da      	ldr	r2, [r3, #12]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 0210 	bic.w	r2, r2, #16
 8006d50:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2220      	movs	r2, #32
 8006d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bc80      	pop	{r7}
 8006d68:	4770      	bx	lr

08006d6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f7ff ff2d 	bl	8006be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d8a:	bf00      	nop
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b085      	sub	sp, #20
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b21      	cmp	r3, #33	; 0x21
 8006da4:	d13e      	bne.n	8006e24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dae:	d114      	bne.n	8006dda <UART_Transmit_IT+0x48>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d110      	bne.n	8006dda <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dcc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	1c9a      	adds	r2, r3, #2
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	621a      	str	r2, [r3, #32]
 8006dd8:	e008      	b.n	8006dec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	1c59      	adds	r1, r3, #1
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	6211      	str	r1, [r2, #32]
 8006de4:	781a      	ldrb	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	3b01      	subs	r3, #1
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10f      	bne.n	8006e20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e20:	2300      	movs	r3, #0
 8006e22:	e000      	b.n	8006e26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e24:	2302      	movs	r3, #2
  }
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bc80      	pop	{r7}
 8006e2e:	4770      	bx	lr

08006e30 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e46:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7fc fef3 	bl	8003c3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b22      	cmp	r3, #34	; 0x22
 8006e72:	f040 8099 	bne.w	8006fa8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e7e:	d117      	bne.n	8006eb0 <UART_Receive_IT+0x50>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d113      	bne.n	8006eb0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e90:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	1c9a      	adds	r2, r3, #2
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	629a      	str	r2, [r3, #40]	; 0x28
 8006eae:	e026      	b.n	8006efe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ec2:	d007      	beq.n	8006ed4 <UART_Receive_IT+0x74>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <UART_Receive_IT+0x82>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d106      	bne.n	8006ee2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	e008      	b.n	8006ef4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef8:	1c5a      	adds	r2, r3, #1
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d148      	bne.n	8006fa4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 0220 	bic.w	r2, r2, #32
 8006f20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68da      	ldr	r2, [r3, #12]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	695a      	ldr	r2, [r3, #20]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0201 	bic.w	r2, r2, #1
 8006f40:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2220      	movs	r2, #32
 8006f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d123      	bne.n	8006f9a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68da      	ldr	r2, [r3, #12]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0210 	bic.w	r2, r2, #16
 8006f66:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0310 	and.w	r3, r3, #16
 8006f72:	2b10      	cmp	r3, #16
 8006f74:	d10a      	bne.n	8006f8c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f76:	2300      	movs	r3, #0
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	60fb      	str	r3, [r7, #12]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7ff fe2f 	bl	8006bf6 <HAL_UARTEx_RxEventCallback>
 8006f98:	e002      	b.n	8006fa0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7fc fe1a 	bl	8003bd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	e002      	b.n	8006faa <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e000      	b.n	8006faa <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006fa8:	2302      	movs	r3, #2
  }
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689a      	ldr	r2, [r3, #8]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006fee:	f023 030c 	bic.w	r3, r3, #12
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	6812      	ldr	r2, [r2, #0]
 8006ff6:	68b9      	ldr	r1, [r7, #8]
 8006ff8:	430b      	orrs	r3, r1
 8006ffa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	699a      	ldr	r2, [r3, #24]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a2c      	ldr	r2, [pc, #176]	; (80070c8 <UART_SetConfig+0x114>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d103      	bne.n	8007024 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800701c:	f7ff f826 	bl	800606c <HAL_RCC_GetPCLK2Freq>
 8007020:	60f8      	str	r0, [r7, #12]
 8007022:	e002      	b.n	800702a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007024:	f7ff f80e 	bl	8006044 <HAL_RCC_GetPCLK1Freq>
 8007028:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4613      	mov	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	009a      	lsls	r2, r3, #2
 8007034:	441a      	add	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007040:	4a22      	ldr	r2, [pc, #136]	; (80070cc <UART_SetConfig+0x118>)
 8007042:	fba2 2303 	umull	r2, r3, r2, r3
 8007046:	095b      	lsrs	r3, r3, #5
 8007048:	0119      	lsls	r1, r3, #4
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	4613      	mov	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	009a      	lsls	r2, r3, #2
 8007054:	441a      	add	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007060:	4b1a      	ldr	r3, [pc, #104]	; (80070cc <UART_SetConfig+0x118>)
 8007062:	fba3 0302 	umull	r0, r3, r3, r2
 8007066:	095b      	lsrs	r3, r3, #5
 8007068:	2064      	movs	r0, #100	; 0x64
 800706a:	fb00 f303 	mul.w	r3, r0, r3
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	011b      	lsls	r3, r3, #4
 8007072:	3332      	adds	r3, #50	; 0x32
 8007074:	4a15      	ldr	r2, [pc, #84]	; (80070cc <UART_SetConfig+0x118>)
 8007076:	fba2 2303 	umull	r2, r3, r2, r3
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007080:	4419      	add	r1, r3
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	4613      	mov	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	009a      	lsls	r2, r3, #2
 800708c:	441a      	add	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	fbb2 f2f3 	udiv	r2, r2, r3
 8007098:	4b0c      	ldr	r3, [pc, #48]	; (80070cc <UART_SetConfig+0x118>)
 800709a:	fba3 0302 	umull	r0, r3, r3, r2
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	2064      	movs	r0, #100	; 0x64
 80070a2:	fb00 f303 	mul.w	r3, r0, r3
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	3332      	adds	r3, #50	; 0x32
 80070ac:	4a07      	ldr	r2, [pc, #28]	; (80070cc <UART_SetConfig+0x118>)
 80070ae:	fba2 2303 	umull	r2, r3, r2, r3
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	f003 020f 	and.w	r2, r3, #15
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	440a      	add	r2, r1
 80070be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80070c0:	bf00      	nop
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	40013800 	.word	0x40013800
 80070cc:	51eb851f 	.word	0x51eb851f

080070d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4603      	mov	r3, r0
 80070d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80070da:	2300      	movs	r3, #0
 80070dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80070de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070e2:	2b84      	cmp	r3, #132	; 0x84
 80070e4:	d005      	beq.n	80070f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80070e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	4413      	add	r3, r2
 80070ee:	3303      	adds	r3, #3
 80070f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80070f2:	68fb      	ldr	r3, [r7, #12]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bc80      	pop	{r7}
 80070fc:	4770      	bx	lr

080070fe <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007104:	f3ef 8305 	mrs	r3, IPSR
 8007108:	607b      	str	r3, [r7, #4]
  return(result);
 800710a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800710c:	2b00      	cmp	r3, #0
 800710e:	bf14      	ite	ne
 8007110:	2301      	movne	r3, #1
 8007112:	2300      	moveq	r3, #0
 8007114:	b2db      	uxtb	r3, r3
}
 8007116:	4618      	mov	r0, r3
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	bc80      	pop	{r7}
 800711e:	4770      	bx	lr

08007120 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007124:	f001 fb6e 	bl	8008804 <vTaskStartScheduler>
  
  return osOK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	bd80      	pop	{r7, pc}

0800712e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800712e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007130:	b089      	sub	sp, #36	; 0x24
 8007132:	af04      	add	r7, sp, #16
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d020      	beq.n	8007182 <osThreadCreate+0x54>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d01c      	beq.n	8007182 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685c      	ldr	r4, [r3, #4]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681d      	ldr	r5, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691e      	ldr	r6, [r3, #16]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff ffb8 	bl	80070d0 <makeFreeRtosPriority>
 8007160:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800716a:	9202      	str	r2, [sp, #8]
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	9100      	str	r1, [sp, #0]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	4632      	mov	r2, r6
 8007174:	4629      	mov	r1, r5
 8007176:	4620      	mov	r0, r4
 8007178:	f001 f96f 	bl	800845a <xTaskCreateStatic>
 800717c:	4603      	mov	r3, r0
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	e01c      	b.n	80071bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685c      	ldr	r4, [r3, #4]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800718e:	b29e      	uxth	r6, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007196:	4618      	mov	r0, r3
 8007198:	f7ff ff9a 	bl	80070d0 <makeFreeRtosPriority>
 800719c:	4602      	mov	r2, r0
 800719e:	f107 030c 	add.w	r3, r7, #12
 80071a2:	9301      	str	r3, [sp, #4]
 80071a4:	9200      	str	r2, [sp, #0]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	4632      	mov	r2, r6
 80071aa:	4629      	mov	r1, r5
 80071ac:	4620      	mov	r0, r4
 80071ae:	f001 f9b0 	bl	8008512 <xTaskCreate>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d001      	beq.n	80071bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80071b8:	2300      	movs	r3, #0
 80071ba:	e000      	b.n	80071be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80071bc:	68fb      	ldr	r3, [r7, #12]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b084      	sub	sp, #16
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <osDelay+0x16>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	e000      	b.n	80071de <osDelay+0x18>
 80071dc:	2301      	movs	r3, #1
 80071de:	4618      	mov	r0, r3
 80071e0:	f001 fadc 	bl	800879c <vTaskDelay>
  
  return osOK;
 80071e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b086      	sub	sp, #24
 80071f2:	af02      	add	r7, sp, #8
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00f      	beq.n	8007220 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d10a      	bne.n	800721c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2203      	movs	r2, #3
 800720c:	9200      	str	r2, [sp, #0]
 800720e:	2200      	movs	r2, #0
 8007210:	2100      	movs	r1, #0
 8007212:	2001      	movs	r0, #1
 8007214:	f000 fa96 	bl	8007744 <xQueueGenericCreateStatic>
 8007218:	4603      	mov	r3, r0
 800721a:	e016      	b.n	800724a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800721c:	2300      	movs	r3, #0
 800721e:	e014      	b.n	800724a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d110      	bne.n	8007248 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007226:	2203      	movs	r2, #3
 8007228:	2100      	movs	r1, #0
 800722a:	2001      	movs	r0, #1
 800722c:	f000 fb01 	bl	8007832 <xQueueGenericCreate>
 8007230:	60f8      	str	r0, [r7, #12]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <osSemaphoreCreate+0x56>
 8007238:	2300      	movs	r3, #0
 800723a:	2200      	movs	r2, #0
 800723c:	2100      	movs	r1, #0
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 fb54 	bl	80078ec <xQueueGenericSend>
      return sema;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	e000      	b.n	800724a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007248:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800725e:	2300      	movs	r3, #0
 8007260:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007268:	2380      	movs	r3, #128	; 0x80
 800726a:	e03a      	b.n	80072e2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800726c:	2300      	movs	r3, #0
 800726e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007276:	d103      	bne.n	8007280 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007278:	f04f 33ff 	mov.w	r3, #4294967295
 800727c:	60fb      	str	r3, [r7, #12]
 800727e:	e009      	b.n	8007294 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d006      	beq.n	8007294 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <osSemaphoreWait+0x40>
      ticks = 1;
 8007290:	2301      	movs	r3, #1
 8007292:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007294:	f7ff ff33 	bl	80070fe <inHandlerMode>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d017      	beq.n	80072ce <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800729e:	f107 0308 	add.w	r3, r7, #8
 80072a2:	461a      	mov	r2, r3
 80072a4:	2100      	movs	r1, #0
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 ff30 	bl	800810c <xQueueReceiveFromISR>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d001      	beq.n	80072b6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80072b2:	23ff      	movs	r3, #255	; 0xff
 80072b4:	e015      	b.n	80072e2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d011      	beq.n	80072e0 <osSemaphoreWait+0x8c>
 80072bc:	4b0b      	ldr	r3, [pc, #44]	; (80072ec <osSemaphoreWait+0x98>)
 80072be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	e008      	b.n	80072e0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80072ce:	68f9      	ldr	r1, [r7, #12]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fe0f 	bl	8007ef4 <xQueueSemaphoreTake>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d001      	beq.n	80072e0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80072dc:	23ff      	movs	r3, #255	; 0xff
 80072de:	e000      	b.n	80072e2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	e000ed04 	.word	0xe000ed04

080072f0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80072fc:	2300      	movs	r3, #0
 80072fe:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007300:	f7ff fefd 	bl	80070fe <inHandlerMode>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d016      	beq.n	8007338 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800730a:	f107 0308 	add.w	r3, r7, #8
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fc81 	bl	8007c18 <xQueueGiveFromISR>
 8007316:	4603      	mov	r3, r0
 8007318:	2b01      	cmp	r3, #1
 800731a:	d001      	beq.n	8007320 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800731c:	23ff      	movs	r3, #255	; 0xff
 800731e:	e017      	b.n	8007350 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d013      	beq.n	800734e <osSemaphoreRelease+0x5e>
 8007326:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <osSemaphoreRelease+0x68>)
 8007328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	e00a      	b.n	800734e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007338:	2300      	movs	r3, #0
 800733a:	2200      	movs	r2, #0
 800733c:	2100      	movs	r1, #0
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fad4 	bl	80078ec <xQueueGenericSend>
 8007344:	4603      	mov	r3, r0
 8007346:	2b01      	cmp	r3, #1
 8007348:	d001      	beq.n	800734e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800734a:	23ff      	movs	r3, #255	; 0xff
 800734c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800734e:	68fb      	ldr	r3, [r7, #12]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800735c:	b590      	push	{r4, r7, lr}
 800735e:	b085      	sub	sp, #20
 8007360:	af02      	add	r7, sp, #8
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d011      	beq.n	8007392 <osMessageCreate+0x36>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00d      	beq.n	8007392 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6859      	ldr	r1, [r3, #4]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689a      	ldr	r2, [r3, #8]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	2400      	movs	r4, #0
 8007388:	9400      	str	r4, [sp, #0]
 800738a:	f000 f9db 	bl	8007744 <xQueueGenericCreateStatic>
 800738e:	4603      	mov	r3, r0
 8007390:	e008      	b.n	80073a4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	4619      	mov	r1, r3
 800739e:	f000 fa48 	bl	8007832 <xQueueGenericCreate>
 80073a2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd90      	pop	{r4, r7, pc}

080073ac <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80073b8:	2300      	movs	r3, #0
 80073ba:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <osMessagePut+0x1e>
    ticks = 1;
 80073c6:	2301      	movs	r3, #1
 80073c8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80073ca:	f7ff fe98 	bl	80070fe <inHandlerMode>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d018      	beq.n	8007406 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80073d4:	f107 0210 	add.w	r2, r7, #16
 80073d8:	f107 0108 	add.w	r1, r7, #8
 80073dc:	2300      	movs	r3, #0
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f000 fb82 	bl	8007ae8 <xQueueGenericSendFromISR>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d001      	beq.n	80073ee <osMessagePut+0x42>
      return osErrorOS;
 80073ea:	23ff      	movs	r3, #255	; 0xff
 80073ec:	e018      	b.n	8007420 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d014      	beq.n	800741e <osMessagePut+0x72>
 80073f4:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <osMessagePut+0x7c>)
 80073f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	e00b      	b.n	800741e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007406:	f107 0108 	add.w	r1, r7, #8
 800740a:	2300      	movs	r3, #0
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f000 fa6c 	bl	80078ec <xQueueGenericSend>
 8007414:	4603      	mov	r3, r0
 8007416:	2b01      	cmp	r3, #1
 8007418:	d001      	beq.n	800741e <osMessagePut+0x72>
      return osErrorOS;
 800741a:	23ff      	movs	r3, #255	; 0xff
 800741c:	e000      	b.n	8007420 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	e000ed04 	.word	0xe000ed04

0800742c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800742c:	b590      	push	{r4, r7, lr}
 800742e:	b08b      	sub	sp, #44	; 0x2c
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800743c:	2300      	movs	r3, #0
 800743e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10a      	bne.n	800745c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007446:	2380      	movs	r3, #128	; 0x80
 8007448:	617b      	str	r3, [r7, #20]
    return event;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	461c      	mov	r4, r3
 800744e:	f107 0314 	add.w	r3, r7, #20
 8007452:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007456:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800745a:	e054      	b.n	8007506 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800745c:	2300      	movs	r3, #0
 800745e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800746a:	d103      	bne.n	8007474 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800746c:	f04f 33ff 	mov.w	r3, #4294967295
 8007470:	627b      	str	r3, [r7, #36]	; 0x24
 8007472:	e009      	b.n	8007488 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d006      	beq.n	8007488 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <osMessageGet+0x5c>
      ticks = 1;
 8007484:	2301      	movs	r3, #1
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007488:	f7ff fe39 	bl	80070fe <inHandlerMode>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d01c      	beq.n	80074cc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007492:	f107 0220 	add.w	r2, r7, #32
 8007496:	f107 0314 	add.w	r3, r7, #20
 800749a:	3304      	adds	r3, #4
 800749c:	4619      	mov	r1, r3
 800749e:	68b8      	ldr	r0, [r7, #8]
 80074a0:	f000 fe34 	bl	800810c <xQueueReceiveFromISR>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d102      	bne.n	80074b0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80074aa:	2310      	movs	r3, #16
 80074ac:	617b      	str	r3, [r7, #20]
 80074ae:	e001      	b.n	80074b4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d01d      	beq.n	80074f6 <osMessageGet+0xca>
 80074ba:	4b15      	ldr	r3, [pc, #84]	; (8007510 <osMessageGet+0xe4>)
 80074bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	e014      	b.n	80074f6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80074cc:	f107 0314 	add.w	r3, r7, #20
 80074d0:	3304      	adds	r3, #4
 80074d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074d4:	4619      	mov	r1, r3
 80074d6:	68b8      	ldr	r0, [r7, #8]
 80074d8:	f000 fc2c 	bl	8007d34 <xQueueReceive>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d102      	bne.n	80074e8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80074e2:	2310      	movs	r3, #16
 80074e4:	617b      	str	r3, [r7, #20]
 80074e6:	e006      	b.n	80074f6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <osMessageGet+0xc6>
 80074ee:	2300      	movs	r3, #0
 80074f0:	e000      	b.n	80074f4 <osMessageGet+0xc8>
 80074f2:	2340      	movs	r3, #64	; 0x40
 80074f4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	461c      	mov	r4, r3
 80074fa:	f107 0314 	add.w	r3, r7, #20
 80074fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007502:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	372c      	adds	r7, #44	; 0x2c
 800750a:	46bd      	mov	sp, r7
 800750c:	bd90      	pop	{r4, r7, pc}
 800750e:	bf00      	nop
 8007510:	e000ed04 	.word	0xe000ed04

08007514 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f103 0208 	add.w	r2, r3, #8
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f04f 32ff 	mov.w	r2, #4294967295
 800752c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f103 0208 	add.w	r2, r3, #8
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f103 0208 	add.w	r2, r3, #8
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	4770      	bx	lr

08007552 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	bc80      	pop	{r7}
 8007568:	4770      	bx	lr

0800756a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800756a:	b480      	push	{r7}
 800756c:	b085      	sub	sp, #20
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	601a      	str	r2, [r3, #0]
}
 80075a6:	bf00      	nop
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bc80      	pop	{r7}
 80075ae:	4770      	bx	lr

080075b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c6:	d103      	bne.n	80075d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	60fb      	str	r3, [r7, #12]
 80075ce:	e00c      	b.n	80075ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3308      	adds	r3, #8
 80075d4:	60fb      	str	r3, [r7, #12]
 80075d6:	e002      	b.n	80075de <vListInsert+0x2e>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	60fb      	str	r3, [r7, #12]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d2f6      	bcs.n	80075d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	1c5a      	adds	r2, r3, #1
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	601a      	str	r2, [r3, #0]
}
 8007616:	bf00      	nop
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	bc80      	pop	{r7}
 800761e:	4770      	bx	lr

08007620 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	6892      	ldr	r2, [r2, #8]
 8007636:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	6852      	ldr	r2, [r2, #4]
 8007640:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	429a      	cmp	r2, r3
 800764a:	d103      	bne.n	8007654 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	1e5a      	subs	r2, r3, #1
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	bc80      	pop	{r7}
 8007670:	4770      	bx	lr
	...

08007674 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10a      	bne.n	800769e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800769a:	bf00      	nop
 800769c:	e7fe      	b.n	800769c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800769e:	f002 f805 	bl	80096ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076aa:	68f9      	ldr	r1, [r7, #12]
 80076ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076ae:	fb01 f303 	mul.w	r3, r1, r3
 80076b2:	441a      	add	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ce:	3b01      	subs	r3, #1
 80076d0:	68f9      	ldr	r1, [r7, #12]
 80076d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076d4:	fb01 f303 	mul.w	r3, r1, r3
 80076d8:	441a      	add	r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	22ff      	movs	r2, #255	; 0xff
 80076e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	22ff      	movs	r2, #255	; 0xff
 80076ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d114      	bne.n	800771e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d01a      	beq.n	8007732 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3310      	adds	r3, #16
 8007700:	4618      	mov	r0, r3
 8007702:	f001 fad7 	bl	8008cb4 <xTaskRemoveFromEventList>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d012      	beq.n	8007732 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800770c:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <xQueueGenericReset+0xcc>)
 800770e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	e009      	b.n	8007732 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3310      	adds	r3, #16
 8007722:	4618      	mov	r0, r3
 8007724:	f7ff fef6 	bl	8007514 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3324      	adds	r3, #36	; 0x24
 800772c:	4618      	mov	r0, r3
 800772e:	f7ff fef1 	bl	8007514 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007732:	f001 ffeb 	bl	800970c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007736:	2301      	movs	r3, #1
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	e000ed04 	.word	0xe000ed04

08007744 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08e      	sub	sp, #56	; 0x38
 8007748:	af02      	add	r7, sp, #8
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10a      	bne.n	800776e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800776a:	bf00      	nop
 800776c:	e7fe      	b.n	800776c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10a      	bne.n	800778a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007786:	bf00      	nop
 8007788:	e7fe      	b.n	8007788 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <xQueueGenericCreateStatic+0x52>
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <xQueueGenericCreateStatic+0x56>
 8007796:	2301      	movs	r3, #1
 8007798:	e000      	b.n	800779c <xQueueGenericCreateStatic+0x58>
 800779a:	2300      	movs	r3, #0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10a      	bne.n	80077b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	623b      	str	r3, [r7, #32]
}
 80077b2:	bf00      	nop
 80077b4:	e7fe      	b.n	80077b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d102      	bne.n	80077c2 <xQueueGenericCreateStatic+0x7e>
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <xQueueGenericCreateStatic+0x82>
 80077c2:	2301      	movs	r3, #1
 80077c4:	e000      	b.n	80077c8 <xQueueGenericCreateStatic+0x84>
 80077c6:	2300      	movs	r3, #0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	61fb      	str	r3, [r7, #28]
}
 80077de:	bf00      	nop
 80077e0:	e7fe      	b.n	80077e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80077e2:	2348      	movs	r3, #72	; 0x48
 80077e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2b48      	cmp	r3, #72	; 0x48
 80077ea:	d00a      	beq.n	8007802 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	61bb      	str	r3, [r7, #24]
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00d      	beq.n	8007828 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800780c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007814:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	4613      	mov	r3, r2
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	68b9      	ldr	r1, [r7, #8]
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 f843 	bl	80078ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800782a:	4618      	mov	r0, r3
 800782c:	3730      	adds	r7, #48	; 0x30
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007832:	b580      	push	{r7, lr}
 8007834:	b08a      	sub	sp, #40	; 0x28
 8007836:	af02      	add	r7, sp, #8
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	4613      	mov	r3, r2
 800783e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10a      	bne.n	800785c <xQueueGenericCreate+0x2a>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	613b      	str	r3, [r7, #16]
}
 8007858:	bf00      	nop
 800785a:	e7fe      	b.n	800785a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d102      	bne.n	8007868 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007862:	2300      	movs	r3, #0
 8007864:	61fb      	str	r3, [r7, #28]
 8007866:	e004      	b.n	8007872 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	fb02 f303 	mul.w	r3, r2, r3
 8007870:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	3348      	adds	r3, #72	; 0x48
 8007876:	4618      	mov	r0, r3
 8007878:	f002 f818 	bl	80098ac <pvPortMalloc>
 800787c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00f      	beq.n	80078a4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	3348      	adds	r3, #72	; 0x48
 8007888:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007892:	79fa      	ldrb	r2, [r7, #7]
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	4613      	mov	r3, r2
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	68b9      	ldr	r1, [r7, #8]
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 f805 	bl	80078ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80078a4:	69bb      	ldr	r3, [r7, #24]
	}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3720      	adds	r7, #32
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b084      	sub	sp, #16
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	60f8      	str	r0, [r7, #12]
 80078b6:	60b9      	str	r1, [r7, #8]
 80078b8:	607a      	str	r2, [r7, #4]
 80078ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d103      	bne.n	80078ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	e002      	b.n	80078d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80078dc:	2101      	movs	r1, #1
 80078de:	69b8      	ldr	r0, [r7, #24]
 80078e0:	f7ff fec8 	bl	8007674 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80078e4:	bf00      	nop
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08e      	sub	sp, #56	; 0x38
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
 80078f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80078fa:	2300      	movs	r3, #0
 80078fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10a      	bne.n	800791e <xQueueGenericSend+0x32>
	__asm volatile
 8007908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800791a:	bf00      	nop
 800791c:	e7fe      	b.n	800791c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d103      	bne.n	800792c <xQueueGenericSend+0x40>
 8007924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <xQueueGenericSend+0x44>
 800792c:	2301      	movs	r3, #1
 800792e:	e000      	b.n	8007932 <xQueueGenericSend+0x46>
 8007930:	2300      	movs	r3, #0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10a      	bne.n	800794c <xQueueGenericSend+0x60>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007948:	bf00      	nop
 800794a:	e7fe      	b.n	800794a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b02      	cmp	r3, #2
 8007950:	d103      	bne.n	800795a <xQueueGenericSend+0x6e>
 8007952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007956:	2b01      	cmp	r3, #1
 8007958:	d101      	bne.n	800795e <xQueueGenericSend+0x72>
 800795a:	2301      	movs	r3, #1
 800795c:	e000      	b.n	8007960 <xQueueGenericSend+0x74>
 800795e:	2300      	movs	r3, #0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10a      	bne.n	800797a <xQueueGenericSend+0x8e>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	623b      	str	r3, [r7, #32]
}
 8007976:	bf00      	nop
 8007978:	e7fe      	b.n	8007978 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800797a:	f001 fb5f 	bl	800903c <xTaskGetSchedulerState>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d102      	bne.n	800798a <xQueueGenericSend+0x9e>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <xQueueGenericSend+0xa2>
 800798a:	2301      	movs	r3, #1
 800798c:	e000      	b.n	8007990 <xQueueGenericSend+0xa4>
 800798e:	2300      	movs	r3, #0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10a      	bne.n	80079aa <xQueueGenericSend+0xbe>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	61fb      	str	r3, [r7, #28]
}
 80079a6:	bf00      	nop
 80079a8:	e7fe      	b.n	80079a8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079aa:	f001 fe7f 	bl	80096ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d302      	bcc.n	80079c0 <xQueueGenericSend+0xd4>
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d129      	bne.n	8007a14 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	68b9      	ldr	r1, [r7, #8]
 80079c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079c6:	f000 fc38 	bl	800823a <prvCopyDataToQueue>
 80079ca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d010      	beq.n	80079f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d6:	3324      	adds	r3, #36	; 0x24
 80079d8:	4618      	mov	r0, r3
 80079da:	f001 f96b 	bl	8008cb4 <xTaskRemoveFromEventList>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d013      	beq.n	8007a0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80079e4:	4b3f      	ldr	r3, [pc, #252]	; (8007ae4 <xQueueGenericSend+0x1f8>)
 80079e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	e00a      	b.n	8007a0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80079f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d007      	beq.n	8007a0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80079fc:	4b39      	ldr	r3, [pc, #228]	; (8007ae4 <xQueueGenericSend+0x1f8>)
 80079fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a0c:	f001 fe7e 	bl	800970c <vPortExitCritical>
				return pdPASS;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e063      	b.n	8007adc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d103      	bne.n	8007a22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a1a:	f001 fe77 	bl	800970c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	e05c      	b.n	8007adc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d106      	bne.n	8007a36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a28:	f107 0314 	add.w	r3, r7, #20
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f001 f9a3 	bl	8008d78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a32:	2301      	movs	r3, #1
 8007a34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a36:	f001 fe69 	bl	800970c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a3a:	f000 ff4d 	bl	80088d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a3e:	f001 fe35 	bl	80096ac <vPortEnterCritical>
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a48:	b25b      	sxtb	r3, r3
 8007a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4e:	d103      	bne.n	8007a58 <xQueueGenericSend+0x16c>
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a5e:	b25b      	sxtb	r3, r3
 8007a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a64:	d103      	bne.n	8007a6e <xQueueGenericSend+0x182>
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a6e:	f001 fe4d 	bl	800970c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a72:	1d3a      	adds	r2, r7, #4
 8007a74:	f107 0314 	add.w	r3, r7, #20
 8007a78:	4611      	mov	r1, r2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f001 f992 	bl	8008da4 <xTaskCheckForTimeOut>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d124      	bne.n	8007ad0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007a86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a88:	f000 fccf 	bl	800842a <prvIsQueueFull>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d018      	beq.n	8007ac4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	3310      	adds	r3, #16
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	4611      	mov	r1, r2
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f001 f8e6 	bl	8008c6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007aa2:	f000 fc5a 	bl	800835a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007aa6:	f000 ff25 	bl	80088f4 <xTaskResumeAll>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f47f af7c 	bne.w	80079aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007ab2:	4b0c      	ldr	r3, [pc, #48]	; (8007ae4 <xQueueGenericSend+0x1f8>)
 8007ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	e772      	b.n	80079aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ac6:	f000 fc48 	bl	800835a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007aca:	f000 ff13 	bl	80088f4 <xTaskResumeAll>
 8007ace:	e76c      	b.n	80079aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ad2:	f000 fc42 	bl	800835a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ad6:	f000 ff0d 	bl	80088f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ada:	2300      	movs	r3, #0
		}
	}
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3738      	adds	r7, #56	; 0x38
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	e000ed04 	.word	0xe000ed04

08007ae8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b08e      	sub	sp, #56	; 0x38
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10a      	bne.n	8007b16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b12:	bf00      	nop
 8007b14:	e7fe      	b.n	8007b14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d103      	bne.n	8007b24 <xQueueGenericSendFromISR+0x3c>
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <xQueueGenericSendFromISR+0x40>
 8007b24:	2301      	movs	r3, #1
 8007b26:	e000      	b.n	8007b2a <xQueueGenericSendFromISR+0x42>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10a      	bne.n	8007b44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	623b      	str	r3, [r7, #32]
}
 8007b40:	bf00      	nop
 8007b42:	e7fe      	b.n	8007b42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d103      	bne.n	8007b52 <xQueueGenericSendFromISR+0x6a>
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d101      	bne.n	8007b56 <xQueueGenericSendFromISR+0x6e>
 8007b52:	2301      	movs	r3, #1
 8007b54:	e000      	b.n	8007b58 <xQueueGenericSendFromISR+0x70>
 8007b56:	2300      	movs	r3, #0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	61fb      	str	r3, [r7, #28]
}
 8007b6e:	bf00      	nop
 8007b70:	e7fe      	b.n	8007b70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b72:	f001 fe5d 	bl	8009830 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007b76:	f3ef 8211 	mrs	r2, BASEPRI
 8007b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	61ba      	str	r2, [r7, #24]
 8007b8c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007b8e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d302      	bcc.n	8007ba4 <xQueueGenericSendFromISR+0xbc>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d12c      	bne.n	8007bfe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bb4:	f000 fb41 	bl	800823a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bb8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc0:	d112      	bne.n	8007be8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d016      	beq.n	8007bf8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bcc:	3324      	adds	r3, #36	; 0x24
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f001 f870 	bl	8008cb4 <xTaskRemoveFromEventList>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00e      	beq.n	8007bf8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00b      	beq.n	8007bf8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	e007      	b.n	8007bf8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007be8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007bec:	3301      	adds	r3, #1
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	b25a      	sxtb	r2, r3
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007bfc:	e001      	b.n	8007c02 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	637b      	str	r3, [r7, #52]	; 0x34
 8007c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c04:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3738      	adds	r7, #56	; 0x38
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b08e      	sub	sp, #56	; 0x38
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10a      	bne.n	8007c42 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	623b      	str	r3, [r7, #32]
}
 8007c3e:	bf00      	nop
 8007c40:	e7fe      	b.n	8007c40 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00a      	beq.n	8007c60 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	61fb      	str	r3, [r7, #28]
}
 8007c5c:	bf00      	nop
 8007c5e:	e7fe      	b.n	8007c5e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8007c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d103      	bne.n	8007c70 <xQueueGiveFromISR+0x58>
 8007c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <xQueueGiveFromISR+0x5c>
 8007c70:	2301      	movs	r3, #1
 8007c72:	e000      	b.n	8007c76 <xQueueGiveFromISR+0x5e>
 8007c74:	2300      	movs	r3, #0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10a      	bne.n	8007c90 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	61bb      	str	r3, [r7, #24]
}
 8007c8c:	bf00      	nop
 8007c8e:	e7fe      	b.n	8007c8e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c90:	f001 fdce 	bl	8009830 <vPortValidateInterruptPriority>
	__asm volatile
 8007c94:	f3ef 8211 	mrs	r2, BASEPRI
 8007c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	617a      	str	r2, [r7, #20]
 8007caa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007cac:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d22b      	bcs.n	8007d18 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ccc:	1c5a      	adds	r2, r3, #1
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007cd2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cda:	d112      	bne.n	8007d02 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d016      	beq.n	8007d12 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	3324      	adds	r3, #36	; 0x24
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 ffe3 	bl	8008cb4 <xTaskRemoveFromEventList>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00e      	beq.n	8007d12 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00b      	beq.n	8007d12 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	e007      	b.n	8007d12 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d06:	3301      	adds	r3, #1
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	b25a      	sxtb	r2, r3
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007d12:	2301      	movs	r3, #1
 8007d14:	637b      	str	r3, [r7, #52]	; 0x34
 8007d16:	e001      	b.n	8007d1c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f383 8811 	msr	BASEPRI, r3
}
 8007d26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3738      	adds	r7, #56	; 0x38
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
	...

08007d34 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b08c      	sub	sp, #48	; 0x30
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d40:	2300      	movs	r3, #0
 8007d42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10a      	bne.n	8007d64 <xQueueReceive+0x30>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	623b      	str	r3, [r7, #32]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d103      	bne.n	8007d72 <xQueueReceive+0x3e>
 8007d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <xQueueReceive+0x42>
 8007d72:	2301      	movs	r3, #1
 8007d74:	e000      	b.n	8007d78 <xQueueReceive+0x44>
 8007d76:	2300      	movs	r3, #0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10a      	bne.n	8007d92 <xQueueReceive+0x5e>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	61fb      	str	r3, [r7, #28]
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d92:	f001 f953 	bl	800903c <xTaskGetSchedulerState>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d102      	bne.n	8007da2 <xQueueReceive+0x6e>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <xQueueReceive+0x72>
 8007da2:	2301      	movs	r3, #1
 8007da4:	e000      	b.n	8007da8 <xQueueReceive+0x74>
 8007da6:	2300      	movs	r3, #0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10a      	bne.n	8007dc2 <xQueueReceive+0x8e>
	__asm volatile
 8007dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	61bb      	str	r3, [r7, #24]
}
 8007dbe:	bf00      	nop
 8007dc0:	e7fe      	b.n	8007dc0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dc2:	f001 fc73 	bl	80096ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d01f      	beq.n	8007e12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007dd2:	68b9      	ldr	r1, [r7, #8]
 8007dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dd6:	f000 fa9a 	bl	800830e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	1e5a      	subs	r2, r3, #1
 8007dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00f      	beq.n	8007e0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	3310      	adds	r3, #16
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 ff60 	bl	8008cb4 <xTaskRemoveFromEventList>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d007      	beq.n	8007e0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007dfa:	4b3d      	ldr	r3, [pc, #244]	; (8007ef0 <xQueueReceive+0x1bc>)
 8007dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e00:	601a      	str	r2, [r3, #0]
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e0a:	f001 fc7f 	bl	800970c <vPortExitCritical>
				return pdPASS;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e069      	b.n	8007ee6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d103      	bne.n	8007e20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e18:	f001 fc78 	bl	800970c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	e062      	b.n	8007ee6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d106      	bne.n	8007e34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e26:	f107 0310 	add.w	r3, r7, #16
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 ffa4 	bl	8008d78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e30:	2301      	movs	r3, #1
 8007e32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e34:	f001 fc6a 	bl	800970c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e38:	f000 fd4e 	bl	80088d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e3c:	f001 fc36 	bl	80096ac <vPortEnterCritical>
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e46:	b25b      	sxtb	r3, r3
 8007e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4c:	d103      	bne.n	8007e56 <xQueueReceive+0x122>
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e5c:	b25b      	sxtb	r3, r3
 8007e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e62:	d103      	bne.n	8007e6c <xQueueReceive+0x138>
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e6c:	f001 fc4e 	bl	800970c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e70:	1d3a      	adds	r2, r7, #4
 8007e72:	f107 0310 	add.w	r3, r7, #16
 8007e76:	4611      	mov	r1, r2
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 ff93 	bl	8008da4 <xTaskCheckForTimeOut>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d123      	bne.n	8007ecc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e86:	f000 faba 	bl	80083fe <prvIsQueueEmpty>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d017      	beq.n	8007ec0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	3324      	adds	r3, #36	; 0x24
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	4611      	mov	r1, r2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 fee7 	bl	8008c6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ea0:	f000 fa5b 	bl	800835a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ea4:	f000 fd26 	bl	80088f4 <xTaskResumeAll>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d189      	bne.n	8007dc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007eae:	4b10      	ldr	r3, [pc, #64]	; (8007ef0 <xQueueReceive+0x1bc>)
 8007eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	e780      	b.n	8007dc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ec2:	f000 fa4a 	bl	800835a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ec6:	f000 fd15 	bl	80088f4 <xTaskResumeAll>
 8007eca:	e77a      	b.n	8007dc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ece:	f000 fa44 	bl	800835a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ed2:	f000 fd0f 	bl	80088f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ed8:	f000 fa91 	bl	80083fe <prvIsQueueEmpty>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f43f af6f 	beq.w	8007dc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ee4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3730      	adds	r7, #48	; 0x30
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	e000ed04 	.word	0xe000ed04

08007ef4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08e      	sub	sp, #56	; 0x38
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007efe:	2300      	movs	r3, #0
 8007f00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007f06:	2300      	movs	r3, #0
 8007f08:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10a      	bne.n	8007f26 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	623b      	str	r3, [r7, #32]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00a      	beq.n	8007f44 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	61fb      	str	r3, [r7, #28]
}
 8007f40:	bf00      	nop
 8007f42:	e7fe      	b.n	8007f42 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f44:	f001 f87a 	bl	800903c <xTaskGetSchedulerState>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d102      	bne.n	8007f54 <xQueueSemaphoreTake+0x60>
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d101      	bne.n	8007f58 <xQueueSemaphoreTake+0x64>
 8007f54:	2301      	movs	r3, #1
 8007f56:	e000      	b.n	8007f5a <xQueueSemaphoreTake+0x66>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10a      	bne.n	8007f74 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	61bb      	str	r3, [r7, #24]
}
 8007f70:	bf00      	nop
 8007f72:	e7fe      	b.n	8007f72 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f74:	f001 fb9a 	bl	80096ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d024      	beq.n	8007fce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f86:	1e5a      	subs	r2, r3, #1
 8007f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d104      	bne.n	8007f9e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007f94:	f001 fa1c 	bl	80093d0 <pvTaskIncrementMutexHeldCount>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00f      	beq.n	8007fc6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa8:	3310      	adds	r3, #16
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 fe82 	bl	8008cb4 <xTaskRemoveFromEventList>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d007      	beq.n	8007fc6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007fb6:	4b54      	ldr	r3, [pc, #336]	; (8008108 <xQueueSemaphoreTake+0x214>)
 8007fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007fc6:	f001 fba1 	bl	800970c <vPortExitCritical>
				return pdPASS;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e097      	b.n	80080fe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d111      	bne.n	8007ff8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00a      	beq.n	8007ff0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	617b      	str	r3, [r7, #20]
}
 8007fec:	bf00      	nop
 8007fee:	e7fe      	b.n	8007fee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007ff0:	f001 fb8c 	bl	800970c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	e082      	b.n	80080fe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d106      	bne.n	800800c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ffe:	f107 030c 	add.w	r3, r7, #12
 8008002:	4618      	mov	r0, r3
 8008004:	f000 feb8 	bl	8008d78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008008:	2301      	movs	r3, #1
 800800a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800800c:	f001 fb7e 	bl	800970c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008010:	f000 fc62 	bl	80088d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008014:	f001 fb4a 	bl	80096ac <vPortEnterCritical>
 8008018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800801e:	b25b      	sxtb	r3, r3
 8008020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008024:	d103      	bne.n	800802e <xQueueSemaphoreTake+0x13a>
 8008026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800802e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008034:	b25b      	sxtb	r3, r3
 8008036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803a:	d103      	bne.n	8008044 <xQueueSemaphoreTake+0x150>
 800803c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008044:	f001 fb62 	bl	800970c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008048:	463a      	mov	r2, r7
 800804a:	f107 030c 	add.w	r3, r7, #12
 800804e:	4611      	mov	r1, r2
 8008050:	4618      	mov	r0, r3
 8008052:	f000 fea7 	bl	8008da4 <xTaskCheckForTimeOut>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d132      	bne.n	80080c2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800805c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800805e:	f000 f9ce 	bl	80083fe <prvIsQueueEmpty>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d026      	beq.n	80080b6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d109      	bne.n	8008084 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008070:	f001 fb1c 	bl	80096ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	4618      	mov	r0, r3
 800807a:	f000 fffd 	bl	8009078 <xTaskPriorityInherit>
 800807e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008080:	f001 fb44 	bl	800970c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008086:	3324      	adds	r3, #36	; 0x24
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	4611      	mov	r1, r2
 800808c:	4618      	mov	r0, r3
 800808e:	f000 fded 	bl	8008c6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008092:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008094:	f000 f961 	bl	800835a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008098:	f000 fc2c 	bl	80088f4 <xTaskResumeAll>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f47f af68 	bne.w	8007f74 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80080a4:	4b18      	ldr	r3, [pc, #96]	; (8008108 <xQueueSemaphoreTake+0x214>)
 80080a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	e75e      	b.n	8007f74 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80080b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080b8:	f000 f94f 	bl	800835a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080bc:	f000 fc1a 	bl	80088f4 <xTaskResumeAll>
 80080c0:	e758      	b.n	8007f74 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80080c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080c4:	f000 f949 	bl	800835a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080c8:	f000 fc14 	bl	80088f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080ce:	f000 f996 	bl	80083fe <prvIsQueueEmpty>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f43f af4d 	beq.w	8007f74 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00d      	beq.n	80080fc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80080e0:	f001 fae4 	bl	80096ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80080e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080e6:	f000 f891 	bl	800820c <prvGetDisinheritPriorityAfterTimeout>
 80080ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80080ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080f2:	4618      	mov	r0, r3
 80080f4:	f001 f8cc 	bl	8009290 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80080f8:	f001 fb08 	bl	800970c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80080fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3738      	adds	r7, #56	; 0x38
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	e000ed04 	.word	0xe000ed04

0800810c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08e      	sub	sp, #56	; 0x38
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10a      	bne.n	8008138 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	623b      	str	r3, [r7, #32]
}
 8008134:	bf00      	nop
 8008136:	e7fe      	b.n	8008136 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d103      	bne.n	8008146 <xQueueReceiveFromISR+0x3a>
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <xQueueReceiveFromISR+0x3e>
 8008146:	2301      	movs	r3, #1
 8008148:	e000      	b.n	800814c <xQueueReceiveFromISR+0x40>
 800814a:	2300      	movs	r3, #0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10a      	bne.n	8008166 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	61fb      	str	r3, [r7, #28]
}
 8008162:	bf00      	nop
 8008164:	e7fe      	b.n	8008164 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008166:	f001 fb63 	bl	8009830 <vPortValidateInterruptPriority>
	__asm volatile
 800816a:	f3ef 8211 	mrs	r2, BASEPRI
 800816e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	61ba      	str	r2, [r7, #24]
 8008180:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008182:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008184:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800818c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818e:	2b00      	cmp	r3, #0
 8008190:	d02f      	beq.n	80081f2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800819c:	68b9      	ldr	r1, [r7, #8]
 800819e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081a0:	f000 f8b5 	bl	800830e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80081a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a6:	1e5a      	subs	r2, r3, #1
 80081a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80081ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b4:	d112      	bne.n	80081dc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d016      	beq.n	80081ec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c0:	3310      	adds	r3, #16
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 fd76 	bl	8008cb4 <xTaskRemoveFromEventList>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00e      	beq.n	80081ec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00b      	beq.n	80081ec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	e007      	b.n	80081ec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80081dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081e0:	3301      	adds	r3, #1
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	b25a      	sxtb	r2, r3
 80081e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80081ec:	2301      	movs	r3, #1
 80081ee:	637b      	str	r3, [r7, #52]	; 0x34
 80081f0:	e001      	b.n	80081f6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80081f2:	2300      	movs	r3, #0
 80081f4:	637b      	str	r3, [r7, #52]	; 0x34
 80081f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f383 8811 	msr	BASEPRI, r3
}
 8008200:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008204:	4618      	mov	r0, r3
 8008206:	3738      	adds	r7, #56	; 0x38
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	2b00      	cmp	r3, #0
 800821a:	d006      	beq.n	800822a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f1c3 0307 	rsb	r3, r3, #7
 8008226:	60fb      	str	r3, [r7, #12]
 8008228:	e001      	b.n	800822e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800822a:	2300      	movs	r3, #0
 800822c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800822e:	68fb      	ldr	r3, [r7, #12]
	}
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	bc80      	pop	{r7}
 8008238:	4770      	bx	lr

0800823a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b086      	sub	sp, #24
 800823e:	af00      	add	r7, sp, #0
 8008240:	60f8      	str	r0, [r7, #12]
 8008242:	60b9      	str	r1, [r7, #8]
 8008244:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008246:	2300      	movs	r3, #0
 8008248:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10d      	bne.n	8008274 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d14d      	bne.n	80082fc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	4618      	mov	r0, r3
 8008266:	f000 ff8d 	bl	8009184 <xTaskPriorityDisinherit>
 800826a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	605a      	str	r2, [r3, #4]
 8008272:	e043      	b.n	80082fc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d119      	bne.n	80082ae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6898      	ldr	r0, [r3, #8]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	461a      	mov	r2, r3
 8008284:	68b9      	ldr	r1, [r7, #8]
 8008286:	f001 fe1d 	bl	8009ec4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	689a      	ldr	r2, [r3, #8]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008292:	441a      	add	r2, r3
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	689a      	ldr	r2, [r3, #8]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d32b      	bcc.n	80082fc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	609a      	str	r2, [r3, #8]
 80082ac:	e026      	b.n	80082fc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	68d8      	ldr	r0, [r3, #12]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b6:	461a      	mov	r2, r3
 80082b8:	68b9      	ldr	r1, [r7, #8]
 80082ba:	f001 fe03 	bl	8009ec4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	68da      	ldr	r2, [r3, #12]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c6:	425b      	negs	r3, r3
 80082c8:	441a      	add	r2, r3
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	68da      	ldr	r2, [r3, #12]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d207      	bcs.n	80082ea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e2:	425b      	negs	r3, r3
 80082e4:	441a      	add	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d105      	bne.n	80082fc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d002      	beq.n	80082fc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	3b01      	subs	r3, #1
 80082fa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	1c5a      	adds	r2, r3, #1
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008304:	697b      	ldr	r3, [r7, #20]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3718      	adds	r7, #24
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b082      	sub	sp, #8
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831c:	2b00      	cmp	r3, #0
 800831e:	d018      	beq.n	8008352 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68da      	ldr	r2, [r3, #12]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008328:	441a      	add	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	429a      	cmp	r2, r3
 8008338:	d303      	bcc.n	8008342 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68d9      	ldr	r1, [r3, #12]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834a:	461a      	mov	r2, r3
 800834c:	6838      	ldr	r0, [r7, #0]
 800834e:	f001 fdb9 	bl	8009ec4 <memcpy>
	}
}
 8008352:	bf00      	nop
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008362:	f001 f9a3 	bl	80096ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800836c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800836e:	e011      	b.n	8008394 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008374:	2b00      	cmp	r3, #0
 8008376:	d012      	beq.n	800839e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3324      	adds	r3, #36	; 0x24
 800837c:	4618      	mov	r0, r3
 800837e:	f000 fc99 	bl	8008cb4 <xTaskRemoveFromEventList>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008388:	f000 fd6e 	bl	8008e68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	3b01      	subs	r3, #1
 8008390:	b2db      	uxtb	r3, r3
 8008392:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008398:	2b00      	cmp	r3, #0
 800839a:	dce9      	bgt.n	8008370 <prvUnlockQueue+0x16>
 800839c:	e000      	b.n	80083a0 <prvUnlockQueue+0x46>
					break;
 800839e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	22ff      	movs	r2, #255	; 0xff
 80083a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80083a8:	f001 f9b0 	bl	800970c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80083ac:	f001 f97e 	bl	80096ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083b6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083b8:	e011      	b.n	80083de <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d012      	beq.n	80083e8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	3310      	adds	r3, #16
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 fc74 	bl	8008cb4 <xTaskRemoveFromEventList>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80083d2:	f000 fd49 	bl	8008e68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	3b01      	subs	r3, #1
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	dce9      	bgt.n	80083ba <prvUnlockQueue+0x60>
 80083e6:	e000      	b.n	80083ea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80083e8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	22ff      	movs	r2, #255	; 0xff
 80083ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80083f2:	f001 f98b 	bl	800970c <vPortExitCritical>
}
 80083f6:	bf00      	nop
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b084      	sub	sp, #16
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008406:	f001 f951 	bl	80096ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840e:	2b00      	cmp	r3, #0
 8008410:	d102      	bne.n	8008418 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008412:	2301      	movs	r3, #1
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	e001      	b.n	800841c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800841c:	f001 f976 	bl	800970c <vPortExitCritical>

	return xReturn;
 8008420:	68fb      	ldr	r3, [r7, #12]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008432:	f001 f93b 	bl	80096ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843e:	429a      	cmp	r2, r3
 8008440:	d102      	bne.n	8008448 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008442:	2301      	movs	r3, #1
 8008444:	60fb      	str	r3, [r7, #12]
 8008446:	e001      	b.n	800844c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008448:	2300      	movs	r3, #0
 800844a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800844c:	f001 f95e 	bl	800970c <vPortExitCritical>

	return xReturn;
 8008450:	68fb      	ldr	r3, [r7, #12]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800845a:	b580      	push	{r7, lr}
 800845c:	b08e      	sub	sp, #56	; 0x38
 800845e:	af04      	add	r7, sp, #16
 8008460:	60f8      	str	r0, [r7, #12]
 8008462:	60b9      	str	r1, [r7, #8]
 8008464:	607a      	str	r2, [r7, #4]
 8008466:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10a      	bne.n	8008484 <xTaskCreateStatic+0x2a>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	623b      	str	r3, [r7, #32]
}
 8008480:	bf00      	nop
 8008482:	e7fe      	b.n	8008482 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10a      	bne.n	80084a0 <xTaskCreateStatic+0x46>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	61fb      	str	r3, [r7, #28]
}
 800849c:	bf00      	nop
 800849e:	e7fe      	b.n	800849e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084a0:	23b4      	movs	r3, #180	; 0xb4
 80084a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	2bb4      	cmp	r3, #180	; 0xb4
 80084a8:	d00a      	beq.n	80084c0 <xTaskCreateStatic+0x66>
	__asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	61bb      	str	r3, [r7, #24]
}
 80084bc:	bf00      	nop
 80084be:	e7fe      	b.n	80084be <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d01e      	beq.n	8008504 <xTaskCreateStatic+0xaa>
 80084c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d01b      	beq.n	8008504 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d8:	2202      	movs	r2, #2
 80084da:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084de:	2300      	movs	r3, #0
 80084e0:	9303      	str	r3, [sp, #12]
 80084e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e4:	9302      	str	r3, [sp, #8]
 80084e6:	f107 0314 	add.w	r3, r7, #20
 80084ea:	9301      	str	r3, [sp, #4]
 80084ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	68b9      	ldr	r1, [r7, #8]
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 f850 	bl	800859c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084fe:	f000 f8e3 	bl	80086c8 <prvAddNewTaskToReadyList>
 8008502:	e001      	b.n	8008508 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008504:	2300      	movs	r3, #0
 8008506:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008508:	697b      	ldr	r3, [r7, #20]
	}
 800850a:	4618      	mov	r0, r3
 800850c:	3728      	adds	r7, #40	; 0x28
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008512:	b580      	push	{r7, lr}
 8008514:	b08c      	sub	sp, #48	; 0x30
 8008516:	af04      	add	r7, sp, #16
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	60b9      	str	r1, [r7, #8]
 800851c:	603b      	str	r3, [r7, #0]
 800851e:	4613      	mov	r3, r2
 8008520:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008522:	88fb      	ldrh	r3, [r7, #6]
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4618      	mov	r0, r3
 8008528:	f001 f9c0 	bl	80098ac <pvPortMalloc>
 800852c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00e      	beq.n	8008552 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008534:	20b4      	movs	r0, #180	; 0xb4
 8008536:	f001 f9b9 	bl	80098ac <pvPortMalloc>
 800853a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d003      	beq.n	800854a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	631a      	str	r2, [r3, #48]	; 0x30
 8008548:	e005      	b.n	8008556 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800854a:	6978      	ldr	r0, [r7, #20]
 800854c:	f001 fa72 	bl	8009a34 <vPortFree>
 8008550:	e001      	b.n	8008556 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008552:	2300      	movs	r3, #0
 8008554:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d017      	beq.n	800858c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008564:	88fa      	ldrh	r2, [r7, #6]
 8008566:	2300      	movs	r3, #0
 8008568:	9303      	str	r3, [sp, #12]
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	9302      	str	r3, [sp, #8]
 800856e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008570:	9301      	str	r3, [sp, #4]
 8008572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	68b9      	ldr	r1, [r7, #8]
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f000 f80e 	bl	800859c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008580:	69f8      	ldr	r0, [r7, #28]
 8008582:	f000 f8a1 	bl	80086c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008586:	2301      	movs	r3, #1
 8008588:	61bb      	str	r3, [r7, #24]
 800858a:	e002      	b.n	8008592 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800858c:	f04f 33ff 	mov.w	r3, #4294967295
 8008590:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008592:	69bb      	ldr	r3, [r7, #24]
	}
 8008594:	4618      	mov	r0, r3
 8008596:	3720      	adds	r7, #32
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b088      	sub	sp, #32
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80085aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085b4:	3b01      	subs	r3, #1
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4413      	add	r3, r2
 80085ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	f023 0307 	bic.w	r3, r3, #7
 80085c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	f003 0307 	and.w	r3, r3, #7
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00a      	beq.n	80085e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	617b      	str	r3, [r7, #20]
}
 80085e0:	bf00      	nop
 80085e2:	e7fe      	b.n	80085e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085e4:	2300      	movs	r3, #0
 80085e6:	61fb      	str	r3, [r7, #28]
 80085e8:	e012      	b.n	8008610 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	4413      	add	r3, r2
 80085f0:	7819      	ldrb	r1, [r3, #0]
 80085f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	4413      	add	r3, r2
 80085f8:	3334      	adds	r3, #52	; 0x34
 80085fa:	460a      	mov	r2, r1
 80085fc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	4413      	add	r3, r2
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d006      	beq.n	8008618 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	3301      	adds	r3, #1
 800860e:	61fb      	str	r3, [r7, #28]
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	2b0f      	cmp	r3, #15
 8008614:	d9e9      	bls.n	80085ea <prvInitialiseNewTask+0x4e>
 8008616:	e000      	b.n	800861a <prvInitialiseNewTask+0x7e>
		{
			break;
 8008618:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800861a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008624:	2b06      	cmp	r3, #6
 8008626:	d901      	bls.n	800862c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008628:	2306      	movs	r3, #6
 800862a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800862c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008630:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008636:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	2200      	movs	r2, #0
 800863c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	3304      	adds	r3, #4
 8008642:	4618      	mov	r0, r3
 8008644:	f7fe ff85 	bl	8007552 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864a:	3318      	adds	r3, #24
 800864c:	4618      	mov	r0, r3
 800864e:	f7fe ff80 	bl	8007552 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008656:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	f1c3 0207 	rsb	r2, r3, #7
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008666:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	2200      	movs	r2, #0
 800866c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008672:	2200      	movs	r2, #0
 8008674:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867a:	334c      	adds	r3, #76	; 0x4c
 800867c:	2260      	movs	r2, #96	; 0x60
 800867e:	2100      	movs	r1, #0
 8008680:	4618      	mov	r0, r3
 8008682:	f001 fc2d 	bl	8009ee0 <memset>
 8008686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008688:	4a0c      	ldr	r2, [pc, #48]	; (80086bc <prvInitialiseNewTask+0x120>)
 800868a:	651a      	str	r2, [r3, #80]	; 0x50
 800868c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868e:	4a0c      	ldr	r2, [pc, #48]	; (80086c0 <prvInitialiseNewTask+0x124>)
 8008690:	655a      	str	r2, [r3, #84]	; 0x54
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	4a0b      	ldr	r2, [pc, #44]	; (80086c4 <prvInitialiseNewTask+0x128>)
 8008696:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	68f9      	ldr	r1, [r7, #12]
 800869c:	69b8      	ldr	r0, [r7, #24]
 800869e:	f000 ff11 	bl	80094c4 <pxPortInitialiseStack>
 80086a2:	4602      	mov	r2, r0
 80086a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80086a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086b4:	bf00      	nop
 80086b6:	3720      	adds	r7, #32
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	0800e940 	.word	0x0800e940
 80086c0:	0800e960 	.word	0x0800e960
 80086c4:	0800e920 	.word	0x0800e920

080086c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086d0:	f000 ffec 	bl	80096ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086d4:	4b2a      	ldr	r3, [pc, #168]	; (8008780 <prvAddNewTaskToReadyList+0xb8>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3301      	adds	r3, #1
 80086da:	4a29      	ldr	r2, [pc, #164]	; (8008780 <prvAddNewTaskToReadyList+0xb8>)
 80086dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086de:	4b29      	ldr	r3, [pc, #164]	; (8008784 <prvAddNewTaskToReadyList+0xbc>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d109      	bne.n	80086fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086e6:	4a27      	ldr	r2, [pc, #156]	; (8008784 <prvAddNewTaskToReadyList+0xbc>)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086ec:	4b24      	ldr	r3, [pc, #144]	; (8008780 <prvAddNewTaskToReadyList+0xb8>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d110      	bne.n	8008716 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086f4:	f000 fbdc 	bl	8008eb0 <prvInitialiseTaskLists>
 80086f8:	e00d      	b.n	8008716 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086fa:	4b23      	ldr	r3, [pc, #140]	; (8008788 <prvAddNewTaskToReadyList+0xc0>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d109      	bne.n	8008716 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008702:	4b20      	ldr	r3, [pc, #128]	; (8008784 <prvAddNewTaskToReadyList+0xbc>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	429a      	cmp	r2, r3
 800870e:	d802      	bhi.n	8008716 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008710:	4a1c      	ldr	r2, [pc, #112]	; (8008784 <prvAddNewTaskToReadyList+0xbc>)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008716:	4b1d      	ldr	r3, [pc, #116]	; (800878c <prvAddNewTaskToReadyList+0xc4>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3301      	adds	r3, #1
 800871c:	4a1b      	ldr	r2, [pc, #108]	; (800878c <prvAddNewTaskToReadyList+0xc4>)
 800871e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	2201      	movs	r2, #1
 8008726:	409a      	lsls	r2, r3
 8008728:	4b19      	ldr	r3, [pc, #100]	; (8008790 <prvAddNewTaskToReadyList+0xc8>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4313      	orrs	r3, r2
 800872e:	4a18      	ldr	r2, [pc, #96]	; (8008790 <prvAddNewTaskToReadyList+0xc8>)
 8008730:	6013      	str	r3, [r2, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008736:	4613      	mov	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4a15      	ldr	r2, [pc, #84]	; (8008794 <prvAddNewTaskToReadyList+0xcc>)
 8008740:	441a      	add	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	3304      	adds	r3, #4
 8008746:	4619      	mov	r1, r3
 8008748:	4610      	mov	r0, r2
 800874a:	f7fe ff0e 	bl	800756a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800874e:	f000 ffdd 	bl	800970c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008752:	4b0d      	ldr	r3, [pc, #52]	; (8008788 <prvAddNewTaskToReadyList+0xc0>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00e      	beq.n	8008778 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800875a:	4b0a      	ldr	r3, [pc, #40]	; (8008784 <prvAddNewTaskToReadyList+0xbc>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008764:	429a      	cmp	r2, r3
 8008766:	d207      	bcs.n	8008778 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008768:	4b0b      	ldr	r3, [pc, #44]	; (8008798 <prvAddNewTaskToReadyList+0xd0>)
 800876a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800876e:	601a      	str	r2, [r3, #0]
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008778:	bf00      	nop
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	200016cc 	.word	0x200016cc
 8008784:	200015cc 	.word	0x200015cc
 8008788:	200016d8 	.word	0x200016d8
 800878c:	200016e8 	.word	0x200016e8
 8008790:	200016d4 	.word	0x200016d4
 8008794:	200015d0 	.word	0x200015d0
 8008798:	e000ed04 	.word	0xe000ed04

0800879c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087a4:	2300      	movs	r3, #0
 80087a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d017      	beq.n	80087de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087ae:	4b13      	ldr	r3, [pc, #76]	; (80087fc <vTaskDelay+0x60>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00a      	beq.n	80087cc <vTaskDelay+0x30>
	__asm volatile
 80087b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	60bb      	str	r3, [r7, #8]
}
 80087c8:	bf00      	nop
 80087ca:	e7fe      	b.n	80087ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80087cc:	f000 f884 	bl	80088d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087d0:	2100      	movs	r1, #0
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fe10 	bl	80093f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087d8:	f000 f88c 	bl	80088f4 <xTaskResumeAll>
 80087dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d107      	bne.n	80087f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80087e4:	4b06      	ldr	r3, [pc, #24]	; (8008800 <vTaskDelay+0x64>)
 80087e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087f4:	bf00      	nop
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	200016f4 	.word	0x200016f4
 8008800:	e000ed04 	.word	0xe000ed04

08008804 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b08a      	sub	sp, #40	; 0x28
 8008808:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800880a:	2300      	movs	r3, #0
 800880c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800880e:	2300      	movs	r3, #0
 8008810:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008812:	463a      	mov	r2, r7
 8008814:	1d39      	adds	r1, r7, #4
 8008816:	f107 0308 	add.w	r3, r7, #8
 800881a:	4618      	mov	r0, r3
 800881c:	f7f9 fec8 	bl	80025b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008820:	6839      	ldr	r1, [r7, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	9202      	str	r2, [sp, #8]
 8008828:	9301      	str	r3, [sp, #4]
 800882a:	2300      	movs	r3, #0
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	2300      	movs	r3, #0
 8008830:	460a      	mov	r2, r1
 8008832:	4921      	ldr	r1, [pc, #132]	; (80088b8 <vTaskStartScheduler+0xb4>)
 8008834:	4821      	ldr	r0, [pc, #132]	; (80088bc <vTaskStartScheduler+0xb8>)
 8008836:	f7ff fe10 	bl	800845a <xTaskCreateStatic>
 800883a:	4603      	mov	r3, r0
 800883c:	4a20      	ldr	r2, [pc, #128]	; (80088c0 <vTaskStartScheduler+0xbc>)
 800883e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008840:	4b1f      	ldr	r3, [pc, #124]	; (80088c0 <vTaskStartScheduler+0xbc>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008848:	2301      	movs	r3, #1
 800884a:	617b      	str	r3, [r7, #20]
 800884c:	e001      	b.n	8008852 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800884e:	2300      	movs	r3, #0
 8008850:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d11b      	bne.n	8008890 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885c:	f383 8811 	msr	BASEPRI, r3
 8008860:	f3bf 8f6f 	isb	sy
 8008864:	f3bf 8f4f 	dsb	sy
 8008868:	613b      	str	r3, [r7, #16]
}
 800886a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800886c:	4b15      	ldr	r3, [pc, #84]	; (80088c4 <vTaskStartScheduler+0xc0>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	334c      	adds	r3, #76	; 0x4c
 8008872:	4a15      	ldr	r2, [pc, #84]	; (80088c8 <vTaskStartScheduler+0xc4>)
 8008874:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008876:	4b15      	ldr	r3, [pc, #84]	; (80088cc <vTaskStartScheduler+0xc8>)
 8008878:	f04f 32ff 	mov.w	r2, #4294967295
 800887c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800887e:	4b14      	ldr	r3, [pc, #80]	; (80088d0 <vTaskStartScheduler+0xcc>)
 8008880:	2201      	movs	r2, #1
 8008882:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008884:	4b13      	ldr	r3, [pc, #76]	; (80088d4 <vTaskStartScheduler+0xd0>)
 8008886:	2200      	movs	r2, #0
 8008888:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800888a:	f000 fe9d 	bl	80095c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800888e:	e00e      	b.n	80088ae <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008896:	d10a      	bne.n	80088ae <vTaskStartScheduler+0xaa>
	__asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	60fb      	str	r3, [r7, #12]
}
 80088aa:	bf00      	nop
 80088ac:	e7fe      	b.n	80088ac <vTaskStartScheduler+0xa8>
}
 80088ae:	bf00      	nop
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	0800e900 	.word	0x0800e900
 80088bc:	08008e81 	.word	0x08008e81
 80088c0:	200016f0 	.word	0x200016f0
 80088c4:	200015cc 	.word	0x200015cc
 80088c8:	2000024c 	.word	0x2000024c
 80088cc:	200016ec 	.word	0x200016ec
 80088d0:	200016d8 	.word	0x200016d8
 80088d4:	200016d0 	.word	0x200016d0

080088d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088d8:	b480      	push	{r7}
 80088da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80088dc:	4b04      	ldr	r3, [pc, #16]	; (80088f0 <vTaskSuspendAll+0x18>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3301      	adds	r3, #1
 80088e2:	4a03      	ldr	r2, [pc, #12]	; (80088f0 <vTaskSuspendAll+0x18>)
 80088e4:	6013      	str	r3, [r2, #0]
}
 80088e6:	bf00      	nop
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bc80      	pop	{r7}
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	200016f4 	.word	0x200016f4

080088f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088fa:	2300      	movs	r3, #0
 80088fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088fe:	2300      	movs	r3, #0
 8008900:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008902:	4b41      	ldr	r3, [pc, #260]	; (8008a08 <xTaskResumeAll+0x114>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10a      	bne.n	8008920 <xTaskResumeAll+0x2c>
	__asm volatile
 800890a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	603b      	str	r3, [r7, #0]
}
 800891c:	bf00      	nop
 800891e:	e7fe      	b.n	800891e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008920:	f000 fec4 	bl	80096ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008924:	4b38      	ldr	r3, [pc, #224]	; (8008a08 <xTaskResumeAll+0x114>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3b01      	subs	r3, #1
 800892a:	4a37      	ldr	r2, [pc, #220]	; (8008a08 <xTaskResumeAll+0x114>)
 800892c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800892e:	4b36      	ldr	r3, [pc, #216]	; (8008a08 <xTaskResumeAll+0x114>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d161      	bne.n	80089fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008936:	4b35      	ldr	r3, [pc, #212]	; (8008a0c <xTaskResumeAll+0x118>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d05d      	beq.n	80089fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800893e:	e02e      	b.n	800899e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008940:	4b33      	ldr	r3, [pc, #204]	; (8008a10 <xTaskResumeAll+0x11c>)
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	3318      	adds	r3, #24
 800894c:	4618      	mov	r0, r3
 800894e:	f7fe fe67 	bl	8007620 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3304      	adds	r3, #4
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe fe62 	bl	8007620 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008960:	2201      	movs	r2, #1
 8008962:	409a      	lsls	r2, r3
 8008964:	4b2b      	ldr	r3, [pc, #172]	; (8008a14 <xTaskResumeAll+0x120>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4313      	orrs	r3, r2
 800896a:	4a2a      	ldr	r2, [pc, #168]	; (8008a14 <xTaskResumeAll+0x120>)
 800896c:	6013      	str	r3, [r2, #0]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008972:	4613      	mov	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4413      	add	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4a27      	ldr	r2, [pc, #156]	; (8008a18 <xTaskResumeAll+0x124>)
 800897c:	441a      	add	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3304      	adds	r3, #4
 8008982:	4619      	mov	r1, r3
 8008984:	4610      	mov	r0, r2
 8008986:	f7fe fdf0 	bl	800756a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800898e:	4b23      	ldr	r3, [pc, #140]	; (8008a1c <xTaskResumeAll+0x128>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008994:	429a      	cmp	r2, r3
 8008996:	d302      	bcc.n	800899e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008998:	4b21      	ldr	r3, [pc, #132]	; (8008a20 <xTaskResumeAll+0x12c>)
 800899a:	2201      	movs	r2, #1
 800899c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800899e:	4b1c      	ldr	r3, [pc, #112]	; (8008a10 <xTaskResumeAll+0x11c>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1cc      	bne.n	8008940 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089ac:	f000 fb22 	bl	8008ff4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80089b0:	4b1c      	ldr	r3, [pc, #112]	; (8008a24 <xTaskResumeAll+0x130>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d010      	beq.n	80089de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089bc:	f000 f836 	bl	8008a2c <xTaskIncrementTick>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80089c6:	4b16      	ldr	r3, [pc, #88]	; (8008a20 <xTaskResumeAll+0x12c>)
 80089c8:	2201      	movs	r2, #1
 80089ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3b01      	subs	r3, #1
 80089d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1f1      	bne.n	80089bc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80089d8:	4b12      	ldr	r3, [pc, #72]	; (8008a24 <xTaskResumeAll+0x130>)
 80089da:	2200      	movs	r2, #0
 80089dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089de:	4b10      	ldr	r3, [pc, #64]	; (8008a20 <xTaskResumeAll+0x12c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d009      	beq.n	80089fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089e6:	2301      	movs	r3, #1
 80089e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089ea:	4b0f      	ldr	r3, [pc, #60]	; (8008a28 <xTaskResumeAll+0x134>)
 80089ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089fa:	f000 fe87 	bl	800970c <vPortExitCritical>

	return xAlreadyYielded;
 80089fe:	68bb      	ldr	r3, [r7, #8]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	200016f4 	.word	0x200016f4
 8008a0c:	200016cc 	.word	0x200016cc
 8008a10:	2000168c 	.word	0x2000168c
 8008a14:	200016d4 	.word	0x200016d4
 8008a18:	200015d0 	.word	0x200015d0
 8008a1c:	200015cc 	.word	0x200015cc
 8008a20:	200016e0 	.word	0x200016e0
 8008a24:	200016dc 	.word	0x200016dc
 8008a28:	e000ed04 	.word	0xe000ed04

08008a2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a32:	2300      	movs	r3, #0
 8008a34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a36:	4b51      	ldr	r3, [pc, #324]	; (8008b7c <xTaskIncrementTick+0x150>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f040 808d 	bne.w	8008b5a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a40:	4b4f      	ldr	r3, [pc, #316]	; (8008b80 <xTaskIncrementTick+0x154>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3301      	adds	r3, #1
 8008a46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a48:	4a4d      	ldr	r2, [pc, #308]	; (8008b80 <xTaskIncrementTick+0x154>)
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d120      	bne.n	8008a96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a54:	4b4b      	ldr	r3, [pc, #300]	; (8008b84 <xTaskIncrementTick+0x158>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00a      	beq.n	8008a74 <xTaskIncrementTick+0x48>
	__asm volatile
 8008a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a62:	f383 8811 	msr	BASEPRI, r3
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	603b      	str	r3, [r7, #0]
}
 8008a70:	bf00      	nop
 8008a72:	e7fe      	b.n	8008a72 <xTaskIncrementTick+0x46>
 8008a74:	4b43      	ldr	r3, [pc, #268]	; (8008b84 <xTaskIncrementTick+0x158>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	60fb      	str	r3, [r7, #12]
 8008a7a:	4b43      	ldr	r3, [pc, #268]	; (8008b88 <xTaskIncrementTick+0x15c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a41      	ldr	r2, [pc, #260]	; (8008b84 <xTaskIncrementTick+0x158>)
 8008a80:	6013      	str	r3, [r2, #0]
 8008a82:	4a41      	ldr	r2, [pc, #260]	; (8008b88 <xTaskIncrementTick+0x15c>)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6013      	str	r3, [r2, #0]
 8008a88:	4b40      	ldr	r3, [pc, #256]	; (8008b8c <xTaskIncrementTick+0x160>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	4a3f      	ldr	r2, [pc, #252]	; (8008b8c <xTaskIncrementTick+0x160>)
 8008a90:	6013      	str	r3, [r2, #0]
 8008a92:	f000 faaf 	bl	8008ff4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a96:	4b3e      	ldr	r3, [pc, #248]	; (8008b90 <xTaskIncrementTick+0x164>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d34d      	bcc.n	8008b3c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aa0:	4b38      	ldr	r3, [pc, #224]	; (8008b84 <xTaskIncrementTick+0x158>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d101      	bne.n	8008aae <xTaskIncrementTick+0x82>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e000      	b.n	8008ab0 <xTaskIncrementTick+0x84>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d004      	beq.n	8008abe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ab4:	4b36      	ldr	r3, [pc, #216]	; (8008b90 <xTaskIncrementTick+0x164>)
 8008ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8008aba:	601a      	str	r2, [r3, #0]
					break;
 8008abc:	e03e      	b.n	8008b3c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008abe:	4b31      	ldr	r3, [pc, #196]	; (8008b84 <xTaskIncrementTick+0x158>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d203      	bcs.n	8008ade <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ad6:	4a2e      	ldr	r2, [pc, #184]	; (8008b90 <xTaskIncrementTick+0x164>)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6013      	str	r3, [r2, #0]
						break;
 8008adc:	e02e      	b.n	8008b3c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	3304      	adds	r3, #4
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fe fd9c 	bl	8007620 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d004      	beq.n	8008afa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	3318      	adds	r3, #24
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fe fd93 	bl	8007620 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afe:	2201      	movs	r2, #1
 8008b00:	409a      	lsls	r2, r3
 8008b02:	4b24      	ldr	r3, [pc, #144]	; (8008b94 <xTaskIncrementTick+0x168>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	4a22      	ldr	r2, [pc, #136]	; (8008b94 <xTaskIncrementTick+0x168>)
 8008b0a:	6013      	str	r3, [r2, #0]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b10:	4613      	mov	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4a1f      	ldr	r2, [pc, #124]	; (8008b98 <xTaskIncrementTick+0x16c>)
 8008b1a:	441a      	add	r2, r3
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	3304      	adds	r3, #4
 8008b20:	4619      	mov	r1, r3
 8008b22:	4610      	mov	r0, r2
 8008b24:	f7fe fd21 	bl	800756a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2c:	4b1b      	ldr	r3, [pc, #108]	; (8008b9c <xTaskIncrementTick+0x170>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d3b4      	bcc.n	8008aa0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008b36:	2301      	movs	r3, #1
 8008b38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b3a:	e7b1      	b.n	8008aa0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b3c:	4b17      	ldr	r3, [pc, #92]	; (8008b9c <xTaskIncrementTick+0x170>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b42:	4915      	ldr	r1, [pc, #84]	; (8008b98 <xTaskIncrementTick+0x16c>)
 8008b44:	4613      	mov	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4413      	add	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	440b      	add	r3, r1
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d907      	bls.n	8008b64 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008b54:	2301      	movs	r3, #1
 8008b56:	617b      	str	r3, [r7, #20]
 8008b58:	e004      	b.n	8008b64 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008b5a:	4b11      	ldr	r3, [pc, #68]	; (8008ba0 <xTaskIncrementTick+0x174>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	4a0f      	ldr	r2, [pc, #60]	; (8008ba0 <xTaskIncrementTick+0x174>)
 8008b62:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008b64:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <xTaskIncrementTick+0x178>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d001      	beq.n	8008b70 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008b70:	697b      	ldr	r3, [r7, #20]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3718      	adds	r7, #24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	200016f4 	.word	0x200016f4
 8008b80:	200016d0 	.word	0x200016d0
 8008b84:	20001684 	.word	0x20001684
 8008b88:	20001688 	.word	0x20001688
 8008b8c:	200016e4 	.word	0x200016e4
 8008b90:	200016ec 	.word	0x200016ec
 8008b94:	200016d4 	.word	0x200016d4
 8008b98:	200015d0 	.word	0x200015d0
 8008b9c:	200015cc 	.word	0x200015cc
 8008ba0:	200016dc 	.word	0x200016dc
 8008ba4:	200016e0 	.word	0x200016e0

08008ba8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bae:	4b29      	ldr	r3, [pc, #164]	; (8008c54 <vTaskSwitchContext+0xac>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008bb6:	4b28      	ldr	r3, [pc, #160]	; (8008c58 <vTaskSwitchContext+0xb0>)
 8008bb8:	2201      	movs	r2, #1
 8008bba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008bbc:	e044      	b.n	8008c48 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008bbe:	4b26      	ldr	r3, [pc, #152]	; (8008c58 <vTaskSwitchContext+0xb0>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008bc4:	4b25      	ldr	r3, [pc, #148]	; (8008c5c <vTaskSwitchContext+0xb4>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	fab3 f383 	clz	r3, r3
 8008bd0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008bd2:	7afb      	ldrb	r3, [r7, #11]
 8008bd4:	f1c3 031f 	rsb	r3, r3, #31
 8008bd8:	617b      	str	r3, [r7, #20]
 8008bda:	4921      	ldr	r1, [pc, #132]	; (8008c60 <vTaskSwitchContext+0xb8>)
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	4613      	mov	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4413      	add	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	440b      	add	r3, r1
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10a      	bne.n	8008c04 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	607b      	str	r3, [r7, #4]
}
 8008c00:	bf00      	nop
 8008c02:	e7fe      	b.n	8008c02 <vTaskSwitchContext+0x5a>
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4a14      	ldr	r2, [pc, #80]	; (8008c60 <vTaskSwitchContext+0xb8>)
 8008c10:	4413      	add	r3, r2
 8008c12:	613b      	str	r3, [r7, #16]
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	685a      	ldr	r2, [r3, #4]
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	605a      	str	r2, [r3, #4]
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	3308      	adds	r3, #8
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d104      	bne.n	8008c34 <vTaskSwitchContext+0x8c>
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	605a      	str	r2, [r3, #4]
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	4a0a      	ldr	r2, [pc, #40]	; (8008c64 <vTaskSwitchContext+0xbc>)
 8008c3c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c3e:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <vTaskSwitchContext+0xbc>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	334c      	adds	r3, #76	; 0x4c
 8008c44:	4a08      	ldr	r2, [pc, #32]	; (8008c68 <vTaskSwitchContext+0xc0>)
 8008c46:	6013      	str	r3, [r2, #0]
}
 8008c48:	bf00      	nop
 8008c4a:	371c      	adds	r7, #28
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bc80      	pop	{r7}
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	200016f4 	.word	0x200016f4
 8008c58:	200016e0 	.word	0x200016e0
 8008c5c:	200016d4 	.word	0x200016d4
 8008c60:	200015d0 	.word	0x200015d0
 8008c64:	200015cc 	.word	0x200015cc
 8008c68:	2000024c 	.word	0x2000024c

08008c6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10a      	bne.n	8008c92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	60fb      	str	r3, [r7, #12]
}
 8008c8e:	bf00      	nop
 8008c90:	e7fe      	b.n	8008c90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c92:	4b07      	ldr	r3, [pc, #28]	; (8008cb0 <vTaskPlaceOnEventList+0x44>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3318      	adds	r3, #24
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7fe fc88 	bl	80075b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ca0:	2101      	movs	r1, #1
 8008ca2:	6838      	ldr	r0, [r7, #0]
 8008ca4:	f000 fba8 	bl	80093f8 <prvAddCurrentTaskToDelayedList>
}
 8008ca8:	bf00      	nop
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	200015cc 	.word	0x200015cc

08008cb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10a      	bne.n	8008ce0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	60fb      	str	r3, [r7, #12]
}
 8008cdc:	bf00      	nop
 8008cde:	e7fe      	b.n	8008cde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	3318      	adds	r3, #24
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7fe fc9b 	bl	8007620 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cea:	4b1d      	ldr	r3, [pc, #116]	; (8008d60 <xTaskRemoveFromEventList+0xac>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d11c      	bne.n	8008d2c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fe fc92 	bl	8007620 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d00:	2201      	movs	r2, #1
 8008d02:	409a      	lsls	r2, r3
 8008d04:	4b17      	ldr	r3, [pc, #92]	; (8008d64 <xTaskRemoveFromEventList+0xb0>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	4a16      	ldr	r2, [pc, #88]	; (8008d64 <xTaskRemoveFromEventList+0xb0>)
 8008d0c:	6013      	str	r3, [r2, #0]
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d12:	4613      	mov	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4413      	add	r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4a13      	ldr	r2, [pc, #76]	; (8008d68 <xTaskRemoveFromEventList+0xb4>)
 8008d1c:	441a      	add	r2, r3
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	3304      	adds	r3, #4
 8008d22:	4619      	mov	r1, r3
 8008d24:	4610      	mov	r0, r2
 8008d26:	f7fe fc20 	bl	800756a <vListInsertEnd>
 8008d2a:	e005      	b.n	8008d38 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	3318      	adds	r3, #24
 8008d30:	4619      	mov	r1, r3
 8008d32:	480e      	ldr	r0, [pc, #56]	; (8008d6c <xTaskRemoveFromEventList+0xb8>)
 8008d34:	f7fe fc19 	bl	800756a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d3c:	4b0c      	ldr	r3, [pc, #48]	; (8008d70 <xTaskRemoveFromEventList+0xbc>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d905      	bls.n	8008d52 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d46:	2301      	movs	r3, #1
 8008d48:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d4a:	4b0a      	ldr	r3, [pc, #40]	; (8008d74 <xTaskRemoveFromEventList+0xc0>)
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	601a      	str	r2, [r3, #0]
 8008d50:	e001      	b.n	8008d56 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008d52:	2300      	movs	r3, #0
 8008d54:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008d56:	697b      	ldr	r3, [r7, #20]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	200016f4 	.word	0x200016f4
 8008d64:	200016d4 	.word	0x200016d4
 8008d68:	200015d0 	.word	0x200015d0
 8008d6c:	2000168c 	.word	0x2000168c
 8008d70:	200015cc 	.word	0x200015cc
 8008d74:	200016e0 	.word	0x200016e0

08008d78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d80:	4b06      	ldr	r3, [pc, #24]	; (8008d9c <vTaskInternalSetTimeOutState+0x24>)
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d88:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <vTaskInternalSetTimeOutState+0x28>)
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	605a      	str	r2, [r3, #4]
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bc80      	pop	{r7}
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	200016e4 	.word	0x200016e4
 8008da0:	200016d0 	.word	0x200016d0

08008da4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b088      	sub	sp, #32
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10a      	bne.n	8008dca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	613b      	str	r3, [r7, #16]
}
 8008dc6:	bf00      	nop
 8008dc8:	e7fe      	b.n	8008dc8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10a      	bne.n	8008de6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	60fb      	str	r3, [r7, #12]
}
 8008de2:	bf00      	nop
 8008de4:	e7fe      	b.n	8008de4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008de6:	f000 fc61 	bl	80096ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008dea:	4b1d      	ldr	r3, [pc, #116]	; (8008e60 <xTaskCheckForTimeOut+0xbc>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	69ba      	ldr	r2, [r7, #24]
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e02:	d102      	bne.n	8008e0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e04:	2300      	movs	r3, #0
 8008e06:	61fb      	str	r3, [r7, #28]
 8008e08:	e023      	b.n	8008e52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	4b15      	ldr	r3, [pc, #84]	; (8008e64 <xTaskCheckForTimeOut+0xc0>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d007      	beq.n	8008e26 <xTaskCheckForTimeOut+0x82>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	69ba      	ldr	r2, [r7, #24]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d302      	bcc.n	8008e26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e20:	2301      	movs	r3, #1
 8008e22:	61fb      	str	r3, [r7, #28]
 8008e24:	e015      	b.n	8008e52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d20b      	bcs.n	8008e48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	1ad2      	subs	r2, r2, r3
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7ff ff9b 	bl	8008d78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e42:	2300      	movs	r3, #0
 8008e44:	61fb      	str	r3, [r7, #28]
 8008e46:	e004      	b.n	8008e52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e52:	f000 fc5b 	bl	800970c <vPortExitCritical>

	return xReturn;
 8008e56:	69fb      	ldr	r3, [r7, #28]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3720      	adds	r7, #32
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	200016d0 	.word	0x200016d0
 8008e64:	200016e4 	.word	0x200016e4

08008e68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e68:	b480      	push	{r7}
 8008e6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e6c:	4b03      	ldr	r3, [pc, #12]	; (8008e7c <vTaskMissedYield+0x14>)
 8008e6e:	2201      	movs	r2, #1
 8008e70:	601a      	str	r2, [r3, #0]
}
 8008e72:	bf00      	nop
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bc80      	pop	{r7}
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	200016e0 	.word	0x200016e0

08008e80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e88:	f000 f852 	bl	8008f30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e8c:	4b06      	ldr	r3, [pc, #24]	; (8008ea8 <prvIdleTask+0x28>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d9f9      	bls.n	8008e88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e94:	4b05      	ldr	r3, [pc, #20]	; (8008eac <prvIdleTask+0x2c>)
 8008e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ea4:	e7f0      	b.n	8008e88 <prvIdleTask+0x8>
 8008ea6:	bf00      	nop
 8008ea8:	200015d0 	.word	0x200015d0
 8008eac:	e000ed04 	.word	0xe000ed04

08008eb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	607b      	str	r3, [r7, #4]
 8008eba:	e00c      	b.n	8008ed6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4a12      	ldr	r2, [pc, #72]	; (8008f10 <prvInitialiseTaskLists+0x60>)
 8008ec8:	4413      	add	r3, r2
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe fb22 	bl	8007514 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	607b      	str	r3, [r7, #4]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2b06      	cmp	r3, #6
 8008eda:	d9ef      	bls.n	8008ebc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008edc:	480d      	ldr	r0, [pc, #52]	; (8008f14 <prvInitialiseTaskLists+0x64>)
 8008ede:	f7fe fb19 	bl	8007514 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ee2:	480d      	ldr	r0, [pc, #52]	; (8008f18 <prvInitialiseTaskLists+0x68>)
 8008ee4:	f7fe fb16 	bl	8007514 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ee8:	480c      	ldr	r0, [pc, #48]	; (8008f1c <prvInitialiseTaskLists+0x6c>)
 8008eea:	f7fe fb13 	bl	8007514 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008eee:	480c      	ldr	r0, [pc, #48]	; (8008f20 <prvInitialiseTaskLists+0x70>)
 8008ef0:	f7fe fb10 	bl	8007514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ef4:	480b      	ldr	r0, [pc, #44]	; (8008f24 <prvInitialiseTaskLists+0x74>)
 8008ef6:	f7fe fb0d 	bl	8007514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008efa:	4b0b      	ldr	r3, [pc, #44]	; (8008f28 <prvInitialiseTaskLists+0x78>)
 8008efc:	4a05      	ldr	r2, [pc, #20]	; (8008f14 <prvInitialiseTaskLists+0x64>)
 8008efe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f00:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <prvInitialiseTaskLists+0x7c>)
 8008f02:	4a05      	ldr	r2, [pc, #20]	; (8008f18 <prvInitialiseTaskLists+0x68>)
 8008f04:	601a      	str	r2, [r3, #0]
}
 8008f06:	bf00      	nop
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	200015d0 	.word	0x200015d0
 8008f14:	2000165c 	.word	0x2000165c
 8008f18:	20001670 	.word	0x20001670
 8008f1c:	2000168c 	.word	0x2000168c
 8008f20:	200016a0 	.word	0x200016a0
 8008f24:	200016b8 	.word	0x200016b8
 8008f28:	20001684 	.word	0x20001684
 8008f2c:	20001688 	.word	0x20001688

08008f30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f36:	e019      	b.n	8008f6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f38:	f000 fbb8 	bl	80096ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008f3c:	4b10      	ldr	r3, [pc, #64]	; (8008f80 <prvCheckTasksWaitingTermination+0x50>)
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	3304      	adds	r3, #4
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fe fb69 	bl	8007620 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f4e:	4b0d      	ldr	r3, [pc, #52]	; (8008f84 <prvCheckTasksWaitingTermination+0x54>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	4a0b      	ldr	r2, [pc, #44]	; (8008f84 <prvCheckTasksWaitingTermination+0x54>)
 8008f56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f58:	4b0b      	ldr	r3, [pc, #44]	; (8008f88 <prvCheckTasksWaitingTermination+0x58>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	4a0a      	ldr	r2, [pc, #40]	; (8008f88 <prvCheckTasksWaitingTermination+0x58>)
 8008f60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f62:	f000 fbd3 	bl	800970c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f810 	bl	8008f8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f6c:	4b06      	ldr	r3, [pc, #24]	; (8008f88 <prvCheckTasksWaitingTermination+0x58>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e1      	bne.n	8008f38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f74:	bf00      	nop
 8008f76:	bf00      	nop
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	200016a0 	.word	0x200016a0
 8008f84:	200016cc 	.word	0x200016cc
 8008f88:	200016b4 	.word	0x200016b4

08008f8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	334c      	adds	r3, #76	; 0x4c
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f001 fcf3 	bl	800a984 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d108      	bne.n	8008fba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fac:	4618      	mov	r0, r3
 8008fae:	f000 fd41 	bl	8009a34 <vPortFree>
				vPortFree( pxTCB );
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fd3e 	bl	8009a34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fb8:	e018      	b.n	8008fec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d103      	bne.n	8008fcc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fd35 	bl	8009a34 <vPortFree>
	}
 8008fca:	e00f      	b.n	8008fec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d00a      	beq.n	8008fec <prvDeleteTCB+0x60>
	__asm volatile
 8008fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	60fb      	str	r3, [r7, #12]
}
 8008fe8:	bf00      	nop
 8008fea:	e7fe      	b.n	8008fea <prvDeleteTCB+0x5e>
	}
 8008fec:	bf00      	nop
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ffa:	4b0e      	ldr	r3, [pc, #56]	; (8009034 <prvResetNextTaskUnblockTime+0x40>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <prvResetNextTaskUnblockTime+0x14>
 8009004:	2301      	movs	r3, #1
 8009006:	e000      	b.n	800900a <prvResetNextTaskUnblockTime+0x16>
 8009008:	2300      	movs	r3, #0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d004      	beq.n	8009018 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800900e:	4b0a      	ldr	r3, [pc, #40]	; (8009038 <prvResetNextTaskUnblockTime+0x44>)
 8009010:	f04f 32ff 	mov.w	r2, #4294967295
 8009014:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009016:	e008      	b.n	800902a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009018:	4b06      	ldr	r3, [pc, #24]	; (8009034 <prvResetNextTaskUnblockTime+0x40>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	4a04      	ldr	r2, [pc, #16]	; (8009038 <prvResetNextTaskUnblockTime+0x44>)
 8009028:	6013      	str	r3, [r2, #0]
}
 800902a:	bf00      	nop
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	bc80      	pop	{r7}
 8009032:	4770      	bx	lr
 8009034:	20001684 	.word	0x20001684
 8009038:	200016ec 	.word	0x200016ec

0800903c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009042:	4b0b      	ldr	r3, [pc, #44]	; (8009070 <xTaskGetSchedulerState+0x34>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d102      	bne.n	8009050 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800904a:	2301      	movs	r3, #1
 800904c:	607b      	str	r3, [r7, #4]
 800904e:	e008      	b.n	8009062 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009050:	4b08      	ldr	r3, [pc, #32]	; (8009074 <xTaskGetSchedulerState+0x38>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d102      	bne.n	800905e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009058:	2302      	movs	r3, #2
 800905a:	607b      	str	r3, [r7, #4]
 800905c:	e001      	b.n	8009062 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800905e:	2300      	movs	r3, #0
 8009060:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009062:	687b      	ldr	r3, [r7, #4]
	}
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	bc80      	pop	{r7}
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	200016d8 	.word	0x200016d8
 8009074:	200016f4 	.word	0x200016f4

08009078 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009084:	2300      	movs	r3, #0
 8009086:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d06e      	beq.n	800916c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009092:	4b39      	ldr	r3, [pc, #228]	; (8009178 <xTaskPriorityInherit+0x100>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009098:	429a      	cmp	r2, r3
 800909a:	d25e      	bcs.n	800915a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	db06      	blt.n	80090b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090a4:	4b34      	ldr	r3, [pc, #208]	; (8009178 <xTaskPriorityInherit+0x100>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090aa:	f1c3 0207 	rsb	r2, r3, #7
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	6959      	ldr	r1, [r3, #20]
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ba:	4613      	mov	r3, r2
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4413      	add	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4a2e      	ldr	r2, [pc, #184]	; (800917c <xTaskPriorityInherit+0x104>)
 80090c4:	4413      	add	r3, r2
 80090c6:	4299      	cmp	r1, r3
 80090c8:	d101      	bne.n	80090ce <xTaskPriorityInherit+0x56>
 80090ca:	2301      	movs	r3, #1
 80090cc:	e000      	b.n	80090d0 <xTaskPriorityInherit+0x58>
 80090ce:	2300      	movs	r3, #0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d03a      	beq.n	800914a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	3304      	adds	r3, #4
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fe faa1 	bl	8007620 <uxListRemove>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d115      	bne.n	8009110 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e8:	4924      	ldr	r1, [pc, #144]	; (800917c <xTaskPriorityInherit+0x104>)
 80090ea:	4613      	mov	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	440b      	add	r3, r1
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10a      	bne.n	8009110 <xTaskPriorityInherit+0x98>
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fe:	2201      	movs	r2, #1
 8009100:	fa02 f303 	lsl.w	r3, r2, r3
 8009104:	43da      	mvns	r2, r3
 8009106:	4b1e      	ldr	r3, [pc, #120]	; (8009180 <xTaskPriorityInherit+0x108>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4013      	ands	r3, r2
 800910c:	4a1c      	ldr	r2, [pc, #112]	; (8009180 <xTaskPriorityInherit+0x108>)
 800910e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009110:	4b19      	ldr	r3, [pc, #100]	; (8009178 <xTaskPriorityInherit+0x100>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911e:	2201      	movs	r2, #1
 8009120:	409a      	lsls	r2, r3
 8009122:	4b17      	ldr	r3, [pc, #92]	; (8009180 <xTaskPriorityInherit+0x108>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4313      	orrs	r3, r2
 8009128:	4a15      	ldr	r2, [pc, #84]	; (8009180 <xTaskPriorityInherit+0x108>)
 800912a:	6013      	str	r3, [r2, #0]
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009130:	4613      	mov	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4a10      	ldr	r2, [pc, #64]	; (800917c <xTaskPriorityInherit+0x104>)
 800913a:	441a      	add	r2, r3
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	3304      	adds	r3, #4
 8009140:	4619      	mov	r1, r3
 8009142:	4610      	mov	r0, r2
 8009144:	f7fe fa11 	bl	800756a <vListInsertEnd>
 8009148:	e004      	b.n	8009154 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800914a:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <xTaskPriorityInherit+0x100>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009154:	2301      	movs	r3, #1
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	e008      	b.n	800916c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800915e:	4b06      	ldr	r3, [pc, #24]	; (8009178 <xTaskPriorityInherit+0x100>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009164:	429a      	cmp	r2, r3
 8009166:	d201      	bcs.n	800916c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009168:	2301      	movs	r3, #1
 800916a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800916c:	68fb      	ldr	r3, [r7, #12]
	}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	200015cc 	.word	0x200015cc
 800917c:	200015d0 	.word	0x200015d0
 8009180:	200016d4 	.word	0x200016d4

08009184 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009190:	2300      	movs	r3, #0
 8009192:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d06e      	beq.n	8009278 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800919a:	4b3a      	ldr	r3, [pc, #232]	; (8009284 <xTaskPriorityDisinherit+0x100>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d00a      	beq.n	80091ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80091a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a8:	f383 8811 	msr	BASEPRI, r3
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	60fb      	str	r3, [r7, #12]
}
 80091b6:	bf00      	nop
 80091b8:	e7fe      	b.n	80091b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10a      	bne.n	80091d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80091c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	60bb      	str	r3, [r7, #8]
}
 80091d4:	bf00      	nop
 80091d6:	e7fe      	b.n	80091d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091dc:	1e5a      	subs	r2, r3, #1
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d044      	beq.n	8009278 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d140      	bne.n	8009278 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	3304      	adds	r3, #4
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fe fa10 	bl	8007620 <uxListRemove>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d115      	bne.n	8009232 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800920a:	491f      	ldr	r1, [pc, #124]	; (8009288 <xTaskPriorityDisinherit+0x104>)
 800920c:	4613      	mov	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	440b      	add	r3, r1
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10a      	bne.n	8009232 <xTaskPriorityDisinherit+0xae>
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	2201      	movs	r2, #1
 8009222:	fa02 f303 	lsl.w	r3, r2, r3
 8009226:	43da      	mvns	r2, r3
 8009228:	4b18      	ldr	r3, [pc, #96]	; (800928c <xTaskPriorityDisinherit+0x108>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4013      	ands	r3, r2
 800922e:	4a17      	ldr	r2, [pc, #92]	; (800928c <xTaskPriorityDisinherit+0x108>)
 8009230:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923e:	f1c3 0207 	rsb	r2, r3, #7
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924a:	2201      	movs	r2, #1
 800924c:	409a      	lsls	r2, r3
 800924e:	4b0f      	ldr	r3, [pc, #60]	; (800928c <xTaskPriorityDisinherit+0x108>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4313      	orrs	r3, r2
 8009254:	4a0d      	ldr	r2, [pc, #52]	; (800928c <xTaskPriorityDisinherit+0x108>)
 8009256:	6013      	str	r3, [r2, #0]
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925c:	4613      	mov	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4a08      	ldr	r2, [pc, #32]	; (8009288 <xTaskPriorityDisinherit+0x104>)
 8009266:	441a      	add	r2, r3
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	3304      	adds	r3, #4
 800926c:	4619      	mov	r1, r3
 800926e:	4610      	mov	r0, r2
 8009270:	f7fe f97b 	bl	800756a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009274:	2301      	movs	r3, #1
 8009276:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009278:	697b      	ldr	r3, [r7, #20]
	}
 800927a:	4618      	mov	r0, r3
 800927c:	3718      	adds	r7, #24
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	200015cc 	.word	0x200015cc
 8009288:	200015d0 	.word	0x200015d0
 800928c:	200016d4 	.word	0x200016d4

08009290 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009290:	b580      	push	{r7, lr}
 8009292:	b088      	sub	sp, #32
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800929e:	2301      	movs	r3, #1
 80092a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 8088 	beq.w	80093ba <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10a      	bne.n	80092c8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	60fb      	str	r3, [r7, #12]
}
 80092c4:	bf00      	nop
 80092c6:	e7fe      	b.n	80092c6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d902      	bls.n	80092d8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	61fb      	str	r3, [r7, #28]
 80092d6:	e002      	b.n	80092de <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092dc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e2:	69fa      	ldr	r2, [r7, #28]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d068      	beq.n	80093ba <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092ec:	697a      	ldr	r2, [r7, #20]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d163      	bne.n	80093ba <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80092f2:	4b34      	ldr	r3, [pc, #208]	; (80093c4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	69ba      	ldr	r2, [r7, #24]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d10a      	bne.n	8009312 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80092fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009300:	f383 8811 	msr	BASEPRI, r3
 8009304:	f3bf 8f6f 	isb	sy
 8009308:	f3bf 8f4f 	dsb	sy
 800930c:	60bb      	str	r3, [r7, #8]
}
 800930e:	bf00      	nop
 8009310:	e7fe      	b.n	8009310 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009316:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	69fa      	ldr	r2, [r7, #28]
 800931c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	2b00      	cmp	r3, #0
 8009324:	db04      	blt.n	8009330 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	f1c3 0207 	rsb	r2, r3, #7
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	6959      	ldr	r1, [r3, #20]
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	4613      	mov	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4a22      	ldr	r2, [pc, #136]	; (80093c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009340:	4413      	add	r3, r2
 8009342:	4299      	cmp	r1, r3
 8009344:	d101      	bne.n	800934a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8009346:	2301      	movs	r3, #1
 8009348:	e000      	b.n	800934c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800934a:	2300      	movs	r3, #0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d034      	beq.n	80093ba <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	3304      	adds	r3, #4
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe f963 	bl	8007620 <uxListRemove>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d115      	bne.n	800938c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009364:	4918      	ldr	r1, [pc, #96]	; (80093c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009366:	4613      	mov	r3, r2
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	4413      	add	r3, r2
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	440b      	add	r3, r1
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10a      	bne.n	800938c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937a:	2201      	movs	r2, #1
 800937c:	fa02 f303 	lsl.w	r3, r2, r3
 8009380:	43da      	mvns	r2, r3
 8009382:	4b12      	ldr	r3, [pc, #72]	; (80093cc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4013      	ands	r3, r2
 8009388:	4a10      	ldr	r2, [pc, #64]	; (80093cc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800938a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009390:	2201      	movs	r2, #1
 8009392:	409a      	lsls	r2, r3
 8009394:	4b0d      	ldr	r3, [pc, #52]	; (80093cc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4313      	orrs	r3, r2
 800939a:	4a0c      	ldr	r2, [pc, #48]	; (80093cc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a2:	4613      	mov	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4a07      	ldr	r2, [pc, #28]	; (80093c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80093ac:	441a      	add	r2, r3
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	3304      	adds	r3, #4
 80093b2:	4619      	mov	r1, r3
 80093b4:	4610      	mov	r0, r2
 80093b6:	f7fe f8d8 	bl	800756a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093ba:	bf00      	nop
 80093bc:	3720      	adds	r7, #32
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	200015cc 	.word	0x200015cc
 80093c8:	200015d0 	.word	0x200015d0
 80093cc:	200016d4 	.word	0x200016d4

080093d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80093d0:	b480      	push	{r7}
 80093d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80093d4:	4b07      	ldr	r3, [pc, #28]	; (80093f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d004      	beq.n	80093e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80093dc:	4b05      	ldr	r3, [pc, #20]	; (80093f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093e2:	3201      	adds	r2, #1
 80093e4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80093e6:	4b03      	ldr	r3, [pc, #12]	; (80093f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80093e8:	681b      	ldr	r3, [r3, #0]
	}
 80093ea:	4618      	mov	r0, r3
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bc80      	pop	{r7}
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	200015cc 	.word	0x200015cc

080093f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009402:	4b29      	ldr	r3, [pc, #164]	; (80094a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009408:	4b28      	ldr	r3, [pc, #160]	; (80094ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	3304      	adds	r3, #4
 800940e:	4618      	mov	r0, r3
 8009410:	f7fe f906 	bl	8007620 <uxListRemove>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10b      	bne.n	8009432 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800941a:	4b24      	ldr	r3, [pc, #144]	; (80094ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009420:	2201      	movs	r2, #1
 8009422:	fa02 f303 	lsl.w	r3, r2, r3
 8009426:	43da      	mvns	r2, r3
 8009428:	4b21      	ldr	r3, [pc, #132]	; (80094b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4013      	ands	r3, r2
 800942e:	4a20      	ldr	r2, [pc, #128]	; (80094b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009430:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009438:	d10a      	bne.n	8009450 <prvAddCurrentTaskToDelayedList+0x58>
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d007      	beq.n	8009450 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009440:	4b1a      	ldr	r3, [pc, #104]	; (80094ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3304      	adds	r3, #4
 8009446:	4619      	mov	r1, r3
 8009448:	481a      	ldr	r0, [pc, #104]	; (80094b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800944a:	f7fe f88e 	bl	800756a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800944e:	e026      	b.n	800949e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4413      	add	r3, r2
 8009456:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009458:	4b14      	ldr	r3, [pc, #80]	; (80094ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	429a      	cmp	r2, r3
 8009466:	d209      	bcs.n	800947c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009468:	4b13      	ldr	r3, [pc, #76]	; (80094b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	4b0f      	ldr	r3, [pc, #60]	; (80094ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	3304      	adds	r3, #4
 8009472:	4619      	mov	r1, r3
 8009474:	4610      	mov	r0, r2
 8009476:	f7fe f89b 	bl	80075b0 <vListInsert>
}
 800947a:	e010      	b.n	800949e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800947c:	4b0f      	ldr	r3, [pc, #60]	; (80094bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	4b0a      	ldr	r3, [pc, #40]	; (80094ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3304      	adds	r3, #4
 8009486:	4619      	mov	r1, r3
 8009488:	4610      	mov	r0, r2
 800948a:	f7fe f891 	bl	80075b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800948e:	4b0c      	ldr	r3, [pc, #48]	; (80094c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	429a      	cmp	r2, r3
 8009496:	d202      	bcs.n	800949e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009498:	4a09      	ldr	r2, [pc, #36]	; (80094c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	6013      	str	r3, [r2, #0]
}
 800949e:	bf00      	nop
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	200016d0 	.word	0x200016d0
 80094ac:	200015cc 	.word	0x200015cc
 80094b0:	200016d4 	.word	0x200016d4
 80094b4:	200016b8 	.word	0x200016b8
 80094b8:	20001688 	.word	0x20001688
 80094bc:	20001684 	.word	0x20001684
 80094c0:	200016ec 	.word	0x200016ec

080094c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3b04      	subs	r3, #4
 80094d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80094dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3b04      	subs	r3, #4
 80094e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	f023 0201 	bic.w	r2, r3, #1
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3b04      	subs	r3, #4
 80094f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094f4:	4a08      	ldr	r2, [pc, #32]	; (8009518 <pxPortInitialiseStack+0x54>)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	3b14      	subs	r3, #20
 80094fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	3b20      	subs	r3, #32
 800950a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800950c:	68fb      	ldr	r3, [r7, #12]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3714      	adds	r7, #20
 8009512:	46bd      	mov	sp, r7
 8009514:	bc80      	pop	{r7}
 8009516:	4770      	bx	lr
 8009518:	0800951d 	.word	0x0800951d

0800951c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009522:	2300      	movs	r3, #0
 8009524:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009526:	4b12      	ldr	r3, [pc, #72]	; (8009570 <prvTaskExitError+0x54>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800952e:	d00a      	beq.n	8009546 <prvTaskExitError+0x2a>
	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	60fb      	str	r3, [r7, #12]
}
 8009542:	bf00      	nop
 8009544:	e7fe      	b.n	8009544 <prvTaskExitError+0x28>
	__asm volatile
 8009546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	60bb      	str	r3, [r7, #8]
}
 8009558:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800955a:	bf00      	nop
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d0fc      	beq.n	800955c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009562:	bf00      	nop
 8009564:	bf00      	nop
 8009566:	3714      	adds	r7, #20
 8009568:	46bd      	mov	sp, r7
 800956a:	bc80      	pop	{r7}
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	20000248 	.word	0x20000248
	...

08009580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009580:	4b07      	ldr	r3, [pc, #28]	; (80095a0 <pxCurrentTCBConst2>)
 8009582:	6819      	ldr	r1, [r3, #0]
 8009584:	6808      	ldr	r0, [r1, #0]
 8009586:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800958a:	f380 8809 	msr	PSP, r0
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f04f 0000 	mov.w	r0, #0
 8009596:	f380 8811 	msr	BASEPRI, r0
 800959a:	f04e 0e0d 	orr.w	lr, lr, #13
 800959e:	4770      	bx	lr

080095a0 <pxCurrentTCBConst2>:
 80095a0:	200015cc 	.word	0x200015cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80095a4:	bf00      	nop
 80095a6:	bf00      	nop

080095a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80095a8:	4806      	ldr	r0, [pc, #24]	; (80095c4 <prvPortStartFirstTask+0x1c>)
 80095aa:	6800      	ldr	r0, [r0, #0]
 80095ac:	6800      	ldr	r0, [r0, #0]
 80095ae:	f380 8808 	msr	MSP, r0
 80095b2:	b662      	cpsie	i
 80095b4:	b661      	cpsie	f
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	df00      	svc	0
 80095c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80095c2:	bf00      	nop
 80095c4:	e000ed08 	.word	0xe000ed08

080095c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095ce:	4b32      	ldr	r3, [pc, #200]	; (8009698 <xPortStartScheduler+0xd0>)
 80095d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	22ff      	movs	r2, #255	; 0xff
 80095de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095e8:	78fb      	ldrb	r3, [r7, #3]
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	4b2a      	ldr	r3, [pc, #168]	; (800969c <xPortStartScheduler+0xd4>)
 80095f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095f6:	4b2a      	ldr	r3, [pc, #168]	; (80096a0 <xPortStartScheduler+0xd8>)
 80095f8:	2207      	movs	r2, #7
 80095fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095fc:	e009      	b.n	8009612 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80095fe:	4b28      	ldr	r3, [pc, #160]	; (80096a0 <xPortStartScheduler+0xd8>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	3b01      	subs	r3, #1
 8009604:	4a26      	ldr	r2, [pc, #152]	; (80096a0 <xPortStartScheduler+0xd8>)
 8009606:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009608:	78fb      	ldrb	r3, [r7, #3]
 800960a:	b2db      	uxtb	r3, r3
 800960c:	005b      	lsls	r3, r3, #1
 800960e:	b2db      	uxtb	r3, r3
 8009610:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009612:	78fb      	ldrb	r3, [r7, #3]
 8009614:	b2db      	uxtb	r3, r3
 8009616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800961a:	2b80      	cmp	r3, #128	; 0x80
 800961c:	d0ef      	beq.n	80095fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800961e:	4b20      	ldr	r3, [pc, #128]	; (80096a0 <xPortStartScheduler+0xd8>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f1c3 0307 	rsb	r3, r3, #7
 8009626:	2b04      	cmp	r3, #4
 8009628:	d00a      	beq.n	8009640 <xPortStartScheduler+0x78>
	__asm volatile
 800962a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962e:	f383 8811 	msr	BASEPRI, r3
 8009632:	f3bf 8f6f 	isb	sy
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	60bb      	str	r3, [r7, #8]
}
 800963c:	bf00      	nop
 800963e:	e7fe      	b.n	800963e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009640:	4b17      	ldr	r3, [pc, #92]	; (80096a0 <xPortStartScheduler+0xd8>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	021b      	lsls	r3, r3, #8
 8009646:	4a16      	ldr	r2, [pc, #88]	; (80096a0 <xPortStartScheduler+0xd8>)
 8009648:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800964a:	4b15      	ldr	r3, [pc, #84]	; (80096a0 <xPortStartScheduler+0xd8>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009652:	4a13      	ldr	r2, [pc, #76]	; (80096a0 <xPortStartScheduler+0xd8>)
 8009654:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	b2da      	uxtb	r2, r3
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800965e:	4b11      	ldr	r3, [pc, #68]	; (80096a4 <xPortStartScheduler+0xdc>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a10      	ldr	r2, [pc, #64]	; (80096a4 <xPortStartScheduler+0xdc>)
 8009664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009668:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800966a:	4b0e      	ldr	r3, [pc, #56]	; (80096a4 <xPortStartScheduler+0xdc>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a0d      	ldr	r2, [pc, #52]	; (80096a4 <xPortStartScheduler+0xdc>)
 8009670:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009674:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009676:	f000 f8b9 	bl	80097ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800967a:	4b0b      	ldr	r3, [pc, #44]	; (80096a8 <xPortStartScheduler+0xe0>)
 800967c:	2200      	movs	r2, #0
 800967e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009680:	f7ff ff92 	bl	80095a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009684:	f7ff fa90 	bl	8008ba8 <vTaskSwitchContext>
	prvTaskExitError();
 8009688:	f7ff ff48 	bl	800951c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	e000e400 	.word	0xe000e400
 800969c:	200016f8 	.word	0x200016f8
 80096a0:	200016fc 	.word	0x200016fc
 80096a4:	e000ed20 	.word	0xe000ed20
 80096a8:	20000248 	.word	0x20000248

080096ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
	__asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b6:	f383 8811 	msr	BASEPRI, r3
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	607b      	str	r3, [r7, #4]
}
 80096c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096c6:	4b0f      	ldr	r3, [pc, #60]	; (8009704 <vPortEnterCritical+0x58>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3301      	adds	r3, #1
 80096cc:	4a0d      	ldr	r2, [pc, #52]	; (8009704 <vPortEnterCritical+0x58>)
 80096ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80096d0:	4b0c      	ldr	r3, [pc, #48]	; (8009704 <vPortEnterCritical+0x58>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d10f      	bne.n	80096f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096d8:	4b0b      	ldr	r3, [pc, #44]	; (8009708 <vPortEnterCritical+0x5c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00a      	beq.n	80096f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80096e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	603b      	str	r3, [r7, #0]
}
 80096f4:	bf00      	nop
 80096f6:	e7fe      	b.n	80096f6 <vPortEnterCritical+0x4a>
	}
}
 80096f8:	bf00      	nop
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bc80      	pop	{r7}
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	20000248 	.word	0x20000248
 8009708:	e000ed04 	.word	0xe000ed04

0800970c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009712:	4b11      	ldr	r3, [pc, #68]	; (8009758 <vPortExitCritical+0x4c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10a      	bne.n	8009730 <vPortExitCritical+0x24>
	__asm volatile
 800971a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971e:	f383 8811 	msr	BASEPRI, r3
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	f3bf 8f4f 	dsb	sy
 800972a:	607b      	str	r3, [r7, #4]
}
 800972c:	bf00      	nop
 800972e:	e7fe      	b.n	800972e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009730:	4b09      	ldr	r3, [pc, #36]	; (8009758 <vPortExitCritical+0x4c>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	3b01      	subs	r3, #1
 8009736:	4a08      	ldr	r2, [pc, #32]	; (8009758 <vPortExitCritical+0x4c>)
 8009738:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800973a:	4b07      	ldr	r3, [pc, #28]	; (8009758 <vPortExitCritical+0x4c>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d105      	bne.n	800974e <vPortExitCritical+0x42>
 8009742:	2300      	movs	r3, #0
 8009744:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	f383 8811 	msr	BASEPRI, r3
}
 800974c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800974e:	bf00      	nop
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	bc80      	pop	{r7}
 8009756:	4770      	bx	lr
 8009758:	20000248 	.word	0x20000248
 800975c:	00000000 	.word	0x00000000

08009760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009760:	f3ef 8009 	mrs	r0, PSP
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	4b0d      	ldr	r3, [pc, #52]	; (80097a0 <pxCurrentTCBConst>)
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009770:	6010      	str	r0, [r2, #0]
 8009772:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009776:	f04f 0050 	mov.w	r0, #80	; 0x50
 800977a:	f380 8811 	msr	BASEPRI, r0
 800977e:	f7ff fa13 	bl	8008ba8 <vTaskSwitchContext>
 8009782:	f04f 0000 	mov.w	r0, #0
 8009786:	f380 8811 	msr	BASEPRI, r0
 800978a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800978e:	6819      	ldr	r1, [r3, #0]
 8009790:	6808      	ldr	r0, [r1, #0]
 8009792:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009796:	f380 8809 	msr	PSP, r0
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	4770      	bx	lr

080097a0 <pxCurrentTCBConst>:
 80097a0:	200015cc 	.word	0x200015cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop

080097a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	607b      	str	r3, [r7, #4]
}
 80097c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097c2:	f7ff f933 	bl	8008a2c <xTaskIncrementTick>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d003      	beq.n	80097d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097cc:	4b06      	ldr	r3, [pc, #24]	; (80097e8 <SysTick_Handler+0x40>)
 80097ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	2300      	movs	r3, #0
 80097d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	f383 8811 	msr	BASEPRI, r3
}
 80097de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80097e0:	bf00      	nop
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	e000ed04 	.word	0xe000ed04

080097ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80097ec:	b480      	push	{r7}
 80097ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097f0:	4b0a      	ldr	r3, [pc, #40]	; (800981c <vPortSetupTimerInterrupt+0x30>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097f6:	4b0a      	ldr	r3, [pc, #40]	; (8009820 <vPortSetupTimerInterrupt+0x34>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097fc:	4b09      	ldr	r3, [pc, #36]	; (8009824 <vPortSetupTimerInterrupt+0x38>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a09      	ldr	r2, [pc, #36]	; (8009828 <vPortSetupTimerInterrupt+0x3c>)
 8009802:	fba2 2303 	umull	r2, r3, r2, r3
 8009806:	099b      	lsrs	r3, r3, #6
 8009808:	4a08      	ldr	r2, [pc, #32]	; (800982c <vPortSetupTimerInterrupt+0x40>)
 800980a:	3b01      	subs	r3, #1
 800980c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800980e:	4b03      	ldr	r3, [pc, #12]	; (800981c <vPortSetupTimerInterrupt+0x30>)
 8009810:	2207      	movs	r2, #7
 8009812:	601a      	str	r2, [r3, #0]
}
 8009814:	bf00      	nop
 8009816:	46bd      	mov	sp, r7
 8009818:	bc80      	pop	{r7}
 800981a:	4770      	bx	lr
 800981c:	e000e010 	.word	0xe000e010
 8009820:	e000e018 	.word	0xe000e018
 8009824:	2000023c 	.word	0x2000023c
 8009828:	10624dd3 	.word	0x10624dd3
 800982c:	e000e014 	.word	0xe000e014

08009830 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009836:	f3ef 8305 	mrs	r3, IPSR
 800983a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2b0f      	cmp	r3, #15
 8009840:	d914      	bls.n	800986c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009842:	4a16      	ldr	r2, [pc, #88]	; (800989c <vPortValidateInterruptPriority+0x6c>)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	4413      	add	r3, r2
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800984c:	4b14      	ldr	r3, [pc, #80]	; (80098a0 <vPortValidateInterruptPriority+0x70>)
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	7afa      	ldrb	r2, [r7, #11]
 8009852:	429a      	cmp	r2, r3
 8009854:	d20a      	bcs.n	800986c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	607b      	str	r3, [r7, #4]
}
 8009868:	bf00      	nop
 800986a:	e7fe      	b.n	800986a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800986c:	4b0d      	ldr	r3, [pc, #52]	; (80098a4 <vPortValidateInterruptPriority+0x74>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009874:	4b0c      	ldr	r3, [pc, #48]	; (80098a8 <vPortValidateInterruptPriority+0x78>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	429a      	cmp	r2, r3
 800987a:	d90a      	bls.n	8009892 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800987c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009880:	f383 8811 	msr	BASEPRI, r3
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	603b      	str	r3, [r7, #0]
}
 800988e:	bf00      	nop
 8009890:	e7fe      	b.n	8009890 <vPortValidateInterruptPriority+0x60>
	}
 8009892:	bf00      	nop
 8009894:	3714      	adds	r7, #20
 8009896:	46bd      	mov	sp, r7
 8009898:	bc80      	pop	{r7}
 800989a:	4770      	bx	lr
 800989c:	e000e3f0 	.word	0xe000e3f0
 80098a0:	200016f8 	.word	0x200016f8
 80098a4:	e000ed0c 	.word	0xe000ed0c
 80098a8:	200016fc 	.word	0x200016fc

080098ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b08a      	sub	sp, #40	; 0x28
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80098b4:	2300      	movs	r3, #0
 80098b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80098b8:	f7ff f80e 	bl	80088d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80098bc:	4b58      	ldr	r3, [pc, #352]	; (8009a20 <pvPortMalloc+0x174>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d101      	bne.n	80098c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80098c4:	f000 f910 	bl	8009ae8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80098c8:	4b56      	ldr	r3, [pc, #344]	; (8009a24 <pvPortMalloc+0x178>)
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4013      	ands	r3, r2
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f040 808e 	bne.w	80099f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d01d      	beq.n	8009918 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80098dc:	2208      	movs	r2, #8
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4413      	add	r3, r2
 80098e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f003 0307 	and.w	r3, r3, #7
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d014      	beq.n	8009918 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f023 0307 	bic.w	r3, r3, #7
 80098f4:	3308      	adds	r3, #8
 80098f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f003 0307 	and.w	r3, r3, #7
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00a      	beq.n	8009918 <pvPortMalloc+0x6c>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	617b      	str	r3, [r7, #20]
}
 8009914:	bf00      	nop
 8009916:	e7fe      	b.n	8009916 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d069      	beq.n	80099f2 <pvPortMalloc+0x146>
 800991e:	4b42      	ldr	r3, [pc, #264]	; (8009a28 <pvPortMalloc+0x17c>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	429a      	cmp	r2, r3
 8009926:	d864      	bhi.n	80099f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009928:	4b40      	ldr	r3, [pc, #256]	; (8009a2c <pvPortMalloc+0x180>)
 800992a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800992c:	4b3f      	ldr	r3, [pc, #252]	; (8009a2c <pvPortMalloc+0x180>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009932:	e004      	b.n	800993e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009936:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800993e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	429a      	cmp	r2, r3
 8009946:	d903      	bls.n	8009950 <pvPortMalloc+0xa4>
 8009948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1f1      	bne.n	8009934 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009950:	4b33      	ldr	r3, [pc, #204]	; (8009a20 <pvPortMalloc+0x174>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009956:	429a      	cmp	r2, r3
 8009958:	d04b      	beq.n	80099f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800995a:	6a3b      	ldr	r3, [r7, #32]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2208      	movs	r2, #8
 8009960:	4413      	add	r3, r2
 8009962:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	6a3b      	ldr	r3, [r7, #32]
 800996a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996e:	685a      	ldr	r2, [r3, #4]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	1ad2      	subs	r2, r2, r3
 8009974:	2308      	movs	r3, #8
 8009976:	005b      	lsls	r3, r3, #1
 8009978:	429a      	cmp	r2, r3
 800997a:	d91f      	bls.n	80099bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800997c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4413      	add	r3, r2
 8009982:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	f003 0307 	and.w	r3, r3, #7
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00a      	beq.n	80099a4 <pvPortMalloc+0xf8>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	613b      	str	r3, [r7, #16]
}
 80099a0:	bf00      	nop
 80099a2:	e7fe      	b.n	80099a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a6:	685a      	ldr	r2, [r3, #4]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	1ad2      	subs	r2, r2, r3
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099b6:	69b8      	ldr	r0, [r7, #24]
 80099b8:	f000 f8f8 	bl	8009bac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099bc:	4b1a      	ldr	r3, [pc, #104]	; (8009a28 <pvPortMalloc+0x17c>)
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	4a18      	ldr	r2, [pc, #96]	; (8009a28 <pvPortMalloc+0x17c>)
 80099c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099ca:	4b17      	ldr	r3, [pc, #92]	; (8009a28 <pvPortMalloc+0x17c>)
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	4b18      	ldr	r3, [pc, #96]	; (8009a30 <pvPortMalloc+0x184>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d203      	bcs.n	80099de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099d6:	4b14      	ldr	r3, [pc, #80]	; (8009a28 <pvPortMalloc+0x17c>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a15      	ldr	r2, [pc, #84]	; (8009a30 <pvPortMalloc+0x184>)
 80099dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80099de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e0:	685a      	ldr	r2, [r3, #4]
 80099e2:	4b10      	ldr	r3, [pc, #64]	; (8009a24 <pvPortMalloc+0x178>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	431a      	orrs	r2, r3
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80099ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ee:	2200      	movs	r2, #0
 80099f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80099f2:	f7fe ff7f 	bl	80088f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	f003 0307 	and.w	r3, r3, #7
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00a      	beq.n	8009a16 <pvPortMalloc+0x16a>
	__asm volatile
 8009a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	60fb      	str	r3, [r7, #12]
}
 8009a12:	bf00      	nop
 8009a14:	e7fe      	b.n	8009a14 <pvPortMalloc+0x168>
	return pvReturn;
 8009a16:	69fb      	ldr	r3, [r7, #28]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3728      	adds	r7, #40	; 0x28
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	20009fc0 	.word	0x20009fc0
 8009a24:	20009fcc 	.word	0x20009fcc
 8009a28:	20009fc4 	.word	0x20009fc4
 8009a2c:	20009fb8 	.word	0x20009fb8
 8009a30:	20009fc8 	.word	0x20009fc8

08009a34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d048      	beq.n	8009ad8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a46:	2308      	movs	r3, #8
 8009a48:	425b      	negs	r3, r3
 8009a4a:	697a      	ldr	r2, [r7, #20]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	685a      	ldr	r2, [r3, #4]
 8009a58:	4b21      	ldr	r3, [pc, #132]	; (8009ae0 <vPortFree+0xac>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10a      	bne.n	8009a78 <vPortFree+0x44>
	__asm volatile
 8009a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a66:	f383 8811 	msr	BASEPRI, r3
 8009a6a:	f3bf 8f6f 	isb	sy
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	60fb      	str	r3, [r7, #12]
}
 8009a74:	bf00      	nop
 8009a76:	e7fe      	b.n	8009a76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00a      	beq.n	8009a96 <vPortFree+0x62>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	60bb      	str	r3, [r7, #8]
}
 8009a92:	bf00      	nop
 8009a94:	e7fe      	b.n	8009a94 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	685a      	ldr	r2, [r3, #4]
 8009a9a:	4b11      	ldr	r3, [pc, #68]	; (8009ae0 <vPortFree+0xac>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d019      	beq.n	8009ad8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d115      	bne.n	8009ad8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	4b0b      	ldr	r3, [pc, #44]	; (8009ae0 <vPortFree+0xac>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	43db      	mvns	r3, r3
 8009ab6:	401a      	ands	r2, r3
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009abc:	f7fe ff0c 	bl	80088d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	685a      	ldr	r2, [r3, #4]
 8009ac4:	4b07      	ldr	r3, [pc, #28]	; (8009ae4 <vPortFree+0xb0>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4413      	add	r3, r2
 8009aca:	4a06      	ldr	r2, [pc, #24]	; (8009ae4 <vPortFree+0xb0>)
 8009acc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009ace:	6938      	ldr	r0, [r7, #16]
 8009ad0:	f000 f86c 	bl	8009bac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009ad4:	f7fe ff0e 	bl	80088f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ad8:	bf00      	nop
 8009ada:	3718      	adds	r7, #24
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	20009fcc 	.word	0x20009fcc
 8009ae4:	20009fc4 	.word	0x20009fc4

08009ae8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009aee:	f648 03b8 	movw	r3, #35000	; 0x88b8
 8009af2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009af4:	4b27      	ldr	r3, [pc, #156]	; (8009b94 <prvHeapInit+0xac>)
 8009af6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f003 0307 	and.w	r3, r3, #7
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00c      	beq.n	8009b1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	3307      	adds	r3, #7
 8009b06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f023 0307 	bic.w	r3, r3, #7
 8009b0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b10:	68ba      	ldr	r2, [r7, #8]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	4a1f      	ldr	r2, [pc, #124]	; (8009b94 <prvHeapInit+0xac>)
 8009b18:	4413      	add	r3, r2
 8009b1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b20:	4a1d      	ldr	r2, [pc, #116]	; (8009b98 <prvHeapInit+0xb0>)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b26:	4b1c      	ldr	r3, [pc, #112]	; (8009b98 <prvHeapInit+0xb0>)
 8009b28:	2200      	movs	r2, #0
 8009b2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	4413      	add	r3, r2
 8009b32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b34:	2208      	movs	r2, #8
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	1a9b      	subs	r3, r3, r2
 8009b3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f023 0307 	bic.w	r3, r3, #7
 8009b42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	4a15      	ldr	r2, [pc, #84]	; (8009b9c <prvHeapInit+0xb4>)
 8009b48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b4a:	4b14      	ldr	r3, [pc, #80]	; (8009b9c <prvHeapInit+0xb4>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b52:	4b12      	ldr	r3, [pc, #72]	; (8009b9c <prvHeapInit+0xb4>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2200      	movs	r2, #0
 8009b58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	1ad2      	subs	r2, r2, r3
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b68:	4b0c      	ldr	r3, [pc, #48]	; (8009b9c <prvHeapInit+0xb4>)
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	4a0a      	ldr	r2, [pc, #40]	; (8009ba0 <prvHeapInit+0xb8>)
 8009b76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	4a09      	ldr	r2, [pc, #36]	; (8009ba4 <prvHeapInit+0xbc>)
 8009b7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b80:	4b09      	ldr	r3, [pc, #36]	; (8009ba8 <prvHeapInit+0xc0>)
 8009b82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009b86:	601a      	str	r2, [r3, #0]
}
 8009b88:	bf00      	nop
 8009b8a:	3714      	adds	r7, #20
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bc80      	pop	{r7}
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	20001700 	.word	0x20001700
 8009b98:	20009fb8 	.word	0x20009fb8
 8009b9c:	20009fc0 	.word	0x20009fc0
 8009ba0:	20009fc8 	.word	0x20009fc8
 8009ba4:	20009fc4 	.word	0x20009fc4
 8009ba8:	20009fcc 	.word	0x20009fcc

08009bac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009bb4:	4b27      	ldr	r3, [pc, #156]	; (8009c54 <prvInsertBlockIntoFreeList+0xa8>)
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	e002      	b.n	8009bc0 <prvInsertBlockIntoFreeList+0x14>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d8f7      	bhi.n	8009bba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d108      	bne.n	8009bee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	685a      	ldr	r2, [r3, #4]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	441a      	add	r2, r3
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	441a      	add	r2, r3
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d118      	bne.n	8009c34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	4b14      	ldr	r3, [pc, #80]	; (8009c58 <prvInsertBlockIntoFreeList+0xac>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d00d      	beq.n	8009c2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	441a      	add	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	e008      	b.n	8009c3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c2a:	4b0b      	ldr	r3, [pc, #44]	; (8009c58 <prvInsertBlockIntoFreeList+0xac>)
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	601a      	str	r2, [r3, #0]
 8009c32:	e003      	b.n	8009c3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d002      	beq.n	8009c4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c4a:	bf00      	nop
 8009c4c:	3714      	adds	r7, #20
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bc80      	pop	{r7}
 8009c52:	4770      	bx	lr
 8009c54:	20009fb8 	.word	0x20009fb8
 8009c58:	20009fc0 	.word	0x20009fc0

08009c5c <__errno>:
 8009c5c:	4b01      	ldr	r3, [pc, #4]	; (8009c64 <__errno+0x8>)
 8009c5e:	6818      	ldr	r0, [r3, #0]
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	2000024c 	.word	0x2000024c

08009c68 <std>:
 8009c68:	2300      	movs	r3, #0
 8009c6a:	b510      	push	{r4, lr}
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	e9c0 3300 	strd	r3, r3, [r0]
 8009c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c76:	6083      	str	r3, [r0, #8]
 8009c78:	8181      	strh	r1, [r0, #12]
 8009c7a:	6643      	str	r3, [r0, #100]	; 0x64
 8009c7c:	81c2      	strh	r2, [r0, #14]
 8009c7e:	6183      	str	r3, [r0, #24]
 8009c80:	4619      	mov	r1, r3
 8009c82:	2208      	movs	r2, #8
 8009c84:	305c      	adds	r0, #92	; 0x5c
 8009c86:	f000 f92b 	bl	8009ee0 <memset>
 8009c8a:	4b05      	ldr	r3, [pc, #20]	; (8009ca0 <std+0x38>)
 8009c8c:	6224      	str	r4, [r4, #32]
 8009c8e:	6263      	str	r3, [r4, #36]	; 0x24
 8009c90:	4b04      	ldr	r3, [pc, #16]	; (8009ca4 <std+0x3c>)
 8009c92:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c94:	4b04      	ldr	r3, [pc, #16]	; (8009ca8 <std+0x40>)
 8009c96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c98:	4b04      	ldr	r3, [pc, #16]	; (8009cac <std+0x44>)
 8009c9a:	6323      	str	r3, [r4, #48]	; 0x30
 8009c9c:	bd10      	pop	{r4, pc}
 8009c9e:	bf00      	nop
 8009ca0:	0800aa9d 	.word	0x0800aa9d
 8009ca4:	0800aabf 	.word	0x0800aabf
 8009ca8:	0800aaf7 	.word	0x0800aaf7
 8009cac:	0800ab1b 	.word	0x0800ab1b

08009cb0 <_cleanup_r>:
 8009cb0:	4901      	ldr	r1, [pc, #4]	; (8009cb8 <_cleanup_r+0x8>)
 8009cb2:	f000 b8af 	b.w	8009e14 <_fwalk_reent>
 8009cb6:	bf00      	nop
 8009cb8:	0800c969 	.word	0x0800c969

08009cbc <__sfmoreglue>:
 8009cbc:	2268      	movs	r2, #104	; 0x68
 8009cbe:	b570      	push	{r4, r5, r6, lr}
 8009cc0:	1e4d      	subs	r5, r1, #1
 8009cc2:	4355      	muls	r5, r2
 8009cc4:	460e      	mov	r6, r1
 8009cc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009cca:	f000 f979 	bl	8009fc0 <_malloc_r>
 8009cce:	4604      	mov	r4, r0
 8009cd0:	b140      	cbz	r0, 8009ce4 <__sfmoreglue+0x28>
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	e9c0 1600 	strd	r1, r6, [r0]
 8009cd8:	300c      	adds	r0, #12
 8009cda:	60a0      	str	r0, [r4, #8]
 8009cdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ce0:	f000 f8fe 	bl	8009ee0 <memset>
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	bd70      	pop	{r4, r5, r6, pc}

08009ce8 <__sfp_lock_acquire>:
 8009ce8:	4801      	ldr	r0, [pc, #4]	; (8009cf0 <__sfp_lock_acquire+0x8>)
 8009cea:	f000 b8d8 	b.w	8009e9e <__retarget_lock_acquire_recursive>
 8009cee:	bf00      	nop
 8009cf0:	20009fd1 	.word	0x20009fd1

08009cf4 <__sfp_lock_release>:
 8009cf4:	4801      	ldr	r0, [pc, #4]	; (8009cfc <__sfp_lock_release+0x8>)
 8009cf6:	f000 b8d3 	b.w	8009ea0 <__retarget_lock_release_recursive>
 8009cfa:	bf00      	nop
 8009cfc:	20009fd1 	.word	0x20009fd1

08009d00 <__sinit_lock_acquire>:
 8009d00:	4801      	ldr	r0, [pc, #4]	; (8009d08 <__sinit_lock_acquire+0x8>)
 8009d02:	f000 b8cc 	b.w	8009e9e <__retarget_lock_acquire_recursive>
 8009d06:	bf00      	nop
 8009d08:	20009fd2 	.word	0x20009fd2

08009d0c <__sinit_lock_release>:
 8009d0c:	4801      	ldr	r0, [pc, #4]	; (8009d14 <__sinit_lock_release+0x8>)
 8009d0e:	f000 b8c7 	b.w	8009ea0 <__retarget_lock_release_recursive>
 8009d12:	bf00      	nop
 8009d14:	20009fd2 	.word	0x20009fd2

08009d18 <__sinit>:
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	f7ff fff0 	bl	8009d00 <__sinit_lock_acquire>
 8009d20:	69a3      	ldr	r3, [r4, #24]
 8009d22:	b11b      	cbz	r3, 8009d2c <__sinit+0x14>
 8009d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d28:	f7ff bff0 	b.w	8009d0c <__sinit_lock_release>
 8009d2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d30:	6523      	str	r3, [r4, #80]	; 0x50
 8009d32:	4b13      	ldr	r3, [pc, #76]	; (8009d80 <__sinit+0x68>)
 8009d34:	4a13      	ldr	r2, [pc, #76]	; (8009d84 <__sinit+0x6c>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d3a:	42a3      	cmp	r3, r4
 8009d3c:	bf08      	it	eq
 8009d3e:	2301      	moveq	r3, #1
 8009d40:	4620      	mov	r0, r4
 8009d42:	bf08      	it	eq
 8009d44:	61a3      	streq	r3, [r4, #24]
 8009d46:	f000 f81f 	bl	8009d88 <__sfp>
 8009d4a:	6060      	str	r0, [r4, #4]
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f000 f81b 	bl	8009d88 <__sfp>
 8009d52:	60a0      	str	r0, [r4, #8]
 8009d54:	4620      	mov	r0, r4
 8009d56:	f000 f817 	bl	8009d88 <__sfp>
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	2104      	movs	r1, #4
 8009d5e:	60e0      	str	r0, [r4, #12]
 8009d60:	6860      	ldr	r0, [r4, #4]
 8009d62:	f7ff ff81 	bl	8009c68 <std>
 8009d66:	2201      	movs	r2, #1
 8009d68:	2109      	movs	r1, #9
 8009d6a:	68a0      	ldr	r0, [r4, #8]
 8009d6c:	f7ff ff7c 	bl	8009c68 <std>
 8009d70:	2202      	movs	r2, #2
 8009d72:	2112      	movs	r1, #18
 8009d74:	68e0      	ldr	r0, [r4, #12]
 8009d76:	f7ff ff77 	bl	8009c68 <std>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	61a3      	str	r3, [r4, #24]
 8009d7e:	e7d1      	b.n	8009d24 <__sinit+0xc>
 8009d80:	0800e980 	.word	0x0800e980
 8009d84:	08009cb1 	.word	0x08009cb1

08009d88 <__sfp>:
 8009d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8a:	4607      	mov	r7, r0
 8009d8c:	f7ff ffac 	bl	8009ce8 <__sfp_lock_acquire>
 8009d90:	4b1e      	ldr	r3, [pc, #120]	; (8009e0c <__sfp+0x84>)
 8009d92:	681e      	ldr	r6, [r3, #0]
 8009d94:	69b3      	ldr	r3, [r6, #24]
 8009d96:	b913      	cbnz	r3, 8009d9e <__sfp+0x16>
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f7ff ffbd 	bl	8009d18 <__sinit>
 8009d9e:	3648      	adds	r6, #72	; 0x48
 8009da0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009da4:	3b01      	subs	r3, #1
 8009da6:	d503      	bpl.n	8009db0 <__sfp+0x28>
 8009da8:	6833      	ldr	r3, [r6, #0]
 8009daa:	b30b      	cbz	r3, 8009df0 <__sfp+0x68>
 8009dac:	6836      	ldr	r6, [r6, #0]
 8009dae:	e7f7      	b.n	8009da0 <__sfp+0x18>
 8009db0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009db4:	b9d5      	cbnz	r5, 8009dec <__sfp+0x64>
 8009db6:	4b16      	ldr	r3, [pc, #88]	; (8009e10 <__sfp+0x88>)
 8009db8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009dbc:	60e3      	str	r3, [r4, #12]
 8009dbe:	6665      	str	r5, [r4, #100]	; 0x64
 8009dc0:	f000 f86c 	bl	8009e9c <__retarget_lock_init_recursive>
 8009dc4:	f7ff ff96 	bl	8009cf4 <__sfp_lock_release>
 8009dc8:	2208      	movs	r2, #8
 8009dca:	4629      	mov	r1, r5
 8009dcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009dd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009dd4:	6025      	str	r5, [r4, #0]
 8009dd6:	61a5      	str	r5, [r4, #24]
 8009dd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ddc:	f000 f880 	bl	8009ee0 <memset>
 8009de0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009de4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009de8:	4620      	mov	r0, r4
 8009dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dec:	3468      	adds	r4, #104	; 0x68
 8009dee:	e7d9      	b.n	8009da4 <__sfp+0x1c>
 8009df0:	2104      	movs	r1, #4
 8009df2:	4638      	mov	r0, r7
 8009df4:	f7ff ff62 	bl	8009cbc <__sfmoreglue>
 8009df8:	4604      	mov	r4, r0
 8009dfa:	6030      	str	r0, [r6, #0]
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	d1d5      	bne.n	8009dac <__sfp+0x24>
 8009e00:	f7ff ff78 	bl	8009cf4 <__sfp_lock_release>
 8009e04:	230c      	movs	r3, #12
 8009e06:	603b      	str	r3, [r7, #0]
 8009e08:	e7ee      	b.n	8009de8 <__sfp+0x60>
 8009e0a:	bf00      	nop
 8009e0c:	0800e980 	.word	0x0800e980
 8009e10:	ffff0001 	.word	0xffff0001

08009e14 <_fwalk_reent>:
 8009e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e18:	4606      	mov	r6, r0
 8009e1a:	4688      	mov	r8, r1
 8009e1c:	2700      	movs	r7, #0
 8009e1e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e26:	f1b9 0901 	subs.w	r9, r9, #1
 8009e2a:	d505      	bpl.n	8009e38 <_fwalk_reent+0x24>
 8009e2c:	6824      	ldr	r4, [r4, #0]
 8009e2e:	2c00      	cmp	r4, #0
 8009e30:	d1f7      	bne.n	8009e22 <_fwalk_reent+0xe>
 8009e32:	4638      	mov	r0, r7
 8009e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e38:	89ab      	ldrh	r3, [r5, #12]
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d907      	bls.n	8009e4e <_fwalk_reent+0x3a>
 8009e3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e42:	3301      	adds	r3, #1
 8009e44:	d003      	beq.n	8009e4e <_fwalk_reent+0x3a>
 8009e46:	4629      	mov	r1, r5
 8009e48:	4630      	mov	r0, r6
 8009e4a:	47c0      	blx	r8
 8009e4c:	4307      	orrs	r7, r0
 8009e4e:	3568      	adds	r5, #104	; 0x68
 8009e50:	e7e9      	b.n	8009e26 <_fwalk_reent+0x12>
	...

08009e54 <__libc_init_array>:
 8009e54:	b570      	push	{r4, r5, r6, lr}
 8009e56:	2600      	movs	r6, #0
 8009e58:	4d0c      	ldr	r5, [pc, #48]	; (8009e8c <__libc_init_array+0x38>)
 8009e5a:	4c0d      	ldr	r4, [pc, #52]	; (8009e90 <__libc_init_array+0x3c>)
 8009e5c:	1b64      	subs	r4, r4, r5
 8009e5e:	10a4      	asrs	r4, r4, #2
 8009e60:	42a6      	cmp	r6, r4
 8009e62:	d109      	bne.n	8009e78 <__libc_init_array+0x24>
 8009e64:	f004 fb18 	bl	800e498 <_init>
 8009e68:	2600      	movs	r6, #0
 8009e6a:	4d0a      	ldr	r5, [pc, #40]	; (8009e94 <__libc_init_array+0x40>)
 8009e6c:	4c0a      	ldr	r4, [pc, #40]	; (8009e98 <__libc_init_array+0x44>)
 8009e6e:	1b64      	subs	r4, r4, r5
 8009e70:	10a4      	asrs	r4, r4, #2
 8009e72:	42a6      	cmp	r6, r4
 8009e74:	d105      	bne.n	8009e82 <__libc_init_array+0x2e>
 8009e76:	bd70      	pop	{r4, r5, r6, pc}
 8009e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e7c:	4798      	blx	r3
 8009e7e:	3601      	adds	r6, #1
 8009e80:	e7ee      	b.n	8009e60 <__libc_init_array+0xc>
 8009e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e86:	4798      	blx	r3
 8009e88:	3601      	adds	r6, #1
 8009e8a:	e7f2      	b.n	8009e72 <__libc_init_array+0x1e>
 8009e8c:	0800ee20 	.word	0x0800ee20
 8009e90:	0800ee20 	.word	0x0800ee20
 8009e94:	0800ee20 	.word	0x0800ee20
 8009e98:	0800ee24 	.word	0x0800ee24

08009e9c <__retarget_lock_init_recursive>:
 8009e9c:	4770      	bx	lr

08009e9e <__retarget_lock_acquire_recursive>:
 8009e9e:	4770      	bx	lr

08009ea0 <__retarget_lock_release_recursive>:
 8009ea0:	4770      	bx	lr
	...

08009ea4 <malloc>:
 8009ea4:	4b02      	ldr	r3, [pc, #8]	; (8009eb0 <malloc+0xc>)
 8009ea6:	4601      	mov	r1, r0
 8009ea8:	6818      	ldr	r0, [r3, #0]
 8009eaa:	f000 b889 	b.w	8009fc0 <_malloc_r>
 8009eae:	bf00      	nop
 8009eb0:	2000024c 	.word	0x2000024c

08009eb4 <free>:
 8009eb4:	4b02      	ldr	r3, [pc, #8]	; (8009ec0 <free+0xc>)
 8009eb6:	4601      	mov	r1, r0
 8009eb8:	6818      	ldr	r0, [r3, #0]
 8009eba:	f000 b819 	b.w	8009ef0 <_free_r>
 8009ebe:	bf00      	nop
 8009ec0:	2000024c 	.word	0x2000024c

08009ec4 <memcpy>:
 8009ec4:	440a      	add	r2, r1
 8009ec6:	4291      	cmp	r1, r2
 8009ec8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ecc:	d100      	bne.n	8009ed0 <memcpy+0xc>
 8009ece:	4770      	bx	lr
 8009ed0:	b510      	push	{r4, lr}
 8009ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ed6:	4291      	cmp	r1, r2
 8009ed8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009edc:	d1f9      	bne.n	8009ed2 <memcpy+0xe>
 8009ede:	bd10      	pop	{r4, pc}

08009ee0 <memset>:
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	4402      	add	r2, r0
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d100      	bne.n	8009eea <memset+0xa>
 8009ee8:	4770      	bx	lr
 8009eea:	f803 1b01 	strb.w	r1, [r3], #1
 8009eee:	e7f9      	b.n	8009ee4 <memset+0x4>

08009ef0 <_free_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4605      	mov	r5, r0
 8009ef4:	2900      	cmp	r1, #0
 8009ef6:	d040      	beq.n	8009f7a <_free_r+0x8a>
 8009ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009efc:	1f0c      	subs	r4, r1, #4
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	bfb8      	it	lt
 8009f02:	18e4      	addlt	r4, r4, r3
 8009f04:	f003 f91a 	bl	800d13c <__malloc_lock>
 8009f08:	4a1c      	ldr	r2, [pc, #112]	; (8009f7c <_free_r+0x8c>)
 8009f0a:	6813      	ldr	r3, [r2, #0]
 8009f0c:	b933      	cbnz	r3, 8009f1c <_free_r+0x2c>
 8009f0e:	6063      	str	r3, [r4, #4]
 8009f10:	6014      	str	r4, [r2, #0]
 8009f12:	4628      	mov	r0, r5
 8009f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f18:	f003 b916 	b.w	800d148 <__malloc_unlock>
 8009f1c:	42a3      	cmp	r3, r4
 8009f1e:	d908      	bls.n	8009f32 <_free_r+0x42>
 8009f20:	6820      	ldr	r0, [r4, #0]
 8009f22:	1821      	adds	r1, r4, r0
 8009f24:	428b      	cmp	r3, r1
 8009f26:	bf01      	itttt	eq
 8009f28:	6819      	ldreq	r1, [r3, #0]
 8009f2a:	685b      	ldreq	r3, [r3, #4]
 8009f2c:	1809      	addeq	r1, r1, r0
 8009f2e:	6021      	streq	r1, [r4, #0]
 8009f30:	e7ed      	b.n	8009f0e <_free_r+0x1e>
 8009f32:	461a      	mov	r2, r3
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	b10b      	cbz	r3, 8009f3c <_free_r+0x4c>
 8009f38:	42a3      	cmp	r3, r4
 8009f3a:	d9fa      	bls.n	8009f32 <_free_r+0x42>
 8009f3c:	6811      	ldr	r1, [r2, #0]
 8009f3e:	1850      	adds	r0, r2, r1
 8009f40:	42a0      	cmp	r0, r4
 8009f42:	d10b      	bne.n	8009f5c <_free_r+0x6c>
 8009f44:	6820      	ldr	r0, [r4, #0]
 8009f46:	4401      	add	r1, r0
 8009f48:	1850      	adds	r0, r2, r1
 8009f4a:	4283      	cmp	r3, r0
 8009f4c:	6011      	str	r1, [r2, #0]
 8009f4e:	d1e0      	bne.n	8009f12 <_free_r+0x22>
 8009f50:	6818      	ldr	r0, [r3, #0]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	4401      	add	r1, r0
 8009f56:	6011      	str	r1, [r2, #0]
 8009f58:	6053      	str	r3, [r2, #4]
 8009f5a:	e7da      	b.n	8009f12 <_free_r+0x22>
 8009f5c:	d902      	bls.n	8009f64 <_free_r+0x74>
 8009f5e:	230c      	movs	r3, #12
 8009f60:	602b      	str	r3, [r5, #0]
 8009f62:	e7d6      	b.n	8009f12 <_free_r+0x22>
 8009f64:	6820      	ldr	r0, [r4, #0]
 8009f66:	1821      	adds	r1, r4, r0
 8009f68:	428b      	cmp	r3, r1
 8009f6a:	bf01      	itttt	eq
 8009f6c:	6819      	ldreq	r1, [r3, #0]
 8009f6e:	685b      	ldreq	r3, [r3, #4]
 8009f70:	1809      	addeq	r1, r1, r0
 8009f72:	6021      	streq	r1, [r4, #0]
 8009f74:	6063      	str	r3, [r4, #4]
 8009f76:	6054      	str	r4, [r2, #4]
 8009f78:	e7cb      	b.n	8009f12 <_free_r+0x22>
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
 8009f7c:	20009fd4 	.word	0x20009fd4

08009f80 <sbrk_aligned>:
 8009f80:	b570      	push	{r4, r5, r6, lr}
 8009f82:	4e0e      	ldr	r6, [pc, #56]	; (8009fbc <sbrk_aligned+0x3c>)
 8009f84:	460c      	mov	r4, r1
 8009f86:	6831      	ldr	r1, [r6, #0]
 8009f88:	4605      	mov	r5, r0
 8009f8a:	b911      	cbnz	r1, 8009f92 <sbrk_aligned+0x12>
 8009f8c:	f000 fd56 	bl	800aa3c <_sbrk_r>
 8009f90:	6030      	str	r0, [r6, #0]
 8009f92:	4621      	mov	r1, r4
 8009f94:	4628      	mov	r0, r5
 8009f96:	f000 fd51 	bl	800aa3c <_sbrk_r>
 8009f9a:	1c43      	adds	r3, r0, #1
 8009f9c:	d00a      	beq.n	8009fb4 <sbrk_aligned+0x34>
 8009f9e:	1cc4      	adds	r4, r0, #3
 8009fa0:	f024 0403 	bic.w	r4, r4, #3
 8009fa4:	42a0      	cmp	r0, r4
 8009fa6:	d007      	beq.n	8009fb8 <sbrk_aligned+0x38>
 8009fa8:	1a21      	subs	r1, r4, r0
 8009faa:	4628      	mov	r0, r5
 8009fac:	f000 fd46 	bl	800aa3c <_sbrk_r>
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	d101      	bne.n	8009fb8 <sbrk_aligned+0x38>
 8009fb4:	f04f 34ff 	mov.w	r4, #4294967295
 8009fb8:	4620      	mov	r0, r4
 8009fba:	bd70      	pop	{r4, r5, r6, pc}
 8009fbc:	20009fd8 	.word	0x20009fd8

08009fc0 <_malloc_r>:
 8009fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc4:	1ccd      	adds	r5, r1, #3
 8009fc6:	f025 0503 	bic.w	r5, r5, #3
 8009fca:	3508      	adds	r5, #8
 8009fcc:	2d0c      	cmp	r5, #12
 8009fce:	bf38      	it	cc
 8009fd0:	250c      	movcc	r5, #12
 8009fd2:	2d00      	cmp	r5, #0
 8009fd4:	4607      	mov	r7, r0
 8009fd6:	db01      	blt.n	8009fdc <_malloc_r+0x1c>
 8009fd8:	42a9      	cmp	r1, r5
 8009fda:	d905      	bls.n	8009fe8 <_malloc_r+0x28>
 8009fdc:	230c      	movs	r3, #12
 8009fde:	2600      	movs	r6, #0
 8009fe0:	603b      	str	r3, [r7, #0]
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe8:	4e2e      	ldr	r6, [pc, #184]	; (800a0a4 <_malloc_r+0xe4>)
 8009fea:	f003 f8a7 	bl	800d13c <__malloc_lock>
 8009fee:	6833      	ldr	r3, [r6, #0]
 8009ff0:	461c      	mov	r4, r3
 8009ff2:	bb34      	cbnz	r4, 800a042 <_malloc_r+0x82>
 8009ff4:	4629      	mov	r1, r5
 8009ff6:	4638      	mov	r0, r7
 8009ff8:	f7ff ffc2 	bl	8009f80 <sbrk_aligned>
 8009ffc:	1c43      	adds	r3, r0, #1
 8009ffe:	4604      	mov	r4, r0
 800a000:	d14d      	bne.n	800a09e <_malloc_r+0xde>
 800a002:	6834      	ldr	r4, [r6, #0]
 800a004:	4626      	mov	r6, r4
 800a006:	2e00      	cmp	r6, #0
 800a008:	d140      	bne.n	800a08c <_malloc_r+0xcc>
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	4631      	mov	r1, r6
 800a00e:	4638      	mov	r0, r7
 800a010:	eb04 0803 	add.w	r8, r4, r3
 800a014:	f000 fd12 	bl	800aa3c <_sbrk_r>
 800a018:	4580      	cmp	r8, r0
 800a01a:	d13a      	bne.n	800a092 <_malloc_r+0xd2>
 800a01c:	6821      	ldr	r1, [r4, #0]
 800a01e:	3503      	adds	r5, #3
 800a020:	1a6d      	subs	r5, r5, r1
 800a022:	f025 0503 	bic.w	r5, r5, #3
 800a026:	3508      	adds	r5, #8
 800a028:	2d0c      	cmp	r5, #12
 800a02a:	bf38      	it	cc
 800a02c:	250c      	movcc	r5, #12
 800a02e:	4638      	mov	r0, r7
 800a030:	4629      	mov	r1, r5
 800a032:	f7ff ffa5 	bl	8009f80 <sbrk_aligned>
 800a036:	3001      	adds	r0, #1
 800a038:	d02b      	beq.n	800a092 <_malloc_r+0xd2>
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	442b      	add	r3, r5
 800a03e:	6023      	str	r3, [r4, #0]
 800a040:	e00e      	b.n	800a060 <_malloc_r+0xa0>
 800a042:	6822      	ldr	r2, [r4, #0]
 800a044:	1b52      	subs	r2, r2, r5
 800a046:	d41e      	bmi.n	800a086 <_malloc_r+0xc6>
 800a048:	2a0b      	cmp	r2, #11
 800a04a:	d916      	bls.n	800a07a <_malloc_r+0xba>
 800a04c:	1961      	adds	r1, r4, r5
 800a04e:	42a3      	cmp	r3, r4
 800a050:	6025      	str	r5, [r4, #0]
 800a052:	bf18      	it	ne
 800a054:	6059      	strne	r1, [r3, #4]
 800a056:	6863      	ldr	r3, [r4, #4]
 800a058:	bf08      	it	eq
 800a05a:	6031      	streq	r1, [r6, #0]
 800a05c:	5162      	str	r2, [r4, r5]
 800a05e:	604b      	str	r3, [r1, #4]
 800a060:	4638      	mov	r0, r7
 800a062:	f104 060b 	add.w	r6, r4, #11
 800a066:	f003 f86f 	bl	800d148 <__malloc_unlock>
 800a06a:	f026 0607 	bic.w	r6, r6, #7
 800a06e:	1d23      	adds	r3, r4, #4
 800a070:	1af2      	subs	r2, r6, r3
 800a072:	d0b6      	beq.n	8009fe2 <_malloc_r+0x22>
 800a074:	1b9b      	subs	r3, r3, r6
 800a076:	50a3      	str	r3, [r4, r2]
 800a078:	e7b3      	b.n	8009fe2 <_malloc_r+0x22>
 800a07a:	6862      	ldr	r2, [r4, #4]
 800a07c:	42a3      	cmp	r3, r4
 800a07e:	bf0c      	ite	eq
 800a080:	6032      	streq	r2, [r6, #0]
 800a082:	605a      	strne	r2, [r3, #4]
 800a084:	e7ec      	b.n	800a060 <_malloc_r+0xa0>
 800a086:	4623      	mov	r3, r4
 800a088:	6864      	ldr	r4, [r4, #4]
 800a08a:	e7b2      	b.n	8009ff2 <_malloc_r+0x32>
 800a08c:	4634      	mov	r4, r6
 800a08e:	6876      	ldr	r6, [r6, #4]
 800a090:	e7b9      	b.n	800a006 <_malloc_r+0x46>
 800a092:	230c      	movs	r3, #12
 800a094:	4638      	mov	r0, r7
 800a096:	603b      	str	r3, [r7, #0]
 800a098:	f003 f856 	bl	800d148 <__malloc_unlock>
 800a09c:	e7a1      	b.n	8009fe2 <_malloc_r+0x22>
 800a09e:	6025      	str	r5, [r4, #0]
 800a0a0:	e7de      	b.n	800a060 <_malloc_r+0xa0>
 800a0a2:	bf00      	nop
 800a0a4:	20009fd4 	.word	0x20009fd4

0800a0a8 <__cvt>:
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ae:	461f      	mov	r7, r3
 800a0b0:	bfbb      	ittet	lt
 800a0b2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a0b6:	461f      	movlt	r7, r3
 800a0b8:	2300      	movge	r3, #0
 800a0ba:	232d      	movlt	r3, #45	; 0x2d
 800a0bc:	b088      	sub	sp, #32
 800a0be:	4614      	mov	r4, r2
 800a0c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a0c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a0c4:	7013      	strb	r3, [r2, #0]
 800a0c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0c8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a0cc:	f023 0820 	bic.w	r8, r3, #32
 800a0d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a0d4:	d005      	beq.n	800a0e2 <__cvt+0x3a>
 800a0d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a0da:	d100      	bne.n	800a0de <__cvt+0x36>
 800a0dc:	3501      	adds	r5, #1
 800a0de:	2302      	movs	r3, #2
 800a0e0:	e000      	b.n	800a0e4 <__cvt+0x3c>
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	aa07      	add	r2, sp, #28
 800a0e6:	9204      	str	r2, [sp, #16]
 800a0e8:	aa06      	add	r2, sp, #24
 800a0ea:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a0ee:	e9cd 3500 	strd	r3, r5, [sp]
 800a0f2:	4622      	mov	r2, r4
 800a0f4:	463b      	mov	r3, r7
 800a0f6:	f001 fdc7 	bl	800bc88 <_dtoa_r>
 800a0fa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a0fe:	4606      	mov	r6, r0
 800a100:	d102      	bne.n	800a108 <__cvt+0x60>
 800a102:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a104:	07db      	lsls	r3, r3, #31
 800a106:	d522      	bpl.n	800a14e <__cvt+0xa6>
 800a108:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a10c:	eb06 0905 	add.w	r9, r6, r5
 800a110:	d110      	bne.n	800a134 <__cvt+0x8c>
 800a112:	7833      	ldrb	r3, [r6, #0]
 800a114:	2b30      	cmp	r3, #48	; 0x30
 800a116:	d10a      	bne.n	800a12e <__cvt+0x86>
 800a118:	2200      	movs	r2, #0
 800a11a:	2300      	movs	r3, #0
 800a11c:	4620      	mov	r0, r4
 800a11e:	4639      	mov	r1, r7
 800a120:	f7f6 fcbc 	bl	8000a9c <__aeabi_dcmpeq>
 800a124:	b918      	cbnz	r0, 800a12e <__cvt+0x86>
 800a126:	f1c5 0501 	rsb	r5, r5, #1
 800a12a:	f8ca 5000 	str.w	r5, [sl]
 800a12e:	f8da 3000 	ldr.w	r3, [sl]
 800a132:	4499      	add	r9, r3
 800a134:	2200      	movs	r2, #0
 800a136:	2300      	movs	r3, #0
 800a138:	4620      	mov	r0, r4
 800a13a:	4639      	mov	r1, r7
 800a13c:	f7f6 fcae 	bl	8000a9c <__aeabi_dcmpeq>
 800a140:	b108      	cbz	r0, 800a146 <__cvt+0x9e>
 800a142:	f8cd 901c 	str.w	r9, [sp, #28]
 800a146:	2230      	movs	r2, #48	; 0x30
 800a148:	9b07      	ldr	r3, [sp, #28]
 800a14a:	454b      	cmp	r3, r9
 800a14c:	d307      	bcc.n	800a15e <__cvt+0xb6>
 800a14e:	4630      	mov	r0, r6
 800a150:	9b07      	ldr	r3, [sp, #28]
 800a152:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a154:	1b9b      	subs	r3, r3, r6
 800a156:	6013      	str	r3, [r2, #0]
 800a158:	b008      	add	sp, #32
 800a15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a15e:	1c59      	adds	r1, r3, #1
 800a160:	9107      	str	r1, [sp, #28]
 800a162:	701a      	strb	r2, [r3, #0]
 800a164:	e7f0      	b.n	800a148 <__cvt+0xa0>

0800a166 <__exponent>:
 800a166:	4603      	mov	r3, r0
 800a168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a16a:	2900      	cmp	r1, #0
 800a16c:	f803 2b02 	strb.w	r2, [r3], #2
 800a170:	bfb6      	itet	lt
 800a172:	222d      	movlt	r2, #45	; 0x2d
 800a174:	222b      	movge	r2, #43	; 0x2b
 800a176:	4249      	neglt	r1, r1
 800a178:	2909      	cmp	r1, #9
 800a17a:	7042      	strb	r2, [r0, #1]
 800a17c:	dd2b      	ble.n	800a1d6 <__exponent+0x70>
 800a17e:	f10d 0407 	add.w	r4, sp, #7
 800a182:	46a4      	mov	ip, r4
 800a184:	270a      	movs	r7, #10
 800a186:	fb91 f6f7 	sdiv	r6, r1, r7
 800a18a:	460a      	mov	r2, r1
 800a18c:	46a6      	mov	lr, r4
 800a18e:	fb07 1516 	mls	r5, r7, r6, r1
 800a192:	2a63      	cmp	r2, #99	; 0x63
 800a194:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800a198:	4631      	mov	r1, r6
 800a19a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a19e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a1a2:	dcf0      	bgt.n	800a186 <__exponent+0x20>
 800a1a4:	3130      	adds	r1, #48	; 0x30
 800a1a6:	f1ae 0502 	sub.w	r5, lr, #2
 800a1aa:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	1c44      	adds	r4, r0, #1
 800a1b2:	4561      	cmp	r1, ip
 800a1b4:	d30a      	bcc.n	800a1cc <__exponent+0x66>
 800a1b6:	f10d 0209 	add.w	r2, sp, #9
 800a1ba:	eba2 020e 	sub.w	r2, r2, lr
 800a1be:	4565      	cmp	r5, ip
 800a1c0:	bf88      	it	hi
 800a1c2:	2200      	movhi	r2, #0
 800a1c4:	4413      	add	r3, r2
 800a1c6:	1a18      	subs	r0, r3, r0
 800a1c8:	b003      	add	sp, #12
 800a1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1d0:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a1d4:	e7ed      	b.n	800a1b2 <__exponent+0x4c>
 800a1d6:	2330      	movs	r3, #48	; 0x30
 800a1d8:	3130      	adds	r1, #48	; 0x30
 800a1da:	7083      	strb	r3, [r0, #2]
 800a1dc:	70c1      	strb	r1, [r0, #3]
 800a1de:	1d03      	adds	r3, r0, #4
 800a1e0:	e7f1      	b.n	800a1c6 <__exponent+0x60>
	...

0800a1e4 <_printf_float>:
 800a1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e8:	b091      	sub	sp, #68	; 0x44
 800a1ea:	460c      	mov	r4, r1
 800a1ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a1f0:	4616      	mov	r6, r2
 800a1f2:	461f      	mov	r7, r3
 800a1f4:	4605      	mov	r5, r0
 800a1f6:	f002 ff6b 	bl	800d0d0 <_localeconv_r>
 800a1fa:	6803      	ldr	r3, [r0, #0]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a200:	f7f6 f820 	bl	8000244 <strlen>
 800a204:	2300      	movs	r3, #0
 800a206:	930e      	str	r3, [sp, #56]	; 0x38
 800a208:	f8d8 3000 	ldr.w	r3, [r8]
 800a20c:	900a      	str	r0, [sp, #40]	; 0x28
 800a20e:	3307      	adds	r3, #7
 800a210:	f023 0307 	bic.w	r3, r3, #7
 800a214:	f103 0208 	add.w	r2, r3, #8
 800a218:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a21c:	f8d4 b000 	ldr.w	fp, [r4]
 800a220:	f8c8 2000 	str.w	r2, [r8]
 800a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a228:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a22c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800a230:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a234:	930b      	str	r3, [sp, #44]	; 0x2c
 800a236:	f04f 32ff 	mov.w	r2, #4294967295
 800a23a:	4640      	mov	r0, r8
 800a23c:	4b9c      	ldr	r3, [pc, #624]	; (800a4b0 <_printf_float+0x2cc>)
 800a23e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a240:	f7f6 fc5e 	bl	8000b00 <__aeabi_dcmpun>
 800a244:	bb70      	cbnz	r0, 800a2a4 <_printf_float+0xc0>
 800a246:	f04f 32ff 	mov.w	r2, #4294967295
 800a24a:	4640      	mov	r0, r8
 800a24c:	4b98      	ldr	r3, [pc, #608]	; (800a4b0 <_printf_float+0x2cc>)
 800a24e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a250:	f7f6 fc38 	bl	8000ac4 <__aeabi_dcmple>
 800a254:	bb30      	cbnz	r0, 800a2a4 <_printf_float+0xc0>
 800a256:	2200      	movs	r2, #0
 800a258:	2300      	movs	r3, #0
 800a25a:	4640      	mov	r0, r8
 800a25c:	4651      	mov	r1, sl
 800a25e:	f7f6 fc27 	bl	8000ab0 <__aeabi_dcmplt>
 800a262:	b110      	cbz	r0, 800a26a <_printf_float+0x86>
 800a264:	232d      	movs	r3, #45	; 0x2d
 800a266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a26a:	4b92      	ldr	r3, [pc, #584]	; (800a4b4 <_printf_float+0x2d0>)
 800a26c:	4892      	ldr	r0, [pc, #584]	; (800a4b8 <_printf_float+0x2d4>)
 800a26e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a272:	bf94      	ite	ls
 800a274:	4698      	movls	r8, r3
 800a276:	4680      	movhi	r8, r0
 800a278:	2303      	movs	r3, #3
 800a27a:	f04f 0a00 	mov.w	sl, #0
 800a27e:	6123      	str	r3, [r4, #16]
 800a280:	f02b 0304 	bic.w	r3, fp, #4
 800a284:	6023      	str	r3, [r4, #0]
 800a286:	4633      	mov	r3, r6
 800a288:	4621      	mov	r1, r4
 800a28a:	4628      	mov	r0, r5
 800a28c:	9700      	str	r7, [sp, #0]
 800a28e:	aa0f      	add	r2, sp, #60	; 0x3c
 800a290:	f000 f9d4 	bl	800a63c <_printf_common>
 800a294:	3001      	adds	r0, #1
 800a296:	f040 8090 	bne.w	800a3ba <_printf_float+0x1d6>
 800a29a:	f04f 30ff 	mov.w	r0, #4294967295
 800a29e:	b011      	add	sp, #68	; 0x44
 800a2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a4:	4642      	mov	r2, r8
 800a2a6:	4653      	mov	r3, sl
 800a2a8:	4640      	mov	r0, r8
 800a2aa:	4651      	mov	r1, sl
 800a2ac:	f7f6 fc28 	bl	8000b00 <__aeabi_dcmpun>
 800a2b0:	b148      	cbz	r0, 800a2c6 <_printf_float+0xe2>
 800a2b2:	f1ba 0f00 	cmp.w	sl, #0
 800a2b6:	bfb8      	it	lt
 800a2b8:	232d      	movlt	r3, #45	; 0x2d
 800a2ba:	4880      	ldr	r0, [pc, #512]	; (800a4bc <_printf_float+0x2d8>)
 800a2bc:	bfb8      	it	lt
 800a2be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a2c2:	4b7f      	ldr	r3, [pc, #508]	; (800a4c0 <_printf_float+0x2dc>)
 800a2c4:	e7d3      	b.n	800a26e <_printf_float+0x8a>
 800a2c6:	6863      	ldr	r3, [r4, #4]
 800a2c8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a2cc:	1c5a      	adds	r2, r3, #1
 800a2ce:	d142      	bne.n	800a356 <_printf_float+0x172>
 800a2d0:	2306      	movs	r3, #6
 800a2d2:	6063      	str	r3, [r4, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	9206      	str	r2, [sp, #24]
 800a2d8:	aa0e      	add	r2, sp, #56	; 0x38
 800a2da:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a2de:	aa0d      	add	r2, sp, #52	; 0x34
 800a2e0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a2e4:	9203      	str	r2, [sp, #12]
 800a2e6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a2ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a2ee:	6023      	str	r3, [r4, #0]
 800a2f0:	6863      	ldr	r3, [r4, #4]
 800a2f2:	4642      	mov	r2, r8
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	4653      	mov	r3, sl
 800a2fa:	910b      	str	r1, [sp, #44]	; 0x2c
 800a2fc:	f7ff fed4 	bl	800a0a8 <__cvt>
 800a300:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a302:	4680      	mov	r8, r0
 800a304:	2947      	cmp	r1, #71	; 0x47
 800a306:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a308:	d108      	bne.n	800a31c <_printf_float+0x138>
 800a30a:	1cc8      	adds	r0, r1, #3
 800a30c:	db02      	blt.n	800a314 <_printf_float+0x130>
 800a30e:	6863      	ldr	r3, [r4, #4]
 800a310:	4299      	cmp	r1, r3
 800a312:	dd40      	ble.n	800a396 <_printf_float+0x1b2>
 800a314:	f1a9 0902 	sub.w	r9, r9, #2
 800a318:	fa5f f989 	uxtb.w	r9, r9
 800a31c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a320:	d81f      	bhi.n	800a362 <_printf_float+0x17e>
 800a322:	464a      	mov	r2, r9
 800a324:	3901      	subs	r1, #1
 800a326:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a32a:	910d      	str	r1, [sp, #52]	; 0x34
 800a32c:	f7ff ff1b 	bl	800a166 <__exponent>
 800a330:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a332:	4682      	mov	sl, r0
 800a334:	1813      	adds	r3, r2, r0
 800a336:	2a01      	cmp	r2, #1
 800a338:	6123      	str	r3, [r4, #16]
 800a33a:	dc02      	bgt.n	800a342 <_printf_float+0x15e>
 800a33c:	6822      	ldr	r2, [r4, #0]
 800a33e:	07d2      	lsls	r2, r2, #31
 800a340:	d501      	bpl.n	800a346 <_printf_float+0x162>
 800a342:	3301      	adds	r3, #1
 800a344:	6123      	str	r3, [r4, #16]
 800a346:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d09b      	beq.n	800a286 <_printf_float+0xa2>
 800a34e:	232d      	movs	r3, #45	; 0x2d
 800a350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a354:	e797      	b.n	800a286 <_printf_float+0xa2>
 800a356:	2947      	cmp	r1, #71	; 0x47
 800a358:	d1bc      	bne.n	800a2d4 <_printf_float+0xf0>
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1ba      	bne.n	800a2d4 <_printf_float+0xf0>
 800a35e:	2301      	movs	r3, #1
 800a360:	e7b7      	b.n	800a2d2 <_printf_float+0xee>
 800a362:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a366:	d118      	bne.n	800a39a <_printf_float+0x1b6>
 800a368:	2900      	cmp	r1, #0
 800a36a:	6863      	ldr	r3, [r4, #4]
 800a36c:	dd0b      	ble.n	800a386 <_printf_float+0x1a2>
 800a36e:	6121      	str	r1, [r4, #16]
 800a370:	b913      	cbnz	r3, 800a378 <_printf_float+0x194>
 800a372:	6822      	ldr	r2, [r4, #0]
 800a374:	07d0      	lsls	r0, r2, #31
 800a376:	d502      	bpl.n	800a37e <_printf_float+0x19a>
 800a378:	3301      	adds	r3, #1
 800a37a:	440b      	add	r3, r1
 800a37c:	6123      	str	r3, [r4, #16]
 800a37e:	f04f 0a00 	mov.w	sl, #0
 800a382:	65a1      	str	r1, [r4, #88]	; 0x58
 800a384:	e7df      	b.n	800a346 <_printf_float+0x162>
 800a386:	b913      	cbnz	r3, 800a38e <_printf_float+0x1aa>
 800a388:	6822      	ldr	r2, [r4, #0]
 800a38a:	07d2      	lsls	r2, r2, #31
 800a38c:	d501      	bpl.n	800a392 <_printf_float+0x1ae>
 800a38e:	3302      	adds	r3, #2
 800a390:	e7f4      	b.n	800a37c <_printf_float+0x198>
 800a392:	2301      	movs	r3, #1
 800a394:	e7f2      	b.n	800a37c <_printf_float+0x198>
 800a396:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a39a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a39c:	4299      	cmp	r1, r3
 800a39e:	db05      	blt.n	800a3ac <_printf_float+0x1c8>
 800a3a0:	6823      	ldr	r3, [r4, #0]
 800a3a2:	6121      	str	r1, [r4, #16]
 800a3a4:	07d8      	lsls	r0, r3, #31
 800a3a6:	d5ea      	bpl.n	800a37e <_printf_float+0x19a>
 800a3a8:	1c4b      	adds	r3, r1, #1
 800a3aa:	e7e7      	b.n	800a37c <_printf_float+0x198>
 800a3ac:	2900      	cmp	r1, #0
 800a3ae:	bfcc      	ite	gt
 800a3b0:	2201      	movgt	r2, #1
 800a3b2:	f1c1 0202 	rsble	r2, r1, #2
 800a3b6:	4413      	add	r3, r2
 800a3b8:	e7e0      	b.n	800a37c <_printf_float+0x198>
 800a3ba:	6823      	ldr	r3, [r4, #0]
 800a3bc:	055a      	lsls	r2, r3, #21
 800a3be:	d407      	bmi.n	800a3d0 <_printf_float+0x1ec>
 800a3c0:	6923      	ldr	r3, [r4, #16]
 800a3c2:	4642      	mov	r2, r8
 800a3c4:	4631      	mov	r1, r6
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	47b8      	blx	r7
 800a3ca:	3001      	adds	r0, #1
 800a3cc:	d12b      	bne.n	800a426 <_printf_float+0x242>
 800a3ce:	e764      	b.n	800a29a <_printf_float+0xb6>
 800a3d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a3d4:	f240 80dd 	bls.w	800a592 <_printf_float+0x3ae>
 800a3d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3dc:	2200      	movs	r2, #0
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f7f6 fb5c 	bl	8000a9c <__aeabi_dcmpeq>
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	d033      	beq.n	800a450 <_printf_float+0x26c>
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	4631      	mov	r1, r6
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	4a35      	ldr	r2, [pc, #212]	; (800a4c4 <_printf_float+0x2e0>)
 800a3f0:	47b8      	blx	r7
 800a3f2:	3001      	adds	r0, #1
 800a3f4:	f43f af51 	beq.w	800a29a <_printf_float+0xb6>
 800a3f8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	db02      	blt.n	800a406 <_printf_float+0x222>
 800a400:	6823      	ldr	r3, [r4, #0]
 800a402:	07d8      	lsls	r0, r3, #31
 800a404:	d50f      	bpl.n	800a426 <_printf_float+0x242>
 800a406:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a40a:	4631      	mov	r1, r6
 800a40c:	4628      	mov	r0, r5
 800a40e:	47b8      	blx	r7
 800a410:	3001      	adds	r0, #1
 800a412:	f43f af42 	beq.w	800a29a <_printf_float+0xb6>
 800a416:	f04f 0800 	mov.w	r8, #0
 800a41a:	f104 091a 	add.w	r9, r4, #26
 800a41e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a420:	3b01      	subs	r3, #1
 800a422:	4543      	cmp	r3, r8
 800a424:	dc09      	bgt.n	800a43a <_printf_float+0x256>
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	079b      	lsls	r3, r3, #30
 800a42a:	f100 8102 	bmi.w	800a632 <_printf_float+0x44e>
 800a42e:	68e0      	ldr	r0, [r4, #12]
 800a430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a432:	4298      	cmp	r0, r3
 800a434:	bfb8      	it	lt
 800a436:	4618      	movlt	r0, r3
 800a438:	e731      	b.n	800a29e <_printf_float+0xba>
 800a43a:	2301      	movs	r3, #1
 800a43c:	464a      	mov	r2, r9
 800a43e:	4631      	mov	r1, r6
 800a440:	4628      	mov	r0, r5
 800a442:	47b8      	blx	r7
 800a444:	3001      	adds	r0, #1
 800a446:	f43f af28 	beq.w	800a29a <_printf_float+0xb6>
 800a44a:	f108 0801 	add.w	r8, r8, #1
 800a44e:	e7e6      	b.n	800a41e <_printf_float+0x23a>
 800a450:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a452:	2b00      	cmp	r3, #0
 800a454:	dc38      	bgt.n	800a4c8 <_printf_float+0x2e4>
 800a456:	2301      	movs	r3, #1
 800a458:	4631      	mov	r1, r6
 800a45a:	4628      	mov	r0, r5
 800a45c:	4a19      	ldr	r2, [pc, #100]	; (800a4c4 <_printf_float+0x2e0>)
 800a45e:	47b8      	blx	r7
 800a460:	3001      	adds	r0, #1
 800a462:	f43f af1a 	beq.w	800a29a <_printf_float+0xb6>
 800a466:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a46a:	4313      	orrs	r3, r2
 800a46c:	d102      	bne.n	800a474 <_printf_float+0x290>
 800a46e:	6823      	ldr	r3, [r4, #0]
 800a470:	07d9      	lsls	r1, r3, #31
 800a472:	d5d8      	bpl.n	800a426 <_printf_float+0x242>
 800a474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a478:	4631      	mov	r1, r6
 800a47a:	4628      	mov	r0, r5
 800a47c:	47b8      	blx	r7
 800a47e:	3001      	adds	r0, #1
 800a480:	f43f af0b 	beq.w	800a29a <_printf_float+0xb6>
 800a484:	f04f 0900 	mov.w	r9, #0
 800a488:	f104 0a1a 	add.w	sl, r4, #26
 800a48c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a48e:	425b      	negs	r3, r3
 800a490:	454b      	cmp	r3, r9
 800a492:	dc01      	bgt.n	800a498 <_printf_float+0x2b4>
 800a494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a496:	e794      	b.n	800a3c2 <_printf_float+0x1de>
 800a498:	2301      	movs	r3, #1
 800a49a:	4652      	mov	r2, sl
 800a49c:	4631      	mov	r1, r6
 800a49e:	4628      	mov	r0, r5
 800a4a0:	47b8      	blx	r7
 800a4a2:	3001      	adds	r0, #1
 800a4a4:	f43f aef9 	beq.w	800a29a <_printf_float+0xb6>
 800a4a8:	f109 0901 	add.w	r9, r9, #1
 800a4ac:	e7ee      	b.n	800a48c <_printf_float+0x2a8>
 800a4ae:	bf00      	nop
 800a4b0:	7fefffff 	.word	0x7fefffff
 800a4b4:	0800e984 	.word	0x0800e984
 800a4b8:	0800e988 	.word	0x0800e988
 800a4bc:	0800e990 	.word	0x0800e990
 800a4c0:	0800e98c 	.word	0x0800e98c
 800a4c4:	0800e994 	.word	0x0800e994
 800a4c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	bfa8      	it	ge
 800a4d0:	461a      	movge	r2, r3
 800a4d2:	2a00      	cmp	r2, #0
 800a4d4:	4691      	mov	r9, r2
 800a4d6:	dc37      	bgt.n	800a548 <_printf_float+0x364>
 800a4d8:	f04f 0b00 	mov.w	fp, #0
 800a4dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4e0:	f104 021a 	add.w	r2, r4, #26
 800a4e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a4e8:	ebaa 0309 	sub.w	r3, sl, r9
 800a4ec:	455b      	cmp	r3, fp
 800a4ee:	dc33      	bgt.n	800a558 <_printf_float+0x374>
 800a4f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	db3b      	blt.n	800a570 <_printf_float+0x38c>
 800a4f8:	6823      	ldr	r3, [r4, #0]
 800a4fa:	07da      	lsls	r2, r3, #31
 800a4fc:	d438      	bmi.n	800a570 <_printf_float+0x38c>
 800a4fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a500:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a502:	eba3 020a 	sub.w	r2, r3, sl
 800a506:	eba3 0901 	sub.w	r9, r3, r1
 800a50a:	4591      	cmp	r9, r2
 800a50c:	bfa8      	it	ge
 800a50e:	4691      	movge	r9, r2
 800a510:	f1b9 0f00 	cmp.w	r9, #0
 800a514:	dc34      	bgt.n	800a580 <_printf_float+0x39c>
 800a516:	f04f 0800 	mov.w	r8, #0
 800a51a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a51e:	f104 0a1a 	add.w	sl, r4, #26
 800a522:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a526:	1a9b      	subs	r3, r3, r2
 800a528:	eba3 0309 	sub.w	r3, r3, r9
 800a52c:	4543      	cmp	r3, r8
 800a52e:	f77f af7a 	ble.w	800a426 <_printf_float+0x242>
 800a532:	2301      	movs	r3, #1
 800a534:	4652      	mov	r2, sl
 800a536:	4631      	mov	r1, r6
 800a538:	4628      	mov	r0, r5
 800a53a:	47b8      	blx	r7
 800a53c:	3001      	adds	r0, #1
 800a53e:	f43f aeac 	beq.w	800a29a <_printf_float+0xb6>
 800a542:	f108 0801 	add.w	r8, r8, #1
 800a546:	e7ec      	b.n	800a522 <_printf_float+0x33e>
 800a548:	4613      	mov	r3, r2
 800a54a:	4631      	mov	r1, r6
 800a54c:	4642      	mov	r2, r8
 800a54e:	4628      	mov	r0, r5
 800a550:	47b8      	blx	r7
 800a552:	3001      	adds	r0, #1
 800a554:	d1c0      	bne.n	800a4d8 <_printf_float+0x2f4>
 800a556:	e6a0      	b.n	800a29a <_printf_float+0xb6>
 800a558:	2301      	movs	r3, #1
 800a55a:	4631      	mov	r1, r6
 800a55c:	4628      	mov	r0, r5
 800a55e:	920b      	str	r2, [sp, #44]	; 0x2c
 800a560:	47b8      	blx	r7
 800a562:	3001      	adds	r0, #1
 800a564:	f43f ae99 	beq.w	800a29a <_printf_float+0xb6>
 800a568:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a56a:	f10b 0b01 	add.w	fp, fp, #1
 800a56e:	e7b9      	b.n	800a4e4 <_printf_float+0x300>
 800a570:	4631      	mov	r1, r6
 800a572:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a576:	4628      	mov	r0, r5
 800a578:	47b8      	blx	r7
 800a57a:	3001      	adds	r0, #1
 800a57c:	d1bf      	bne.n	800a4fe <_printf_float+0x31a>
 800a57e:	e68c      	b.n	800a29a <_printf_float+0xb6>
 800a580:	464b      	mov	r3, r9
 800a582:	4631      	mov	r1, r6
 800a584:	4628      	mov	r0, r5
 800a586:	eb08 020a 	add.w	r2, r8, sl
 800a58a:	47b8      	blx	r7
 800a58c:	3001      	adds	r0, #1
 800a58e:	d1c2      	bne.n	800a516 <_printf_float+0x332>
 800a590:	e683      	b.n	800a29a <_printf_float+0xb6>
 800a592:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a594:	2a01      	cmp	r2, #1
 800a596:	dc01      	bgt.n	800a59c <_printf_float+0x3b8>
 800a598:	07db      	lsls	r3, r3, #31
 800a59a:	d537      	bpl.n	800a60c <_printf_float+0x428>
 800a59c:	2301      	movs	r3, #1
 800a59e:	4642      	mov	r2, r8
 800a5a0:	4631      	mov	r1, r6
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	47b8      	blx	r7
 800a5a6:	3001      	adds	r0, #1
 800a5a8:	f43f ae77 	beq.w	800a29a <_printf_float+0xb6>
 800a5ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5b0:	4631      	mov	r1, r6
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	47b8      	blx	r7
 800a5b6:	3001      	adds	r0, #1
 800a5b8:	f43f ae6f 	beq.w	800a29a <_printf_float+0xb6>
 800a5bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	f7f6 fa6a 	bl	8000a9c <__aeabi_dcmpeq>
 800a5c8:	b9d8      	cbnz	r0, 800a602 <_printf_float+0x41e>
 800a5ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5cc:	f108 0201 	add.w	r2, r8, #1
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	4631      	mov	r1, r6
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	47b8      	blx	r7
 800a5d8:	3001      	adds	r0, #1
 800a5da:	d10e      	bne.n	800a5fa <_printf_float+0x416>
 800a5dc:	e65d      	b.n	800a29a <_printf_float+0xb6>
 800a5de:	2301      	movs	r3, #1
 800a5e0:	464a      	mov	r2, r9
 800a5e2:	4631      	mov	r1, r6
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	47b8      	blx	r7
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	f43f ae56 	beq.w	800a29a <_printf_float+0xb6>
 800a5ee:	f108 0801 	add.w	r8, r8, #1
 800a5f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	4543      	cmp	r3, r8
 800a5f8:	dcf1      	bgt.n	800a5de <_printf_float+0x3fa>
 800a5fa:	4653      	mov	r3, sl
 800a5fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a600:	e6e0      	b.n	800a3c4 <_printf_float+0x1e0>
 800a602:	f04f 0800 	mov.w	r8, #0
 800a606:	f104 091a 	add.w	r9, r4, #26
 800a60a:	e7f2      	b.n	800a5f2 <_printf_float+0x40e>
 800a60c:	2301      	movs	r3, #1
 800a60e:	4642      	mov	r2, r8
 800a610:	e7df      	b.n	800a5d2 <_printf_float+0x3ee>
 800a612:	2301      	movs	r3, #1
 800a614:	464a      	mov	r2, r9
 800a616:	4631      	mov	r1, r6
 800a618:	4628      	mov	r0, r5
 800a61a:	47b8      	blx	r7
 800a61c:	3001      	adds	r0, #1
 800a61e:	f43f ae3c 	beq.w	800a29a <_printf_float+0xb6>
 800a622:	f108 0801 	add.w	r8, r8, #1
 800a626:	68e3      	ldr	r3, [r4, #12]
 800a628:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a62a:	1a5b      	subs	r3, r3, r1
 800a62c:	4543      	cmp	r3, r8
 800a62e:	dcf0      	bgt.n	800a612 <_printf_float+0x42e>
 800a630:	e6fd      	b.n	800a42e <_printf_float+0x24a>
 800a632:	f04f 0800 	mov.w	r8, #0
 800a636:	f104 0919 	add.w	r9, r4, #25
 800a63a:	e7f4      	b.n	800a626 <_printf_float+0x442>

0800a63c <_printf_common>:
 800a63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a640:	4616      	mov	r6, r2
 800a642:	4699      	mov	r9, r3
 800a644:	688a      	ldr	r2, [r1, #8]
 800a646:	690b      	ldr	r3, [r1, #16]
 800a648:	4607      	mov	r7, r0
 800a64a:	4293      	cmp	r3, r2
 800a64c:	bfb8      	it	lt
 800a64e:	4613      	movlt	r3, r2
 800a650:	6033      	str	r3, [r6, #0]
 800a652:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a656:	460c      	mov	r4, r1
 800a658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a65c:	b10a      	cbz	r2, 800a662 <_printf_common+0x26>
 800a65e:	3301      	adds	r3, #1
 800a660:	6033      	str	r3, [r6, #0]
 800a662:	6823      	ldr	r3, [r4, #0]
 800a664:	0699      	lsls	r1, r3, #26
 800a666:	bf42      	ittt	mi
 800a668:	6833      	ldrmi	r3, [r6, #0]
 800a66a:	3302      	addmi	r3, #2
 800a66c:	6033      	strmi	r3, [r6, #0]
 800a66e:	6825      	ldr	r5, [r4, #0]
 800a670:	f015 0506 	ands.w	r5, r5, #6
 800a674:	d106      	bne.n	800a684 <_printf_common+0x48>
 800a676:	f104 0a19 	add.w	sl, r4, #25
 800a67a:	68e3      	ldr	r3, [r4, #12]
 800a67c:	6832      	ldr	r2, [r6, #0]
 800a67e:	1a9b      	subs	r3, r3, r2
 800a680:	42ab      	cmp	r3, r5
 800a682:	dc28      	bgt.n	800a6d6 <_printf_common+0x9a>
 800a684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a688:	1e13      	subs	r3, r2, #0
 800a68a:	6822      	ldr	r2, [r4, #0]
 800a68c:	bf18      	it	ne
 800a68e:	2301      	movne	r3, #1
 800a690:	0692      	lsls	r2, r2, #26
 800a692:	d42d      	bmi.n	800a6f0 <_printf_common+0xb4>
 800a694:	4649      	mov	r1, r9
 800a696:	4638      	mov	r0, r7
 800a698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a69c:	47c0      	blx	r8
 800a69e:	3001      	adds	r0, #1
 800a6a0:	d020      	beq.n	800a6e4 <_printf_common+0xa8>
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	68e5      	ldr	r5, [r4, #12]
 800a6a6:	f003 0306 	and.w	r3, r3, #6
 800a6aa:	2b04      	cmp	r3, #4
 800a6ac:	bf18      	it	ne
 800a6ae:	2500      	movne	r5, #0
 800a6b0:	6832      	ldr	r2, [r6, #0]
 800a6b2:	f04f 0600 	mov.w	r6, #0
 800a6b6:	68a3      	ldr	r3, [r4, #8]
 800a6b8:	bf08      	it	eq
 800a6ba:	1aad      	subeq	r5, r5, r2
 800a6bc:	6922      	ldr	r2, [r4, #16]
 800a6be:	bf08      	it	eq
 800a6c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	bfc4      	itt	gt
 800a6c8:	1a9b      	subgt	r3, r3, r2
 800a6ca:	18ed      	addgt	r5, r5, r3
 800a6cc:	341a      	adds	r4, #26
 800a6ce:	42b5      	cmp	r5, r6
 800a6d0:	d11a      	bne.n	800a708 <_printf_common+0xcc>
 800a6d2:	2000      	movs	r0, #0
 800a6d4:	e008      	b.n	800a6e8 <_printf_common+0xac>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	4652      	mov	r2, sl
 800a6da:	4649      	mov	r1, r9
 800a6dc:	4638      	mov	r0, r7
 800a6de:	47c0      	blx	r8
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	d103      	bne.n	800a6ec <_printf_common+0xb0>
 800a6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ec:	3501      	adds	r5, #1
 800a6ee:	e7c4      	b.n	800a67a <_printf_common+0x3e>
 800a6f0:	2030      	movs	r0, #48	; 0x30
 800a6f2:	18e1      	adds	r1, r4, r3
 800a6f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6f8:	1c5a      	adds	r2, r3, #1
 800a6fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6fe:	4422      	add	r2, r4
 800a700:	3302      	adds	r3, #2
 800a702:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a706:	e7c5      	b.n	800a694 <_printf_common+0x58>
 800a708:	2301      	movs	r3, #1
 800a70a:	4622      	mov	r2, r4
 800a70c:	4649      	mov	r1, r9
 800a70e:	4638      	mov	r0, r7
 800a710:	47c0      	blx	r8
 800a712:	3001      	adds	r0, #1
 800a714:	d0e6      	beq.n	800a6e4 <_printf_common+0xa8>
 800a716:	3601      	adds	r6, #1
 800a718:	e7d9      	b.n	800a6ce <_printf_common+0x92>
	...

0800a71c <_printf_i>:
 800a71c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a720:	7e0f      	ldrb	r7, [r1, #24]
 800a722:	4691      	mov	r9, r2
 800a724:	2f78      	cmp	r7, #120	; 0x78
 800a726:	4680      	mov	r8, r0
 800a728:	460c      	mov	r4, r1
 800a72a:	469a      	mov	sl, r3
 800a72c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a72e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a732:	d807      	bhi.n	800a744 <_printf_i+0x28>
 800a734:	2f62      	cmp	r7, #98	; 0x62
 800a736:	d80a      	bhi.n	800a74e <_printf_i+0x32>
 800a738:	2f00      	cmp	r7, #0
 800a73a:	f000 80d9 	beq.w	800a8f0 <_printf_i+0x1d4>
 800a73e:	2f58      	cmp	r7, #88	; 0x58
 800a740:	f000 80a4 	beq.w	800a88c <_printf_i+0x170>
 800a744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a74c:	e03a      	b.n	800a7c4 <_printf_i+0xa8>
 800a74e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a752:	2b15      	cmp	r3, #21
 800a754:	d8f6      	bhi.n	800a744 <_printf_i+0x28>
 800a756:	a101      	add	r1, pc, #4	; (adr r1, 800a75c <_printf_i+0x40>)
 800a758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a75c:	0800a7b5 	.word	0x0800a7b5
 800a760:	0800a7c9 	.word	0x0800a7c9
 800a764:	0800a745 	.word	0x0800a745
 800a768:	0800a745 	.word	0x0800a745
 800a76c:	0800a745 	.word	0x0800a745
 800a770:	0800a745 	.word	0x0800a745
 800a774:	0800a7c9 	.word	0x0800a7c9
 800a778:	0800a745 	.word	0x0800a745
 800a77c:	0800a745 	.word	0x0800a745
 800a780:	0800a745 	.word	0x0800a745
 800a784:	0800a745 	.word	0x0800a745
 800a788:	0800a8d7 	.word	0x0800a8d7
 800a78c:	0800a7f9 	.word	0x0800a7f9
 800a790:	0800a8b9 	.word	0x0800a8b9
 800a794:	0800a745 	.word	0x0800a745
 800a798:	0800a745 	.word	0x0800a745
 800a79c:	0800a8f9 	.word	0x0800a8f9
 800a7a0:	0800a745 	.word	0x0800a745
 800a7a4:	0800a7f9 	.word	0x0800a7f9
 800a7a8:	0800a745 	.word	0x0800a745
 800a7ac:	0800a745 	.word	0x0800a745
 800a7b0:	0800a8c1 	.word	0x0800a8c1
 800a7b4:	682b      	ldr	r3, [r5, #0]
 800a7b6:	1d1a      	adds	r2, r3, #4
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	602a      	str	r2, [r5, #0]
 800a7bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e0a4      	b.n	800a912 <_printf_i+0x1f6>
 800a7c8:	6820      	ldr	r0, [r4, #0]
 800a7ca:	6829      	ldr	r1, [r5, #0]
 800a7cc:	0606      	lsls	r6, r0, #24
 800a7ce:	f101 0304 	add.w	r3, r1, #4
 800a7d2:	d50a      	bpl.n	800a7ea <_printf_i+0xce>
 800a7d4:	680e      	ldr	r6, [r1, #0]
 800a7d6:	602b      	str	r3, [r5, #0]
 800a7d8:	2e00      	cmp	r6, #0
 800a7da:	da03      	bge.n	800a7e4 <_printf_i+0xc8>
 800a7dc:	232d      	movs	r3, #45	; 0x2d
 800a7de:	4276      	negs	r6, r6
 800a7e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7e4:	230a      	movs	r3, #10
 800a7e6:	485e      	ldr	r0, [pc, #376]	; (800a960 <_printf_i+0x244>)
 800a7e8:	e019      	b.n	800a81e <_printf_i+0x102>
 800a7ea:	680e      	ldr	r6, [r1, #0]
 800a7ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a7f0:	602b      	str	r3, [r5, #0]
 800a7f2:	bf18      	it	ne
 800a7f4:	b236      	sxthne	r6, r6
 800a7f6:	e7ef      	b.n	800a7d8 <_printf_i+0xbc>
 800a7f8:	682b      	ldr	r3, [r5, #0]
 800a7fa:	6820      	ldr	r0, [r4, #0]
 800a7fc:	1d19      	adds	r1, r3, #4
 800a7fe:	6029      	str	r1, [r5, #0]
 800a800:	0601      	lsls	r1, r0, #24
 800a802:	d501      	bpl.n	800a808 <_printf_i+0xec>
 800a804:	681e      	ldr	r6, [r3, #0]
 800a806:	e002      	b.n	800a80e <_printf_i+0xf2>
 800a808:	0646      	lsls	r6, r0, #25
 800a80a:	d5fb      	bpl.n	800a804 <_printf_i+0xe8>
 800a80c:	881e      	ldrh	r6, [r3, #0]
 800a80e:	2f6f      	cmp	r7, #111	; 0x6f
 800a810:	bf0c      	ite	eq
 800a812:	2308      	moveq	r3, #8
 800a814:	230a      	movne	r3, #10
 800a816:	4852      	ldr	r0, [pc, #328]	; (800a960 <_printf_i+0x244>)
 800a818:	2100      	movs	r1, #0
 800a81a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a81e:	6865      	ldr	r5, [r4, #4]
 800a820:	2d00      	cmp	r5, #0
 800a822:	bfa8      	it	ge
 800a824:	6821      	ldrge	r1, [r4, #0]
 800a826:	60a5      	str	r5, [r4, #8]
 800a828:	bfa4      	itt	ge
 800a82a:	f021 0104 	bicge.w	r1, r1, #4
 800a82e:	6021      	strge	r1, [r4, #0]
 800a830:	b90e      	cbnz	r6, 800a836 <_printf_i+0x11a>
 800a832:	2d00      	cmp	r5, #0
 800a834:	d04d      	beq.n	800a8d2 <_printf_i+0x1b6>
 800a836:	4615      	mov	r5, r2
 800a838:	fbb6 f1f3 	udiv	r1, r6, r3
 800a83c:	fb03 6711 	mls	r7, r3, r1, r6
 800a840:	5dc7      	ldrb	r7, [r0, r7]
 800a842:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a846:	4637      	mov	r7, r6
 800a848:	42bb      	cmp	r3, r7
 800a84a:	460e      	mov	r6, r1
 800a84c:	d9f4      	bls.n	800a838 <_printf_i+0x11c>
 800a84e:	2b08      	cmp	r3, #8
 800a850:	d10b      	bne.n	800a86a <_printf_i+0x14e>
 800a852:	6823      	ldr	r3, [r4, #0]
 800a854:	07de      	lsls	r6, r3, #31
 800a856:	d508      	bpl.n	800a86a <_printf_i+0x14e>
 800a858:	6923      	ldr	r3, [r4, #16]
 800a85a:	6861      	ldr	r1, [r4, #4]
 800a85c:	4299      	cmp	r1, r3
 800a85e:	bfde      	ittt	le
 800a860:	2330      	movle	r3, #48	; 0x30
 800a862:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a866:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a86a:	1b52      	subs	r2, r2, r5
 800a86c:	6122      	str	r2, [r4, #16]
 800a86e:	464b      	mov	r3, r9
 800a870:	4621      	mov	r1, r4
 800a872:	4640      	mov	r0, r8
 800a874:	f8cd a000 	str.w	sl, [sp]
 800a878:	aa03      	add	r2, sp, #12
 800a87a:	f7ff fedf 	bl	800a63c <_printf_common>
 800a87e:	3001      	adds	r0, #1
 800a880:	d14c      	bne.n	800a91c <_printf_i+0x200>
 800a882:	f04f 30ff 	mov.w	r0, #4294967295
 800a886:	b004      	add	sp, #16
 800a888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a88c:	4834      	ldr	r0, [pc, #208]	; (800a960 <_printf_i+0x244>)
 800a88e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a892:	6829      	ldr	r1, [r5, #0]
 800a894:	6823      	ldr	r3, [r4, #0]
 800a896:	f851 6b04 	ldr.w	r6, [r1], #4
 800a89a:	6029      	str	r1, [r5, #0]
 800a89c:	061d      	lsls	r5, r3, #24
 800a89e:	d514      	bpl.n	800a8ca <_printf_i+0x1ae>
 800a8a0:	07df      	lsls	r7, r3, #31
 800a8a2:	bf44      	itt	mi
 800a8a4:	f043 0320 	orrmi.w	r3, r3, #32
 800a8a8:	6023      	strmi	r3, [r4, #0]
 800a8aa:	b91e      	cbnz	r6, 800a8b4 <_printf_i+0x198>
 800a8ac:	6823      	ldr	r3, [r4, #0]
 800a8ae:	f023 0320 	bic.w	r3, r3, #32
 800a8b2:	6023      	str	r3, [r4, #0]
 800a8b4:	2310      	movs	r3, #16
 800a8b6:	e7af      	b.n	800a818 <_printf_i+0xfc>
 800a8b8:	6823      	ldr	r3, [r4, #0]
 800a8ba:	f043 0320 	orr.w	r3, r3, #32
 800a8be:	6023      	str	r3, [r4, #0]
 800a8c0:	2378      	movs	r3, #120	; 0x78
 800a8c2:	4828      	ldr	r0, [pc, #160]	; (800a964 <_printf_i+0x248>)
 800a8c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8c8:	e7e3      	b.n	800a892 <_printf_i+0x176>
 800a8ca:	0659      	lsls	r1, r3, #25
 800a8cc:	bf48      	it	mi
 800a8ce:	b2b6      	uxthmi	r6, r6
 800a8d0:	e7e6      	b.n	800a8a0 <_printf_i+0x184>
 800a8d2:	4615      	mov	r5, r2
 800a8d4:	e7bb      	b.n	800a84e <_printf_i+0x132>
 800a8d6:	682b      	ldr	r3, [r5, #0]
 800a8d8:	6826      	ldr	r6, [r4, #0]
 800a8da:	1d18      	adds	r0, r3, #4
 800a8dc:	6961      	ldr	r1, [r4, #20]
 800a8de:	6028      	str	r0, [r5, #0]
 800a8e0:	0635      	lsls	r5, r6, #24
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	d501      	bpl.n	800a8ea <_printf_i+0x1ce>
 800a8e6:	6019      	str	r1, [r3, #0]
 800a8e8:	e002      	b.n	800a8f0 <_printf_i+0x1d4>
 800a8ea:	0670      	lsls	r0, r6, #25
 800a8ec:	d5fb      	bpl.n	800a8e6 <_printf_i+0x1ca>
 800a8ee:	8019      	strh	r1, [r3, #0]
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	4615      	mov	r5, r2
 800a8f4:	6123      	str	r3, [r4, #16]
 800a8f6:	e7ba      	b.n	800a86e <_printf_i+0x152>
 800a8f8:	682b      	ldr	r3, [r5, #0]
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	1d1a      	adds	r2, r3, #4
 800a8fe:	602a      	str	r2, [r5, #0]
 800a900:	681d      	ldr	r5, [r3, #0]
 800a902:	6862      	ldr	r2, [r4, #4]
 800a904:	4628      	mov	r0, r5
 800a906:	f002 fc0b 	bl	800d120 <memchr>
 800a90a:	b108      	cbz	r0, 800a910 <_printf_i+0x1f4>
 800a90c:	1b40      	subs	r0, r0, r5
 800a90e:	6060      	str	r0, [r4, #4]
 800a910:	6863      	ldr	r3, [r4, #4]
 800a912:	6123      	str	r3, [r4, #16]
 800a914:	2300      	movs	r3, #0
 800a916:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a91a:	e7a8      	b.n	800a86e <_printf_i+0x152>
 800a91c:	462a      	mov	r2, r5
 800a91e:	4649      	mov	r1, r9
 800a920:	4640      	mov	r0, r8
 800a922:	6923      	ldr	r3, [r4, #16]
 800a924:	47d0      	blx	sl
 800a926:	3001      	adds	r0, #1
 800a928:	d0ab      	beq.n	800a882 <_printf_i+0x166>
 800a92a:	6823      	ldr	r3, [r4, #0]
 800a92c:	079b      	lsls	r3, r3, #30
 800a92e:	d413      	bmi.n	800a958 <_printf_i+0x23c>
 800a930:	68e0      	ldr	r0, [r4, #12]
 800a932:	9b03      	ldr	r3, [sp, #12]
 800a934:	4298      	cmp	r0, r3
 800a936:	bfb8      	it	lt
 800a938:	4618      	movlt	r0, r3
 800a93a:	e7a4      	b.n	800a886 <_printf_i+0x16a>
 800a93c:	2301      	movs	r3, #1
 800a93e:	4632      	mov	r2, r6
 800a940:	4649      	mov	r1, r9
 800a942:	4640      	mov	r0, r8
 800a944:	47d0      	blx	sl
 800a946:	3001      	adds	r0, #1
 800a948:	d09b      	beq.n	800a882 <_printf_i+0x166>
 800a94a:	3501      	adds	r5, #1
 800a94c:	68e3      	ldr	r3, [r4, #12]
 800a94e:	9903      	ldr	r1, [sp, #12]
 800a950:	1a5b      	subs	r3, r3, r1
 800a952:	42ab      	cmp	r3, r5
 800a954:	dcf2      	bgt.n	800a93c <_printf_i+0x220>
 800a956:	e7eb      	b.n	800a930 <_printf_i+0x214>
 800a958:	2500      	movs	r5, #0
 800a95a:	f104 0619 	add.w	r6, r4, #25
 800a95e:	e7f5      	b.n	800a94c <_printf_i+0x230>
 800a960:	0800e996 	.word	0x0800e996
 800a964:	0800e9a7 	.word	0x0800e9a7

0800a968 <cleanup_glue>:
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	460c      	mov	r4, r1
 800a96c:	6809      	ldr	r1, [r1, #0]
 800a96e:	4605      	mov	r5, r0
 800a970:	b109      	cbz	r1, 800a976 <cleanup_glue+0xe>
 800a972:	f7ff fff9 	bl	800a968 <cleanup_glue>
 800a976:	4621      	mov	r1, r4
 800a978:	4628      	mov	r0, r5
 800a97a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a97e:	f7ff bab7 	b.w	8009ef0 <_free_r>
	...

0800a984 <_reclaim_reent>:
 800a984:	4b2c      	ldr	r3, [pc, #176]	; (800aa38 <_reclaim_reent+0xb4>)
 800a986:	b570      	push	{r4, r5, r6, lr}
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4604      	mov	r4, r0
 800a98c:	4283      	cmp	r3, r0
 800a98e:	d051      	beq.n	800aa34 <_reclaim_reent+0xb0>
 800a990:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a992:	b143      	cbz	r3, 800a9a6 <_reclaim_reent+0x22>
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d14a      	bne.n	800aa30 <_reclaim_reent+0xac>
 800a99a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a99c:	6819      	ldr	r1, [r3, #0]
 800a99e:	b111      	cbz	r1, 800a9a6 <_reclaim_reent+0x22>
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f7ff faa5 	bl	8009ef0 <_free_r>
 800a9a6:	6961      	ldr	r1, [r4, #20]
 800a9a8:	b111      	cbz	r1, 800a9b0 <_reclaim_reent+0x2c>
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f7ff faa0 	bl	8009ef0 <_free_r>
 800a9b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a9b2:	b111      	cbz	r1, 800a9ba <_reclaim_reent+0x36>
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f7ff fa9b 	bl	8009ef0 <_free_r>
 800a9ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a9bc:	b111      	cbz	r1, 800a9c4 <_reclaim_reent+0x40>
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f7ff fa96 	bl	8009ef0 <_free_r>
 800a9c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a9c6:	b111      	cbz	r1, 800a9ce <_reclaim_reent+0x4a>
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f7ff fa91 	bl	8009ef0 <_free_r>
 800a9ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a9d0:	b111      	cbz	r1, 800a9d8 <_reclaim_reent+0x54>
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f7ff fa8c 	bl	8009ef0 <_free_r>
 800a9d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a9da:	b111      	cbz	r1, 800a9e2 <_reclaim_reent+0x5e>
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f7ff fa87 	bl	8009ef0 <_free_r>
 800a9e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a9e4:	b111      	cbz	r1, 800a9ec <_reclaim_reent+0x68>
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f7ff fa82 	bl	8009ef0 <_free_r>
 800a9ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9ee:	b111      	cbz	r1, 800a9f6 <_reclaim_reent+0x72>
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f7ff fa7d 	bl	8009ef0 <_free_r>
 800a9f6:	69a3      	ldr	r3, [r4, #24]
 800a9f8:	b1e3      	cbz	r3, 800aa34 <_reclaim_reent+0xb0>
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a9fe:	4798      	blx	r3
 800aa00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aa02:	b1b9      	cbz	r1, 800aa34 <_reclaim_reent+0xb0>
 800aa04:	4620      	mov	r0, r4
 800aa06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa0a:	f7ff bfad 	b.w	800a968 <cleanup_glue>
 800aa0e:	5949      	ldr	r1, [r1, r5]
 800aa10:	b941      	cbnz	r1, 800aa24 <_reclaim_reent+0xa0>
 800aa12:	3504      	adds	r5, #4
 800aa14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa16:	2d80      	cmp	r5, #128	; 0x80
 800aa18:	68d9      	ldr	r1, [r3, #12]
 800aa1a:	d1f8      	bne.n	800aa0e <_reclaim_reent+0x8a>
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f7ff fa67 	bl	8009ef0 <_free_r>
 800aa22:	e7ba      	b.n	800a99a <_reclaim_reent+0x16>
 800aa24:	680e      	ldr	r6, [r1, #0]
 800aa26:	4620      	mov	r0, r4
 800aa28:	f7ff fa62 	bl	8009ef0 <_free_r>
 800aa2c:	4631      	mov	r1, r6
 800aa2e:	e7ef      	b.n	800aa10 <_reclaim_reent+0x8c>
 800aa30:	2500      	movs	r5, #0
 800aa32:	e7ef      	b.n	800aa14 <_reclaim_reent+0x90>
 800aa34:	bd70      	pop	{r4, r5, r6, pc}
 800aa36:	bf00      	nop
 800aa38:	2000024c 	.word	0x2000024c

0800aa3c <_sbrk_r>:
 800aa3c:	b538      	push	{r3, r4, r5, lr}
 800aa3e:	2300      	movs	r3, #0
 800aa40:	4d05      	ldr	r5, [pc, #20]	; (800aa58 <_sbrk_r+0x1c>)
 800aa42:	4604      	mov	r4, r0
 800aa44:	4608      	mov	r0, r1
 800aa46:	602b      	str	r3, [r5, #0]
 800aa48:	f7fa f9c2 	bl	8004dd0 <_sbrk>
 800aa4c:	1c43      	adds	r3, r0, #1
 800aa4e:	d102      	bne.n	800aa56 <_sbrk_r+0x1a>
 800aa50:	682b      	ldr	r3, [r5, #0]
 800aa52:	b103      	cbz	r3, 800aa56 <_sbrk_r+0x1a>
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	bd38      	pop	{r3, r4, r5, pc}
 800aa58:	20009fdc 	.word	0x20009fdc

0800aa5c <siprintf>:
 800aa5c:	b40e      	push	{r1, r2, r3}
 800aa5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa62:	b500      	push	{lr}
 800aa64:	b09c      	sub	sp, #112	; 0x70
 800aa66:	ab1d      	add	r3, sp, #116	; 0x74
 800aa68:	9002      	str	r0, [sp, #8]
 800aa6a:	9006      	str	r0, [sp, #24]
 800aa6c:	9107      	str	r1, [sp, #28]
 800aa6e:	9104      	str	r1, [sp, #16]
 800aa70:	4808      	ldr	r0, [pc, #32]	; (800aa94 <siprintf+0x38>)
 800aa72:	4909      	ldr	r1, [pc, #36]	; (800aa98 <siprintf+0x3c>)
 800aa74:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa78:	9105      	str	r1, [sp, #20]
 800aa7a:	6800      	ldr	r0, [r0, #0]
 800aa7c:	a902      	add	r1, sp, #8
 800aa7e:	9301      	str	r3, [sp, #4]
 800aa80:	f003 f890 	bl	800dba4 <_svfiprintf_r>
 800aa84:	2200      	movs	r2, #0
 800aa86:	9b02      	ldr	r3, [sp, #8]
 800aa88:	701a      	strb	r2, [r3, #0]
 800aa8a:	b01c      	add	sp, #112	; 0x70
 800aa8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa90:	b003      	add	sp, #12
 800aa92:	4770      	bx	lr
 800aa94:	2000024c 	.word	0x2000024c
 800aa98:	ffff0208 	.word	0xffff0208

0800aa9c <__sread>:
 800aa9c:	b510      	push	{r4, lr}
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa4:	f003 fad6 	bl	800e054 <_read_r>
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	bfab      	itete	ge
 800aaac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aaae:	89a3      	ldrhlt	r3, [r4, #12]
 800aab0:	181b      	addge	r3, r3, r0
 800aab2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aab6:	bfac      	ite	ge
 800aab8:	6563      	strge	r3, [r4, #84]	; 0x54
 800aaba:	81a3      	strhlt	r3, [r4, #12]
 800aabc:	bd10      	pop	{r4, pc}

0800aabe <__swrite>:
 800aabe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac2:	461f      	mov	r7, r3
 800aac4:	898b      	ldrh	r3, [r1, #12]
 800aac6:	4605      	mov	r5, r0
 800aac8:	05db      	lsls	r3, r3, #23
 800aaca:	460c      	mov	r4, r1
 800aacc:	4616      	mov	r6, r2
 800aace:	d505      	bpl.n	800aadc <__swrite+0x1e>
 800aad0:	2302      	movs	r3, #2
 800aad2:	2200      	movs	r2, #0
 800aad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad8:	f002 fafe 	bl	800d0d8 <_lseek_r>
 800aadc:	89a3      	ldrh	r3, [r4, #12]
 800aade:	4632      	mov	r2, r6
 800aae0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aae4:	81a3      	strh	r3, [r4, #12]
 800aae6:	4628      	mov	r0, r5
 800aae8:	463b      	mov	r3, r7
 800aaea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aaee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf2:	f000 bffd 	b.w	800baf0 <_write_r>

0800aaf6 <__sseek>:
 800aaf6:	b510      	push	{r4, lr}
 800aaf8:	460c      	mov	r4, r1
 800aafa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aafe:	f002 faeb 	bl	800d0d8 <_lseek_r>
 800ab02:	1c43      	adds	r3, r0, #1
 800ab04:	89a3      	ldrh	r3, [r4, #12]
 800ab06:	bf15      	itete	ne
 800ab08:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab12:	81a3      	strheq	r3, [r4, #12]
 800ab14:	bf18      	it	ne
 800ab16:	81a3      	strhne	r3, [r4, #12]
 800ab18:	bd10      	pop	{r4, pc}

0800ab1a <__sclose>:
 800ab1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab1e:	f001 b817 	b.w	800bb50 <_close_r>

0800ab22 <strcat>:
 800ab22:	4602      	mov	r2, r0
 800ab24:	b510      	push	{r4, lr}
 800ab26:	7814      	ldrb	r4, [r2, #0]
 800ab28:	4613      	mov	r3, r2
 800ab2a:	3201      	adds	r2, #1
 800ab2c:	2c00      	cmp	r4, #0
 800ab2e:	d1fa      	bne.n	800ab26 <strcat+0x4>
 800ab30:	3b01      	subs	r3, #1
 800ab32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab3a:	2a00      	cmp	r2, #0
 800ab3c:	d1f9      	bne.n	800ab32 <strcat+0x10>
 800ab3e:	bd10      	pop	{r4, pc}

0800ab40 <strcpy>:
 800ab40:	4603      	mov	r3, r0
 800ab42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab46:	f803 2b01 	strb.w	r2, [r3], #1
 800ab4a:	2a00      	cmp	r2, #0
 800ab4c:	d1f9      	bne.n	800ab42 <strcpy+0x2>
 800ab4e:	4770      	bx	lr

0800ab50 <strstr>:
 800ab50:	780a      	ldrb	r2, [r1, #0]
 800ab52:	b570      	push	{r4, r5, r6, lr}
 800ab54:	b96a      	cbnz	r2, 800ab72 <strstr+0x22>
 800ab56:	bd70      	pop	{r4, r5, r6, pc}
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d109      	bne.n	800ab70 <strstr+0x20>
 800ab5c:	460c      	mov	r4, r1
 800ab5e:	4605      	mov	r5, r0
 800ab60:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d0f6      	beq.n	800ab56 <strstr+0x6>
 800ab68:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ab6c:	429e      	cmp	r6, r3
 800ab6e:	d0f7      	beq.n	800ab60 <strstr+0x10>
 800ab70:	3001      	adds	r0, #1
 800ab72:	7803      	ldrb	r3, [r0, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1ef      	bne.n	800ab58 <strstr+0x8>
 800ab78:	4618      	mov	r0, r3
 800ab7a:	e7ec      	b.n	800ab56 <strstr+0x6>

0800ab7c <sulp>:
 800ab7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab80:	460f      	mov	r7, r1
 800ab82:	4690      	mov	r8, r2
 800ab84:	f002 fe56 	bl	800d834 <__ulp>
 800ab88:	4604      	mov	r4, r0
 800ab8a:	460d      	mov	r5, r1
 800ab8c:	f1b8 0f00 	cmp.w	r8, #0
 800ab90:	d011      	beq.n	800abb6 <sulp+0x3a>
 800ab92:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ab96:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	dd0b      	ble.n	800abb6 <sulp+0x3a>
 800ab9e:	2400      	movs	r4, #0
 800aba0:	051b      	lsls	r3, r3, #20
 800aba2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aba6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800abaa:	4622      	mov	r2, r4
 800abac:	462b      	mov	r3, r5
 800abae:	f7f5 fd0d 	bl	80005cc <__aeabi_dmul>
 800abb2:	4604      	mov	r4, r0
 800abb4:	460d      	mov	r5, r1
 800abb6:	4620      	mov	r0, r4
 800abb8:	4629      	mov	r1, r5
 800abba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800abc0 <_strtod_l>:
 800abc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc4:	469b      	mov	fp, r3
 800abc6:	2300      	movs	r3, #0
 800abc8:	b09f      	sub	sp, #124	; 0x7c
 800abca:	931a      	str	r3, [sp, #104]	; 0x68
 800abcc:	4b9e      	ldr	r3, [pc, #632]	; (800ae48 <_strtod_l+0x288>)
 800abce:	4682      	mov	sl, r0
 800abd0:	681f      	ldr	r7, [r3, #0]
 800abd2:	460e      	mov	r6, r1
 800abd4:	4638      	mov	r0, r7
 800abd6:	9215      	str	r2, [sp, #84]	; 0x54
 800abd8:	f7f5 fb34 	bl	8000244 <strlen>
 800abdc:	f04f 0800 	mov.w	r8, #0
 800abe0:	4604      	mov	r4, r0
 800abe2:	f04f 0900 	mov.w	r9, #0
 800abe6:	9619      	str	r6, [sp, #100]	; 0x64
 800abe8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abea:	781a      	ldrb	r2, [r3, #0]
 800abec:	2a2b      	cmp	r2, #43	; 0x2b
 800abee:	d04c      	beq.n	800ac8a <_strtod_l+0xca>
 800abf0:	d83a      	bhi.n	800ac68 <_strtod_l+0xa8>
 800abf2:	2a0d      	cmp	r2, #13
 800abf4:	d833      	bhi.n	800ac5e <_strtod_l+0x9e>
 800abf6:	2a08      	cmp	r2, #8
 800abf8:	d833      	bhi.n	800ac62 <_strtod_l+0xa2>
 800abfa:	2a00      	cmp	r2, #0
 800abfc:	d03d      	beq.n	800ac7a <_strtod_l+0xba>
 800abfe:	2300      	movs	r3, #0
 800ac00:	930a      	str	r3, [sp, #40]	; 0x28
 800ac02:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800ac04:	782b      	ldrb	r3, [r5, #0]
 800ac06:	2b30      	cmp	r3, #48	; 0x30
 800ac08:	f040 80aa 	bne.w	800ad60 <_strtod_l+0x1a0>
 800ac0c:	786b      	ldrb	r3, [r5, #1]
 800ac0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac12:	2b58      	cmp	r3, #88	; 0x58
 800ac14:	d166      	bne.n	800ace4 <_strtod_l+0x124>
 800ac16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac18:	4650      	mov	r0, sl
 800ac1a:	9301      	str	r3, [sp, #4]
 800ac1c:	ab1a      	add	r3, sp, #104	; 0x68
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	4a8a      	ldr	r2, [pc, #552]	; (800ae4c <_strtod_l+0x28c>)
 800ac22:	f8cd b008 	str.w	fp, [sp, #8]
 800ac26:	ab1b      	add	r3, sp, #108	; 0x6c
 800ac28:	a919      	add	r1, sp, #100	; 0x64
 800ac2a:	f001 ff53 	bl	800cad4 <__gethex>
 800ac2e:	f010 0607 	ands.w	r6, r0, #7
 800ac32:	4604      	mov	r4, r0
 800ac34:	d005      	beq.n	800ac42 <_strtod_l+0x82>
 800ac36:	2e06      	cmp	r6, #6
 800ac38:	d129      	bne.n	800ac8e <_strtod_l+0xce>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	3501      	adds	r5, #1
 800ac3e:	9519      	str	r5, [sp, #100]	; 0x64
 800ac40:	930a      	str	r3, [sp, #40]	; 0x28
 800ac42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f040 858a 	bne.w	800b75e <_strtod_l+0xb9e>
 800ac4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac4c:	b1d3      	cbz	r3, 800ac84 <_strtod_l+0xc4>
 800ac4e:	4642      	mov	r2, r8
 800ac50:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ac54:	4610      	mov	r0, r2
 800ac56:	4619      	mov	r1, r3
 800ac58:	b01f      	add	sp, #124	; 0x7c
 800ac5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac5e:	2a20      	cmp	r2, #32
 800ac60:	d1cd      	bne.n	800abfe <_strtod_l+0x3e>
 800ac62:	3301      	adds	r3, #1
 800ac64:	9319      	str	r3, [sp, #100]	; 0x64
 800ac66:	e7bf      	b.n	800abe8 <_strtod_l+0x28>
 800ac68:	2a2d      	cmp	r2, #45	; 0x2d
 800ac6a:	d1c8      	bne.n	800abfe <_strtod_l+0x3e>
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	920a      	str	r2, [sp, #40]	; 0x28
 800ac70:	1c5a      	adds	r2, r3, #1
 800ac72:	9219      	str	r2, [sp, #100]	; 0x64
 800ac74:	785b      	ldrb	r3, [r3, #1]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1c3      	bne.n	800ac02 <_strtod_l+0x42>
 800ac7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac7c:	9619      	str	r6, [sp, #100]	; 0x64
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f040 856b 	bne.w	800b75a <_strtod_l+0xb9a>
 800ac84:	4642      	mov	r2, r8
 800ac86:	464b      	mov	r3, r9
 800ac88:	e7e4      	b.n	800ac54 <_strtod_l+0x94>
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	e7ef      	b.n	800ac6e <_strtod_l+0xae>
 800ac8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ac90:	b13a      	cbz	r2, 800aca2 <_strtod_l+0xe2>
 800ac92:	2135      	movs	r1, #53	; 0x35
 800ac94:	a81c      	add	r0, sp, #112	; 0x70
 800ac96:	f002 fed1 	bl	800da3c <__copybits>
 800ac9a:	4650      	mov	r0, sl
 800ac9c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ac9e:	f002 fa99 	bl	800d1d4 <_Bfree>
 800aca2:	3e01      	subs	r6, #1
 800aca4:	2e04      	cmp	r6, #4
 800aca6:	d806      	bhi.n	800acb6 <_strtod_l+0xf6>
 800aca8:	e8df f006 	tbb	[pc, r6]
 800acac:	1714030a 	.word	0x1714030a
 800acb0:	0a          	.byte	0x0a
 800acb1:	00          	.byte	0x00
 800acb2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800acb6:	0721      	lsls	r1, r4, #28
 800acb8:	d5c3      	bpl.n	800ac42 <_strtod_l+0x82>
 800acba:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800acbe:	e7c0      	b.n	800ac42 <_strtod_l+0x82>
 800acc0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800acc2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800acc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800acca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800acce:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800acd2:	e7f0      	b.n	800acb6 <_strtod_l+0xf6>
 800acd4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ae50 <_strtod_l+0x290>
 800acd8:	e7ed      	b.n	800acb6 <_strtod_l+0xf6>
 800acda:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800acde:	f04f 38ff 	mov.w	r8, #4294967295
 800ace2:	e7e8      	b.n	800acb6 <_strtod_l+0xf6>
 800ace4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ace6:	1c5a      	adds	r2, r3, #1
 800ace8:	9219      	str	r2, [sp, #100]	; 0x64
 800acea:	785b      	ldrb	r3, [r3, #1]
 800acec:	2b30      	cmp	r3, #48	; 0x30
 800acee:	d0f9      	beq.n	800ace4 <_strtod_l+0x124>
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d0a6      	beq.n	800ac42 <_strtod_l+0x82>
 800acf4:	2301      	movs	r3, #1
 800acf6:	9307      	str	r3, [sp, #28]
 800acf8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800acfa:	220a      	movs	r2, #10
 800acfc:	9308      	str	r3, [sp, #32]
 800acfe:	2300      	movs	r3, #0
 800ad00:	469b      	mov	fp, r3
 800ad02:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ad06:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ad08:	7805      	ldrb	r5, [r0, #0]
 800ad0a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800ad0e:	b2d9      	uxtb	r1, r3
 800ad10:	2909      	cmp	r1, #9
 800ad12:	d927      	bls.n	800ad64 <_strtod_l+0x1a4>
 800ad14:	4622      	mov	r2, r4
 800ad16:	4639      	mov	r1, r7
 800ad18:	f003 f9b8 	bl	800e08c <strncmp>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	d033      	beq.n	800ad88 <_strtod_l+0x1c8>
 800ad20:	2000      	movs	r0, #0
 800ad22:	462a      	mov	r2, r5
 800ad24:	465c      	mov	r4, fp
 800ad26:	4603      	mov	r3, r0
 800ad28:	9004      	str	r0, [sp, #16]
 800ad2a:	2a65      	cmp	r2, #101	; 0x65
 800ad2c:	d001      	beq.n	800ad32 <_strtod_l+0x172>
 800ad2e:	2a45      	cmp	r2, #69	; 0x45
 800ad30:	d114      	bne.n	800ad5c <_strtod_l+0x19c>
 800ad32:	b91c      	cbnz	r4, 800ad3c <_strtod_l+0x17c>
 800ad34:	9a07      	ldr	r2, [sp, #28]
 800ad36:	4302      	orrs	r2, r0
 800ad38:	d09f      	beq.n	800ac7a <_strtod_l+0xba>
 800ad3a:	2400      	movs	r4, #0
 800ad3c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ad3e:	1c72      	adds	r2, r6, #1
 800ad40:	9219      	str	r2, [sp, #100]	; 0x64
 800ad42:	7872      	ldrb	r2, [r6, #1]
 800ad44:	2a2b      	cmp	r2, #43	; 0x2b
 800ad46:	d079      	beq.n	800ae3c <_strtod_l+0x27c>
 800ad48:	2a2d      	cmp	r2, #45	; 0x2d
 800ad4a:	f000 8083 	beq.w	800ae54 <_strtod_l+0x294>
 800ad4e:	2700      	movs	r7, #0
 800ad50:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ad54:	2909      	cmp	r1, #9
 800ad56:	f240 8083 	bls.w	800ae60 <_strtod_l+0x2a0>
 800ad5a:	9619      	str	r6, [sp, #100]	; 0x64
 800ad5c:	2500      	movs	r5, #0
 800ad5e:	e09f      	b.n	800aea0 <_strtod_l+0x2e0>
 800ad60:	2300      	movs	r3, #0
 800ad62:	e7c8      	b.n	800acf6 <_strtod_l+0x136>
 800ad64:	f1bb 0f08 	cmp.w	fp, #8
 800ad68:	bfd5      	itete	le
 800ad6a:	9906      	ldrle	r1, [sp, #24]
 800ad6c:	9905      	ldrgt	r1, [sp, #20]
 800ad6e:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad72:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ad76:	f100 0001 	add.w	r0, r0, #1
 800ad7a:	bfd4      	ite	le
 800ad7c:	9306      	strle	r3, [sp, #24]
 800ad7e:	9305      	strgt	r3, [sp, #20]
 800ad80:	f10b 0b01 	add.w	fp, fp, #1
 800ad84:	9019      	str	r0, [sp, #100]	; 0x64
 800ad86:	e7be      	b.n	800ad06 <_strtod_l+0x146>
 800ad88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad8a:	191a      	adds	r2, r3, r4
 800ad8c:	9219      	str	r2, [sp, #100]	; 0x64
 800ad8e:	5d1a      	ldrb	r2, [r3, r4]
 800ad90:	f1bb 0f00 	cmp.w	fp, #0
 800ad94:	d036      	beq.n	800ae04 <_strtod_l+0x244>
 800ad96:	465c      	mov	r4, fp
 800ad98:	9004      	str	r0, [sp, #16]
 800ad9a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ad9e:	2b09      	cmp	r3, #9
 800ada0:	d912      	bls.n	800adc8 <_strtod_l+0x208>
 800ada2:	2301      	movs	r3, #1
 800ada4:	e7c1      	b.n	800ad2a <_strtod_l+0x16a>
 800ada6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ada8:	3001      	adds	r0, #1
 800adaa:	1c5a      	adds	r2, r3, #1
 800adac:	9219      	str	r2, [sp, #100]	; 0x64
 800adae:	785a      	ldrb	r2, [r3, #1]
 800adb0:	2a30      	cmp	r2, #48	; 0x30
 800adb2:	d0f8      	beq.n	800ada6 <_strtod_l+0x1e6>
 800adb4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800adb8:	2b08      	cmp	r3, #8
 800adba:	f200 84d5 	bhi.w	800b768 <_strtod_l+0xba8>
 800adbe:	9004      	str	r0, [sp, #16]
 800adc0:	2000      	movs	r0, #0
 800adc2:	4604      	mov	r4, r0
 800adc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800adc6:	9308      	str	r3, [sp, #32]
 800adc8:	3a30      	subs	r2, #48	; 0x30
 800adca:	f100 0301 	add.w	r3, r0, #1
 800adce:	d013      	beq.n	800adf8 <_strtod_l+0x238>
 800add0:	9904      	ldr	r1, [sp, #16]
 800add2:	1905      	adds	r5, r0, r4
 800add4:	4419      	add	r1, r3
 800add6:	9104      	str	r1, [sp, #16]
 800add8:	4623      	mov	r3, r4
 800adda:	210a      	movs	r1, #10
 800addc:	42ab      	cmp	r3, r5
 800adde:	d113      	bne.n	800ae08 <_strtod_l+0x248>
 800ade0:	1823      	adds	r3, r4, r0
 800ade2:	2b08      	cmp	r3, #8
 800ade4:	f104 0401 	add.w	r4, r4, #1
 800ade8:	4404      	add	r4, r0
 800adea:	dc1b      	bgt.n	800ae24 <_strtod_l+0x264>
 800adec:	230a      	movs	r3, #10
 800adee:	9906      	ldr	r1, [sp, #24]
 800adf0:	fb03 2301 	mla	r3, r3, r1, r2
 800adf4:	9306      	str	r3, [sp, #24]
 800adf6:	2300      	movs	r3, #0
 800adf8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800adfa:	4618      	mov	r0, r3
 800adfc:	1c51      	adds	r1, r2, #1
 800adfe:	9119      	str	r1, [sp, #100]	; 0x64
 800ae00:	7852      	ldrb	r2, [r2, #1]
 800ae02:	e7ca      	b.n	800ad9a <_strtod_l+0x1da>
 800ae04:	4658      	mov	r0, fp
 800ae06:	e7d3      	b.n	800adb0 <_strtod_l+0x1f0>
 800ae08:	2b08      	cmp	r3, #8
 800ae0a:	dc04      	bgt.n	800ae16 <_strtod_l+0x256>
 800ae0c:	9f06      	ldr	r7, [sp, #24]
 800ae0e:	434f      	muls	r7, r1
 800ae10:	9706      	str	r7, [sp, #24]
 800ae12:	3301      	adds	r3, #1
 800ae14:	e7e2      	b.n	800addc <_strtod_l+0x21c>
 800ae16:	1c5f      	adds	r7, r3, #1
 800ae18:	2f10      	cmp	r7, #16
 800ae1a:	bfde      	ittt	le
 800ae1c:	9f05      	ldrle	r7, [sp, #20]
 800ae1e:	434f      	mulle	r7, r1
 800ae20:	9705      	strle	r7, [sp, #20]
 800ae22:	e7f6      	b.n	800ae12 <_strtod_l+0x252>
 800ae24:	2c10      	cmp	r4, #16
 800ae26:	bfdf      	itttt	le
 800ae28:	230a      	movle	r3, #10
 800ae2a:	9905      	ldrle	r1, [sp, #20]
 800ae2c:	fb03 2301 	mlale	r3, r3, r1, r2
 800ae30:	9305      	strle	r3, [sp, #20]
 800ae32:	e7e0      	b.n	800adf6 <_strtod_l+0x236>
 800ae34:	2300      	movs	r3, #0
 800ae36:	9304      	str	r3, [sp, #16]
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e77b      	b.n	800ad34 <_strtod_l+0x174>
 800ae3c:	2700      	movs	r7, #0
 800ae3e:	1cb2      	adds	r2, r6, #2
 800ae40:	9219      	str	r2, [sp, #100]	; 0x64
 800ae42:	78b2      	ldrb	r2, [r6, #2]
 800ae44:	e784      	b.n	800ad50 <_strtod_l+0x190>
 800ae46:	bf00      	nop
 800ae48:	0800ec98 	.word	0x0800ec98
 800ae4c:	0800e9b8 	.word	0x0800e9b8
 800ae50:	7ff00000 	.word	0x7ff00000
 800ae54:	2701      	movs	r7, #1
 800ae56:	e7f2      	b.n	800ae3e <_strtod_l+0x27e>
 800ae58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae5a:	1c51      	adds	r1, r2, #1
 800ae5c:	9119      	str	r1, [sp, #100]	; 0x64
 800ae5e:	7852      	ldrb	r2, [r2, #1]
 800ae60:	2a30      	cmp	r2, #48	; 0x30
 800ae62:	d0f9      	beq.n	800ae58 <_strtod_l+0x298>
 800ae64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ae68:	2908      	cmp	r1, #8
 800ae6a:	f63f af77 	bhi.w	800ad5c <_strtod_l+0x19c>
 800ae6e:	f04f 0e0a 	mov.w	lr, #10
 800ae72:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800ae76:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae78:	9209      	str	r2, [sp, #36]	; 0x24
 800ae7a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae7c:	1c51      	adds	r1, r2, #1
 800ae7e:	9119      	str	r1, [sp, #100]	; 0x64
 800ae80:	7852      	ldrb	r2, [r2, #1]
 800ae82:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800ae86:	2d09      	cmp	r5, #9
 800ae88:	d935      	bls.n	800aef6 <_strtod_l+0x336>
 800ae8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ae8c:	1b49      	subs	r1, r1, r5
 800ae8e:	2908      	cmp	r1, #8
 800ae90:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800ae94:	dc02      	bgt.n	800ae9c <_strtod_l+0x2dc>
 800ae96:	4565      	cmp	r5, ip
 800ae98:	bfa8      	it	ge
 800ae9a:	4665      	movge	r5, ip
 800ae9c:	b107      	cbz	r7, 800aea0 <_strtod_l+0x2e0>
 800ae9e:	426d      	negs	r5, r5
 800aea0:	2c00      	cmp	r4, #0
 800aea2:	d14c      	bne.n	800af3e <_strtod_l+0x37e>
 800aea4:	9907      	ldr	r1, [sp, #28]
 800aea6:	4301      	orrs	r1, r0
 800aea8:	f47f aecb 	bne.w	800ac42 <_strtod_l+0x82>
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f47f aee4 	bne.w	800ac7a <_strtod_l+0xba>
 800aeb2:	2a69      	cmp	r2, #105	; 0x69
 800aeb4:	d026      	beq.n	800af04 <_strtod_l+0x344>
 800aeb6:	dc23      	bgt.n	800af00 <_strtod_l+0x340>
 800aeb8:	2a49      	cmp	r2, #73	; 0x49
 800aeba:	d023      	beq.n	800af04 <_strtod_l+0x344>
 800aebc:	2a4e      	cmp	r2, #78	; 0x4e
 800aebe:	f47f aedc 	bne.w	800ac7a <_strtod_l+0xba>
 800aec2:	499d      	ldr	r1, [pc, #628]	; (800b138 <_strtod_l+0x578>)
 800aec4:	a819      	add	r0, sp, #100	; 0x64
 800aec6:	f002 f853 	bl	800cf70 <__match>
 800aeca:	2800      	cmp	r0, #0
 800aecc:	f43f aed5 	beq.w	800ac7a <_strtod_l+0xba>
 800aed0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	2b28      	cmp	r3, #40	; 0x28
 800aed6:	d12c      	bne.n	800af32 <_strtod_l+0x372>
 800aed8:	4998      	ldr	r1, [pc, #608]	; (800b13c <_strtod_l+0x57c>)
 800aeda:	aa1c      	add	r2, sp, #112	; 0x70
 800aedc:	a819      	add	r0, sp, #100	; 0x64
 800aede:	f002 f85b 	bl	800cf98 <__hexnan>
 800aee2:	2805      	cmp	r0, #5
 800aee4:	d125      	bne.n	800af32 <_strtod_l+0x372>
 800aee6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aee8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800aeec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800aef0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800aef4:	e6a5      	b.n	800ac42 <_strtod_l+0x82>
 800aef6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800aefa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800aefe:	e7bc      	b.n	800ae7a <_strtod_l+0x2ba>
 800af00:	2a6e      	cmp	r2, #110	; 0x6e
 800af02:	e7dc      	b.n	800aebe <_strtod_l+0x2fe>
 800af04:	498e      	ldr	r1, [pc, #568]	; (800b140 <_strtod_l+0x580>)
 800af06:	a819      	add	r0, sp, #100	; 0x64
 800af08:	f002 f832 	bl	800cf70 <__match>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	f43f aeb4 	beq.w	800ac7a <_strtod_l+0xba>
 800af12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af14:	498b      	ldr	r1, [pc, #556]	; (800b144 <_strtod_l+0x584>)
 800af16:	3b01      	subs	r3, #1
 800af18:	a819      	add	r0, sp, #100	; 0x64
 800af1a:	9319      	str	r3, [sp, #100]	; 0x64
 800af1c:	f002 f828 	bl	800cf70 <__match>
 800af20:	b910      	cbnz	r0, 800af28 <_strtod_l+0x368>
 800af22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af24:	3301      	adds	r3, #1
 800af26:	9319      	str	r3, [sp, #100]	; 0x64
 800af28:	f04f 0800 	mov.w	r8, #0
 800af2c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800b148 <_strtod_l+0x588>
 800af30:	e687      	b.n	800ac42 <_strtod_l+0x82>
 800af32:	4886      	ldr	r0, [pc, #536]	; (800b14c <_strtod_l+0x58c>)
 800af34:	f003 f8a0 	bl	800e078 <nan>
 800af38:	4680      	mov	r8, r0
 800af3a:	4689      	mov	r9, r1
 800af3c:	e681      	b.n	800ac42 <_strtod_l+0x82>
 800af3e:	9b04      	ldr	r3, [sp, #16]
 800af40:	f1bb 0f00 	cmp.w	fp, #0
 800af44:	bf08      	it	eq
 800af46:	46a3      	moveq	fp, r4
 800af48:	1aeb      	subs	r3, r5, r3
 800af4a:	2c10      	cmp	r4, #16
 800af4c:	9806      	ldr	r0, [sp, #24]
 800af4e:	4626      	mov	r6, r4
 800af50:	9307      	str	r3, [sp, #28]
 800af52:	bfa8      	it	ge
 800af54:	2610      	movge	r6, #16
 800af56:	f7f5 fabf 	bl	80004d8 <__aeabi_ui2d>
 800af5a:	2c09      	cmp	r4, #9
 800af5c:	4680      	mov	r8, r0
 800af5e:	4689      	mov	r9, r1
 800af60:	dd13      	ble.n	800af8a <_strtod_l+0x3ca>
 800af62:	4b7b      	ldr	r3, [pc, #492]	; (800b150 <_strtod_l+0x590>)
 800af64:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800af68:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800af6c:	f7f5 fb2e 	bl	80005cc <__aeabi_dmul>
 800af70:	4680      	mov	r8, r0
 800af72:	9805      	ldr	r0, [sp, #20]
 800af74:	4689      	mov	r9, r1
 800af76:	f7f5 faaf 	bl	80004d8 <__aeabi_ui2d>
 800af7a:	4602      	mov	r2, r0
 800af7c:	460b      	mov	r3, r1
 800af7e:	4640      	mov	r0, r8
 800af80:	4649      	mov	r1, r9
 800af82:	f7f5 f96d 	bl	8000260 <__adddf3>
 800af86:	4680      	mov	r8, r0
 800af88:	4689      	mov	r9, r1
 800af8a:	2c0f      	cmp	r4, #15
 800af8c:	dc36      	bgt.n	800affc <_strtod_l+0x43c>
 800af8e:	9b07      	ldr	r3, [sp, #28]
 800af90:	2b00      	cmp	r3, #0
 800af92:	f43f ae56 	beq.w	800ac42 <_strtod_l+0x82>
 800af96:	dd22      	ble.n	800afde <_strtod_l+0x41e>
 800af98:	2b16      	cmp	r3, #22
 800af9a:	dc09      	bgt.n	800afb0 <_strtod_l+0x3f0>
 800af9c:	496c      	ldr	r1, [pc, #432]	; (800b150 <_strtod_l+0x590>)
 800af9e:	4642      	mov	r2, r8
 800afa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800afa4:	464b      	mov	r3, r9
 800afa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afaa:	f7f5 fb0f 	bl	80005cc <__aeabi_dmul>
 800afae:	e7c3      	b.n	800af38 <_strtod_l+0x378>
 800afb0:	9a07      	ldr	r2, [sp, #28]
 800afb2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800afb6:	4293      	cmp	r3, r2
 800afb8:	db20      	blt.n	800affc <_strtod_l+0x43c>
 800afba:	4d65      	ldr	r5, [pc, #404]	; (800b150 <_strtod_l+0x590>)
 800afbc:	f1c4 040f 	rsb	r4, r4, #15
 800afc0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800afc4:	4642      	mov	r2, r8
 800afc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afca:	464b      	mov	r3, r9
 800afcc:	f7f5 fafe 	bl	80005cc <__aeabi_dmul>
 800afd0:	9b07      	ldr	r3, [sp, #28]
 800afd2:	1b1c      	subs	r4, r3, r4
 800afd4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800afd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afdc:	e7e5      	b.n	800afaa <_strtod_l+0x3ea>
 800afde:	9b07      	ldr	r3, [sp, #28]
 800afe0:	3316      	adds	r3, #22
 800afe2:	db0b      	blt.n	800affc <_strtod_l+0x43c>
 800afe4:	9b04      	ldr	r3, [sp, #16]
 800afe6:	4640      	mov	r0, r8
 800afe8:	1b5d      	subs	r5, r3, r5
 800afea:	4b59      	ldr	r3, [pc, #356]	; (800b150 <_strtod_l+0x590>)
 800afec:	4649      	mov	r1, r9
 800afee:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800aff2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aff6:	f7f5 fc13 	bl	8000820 <__aeabi_ddiv>
 800affa:	e79d      	b.n	800af38 <_strtod_l+0x378>
 800affc:	9b07      	ldr	r3, [sp, #28]
 800affe:	1ba6      	subs	r6, r4, r6
 800b000:	441e      	add	r6, r3
 800b002:	2e00      	cmp	r6, #0
 800b004:	dd74      	ble.n	800b0f0 <_strtod_l+0x530>
 800b006:	f016 030f 	ands.w	r3, r6, #15
 800b00a:	d00a      	beq.n	800b022 <_strtod_l+0x462>
 800b00c:	4950      	ldr	r1, [pc, #320]	; (800b150 <_strtod_l+0x590>)
 800b00e:	4642      	mov	r2, r8
 800b010:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b014:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b018:	464b      	mov	r3, r9
 800b01a:	f7f5 fad7 	bl	80005cc <__aeabi_dmul>
 800b01e:	4680      	mov	r8, r0
 800b020:	4689      	mov	r9, r1
 800b022:	f036 060f 	bics.w	r6, r6, #15
 800b026:	d052      	beq.n	800b0ce <_strtod_l+0x50e>
 800b028:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800b02c:	dd27      	ble.n	800b07e <_strtod_l+0x4be>
 800b02e:	f04f 0b00 	mov.w	fp, #0
 800b032:	f8cd b010 	str.w	fp, [sp, #16]
 800b036:	f8cd b020 	str.w	fp, [sp, #32]
 800b03a:	f8cd b018 	str.w	fp, [sp, #24]
 800b03e:	2322      	movs	r3, #34	; 0x22
 800b040:	f04f 0800 	mov.w	r8, #0
 800b044:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800b148 <_strtod_l+0x588>
 800b048:	f8ca 3000 	str.w	r3, [sl]
 800b04c:	9b08      	ldr	r3, [sp, #32]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	f43f adf7 	beq.w	800ac42 <_strtod_l+0x82>
 800b054:	4650      	mov	r0, sl
 800b056:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b058:	f002 f8bc 	bl	800d1d4 <_Bfree>
 800b05c:	4650      	mov	r0, sl
 800b05e:	9906      	ldr	r1, [sp, #24]
 800b060:	f002 f8b8 	bl	800d1d4 <_Bfree>
 800b064:	4650      	mov	r0, sl
 800b066:	9904      	ldr	r1, [sp, #16]
 800b068:	f002 f8b4 	bl	800d1d4 <_Bfree>
 800b06c:	4650      	mov	r0, sl
 800b06e:	9908      	ldr	r1, [sp, #32]
 800b070:	f002 f8b0 	bl	800d1d4 <_Bfree>
 800b074:	4659      	mov	r1, fp
 800b076:	4650      	mov	r0, sl
 800b078:	f002 f8ac 	bl	800d1d4 <_Bfree>
 800b07c:	e5e1      	b.n	800ac42 <_strtod_l+0x82>
 800b07e:	4b35      	ldr	r3, [pc, #212]	; (800b154 <_strtod_l+0x594>)
 800b080:	4640      	mov	r0, r8
 800b082:	9305      	str	r3, [sp, #20]
 800b084:	2300      	movs	r3, #0
 800b086:	4649      	mov	r1, r9
 800b088:	461f      	mov	r7, r3
 800b08a:	1136      	asrs	r6, r6, #4
 800b08c:	2e01      	cmp	r6, #1
 800b08e:	dc21      	bgt.n	800b0d4 <_strtod_l+0x514>
 800b090:	b10b      	cbz	r3, 800b096 <_strtod_l+0x4d6>
 800b092:	4680      	mov	r8, r0
 800b094:	4689      	mov	r9, r1
 800b096:	4b2f      	ldr	r3, [pc, #188]	; (800b154 <_strtod_l+0x594>)
 800b098:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b09c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b0a0:	4642      	mov	r2, r8
 800b0a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0a6:	464b      	mov	r3, r9
 800b0a8:	f7f5 fa90 	bl	80005cc <__aeabi_dmul>
 800b0ac:	4b26      	ldr	r3, [pc, #152]	; (800b148 <_strtod_l+0x588>)
 800b0ae:	460a      	mov	r2, r1
 800b0b0:	400b      	ands	r3, r1
 800b0b2:	4929      	ldr	r1, [pc, #164]	; (800b158 <_strtod_l+0x598>)
 800b0b4:	4680      	mov	r8, r0
 800b0b6:	428b      	cmp	r3, r1
 800b0b8:	d8b9      	bhi.n	800b02e <_strtod_l+0x46e>
 800b0ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b0be:	428b      	cmp	r3, r1
 800b0c0:	bf86      	itte	hi
 800b0c2:	f04f 38ff 	movhi.w	r8, #4294967295
 800b0c6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800b15c <_strtod_l+0x59c>
 800b0ca:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	9305      	str	r3, [sp, #20]
 800b0d2:	e07f      	b.n	800b1d4 <_strtod_l+0x614>
 800b0d4:	07f2      	lsls	r2, r6, #31
 800b0d6:	d505      	bpl.n	800b0e4 <_strtod_l+0x524>
 800b0d8:	9b05      	ldr	r3, [sp, #20]
 800b0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0de:	f7f5 fa75 	bl	80005cc <__aeabi_dmul>
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	9a05      	ldr	r2, [sp, #20]
 800b0e6:	3701      	adds	r7, #1
 800b0e8:	3208      	adds	r2, #8
 800b0ea:	1076      	asrs	r6, r6, #1
 800b0ec:	9205      	str	r2, [sp, #20]
 800b0ee:	e7cd      	b.n	800b08c <_strtod_l+0x4cc>
 800b0f0:	d0ed      	beq.n	800b0ce <_strtod_l+0x50e>
 800b0f2:	4276      	negs	r6, r6
 800b0f4:	f016 020f 	ands.w	r2, r6, #15
 800b0f8:	d00a      	beq.n	800b110 <_strtod_l+0x550>
 800b0fa:	4b15      	ldr	r3, [pc, #84]	; (800b150 <_strtod_l+0x590>)
 800b0fc:	4640      	mov	r0, r8
 800b0fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b102:	4649      	mov	r1, r9
 800b104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b108:	f7f5 fb8a 	bl	8000820 <__aeabi_ddiv>
 800b10c:	4680      	mov	r8, r0
 800b10e:	4689      	mov	r9, r1
 800b110:	1136      	asrs	r6, r6, #4
 800b112:	d0dc      	beq.n	800b0ce <_strtod_l+0x50e>
 800b114:	2e1f      	cmp	r6, #31
 800b116:	dd23      	ble.n	800b160 <_strtod_l+0x5a0>
 800b118:	f04f 0b00 	mov.w	fp, #0
 800b11c:	f8cd b010 	str.w	fp, [sp, #16]
 800b120:	f8cd b020 	str.w	fp, [sp, #32]
 800b124:	f8cd b018 	str.w	fp, [sp, #24]
 800b128:	2322      	movs	r3, #34	; 0x22
 800b12a:	f04f 0800 	mov.w	r8, #0
 800b12e:	f04f 0900 	mov.w	r9, #0
 800b132:	f8ca 3000 	str.w	r3, [sl]
 800b136:	e789      	b.n	800b04c <_strtod_l+0x48c>
 800b138:	0800e991 	.word	0x0800e991
 800b13c:	0800e9cc 	.word	0x0800e9cc
 800b140:	0800e989 	.word	0x0800e989
 800b144:	0800ebbc 	.word	0x0800ebbc
 800b148:	7ff00000 	.word	0x7ff00000
 800b14c:	0800eab7 	.word	0x0800eab7
 800b150:	0800ed30 	.word	0x0800ed30
 800b154:	0800ed08 	.word	0x0800ed08
 800b158:	7ca00000 	.word	0x7ca00000
 800b15c:	7fefffff 	.word	0x7fefffff
 800b160:	f016 0310 	ands.w	r3, r6, #16
 800b164:	bf18      	it	ne
 800b166:	236a      	movne	r3, #106	; 0x6a
 800b168:	4640      	mov	r0, r8
 800b16a:	9305      	str	r3, [sp, #20]
 800b16c:	4649      	mov	r1, r9
 800b16e:	2300      	movs	r3, #0
 800b170:	4fb0      	ldr	r7, [pc, #704]	; (800b434 <_strtod_l+0x874>)
 800b172:	07f2      	lsls	r2, r6, #31
 800b174:	d504      	bpl.n	800b180 <_strtod_l+0x5c0>
 800b176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b17a:	f7f5 fa27 	bl	80005cc <__aeabi_dmul>
 800b17e:	2301      	movs	r3, #1
 800b180:	1076      	asrs	r6, r6, #1
 800b182:	f107 0708 	add.w	r7, r7, #8
 800b186:	d1f4      	bne.n	800b172 <_strtod_l+0x5b2>
 800b188:	b10b      	cbz	r3, 800b18e <_strtod_l+0x5ce>
 800b18a:	4680      	mov	r8, r0
 800b18c:	4689      	mov	r9, r1
 800b18e:	9b05      	ldr	r3, [sp, #20]
 800b190:	b1c3      	cbz	r3, 800b1c4 <_strtod_l+0x604>
 800b192:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b196:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	4649      	mov	r1, r9
 800b19e:	dd11      	ble.n	800b1c4 <_strtod_l+0x604>
 800b1a0:	2b1f      	cmp	r3, #31
 800b1a2:	f340 8127 	ble.w	800b3f4 <_strtod_l+0x834>
 800b1a6:	2b34      	cmp	r3, #52	; 0x34
 800b1a8:	bfd8      	it	le
 800b1aa:	f04f 33ff 	movle.w	r3, #4294967295
 800b1ae:	f04f 0800 	mov.w	r8, #0
 800b1b2:	bfcf      	iteee	gt
 800b1b4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b1b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b1bc:	fa03 f202 	lslle.w	r2, r3, r2
 800b1c0:	ea02 0901 	andle.w	r9, r2, r1
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	4640      	mov	r0, r8
 800b1ca:	4649      	mov	r1, r9
 800b1cc:	f7f5 fc66 	bl	8000a9c <__aeabi_dcmpeq>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d1a1      	bne.n	800b118 <_strtod_l+0x558>
 800b1d4:	9b06      	ldr	r3, [sp, #24]
 800b1d6:	465a      	mov	r2, fp
 800b1d8:	9300      	str	r3, [sp, #0]
 800b1da:	4650      	mov	r0, sl
 800b1dc:	4623      	mov	r3, r4
 800b1de:	9908      	ldr	r1, [sp, #32]
 800b1e0:	f002 f860 	bl	800d2a4 <__s2b>
 800b1e4:	9008      	str	r0, [sp, #32]
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	f43f af21 	beq.w	800b02e <_strtod_l+0x46e>
 800b1ec:	9b04      	ldr	r3, [sp, #16]
 800b1ee:	f04f 0b00 	mov.w	fp, #0
 800b1f2:	1b5d      	subs	r5, r3, r5
 800b1f4:	9b07      	ldr	r3, [sp, #28]
 800b1f6:	f8cd b010 	str.w	fp, [sp, #16]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	bfb4      	ite	lt
 800b1fe:	462b      	movlt	r3, r5
 800b200:	2300      	movge	r3, #0
 800b202:	930e      	str	r3, [sp, #56]	; 0x38
 800b204:	9b07      	ldr	r3, [sp, #28]
 800b206:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b20a:	9314      	str	r3, [sp, #80]	; 0x50
 800b20c:	9b08      	ldr	r3, [sp, #32]
 800b20e:	4650      	mov	r0, sl
 800b210:	6859      	ldr	r1, [r3, #4]
 800b212:	f001 ff9f 	bl	800d154 <_Balloc>
 800b216:	9006      	str	r0, [sp, #24]
 800b218:	2800      	cmp	r0, #0
 800b21a:	f43f af10 	beq.w	800b03e <_strtod_l+0x47e>
 800b21e:	9b08      	ldr	r3, [sp, #32]
 800b220:	300c      	adds	r0, #12
 800b222:	691a      	ldr	r2, [r3, #16]
 800b224:	f103 010c 	add.w	r1, r3, #12
 800b228:	3202      	adds	r2, #2
 800b22a:	0092      	lsls	r2, r2, #2
 800b22c:	f7fe fe4a 	bl	8009ec4 <memcpy>
 800b230:	ab1c      	add	r3, sp, #112	; 0x70
 800b232:	9301      	str	r3, [sp, #4]
 800b234:	ab1b      	add	r3, sp, #108	; 0x6c
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	4642      	mov	r2, r8
 800b23a:	464b      	mov	r3, r9
 800b23c:	4650      	mov	r0, sl
 800b23e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800b242:	f002 fb71 	bl	800d928 <__d2b>
 800b246:	901a      	str	r0, [sp, #104]	; 0x68
 800b248:	2800      	cmp	r0, #0
 800b24a:	f43f aef8 	beq.w	800b03e <_strtod_l+0x47e>
 800b24e:	2101      	movs	r1, #1
 800b250:	4650      	mov	r0, sl
 800b252:	f002 f8bf 	bl	800d3d4 <__i2b>
 800b256:	4603      	mov	r3, r0
 800b258:	9004      	str	r0, [sp, #16]
 800b25a:	2800      	cmp	r0, #0
 800b25c:	f43f aeef 	beq.w	800b03e <_strtod_l+0x47e>
 800b260:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b262:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b264:	2d00      	cmp	r5, #0
 800b266:	bfab      	itete	ge
 800b268:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b26a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800b26c:	18ee      	addge	r6, r5, r3
 800b26e:	1b5c      	sublt	r4, r3, r5
 800b270:	9b05      	ldr	r3, [sp, #20]
 800b272:	bfa8      	it	ge
 800b274:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800b276:	eba5 0503 	sub.w	r5, r5, r3
 800b27a:	4415      	add	r5, r2
 800b27c:	4b6e      	ldr	r3, [pc, #440]	; (800b438 <_strtod_l+0x878>)
 800b27e:	f105 35ff 	add.w	r5, r5, #4294967295
 800b282:	bfb8      	it	lt
 800b284:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800b286:	429d      	cmp	r5, r3
 800b288:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b28c:	f280 80c4 	bge.w	800b418 <_strtod_l+0x858>
 800b290:	1b5b      	subs	r3, r3, r5
 800b292:	2b1f      	cmp	r3, #31
 800b294:	f04f 0701 	mov.w	r7, #1
 800b298:	eba2 0203 	sub.w	r2, r2, r3
 800b29c:	f300 80b1 	bgt.w	800b402 <_strtod_l+0x842>
 800b2a0:	2500      	movs	r5, #0
 800b2a2:	fa07 f303 	lsl.w	r3, r7, r3
 800b2a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2a8:	18b7      	adds	r7, r6, r2
 800b2aa:	9b05      	ldr	r3, [sp, #20]
 800b2ac:	42be      	cmp	r6, r7
 800b2ae:	4414      	add	r4, r2
 800b2b0:	441c      	add	r4, r3
 800b2b2:	4633      	mov	r3, r6
 800b2b4:	bfa8      	it	ge
 800b2b6:	463b      	movge	r3, r7
 800b2b8:	42a3      	cmp	r3, r4
 800b2ba:	bfa8      	it	ge
 800b2bc:	4623      	movge	r3, r4
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	bfc2      	ittt	gt
 800b2c2:	1aff      	subgt	r7, r7, r3
 800b2c4:	1ae4      	subgt	r4, r4, r3
 800b2c6:	1af6      	subgt	r6, r6, r3
 800b2c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	dd17      	ble.n	800b2fe <_strtod_l+0x73e>
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	4650      	mov	r0, sl
 800b2d2:	9904      	ldr	r1, [sp, #16]
 800b2d4:	f002 f93c 	bl	800d550 <__pow5mult>
 800b2d8:	9004      	str	r0, [sp, #16]
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	f43f aeaf 	beq.w	800b03e <_strtod_l+0x47e>
 800b2e0:	4601      	mov	r1, r0
 800b2e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b2e4:	4650      	mov	r0, sl
 800b2e6:	f002 f88b 	bl	800d400 <__multiply>
 800b2ea:	9009      	str	r0, [sp, #36]	; 0x24
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	f43f aea6 	beq.w	800b03e <_strtod_l+0x47e>
 800b2f2:	4650      	mov	r0, sl
 800b2f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b2f6:	f001 ff6d 	bl	800d1d4 <_Bfree>
 800b2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2fc:	931a      	str	r3, [sp, #104]	; 0x68
 800b2fe:	2f00      	cmp	r7, #0
 800b300:	f300 808e 	bgt.w	800b420 <_strtod_l+0x860>
 800b304:	9b07      	ldr	r3, [sp, #28]
 800b306:	2b00      	cmp	r3, #0
 800b308:	dd08      	ble.n	800b31c <_strtod_l+0x75c>
 800b30a:	4650      	mov	r0, sl
 800b30c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b30e:	9906      	ldr	r1, [sp, #24]
 800b310:	f002 f91e 	bl	800d550 <__pow5mult>
 800b314:	9006      	str	r0, [sp, #24]
 800b316:	2800      	cmp	r0, #0
 800b318:	f43f ae91 	beq.w	800b03e <_strtod_l+0x47e>
 800b31c:	2c00      	cmp	r4, #0
 800b31e:	dd08      	ble.n	800b332 <_strtod_l+0x772>
 800b320:	4622      	mov	r2, r4
 800b322:	4650      	mov	r0, sl
 800b324:	9906      	ldr	r1, [sp, #24]
 800b326:	f002 f96d 	bl	800d604 <__lshift>
 800b32a:	9006      	str	r0, [sp, #24]
 800b32c:	2800      	cmp	r0, #0
 800b32e:	f43f ae86 	beq.w	800b03e <_strtod_l+0x47e>
 800b332:	2e00      	cmp	r6, #0
 800b334:	dd08      	ble.n	800b348 <_strtod_l+0x788>
 800b336:	4632      	mov	r2, r6
 800b338:	4650      	mov	r0, sl
 800b33a:	9904      	ldr	r1, [sp, #16]
 800b33c:	f002 f962 	bl	800d604 <__lshift>
 800b340:	9004      	str	r0, [sp, #16]
 800b342:	2800      	cmp	r0, #0
 800b344:	f43f ae7b 	beq.w	800b03e <_strtod_l+0x47e>
 800b348:	4650      	mov	r0, sl
 800b34a:	9a06      	ldr	r2, [sp, #24]
 800b34c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b34e:	f002 f9e5 	bl	800d71c <__mdiff>
 800b352:	4683      	mov	fp, r0
 800b354:	2800      	cmp	r0, #0
 800b356:	f43f ae72 	beq.w	800b03e <_strtod_l+0x47e>
 800b35a:	2400      	movs	r4, #0
 800b35c:	68c3      	ldr	r3, [r0, #12]
 800b35e:	9904      	ldr	r1, [sp, #16]
 800b360:	60c4      	str	r4, [r0, #12]
 800b362:	930b      	str	r3, [sp, #44]	; 0x2c
 800b364:	f002 f9be 	bl	800d6e4 <__mcmp>
 800b368:	42a0      	cmp	r0, r4
 800b36a:	da6b      	bge.n	800b444 <_strtod_l+0x884>
 800b36c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b36e:	ea53 0308 	orrs.w	r3, r3, r8
 800b372:	f040 8091 	bne.w	800b498 <_strtod_l+0x8d8>
 800b376:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f040 808c 	bne.w	800b498 <_strtod_l+0x8d8>
 800b380:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b384:	0d1b      	lsrs	r3, r3, #20
 800b386:	051b      	lsls	r3, r3, #20
 800b388:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b38c:	f240 8084 	bls.w	800b498 <_strtod_l+0x8d8>
 800b390:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b394:	b91b      	cbnz	r3, 800b39e <_strtod_l+0x7de>
 800b396:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	dd7c      	ble.n	800b498 <_strtod_l+0x8d8>
 800b39e:	4659      	mov	r1, fp
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	4650      	mov	r0, sl
 800b3a4:	f002 f92e 	bl	800d604 <__lshift>
 800b3a8:	9904      	ldr	r1, [sp, #16]
 800b3aa:	4683      	mov	fp, r0
 800b3ac:	f002 f99a 	bl	800d6e4 <__mcmp>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	dd71      	ble.n	800b498 <_strtod_l+0x8d8>
 800b3b4:	9905      	ldr	r1, [sp, #20]
 800b3b6:	464b      	mov	r3, r9
 800b3b8:	4a20      	ldr	r2, [pc, #128]	; (800b43c <_strtod_l+0x87c>)
 800b3ba:	2900      	cmp	r1, #0
 800b3bc:	f000 808c 	beq.w	800b4d8 <_strtod_l+0x918>
 800b3c0:	ea02 0109 	and.w	r1, r2, r9
 800b3c4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b3c8:	f300 8086 	bgt.w	800b4d8 <_strtod_l+0x918>
 800b3cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b3d0:	f77f aeaa 	ble.w	800b128 <_strtod_l+0x568>
 800b3d4:	4640      	mov	r0, r8
 800b3d6:	4649      	mov	r1, r9
 800b3d8:	4b19      	ldr	r3, [pc, #100]	; (800b440 <_strtod_l+0x880>)
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f7f5 f8f6 	bl	80005cc <__aeabi_dmul>
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	4303      	orrs	r3, r0
 800b3e4:	bf08      	it	eq
 800b3e6:	2322      	moveq	r3, #34	; 0x22
 800b3e8:	4680      	mov	r8, r0
 800b3ea:	4689      	mov	r9, r1
 800b3ec:	bf08      	it	eq
 800b3ee:	f8ca 3000 	streq.w	r3, [sl]
 800b3f2:	e62f      	b.n	800b054 <_strtod_l+0x494>
 800b3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3fc:	ea03 0808 	and.w	r8, r3, r8
 800b400:	e6e0      	b.n	800b1c4 <_strtod_l+0x604>
 800b402:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800b406:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800b40a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800b40e:	35e2      	adds	r5, #226	; 0xe2
 800b410:	fa07 f505 	lsl.w	r5, r7, r5
 800b414:	970f      	str	r7, [sp, #60]	; 0x3c
 800b416:	e747      	b.n	800b2a8 <_strtod_l+0x6e8>
 800b418:	2301      	movs	r3, #1
 800b41a:	2500      	movs	r5, #0
 800b41c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b41e:	e743      	b.n	800b2a8 <_strtod_l+0x6e8>
 800b420:	463a      	mov	r2, r7
 800b422:	4650      	mov	r0, sl
 800b424:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b426:	f002 f8ed 	bl	800d604 <__lshift>
 800b42a:	901a      	str	r0, [sp, #104]	; 0x68
 800b42c:	2800      	cmp	r0, #0
 800b42e:	f47f af69 	bne.w	800b304 <_strtod_l+0x744>
 800b432:	e604      	b.n	800b03e <_strtod_l+0x47e>
 800b434:	0800e9e0 	.word	0x0800e9e0
 800b438:	fffffc02 	.word	0xfffffc02
 800b43c:	7ff00000 	.word	0x7ff00000
 800b440:	39500000 	.word	0x39500000
 800b444:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b448:	d165      	bne.n	800b516 <_strtod_l+0x956>
 800b44a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b44c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b450:	b35a      	cbz	r2, 800b4aa <_strtod_l+0x8ea>
 800b452:	4a99      	ldr	r2, [pc, #612]	; (800b6b8 <_strtod_l+0xaf8>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d12b      	bne.n	800b4b0 <_strtod_l+0x8f0>
 800b458:	9b05      	ldr	r3, [sp, #20]
 800b45a:	4641      	mov	r1, r8
 800b45c:	b303      	cbz	r3, 800b4a0 <_strtod_l+0x8e0>
 800b45e:	464a      	mov	r2, r9
 800b460:	4b96      	ldr	r3, [pc, #600]	; (800b6bc <_strtod_l+0xafc>)
 800b462:	4013      	ands	r3, r2
 800b464:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b468:	f04f 32ff 	mov.w	r2, #4294967295
 800b46c:	d81b      	bhi.n	800b4a6 <_strtod_l+0x8e6>
 800b46e:	0d1b      	lsrs	r3, r3, #20
 800b470:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b474:	fa02 f303 	lsl.w	r3, r2, r3
 800b478:	4299      	cmp	r1, r3
 800b47a:	d119      	bne.n	800b4b0 <_strtod_l+0x8f0>
 800b47c:	4b90      	ldr	r3, [pc, #576]	; (800b6c0 <_strtod_l+0xb00>)
 800b47e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b480:	429a      	cmp	r2, r3
 800b482:	d102      	bne.n	800b48a <_strtod_l+0x8ca>
 800b484:	3101      	adds	r1, #1
 800b486:	f43f adda 	beq.w	800b03e <_strtod_l+0x47e>
 800b48a:	f04f 0800 	mov.w	r8, #0
 800b48e:	4b8b      	ldr	r3, [pc, #556]	; (800b6bc <_strtod_l+0xafc>)
 800b490:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b492:	401a      	ands	r2, r3
 800b494:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800b498:	9b05      	ldr	r3, [sp, #20]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d19a      	bne.n	800b3d4 <_strtod_l+0x814>
 800b49e:	e5d9      	b.n	800b054 <_strtod_l+0x494>
 800b4a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b4a4:	e7e8      	b.n	800b478 <_strtod_l+0x8b8>
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	e7e6      	b.n	800b478 <_strtod_l+0x8b8>
 800b4aa:	ea53 0308 	orrs.w	r3, r3, r8
 800b4ae:	d081      	beq.n	800b3b4 <_strtod_l+0x7f4>
 800b4b0:	b1e5      	cbz	r5, 800b4ec <_strtod_l+0x92c>
 800b4b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b4:	421d      	tst	r5, r3
 800b4b6:	d0ef      	beq.n	800b498 <_strtod_l+0x8d8>
 800b4b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4ba:	4640      	mov	r0, r8
 800b4bc:	4649      	mov	r1, r9
 800b4be:	9a05      	ldr	r2, [sp, #20]
 800b4c0:	b1c3      	cbz	r3, 800b4f4 <_strtod_l+0x934>
 800b4c2:	f7ff fb5b 	bl	800ab7c <sulp>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b4ce:	f7f4 fec7 	bl	8000260 <__adddf3>
 800b4d2:	4680      	mov	r8, r0
 800b4d4:	4689      	mov	r9, r1
 800b4d6:	e7df      	b.n	800b498 <_strtod_l+0x8d8>
 800b4d8:	4013      	ands	r3, r2
 800b4da:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b4de:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b4e2:	f04f 38ff 	mov.w	r8, #4294967295
 800b4e6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b4ea:	e7d5      	b.n	800b498 <_strtod_l+0x8d8>
 800b4ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4ee:	ea13 0f08 	tst.w	r3, r8
 800b4f2:	e7e0      	b.n	800b4b6 <_strtod_l+0x8f6>
 800b4f4:	f7ff fb42 	bl	800ab7c <sulp>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b500:	f7f4 feac 	bl	800025c <__aeabi_dsub>
 800b504:	2200      	movs	r2, #0
 800b506:	2300      	movs	r3, #0
 800b508:	4680      	mov	r8, r0
 800b50a:	4689      	mov	r9, r1
 800b50c:	f7f5 fac6 	bl	8000a9c <__aeabi_dcmpeq>
 800b510:	2800      	cmp	r0, #0
 800b512:	d0c1      	beq.n	800b498 <_strtod_l+0x8d8>
 800b514:	e608      	b.n	800b128 <_strtod_l+0x568>
 800b516:	4658      	mov	r0, fp
 800b518:	9904      	ldr	r1, [sp, #16]
 800b51a:	f002 fa61 	bl	800d9e0 <__ratio>
 800b51e:	2200      	movs	r2, #0
 800b520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b524:	4606      	mov	r6, r0
 800b526:	460f      	mov	r7, r1
 800b528:	f7f5 facc 	bl	8000ac4 <__aeabi_dcmple>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d070      	beq.n	800b612 <_strtod_l+0xa52>
 800b530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b532:	2b00      	cmp	r3, #0
 800b534:	d042      	beq.n	800b5bc <_strtod_l+0x9fc>
 800b536:	2600      	movs	r6, #0
 800b538:	4f62      	ldr	r7, [pc, #392]	; (800b6c4 <_strtod_l+0xb04>)
 800b53a:	4d62      	ldr	r5, [pc, #392]	; (800b6c4 <_strtod_l+0xb04>)
 800b53c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b53e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b542:	0d1b      	lsrs	r3, r3, #20
 800b544:	051b      	lsls	r3, r3, #20
 800b546:	930f      	str	r3, [sp, #60]	; 0x3c
 800b548:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b54a:	4b5f      	ldr	r3, [pc, #380]	; (800b6c8 <_strtod_l+0xb08>)
 800b54c:	429a      	cmp	r2, r3
 800b54e:	f040 80c3 	bne.w	800b6d8 <_strtod_l+0xb18>
 800b552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b554:	4640      	mov	r0, r8
 800b556:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800b55a:	4649      	mov	r1, r9
 800b55c:	f002 f96a 	bl	800d834 <__ulp>
 800b560:	4602      	mov	r2, r0
 800b562:	460b      	mov	r3, r1
 800b564:	4630      	mov	r0, r6
 800b566:	4639      	mov	r1, r7
 800b568:	f7f5 f830 	bl	80005cc <__aeabi_dmul>
 800b56c:	4642      	mov	r2, r8
 800b56e:	464b      	mov	r3, r9
 800b570:	f7f4 fe76 	bl	8000260 <__adddf3>
 800b574:	460b      	mov	r3, r1
 800b576:	4951      	ldr	r1, [pc, #324]	; (800b6bc <_strtod_l+0xafc>)
 800b578:	4a54      	ldr	r2, [pc, #336]	; (800b6cc <_strtod_l+0xb0c>)
 800b57a:	4019      	ands	r1, r3
 800b57c:	4291      	cmp	r1, r2
 800b57e:	4680      	mov	r8, r0
 800b580:	d95d      	bls.n	800b63e <_strtod_l+0xa7e>
 800b582:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b584:	4b4e      	ldr	r3, [pc, #312]	; (800b6c0 <_strtod_l+0xb00>)
 800b586:	429a      	cmp	r2, r3
 800b588:	d103      	bne.n	800b592 <_strtod_l+0x9d2>
 800b58a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b58c:	3301      	adds	r3, #1
 800b58e:	f43f ad56 	beq.w	800b03e <_strtod_l+0x47e>
 800b592:	f04f 38ff 	mov.w	r8, #4294967295
 800b596:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800b6c0 <_strtod_l+0xb00>
 800b59a:	4650      	mov	r0, sl
 800b59c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b59e:	f001 fe19 	bl	800d1d4 <_Bfree>
 800b5a2:	4650      	mov	r0, sl
 800b5a4:	9906      	ldr	r1, [sp, #24]
 800b5a6:	f001 fe15 	bl	800d1d4 <_Bfree>
 800b5aa:	4650      	mov	r0, sl
 800b5ac:	9904      	ldr	r1, [sp, #16]
 800b5ae:	f001 fe11 	bl	800d1d4 <_Bfree>
 800b5b2:	4659      	mov	r1, fp
 800b5b4:	4650      	mov	r0, sl
 800b5b6:	f001 fe0d 	bl	800d1d4 <_Bfree>
 800b5ba:	e627      	b.n	800b20c <_strtod_l+0x64c>
 800b5bc:	f1b8 0f00 	cmp.w	r8, #0
 800b5c0:	d119      	bne.n	800b5f6 <_strtod_l+0xa36>
 800b5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5c8:	b9e3      	cbnz	r3, 800b604 <_strtod_l+0xa44>
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	4639      	mov	r1, r7
 800b5d0:	4b3c      	ldr	r3, [pc, #240]	; (800b6c4 <_strtod_l+0xb04>)
 800b5d2:	f7f5 fa6d 	bl	8000ab0 <__aeabi_dcmplt>
 800b5d6:	b9c8      	cbnz	r0, 800b60c <_strtod_l+0xa4c>
 800b5d8:	2200      	movs	r2, #0
 800b5da:	4630      	mov	r0, r6
 800b5dc:	4639      	mov	r1, r7
 800b5de:	4b3c      	ldr	r3, [pc, #240]	; (800b6d0 <_strtod_l+0xb10>)
 800b5e0:	f7f4 fff4 	bl	80005cc <__aeabi_dmul>
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	460d      	mov	r5, r1
 800b5e8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b5ec:	9416      	str	r4, [sp, #88]	; 0x58
 800b5ee:	9317      	str	r3, [sp, #92]	; 0x5c
 800b5f0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800b5f4:	e7a2      	b.n	800b53c <_strtod_l+0x97c>
 800b5f6:	f1b8 0f01 	cmp.w	r8, #1
 800b5fa:	d103      	bne.n	800b604 <_strtod_l+0xa44>
 800b5fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f43f ad92 	beq.w	800b128 <_strtod_l+0x568>
 800b604:	2600      	movs	r6, #0
 800b606:	2400      	movs	r4, #0
 800b608:	4f32      	ldr	r7, [pc, #200]	; (800b6d4 <_strtod_l+0xb14>)
 800b60a:	e796      	b.n	800b53a <_strtod_l+0x97a>
 800b60c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b60e:	4d30      	ldr	r5, [pc, #192]	; (800b6d0 <_strtod_l+0xb10>)
 800b610:	e7ea      	b.n	800b5e8 <_strtod_l+0xa28>
 800b612:	4b2f      	ldr	r3, [pc, #188]	; (800b6d0 <_strtod_l+0xb10>)
 800b614:	2200      	movs	r2, #0
 800b616:	4630      	mov	r0, r6
 800b618:	4639      	mov	r1, r7
 800b61a:	f7f4 ffd7 	bl	80005cc <__aeabi_dmul>
 800b61e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b620:	4604      	mov	r4, r0
 800b622:	460d      	mov	r5, r1
 800b624:	b933      	cbnz	r3, 800b634 <_strtod_l+0xa74>
 800b626:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b62a:	9010      	str	r0, [sp, #64]	; 0x40
 800b62c:	9311      	str	r3, [sp, #68]	; 0x44
 800b62e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b632:	e783      	b.n	800b53c <_strtod_l+0x97c>
 800b634:	4602      	mov	r2, r0
 800b636:	460b      	mov	r3, r1
 800b638:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b63c:	e7f7      	b.n	800b62e <_strtod_l+0xa6e>
 800b63e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b642:	9b05      	ldr	r3, [sp, #20]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d1a8      	bne.n	800b59a <_strtod_l+0x9da>
 800b648:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b64c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b64e:	0d1b      	lsrs	r3, r3, #20
 800b650:	051b      	lsls	r3, r3, #20
 800b652:	429a      	cmp	r2, r3
 800b654:	d1a1      	bne.n	800b59a <_strtod_l+0x9da>
 800b656:	4620      	mov	r0, r4
 800b658:	4629      	mov	r1, r5
 800b65a:	f7f5 fe01 	bl	8001260 <__aeabi_d2lz>
 800b65e:	f7f4 ff87 	bl	8000570 <__aeabi_l2d>
 800b662:	4602      	mov	r2, r0
 800b664:	460b      	mov	r3, r1
 800b666:	4620      	mov	r0, r4
 800b668:	4629      	mov	r1, r5
 800b66a:	f7f4 fdf7 	bl	800025c <__aeabi_dsub>
 800b66e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b670:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b674:	ea43 0308 	orr.w	r3, r3, r8
 800b678:	4313      	orrs	r3, r2
 800b67a:	4604      	mov	r4, r0
 800b67c:	460d      	mov	r5, r1
 800b67e:	d066      	beq.n	800b74e <_strtod_l+0xb8e>
 800b680:	a309      	add	r3, pc, #36	; (adr r3, 800b6a8 <_strtod_l+0xae8>)
 800b682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b686:	f7f5 fa13 	bl	8000ab0 <__aeabi_dcmplt>
 800b68a:	2800      	cmp	r0, #0
 800b68c:	f47f ace2 	bne.w	800b054 <_strtod_l+0x494>
 800b690:	a307      	add	r3, pc, #28	; (adr r3, 800b6b0 <_strtod_l+0xaf0>)
 800b692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b696:	4620      	mov	r0, r4
 800b698:	4629      	mov	r1, r5
 800b69a:	f7f5 fa27 	bl	8000aec <__aeabi_dcmpgt>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	f43f af7b 	beq.w	800b59a <_strtod_l+0x9da>
 800b6a4:	e4d6      	b.n	800b054 <_strtod_l+0x494>
 800b6a6:	bf00      	nop
 800b6a8:	94a03595 	.word	0x94a03595
 800b6ac:	3fdfffff 	.word	0x3fdfffff
 800b6b0:	35afe535 	.word	0x35afe535
 800b6b4:	3fe00000 	.word	0x3fe00000
 800b6b8:	000fffff 	.word	0x000fffff
 800b6bc:	7ff00000 	.word	0x7ff00000
 800b6c0:	7fefffff 	.word	0x7fefffff
 800b6c4:	3ff00000 	.word	0x3ff00000
 800b6c8:	7fe00000 	.word	0x7fe00000
 800b6cc:	7c9fffff 	.word	0x7c9fffff
 800b6d0:	3fe00000 	.word	0x3fe00000
 800b6d4:	bff00000 	.word	0xbff00000
 800b6d8:	9b05      	ldr	r3, [sp, #20]
 800b6da:	b313      	cbz	r3, 800b722 <_strtod_l+0xb62>
 800b6dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b6e2:	d81e      	bhi.n	800b722 <_strtod_l+0xb62>
 800b6e4:	a326      	add	r3, pc, #152	; (adr r3, 800b780 <_strtod_l+0xbc0>)
 800b6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	f7f5 f9e9 	bl	8000ac4 <__aeabi_dcmple>
 800b6f2:	b190      	cbz	r0, 800b71a <_strtod_l+0xb5a>
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f7f5 fa40 	bl	8000b7c <__aeabi_d2uiz>
 800b6fc:	2801      	cmp	r0, #1
 800b6fe:	bf38      	it	cc
 800b700:	2001      	movcc	r0, #1
 800b702:	f7f4 fee9 	bl	80004d8 <__aeabi_ui2d>
 800b706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b708:	4604      	mov	r4, r0
 800b70a:	460d      	mov	r5, r1
 800b70c:	b9d3      	cbnz	r3, 800b744 <_strtod_l+0xb84>
 800b70e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b712:	9012      	str	r0, [sp, #72]	; 0x48
 800b714:	9313      	str	r3, [sp, #76]	; 0x4c
 800b716:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b71a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b71c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b720:	1a9f      	subs	r7, r3, r2
 800b722:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b726:	f002 f885 	bl	800d834 <__ulp>
 800b72a:	4602      	mov	r2, r0
 800b72c:	460b      	mov	r3, r1
 800b72e:	4630      	mov	r0, r6
 800b730:	4639      	mov	r1, r7
 800b732:	f7f4 ff4b 	bl	80005cc <__aeabi_dmul>
 800b736:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b73a:	f7f4 fd91 	bl	8000260 <__adddf3>
 800b73e:	4680      	mov	r8, r0
 800b740:	4689      	mov	r9, r1
 800b742:	e77e      	b.n	800b642 <_strtod_l+0xa82>
 800b744:	4602      	mov	r2, r0
 800b746:	460b      	mov	r3, r1
 800b748:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b74c:	e7e3      	b.n	800b716 <_strtod_l+0xb56>
 800b74e:	a30e      	add	r3, pc, #56	; (adr r3, 800b788 <_strtod_l+0xbc8>)
 800b750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b754:	f7f5 f9ac 	bl	8000ab0 <__aeabi_dcmplt>
 800b758:	e7a1      	b.n	800b69e <_strtod_l+0xade>
 800b75a:	2300      	movs	r3, #0
 800b75c:	930a      	str	r3, [sp, #40]	; 0x28
 800b75e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b760:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b762:	6013      	str	r3, [r2, #0]
 800b764:	f7ff ba71 	b.w	800ac4a <_strtod_l+0x8a>
 800b768:	2a65      	cmp	r2, #101	; 0x65
 800b76a:	f43f ab63 	beq.w	800ae34 <_strtod_l+0x274>
 800b76e:	2a45      	cmp	r2, #69	; 0x45
 800b770:	f43f ab60 	beq.w	800ae34 <_strtod_l+0x274>
 800b774:	2301      	movs	r3, #1
 800b776:	f7ff bb95 	b.w	800aea4 <_strtod_l+0x2e4>
 800b77a:	bf00      	nop
 800b77c:	f3af 8000 	nop.w
 800b780:	ffc00000 	.word	0xffc00000
 800b784:	41dfffff 	.word	0x41dfffff
 800b788:	94a03595 	.word	0x94a03595
 800b78c:	3fcfffff 	.word	0x3fcfffff

0800b790 <strtof>:
 800b790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b794:	4f22      	ldr	r7, [pc, #136]	; (800b820 <strtof+0x90>)
 800b796:	460a      	mov	r2, r1
 800b798:	4b22      	ldr	r3, [pc, #136]	; (800b824 <strtof+0x94>)
 800b79a:	4601      	mov	r1, r0
 800b79c:	6838      	ldr	r0, [r7, #0]
 800b79e:	f7ff fa0f 	bl	800abc0 <_strtod_l>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	4606      	mov	r6, r0
 800b7a8:	460c      	mov	r4, r1
 800b7aa:	f7f5 f9a9 	bl	8000b00 <__aeabi_dcmpun>
 800b7ae:	b168      	cbz	r0, 800b7cc <strtof+0x3c>
 800b7b0:	2c00      	cmp	r4, #0
 800b7b2:	481d      	ldr	r0, [pc, #116]	; (800b828 <strtof+0x98>)
 800b7b4:	da06      	bge.n	800b7c4 <strtof+0x34>
 800b7b6:	f002 fc65 	bl	800e084 <nanf>
 800b7ba:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 800b7be:	4628      	mov	r0, r5
 800b7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c8:	f002 bc5c 	b.w	800e084 <nanf>
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	f7f5 f9f4 	bl	8000bbc <__aeabi_d2f>
 800b7d4:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800b7d8:	4605      	mov	r5, r0
 800b7da:	4914      	ldr	r1, [pc, #80]	; (800b82c <strtof+0x9c>)
 800b7dc:	4640      	mov	r0, r8
 800b7de:	f7f5 fd11 	bl	8001204 <__aeabi_fcmpun>
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	d1eb      	bne.n	800b7be <strtof+0x2e>
 800b7e6:	4640      	mov	r0, r8
 800b7e8:	4910      	ldr	r1, [pc, #64]	; (800b82c <strtof+0x9c>)
 800b7ea:	f7f5 fced 	bl	80011c8 <__aeabi_fcmple>
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	d1e5      	bne.n	800b7be <strtof+0x2e>
 800b7f2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800b7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	4621      	mov	r1, r4
 800b7fe:	4b0c      	ldr	r3, [pc, #48]	; (800b830 <strtof+0xa0>)
 800b800:	f7f5 f97e 	bl	8000b00 <__aeabi_dcmpun>
 800b804:	b940      	cbnz	r0, 800b818 <strtof+0x88>
 800b806:	f04f 32ff 	mov.w	r2, #4294967295
 800b80a:	4630      	mov	r0, r6
 800b80c:	4621      	mov	r1, r4
 800b80e:	4b08      	ldr	r3, [pc, #32]	; (800b830 <strtof+0xa0>)
 800b810:	f7f5 f958 	bl	8000ac4 <__aeabi_dcmple>
 800b814:	2800      	cmp	r0, #0
 800b816:	d0d2      	beq.n	800b7be <strtof+0x2e>
 800b818:	2222      	movs	r2, #34	; 0x22
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	601a      	str	r2, [r3, #0]
 800b81e:	e7ce      	b.n	800b7be <strtof+0x2e>
 800b820:	2000024c 	.word	0x2000024c
 800b824:	200002b4 	.word	0x200002b4
 800b828:	0800eab7 	.word	0x0800eab7
 800b82c:	7f7fffff 	.word	0x7f7fffff
 800b830:	7fefffff 	.word	0x7fefffff

0800b834 <strtok>:
 800b834:	4b16      	ldr	r3, [pc, #88]	; (800b890 <strtok+0x5c>)
 800b836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b83a:	681f      	ldr	r7, [r3, #0]
 800b83c:	4605      	mov	r5, r0
 800b83e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800b840:	460e      	mov	r6, r1
 800b842:	b9ec      	cbnz	r4, 800b880 <strtok+0x4c>
 800b844:	2050      	movs	r0, #80	; 0x50
 800b846:	f7fe fb2d 	bl	8009ea4 <malloc>
 800b84a:	4602      	mov	r2, r0
 800b84c:	65b8      	str	r0, [r7, #88]	; 0x58
 800b84e:	b920      	cbnz	r0, 800b85a <strtok+0x26>
 800b850:	2157      	movs	r1, #87	; 0x57
 800b852:	4b10      	ldr	r3, [pc, #64]	; (800b894 <strtok+0x60>)
 800b854:	4810      	ldr	r0, [pc, #64]	; (800b898 <strtok+0x64>)
 800b856:	f000 f95d 	bl	800bb14 <__assert_func>
 800b85a:	e9c0 4400 	strd	r4, r4, [r0]
 800b85e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b862:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b866:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b86a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b86e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b872:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b876:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b87a:	6184      	str	r4, [r0, #24]
 800b87c:	7704      	strb	r4, [r0, #28]
 800b87e:	6244      	str	r4, [r0, #36]	; 0x24
 800b880:	4631      	mov	r1, r6
 800b882:	4628      	mov	r0, r5
 800b884:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b886:	2301      	movs	r3, #1
 800b888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b88c:	f000 b806 	b.w	800b89c <__strtok_r>
 800b890:	2000024c 	.word	0x2000024c
 800b894:	0800ea08 	.word	0x0800ea08
 800b898:	0800ea1f 	.word	0x0800ea1f

0800b89c <__strtok_r>:
 800b89c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b89e:	b908      	cbnz	r0, 800b8a4 <__strtok_r+0x8>
 800b8a0:	6810      	ldr	r0, [r2, #0]
 800b8a2:	b188      	cbz	r0, 800b8c8 <__strtok_r+0x2c>
 800b8a4:	4604      	mov	r4, r0
 800b8a6:	460f      	mov	r7, r1
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b8ae:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b8b2:	b91e      	cbnz	r6, 800b8bc <__strtok_r+0x20>
 800b8b4:	b965      	cbnz	r5, 800b8d0 <__strtok_r+0x34>
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	6015      	str	r5, [r2, #0]
 800b8ba:	e005      	b.n	800b8c8 <__strtok_r+0x2c>
 800b8bc:	42b5      	cmp	r5, r6
 800b8be:	d1f6      	bne.n	800b8ae <__strtok_r+0x12>
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d1f0      	bne.n	800b8a6 <__strtok_r+0xa>
 800b8c4:	6014      	str	r4, [r2, #0]
 800b8c6:	7003      	strb	r3, [r0, #0]
 800b8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8ca:	461c      	mov	r4, r3
 800b8cc:	e00c      	b.n	800b8e8 <__strtok_r+0x4c>
 800b8ce:	b915      	cbnz	r5, 800b8d6 <__strtok_r+0x3a>
 800b8d0:	460e      	mov	r6, r1
 800b8d2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b8d6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b8da:	42ab      	cmp	r3, r5
 800b8dc:	d1f7      	bne.n	800b8ce <__strtok_r+0x32>
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d0f3      	beq.n	800b8ca <__strtok_r+0x2e>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b8e8:	6014      	str	r4, [r2, #0]
 800b8ea:	e7ed      	b.n	800b8c8 <__strtok_r+0x2c>

0800b8ec <_strtol_l.constprop.0>:
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f2:	4680      	mov	r8, r0
 800b8f4:	d001      	beq.n	800b8fa <_strtol_l.constprop.0+0xe>
 800b8f6:	2b24      	cmp	r3, #36	; 0x24
 800b8f8:	d906      	bls.n	800b908 <_strtol_l.constprop.0+0x1c>
 800b8fa:	f7fe f9af 	bl	8009c5c <__errno>
 800b8fe:	2316      	movs	r3, #22
 800b900:	6003      	str	r3, [r0, #0]
 800b902:	2000      	movs	r0, #0
 800b904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b908:	460d      	mov	r5, r1
 800b90a:	4f35      	ldr	r7, [pc, #212]	; (800b9e0 <_strtol_l.constprop.0+0xf4>)
 800b90c:	4628      	mov	r0, r5
 800b90e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b912:	5de6      	ldrb	r6, [r4, r7]
 800b914:	f016 0608 	ands.w	r6, r6, #8
 800b918:	d1f8      	bne.n	800b90c <_strtol_l.constprop.0+0x20>
 800b91a:	2c2d      	cmp	r4, #45	; 0x2d
 800b91c:	d12f      	bne.n	800b97e <_strtol_l.constprop.0+0x92>
 800b91e:	2601      	movs	r6, #1
 800b920:	782c      	ldrb	r4, [r5, #0]
 800b922:	1c85      	adds	r5, r0, #2
 800b924:	2b00      	cmp	r3, #0
 800b926:	d057      	beq.n	800b9d8 <_strtol_l.constprop.0+0xec>
 800b928:	2b10      	cmp	r3, #16
 800b92a:	d109      	bne.n	800b940 <_strtol_l.constprop.0+0x54>
 800b92c:	2c30      	cmp	r4, #48	; 0x30
 800b92e:	d107      	bne.n	800b940 <_strtol_l.constprop.0+0x54>
 800b930:	7828      	ldrb	r0, [r5, #0]
 800b932:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b936:	2858      	cmp	r0, #88	; 0x58
 800b938:	d149      	bne.n	800b9ce <_strtol_l.constprop.0+0xe2>
 800b93a:	2310      	movs	r3, #16
 800b93c:	786c      	ldrb	r4, [r5, #1]
 800b93e:	3502      	adds	r5, #2
 800b940:	2700      	movs	r7, #0
 800b942:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800b946:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b94a:	fbbe f9f3 	udiv	r9, lr, r3
 800b94e:	4638      	mov	r0, r7
 800b950:	fb03 ea19 	mls	sl, r3, r9, lr
 800b954:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b958:	f1bc 0f09 	cmp.w	ip, #9
 800b95c:	d814      	bhi.n	800b988 <_strtol_l.constprop.0+0x9c>
 800b95e:	4664      	mov	r4, ip
 800b960:	42a3      	cmp	r3, r4
 800b962:	dd22      	ble.n	800b9aa <_strtol_l.constprop.0+0xbe>
 800b964:	2f00      	cmp	r7, #0
 800b966:	db1d      	blt.n	800b9a4 <_strtol_l.constprop.0+0xb8>
 800b968:	4581      	cmp	r9, r0
 800b96a:	d31b      	bcc.n	800b9a4 <_strtol_l.constprop.0+0xb8>
 800b96c:	d101      	bne.n	800b972 <_strtol_l.constprop.0+0x86>
 800b96e:	45a2      	cmp	sl, r4
 800b970:	db18      	blt.n	800b9a4 <_strtol_l.constprop.0+0xb8>
 800b972:	2701      	movs	r7, #1
 800b974:	fb00 4003 	mla	r0, r0, r3, r4
 800b978:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b97c:	e7ea      	b.n	800b954 <_strtol_l.constprop.0+0x68>
 800b97e:	2c2b      	cmp	r4, #43	; 0x2b
 800b980:	bf04      	itt	eq
 800b982:	782c      	ldrbeq	r4, [r5, #0]
 800b984:	1c85      	addeq	r5, r0, #2
 800b986:	e7cd      	b.n	800b924 <_strtol_l.constprop.0+0x38>
 800b988:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b98c:	f1bc 0f19 	cmp.w	ip, #25
 800b990:	d801      	bhi.n	800b996 <_strtol_l.constprop.0+0xaa>
 800b992:	3c37      	subs	r4, #55	; 0x37
 800b994:	e7e4      	b.n	800b960 <_strtol_l.constprop.0+0x74>
 800b996:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b99a:	f1bc 0f19 	cmp.w	ip, #25
 800b99e:	d804      	bhi.n	800b9aa <_strtol_l.constprop.0+0xbe>
 800b9a0:	3c57      	subs	r4, #87	; 0x57
 800b9a2:	e7dd      	b.n	800b960 <_strtol_l.constprop.0+0x74>
 800b9a4:	f04f 37ff 	mov.w	r7, #4294967295
 800b9a8:	e7e6      	b.n	800b978 <_strtol_l.constprop.0+0x8c>
 800b9aa:	2f00      	cmp	r7, #0
 800b9ac:	da07      	bge.n	800b9be <_strtol_l.constprop.0+0xd2>
 800b9ae:	2322      	movs	r3, #34	; 0x22
 800b9b0:	4670      	mov	r0, lr
 800b9b2:	f8c8 3000 	str.w	r3, [r8]
 800b9b6:	2a00      	cmp	r2, #0
 800b9b8:	d0a4      	beq.n	800b904 <_strtol_l.constprop.0+0x18>
 800b9ba:	1e69      	subs	r1, r5, #1
 800b9bc:	e005      	b.n	800b9ca <_strtol_l.constprop.0+0xde>
 800b9be:	b106      	cbz	r6, 800b9c2 <_strtol_l.constprop.0+0xd6>
 800b9c0:	4240      	negs	r0, r0
 800b9c2:	2a00      	cmp	r2, #0
 800b9c4:	d09e      	beq.n	800b904 <_strtol_l.constprop.0+0x18>
 800b9c6:	2f00      	cmp	r7, #0
 800b9c8:	d1f7      	bne.n	800b9ba <_strtol_l.constprop.0+0xce>
 800b9ca:	6011      	str	r1, [r2, #0]
 800b9cc:	e79a      	b.n	800b904 <_strtol_l.constprop.0+0x18>
 800b9ce:	2430      	movs	r4, #48	; 0x30
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d1b5      	bne.n	800b940 <_strtol_l.constprop.0+0x54>
 800b9d4:	2308      	movs	r3, #8
 800b9d6:	e7b3      	b.n	800b940 <_strtol_l.constprop.0+0x54>
 800b9d8:	2c30      	cmp	r4, #48	; 0x30
 800b9da:	d0a9      	beq.n	800b930 <_strtol_l.constprop.0+0x44>
 800b9dc:	230a      	movs	r3, #10
 800b9de:	e7af      	b.n	800b940 <_strtol_l.constprop.0+0x54>
 800b9e0:	0800eab9 	.word	0x0800eab9

0800b9e4 <strtol>:
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	460a      	mov	r2, r1
 800b9e8:	4601      	mov	r1, r0
 800b9ea:	4802      	ldr	r0, [pc, #8]	; (800b9f4 <strtol+0x10>)
 800b9ec:	6800      	ldr	r0, [r0, #0]
 800b9ee:	f7ff bf7d 	b.w	800b8ec <_strtol_l.constprop.0>
 800b9f2:	bf00      	nop
 800b9f4:	2000024c 	.word	0x2000024c

0800b9f8 <_strtoul_l.constprop.0>:
 800b9f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9fc:	4686      	mov	lr, r0
 800b9fe:	460d      	mov	r5, r1
 800ba00:	4f35      	ldr	r7, [pc, #212]	; (800bad8 <_strtoul_l.constprop.0+0xe0>)
 800ba02:	4628      	mov	r0, r5
 800ba04:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba08:	5de6      	ldrb	r6, [r4, r7]
 800ba0a:	f016 0608 	ands.w	r6, r6, #8
 800ba0e:	d1f8      	bne.n	800ba02 <_strtoul_l.constprop.0+0xa>
 800ba10:	2c2d      	cmp	r4, #45	; 0x2d
 800ba12:	d12f      	bne.n	800ba74 <_strtoul_l.constprop.0+0x7c>
 800ba14:	2601      	movs	r6, #1
 800ba16:	782c      	ldrb	r4, [r5, #0]
 800ba18:	1c85      	adds	r5, r0, #2
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d057      	beq.n	800bace <_strtoul_l.constprop.0+0xd6>
 800ba1e:	2b10      	cmp	r3, #16
 800ba20:	d109      	bne.n	800ba36 <_strtoul_l.constprop.0+0x3e>
 800ba22:	2c30      	cmp	r4, #48	; 0x30
 800ba24:	d107      	bne.n	800ba36 <_strtoul_l.constprop.0+0x3e>
 800ba26:	7828      	ldrb	r0, [r5, #0]
 800ba28:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ba2c:	2858      	cmp	r0, #88	; 0x58
 800ba2e:	d149      	bne.n	800bac4 <_strtoul_l.constprop.0+0xcc>
 800ba30:	2310      	movs	r3, #16
 800ba32:	786c      	ldrb	r4, [r5, #1]
 800ba34:	3502      	adds	r5, #2
 800ba36:	f04f 38ff 	mov.w	r8, #4294967295
 800ba3a:	fbb8 f8f3 	udiv	r8, r8, r3
 800ba3e:	2700      	movs	r7, #0
 800ba40:	fb03 f908 	mul.w	r9, r3, r8
 800ba44:	4638      	mov	r0, r7
 800ba46:	ea6f 0909 	mvn.w	r9, r9
 800ba4a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ba4e:	f1bc 0f09 	cmp.w	ip, #9
 800ba52:	d814      	bhi.n	800ba7e <_strtoul_l.constprop.0+0x86>
 800ba54:	4664      	mov	r4, ip
 800ba56:	42a3      	cmp	r3, r4
 800ba58:	dd22      	ble.n	800baa0 <_strtoul_l.constprop.0+0xa8>
 800ba5a:	2f00      	cmp	r7, #0
 800ba5c:	db1d      	blt.n	800ba9a <_strtoul_l.constprop.0+0xa2>
 800ba5e:	4580      	cmp	r8, r0
 800ba60:	d31b      	bcc.n	800ba9a <_strtoul_l.constprop.0+0xa2>
 800ba62:	d101      	bne.n	800ba68 <_strtoul_l.constprop.0+0x70>
 800ba64:	45a1      	cmp	r9, r4
 800ba66:	db18      	blt.n	800ba9a <_strtoul_l.constprop.0+0xa2>
 800ba68:	2701      	movs	r7, #1
 800ba6a:	fb00 4003 	mla	r0, r0, r3, r4
 800ba6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba72:	e7ea      	b.n	800ba4a <_strtoul_l.constprop.0+0x52>
 800ba74:	2c2b      	cmp	r4, #43	; 0x2b
 800ba76:	bf04      	itt	eq
 800ba78:	782c      	ldrbeq	r4, [r5, #0]
 800ba7a:	1c85      	addeq	r5, r0, #2
 800ba7c:	e7cd      	b.n	800ba1a <_strtoul_l.constprop.0+0x22>
 800ba7e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ba82:	f1bc 0f19 	cmp.w	ip, #25
 800ba86:	d801      	bhi.n	800ba8c <_strtoul_l.constprop.0+0x94>
 800ba88:	3c37      	subs	r4, #55	; 0x37
 800ba8a:	e7e4      	b.n	800ba56 <_strtoul_l.constprop.0+0x5e>
 800ba8c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ba90:	f1bc 0f19 	cmp.w	ip, #25
 800ba94:	d804      	bhi.n	800baa0 <_strtoul_l.constprop.0+0xa8>
 800ba96:	3c57      	subs	r4, #87	; 0x57
 800ba98:	e7dd      	b.n	800ba56 <_strtoul_l.constprop.0+0x5e>
 800ba9a:	f04f 37ff 	mov.w	r7, #4294967295
 800ba9e:	e7e6      	b.n	800ba6e <_strtoul_l.constprop.0+0x76>
 800baa0:	2f00      	cmp	r7, #0
 800baa2:	da07      	bge.n	800bab4 <_strtoul_l.constprop.0+0xbc>
 800baa4:	2322      	movs	r3, #34	; 0x22
 800baa6:	f04f 30ff 	mov.w	r0, #4294967295
 800baaa:	f8ce 3000 	str.w	r3, [lr]
 800baae:	b932      	cbnz	r2, 800babe <_strtoul_l.constprop.0+0xc6>
 800bab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bab4:	b106      	cbz	r6, 800bab8 <_strtoul_l.constprop.0+0xc0>
 800bab6:	4240      	negs	r0, r0
 800bab8:	2a00      	cmp	r2, #0
 800baba:	d0f9      	beq.n	800bab0 <_strtoul_l.constprop.0+0xb8>
 800babc:	b107      	cbz	r7, 800bac0 <_strtoul_l.constprop.0+0xc8>
 800babe:	1e69      	subs	r1, r5, #1
 800bac0:	6011      	str	r1, [r2, #0]
 800bac2:	e7f5      	b.n	800bab0 <_strtoul_l.constprop.0+0xb8>
 800bac4:	2430      	movs	r4, #48	; 0x30
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1b5      	bne.n	800ba36 <_strtoul_l.constprop.0+0x3e>
 800baca:	2308      	movs	r3, #8
 800bacc:	e7b3      	b.n	800ba36 <_strtoul_l.constprop.0+0x3e>
 800bace:	2c30      	cmp	r4, #48	; 0x30
 800bad0:	d0a9      	beq.n	800ba26 <_strtoul_l.constprop.0+0x2e>
 800bad2:	230a      	movs	r3, #10
 800bad4:	e7af      	b.n	800ba36 <_strtoul_l.constprop.0+0x3e>
 800bad6:	bf00      	nop
 800bad8:	0800eab9 	.word	0x0800eab9

0800badc <strtoul>:
 800badc:	4613      	mov	r3, r2
 800bade:	460a      	mov	r2, r1
 800bae0:	4601      	mov	r1, r0
 800bae2:	4802      	ldr	r0, [pc, #8]	; (800baec <strtoul+0x10>)
 800bae4:	6800      	ldr	r0, [r0, #0]
 800bae6:	f7ff bf87 	b.w	800b9f8 <_strtoul_l.constprop.0>
 800baea:	bf00      	nop
 800baec:	2000024c 	.word	0x2000024c

0800baf0 <_write_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4604      	mov	r4, r0
 800baf4:	4608      	mov	r0, r1
 800baf6:	4611      	mov	r1, r2
 800baf8:	2200      	movs	r2, #0
 800bafa:	4d05      	ldr	r5, [pc, #20]	; (800bb10 <_write_r+0x20>)
 800bafc:	602a      	str	r2, [r5, #0]
 800bafe:	461a      	mov	r2, r3
 800bb00:	f7f9 f91a 	bl	8004d38 <_write>
 800bb04:	1c43      	adds	r3, r0, #1
 800bb06:	d102      	bne.n	800bb0e <_write_r+0x1e>
 800bb08:	682b      	ldr	r3, [r5, #0]
 800bb0a:	b103      	cbz	r3, 800bb0e <_write_r+0x1e>
 800bb0c:	6023      	str	r3, [r4, #0]
 800bb0e:	bd38      	pop	{r3, r4, r5, pc}
 800bb10:	20009fdc 	.word	0x20009fdc

0800bb14 <__assert_func>:
 800bb14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb16:	4614      	mov	r4, r2
 800bb18:	461a      	mov	r2, r3
 800bb1a:	4b09      	ldr	r3, [pc, #36]	; (800bb40 <__assert_func+0x2c>)
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	68d8      	ldr	r0, [r3, #12]
 800bb22:	b14c      	cbz	r4, 800bb38 <__assert_func+0x24>
 800bb24:	4b07      	ldr	r3, [pc, #28]	; (800bb44 <__assert_func+0x30>)
 800bb26:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb2a:	9100      	str	r1, [sp, #0]
 800bb2c:	462b      	mov	r3, r5
 800bb2e:	4906      	ldr	r1, [pc, #24]	; (800bb48 <__assert_func+0x34>)
 800bb30:	f000 ff56 	bl	800c9e0 <fiprintf>
 800bb34:	f002 fb8c 	bl	800e250 <abort>
 800bb38:	4b04      	ldr	r3, [pc, #16]	; (800bb4c <__assert_func+0x38>)
 800bb3a:	461c      	mov	r4, r3
 800bb3c:	e7f3      	b.n	800bb26 <__assert_func+0x12>
 800bb3e:	bf00      	nop
 800bb40:	2000024c 	.word	0x2000024c
 800bb44:	0800ea7c 	.word	0x0800ea7c
 800bb48:	0800ea89 	.word	0x0800ea89
 800bb4c:	0800eab7 	.word	0x0800eab7

0800bb50 <_close_r>:
 800bb50:	b538      	push	{r3, r4, r5, lr}
 800bb52:	2300      	movs	r3, #0
 800bb54:	4d05      	ldr	r5, [pc, #20]	; (800bb6c <_close_r+0x1c>)
 800bb56:	4604      	mov	r4, r0
 800bb58:	4608      	mov	r0, r1
 800bb5a:	602b      	str	r3, [r5, #0]
 800bb5c:	f7f9 f908 	bl	8004d70 <_close>
 800bb60:	1c43      	adds	r3, r0, #1
 800bb62:	d102      	bne.n	800bb6a <_close_r+0x1a>
 800bb64:	682b      	ldr	r3, [r5, #0]
 800bb66:	b103      	cbz	r3, 800bb6a <_close_r+0x1a>
 800bb68:	6023      	str	r3, [r4, #0]
 800bb6a:	bd38      	pop	{r3, r4, r5, pc}
 800bb6c:	20009fdc 	.word	0x20009fdc

0800bb70 <quorem>:
 800bb70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb74:	6903      	ldr	r3, [r0, #16]
 800bb76:	690c      	ldr	r4, [r1, #16]
 800bb78:	4607      	mov	r7, r0
 800bb7a:	42a3      	cmp	r3, r4
 800bb7c:	f2c0 8082 	blt.w	800bc84 <quorem+0x114>
 800bb80:	3c01      	subs	r4, #1
 800bb82:	f100 0514 	add.w	r5, r0, #20
 800bb86:	f101 0814 	add.w	r8, r1, #20
 800bb8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb8e:	9301      	str	r3, [sp, #4]
 800bb90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bba0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bba4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bba8:	d331      	bcc.n	800bc0e <quorem+0x9e>
 800bbaa:	f04f 0e00 	mov.w	lr, #0
 800bbae:	4640      	mov	r0, r8
 800bbb0:	46ac      	mov	ip, r5
 800bbb2:	46f2      	mov	sl, lr
 800bbb4:	f850 2b04 	ldr.w	r2, [r0], #4
 800bbb8:	b293      	uxth	r3, r2
 800bbba:	fb06 e303 	mla	r3, r6, r3, lr
 800bbbe:	0c12      	lsrs	r2, r2, #16
 800bbc0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	fb06 e202 	mla	r2, r6, r2, lr
 800bbca:	ebaa 0303 	sub.w	r3, sl, r3
 800bbce:	f8dc a000 	ldr.w	sl, [ip]
 800bbd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbd6:	fa1f fa8a 	uxth.w	sl, sl
 800bbda:	4453      	add	r3, sl
 800bbdc:	f8dc a000 	ldr.w	sl, [ip]
 800bbe0:	b292      	uxth	r2, r2
 800bbe2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bbe6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbf0:	4581      	cmp	r9, r0
 800bbf2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bbf6:	f84c 3b04 	str.w	r3, [ip], #4
 800bbfa:	d2db      	bcs.n	800bbb4 <quorem+0x44>
 800bbfc:	f855 300b 	ldr.w	r3, [r5, fp]
 800bc00:	b92b      	cbnz	r3, 800bc0e <quorem+0x9e>
 800bc02:	9b01      	ldr	r3, [sp, #4]
 800bc04:	3b04      	subs	r3, #4
 800bc06:	429d      	cmp	r5, r3
 800bc08:	461a      	mov	r2, r3
 800bc0a:	d32f      	bcc.n	800bc6c <quorem+0xfc>
 800bc0c:	613c      	str	r4, [r7, #16]
 800bc0e:	4638      	mov	r0, r7
 800bc10:	f001 fd68 	bl	800d6e4 <__mcmp>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	db25      	blt.n	800bc64 <quorem+0xf4>
 800bc18:	4628      	mov	r0, r5
 800bc1a:	f04f 0c00 	mov.w	ip, #0
 800bc1e:	3601      	adds	r6, #1
 800bc20:	f858 1b04 	ldr.w	r1, [r8], #4
 800bc24:	f8d0 e000 	ldr.w	lr, [r0]
 800bc28:	b28b      	uxth	r3, r1
 800bc2a:	ebac 0303 	sub.w	r3, ip, r3
 800bc2e:	fa1f f28e 	uxth.w	r2, lr
 800bc32:	4413      	add	r3, r2
 800bc34:	0c0a      	lsrs	r2, r1, #16
 800bc36:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bc3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc44:	45c1      	cmp	r9, r8
 800bc46:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bc4a:	f840 3b04 	str.w	r3, [r0], #4
 800bc4e:	d2e7      	bcs.n	800bc20 <quorem+0xb0>
 800bc50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc58:	b922      	cbnz	r2, 800bc64 <quorem+0xf4>
 800bc5a:	3b04      	subs	r3, #4
 800bc5c:	429d      	cmp	r5, r3
 800bc5e:	461a      	mov	r2, r3
 800bc60:	d30a      	bcc.n	800bc78 <quorem+0x108>
 800bc62:	613c      	str	r4, [r7, #16]
 800bc64:	4630      	mov	r0, r6
 800bc66:	b003      	add	sp, #12
 800bc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc6c:	6812      	ldr	r2, [r2, #0]
 800bc6e:	3b04      	subs	r3, #4
 800bc70:	2a00      	cmp	r2, #0
 800bc72:	d1cb      	bne.n	800bc0c <quorem+0x9c>
 800bc74:	3c01      	subs	r4, #1
 800bc76:	e7c6      	b.n	800bc06 <quorem+0x96>
 800bc78:	6812      	ldr	r2, [r2, #0]
 800bc7a:	3b04      	subs	r3, #4
 800bc7c:	2a00      	cmp	r2, #0
 800bc7e:	d1f0      	bne.n	800bc62 <quorem+0xf2>
 800bc80:	3c01      	subs	r4, #1
 800bc82:	e7eb      	b.n	800bc5c <quorem+0xec>
 800bc84:	2000      	movs	r0, #0
 800bc86:	e7ee      	b.n	800bc66 <quorem+0xf6>

0800bc88 <_dtoa_r>:
 800bc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc8c:	4616      	mov	r6, r2
 800bc8e:	461f      	mov	r7, r3
 800bc90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bc92:	b099      	sub	sp, #100	; 0x64
 800bc94:	4605      	mov	r5, r0
 800bc96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bc9a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800bc9e:	b974      	cbnz	r4, 800bcbe <_dtoa_r+0x36>
 800bca0:	2010      	movs	r0, #16
 800bca2:	f7fe f8ff 	bl	8009ea4 <malloc>
 800bca6:	4602      	mov	r2, r0
 800bca8:	6268      	str	r0, [r5, #36]	; 0x24
 800bcaa:	b920      	cbnz	r0, 800bcb6 <_dtoa_r+0x2e>
 800bcac:	21ea      	movs	r1, #234	; 0xea
 800bcae:	4ba8      	ldr	r3, [pc, #672]	; (800bf50 <_dtoa_r+0x2c8>)
 800bcb0:	48a8      	ldr	r0, [pc, #672]	; (800bf54 <_dtoa_r+0x2cc>)
 800bcb2:	f7ff ff2f 	bl	800bb14 <__assert_func>
 800bcb6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bcba:	6004      	str	r4, [r0, #0]
 800bcbc:	60c4      	str	r4, [r0, #12]
 800bcbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bcc0:	6819      	ldr	r1, [r3, #0]
 800bcc2:	b151      	cbz	r1, 800bcda <_dtoa_r+0x52>
 800bcc4:	685a      	ldr	r2, [r3, #4]
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	4093      	lsls	r3, r2
 800bcca:	604a      	str	r2, [r1, #4]
 800bccc:	608b      	str	r3, [r1, #8]
 800bcce:	4628      	mov	r0, r5
 800bcd0:	f001 fa80 	bl	800d1d4 <_Bfree>
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bcd8:	601a      	str	r2, [r3, #0]
 800bcda:	1e3b      	subs	r3, r7, #0
 800bcdc:	bfaf      	iteee	ge
 800bcde:	2300      	movge	r3, #0
 800bce0:	2201      	movlt	r2, #1
 800bce2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bce6:	9305      	strlt	r3, [sp, #20]
 800bce8:	bfa8      	it	ge
 800bcea:	f8c8 3000 	strge.w	r3, [r8]
 800bcee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800bcf2:	4b99      	ldr	r3, [pc, #612]	; (800bf58 <_dtoa_r+0x2d0>)
 800bcf4:	bfb8      	it	lt
 800bcf6:	f8c8 2000 	strlt.w	r2, [r8]
 800bcfa:	ea33 0309 	bics.w	r3, r3, r9
 800bcfe:	d119      	bne.n	800bd34 <_dtoa_r+0xac>
 800bd00:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd04:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bd06:	6013      	str	r3, [r2, #0]
 800bd08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd0c:	4333      	orrs	r3, r6
 800bd0e:	f000 857f 	beq.w	800c810 <_dtoa_r+0xb88>
 800bd12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bd14:	b953      	cbnz	r3, 800bd2c <_dtoa_r+0xa4>
 800bd16:	4b91      	ldr	r3, [pc, #580]	; (800bf5c <_dtoa_r+0x2d4>)
 800bd18:	e022      	b.n	800bd60 <_dtoa_r+0xd8>
 800bd1a:	4b91      	ldr	r3, [pc, #580]	; (800bf60 <_dtoa_r+0x2d8>)
 800bd1c:	9303      	str	r3, [sp, #12]
 800bd1e:	3308      	adds	r3, #8
 800bd20:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bd22:	6013      	str	r3, [r2, #0]
 800bd24:	9803      	ldr	r0, [sp, #12]
 800bd26:	b019      	add	sp, #100	; 0x64
 800bd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd2c:	4b8b      	ldr	r3, [pc, #556]	; (800bf5c <_dtoa_r+0x2d4>)
 800bd2e:	9303      	str	r3, [sp, #12]
 800bd30:	3303      	adds	r3, #3
 800bd32:	e7f5      	b.n	800bd20 <_dtoa_r+0x98>
 800bd34:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bd38:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800bd3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd40:	2200      	movs	r2, #0
 800bd42:	2300      	movs	r3, #0
 800bd44:	f7f4 feaa 	bl	8000a9c <__aeabi_dcmpeq>
 800bd48:	4680      	mov	r8, r0
 800bd4a:	b158      	cbz	r0, 800bd64 <_dtoa_r+0xdc>
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bd50:	6013      	str	r3, [r2, #0]
 800bd52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f000 8558 	beq.w	800c80a <_dtoa_r+0xb82>
 800bd5a:	4882      	ldr	r0, [pc, #520]	; (800bf64 <_dtoa_r+0x2dc>)
 800bd5c:	6018      	str	r0, [r3, #0]
 800bd5e:	1e43      	subs	r3, r0, #1
 800bd60:	9303      	str	r3, [sp, #12]
 800bd62:	e7df      	b.n	800bd24 <_dtoa_r+0x9c>
 800bd64:	ab16      	add	r3, sp, #88	; 0x58
 800bd66:	9301      	str	r3, [sp, #4]
 800bd68:	ab17      	add	r3, sp, #92	; 0x5c
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bd72:	f001 fdd9 	bl	800d928 <__d2b>
 800bd76:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bd7a:	4683      	mov	fp, r0
 800bd7c:	2c00      	cmp	r4, #0
 800bd7e:	d07f      	beq.n	800be80 <_dtoa_r+0x1f8>
 800bd80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd86:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bd8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd8e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800bd92:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bd96:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	4b72      	ldr	r3, [pc, #456]	; (800bf68 <_dtoa_r+0x2e0>)
 800bd9e:	f7f4 fa5d 	bl	800025c <__aeabi_dsub>
 800bda2:	a365      	add	r3, pc, #404	; (adr r3, 800bf38 <_dtoa_r+0x2b0>)
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	f7f4 fc10 	bl	80005cc <__aeabi_dmul>
 800bdac:	a364      	add	r3, pc, #400	; (adr r3, 800bf40 <_dtoa_r+0x2b8>)
 800bdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb2:	f7f4 fa55 	bl	8000260 <__adddf3>
 800bdb6:	4606      	mov	r6, r0
 800bdb8:	4620      	mov	r0, r4
 800bdba:	460f      	mov	r7, r1
 800bdbc:	f7f4 fb9c 	bl	80004f8 <__aeabi_i2d>
 800bdc0:	a361      	add	r3, pc, #388	; (adr r3, 800bf48 <_dtoa_r+0x2c0>)
 800bdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc6:	f7f4 fc01 	bl	80005cc <__aeabi_dmul>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	460b      	mov	r3, r1
 800bdce:	4630      	mov	r0, r6
 800bdd0:	4639      	mov	r1, r7
 800bdd2:	f7f4 fa45 	bl	8000260 <__adddf3>
 800bdd6:	4606      	mov	r6, r0
 800bdd8:	460f      	mov	r7, r1
 800bdda:	f7f4 fea7 	bl	8000b2c <__aeabi_d2iz>
 800bdde:	2200      	movs	r2, #0
 800bde0:	4682      	mov	sl, r0
 800bde2:	2300      	movs	r3, #0
 800bde4:	4630      	mov	r0, r6
 800bde6:	4639      	mov	r1, r7
 800bde8:	f7f4 fe62 	bl	8000ab0 <__aeabi_dcmplt>
 800bdec:	b148      	cbz	r0, 800be02 <_dtoa_r+0x17a>
 800bdee:	4650      	mov	r0, sl
 800bdf0:	f7f4 fb82 	bl	80004f8 <__aeabi_i2d>
 800bdf4:	4632      	mov	r2, r6
 800bdf6:	463b      	mov	r3, r7
 800bdf8:	f7f4 fe50 	bl	8000a9c <__aeabi_dcmpeq>
 800bdfc:	b908      	cbnz	r0, 800be02 <_dtoa_r+0x17a>
 800bdfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be02:	f1ba 0f16 	cmp.w	sl, #22
 800be06:	d858      	bhi.n	800beba <_dtoa_r+0x232>
 800be08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be0c:	4b57      	ldr	r3, [pc, #348]	; (800bf6c <_dtoa_r+0x2e4>)
 800be0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800be12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be16:	f7f4 fe4b 	bl	8000ab0 <__aeabi_dcmplt>
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d04f      	beq.n	800bebe <_dtoa_r+0x236>
 800be1e:	2300      	movs	r3, #0
 800be20:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be24:	930f      	str	r3, [sp, #60]	; 0x3c
 800be26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800be28:	1b1c      	subs	r4, r3, r4
 800be2a:	1e63      	subs	r3, r4, #1
 800be2c:	9309      	str	r3, [sp, #36]	; 0x24
 800be2e:	bf49      	itett	mi
 800be30:	f1c4 0301 	rsbmi	r3, r4, #1
 800be34:	2300      	movpl	r3, #0
 800be36:	9306      	strmi	r3, [sp, #24]
 800be38:	2300      	movmi	r3, #0
 800be3a:	bf54      	ite	pl
 800be3c:	9306      	strpl	r3, [sp, #24]
 800be3e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800be40:	f1ba 0f00 	cmp.w	sl, #0
 800be44:	db3d      	blt.n	800bec2 <_dtoa_r+0x23a>
 800be46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be48:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800be4c:	4453      	add	r3, sl
 800be4e:	9309      	str	r3, [sp, #36]	; 0x24
 800be50:	2300      	movs	r3, #0
 800be52:	930a      	str	r3, [sp, #40]	; 0x28
 800be54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be56:	2b09      	cmp	r3, #9
 800be58:	f200 808c 	bhi.w	800bf74 <_dtoa_r+0x2ec>
 800be5c:	2b05      	cmp	r3, #5
 800be5e:	bfc4      	itt	gt
 800be60:	3b04      	subgt	r3, #4
 800be62:	9322      	strgt	r3, [sp, #136]	; 0x88
 800be64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be66:	bfc8      	it	gt
 800be68:	2400      	movgt	r4, #0
 800be6a:	f1a3 0302 	sub.w	r3, r3, #2
 800be6e:	bfd8      	it	le
 800be70:	2401      	movle	r4, #1
 800be72:	2b03      	cmp	r3, #3
 800be74:	f200 808a 	bhi.w	800bf8c <_dtoa_r+0x304>
 800be78:	e8df f003 	tbb	[pc, r3]
 800be7c:	5b4d4f2d 	.word	0x5b4d4f2d
 800be80:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800be84:	441c      	add	r4, r3
 800be86:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800be8a:	2b20      	cmp	r3, #32
 800be8c:	bfc3      	ittte	gt
 800be8e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800be92:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800be96:	fa09 f303 	lslgt.w	r3, r9, r3
 800be9a:	f1c3 0320 	rsble	r3, r3, #32
 800be9e:	bfc6      	itte	gt
 800bea0:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bea4:	4318      	orrgt	r0, r3
 800bea6:	fa06 f003 	lslle.w	r0, r6, r3
 800beaa:	f7f4 fb15 	bl	80004d8 <__aeabi_ui2d>
 800beae:	2301      	movs	r3, #1
 800beb0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800beb4:	3c01      	subs	r4, #1
 800beb6:	9313      	str	r3, [sp, #76]	; 0x4c
 800beb8:	e76f      	b.n	800bd9a <_dtoa_r+0x112>
 800beba:	2301      	movs	r3, #1
 800bebc:	e7b2      	b.n	800be24 <_dtoa_r+0x19c>
 800bebe:	900f      	str	r0, [sp, #60]	; 0x3c
 800bec0:	e7b1      	b.n	800be26 <_dtoa_r+0x19e>
 800bec2:	9b06      	ldr	r3, [sp, #24]
 800bec4:	eba3 030a 	sub.w	r3, r3, sl
 800bec8:	9306      	str	r3, [sp, #24]
 800beca:	f1ca 0300 	rsb	r3, sl, #0
 800bece:	930a      	str	r3, [sp, #40]	; 0x28
 800bed0:	2300      	movs	r3, #0
 800bed2:	930e      	str	r3, [sp, #56]	; 0x38
 800bed4:	e7be      	b.n	800be54 <_dtoa_r+0x1cc>
 800bed6:	2300      	movs	r3, #0
 800bed8:	930b      	str	r3, [sp, #44]	; 0x2c
 800beda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bedc:	2b00      	cmp	r3, #0
 800bede:	dc58      	bgt.n	800bf92 <_dtoa_r+0x30a>
 800bee0:	f04f 0901 	mov.w	r9, #1
 800bee4:	464b      	mov	r3, r9
 800bee6:	f8cd 9020 	str.w	r9, [sp, #32]
 800beea:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800beee:	2200      	movs	r2, #0
 800bef0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bef2:	6042      	str	r2, [r0, #4]
 800bef4:	2204      	movs	r2, #4
 800bef6:	f102 0614 	add.w	r6, r2, #20
 800befa:	429e      	cmp	r6, r3
 800befc:	6841      	ldr	r1, [r0, #4]
 800befe:	d94e      	bls.n	800bf9e <_dtoa_r+0x316>
 800bf00:	4628      	mov	r0, r5
 800bf02:	f001 f927 	bl	800d154 <_Balloc>
 800bf06:	9003      	str	r0, [sp, #12]
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	d14c      	bne.n	800bfa6 <_dtoa_r+0x31e>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bf12:	4b17      	ldr	r3, [pc, #92]	; (800bf70 <_dtoa_r+0x2e8>)
 800bf14:	e6cc      	b.n	800bcb0 <_dtoa_r+0x28>
 800bf16:	2301      	movs	r3, #1
 800bf18:	e7de      	b.n	800bed8 <_dtoa_r+0x250>
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bf20:	eb0a 0903 	add.w	r9, sl, r3
 800bf24:	f109 0301 	add.w	r3, r9, #1
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	9308      	str	r3, [sp, #32]
 800bf2c:	bfb8      	it	lt
 800bf2e:	2301      	movlt	r3, #1
 800bf30:	e7dd      	b.n	800beee <_dtoa_r+0x266>
 800bf32:	2301      	movs	r3, #1
 800bf34:	e7f2      	b.n	800bf1c <_dtoa_r+0x294>
 800bf36:	bf00      	nop
 800bf38:	636f4361 	.word	0x636f4361
 800bf3c:	3fd287a7 	.word	0x3fd287a7
 800bf40:	8b60c8b3 	.word	0x8b60c8b3
 800bf44:	3fc68a28 	.word	0x3fc68a28
 800bf48:	509f79fb 	.word	0x509f79fb
 800bf4c:	3fd34413 	.word	0x3fd34413
 800bf50:	0800ea08 	.word	0x0800ea08
 800bf54:	0800ebc6 	.word	0x0800ebc6
 800bf58:	7ff00000 	.word	0x7ff00000
 800bf5c:	0800ebc2 	.word	0x0800ebc2
 800bf60:	0800ebb9 	.word	0x0800ebb9
 800bf64:	0800e995 	.word	0x0800e995
 800bf68:	3ff80000 	.word	0x3ff80000
 800bf6c:	0800ed30 	.word	0x0800ed30
 800bf70:	0800ec21 	.word	0x0800ec21
 800bf74:	2401      	movs	r4, #1
 800bf76:	2300      	movs	r3, #0
 800bf78:	940b      	str	r4, [sp, #44]	; 0x2c
 800bf7a:	9322      	str	r3, [sp, #136]	; 0x88
 800bf7c:	f04f 39ff 	mov.w	r9, #4294967295
 800bf80:	2200      	movs	r2, #0
 800bf82:	2312      	movs	r3, #18
 800bf84:	f8cd 9020 	str.w	r9, [sp, #32]
 800bf88:	9223      	str	r2, [sp, #140]	; 0x8c
 800bf8a:	e7b0      	b.n	800beee <_dtoa_r+0x266>
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf90:	e7f4      	b.n	800bf7c <_dtoa_r+0x2f4>
 800bf92:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800bf96:	464b      	mov	r3, r9
 800bf98:	f8cd 9020 	str.w	r9, [sp, #32]
 800bf9c:	e7a7      	b.n	800beee <_dtoa_r+0x266>
 800bf9e:	3101      	adds	r1, #1
 800bfa0:	6041      	str	r1, [r0, #4]
 800bfa2:	0052      	lsls	r2, r2, #1
 800bfa4:	e7a7      	b.n	800bef6 <_dtoa_r+0x26e>
 800bfa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bfa8:	9a03      	ldr	r2, [sp, #12]
 800bfaa:	601a      	str	r2, [r3, #0]
 800bfac:	9b08      	ldr	r3, [sp, #32]
 800bfae:	2b0e      	cmp	r3, #14
 800bfb0:	f200 80a8 	bhi.w	800c104 <_dtoa_r+0x47c>
 800bfb4:	2c00      	cmp	r4, #0
 800bfb6:	f000 80a5 	beq.w	800c104 <_dtoa_r+0x47c>
 800bfba:	f1ba 0f00 	cmp.w	sl, #0
 800bfbe:	dd34      	ble.n	800c02a <_dtoa_r+0x3a2>
 800bfc0:	4a9a      	ldr	r2, [pc, #616]	; (800c22c <_dtoa_r+0x5a4>)
 800bfc2:	f00a 030f 	and.w	r3, sl, #15
 800bfc6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bfca:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bfce:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bfd2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bfd6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800bfda:	d016      	beq.n	800c00a <_dtoa_r+0x382>
 800bfdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bfe0:	4b93      	ldr	r3, [pc, #588]	; (800c230 <_dtoa_r+0x5a8>)
 800bfe2:	2703      	movs	r7, #3
 800bfe4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfe8:	f7f4 fc1a 	bl	8000820 <__aeabi_ddiv>
 800bfec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bff0:	f004 040f 	and.w	r4, r4, #15
 800bff4:	4e8e      	ldr	r6, [pc, #568]	; (800c230 <_dtoa_r+0x5a8>)
 800bff6:	b954      	cbnz	r4, 800c00e <_dtoa_r+0x386>
 800bff8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c000:	f7f4 fc0e 	bl	8000820 <__aeabi_ddiv>
 800c004:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c008:	e029      	b.n	800c05e <_dtoa_r+0x3d6>
 800c00a:	2702      	movs	r7, #2
 800c00c:	e7f2      	b.n	800bff4 <_dtoa_r+0x36c>
 800c00e:	07e1      	lsls	r1, r4, #31
 800c010:	d508      	bpl.n	800c024 <_dtoa_r+0x39c>
 800c012:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c016:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c01a:	f7f4 fad7 	bl	80005cc <__aeabi_dmul>
 800c01e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c022:	3701      	adds	r7, #1
 800c024:	1064      	asrs	r4, r4, #1
 800c026:	3608      	adds	r6, #8
 800c028:	e7e5      	b.n	800bff6 <_dtoa_r+0x36e>
 800c02a:	f000 80a5 	beq.w	800c178 <_dtoa_r+0x4f0>
 800c02e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c032:	f1ca 0400 	rsb	r4, sl, #0
 800c036:	4b7d      	ldr	r3, [pc, #500]	; (800c22c <_dtoa_r+0x5a4>)
 800c038:	f004 020f 	and.w	r2, r4, #15
 800c03c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	f7f4 fac2 	bl	80005cc <__aeabi_dmul>
 800c048:	2702      	movs	r7, #2
 800c04a:	2300      	movs	r3, #0
 800c04c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c050:	4e77      	ldr	r6, [pc, #476]	; (800c230 <_dtoa_r+0x5a8>)
 800c052:	1124      	asrs	r4, r4, #4
 800c054:	2c00      	cmp	r4, #0
 800c056:	f040 8084 	bne.w	800c162 <_dtoa_r+0x4da>
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d1d2      	bne.n	800c004 <_dtoa_r+0x37c>
 800c05e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 808b 	beq.w	800c17c <_dtoa_r+0x4f4>
 800c066:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c06a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c06e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c072:	2200      	movs	r2, #0
 800c074:	4b6f      	ldr	r3, [pc, #444]	; (800c234 <_dtoa_r+0x5ac>)
 800c076:	f7f4 fd1b 	bl	8000ab0 <__aeabi_dcmplt>
 800c07a:	2800      	cmp	r0, #0
 800c07c:	d07e      	beq.n	800c17c <_dtoa_r+0x4f4>
 800c07e:	9b08      	ldr	r3, [sp, #32]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d07b      	beq.n	800c17c <_dtoa_r+0x4f4>
 800c084:	f1b9 0f00 	cmp.w	r9, #0
 800c088:	dd38      	ble.n	800c0fc <_dtoa_r+0x474>
 800c08a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c08e:	2200      	movs	r2, #0
 800c090:	4b69      	ldr	r3, [pc, #420]	; (800c238 <_dtoa_r+0x5b0>)
 800c092:	f7f4 fa9b 	bl	80005cc <__aeabi_dmul>
 800c096:	464c      	mov	r4, r9
 800c098:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c09c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800c0a0:	3701      	adds	r7, #1
 800c0a2:	4638      	mov	r0, r7
 800c0a4:	f7f4 fa28 	bl	80004f8 <__aeabi_i2d>
 800c0a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0ac:	f7f4 fa8e 	bl	80005cc <__aeabi_dmul>
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	4b62      	ldr	r3, [pc, #392]	; (800c23c <_dtoa_r+0x5b4>)
 800c0b4:	f7f4 f8d4 	bl	8000260 <__adddf3>
 800c0b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c0bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c0c0:	9611      	str	r6, [sp, #68]	; 0x44
 800c0c2:	2c00      	cmp	r4, #0
 800c0c4:	d15d      	bne.n	800c182 <_dtoa_r+0x4fa>
 800c0c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	4b5c      	ldr	r3, [pc, #368]	; (800c240 <_dtoa_r+0x5b8>)
 800c0ce:	f7f4 f8c5 	bl	800025c <__aeabi_dsub>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c0da:	4633      	mov	r3, r6
 800c0dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c0de:	f7f4 fd05 	bl	8000aec <__aeabi_dcmpgt>
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	f040 829c 	bne.w	800c620 <_dtoa_r+0x998>
 800c0e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c0ee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c0f2:	f7f4 fcdd 	bl	8000ab0 <__aeabi_dcmplt>
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	f040 8290 	bne.w	800c61c <_dtoa_r+0x994>
 800c0fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c100:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c104:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c106:	2b00      	cmp	r3, #0
 800c108:	f2c0 8152 	blt.w	800c3b0 <_dtoa_r+0x728>
 800c10c:	f1ba 0f0e 	cmp.w	sl, #14
 800c110:	f300 814e 	bgt.w	800c3b0 <_dtoa_r+0x728>
 800c114:	4b45      	ldr	r3, [pc, #276]	; (800c22c <_dtoa_r+0x5a4>)
 800c116:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c11a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c11e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c122:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c124:	2b00      	cmp	r3, #0
 800c126:	f280 80db 	bge.w	800c2e0 <_dtoa_r+0x658>
 800c12a:	9b08      	ldr	r3, [sp, #32]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f300 80d7 	bgt.w	800c2e0 <_dtoa_r+0x658>
 800c132:	f040 8272 	bne.w	800c61a <_dtoa_r+0x992>
 800c136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c13a:	2200      	movs	r2, #0
 800c13c:	4b40      	ldr	r3, [pc, #256]	; (800c240 <_dtoa_r+0x5b8>)
 800c13e:	f7f4 fa45 	bl	80005cc <__aeabi_dmul>
 800c142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c146:	f7f4 fcc7 	bl	8000ad8 <__aeabi_dcmpge>
 800c14a:	9c08      	ldr	r4, [sp, #32]
 800c14c:	4626      	mov	r6, r4
 800c14e:	2800      	cmp	r0, #0
 800c150:	f040 8248 	bne.w	800c5e4 <_dtoa_r+0x95c>
 800c154:	2331      	movs	r3, #49	; 0x31
 800c156:	9f03      	ldr	r7, [sp, #12]
 800c158:	f10a 0a01 	add.w	sl, sl, #1
 800c15c:	f807 3b01 	strb.w	r3, [r7], #1
 800c160:	e244      	b.n	800c5ec <_dtoa_r+0x964>
 800c162:	07e2      	lsls	r2, r4, #31
 800c164:	d505      	bpl.n	800c172 <_dtoa_r+0x4ea>
 800c166:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c16a:	f7f4 fa2f 	bl	80005cc <__aeabi_dmul>
 800c16e:	2301      	movs	r3, #1
 800c170:	3701      	adds	r7, #1
 800c172:	1064      	asrs	r4, r4, #1
 800c174:	3608      	adds	r6, #8
 800c176:	e76d      	b.n	800c054 <_dtoa_r+0x3cc>
 800c178:	2702      	movs	r7, #2
 800c17a:	e770      	b.n	800c05e <_dtoa_r+0x3d6>
 800c17c:	46d0      	mov	r8, sl
 800c17e:	9c08      	ldr	r4, [sp, #32]
 800c180:	e78f      	b.n	800c0a2 <_dtoa_r+0x41a>
 800c182:	9903      	ldr	r1, [sp, #12]
 800c184:	4b29      	ldr	r3, [pc, #164]	; (800c22c <_dtoa_r+0x5a4>)
 800c186:	4421      	add	r1, r4
 800c188:	9112      	str	r1, [sp, #72]	; 0x48
 800c18a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c18c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c190:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c194:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c198:	2900      	cmp	r1, #0
 800c19a:	d055      	beq.n	800c248 <_dtoa_r+0x5c0>
 800c19c:	2000      	movs	r0, #0
 800c19e:	4929      	ldr	r1, [pc, #164]	; (800c244 <_dtoa_r+0x5bc>)
 800c1a0:	f7f4 fb3e 	bl	8000820 <__aeabi_ddiv>
 800c1a4:	463b      	mov	r3, r7
 800c1a6:	4632      	mov	r2, r6
 800c1a8:	f7f4 f858 	bl	800025c <__aeabi_dsub>
 800c1ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c1b0:	9f03      	ldr	r7, [sp, #12]
 800c1b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1b6:	f7f4 fcb9 	bl	8000b2c <__aeabi_d2iz>
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	f7f4 f99c 	bl	80004f8 <__aeabi_i2d>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1c8:	f7f4 f848 	bl	800025c <__aeabi_dsub>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	3430      	adds	r4, #48	; 0x30
 800c1d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c1d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c1da:	f807 4b01 	strb.w	r4, [r7], #1
 800c1de:	f7f4 fc67 	bl	8000ab0 <__aeabi_dcmplt>
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	d174      	bne.n	800c2d0 <_dtoa_r+0x648>
 800c1e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	4911      	ldr	r1, [pc, #68]	; (800c234 <_dtoa_r+0x5ac>)
 800c1ee:	f7f4 f835 	bl	800025c <__aeabi_dsub>
 800c1f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c1f6:	f7f4 fc5b 	bl	8000ab0 <__aeabi_dcmplt>
 800c1fa:	2800      	cmp	r0, #0
 800c1fc:	f040 80b7 	bne.w	800c36e <_dtoa_r+0x6e6>
 800c200:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c202:	429f      	cmp	r7, r3
 800c204:	f43f af7a 	beq.w	800c0fc <_dtoa_r+0x474>
 800c208:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c20c:	2200      	movs	r2, #0
 800c20e:	4b0a      	ldr	r3, [pc, #40]	; (800c238 <_dtoa_r+0x5b0>)
 800c210:	f7f4 f9dc 	bl	80005cc <__aeabi_dmul>
 800c214:	2200      	movs	r2, #0
 800c216:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c21a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c21e:	4b06      	ldr	r3, [pc, #24]	; (800c238 <_dtoa_r+0x5b0>)
 800c220:	f7f4 f9d4 	bl	80005cc <__aeabi_dmul>
 800c224:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c228:	e7c3      	b.n	800c1b2 <_dtoa_r+0x52a>
 800c22a:	bf00      	nop
 800c22c:	0800ed30 	.word	0x0800ed30
 800c230:	0800ed08 	.word	0x0800ed08
 800c234:	3ff00000 	.word	0x3ff00000
 800c238:	40240000 	.word	0x40240000
 800c23c:	401c0000 	.word	0x401c0000
 800c240:	40140000 	.word	0x40140000
 800c244:	3fe00000 	.word	0x3fe00000
 800c248:	4630      	mov	r0, r6
 800c24a:	4639      	mov	r1, r7
 800c24c:	f7f4 f9be 	bl	80005cc <__aeabi_dmul>
 800c250:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c252:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c256:	9c03      	ldr	r4, [sp, #12]
 800c258:	9314      	str	r3, [sp, #80]	; 0x50
 800c25a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c25e:	f7f4 fc65 	bl	8000b2c <__aeabi_d2iz>
 800c262:	9015      	str	r0, [sp, #84]	; 0x54
 800c264:	f7f4 f948 	bl	80004f8 <__aeabi_i2d>
 800c268:	4602      	mov	r2, r0
 800c26a:	460b      	mov	r3, r1
 800c26c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c270:	f7f3 fff4 	bl	800025c <__aeabi_dsub>
 800c274:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c276:	4606      	mov	r6, r0
 800c278:	3330      	adds	r3, #48	; 0x30
 800c27a:	f804 3b01 	strb.w	r3, [r4], #1
 800c27e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c280:	460f      	mov	r7, r1
 800c282:	429c      	cmp	r4, r3
 800c284:	f04f 0200 	mov.w	r2, #0
 800c288:	d124      	bne.n	800c2d4 <_dtoa_r+0x64c>
 800c28a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c28e:	4bb0      	ldr	r3, [pc, #704]	; (800c550 <_dtoa_r+0x8c8>)
 800c290:	f7f3 ffe6 	bl	8000260 <__adddf3>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	4630      	mov	r0, r6
 800c29a:	4639      	mov	r1, r7
 800c29c:	f7f4 fc26 	bl	8000aec <__aeabi_dcmpgt>
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	d163      	bne.n	800c36c <_dtoa_r+0x6e4>
 800c2a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	49a9      	ldr	r1, [pc, #676]	; (800c550 <_dtoa_r+0x8c8>)
 800c2ac:	f7f3 ffd6 	bl	800025c <__aeabi_dsub>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	4630      	mov	r0, r6
 800c2b6:	4639      	mov	r1, r7
 800c2b8:	f7f4 fbfa 	bl	8000ab0 <__aeabi_dcmplt>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	f43f af1d 	beq.w	800c0fc <_dtoa_r+0x474>
 800c2c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c2c4:	1e7b      	subs	r3, r7, #1
 800c2c6:	9314      	str	r3, [sp, #80]	; 0x50
 800c2c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c2cc:	2b30      	cmp	r3, #48	; 0x30
 800c2ce:	d0f8      	beq.n	800c2c2 <_dtoa_r+0x63a>
 800c2d0:	46c2      	mov	sl, r8
 800c2d2:	e03b      	b.n	800c34c <_dtoa_r+0x6c4>
 800c2d4:	4b9f      	ldr	r3, [pc, #636]	; (800c554 <_dtoa_r+0x8cc>)
 800c2d6:	f7f4 f979 	bl	80005cc <__aeabi_dmul>
 800c2da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2de:	e7bc      	b.n	800c25a <_dtoa_r+0x5d2>
 800c2e0:	9f03      	ldr	r7, [sp, #12]
 800c2e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c2e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2ea:	4640      	mov	r0, r8
 800c2ec:	4649      	mov	r1, r9
 800c2ee:	f7f4 fa97 	bl	8000820 <__aeabi_ddiv>
 800c2f2:	f7f4 fc1b 	bl	8000b2c <__aeabi_d2iz>
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	f7f4 f8fe 	bl	80004f8 <__aeabi_i2d>
 800c2fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c300:	f7f4 f964 	bl	80005cc <__aeabi_dmul>
 800c304:	4602      	mov	r2, r0
 800c306:	460b      	mov	r3, r1
 800c308:	4640      	mov	r0, r8
 800c30a:	4649      	mov	r1, r9
 800c30c:	f7f3 ffa6 	bl	800025c <__aeabi_dsub>
 800c310:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c314:	f807 6b01 	strb.w	r6, [r7], #1
 800c318:	9e03      	ldr	r6, [sp, #12]
 800c31a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c31e:	1bbe      	subs	r6, r7, r6
 800c320:	45b4      	cmp	ip, r6
 800c322:	4602      	mov	r2, r0
 800c324:	460b      	mov	r3, r1
 800c326:	d136      	bne.n	800c396 <_dtoa_r+0x70e>
 800c328:	f7f3 ff9a 	bl	8000260 <__adddf3>
 800c32c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c330:	4680      	mov	r8, r0
 800c332:	4689      	mov	r9, r1
 800c334:	f7f4 fbda 	bl	8000aec <__aeabi_dcmpgt>
 800c338:	bb58      	cbnz	r0, 800c392 <_dtoa_r+0x70a>
 800c33a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c33e:	4640      	mov	r0, r8
 800c340:	4649      	mov	r1, r9
 800c342:	f7f4 fbab 	bl	8000a9c <__aeabi_dcmpeq>
 800c346:	b108      	cbz	r0, 800c34c <_dtoa_r+0x6c4>
 800c348:	07e1      	lsls	r1, r4, #31
 800c34a:	d422      	bmi.n	800c392 <_dtoa_r+0x70a>
 800c34c:	4628      	mov	r0, r5
 800c34e:	4659      	mov	r1, fp
 800c350:	f000 ff40 	bl	800d1d4 <_Bfree>
 800c354:	2300      	movs	r3, #0
 800c356:	703b      	strb	r3, [r7, #0]
 800c358:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c35a:	f10a 0001 	add.w	r0, sl, #1
 800c35e:	6018      	str	r0, [r3, #0]
 800c360:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c362:	2b00      	cmp	r3, #0
 800c364:	f43f acde 	beq.w	800bd24 <_dtoa_r+0x9c>
 800c368:	601f      	str	r7, [r3, #0]
 800c36a:	e4db      	b.n	800bd24 <_dtoa_r+0x9c>
 800c36c:	4627      	mov	r7, r4
 800c36e:	463b      	mov	r3, r7
 800c370:	461f      	mov	r7, r3
 800c372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c376:	2a39      	cmp	r2, #57	; 0x39
 800c378:	d107      	bne.n	800c38a <_dtoa_r+0x702>
 800c37a:	9a03      	ldr	r2, [sp, #12]
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d1f7      	bne.n	800c370 <_dtoa_r+0x6e8>
 800c380:	2230      	movs	r2, #48	; 0x30
 800c382:	9903      	ldr	r1, [sp, #12]
 800c384:	f108 0801 	add.w	r8, r8, #1
 800c388:	700a      	strb	r2, [r1, #0]
 800c38a:	781a      	ldrb	r2, [r3, #0]
 800c38c:	3201      	adds	r2, #1
 800c38e:	701a      	strb	r2, [r3, #0]
 800c390:	e79e      	b.n	800c2d0 <_dtoa_r+0x648>
 800c392:	46d0      	mov	r8, sl
 800c394:	e7eb      	b.n	800c36e <_dtoa_r+0x6e6>
 800c396:	2200      	movs	r2, #0
 800c398:	4b6e      	ldr	r3, [pc, #440]	; (800c554 <_dtoa_r+0x8cc>)
 800c39a:	f7f4 f917 	bl	80005cc <__aeabi_dmul>
 800c39e:	2200      	movs	r2, #0
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	4680      	mov	r8, r0
 800c3a4:	4689      	mov	r9, r1
 800c3a6:	f7f4 fb79 	bl	8000a9c <__aeabi_dcmpeq>
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	d09b      	beq.n	800c2e6 <_dtoa_r+0x65e>
 800c3ae:	e7cd      	b.n	800c34c <_dtoa_r+0x6c4>
 800c3b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c3b2:	2a00      	cmp	r2, #0
 800c3b4:	f000 80d0 	beq.w	800c558 <_dtoa_r+0x8d0>
 800c3b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c3ba:	2a01      	cmp	r2, #1
 800c3bc:	f300 80ae 	bgt.w	800c51c <_dtoa_r+0x894>
 800c3c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c3c2:	2a00      	cmp	r2, #0
 800c3c4:	f000 80a6 	beq.w	800c514 <_dtoa_r+0x88c>
 800c3c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c3cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c3ce:	9f06      	ldr	r7, [sp, #24]
 800c3d0:	9a06      	ldr	r2, [sp, #24]
 800c3d2:	2101      	movs	r1, #1
 800c3d4:	441a      	add	r2, r3
 800c3d6:	9206      	str	r2, [sp, #24]
 800c3d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3da:	4628      	mov	r0, r5
 800c3dc:	441a      	add	r2, r3
 800c3de:	9209      	str	r2, [sp, #36]	; 0x24
 800c3e0:	f000 fff8 	bl	800d3d4 <__i2b>
 800c3e4:	4606      	mov	r6, r0
 800c3e6:	2f00      	cmp	r7, #0
 800c3e8:	dd0c      	ble.n	800c404 <_dtoa_r+0x77c>
 800c3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	dd09      	ble.n	800c404 <_dtoa_r+0x77c>
 800c3f0:	42bb      	cmp	r3, r7
 800c3f2:	bfa8      	it	ge
 800c3f4:	463b      	movge	r3, r7
 800c3f6:	9a06      	ldr	r2, [sp, #24]
 800c3f8:	1aff      	subs	r7, r7, r3
 800c3fa:	1ad2      	subs	r2, r2, r3
 800c3fc:	9206      	str	r2, [sp, #24]
 800c3fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c400:	1ad3      	subs	r3, r2, r3
 800c402:	9309      	str	r3, [sp, #36]	; 0x24
 800c404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c406:	b1f3      	cbz	r3, 800c446 <_dtoa_r+0x7be>
 800c408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	f000 80a8 	beq.w	800c560 <_dtoa_r+0x8d8>
 800c410:	2c00      	cmp	r4, #0
 800c412:	dd10      	ble.n	800c436 <_dtoa_r+0x7ae>
 800c414:	4631      	mov	r1, r6
 800c416:	4622      	mov	r2, r4
 800c418:	4628      	mov	r0, r5
 800c41a:	f001 f899 	bl	800d550 <__pow5mult>
 800c41e:	465a      	mov	r2, fp
 800c420:	4601      	mov	r1, r0
 800c422:	4606      	mov	r6, r0
 800c424:	4628      	mov	r0, r5
 800c426:	f000 ffeb 	bl	800d400 <__multiply>
 800c42a:	4680      	mov	r8, r0
 800c42c:	4659      	mov	r1, fp
 800c42e:	4628      	mov	r0, r5
 800c430:	f000 fed0 	bl	800d1d4 <_Bfree>
 800c434:	46c3      	mov	fp, r8
 800c436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c438:	1b1a      	subs	r2, r3, r4
 800c43a:	d004      	beq.n	800c446 <_dtoa_r+0x7be>
 800c43c:	4659      	mov	r1, fp
 800c43e:	4628      	mov	r0, r5
 800c440:	f001 f886 	bl	800d550 <__pow5mult>
 800c444:	4683      	mov	fp, r0
 800c446:	2101      	movs	r1, #1
 800c448:	4628      	mov	r0, r5
 800c44a:	f000 ffc3 	bl	800d3d4 <__i2b>
 800c44e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c450:	4604      	mov	r4, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	f340 8086 	ble.w	800c564 <_dtoa_r+0x8dc>
 800c458:	461a      	mov	r2, r3
 800c45a:	4601      	mov	r1, r0
 800c45c:	4628      	mov	r0, r5
 800c45e:	f001 f877 	bl	800d550 <__pow5mult>
 800c462:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c464:	4604      	mov	r4, r0
 800c466:	2b01      	cmp	r3, #1
 800c468:	dd7f      	ble.n	800c56a <_dtoa_r+0x8e2>
 800c46a:	f04f 0800 	mov.w	r8, #0
 800c46e:	6923      	ldr	r3, [r4, #16]
 800c470:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c474:	6918      	ldr	r0, [r3, #16]
 800c476:	f000 ff5f 	bl	800d338 <__hi0bits>
 800c47a:	f1c0 0020 	rsb	r0, r0, #32
 800c47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c480:	4418      	add	r0, r3
 800c482:	f010 001f 	ands.w	r0, r0, #31
 800c486:	f000 8092 	beq.w	800c5ae <_dtoa_r+0x926>
 800c48a:	f1c0 0320 	rsb	r3, r0, #32
 800c48e:	2b04      	cmp	r3, #4
 800c490:	f340 808a 	ble.w	800c5a8 <_dtoa_r+0x920>
 800c494:	f1c0 001c 	rsb	r0, r0, #28
 800c498:	9b06      	ldr	r3, [sp, #24]
 800c49a:	4407      	add	r7, r0
 800c49c:	4403      	add	r3, r0
 800c49e:	9306      	str	r3, [sp, #24]
 800c4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4a2:	4403      	add	r3, r0
 800c4a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c4a6:	9b06      	ldr	r3, [sp, #24]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	dd05      	ble.n	800c4b8 <_dtoa_r+0x830>
 800c4ac:	4659      	mov	r1, fp
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	f001 f8a7 	bl	800d604 <__lshift>
 800c4b6:	4683      	mov	fp, r0
 800c4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	dd05      	ble.n	800c4ca <_dtoa_r+0x842>
 800c4be:	4621      	mov	r1, r4
 800c4c0:	461a      	mov	r2, r3
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	f001 f89e 	bl	800d604 <__lshift>
 800c4c8:	4604      	mov	r4, r0
 800c4ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d070      	beq.n	800c5b2 <_dtoa_r+0x92a>
 800c4d0:	4621      	mov	r1, r4
 800c4d2:	4658      	mov	r0, fp
 800c4d4:	f001 f906 	bl	800d6e4 <__mcmp>
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	da6a      	bge.n	800c5b2 <_dtoa_r+0x92a>
 800c4dc:	2300      	movs	r3, #0
 800c4de:	4659      	mov	r1, fp
 800c4e0:	220a      	movs	r2, #10
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	f000 fe98 	bl	800d218 <__multadd>
 800c4e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4ea:	4683      	mov	fp, r0
 800c4ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	f000 8194 	beq.w	800c81e <_dtoa_r+0xb96>
 800c4f6:	4631      	mov	r1, r6
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	220a      	movs	r2, #10
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	f000 fe8b 	bl	800d218 <__multadd>
 800c502:	f1b9 0f00 	cmp.w	r9, #0
 800c506:	4606      	mov	r6, r0
 800c508:	f300 8093 	bgt.w	800c632 <_dtoa_r+0x9aa>
 800c50c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c50e:	2b02      	cmp	r3, #2
 800c510:	dc57      	bgt.n	800c5c2 <_dtoa_r+0x93a>
 800c512:	e08e      	b.n	800c632 <_dtoa_r+0x9aa>
 800c514:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c516:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c51a:	e757      	b.n	800c3cc <_dtoa_r+0x744>
 800c51c:	9b08      	ldr	r3, [sp, #32]
 800c51e:	1e5c      	subs	r4, r3, #1
 800c520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c522:	42a3      	cmp	r3, r4
 800c524:	bfb7      	itett	lt
 800c526:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c528:	1b1c      	subge	r4, r3, r4
 800c52a:	1ae2      	sublt	r2, r4, r3
 800c52c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c52e:	bfbe      	ittt	lt
 800c530:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c532:	189b      	addlt	r3, r3, r2
 800c534:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c536:	9b08      	ldr	r3, [sp, #32]
 800c538:	bfb8      	it	lt
 800c53a:	2400      	movlt	r4, #0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	bfbb      	ittet	lt
 800c540:	9b06      	ldrlt	r3, [sp, #24]
 800c542:	9a08      	ldrlt	r2, [sp, #32]
 800c544:	9f06      	ldrge	r7, [sp, #24]
 800c546:	1a9f      	sublt	r7, r3, r2
 800c548:	bfac      	ite	ge
 800c54a:	9b08      	ldrge	r3, [sp, #32]
 800c54c:	2300      	movlt	r3, #0
 800c54e:	e73f      	b.n	800c3d0 <_dtoa_r+0x748>
 800c550:	3fe00000 	.word	0x3fe00000
 800c554:	40240000 	.word	0x40240000
 800c558:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c55a:	9f06      	ldr	r7, [sp, #24]
 800c55c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c55e:	e742      	b.n	800c3e6 <_dtoa_r+0x75e>
 800c560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c562:	e76b      	b.n	800c43c <_dtoa_r+0x7b4>
 800c564:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c566:	2b01      	cmp	r3, #1
 800c568:	dc19      	bgt.n	800c59e <_dtoa_r+0x916>
 800c56a:	9b04      	ldr	r3, [sp, #16]
 800c56c:	b9bb      	cbnz	r3, 800c59e <_dtoa_r+0x916>
 800c56e:	9b05      	ldr	r3, [sp, #20]
 800c570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c574:	b99b      	cbnz	r3, 800c59e <_dtoa_r+0x916>
 800c576:	9b05      	ldr	r3, [sp, #20]
 800c578:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c57c:	0d1b      	lsrs	r3, r3, #20
 800c57e:	051b      	lsls	r3, r3, #20
 800c580:	b183      	cbz	r3, 800c5a4 <_dtoa_r+0x91c>
 800c582:	f04f 0801 	mov.w	r8, #1
 800c586:	9b06      	ldr	r3, [sp, #24]
 800c588:	3301      	adds	r3, #1
 800c58a:	9306      	str	r3, [sp, #24]
 800c58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c58e:	3301      	adds	r3, #1
 800c590:	9309      	str	r3, [sp, #36]	; 0x24
 800c592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c594:	2b00      	cmp	r3, #0
 800c596:	f47f af6a 	bne.w	800c46e <_dtoa_r+0x7e6>
 800c59a:	2001      	movs	r0, #1
 800c59c:	e76f      	b.n	800c47e <_dtoa_r+0x7f6>
 800c59e:	f04f 0800 	mov.w	r8, #0
 800c5a2:	e7f6      	b.n	800c592 <_dtoa_r+0x90a>
 800c5a4:	4698      	mov	r8, r3
 800c5a6:	e7f4      	b.n	800c592 <_dtoa_r+0x90a>
 800c5a8:	f43f af7d 	beq.w	800c4a6 <_dtoa_r+0x81e>
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	301c      	adds	r0, #28
 800c5b0:	e772      	b.n	800c498 <_dtoa_r+0x810>
 800c5b2:	9b08      	ldr	r3, [sp, #32]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	dc36      	bgt.n	800c626 <_dtoa_r+0x99e>
 800c5b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c5ba:	2b02      	cmp	r3, #2
 800c5bc:	dd33      	ble.n	800c626 <_dtoa_r+0x99e>
 800c5be:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c5c2:	f1b9 0f00 	cmp.w	r9, #0
 800c5c6:	d10d      	bne.n	800c5e4 <_dtoa_r+0x95c>
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	464b      	mov	r3, r9
 800c5cc:	2205      	movs	r2, #5
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	f000 fe22 	bl	800d218 <__multadd>
 800c5d4:	4601      	mov	r1, r0
 800c5d6:	4604      	mov	r4, r0
 800c5d8:	4658      	mov	r0, fp
 800c5da:	f001 f883 	bl	800d6e4 <__mcmp>
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	f73f adb8 	bgt.w	800c154 <_dtoa_r+0x4cc>
 800c5e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c5e6:	9f03      	ldr	r7, [sp, #12]
 800c5e8:	ea6f 0a03 	mvn.w	sl, r3
 800c5ec:	f04f 0800 	mov.w	r8, #0
 800c5f0:	4621      	mov	r1, r4
 800c5f2:	4628      	mov	r0, r5
 800c5f4:	f000 fdee 	bl	800d1d4 <_Bfree>
 800c5f8:	2e00      	cmp	r6, #0
 800c5fa:	f43f aea7 	beq.w	800c34c <_dtoa_r+0x6c4>
 800c5fe:	f1b8 0f00 	cmp.w	r8, #0
 800c602:	d005      	beq.n	800c610 <_dtoa_r+0x988>
 800c604:	45b0      	cmp	r8, r6
 800c606:	d003      	beq.n	800c610 <_dtoa_r+0x988>
 800c608:	4641      	mov	r1, r8
 800c60a:	4628      	mov	r0, r5
 800c60c:	f000 fde2 	bl	800d1d4 <_Bfree>
 800c610:	4631      	mov	r1, r6
 800c612:	4628      	mov	r0, r5
 800c614:	f000 fdde 	bl	800d1d4 <_Bfree>
 800c618:	e698      	b.n	800c34c <_dtoa_r+0x6c4>
 800c61a:	2400      	movs	r4, #0
 800c61c:	4626      	mov	r6, r4
 800c61e:	e7e1      	b.n	800c5e4 <_dtoa_r+0x95c>
 800c620:	46c2      	mov	sl, r8
 800c622:	4626      	mov	r6, r4
 800c624:	e596      	b.n	800c154 <_dtoa_r+0x4cc>
 800c626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c628:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	f000 80fd 	beq.w	800c82c <_dtoa_r+0xba4>
 800c632:	2f00      	cmp	r7, #0
 800c634:	dd05      	ble.n	800c642 <_dtoa_r+0x9ba>
 800c636:	4631      	mov	r1, r6
 800c638:	463a      	mov	r2, r7
 800c63a:	4628      	mov	r0, r5
 800c63c:	f000 ffe2 	bl	800d604 <__lshift>
 800c640:	4606      	mov	r6, r0
 800c642:	f1b8 0f00 	cmp.w	r8, #0
 800c646:	d05c      	beq.n	800c702 <_dtoa_r+0xa7a>
 800c648:	4628      	mov	r0, r5
 800c64a:	6871      	ldr	r1, [r6, #4]
 800c64c:	f000 fd82 	bl	800d154 <_Balloc>
 800c650:	4607      	mov	r7, r0
 800c652:	b928      	cbnz	r0, 800c660 <_dtoa_r+0x9d8>
 800c654:	4602      	mov	r2, r0
 800c656:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c65a:	4b7f      	ldr	r3, [pc, #508]	; (800c858 <_dtoa_r+0xbd0>)
 800c65c:	f7ff bb28 	b.w	800bcb0 <_dtoa_r+0x28>
 800c660:	6932      	ldr	r2, [r6, #16]
 800c662:	f106 010c 	add.w	r1, r6, #12
 800c666:	3202      	adds	r2, #2
 800c668:	0092      	lsls	r2, r2, #2
 800c66a:	300c      	adds	r0, #12
 800c66c:	f7fd fc2a 	bl	8009ec4 <memcpy>
 800c670:	2201      	movs	r2, #1
 800c672:	4639      	mov	r1, r7
 800c674:	4628      	mov	r0, r5
 800c676:	f000 ffc5 	bl	800d604 <__lshift>
 800c67a:	46b0      	mov	r8, r6
 800c67c:	4606      	mov	r6, r0
 800c67e:	9b03      	ldr	r3, [sp, #12]
 800c680:	3301      	adds	r3, #1
 800c682:	9308      	str	r3, [sp, #32]
 800c684:	9b03      	ldr	r3, [sp, #12]
 800c686:	444b      	add	r3, r9
 800c688:	930a      	str	r3, [sp, #40]	; 0x28
 800c68a:	9b04      	ldr	r3, [sp, #16]
 800c68c:	f003 0301 	and.w	r3, r3, #1
 800c690:	9309      	str	r3, [sp, #36]	; 0x24
 800c692:	9b08      	ldr	r3, [sp, #32]
 800c694:	4621      	mov	r1, r4
 800c696:	3b01      	subs	r3, #1
 800c698:	4658      	mov	r0, fp
 800c69a:	9304      	str	r3, [sp, #16]
 800c69c:	f7ff fa68 	bl	800bb70 <quorem>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	4641      	mov	r1, r8
 800c6a4:	3330      	adds	r3, #48	; 0x30
 800c6a6:	9006      	str	r0, [sp, #24]
 800c6a8:	4658      	mov	r0, fp
 800c6aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6ac:	f001 f81a 	bl	800d6e4 <__mcmp>
 800c6b0:	4632      	mov	r2, r6
 800c6b2:	4681      	mov	r9, r0
 800c6b4:	4621      	mov	r1, r4
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	f001 f830 	bl	800d71c <__mdiff>
 800c6bc:	68c2      	ldr	r2, [r0, #12]
 800c6be:	4607      	mov	r7, r0
 800c6c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6c2:	bb02      	cbnz	r2, 800c706 <_dtoa_r+0xa7e>
 800c6c4:	4601      	mov	r1, r0
 800c6c6:	4658      	mov	r0, fp
 800c6c8:	f001 f80c 	bl	800d6e4 <__mcmp>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6d0:	4639      	mov	r1, r7
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c6d8:	f000 fd7c 	bl	800d1d4 <_Bfree>
 800c6dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6e0:	9f08      	ldr	r7, [sp, #32]
 800c6e2:	ea43 0102 	orr.w	r1, r3, r2
 800c6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6e8:	430b      	orrs	r3, r1
 800c6ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6ec:	d10d      	bne.n	800c70a <_dtoa_r+0xa82>
 800c6ee:	2b39      	cmp	r3, #57	; 0x39
 800c6f0:	d029      	beq.n	800c746 <_dtoa_r+0xabe>
 800c6f2:	f1b9 0f00 	cmp.w	r9, #0
 800c6f6:	dd01      	ble.n	800c6fc <_dtoa_r+0xa74>
 800c6f8:	9b06      	ldr	r3, [sp, #24]
 800c6fa:	3331      	adds	r3, #49	; 0x31
 800c6fc:	9a04      	ldr	r2, [sp, #16]
 800c6fe:	7013      	strb	r3, [r2, #0]
 800c700:	e776      	b.n	800c5f0 <_dtoa_r+0x968>
 800c702:	4630      	mov	r0, r6
 800c704:	e7b9      	b.n	800c67a <_dtoa_r+0x9f2>
 800c706:	2201      	movs	r2, #1
 800c708:	e7e2      	b.n	800c6d0 <_dtoa_r+0xa48>
 800c70a:	f1b9 0f00 	cmp.w	r9, #0
 800c70e:	db06      	blt.n	800c71e <_dtoa_r+0xa96>
 800c710:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c712:	ea41 0909 	orr.w	r9, r1, r9
 800c716:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c718:	ea59 0101 	orrs.w	r1, r9, r1
 800c71c:	d120      	bne.n	800c760 <_dtoa_r+0xad8>
 800c71e:	2a00      	cmp	r2, #0
 800c720:	ddec      	ble.n	800c6fc <_dtoa_r+0xa74>
 800c722:	4659      	mov	r1, fp
 800c724:	2201      	movs	r2, #1
 800c726:	4628      	mov	r0, r5
 800c728:	9308      	str	r3, [sp, #32]
 800c72a:	f000 ff6b 	bl	800d604 <__lshift>
 800c72e:	4621      	mov	r1, r4
 800c730:	4683      	mov	fp, r0
 800c732:	f000 ffd7 	bl	800d6e4 <__mcmp>
 800c736:	2800      	cmp	r0, #0
 800c738:	9b08      	ldr	r3, [sp, #32]
 800c73a:	dc02      	bgt.n	800c742 <_dtoa_r+0xaba>
 800c73c:	d1de      	bne.n	800c6fc <_dtoa_r+0xa74>
 800c73e:	07da      	lsls	r2, r3, #31
 800c740:	d5dc      	bpl.n	800c6fc <_dtoa_r+0xa74>
 800c742:	2b39      	cmp	r3, #57	; 0x39
 800c744:	d1d8      	bne.n	800c6f8 <_dtoa_r+0xa70>
 800c746:	2339      	movs	r3, #57	; 0x39
 800c748:	9a04      	ldr	r2, [sp, #16]
 800c74a:	7013      	strb	r3, [r2, #0]
 800c74c:	463b      	mov	r3, r7
 800c74e:	461f      	mov	r7, r3
 800c750:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c754:	3b01      	subs	r3, #1
 800c756:	2a39      	cmp	r2, #57	; 0x39
 800c758:	d050      	beq.n	800c7fc <_dtoa_r+0xb74>
 800c75a:	3201      	adds	r2, #1
 800c75c:	701a      	strb	r2, [r3, #0]
 800c75e:	e747      	b.n	800c5f0 <_dtoa_r+0x968>
 800c760:	2a00      	cmp	r2, #0
 800c762:	dd03      	ble.n	800c76c <_dtoa_r+0xae4>
 800c764:	2b39      	cmp	r3, #57	; 0x39
 800c766:	d0ee      	beq.n	800c746 <_dtoa_r+0xabe>
 800c768:	3301      	adds	r3, #1
 800c76a:	e7c7      	b.n	800c6fc <_dtoa_r+0xa74>
 800c76c:	9a08      	ldr	r2, [sp, #32]
 800c76e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c770:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c774:	428a      	cmp	r2, r1
 800c776:	d02a      	beq.n	800c7ce <_dtoa_r+0xb46>
 800c778:	4659      	mov	r1, fp
 800c77a:	2300      	movs	r3, #0
 800c77c:	220a      	movs	r2, #10
 800c77e:	4628      	mov	r0, r5
 800c780:	f000 fd4a 	bl	800d218 <__multadd>
 800c784:	45b0      	cmp	r8, r6
 800c786:	4683      	mov	fp, r0
 800c788:	f04f 0300 	mov.w	r3, #0
 800c78c:	f04f 020a 	mov.w	r2, #10
 800c790:	4641      	mov	r1, r8
 800c792:	4628      	mov	r0, r5
 800c794:	d107      	bne.n	800c7a6 <_dtoa_r+0xb1e>
 800c796:	f000 fd3f 	bl	800d218 <__multadd>
 800c79a:	4680      	mov	r8, r0
 800c79c:	4606      	mov	r6, r0
 800c79e:	9b08      	ldr	r3, [sp, #32]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	9308      	str	r3, [sp, #32]
 800c7a4:	e775      	b.n	800c692 <_dtoa_r+0xa0a>
 800c7a6:	f000 fd37 	bl	800d218 <__multadd>
 800c7aa:	4631      	mov	r1, r6
 800c7ac:	4680      	mov	r8, r0
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	220a      	movs	r2, #10
 800c7b2:	4628      	mov	r0, r5
 800c7b4:	f000 fd30 	bl	800d218 <__multadd>
 800c7b8:	4606      	mov	r6, r0
 800c7ba:	e7f0      	b.n	800c79e <_dtoa_r+0xb16>
 800c7bc:	f1b9 0f00 	cmp.w	r9, #0
 800c7c0:	bfcc      	ite	gt
 800c7c2:	464f      	movgt	r7, r9
 800c7c4:	2701      	movle	r7, #1
 800c7c6:	f04f 0800 	mov.w	r8, #0
 800c7ca:	9a03      	ldr	r2, [sp, #12]
 800c7cc:	4417      	add	r7, r2
 800c7ce:	4659      	mov	r1, fp
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	9308      	str	r3, [sp, #32]
 800c7d6:	f000 ff15 	bl	800d604 <__lshift>
 800c7da:	4621      	mov	r1, r4
 800c7dc:	4683      	mov	fp, r0
 800c7de:	f000 ff81 	bl	800d6e4 <__mcmp>
 800c7e2:	2800      	cmp	r0, #0
 800c7e4:	dcb2      	bgt.n	800c74c <_dtoa_r+0xac4>
 800c7e6:	d102      	bne.n	800c7ee <_dtoa_r+0xb66>
 800c7e8:	9b08      	ldr	r3, [sp, #32]
 800c7ea:	07db      	lsls	r3, r3, #31
 800c7ec:	d4ae      	bmi.n	800c74c <_dtoa_r+0xac4>
 800c7ee:	463b      	mov	r3, r7
 800c7f0:	461f      	mov	r7, r3
 800c7f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7f6:	2a30      	cmp	r2, #48	; 0x30
 800c7f8:	d0fa      	beq.n	800c7f0 <_dtoa_r+0xb68>
 800c7fa:	e6f9      	b.n	800c5f0 <_dtoa_r+0x968>
 800c7fc:	9a03      	ldr	r2, [sp, #12]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d1a5      	bne.n	800c74e <_dtoa_r+0xac6>
 800c802:	2331      	movs	r3, #49	; 0x31
 800c804:	f10a 0a01 	add.w	sl, sl, #1
 800c808:	e779      	b.n	800c6fe <_dtoa_r+0xa76>
 800c80a:	4b14      	ldr	r3, [pc, #80]	; (800c85c <_dtoa_r+0xbd4>)
 800c80c:	f7ff baa8 	b.w	800bd60 <_dtoa_r+0xd8>
 800c810:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c812:	2b00      	cmp	r3, #0
 800c814:	f47f aa81 	bne.w	800bd1a <_dtoa_r+0x92>
 800c818:	4b11      	ldr	r3, [pc, #68]	; (800c860 <_dtoa_r+0xbd8>)
 800c81a:	f7ff baa1 	b.w	800bd60 <_dtoa_r+0xd8>
 800c81e:	f1b9 0f00 	cmp.w	r9, #0
 800c822:	dc03      	bgt.n	800c82c <_dtoa_r+0xba4>
 800c824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c826:	2b02      	cmp	r3, #2
 800c828:	f73f aecb 	bgt.w	800c5c2 <_dtoa_r+0x93a>
 800c82c:	9f03      	ldr	r7, [sp, #12]
 800c82e:	4621      	mov	r1, r4
 800c830:	4658      	mov	r0, fp
 800c832:	f7ff f99d 	bl	800bb70 <quorem>
 800c836:	9a03      	ldr	r2, [sp, #12]
 800c838:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c83c:	f807 3b01 	strb.w	r3, [r7], #1
 800c840:	1aba      	subs	r2, r7, r2
 800c842:	4591      	cmp	r9, r2
 800c844:	ddba      	ble.n	800c7bc <_dtoa_r+0xb34>
 800c846:	4659      	mov	r1, fp
 800c848:	2300      	movs	r3, #0
 800c84a:	220a      	movs	r2, #10
 800c84c:	4628      	mov	r0, r5
 800c84e:	f000 fce3 	bl	800d218 <__multadd>
 800c852:	4683      	mov	fp, r0
 800c854:	e7eb      	b.n	800c82e <_dtoa_r+0xba6>
 800c856:	bf00      	nop
 800c858:	0800ec21 	.word	0x0800ec21
 800c85c:	0800e994 	.word	0x0800e994
 800c860:	0800ebb9 	.word	0x0800ebb9

0800c864 <__sflush_r>:
 800c864:	898a      	ldrh	r2, [r1, #12]
 800c866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c868:	4605      	mov	r5, r0
 800c86a:	0710      	lsls	r0, r2, #28
 800c86c:	460c      	mov	r4, r1
 800c86e:	d457      	bmi.n	800c920 <__sflush_r+0xbc>
 800c870:	684b      	ldr	r3, [r1, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	dc04      	bgt.n	800c880 <__sflush_r+0x1c>
 800c876:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c878:	2b00      	cmp	r3, #0
 800c87a:	dc01      	bgt.n	800c880 <__sflush_r+0x1c>
 800c87c:	2000      	movs	r0, #0
 800c87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c880:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c882:	2e00      	cmp	r6, #0
 800c884:	d0fa      	beq.n	800c87c <__sflush_r+0x18>
 800c886:	2300      	movs	r3, #0
 800c888:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c88c:	682f      	ldr	r7, [r5, #0]
 800c88e:	602b      	str	r3, [r5, #0]
 800c890:	d032      	beq.n	800c8f8 <__sflush_r+0x94>
 800c892:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c894:	89a3      	ldrh	r3, [r4, #12]
 800c896:	075a      	lsls	r2, r3, #29
 800c898:	d505      	bpl.n	800c8a6 <__sflush_r+0x42>
 800c89a:	6863      	ldr	r3, [r4, #4]
 800c89c:	1ac0      	subs	r0, r0, r3
 800c89e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c8a0:	b10b      	cbz	r3, 800c8a6 <__sflush_r+0x42>
 800c8a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8a4:	1ac0      	subs	r0, r0, r3
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8ac:	4628      	mov	r0, r5
 800c8ae:	6a21      	ldr	r1, [r4, #32]
 800c8b0:	47b0      	blx	r6
 800c8b2:	1c43      	adds	r3, r0, #1
 800c8b4:	89a3      	ldrh	r3, [r4, #12]
 800c8b6:	d106      	bne.n	800c8c6 <__sflush_r+0x62>
 800c8b8:	6829      	ldr	r1, [r5, #0]
 800c8ba:	291d      	cmp	r1, #29
 800c8bc:	d82c      	bhi.n	800c918 <__sflush_r+0xb4>
 800c8be:	4a29      	ldr	r2, [pc, #164]	; (800c964 <__sflush_r+0x100>)
 800c8c0:	40ca      	lsrs	r2, r1
 800c8c2:	07d6      	lsls	r6, r2, #31
 800c8c4:	d528      	bpl.n	800c918 <__sflush_r+0xb4>
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	6062      	str	r2, [r4, #4]
 800c8ca:	6922      	ldr	r2, [r4, #16]
 800c8cc:	04d9      	lsls	r1, r3, #19
 800c8ce:	6022      	str	r2, [r4, #0]
 800c8d0:	d504      	bpl.n	800c8dc <__sflush_r+0x78>
 800c8d2:	1c42      	adds	r2, r0, #1
 800c8d4:	d101      	bne.n	800c8da <__sflush_r+0x76>
 800c8d6:	682b      	ldr	r3, [r5, #0]
 800c8d8:	b903      	cbnz	r3, 800c8dc <__sflush_r+0x78>
 800c8da:	6560      	str	r0, [r4, #84]	; 0x54
 800c8dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8de:	602f      	str	r7, [r5, #0]
 800c8e0:	2900      	cmp	r1, #0
 800c8e2:	d0cb      	beq.n	800c87c <__sflush_r+0x18>
 800c8e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8e8:	4299      	cmp	r1, r3
 800c8ea:	d002      	beq.n	800c8f2 <__sflush_r+0x8e>
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	f7fd faff 	bl	8009ef0 <_free_r>
 800c8f2:	2000      	movs	r0, #0
 800c8f4:	6360      	str	r0, [r4, #52]	; 0x34
 800c8f6:	e7c2      	b.n	800c87e <__sflush_r+0x1a>
 800c8f8:	6a21      	ldr	r1, [r4, #32]
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	4628      	mov	r0, r5
 800c8fe:	47b0      	blx	r6
 800c900:	1c41      	adds	r1, r0, #1
 800c902:	d1c7      	bne.n	800c894 <__sflush_r+0x30>
 800c904:	682b      	ldr	r3, [r5, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d0c4      	beq.n	800c894 <__sflush_r+0x30>
 800c90a:	2b1d      	cmp	r3, #29
 800c90c:	d001      	beq.n	800c912 <__sflush_r+0xae>
 800c90e:	2b16      	cmp	r3, #22
 800c910:	d101      	bne.n	800c916 <__sflush_r+0xb2>
 800c912:	602f      	str	r7, [r5, #0]
 800c914:	e7b2      	b.n	800c87c <__sflush_r+0x18>
 800c916:	89a3      	ldrh	r3, [r4, #12]
 800c918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c91c:	81a3      	strh	r3, [r4, #12]
 800c91e:	e7ae      	b.n	800c87e <__sflush_r+0x1a>
 800c920:	690f      	ldr	r7, [r1, #16]
 800c922:	2f00      	cmp	r7, #0
 800c924:	d0aa      	beq.n	800c87c <__sflush_r+0x18>
 800c926:	0793      	lsls	r3, r2, #30
 800c928:	bf18      	it	ne
 800c92a:	2300      	movne	r3, #0
 800c92c:	680e      	ldr	r6, [r1, #0]
 800c92e:	bf08      	it	eq
 800c930:	694b      	ldreq	r3, [r1, #20]
 800c932:	1bf6      	subs	r6, r6, r7
 800c934:	600f      	str	r7, [r1, #0]
 800c936:	608b      	str	r3, [r1, #8]
 800c938:	2e00      	cmp	r6, #0
 800c93a:	dd9f      	ble.n	800c87c <__sflush_r+0x18>
 800c93c:	4633      	mov	r3, r6
 800c93e:	463a      	mov	r2, r7
 800c940:	4628      	mov	r0, r5
 800c942:	6a21      	ldr	r1, [r4, #32]
 800c944:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c948:	47e0      	blx	ip
 800c94a:	2800      	cmp	r0, #0
 800c94c:	dc06      	bgt.n	800c95c <__sflush_r+0xf8>
 800c94e:	89a3      	ldrh	r3, [r4, #12]
 800c950:	f04f 30ff 	mov.w	r0, #4294967295
 800c954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c958:	81a3      	strh	r3, [r4, #12]
 800c95a:	e790      	b.n	800c87e <__sflush_r+0x1a>
 800c95c:	4407      	add	r7, r0
 800c95e:	1a36      	subs	r6, r6, r0
 800c960:	e7ea      	b.n	800c938 <__sflush_r+0xd4>
 800c962:	bf00      	nop
 800c964:	20400001 	.word	0x20400001

0800c968 <_fflush_r>:
 800c968:	b538      	push	{r3, r4, r5, lr}
 800c96a:	690b      	ldr	r3, [r1, #16]
 800c96c:	4605      	mov	r5, r0
 800c96e:	460c      	mov	r4, r1
 800c970:	b913      	cbnz	r3, 800c978 <_fflush_r+0x10>
 800c972:	2500      	movs	r5, #0
 800c974:	4628      	mov	r0, r5
 800c976:	bd38      	pop	{r3, r4, r5, pc}
 800c978:	b118      	cbz	r0, 800c982 <_fflush_r+0x1a>
 800c97a:	6983      	ldr	r3, [r0, #24]
 800c97c:	b90b      	cbnz	r3, 800c982 <_fflush_r+0x1a>
 800c97e:	f7fd f9cb 	bl	8009d18 <__sinit>
 800c982:	4b14      	ldr	r3, [pc, #80]	; (800c9d4 <_fflush_r+0x6c>)
 800c984:	429c      	cmp	r4, r3
 800c986:	d11b      	bne.n	800c9c0 <_fflush_r+0x58>
 800c988:	686c      	ldr	r4, [r5, #4]
 800c98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d0ef      	beq.n	800c972 <_fflush_r+0xa>
 800c992:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c994:	07d0      	lsls	r0, r2, #31
 800c996:	d404      	bmi.n	800c9a2 <_fflush_r+0x3a>
 800c998:	0599      	lsls	r1, r3, #22
 800c99a:	d402      	bmi.n	800c9a2 <_fflush_r+0x3a>
 800c99c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c99e:	f7fd fa7e 	bl	8009e9e <__retarget_lock_acquire_recursive>
 800c9a2:	4628      	mov	r0, r5
 800c9a4:	4621      	mov	r1, r4
 800c9a6:	f7ff ff5d 	bl	800c864 <__sflush_r>
 800c9aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9ac:	4605      	mov	r5, r0
 800c9ae:	07da      	lsls	r2, r3, #31
 800c9b0:	d4e0      	bmi.n	800c974 <_fflush_r+0xc>
 800c9b2:	89a3      	ldrh	r3, [r4, #12]
 800c9b4:	059b      	lsls	r3, r3, #22
 800c9b6:	d4dd      	bmi.n	800c974 <_fflush_r+0xc>
 800c9b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9ba:	f7fd fa71 	bl	8009ea0 <__retarget_lock_release_recursive>
 800c9be:	e7d9      	b.n	800c974 <_fflush_r+0xc>
 800c9c0:	4b05      	ldr	r3, [pc, #20]	; (800c9d8 <_fflush_r+0x70>)
 800c9c2:	429c      	cmp	r4, r3
 800c9c4:	d101      	bne.n	800c9ca <_fflush_r+0x62>
 800c9c6:	68ac      	ldr	r4, [r5, #8]
 800c9c8:	e7df      	b.n	800c98a <_fflush_r+0x22>
 800c9ca:	4b04      	ldr	r3, [pc, #16]	; (800c9dc <_fflush_r+0x74>)
 800c9cc:	429c      	cmp	r4, r3
 800c9ce:	bf08      	it	eq
 800c9d0:	68ec      	ldreq	r4, [r5, #12]
 800c9d2:	e7da      	b.n	800c98a <_fflush_r+0x22>
 800c9d4:	0800e940 	.word	0x0800e940
 800c9d8:	0800e960 	.word	0x0800e960
 800c9dc:	0800e920 	.word	0x0800e920

0800c9e0 <fiprintf>:
 800c9e0:	b40e      	push	{r1, r2, r3}
 800c9e2:	b503      	push	{r0, r1, lr}
 800c9e4:	4601      	mov	r1, r0
 800c9e6:	ab03      	add	r3, sp, #12
 800c9e8:	4805      	ldr	r0, [pc, #20]	; (800ca00 <fiprintf+0x20>)
 800c9ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9ee:	6800      	ldr	r0, [r0, #0]
 800c9f0:	9301      	str	r3, [sp, #4]
 800c9f2:	f001 f9ff 	bl	800ddf4 <_vfiprintf_r>
 800c9f6:	b002      	add	sp, #8
 800c9f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9fc:	b003      	add	sp, #12
 800c9fe:	4770      	bx	lr
 800ca00:	2000024c 	.word	0x2000024c

0800ca04 <rshift>:
 800ca04:	6903      	ldr	r3, [r0, #16]
 800ca06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca0a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ca0e:	f100 0414 	add.w	r4, r0, #20
 800ca12:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ca16:	dd46      	ble.n	800caa6 <rshift+0xa2>
 800ca18:	f011 011f 	ands.w	r1, r1, #31
 800ca1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ca20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ca24:	d10c      	bne.n	800ca40 <rshift+0x3c>
 800ca26:	4629      	mov	r1, r5
 800ca28:	f100 0710 	add.w	r7, r0, #16
 800ca2c:	42b1      	cmp	r1, r6
 800ca2e:	d335      	bcc.n	800ca9c <rshift+0x98>
 800ca30:	1a9b      	subs	r3, r3, r2
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	1eea      	subs	r2, r5, #3
 800ca36:	4296      	cmp	r6, r2
 800ca38:	bf38      	it	cc
 800ca3a:	2300      	movcc	r3, #0
 800ca3c:	4423      	add	r3, r4
 800ca3e:	e015      	b.n	800ca6c <rshift+0x68>
 800ca40:	46a1      	mov	r9, r4
 800ca42:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ca46:	f1c1 0820 	rsb	r8, r1, #32
 800ca4a:	40cf      	lsrs	r7, r1
 800ca4c:	f105 0e04 	add.w	lr, r5, #4
 800ca50:	4576      	cmp	r6, lr
 800ca52:	46f4      	mov	ip, lr
 800ca54:	d816      	bhi.n	800ca84 <rshift+0x80>
 800ca56:	1a9a      	subs	r2, r3, r2
 800ca58:	0092      	lsls	r2, r2, #2
 800ca5a:	3a04      	subs	r2, #4
 800ca5c:	3501      	adds	r5, #1
 800ca5e:	42ae      	cmp	r6, r5
 800ca60:	bf38      	it	cc
 800ca62:	2200      	movcc	r2, #0
 800ca64:	18a3      	adds	r3, r4, r2
 800ca66:	50a7      	str	r7, [r4, r2]
 800ca68:	b107      	cbz	r7, 800ca6c <rshift+0x68>
 800ca6a:	3304      	adds	r3, #4
 800ca6c:	42a3      	cmp	r3, r4
 800ca6e:	eba3 0204 	sub.w	r2, r3, r4
 800ca72:	bf08      	it	eq
 800ca74:	2300      	moveq	r3, #0
 800ca76:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ca7a:	6102      	str	r2, [r0, #16]
 800ca7c:	bf08      	it	eq
 800ca7e:	6143      	streq	r3, [r0, #20]
 800ca80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca84:	f8dc c000 	ldr.w	ip, [ip]
 800ca88:	fa0c fc08 	lsl.w	ip, ip, r8
 800ca8c:	ea4c 0707 	orr.w	r7, ip, r7
 800ca90:	f849 7b04 	str.w	r7, [r9], #4
 800ca94:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ca98:	40cf      	lsrs	r7, r1
 800ca9a:	e7d9      	b.n	800ca50 <rshift+0x4c>
 800ca9c:	f851 cb04 	ldr.w	ip, [r1], #4
 800caa0:	f847 cf04 	str.w	ip, [r7, #4]!
 800caa4:	e7c2      	b.n	800ca2c <rshift+0x28>
 800caa6:	4623      	mov	r3, r4
 800caa8:	e7e0      	b.n	800ca6c <rshift+0x68>

0800caaa <__hexdig_fun>:
 800caaa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800caae:	2b09      	cmp	r3, #9
 800cab0:	d802      	bhi.n	800cab8 <__hexdig_fun+0xe>
 800cab2:	3820      	subs	r0, #32
 800cab4:	b2c0      	uxtb	r0, r0
 800cab6:	4770      	bx	lr
 800cab8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cabc:	2b05      	cmp	r3, #5
 800cabe:	d801      	bhi.n	800cac4 <__hexdig_fun+0x1a>
 800cac0:	3847      	subs	r0, #71	; 0x47
 800cac2:	e7f7      	b.n	800cab4 <__hexdig_fun+0xa>
 800cac4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cac8:	2b05      	cmp	r3, #5
 800caca:	d801      	bhi.n	800cad0 <__hexdig_fun+0x26>
 800cacc:	3827      	subs	r0, #39	; 0x27
 800cace:	e7f1      	b.n	800cab4 <__hexdig_fun+0xa>
 800cad0:	2000      	movs	r0, #0
 800cad2:	4770      	bx	lr

0800cad4 <__gethex>:
 800cad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad8:	b08b      	sub	sp, #44	; 0x2c
 800cada:	9305      	str	r3, [sp, #20]
 800cadc:	4bb2      	ldr	r3, [pc, #712]	; (800cda8 <__gethex+0x2d4>)
 800cade:	9002      	str	r0, [sp, #8]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	468b      	mov	fp, r1
 800cae4:	4618      	mov	r0, r3
 800cae6:	4690      	mov	r8, r2
 800cae8:	9303      	str	r3, [sp, #12]
 800caea:	f7f3 fbab 	bl	8000244 <strlen>
 800caee:	4682      	mov	sl, r0
 800caf0:	9b03      	ldr	r3, [sp, #12]
 800caf2:	f8db 2000 	ldr.w	r2, [fp]
 800caf6:	4403      	add	r3, r0
 800caf8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cafc:	9306      	str	r3, [sp, #24]
 800cafe:	1c93      	adds	r3, r2, #2
 800cb00:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cb04:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cb08:	32fe      	adds	r2, #254	; 0xfe
 800cb0a:	18d1      	adds	r1, r2, r3
 800cb0c:	461f      	mov	r7, r3
 800cb0e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cb12:	9101      	str	r1, [sp, #4]
 800cb14:	2830      	cmp	r0, #48	; 0x30
 800cb16:	d0f8      	beq.n	800cb0a <__gethex+0x36>
 800cb18:	f7ff ffc7 	bl	800caaa <__hexdig_fun>
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d13a      	bne.n	800cb98 <__gethex+0xc4>
 800cb22:	4652      	mov	r2, sl
 800cb24:	4638      	mov	r0, r7
 800cb26:	9903      	ldr	r1, [sp, #12]
 800cb28:	f001 fab0 	bl	800e08c <strncmp>
 800cb2c:	4605      	mov	r5, r0
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	d166      	bne.n	800cc00 <__gethex+0x12c>
 800cb32:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cb36:	eb07 060a 	add.w	r6, r7, sl
 800cb3a:	f7ff ffb6 	bl	800caaa <__hexdig_fun>
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	d060      	beq.n	800cc04 <__gethex+0x130>
 800cb42:	4633      	mov	r3, r6
 800cb44:	7818      	ldrb	r0, [r3, #0]
 800cb46:	461f      	mov	r7, r3
 800cb48:	2830      	cmp	r0, #48	; 0x30
 800cb4a:	f103 0301 	add.w	r3, r3, #1
 800cb4e:	d0f9      	beq.n	800cb44 <__gethex+0x70>
 800cb50:	f7ff ffab 	bl	800caaa <__hexdig_fun>
 800cb54:	2301      	movs	r3, #1
 800cb56:	fab0 f480 	clz	r4, r0
 800cb5a:	4635      	mov	r5, r6
 800cb5c:	0964      	lsrs	r4, r4, #5
 800cb5e:	9301      	str	r3, [sp, #4]
 800cb60:	463a      	mov	r2, r7
 800cb62:	4616      	mov	r6, r2
 800cb64:	7830      	ldrb	r0, [r6, #0]
 800cb66:	3201      	adds	r2, #1
 800cb68:	f7ff ff9f 	bl	800caaa <__hexdig_fun>
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	d1f8      	bne.n	800cb62 <__gethex+0x8e>
 800cb70:	4652      	mov	r2, sl
 800cb72:	4630      	mov	r0, r6
 800cb74:	9903      	ldr	r1, [sp, #12]
 800cb76:	f001 fa89 	bl	800e08c <strncmp>
 800cb7a:	b980      	cbnz	r0, 800cb9e <__gethex+0xca>
 800cb7c:	b94d      	cbnz	r5, 800cb92 <__gethex+0xbe>
 800cb7e:	eb06 050a 	add.w	r5, r6, sl
 800cb82:	462a      	mov	r2, r5
 800cb84:	4616      	mov	r6, r2
 800cb86:	7830      	ldrb	r0, [r6, #0]
 800cb88:	3201      	adds	r2, #1
 800cb8a:	f7ff ff8e 	bl	800caaa <__hexdig_fun>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d1f8      	bne.n	800cb84 <__gethex+0xb0>
 800cb92:	1bad      	subs	r5, r5, r6
 800cb94:	00ad      	lsls	r5, r5, #2
 800cb96:	e004      	b.n	800cba2 <__gethex+0xce>
 800cb98:	2400      	movs	r4, #0
 800cb9a:	4625      	mov	r5, r4
 800cb9c:	e7e0      	b.n	800cb60 <__gethex+0x8c>
 800cb9e:	2d00      	cmp	r5, #0
 800cba0:	d1f7      	bne.n	800cb92 <__gethex+0xbe>
 800cba2:	7833      	ldrb	r3, [r6, #0]
 800cba4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cba8:	2b50      	cmp	r3, #80	; 0x50
 800cbaa:	d139      	bne.n	800cc20 <__gethex+0x14c>
 800cbac:	7873      	ldrb	r3, [r6, #1]
 800cbae:	2b2b      	cmp	r3, #43	; 0x2b
 800cbb0:	d02a      	beq.n	800cc08 <__gethex+0x134>
 800cbb2:	2b2d      	cmp	r3, #45	; 0x2d
 800cbb4:	d02c      	beq.n	800cc10 <__gethex+0x13c>
 800cbb6:	f04f 0900 	mov.w	r9, #0
 800cbba:	1c71      	adds	r1, r6, #1
 800cbbc:	7808      	ldrb	r0, [r1, #0]
 800cbbe:	f7ff ff74 	bl	800caaa <__hexdig_fun>
 800cbc2:	1e43      	subs	r3, r0, #1
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	2b18      	cmp	r3, #24
 800cbc8:	d82a      	bhi.n	800cc20 <__gethex+0x14c>
 800cbca:	f1a0 0210 	sub.w	r2, r0, #16
 800cbce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cbd2:	f7ff ff6a 	bl	800caaa <__hexdig_fun>
 800cbd6:	1e43      	subs	r3, r0, #1
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	2b18      	cmp	r3, #24
 800cbdc:	d91b      	bls.n	800cc16 <__gethex+0x142>
 800cbde:	f1b9 0f00 	cmp.w	r9, #0
 800cbe2:	d000      	beq.n	800cbe6 <__gethex+0x112>
 800cbe4:	4252      	negs	r2, r2
 800cbe6:	4415      	add	r5, r2
 800cbe8:	f8cb 1000 	str.w	r1, [fp]
 800cbec:	b1d4      	cbz	r4, 800cc24 <__gethex+0x150>
 800cbee:	9b01      	ldr	r3, [sp, #4]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	bf14      	ite	ne
 800cbf4:	2700      	movne	r7, #0
 800cbf6:	2706      	moveq	r7, #6
 800cbf8:	4638      	mov	r0, r7
 800cbfa:	b00b      	add	sp, #44	; 0x2c
 800cbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc00:	463e      	mov	r6, r7
 800cc02:	4625      	mov	r5, r4
 800cc04:	2401      	movs	r4, #1
 800cc06:	e7cc      	b.n	800cba2 <__gethex+0xce>
 800cc08:	f04f 0900 	mov.w	r9, #0
 800cc0c:	1cb1      	adds	r1, r6, #2
 800cc0e:	e7d5      	b.n	800cbbc <__gethex+0xe8>
 800cc10:	f04f 0901 	mov.w	r9, #1
 800cc14:	e7fa      	b.n	800cc0c <__gethex+0x138>
 800cc16:	230a      	movs	r3, #10
 800cc18:	fb03 0202 	mla	r2, r3, r2, r0
 800cc1c:	3a10      	subs	r2, #16
 800cc1e:	e7d6      	b.n	800cbce <__gethex+0xfa>
 800cc20:	4631      	mov	r1, r6
 800cc22:	e7e1      	b.n	800cbe8 <__gethex+0x114>
 800cc24:	4621      	mov	r1, r4
 800cc26:	1bf3      	subs	r3, r6, r7
 800cc28:	3b01      	subs	r3, #1
 800cc2a:	2b07      	cmp	r3, #7
 800cc2c:	dc0a      	bgt.n	800cc44 <__gethex+0x170>
 800cc2e:	9802      	ldr	r0, [sp, #8]
 800cc30:	f000 fa90 	bl	800d154 <_Balloc>
 800cc34:	4604      	mov	r4, r0
 800cc36:	b940      	cbnz	r0, 800cc4a <__gethex+0x176>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	21de      	movs	r1, #222	; 0xde
 800cc3c:	4b5b      	ldr	r3, [pc, #364]	; (800cdac <__gethex+0x2d8>)
 800cc3e:	485c      	ldr	r0, [pc, #368]	; (800cdb0 <__gethex+0x2dc>)
 800cc40:	f7fe ff68 	bl	800bb14 <__assert_func>
 800cc44:	3101      	adds	r1, #1
 800cc46:	105b      	asrs	r3, r3, #1
 800cc48:	e7ef      	b.n	800cc2a <__gethex+0x156>
 800cc4a:	f04f 0b00 	mov.w	fp, #0
 800cc4e:	f100 0914 	add.w	r9, r0, #20
 800cc52:	f1ca 0301 	rsb	r3, sl, #1
 800cc56:	f8cd 9010 	str.w	r9, [sp, #16]
 800cc5a:	f8cd b004 	str.w	fp, [sp, #4]
 800cc5e:	9308      	str	r3, [sp, #32]
 800cc60:	42b7      	cmp	r7, r6
 800cc62:	d33f      	bcc.n	800cce4 <__gethex+0x210>
 800cc64:	9f04      	ldr	r7, [sp, #16]
 800cc66:	9b01      	ldr	r3, [sp, #4]
 800cc68:	f847 3b04 	str.w	r3, [r7], #4
 800cc6c:	eba7 0709 	sub.w	r7, r7, r9
 800cc70:	10bf      	asrs	r7, r7, #2
 800cc72:	6127      	str	r7, [r4, #16]
 800cc74:	4618      	mov	r0, r3
 800cc76:	f000 fb5f 	bl	800d338 <__hi0bits>
 800cc7a:	017f      	lsls	r7, r7, #5
 800cc7c:	f8d8 6000 	ldr.w	r6, [r8]
 800cc80:	1a3f      	subs	r7, r7, r0
 800cc82:	42b7      	cmp	r7, r6
 800cc84:	dd62      	ble.n	800cd4c <__gethex+0x278>
 800cc86:	1bbf      	subs	r7, r7, r6
 800cc88:	4639      	mov	r1, r7
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	f000 fef9 	bl	800da82 <__any_on>
 800cc90:	4682      	mov	sl, r0
 800cc92:	b1a8      	cbz	r0, 800ccc0 <__gethex+0x1ec>
 800cc94:	f04f 0a01 	mov.w	sl, #1
 800cc98:	1e7b      	subs	r3, r7, #1
 800cc9a:	1159      	asrs	r1, r3, #5
 800cc9c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cca0:	f003 021f 	and.w	r2, r3, #31
 800cca4:	fa0a f202 	lsl.w	r2, sl, r2
 800cca8:	420a      	tst	r2, r1
 800ccaa:	d009      	beq.n	800ccc0 <__gethex+0x1ec>
 800ccac:	4553      	cmp	r3, sl
 800ccae:	dd05      	ble.n	800ccbc <__gethex+0x1e8>
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	1eb9      	subs	r1, r7, #2
 800ccb4:	f000 fee5 	bl	800da82 <__any_on>
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	d144      	bne.n	800cd46 <__gethex+0x272>
 800ccbc:	f04f 0a02 	mov.w	sl, #2
 800ccc0:	4639      	mov	r1, r7
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	f7ff fe9e 	bl	800ca04 <rshift>
 800ccc8:	443d      	add	r5, r7
 800ccca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ccce:	42ab      	cmp	r3, r5
 800ccd0:	da4a      	bge.n	800cd68 <__gethex+0x294>
 800ccd2:	4621      	mov	r1, r4
 800ccd4:	9802      	ldr	r0, [sp, #8]
 800ccd6:	f000 fa7d 	bl	800d1d4 <_Bfree>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ccde:	27a3      	movs	r7, #163	; 0xa3
 800cce0:	6013      	str	r3, [r2, #0]
 800cce2:	e789      	b.n	800cbf8 <__gethex+0x124>
 800cce4:	1e73      	subs	r3, r6, #1
 800cce6:	9a06      	ldr	r2, [sp, #24]
 800cce8:	9307      	str	r3, [sp, #28]
 800ccea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d019      	beq.n	800cd26 <__gethex+0x252>
 800ccf2:	f1bb 0f20 	cmp.w	fp, #32
 800ccf6:	d107      	bne.n	800cd08 <__gethex+0x234>
 800ccf8:	9b04      	ldr	r3, [sp, #16]
 800ccfa:	9a01      	ldr	r2, [sp, #4]
 800ccfc:	f843 2b04 	str.w	r2, [r3], #4
 800cd00:	9304      	str	r3, [sp, #16]
 800cd02:	2300      	movs	r3, #0
 800cd04:	469b      	mov	fp, r3
 800cd06:	9301      	str	r3, [sp, #4]
 800cd08:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cd0c:	f7ff fecd 	bl	800caaa <__hexdig_fun>
 800cd10:	9b01      	ldr	r3, [sp, #4]
 800cd12:	f000 000f 	and.w	r0, r0, #15
 800cd16:	fa00 f00b 	lsl.w	r0, r0, fp
 800cd1a:	4303      	orrs	r3, r0
 800cd1c:	9301      	str	r3, [sp, #4]
 800cd1e:	f10b 0b04 	add.w	fp, fp, #4
 800cd22:	9b07      	ldr	r3, [sp, #28]
 800cd24:	e00d      	b.n	800cd42 <__gethex+0x26e>
 800cd26:	9a08      	ldr	r2, [sp, #32]
 800cd28:	1e73      	subs	r3, r6, #1
 800cd2a:	4413      	add	r3, r2
 800cd2c:	42bb      	cmp	r3, r7
 800cd2e:	d3e0      	bcc.n	800ccf2 <__gethex+0x21e>
 800cd30:	4618      	mov	r0, r3
 800cd32:	4652      	mov	r2, sl
 800cd34:	9903      	ldr	r1, [sp, #12]
 800cd36:	9309      	str	r3, [sp, #36]	; 0x24
 800cd38:	f001 f9a8 	bl	800e08c <strncmp>
 800cd3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	d1d7      	bne.n	800ccf2 <__gethex+0x21e>
 800cd42:	461e      	mov	r6, r3
 800cd44:	e78c      	b.n	800cc60 <__gethex+0x18c>
 800cd46:	f04f 0a03 	mov.w	sl, #3
 800cd4a:	e7b9      	b.n	800ccc0 <__gethex+0x1ec>
 800cd4c:	da09      	bge.n	800cd62 <__gethex+0x28e>
 800cd4e:	1bf7      	subs	r7, r6, r7
 800cd50:	4621      	mov	r1, r4
 800cd52:	463a      	mov	r2, r7
 800cd54:	9802      	ldr	r0, [sp, #8]
 800cd56:	f000 fc55 	bl	800d604 <__lshift>
 800cd5a:	4604      	mov	r4, r0
 800cd5c:	1bed      	subs	r5, r5, r7
 800cd5e:	f100 0914 	add.w	r9, r0, #20
 800cd62:	f04f 0a00 	mov.w	sl, #0
 800cd66:	e7b0      	b.n	800ccca <__gethex+0x1f6>
 800cd68:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cd6c:	42a8      	cmp	r0, r5
 800cd6e:	dd72      	ble.n	800ce56 <__gethex+0x382>
 800cd70:	1b45      	subs	r5, r0, r5
 800cd72:	42ae      	cmp	r6, r5
 800cd74:	dc35      	bgt.n	800cde2 <__gethex+0x30e>
 800cd76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd7a:	2b02      	cmp	r3, #2
 800cd7c:	d029      	beq.n	800cdd2 <__gethex+0x2fe>
 800cd7e:	2b03      	cmp	r3, #3
 800cd80:	d02b      	beq.n	800cdda <__gethex+0x306>
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d11c      	bne.n	800cdc0 <__gethex+0x2ec>
 800cd86:	42ae      	cmp	r6, r5
 800cd88:	d11a      	bne.n	800cdc0 <__gethex+0x2ec>
 800cd8a:	2e01      	cmp	r6, #1
 800cd8c:	d112      	bne.n	800cdb4 <__gethex+0x2e0>
 800cd8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cd92:	9a05      	ldr	r2, [sp, #20]
 800cd94:	2762      	movs	r7, #98	; 0x62
 800cd96:	6013      	str	r3, [r2, #0]
 800cd98:	2301      	movs	r3, #1
 800cd9a:	6123      	str	r3, [r4, #16]
 800cd9c:	f8c9 3000 	str.w	r3, [r9]
 800cda0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cda2:	601c      	str	r4, [r3, #0]
 800cda4:	e728      	b.n	800cbf8 <__gethex+0x124>
 800cda6:	bf00      	nop
 800cda8:	0800ec98 	.word	0x0800ec98
 800cdac:	0800ec21 	.word	0x0800ec21
 800cdb0:	0800ec32 	.word	0x0800ec32
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	1e71      	subs	r1, r6, #1
 800cdb8:	f000 fe63 	bl	800da82 <__any_on>
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	d1e6      	bne.n	800cd8e <__gethex+0x2ba>
 800cdc0:	4621      	mov	r1, r4
 800cdc2:	9802      	ldr	r0, [sp, #8]
 800cdc4:	f000 fa06 	bl	800d1d4 <_Bfree>
 800cdc8:	2300      	movs	r3, #0
 800cdca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cdcc:	2750      	movs	r7, #80	; 0x50
 800cdce:	6013      	str	r3, [r2, #0]
 800cdd0:	e712      	b.n	800cbf8 <__gethex+0x124>
 800cdd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d1f3      	bne.n	800cdc0 <__gethex+0x2ec>
 800cdd8:	e7d9      	b.n	800cd8e <__gethex+0x2ba>
 800cdda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d1d6      	bne.n	800cd8e <__gethex+0x2ba>
 800cde0:	e7ee      	b.n	800cdc0 <__gethex+0x2ec>
 800cde2:	1e6f      	subs	r7, r5, #1
 800cde4:	f1ba 0f00 	cmp.w	sl, #0
 800cde8:	d132      	bne.n	800ce50 <__gethex+0x37c>
 800cdea:	b127      	cbz	r7, 800cdf6 <__gethex+0x322>
 800cdec:	4639      	mov	r1, r7
 800cdee:	4620      	mov	r0, r4
 800cdf0:	f000 fe47 	bl	800da82 <__any_on>
 800cdf4:	4682      	mov	sl, r0
 800cdf6:	2101      	movs	r1, #1
 800cdf8:	117b      	asrs	r3, r7, #5
 800cdfa:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cdfe:	f007 071f 	and.w	r7, r7, #31
 800ce02:	fa01 f707 	lsl.w	r7, r1, r7
 800ce06:	421f      	tst	r7, r3
 800ce08:	f04f 0702 	mov.w	r7, #2
 800ce0c:	4629      	mov	r1, r5
 800ce0e:	4620      	mov	r0, r4
 800ce10:	bf18      	it	ne
 800ce12:	f04a 0a02 	orrne.w	sl, sl, #2
 800ce16:	1b76      	subs	r6, r6, r5
 800ce18:	f7ff fdf4 	bl	800ca04 <rshift>
 800ce1c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ce20:	f1ba 0f00 	cmp.w	sl, #0
 800ce24:	d048      	beq.n	800ceb8 <__gethex+0x3e4>
 800ce26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce2a:	2b02      	cmp	r3, #2
 800ce2c:	d015      	beq.n	800ce5a <__gethex+0x386>
 800ce2e:	2b03      	cmp	r3, #3
 800ce30:	d017      	beq.n	800ce62 <__gethex+0x38e>
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d109      	bne.n	800ce4a <__gethex+0x376>
 800ce36:	f01a 0f02 	tst.w	sl, #2
 800ce3a:	d006      	beq.n	800ce4a <__gethex+0x376>
 800ce3c:	f8d9 0000 	ldr.w	r0, [r9]
 800ce40:	ea4a 0a00 	orr.w	sl, sl, r0
 800ce44:	f01a 0f01 	tst.w	sl, #1
 800ce48:	d10e      	bne.n	800ce68 <__gethex+0x394>
 800ce4a:	f047 0710 	orr.w	r7, r7, #16
 800ce4e:	e033      	b.n	800ceb8 <__gethex+0x3e4>
 800ce50:	f04f 0a01 	mov.w	sl, #1
 800ce54:	e7cf      	b.n	800cdf6 <__gethex+0x322>
 800ce56:	2701      	movs	r7, #1
 800ce58:	e7e2      	b.n	800ce20 <__gethex+0x34c>
 800ce5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce5c:	f1c3 0301 	rsb	r3, r3, #1
 800ce60:	9315      	str	r3, [sp, #84]	; 0x54
 800ce62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d0f0      	beq.n	800ce4a <__gethex+0x376>
 800ce68:	f04f 0c00 	mov.w	ip, #0
 800ce6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ce70:	f104 0314 	add.w	r3, r4, #20
 800ce74:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ce78:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce82:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ce86:	d01c      	beq.n	800cec2 <__gethex+0x3ee>
 800ce88:	3201      	adds	r2, #1
 800ce8a:	6002      	str	r2, [r0, #0]
 800ce8c:	2f02      	cmp	r7, #2
 800ce8e:	f104 0314 	add.w	r3, r4, #20
 800ce92:	d13d      	bne.n	800cf10 <__gethex+0x43c>
 800ce94:	f8d8 2000 	ldr.w	r2, [r8]
 800ce98:	3a01      	subs	r2, #1
 800ce9a:	42b2      	cmp	r2, r6
 800ce9c:	d10a      	bne.n	800ceb4 <__gethex+0x3e0>
 800ce9e:	2201      	movs	r2, #1
 800cea0:	1171      	asrs	r1, r6, #5
 800cea2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cea6:	f006 061f 	and.w	r6, r6, #31
 800ceaa:	fa02 f606 	lsl.w	r6, r2, r6
 800ceae:	421e      	tst	r6, r3
 800ceb0:	bf18      	it	ne
 800ceb2:	4617      	movne	r7, r2
 800ceb4:	f047 0720 	orr.w	r7, r7, #32
 800ceb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ceba:	601c      	str	r4, [r3, #0]
 800cebc:	9b05      	ldr	r3, [sp, #20]
 800cebe:	601d      	str	r5, [r3, #0]
 800cec0:	e69a      	b.n	800cbf8 <__gethex+0x124>
 800cec2:	4299      	cmp	r1, r3
 800cec4:	f843 cc04 	str.w	ip, [r3, #-4]
 800cec8:	d8d8      	bhi.n	800ce7c <__gethex+0x3a8>
 800ceca:	68a3      	ldr	r3, [r4, #8]
 800cecc:	459b      	cmp	fp, r3
 800cece:	db17      	blt.n	800cf00 <__gethex+0x42c>
 800ced0:	6861      	ldr	r1, [r4, #4]
 800ced2:	9802      	ldr	r0, [sp, #8]
 800ced4:	3101      	adds	r1, #1
 800ced6:	f000 f93d 	bl	800d154 <_Balloc>
 800ceda:	4681      	mov	r9, r0
 800cedc:	b918      	cbnz	r0, 800cee6 <__gethex+0x412>
 800cede:	4602      	mov	r2, r0
 800cee0:	2184      	movs	r1, #132	; 0x84
 800cee2:	4b19      	ldr	r3, [pc, #100]	; (800cf48 <__gethex+0x474>)
 800cee4:	e6ab      	b.n	800cc3e <__gethex+0x16a>
 800cee6:	6922      	ldr	r2, [r4, #16]
 800cee8:	f104 010c 	add.w	r1, r4, #12
 800ceec:	3202      	adds	r2, #2
 800ceee:	0092      	lsls	r2, r2, #2
 800cef0:	300c      	adds	r0, #12
 800cef2:	f7fc ffe7 	bl	8009ec4 <memcpy>
 800cef6:	4621      	mov	r1, r4
 800cef8:	9802      	ldr	r0, [sp, #8]
 800cefa:	f000 f96b 	bl	800d1d4 <_Bfree>
 800cefe:	464c      	mov	r4, r9
 800cf00:	6923      	ldr	r3, [r4, #16]
 800cf02:	1c5a      	adds	r2, r3, #1
 800cf04:	6122      	str	r2, [r4, #16]
 800cf06:	2201      	movs	r2, #1
 800cf08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cf0c:	615a      	str	r2, [r3, #20]
 800cf0e:	e7bd      	b.n	800ce8c <__gethex+0x3b8>
 800cf10:	6922      	ldr	r2, [r4, #16]
 800cf12:	455a      	cmp	r2, fp
 800cf14:	dd0b      	ble.n	800cf2e <__gethex+0x45a>
 800cf16:	2101      	movs	r1, #1
 800cf18:	4620      	mov	r0, r4
 800cf1a:	f7ff fd73 	bl	800ca04 <rshift>
 800cf1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf22:	3501      	adds	r5, #1
 800cf24:	42ab      	cmp	r3, r5
 800cf26:	f6ff aed4 	blt.w	800ccd2 <__gethex+0x1fe>
 800cf2a:	2701      	movs	r7, #1
 800cf2c:	e7c2      	b.n	800ceb4 <__gethex+0x3e0>
 800cf2e:	f016 061f 	ands.w	r6, r6, #31
 800cf32:	d0fa      	beq.n	800cf2a <__gethex+0x456>
 800cf34:	4453      	add	r3, sl
 800cf36:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cf3a:	f000 f9fd 	bl	800d338 <__hi0bits>
 800cf3e:	f1c6 0620 	rsb	r6, r6, #32
 800cf42:	42b0      	cmp	r0, r6
 800cf44:	dbe7      	blt.n	800cf16 <__gethex+0x442>
 800cf46:	e7f0      	b.n	800cf2a <__gethex+0x456>
 800cf48:	0800ec21 	.word	0x0800ec21

0800cf4c <L_shift>:
 800cf4c:	f1c2 0208 	rsb	r2, r2, #8
 800cf50:	0092      	lsls	r2, r2, #2
 800cf52:	b570      	push	{r4, r5, r6, lr}
 800cf54:	f1c2 0620 	rsb	r6, r2, #32
 800cf58:	6843      	ldr	r3, [r0, #4]
 800cf5a:	6804      	ldr	r4, [r0, #0]
 800cf5c:	fa03 f506 	lsl.w	r5, r3, r6
 800cf60:	432c      	orrs	r4, r5
 800cf62:	40d3      	lsrs	r3, r2
 800cf64:	6004      	str	r4, [r0, #0]
 800cf66:	f840 3f04 	str.w	r3, [r0, #4]!
 800cf6a:	4288      	cmp	r0, r1
 800cf6c:	d3f4      	bcc.n	800cf58 <L_shift+0xc>
 800cf6e:	bd70      	pop	{r4, r5, r6, pc}

0800cf70 <__match>:
 800cf70:	b530      	push	{r4, r5, lr}
 800cf72:	6803      	ldr	r3, [r0, #0]
 800cf74:	3301      	adds	r3, #1
 800cf76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf7a:	b914      	cbnz	r4, 800cf82 <__match+0x12>
 800cf7c:	6003      	str	r3, [r0, #0]
 800cf7e:	2001      	movs	r0, #1
 800cf80:	bd30      	pop	{r4, r5, pc}
 800cf82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cf8a:	2d19      	cmp	r5, #25
 800cf8c:	bf98      	it	ls
 800cf8e:	3220      	addls	r2, #32
 800cf90:	42a2      	cmp	r2, r4
 800cf92:	d0f0      	beq.n	800cf76 <__match+0x6>
 800cf94:	2000      	movs	r0, #0
 800cf96:	e7f3      	b.n	800cf80 <__match+0x10>

0800cf98 <__hexnan>:
 800cf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf9c:	2500      	movs	r5, #0
 800cf9e:	680b      	ldr	r3, [r1, #0]
 800cfa0:	4682      	mov	sl, r0
 800cfa2:	115e      	asrs	r6, r3, #5
 800cfa4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cfa8:	f013 031f 	ands.w	r3, r3, #31
 800cfac:	bf18      	it	ne
 800cfae:	3604      	addne	r6, #4
 800cfb0:	1f37      	subs	r7, r6, #4
 800cfb2:	46b9      	mov	r9, r7
 800cfb4:	463c      	mov	r4, r7
 800cfb6:	46ab      	mov	fp, r5
 800cfb8:	b087      	sub	sp, #28
 800cfba:	4690      	mov	r8, r2
 800cfbc:	6802      	ldr	r2, [r0, #0]
 800cfbe:	9301      	str	r3, [sp, #4]
 800cfc0:	f846 5c04 	str.w	r5, [r6, #-4]
 800cfc4:	9502      	str	r5, [sp, #8]
 800cfc6:	7851      	ldrb	r1, [r2, #1]
 800cfc8:	1c53      	adds	r3, r2, #1
 800cfca:	9303      	str	r3, [sp, #12]
 800cfcc:	b341      	cbz	r1, 800d020 <__hexnan+0x88>
 800cfce:	4608      	mov	r0, r1
 800cfd0:	9205      	str	r2, [sp, #20]
 800cfd2:	9104      	str	r1, [sp, #16]
 800cfd4:	f7ff fd69 	bl	800caaa <__hexdig_fun>
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	d14f      	bne.n	800d07c <__hexnan+0xe4>
 800cfdc:	9904      	ldr	r1, [sp, #16]
 800cfde:	9a05      	ldr	r2, [sp, #20]
 800cfe0:	2920      	cmp	r1, #32
 800cfe2:	d818      	bhi.n	800d016 <__hexnan+0x7e>
 800cfe4:	9b02      	ldr	r3, [sp, #8]
 800cfe6:	459b      	cmp	fp, r3
 800cfe8:	dd13      	ble.n	800d012 <__hexnan+0x7a>
 800cfea:	454c      	cmp	r4, r9
 800cfec:	d206      	bcs.n	800cffc <__hexnan+0x64>
 800cfee:	2d07      	cmp	r5, #7
 800cff0:	dc04      	bgt.n	800cffc <__hexnan+0x64>
 800cff2:	462a      	mov	r2, r5
 800cff4:	4649      	mov	r1, r9
 800cff6:	4620      	mov	r0, r4
 800cff8:	f7ff ffa8 	bl	800cf4c <L_shift>
 800cffc:	4544      	cmp	r4, r8
 800cffe:	d950      	bls.n	800d0a2 <__hexnan+0x10a>
 800d000:	2300      	movs	r3, #0
 800d002:	f1a4 0904 	sub.w	r9, r4, #4
 800d006:	f844 3c04 	str.w	r3, [r4, #-4]
 800d00a:	461d      	mov	r5, r3
 800d00c:	464c      	mov	r4, r9
 800d00e:	f8cd b008 	str.w	fp, [sp, #8]
 800d012:	9a03      	ldr	r2, [sp, #12]
 800d014:	e7d7      	b.n	800cfc6 <__hexnan+0x2e>
 800d016:	2929      	cmp	r1, #41	; 0x29
 800d018:	d156      	bne.n	800d0c8 <__hexnan+0x130>
 800d01a:	3202      	adds	r2, #2
 800d01c:	f8ca 2000 	str.w	r2, [sl]
 800d020:	f1bb 0f00 	cmp.w	fp, #0
 800d024:	d050      	beq.n	800d0c8 <__hexnan+0x130>
 800d026:	454c      	cmp	r4, r9
 800d028:	d206      	bcs.n	800d038 <__hexnan+0xa0>
 800d02a:	2d07      	cmp	r5, #7
 800d02c:	dc04      	bgt.n	800d038 <__hexnan+0xa0>
 800d02e:	462a      	mov	r2, r5
 800d030:	4649      	mov	r1, r9
 800d032:	4620      	mov	r0, r4
 800d034:	f7ff ff8a 	bl	800cf4c <L_shift>
 800d038:	4544      	cmp	r4, r8
 800d03a:	d934      	bls.n	800d0a6 <__hexnan+0x10e>
 800d03c:	4623      	mov	r3, r4
 800d03e:	f1a8 0204 	sub.w	r2, r8, #4
 800d042:	f853 1b04 	ldr.w	r1, [r3], #4
 800d046:	429f      	cmp	r7, r3
 800d048:	f842 1f04 	str.w	r1, [r2, #4]!
 800d04c:	d2f9      	bcs.n	800d042 <__hexnan+0xaa>
 800d04e:	1b3b      	subs	r3, r7, r4
 800d050:	f023 0303 	bic.w	r3, r3, #3
 800d054:	3304      	adds	r3, #4
 800d056:	3401      	adds	r4, #1
 800d058:	3e03      	subs	r6, #3
 800d05a:	42b4      	cmp	r4, r6
 800d05c:	bf88      	it	hi
 800d05e:	2304      	movhi	r3, #4
 800d060:	2200      	movs	r2, #0
 800d062:	4443      	add	r3, r8
 800d064:	f843 2b04 	str.w	r2, [r3], #4
 800d068:	429f      	cmp	r7, r3
 800d06a:	d2fb      	bcs.n	800d064 <__hexnan+0xcc>
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	b91b      	cbnz	r3, 800d078 <__hexnan+0xe0>
 800d070:	4547      	cmp	r7, r8
 800d072:	d127      	bne.n	800d0c4 <__hexnan+0x12c>
 800d074:	2301      	movs	r3, #1
 800d076:	603b      	str	r3, [r7, #0]
 800d078:	2005      	movs	r0, #5
 800d07a:	e026      	b.n	800d0ca <__hexnan+0x132>
 800d07c:	3501      	adds	r5, #1
 800d07e:	2d08      	cmp	r5, #8
 800d080:	f10b 0b01 	add.w	fp, fp, #1
 800d084:	dd06      	ble.n	800d094 <__hexnan+0xfc>
 800d086:	4544      	cmp	r4, r8
 800d088:	d9c3      	bls.n	800d012 <__hexnan+0x7a>
 800d08a:	2300      	movs	r3, #0
 800d08c:	2501      	movs	r5, #1
 800d08e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d092:	3c04      	subs	r4, #4
 800d094:	6822      	ldr	r2, [r4, #0]
 800d096:	f000 000f 	and.w	r0, r0, #15
 800d09a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d09e:	6022      	str	r2, [r4, #0]
 800d0a0:	e7b7      	b.n	800d012 <__hexnan+0x7a>
 800d0a2:	2508      	movs	r5, #8
 800d0a4:	e7b5      	b.n	800d012 <__hexnan+0x7a>
 800d0a6:	9b01      	ldr	r3, [sp, #4]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d0df      	beq.n	800d06c <__hexnan+0xd4>
 800d0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d0b0:	f1c3 0320 	rsb	r3, r3, #32
 800d0b4:	fa22 f303 	lsr.w	r3, r2, r3
 800d0b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d0bc:	401a      	ands	r2, r3
 800d0be:	f846 2c04 	str.w	r2, [r6, #-4]
 800d0c2:	e7d3      	b.n	800d06c <__hexnan+0xd4>
 800d0c4:	3f04      	subs	r7, #4
 800d0c6:	e7d1      	b.n	800d06c <__hexnan+0xd4>
 800d0c8:	2004      	movs	r0, #4
 800d0ca:	b007      	add	sp, #28
 800d0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d0d0 <_localeconv_r>:
 800d0d0:	4800      	ldr	r0, [pc, #0]	; (800d0d4 <_localeconv_r+0x4>)
 800d0d2:	4770      	bx	lr
 800d0d4:	200003a4 	.word	0x200003a4

0800d0d8 <_lseek_r>:
 800d0d8:	b538      	push	{r3, r4, r5, lr}
 800d0da:	4604      	mov	r4, r0
 800d0dc:	4608      	mov	r0, r1
 800d0de:	4611      	mov	r1, r2
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	4d05      	ldr	r5, [pc, #20]	; (800d0f8 <_lseek_r+0x20>)
 800d0e4:	602a      	str	r2, [r5, #0]
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	f7f7 fe66 	bl	8004db8 <_lseek>
 800d0ec:	1c43      	adds	r3, r0, #1
 800d0ee:	d102      	bne.n	800d0f6 <_lseek_r+0x1e>
 800d0f0:	682b      	ldr	r3, [r5, #0]
 800d0f2:	b103      	cbz	r3, 800d0f6 <_lseek_r+0x1e>
 800d0f4:	6023      	str	r3, [r4, #0]
 800d0f6:	bd38      	pop	{r3, r4, r5, pc}
 800d0f8:	20009fdc 	.word	0x20009fdc

0800d0fc <__ascii_mbtowc>:
 800d0fc:	b082      	sub	sp, #8
 800d0fe:	b901      	cbnz	r1, 800d102 <__ascii_mbtowc+0x6>
 800d100:	a901      	add	r1, sp, #4
 800d102:	b142      	cbz	r2, 800d116 <__ascii_mbtowc+0x1a>
 800d104:	b14b      	cbz	r3, 800d11a <__ascii_mbtowc+0x1e>
 800d106:	7813      	ldrb	r3, [r2, #0]
 800d108:	600b      	str	r3, [r1, #0]
 800d10a:	7812      	ldrb	r2, [r2, #0]
 800d10c:	1e10      	subs	r0, r2, #0
 800d10e:	bf18      	it	ne
 800d110:	2001      	movne	r0, #1
 800d112:	b002      	add	sp, #8
 800d114:	4770      	bx	lr
 800d116:	4610      	mov	r0, r2
 800d118:	e7fb      	b.n	800d112 <__ascii_mbtowc+0x16>
 800d11a:	f06f 0001 	mvn.w	r0, #1
 800d11e:	e7f8      	b.n	800d112 <__ascii_mbtowc+0x16>

0800d120 <memchr>:
 800d120:	4603      	mov	r3, r0
 800d122:	b510      	push	{r4, lr}
 800d124:	b2c9      	uxtb	r1, r1
 800d126:	4402      	add	r2, r0
 800d128:	4293      	cmp	r3, r2
 800d12a:	4618      	mov	r0, r3
 800d12c:	d101      	bne.n	800d132 <memchr+0x12>
 800d12e:	2000      	movs	r0, #0
 800d130:	e003      	b.n	800d13a <memchr+0x1a>
 800d132:	7804      	ldrb	r4, [r0, #0]
 800d134:	3301      	adds	r3, #1
 800d136:	428c      	cmp	r4, r1
 800d138:	d1f6      	bne.n	800d128 <memchr+0x8>
 800d13a:	bd10      	pop	{r4, pc}

0800d13c <__malloc_lock>:
 800d13c:	4801      	ldr	r0, [pc, #4]	; (800d144 <__malloc_lock+0x8>)
 800d13e:	f7fc beae 	b.w	8009e9e <__retarget_lock_acquire_recursive>
 800d142:	bf00      	nop
 800d144:	20009fd0 	.word	0x20009fd0

0800d148 <__malloc_unlock>:
 800d148:	4801      	ldr	r0, [pc, #4]	; (800d150 <__malloc_unlock+0x8>)
 800d14a:	f7fc bea9 	b.w	8009ea0 <__retarget_lock_release_recursive>
 800d14e:	bf00      	nop
 800d150:	20009fd0 	.word	0x20009fd0

0800d154 <_Balloc>:
 800d154:	b570      	push	{r4, r5, r6, lr}
 800d156:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d158:	4604      	mov	r4, r0
 800d15a:	460d      	mov	r5, r1
 800d15c:	b976      	cbnz	r6, 800d17c <_Balloc+0x28>
 800d15e:	2010      	movs	r0, #16
 800d160:	f7fc fea0 	bl	8009ea4 <malloc>
 800d164:	4602      	mov	r2, r0
 800d166:	6260      	str	r0, [r4, #36]	; 0x24
 800d168:	b920      	cbnz	r0, 800d174 <_Balloc+0x20>
 800d16a:	2166      	movs	r1, #102	; 0x66
 800d16c:	4b17      	ldr	r3, [pc, #92]	; (800d1cc <_Balloc+0x78>)
 800d16e:	4818      	ldr	r0, [pc, #96]	; (800d1d0 <_Balloc+0x7c>)
 800d170:	f7fe fcd0 	bl	800bb14 <__assert_func>
 800d174:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d178:	6006      	str	r6, [r0, #0]
 800d17a:	60c6      	str	r6, [r0, #12]
 800d17c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d17e:	68f3      	ldr	r3, [r6, #12]
 800d180:	b183      	cbz	r3, 800d1a4 <_Balloc+0x50>
 800d182:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d18a:	b9b8      	cbnz	r0, 800d1bc <_Balloc+0x68>
 800d18c:	2101      	movs	r1, #1
 800d18e:	fa01 f605 	lsl.w	r6, r1, r5
 800d192:	1d72      	adds	r2, r6, #5
 800d194:	4620      	mov	r0, r4
 800d196:	0092      	lsls	r2, r2, #2
 800d198:	f000 fc94 	bl	800dac4 <_calloc_r>
 800d19c:	b160      	cbz	r0, 800d1b8 <_Balloc+0x64>
 800d19e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d1a2:	e00e      	b.n	800d1c2 <_Balloc+0x6e>
 800d1a4:	2221      	movs	r2, #33	; 0x21
 800d1a6:	2104      	movs	r1, #4
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	f000 fc8b 	bl	800dac4 <_calloc_r>
 800d1ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1b0:	60f0      	str	r0, [r6, #12]
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d1e4      	bne.n	800d182 <_Balloc+0x2e>
 800d1b8:	2000      	movs	r0, #0
 800d1ba:	bd70      	pop	{r4, r5, r6, pc}
 800d1bc:	6802      	ldr	r2, [r0, #0]
 800d1be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d1c8:	e7f7      	b.n	800d1ba <_Balloc+0x66>
 800d1ca:	bf00      	nop
 800d1cc:	0800ea08 	.word	0x0800ea08
 800d1d0:	0800ecac 	.word	0x0800ecac

0800d1d4 <_Bfree>:
 800d1d4:	b570      	push	{r4, r5, r6, lr}
 800d1d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d1d8:	4605      	mov	r5, r0
 800d1da:	460c      	mov	r4, r1
 800d1dc:	b976      	cbnz	r6, 800d1fc <_Bfree+0x28>
 800d1de:	2010      	movs	r0, #16
 800d1e0:	f7fc fe60 	bl	8009ea4 <malloc>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	6268      	str	r0, [r5, #36]	; 0x24
 800d1e8:	b920      	cbnz	r0, 800d1f4 <_Bfree+0x20>
 800d1ea:	218a      	movs	r1, #138	; 0x8a
 800d1ec:	4b08      	ldr	r3, [pc, #32]	; (800d210 <_Bfree+0x3c>)
 800d1ee:	4809      	ldr	r0, [pc, #36]	; (800d214 <_Bfree+0x40>)
 800d1f0:	f7fe fc90 	bl	800bb14 <__assert_func>
 800d1f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1f8:	6006      	str	r6, [r0, #0]
 800d1fa:	60c6      	str	r6, [r0, #12]
 800d1fc:	b13c      	cbz	r4, 800d20e <_Bfree+0x3a>
 800d1fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d200:	6862      	ldr	r2, [r4, #4]
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d208:	6021      	str	r1, [r4, #0]
 800d20a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d20e:	bd70      	pop	{r4, r5, r6, pc}
 800d210:	0800ea08 	.word	0x0800ea08
 800d214:	0800ecac 	.word	0x0800ecac

0800d218 <__multadd>:
 800d218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d21c:	4607      	mov	r7, r0
 800d21e:	460c      	mov	r4, r1
 800d220:	461e      	mov	r6, r3
 800d222:	2000      	movs	r0, #0
 800d224:	690d      	ldr	r5, [r1, #16]
 800d226:	f101 0c14 	add.w	ip, r1, #20
 800d22a:	f8dc 3000 	ldr.w	r3, [ip]
 800d22e:	3001      	adds	r0, #1
 800d230:	b299      	uxth	r1, r3
 800d232:	fb02 6101 	mla	r1, r2, r1, r6
 800d236:	0c1e      	lsrs	r6, r3, #16
 800d238:	0c0b      	lsrs	r3, r1, #16
 800d23a:	fb02 3306 	mla	r3, r2, r6, r3
 800d23e:	b289      	uxth	r1, r1
 800d240:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d244:	4285      	cmp	r5, r0
 800d246:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d24a:	f84c 1b04 	str.w	r1, [ip], #4
 800d24e:	dcec      	bgt.n	800d22a <__multadd+0x12>
 800d250:	b30e      	cbz	r6, 800d296 <__multadd+0x7e>
 800d252:	68a3      	ldr	r3, [r4, #8]
 800d254:	42ab      	cmp	r3, r5
 800d256:	dc19      	bgt.n	800d28c <__multadd+0x74>
 800d258:	6861      	ldr	r1, [r4, #4]
 800d25a:	4638      	mov	r0, r7
 800d25c:	3101      	adds	r1, #1
 800d25e:	f7ff ff79 	bl	800d154 <_Balloc>
 800d262:	4680      	mov	r8, r0
 800d264:	b928      	cbnz	r0, 800d272 <__multadd+0x5a>
 800d266:	4602      	mov	r2, r0
 800d268:	21b5      	movs	r1, #181	; 0xb5
 800d26a:	4b0c      	ldr	r3, [pc, #48]	; (800d29c <__multadd+0x84>)
 800d26c:	480c      	ldr	r0, [pc, #48]	; (800d2a0 <__multadd+0x88>)
 800d26e:	f7fe fc51 	bl	800bb14 <__assert_func>
 800d272:	6922      	ldr	r2, [r4, #16]
 800d274:	f104 010c 	add.w	r1, r4, #12
 800d278:	3202      	adds	r2, #2
 800d27a:	0092      	lsls	r2, r2, #2
 800d27c:	300c      	adds	r0, #12
 800d27e:	f7fc fe21 	bl	8009ec4 <memcpy>
 800d282:	4621      	mov	r1, r4
 800d284:	4638      	mov	r0, r7
 800d286:	f7ff ffa5 	bl	800d1d4 <_Bfree>
 800d28a:	4644      	mov	r4, r8
 800d28c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d290:	3501      	adds	r5, #1
 800d292:	615e      	str	r6, [r3, #20]
 800d294:	6125      	str	r5, [r4, #16]
 800d296:	4620      	mov	r0, r4
 800d298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d29c:	0800ec21 	.word	0x0800ec21
 800d2a0:	0800ecac 	.word	0x0800ecac

0800d2a4 <__s2b>:
 800d2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2a8:	4615      	mov	r5, r2
 800d2aa:	2209      	movs	r2, #9
 800d2ac:	461f      	mov	r7, r3
 800d2ae:	3308      	adds	r3, #8
 800d2b0:	460c      	mov	r4, r1
 800d2b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2b6:	4606      	mov	r6, r0
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	2100      	movs	r1, #0
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	db09      	blt.n	800d2d4 <__s2b+0x30>
 800d2c0:	4630      	mov	r0, r6
 800d2c2:	f7ff ff47 	bl	800d154 <_Balloc>
 800d2c6:	b940      	cbnz	r0, 800d2da <__s2b+0x36>
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	21ce      	movs	r1, #206	; 0xce
 800d2cc:	4b18      	ldr	r3, [pc, #96]	; (800d330 <__s2b+0x8c>)
 800d2ce:	4819      	ldr	r0, [pc, #100]	; (800d334 <__s2b+0x90>)
 800d2d0:	f7fe fc20 	bl	800bb14 <__assert_func>
 800d2d4:	0052      	lsls	r2, r2, #1
 800d2d6:	3101      	adds	r1, #1
 800d2d8:	e7f0      	b.n	800d2bc <__s2b+0x18>
 800d2da:	9b08      	ldr	r3, [sp, #32]
 800d2dc:	2d09      	cmp	r5, #9
 800d2de:	6143      	str	r3, [r0, #20]
 800d2e0:	f04f 0301 	mov.w	r3, #1
 800d2e4:	6103      	str	r3, [r0, #16]
 800d2e6:	dd16      	ble.n	800d316 <__s2b+0x72>
 800d2e8:	f104 0909 	add.w	r9, r4, #9
 800d2ec:	46c8      	mov	r8, r9
 800d2ee:	442c      	add	r4, r5
 800d2f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d2f4:	4601      	mov	r1, r0
 800d2f6:	220a      	movs	r2, #10
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	3b30      	subs	r3, #48	; 0x30
 800d2fc:	f7ff ff8c 	bl	800d218 <__multadd>
 800d300:	45a0      	cmp	r8, r4
 800d302:	d1f5      	bne.n	800d2f0 <__s2b+0x4c>
 800d304:	f1a5 0408 	sub.w	r4, r5, #8
 800d308:	444c      	add	r4, r9
 800d30a:	1b2d      	subs	r5, r5, r4
 800d30c:	1963      	adds	r3, r4, r5
 800d30e:	42bb      	cmp	r3, r7
 800d310:	db04      	blt.n	800d31c <__s2b+0x78>
 800d312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d316:	2509      	movs	r5, #9
 800d318:	340a      	adds	r4, #10
 800d31a:	e7f6      	b.n	800d30a <__s2b+0x66>
 800d31c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d320:	4601      	mov	r1, r0
 800d322:	220a      	movs	r2, #10
 800d324:	4630      	mov	r0, r6
 800d326:	3b30      	subs	r3, #48	; 0x30
 800d328:	f7ff ff76 	bl	800d218 <__multadd>
 800d32c:	e7ee      	b.n	800d30c <__s2b+0x68>
 800d32e:	bf00      	nop
 800d330:	0800ec21 	.word	0x0800ec21
 800d334:	0800ecac 	.word	0x0800ecac

0800d338 <__hi0bits>:
 800d338:	0c02      	lsrs	r2, r0, #16
 800d33a:	0412      	lsls	r2, r2, #16
 800d33c:	4603      	mov	r3, r0
 800d33e:	b9ca      	cbnz	r2, 800d374 <__hi0bits+0x3c>
 800d340:	0403      	lsls	r3, r0, #16
 800d342:	2010      	movs	r0, #16
 800d344:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d348:	bf04      	itt	eq
 800d34a:	021b      	lsleq	r3, r3, #8
 800d34c:	3008      	addeq	r0, #8
 800d34e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d352:	bf04      	itt	eq
 800d354:	011b      	lsleq	r3, r3, #4
 800d356:	3004      	addeq	r0, #4
 800d358:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d35c:	bf04      	itt	eq
 800d35e:	009b      	lsleq	r3, r3, #2
 800d360:	3002      	addeq	r0, #2
 800d362:	2b00      	cmp	r3, #0
 800d364:	db05      	blt.n	800d372 <__hi0bits+0x3a>
 800d366:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d36a:	f100 0001 	add.w	r0, r0, #1
 800d36e:	bf08      	it	eq
 800d370:	2020      	moveq	r0, #32
 800d372:	4770      	bx	lr
 800d374:	2000      	movs	r0, #0
 800d376:	e7e5      	b.n	800d344 <__hi0bits+0xc>

0800d378 <__lo0bits>:
 800d378:	6803      	ldr	r3, [r0, #0]
 800d37a:	4602      	mov	r2, r0
 800d37c:	f013 0007 	ands.w	r0, r3, #7
 800d380:	d00b      	beq.n	800d39a <__lo0bits+0x22>
 800d382:	07d9      	lsls	r1, r3, #31
 800d384:	d421      	bmi.n	800d3ca <__lo0bits+0x52>
 800d386:	0798      	lsls	r0, r3, #30
 800d388:	bf49      	itett	mi
 800d38a:	085b      	lsrmi	r3, r3, #1
 800d38c:	089b      	lsrpl	r3, r3, #2
 800d38e:	2001      	movmi	r0, #1
 800d390:	6013      	strmi	r3, [r2, #0]
 800d392:	bf5c      	itt	pl
 800d394:	2002      	movpl	r0, #2
 800d396:	6013      	strpl	r3, [r2, #0]
 800d398:	4770      	bx	lr
 800d39a:	b299      	uxth	r1, r3
 800d39c:	b909      	cbnz	r1, 800d3a2 <__lo0bits+0x2a>
 800d39e:	2010      	movs	r0, #16
 800d3a0:	0c1b      	lsrs	r3, r3, #16
 800d3a2:	b2d9      	uxtb	r1, r3
 800d3a4:	b909      	cbnz	r1, 800d3aa <__lo0bits+0x32>
 800d3a6:	3008      	adds	r0, #8
 800d3a8:	0a1b      	lsrs	r3, r3, #8
 800d3aa:	0719      	lsls	r1, r3, #28
 800d3ac:	bf04      	itt	eq
 800d3ae:	091b      	lsreq	r3, r3, #4
 800d3b0:	3004      	addeq	r0, #4
 800d3b2:	0799      	lsls	r1, r3, #30
 800d3b4:	bf04      	itt	eq
 800d3b6:	089b      	lsreq	r3, r3, #2
 800d3b8:	3002      	addeq	r0, #2
 800d3ba:	07d9      	lsls	r1, r3, #31
 800d3bc:	d403      	bmi.n	800d3c6 <__lo0bits+0x4e>
 800d3be:	085b      	lsrs	r3, r3, #1
 800d3c0:	f100 0001 	add.w	r0, r0, #1
 800d3c4:	d003      	beq.n	800d3ce <__lo0bits+0x56>
 800d3c6:	6013      	str	r3, [r2, #0]
 800d3c8:	4770      	bx	lr
 800d3ca:	2000      	movs	r0, #0
 800d3cc:	4770      	bx	lr
 800d3ce:	2020      	movs	r0, #32
 800d3d0:	4770      	bx	lr
	...

0800d3d4 <__i2b>:
 800d3d4:	b510      	push	{r4, lr}
 800d3d6:	460c      	mov	r4, r1
 800d3d8:	2101      	movs	r1, #1
 800d3da:	f7ff febb 	bl	800d154 <_Balloc>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	b928      	cbnz	r0, 800d3ee <__i2b+0x1a>
 800d3e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d3e6:	4b04      	ldr	r3, [pc, #16]	; (800d3f8 <__i2b+0x24>)
 800d3e8:	4804      	ldr	r0, [pc, #16]	; (800d3fc <__i2b+0x28>)
 800d3ea:	f7fe fb93 	bl	800bb14 <__assert_func>
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	6144      	str	r4, [r0, #20]
 800d3f2:	6103      	str	r3, [r0, #16]
 800d3f4:	bd10      	pop	{r4, pc}
 800d3f6:	bf00      	nop
 800d3f8:	0800ec21 	.word	0x0800ec21
 800d3fc:	0800ecac 	.word	0x0800ecac

0800d400 <__multiply>:
 800d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d404:	4691      	mov	r9, r2
 800d406:	690a      	ldr	r2, [r1, #16]
 800d408:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d40c:	460c      	mov	r4, r1
 800d40e:	429a      	cmp	r2, r3
 800d410:	bfbe      	ittt	lt
 800d412:	460b      	movlt	r3, r1
 800d414:	464c      	movlt	r4, r9
 800d416:	4699      	movlt	r9, r3
 800d418:	6927      	ldr	r7, [r4, #16]
 800d41a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d41e:	68a3      	ldr	r3, [r4, #8]
 800d420:	6861      	ldr	r1, [r4, #4]
 800d422:	eb07 060a 	add.w	r6, r7, sl
 800d426:	42b3      	cmp	r3, r6
 800d428:	b085      	sub	sp, #20
 800d42a:	bfb8      	it	lt
 800d42c:	3101      	addlt	r1, #1
 800d42e:	f7ff fe91 	bl	800d154 <_Balloc>
 800d432:	b930      	cbnz	r0, 800d442 <__multiply+0x42>
 800d434:	4602      	mov	r2, r0
 800d436:	f240 115d 	movw	r1, #349	; 0x15d
 800d43a:	4b43      	ldr	r3, [pc, #268]	; (800d548 <__multiply+0x148>)
 800d43c:	4843      	ldr	r0, [pc, #268]	; (800d54c <__multiply+0x14c>)
 800d43e:	f7fe fb69 	bl	800bb14 <__assert_func>
 800d442:	f100 0514 	add.w	r5, r0, #20
 800d446:	462b      	mov	r3, r5
 800d448:	2200      	movs	r2, #0
 800d44a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d44e:	4543      	cmp	r3, r8
 800d450:	d321      	bcc.n	800d496 <__multiply+0x96>
 800d452:	f104 0314 	add.w	r3, r4, #20
 800d456:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d45a:	f109 0314 	add.w	r3, r9, #20
 800d45e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d462:	9202      	str	r2, [sp, #8]
 800d464:	1b3a      	subs	r2, r7, r4
 800d466:	3a15      	subs	r2, #21
 800d468:	f022 0203 	bic.w	r2, r2, #3
 800d46c:	3204      	adds	r2, #4
 800d46e:	f104 0115 	add.w	r1, r4, #21
 800d472:	428f      	cmp	r7, r1
 800d474:	bf38      	it	cc
 800d476:	2204      	movcc	r2, #4
 800d478:	9201      	str	r2, [sp, #4]
 800d47a:	9a02      	ldr	r2, [sp, #8]
 800d47c:	9303      	str	r3, [sp, #12]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d80c      	bhi.n	800d49c <__multiply+0x9c>
 800d482:	2e00      	cmp	r6, #0
 800d484:	dd03      	ble.n	800d48e <__multiply+0x8e>
 800d486:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d059      	beq.n	800d542 <__multiply+0x142>
 800d48e:	6106      	str	r6, [r0, #16]
 800d490:	b005      	add	sp, #20
 800d492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d496:	f843 2b04 	str.w	r2, [r3], #4
 800d49a:	e7d8      	b.n	800d44e <__multiply+0x4e>
 800d49c:	f8b3 a000 	ldrh.w	sl, [r3]
 800d4a0:	f1ba 0f00 	cmp.w	sl, #0
 800d4a4:	d023      	beq.n	800d4ee <__multiply+0xee>
 800d4a6:	46a9      	mov	r9, r5
 800d4a8:	f04f 0c00 	mov.w	ip, #0
 800d4ac:	f104 0e14 	add.w	lr, r4, #20
 800d4b0:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d4b4:	f8d9 1000 	ldr.w	r1, [r9]
 800d4b8:	fa1f fb82 	uxth.w	fp, r2
 800d4bc:	b289      	uxth	r1, r1
 800d4be:	fb0a 110b 	mla	r1, sl, fp, r1
 800d4c2:	4461      	add	r1, ip
 800d4c4:	f8d9 c000 	ldr.w	ip, [r9]
 800d4c8:	0c12      	lsrs	r2, r2, #16
 800d4ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d4ce:	fb0a c202 	mla	r2, sl, r2, ip
 800d4d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d4d6:	b289      	uxth	r1, r1
 800d4d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d4dc:	4577      	cmp	r7, lr
 800d4de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d4e2:	f849 1b04 	str.w	r1, [r9], #4
 800d4e6:	d8e3      	bhi.n	800d4b0 <__multiply+0xb0>
 800d4e8:	9a01      	ldr	r2, [sp, #4]
 800d4ea:	f845 c002 	str.w	ip, [r5, r2]
 800d4ee:	9a03      	ldr	r2, [sp, #12]
 800d4f0:	3304      	adds	r3, #4
 800d4f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d4f6:	f1b9 0f00 	cmp.w	r9, #0
 800d4fa:	d020      	beq.n	800d53e <__multiply+0x13e>
 800d4fc:	46ae      	mov	lr, r5
 800d4fe:	f04f 0a00 	mov.w	sl, #0
 800d502:	6829      	ldr	r1, [r5, #0]
 800d504:	f104 0c14 	add.w	ip, r4, #20
 800d508:	f8bc b000 	ldrh.w	fp, [ip]
 800d50c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d510:	b289      	uxth	r1, r1
 800d512:	fb09 220b 	mla	r2, r9, fp, r2
 800d516:	4492      	add	sl, r2
 800d518:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d51c:	f84e 1b04 	str.w	r1, [lr], #4
 800d520:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d524:	f8be 1000 	ldrh.w	r1, [lr]
 800d528:	0c12      	lsrs	r2, r2, #16
 800d52a:	fb09 1102 	mla	r1, r9, r2, r1
 800d52e:	4567      	cmp	r7, ip
 800d530:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d534:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d538:	d8e6      	bhi.n	800d508 <__multiply+0x108>
 800d53a:	9a01      	ldr	r2, [sp, #4]
 800d53c:	50a9      	str	r1, [r5, r2]
 800d53e:	3504      	adds	r5, #4
 800d540:	e79b      	b.n	800d47a <__multiply+0x7a>
 800d542:	3e01      	subs	r6, #1
 800d544:	e79d      	b.n	800d482 <__multiply+0x82>
 800d546:	bf00      	nop
 800d548:	0800ec21 	.word	0x0800ec21
 800d54c:	0800ecac 	.word	0x0800ecac

0800d550 <__pow5mult>:
 800d550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d554:	4615      	mov	r5, r2
 800d556:	f012 0203 	ands.w	r2, r2, #3
 800d55a:	4606      	mov	r6, r0
 800d55c:	460f      	mov	r7, r1
 800d55e:	d007      	beq.n	800d570 <__pow5mult+0x20>
 800d560:	4c25      	ldr	r4, [pc, #148]	; (800d5f8 <__pow5mult+0xa8>)
 800d562:	3a01      	subs	r2, #1
 800d564:	2300      	movs	r3, #0
 800d566:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d56a:	f7ff fe55 	bl	800d218 <__multadd>
 800d56e:	4607      	mov	r7, r0
 800d570:	10ad      	asrs	r5, r5, #2
 800d572:	d03d      	beq.n	800d5f0 <__pow5mult+0xa0>
 800d574:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d576:	b97c      	cbnz	r4, 800d598 <__pow5mult+0x48>
 800d578:	2010      	movs	r0, #16
 800d57a:	f7fc fc93 	bl	8009ea4 <malloc>
 800d57e:	4602      	mov	r2, r0
 800d580:	6270      	str	r0, [r6, #36]	; 0x24
 800d582:	b928      	cbnz	r0, 800d590 <__pow5mult+0x40>
 800d584:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d588:	4b1c      	ldr	r3, [pc, #112]	; (800d5fc <__pow5mult+0xac>)
 800d58a:	481d      	ldr	r0, [pc, #116]	; (800d600 <__pow5mult+0xb0>)
 800d58c:	f7fe fac2 	bl	800bb14 <__assert_func>
 800d590:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d594:	6004      	str	r4, [r0, #0]
 800d596:	60c4      	str	r4, [r0, #12]
 800d598:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d59c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d5a0:	b94c      	cbnz	r4, 800d5b6 <__pow5mult+0x66>
 800d5a2:	f240 2171 	movw	r1, #625	; 0x271
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	f7ff ff14 	bl	800d3d4 <__i2b>
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	4604      	mov	r4, r0
 800d5b0:	f8c8 0008 	str.w	r0, [r8, #8]
 800d5b4:	6003      	str	r3, [r0, #0]
 800d5b6:	f04f 0900 	mov.w	r9, #0
 800d5ba:	07eb      	lsls	r3, r5, #31
 800d5bc:	d50a      	bpl.n	800d5d4 <__pow5mult+0x84>
 800d5be:	4639      	mov	r1, r7
 800d5c0:	4622      	mov	r2, r4
 800d5c2:	4630      	mov	r0, r6
 800d5c4:	f7ff ff1c 	bl	800d400 <__multiply>
 800d5c8:	4680      	mov	r8, r0
 800d5ca:	4639      	mov	r1, r7
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	f7ff fe01 	bl	800d1d4 <_Bfree>
 800d5d2:	4647      	mov	r7, r8
 800d5d4:	106d      	asrs	r5, r5, #1
 800d5d6:	d00b      	beq.n	800d5f0 <__pow5mult+0xa0>
 800d5d8:	6820      	ldr	r0, [r4, #0]
 800d5da:	b938      	cbnz	r0, 800d5ec <__pow5mult+0x9c>
 800d5dc:	4622      	mov	r2, r4
 800d5de:	4621      	mov	r1, r4
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	f7ff ff0d 	bl	800d400 <__multiply>
 800d5e6:	6020      	str	r0, [r4, #0]
 800d5e8:	f8c0 9000 	str.w	r9, [r0]
 800d5ec:	4604      	mov	r4, r0
 800d5ee:	e7e4      	b.n	800d5ba <__pow5mult+0x6a>
 800d5f0:	4638      	mov	r0, r7
 800d5f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5f6:	bf00      	nop
 800d5f8:	0800edf8 	.word	0x0800edf8
 800d5fc:	0800ea08 	.word	0x0800ea08
 800d600:	0800ecac 	.word	0x0800ecac

0800d604 <__lshift>:
 800d604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d608:	460c      	mov	r4, r1
 800d60a:	4607      	mov	r7, r0
 800d60c:	4691      	mov	r9, r2
 800d60e:	6923      	ldr	r3, [r4, #16]
 800d610:	6849      	ldr	r1, [r1, #4]
 800d612:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d616:	68a3      	ldr	r3, [r4, #8]
 800d618:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d61c:	f108 0601 	add.w	r6, r8, #1
 800d620:	42b3      	cmp	r3, r6
 800d622:	db0b      	blt.n	800d63c <__lshift+0x38>
 800d624:	4638      	mov	r0, r7
 800d626:	f7ff fd95 	bl	800d154 <_Balloc>
 800d62a:	4605      	mov	r5, r0
 800d62c:	b948      	cbnz	r0, 800d642 <__lshift+0x3e>
 800d62e:	4602      	mov	r2, r0
 800d630:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d634:	4b29      	ldr	r3, [pc, #164]	; (800d6dc <__lshift+0xd8>)
 800d636:	482a      	ldr	r0, [pc, #168]	; (800d6e0 <__lshift+0xdc>)
 800d638:	f7fe fa6c 	bl	800bb14 <__assert_func>
 800d63c:	3101      	adds	r1, #1
 800d63e:	005b      	lsls	r3, r3, #1
 800d640:	e7ee      	b.n	800d620 <__lshift+0x1c>
 800d642:	2300      	movs	r3, #0
 800d644:	f100 0114 	add.w	r1, r0, #20
 800d648:	f100 0210 	add.w	r2, r0, #16
 800d64c:	4618      	mov	r0, r3
 800d64e:	4553      	cmp	r3, sl
 800d650:	db37      	blt.n	800d6c2 <__lshift+0xbe>
 800d652:	6920      	ldr	r0, [r4, #16]
 800d654:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d658:	f104 0314 	add.w	r3, r4, #20
 800d65c:	f019 091f 	ands.w	r9, r9, #31
 800d660:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d664:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d668:	d02f      	beq.n	800d6ca <__lshift+0xc6>
 800d66a:	468a      	mov	sl, r1
 800d66c:	f04f 0c00 	mov.w	ip, #0
 800d670:	f1c9 0e20 	rsb	lr, r9, #32
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	fa02 f209 	lsl.w	r2, r2, r9
 800d67a:	ea42 020c 	orr.w	r2, r2, ip
 800d67e:	f84a 2b04 	str.w	r2, [sl], #4
 800d682:	f853 2b04 	ldr.w	r2, [r3], #4
 800d686:	4298      	cmp	r0, r3
 800d688:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d68c:	d8f2      	bhi.n	800d674 <__lshift+0x70>
 800d68e:	1b03      	subs	r3, r0, r4
 800d690:	3b15      	subs	r3, #21
 800d692:	f023 0303 	bic.w	r3, r3, #3
 800d696:	3304      	adds	r3, #4
 800d698:	f104 0215 	add.w	r2, r4, #21
 800d69c:	4290      	cmp	r0, r2
 800d69e:	bf38      	it	cc
 800d6a0:	2304      	movcc	r3, #4
 800d6a2:	f841 c003 	str.w	ip, [r1, r3]
 800d6a6:	f1bc 0f00 	cmp.w	ip, #0
 800d6aa:	d001      	beq.n	800d6b0 <__lshift+0xac>
 800d6ac:	f108 0602 	add.w	r6, r8, #2
 800d6b0:	3e01      	subs	r6, #1
 800d6b2:	4638      	mov	r0, r7
 800d6b4:	4621      	mov	r1, r4
 800d6b6:	612e      	str	r6, [r5, #16]
 800d6b8:	f7ff fd8c 	bl	800d1d4 <_Bfree>
 800d6bc:	4628      	mov	r0, r5
 800d6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	e7c1      	b.n	800d64e <__lshift+0x4a>
 800d6ca:	3904      	subs	r1, #4
 800d6cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6d0:	4298      	cmp	r0, r3
 800d6d2:	f841 2f04 	str.w	r2, [r1, #4]!
 800d6d6:	d8f9      	bhi.n	800d6cc <__lshift+0xc8>
 800d6d8:	e7ea      	b.n	800d6b0 <__lshift+0xac>
 800d6da:	bf00      	nop
 800d6dc:	0800ec21 	.word	0x0800ec21
 800d6e0:	0800ecac 	.word	0x0800ecac

0800d6e4 <__mcmp>:
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	690a      	ldr	r2, [r1, #16]
 800d6e8:	6900      	ldr	r0, [r0, #16]
 800d6ea:	b530      	push	{r4, r5, lr}
 800d6ec:	1a80      	subs	r0, r0, r2
 800d6ee:	d10d      	bne.n	800d70c <__mcmp+0x28>
 800d6f0:	3314      	adds	r3, #20
 800d6f2:	3114      	adds	r1, #20
 800d6f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d6f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d6fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d700:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d704:	4295      	cmp	r5, r2
 800d706:	d002      	beq.n	800d70e <__mcmp+0x2a>
 800d708:	d304      	bcc.n	800d714 <__mcmp+0x30>
 800d70a:	2001      	movs	r0, #1
 800d70c:	bd30      	pop	{r4, r5, pc}
 800d70e:	42a3      	cmp	r3, r4
 800d710:	d3f4      	bcc.n	800d6fc <__mcmp+0x18>
 800d712:	e7fb      	b.n	800d70c <__mcmp+0x28>
 800d714:	f04f 30ff 	mov.w	r0, #4294967295
 800d718:	e7f8      	b.n	800d70c <__mcmp+0x28>
	...

0800d71c <__mdiff>:
 800d71c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d720:	460d      	mov	r5, r1
 800d722:	4607      	mov	r7, r0
 800d724:	4611      	mov	r1, r2
 800d726:	4628      	mov	r0, r5
 800d728:	4614      	mov	r4, r2
 800d72a:	f7ff ffdb 	bl	800d6e4 <__mcmp>
 800d72e:	1e06      	subs	r6, r0, #0
 800d730:	d111      	bne.n	800d756 <__mdiff+0x3a>
 800d732:	4631      	mov	r1, r6
 800d734:	4638      	mov	r0, r7
 800d736:	f7ff fd0d 	bl	800d154 <_Balloc>
 800d73a:	4602      	mov	r2, r0
 800d73c:	b928      	cbnz	r0, 800d74a <__mdiff+0x2e>
 800d73e:	f240 2132 	movw	r1, #562	; 0x232
 800d742:	4b3a      	ldr	r3, [pc, #232]	; (800d82c <__mdiff+0x110>)
 800d744:	483a      	ldr	r0, [pc, #232]	; (800d830 <__mdiff+0x114>)
 800d746:	f7fe f9e5 	bl	800bb14 <__assert_func>
 800d74a:	2301      	movs	r3, #1
 800d74c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d750:	4610      	mov	r0, r2
 800d752:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d756:	bfa4      	itt	ge
 800d758:	4623      	movge	r3, r4
 800d75a:	462c      	movge	r4, r5
 800d75c:	4638      	mov	r0, r7
 800d75e:	6861      	ldr	r1, [r4, #4]
 800d760:	bfa6      	itte	ge
 800d762:	461d      	movge	r5, r3
 800d764:	2600      	movge	r6, #0
 800d766:	2601      	movlt	r6, #1
 800d768:	f7ff fcf4 	bl	800d154 <_Balloc>
 800d76c:	4602      	mov	r2, r0
 800d76e:	b918      	cbnz	r0, 800d778 <__mdiff+0x5c>
 800d770:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d774:	4b2d      	ldr	r3, [pc, #180]	; (800d82c <__mdiff+0x110>)
 800d776:	e7e5      	b.n	800d744 <__mdiff+0x28>
 800d778:	f102 0814 	add.w	r8, r2, #20
 800d77c:	46c2      	mov	sl, r8
 800d77e:	f04f 0c00 	mov.w	ip, #0
 800d782:	6927      	ldr	r7, [r4, #16]
 800d784:	60c6      	str	r6, [r0, #12]
 800d786:	692e      	ldr	r6, [r5, #16]
 800d788:	f104 0014 	add.w	r0, r4, #20
 800d78c:	f105 0914 	add.w	r9, r5, #20
 800d790:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800d794:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d798:	3410      	adds	r4, #16
 800d79a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d79e:	f859 3b04 	ldr.w	r3, [r9], #4
 800d7a2:	fa1f f18b 	uxth.w	r1, fp
 800d7a6:	448c      	add	ip, r1
 800d7a8:	b299      	uxth	r1, r3
 800d7aa:	0c1b      	lsrs	r3, r3, #16
 800d7ac:	ebac 0101 	sub.w	r1, ip, r1
 800d7b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d7b4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d7b8:	b289      	uxth	r1, r1
 800d7ba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d7be:	454e      	cmp	r6, r9
 800d7c0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d7c4:	f84a 3b04 	str.w	r3, [sl], #4
 800d7c8:	d8e7      	bhi.n	800d79a <__mdiff+0x7e>
 800d7ca:	1b73      	subs	r3, r6, r5
 800d7cc:	3b15      	subs	r3, #21
 800d7ce:	f023 0303 	bic.w	r3, r3, #3
 800d7d2:	3515      	adds	r5, #21
 800d7d4:	3304      	adds	r3, #4
 800d7d6:	42ae      	cmp	r6, r5
 800d7d8:	bf38      	it	cc
 800d7da:	2304      	movcc	r3, #4
 800d7dc:	4418      	add	r0, r3
 800d7de:	4443      	add	r3, r8
 800d7e0:	461e      	mov	r6, r3
 800d7e2:	4605      	mov	r5, r0
 800d7e4:	4575      	cmp	r5, lr
 800d7e6:	d30e      	bcc.n	800d806 <__mdiff+0xea>
 800d7e8:	f10e 0103 	add.w	r1, lr, #3
 800d7ec:	1a09      	subs	r1, r1, r0
 800d7ee:	f021 0103 	bic.w	r1, r1, #3
 800d7f2:	3803      	subs	r0, #3
 800d7f4:	4586      	cmp	lr, r0
 800d7f6:	bf38      	it	cc
 800d7f8:	2100      	movcc	r1, #0
 800d7fa:	4419      	add	r1, r3
 800d7fc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d800:	b18b      	cbz	r3, 800d826 <__mdiff+0x10a>
 800d802:	6117      	str	r7, [r2, #16]
 800d804:	e7a4      	b.n	800d750 <__mdiff+0x34>
 800d806:	f855 8b04 	ldr.w	r8, [r5], #4
 800d80a:	fa1f f188 	uxth.w	r1, r8
 800d80e:	4461      	add	r1, ip
 800d810:	140c      	asrs	r4, r1, #16
 800d812:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d816:	b289      	uxth	r1, r1
 800d818:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d81c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d820:	f846 1b04 	str.w	r1, [r6], #4
 800d824:	e7de      	b.n	800d7e4 <__mdiff+0xc8>
 800d826:	3f01      	subs	r7, #1
 800d828:	e7e8      	b.n	800d7fc <__mdiff+0xe0>
 800d82a:	bf00      	nop
 800d82c:	0800ec21 	.word	0x0800ec21
 800d830:	0800ecac 	.word	0x0800ecac

0800d834 <__ulp>:
 800d834:	4b11      	ldr	r3, [pc, #68]	; (800d87c <__ulp+0x48>)
 800d836:	400b      	ands	r3, r1
 800d838:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	dd02      	ble.n	800d846 <__ulp+0x12>
 800d840:	2000      	movs	r0, #0
 800d842:	4619      	mov	r1, r3
 800d844:	4770      	bx	lr
 800d846:	425b      	negs	r3, r3
 800d848:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d84c:	f04f 0000 	mov.w	r0, #0
 800d850:	f04f 0100 	mov.w	r1, #0
 800d854:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d858:	da04      	bge.n	800d864 <__ulp+0x30>
 800d85a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d85e:	fa43 f102 	asr.w	r1, r3, r2
 800d862:	4770      	bx	lr
 800d864:	f1a2 0314 	sub.w	r3, r2, #20
 800d868:	2b1e      	cmp	r3, #30
 800d86a:	bfd6      	itet	le
 800d86c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d870:	2301      	movgt	r3, #1
 800d872:	fa22 f303 	lsrle.w	r3, r2, r3
 800d876:	4618      	mov	r0, r3
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop
 800d87c:	7ff00000 	.word	0x7ff00000

0800d880 <__b2d>:
 800d880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d884:	6907      	ldr	r7, [r0, #16]
 800d886:	f100 0914 	add.w	r9, r0, #20
 800d88a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d88e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d892:	f1a7 0804 	sub.w	r8, r7, #4
 800d896:	4630      	mov	r0, r6
 800d898:	f7ff fd4e 	bl	800d338 <__hi0bits>
 800d89c:	f1c0 0320 	rsb	r3, r0, #32
 800d8a0:	280a      	cmp	r0, #10
 800d8a2:	600b      	str	r3, [r1, #0]
 800d8a4:	491f      	ldr	r1, [pc, #124]	; (800d924 <__b2d+0xa4>)
 800d8a6:	dc17      	bgt.n	800d8d8 <__b2d+0x58>
 800d8a8:	45c1      	cmp	r9, r8
 800d8aa:	bf28      	it	cs
 800d8ac:	2200      	movcs	r2, #0
 800d8ae:	f1c0 0c0b 	rsb	ip, r0, #11
 800d8b2:	fa26 f30c 	lsr.w	r3, r6, ip
 800d8b6:	bf38      	it	cc
 800d8b8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d8bc:	ea43 0501 	orr.w	r5, r3, r1
 800d8c0:	f100 0315 	add.w	r3, r0, #21
 800d8c4:	fa06 f303 	lsl.w	r3, r6, r3
 800d8c8:	fa22 f20c 	lsr.w	r2, r2, ip
 800d8cc:	ea43 0402 	orr.w	r4, r3, r2
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	4629      	mov	r1, r5
 800d8d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8d8:	45c1      	cmp	r9, r8
 800d8da:	bf2e      	itee	cs
 800d8dc:	2200      	movcs	r2, #0
 800d8de:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d8e2:	f1a7 0808 	subcc.w	r8, r7, #8
 800d8e6:	f1b0 030b 	subs.w	r3, r0, #11
 800d8ea:	d016      	beq.n	800d91a <__b2d+0x9a>
 800d8ec:	f1c3 0720 	rsb	r7, r3, #32
 800d8f0:	fa22 f107 	lsr.w	r1, r2, r7
 800d8f4:	45c8      	cmp	r8, r9
 800d8f6:	fa06 f603 	lsl.w	r6, r6, r3
 800d8fa:	ea46 0601 	orr.w	r6, r6, r1
 800d8fe:	bf94      	ite	ls
 800d900:	2100      	movls	r1, #0
 800d902:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d906:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800d90a:	fa02 f003 	lsl.w	r0, r2, r3
 800d90e:	40f9      	lsrs	r1, r7
 800d910:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d914:	ea40 0401 	orr.w	r4, r0, r1
 800d918:	e7da      	b.n	800d8d0 <__b2d+0x50>
 800d91a:	4614      	mov	r4, r2
 800d91c:	ea46 0501 	orr.w	r5, r6, r1
 800d920:	e7d6      	b.n	800d8d0 <__b2d+0x50>
 800d922:	bf00      	nop
 800d924:	3ff00000 	.word	0x3ff00000

0800d928 <__d2b>:
 800d928:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d92c:	2101      	movs	r1, #1
 800d92e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d932:	4690      	mov	r8, r2
 800d934:	461d      	mov	r5, r3
 800d936:	f7ff fc0d 	bl	800d154 <_Balloc>
 800d93a:	4604      	mov	r4, r0
 800d93c:	b930      	cbnz	r0, 800d94c <__d2b+0x24>
 800d93e:	4602      	mov	r2, r0
 800d940:	f240 310a 	movw	r1, #778	; 0x30a
 800d944:	4b24      	ldr	r3, [pc, #144]	; (800d9d8 <__d2b+0xb0>)
 800d946:	4825      	ldr	r0, [pc, #148]	; (800d9dc <__d2b+0xb4>)
 800d948:	f7fe f8e4 	bl	800bb14 <__assert_func>
 800d94c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d950:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d954:	bb2d      	cbnz	r5, 800d9a2 <__d2b+0x7a>
 800d956:	9301      	str	r3, [sp, #4]
 800d958:	f1b8 0300 	subs.w	r3, r8, #0
 800d95c:	d026      	beq.n	800d9ac <__d2b+0x84>
 800d95e:	4668      	mov	r0, sp
 800d960:	9300      	str	r3, [sp, #0]
 800d962:	f7ff fd09 	bl	800d378 <__lo0bits>
 800d966:	9900      	ldr	r1, [sp, #0]
 800d968:	b1f0      	cbz	r0, 800d9a8 <__d2b+0x80>
 800d96a:	9a01      	ldr	r2, [sp, #4]
 800d96c:	f1c0 0320 	rsb	r3, r0, #32
 800d970:	fa02 f303 	lsl.w	r3, r2, r3
 800d974:	430b      	orrs	r3, r1
 800d976:	40c2      	lsrs	r2, r0
 800d978:	6163      	str	r3, [r4, #20]
 800d97a:	9201      	str	r2, [sp, #4]
 800d97c:	9b01      	ldr	r3, [sp, #4]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	bf14      	ite	ne
 800d982:	2102      	movne	r1, #2
 800d984:	2101      	moveq	r1, #1
 800d986:	61a3      	str	r3, [r4, #24]
 800d988:	6121      	str	r1, [r4, #16]
 800d98a:	b1c5      	cbz	r5, 800d9be <__d2b+0x96>
 800d98c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d990:	4405      	add	r5, r0
 800d992:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d996:	603d      	str	r5, [r7, #0]
 800d998:	6030      	str	r0, [r6, #0]
 800d99a:	4620      	mov	r0, r4
 800d99c:	b002      	add	sp, #8
 800d99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9a6:	e7d6      	b.n	800d956 <__d2b+0x2e>
 800d9a8:	6161      	str	r1, [r4, #20]
 800d9aa:	e7e7      	b.n	800d97c <__d2b+0x54>
 800d9ac:	a801      	add	r0, sp, #4
 800d9ae:	f7ff fce3 	bl	800d378 <__lo0bits>
 800d9b2:	2101      	movs	r1, #1
 800d9b4:	9b01      	ldr	r3, [sp, #4]
 800d9b6:	6121      	str	r1, [r4, #16]
 800d9b8:	6163      	str	r3, [r4, #20]
 800d9ba:	3020      	adds	r0, #32
 800d9bc:	e7e5      	b.n	800d98a <__d2b+0x62>
 800d9be:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d9c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d9c6:	6038      	str	r0, [r7, #0]
 800d9c8:	6918      	ldr	r0, [r3, #16]
 800d9ca:	f7ff fcb5 	bl	800d338 <__hi0bits>
 800d9ce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d9d2:	6031      	str	r1, [r6, #0]
 800d9d4:	e7e1      	b.n	800d99a <__d2b+0x72>
 800d9d6:	bf00      	nop
 800d9d8:	0800ec21 	.word	0x0800ec21
 800d9dc:	0800ecac 	.word	0x0800ecac

0800d9e0 <__ratio>:
 800d9e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9e4:	4688      	mov	r8, r1
 800d9e6:	4669      	mov	r1, sp
 800d9e8:	4681      	mov	r9, r0
 800d9ea:	f7ff ff49 	bl	800d880 <__b2d>
 800d9ee:	460f      	mov	r7, r1
 800d9f0:	4604      	mov	r4, r0
 800d9f2:	460d      	mov	r5, r1
 800d9f4:	4640      	mov	r0, r8
 800d9f6:	a901      	add	r1, sp, #4
 800d9f8:	f7ff ff42 	bl	800d880 <__b2d>
 800d9fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800da00:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800da04:	468b      	mov	fp, r1
 800da06:	eba3 0c02 	sub.w	ip, r3, r2
 800da0a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800da0e:	1a9b      	subs	r3, r3, r2
 800da10:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800da14:	2b00      	cmp	r3, #0
 800da16:	bfd5      	itete	le
 800da18:	460a      	movle	r2, r1
 800da1a:	462a      	movgt	r2, r5
 800da1c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800da20:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800da24:	bfd8      	it	le
 800da26:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800da2a:	465b      	mov	r3, fp
 800da2c:	4602      	mov	r2, r0
 800da2e:	4639      	mov	r1, r7
 800da30:	4620      	mov	r0, r4
 800da32:	f7f2 fef5 	bl	8000820 <__aeabi_ddiv>
 800da36:	b003      	add	sp, #12
 800da38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800da3c <__copybits>:
 800da3c:	3901      	subs	r1, #1
 800da3e:	b570      	push	{r4, r5, r6, lr}
 800da40:	1149      	asrs	r1, r1, #5
 800da42:	6914      	ldr	r4, [r2, #16]
 800da44:	3101      	adds	r1, #1
 800da46:	f102 0314 	add.w	r3, r2, #20
 800da4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800da4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800da52:	1f05      	subs	r5, r0, #4
 800da54:	42a3      	cmp	r3, r4
 800da56:	d30c      	bcc.n	800da72 <__copybits+0x36>
 800da58:	1aa3      	subs	r3, r4, r2
 800da5a:	3b11      	subs	r3, #17
 800da5c:	f023 0303 	bic.w	r3, r3, #3
 800da60:	3211      	adds	r2, #17
 800da62:	42a2      	cmp	r2, r4
 800da64:	bf88      	it	hi
 800da66:	2300      	movhi	r3, #0
 800da68:	4418      	add	r0, r3
 800da6a:	2300      	movs	r3, #0
 800da6c:	4288      	cmp	r0, r1
 800da6e:	d305      	bcc.n	800da7c <__copybits+0x40>
 800da70:	bd70      	pop	{r4, r5, r6, pc}
 800da72:	f853 6b04 	ldr.w	r6, [r3], #4
 800da76:	f845 6f04 	str.w	r6, [r5, #4]!
 800da7a:	e7eb      	b.n	800da54 <__copybits+0x18>
 800da7c:	f840 3b04 	str.w	r3, [r0], #4
 800da80:	e7f4      	b.n	800da6c <__copybits+0x30>

0800da82 <__any_on>:
 800da82:	f100 0214 	add.w	r2, r0, #20
 800da86:	6900      	ldr	r0, [r0, #16]
 800da88:	114b      	asrs	r3, r1, #5
 800da8a:	4298      	cmp	r0, r3
 800da8c:	b510      	push	{r4, lr}
 800da8e:	db11      	blt.n	800dab4 <__any_on+0x32>
 800da90:	dd0a      	ble.n	800daa8 <__any_on+0x26>
 800da92:	f011 011f 	ands.w	r1, r1, #31
 800da96:	d007      	beq.n	800daa8 <__any_on+0x26>
 800da98:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800da9c:	fa24 f001 	lsr.w	r0, r4, r1
 800daa0:	fa00 f101 	lsl.w	r1, r0, r1
 800daa4:	428c      	cmp	r4, r1
 800daa6:	d10b      	bne.n	800dac0 <__any_on+0x3e>
 800daa8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800daac:	4293      	cmp	r3, r2
 800daae:	d803      	bhi.n	800dab8 <__any_on+0x36>
 800dab0:	2000      	movs	r0, #0
 800dab2:	bd10      	pop	{r4, pc}
 800dab4:	4603      	mov	r3, r0
 800dab6:	e7f7      	b.n	800daa8 <__any_on+0x26>
 800dab8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dabc:	2900      	cmp	r1, #0
 800dabe:	d0f5      	beq.n	800daac <__any_on+0x2a>
 800dac0:	2001      	movs	r0, #1
 800dac2:	e7f6      	b.n	800dab2 <__any_on+0x30>

0800dac4 <_calloc_r>:
 800dac4:	b570      	push	{r4, r5, r6, lr}
 800dac6:	fba1 5402 	umull	r5, r4, r1, r2
 800daca:	b934      	cbnz	r4, 800dada <_calloc_r+0x16>
 800dacc:	4629      	mov	r1, r5
 800dace:	f7fc fa77 	bl	8009fc0 <_malloc_r>
 800dad2:	4606      	mov	r6, r0
 800dad4:	b928      	cbnz	r0, 800dae2 <_calloc_r+0x1e>
 800dad6:	4630      	mov	r0, r6
 800dad8:	bd70      	pop	{r4, r5, r6, pc}
 800dada:	220c      	movs	r2, #12
 800dadc:	2600      	movs	r6, #0
 800dade:	6002      	str	r2, [r0, #0]
 800dae0:	e7f9      	b.n	800dad6 <_calloc_r+0x12>
 800dae2:	462a      	mov	r2, r5
 800dae4:	4621      	mov	r1, r4
 800dae6:	f7fc f9fb 	bl	8009ee0 <memset>
 800daea:	e7f4      	b.n	800dad6 <_calloc_r+0x12>

0800daec <__ssputs_r>:
 800daec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daf0:	688e      	ldr	r6, [r1, #8]
 800daf2:	4682      	mov	sl, r0
 800daf4:	429e      	cmp	r6, r3
 800daf6:	460c      	mov	r4, r1
 800daf8:	4690      	mov	r8, r2
 800dafa:	461f      	mov	r7, r3
 800dafc:	d838      	bhi.n	800db70 <__ssputs_r+0x84>
 800dafe:	898a      	ldrh	r2, [r1, #12]
 800db00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db04:	d032      	beq.n	800db6c <__ssputs_r+0x80>
 800db06:	6825      	ldr	r5, [r4, #0]
 800db08:	6909      	ldr	r1, [r1, #16]
 800db0a:	3301      	adds	r3, #1
 800db0c:	eba5 0901 	sub.w	r9, r5, r1
 800db10:	6965      	ldr	r5, [r4, #20]
 800db12:	444b      	add	r3, r9
 800db14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db1c:	106d      	asrs	r5, r5, #1
 800db1e:	429d      	cmp	r5, r3
 800db20:	bf38      	it	cc
 800db22:	461d      	movcc	r5, r3
 800db24:	0553      	lsls	r3, r2, #21
 800db26:	d531      	bpl.n	800db8c <__ssputs_r+0xa0>
 800db28:	4629      	mov	r1, r5
 800db2a:	f7fc fa49 	bl	8009fc0 <_malloc_r>
 800db2e:	4606      	mov	r6, r0
 800db30:	b950      	cbnz	r0, 800db48 <__ssputs_r+0x5c>
 800db32:	230c      	movs	r3, #12
 800db34:	f04f 30ff 	mov.w	r0, #4294967295
 800db38:	f8ca 3000 	str.w	r3, [sl]
 800db3c:	89a3      	ldrh	r3, [r4, #12]
 800db3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db42:	81a3      	strh	r3, [r4, #12]
 800db44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db48:	464a      	mov	r2, r9
 800db4a:	6921      	ldr	r1, [r4, #16]
 800db4c:	f7fc f9ba 	bl	8009ec4 <memcpy>
 800db50:	89a3      	ldrh	r3, [r4, #12]
 800db52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db5a:	81a3      	strh	r3, [r4, #12]
 800db5c:	6126      	str	r6, [r4, #16]
 800db5e:	444e      	add	r6, r9
 800db60:	6026      	str	r6, [r4, #0]
 800db62:	463e      	mov	r6, r7
 800db64:	6165      	str	r5, [r4, #20]
 800db66:	eba5 0509 	sub.w	r5, r5, r9
 800db6a:	60a5      	str	r5, [r4, #8]
 800db6c:	42be      	cmp	r6, r7
 800db6e:	d900      	bls.n	800db72 <__ssputs_r+0x86>
 800db70:	463e      	mov	r6, r7
 800db72:	4632      	mov	r2, r6
 800db74:	4641      	mov	r1, r8
 800db76:	6820      	ldr	r0, [r4, #0]
 800db78:	f000 fbd6 	bl	800e328 <memmove>
 800db7c:	68a3      	ldr	r3, [r4, #8]
 800db7e:	2000      	movs	r0, #0
 800db80:	1b9b      	subs	r3, r3, r6
 800db82:	60a3      	str	r3, [r4, #8]
 800db84:	6823      	ldr	r3, [r4, #0]
 800db86:	4433      	add	r3, r6
 800db88:	6023      	str	r3, [r4, #0]
 800db8a:	e7db      	b.n	800db44 <__ssputs_r+0x58>
 800db8c:	462a      	mov	r2, r5
 800db8e:	f000 fbe5 	bl	800e35c <_realloc_r>
 800db92:	4606      	mov	r6, r0
 800db94:	2800      	cmp	r0, #0
 800db96:	d1e1      	bne.n	800db5c <__ssputs_r+0x70>
 800db98:	4650      	mov	r0, sl
 800db9a:	6921      	ldr	r1, [r4, #16]
 800db9c:	f7fc f9a8 	bl	8009ef0 <_free_r>
 800dba0:	e7c7      	b.n	800db32 <__ssputs_r+0x46>
	...

0800dba4 <_svfiprintf_r>:
 800dba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dba8:	4698      	mov	r8, r3
 800dbaa:	898b      	ldrh	r3, [r1, #12]
 800dbac:	4607      	mov	r7, r0
 800dbae:	061b      	lsls	r3, r3, #24
 800dbb0:	460d      	mov	r5, r1
 800dbb2:	4614      	mov	r4, r2
 800dbb4:	b09d      	sub	sp, #116	; 0x74
 800dbb6:	d50e      	bpl.n	800dbd6 <_svfiprintf_r+0x32>
 800dbb8:	690b      	ldr	r3, [r1, #16]
 800dbba:	b963      	cbnz	r3, 800dbd6 <_svfiprintf_r+0x32>
 800dbbc:	2140      	movs	r1, #64	; 0x40
 800dbbe:	f7fc f9ff 	bl	8009fc0 <_malloc_r>
 800dbc2:	6028      	str	r0, [r5, #0]
 800dbc4:	6128      	str	r0, [r5, #16]
 800dbc6:	b920      	cbnz	r0, 800dbd2 <_svfiprintf_r+0x2e>
 800dbc8:	230c      	movs	r3, #12
 800dbca:	603b      	str	r3, [r7, #0]
 800dbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800dbd0:	e0d1      	b.n	800dd76 <_svfiprintf_r+0x1d2>
 800dbd2:	2340      	movs	r3, #64	; 0x40
 800dbd4:	616b      	str	r3, [r5, #20]
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	9309      	str	r3, [sp, #36]	; 0x24
 800dbda:	2320      	movs	r3, #32
 800dbdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbe0:	2330      	movs	r3, #48	; 0x30
 800dbe2:	f04f 0901 	mov.w	r9, #1
 800dbe6:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dd90 <_svfiprintf_r+0x1ec>
 800dbee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbf2:	4623      	mov	r3, r4
 800dbf4:	469a      	mov	sl, r3
 800dbf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbfa:	b10a      	cbz	r2, 800dc00 <_svfiprintf_r+0x5c>
 800dbfc:	2a25      	cmp	r2, #37	; 0x25
 800dbfe:	d1f9      	bne.n	800dbf4 <_svfiprintf_r+0x50>
 800dc00:	ebba 0b04 	subs.w	fp, sl, r4
 800dc04:	d00b      	beq.n	800dc1e <_svfiprintf_r+0x7a>
 800dc06:	465b      	mov	r3, fp
 800dc08:	4622      	mov	r2, r4
 800dc0a:	4629      	mov	r1, r5
 800dc0c:	4638      	mov	r0, r7
 800dc0e:	f7ff ff6d 	bl	800daec <__ssputs_r>
 800dc12:	3001      	adds	r0, #1
 800dc14:	f000 80aa 	beq.w	800dd6c <_svfiprintf_r+0x1c8>
 800dc18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc1a:	445a      	add	r2, fp
 800dc1c:	9209      	str	r2, [sp, #36]	; 0x24
 800dc1e:	f89a 3000 	ldrb.w	r3, [sl]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	f000 80a2 	beq.w	800dd6c <_svfiprintf_r+0x1c8>
 800dc28:	2300      	movs	r3, #0
 800dc2a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc32:	f10a 0a01 	add.w	sl, sl, #1
 800dc36:	9304      	str	r3, [sp, #16]
 800dc38:	9307      	str	r3, [sp, #28]
 800dc3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc3e:	931a      	str	r3, [sp, #104]	; 0x68
 800dc40:	4654      	mov	r4, sl
 800dc42:	2205      	movs	r2, #5
 800dc44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc48:	4851      	ldr	r0, [pc, #324]	; (800dd90 <_svfiprintf_r+0x1ec>)
 800dc4a:	f7ff fa69 	bl	800d120 <memchr>
 800dc4e:	9a04      	ldr	r2, [sp, #16]
 800dc50:	b9d8      	cbnz	r0, 800dc8a <_svfiprintf_r+0xe6>
 800dc52:	06d0      	lsls	r0, r2, #27
 800dc54:	bf44      	itt	mi
 800dc56:	2320      	movmi	r3, #32
 800dc58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc5c:	0711      	lsls	r1, r2, #28
 800dc5e:	bf44      	itt	mi
 800dc60:	232b      	movmi	r3, #43	; 0x2b
 800dc62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc66:	f89a 3000 	ldrb.w	r3, [sl]
 800dc6a:	2b2a      	cmp	r3, #42	; 0x2a
 800dc6c:	d015      	beq.n	800dc9a <_svfiprintf_r+0xf6>
 800dc6e:	4654      	mov	r4, sl
 800dc70:	2000      	movs	r0, #0
 800dc72:	f04f 0c0a 	mov.w	ip, #10
 800dc76:	9a07      	ldr	r2, [sp, #28]
 800dc78:	4621      	mov	r1, r4
 800dc7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc7e:	3b30      	subs	r3, #48	; 0x30
 800dc80:	2b09      	cmp	r3, #9
 800dc82:	d94e      	bls.n	800dd22 <_svfiprintf_r+0x17e>
 800dc84:	b1b0      	cbz	r0, 800dcb4 <_svfiprintf_r+0x110>
 800dc86:	9207      	str	r2, [sp, #28]
 800dc88:	e014      	b.n	800dcb4 <_svfiprintf_r+0x110>
 800dc8a:	eba0 0308 	sub.w	r3, r0, r8
 800dc8e:	fa09 f303 	lsl.w	r3, r9, r3
 800dc92:	4313      	orrs	r3, r2
 800dc94:	46a2      	mov	sl, r4
 800dc96:	9304      	str	r3, [sp, #16]
 800dc98:	e7d2      	b.n	800dc40 <_svfiprintf_r+0x9c>
 800dc9a:	9b03      	ldr	r3, [sp, #12]
 800dc9c:	1d19      	adds	r1, r3, #4
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	9103      	str	r1, [sp, #12]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	bfbb      	ittet	lt
 800dca6:	425b      	neglt	r3, r3
 800dca8:	f042 0202 	orrlt.w	r2, r2, #2
 800dcac:	9307      	strge	r3, [sp, #28]
 800dcae:	9307      	strlt	r3, [sp, #28]
 800dcb0:	bfb8      	it	lt
 800dcb2:	9204      	strlt	r2, [sp, #16]
 800dcb4:	7823      	ldrb	r3, [r4, #0]
 800dcb6:	2b2e      	cmp	r3, #46	; 0x2e
 800dcb8:	d10c      	bne.n	800dcd4 <_svfiprintf_r+0x130>
 800dcba:	7863      	ldrb	r3, [r4, #1]
 800dcbc:	2b2a      	cmp	r3, #42	; 0x2a
 800dcbe:	d135      	bne.n	800dd2c <_svfiprintf_r+0x188>
 800dcc0:	9b03      	ldr	r3, [sp, #12]
 800dcc2:	3402      	adds	r4, #2
 800dcc4:	1d1a      	adds	r2, r3, #4
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	9203      	str	r2, [sp, #12]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	bfb8      	it	lt
 800dcce:	f04f 33ff 	movlt.w	r3, #4294967295
 800dcd2:	9305      	str	r3, [sp, #20]
 800dcd4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800dd94 <_svfiprintf_r+0x1f0>
 800dcd8:	2203      	movs	r2, #3
 800dcda:	4650      	mov	r0, sl
 800dcdc:	7821      	ldrb	r1, [r4, #0]
 800dcde:	f7ff fa1f 	bl	800d120 <memchr>
 800dce2:	b140      	cbz	r0, 800dcf6 <_svfiprintf_r+0x152>
 800dce4:	2340      	movs	r3, #64	; 0x40
 800dce6:	eba0 000a 	sub.w	r0, r0, sl
 800dcea:	fa03 f000 	lsl.w	r0, r3, r0
 800dcee:	9b04      	ldr	r3, [sp, #16]
 800dcf0:	3401      	adds	r4, #1
 800dcf2:	4303      	orrs	r3, r0
 800dcf4:	9304      	str	r3, [sp, #16]
 800dcf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcfa:	2206      	movs	r2, #6
 800dcfc:	4826      	ldr	r0, [pc, #152]	; (800dd98 <_svfiprintf_r+0x1f4>)
 800dcfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd02:	f7ff fa0d 	bl	800d120 <memchr>
 800dd06:	2800      	cmp	r0, #0
 800dd08:	d038      	beq.n	800dd7c <_svfiprintf_r+0x1d8>
 800dd0a:	4b24      	ldr	r3, [pc, #144]	; (800dd9c <_svfiprintf_r+0x1f8>)
 800dd0c:	bb1b      	cbnz	r3, 800dd56 <_svfiprintf_r+0x1b2>
 800dd0e:	9b03      	ldr	r3, [sp, #12]
 800dd10:	3307      	adds	r3, #7
 800dd12:	f023 0307 	bic.w	r3, r3, #7
 800dd16:	3308      	adds	r3, #8
 800dd18:	9303      	str	r3, [sp, #12]
 800dd1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd1c:	4433      	add	r3, r6
 800dd1e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd20:	e767      	b.n	800dbf2 <_svfiprintf_r+0x4e>
 800dd22:	460c      	mov	r4, r1
 800dd24:	2001      	movs	r0, #1
 800dd26:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd2a:	e7a5      	b.n	800dc78 <_svfiprintf_r+0xd4>
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	f04f 0c0a 	mov.w	ip, #10
 800dd32:	4619      	mov	r1, r3
 800dd34:	3401      	adds	r4, #1
 800dd36:	9305      	str	r3, [sp, #20]
 800dd38:	4620      	mov	r0, r4
 800dd3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd3e:	3a30      	subs	r2, #48	; 0x30
 800dd40:	2a09      	cmp	r2, #9
 800dd42:	d903      	bls.n	800dd4c <_svfiprintf_r+0x1a8>
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d0c5      	beq.n	800dcd4 <_svfiprintf_r+0x130>
 800dd48:	9105      	str	r1, [sp, #20]
 800dd4a:	e7c3      	b.n	800dcd4 <_svfiprintf_r+0x130>
 800dd4c:	4604      	mov	r4, r0
 800dd4e:	2301      	movs	r3, #1
 800dd50:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd54:	e7f0      	b.n	800dd38 <_svfiprintf_r+0x194>
 800dd56:	ab03      	add	r3, sp, #12
 800dd58:	9300      	str	r3, [sp, #0]
 800dd5a:	462a      	mov	r2, r5
 800dd5c:	4638      	mov	r0, r7
 800dd5e:	4b10      	ldr	r3, [pc, #64]	; (800dda0 <_svfiprintf_r+0x1fc>)
 800dd60:	a904      	add	r1, sp, #16
 800dd62:	f7fc fa3f 	bl	800a1e4 <_printf_float>
 800dd66:	1c42      	adds	r2, r0, #1
 800dd68:	4606      	mov	r6, r0
 800dd6a:	d1d6      	bne.n	800dd1a <_svfiprintf_r+0x176>
 800dd6c:	89ab      	ldrh	r3, [r5, #12]
 800dd6e:	065b      	lsls	r3, r3, #25
 800dd70:	f53f af2c 	bmi.w	800dbcc <_svfiprintf_r+0x28>
 800dd74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd76:	b01d      	add	sp, #116	; 0x74
 800dd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd7c:	ab03      	add	r3, sp, #12
 800dd7e:	9300      	str	r3, [sp, #0]
 800dd80:	462a      	mov	r2, r5
 800dd82:	4638      	mov	r0, r7
 800dd84:	4b06      	ldr	r3, [pc, #24]	; (800dda0 <_svfiprintf_r+0x1fc>)
 800dd86:	a904      	add	r1, sp, #16
 800dd88:	f7fc fcc8 	bl	800a71c <_printf_i>
 800dd8c:	e7eb      	b.n	800dd66 <_svfiprintf_r+0x1c2>
 800dd8e:	bf00      	nop
 800dd90:	0800ee04 	.word	0x0800ee04
 800dd94:	0800ee0a 	.word	0x0800ee0a
 800dd98:	0800ee0e 	.word	0x0800ee0e
 800dd9c:	0800a1e5 	.word	0x0800a1e5
 800dda0:	0800daed 	.word	0x0800daed

0800dda4 <__sfputc_r>:
 800dda4:	6893      	ldr	r3, [r2, #8]
 800dda6:	b410      	push	{r4}
 800dda8:	3b01      	subs	r3, #1
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	6093      	str	r3, [r2, #8]
 800ddae:	da07      	bge.n	800ddc0 <__sfputc_r+0x1c>
 800ddb0:	6994      	ldr	r4, [r2, #24]
 800ddb2:	42a3      	cmp	r3, r4
 800ddb4:	db01      	blt.n	800ddba <__sfputc_r+0x16>
 800ddb6:	290a      	cmp	r1, #10
 800ddb8:	d102      	bne.n	800ddc0 <__sfputc_r+0x1c>
 800ddba:	bc10      	pop	{r4}
 800ddbc:	f000 b97a 	b.w	800e0b4 <__swbuf_r>
 800ddc0:	6813      	ldr	r3, [r2, #0]
 800ddc2:	1c58      	adds	r0, r3, #1
 800ddc4:	6010      	str	r0, [r2, #0]
 800ddc6:	7019      	strb	r1, [r3, #0]
 800ddc8:	4608      	mov	r0, r1
 800ddca:	bc10      	pop	{r4}
 800ddcc:	4770      	bx	lr

0800ddce <__sfputs_r>:
 800ddce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddd0:	4606      	mov	r6, r0
 800ddd2:	460f      	mov	r7, r1
 800ddd4:	4614      	mov	r4, r2
 800ddd6:	18d5      	adds	r5, r2, r3
 800ddd8:	42ac      	cmp	r4, r5
 800ddda:	d101      	bne.n	800dde0 <__sfputs_r+0x12>
 800dddc:	2000      	movs	r0, #0
 800ddde:	e007      	b.n	800ddf0 <__sfputs_r+0x22>
 800dde0:	463a      	mov	r2, r7
 800dde2:	4630      	mov	r0, r6
 800dde4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dde8:	f7ff ffdc 	bl	800dda4 <__sfputc_r>
 800ddec:	1c43      	adds	r3, r0, #1
 800ddee:	d1f3      	bne.n	800ddd8 <__sfputs_r+0xa>
 800ddf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddf4 <_vfiprintf_r>:
 800ddf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf8:	460d      	mov	r5, r1
 800ddfa:	4614      	mov	r4, r2
 800ddfc:	4698      	mov	r8, r3
 800ddfe:	4606      	mov	r6, r0
 800de00:	b09d      	sub	sp, #116	; 0x74
 800de02:	b118      	cbz	r0, 800de0c <_vfiprintf_r+0x18>
 800de04:	6983      	ldr	r3, [r0, #24]
 800de06:	b90b      	cbnz	r3, 800de0c <_vfiprintf_r+0x18>
 800de08:	f7fb ff86 	bl	8009d18 <__sinit>
 800de0c:	4b89      	ldr	r3, [pc, #548]	; (800e034 <_vfiprintf_r+0x240>)
 800de0e:	429d      	cmp	r5, r3
 800de10:	d11b      	bne.n	800de4a <_vfiprintf_r+0x56>
 800de12:	6875      	ldr	r5, [r6, #4]
 800de14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de16:	07d9      	lsls	r1, r3, #31
 800de18:	d405      	bmi.n	800de26 <_vfiprintf_r+0x32>
 800de1a:	89ab      	ldrh	r3, [r5, #12]
 800de1c:	059a      	lsls	r2, r3, #22
 800de1e:	d402      	bmi.n	800de26 <_vfiprintf_r+0x32>
 800de20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de22:	f7fc f83c 	bl	8009e9e <__retarget_lock_acquire_recursive>
 800de26:	89ab      	ldrh	r3, [r5, #12]
 800de28:	071b      	lsls	r3, r3, #28
 800de2a:	d501      	bpl.n	800de30 <_vfiprintf_r+0x3c>
 800de2c:	692b      	ldr	r3, [r5, #16]
 800de2e:	b9eb      	cbnz	r3, 800de6c <_vfiprintf_r+0x78>
 800de30:	4629      	mov	r1, r5
 800de32:	4630      	mov	r0, r6
 800de34:	f000 f99e 	bl	800e174 <__swsetup_r>
 800de38:	b1c0      	cbz	r0, 800de6c <_vfiprintf_r+0x78>
 800de3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de3c:	07dc      	lsls	r4, r3, #31
 800de3e:	d50e      	bpl.n	800de5e <_vfiprintf_r+0x6a>
 800de40:	f04f 30ff 	mov.w	r0, #4294967295
 800de44:	b01d      	add	sp, #116	; 0x74
 800de46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de4a:	4b7b      	ldr	r3, [pc, #492]	; (800e038 <_vfiprintf_r+0x244>)
 800de4c:	429d      	cmp	r5, r3
 800de4e:	d101      	bne.n	800de54 <_vfiprintf_r+0x60>
 800de50:	68b5      	ldr	r5, [r6, #8]
 800de52:	e7df      	b.n	800de14 <_vfiprintf_r+0x20>
 800de54:	4b79      	ldr	r3, [pc, #484]	; (800e03c <_vfiprintf_r+0x248>)
 800de56:	429d      	cmp	r5, r3
 800de58:	bf08      	it	eq
 800de5a:	68f5      	ldreq	r5, [r6, #12]
 800de5c:	e7da      	b.n	800de14 <_vfiprintf_r+0x20>
 800de5e:	89ab      	ldrh	r3, [r5, #12]
 800de60:	0598      	lsls	r0, r3, #22
 800de62:	d4ed      	bmi.n	800de40 <_vfiprintf_r+0x4c>
 800de64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de66:	f7fc f81b 	bl	8009ea0 <__retarget_lock_release_recursive>
 800de6a:	e7e9      	b.n	800de40 <_vfiprintf_r+0x4c>
 800de6c:	2300      	movs	r3, #0
 800de6e:	9309      	str	r3, [sp, #36]	; 0x24
 800de70:	2320      	movs	r3, #32
 800de72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de76:	2330      	movs	r3, #48	; 0x30
 800de78:	f04f 0901 	mov.w	r9, #1
 800de7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800de80:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e040 <_vfiprintf_r+0x24c>
 800de84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de88:	4623      	mov	r3, r4
 800de8a:	469a      	mov	sl, r3
 800de8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de90:	b10a      	cbz	r2, 800de96 <_vfiprintf_r+0xa2>
 800de92:	2a25      	cmp	r2, #37	; 0x25
 800de94:	d1f9      	bne.n	800de8a <_vfiprintf_r+0x96>
 800de96:	ebba 0b04 	subs.w	fp, sl, r4
 800de9a:	d00b      	beq.n	800deb4 <_vfiprintf_r+0xc0>
 800de9c:	465b      	mov	r3, fp
 800de9e:	4622      	mov	r2, r4
 800dea0:	4629      	mov	r1, r5
 800dea2:	4630      	mov	r0, r6
 800dea4:	f7ff ff93 	bl	800ddce <__sfputs_r>
 800dea8:	3001      	adds	r0, #1
 800deaa:	f000 80aa 	beq.w	800e002 <_vfiprintf_r+0x20e>
 800deae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800deb0:	445a      	add	r2, fp
 800deb2:	9209      	str	r2, [sp, #36]	; 0x24
 800deb4:	f89a 3000 	ldrb.w	r3, [sl]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	f000 80a2 	beq.w	800e002 <_vfiprintf_r+0x20e>
 800debe:	2300      	movs	r3, #0
 800dec0:	f04f 32ff 	mov.w	r2, #4294967295
 800dec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dec8:	f10a 0a01 	add.w	sl, sl, #1
 800decc:	9304      	str	r3, [sp, #16]
 800dece:	9307      	str	r3, [sp, #28]
 800ded0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ded4:	931a      	str	r3, [sp, #104]	; 0x68
 800ded6:	4654      	mov	r4, sl
 800ded8:	2205      	movs	r2, #5
 800deda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dede:	4858      	ldr	r0, [pc, #352]	; (800e040 <_vfiprintf_r+0x24c>)
 800dee0:	f7ff f91e 	bl	800d120 <memchr>
 800dee4:	9a04      	ldr	r2, [sp, #16]
 800dee6:	b9d8      	cbnz	r0, 800df20 <_vfiprintf_r+0x12c>
 800dee8:	06d1      	lsls	r1, r2, #27
 800deea:	bf44      	itt	mi
 800deec:	2320      	movmi	r3, #32
 800deee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800def2:	0713      	lsls	r3, r2, #28
 800def4:	bf44      	itt	mi
 800def6:	232b      	movmi	r3, #43	; 0x2b
 800def8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800defc:	f89a 3000 	ldrb.w	r3, [sl]
 800df00:	2b2a      	cmp	r3, #42	; 0x2a
 800df02:	d015      	beq.n	800df30 <_vfiprintf_r+0x13c>
 800df04:	4654      	mov	r4, sl
 800df06:	2000      	movs	r0, #0
 800df08:	f04f 0c0a 	mov.w	ip, #10
 800df0c:	9a07      	ldr	r2, [sp, #28]
 800df0e:	4621      	mov	r1, r4
 800df10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df14:	3b30      	subs	r3, #48	; 0x30
 800df16:	2b09      	cmp	r3, #9
 800df18:	d94e      	bls.n	800dfb8 <_vfiprintf_r+0x1c4>
 800df1a:	b1b0      	cbz	r0, 800df4a <_vfiprintf_r+0x156>
 800df1c:	9207      	str	r2, [sp, #28]
 800df1e:	e014      	b.n	800df4a <_vfiprintf_r+0x156>
 800df20:	eba0 0308 	sub.w	r3, r0, r8
 800df24:	fa09 f303 	lsl.w	r3, r9, r3
 800df28:	4313      	orrs	r3, r2
 800df2a:	46a2      	mov	sl, r4
 800df2c:	9304      	str	r3, [sp, #16]
 800df2e:	e7d2      	b.n	800ded6 <_vfiprintf_r+0xe2>
 800df30:	9b03      	ldr	r3, [sp, #12]
 800df32:	1d19      	adds	r1, r3, #4
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	9103      	str	r1, [sp, #12]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	bfbb      	ittet	lt
 800df3c:	425b      	neglt	r3, r3
 800df3e:	f042 0202 	orrlt.w	r2, r2, #2
 800df42:	9307      	strge	r3, [sp, #28]
 800df44:	9307      	strlt	r3, [sp, #28]
 800df46:	bfb8      	it	lt
 800df48:	9204      	strlt	r2, [sp, #16]
 800df4a:	7823      	ldrb	r3, [r4, #0]
 800df4c:	2b2e      	cmp	r3, #46	; 0x2e
 800df4e:	d10c      	bne.n	800df6a <_vfiprintf_r+0x176>
 800df50:	7863      	ldrb	r3, [r4, #1]
 800df52:	2b2a      	cmp	r3, #42	; 0x2a
 800df54:	d135      	bne.n	800dfc2 <_vfiprintf_r+0x1ce>
 800df56:	9b03      	ldr	r3, [sp, #12]
 800df58:	3402      	adds	r4, #2
 800df5a:	1d1a      	adds	r2, r3, #4
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	9203      	str	r2, [sp, #12]
 800df60:	2b00      	cmp	r3, #0
 800df62:	bfb8      	it	lt
 800df64:	f04f 33ff 	movlt.w	r3, #4294967295
 800df68:	9305      	str	r3, [sp, #20]
 800df6a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800e044 <_vfiprintf_r+0x250>
 800df6e:	2203      	movs	r2, #3
 800df70:	4650      	mov	r0, sl
 800df72:	7821      	ldrb	r1, [r4, #0]
 800df74:	f7ff f8d4 	bl	800d120 <memchr>
 800df78:	b140      	cbz	r0, 800df8c <_vfiprintf_r+0x198>
 800df7a:	2340      	movs	r3, #64	; 0x40
 800df7c:	eba0 000a 	sub.w	r0, r0, sl
 800df80:	fa03 f000 	lsl.w	r0, r3, r0
 800df84:	9b04      	ldr	r3, [sp, #16]
 800df86:	3401      	adds	r4, #1
 800df88:	4303      	orrs	r3, r0
 800df8a:	9304      	str	r3, [sp, #16]
 800df8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df90:	2206      	movs	r2, #6
 800df92:	482d      	ldr	r0, [pc, #180]	; (800e048 <_vfiprintf_r+0x254>)
 800df94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df98:	f7ff f8c2 	bl	800d120 <memchr>
 800df9c:	2800      	cmp	r0, #0
 800df9e:	d03f      	beq.n	800e020 <_vfiprintf_r+0x22c>
 800dfa0:	4b2a      	ldr	r3, [pc, #168]	; (800e04c <_vfiprintf_r+0x258>)
 800dfa2:	bb1b      	cbnz	r3, 800dfec <_vfiprintf_r+0x1f8>
 800dfa4:	9b03      	ldr	r3, [sp, #12]
 800dfa6:	3307      	adds	r3, #7
 800dfa8:	f023 0307 	bic.w	r3, r3, #7
 800dfac:	3308      	adds	r3, #8
 800dfae:	9303      	str	r3, [sp, #12]
 800dfb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfb2:	443b      	add	r3, r7
 800dfb4:	9309      	str	r3, [sp, #36]	; 0x24
 800dfb6:	e767      	b.n	800de88 <_vfiprintf_r+0x94>
 800dfb8:	460c      	mov	r4, r1
 800dfba:	2001      	movs	r0, #1
 800dfbc:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfc0:	e7a5      	b.n	800df0e <_vfiprintf_r+0x11a>
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	f04f 0c0a 	mov.w	ip, #10
 800dfc8:	4619      	mov	r1, r3
 800dfca:	3401      	adds	r4, #1
 800dfcc:	9305      	str	r3, [sp, #20]
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfd4:	3a30      	subs	r2, #48	; 0x30
 800dfd6:	2a09      	cmp	r2, #9
 800dfd8:	d903      	bls.n	800dfe2 <_vfiprintf_r+0x1ee>
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d0c5      	beq.n	800df6a <_vfiprintf_r+0x176>
 800dfde:	9105      	str	r1, [sp, #20]
 800dfe0:	e7c3      	b.n	800df6a <_vfiprintf_r+0x176>
 800dfe2:	4604      	mov	r4, r0
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfea:	e7f0      	b.n	800dfce <_vfiprintf_r+0x1da>
 800dfec:	ab03      	add	r3, sp, #12
 800dfee:	9300      	str	r3, [sp, #0]
 800dff0:	462a      	mov	r2, r5
 800dff2:	4630      	mov	r0, r6
 800dff4:	4b16      	ldr	r3, [pc, #88]	; (800e050 <_vfiprintf_r+0x25c>)
 800dff6:	a904      	add	r1, sp, #16
 800dff8:	f7fc f8f4 	bl	800a1e4 <_printf_float>
 800dffc:	4607      	mov	r7, r0
 800dffe:	1c78      	adds	r0, r7, #1
 800e000:	d1d6      	bne.n	800dfb0 <_vfiprintf_r+0x1bc>
 800e002:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e004:	07d9      	lsls	r1, r3, #31
 800e006:	d405      	bmi.n	800e014 <_vfiprintf_r+0x220>
 800e008:	89ab      	ldrh	r3, [r5, #12]
 800e00a:	059a      	lsls	r2, r3, #22
 800e00c:	d402      	bmi.n	800e014 <_vfiprintf_r+0x220>
 800e00e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e010:	f7fb ff46 	bl	8009ea0 <__retarget_lock_release_recursive>
 800e014:	89ab      	ldrh	r3, [r5, #12]
 800e016:	065b      	lsls	r3, r3, #25
 800e018:	f53f af12 	bmi.w	800de40 <_vfiprintf_r+0x4c>
 800e01c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e01e:	e711      	b.n	800de44 <_vfiprintf_r+0x50>
 800e020:	ab03      	add	r3, sp, #12
 800e022:	9300      	str	r3, [sp, #0]
 800e024:	462a      	mov	r2, r5
 800e026:	4630      	mov	r0, r6
 800e028:	4b09      	ldr	r3, [pc, #36]	; (800e050 <_vfiprintf_r+0x25c>)
 800e02a:	a904      	add	r1, sp, #16
 800e02c:	f7fc fb76 	bl	800a71c <_printf_i>
 800e030:	e7e4      	b.n	800dffc <_vfiprintf_r+0x208>
 800e032:	bf00      	nop
 800e034:	0800e940 	.word	0x0800e940
 800e038:	0800e960 	.word	0x0800e960
 800e03c:	0800e920 	.word	0x0800e920
 800e040:	0800ee04 	.word	0x0800ee04
 800e044:	0800ee0a 	.word	0x0800ee0a
 800e048:	0800ee0e 	.word	0x0800ee0e
 800e04c:	0800a1e5 	.word	0x0800a1e5
 800e050:	0800ddcf 	.word	0x0800ddcf

0800e054 <_read_r>:
 800e054:	b538      	push	{r3, r4, r5, lr}
 800e056:	4604      	mov	r4, r0
 800e058:	4608      	mov	r0, r1
 800e05a:	4611      	mov	r1, r2
 800e05c:	2200      	movs	r2, #0
 800e05e:	4d05      	ldr	r5, [pc, #20]	; (800e074 <_read_r+0x20>)
 800e060:	602a      	str	r2, [r5, #0]
 800e062:	461a      	mov	r2, r3
 800e064:	f7f6 fe4b 	bl	8004cfe <_read>
 800e068:	1c43      	adds	r3, r0, #1
 800e06a:	d102      	bne.n	800e072 <_read_r+0x1e>
 800e06c:	682b      	ldr	r3, [r5, #0]
 800e06e:	b103      	cbz	r3, 800e072 <_read_r+0x1e>
 800e070:	6023      	str	r3, [r4, #0]
 800e072:	bd38      	pop	{r3, r4, r5, pc}
 800e074:	20009fdc 	.word	0x20009fdc

0800e078 <nan>:
 800e078:	2000      	movs	r0, #0
 800e07a:	4901      	ldr	r1, [pc, #4]	; (800e080 <nan+0x8>)
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	7ff80000 	.word	0x7ff80000

0800e084 <nanf>:
 800e084:	4800      	ldr	r0, [pc, #0]	; (800e088 <nanf+0x4>)
 800e086:	4770      	bx	lr
 800e088:	7fc00000 	.word	0x7fc00000

0800e08c <strncmp>:
 800e08c:	4603      	mov	r3, r0
 800e08e:	b510      	push	{r4, lr}
 800e090:	b172      	cbz	r2, 800e0b0 <strncmp+0x24>
 800e092:	3901      	subs	r1, #1
 800e094:	1884      	adds	r4, r0, r2
 800e096:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e09a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e09e:	4290      	cmp	r0, r2
 800e0a0:	d101      	bne.n	800e0a6 <strncmp+0x1a>
 800e0a2:	42a3      	cmp	r3, r4
 800e0a4:	d101      	bne.n	800e0aa <strncmp+0x1e>
 800e0a6:	1a80      	subs	r0, r0, r2
 800e0a8:	bd10      	pop	{r4, pc}
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	d1f3      	bne.n	800e096 <strncmp+0xa>
 800e0ae:	e7fa      	b.n	800e0a6 <strncmp+0x1a>
 800e0b0:	4610      	mov	r0, r2
 800e0b2:	e7f9      	b.n	800e0a8 <strncmp+0x1c>

0800e0b4 <__swbuf_r>:
 800e0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0b6:	460e      	mov	r6, r1
 800e0b8:	4614      	mov	r4, r2
 800e0ba:	4605      	mov	r5, r0
 800e0bc:	b118      	cbz	r0, 800e0c6 <__swbuf_r+0x12>
 800e0be:	6983      	ldr	r3, [r0, #24]
 800e0c0:	b90b      	cbnz	r3, 800e0c6 <__swbuf_r+0x12>
 800e0c2:	f7fb fe29 	bl	8009d18 <__sinit>
 800e0c6:	4b21      	ldr	r3, [pc, #132]	; (800e14c <__swbuf_r+0x98>)
 800e0c8:	429c      	cmp	r4, r3
 800e0ca:	d12b      	bne.n	800e124 <__swbuf_r+0x70>
 800e0cc:	686c      	ldr	r4, [r5, #4]
 800e0ce:	69a3      	ldr	r3, [r4, #24]
 800e0d0:	60a3      	str	r3, [r4, #8]
 800e0d2:	89a3      	ldrh	r3, [r4, #12]
 800e0d4:	071a      	lsls	r2, r3, #28
 800e0d6:	d52f      	bpl.n	800e138 <__swbuf_r+0x84>
 800e0d8:	6923      	ldr	r3, [r4, #16]
 800e0da:	b36b      	cbz	r3, 800e138 <__swbuf_r+0x84>
 800e0dc:	6923      	ldr	r3, [r4, #16]
 800e0de:	6820      	ldr	r0, [r4, #0]
 800e0e0:	b2f6      	uxtb	r6, r6
 800e0e2:	1ac0      	subs	r0, r0, r3
 800e0e4:	6963      	ldr	r3, [r4, #20]
 800e0e6:	4637      	mov	r7, r6
 800e0e8:	4283      	cmp	r3, r0
 800e0ea:	dc04      	bgt.n	800e0f6 <__swbuf_r+0x42>
 800e0ec:	4621      	mov	r1, r4
 800e0ee:	4628      	mov	r0, r5
 800e0f0:	f7fe fc3a 	bl	800c968 <_fflush_r>
 800e0f4:	bb30      	cbnz	r0, 800e144 <__swbuf_r+0x90>
 800e0f6:	68a3      	ldr	r3, [r4, #8]
 800e0f8:	3001      	adds	r0, #1
 800e0fa:	3b01      	subs	r3, #1
 800e0fc:	60a3      	str	r3, [r4, #8]
 800e0fe:	6823      	ldr	r3, [r4, #0]
 800e100:	1c5a      	adds	r2, r3, #1
 800e102:	6022      	str	r2, [r4, #0]
 800e104:	701e      	strb	r6, [r3, #0]
 800e106:	6963      	ldr	r3, [r4, #20]
 800e108:	4283      	cmp	r3, r0
 800e10a:	d004      	beq.n	800e116 <__swbuf_r+0x62>
 800e10c:	89a3      	ldrh	r3, [r4, #12]
 800e10e:	07db      	lsls	r3, r3, #31
 800e110:	d506      	bpl.n	800e120 <__swbuf_r+0x6c>
 800e112:	2e0a      	cmp	r6, #10
 800e114:	d104      	bne.n	800e120 <__swbuf_r+0x6c>
 800e116:	4621      	mov	r1, r4
 800e118:	4628      	mov	r0, r5
 800e11a:	f7fe fc25 	bl	800c968 <_fflush_r>
 800e11e:	b988      	cbnz	r0, 800e144 <__swbuf_r+0x90>
 800e120:	4638      	mov	r0, r7
 800e122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e124:	4b0a      	ldr	r3, [pc, #40]	; (800e150 <__swbuf_r+0x9c>)
 800e126:	429c      	cmp	r4, r3
 800e128:	d101      	bne.n	800e12e <__swbuf_r+0x7a>
 800e12a:	68ac      	ldr	r4, [r5, #8]
 800e12c:	e7cf      	b.n	800e0ce <__swbuf_r+0x1a>
 800e12e:	4b09      	ldr	r3, [pc, #36]	; (800e154 <__swbuf_r+0xa0>)
 800e130:	429c      	cmp	r4, r3
 800e132:	bf08      	it	eq
 800e134:	68ec      	ldreq	r4, [r5, #12]
 800e136:	e7ca      	b.n	800e0ce <__swbuf_r+0x1a>
 800e138:	4621      	mov	r1, r4
 800e13a:	4628      	mov	r0, r5
 800e13c:	f000 f81a 	bl	800e174 <__swsetup_r>
 800e140:	2800      	cmp	r0, #0
 800e142:	d0cb      	beq.n	800e0dc <__swbuf_r+0x28>
 800e144:	f04f 37ff 	mov.w	r7, #4294967295
 800e148:	e7ea      	b.n	800e120 <__swbuf_r+0x6c>
 800e14a:	bf00      	nop
 800e14c:	0800e940 	.word	0x0800e940
 800e150:	0800e960 	.word	0x0800e960
 800e154:	0800e920 	.word	0x0800e920

0800e158 <__ascii_wctomb>:
 800e158:	4603      	mov	r3, r0
 800e15a:	4608      	mov	r0, r1
 800e15c:	b141      	cbz	r1, 800e170 <__ascii_wctomb+0x18>
 800e15e:	2aff      	cmp	r2, #255	; 0xff
 800e160:	d904      	bls.n	800e16c <__ascii_wctomb+0x14>
 800e162:	228a      	movs	r2, #138	; 0x8a
 800e164:	f04f 30ff 	mov.w	r0, #4294967295
 800e168:	601a      	str	r2, [r3, #0]
 800e16a:	4770      	bx	lr
 800e16c:	2001      	movs	r0, #1
 800e16e:	700a      	strb	r2, [r1, #0]
 800e170:	4770      	bx	lr
	...

0800e174 <__swsetup_r>:
 800e174:	4b32      	ldr	r3, [pc, #200]	; (800e240 <__swsetup_r+0xcc>)
 800e176:	b570      	push	{r4, r5, r6, lr}
 800e178:	681d      	ldr	r5, [r3, #0]
 800e17a:	4606      	mov	r6, r0
 800e17c:	460c      	mov	r4, r1
 800e17e:	b125      	cbz	r5, 800e18a <__swsetup_r+0x16>
 800e180:	69ab      	ldr	r3, [r5, #24]
 800e182:	b913      	cbnz	r3, 800e18a <__swsetup_r+0x16>
 800e184:	4628      	mov	r0, r5
 800e186:	f7fb fdc7 	bl	8009d18 <__sinit>
 800e18a:	4b2e      	ldr	r3, [pc, #184]	; (800e244 <__swsetup_r+0xd0>)
 800e18c:	429c      	cmp	r4, r3
 800e18e:	d10f      	bne.n	800e1b0 <__swsetup_r+0x3c>
 800e190:	686c      	ldr	r4, [r5, #4]
 800e192:	89a3      	ldrh	r3, [r4, #12]
 800e194:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e198:	0719      	lsls	r1, r3, #28
 800e19a:	d42c      	bmi.n	800e1f6 <__swsetup_r+0x82>
 800e19c:	06dd      	lsls	r5, r3, #27
 800e19e:	d411      	bmi.n	800e1c4 <__swsetup_r+0x50>
 800e1a0:	2309      	movs	r3, #9
 800e1a2:	6033      	str	r3, [r6, #0]
 800e1a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ac:	81a3      	strh	r3, [r4, #12]
 800e1ae:	e03e      	b.n	800e22e <__swsetup_r+0xba>
 800e1b0:	4b25      	ldr	r3, [pc, #148]	; (800e248 <__swsetup_r+0xd4>)
 800e1b2:	429c      	cmp	r4, r3
 800e1b4:	d101      	bne.n	800e1ba <__swsetup_r+0x46>
 800e1b6:	68ac      	ldr	r4, [r5, #8]
 800e1b8:	e7eb      	b.n	800e192 <__swsetup_r+0x1e>
 800e1ba:	4b24      	ldr	r3, [pc, #144]	; (800e24c <__swsetup_r+0xd8>)
 800e1bc:	429c      	cmp	r4, r3
 800e1be:	bf08      	it	eq
 800e1c0:	68ec      	ldreq	r4, [r5, #12]
 800e1c2:	e7e6      	b.n	800e192 <__swsetup_r+0x1e>
 800e1c4:	0758      	lsls	r0, r3, #29
 800e1c6:	d512      	bpl.n	800e1ee <__swsetup_r+0x7a>
 800e1c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1ca:	b141      	cbz	r1, 800e1de <__swsetup_r+0x6a>
 800e1cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1d0:	4299      	cmp	r1, r3
 800e1d2:	d002      	beq.n	800e1da <__swsetup_r+0x66>
 800e1d4:	4630      	mov	r0, r6
 800e1d6:	f7fb fe8b 	bl	8009ef0 <_free_r>
 800e1da:	2300      	movs	r3, #0
 800e1dc:	6363      	str	r3, [r4, #52]	; 0x34
 800e1de:	89a3      	ldrh	r3, [r4, #12]
 800e1e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e1e4:	81a3      	strh	r3, [r4, #12]
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	6063      	str	r3, [r4, #4]
 800e1ea:	6923      	ldr	r3, [r4, #16]
 800e1ec:	6023      	str	r3, [r4, #0]
 800e1ee:	89a3      	ldrh	r3, [r4, #12]
 800e1f0:	f043 0308 	orr.w	r3, r3, #8
 800e1f4:	81a3      	strh	r3, [r4, #12]
 800e1f6:	6923      	ldr	r3, [r4, #16]
 800e1f8:	b94b      	cbnz	r3, 800e20e <__swsetup_r+0x9a>
 800e1fa:	89a3      	ldrh	r3, [r4, #12]
 800e1fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e204:	d003      	beq.n	800e20e <__swsetup_r+0x9a>
 800e206:	4621      	mov	r1, r4
 800e208:	4630      	mov	r0, r6
 800e20a:	f000 f84d 	bl	800e2a8 <__smakebuf_r>
 800e20e:	89a0      	ldrh	r0, [r4, #12]
 800e210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e214:	f010 0301 	ands.w	r3, r0, #1
 800e218:	d00a      	beq.n	800e230 <__swsetup_r+0xbc>
 800e21a:	2300      	movs	r3, #0
 800e21c:	60a3      	str	r3, [r4, #8]
 800e21e:	6963      	ldr	r3, [r4, #20]
 800e220:	425b      	negs	r3, r3
 800e222:	61a3      	str	r3, [r4, #24]
 800e224:	6923      	ldr	r3, [r4, #16]
 800e226:	b943      	cbnz	r3, 800e23a <__swsetup_r+0xc6>
 800e228:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e22c:	d1ba      	bne.n	800e1a4 <__swsetup_r+0x30>
 800e22e:	bd70      	pop	{r4, r5, r6, pc}
 800e230:	0781      	lsls	r1, r0, #30
 800e232:	bf58      	it	pl
 800e234:	6963      	ldrpl	r3, [r4, #20]
 800e236:	60a3      	str	r3, [r4, #8]
 800e238:	e7f4      	b.n	800e224 <__swsetup_r+0xb0>
 800e23a:	2000      	movs	r0, #0
 800e23c:	e7f7      	b.n	800e22e <__swsetup_r+0xba>
 800e23e:	bf00      	nop
 800e240:	2000024c 	.word	0x2000024c
 800e244:	0800e940 	.word	0x0800e940
 800e248:	0800e960 	.word	0x0800e960
 800e24c:	0800e920 	.word	0x0800e920

0800e250 <abort>:
 800e250:	2006      	movs	r0, #6
 800e252:	b508      	push	{r3, lr}
 800e254:	f000 f8da 	bl	800e40c <raise>
 800e258:	2001      	movs	r0, #1
 800e25a:	f7f6 fd46 	bl	8004cea <_exit>

0800e25e <__swhatbuf_r>:
 800e25e:	b570      	push	{r4, r5, r6, lr}
 800e260:	460e      	mov	r6, r1
 800e262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e266:	4614      	mov	r4, r2
 800e268:	2900      	cmp	r1, #0
 800e26a:	461d      	mov	r5, r3
 800e26c:	b096      	sub	sp, #88	; 0x58
 800e26e:	da08      	bge.n	800e282 <__swhatbuf_r+0x24>
 800e270:	2200      	movs	r2, #0
 800e272:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e276:	602a      	str	r2, [r5, #0]
 800e278:	061a      	lsls	r2, r3, #24
 800e27a:	d410      	bmi.n	800e29e <__swhatbuf_r+0x40>
 800e27c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e280:	e00e      	b.n	800e2a0 <__swhatbuf_r+0x42>
 800e282:	466a      	mov	r2, sp
 800e284:	f000 f8de 	bl	800e444 <_fstat_r>
 800e288:	2800      	cmp	r0, #0
 800e28a:	dbf1      	blt.n	800e270 <__swhatbuf_r+0x12>
 800e28c:	9a01      	ldr	r2, [sp, #4]
 800e28e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e292:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e296:	425a      	negs	r2, r3
 800e298:	415a      	adcs	r2, r3
 800e29a:	602a      	str	r2, [r5, #0]
 800e29c:	e7ee      	b.n	800e27c <__swhatbuf_r+0x1e>
 800e29e:	2340      	movs	r3, #64	; 0x40
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	6023      	str	r3, [r4, #0]
 800e2a4:	b016      	add	sp, #88	; 0x58
 800e2a6:	bd70      	pop	{r4, r5, r6, pc}

0800e2a8 <__smakebuf_r>:
 800e2a8:	898b      	ldrh	r3, [r1, #12]
 800e2aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2ac:	079d      	lsls	r5, r3, #30
 800e2ae:	4606      	mov	r6, r0
 800e2b0:	460c      	mov	r4, r1
 800e2b2:	d507      	bpl.n	800e2c4 <__smakebuf_r+0x1c>
 800e2b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e2b8:	6023      	str	r3, [r4, #0]
 800e2ba:	6123      	str	r3, [r4, #16]
 800e2bc:	2301      	movs	r3, #1
 800e2be:	6163      	str	r3, [r4, #20]
 800e2c0:	b002      	add	sp, #8
 800e2c2:	bd70      	pop	{r4, r5, r6, pc}
 800e2c4:	466a      	mov	r2, sp
 800e2c6:	ab01      	add	r3, sp, #4
 800e2c8:	f7ff ffc9 	bl	800e25e <__swhatbuf_r>
 800e2cc:	9900      	ldr	r1, [sp, #0]
 800e2ce:	4605      	mov	r5, r0
 800e2d0:	4630      	mov	r0, r6
 800e2d2:	f7fb fe75 	bl	8009fc0 <_malloc_r>
 800e2d6:	b948      	cbnz	r0, 800e2ec <__smakebuf_r+0x44>
 800e2d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2dc:	059a      	lsls	r2, r3, #22
 800e2de:	d4ef      	bmi.n	800e2c0 <__smakebuf_r+0x18>
 800e2e0:	f023 0303 	bic.w	r3, r3, #3
 800e2e4:	f043 0302 	orr.w	r3, r3, #2
 800e2e8:	81a3      	strh	r3, [r4, #12]
 800e2ea:	e7e3      	b.n	800e2b4 <__smakebuf_r+0xc>
 800e2ec:	4b0d      	ldr	r3, [pc, #52]	; (800e324 <__smakebuf_r+0x7c>)
 800e2ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800e2f0:	89a3      	ldrh	r3, [r4, #12]
 800e2f2:	6020      	str	r0, [r4, #0]
 800e2f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2f8:	81a3      	strh	r3, [r4, #12]
 800e2fa:	9b00      	ldr	r3, [sp, #0]
 800e2fc:	6120      	str	r0, [r4, #16]
 800e2fe:	6163      	str	r3, [r4, #20]
 800e300:	9b01      	ldr	r3, [sp, #4]
 800e302:	b15b      	cbz	r3, 800e31c <__smakebuf_r+0x74>
 800e304:	4630      	mov	r0, r6
 800e306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e30a:	f000 f8ad 	bl	800e468 <_isatty_r>
 800e30e:	b128      	cbz	r0, 800e31c <__smakebuf_r+0x74>
 800e310:	89a3      	ldrh	r3, [r4, #12]
 800e312:	f023 0303 	bic.w	r3, r3, #3
 800e316:	f043 0301 	orr.w	r3, r3, #1
 800e31a:	81a3      	strh	r3, [r4, #12]
 800e31c:	89a0      	ldrh	r0, [r4, #12]
 800e31e:	4305      	orrs	r5, r0
 800e320:	81a5      	strh	r5, [r4, #12]
 800e322:	e7cd      	b.n	800e2c0 <__smakebuf_r+0x18>
 800e324:	08009cb1 	.word	0x08009cb1

0800e328 <memmove>:
 800e328:	4288      	cmp	r0, r1
 800e32a:	b510      	push	{r4, lr}
 800e32c:	eb01 0402 	add.w	r4, r1, r2
 800e330:	d902      	bls.n	800e338 <memmove+0x10>
 800e332:	4284      	cmp	r4, r0
 800e334:	4623      	mov	r3, r4
 800e336:	d807      	bhi.n	800e348 <memmove+0x20>
 800e338:	1e43      	subs	r3, r0, #1
 800e33a:	42a1      	cmp	r1, r4
 800e33c:	d008      	beq.n	800e350 <memmove+0x28>
 800e33e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e342:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e346:	e7f8      	b.n	800e33a <memmove+0x12>
 800e348:	4601      	mov	r1, r0
 800e34a:	4402      	add	r2, r0
 800e34c:	428a      	cmp	r2, r1
 800e34e:	d100      	bne.n	800e352 <memmove+0x2a>
 800e350:	bd10      	pop	{r4, pc}
 800e352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e35a:	e7f7      	b.n	800e34c <memmove+0x24>

0800e35c <_realloc_r>:
 800e35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e360:	4680      	mov	r8, r0
 800e362:	4614      	mov	r4, r2
 800e364:	460e      	mov	r6, r1
 800e366:	b921      	cbnz	r1, 800e372 <_realloc_r+0x16>
 800e368:	4611      	mov	r1, r2
 800e36a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e36e:	f7fb be27 	b.w	8009fc0 <_malloc_r>
 800e372:	b92a      	cbnz	r2, 800e380 <_realloc_r+0x24>
 800e374:	f7fb fdbc 	bl	8009ef0 <_free_r>
 800e378:	4625      	mov	r5, r4
 800e37a:	4628      	mov	r0, r5
 800e37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e380:	f000 f882 	bl	800e488 <_malloc_usable_size_r>
 800e384:	4284      	cmp	r4, r0
 800e386:	4607      	mov	r7, r0
 800e388:	d802      	bhi.n	800e390 <_realloc_r+0x34>
 800e38a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e38e:	d812      	bhi.n	800e3b6 <_realloc_r+0x5a>
 800e390:	4621      	mov	r1, r4
 800e392:	4640      	mov	r0, r8
 800e394:	f7fb fe14 	bl	8009fc0 <_malloc_r>
 800e398:	4605      	mov	r5, r0
 800e39a:	2800      	cmp	r0, #0
 800e39c:	d0ed      	beq.n	800e37a <_realloc_r+0x1e>
 800e39e:	42bc      	cmp	r4, r7
 800e3a0:	4622      	mov	r2, r4
 800e3a2:	4631      	mov	r1, r6
 800e3a4:	bf28      	it	cs
 800e3a6:	463a      	movcs	r2, r7
 800e3a8:	f7fb fd8c 	bl	8009ec4 <memcpy>
 800e3ac:	4631      	mov	r1, r6
 800e3ae:	4640      	mov	r0, r8
 800e3b0:	f7fb fd9e 	bl	8009ef0 <_free_r>
 800e3b4:	e7e1      	b.n	800e37a <_realloc_r+0x1e>
 800e3b6:	4635      	mov	r5, r6
 800e3b8:	e7df      	b.n	800e37a <_realloc_r+0x1e>

0800e3ba <_raise_r>:
 800e3ba:	291f      	cmp	r1, #31
 800e3bc:	b538      	push	{r3, r4, r5, lr}
 800e3be:	4604      	mov	r4, r0
 800e3c0:	460d      	mov	r5, r1
 800e3c2:	d904      	bls.n	800e3ce <_raise_r+0x14>
 800e3c4:	2316      	movs	r3, #22
 800e3c6:	6003      	str	r3, [r0, #0]
 800e3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3cc:	bd38      	pop	{r3, r4, r5, pc}
 800e3ce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e3d0:	b112      	cbz	r2, 800e3d8 <_raise_r+0x1e>
 800e3d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e3d6:	b94b      	cbnz	r3, 800e3ec <_raise_r+0x32>
 800e3d8:	4620      	mov	r0, r4
 800e3da:	f000 f831 	bl	800e440 <_getpid_r>
 800e3de:	462a      	mov	r2, r5
 800e3e0:	4601      	mov	r1, r0
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3e8:	f000 b818 	b.w	800e41c <_kill_r>
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d00a      	beq.n	800e406 <_raise_r+0x4c>
 800e3f0:	1c59      	adds	r1, r3, #1
 800e3f2:	d103      	bne.n	800e3fc <_raise_r+0x42>
 800e3f4:	2316      	movs	r3, #22
 800e3f6:	6003      	str	r3, [r0, #0]
 800e3f8:	2001      	movs	r0, #1
 800e3fa:	e7e7      	b.n	800e3cc <_raise_r+0x12>
 800e3fc:	2400      	movs	r4, #0
 800e3fe:	4628      	mov	r0, r5
 800e400:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e404:	4798      	blx	r3
 800e406:	2000      	movs	r0, #0
 800e408:	e7e0      	b.n	800e3cc <_raise_r+0x12>
	...

0800e40c <raise>:
 800e40c:	4b02      	ldr	r3, [pc, #8]	; (800e418 <raise+0xc>)
 800e40e:	4601      	mov	r1, r0
 800e410:	6818      	ldr	r0, [r3, #0]
 800e412:	f7ff bfd2 	b.w	800e3ba <_raise_r>
 800e416:	bf00      	nop
 800e418:	2000024c 	.word	0x2000024c

0800e41c <_kill_r>:
 800e41c:	b538      	push	{r3, r4, r5, lr}
 800e41e:	2300      	movs	r3, #0
 800e420:	4d06      	ldr	r5, [pc, #24]	; (800e43c <_kill_r+0x20>)
 800e422:	4604      	mov	r4, r0
 800e424:	4608      	mov	r0, r1
 800e426:	4611      	mov	r1, r2
 800e428:	602b      	str	r3, [r5, #0]
 800e42a:	f7f6 fc4e 	bl	8004cca <_kill>
 800e42e:	1c43      	adds	r3, r0, #1
 800e430:	d102      	bne.n	800e438 <_kill_r+0x1c>
 800e432:	682b      	ldr	r3, [r5, #0]
 800e434:	b103      	cbz	r3, 800e438 <_kill_r+0x1c>
 800e436:	6023      	str	r3, [r4, #0]
 800e438:	bd38      	pop	{r3, r4, r5, pc}
 800e43a:	bf00      	nop
 800e43c:	20009fdc 	.word	0x20009fdc

0800e440 <_getpid_r>:
 800e440:	f7f6 bc3c 	b.w	8004cbc <_getpid>

0800e444 <_fstat_r>:
 800e444:	b538      	push	{r3, r4, r5, lr}
 800e446:	2300      	movs	r3, #0
 800e448:	4d06      	ldr	r5, [pc, #24]	; (800e464 <_fstat_r+0x20>)
 800e44a:	4604      	mov	r4, r0
 800e44c:	4608      	mov	r0, r1
 800e44e:	4611      	mov	r1, r2
 800e450:	602b      	str	r3, [r5, #0]
 800e452:	f7f6 fc98 	bl	8004d86 <_fstat>
 800e456:	1c43      	adds	r3, r0, #1
 800e458:	d102      	bne.n	800e460 <_fstat_r+0x1c>
 800e45a:	682b      	ldr	r3, [r5, #0]
 800e45c:	b103      	cbz	r3, 800e460 <_fstat_r+0x1c>
 800e45e:	6023      	str	r3, [r4, #0]
 800e460:	bd38      	pop	{r3, r4, r5, pc}
 800e462:	bf00      	nop
 800e464:	20009fdc 	.word	0x20009fdc

0800e468 <_isatty_r>:
 800e468:	b538      	push	{r3, r4, r5, lr}
 800e46a:	2300      	movs	r3, #0
 800e46c:	4d05      	ldr	r5, [pc, #20]	; (800e484 <_isatty_r+0x1c>)
 800e46e:	4604      	mov	r4, r0
 800e470:	4608      	mov	r0, r1
 800e472:	602b      	str	r3, [r5, #0]
 800e474:	f7f6 fc96 	bl	8004da4 <_isatty>
 800e478:	1c43      	adds	r3, r0, #1
 800e47a:	d102      	bne.n	800e482 <_isatty_r+0x1a>
 800e47c:	682b      	ldr	r3, [r5, #0]
 800e47e:	b103      	cbz	r3, 800e482 <_isatty_r+0x1a>
 800e480:	6023      	str	r3, [r4, #0]
 800e482:	bd38      	pop	{r3, r4, r5, pc}
 800e484:	20009fdc 	.word	0x20009fdc

0800e488 <_malloc_usable_size_r>:
 800e488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e48c:	1f18      	subs	r0, r3, #4
 800e48e:	2b00      	cmp	r3, #0
 800e490:	bfbc      	itt	lt
 800e492:	580b      	ldrlt	r3, [r1, r0]
 800e494:	18c0      	addlt	r0, r0, r3
 800e496:	4770      	bx	lr

0800e498 <_init>:
 800e498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e49a:	bf00      	nop
 800e49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e49e:	bc08      	pop	{r3}
 800e4a0:	469e      	mov	lr, r3
 800e4a2:	4770      	bx	lr

0800e4a4 <_fini>:
 800e4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4a6:	bf00      	nop
 800e4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4aa:	bc08      	pop	{r3}
 800e4ac:	469e      	mov	lr, r3
 800e4ae:	4770      	bx	lr
