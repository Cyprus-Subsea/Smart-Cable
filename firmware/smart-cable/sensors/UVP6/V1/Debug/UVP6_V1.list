
UVP6_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8e0  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  0800aad0  0800aad0  0001aad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b198  0800b198  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b198  0800b198  0001b198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1a0  0800b1a0  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1a0  0800b1a0  0001b1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1a4  0800b1a4  0001b1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800b1a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000be94  200001f8  0800b3a0  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000c08c  0800b3a0  0002c08c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b26  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a4d  00000000  00000000  00034d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  00038798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001368  00000000  00000000  00039c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002318b  00000000  00000000  0003aff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001716c  00000000  00000000  0005e17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c555d  00000000  00000000  000752e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a844  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bdc  00000000  00000000  0013a894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001f8 	.word	0x200001f8
 800020c:	00000000 	.word	0x00000000
 8000210:	0800aab8 	.word	0x0800aab8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001fc 	.word	0x200001fc
 800022c:	0800aab8 	.word	0x0800aab8

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	; 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__gesf2>:
 8000e14:	f04f 3cff 	mov.w	ip, #4294967295
 8000e18:	e006      	b.n	8000e28 <__cmpsf2+0x4>
 8000e1a:	bf00      	nop

08000e1c <__lesf2>:
 8000e1c:	f04f 0c01 	mov.w	ip, #1
 8000e20:	e002      	b.n	8000e28 <__cmpsf2+0x4>
 8000e22:	bf00      	nop

08000e24 <__cmpsf2>:
 8000e24:	f04f 0c01 	mov.w	ip, #1
 8000e28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e2c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e38:	bf18      	it	ne
 8000e3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e3e:	d011      	beq.n	8000e64 <__cmpsf2+0x40>
 8000e40:	b001      	add	sp, #4
 8000e42:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e46:	bf18      	it	ne
 8000e48:	ea90 0f01 	teqne	r0, r1
 8000e4c:	bf58      	it	pl
 8000e4e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e52:	bf88      	it	hi
 8000e54:	17c8      	asrhi	r0, r1, #31
 8000e56:	bf38      	it	cc
 8000e58:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e5c:	bf18      	it	ne
 8000e5e:	f040 0001 	orrne.w	r0, r0, #1
 8000e62:	4770      	bx	lr
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	d102      	bne.n	8000e70 <__cmpsf2+0x4c>
 8000e6a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e6e:	d105      	bne.n	8000e7c <__cmpsf2+0x58>
 8000e70:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e74:	d1e4      	bne.n	8000e40 <__cmpsf2+0x1c>
 8000e76:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e7a:	d0e1      	beq.n	8000e40 <__cmpsf2+0x1c>
 8000e7c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <__aeabi_cfrcmple>:
 8000e84:	4684      	mov	ip, r0
 8000e86:	4608      	mov	r0, r1
 8000e88:	4661      	mov	r1, ip
 8000e8a:	e7ff      	b.n	8000e8c <__aeabi_cfcmpeq>

08000e8c <__aeabi_cfcmpeq>:
 8000e8c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e8e:	f7ff ffc9 	bl	8000e24 <__cmpsf2>
 8000e92:	2800      	cmp	r0, #0
 8000e94:	bf48      	it	mi
 8000e96:	f110 0f00 	cmnmi.w	r0, #0
 8000e9a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e9c <__aeabi_fcmpeq>:
 8000e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea0:	f7ff fff4 	bl	8000e8c <__aeabi_cfcmpeq>
 8000ea4:	bf0c      	ite	eq
 8000ea6:	2001      	moveq	r0, #1
 8000ea8:	2000      	movne	r0, #0
 8000eaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eae:	bf00      	nop

08000eb0 <__aeabi_fcmplt>:
 8000eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb4:	f7ff ffea 	bl	8000e8c <__aeabi_cfcmpeq>
 8000eb8:	bf34      	ite	cc
 8000eba:	2001      	movcc	r0, #1
 8000ebc:	2000      	movcs	r0, #0
 8000ebe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_fcmple>:
 8000ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec8:	f7ff ffe0 	bl	8000e8c <__aeabi_cfcmpeq>
 8000ecc:	bf94      	ite	ls
 8000ece:	2001      	movls	r0, #1
 8000ed0:	2000      	movhi	r0, #0
 8000ed2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_fcmpge>:
 8000ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000edc:	f7ff ffd2 	bl	8000e84 <__aeabi_cfrcmple>
 8000ee0:	bf94      	ite	ls
 8000ee2:	2001      	movls	r0, #1
 8000ee4:	2000      	movhi	r0, #0
 8000ee6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eea:	bf00      	nop

08000eec <__aeabi_fcmpgt>:
 8000eec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef0:	f7ff ffc8 	bl	8000e84 <__aeabi_cfrcmple>
 8000ef4:	bf34      	ite	cc
 8000ef6:	2001      	movcc	r0, #1
 8000ef8:	2000      	movcs	r0, #0
 8000efa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000efe:	bf00      	nop

08000f00 <__aeabi_fcmpun>:
 8000f00:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f0c:	d102      	bne.n	8000f14 <__aeabi_fcmpun+0x14>
 8000f0e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f12:	d108      	bne.n	8000f26 <__aeabi_fcmpun+0x26>
 8000f14:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f18:	d102      	bne.n	8000f20 <__aeabi_fcmpun+0x20>
 8000f1a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f1e:	d102      	bne.n	8000f26 <__aeabi_fcmpun+0x26>
 8000f20:	f04f 0000 	mov.w	r0, #0
 8000f24:	4770      	bx	lr
 8000f26:	f04f 0001 	mov.w	r0, #1
 8000f2a:	4770      	bx	lr

08000f2c <__aeabi_uldivmod>:
 8000f2c:	b953      	cbnz	r3, 8000f44 <__aeabi_uldivmod+0x18>
 8000f2e:	b94a      	cbnz	r2, 8000f44 <__aeabi_uldivmod+0x18>
 8000f30:	2900      	cmp	r1, #0
 8000f32:	bf08      	it	eq
 8000f34:	2800      	cmpeq	r0, #0
 8000f36:	bf1c      	itt	ne
 8000f38:	f04f 31ff 	movne.w	r1, #4294967295
 8000f3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000f40:	f000 b9ae 	b.w	80012a0 <__aeabi_idiv0>
 8000f44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f4c:	f000 f83e 	bl	8000fcc <__udivmoddi4>
 8000f50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f58:	b004      	add	sp, #16
 8000f5a:	4770      	bx	lr

08000f5c <__aeabi_d2lz>:
 8000f5c:	b538      	push	{r3, r4, r5, lr}
 8000f5e:	4605      	mov	r5, r0
 8000f60:	460c      	mov	r4, r1
 8000f62:	2200      	movs	r2, #0
 8000f64:	2300      	movs	r3, #0
 8000f66:	4628      	mov	r0, r5
 8000f68:	4621      	mov	r1, r4
 8000f6a:	f7ff fd97 	bl	8000a9c <__aeabi_dcmplt>
 8000f6e:	b928      	cbnz	r0, 8000f7c <__aeabi_d2lz+0x20>
 8000f70:	4628      	mov	r0, r5
 8000f72:	4621      	mov	r1, r4
 8000f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f78:	f000 b80a 	b.w	8000f90 <__aeabi_d2ulz>
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000f82:	f000 f805 	bl	8000f90 <__aeabi_d2ulz>
 8000f86:	4240      	negs	r0, r0
 8000f88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f8c:	bd38      	pop	{r3, r4, r5, pc}
 8000f8e:	bf00      	nop

08000f90 <__aeabi_d2ulz>:
 8000f90:	b5d0      	push	{r4, r6, r7, lr}
 8000f92:	2200      	movs	r2, #0
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <__aeabi_d2ulz+0x34>)
 8000f96:	4606      	mov	r6, r0
 8000f98:	460f      	mov	r7, r1
 8000f9a:	f7ff fb0d 	bl	80005b8 <__aeabi_dmul>
 8000f9e:	f7ff fdbb 	bl	8000b18 <__aeabi_d2uiz>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	f7ff fa8e 	bl	80004c4 <__aeabi_ui2d>
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <__aeabi_d2ulz+0x38>)
 8000fac:	f7ff fb04 	bl	80005b8 <__aeabi_dmul>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	4639      	mov	r1, r7
 8000fb8:	f7ff f946 	bl	8000248 <__aeabi_dsub>
 8000fbc:	f7ff fdac 	bl	8000b18 <__aeabi_d2uiz>
 8000fc0:	4621      	mov	r1, r4
 8000fc2:	bdd0      	pop	{r4, r6, r7, pc}
 8000fc4:	3df00000 	.word	0x3df00000
 8000fc8:	41f00000 	.word	0x41f00000

08000fcc <__udivmoddi4>:
 8000fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fd0:	9e08      	ldr	r6, [sp, #32]
 8000fd2:	460d      	mov	r5, r1
 8000fd4:	4604      	mov	r4, r0
 8000fd6:	4688      	mov	r8, r1
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d14d      	bne.n	8001078 <__udivmoddi4+0xac>
 8000fdc:	428a      	cmp	r2, r1
 8000fde:	4694      	mov	ip, r2
 8000fe0:	d968      	bls.n	80010b4 <__udivmoddi4+0xe8>
 8000fe2:	fab2 f282 	clz	r2, r2
 8000fe6:	b152      	cbz	r2, 8000ffe <__udivmoddi4+0x32>
 8000fe8:	fa01 f302 	lsl.w	r3, r1, r2
 8000fec:	f1c2 0120 	rsb	r1, r2, #32
 8000ff0:	fa20 f101 	lsr.w	r1, r0, r1
 8000ff4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ff8:	ea41 0803 	orr.w	r8, r1, r3
 8000ffc:	4094      	lsls	r4, r2
 8000ffe:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001002:	fbb8 f7f1 	udiv	r7, r8, r1
 8001006:	fa1f fe8c 	uxth.w	lr, ip
 800100a:	fb01 8817 	mls	r8, r1, r7, r8
 800100e:	fb07 f00e 	mul.w	r0, r7, lr
 8001012:	0c23      	lsrs	r3, r4, #16
 8001014:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001018:	4298      	cmp	r0, r3
 800101a:	d90a      	bls.n	8001032 <__udivmoddi4+0x66>
 800101c:	eb1c 0303 	adds.w	r3, ip, r3
 8001020:	f107 35ff 	add.w	r5, r7, #4294967295
 8001024:	f080 811e 	bcs.w	8001264 <__udivmoddi4+0x298>
 8001028:	4298      	cmp	r0, r3
 800102a:	f240 811b 	bls.w	8001264 <__udivmoddi4+0x298>
 800102e:	3f02      	subs	r7, #2
 8001030:	4463      	add	r3, ip
 8001032:	1a1b      	subs	r3, r3, r0
 8001034:	fbb3 f0f1 	udiv	r0, r3, r1
 8001038:	fb01 3310 	mls	r3, r1, r0, r3
 800103c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001040:	b2a4      	uxth	r4, r4
 8001042:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001046:	45a6      	cmp	lr, r4
 8001048:	d90a      	bls.n	8001060 <__udivmoddi4+0x94>
 800104a:	eb1c 0404 	adds.w	r4, ip, r4
 800104e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001052:	f080 8109 	bcs.w	8001268 <__udivmoddi4+0x29c>
 8001056:	45a6      	cmp	lr, r4
 8001058:	f240 8106 	bls.w	8001268 <__udivmoddi4+0x29c>
 800105c:	4464      	add	r4, ip
 800105e:	3802      	subs	r0, #2
 8001060:	2100      	movs	r1, #0
 8001062:	eba4 040e 	sub.w	r4, r4, lr
 8001066:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800106a:	b11e      	cbz	r6, 8001074 <__udivmoddi4+0xa8>
 800106c:	2300      	movs	r3, #0
 800106e:	40d4      	lsrs	r4, r2
 8001070:	e9c6 4300 	strd	r4, r3, [r6]
 8001074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001078:	428b      	cmp	r3, r1
 800107a:	d908      	bls.n	800108e <__udivmoddi4+0xc2>
 800107c:	2e00      	cmp	r6, #0
 800107e:	f000 80ee 	beq.w	800125e <__udivmoddi4+0x292>
 8001082:	2100      	movs	r1, #0
 8001084:	e9c6 0500 	strd	r0, r5, [r6]
 8001088:	4608      	mov	r0, r1
 800108a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800108e:	fab3 f183 	clz	r1, r3
 8001092:	2900      	cmp	r1, #0
 8001094:	d14a      	bne.n	800112c <__udivmoddi4+0x160>
 8001096:	42ab      	cmp	r3, r5
 8001098:	d302      	bcc.n	80010a0 <__udivmoddi4+0xd4>
 800109a:	4282      	cmp	r2, r0
 800109c:	f200 80fc 	bhi.w	8001298 <__udivmoddi4+0x2cc>
 80010a0:	1a84      	subs	r4, r0, r2
 80010a2:	eb65 0303 	sbc.w	r3, r5, r3
 80010a6:	2001      	movs	r0, #1
 80010a8:	4698      	mov	r8, r3
 80010aa:	2e00      	cmp	r6, #0
 80010ac:	d0e2      	beq.n	8001074 <__udivmoddi4+0xa8>
 80010ae:	e9c6 4800 	strd	r4, r8, [r6]
 80010b2:	e7df      	b.n	8001074 <__udivmoddi4+0xa8>
 80010b4:	b902      	cbnz	r2, 80010b8 <__udivmoddi4+0xec>
 80010b6:	deff      	udf	#255	; 0xff
 80010b8:	fab2 f282 	clz	r2, r2
 80010bc:	2a00      	cmp	r2, #0
 80010be:	f040 8091 	bne.w	80011e4 <__udivmoddi4+0x218>
 80010c2:	eba1 000c 	sub.w	r0, r1, ip
 80010c6:	2101      	movs	r1, #1
 80010c8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010cc:	fa1f fe8c 	uxth.w	lr, ip
 80010d0:	fbb0 f3f7 	udiv	r3, r0, r7
 80010d4:	fb07 0013 	mls	r0, r7, r3, r0
 80010d8:	0c25      	lsrs	r5, r4, #16
 80010da:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80010de:	fb0e f003 	mul.w	r0, lr, r3
 80010e2:	42a8      	cmp	r0, r5
 80010e4:	d908      	bls.n	80010f8 <__udivmoddi4+0x12c>
 80010e6:	eb1c 0505 	adds.w	r5, ip, r5
 80010ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80010ee:	d202      	bcs.n	80010f6 <__udivmoddi4+0x12a>
 80010f0:	42a8      	cmp	r0, r5
 80010f2:	f200 80ce 	bhi.w	8001292 <__udivmoddi4+0x2c6>
 80010f6:	4643      	mov	r3, r8
 80010f8:	1a2d      	subs	r5, r5, r0
 80010fa:	fbb5 f0f7 	udiv	r0, r5, r7
 80010fe:	fb07 5510 	mls	r5, r7, r0, r5
 8001102:	fb0e fe00 	mul.w	lr, lr, r0
 8001106:	b2a4      	uxth	r4, r4
 8001108:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800110c:	45a6      	cmp	lr, r4
 800110e:	d908      	bls.n	8001122 <__udivmoddi4+0x156>
 8001110:	eb1c 0404 	adds.w	r4, ip, r4
 8001114:	f100 35ff 	add.w	r5, r0, #4294967295
 8001118:	d202      	bcs.n	8001120 <__udivmoddi4+0x154>
 800111a:	45a6      	cmp	lr, r4
 800111c:	f200 80b6 	bhi.w	800128c <__udivmoddi4+0x2c0>
 8001120:	4628      	mov	r0, r5
 8001122:	eba4 040e 	sub.w	r4, r4, lr
 8001126:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800112a:	e79e      	b.n	800106a <__udivmoddi4+0x9e>
 800112c:	f1c1 0720 	rsb	r7, r1, #32
 8001130:	408b      	lsls	r3, r1
 8001132:	fa22 fc07 	lsr.w	ip, r2, r7
 8001136:	ea4c 0c03 	orr.w	ip, ip, r3
 800113a:	fa25 fa07 	lsr.w	sl, r5, r7
 800113e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001142:	fbba f8f9 	udiv	r8, sl, r9
 8001146:	fa20 f307 	lsr.w	r3, r0, r7
 800114a:	fb09 aa18 	mls	sl, r9, r8, sl
 800114e:	408d      	lsls	r5, r1
 8001150:	fa1f fe8c 	uxth.w	lr, ip
 8001154:	431d      	orrs	r5, r3
 8001156:	fa00 f301 	lsl.w	r3, r0, r1
 800115a:	fb08 f00e 	mul.w	r0, r8, lr
 800115e:	0c2c      	lsrs	r4, r5, #16
 8001160:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001164:	42a0      	cmp	r0, r4
 8001166:	fa02 f201 	lsl.w	r2, r2, r1
 800116a:	d90b      	bls.n	8001184 <__udivmoddi4+0x1b8>
 800116c:	eb1c 0404 	adds.w	r4, ip, r4
 8001170:	f108 3aff 	add.w	sl, r8, #4294967295
 8001174:	f080 8088 	bcs.w	8001288 <__udivmoddi4+0x2bc>
 8001178:	42a0      	cmp	r0, r4
 800117a:	f240 8085 	bls.w	8001288 <__udivmoddi4+0x2bc>
 800117e:	f1a8 0802 	sub.w	r8, r8, #2
 8001182:	4464      	add	r4, ip
 8001184:	1a24      	subs	r4, r4, r0
 8001186:	fbb4 f0f9 	udiv	r0, r4, r9
 800118a:	fb09 4410 	mls	r4, r9, r0, r4
 800118e:	fb00 fe0e 	mul.w	lr, r0, lr
 8001192:	b2ad      	uxth	r5, r5
 8001194:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001198:	45a6      	cmp	lr, r4
 800119a:	d908      	bls.n	80011ae <__udivmoddi4+0x1e2>
 800119c:	eb1c 0404 	adds.w	r4, ip, r4
 80011a0:	f100 35ff 	add.w	r5, r0, #4294967295
 80011a4:	d26c      	bcs.n	8001280 <__udivmoddi4+0x2b4>
 80011a6:	45a6      	cmp	lr, r4
 80011a8:	d96a      	bls.n	8001280 <__udivmoddi4+0x2b4>
 80011aa:	3802      	subs	r0, #2
 80011ac:	4464      	add	r4, ip
 80011ae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80011b2:	fba0 9502 	umull	r9, r5, r0, r2
 80011b6:	eba4 040e 	sub.w	r4, r4, lr
 80011ba:	42ac      	cmp	r4, r5
 80011bc:	46c8      	mov	r8, r9
 80011be:	46ae      	mov	lr, r5
 80011c0:	d356      	bcc.n	8001270 <__udivmoddi4+0x2a4>
 80011c2:	d053      	beq.n	800126c <__udivmoddi4+0x2a0>
 80011c4:	2e00      	cmp	r6, #0
 80011c6:	d069      	beq.n	800129c <__udivmoddi4+0x2d0>
 80011c8:	ebb3 0208 	subs.w	r2, r3, r8
 80011cc:	eb64 040e 	sbc.w	r4, r4, lr
 80011d0:	fa22 f301 	lsr.w	r3, r2, r1
 80011d4:	fa04 f707 	lsl.w	r7, r4, r7
 80011d8:	431f      	orrs	r7, r3
 80011da:	40cc      	lsrs	r4, r1
 80011dc:	e9c6 7400 	strd	r7, r4, [r6]
 80011e0:	2100      	movs	r1, #0
 80011e2:	e747      	b.n	8001074 <__udivmoddi4+0xa8>
 80011e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80011e8:	f1c2 0120 	rsb	r1, r2, #32
 80011ec:	fa25 f301 	lsr.w	r3, r5, r1
 80011f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011f4:	fa20 f101 	lsr.w	r1, r0, r1
 80011f8:	4095      	lsls	r5, r2
 80011fa:	430d      	orrs	r5, r1
 80011fc:	fbb3 f1f7 	udiv	r1, r3, r7
 8001200:	fb07 3311 	mls	r3, r7, r1, r3
 8001204:	fa1f fe8c 	uxth.w	lr, ip
 8001208:	0c28      	lsrs	r0, r5, #16
 800120a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800120e:	fb01 f30e 	mul.w	r3, r1, lr
 8001212:	4283      	cmp	r3, r0
 8001214:	fa04 f402 	lsl.w	r4, r4, r2
 8001218:	d908      	bls.n	800122c <__udivmoddi4+0x260>
 800121a:	eb1c 0000 	adds.w	r0, ip, r0
 800121e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001222:	d22f      	bcs.n	8001284 <__udivmoddi4+0x2b8>
 8001224:	4283      	cmp	r3, r0
 8001226:	d92d      	bls.n	8001284 <__udivmoddi4+0x2b8>
 8001228:	3902      	subs	r1, #2
 800122a:	4460      	add	r0, ip
 800122c:	1ac0      	subs	r0, r0, r3
 800122e:	fbb0 f3f7 	udiv	r3, r0, r7
 8001232:	fb07 0013 	mls	r0, r7, r3, r0
 8001236:	b2ad      	uxth	r5, r5
 8001238:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800123c:	fb03 f00e 	mul.w	r0, r3, lr
 8001240:	42a8      	cmp	r0, r5
 8001242:	d908      	bls.n	8001256 <__udivmoddi4+0x28a>
 8001244:	eb1c 0505 	adds.w	r5, ip, r5
 8001248:	f103 38ff 	add.w	r8, r3, #4294967295
 800124c:	d216      	bcs.n	800127c <__udivmoddi4+0x2b0>
 800124e:	42a8      	cmp	r0, r5
 8001250:	d914      	bls.n	800127c <__udivmoddi4+0x2b0>
 8001252:	3b02      	subs	r3, #2
 8001254:	4465      	add	r5, ip
 8001256:	1a28      	subs	r0, r5, r0
 8001258:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800125c:	e738      	b.n	80010d0 <__udivmoddi4+0x104>
 800125e:	4631      	mov	r1, r6
 8001260:	4630      	mov	r0, r6
 8001262:	e707      	b.n	8001074 <__udivmoddi4+0xa8>
 8001264:	462f      	mov	r7, r5
 8001266:	e6e4      	b.n	8001032 <__udivmoddi4+0x66>
 8001268:	4618      	mov	r0, r3
 800126a:	e6f9      	b.n	8001060 <__udivmoddi4+0x94>
 800126c:	454b      	cmp	r3, r9
 800126e:	d2a9      	bcs.n	80011c4 <__udivmoddi4+0x1f8>
 8001270:	ebb9 0802 	subs.w	r8, r9, r2
 8001274:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001278:	3801      	subs	r0, #1
 800127a:	e7a3      	b.n	80011c4 <__udivmoddi4+0x1f8>
 800127c:	4643      	mov	r3, r8
 800127e:	e7ea      	b.n	8001256 <__udivmoddi4+0x28a>
 8001280:	4628      	mov	r0, r5
 8001282:	e794      	b.n	80011ae <__udivmoddi4+0x1e2>
 8001284:	4641      	mov	r1, r8
 8001286:	e7d1      	b.n	800122c <__udivmoddi4+0x260>
 8001288:	46d0      	mov	r8, sl
 800128a:	e77b      	b.n	8001184 <__udivmoddi4+0x1b8>
 800128c:	4464      	add	r4, ip
 800128e:	3802      	subs	r0, #2
 8001290:	e747      	b.n	8001122 <__udivmoddi4+0x156>
 8001292:	3b02      	subs	r3, #2
 8001294:	4465      	add	r5, ip
 8001296:	e72f      	b.n	80010f8 <__udivmoddi4+0x12c>
 8001298:	4608      	mov	r0, r1
 800129a:	e706      	b.n	80010aa <__udivmoddi4+0xde>
 800129c:	4631      	mov	r1, r6
 800129e:	e6e9      	b.n	8001074 <__udivmoddi4+0xa8>

080012a0 <__aeabi_idiv0>:
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop

080012a4 <uvp6_init>:
int (*uvp6_functions[UVP6_MSG_NUM_OF_FUNCTIONS])(uvp6* uvp6_obj,uint8_t* msg);
char*  uvp6_messages_strings[UVP6_MSG_NUM_OF_FUNCTIONS];
const char* uvp6_commands_strings[]={"$start:ACQ_CSCS_002H,","$stop;\n","wkp;\n","$start:ACQ_CSCS_052L,"};

void uvp6_init(uvp6* uvp6_obj)
{
 80012a4:	b5b0      	push	{r4, r5, r7, lr}
 80012a6:	b096      	sub	sp, #88	; 0x58
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	uvp6_messages_init(uvp6_obj);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 fa2d 	bl	800170c <uvp6_messages_init>

	osMessageQDef(uvp6_events_q, 20, uint8_t);
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <uvp6_init+0x90>)
 80012b4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80012b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uvp6_obj->events_q= osMessageCreate(osMessageQ(uvp6_events_q), NULL);
 80012be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f004 f8b8 	bl	800543a <osMessageCreate>
 80012ca:	4602      	mov	r2, r0
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	609a      	str	r2, [r3, #8]

	osMessageQDef(uvp6_media_rx_q, 20, uint16_t);
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <uvp6_init+0x94>)
 80012d2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80012d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uvp6_obj->media_rx_messages_q= osMessageCreate(osMessageQ(uvp6_media_rx_q), NULL);
 80012dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 f8a9 	bl	800543a <osMessageCreate>
 80012e8:	4602      	mov	r2, r0
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	601a      	str	r2, [r3, #0]

	osMessageQDef(uvp6_media_tx_q, 400, uint8_t);
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <uvp6_init+0x98>)
 80012f0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80012f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uvp6_obj->media_tx_q = osMessageCreate(osMessageQ(uvp6_media_tx_q), NULL);
 80012fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f004 f89a 	bl	800543a <osMessageCreate>
 8001306:	4602      	mov	r2, r0
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	605a      	str	r2, [r3, #4]

	osThreadDef(uvp6_task, uvp6_loop, osPriorityNormal, 0, 256);
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <uvp6_init+0x9c>)
 800130e:	f107 040c 	add.w	r4, r7, #12
 8001312:	461d      	mov	r5, r3
 8001314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001318:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800131c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(uvp6_task), uvp6_obj);
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4618      	mov	r0, r3
 8001328:	f004 f827 	bl	800537a <osThreadCreate>
}
 800132c:	bf00      	nop
 800132e:	3758      	adds	r7, #88	; 0x58
 8001330:	46bd      	mov	sp, r7
 8001332:	bdb0      	pop	{r4, r5, r7, pc}
 8001334:	0800ab1c 	.word	0x0800ab1c
 8001338:	0800ab2c 	.word	0x0800ab2c
 800133c:	0800ab3c 	.word	0x0800ab3c
 8001340:	0800ab4c 	.word	0x0800ab4c

08001344 <uvp6_media_process_byte>:

void uvp6_media_process_byte(uvp6* uvp6_obj,uint8_t rx_byte)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	70fb      	strb	r3, [r7, #3]
	if(uvp6_obj->media_status==UVP6_MEDIA_READY)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7b9b      	ldrb	r3, [r3, #14]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d15f      	bne.n	8001418 <uvp6_media_process_byte+0xd4>
	{
		uvp6_obj->rx_buffer[uvp6_obj->rx_buffer_indx]=rx_byte;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 800135e:	b29b      	uxth	r3, r3
 8001360:	461a      	mov	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	78fa      	ldrb	r2, [r7, #3]
 8001368:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		if(rx_byte=='\n')
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	2b0a      	cmp	r3, #10
 8001370:	d133      	bne.n	80013da <uvp6_media_process_byte+0x96>
		{
			uvp6_obj->rx_buffer[uvp6_obj->rx_buffer_indx]=0x00;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 8001378:	b29b      	uxth	r3, r3
 800137a:	461a      	mov	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4413      	add	r3, r2
 8001380:	2200      	movs	r2, #0
 8001382:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			osMessagePut(uvp6_obj->media_rx_messages_q,uvp6_obj->rx_buffer_new_string_indx,1);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6818      	ldr	r0, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f8b3 345c 	ldrh.w	r3, [r3, #1116]	; 0x45c
 8001390:	b29b      	uxth	r3, r3
 8001392:	2201      	movs	r2, #1
 8001394:	4619      	mov	r1, r3
 8001396:	f004 f879 	bl	800548c <osMessagePut>
			if(uvp6_obj->rx_buffer_indx>UVP6_RX_BUFFER_THR) uvp6_obj->rx_buffer_indx=0;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80013a6:	d907      	bls.n	80013b8 <uvp6_media_process_byte+0x74>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 80013b6:	e008      	b.n	80013ca <uvp6_media_process_byte+0x86>
			else  uvp6_obj->rx_buffer_indx++;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80013be:	b29b      	uxth	r3, r3
 80013c0:	3301      	adds	r3, #1
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
			uvp6_obj->rx_buffer_new_string_indx=uvp6_obj->rx_buffer_indx;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
 80013d8:	e008      	b.n	80013ec <uvp6_media_process_byte+0xa8>
		}
		else uvp6_obj->rx_buffer_indx++;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	3301      	adds	r3, #1
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
		if(uvp6_obj->rx_buffer_indx==UVP6_RX_BUFFER_SIZE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f8:	d11c      	bne.n	8001434 <uvp6_media_process_byte+0xf0>
		{
			uvp6_obj->rx_buffer_indx=0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 8001402:	2200      	movs	r2, #0
 8001404:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
			uvp6_obj->rx_buffer_new_string_indx=uvp6_obj->rx_buffer_indx;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 800140e:	b29a      	uxth	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
	else
	{
		uvp6_obj->rx_buffer_indx=0;
		uvp6_obj->rx_buffer_new_string_indx=uvp6_obj->rx_buffer_indx;
	}
}
 8001416:	e00d      	b.n	8001434 <uvp6_media_process_byte+0xf0>
		uvp6_obj->rx_buffer_indx=0;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 8001420:	2200      	movs	r2, #0
 8001422:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
		uvp6_obj->rx_buffer_new_string_indx=uvp6_obj->rx_buffer_indx;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 800142c:	b29a      	uxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <uvp6_loop>:

void uvp6_loop(uvp6* uvp6_obj)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 uint16_t msg_indx;
 for(;;)
 {
	if(xQueueReceive(uvp6_obj->media_rx_messages_q,&msg_indx,0))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f107 010a 	add.w	r1, r7, #10
 800144c:	2200      	movs	r2, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f004 fc52 	bl	8005cf8 <xQueueReceive>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d008      	beq.n	800146c <uvp6_loop+0x30>
	{
		uint8_t* msg=uvp6_obj->rx_buffer+msg_indx;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	335a      	adds	r3, #90	; 0x5a
 800145e:	897a      	ldrh	r2, [r7, #10]
 8001460:	4413      	add	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
		uvp6_parse_message(uvp6_obj,msg);
 8001464:	68f9      	ldr	r1, [r7, #12]
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f900 	bl	800166c <uvp6_parse_message>
	}
	osDelay(1);
 800146c:	2001      	movs	r0, #1
 800146e:	f003 ffd0 	bl	8005412 <osDelay>
	if(xQueueReceive(uvp6_obj->media_rx_messages_q,&msg_indx,0))
 8001472:	e7e7      	b.n	8001444 <uvp6_loop+0x8>

08001474 <uvp6_media_get_byte>:

}


uint8_t uvp6_media_get_byte(uvp6* uvp6_obj,uint8_t* tx_byte)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(uvp6_obj->media_tx_q,0);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6859      	ldr	r1, [r3, #4]
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	2200      	movs	r2, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f004 f83f 	bl	800550c <osMessageGet>
	if(res.status==osEventMessage)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2b10      	cmp	r3, #16
 8001492:	d105      	bne.n	80014a0 <uvp6_media_get_byte+0x2c>
     {
		*tx_byte=res.value.v;
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	701a      	strb	r2, [r3, #0]
		return UVP6_F_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	e000      	b.n	80014a2 <uvp6_media_get_byte+0x2e>
     }
   return UVP6_F_ERR;
 80014a0:	2301      	movs	r3, #1
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <uvp6_send_cmd>:


void uvp6_send_cmd(uvp6* uvp6_obj,uint8_t cmd_id,void* arg)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b092      	sub	sp, #72	; 0x48
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	460b      	mov	r3, r1
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	72fb      	strb	r3, [r7, #11]

 char tmp_cmd[40];
 for(int i=0;i<strlen(uvp6_commands_strings[UVP6_CMD_WKUP]);i++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	647b      	str	r3, [r7, #68]	; 0x44
 80014be:	e00d      	b.n	80014dc <uvp6_send_cmd+0x30>
 {
	  osMessagePut(uvp6_obj->media_tx_q,*(uvp6_commands_strings[UVP6_CMD_WKUP]+i),0);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6858      	ldr	r0, [r3, #4]
 80014c4:	4b5c      	ldr	r3, [pc, #368]	; (8001638 <uvp6_send_cmd+0x18c>)
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014ca:	4413      	add	r3, r2
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2200      	movs	r2, #0
 80014d0:	4619      	mov	r1, r3
 80014d2:	f003 ffdb 	bl	800548c <osMessagePut>
 for(int i=0;i<strlen(uvp6_commands_strings[UVP6_CMD_WKUP]);i++)
 80014d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014d8:	3301      	adds	r3, #1
 80014da:	647b      	str	r3, [r7, #68]	; 0x44
 80014dc:	4b56      	ldr	r3, [pc, #344]	; (8001638 <uvp6_send_cmd+0x18c>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7fe fea5 	bl	8000230 <strlen>
 80014e6:	4602      	mov	r2, r0
 80014e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d8e8      	bhi.n	80014c0 <uvp6_send_cmd+0x14>
 }
 osDelay(20);
 80014ee:	2014      	movs	r0, #20
 80014f0:	f003 ff8f 	bl	8005412 <osDelay>
 switch(cmd_id)
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d041      	beq.n	800157e <uvp6_send_cmd+0xd2>
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	f300 8097 	bgt.w	800162e <uvp6_send_cmd+0x182>
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <uvp6_send_cmd+0x5e>
 8001504:	2b01      	cmp	r3, #1
 8001506:	d074      	beq.n	80015f2 <uvp6_send_cmd+0x146>
	   }
	   uvp6_obj->status=UVP6_READY;
	 break;
 }

}
 8001508:	e091      	b.n	800162e <uvp6_send_cmd+0x182>
       tmp_cmd[0]=0x00;
 800150a:	2300      	movs	r3, #0
 800150c:	743b      	strb	r3, [r7, #16]
       strcat(tmp_cmd,uvp6_commands_strings[UVP6_CMD_START_H_ACQ]);
 800150e:	4b4a      	ldr	r3, [pc, #296]	; (8001638 <uvp6_send_cmd+0x18c>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f006 f957 	bl	80077cc <strcat>
       strcat(tmp_cmd,(char*)arg);
 800151e:	f107 0310 	add.w	r3, r7, #16
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4618      	mov	r0, r3
 8001526:	f006 f951 	bl	80077cc <strcat>
       strcat(tmp_cmd,";\n");
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe fe7e 	bl	8000230 <strlen>
 8001534:	4603      	mov	r3, r0
 8001536:	461a      	mov	r2, r3
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	4413      	add	r3, r2
 800153e:	4a3f      	ldr	r2, [pc, #252]	; (800163c <uvp6_send_cmd+0x190>)
 8001540:	8811      	ldrh	r1, [r2, #0]
 8001542:	7892      	ldrb	r2, [r2, #2]
 8001544:	8019      	strh	r1, [r3, #0]
 8001546:	709a      	strb	r2, [r3, #2]
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 8001548:	2300      	movs	r3, #0
 800154a:	643b      	str	r3, [r7, #64]	; 0x40
 800154c:	e00d      	b.n	800156a <uvp6_send_cmd+0xbe>
  		   osMessagePut(uvp6_obj->media_tx_q,tmp_cmd[i],0);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6858      	ldr	r0, [r3, #4]
 8001552:	f107 0210 	add.w	r2, r7, #16
 8001556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001558:	4413      	add	r3, r2
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2200      	movs	r2, #0
 800155e:	4619      	mov	r1, r3
 8001560:	f003 ff94 	bl	800548c <osMessagePut>
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 8001564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001566:	3301      	adds	r3, #1
 8001568:	643b      	str	r3, [r7, #64]	; 0x40
 800156a:	f107 0310 	add.w	r3, r7, #16
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe fe5e 	bl	8000230 <strlen>
 8001574:	4602      	mov	r2, r0
 8001576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001578:	429a      	cmp	r2, r3
 800157a:	d8e8      	bhi.n	800154e <uvp6_send_cmd+0xa2>
	 break;
 800157c:	e057      	b.n	800162e <uvp6_send_cmd+0x182>
       tmp_cmd[0]=0x00;
 800157e:	2300      	movs	r3, #0
 8001580:	743b      	strb	r3, [r7, #16]
       strcat(tmp_cmd,uvp6_commands_strings[UVP6_CMD_START_L_ACQ]);
 8001582:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <uvp6_send_cmd+0x18c>)
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	f107 0310 	add.w	r3, r7, #16
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f006 f91d 	bl	80077cc <strcat>
       strcat(tmp_cmd,(char*)arg);
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	4618      	mov	r0, r3
 800159a:	f006 f917 	bl	80077cc <strcat>
       strcat(tmp_cmd,";\n");
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe fe44 	bl	8000230 <strlen>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	4413      	add	r3, r2
 80015b2:	4a22      	ldr	r2, [pc, #136]	; (800163c <uvp6_send_cmd+0x190>)
 80015b4:	8811      	ldrh	r1, [r2, #0]
 80015b6:	7892      	ldrb	r2, [r2, #2]
 80015b8:	8019      	strh	r1, [r3, #0]
 80015ba:	709a      	strb	r2, [r3, #2]
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 80015bc:	2300      	movs	r3, #0
 80015be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015c0:	e00d      	b.n	80015de <uvp6_send_cmd+0x132>
  		   osMessagePut(uvp6_obj->media_tx_q,tmp_cmd[i],0);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6858      	ldr	r0, [r3, #4]
 80015c6:	f107 0210 	add.w	r2, r7, #16
 80015ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015cc:	4413      	add	r3, r2
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2200      	movs	r2, #0
 80015d2:	4619      	mov	r1, r3
 80015d4:	f003 ff5a 	bl	800548c <osMessagePut>
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 80015d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015da:	3301      	adds	r3, #1
 80015dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe fe24 	bl	8000230 <strlen>
 80015e8:	4602      	mov	r2, r0
 80015ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d8e8      	bhi.n	80015c2 <uvp6_send_cmd+0x116>
	 break;
 80015f0:	e01d      	b.n	800162e <uvp6_send_cmd+0x182>
	   for(int i=0;i<strlen(uvp6_commands_strings[UVP6_CMD_STOP_ACQ]);i++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80015f6:	e00d      	b.n	8001614 <uvp6_send_cmd+0x168>
		   osMessagePut(uvp6_obj->media_tx_q,*(uvp6_commands_strings[UVP6_CMD_STOP_ACQ]+i),0);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6858      	ldr	r0, [r3, #4]
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <uvp6_send_cmd+0x18c>)
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001602:	4413      	add	r3, r2
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2200      	movs	r2, #0
 8001608:	4619      	mov	r1, r3
 800160a:	f003 ff3f 	bl	800548c <osMessagePut>
	   for(int i=0;i<strlen(uvp6_commands_strings[UVP6_CMD_STOP_ACQ]);i++)
 800160e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001610:	3301      	adds	r3, #1
 8001612:	63bb      	str	r3, [r7, #56]	; 0x38
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <uvp6_send_cmd+0x18c>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe fe09 	bl	8000230 <strlen>
 800161e:	4602      	mov	r2, r0
 8001620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001622:	429a      	cmp	r2, r3
 8001624:	d8e8      	bhi.n	80015f8 <uvp6_send_cmd+0x14c>
	   uvp6_obj->status=UVP6_READY;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2201      	movs	r2, #1
 800162a:	735a      	strb	r2, [r3, #13]
	 break;
 800162c:	bf00      	nop
}
 800162e:	bf00      	nop
 8001630:	3748      	adds	r7, #72	; 0x48
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000000 	.word	0x20000000
 800163c:	0800ab68 	.word	0x0800ab68

08001640 <uvp6_get_event>:


uint8_t uvp6_get_event(uvp6* uvp6_obj,uint8_t* event)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
	if(xQueueReceive(uvp6_obj->events_q,event,1))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2201      	movs	r2, #1
 8001650:	6839      	ldr	r1, [r7, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f004 fb50 	bl	8005cf8 <xQueueReceive>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <uvp6_get_event+0x22>
	{
     return UVP6_F_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e000      	b.n	8001664 <uvp6_get_event+0x24>
	}
	return UVP6_F_ERR;
 8001662:	2301      	movs	r3, #1
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <uvp6_parse_message>:



int uvp6_parse_message(uvp6* uvp6_obj,uint8_t* msg)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,",");//header
 8001676:	4922      	ldr	r1, [pc, #136]	; (8001700 <uvp6_parse_message+0x94>)
 8001678:	6838      	ldr	r0, [r7, #0]
 800167a:	f006 ff27 	bl	80084cc <strtok>
 800167e:	6138      	str	r0, [r7, #16]
	uint8_t* tmp_ptr;
	for(int i=0;i<UVP6_MSG_NUM_OF_FUNCTIONS;i++)
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e033      	b.n	80016ee <uvp6_parse_message+0x82>
	{
	   if(strlen(pch)==strlen(uvp6_messages_strings[i]))
 8001686:	6938      	ldr	r0, [r7, #16]
 8001688:	f7fe fdd2 	bl	8000230 <strlen>
 800168c:	4604      	mov	r4, r0
 800168e:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <uvp6_parse_message+0x98>)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe fdca 	bl	8000230 <strlen>
 800169c:	4603      	mov	r3, r0
 800169e:	429c      	cmp	r4, r3
 80016a0:	d122      	bne.n	80016e8 <uvp6_parse_message+0x7c>
	   {
		  tmp_ptr=0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
		  tmp_ptr=strstr(pch,uvp6_messages_strings[i]);
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <uvp6_parse_message+0x98>)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ae:	4619      	mov	r1, r3
 80016b0:	6938      	ldr	r0, [r7, #16]
 80016b2:	f006 f89a 	bl	80077ea <strstr>
 80016b6:	60f8      	str	r0, [r7, #12]
		  if(tmp_ptr)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d014      	beq.n	80016e8 <uvp6_parse_message+0x7c>
		   {
			 if(uvp6_functions[i](uvp6_obj,msg+strlen(tmp_ptr)+1)==UVP6_F_OK) return UVP6_F_OK;
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <uvp6_parse_message+0x9c>)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f7fe fdb2 	bl	8000230 <strlen>
 80016cc:	4603      	mov	r3, r0
 80016ce:	3301      	adds	r3, #1
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	47a0      	blx	r4
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <uvp6_parse_message+0x78>
 80016e0:	2300      	movs	r3, #0
 80016e2:	e008      	b.n	80016f6 <uvp6_parse_message+0x8a>
	         else return UVP6_F_ERR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e006      	b.n	80016f6 <uvp6_parse_message+0x8a>
	for(int i=0;i<UVP6_MSG_NUM_OF_FUNCTIONS;i++)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3301      	adds	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	ddc8      	ble.n	8001686 <uvp6_parse_message+0x1a>
		   }
		}
	 }
	 return UVP6_F_ERR;
 80016f4:	2301      	movs	r3, #1

}
 80016f6:	4618      	mov	r0, r3
 80016f8:	371c      	adds	r7, #28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd90      	pop	{r4, r7, pc}
 80016fe:	bf00      	nop
 8001700:	0800ab6c 	.word	0x0800ab6c
 8001704:	20000224 	.word	0x20000224
 8001708:	20000214 	.word	0x20000214

0800170c <uvp6_messages_init>:

void uvp6_messages_init(uvp6* uvp6_obj)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

	uvp6_functions[UVP6_MSG_HW_CONF] = UVP6_MSG_HW_CONF_f;
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <uvp6_messages_init+0x44>)
 8001716:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <uvp6_messages_init+0x48>)
 8001718:	601a      	str	r2, [r3, #0]
	uvp6_functions[UVP6_MSG_BLACK_DATA] = UVP6_MSG_BLACK_DATA_f;
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <uvp6_messages_init+0x44>)
 800171c:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <uvp6_messages_init+0x4c>)
 800171e:	605a      	str	r2, [r3, #4]
	uvp6_functions[UVP6_MSG_LPM_DATA] = UVP6_MSG_LPM_DATA_f;
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <uvp6_messages_init+0x44>)
 8001722:	4a0e      	ldr	r2, [pc, #56]	; (800175c <uvp6_messages_init+0x50>)
 8001724:	609a      	str	r2, [r3, #8]
	uvp6_functions[UVP6_MSG_ACQ_CONF] = UVP6_MSG_ACQ_CONF_f;
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <uvp6_messages_init+0x44>)
 8001728:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <uvp6_messages_init+0x54>)
 800172a:	60da      	str	r2, [r3, #12]

	uvp6_messages_strings[UVP6_MSG_HW_CONF] = "HW_CONF";
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <uvp6_messages_init+0x58>)
 800172e:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <uvp6_messages_init+0x5c>)
 8001730:	601a      	str	r2, [r3, #0]
	uvp6_messages_strings[UVP6_MSG_BLACK_DATA] = "BLACK_DATA";
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <uvp6_messages_init+0x58>)
 8001734:	4a0d      	ldr	r2, [pc, #52]	; (800176c <uvp6_messages_init+0x60>)
 8001736:	605a      	str	r2, [r3, #4]
	uvp6_messages_strings[UVP6_MSG_LPM_DATA] = "LPM_DATA";
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <uvp6_messages_init+0x58>)
 800173a:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <uvp6_messages_init+0x64>)
 800173c:	609a      	str	r2, [r3, #8]
	uvp6_messages_strings[UVP6_MSG_ACQ_CONF] = "ACQ_CONF";
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <uvp6_messages_init+0x58>)
 8001740:	4a0c      	ldr	r2, [pc, #48]	; (8001774 <uvp6_messages_init+0x68>)
 8001742:	60da      	str	r2, [r3, #12]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000214 	.word	0x20000214
 8001754:	08001779 	.word	0x08001779
 8001758:	080017a1 	.word	0x080017a1
 800175c:	080017b9 	.word	0x080017b9
 8001760:	080018f1 	.word	0x080018f1
 8001764:	20000224 	.word	0x20000224
 8001768:	0800ab70 	.word	0x0800ab70
 800176c:	0800ab78 	.word	0x0800ab78
 8001770:	0800ab84 	.word	0x0800ab84
 8001774:	0800ab90 	.word	0x0800ab90

08001778 <UVP6_MSG_HW_CONF_f>:


int UVP6_MSG_HW_CONF_f(uvp6* uvp6_obj,uint8_t* msg)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
   osMessagePut(uvp6_obj->events_q,UVP6_EVNT_BOOTED,1);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2201      	movs	r2, #1
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f003 fe7e 	bl	800548c <osMessagePut>
   uvp6_obj->status=UVP6_READY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	735a      	strb	r2, [r3, #13]
   return UVP6_F_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <UVP6_MSG_BLACK_DATA_f>:
int UVP6_MSG_BLACK_DATA_f(uvp6* uvp6_obj,uint8_t* msg)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	return UVP6_F_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
	...

080017b8 <UVP6_MSG_LPM_DATA_f>:
int UVP6_MSG_LPM_DATA_f(uvp6* uvp6_obj,uint8_t* msg)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,",");//depth
 80017c2:	4949      	ldr	r1, [pc, #292]	; (80018e8 <UVP6_MSG_LPM_DATA_f+0x130>)
 80017c4:	6838      	ldr	r0, [r7, #0]
 80017c6:	f006 fe81 	bl	80084cc <strtok>
 80017ca:	60f8      	str	r0, [r7, #12]
	uvp6_obj->lpm_data.depth=strtof(pch,NULL);
 80017cc:	2100      	movs	r1, #0
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f006 fe2a 	bl	8008428 <strtof>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fac8 	bl	8000d6c <__aeabi_i2f>
 80017dc:	4602      	mov	r2, r0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f8c3 200f 	str.w	r2, [r3, #15]
	pch = strtok (NULL,",");//date
 80017e4:	4940      	ldr	r1, [pc, #256]	; (80018e8 <UVP6_MSG_LPM_DATA_f+0x130>)
 80017e6:	2000      	movs	r0, #0
 80017e8:	f006 fe70 	bl	80084cc <strtok>
 80017ec:	60f8      	str	r0, [r7, #12]
	memcpy(uvp6_obj->lpm_data.date,pch,8);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3313      	adds	r3, #19
 80017f2:	2208      	movs	r2, #8
 80017f4:	68f9      	ldr	r1, [r7, #12]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f005 ffb2 	bl	8007760 <memcpy>
	pch = strtok (NULL,",");//time
 80017fc:	493a      	ldr	r1, [pc, #232]	; (80018e8 <UVP6_MSG_LPM_DATA_f+0x130>)
 80017fe:	2000      	movs	r0, #0
 8001800:	f006 fe64 	bl	80084cc <strtok>
 8001804:	60f8      	str	r0, [r7, #12]
	memcpy(uvp6_obj->lpm_data.time,pch,6);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	331b      	adds	r3, #27
 800180a:	2206      	movs	r2, #6
 800180c:	68f9      	ldr	r1, [r7, #12]
 800180e:	4618      	mov	r0, r3
 8001810:	f005 ffa6 	bl	8007760 <memcpy>
	pch = strtok (NULL,",");//avg_images
 8001814:	4934      	ldr	r1, [pc, #208]	; (80018e8 <UVP6_MSG_LPM_DATA_f+0x130>)
 8001816:	2000      	movs	r0, #0
 8001818:	f006 fe58 	bl	80084cc <strtok>
 800181c:	60f8      	str	r0, [r7, #12]
	uvp6_obj->lpm_data.number_of_images=strtoul(pch,NULL,0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f006 ff20 	bl	8008668 <strtoul>
 8001828:	4603      	mov	r3, r0
 800182a:	b2da      	uxtb	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	pch = strtok (NULL,",");//temperature
 8001832:	492d      	ldr	r1, [pc, #180]	; (80018e8 <UVP6_MSG_LPM_DATA_f+0x130>)
 8001834:	2000      	movs	r0, #0
 8001836:	f006 fe49 	bl	80084cc <strtok>
 800183a:	60f8      	str	r0, [r7, #12]
	uvp6_obj->lpm_data.temperature=strtof(pch,NULL);
 800183c:	2100      	movs	r1, #0
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f006 fdf2 	bl	8008428 <strtof>
 8001844:	4603      	mov	r3, r0
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fa90 	bl	8000d6c <__aeabi_i2f>
 800184c:	4602      	mov	r2, r0
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f8c3 2022 	str.w	r2, [r3, #34]	; 0x22
	//data
	for(int i=0;i<18;i++)
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	e018      	b.n	800188c <UVP6_MSG_LPM_DATA_f+0xd4>
	{
		if(pch = strtok (NULL,","))//data i
 800185a:	4923      	ldr	r1, [pc, #140]	; (80018e8 <UVP6_MSG_LPM_DATA_f+0x130>)
 800185c:	2000      	movs	r0, #0
 800185e:	f006 fe35 	bl	80084cc <strtok>
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00d      	beq.n	8001886 <UVP6_MSG_LPM_DATA_f+0xce>
		{
		 uvp6_obj->lpm_data.data[i]=strtoul(pch,NULL,0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f006 fefa 	bl	8008668 <strtoul>
 8001874:	4603      	mov	r3, r0
 8001876:	b299      	uxth	r1, r3
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	330c      	adds	r3, #12
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4413      	add	r3, r2
 8001882:	460a      	mov	r2, r1
 8001884:	81da      	strh	r2, [r3, #14]
	for(int i=0;i<18;i++)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3301      	adds	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	2b11      	cmp	r3, #17
 8001890:	dde3      	ble.n	800185a <UVP6_MSG_LPM_DATA_f+0xa2>
		}

	}
	//grey levels
	for(int i=0;i<16;i++)
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	e017      	b.n	80018c8 <UVP6_MSG_LPM_DATA_f+0x110>
	{
		if(pch = strtok (NULL,",;"))//grey level i
 8001898:	4914      	ldr	r1, [pc, #80]	; (80018ec <UVP6_MSG_LPM_DATA_f+0x134>)
 800189a:	2000      	movs	r0, #0
 800189c:	f006 fe16 	bl	80084cc <strtok>
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00c      	beq.n	80018c2 <UVP6_MSG_LPM_DATA_f+0x10a>
		{
		 uvp6_obj->lpm_data.grey_levels[i]=strtoul(pch,NULL,0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f006 fedb 	bl	8008668 <strtoul>
 80018b2:	4603      	mov	r3, r0
 80018b4:	b2d9      	uxtb	r1, r3
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4413      	add	r3, r2
 80018bc:	334a      	adds	r3, #74	; 0x4a
 80018be:	460a      	mov	r2, r1
 80018c0:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<16;i++)
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	3301      	adds	r3, #1
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	2b0f      	cmp	r3, #15
 80018cc:	dde4      	ble.n	8001898 <UVP6_MSG_LPM_DATA_f+0xe0>
		}
	}



	osMessagePut(uvp6_obj->events_q,UVP6_EVNT_LPM_DATA_RCVD,1);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2201      	movs	r2, #1
 80018d4:	2101      	movs	r1, #1
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 fdd8 	bl	800548c <osMessagePut>
	return UVP6_F_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	0800ab6c 	.word	0x0800ab6c
 80018ec:	0800ab9c 	.word	0x0800ab9c

080018f0 <UVP6_MSG_ACQ_CONF_f>:

int UVP6_MSG_ACQ_CONF_f(uvp6* uvp6_obj,uint8_t* msg)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
	osMessagePut(uvp6_obj->events_q,UVP6_EVNT_ACQ_CONF_RCVD,1);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2201      	movs	r2, #1
 8001900:	2103      	movs	r1, #3
 8001902:	4618      	mov	r0, r3
 8001904:	f003 fdc2 	bl	800548c <osMessagePut>
	uvp6_obj->status=UVP6_ACQ_STARTED;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2202      	movs	r2, #2
 800190c:	735a      	strb	r2, [r3, #13]
	return UVP6_F_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4a06      	ldr	r2, [pc, #24]	; (8001940 <vApplicationGetIdleTaskMemory+0x28>)
 8001928:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	4a05      	ldr	r2, [pc, #20]	; (8001944 <vApplicationGetIdleTaskMemory+0x2c>)
 800192e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2280      	movs	r2, #128	; 0x80
 8001934:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	20000234 	.word	0x20000234
 8001944:	20000288 	.word	0x20000288

08001948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b08e      	sub	sp, #56	; 0x38
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800194e:	f001 fabb 	bl	8002ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001952:	f000 f857 	bl	8001a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001956:	f000 f8f7 	bl	8001b48 <MX_GPIO_Init>
  MX_UART5_Init();
 800195a:	f000 f8a1 	bl	8001aa0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800195e:	f000 f8c9 	bl	8001af4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uvp6_init(&uvp6_sensor1);
 8001962:	481d      	ldr	r0, [pc, #116]	; (80019d8 <main+0x90>)
 8001964:	f7ff fc9e 	bl	80012a4 <uvp6_init>
  HAL_UART_Receive_IT(&UVP6_UART,&(uvp6_sensor1.media_rx_byte),1);
 8001968:	2201      	movs	r2, #1
 800196a:	491c      	ldr	r1, [pc, #112]	; (80019dc <main+0x94>)
 800196c:	481c      	ldr	r0, [pc, #112]	; (80019e0 <main+0x98>)
 800196e:	f003 f8ce 	bl	8004b0e <HAL_UART_Receive_IT>

  seaglider_init(&glider1);
 8001972:	481c      	ldr	r0, [pc, #112]	; (80019e4 <main+0x9c>)
 8001974:	f000 fd2e 	bl	80023d4 <seaglider_init>
  HAL_UART_Receive_IT(&GLIDER_UART,&(glider1.media_rx_byte),1);
 8001978:	2201      	movs	r2, #1
 800197a:	491b      	ldr	r1, [pc, #108]	; (80019e8 <main+0xa0>)
 800197c:	481b      	ldr	r0, [pc, #108]	; (80019ec <main+0xa4>)
 800197e:	f003 f8c6 	bl	8004b0e <HAL_UART_Receive_IT>

  mcu_flash_init(&data_flash,82);
 8001982:	2152      	movs	r1, #82	; 0x52
 8001984:	481a      	ldr	r0, [pc, #104]	; (80019f0 <main+0xa8>)
 8001986:	f000 fbde 	bl	8002146 <mcu_flash_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800198a:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <main+0xac>)
 800198c:	f107 041c 	add.w	r4, r7, #28
 8001990:	461d      	mov	r5, r3
 8001992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001996:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800199a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f003 fce8 	bl	800537a <osThreadCreate>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <main+0xb0>)
 80019ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart_tx_t */
  osThreadDef(uart_tx_t, uart_tx_f, osPriorityNormal, 0, 128);
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <main+0xb4>)
 80019b2:	463c      	mov	r4, r7
 80019b4:	461d      	mov	r5, r3
 80019b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart_tx_tHandle = osThreadCreate(osThread(uart_tx_t), NULL);
 80019c2:	463b      	mov	r3, r7
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f003 fcd7 	bl	800537a <osThreadCreate>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a0c      	ldr	r2, [pc, #48]	; (8001a00 <main+0xb8>)
 80019d0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80019d2:	f003 fccb 	bl	800536c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <main+0x8e>
 80019d8:	20000518 	.word	0x20000518
 80019dc:	20000524 	.word	0x20000524
 80019e0:	200004cc 	.word	0x200004cc
 80019e4:	20000978 	.word	0x20000978
 80019e8:	20000984 	.word	0x20000984
 80019ec:	20000488 	.word	0x20000488
 80019f0:	20000da4 	.word	0x20000da4
 80019f4:	0800abb8 	.word	0x0800abb8
 80019f8:	20000510 	.word	0x20000510
 80019fc:	0800abd4 	.word	0x0800abd4
 8001a00:	20000514 	.word	0x20000514

08001a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b094      	sub	sp, #80	; 0x50
 8001a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0a:	f107 0318 	add.w	r3, r7, #24
 8001a0e:	2238      	movs	r2, #56	; 0x38
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f005 feb2 	bl	800777c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
 8001a24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8001a30:	2304      	movs	r3, #4
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a34:	2301      	movs	r3, #1
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a44:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001a46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a50:	f107 0318 	add.w	r3, r7, #24
 8001a54:	4618      	mov	r0, r3
 8001a56:	f002 f80f 	bl	8003a78 <HAL_RCC_OscConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001a60:	f000 fb4a 	bl	80020f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a64:	230f      	movs	r3, #15
 8001a66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 fb11 	bl	80040a4 <HAL_RCC_ClockConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001a88:	f000 fb36 	bl	80020f8 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <SystemClock_Config+0x98>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
}
 8001a92:	bf00      	nop
 8001a94:	3750      	adds	r7, #80	; 0x50
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	42420070 	.word	0x42420070

08001aa0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_UART5_Init+0x4c>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <MX_UART5_Init+0x50>)
 8001aa8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <MX_UART5_Init+0x4c>)
 8001aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_UART5_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_UART5_Init+0x4c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <MX_UART5_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_UART5_Init+0x4c>)
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <MX_UART5_Init+0x4c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <MX_UART5_Init+0x4c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_UART5_Init+0x4c>)
 8001ad8:	f002 ff88 	bl	80049ec <HAL_UART_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001ae2:	f000 fb09 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000488 	.word	0x20000488
 8001af0:	40005000 	.word	0x40005000

08001af4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_USART1_UART_Init+0x4c>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <MX_USART1_UART_Init+0x50>)
 8001afc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MX_USART1_UART_Init+0x4c>)
 8001b00:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001b04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_USART1_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_USART1_UART_Init+0x4c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_USART1_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_USART1_UART_Init+0x4c>)
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_USART1_UART_Init+0x4c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_USART1_UART_Init+0x4c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_USART1_UART_Init+0x4c>)
 8001b2c:	f002 ff5e 	bl	80049ec <HAL_UART_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b36:	f000 fadf 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200004cc 	.word	0x200004cc
 8001b44:	40013800 	.word	0x40013800

08001b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4e:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <MX_GPIO_Init+0x58>)
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	4a13      	ldr	r2, [pc, #76]	; (8001ba0 <MX_GPIO_Init+0x58>)
 8001b54:	f043 0320 	orr.w	r3, r3, #32
 8001b58:	6193      	str	r3, [r2, #24]
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_GPIO_Init+0x58>)
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f003 0320 	and.w	r3, r3, #32
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_GPIO_Init+0x58>)
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	4a0d      	ldr	r2, [pc, #52]	; (8001ba0 <MX_GPIO_Init+0x58>)
 8001b6c:	f043 0304 	orr.w	r3, r3, #4
 8001b70:	6193      	str	r3, [r2, #24]
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <MX_GPIO_Init+0x58>)
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <MX_GPIO_Init+0x58>)
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <MX_GPIO_Init+0x58>)
 8001b84:	f043 0310 	orr.w	r3, r3, #16
 8001b88:	6193      	str	r3, [r2, #24]
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <MX_GPIO_Init+0x58>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]

}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */
uint8_t tmp1;
uint8_t tmp2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 if(huart==&UVP6_UART)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a11      	ldr	r2, [pc, #68]	; (8001bf4 <HAL_UART_RxCpltCallback+0x50>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d10b      	bne.n	8001bcc <HAL_UART_RxCpltCallback+0x28>
 {   //send new received byte to uvp6 object
	 uvp6_media_process_byte(&uvp6_sensor1,uvp6_sensor1.media_rx_byte);
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <HAL_UART_RxCpltCallback+0x54>)
 8001bb6:	7b1b      	ldrb	r3, [r3, #12]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	480f      	ldr	r0, [pc, #60]	; (8001bf8 <HAL_UART_RxCpltCallback+0x54>)
 8001bbc:	f7ff fbc2 	bl	8001344 <uvp6_media_process_byte>
	 HAL_UART_Receive_IT(&UVP6_UART,&(uvp6_sensor1.media_rx_byte),1);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	490e      	ldr	r1, [pc, #56]	; (8001bfc <HAL_UART_RxCpltCallback+0x58>)
 8001bc4:	480b      	ldr	r0, [pc, #44]	; (8001bf4 <HAL_UART_RxCpltCallback+0x50>)
 8001bc6:	f002 ffa2 	bl	8004b0e <HAL_UART_Receive_IT>
 else if(huart==&GLIDER_UART)
 {
	 seaglider_media_process_byte(&glider1,glider1.media_rx_byte);
	 HAL_UART_Receive_IT(&GLIDER_UART,&(glider1.media_rx_byte),1);
 }
}
 8001bca:	e00e      	b.n	8001bea <HAL_UART_RxCpltCallback+0x46>
 else if(huart==&GLIDER_UART)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a0c      	ldr	r2, [pc, #48]	; (8001c00 <HAL_UART_RxCpltCallback+0x5c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d10a      	bne.n	8001bea <HAL_UART_RxCpltCallback+0x46>
	 seaglider_media_process_byte(&glider1,glider1.media_rx_byte);
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_UART_RxCpltCallback+0x60>)
 8001bd6:	7b1b      	ldrb	r3, [r3, #12]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480a      	ldr	r0, [pc, #40]	; (8001c04 <HAL_UART_RxCpltCallback+0x60>)
 8001bdc:	f000 fc6d 	bl	80024ba <seaglider_media_process_byte>
	 HAL_UART_Receive_IT(&GLIDER_UART,&(glider1.media_rx_byte),1);
 8001be0:	2201      	movs	r2, #1
 8001be2:	4909      	ldr	r1, [pc, #36]	; (8001c08 <HAL_UART_RxCpltCallback+0x64>)
 8001be4:	4806      	ldr	r0, [pc, #24]	; (8001c00 <HAL_UART_RxCpltCallback+0x5c>)
 8001be6:	f002 ff92 	bl	8004b0e <HAL_UART_Receive_IT>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200004cc 	.word	0x200004cc
 8001bf8:	20000518 	.word	0x20000518
 8001bfc:	20000524 	.word	0x20000524
 8001c00:	20000488 	.word	0x20000488
 8001c04:	20000978 	.word	0x20000978
 8001c08:	20000984 	.word	0x20000984

08001c0c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

 if(huart==&UVP6_UART)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <HAL_UART_TxCpltCallback+0x54>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d10c      	bne.n	8001c36 <HAL_UART_TxCpltCallback+0x2a>
 {
	 if(uvp6_media_get_byte(&uvp6_sensor1,&tmp2)==UVP6_F_OK)
 8001c1c:	4911      	ldr	r1, [pc, #68]	; (8001c64 <HAL_UART_TxCpltCallback+0x58>)
 8001c1e:	4812      	ldr	r0, [pc, #72]	; (8001c68 <HAL_UART_TxCpltCallback+0x5c>)
 8001c20:	f7ff fc28 	bl	8001474 <uvp6_media_get_byte>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d115      	bne.n	8001c56 <HAL_UART_TxCpltCallback+0x4a>
	 {
	    HAL_UART_Transmit_IT(&UVP6_UART,&tmp2,1);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	490d      	ldr	r1, [pc, #52]	; (8001c64 <HAL_UART_TxCpltCallback+0x58>)
 8001c2e:	480c      	ldr	r0, [pc, #48]	; (8001c60 <HAL_UART_TxCpltCallback+0x54>)
 8001c30:	f002 ff29 	bl	8004a86 <HAL_UART_Transmit_IT>
	 if(seaglider_media_get_byte(&glider1,&tmp1)==SEAGLIDER_F_OK)
	 {
	    HAL_UART_Transmit_IT(&GLIDER_UART,&tmp1,1);
	 }
 }
}
 8001c34:	e00f      	b.n	8001c56 <HAL_UART_TxCpltCallback+0x4a>
 else if(huart==&GLIDER_UART)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a0c      	ldr	r2, [pc, #48]	; (8001c6c <HAL_UART_TxCpltCallback+0x60>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d10b      	bne.n	8001c56 <HAL_UART_TxCpltCallback+0x4a>
	 if(seaglider_media_get_byte(&glider1,&tmp1)==SEAGLIDER_F_OK)
 8001c3e:	490c      	ldr	r1, [pc, #48]	; (8001c70 <HAL_UART_TxCpltCallback+0x64>)
 8001c40:	480c      	ldr	r0, [pc, #48]	; (8001c74 <HAL_UART_TxCpltCallback+0x68>)
 8001c42:	f000 fcba 	bl	80025ba <seaglider_media_get_byte>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d104      	bne.n	8001c56 <HAL_UART_TxCpltCallback+0x4a>
	    HAL_UART_Transmit_IT(&GLIDER_UART,&tmp1,1);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	4908      	ldr	r1, [pc, #32]	; (8001c70 <HAL_UART_TxCpltCallback+0x64>)
 8001c50:	4806      	ldr	r0, [pc, #24]	; (8001c6c <HAL_UART_TxCpltCallback+0x60>)
 8001c52:	f002 ff18 	bl	8004a86 <HAL_UART_Transmit_IT>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200004cc 	.word	0x200004cc
 8001c64:	200035b9 	.word	0x200035b9
 8001c68:	20000518 	.word	0x20000518
 8001c6c:	20000488 	.word	0x20000488
 8001c70:	200035b8 	.word	0x200035b8
 8001c74:	20000978 	.word	0x20000978

08001c78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001c78:	b5b0      	push	{r4, r5, r7, lr}
 8001c7a:	b09e      	sub	sp, #120	; 0x78
 8001c7c:	af04      	add	r7, sp, #16
 8001c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  mcu_flash_open(&data_flash);
 8001c80:	48b7      	ldr	r0, [pc, #732]	; (8001f60 <StartDefaultTask+0x2e8>)
 8001c82:	f000 fa9b 	bl	80021bc <mcu_flash_open>
  char tmp_str[20];
  uint8_t event_id;
  char avg_str[40];
  uint16_t avg_data[5];
  uint8_t y=0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  memory_region_pointer ptr1;

  uint8_t lpm_messages_couter=0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

  for(;;)
  {
	 //glider task
	 if(seaglider_get_event(&glider1,&event_id)==SEAGLIDER_F_OK)
 8001c92:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8001c96:	4619      	mov	r1, r3
 8001c98:	48b2      	ldr	r0, [pc, #712]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001c9a:	f000 fcf1 	bl	8002680 <seaglider_get_event>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f040 8122 	bne.w	8001eea <StartDefaultTask+0x272>
	 {
		switch(event_id)
 8001ca6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	f200 8120 	bhi.w	8001ef0 <StartDefaultTask+0x278>
 8001cb0:	a201      	add	r2, pc, #4	; (adr r2, 8001cb8 <StartDefaultTask+0x40>)
 8001cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb6:	bf00      	nop
 8001cb8:	08001dad 	.word	0x08001dad
 8001cbc:	08001e71 	.word	0x08001e71
 8001cc0:	08001e97 	.word	0x08001e97
 8001cc4:	08001ebd 	.word	0x08001ebd
 8001cc8:	08001e59 	.word	0x08001e59
 8001ccc:	08001e65 	.word	0x08001e65
 8001cd0:	08001cd5 	.word	0x08001cd5
		{
		 case SEAGLIDER_EVNT_DEPTH_RCVD:

			 memcpy(tmp_str,glider1.date,8);
 8001cd4:	4aa3      	ldr	r2, [pc, #652]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001cd6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cda:	3217      	adds	r2, #23
 8001cdc:	6810      	ldr	r0, [r2, #0]
 8001cde:	6851      	ldr	r1, [r2, #4]
 8001ce0:	c303      	stmia	r3!, {r0, r1}
			 memcpy(tmp_str+8,",",1);
 8001ce2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ce6:	3308      	adds	r3, #8
 8001ce8:	2201      	movs	r2, #1
 8001cea:	499f      	ldr	r1, [pc, #636]	; (8001f68 <StartDefaultTask+0x2f0>)
 8001cec:	4618      	mov	r0, r3
 8001cee:	f005 fd37 	bl	8007760 <memcpy>
			 memcpy(tmp_str+9,glider1.time,6);
 8001cf2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cf6:	3309      	adds	r3, #9
 8001cf8:	499a      	ldr	r1, [pc, #616]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	f101 031f 	add.w	r3, r1, #31
 8001d00:	6819      	ldr	r1, [r3, #0]
 8001d02:	6011      	str	r1, [r2, #0]
 8001d04:	889b      	ldrh	r3, [r3, #4]
 8001d06:	8093      	strh	r3, [r2, #4]
			 tmp_str[15]=0x00;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

			 if(glider1.last_depth>UVP_DEPTH_HL_LEVEL&&glider1.prev_depth<=UVP_DEPTH_HL_LEVEL)
 8001d0e:	4b95      	ldr	r3, [pc, #596]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001d10:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8001d14:	4995      	ldr	r1, [pc, #596]	; (8001f6c <StartDefaultTask+0x2f4>)
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f8e8 	bl	8000eec <__aeabi_fcmpgt>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d01a      	beq.n	8001d58 <StartDefaultTask+0xe0>
 8001d22:	4b90      	ldr	r3, [pc, #576]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001d24:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8001d28:	4990      	ldr	r1, [pc, #576]	; (8001f6c <StartDefaultTask+0x2f4>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff f8ca 	bl	8000ec4 <__aeabi_fcmple>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d010      	beq.n	8001d58 <StartDefaultTask+0xe0>
		     {
				uvp6_send_cmd(&uvp6_sensor1,UVP6_CMD_STOP_ACQ,NULL);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2101      	movs	r1, #1
 8001d3a:	488d      	ldr	r0, [pc, #564]	; (8001f70 <StartDefaultTask+0x2f8>)
 8001d3c:	f7ff fbb6 	bl	80014ac <uvp6_send_cmd>
				osDelay(1000);
 8001d40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d44:	f003 fb65 	bl	8005412 <osDelay>
				uvp6_send_cmd(&uvp6_sensor1,UVP6_CMD_START_L_ACQ,tmp_str);
 8001d48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2103      	movs	r1, #3
 8001d50:	4887      	ldr	r0, [pc, #540]	; (8001f70 <StartDefaultTask+0x2f8>)
 8001d52:	f7ff fbab 	bl	80014ac <uvp6_send_cmd>
 8001d56:	e023      	b.n	8001da0 <StartDefaultTask+0x128>
			 }
			 else if(glider1.last_depth<=UVP_DEPTH_HL_LEVEL&&glider1.prev_depth>UVP_DEPTH_HL_LEVEL)
 8001d58:	4b82      	ldr	r3, [pc, #520]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001d5a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8001d5e:	4983      	ldr	r1, [pc, #524]	; (8001f6c <StartDefaultTask+0x2f4>)
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff f8af 	bl	8000ec4 <__aeabi_fcmple>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d019      	beq.n	8001da0 <StartDefaultTask+0x128>
 8001d6c:	4b7d      	ldr	r3, [pc, #500]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001d6e:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8001d72:	497e      	ldr	r1, [pc, #504]	; (8001f6c <StartDefaultTask+0x2f4>)
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff f8b9 	bl	8000eec <__aeabi_fcmpgt>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00f      	beq.n	8001da0 <StartDefaultTask+0x128>
			 {
				uvp6_send_cmd(&uvp6_sensor1,UVP6_CMD_STOP_ACQ,NULL);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2101      	movs	r1, #1
 8001d84:	487a      	ldr	r0, [pc, #488]	; (8001f70 <StartDefaultTask+0x2f8>)
 8001d86:	f7ff fb91 	bl	80014ac <uvp6_send_cmd>
			    osDelay(1000);
 8001d8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d8e:	f003 fb40 	bl	8005412 <osDelay>
				uvp6_send_cmd(&uvp6_sensor1,UVP6_CMD_START_H_ACQ,tmp_str);
 8001d92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d96:	461a      	mov	r2, r3
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4875      	ldr	r0, [pc, #468]	; (8001f70 <StartDefaultTask+0x2f8>)
 8001d9c:	f7ff fb86 	bl	80014ac <uvp6_send_cmd>
			 }
			 seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 8001da0:	2200      	movs	r2, #0
 8001da2:	2100      	movs	r1, #0
 8001da4:	486f      	ldr	r0, [pc, #444]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001da6:	f000 fc23 	bl	80025f0 <seaglider_send_cmd>
         break;
 8001daa:	e0a1      	b.n	8001ef0 <StartDefaultTask+0x278>
		 case SEAGLIDER_EVNT_START_RCVD:
		   if(uvp6_sensor1.status!=UVP6_READY) osDelay(2000);
 8001dac:	4b70      	ldr	r3, [pc, #448]	; (8001f70 <StartDefaultTask+0x2f8>)
 8001dae:	7b5b      	ldrb	r3, [r3, #13]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d003      	beq.n	8001dbc <StartDefaultTask+0x144>
 8001db4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001db8:	f003 fb2b 	bl	8005412 <osDelay>
		   if(uvp6_sensor1.status!=UVP6_READY) break;
 8001dbc:	4b6c      	ldr	r3, [pc, #432]	; (8001f70 <StartDefaultTask+0x2f8>)
 8001dbe:	7b5b      	ldrb	r3, [r3, #13]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	f040 8094 	bne.w	8001eee <StartDefaultTask+0x276>
			 memcpy(tmp_str,glider1.date,8);
 8001dc6:	4a67      	ldr	r2, [pc, #412]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001dc8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dcc:	3217      	adds	r2, #23
 8001dce:	6810      	ldr	r0, [r2, #0]
 8001dd0:	6851      	ldr	r1, [r2, #4]
 8001dd2:	c303      	stmia	r3!, {r0, r1}
			 memcpy(tmp_str+8,",",1);
 8001dd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dd8:	3308      	adds	r3, #8
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4962      	ldr	r1, [pc, #392]	; (8001f68 <StartDefaultTask+0x2f0>)
 8001dde:	4618      	mov	r0, r3
 8001de0:	f005 fcbe 	bl	8007760 <memcpy>
			 memcpy(tmp_str+9,glider1.time,6);
 8001de4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001de8:	3309      	adds	r3, #9
 8001dea:	495e      	ldr	r1, [pc, #376]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001dec:	461a      	mov	r2, r3
 8001dee:	f101 031f 	add.w	r3, r1, #31
 8001df2:	6819      	ldr	r1, [r3, #0]
 8001df4:	6011      	str	r1, [r2, #0]
 8001df6:	889b      	ldrh	r3, [r3, #4]
 8001df8:	8093      	strh	r3, [r2, #4]
			 tmp_str[15]=0x00;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			 mcu_flash_flush(&data_flash);
 8001e00:	4857      	ldr	r0, [pc, #348]	; (8001f60 <StartDefaultTask+0x2e8>)
 8001e02:	f000 fab5 	bl	8002370 <mcu_flash_flush>
			 if(glider1.last_depth<=UVP_DEPTH_HL_LEVEL)
 8001e06:	4b57      	ldr	r3, [pc, #348]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001e08:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8001e0c:	4957      	ldr	r1, [pc, #348]	; (8001f6c <StartDefaultTask+0x2f4>)
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff f858 	bl	8000ec4 <__aeabi_fcmple>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d007      	beq.n	8001e2a <StartDefaultTask+0x1b2>
			  {
  		        uvp6_send_cmd(&uvp6_sensor1,UVP6_CMD_START_H_ACQ,tmp_str);
 8001e1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2100      	movs	r1, #0
 8001e22:	4853      	ldr	r0, [pc, #332]	; (8001f70 <StartDefaultTask+0x2f8>)
 8001e24:	f7ff fb42 	bl	80014ac <uvp6_send_cmd>
 8001e28:	e010      	b.n	8001e4c <StartDefaultTask+0x1d4>
			  }
			 else if(glider1.last_depth>UVP_DEPTH_HL_LEVEL)
 8001e2a:	4b4e      	ldr	r3, [pc, #312]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001e2c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8001e30:	494e      	ldr	r1, [pc, #312]	; (8001f6c <StartDefaultTask+0x2f4>)
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff f85a 	bl	8000eec <__aeabi_fcmpgt>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d006      	beq.n	8001e4c <StartDefaultTask+0x1d4>
  			  {
  		    	uvp6_send_cmd(&uvp6_sensor1,UVP6_CMD_START_L_ACQ,tmp_str);
 8001e3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e42:	461a      	mov	r2, r3
 8001e44:	2103      	movs	r1, #3
 8001e46:	484a      	ldr	r0, [pc, #296]	; (8001f70 <StartDefaultTask+0x2f8>)
 8001e48:	f7ff fb30 	bl	80014ac <uvp6_send_cmd>
  			  }
			 seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4844      	ldr	r0, [pc, #272]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001e52:	f000 fbcd 	bl	80025f0 <seaglider_send_cmd>
		 break;
 8001e56:	e04b      	b.n	8001ef0 <StartDefaultTask+0x278>
		 case SEAGLIDER_EVNT_CLOCK_RCVD:
			 seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4841      	ldr	r0, [pc, #260]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001e5e:	f000 fbc7 	bl	80025f0 <seaglider_send_cmd>
		 break;
 8001e62:	e045      	b.n	8001ef0 <StartDefaultTask+0x278>
		 case SEAGLIDER_EVNT_WAKEUP_RCVD:
			 seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 8001e64:	2200      	movs	r2, #0
 8001e66:	2100      	movs	r1, #0
 8001e68:	483e      	ldr	r0, [pc, #248]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001e6a:	f000 fbc1 	bl	80025f0 <seaglider_send_cmd>
		 break;
 8001e6e:	e03f      	b.n	8001ef0 <StartDefaultTask+0x278>
		 case SEAGLIDER_EVNT_STOP_RCVD:
			  uvp6_send_cmd(&uvp6_sensor1,UVP6_CMD_STOP_ACQ,NULL);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2101      	movs	r1, #1
 8001e74:	483e      	ldr	r0, [pc, #248]	; (8001f70 <StartDefaultTask+0x2f8>)
 8001e76:	f7ff fb19 	bl	80014ac <uvp6_send_cmd>
			  osDelay(1000);
 8001e7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e7e:	f003 fac8 	bl	8005412 <osDelay>
			  mcu_flash_close(&data_flash,MCU_FLASH_CLEAN_FLAG);
 8001e82:	493c      	ldr	r1, [pc, #240]	; (8001f74 <StartDefaultTask+0x2fc>)
 8001e84:	4836      	ldr	r0, [pc, #216]	; (8001f60 <StartDefaultTask+0x2e8>)
 8001e86:	f000 f9dd 	bl	8002244 <mcu_flash_close>
			  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4835      	ldr	r0, [pc, #212]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001e90:	f000 fbae 	bl	80025f0 <seaglider_send_cmd>
		 break;
 8001e94:	e02c      	b.n	8001ef0 <StartDefaultTask+0x278>
		 case SEAGLIDER_EVNT_TEST_RCVD:
			  ptr1.start_addr=data_flash.data_pages_addr;
 8001e96:	4b32      	ldr	r3, [pc, #200]	; (8001f60 <StartDefaultTask+0x2e8>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	60fb      	str	r3, [r7, #12]
			  ptr1.size=data_flash.flash_state.write_indx;
 8001e9c:	4b30      	ldr	r3, [pc, #192]	; (8001f60 <StartDefaultTask+0x2e8>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	613b      	str	r3, [r7, #16]
			  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_SEND_DATA,&ptr1);
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	482e      	ldr	r0, [pc, #184]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001eac:	f000 fba0 	bl	80025f0 <seaglider_send_cmd>
			  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	482b      	ldr	r0, [pc, #172]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001eb6:	f000 fb9b 	bl	80025f0 <seaglider_send_cmd>
		 break;
 8001eba:	e019      	b.n	8001ef0 <StartDefaultTask+0x278>
		 case SEAGLIDER_EVNT_SEND_TXT_FILE_RCVD:
			  mcu_flash_close(&data_flash,MCU_FLASH_DIRTY_FLAG);
 8001ebc:	492e      	ldr	r1, [pc, #184]	; (8001f78 <StartDefaultTask+0x300>)
 8001ebe:	4828      	ldr	r0, [pc, #160]	; (8001f60 <StartDefaultTask+0x2e8>)
 8001ec0:	f000 f9c0 	bl	8002244 <mcu_flash_close>
			  ptr1.start_addr=data_flash.data_pages_addr;
 8001ec4:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <StartDefaultTask+0x2e8>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	60fb      	str	r3, [r7, #12]
			  ptr1.size=data_flash.flash_state.write_indx;
 8001eca:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <StartDefaultTask+0x2e8>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	613b      	str	r3, [r7, #16]
			  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_SEND_DATA,&ptr1);
 8001ed0:	f107 030c 	add.w	r3, r7, #12
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4822      	ldr	r0, [pc, #136]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001eda:	f000 fb89 	bl	80025f0 <seaglider_send_cmd>
			  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4820      	ldr	r0, [pc, #128]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001ee4:	f000 fb84 	bl	80025f0 <seaglider_send_cmd>
		 break;
 8001ee8:	e002      	b.n	8001ef0 <StartDefaultTask+0x278>

		}
	 }
 8001eea:	bf00      	nop
 8001eec:	e000      	b.n	8001ef0 <StartDefaultTask+0x278>
		   if(uvp6_sensor1.status!=UVP6_READY) break;
 8001eee:	bf00      	nop

	 //UVP6 tasks

	 if(uvp6_get_event(&uvp6_sensor1,&event_id)==UVP6_F_OK)
 8001ef0:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	481e      	ldr	r0, [pc, #120]	; (8001f70 <StartDefaultTask+0x2f8>)
 8001ef8:	f7ff fba2 	bl	8001640 <uvp6_get_event>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 8098 	bne.w	8002034 <StartDefaultTask+0x3bc>
	 {
        switch(event_id)
 8001f04:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <StartDefaultTask+0x29a>
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d006      	beq.n	8001f1e <StartDefaultTask+0x2a6>
 8001f10:	e093      	b.n	800203a <StartDefaultTask+0x3c2>
        {
         case UVP6_EVNT_BOOTED:
        	 //osDelay(1000);
        	 seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	4813      	ldr	r0, [pc, #76]	; (8001f64 <StartDefaultTask+0x2ec>)
 8001f18:	f000 fb6a 	bl	80025f0 <seaglider_send_cmd>
         break;
 8001f1c:	e08d      	b.n	800203a <StartDefaultTask+0x3c2>
         case UVP6_EVNT_LPM_DATA_RCVD:
			//save only every 10 message
			lpm_messages_couter++;
 8001f1e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001f22:	3301      	adds	r3, #1
 8001f24:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			lpm_messages_couter=lpm_messages_couter%10;
 8001f28:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8001f2c:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <StartDefaultTask+0x304>)
 8001f2e:	fba3 1302 	umull	r1, r3, r3, r2
 8001f32:	08d9      	lsrs	r1, r3, #3
 8001f34:	460b      	mov	r3, r1
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        	//read LPM values
          if(uvp6_sensor1.status==UVP6_ACQ_STARTED && lpm_messages_couter==1)
 8001f42:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <StartDefaultTask+0x2f8>)
 8001f44:	7b5b      	ldrb	r3, [r3, #13]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d176      	bne.n	8002038 <StartDefaultTask+0x3c0>
 8001f4a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d172      	bne.n	8002038 <StartDefaultTask+0x3c0>
        	{

        	  y=0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  for(int i=0;i<13;i+=4)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	663b      	str	r3, [r7, #96]	; 0x60
 8001f5c:	e040      	b.n	8001fe0 <StartDefaultTask+0x368>
 8001f5e:	bf00      	nop
 8001f60:	20000da4 	.word	0x20000da4
 8001f64:	20000978 	.word	0x20000978
 8001f68:	0800abf0 	.word	0x0800abf0
 8001f6c:	42c80000 	.word	0x42c80000
 8001f70:	20000518 	.word	0x20000518
 8001f74:	fa1205ab 	.word	0xfa1205ab
 8001f78:	12ab34fe 	.word	0x12ab34fe
 8001f7c:	cccccccd 	.word	0xcccccccd
			  {
				avg_data[y]=uvp6_sensor1.lpm_data.data[i]+uvp6_sensor1.lpm_data.data[i+1]+uvp6_sensor1.lpm_data.data[i+2]+uvp6_sensor1.lpm_data.data[i+3];
 8001f80:	4a30      	ldr	r2, [pc, #192]	; (8002044 <StartDefaultTask+0x3cc>)
 8001f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f84:	330c      	adds	r3, #12
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	89da      	ldrh	r2, [r3, #14]
 8001f8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f8e:	3301      	adds	r3, #1
 8001f90:	492c      	ldr	r1, [pc, #176]	; (8002044 <StartDefaultTask+0x3cc>)
 8001f92:	330c      	adds	r3, #12
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	440b      	add	r3, r1
 8001f98:	89db      	ldrh	r3, [r3, #14]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	4928      	ldr	r1, [pc, #160]	; (8002044 <StartDefaultTask+0x3cc>)
 8001fa4:	330c      	adds	r3, #12
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	440b      	add	r3, r1
 8001faa:	89db      	ldrh	r3, [r3, #14]
 8001fac:	4413      	add	r3, r2
 8001fae:	b299      	uxth	r1, r3
 8001fb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fb2:	3303      	adds	r3, #3
 8001fb4:	4a23      	ldr	r2, [pc, #140]	; (8002044 <StartDefaultTask+0x3cc>)
 8001fb6:	330c      	adds	r3, #12
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	89da      	ldrh	r2, [r3, #14]
 8001fbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001fc2:	440a      	add	r2, r1
 8001fc4:	b292      	uxth	r2, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	3368      	adds	r3, #104	; 0x68
 8001fca:	443b      	add	r3, r7
 8001fcc:	f823 2c54 	strh.w	r2, [r3, #-84]
				y++;
 8001fd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  for(int i=0;i<13;i+=4)
 8001fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fdc:	3304      	adds	r3, #4
 8001fde:	663b      	str	r3, [r7, #96]	; 0x60
 8001fe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	ddcc      	ble.n	8001f80 <StartDefaultTask+0x308>
			  }
			avg_data[4]=uvp6_sensor1.lpm_data.data[16]+uvp6_sensor1.lpm_data.data[17];
 8001fe6:	4b17      	ldr	r3, [pc, #92]	; (8002044 <StartDefaultTask+0x3cc>)
 8001fe8:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <StartDefaultTask+0x3cc>)
 8001fee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001ff2:	4413      	add	r3, r2
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	83bb      	strh	r3, [r7, #28]
			sprintf(avg_str,"%d,%d,%d,%d,%d\n",avg_data[0],avg_data[1],avg_data[2],avg_data[3],avg_data[4]);
 8001ff8:	8abb      	ldrh	r3, [r7, #20]
 8001ffa:	461c      	mov	r4, r3
 8001ffc:	8afb      	ldrh	r3, [r7, #22]
 8001ffe:	461d      	mov	r5, r3
 8002000:	8b3b      	ldrh	r3, [r7, #24]
 8002002:	8b7a      	ldrh	r2, [r7, #26]
 8002004:	8bb9      	ldrh	r1, [r7, #28]
 8002006:	f107 0020 	add.w	r0, r7, #32
 800200a:	9102      	str	r1, [sp, #8]
 800200c:	9201      	str	r2, [sp, #4]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	462b      	mov	r3, r5
 8002012:	4622      	mov	r2, r4
 8002014:	490c      	ldr	r1, [pc, #48]	; (8002048 <StartDefaultTask+0x3d0>)
 8002016:	f005 fbb9 	bl	800778c <siprintf>
			mcu_flash_write(&data_flash,avg_str,strlen(avg_str));
 800201a:	f107 0320 	add.w	r3, r7, #32
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe f906 	bl	8000230 <strlen>
 8002024:	4602      	mov	r2, r0
 8002026:	f107 0320 	add.w	r3, r7, #32
 800202a:	4619      	mov	r1, r3
 800202c:	4807      	ldr	r0, [pc, #28]	; (800204c <StartDefaultTask+0x3d4>)
 800202e:	f000 f868 	bl	8002102 <mcu_flash_write>
			//seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
          }
		 break;
 8002032:	e001      	b.n	8002038 <StartDefaultTask+0x3c0>
        }
	 }
 8002034:	bf00      	nop
 8002036:	e000      	b.n	800203a <StartDefaultTask+0x3c2>
		 break;
 8002038:	bf00      	nop
	 osDelay(1);
 800203a:	2001      	movs	r0, #1
 800203c:	f003 f9e9 	bl	8005412 <osDelay>
	 if(seaglider_get_event(&glider1,&event_id)==SEAGLIDER_F_OK)
 8002040:	e627      	b.n	8001c92 <StartDefaultTask+0x1a>
 8002042:	bf00      	nop
 8002044:	20000518 	.word	0x20000518
 8002048:	0800abf4 	.word	0x0800abf4
 800204c:	20000da4 	.word	0x20000da4

08002050 <uart_tx_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_tx_f */
void uart_tx_f(void const * argument)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_tx_f */
  /* Infinite loop */
  uint8_t tmp1;
  uint8_t tmp2;
  uvp6_sensor1.media_status=UVP6_MEDIA_READY;
 8002058:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <uart_tx_f+0x74>)
 800205a:	2201      	movs	r2, #1
 800205c:	739a      	strb	r2, [r3, #14]
  glider1.media_status=SEAGLIDER_MEDIA_READY;
 800205e:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <uart_tx_f+0x78>)
 8002060:	220a      	movs	r2, #10
 8002062:	735a      	strb	r2, [r3, #13]
  for(;;)
  {
       if(GLIDER_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8002064:	4b19      	ldr	r3, [pc, #100]	; (80020cc <uart_tx_f+0x7c>)
 8002066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b21      	cmp	r3, #33	; 0x21
 800206e:	d00f      	beq.n	8002090 <uart_tx_f+0x40>
       {
		if(seaglider_media_get_byte(&glider1,&tmp1)==SEAGLIDER_F_OK)
 8002070:	f107 030f 	add.w	r3, r7, #15
 8002074:	4619      	mov	r1, r3
 8002076:	4814      	ldr	r0, [pc, #80]	; (80020c8 <uart_tx_f+0x78>)
 8002078:	f000 fa9f 	bl	80025ba <seaglider_media_get_byte>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d106      	bne.n	8002090 <uart_tx_f+0x40>
		{
		   HAL_UART_Transmit_IT(&GLIDER_UART,&tmp1,1);
 8002082:	f107 030f 	add.w	r3, r7, #15
 8002086:	2201      	movs	r2, #1
 8002088:	4619      	mov	r1, r3
 800208a:	4810      	ldr	r0, [pc, #64]	; (80020cc <uart_tx_f+0x7c>)
 800208c:	f002 fcfb 	bl	8004a86 <HAL_UART_Transmit_IT>
		}
       }
       if(UVP6_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <uart_tx_f+0x80>)
 8002092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b21      	cmp	r3, #33	; 0x21
 800209a:	d00f      	beq.n	80020bc <uart_tx_f+0x6c>
       {
		if(uvp6_media_get_byte(&uvp6_sensor1,&tmp2)==UVP6_F_OK)
 800209c:	f107 030e 	add.w	r3, r7, #14
 80020a0:	4619      	mov	r1, r3
 80020a2:	4808      	ldr	r0, [pc, #32]	; (80020c4 <uart_tx_f+0x74>)
 80020a4:	f7ff f9e6 	bl	8001474 <uvp6_media_get_byte>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <uart_tx_f+0x6c>
		{
		   HAL_UART_Transmit_IT(&UVP6_UART,&tmp2,1);
 80020ae:	f107 030e 	add.w	r3, r7, #14
 80020b2:	2201      	movs	r2, #1
 80020b4:	4619      	mov	r1, r3
 80020b6:	4806      	ldr	r0, [pc, #24]	; (80020d0 <uart_tx_f+0x80>)
 80020b8:	f002 fce5 	bl	8004a86 <HAL_UART_Transmit_IT>
		}
       }
    osDelay(1);
 80020bc:	2001      	movs	r0, #1
 80020be:	f003 f9a8 	bl	8005412 <osDelay>
       if(GLIDER_UART.gState!=HAL_UART_STATE_BUSY_TX)
 80020c2:	e7cf      	b.n	8002064 <uart_tx_f+0x14>
 80020c4:	20000518 	.word	0x20000518
 80020c8:	20000978 	.word	0x20000978
 80020cc:	20000488 	.word	0x20000488
 80020d0:	200004cc 	.word	0x200004cc

080020d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020e6:	f000 ff05 	bl	8002ef4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40012c00 	.word	0x40012c00

080020f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020fc:	b672      	cpsid	i
}
 80020fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002100:	e7fe      	b.n	8002100 <Error_Handler+0x8>

08002102 <mcu_flash_write>:
extern UART_HandleTypeDef huart1;
//HAL_UART_Transmit(&huart1,msg,strlen(msg),100)


void mcu_flash_write(mcu_flash* mcu_flash_obj,uint8_t* data, uint32_t datalen)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
	if((mcu_flash_obj->flash_state.write_indx+datalen)<FLASH_BUFFER_SIZE)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800211a:	d210      	bcs.n	800213e <mcu_flash_write+0x3c>
	{
		memcpy(mcu_flash_obj->buffer+mcu_flash_obj->flash_state.write_indx,data,datalen);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f103 0214 	add.w	r2, r3, #20
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4413      	add	r3, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68b9      	ldr	r1, [r7, #8]
 800212c:	4618      	mov	r0, r3
 800212e:	f005 fb17 	bl	8007760 <memcpy>
		mcu_flash_obj->flash_state.write_indx=mcu_flash_obj->flash_state.write_indx+datalen;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	441a      	add	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	605a      	str	r2, [r3, #4]
	}
}
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <mcu_flash_init>:



void mcu_flash_init(mcu_flash* mcu_flash_obj,uint32_t start_page)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
	mcu_flash_obj->sys_page_addr=FLASH_BASE+(start_page*FLASH_PAGE_SIZE);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002156:	02da      	lsls	r2, r3, #11
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	609a      	str	r2, [r3, #8]
	mcu_flash_obj->data_pages_addr=mcu_flash_obj->sys_page_addr+FLASH_PAGE_SIZE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	60da      	str	r2, [r3, #12]
	mcu_flash_obj->num_of_pages=(FLASH_BUFFER_SIZE/FLASH_PAGE_SIZE)+1;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f042 0206 	orr.w	r2, r2, #6
 8002170:	741a      	strb	r2, [r3, #16]
 8002172:	2200      	movs	r2, #0
 8002174:	745a      	strb	r2, [r3, #17]
 8002176:	2200      	movs	r2, #0
 8002178:	749a      	strb	r2, [r3, #18]
 800217a:	2200      	movs	r2, #0
 800217c:	74da      	strb	r2, [r3, #19]
	mcu_flash_obj->flash_state.flag=MCU_FLASH_CLEAN_FLAG;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f062 0254 	orn	r2, r2, #84	; 0x54
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	2200      	movs	r2, #0
 800218a:	f042 0205 	orr.w	r2, r2, #5
 800218e:	705a      	strb	r2, [r3, #1]
 8002190:	2200      	movs	r2, #0
 8002192:	f042 0212 	orr.w	r2, r2, #18
 8002196:	709a      	strb	r2, [r3, #2]
 8002198:	2200      	movs	r2, #0
 800219a:	f062 0205 	orn	r2, r2, #5
 800219e:	70da      	strb	r2, [r3, #3]
	mcu_flash_obj->flash_state.write_indx=0;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	711a      	strb	r2, [r3, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	715a      	strb	r2, [r3, #5]
 80021aa:	2200      	movs	r2, #0
 80021ac:	719a      	strb	r2, [r3, #6]
 80021ae:	2200      	movs	r2, #0
 80021b0:	71da      	strb	r2, [r3, #7]
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <mcu_flash_open>:

void mcu_flash_open(mcu_flash* mcu_flash_obj)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

	memcpy((uint8_t*)&(mcu_flash_obj->flash_state),(uint8_t*)mcu_flash_obj->sys_page_addr,sizeof(flash_state_str));
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2208      	movs	r2, #8
 80021cc:	4619      	mov	r1, r3
 80021ce:	f005 fac7 	bl	8007760 <memcpy>
	//HAL_UART_Transmit(&huart1,&(mcu_flash_obj->flash_state.flag),4,100);
	//HAL_UART_Transmit(&huart1,&(mcu_flash_obj->flash_state.write_indx),4,100);
	if(mcu_flash_obj->flash_state.flag!=MCU_FLASH_CLEAN_FLAG && mcu_flash_obj->flash_state.flag!=MCU_FLASH_DIRTY_FLAG)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a19      	ldr	r2, [pc, #100]	; (800223c <mcu_flash_open+0x80>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d01f      	beq.n	800221c <mcu_flash_open+0x60>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a17      	ldr	r2, [pc, #92]	; (8002240 <mcu_flash_open+0x84>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d01a      	beq.n	800221c <mcu_flash_open+0x60>
	{
	  mcu_flash_obj->flash_state.flag=MCU_FLASH_CLEAN_FLAG;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f062 0254 	orn	r2, r2, #84	; 0x54
 80021ee:	701a      	strb	r2, [r3, #0]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f042 0205 	orr.w	r2, r2, #5
 80021f6:	705a      	strb	r2, [r3, #1]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f042 0212 	orr.w	r2, r2, #18
 80021fe:	709a      	strb	r2, [r3, #2]
 8002200:	2200      	movs	r2, #0
 8002202:	f062 0205 	orn	r2, r2, #5
 8002206:	70da      	strb	r2, [r3, #3]
	  mcu_flash_obj->flash_state.write_indx=0;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	711a      	strb	r2, [r3, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	715a      	strb	r2, [r3, #5]
 8002212:	2200      	movs	r2, #0
 8002214:	719a      	strb	r2, [r3, #6]
 8002216:	2200      	movs	r2, #0
 8002218:	71da      	strb	r2, [r3, #7]
 800221a:	e00b      	b.n	8002234 <mcu_flash_open+0x78>
	}
	else
	{
	 memcpy(mcu_flash_obj->buffer,(uint8_t*)mcu_flash_obj->data_pages_addr,mcu_flash_obj->flash_state.write_indx);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f103 0014 	add.w	r0, r3, #20
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	4619      	mov	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	461a      	mov	r2, r3
 800222e:	f005 fa97 	bl	8007760 <memcpy>
	}


}
 8002232:	bf00      	nop
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	fa1205ab 	.word	0xfa1205ab
 8002240:	12ab34fe 	.word	0x12ab34fe

08002244 <mcu_flash_close>:
void mcu_flash_close(mcu_flash* mcu_flash_obj,uint32_t flag)
{
 8002244:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002248:	b08c      	sub	sp, #48	; 0x30
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	6039      	str	r1, [r7, #0]
	mcu_flash_obj->flash_state.flag=flag;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	601a      	str	r2, [r3, #0]
	uint32_t start_addr=mcu_flash_obj->sys_page_addr;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_FLASH_Unlock();
 800225c:	f001 f8f8 	bl	8003450 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef erase_info = {
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	617b      	str	r3, [r7, #20]
		.TypeErase = FLASH_TYPEERASE_PAGES,
		.PageAddress = start_addr ,
		.NbPages = mcu_flash_obj->num_of_pages,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
	FLASH_EraseInitTypeDef erase_info = {
 8002276:	61bb      	str	r3, [r7, #24]
	};

	uint32_t pgerr = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&erase_info, &pgerr);
 800227c:	f107 0208 	add.w	r2, r7, #8
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f001 f9ca 	bl	8003620 <HAL_FLASHEx_Erase>

	if(pgerr != 0xFFFFFFFFul)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002292:	d002      	beq.n	800229a <mcu_flash_close+0x56>
	{
		HAL_FLASH_Lock();
 8002294:	f001 f902 	bl	800349c <HAL_FLASH_Lock>
 8002298:	e066      	b.n	8002368 <mcu_flash_close+0x124>
		return ;
	}

	uint32_t i=0;
 800229a:	2300      	movs	r3, #0
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t tmp;
	uint8_t* data=(uint8_t*)&(mcu_flash_obj->flash_state);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	623b      	str	r3, [r7, #32]
    uint32_t datalen=sizeof(flash_state_str);
 80022a2:	2308      	movs	r3, #8
 80022a4:	61fb      	str	r3, [r7, #28]
	while(i<datalen)
 80022a6:	e024      	b.n	80022f2 <mcu_flash_close+0xae>
	{
        tmp=(tmp&0x0000)|(data[i]&0x00FF);
 80022a8:	6a3a      	ldr	r2, [r7, #32]
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	4413      	add	r3, r2
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	857b      	strh	r3, [r7, #42]	; 0x2a
		if((i+1)<datalen) tmp=tmp|(data[i+1]<<8&0xFF00);
 80022b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b4:	3301      	adds	r3, #1
 80022b6:	69fa      	ldr	r2, [r7, #28]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d90b      	bls.n	80022d4 <mcu_flash_close+0x90>
 80022bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022be:	3301      	adds	r3, #1
 80022c0:	6a3a      	ldr	r2, [r7, #32]
 80022c2:	4413      	add	r3, r2
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	b21a      	sxth	r2, r3
 80022ca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	857b      	strh	r3, [r7, #42]	; 0x2a
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,start_addr+i,tmp);
 80022d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	18d1      	adds	r1, r2, r3
 80022da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022dc:	2200      	movs	r2, #0
 80022de:	4698      	mov	r8, r3
 80022e0:	4691      	mov	r9, r2
 80022e2:	4642      	mov	r2, r8
 80022e4:	464b      	mov	r3, r9
 80022e6:	2001      	movs	r0, #1
 80022e8:	f001 f842 	bl	8003370 <HAL_FLASH_Program>
		i=i+2;
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ee:	3302      	adds	r3, #2
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(i<datalen)
 80022f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d3d6      	bcc.n	80022a8 <mcu_flash_close+0x64>
	}

	i=0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	start_addr=mcu_flash_obj->data_pages_addr;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
	data=mcu_flash_obj->buffer;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3314      	adds	r3, #20
 8002308:	623b      	str	r3, [r7, #32]
	datalen=mcu_flash_obj->flash_state.write_indx;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	61fb      	str	r3, [r7, #28]
	while(i<datalen)
 8002310:	e024      	b.n	800235c <mcu_flash_close+0x118>
	{
        tmp=(tmp&0x0000)|(data[i]&0x00FF);
 8002312:	6a3a      	ldr	r2, [r7, #32]
 8002314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002316:	4413      	add	r3, r2
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	857b      	strh	r3, [r7, #42]	; 0x2a
		if((i+1)<datalen) tmp=tmp|(data[i+1]<<8&0xFF00);
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	3301      	adds	r3, #1
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	429a      	cmp	r2, r3
 8002324:	d90b      	bls.n	800233e <mcu_flash_close+0xfa>
 8002326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002328:	3301      	adds	r3, #1
 800232a:	6a3a      	ldr	r2, [r7, #32]
 800232c:	4413      	add	r3, r2
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	b21a      	sxth	r2, r3
 8002334:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002338:	4313      	orrs	r3, r2
 800233a:	b21b      	sxth	r3, r3
 800233c:	857b      	strh	r3, [r7, #42]	; 0x2a
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,start_addr+i,tmp);
 800233e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002342:	18d1      	adds	r1, r2, r3
 8002344:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002346:	2200      	movs	r2, #0
 8002348:	461c      	mov	r4, r3
 800234a:	4615      	mov	r5, r2
 800234c:	4622      	mov	r2, r4
 800234e:	462b      	mov	r3, r5
 8002350:	2001      	movs	r0, #1
 8002352:	f001 f80d 	bl	8003370 <HAL_FLASH_Program>
		i=i+2;
 8002356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002358:	3302      	adds	r3, #2
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(i<datalen)
 800235c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	429a      	cmp	r2, r3
 8002362:	d3d6      	bcc.n	8002312 <mcu_flash_close+0xce>
	}


	HAL_FLASH_Lock();
 8002364:	f001 f89a 	bl	800349c <HAL_FLASH_Lock>
}
 8002368:	3730      	adds	r7, #48	; 0x30
 800236a:	46bd      	mov	sp, r7
 800236c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002370 <mcu_flash_flush>:


void mcu_flash_flush(mcu_flash* mcu_flash_obj)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if(mcu_flash_obj->flash_state.flag==MCU_FLASH_DIRTY_FLAG)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a13      	ldr	r2, [pc, #76]	; (80023cc <mcu_flash_flush+0x5c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d120      	bne.n	80023c4 <mcu_flash_flush+0x54>
	{
	  mcu_flash_obj->flash_state.flag=MCU_FLASH_CLEAN_FLAG;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f062 0254 	orn	r2, r2, #84	; 0x54
 800238a:	701a      	strb	r2, [r3, #0]
 800238c:	2200      	movs	r2, #0
 800238e:	f042 0205 	orr.w	r2, r2, #5
 8002392:	705a      	strb	r2, [r3, #1]
 8002394:	2200      	movs	r2, #0
 8002396:	f042 0212 	orr.w	r2, r2, #18
 800239a:	709a      	strb	r2, [r3, #2]
 800239c:	2200      	movs	r2, #0
 800239e:	f062 0205 	orn	r2, r2, #5
 80023a2:	70da      	strb	r2, [r3, #3]
	  mcu_flash_obj->flash_state.write_indx=0;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	711a      	strb	r2, [r3, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	715a      	strb	r2, [r3, #5]
 80023ae:	2200      	movs	r2, #0
 80023b0:	719a      	strb	r2, [r3, #6]
 80023b2:	2200      	movs	r2, #0
 80023b4:	71da      	strb	r2, [r3, #7]
	  mcu_flash_close(mcu_flash_obj,MCU_FLASH_CLEAN_FLAG);
 80023b6:	4906      	ldr	r1, [pc, #24]	; (80023d0 <mcu_flash_flush+0x60>)
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff43 	bl	8002244 <mcu_flash_close>
	  mcu_flash_open( mcu_flash_obj);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff fefc 	bl	80021bc <mcu_flash_open>
	}

}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	12ab34fe 	.word	0x12ab34fe
 80023d0:	fa1205ab 	.word	0xfa1205ab

080023d4 <seaglider_init>:

const char* seaglider_commands_strings[]={"UV>\r"};


void seaglider_init(seaglider* seaglider_obj)
{
 80023d4:	b5b0      	push	{r4, r5, r7, lr}
 80023d6:	b096      	sub	sp, #88	; 0x58
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	seaglider_obj->last_depth=0.0;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f8c3 200f 	str.w	r2, [r3, #15]
	seaglider_obj->prev_depth=0.0;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f8c3 2013 	str.w	r2, [r3, #19]
	seaglider_messages_init(seaglider_obj);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f98f 	bl	8002714 <seaglider_messages_init>


	osMessageQDef(seaglider_events_q, 20, uint8_t);
 80023f6:	4b20      	ldr	r3, [pc, #128]	; (8002478 <seaglider_init+0xa4>)
 80023f8:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80023fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	seaglider_obj->events_q= osMessageCreate(osMessageQ(seaglider_events_q), NULL);
 8002402:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f003 f816 	bl	800543a <osMessageCreate>
 800240e:	4602      	mov	r2, r0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	609a      	str	r2, [r3, #8]

	osMessageQDef(seaglider_media_rx_q, 20, uint16_t);
 8002414:	4b19      	ldr	r3, [pc, #100]	; (800247c <seaglider_init+0xa8>)
 8002416:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800241a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800241c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	seaglider_obj->media_rx_messages_q= osMessageCreate(osMessageQ(seaglider_media_rx_q), NULL);
 8002420:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002424:	2100      	movs	r1, #0
 8002426:	4618      	mov	r0, r3
 8002428:	f003 f807 	bl	800543a <osMessageCreate>
 800242c:	4602      	mov	r2, r0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	601a      	str	r2, [r3, #0]

	osMessageQDef(seaglider_media_tx_q, 200, uint8_t);
 8002432:	4b13      	ldr	r3, [pc, #76]	; (8002480 <seaglider_init+0xac>)
 8002434:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002438:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800243a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	seaglider_obj->media_tx_q = osMessageCreate(osMessageQ(seaglider_media_tx_q), NULL);
 800243e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f002 fff8 	bl	800543a <osMessageCreate>
 800244a:	4602      	mov	r2, r0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	605a      	str	r2, [r3, #4]

	osThreadDef(seaglider_task, seaglider_loop, osPriorityNormal, 0, 256);
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <seaglider_init+0xb0>)
 8002452:	f107 040c 	add.w	r4, r7, #12
 8002456:	461d      	mov	r5, r3
 8002458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800245a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800245c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002460:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(seaglider_task), seaglider_obj);
 8002464:	f107 030c 	add.w	r3, r7, #12
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4618      	mov	r0, r3
 800246c:	f002 ff85 	bl	800537a <osThreadCreate>


}
 8002470:	bf00      	nop
 8002472:	3758      	adds	r7, #88	; 0x58
 8002474:	46bd      	mov	sp, r7
 8002476:	bdb0      	pop	{r4, r5, r7, pc}
 8002478:	0800ac1c 	.word	0x0800ac1c
 800247c:	0800ac2c 	.word	0x0800ac2c
 8002480:	0800ac3c 	.word	0x0800ac3c
 8002484:	0800ac4c 	.word	0x0800ac4c

08002488 <seaglider_loop>:


void seaglider_loop(seaglider* seaglider_obj)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	 uint16_t msg_indx;
	 for(;;)
	 {
		//test loopback
		if(xQueueReceive(seaglider_obj->media_rx_messages_q,&msg_indx,0))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f107 010a 	add.w	r1, r7, #10
 8002498:	2200      	movs	r2, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f003 fc2c 	bl	8005cf8 <xQueueReceive>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f4      	beq.n	8002490 <seaglider_loop+0x8>
		{   uint8_t* msg=seaglider_obj->rx_buffer+msg_indx;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3325      	adds	r3, #37	; 0x25
 80024aa:	897a      	ldrh	r2, [r7, #10]
 80024ac:	4413      	add	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]
			seaglider_parse_message(seaglider_obj,msg);
 80024b0:	68f9      	ldr	r1, [r7, #12]
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f8fa 	bl	80026ac <seaglider_parse_message>
		if(xQueueReceive(seaglider_obj->media_rx_messages_q,&msg_indx,0))
 80024b8:	e7ea      	b.n	8002490 <seaglider_loop+0x8>

080024ba <seaglider_media_process_byte>:

}


void seaglider_media_process_byte(seaglider* seaglider_obj,uint8_t rx_byte)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	460b      	mov	r3, r1
 80024c4:	70fb      	strb	r3, [r7, #3]
	if(seaglider_obj->media_status==SEAGLIDER_MEDIA_READY && rx_byte!=0x00)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	7b5b      	ldrb	r3, [r3, #13]
 80024ca:	2b0a      	cmp	r3, #10
 80024cc:	d162      	bne.n	8002594 <seaglider_media_process_byte+0xda>
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d05f      	beq.n	8002594 <seaglider_media_process_byte+0xda>
	{
		seaglider_obj->rx_buffer[seaglider_obj->rx_buffer_indx]=rx_byte;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8b3 3425 	ldrh.w	r3, [r3, #1061]	; 0x425
 80024da:	b29b      	uxth	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		if(rx_byte=='\r')
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	2b0d      	cmp	r3, #13
 80024ec:	d133      	bne.n	8002556 <seaglider_media_process_byte+0x9c>
		{
			seaglider_obj->rx_buffer[seaglider_obj->rx_buffer_indx]=0x00;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f8b3 3425 	ldrh.w	r3, [r3, #1061]	; 0x425
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			osMessagePut(seaglider_obj->media_rx_messages_q,seaglider_obj->rx_buffer_new_string_indx,1);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8b3 3427 	ldrh.w	r3, [r3, #1063]	; 0x427
 800250c:	b29b      	uxth	r3, r3
 800250e:	2201      	movs	r2, #1
 8002510:	4619      	mov	r1, r3
 8002512:	f002 ffbb 	bl	800548c <osMessagePut>
			if(seaglider_obj->rx_buffer_indx>SEAGLIDER_RX_BUFFER_THR) seaglider_obj->rx_buffer_indx=0;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f8b3 3425 	ldrh.w	r3, [r3, #1061]	; 0x425
 800251c:	b29b      	uxth	r3, r3
 800251e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002522:	d907      	bls.n	8002534 <seaglider_media_process_byte+0x7a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 8002532:	e008      	b.n	8002546 <seaglider_media_process_byte+0x8c>
			else  seaglider_obj->rx_buffer_indx++;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8b3 3425 	ldrh.w	r3, [r3, #1061]	; 0x425
 800253a:	b29b      	uxth	r3, r3
 800253c:	3301      	adds	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f8a3 2425 	strh.w	r2, [r3, #1061]	; 0x425
			seaglider_obj->rx_buffer_new_string_indx=seaglider_obj->rx_buffer_indx;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f8b3 3425 	ldrh.w	r3, [r3, #1061]	; 0x425
 800254c:	b29a      	uxth	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f8a3 2427 	strh.w	r2, [r3, #1063]	; 0x427
 8002554:	e008      	b.n	8002568 <seaglider_media_process_byte+0xae>
		}
		else seaglider_obj->rx_buffer_indx++;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8b3 3425 	ldrh.w	r3, [r3, #1061]	; 0x425
 800255c:	b29b      	uxth	r3, r3
 800255e:	3301      	adds	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f8a3 2425 	strh.w	r2, [r3, #1061]	; 0x425
		if(seaglider_obj->rx_buffer_indx==SEAGLIDER_RX_BUFFER_SIZE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f8b3 3425 	ldrh.w	r3, [r3, #1061]	; 0x425
 800256e:	b29b      	uxth	r3, r3
 8002570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002574:	d11d      	bne.n	80025b2 <seaglider_media_process_byte+0xf8>
		{
			seaglider_obj->rx_buffer_indx=0;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
			seaglider_obj->rx_buffer_new_string_indx=seaglider_obj->rx_buffer_indx;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f8b3 3425 	ldrh.w	r3, [r3, #1061]	; 0x425
 800258a:	b29a      	uxth	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f8a3 2427 	strh.w	r2, [r3, #1063]	; 0x427
		if(seaglider_obj->rx_buffer_indx==SEAGLIDER_RX_BUFFER_SIZE)
 8002592:	e00e      	b.n	80025b2 <seaglider_media_process_byte+0xf8>
		}
	}
	else
	{
		seaglider_obj->rx_buffer_indx=0;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
		seaglider_obj->rx_buffer_new_string_indx=seaglider_obj->rx_buffer_indx;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f8b3 3425 	ldrh.w	r3, [r3, #1061]	; 0x425
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f8a3 2427 	strh.w	r2, [r3, #1063]	; 0x427
	}
}
 80025b0:	bf00      	nop
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <seaglider_media_get_byte>:

uint8_t seaglider_media_get_byte(seaglider* seaglider_obj,uint8_t* tx_byte)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b086      	sub	sp, #24
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(seaglider_obj->media_tx_q,0);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6859      	ldr	r1, [r3, #4]
 80025c8:	f107 030c 	add.w	r3, r7, #12
 80025cc:	2200      	movs	r2, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f002 ff9c 	bl	800550c <osMessageGet>
	if(res.status==osEventMessage)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d105      	bne.n	80025e6 <seaglider_media_get_byte+0x2c>
    {
		*tx_byte=res.value.v;
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	701a      	strb	r2, [r3, #0]
		return SEAGLIDER_F_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e000      	b.n	80025e8 <seaglider_media_get_byte+0x2e>
    }
  return SEAGLIDER_F_ERR;
 80025e6:	2301      	movs	r3, #1
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <seaglider_send_cmd>:


void seaglider_send_cmd(seaglider* seaglider_obj,uint8_t cmd_id,void* arg)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	460b      	mov	r3, r1
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	72fb      	strb	r3, [r7, #11]
 memory_region_pointer* ptr1;
 switch(cmd_id)
 80025fe:	7afb      	ldrb	r3, [r7, #11]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <seaglider_send_cmd+0x1a>
 8002604:	2b01      	cmp	r3, #1
 8002606:	d01b      	beq.n	8002640 <seaglider_send_cmd+0x50>
		   osMessagePut(seaglider_obj->media_tx_q,*((uint8_t*)(ptr1->start_addr)+i),osWaitForever);
	   }
     break;
 }

}
 8002608:	e034      	b.n	8002674 <seaglider_send_cmd+0x84>
  	   for(int i=0;i<strlen(seaglider_commands_strings[SEAGLIDER_CMD_PROMPT]);i++)
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	e00d      	b.n	800262c <seaglider_send_cmd+0x3c>
  		   osMessagePut(seaglider_obj->media_tx_q,*(seaglider_commands_strings[SEAGLIDER_CMD_PROMPT]+i),1);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6858      	ldr	r0, [r3, #4]
 8002614:	4b19      	ldr	r3, [pc, #100]	; (800267c <seaglider_send_cmd+0x8c>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	4413      	add	r3, r2
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2201      	movs	r2, #1
 8002620:	4619      	mov	r1, r3
 8002622:	f002 ff33 	bl	800548c <osMessagePut>
  	   for(int i=0;i<strlen(seaglider_commands_strings[SEAGLIDER_CMD_PROMPT]);i++)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3301      	adds	r3, #1
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <seaglider_send_cmd+0x8c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fd fdfd 	bl	8000230 <strlen>
 8002636:	4602      	mov	r2, r0
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	429a      	cmp	r2, r3
 800263c:	d8e8      	bhi.n	8002610 <seaglider_send_cmd+0x20>
	 break;
 800263e:	e019      	b.n	8002674 <seaglider_send_cmd+0x84>
       ptr1=arg;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	617b      	str	r3, [r7, #20]
       for(int i=0;i<ptr1->size;i++)
 8002644:	2300      	movs	r3, #0
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	e00e      	b.n	8002668 <seaglider_send_cmd+0x78>
		   osMessagePut(seaglider_obj->media_tx_q,*((uint8_t*)(ptr1->start_addr)+i),osWaitForever);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6858      	ldr	r0, [r3, #4]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	4413      	add	r3, r2
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	f04f 32ff 	mov.w	r2, #4294967295
 800265c:	4619      	mov	r1, r3
 800265e:	f002 ff15 	bl	800548c <osMessagePut>
       for(int i=0;i<ptr1->size;i++)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	3301      	adds	r3, #1
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	429a      	cmp	r2, r3
 8002670:	d8eb      	bhi.n	800264a <seaglider_send_cmd+0x5a>
     break;
 8002672:	bf00      	nop
}
 8002674:	bf00      	nop
 8002676:	3720      	adds	r7, #32
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000010 	.word	0x20000010

08002680 <seaglider_get_event>:

uint8_t seaglider_get_event(seaglider* seaglider_obj,uint8_t* event)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
	if(xQueueReceive(seaglider_obj->events_q,event,1))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2201      	movs	r2, #1
 8002690:	6839      	ldr	r1, [r7, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f003 fb30 	bl	8005cf8 <xQueueReceive>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <seaglider_get_event+0x22>
	{
     return SEAGLIDER_F_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	e000      	b.n	80026a4 <seaglider_get_event+0x24>
	}
	return SEAGLIDER_F_ERR;
 80026a2:	2301      	movs	r3, #1
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <seaglider_parse_message>:


int seaglider_parse_message(seaglider* seaglider_obj,uint8_t* msg)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
 uint8_t* tmp_ptr;
 for(int i=0;i<SEAGLIDER_MSG_NUM_OF_FUNCTIONS;i++)
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	e01e      	b.n	80026fa <seaglider_parse_message+0x4e>
 {
	  tmp_ptr=0;
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
	  tmp_ptr=strstr(msg,seaglider_messages_strings[i]);
 80026c0:	4a12      	ldr	r2, [pc, #72]	; (800270c <seaglider_parse_message+0x60>)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c8:	4619      	mov	r1, r3
 80026ca:	6838      	ldr	r0, [r7, #0]
 80026cc:	f005 f88d 	bl	80077ea <strstr>
 80026d0:	60b8      	str	r0, [r7, #8]
	  if(tmp_ptr)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00d      	beq.n	80026f4 <seaglider_parse_message+0x48>
		{
			if(seaglider_functions[i](seaglider_obj,msg)==SEAGLIDER_F_OK) return SEAGLIDER_F_OK;
 80026d8:	4a0d      	ldr	r2, [pc, #52]	; (8002710 <seaglider_parse_message+0x64>)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e0:	6839      	ldr	r1, [r7, #0]
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	4798      	blx	r3
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <seaglider_parse_message+0x44>
 80026ec:	2300      	movs	r3, #0
 80026ee:	e008      	b.n	8002702 <seaglider_parse_message+0x56>
      else return SEAGLIDER_F_ERR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e006      	b.n	8002702 <seaglider_parse_message+0x56>
 for(int i=0;i<SEAGLIDER_MSG_NUM_OF_FUNCTIONS;i++)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3301      	adds	r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	dddd      	ble.n	80026bc <seaglider_parse_message+0x10>
		}

 }
 return SEAGLIDER_F_ERR;
 8002700:	2301      	movs	r3, #1
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	200035e0 	.word	0x200035e0
 8002710:	200035bc 	.word	0x200035bc

08002714 <seaglider_messages_init>:

void seaglider_messages_init(seaglider* seaglider_obj)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	seaglider_functions[SEAGLIDER_MSG_DEPTH] = SEAGLIDER_MSG_DEPTH_f;
 800271c:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <seaglider_messages_init+0x80>)
 800271e:	4a1e      	ldr	r2, [pc, #120]	; (8002798 <seaglider_messages_init+0x84>)
 8002720:	601a      	str	r2, [r3, #0]
	seaglider_functions[SEAGLIDER_MSG_STOP] = SEAGLIDER_MSG_STOP_f;
 8002722:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <seaglider_messages_init+0x80>)
 8002724:	4a1d      	ldr	r2, [pc, #116]	; (800279c <seaglider_messages_init+0x88>)
 8002726:	605a      	str	r2, [r3, #4]
	seaglider_functions[SEAGLIDER_MSG_SEND_TXT_FILE] = SEAGLIDER_MSG_SEND_TXT_FILE_f;
 8002728:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <seaglider_messages_init+0x80>)
 800272a:	4a1d      	ldr	r2, [pc, #116]	; (80027a0 <seaglider_messages_init+0x8c>)
 800272c:	609a      	str	r2, [r3, #8]
	seaglider_functions[SEAGLIDER_MSG_START] = SEAGLIDER_MSG_START_f;
 800272e:	4b19      	ldr	r3, [pc, #100]	; (8002794 <seaglider_messages_init+0x80>)
 8002730:	4a1c      	ldr	r2, [pc, #112]	; (80027a4 <seaglider_messages_init+0x90>)
 8002732:	60da      	str	r2, [r3, #12]
	seaglider_functions[SEAGLIDER_MSG_SEND_INFO] =SEAGLIDER_MSG_SEND_INFO_f;
 8002734:	4b17      	ldr	r3, [pc, #92]	; (8002794 <seaglider_messages_init+0x80>)
 8002736:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <seaglider_messages_init+0x94>)
 8002738:	611a      	str	r2, [r3, #16]
	seaglider_functions[SEAGLIDER_MSG_RESET] =SEAGLIDER_MSG_RESET_f;
 800273a:	4b16      	ldr	r3, [pc, #88]	; (8002794 <seaglider_messages_init+0x80>)
 800273c:	4a1b      	ldr	r2, [pc, #108]	; (80027ac <seaglider_messages_init+0x98>)
 800273e:	615a      	str	r2, [r3, #20]
	seaglider_functions[SEAGLIDER_MSG_TEST] =SEAGLIDER_MSG_TEST_f;
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <seaglider_messages_init+0x80>)
 8002742:	4a1b      	ldr	r2, [pc, #108]	; (80027b0 <seaglider_messages_init+0x9c>)
 8002744:	619a      	str	r2, [r3, #24]
	seaglider_functions[SEAGLIDER_MSG_CLOCK] =SEAGLIDER_MSG_CLOCK_f;
 8002746:	4b13      	ldr	r3, [pc, #76]	; (8002794 <seaglider_messages_init+0x80>)
 8002748:	4a1a      	ldr	r2, [pc, #104]	; (80027b4 <seaglider_messages_init+0xa0>)
 800274a:	61da      	str	r2, [r3, #28]
	seaglider_functions[SEAGLIDER_MSG_WAKEUP] =SEAGLIDER_MSG_WAKEUP_f;
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <seaglider_messages_init+0x80>)
 800274e:	4a1a      	ldr	r2, [pc, #104]	; (80027b8 <seaglider_messages_init+0xa4>)
 8002750:	621a      	str	r2, [r3, #32]


	seaglider_messages_strings[SEAGLIDER_MSG_DEPTH] = "DEPTH";
 8002752:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <seaglider_messages_init+0xa8>)
 8002754:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <seaglider_messages_init+0xac>)
 8002756:	601a      	str	r2, [r3, #0]
	seaglider_messages_strings[SEAGLIDER_MSG_STOP] = "STOP";
 8002758:	4b18      	ldr	r3, [pc, #96]	; (80027bc <seaglider_messages_init+0xa8>)
 800275a:	4a1a      	ldr	r2, [pc, #104]	; (80027c4 <seaglider_messages_init+0xb0>)
 800275c:	605a      	str	r2, [r3, #4]
	seaglider_messages_strings[SEAGLIDER_MSG_SEND_TXT_FILE] = "SEND_TXT_FILE";
 800275e:	4b17      	ldr	r3, [pc, #92]	; (80027bc <seaglider_messages_init+0xa8>)
 8002760:	4a19      	ldr	r2, [pc, #100]	; (80027c8 <seaglider_messages_init+0xb4>)
 8002762:	609a      	str	r2, [r3, #8]
	seaglider_messages_strings[SEAGLIDER_MSG_START] = "START";
 8002764:	4b15      	ldr	r3, [pc, #84]	; (80027bc <seaglider_messages_init+0xa8>)
 8002766:	4a19      	ldr	r2, [pc, #100]	; (80027cc <seaglider_messages_init+0xb8>)
 8002768:	60da      	str	r2, [r3, #12]
	seaglider_messages_strings[SEAGLIDER_MSG_SEND_INFO] ="SEND_INFO";
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <seaglider_messages_init+0xa8>)
 800276c:	4a18      	ldr	r2, [pc, #96]	; (80027d0 <seaglider_messages_init+0xbc>)
 800276e:	611a      	str	r2, [r3, #16]
	seaglider_messages_strings[SEAGLIDER_MSG_RESET] ="RESET";
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <seaglider_messages_init+0xa8>)
 8002772:	4a18      	ldr	r2, [pc, #96]	; (80027d4 <seaglider_messages_init+0xc0>)
 8002774:	615a      	str	r2, [r3, #20]
	seaglider_messages_strings[SEAGLIDER_MSG_TEST] ="TEST";
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <seaglider_messages_init+0xa8>)
 8002778:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <seaglider_messages_init+0xc4>)
 800277a:	619a      	str	r2, [r3, #24]
	seaglider_messages_strings[SEAGLIDER_MSG_CLOCK] ="CLOCK";
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <seaglider_messages_init+0xa8>)
 800277e:	4a17      	ldr	r2, [pc, #92]	; (80027dc <seaglider_messages_init+0xc8>)
 8002780:	61da      	str	r2, [r3, #28]
	seaglider_messages_strings[SEAGLIDER_MSG_WAKEUP] ="WAKEUP";
 8002782:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <seaglider_messages_init+0xa8>)
 8002784:	4a16      	ldr	r2, [pc, #88]	; (80027e0 <seaglider_messages_init+0xcc>)
 8002786:	621a      	str	r2, [r3, #32]




}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	200035bc 	.word	0x200035bc
 8002798:	080027e5 	.word	0x080027e5
 800279c:	08002875 	.word	0x08002875
 80027a0:	08002929 	.word	0x08002929
 80027a4:	08002899 	.word	0x08002899
 80027a8:	0800294b 	.word	0x0800294b
 80027ac:	08002961 	.word	0x08002961
 80027b0:	08002977 	.word	0x08002977
 80027b4:	08002999 	.word	0x08002999
 80027b8:	080029fd 	.word	0x080029fd
 80027bc:	200035e0 	.word	0x200035e0
 80027c0:	0800ac68 	.word	0x0800ac68
 80027c4:	0800ac70 	.word	0x0800ac70
 80027c8:	0800ac78 	.word	0x0800ac78
 80027cc:	0800ac88 	.word	0x0800ac88
 80027d0:	0800ac90 	.word	0x0800ac90
 80027d4:	0800ac9c 	.word	0x0800ac9c
 80027d8:	0800aca4 	.word	0x0800aca4
 80027dc:	0800acac 	.word	0x0800acac
 80027e0:	0800acb4 	.word	0x0800acb4

080027e4 <SEAGLIDER_MSG_DEPTH_f>:


int SEAGLIDER_MSG_DEPTH_f(seaglider* seaglider_obj,uint8_t* msg)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]

	char * pch;
	pch = strtok (msg,":");//header
 80027ee:	491f      	ldr	r1, [pc, #124]	; (800286c <SEAGLIDER_MSG_DEPTH_f+0x88>)
 80027f0:	6838      	ldr	r0, [r7, #0]
 80027f2:	f005 fe6b 	bl	80084cc <strtok>
 80027f6:	60f8      	str	r0, [r7, #12]
	pch = strtok (NULL,",");//depth
 80027f8:	491d      	ldr	r1, [pc, #116]	; (8002870 <SEAGLIDER_MSG_DEPTH_f+0x8c>)
 80027fa:	2000      	movs	r0, #0
 80027fc:	f005 fe66 	bl	80084cc <strtok>
 8002800:	60f8      	str	r0, [r7, #12]
	seaglider_obj->prev_depth=seaglider_obj->last_depth;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8002808:	4613      	mov	r3, r2
 800280a:	461a      	mov	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8c3 2013 	str.w	r2, [r3, #19]
	seaglider_obj->last_depth=strtof(pch,NULL);
 8002812:	2100      	movs	r1, #0
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f005 fe07 	bl	8008428 <strtof>
 800281a:	4602      	mov	r2, r0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8c3 200f 	str.w	r2, [r3, #15]
	pch = strtok (NULL,",");//date
 8002822:	4913      	ldr	r1, [pc, #76]	; (8002870 <SEAGLIDER_MSG_DEPTH_f+0x8c>)
 8002824:	2000      	movs	r0, #0
 8002826:	f005 fe51 	bl	80084cc <strtok>
 800282a:	60f8      	str	r0, [r7, #12]
	memcpy(seaglider_obj->date,pch,8);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3317      	adds	r3, #23
 8002830:	2208      	movs	r2, #8
 8002832:	68f9      	ldr	r1, [r7, #12]
 8002834:	4618      	mov	r0, r3
 8002836:	f004 ff93 	bl	8007760 <memcpy>
	pch = strtok (NULL,",");//time
 800283a:	490d      	ldr	r1, [pc, #52]	; (8002870 <SEAGLIDER_MSG_DEPTH_f+0x8c>)
 800283c:	2000      	movs	r0, #0
 800283e:	f005 fe45 	bl	80084cc <strtok>
 8002842:	60f8      	str	r0, [r7, #12]
	memcpy(seaglider_obj->time,pch,6);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	331f      	adds	r3, #31
 8002848:	2206      	movs	r2, #6
 800284a:	68f9      	ldr	r1, [r7, #12]
 800284c:	4618      	mov	r0, r3
 800284e:	f004 ff87 	bl	8007760 <memcpy>

	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_DEPTH_RCVD,1);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2201      	movs	r2, #1
 8002858:	2106      	movs	r1, #6
 800285a:	4618      	mov	r0, r3
 800285c:	f002 fe16 	bl	800548c <osMessagePut>
	return SEAGLIDER_F_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	0800acbc 	.word	0x0800acbc
 8002870:	0800acc0 	.word	0x0800acc0

08002874 <SEAGLIDER_MSG_STOP_f>:
int SEAGLIDER_MSG_STOP_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_STOP_RCVD,1);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2201      	movs	r2, #1
 8002884:	2101      	movs	r1, #1
 8002886:	4618      	mov	r0, r3
 8002888:	f002 fe00 	bl	800548c <osMessagePut>
	return SEAGLIDER_F_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <SEAGLIDER_MSG_START_f>:
int SEAGLIDER_MSG_START_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,":");//header
 80028a2:	491f      	ldr	r1, [pc, #124]	; (8002920 <SEAGLIDER_MSG_START_f+0x88>)
 80028a4:	6838      	ldr	r0, [r7, #0]
 80028a6:	f005 fe11 	bl	80084cc <strtok>
 80028aa:	60f8      	str	r0, [r7, #12]
	pch = strtok (NULL,",");//depth
 80028ac:	491d      	ldr	r1, [pc, #116]	; (8002924 <SEAGLIDER_MSG_START_f+0x8c>)
 80028ae:	2000      	movs	r0, #0
 80028b0:	f005 fe0c 	bl	80084cc <strtok>
 80028b4:	60f8      	str	r0, [r7, #12]
	seaglider_obj->prev_depth=seaglider_obj->last_depth;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8d3 200f 	ldr.w	r2, [r3, #15]
 80028bc:	4613      	mov	r3, r2
 80028be:	461a      	mov	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8c3 2013 	str.w	r2, [r3, #19]
	seaglider_obj->last_depth=strtof(pch,NULL);
 80028c6:	2100      	movs	r1, #0
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f005 fdad 	bl	8008428 <strtof>
 80028ce:	4602      	mov	r2, r0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f8c3 200f 	str.w	r2, [r3, #15]
	pch = strtok (NULL,",");//date
 80028d6:	4913      	ldr	r1, [pc, #76]	; (8002924 <SEAGLIDER_MSG_START_f+0x8c>)
 80028d8:	2000      	movs	r0, #0
 80028da:	f005 fdf7 	bl	80084cc <strtok>
 80028de:	60f8      	str	r0, [r7, #12]
	memcpy(seaglider_obj->date,pch,8);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3317      	adds	r3, #23
 80028e4:	2208      	movs	r2, #8
 80028e6:	68f9      	ldr	r1, [r7, #12]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f004 ff39 	bl	8007760 <memcpy>
	pch = strtok (NULL,",");//time
 80028ee:	490d      	ldr	r1, [pc, #52]	; (8002924 <SEAGLIDER_MSG_START_f+0x8c>)
 80028f0:	2000      	movs	r0, #0
 80028f2:	f005 fdeb 	bl	80084cc <strtok>
 80028f6:	60f8      	str	r0, [r7, #12]
	memcpy(seaglider_obj->time,pch,6);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	331f      	adds	r3, #31
 80028fc:	2206      	movs	r2, #6
 80028fe:	68f9      	ldr	r1, [r7, #12]
 8002900:	4618      	mov	r0, r3
 8002902:	f004 ff2d 	bl	8007760 <memcpy>

	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_START_RCVD,1);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2201      	movs	r2, #1
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f002 fdbc 	bl	800548c <osMessagePut>
	return SEAGLIDER_F_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	0800acbc 	.word	0x0800acbc
 8002924:	0800acc0 	.word	0x0800acc0

08002928 <SEAGLIDER_MSG_SEND_TXT_FILE_f>:
int SEAGLIDER_MSG_SEND_TXT_FILE_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_SEND_TXT_FILE_RCVD,1);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2201      	movs	r2, #1
 8002938:	2103      	movs	r1, #3
 800293a:	4618      	mov	r0, r3
 800293c:	f002 fda6 	bl	800548c <osMessagePut>
	return SEAGLIDER_F_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <SEAGLIDER_MSG_SEND_INFO_f>:
int SEAGLIDER_MSG_SEND_INFO_f(seaglider* seaglider_obj,uint8_t* msg)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
	return SEAGLIDER_F_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <SEAGLIDER_MSG_RESET_f>:
int SEAGLIDER_MSG_RESET_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
	return SEAGLIDER_F_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <SEAGLIDER_MSG_TEST_f>:
int SEAGLIDER_MSG_TEST_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_TEST_RCVD,1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2201      	movs	r2, #1
 8002986:	2102      	movs	r1, #2
 8002988:	4618      	mov	r0, r3
 800298a:	f002 fd7f 	bl	800548c <osMessagePut>
	return SEAGLIDER_F_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <SEAGLIDER_MSG_CLOCK_f>:
int SEAGLIDER_MSG_CLOCK_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg," :");//header
 80029a2:	4914      	ldr	r1, [pc, #80]	; (80029f4 <SEAGLIDER_MSG_CLOCK_f+0x5c>)
 80029a4:	6838      	ldr	r0, [r7, #0]
 80029a6:	f005 fd91 	bl	80084cc <strtok>
 80029aa:	60f8      	str	r0, [r7, #12]
	pch = strtok (NULL,",:");//date
 80029ac:	4912      	ldr	r1, [pc, #72]	; (80029f8 <SEAGLIDER_MSG_CLOCK_f+0x60>)
 80029ae:	2000      	movs	r0, #0
 80029b0:	f005 fd8c 	bl	80084cc <strtok>
 80029b4:	60f8      	str	r0, [r7, #12]
	memcpy(seaglider_obj->date,pch,8);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3317      	adds	r3, #23
 80029ba:	2208      	movs	r2, #8
 80029bc:	68f9      	ldr	r1, [r7, #12]
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 fece 	bl	8007760 <memcpy>
	pch = strtok (NULL,",:");//time
 80029c4:	490c      	ldr	r1, [pc, #48]	; (80029f8 <SEAGLIDER_MSG_CLOCK_f+0x60>)
 80029c6:	2000      	movs	r0, #0
 80029c8:	f005 fd80 	bl	80084cc <strtok>
 80029cc:	60f8      	str	r0, [r7, #12]
	memcpy(seaglider_obj->time,pch,6);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	331f      	adds	r3, #31
 80029d2:	2206      	movs	r2, #6
 80029d4:	68f9      	ldr	r1, [r7, #12]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f004 fec2 	bl	8007760 <memcpy>

	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_CLOCK_RCVD,1);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2201      	movs	r2, #1
 80029e2:	2104      	movs	r1, #4
 80029e4:	4618      	mov	r0, r3
 80029e6:	f002 fd51 	bl	800548c <osMessagePut>
	return SEAGLIDER_F_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	0800acc4 	.word	0x0800acc4
 80029f8:	0800acc8 	.word	0x0800acc8

080029fc <SEAGLIDER_MSG_WAKEUP_f>:

int SEAGLIDER_MSG_WAKEUP_f(seaglider* seaglider_obj,uint8_t* msg)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_WAKEUP_RCVD,1);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	2105      	movs	r1, #5
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f002 fd3c 	bl	800548c <osMessagePut>
	return SEAGLIDER_F_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a26:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <HAL_MspInit+0x68>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <HAL_MspInit+0x68>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6193      	str	r3, [r2, #24]
 8002a32:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <HAL_MspInit+0x68>)
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_MspInit+0x68>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	4a11      	ldr	r2, [pc, #68]	; (8002a88 <HAL_MspInit+0x68>)
 8002a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a48:	61d3      	str	r3, [r2, #28]
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <HAL_MspInit+0x68>)
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	210f      	movs	r1, #15
 8002a5a:	f06f 0001 	mvn.w	r0, #1
 8002a5e:	f000 fb1a 	bl	8003096 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_MspInit+0x6c>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <HAL_MspInit+0x6c>)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40010000 	.word	0x40010000

08002a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08c      	sub	sp, #48	; 0x30
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 0320 	add.w	r3, r7, #32
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART5)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a46      	ldr	r2, [pc, #280]	; (8002bc4 <HAL_UART_MspInit+0x134>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d145      	bne.n	8002b3c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002ab0:	4b45      	ldr	r3, [pc, #276]	; (8002bc8 <HAL_UART_MspInit+0x138>)
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	4a44      	ldr	r2, [pc, #272]	; (8002bc8 <HAL_UART_MspInit+0x138>)
 8002ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aba:	61d3      	str	r3, [r2, #28]
 8002abc:	4b42      	ldr	r3, [pc, #264]	; (8002bc8 <HAL_UART_MspInit+0x138>)
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac8:	4b3f      	ldr	r3, [pc, #252]	; (8002bc8 <HAL_UART_MspInit+0x138>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	4a3e      	ldr	r2, [pc, #248]	; (8002bc8 <HAL_UART_MspInit+0x138>)
 8002ace:	f043 0310 	orr.w	r3, r3, #16
 8002ad2:	6193      	str	r3, [r2, #24]
 8002ad4:	4b3c      	ldr	r3, [pc, #240]	; (8002bc8 <HAL_UART_MspInit+0x138>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	61bb      	str	r3, [r7, #24]
 8002ade:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ae0:	4b39      	ldr	r3, [pc, #228]	; (8002bc8 <HAL_UART_MspInit+0x138>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	4a38      	ldr	r2, [pc, #224]	; (8002bc8 <HAL_UART_MspInit+0x138>)
 8002ae6:	f043 0320 	orr.w	r3, r3, #32
 8002aea:	6193      	str	r3, [r2, #24]
 8002aec:	4b36      	ldr	r3, [pc, #216]	; (8002bc8 <HAL_UART_MspInit+0x138>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b02:	2303      	movs	r3, #3
 8002b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b06:	f107 0320 	add.w	r3, r7, #32
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	482f      	ldr	r0, [pc, #188]	; (8002bcc <HAL_UART_MspInit+0x13c>)
 8002b0e:	f000 fe2f 	bl	8003770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b12:	2304      	movs	r3, #4
 8002b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b16:	2300      	movs	r3, #0
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b1e:	f107 0320 	add.w	r3, r7, #32
 8002b22:	4619      	mov	r1, r3
 8002b24:	482a      	ldr	r0, [pc, #168]	; (8002bd0 <HAL_UART_MspInit+0x140>)
 8002b26:	f000 fe23 	bl	8003770 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2105      	movs	r1, #5
 8002b2e:	2035      	movs	r0, #53	; 0x35
 8002b30:	f000 fab1 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002b34:	2035      	movs	r0, #53	; 0x35
 8002b36:	f000 faca 	bl	80030ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b3a:	e03e      	b.n	8002bba <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a24      	ldr	r2, [pc, #144]	; (8002bd4 <HAL_UART_MspInit+0x144>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d139      	bne.n	8002bba <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b46:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <HAL_UART_MspInit+0x138>)
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	4a1f      	ldr	r2, [pc, #124]	; (8002bc8 <HAL_UART_MspInit+0x138>)
 8002b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b50:	6193      	str	r3, [r2, #24]
 8002b52:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <HAL_UART_MspInit+0x138>)
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <HAL_UART_MspInit+0x138>)
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	4a19      	ldr	r2, [pc, #100]	; (8002bc8 <HAL_UART_MspInit+0x138>)
 8002b64:	f043 0304 	orr.w	r3, r3, #4
 8002b68:	6193      	str	r3, [r2, #24]
 8002b6a:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <HAL_UART_MspInit+0x138>)
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b80:	2303      	movs	r3, #3
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b84:	f107 0320 	add.w	r3, r7, #32
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4813      	ldr	r0, [pc, #76]	; (8002bd8 <HAL_UART_MspInit+0x148>)
 8002b8c:	f000 fdf0 	bl	8003770 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b96:	2300      	movs	r3, #0
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9e:	f107 0320 	add.w	r3, r7, #32
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	480c      	ldr	r0, [pc, #48]	; (8002bd8 <HAL_UART_MspInit+0x148>)
 8002ba6:	f000 fde3 	bl	8003770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002baa:	2200      	movs	r2, #0
 8002bac:	2105      	movs	r1, #5
 8002bae:	2025      	movs	r0, #37	; 0x25
 8002bb0:	f000 fa71 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bb4:	2025      	movs	r0, #37	; 0x25
 8002bb6:	f000 fa8a 	bl	80030ce <HAL_NVIC_EnableIRQ>
}
 8002bba:	bf00      	nop
 8002bbc:	3730      	adds	r7, #48	; 0x30
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40005000 	.word	0x40005000
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40011000 	.word	0x40011000
 8002bd0:	40011400 	.word	0x40011400
 8002bd4:	40013800 	.word	0x40013800
 8002bd8:	40010800 	.word	0x40010800

08002bdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08c      	sub	sp, #48	; 0x30
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002bec:	2200      	movs	r2, #0
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	2019      	movs	r0, #25
 8002bf2:	f000 fa50 	bl	8003096 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002bf6:	2019      	movs	r0, #25
 8002bf8:	f000 fa69 	bl	80030ce <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002bfc:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <HAL_InitTick+0x9c>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <HAL_InitTick+0x9c>)
 8002c02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c06:	6193      	str	r3, [r2, #24]
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_InitTick+0x9c>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c14:	f107 0210 	add.w	r2, r7, #16
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f001 fc3a 	bl	8004498 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002c24:	f001 fc24 	bl	8004470 <HAL_RCC_GetPCLK2Freq>
 8002c28:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2c:	4a13      	ldr	r2, [pc, #76]	; (8002c7c <HAL_InitTick+0xa0>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	0c9b      	lsrs	r3, r3, #18
 8002c34:	3b01      	subs	r3, #1
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002c38:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <HAL_InitTick+0xa4>)
 8002c3a:	4a12      	ldr	r2, [pc, #72]	; (8002c84 <HAL_InitTick+0xa8>)
 8002c3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <HAL_InitTick+0xa4>)
 8002c40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c44:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002c46:	4a0e      	ldr	r2, [pc, #56]	; (8002c80 <HAL_InitTick+0xa4>)
 8002c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <HAL_InitTick+0xa4>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c52:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_InitTick+0xa4>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002c58:	4809      	ldr	r0, [pc, #36]	; (8002c80 <HAL_InitTick+0xa4>)
 8002c5a:	f001 fc6b 	bl	8004534 <HAL_TIM_Base_Init>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d104      	bne.n	8002c6e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002c64:	4806      	ldr	r0, [pc, #24]	; (8002c80 <HAL_InitTick+0xa4>)
 8002c66:	f001 fcbd 	bl	80045e4 <HAL_TIM_Base_Start_IT>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	e000      	b.n	8002c70 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3730      	adds	r7, #48	; 0x30
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	431bde83 	.word	0x431bde83
 8002c80:	20003604 	.word	0x20003604
 8002c84:	40012c00 	.word	0x40012c00

08002c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c8c:	e7fe      	b.n	8002c8c <NMI_Handler+0x4>

08002c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c92:	e7fe      	b.n	8002c92 <HardFault_Handler+0x4>

08002c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c98:	e7fe      	b.n	8002c98 <MemManage_Handler+0x4>

08002c9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c9e:	e7fe      	b.n	8002c9e <BusFault_Handler+0x4>

08002ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <UsageFault_Handler+0x4>

08002ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
	...

08002cb4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cb8:	4802      	ldr	r0, [pc, #8]	; (8002cc4 <TIM1_UP_IRQHandler+0x10>)
 8002cba:	f001 fced 	bl	8004698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20003604 	.word	0x20003604

08002cc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ccc:	4802      	ldr	r0, [pc, #8]	; (8002cd8 <USART1_IRQHandler+0x10>)
 8002cce:	f001 ff4f 	bl	8004b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200004cc 	.word	0x200004cc

08002cdc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002ce0:	4802      	ldr	r0, [pc, #8]	; (8002cec <UART5_IRQHandler+0x10>)
 8002ce2:	f001 ff45 	bl	8004b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000488 	.word	0x20000488

08002cf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
	return 1;
 8002cf4:	2301      	movs	r3, #1
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <_kill>:

int _kill(int pid, int sig)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d08:	f004 fd00 	bl	800770c <__errno>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2216      	movs	r2, #22
 8002d10:	601a      	str	r2, [r3, #0]
	return -1;
 8002d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <_exit>:

void _exit (int status)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d26:	f04f 31ff 	mov.w	r1, #4294967295
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff ffe7 	bl	8002cfe <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d30:	e7fe      	b.n	8002d30 <_exit+0x12>

08002d32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b086      	sub	sp, #24
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	e00a      	b.n	8002d5a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d44:	f3af 8000 	nop.w
 8002d48:	4601      	mov	r1, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	60ba      	str	r2, [r7, #8]
 8002d50:	b2ca      	uxtb	r2, r1
 8002d52:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	3301      	adds	r3, #1
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	dbf0      	blt.n	8002d44 <_read+0x12>
	}

return len;
 8002d62:	687b      	ldr	r3, [r7, #4]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	e009      	b.n	8002d92 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	60ba      	str	r2, [r7, #8]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	dbf1      	blt.n	8002d7e <_write+0x12>
	}
	return len;
 8002d9a:	687b      	ldr	r3, [r7, #4]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_close>:

int _close(int file)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	return -1;
 8002dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr

08002dba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dca:	605a      	str	r2, [r3, #4]
	return 0;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr

08002dd8 <_isatty>:

int _isatty(int file)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	return 1;
 8002de0:	2301      	movs	r3, #1
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
	return 0;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e0c:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <_sbrk+0x5c>)
 8002e0e:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <_sbrk+0x60>)
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e18:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <_sbrk+0x64>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e20:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <_sbrk+0x64>)
 8002e22:	4a12      	ldr	r2, [pc, #72]	; (8002e6c <_sbrk+0x68>)
 8002e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <_sbrk+0x64>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d207      	bcs.n	8002e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e34:	f004 fc6a 	bl	800770c <__errno>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	220c      	movs	r2, #12
 8002e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e42:	e009      	b.n	8002e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e44:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <_sbrk+0x64>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e4a:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <_sbrk+0x64>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4413      	add	r3, r2
 8002e52:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <_sbrk+0x64>)
 8002e54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e56:	68fb      	ldr	r3, [r7, #12]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20010000 	.word	0x20010000
 8002e64:	00000400 	.word	0x00000400
 8002e68:	2000364c 	.word	0x2000364c
 8002e6c:	2000c090 	.word	0x2000c090

08002e70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002e7c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002e7e:	e003      	b.n	8002e88 <LoopCopyDataInit>

08002e80 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002e82:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002e84:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002e86:	3104      	adds	r1, #4

08002e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002e88:	480a      	ldr	r0, [pc, #40]	; (8002eb4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002e8a:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002e8c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002e8e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002e90:	d3f6      	bcc.n	8002e80 <CopyDataInit>
  ldr r2, =_sbss
 8002e92:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002e94:	e002      	b.n	8002e9c <LoopFillZerobss>

08002e96 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002e96:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002e98:	f842 3b04 	str.w	r3, [r2], #4

08002e9c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002e9e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ea0:	d3f9      	bcc.n	8002e96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ea2:	f7ff ffe5 	bl	8002e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ea6:	f004 fc37 	bl	8007718 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002eaa:	f7fe fd4d 	bl	8001948 <main>
  bx lr
 8002eae:	4770      	bx	lr
  ldr r3, =_sidata
 8002eb0:	0800b1a8 	.word	0x0800b1a8
  ldr r0, =_sdata
 8002eb4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002eb8:	200001f8 	.word	0x200001f8
  ldr r2, =_sbss
 8002ebc:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8002ec0:	2000c08c 	.word	0x2000c08c

08002ec4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ec4:	e7fe      	b.n	8002ec4 <ADC1_2_IRQHandler>
	...

08002ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ecc:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <HAL_Init+0x28>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a07      	ldr	r2, [pc, #28]	; (8002ef0 <HAL_Init+0x28>)
 8002ed2:	f043 0310 	orr.w	r3, r3, #16
 8002ed6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ed8:	2003      	movs	r0, #3
 8002eda:	f000 f8d1 	bl	8003080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f7ff fe7c 	bl	8002bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ee4:	f7ff fd9c 	bl	8002a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40022000 	.word	0x40022000

08002ef4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_IncTick+0x1c>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_IncTick+0x20>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	4a03      	ldr	r2, [pc, #12]	; (8002f14 <HAL_IncTick+0x20>)
 8002f06:	6013      	str	r3, [r2, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	2000001c 	.word	0x2000001c
 8002f14:	20003650 	.word	0x20003650

08002f18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f1c:	4b02      	ldr	r3, [pc, #8]	; (8002f28 <HAL_GetTick+0x10>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	20003650 	.word	0x20003650

08002f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <__NVIC_SetPriorityGrouping+0x44>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5e:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <__NVIC_SetPriorityGrouping+0x44>)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	60d3      	str	r3, [r2, #12]
}
 8002f64:	bf00      	nop
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <__NVIC_GetPriorityGrouping+0x18>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	f003 0307 	and.w	r3, r3, #7
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	db0b      	blt.n	8002fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	f003 021f 	and.w	r2, r3, #31
 8002fa8:	4906      	ldr	r1, [pc, #24]	; (8002fc4 <__NVIC_EnableIRQ+0x34>)
 8002faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	e000e100 	.word	0xe000e100

08002fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	6039      	str	r1, [r7, #0]
 8002fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	db0a      	blt.n	8002ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	490c      	ldr	r1, [pc, #48]	; (8003014 <__NVIC_SetPriority+0x4c>)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	0112      	lsls	r2, r2, #4
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	440b      	add	r3, r1
 8002fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff0:	e00a      	b.n	8003008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	4908      	ldr	r1, [pc, #32]	; (8003018 <__NVIC_SetPriority+0x50>)
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	3b04      	subs	r3, #4
 8003000:	0112      	lsls	r2, r2, #4
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	440b      	add	r3, r1
 8003006:	761a      	strb	r2, [r3, #24]
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000e100 	.word	0xe000e100
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800301c:	b480      	push	{r7}
 800301e:	b089      	sub	sp, #36	; 0x24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f1c3 0307 	rsb	r3, r3, #7
 8003036:	2b04      	cmp	r3, #4
 8003038:	bf28      	it	cs
 800303a:	2304      	movcs	r3, #4
 800303c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3304      	adds	r3, #4
 8003042:	2b06      	cmp	r3, #6
 8003044:	d902      	bls.n	800304c <NVIC_EncodePriority+0x30>
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3b03      	subs	r3, #3
 800304a:	e000      	b.n	800304e <NVIC_EncodePriority+0x32>
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	f04f 32ff 	mov.w	r2, #4294967295
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43da      	mvns	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	401a      	ands	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003064:	f04f 31ff 	mov.w	r1, #4294967295
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	43d9      	mvns	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	4313      	orrs	r3, r2
         );
}
 8003076:	4618      	mov	r0, r3
 8003078:	3724      	adds	r7, #36	; 0x24
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff ff4f 	bl	8002f2c <__NVIC_SetPriorityGrouping>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003096:	b580      	push	{r7, lr}
 8003098:	b086      	sub	sp, #24
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a8:	f7ff ff64 	bl	8002f74 <__NVIC_GetPriorityGrouping>
 80030ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	6978      	ldr	r0, [r7, #20]
 80030b4:	f7ff ffb2 	bl	800301c <NVIC_EncodePriority>
 80030b8:	4602      	mov	r2, r0
 80030ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff81 	bl	8002fc8 <__NVIC_SetPriority>
}
 80030c6:	bf00      	nop
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	4603      	mov	r3, r0
 80030d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff57 	bl	8002f90 <__NVIC_EnableIRQ>
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b085      	sub	sp, #20
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d008      	beq.n	8003112 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2204      	movs	r2, #4
 8003104:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e020      	b.n	8003154 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 020e 	bic.w	r2, r2, #14
 8003120:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0201 	bic.w	r2, r2, #1
 8003130:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313a:	2101      	movs	r1, #1
 800313c:	fa01 f202 	lsl.w	r2, r1, r2
 8003140:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003152:	7bfb      	ldrb	r3, [r7, #15]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr
	...

08003160 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003172:	2b02      	cmp	r3, #2
 8003174:	d005      	beq.n	8003182 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2204      	movs	r2, #4
 800317a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
 8003180:	e0d6      	b.n	8003330 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 020e 	bic.w	r2, r2, #14
 8003190:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	4b64      	ldr	r3, [pc, #400]	; (800333c <HAL_DMA_Abort_IT+0x1dc>)
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d958      	bls.n	8003260 <HAL_DMA_Abort_IT+0x100>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a63      	ldr	r2, [pc, #396]	; (8003340 <HAL_DMA_Abort_IT+0x1e0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d04f      	beq.n	8003258 <HAL_DMA_Abort_IT+0xf8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a61      	ldr	r2, [pc, #388]	; (8003344 <HAL_DMA_Abort_IT+0x1e4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d048      	beq.n	8003254 <HAL_DMA_Abort_IT+0xf4>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a60      	ldr	r2, [pc, #384]	; (8003348 <HAL_DMA_Abort_IT+0x1e8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d040      	beq.n	800324e <HAL_DMA_Abort_IT+0xee>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a5e      	ldr	r2, [pc, #376]	; (800334c <HAL_DMA_Abort_IT+0x1ec>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d038      	beq.n	8003248 <HAL_DMA_Abort_IT+0xe8>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a5d      	ldr	r2, [pc, #372]	; (8003350 <HAL_DMA_Abort_IT+0x1f0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d030      	beq.n	8003242 <HAL_DMA_Abort_IT+0xe2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a5b      	ldr	r2, [pc, #364]	; (8003354 <HAL_DMA_Abort_IT+0x1f4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d028      	beq.n	800323c <HAL_DMA_Abort_IT+0xdc>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a53      	ldr	r2, [pc, #332]	; (800333c <HAL_DMA_Abort_IT+0x1dc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d020      	beq.n	8003236 <HAL_DMA_Abort_IT+0xd6>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a57      	ldr	r2, [pc, #348]	; (8003358 <HAL_DMA_Abort_IT+0x1f8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d019      	beq.n	8003232 <HAL_DMA_Abort_IT+0xd2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a56      	ldr	r2, [pc, #344]	; (800335c <HAL_DMA_Abort_IT+0x1fc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d012      	beq.n	800322e <HAL_DMA_Abort_IT+0xce>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a54      	ldr	r2, [pc, #336]	; (8003360 <HAL_DMA_Abort_IT+0x200>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00a      	beq.n	8003228 <HAL_DMA_Abort_IT+0xc8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a53      	ldr	r2, [pc, #332]	; (8003364 <HAL_DMA_Abort_IT+0x204>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d102      	bne.n	8003222 <HAL_DMA_Abort_IT+0xc2>
 800321c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003220:	e01b      	b.n	800325a <HAL_DMA_Abort_IT+0xfa>
 8003222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003226:	e018      	b.n	800325a <HAL_DMA_Abort_IT+0xfa>
 8003228:	f44f 7380 	mov.w	r3, #256	; 0x100
 800322c:	e015      	b.n	800325a <HAL_DMA_Abort_IT+0xfa>
 800322e:	2310      	movs	r3, #16
 8003230:	e013      	b.n	800325a <HAL_DMA_Abort_IT+0xfa>
 8003232:	2301      	movs	r3, #1
 8003234:	e011      	b.n	800325a <HAL_DMA_Abort_IT+0xfa>
 8003236:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800323a:	e00e      	b.n	800325a <HAL_DMA_Abort_IT+0xfa>
 800323c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003240:	e00b      	b.n	800325a <HAL_DMA_Abort_IT+0xfa>
 8003242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003246:	e008      	b.n	800325a <HAL_DMA_Abort_IT+0xfa>
 8003248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800324c:	e005      	b.n	800325a <HAL_DMA_Abort_IT+0xfa>
 800324e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003252:	e002      	b.n	800325a <HAL_DMA_Abort_IT+0xfa>
 8003254:	2310      	movs	r3, #16
 8003256:	e000      	b.n	800325a <HAL_DMA_Abort_IT+0xfa>
 8003258:	2301      	movs	r3, #1
 800325a:	4a43      	ldr	r2, [pc, #268]	; (8003368 <HAL_DMA_Abort_IT+0x208>)
 800325c:	6053      	str	r3, [r2, #4]
 800325e:	e057      	b.n	8003310 <HAL_DMA_Abort_IT+0x1b0>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a36      	ldr	r2, [pc, #216]	; (8003340 <HAL_DMA_Abort_IT+0x1e0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d04f      	beq.n	800330a <HAL_DMA_Abort_IT+0x1aa>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a35      	ldr	r2, [pc, #212]	; (8003344 <HAL_DMA_Abort_IT+0x1e4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d048      	beq.n	8003306 <HAL_DMA_Abort_IT+0x1a6>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a33      	ldr	r2, [pc, #204]	; (8003348 <HAL_DMA_Abort_IT+0x1e8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d040      	beq.n	8003300 <HAL_DMA_Abort_IT+0x1a0>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a32      	ldr	r2, [pc, #200]	; (800334c <HAL_DMA_Abort_IT+0x1ec>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d038      	beq.n	80032fa <HAL_DMA_Abort_IT+0x19a>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a30      	ldr	r2, [pc, #192]	; (8003350 <HAL_DMA_Abort_IT+0x1f0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d030      	beq.n	80032f4 <HAL_DMA_Abort_IT+0x194>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a2f      	ldr	r2, [pc, #188]	; (8003354 <HAL_DMA_Abort_IT+0x1f4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d028      	beq.n	80032ee <HAL_DMA_Abort_IT+0x18e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a26      	ldr	r2, [pc, #152]	; (800333c <HAL_DMA_Abort_IT+0x1dc>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d020      	beq.n	80032e8 <HAL_DMA_Abort_IT+0x188>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a2b      	ldr	r2, [pc, #172]	; (8003358 <HAL_DMA_Abort_IT+0x1f8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d019      	beq.n	80032e4 <HAL_DMA_Abort_IT+0x184>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a29      	ldr	r2, [pc, #164]	; (800335c <HAL_DMA_Abort_IT+0x1fc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d012      	beq.n	80032e0 <HAL_DMA_Abort_IT+0x180>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a28      	ldr	r2, [pc, #160]	; (8003360 <HAL_DMA_Abort_IT+0x200>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00a      	beq.n	80032da <HAL_DMA_Abort_IT+0x17a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a26      	ldr	r2, [pc, #152]	; (8003364 <HAL_DMA_Abort_IT+0x204>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d102      	bne.n	80032d4 <HAL_DMA_Abort_IT+0x174>
 80032ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032d2:	e01b      	b.n	800330c <HAL_DMA_Abort_IT+0x1ac>
 80032d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032d8:	e018      	b.n	800330c <HAL_DMA_Abort_IT+0x1ac>
 80032da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032de:	e015      	b.n	800330c <HAL_DMA_Abort_IT+0x1ac>
 80032e0:	2310      	movs	r3, #16
 80032e2:	e013      	b.n	800330c <HAL_DMA_Abort_IT+0x1ac>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e011      	b.n	800330c <HAL_DMA_Abort_IT+0x1ac>
 80032e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032ec:	e00e      	b.n	800330c <HAL_DMA_Abort_IT+0x1ac>
 80032ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032f2:	e00b      	b.n	800330c <HAL_DMA_Abort_IT+0x1ac>
 80032f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032f8:	e008      	b.n	800330c <HAL_DMA_Abort_IT+0x1ac>
 80032fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032fe:	e005      	b.n	800330c <HAL_DMA_Abort_IT+0x1ac>
 8003300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003304:	e002      	b.n	800330c <HAL_DMA_Abort_IT+0x1ac>
 8003306:	2310      	movs	r3, #16
 8003308:	e000      	b.n	800330c <HAL_DMA_Abort_IT+0x1ac>
 800330a:	2301      	movs	r3, #1
 800330c:	4a17      	ldr	r2, [pc, #92]	; (800336c <HAL_DMA_Abort_IT+0x20c>)
 800330e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	4798      	blx	r3
    } 
  }
  return status;
 8003330:	7bfb      	ldrb	r3, [r7, #15]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40020080 	.word	0x40020080
 8003340:	40020008 	.word	0x40020008
 8003344:	4002001c 	.word	0x4002001c
 8003348:	40020030 	.word	0x40020030
 800334c:	40020044 	.word	0x40020044
 8003350:	40020058 	.word	0x40020058
 8003354:	4002006c 	.word	0x4002006c
 8003358:	40020408 	.word	0x40020408
 800335c:	4002041c 	.word	0x4002041c
 8003360:	40020430 	.word	0x40020430
 8003364:	40020444 	.word	0x40020444
 8003368:	40020400 	.word	0x40020400
 800336c:	40020000 	.word	0x40020000

08003370 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800338a:	4b2f      	ldr	r3, [pc, #188]	; (8003448 <HAL_FLASH_Program+0xd8>)
 800338c:	7e1b      	ldrb	r3, [r3, #24]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_FLASH_Program+0x26>
 8003392:	2302      	movs	r3, #2
 8003394:	e054      	b.n	8003440 <HAL_FLASH_Program+0xd0>
 8003396:	4b2c      	ldr	r3, [pc, #176]	; (8003448 <HAL_FLASH_Program+0xd8>)
 8003398:	2201      	movs	r2, #1
 800339a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800339c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80033a0:	f000 f8a8 	bl	80034f4 <FLASH_WaitForLastOperation>
 80033a4:	4603      	mov	r3, r0
 80033a6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d144      	bne.n	8003438 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d102      	bne.n	80033ba <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80033b4:	2301      	movs	r3, #1
 80033b6:	757b      	strb	r3, [r7, #21]
 80033b8:	e007      	b.n	80033ca <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d102      	bne.n	80033c6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80033c0:	2302      	movs	r3, #2
 80033c2:	757b      	strb	r3, [r7, #21]
 80033c4:	e001      	b.n	80033ca <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80033c6:	2304      	movs	r3, #4
 80033c8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80033ca:	2300      	movs	r3, #0
 80033cc:	75bb      	strb	r3, [r7, #22]
 80033ce:	e02d      	b.n	800342c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80033d0:	7dbb      	ldrb	r3, [r7, #22]
 80033d2:	005a      	lsls	r2, r3, #1
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	eb02 0c03 	add.w	ip, r2, r3
 80033da:	7dbb      	ldrb	r3, [r7, #22]
 80033dc:	0119      	lsls	r1, r3, #4
 80033de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033e2:	f1c1 0620 	rsb	r6, r1, #32
 80033e6:	f1a1 0020 	sub.w	r0, r1, #32
 80033ea:	fa22 f401 	lsr.w	r4, r2, r1
 80033ee:	fa03 f606 	lsl.w	r6, r3, r6
 80033f2:	4334      	orrs	r4, r6
 80033f4:	fa23 f000 	lsr.w	r0, r3, r0
 80033f8:	4304      	orrs	r4, r0
 80033fa:	fa23 f501 	lsr.w	r5, r3, r1
 80033fe:	b2a3      	uxth	r3, r4
 8003400:	4619      	mov	r1, r3
 8003402:	4660      	mov	r0, ip
 8003404:	f000 f85a 	bl	80034bc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003408:	f24c 3050 	movw	r0, #50000	; 0xc350
 800340c:	f000 f872 	bl	80034f4 <FLASH_WaitForLastOperation>
 8003410:	4603      	mov	r3, r0
 8003412:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003414:	4b0d      	ldr	r3, [pc, #52]	; (800344c <HAL_FLASH_Program+0xdc>)
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	4a0c      	ldr	r2, [pc, #48]	; (800344c <HAL_FLASH_Program+0xdc>)
 800341a:	f023 0301 	bic.w	r3, r3, #1
 800341e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003420:	7dfb      	ldrb	r3, [r7, #23]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d107      	bne.n	8003436 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003426:	7dbb      	ldrb	r3, [r7, #22]
 8003428:	3301      	adds	r3, #1
 800342a:	75bb      	strb	r3, [r7, #22]
 800342c:	7dba      	ldrb	r2, [r7, #22]
 800342e:	7d7b      	ldrb	r3, [r7, #21]
 8003430:	429a      	cmp	r2, r3
 8003432:	d3cd      	bcc.n	80033d0 <HAL_FLASH_Program+0x60>
 8003434:	e000      	b.n	8003438 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003436:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003438:	4b03      	ldr	r3, [pc, #12]	; (8003448 <HAL_FLASH_Program+0xd8>)
 800343a:	2200      	movs	r2, #0
 800343c:	761a      	strb	r2, [r3, #24]

  return status;
 800343e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003440:	4618      	mov	r0, r3
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003448:	20003658 	.word	0x20003658
 800344c:	40022000 	.word	0x40022000

08003450 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <HAL_FLASH_Unlock+0x40>)
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00d      	beq.n	8003482 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003466:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <HAL_FLASH_Unlock+0x40>)
 8003468:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <HAL_FLASH_Unlock+0x44>)
 800346a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800346c:	4b08      	ldr	r3, [pc, #32]	; (8003490 <HAL_FLASH_Unlock+0x40>)
 800346e:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <HAL_FLASH_Unlock+0x48>)
 8003470:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <HAL_FLASH_Unlock+0x40>)
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003482:	79fb      	ldrb	r3, [r7, #7]
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40022000 	.word	0x40022000
 8003494:	45670123 	.word	0x45670123
 8003498:	cdef89ab 	.word	0xcdef89ab

0800349c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_FLASH_Lock+0x1c>)
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <HAL_FLASH_Lock+0x1c>)
 80034a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034aa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40022000 	.word	0x40022000

080034bc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80034c8:	4b08      	ldr	r3, [pc, #32]	; (80034ec <FLASH_Program_HalfWord+0x30>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80034ce:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <FLASH_Program_HalfWord+0x34>)
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	4a07      	ldr	r2, [pc, #28]	; (80034f0 <FLASH_Program_HalfWord+0x34>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	887a      	ldrh	r2, [r7, #2]
 80034de:	801a      	strh	r2, [r3, #0]
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20003658 	.word	0x20003658
 80034f0:	40022000 	.word	0x40022000

080034f4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80034fc:	f7ff fd0c 	bl	8002f18 <HAL_GetTick>
 8003500:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003502:	e010      	b.n	8003526 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350a:	d00c      	beq.n	8003526 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <FLASH_WaitForLastOperation+0x2e>
 8003512:	f7ff fd01 	bl	8002f18 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	d201      	bcs.n	8003526 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e025      	b.n	8003572 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003526:	4b15      	ldr	r3, [pc, #84]	; (800357c <FLASH_WaitForLastOperation+0x88>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1e8      	bne.n	8003504 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003532:	4b12      	ldr	r3, [pc, #72]	; (800357c <FLASH_WaitForLastOperation+0x88>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800353e:	4b0f      	ldr	r3, [pc, #60]	; (800357c <FLASH_WaitForLastOperation+0x88>)
 8003540:	2220      	movs	r2, #32
 8003542:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003544:	4b0d      	ldr	r3, [pc, #52]	; (800357c <FLASH_WaitForLastOperation+0x88>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0310 	and.w	r3, r3, #16
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10b      	bne.n	8003568 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003550:	4b0a      	ldr	r3, [pc, #40]	; (800357c <FLASH_WaitForLastOperation+0x88>)
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003558:	2b00      	cmp	r3, #0
 800355a:	d105      	bne.n	8003568 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800355c:	4b07      	ldr	r3, [pc, #28]	; (800357c <FLASH_WaitForLastOperation+0x88>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003568:	f000 f80a 	bl	8003580 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40022000 	.word	0x40022000

08003580 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800358a:	4b23      	ldr	r3, [pc, #140]	; (8003618 <FLASH_SetErrorCode+0x98>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2b00      	cmp	r3, #0
 8003594:	d009      	beq.n	80035aa <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003596:	4b21      	ldr	r3, [pc, #132]	; (800361c <FLASH_SetErrorCode+0x9c>)
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f043 0302 	orr.w	r3, r3, #2
 800359e:	4a1f      	ldr	r2, [pc, #124]	; (800361c <FLASH_SetErrorCode+0x9c>)
 80035a0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f043 0310 	orr.w	r3, r3, #16
 80035a8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80035aa:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <FLASH_SetErrorCode+0x98>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d009      	beq.n	80035ca <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <FLASH_SetErrorCode+0x9c>)
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	4a17      	ldr	r2, [pc, #92]	; (800361c <FLASH_SetErrorCode+0x9c>)
 80035c0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f043 0304 	orr.w	r3, r3, #4
 80035c8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80035ca:	4b13      	ldr	r3, [pc, #76]	; (8003618 <FLASH_SetErrorCode+0x98>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00b      	beq.n	80035ee <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80035d6:	4b11      	ldr	r3, [pc, #68]	; (800361c <FLASH_SetErrorCode+0x9c>)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f043 0304 	orr.w	r3, r3, #4
 80035de:	4a0f      	ldr	r2, [pc, #60]	; (800361c <FLASH_SetErrorCode+0x9c>)
 80035e0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80035e2:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <FLASH_SetErrorCode+0x98>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	4a0c      	ldr	r2, [pc, #48]	; (8003618 <FLASH_SetErrorCode+0x98>)
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f240 1201 	movw	r2, #257	; 0x101
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d106      	bne.n	8003606 <FLASH_SetErrorCode+0x86>
 80035f8:	4b07      	ldr	r3, [pc, #28]	; (8003618 <FLASH_SetErrorCode+0x98>)
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	4a06      	ldr	r2, [pc, #24]	; (8003618 <FLASH_SetErrorCode+0x98>)
 80035fe:	f023 0301 	bic.w	r3, r3, #1
 8003602:	61d3      	str	r3, [r2, #28]
}  
 8003604:	e002      	b.n	800360c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003606:	4a04      	ldr	r2, [pc, #16]	; (8003618 <FLASH_SetErrorCode+0x98>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	60d3      	str	r3, [r2, #12]
}  
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40022000 	.word	0x40022000
 800361c:	20003658 	.word	0x20003658

08003620 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003632:	4b2f      	ldr	r3, [pc, #188]	; (80036f0 <HAL_FLASHEx_Erase+0xd0>)
 8003634:	7e1b      	ldrb	r3, [r3, #24]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_FLASHEx_Erase+0x1e>
 800363a:	2302      	movs	r3, #2
 800363c:	e053      	b.n	80036e6 <HAL_FLASHEx_Erase+0xc6>
 800363e:	4b2c      	ldr	r3, [pc, #176]	; (80036f0 <HAL_FLASHEx_Erase+0xd0>)
 8003640:	2201      	movs	r2, #1
 8003642:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d116      	bne.n	800367a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800364c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003650:	f7ff ff50 	bl	80034f4 <FLASH_WaitForLastOperation>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d141      	bne.n	80036de <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800365a:	2001      	movs	r0, #1
 800365c:	f000 f84c 	bl	80036f8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003660:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003664:	f7ff ff46 	bl	80034f4 <FLASH_WaitForLastOperation>
 8003668:	4603      	mov	r3, r0
 800366a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800366c:	4b21      	ldr	r3, [pc, #132]	; (80036f4 <HAL_FLASHEx_Erase+0xd4>)
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	4a20      	ldr	r2, [pc, #128]	; (80036f4 <HAL_FLASHEx_Erase+0xd4>)
 8003672:	f023 0304 	bic.w	r3, r3, #4
 8003676:	6113      	str	r3, [r2, #16]
 8003678:	e031      	b.n	80036de <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800367a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800367e:	f7ff ff39 	bl	80034f4 <FLASH_WaitForLastOperation>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d12a      	bne.n	80036de <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	f04f 32ff 	mov.w	r2, #4294967295
 800368e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	e019      	b.n	80036cc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003698:	68b8      	ldr	r0, [r7, #8]
 800369a:	f000 f849 	bl	8003730 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800369e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80036a2:	f7ff ff27 	bl	80034f4 <FLASH_WaitForLastOperation>
 80036a6:	4603      	mov	r3, r0
 80036a8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80036aa:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <HAL_FLASHEx_Erase+0xd4>)
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	4a11      	ldr	r2, [pc, #68]	; (80036f4 <HAL_FLASHEx_Erase+0xd4>)
 80036b0:	f023 0302 	bic.w	r3, r3, #2
 80036b4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	601a      	str	r2, [r3, #0]
            break;
 80036c2:	e00c      	b.n	80036de <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ca:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	02da      	lsls	r2, r3, #11
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d3dc      	bcc.n	8003698 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80036de:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <HAL_FLASHEx_Erase+0xd0>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	761a      	strb	r2, [r3, #24]

  return status;
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20003658 	.word	0x20003658
 80036f4:	40022000 	.word	0x40022000

080036f8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003700:	4b09      	ldr	r3, [pc, #36]	; (8003728 <FLASH_MassErase+0x30>)
 8003702:	2200      	movs	r2, #0
 8003704:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003706:	4b09      	ldr	r3, [pc, #36]	; (800372c <FLASH_MassErase+0x34>)
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	4a08      	ldr	r2, [pc, #32]	; (800372c <FLASH_MassErase+0x34>)
 800370c:	f043 0304 	orr.w	r3, r3, #4
 8003710:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <FLASH_MassErase+0x34>)
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	4a05      	ldr	r2, [pc, #20]	; (800372c <FLASH_MassErase+0x34>)
 8003718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800371c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr
 8003728:	20003658 	.word	0x20003658
 800372c:	40022000 	.word	0x40022000

08003730 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003738:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <FLASH_PageErase+0x38>)
 800373a:	2200      	movs	r2, #0
 800373c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <FLASH_PageErase+0x3c>)
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	4a0a      	ldr	r2, [pc, #40]	; (800376c <FLASH_PageErase+0x3c>)
 8003744:	f043 0302 	orr.w	r3, r3, #2
 8003748:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800374a:	4a08      	ldr	r2, [pc, #32]	; (800376c <FLASH_PageErase+0x3c>)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <FLASH_PageErase+0x3c>)
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	4a05      	ldr	r2, [pc, #20]	; (800376c <FLASH_PageErase+0x3c>)
 8003756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800375a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	20003658 	.word	0x20003658
 800376c:	40022000 	.word	0x40022000

08003770 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003770:	b480      	push	{r7}
 8003772:	b08b      	sub	sp, #44	; 0x2c
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800377a:	2300      	movs	r3, #0
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800377e:	2300      	movs	r3, #0
 8003780:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003782:	e169      	b.n	8003a58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003784:	2201      	movs	r2, #1
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69fa      	ldr	r2, [r7, #28]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	429a      	cmp	r2, r3
 800379e:	f040 8158 	bne.w	8003a52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4a9a      	ldr	r2, [pc, #616]	; (8003a10 <HAL_GPIO_Init+0x2a0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d05e      	beq.n	800386a <HAL_GPIO_Init+0xfa>
 80037ac:	4a98      	ldr	r2, [pc, #608]	; (8003a10 <HAL_GPIO_Init+0x2a0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d875      	bhi.n	800389e <HAL_GPIO_Init+0x12e>
 80037b2:	4a98      	ldr	r2, [pc, #608]	; (8003a14 <HAL_GPIO_Init+0x2a4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d058      	beq.n	800386a <HAL_GPIO_Init+0xfa>
 80037b8:	4a96      	ldr	r2, [pc, #600]	; (8003a14 <HAL_GPIO_Init+0x2a4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d86f      	bhi.n	800389e <HAL_GPIO_Init+0x12e>
 80037be:	4a96      	ldr	r2, [pc, #600]	; (8003a18 <HAL_GPIO_Init+0x2a8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d052      	beq.n	800386a <HAL_GPIO_Init+0xfa>
 80037c4:	4a94      	ldr	r2, [pc, #592]	; (8003a18 <HAL_GPIO_Init+0x2a8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d869      	bhi.n	800389e <HAL_GPIO_Init+0x12e>
 80037ca:	4a94      	ldr	r2, [pc, #592]	; (8003a1c <HAL_GPIO_Init+0x2ac>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d04c      	beq.n	800386a <HAL_GPIO_Init+0xfa>
 80037d0:	4a92      	ldr	r2, [pc, #584]	; (8003a1c <HAL_GPIO_Init+0x2ac>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d863      	bhi.n	800389e <HAL_GPIO_Init+0x12e>
 80037d6:	4a92      	ldr	r2, [pc, #584]	; (8003a20 <HAL_GPIO_Init+0x2b0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d046      	beq.n	800386a <HAL_GPIO_Init+0xfa>
 80037dc:	4a90      	ldr	r2, [pc, #576]	; (8003a20 <HAL_GPIO_Init+0x2b0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d85d      	bhi.n	800389e <HAL_GPIO_Init+0x12e>
 80037e2:	2b12      	cmp	r3, #18
 80037e4:	d82a      	bhi.n	800383c <HAL_GPIO_Init+0xcc>
 80037e6:	2b12      	cmp	r3, #18
 80037e8:	d859      	bhi.n	800389e <HAL_GPIO_Init+0x12e>
 80037ea:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <HAL_GPIO_Init+0x80>)
 80037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f0:	0800386b 	.word	0x0800386b
 80037f4:	08003845 	.word	0x08003845
 80037f8:	08003857 	.word	0x08003857
 80037fc:	08003899 	.word	0x08003899
 8003800:	0800389f 	.word	0x0800389f
 8003804:	0800389f 	.word	0x0800389f
 8003808:	0800389f 	.word	0x0800389f
 800380c:	0800389f 	.word	0x0800389f
 8003810:	0800389f 	.word	0x0800389f
 8003814:	0800389f 	.word	0x0800389f
 8003818:	0800389f 	.word	0x0800389f
 800381c:	0800389f 	.word	0x0800389f
 8003820:	0800389f 	.word	0x0800389f
 8003824:	0800389f 	.word	0x0800389f
 8003828:	0800389f 	.word	0x0800389f
 800382c:	0800389f 	.word	0x0800389f
 8003830:	0800389f 	.word	0x0800389f
 8003834:	0800384d 	.word	0x0800384d
 8003838:	08003861 	.word	0x08003861
 800383c:	4a79      	ldr	r2, [pc, #484]	; (8003a24 <HAL_GPIO_Init+0x2b4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d013      	beq.n	800386a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003842:	e02c      	b.n	800389e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	623b      	str	r3, [r7, #32]
          break;
 800384a:	e029      	b.n	80038a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	3304      	adds	r3, #4
 8003852:	623b      	str	r3, [r7, #32]
          break;
 8003854:	e024      	b.n	80038a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	3308      	adds	r3, #8
 800385c:	623b      	str	r3, [r7, #32]
          break;
 800385e:	e01f      	b.n	80038a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	330c      	adds	r3, #12
 8003866:	623b      	str	r3, [r7, #32]
          break;
 8003868:	e01a      	b.n	80038a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d102      	bne.n	8003878 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003872:	2304      	movs	r3, #4
 8003874:	623b      	str	r3, [r7, #32]
          break;
 8003876:	e013      	b.n	80038a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003880:	2308      	movs	r3, #8
 8003882:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69fa      	ldr	r2, [r7, #28]
 8003888:	611a      	str	r2, [r3, #16]
          break;
 800388a:	e009      	b.n	80038a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800388c:	2308      	movs	r3, #8
 800388e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	615a      	str	r2, [r3, #20]
          break;
 8003896:	e003      	b.n	80038a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003898:	2300      	movs	r3, #0
 800389a:	623b      	str	r3, [r7, #32]
          break;
 800389c:	e000      	b.n	80038a0 <HAL_GPIO_Init+0x130>
          break;
 800389e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	2bff      	cmp	r3, #255	; 0xff
 80038a4:	d801      	bhi.n	80038aa <HAL_GPIO_Init+0x13a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	e001      	b.n	80038ae <HAL_GPIO_Init+0x13e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3304      	adds	r3, #4
 80038ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	2bff      	cmp	r3, #255	; 0xff
 80038b4:	d802      	bhi.n	80038bc <HAL_GPIO_Init+0x14c>
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	e002      	b.n	80038c2 <HAL_GPIO_Init+0x152>
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	3b08      	subs	r3, #8
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	210f      	movs	r1, #15
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	fa01 f303 	lsl.w	r3, r1, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	401a      	ands	r2, r3
 80038d4:	6a39      	ldr	r1, [r7, #32]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	fa01 f303 	lsl.w	r3, r1, r3
 80038dc:	431a      	orrs	r2, r3
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 80b1 	beq.w	8003a52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038f0:	4b4d      	ldr	r3, [pc, #308]	; (8003a28 <HAL_GPIO_Init+0x2b8>)
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	4a4c      	ldr	r2, [pc, #304]	; (8003a28 <HAL_GPIO_Init+0x2b8>)
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	6193      	str	r3, [r2, #24]
 80038fc:	4b4a      	ldr	r3, [pc, #296]	; (8003a28 <HAL_GPIO_Init+0x2b8>)
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003908:	4a48      	ldr	r2, [pc, #288]	; (8003a2c <HAL_GPIO_Init+0x2bc>)
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	089b      	lsrs	r3, r3, #2
 800390e:	3302      	adds	r3, #2
 8003910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003914:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	220f      	movs	r2, #15
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4013      	ands	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a40      	ldr	r2, [pc, #256]	; (8003a30 <HAL_GPIO_Init+0x2c0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d013      	beq.n	800395c <HAL_GPIO_Init+0x1ec>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a3f      	ldr	r2, [pc, #252]	; (8003a34 <HAL_GPIO_Init+0x2c4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00d      	beq.n	8003958 <HAL_GPIO_Init+0x1e8>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a3e      	ldr	r2, [pc, #248]	; (8003a38 <HAL_GPIO_Init+0x2c8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d007      	beq.n	8003954 <HAL_GPIO_Init+0x1e4>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a3d      	ldr	r2, [pc, #244]	; (8003a3c <HAL_GPIO_Init+0x2cc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d101      	bne.n	8003950 <HAL_GPIO_Init+0x1e0>
 800394c:	2303      	movs	r3, #3
 800394e:	e006      	b.n	800395e <HAL_GPIO_Init+0x1ee>
 8003950:	2304      	movs	r3, #4
 8003952:	e004      	b.n	800395e <HAL_GPIO_Init+0x1ee>
 8003954:	2302      	movs	r3, #2
 8003956:	e002      	b.n	800395e <HAL_GPIO_Init+0x1ee>
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <HAL_GPIO_Init+0x1ee>
 800395c:	2300      	movs	r3, #0
 800395e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003960:	f002 0203 	and.w	r2, r2, #3
 8003964:	0092      	lsls	r2, r2, #2
 8003966:	4093      	lsls	r3, r2
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800396e:	492f      	ldr	r1, [pc, #188]	; (8003a2c <HAL_GPIO_Init+0x2bc>)
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	089b      	lsrs	r3, r3, #2
 8003974:	3302      	adds	r3, #2
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d006      	beq.n	8003996 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003988:	4b2d      	ldr	r3, [pc, #180]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	492c      	ldr	r1, [pc, #176]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	4313      	orrs	r3, r2
 8003992:	600b      	str	r3, [r1, #0]
 8003994:	e006      	b.n	80039a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003996:	4b2a      	ldr	r3, [pc, #168]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	43db      	mvns	r3, r3
 800399e:	4928      	ldr	r1, [pc, #160]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d006      	beq.n	80039be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039b0:	4b23      	ldr	r3, [pc, #140]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	4922      	ldr	r1, [pc, #136]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	604b      	str	r3, [r1, #4]
 80039bc:	e006      	b.n	80039cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039be:	4b20      	ldr	r3, [pc, #128]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	491e      	ldr	r1, [pc, #120]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d006      	beq.n	80039e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80039d8:	4b19      	ldr	r3, [pc, #100]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	4918      	ldr	r1, [pc, #96]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	608b      	str	r3, [r1, #8]
 80039e4:	e006      	b.n	80039f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039e6:	4b16      	ldr	r3, [pc, #88]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	4914      	ldr	r1, [pc, #80]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d021      	beq.n	8003a44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a00:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	490e      	ldr	r1, [pc, #56]	; (8003a40 <HAL_GPIO_Init+0x2d0>)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60cb      	str	r3, [r1, #12]
 8003a0c:	e021      	b.n	8003a52 <HAL_GPIO_Init+0x2e2>
 8003a0e:	bf00      	nop
 8003a10:	10320000 	.word	0x10320000
 8003a14:	10310000 	.word	0x10310000
 8003a18:	10220000 	.word	0x10220000
 8003a1c:	10210000 	.word	0x10210000
 8003a20:	10120000 	.word	0x10120000
 8003a24:	10110000 	.word	0x10110000
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40010000 	.word	0x40010000
 8003a30:	40010800 	.word	0x40010800
 8003a34:	40010c00 	.word	0x40010c00
 8003a38:	40011000 	.word	0x40011000
 8003a3c:	40011400 	.word	0x40011400
 8003a40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a44:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <HAL_GPIO_Init+0x304>)
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	4909      	ldr	r1, [pc, #36]	; (8003a74 <HAL_GPIO_Init+0x304>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	3301      	adds	r3, #1
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f47f ae8e 	bne.w	8003784 <HAL_GPIO_Init+0x14>
  }
}
 8003a68:	bf00      	nop
 8003a6a:	bf00      	nop
 8003a6c:	372c      	adds	r7, #44	; 0x2c
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr
 8003a74:	40010400 	.word	0x40010400

08003a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e304      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 8087 	beq.w	8003ba6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a98:	4b92      	ldr	r3, [pc, #584]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 030c 	and.w	r3, r3, #12
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d00c      	beq.n	8003abe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003aa4:	4b8f      	ldr	r3, [pc, #572]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d112      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x5e>
 8003ab0:	4b8c      	ldr	r3, [pc, #560]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003abc:	d10b      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abe:	4b89      	ldr	r3, [pc, #548]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d06c      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x12c>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d168      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e2de      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ade:	d106      	bne.n	8003aee <HAL_RCC_OscConfig+0x76>
 8003ae0:	4b80      	ldr	r3, [pc, #512]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a7f      	ldr	r2, [pc, #508]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	e02e      	b.n	8003b4c <HAL_RCC_OscConfig+0xd4>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10c      	bne.n	8003b10 <HAL_RCC_OscConfig+0x98>
 8003af6:	4b7b      	ldr	r3, [pc, #492]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a7a      	ldr	r2, [pc, #488]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	4b78      	ldr	r3, [pc, #480]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a77      	ldr	r2, [pc, #476]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	e01d      	b.n	8003b4c <HAL_RCC_OscConfig+0xd4>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCC_OscConfig+0xbc>
 8003b1a:	4b72      	ldr	r3, [pc, #456]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a71      	ldr	r2, [pc, #452]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	4b6f      	ldr	r3, [pc, #444]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a6e      	ldr	r2, [pc, #440]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	e00b      	b.n	8003b4c <HAL_RCC_OscConfig+0xd4>
 8003b34:	4b6b      	ldr	r3, [pc, #428]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a6a      	ldr	r2, [pc, #424]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	4b68      	ldr	r3, [pc, #416]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a67      	ldr	r2, [pc, #412]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d013      	beq.n	8003b7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7ff f9e0 	bl	8002f18 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7ff f9dc 	bl	8002f18 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e292      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6e:	4b5d      	ldr	r3, [pc, #372]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0xe4>
 8003b7a:	e014      	b.n	8003ba6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7ff f9cc 	bl	8002f18 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b84:	f7ff f9c8 	bl	8002f18 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	; 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e27e      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b96:	4b53      	ldr	r3, [pc, #332]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x10c>
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d063      	beq.n	8003c7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bb2:	4b4c      	ldr	r3, [pc, #304]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00b      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bbe:	4b49      	ldr	r3, [pc, #292]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d11c      	bne.n	8003c04 <HAL_RCC_OscConfig+0x18c>
 8003bca:	4b46      	ldr	r3, [pc, #280]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d116      	bne.n	8003c04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd6:	4b43      	ldr	r3, [pc, #268]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d005      	beq.n	8003bee <HAL_RCC_OscConfig+0x176>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d001      	beq.n	8003bee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e252      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bee:	4b3d      	ldr	r3, [pc, #244]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4939      	ldr	r1, [pc, #228]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c02:	e03a      	b.n	8003c7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d020      	beq.n	8003c4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c0c:	4b36      	ldr	r3, [pc, #216]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c12:	f7ff f981 	bl	8002f18 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c1a:	f7ff f97d 	bl	8002f18 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e233      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2c:	4b2d      	ldr	r3, [pc, #180]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c38:	4b2a      	ldr	r3, [pc, #168]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	4927      	ldr	r1, [pc, #156]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	600b      	str	r3, [r1, #0]
 8003c4c:	e015      	b.n	8003c7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c4e:	4b26      	ldr	r3, [pc, #152]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c54:	f7ff f960 	bl	8002f18 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c5c:	f7ff f95c 	bl	8002f18 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e212      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d03a      	beq.n	8003cfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d019      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c8e:	4b17      	ldr	r3, [pc, #92]	; (8003cec <HAL_RCC_OscConfig+0x274>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c94:	f7ff f940 	bl	8002f18 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c9c:	f7ff f93c 	bl	8002f18 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e1f2      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cae:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cba:	2001      	movs	r0, #1
 8003cbc:	f000 fc1c 	bl	80044f8 <RCC_Delay>
 8003cc0:	e01c      	b.n	8003cfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <HAL_RCC_OscConfig+0x274>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc8:	f7ff f926 	bl	8002f18 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cce:	e00f      	b.n	8003cf0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd0:	f7ff f922 	bl	8002f18 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d908      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e1d8      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	42420000 	.word	0x42420000
 8003cec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf0:	4b9b      	ldr	r3, [pc, #620]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e9      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 80a6 	beq.w	8003e56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d0e:	4b94      	ldr	r3, [pc, #592]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10d      	bne.n	8003d36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d1a:	4b91      	ldr	r3, [pc, #580]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	4a90      	ldr	r2, [pc, #576]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d24:	61d3      	str	r3, [r2, #28]
 8003d26:	4b8e      	ldr	r3, [pc, #568]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	60bb      	str	r3, [r7, #8]
 8003d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d32:	2301      	movs	r3, #1
 8003d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d36:	4b8b      	ldr	r3, [pc, #556]	; (8003f64 <HAL_RCC_OscConfig+0x4ec>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d118      	bne.n	8003d74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d42:	4b88      	ldr	r3, [pc, #544]	; (8003f64 <HAL_RCC_OscConfig+0x4ec>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a87      	ldr	r2, [pc, #540]	; (8003f64 <HAL_RCC_OscConfig+0x4ec>)
 8003d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d4e:	f7ff f8e3 	bl	8002f18 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d56:	f7ff f8df 	bl	8002f18 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b64      	cmp	r3, #100	; 0x64
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e195      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d68:	4b7e      	ldr	r3, [pc, #504]	; (8003f64 <HAL_RCC_OscConfig+0x4ec>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d106      	bne.n	8003d8a <HAL_RCC_OscConfig+0x312>
 8003d7c:	4b78      	ldr	r3, [pc, #480]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	4a77      	ldr	r2, [pc, #476]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	6213      	str	r3, [r2, #32]
 8003d88:	e02d      	b.n	8003de6 <HAL_RCC_OscConfig+0x36e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10c      	bne.n	8003dac <HAL_RCC_OscConfig+0x334>
 8003d92:	4b73      	ldr	r3, [pc, #460]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	4a72      	ldr	r2, [pc, #456]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	6213      	str	r3, [r2, #32]
 8003d9e:	4b70      	ldr	r3, [pc, #448]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	4a6f      	ldr	r2, [pc, #444]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003da4:	f023 0304 	bic.w	r3, r3, #4
 8003da8:	6213      	str	r3, [r2, #32]
 8003daa:	e01c      	b.n	8003de6 <HAL_RCC_OscConfig+0x36e>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2b05      	cmp	r3, #5
 8003db2:	d10c      	bne.n	8003dce <HAL_RCC_OscConfig+0x356>
 8003db4:	4b6a      	ldr	r3, [pc, #424]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	4a69      	ldr	r2, [pc, #420]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003dba:	f043 0304 	orr.w	r3, r3, #4
 8003dbe:	6213      	str	r3, [r2, #32]
 8003dc0:	4b67      	ldr	r3, [pc, #412]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	4a66      	ldr	r2, [pc, #408]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	6213      	str	r3, [r2, #32]
 8003dcc:	e00b      	b.n	8003de6 <HAL_RCC_OscConfig+0x36e>
 8003dce:	4b64      	ldr	r3, [pc, #400]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	4a63      	ldr	r2, [pc, #396]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	6213      	str	r3, [r2, #32]
 8003dda:	4b61      	ldr	r3, [pc, #388]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	4a60      	ldr	r2, [pc, #384]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003de0:	f023 0304 	bic.w	r3, r3, #4
 8003de4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d015      	beq.n	8003e1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dee:	f7ff f893 	bl	8002f18 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df4:	e00a      	b.n	8003e0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df6:	f7ff f88f 	bl	8002f18 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e143      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0c:	4b54      	ldr	r3, [pc, #336]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0ee      	beq.n	8003df6 <HAL_RCC_OscConfig+0x37e>
 8003e18:	e014      	b.n	8003e44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1a:	f7ff f87d 	bl	8002f18 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e20:	e00a      	b.n	8003e38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e22:	f7ff f879 	bl	8002f18 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e12d      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e38:	4b49      	ldr	r3, [pc, #292]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1ee      	bne.n	8003e22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e44:	7dfb      	ldrb	r3, [r7, #23]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d105      	bne.n	8003e56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e4a:	4b45      	ldr	r3, [pc, #276]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	4a44      	ldr	r2, [pc, #272]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e54:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 808c 	beq.w	8003f78 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003e60:	4b3f      	ldr	r3, [pc, #252]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6c:	d10e      	bne.n	8003e8c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003e6e:	4b3c      	ldr	r3, [pc, #240]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d108      	bne.n	8003e8c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003e7a:	4b39      	ldr	r3, [pc, #228]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e86:	d101      	bne.n	8003e8c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e103      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d14e      	bne.n	8003f32 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003e94:	4b32      	ldr	r3, [pc, #200]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d009      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003ea0:	4b2f      	ldr	r3, [pc, #188]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d001      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0ef      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003eb4:	4b2c      	ldr	r3, [pc, #176]	; (8003f68 <HAL_RCC_OscConfig+0x4f0>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eba:	f7ff f82d 	bl	8002f18 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ec2:	f7ff f829 	bl	8002f18 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b64      	cmp	r3, #100	; 0x64
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e0df      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003ed4:	4b22      	ldr	r3, [pc, #136]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f0      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003ee0:	4b1f      	ldr	r3, [pc, #124]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eec:	491c      	ldr	r1, [pc, #112]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003ef2:	4b1b      	ldr	r3, [pc, #108]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	4918      	ldr	r1, [pc, #96]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003f04:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <HAL_RCC_OscConfig+0x4f0>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0a:	f7ff f805 	bl	8002f18 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f12:	f7ff f801 	bl	8002f18 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b64      	cmp	r3, #100	; 0x64
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e0b7      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003f24:	4b0e      	ldr	r3, [pc, #56]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x49a>
 8003f30:	e022      	b.n	8003f78 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003f32:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f36:	4a0a      	ldr	r2, [pc, #40]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003f3e:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <HAL_RCC_OscConfig+0x4f0>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fe ffe8 	bl	8002f18 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003f4a:	e00f      	b.n	8003f6c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f4c:	f7fe ffe4 	bl	8002f18 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	; 0x64
 8003f58:	d908      	bls.n	8003f6c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e09a      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
 8003f5e:	bf00      	nop
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40007000 	.word	0x40007000
 8003f68:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003f6c:	4b4b      	ldr	r3, [pc, #300]	; (800409c <HAL_RCC_OscConfig+0x624>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e9      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8088 	beq.w	8004092 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f82:	4b46      	ldr	r3, [pc, #280]	; (800409c <HAL_RCC_OscConfig+0x624>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d068      	beq.n	8004060 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d14d      	bne.n	8004032 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f96:	4b42      	ldr	r3, [pc, #264]	; (80040a0 <HAL_RCC_OscConfig+0x628>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9c:	f7fe ffbc 	bl	8002f18 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa4:	f7fe ffb8 	bl	8002f18 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e06e      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fb6:	4b39      	ldr	r3, [pc, #228]	; (800409c <HAL_RCC_OscConfig+0x624>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fca:	d10f      	bne.n	8003fec <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003fcc:	4b33      	ldr	r3, [pc, #204]	; (800409c <HAL_RCC_OscConfig+0x624>)
 8003fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	4931      	ldr	r1, [pc, #196]	; (800409c <HAL_RCC_OscConfig+0x624>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fda:	4b30      	ldr	r3, [pc, #192]	; (800409c <HAL_RCC_OscConfig+0x624>)
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	f023 020f 	bic.w	r2, r3, #15
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	492d      	ldr	r1, [pc, #180]	; (800409c <HAL_RCC_OscConfig+0x624>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fec:	4b2b      	ldr	r3, [pc, #172]	; (800409c <HAL_RCC_OscConfig+0x624>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	4927      	ldr	r1, [pc, #156]	; (800409c <HAL_RCC_OscConfig+0x624>)
 8004000:	4313      	orrs	r3, r2
 8004002:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004004:	4b26      	ldr	r3, [pc, #152]	; (80040a0 <HAL_RCC_OscConfig+0x628>)
 8004006:	2201      	movs	r2, #1
 8004008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400a:	f7fe ff85 	bl	8002f18 <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004010:	e008      	b.n	8004024 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004012:	f7fe ff81 	bl	8002f18 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e037      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004024:	4b1d      	ldr	r3, [pc, #116]	; (800409c <HAL_RCC_OscConfig+0x624>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0f0      	beq.n	8004012 <HAL_RCC_OscConfig+0x59a>
 8004030:	e02f      	b.n	8004092 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004032:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <HAL_RCC_OscConfig+0x628>)
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004038:	f7fe ff6e 	bl	8002f18 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004040:	f7fe ff6a 	bl	8002f18 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e020      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004052:	4b12      	ldr	r3, [pc, #72]	; (800409c <HAL_RCC_OscConfig+0x624>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f0      	bne.n	8004040 <HAL_RCC_OscConfig+0x5c8>
 800405e:	e018      	b.n	8004092 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e013      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800406c:	4b0b      	ldr	r3, [pc, #44]	; (800409c <HAL_RCC_OscConfig+0x624>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	429a      	cmp	r2, r3
 800407e:	d106      	bne.n	800408e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408a:	429a      	cmp	r2, r3
 800408c:	d001      	beq.n	8004092 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021000 	.word	0x40021000
 80040a0:	42420060 	.word	0x42420060

080040a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0d0      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040b8:	4b6a      	ldr	r3, [pc, #424]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d910      	bls.n	80040e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c6:	4b67      	ldr	r3, [pc, #412]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 0207 	bic.w	r2, r3, #7
 80040ce:	4965      	ldr	r1, [pc, #404]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d6:	4b63      	ldr	r3, [pc, #396]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0b8      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d020      	beq.n	8004136 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004100:	4b59      	ldr	r3, [pc, #356]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4a58      	ldr	r2, [pc, #352]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004106:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800410a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004118:	4b53      	ldr	r3, [pc, #332]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4a52      	ldr	r2, [pc, #328]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 800411e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004122:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004124:	4b50      	ldr	r3, [pc, #320]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	494d      	ldr	r1, [pc, #308]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004132:	4313      	orrs	r3, r2
 8004134:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d040      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414a:	4b47      	ldr	r3, [pc, #284]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d115      	bne.n	8004182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e07f      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004162:	4b41      	ldr	r3, [pc, #260]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d109      	bne.n	8004182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e073      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004172:	4b3d      	ldr	r3, [pc, #244]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e06b      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004182:	4b39      	ldr	r3, [pc, #228]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f023 0203 	bic.w	r2, r3, #3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	4936      	ldr	r1, [pc, #216]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004190:	4313      	orrs	r3, r2
 8004192:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004194:	f7fe fec0 	bl	8002f18 <HAL_GetTick>
 8004198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	e00a      	b.n	80041b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800419c:	f7fe febc 	bl	8002f18 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e053      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b2:	4b2d      	ldr	r3, [pc, #180]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f003 020c 	and.w	r2, r3, #12
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d1eb      	bne.n	800419c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041c4:	4b27      	ldr	r3, [pc, #156]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d210      	bcs.n	80041f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d2:	4b24      	ldr	r3, [pc, #144]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 0207 	bic.w	r2, r3, #7
 80041da:	4922      	ldr	r1, [pc, #136]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b20      	ldr	r3, [pc, #128]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e032      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004200:	4b19      	ldr	r3, [pc, #100]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4916      	ldr	r1, [pc, #88]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 800420e:	4313      	orrs	r3, r2
 8004210:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800421e:	4b12      	ldr	r3, [pc, #72]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	490e      	ldr	r1, [pc, #56]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 800422e:	4313      	orrs	r3, r2
 8004230:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004232:	f000 f821 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 8004236:	4602      	mov	r2, r0
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	490a      	ldr	r1, [pc, #40]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004244:	5ccb      	ldrb	r3, [r1, r3]
 8004246:	fa22 f303 	lsr.w	r3, r2, r3
 800424a:	4a09      	ldr	r2, [pc, #36]	; (8004270 <HAL_RCC_ClockConfig+0x1cc>)
 800424c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800424e:	4b09      	ldr	r3, [pc, #36]	; (8004274 <HAL_RCC_ClockConfig+0x1d0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fe fcc2 	bl	8002bdc <HAL_InitTick>

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40022000 	.word	0x40022000
 8004268:	40021000 	.word	0x40021000
 800426c:	0800acf4 	.word	0x0800acf4
 8004270:	20000014 	.word	0x20000014
 8004274:	20000018 	.word	0x20000018

08004278 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427c:	b099      	sub	sp, #100	; 0x64
 800427e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8004280:	4b66      	ldr	r3, [pc, #408]	; (800441c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004282:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8004286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004288:	c407      	stmia	r4!, {r0, r1, r2}
 800428a:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800428c:	4b64      	ldr	r3, [pc, #400]	; (8004420 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800428e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8004292:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004294:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	657b      	str	r3, [r7, #84]	; 0x54
 800429c:	2300      	movs	r3, #0
 800429e:	653b      	str	r3, [r7, #80]	; 0x50
 80042a0:	2300      	movs	r3, #0
 80042a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042a4:	2300      	movs	r3, #0
 80042a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t sysclockfreq = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80042b0:	2300      	movs	r3, #0
 80042b2:	647b      	str	r3, [r7, #68]	; 0x44
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042b4:	4b5b      	ldr	r3, [pc, #364]	; (8004424 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042bc:	f003 030c 	and.w	r3, r3, #12
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d002      	beq.n	80042ca <HAL_RCC_GetSysClockFreq+0x52>
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d003      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x58>
 80042c8:	e09f      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042ca:	4b57      	ldr	r3, [pc, #348]	; (8004428 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80042cc:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 80042ce:	e09f      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d2:	0c9b      	lsrs	r3, r3, #18
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	3340      	adds	r3, #64	; 0x40
 80042da:	f107 0220 	add.w	r2, r7, #32
 80042de:	4413      	add	r3, r2
 80042e0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80042e4:	64fb      	str	r3, [r7, #76]	; 0x4c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8084 	beq.w	80043fa <HAL_RCC_GetSysClockFreq+0x182>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80042f2:	4b4c      	ldr	r3, [pc, #304]	; (8004424 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	3340      	adds	r3, #64	; 0x40
 80042fc:	f107 0220 	add.w	r2, r7, #32
 8004300:	4413      	add	r3, r2
 8004302:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8004306:	653b      	str	r3, [r7, #80]	; 0x50
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004308:	4b46      	ldr	r3, [pc, #280]	; (8004424 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d060      	beq.n	80043d6 <HAL_RCC_GetSysClockFreq+0x15e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004314:	4b43      	ldr	r3, [pc, #268]	; (8004424 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	091b      	lsrs	r3, r3, #4
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	3301      	adds	r3, #1
 8004320:	64bb      	str	r3, [r7, #72]	; 0x48
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004322:	4b40      	ldr	r3, [pc, #256]	; (8004424 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	0a1b      	lsrs	r3, r3, #8
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	3302      	adds	r3, #2
 800432e:	647b      	str	r3, [r7, #68]	; 0x44
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8004330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004332:	2200      	movs	r2, #0
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	617a      	str	r2, [r7, #20]
 8004338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800433a:	2200      	movs	r2, #0
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	61fa      	str	r2, [r7, #28]
 8004340:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004344:	4622      	mov	r2, r4
 8004346:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800434a:	4684      	mov	ip, r0
 800434c:	fb0c f202 	mul.w	r2, ip, r2
 8004350:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8004354:	468c      	mov	ip, r1
 8004356:	4618      	mov	r0, r3
 8004358:	4621      	mov	r1, r4
 800435a:	4603      	mov	r3, r0
 800435c:	fb03 f30c 	mul.w	r3, r3, ip
 8004360:	4413      	add	r3, r2
 8004362:	4602      	mov	r2, r0
 8004364:	69b9      	ldr	r1, [r7, #24]
 8004366:	fba2 8901 	umull	r8, r9, r2, r1
 800436a:	444b      	add	r3, r9
 800436c:	4699      	mov	r9, r3
 800436e:	4b2e      	ldr	r3, [pc, #184]	; (8004428 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8004370:	fb03 f209 	mul.w	r2, r3, r9
 8004374:	2300      	movs	r3, #0
 8004376:	fb03 f308 	mul.w	r3, r3, r8
 800437a:	4413      	add	r3, r2
 800437c:	4a2a      	ldr	r2, [pc, #168]	; (8004428 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800437e:	fba8 ab02 	umull	sl, fp, r8, r2
 8004382:	445b      	add	r3, fp
 8004384:	469b      	mov	fp, r3
 8004386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004388:	2200      	movs	r2, #0
 800438a:	60bb      	str	r3, [r7, #8]
 800438c:	60fa      	str	r2, [r7, #12]
 800438e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004390:	2200      	movs	r2, #0
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	607a      	str	r2, [r7, #4]
 8004396:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800439a:	4622      	mov	r2, r4
 800439c:	e9d7 8900 	ldrd	r8, r9, [r7]
 80043a0:	4641      	mov	r1, r8
 80043a2:	fb01 f202 	mul.w	r2, r1, r2
 80043a6:	46cc      	mov	ip, r9
 80043a8:	4618      	mov	r0, r3
 80043aa:	4621      	mov	r1, r4
 80043ac:	4603      	mov	r3, r0
 80043ae:	fb03 f30c 	mul.w	r3, r3, ip
 80043b2:	4413      	add	r3, r2
 80043b4:	4602      	mov	r2, r0
 80043b6:	4641      	mov	r1, r8
 80043b8:	fba2 5601 	umull	r5, r6, r2, r1
 80043bc:	4433      	add	r3, r6
 80043be:	461e      	mov	r6, r3
 80043c0:	462a      	mov	r2, r5
 80043c2:	4633      	mov	r3, r6
 80043c4:	4650      	mov	r0, sl
 80043c6:	4659      	mov	r1, fp
 80043c8:	f7fc fdb0 	bl	8000f2c <__aeabi_uldivmod>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4613      	mov	r3, r2
 80043d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043d4:	e007      	b.n	80043e6 <HAL_RCC_GetSysClockFreq+0x16e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80043d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d8:	4a13      	ldr	r2, [pc, #76]	; (8004428 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80043da:	fb03 f202 	mul.w	r2, r3, r2
 80043de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80043e6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80043ea:	461a      	mov	r2, r3
 80043ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d108      	bne.n	8004404 <HAL_RCC_GetSysClockFreq+0x18c>
        {
          pllclk = pllclk / 2;
 80043f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043f4:	085b      	lsrs	r3, r3, #1
 80043f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043f8:	e004      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x18c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043fc:	4a0b      	ldr	r2, [pc, #44]	; (800442c <HAL_RCC_GetSysClockFreq+0x1b4>)
 80043fe:	fb02 f303 	mul.w	r3, r2, r3
 8004402:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      sysclockfreq = pllclk;
 8004404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004406:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8004408:	e002      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800440a:	4b09      	ldr	r3, [pc, #36]	; (8004430 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800440c:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 800440e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004410:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8004412:	4618      	mov	r0, r3
 8004414:	3764      	adds	r7, #100	; 0x64
 8004416:	46bd      	mov	sp, r7
 8004418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800441c:	0800accc 	.word	0x0800accc
 8004420:	0800acdc 	.word	0x0800acdc
 8004424:	40021000 	.word	0x40021000
 8004428:	017d7840 	.word	0x017d7840
 800442c:	003d0900 	.word	0x003d0900
 8004430:	007a1200 	.word	0x007a1200

08004434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004438:	4b02      	ldr	r3, [pc, #8]	; (8004444 <HAL_RCC_GetHCLKFreq+0x10>)
 800443a:	681b      	ldr	r3, [r3, #0]
}
 800443c:	4618      	mov	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	20000014 	.word	0x20000014

08004448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800444c:	f7ff fff2 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 8004450:	4602      	mov	r2, r0
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	0a1b      	lsrs	r3, r3, #8
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4903      	ldr	r1, [pc, #12]	; (800446c <HAL_RCC_GetPCLK1Freq+0x24>)
 800445e:	5ccb      	ldrb	r3, [r1, r3]
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40021000 	.word	0x40021000
 800446c:	0800ad04 	.word	0x0800ad04

08004470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004474:	f7ff ffde 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 8004478:	4602      	mov	r2, r0
 800447a:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	0adb      	lsrs	r3, r3, #11
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	4903      	ldr	r1, [pc, #12]	; (8004494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004486:	5ccb      	ldrb	r3, [r1, r3]
 8004488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800448c:	4618      	mov	r0, r3
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40021000 	.word	0x40021000
 8004494:	0800ad04 	.word	0x0800ad04

08004498 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	220f      	movs	r2, #15
 80044a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044a8:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <HAL_RCC_GetClockConfig+0x58>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 0203 	and.w	r2, r3, #3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044b4:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <HAL_RCC_GetClockConfig+0x58>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <HAL_RCC_GetClockConfig+0x58>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80044cc:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <HAL_RCC_GetClockConfig+0x58>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	08db      	lsrs	r3, r3, #3
 80044d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044da:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <HAL_RCC_GetClockConfig+0x5c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0207 	and.w	r2, r3, #7
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40022000 	.word	0x40022000

080044f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004500:	4b0a      	ldr	r3, [pc, #40]	; (800452c <RCC_Delay+0x34>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a0a      	ldr	r2, [pc, #40]	; (8004530 <RCC_Delay+0x38>)
 8004506:	fba2 2303 	umull	r2, r3, r2, r3
 800450a:	0a5b      	lsrs	r3, r3, #9
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	fb02 f303 	mul.w	r3, r2, r3
 8004512:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004514:	bf00      	nop
  }
  while (Delay --);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1e5a      	subs	r2, r3, #1
 800451a:	60fa      	str	r2, [r7, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1f9      	bne.n	8004514 <RCC_Delay+0x1c>
}
 8004520:	bf00      	nop
 8004522:	bf00      	nop
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr
 800452c:	20000014 	.word	0x20000014
 8004530:	10624dd3 	.word	0x10624dd3

08004534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e041      	b.n	80045ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f839 	bl	80045d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3304      	adds	r3, #4
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f000 f9bc 	bl	80048f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d001      	beq.n	80045fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e03f      	b.n	800467c <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1b      	ldr	r2, [pc, #108]	; (8004688 <HAL_TIM_Base_Start_IT+0xa4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d013      	beq.n	8004646 <HAL_TIM_Base_Start_IT+0x62>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004626:	d00e      	beq.n	8004646 <HAL_TIM_Base_Start_IT+0x62>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a17      	ldr	r2, [pc, #92]	; (800468c <HAL_TIM_Base_Start_IT+0xa8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d009      	beq.n	8004646 <HAL_TIM_Base_Start_IT+0x62>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a16      	ldr	r2, [pc, #88]	; (8004690 <HAL_TIM_Base_Start_IT+0xac>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d004      	beq.n	8004646 <HAL_TIM_Base_Start_IT+0x62>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a14      	ldr	r2, [pc, #80]	; (8004694 <HAL_TIM_Base_Start_IT+0xb0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d111      	bne.n	800466a <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b06      	cmp	r3, #6
 8004656:	d010      	beq.n	800467a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004668:	e007      	b.n	800467a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0201 	orr.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40012c00 	.word	0x40012c00
 800468c:	40000400 	.word	0x40000400
 8004690:	40000800 	.word	0x40000800
 8004694:	40000c00 	.word	0x40000c00

08004698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d122      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d11b      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0202 	mvn.w	r2, #2
 80046c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f8ed 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 80046e0:	e005      	b.n	80046ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f8e0 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f8ef 	bl	80048cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d122      	bne.n	8004748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b04      	cmp	r3, #4
 800470e:	d11b      	bne.n	8004748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0204 	mvn.w	r2, #4
 8004718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2202      	movs	r2, #2
 800471e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f8c3 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 8004734:	e005      	b.n	8004742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f8b6 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f8c5 	bl	80048cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b08      	cmp	r3, #8
 8004754:	d122      	bne.n	800479c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b08      	cmp	r3, #8
 8004762:	d11b      	bne.n	800479c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0208 	mvn.w	r2, #8
 800476c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2204      	movs	r2, #4
 8004772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f899 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 8004788:	e005      	b.n	8004796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f88c 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f89b 	bl	80048cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d122      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d11b      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0210 	mvn.w	r2, #16
 80047c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2208      	movs	r2, #8
 80047c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f86f 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 80047dc:	e005      	b.n	80047ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f862 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f871 	bl	80048cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d10e      	bne.n	800481c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b01      	cmp	r3, #1
 800480a:	d107      	bne.n	800481c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0201 	mvn.w	r2, #1
 8004814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fd fc5c 	bl	80020d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004826:	2b80      	cmp	r3, #128	; 0x80
 8004828:	d10e      	bne.n	8004848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004834:	2b80      	cmp	r3, #128	; 0x80
 8004836:	d107      	bne.n	8004848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f8c9 	bl	80049da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004852:	2b40      	cmp	r3, #64	; 0x40
 8004854:	d10e      	bne.n	8004874 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004860:	2b40      	cmp	r3, #64	; 0x40
 8004862:	d107      	bne.n	8004874 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800486c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f835 	bl	80048de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0320 	and.w	r3, r3, #32
 800487e:	2b20      	cmp	r3, #32
 8004880:	d10e      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b20      	cmp	r3, #32
 800488e:	d107      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0220 	mvn.w	r2, #32
 8004898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f894 	bl	80049c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bc80      	pop	{r7}
 80048b8:	4770      	bx	lr

080048ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a2d      	ldr	r2, [pc, #180]	; (80049b8 <TIM_Base_SetConfig+0xc8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00f      	beq.n	8004928 <TIM_Base_SetConfig+0x38>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490e:	d00b      	beq.n	8004928 <TIM_Base_SetConfig+0x38>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a2a      	ldr	r2, [pc, #168]	; (80049bc <TIM_Base_SetConfig+0xcc>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d007      	beq.n	8004928 <TIM_Base_SetConfig+0x38>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a29      	ldr	r2, [pc, #164]	; (80049c0 <TIM_Base_SetConfig+0xd0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <TIM_Base_SetConfig+0x38>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a28      	ldr	r2, [pc, #160]	; (80049c4 <TIM_Base_SetConfig+0xd4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d108      	bne.n	800493a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a1e      	ldr	r2, [pc, #120]	; (80049b8 <TIM_Base_SetConfig+0xc8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00f      	beq.n	8004962 <TIM_Base_SetConfig+0x72>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004948:	d00b      	beq.n	8004962 <TIM_Base_SetConfig+0x72>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a1b      	ldr	r2, [pc, #108]	; (80049bc <TIM_Base_SetConfig+0xcc>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d007      	beq.n	8004962 <TIM_Base_SetConfig+0x72>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a1a      	ldr	r2, [pc, #104]	; (80049c0 <TIM_Base_SetConfig+0xd0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d003      	beq.n	8004962 <TIM_Base_SetConfig+0x72>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a19      	ldr	r2, [pc, #100]	; (80049c4 <TIM_Base_SetConfig+0xd4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d108      	bne.n	8004974 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a07      	ldr	r2, [pc, #28]	; (80049b8 <TIM_Base_SetConfig+0xc8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d103      	bne.n	80049a8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	615a      	str	r2, [r3, #20]
}
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr
 80049b8:	40012c00 	.word	0x40012c00
 80049bc:	40000400 	.word	0x40000400
 80049c0:	40000800 	.word	0x40000800
 80049c4:	40000c00 	.word	0x40000c00

080049c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr

080049da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr

080049ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e03f      	b.n	8004a7e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fe f83c 	bl	8002a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2224      	movs	r2, #36	; 0x24
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 fbe5 	bl	8005200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695a      	ldr	r2, [r3, #20]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	4613      	mov	r3, r2
 8004a92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d130      	bne.n	8004b02 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_UART_Transmit_IT+0x26>
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e029      	b.n	8004b04 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_UART_Transmit_IT+0x38>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e022      	b.n	8004b04 <HAL_UART_Transmit_IT+0x7e>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	88fa      	ldrh	r2, [r7, #6]
 8004ad0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	88fa      	ldrh	r2, [r7, #6]
 8004ad6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2221      	movs	r2, #33	; 0x21
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004afc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	e000      	b.n	8004b04 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004b02:	2302      	movs	r3, #2
  }
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr

08004b0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	d11d      	bne.n	8004b64 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <HAL_UART_Receive_IT+0x26>
 8004b2e:	88fb      	ldrh	r3, [r7, #6]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e016      	b.n	8004b66 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_UART_Receive_IT+0x38>
 8004b42:	2302      	movs	r3, #2
 8004b44:	e00f      	b.n	8004b66 <HAL_UART_Receive_IT+0x58>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004b54:	88fb      	ldrh	r3, [r7, #6]
 8004b56:	461a      	mov	r2, r3
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f9c6 	bl	8004eec <UART_Start_Receive_IT>
 8004b60:	4603      	mov	r3, r0
 8004b62:	e000      	b.n	8004b66 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004b64:	2302      	movs	r3, #2
  }
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08a      	sub	sp, #40	; 0x28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10d      	bne.n	8004bc2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_UART_IRQHandler+0x52>
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fa76 	bl	80050ac <UART_Receive_IT>
      return;
 8004bc0:	e17b      	b.n	8004eba <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 80b1 	beq.w	8004d2c <HAL_UART_IRQHandler+0x1bc>
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <HAL_UART_IRQHandler+0x70>
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 80a6 	beq.w	8004d2c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <HAL_UART_IRQHandler+0x90>
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	f043 0201 	orr.w	r2, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	f003 0304 	and.w	r3, r3, #4
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <HAL_UART_IRQHandler+0xb0>
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	f043 0202 	orr.w	r2, r3, #2
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00a      	beq.n	8004c40 <HAL_UART_IRQHandler+0xd0>
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	f043 0204 	orr.w	r2, r3, #4
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00f      	beq.n	8004c6a <HAL_UART_IRQHandler+0xfa>
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	f003 0320 	and.w	r3, r3, #32
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d104      	bne.n	8004c5e <HAL_UART_IRQHandler+0xee>
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d005      	beq.n	8004c6a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	f043 0208 	orr.w	r2, r3, #8
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 811e 	beq.w	8004eb0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <HAL_UART_IRQHandler+0x11e>
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fa0f 	bl	80050ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bf14      	ite	ne
 8004c9c:	2301      	movne	r3, #1
 8004c9e:	2300      	moveq	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d102      	bne.n	8004cb6 <HAL_UART_IRQHandler+0x146>
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d031      	beq.n	8004d1a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f951 	bl	8004f5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d023      	beq.n	8004d12 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695a      	ldr	r2, [r3, #20]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cd8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d013      	beq.n	8004d0a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	4a76      	ldr	r2, [pc, #472]	; (8004ec0 <HAL_UART_IRQHandler+0x350>)
 8004ce8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe fa36 	bl	8003160 <HAL_DMA_Abort_IT>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d016      	beq.n	8004d28 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d04:	4610      	mov	r0, r2
 8004d06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d08:	e00e      	b.n	8004d28 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f8da 	bl	8004ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d10:	e00a      	b.n	8004d28 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f8d6 	bl	8004ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d18:	e006      	b.n	8004d28 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f8d2 	bl	8004ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d26:	e0c3      	b.n	8004eb0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d28:	bf00      	nop
    return;
 8004d2a:	e0c1      	b.n	8004eb0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	f040 80a1 	bne.w	8004e78 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 809b 	beq.w	8004e78 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8095 	beq.w	8004e78 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d04e      	beq.n	8004e10 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004d7c:	8a3b      	ldrh	r3, [r7, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 8098 	beq.w	8004eb4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d88:	8a3a      	ldrh	r2, [r7, #16]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	f080 8092 	bcs.w	8004eb4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	8a3a      	ldrh	r2, [r7, #16]
 8004d94:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d02b      	beq.n	8004df8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dae:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695a      	ldr	r2, [r3, #20]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0201 	bic.w	r2, r2, #1
 8004dbe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695a      	ldr	r2, [r3, #20]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dce:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0210 	bic.w	r2, r2, #16
 8004dec:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fe f979 	bl	80030ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	4619      	mov	r1, r3
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f864 	bl	8004ed6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e0e:	e051      	b.n	8004eb4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d047      	beq.n	8004eb8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004e28:	8a7b      	ldrh	r3, [r7, #18]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d044      	beq.n	8004eb8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e3c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	695a      	ldr	r2, [r3, #20]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0210 	bic.w	r2, r2, #16
 8004e6a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e6c:	8a7b      	ldrh	r3, [r7, #18]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f830 	bl	8004ed6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e76:	e01f      	b.n	8004eb8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d008      	beq.n	8004e94 <HAL_UART_IRQHandler+0x324>
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f8a6 	bl	8004fde <UART_Transmit_IT>
    return;
 8004e92:	e012      	b.n	8004eba <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00d      	beq.n	8004eba <HAL_UART_IRQHandler+0x34a>
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f8e7 	bl	800507c <UART_EndTransmit_IT>
    return;
 8004eae:	e004      	b.n	8004eba <HAL_UART_IRQHandler+0x34a>
    return;
 8004eb0:	bf00      	nop
 8004eb2:	e002      	b.n	8004eba <HAL_UART_IRQHandler+0x34a>
      return;
 8004eb4:	bf00      	nop
 8004eb6:	e000      	b.n	8004eba <HAL_UART_IRQHandler+0x34a>
      return;
 8004eb8:	bf00      	nop
  }
}
 8004eba:	3728      	adds	r7, #40	; 0x28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	08004fb7 	.word	0x08004fb7

08004ec4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr

08004ed6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	460b      	mov	r3, r1
 8004ee0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr

08004eec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	88fa      	ldrh	r2, [r7, #6]
 8004f04:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	88fa      	ldrh	r2, [r7, #6]
 8004f0a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2222      	movs	r2, #34	; 0x22
 8004f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f30:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695a      	ldr	r2, [r3, #20]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0201 	orr.w	r2, r2, #1
 8004f40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0220 	orr.w	r2, r2, #32
 8004f50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bc80      	pop	{r7}
 8004f5c:	4770      	bx	lr

08004f5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f74:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695a      	ldr	r2, [r3, #20]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0201 	bic.w	r2, r2, #1
 8004f84:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d107      	bne.n	8004f9e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0210 	bic.w	r2, r2, #16
 8004f9c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr

08004fb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f7ff ff77 	bl	8004ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fd6:	bf00      	nop
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b21      	cmp	r3, #33	; 0x21
 8004ff0:	d13e      	bne.n	8005070 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffa:	d114      	bne.n	8005026 <UART_Transmit_IT+0x48>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d110      	bne.n	8005026 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005018:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	1c9a      	adds	r2, r3, #2
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	621a      	str	r2, [r3, #32]
 8005024:	e008      	b.n	8005038 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	1c59      	adds	r1, r3, #1
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6211      	str	r1, [r2, #32]
 8005030:	781a      	ldrb	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29b      	uxth	r3, r3
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	4619      	mov	r1, r3
 8005046:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10f      	bne.n	800506c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800505a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800506a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	e000      	b.n	8005072 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005070:	2302      	movs	r3, #2
  }
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr

0800507c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005092:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7fc fdb5 	bl	8001c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b22      	cmp	r3, #34	; 0x22
 80050be:	f040 8099 	bne.w	80051f4 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ca:	d117      	bne.n	80050fc <UART_Receive_IT+0x50>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d113      	bne.n	80050fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050dc:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f4:	1c9a      	adds	r2, r3, #2
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	629a      	str	r2, [r3, #40]	; 0x28
 80050fa:	e026      	b.n	800514a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005100:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005102:	2300      	movs	r3, #0
 8005104:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800510e:	d007      	beq.n	8005120 <UART_Receive_IT+0x74>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10a      	bne.n	800512e <UART_Receive_IT+0x82>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d106      	bne.n	800512e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	b2da      	uxtb	r2, r3
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	e008      	b.n	8005140 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800513a:	b2da      	uxtb	r2, r3
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b29b      	uxth	r3, r3
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	4619      	mov	r1, r3
 8005158:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800515a:	2b00      	cmp	r3, #0
 800515c:	d148      	bne.n	80051f0 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0220 	bic.w	r2, r2, #32
 800516c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800517c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695a      	ldr	r2, [r3, #20]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0201 	bic.w	r2, r2, #1
 800518c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519a:	2b01      	cmp	r3, #1
 800519c:	d123      	bne.n	80051e6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0210 	bic.w	r2, r2, #16
 80051b2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2b10      	cmp	r3, #16
 80051c0:	d10a      	bne.n	80051d8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051dc:	4619      	mov	r1, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff fe79 	bl	8004ed6 <HAL_UARTEx_RxEventCallback>
 80051e4:	e002      	b.n	80051ec <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fc fcdc 	bl	8001ba4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	e002      	b.n	80051f6 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	e000      	b.n	80051f6 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80051f4:	2302      	movs	r3, #2
  }
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800523a:	f023 030c 	bic.w	r3, r3, #12
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	430b      	orrs	r3, r1
 8005246:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699a      	ldr	r2, [r3, #24]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a2c      	ldr	r2, [pc, #176]	; (8005314 <UART_SetConfig+0x114>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d103      	bne.n	8005270 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005268:	f7ff f902 	bl	8004470 <HAL_RCC_GetPCLK2Freq>
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	e002      	b.n	8005276 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005270:	f7ff f8ea 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 8005274:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4613      	mov	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	009a      	lsls	r2, r3, #2
 8005280:	441a      	add	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	fbb2 f3f3 	udiv	r3, r2, r3
 800528c:	4a22      	ldr	r2, [pc, #136]	; (8005318 <UART_SetConfig+0x118>)
 800528e:	fba2 2303 	umull	r2, r3, r2, r3
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	0119      	lsls	r1, r3, #4
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	009a      	lsls	r2, r3, #2
 80052a0:	441a      	add	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80052ac:	4b1a      	ldr	r3, [pc, #104]	; (8005318 <UART_SetConfig+0x118>)
 80052ae:	fba3 0302 	umull	r0, r3, r3, r2
 80052b2:	095b      	lsrs	r3, r3, #5
 80052b4:	2064      	movs	r0, #100	; 0x64
 80052b6:	fb00 f303 	mul.w	r3, r0, r3
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	3332      	adds	r3, #50	; 0x32
 80052c0:	4a15      	ldr	r2, [pc, #84]	; (8005318 <UART_SetConfig+0x118>)
 80052c2:	fba2 2303 	umull	r2, r3, r2, r3
 80052c6:	095b      	lsrs	r3, r3, #5
 80052c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052cc:	4419      	add	r1, r3
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4613      	mov	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	009a      	lsls	r2, r3, #2
 80052d8:	441a      	add	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80052e4:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <UART_SetConfig+0x118>)
 80052e6:	fba3 0302 	umull	r0, r3, r3, r2
 80052ea:	095b      	lsrs	r3, r3, #5
 80052ec:	2064      	movs	r0, #100	; 0x64
 80052ee:	fb00 f303 	mul.w	r3, r0, r3
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	3332      	adds	r3, #50	; 0x32
 80052f8:	4a07      	ldr	r2, [pc, #28]	; (8005318 <UART_SetConfig+0x118>)
 80052fa:	fba2 2303 	umull	r2, r3, r2, r3
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	f003 020f 	and.w	r2, r3, #15
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	440a      	add	r2, r1
 800530a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800530c:	bf00      	nop
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40013800 	.word	0x40013800
 8005318:	51eb851f 	.word	0x51eb851f

0800531c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	4603      	mov	r3, r0
 8005324:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800532a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800532e:	2b84      	cmp	r3, #132	; 0x84
 8005330:	d005      	beq.n	800533e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005332:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4413      	add	r3, r2
 800533a:	3303      	adds	r3, #3
 800533c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800533e:	68fb      	ldr	r3, [r7, #12]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	bc80      	pop	{r7}
 8005348:	4770      	bx	lr

0800534a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005350:	f3ef 8305 	mrs	r3, IPSR
 8005354:	607b      	str	r3, [r7, #4]
  return(result);
 8005356:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005358:	2b00      	cmp	r3, #0
 800535a:	bf14      	ite	ne
 800535c:	2301      	movne	r3, #1
 800535e:	2300      	moveq	r3, #0
 8005360:	b2db      	uxtb	r3, r3
}
 8005362:	4618      	mov	r0, r3
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	bc80      	pop	{r7}
 800536a:	4770      	bx	lr

0800536c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005370:	f001 f8f0 	bl	8006554 <vTaskStartScheduler>
  
  return osOK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	bd80      	pop	{r7, pc}

0800537a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800537a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800537c:	b089      	sub	sp, #36	; 0x24
 800537e:	af04      	add	r7, sp, #16
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d020      	beq.n	80053ce <osThreadCreate+0x54>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01c      	beq.n	80053ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685c      	ldr	r4, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681d      	ldr	r5, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691e      	ldr	r6, [r3, #16]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff ffb8 	bl	800531c <makeFreeRtosPriority>
 80053ac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053b6:	9202      	str	r2, [sp, #8]
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	9100      	str	r1, [sp, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	4632      	mov	r2, r6
 80053c0:	4629      	mov	r1, r5
 80053c2:	4620      	mov	r0, r4
 80053c4:	f000 ff08 	bl	80061d8 <xTaskCreateStatic>
 80053c8:	4603      	mov	r3, r0
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	e01c      	b.n	8005408 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685c      	ldr	r4, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053da:	b29e      	uxth	r6, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff ff9a 	bl	800531c <makeFreeRtosPriority>
 80053e8:	4602      	mov	r2, r0
 80053ea:	f107 030c 	add.w	r3, r7, #12
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	9200      	str	r2, [sp, #0]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	4632      	mov	r2, r6
 80053f6:	4629      	mov	r1, r5
 80053f8:	4620      	mov	r0, r4
 80053fa:	f000 ff49 	bl	8006290 <xTaskCreate>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b01      	cmp	r3, #1
 8005402:	d001      	beq.n	8005408 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005404:	2300      	movs	r3, #0
 8005406:	e000      	b.n	800540a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005408:	68fb      	ldr	r3, [r7, #12]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005412 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b084      	sub	sp, #16
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <osDelay+0x16>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	e000      	b.n	800542a <osDelay+0x18>
 8005428:	2301      	movs	r3, #1
 800542a:	4618      	mov	r0, r3
 800542c:	f001 f85e 	bl	80064ec <vTaskDelay>
  
  return osOK;
 8005430:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800543a:	b590      	push	{r4, r7, lr}
 800543c:	b085      	sub	sp, #20
 800543e:	af02      	add	r7, sp, #8
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d011      	beq.n	8005470 <osMessageCreate+0x36>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00d      	beq.n	8005470 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6818      	ldr	r0, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6859      	ldr	r1, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	2400      	movs	r4, #0
 8005466:	9400      	str	r4, [sp, #0]
 8005468:	f000 f9dc 	bl	8005824 <xQueueGenericCreateStatic>
 800546c:	4603      	mov	r3, r0
 800546e:	e008      	b.n	8005482 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6818      	ldr	r0, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	4619      	mov	r1, r3
 800547c:	f000 fa49 	bl	8005912 <xQueueGenericCreate>
 8005480:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005482:	4618      	mov	r0, r3
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	bd90      	pop	{r4, r7, pc}
	...

0800548c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005498:	2300      	movs	r3, #0
 800549a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <osMessagePut+0x1e>
    ticks = 1;
 80054a6:	2301      	movs	r3, #1
 80054a8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80054aa:	f7ff ff4e 	bl	800534a <inHandlerMode>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d018      	beq.n	80054e6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80054b4:	f107 0210 	add.w	r2, r7, #16
 80054b8:	f107 0108 	add.w	r1, r7, #8
 80054bc:	2300      	movs	r3, #0
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 fb82 	bl	8005bc8 <xQueueGenericSendFromISR>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d001      	beq.n	80054ce <osMessagePut+0x42>
      return osErrorOS;
 80054ca:	23ff      	movs	r3, #255	; 0xff
 80054cc:	e018      	b.n	8005500 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d014      	beq.n	80054fe <osMessagePut+0x72>
 80054d4:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <osMessagePut+0x7c>)
 80054d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	e00b      	b.n	80054fe <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80054e6:	f107 0108 	add.w	r1, r7, #8
 80054ea:	2300      	movs	r3, #0
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 fa6c 	bl	80059cc <xQueueGenericSend>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d001      	beq.n	80054fe <osMessagePut+0x72>
      return osErrorOS;
 80054fa:	23ff      	movs	r3, #255	; 0xff
 80054fc:	e000      	b.n	8005500 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	e000ed04 	.word	0xe000ed04

0800550c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800550c:	b590      	push	{r4, r7, lr}
 800550e:	b08b      	sub	sp, #44	; 0x2c
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10a      	bne.n	800553c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005526:	2380      	movs	r3, #128	; 0x80
 8005528:	617b      	str	r3, [r7, #20]
    return event;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	461c      	mov	r4, r3
 800552e:	f107 0314 	add.w	r3, r7, #20
 8005532:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800553a:	e054      	b.n	80055e6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800553c:	2300      	movs	r3, #0
 800553e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554a:	d103      	bne.n	8005554 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800554c:	f04f 33ff 	mov.w	r3, #4294967295
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
 8005552:	e009      	b.n	8005568 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d006      	beq.n	8005568 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <osMessageGet+0x5c>
      ticks = 1;
 8005564:	2301      	movs	r3, #1
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005568:	f7ff feef 	bl	800534a <inHandlerMode>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d01c      	beq.n	80055ac <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005572:	f107 0220 	add.w	r2, r7, #32
 8005576:	f107 0314 	add.w	r3, r7, #20
 800557a:	3304      	adds	r3, #4
 800557c:	4619      	mov	r1, r3
 800557e:	68b8      	ldr	r0, [r7, #8]
 8005580:	f000 fc9a 	bl	8005eb8 <xQueueReceiveFromISR>
 8005584:	4603      	mov	r3, r0
 8005586:	2b01      	cmp	r3, #1
 8005588:	d102      	bne.n	8005590 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800558a:	2310      	movs	r3, #16
 800558c:	617b      	str	r3, [r7, #20]
 800558e:	e001      	b.n	8005594 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01d      	beq.n	80055d6 <osMessageGet+0xca>
 800559a:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <osMessageGet+0xe4>)
 800559c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	e014      	b.n	80055d6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80055ac:	f107 0314 	add.w	r3, r7, #20
 80055b0:	3304      	adds	r3, #4
 80055b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b4:	4619      	mov	r1, r3
 80055b6:	68b8      	ldr	r0, [r7, #8]
 80055b8:	f000 fb9e 	bl	8005cf8 <xQueueReceive>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d102      	bne.n	80055c8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80055c2:	2310      	movs	r3, #16
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e006      	b.n	80055d6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <osMessageGet+0xc6>
 80055ce:	2300      	movs	r3, #0
 80055d0:	e000      	b.n	80055d4 <osMessageGet+0xc8>
 80055d2:	2340      	movs	r3, #64	; 0x40
 80055d4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	461c      	mov	r4, r3
 80055da:	f107 0314 	add.w	r3, r7, #20
 80055de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	372c      	adds	r7, #44	; 0x2c
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd90      	pop	{r4, r7, pc}
 80055ee:	bf00      	nop
 80055f0:	e000ed04 	.word	0xe000ed04

080055f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f103 0208 	add.w	r2, r3, #8
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f04f 32ff 	mov.w	r2, #4294967295
 800560c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f103 0208 	add.w	r2, r3, #8
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f103 0208 	add.w	r2, r3, #8
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr

08005632 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	bc80      	pop	{r7}
 8005648:	4770      	bx	lr

0800564a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800564a:	b480      	push	{r7}
 800564c:	b085      	sub	sp, #20
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	601a      	str	r2, [r3, #0]
}
 8005686:	bf00      	nop
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	bc80      	pop	{r7}
 800568e:	4770      	bx	lr

08005690 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a6:	d103      	bne.n	80056b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	e00c      	b.n	80056ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3308      	adds	r3, #8
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	e002      	b.n	80056be <vListInsert+0x2e>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d2f6      	bcs.n	80056b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	601a      	str	r2, [r3, #0]
}
 80056f6:	bf00      	nop
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr

08005700 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6892      	ldr	r2, [r2, #8]
 8005716:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6852      	ldr	r2, [r2, #4]
 8005720:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	429a      	cmp	r2, r3
 800572a:	d103      	bne.n	8005734 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	1e5a      	subs	r2, r3, #1
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	4770      	bx	lr
	...

08005754 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10a      	bne.n	800577e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800577a:	bf00      	nop
 800577c:	e7fe      	b.n	800577c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800577e:	f001 fced 	bl	800715c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578a:	68f9      	ldr	r1, [r7, #12]
 800578c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800578e:	fb01 f303 	mul.w	r3, r1, r3
 8005792:	441a      	add	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ae:	3b01      	subs	r3, #1
 80057b0:	68f9      	ldr	r1, [r7, #12]
 80057b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057b4:	fb01 f303 	mul.w	r3, r1, r3
 80057b8:	441a      	add	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	22ff      	movs	r2, #255	; 0xff
 80057c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	22ff      	movs	r2, #255	; 0xff
 80057ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d114      	bne.n	80057fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01a      	beq.n	8005812 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3310      	adds	r3, #16
 80057e0:	4618      	mov	r0, r3
 80057e2:	f001 f8fd 	bl	80069e0 <xTaskRemoveFromEventList>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d012      	beq.n	8005812 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80057ec:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <xQueueGenericReset+0xcc>)
 80057ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	e009      	b.n	8005812 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3310      	adds	r3, #16
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff fef6 	bl	80055f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3324      	adds	r3, #36	; 0x24
 800580c:	4618      	mov	r0, r3
 800580e:	f7ff fef1 	bl	80055f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005812:	f001 fcd3 	bl	80071bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005816:	2301      	movs	r3, #1
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	e000ed04 	.word	0xe000ed04

08005824 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08e      	sub	sp, #56	; 0x38
 8005828:	af02      	add	r7, sp, #8
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800584a:	bf00      	nop
 800584c:	e7fe      	b.n	800584c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005866:	bf00      	nop
 8005868:	e7fe      	b.n	8005868 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <xQueueGenericCreateStatic+0x52>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <xQueueGenericCreateStatic+0x56>
 8005876:	2301      	movs	r3, #1
 8005878:	e000      	b.n	800587c <xQueueGenericCreateStatic+0x58>
 800587a:	2300      	movs	r3, #0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	623b      	str	r3, [r7, #32]
}
 8005892:	bf00      	nop
 8005894:	e7fe      	b.n	8005894 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d102      	bne.n	80058a2 <xQueueGenericCreateStatic+0x7e>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <xQueueGenericCreateStatic+0x82>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <xQueueGenericCreateStatic+0x84>
 80058a6:	2300      	movs	r3, #0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10a      	bne.n	80058c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	61fb      	str	r3, [r7, #28]
}
 80058be:	bf00      	nop
 80058c0:	e7fe      	b.n	80058c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058c2:	2348      	movs	r3, #72	; 0x48
 80058c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b48      	cmp	r3, #72	; 0x48
 80058ca:	d00a      	beq.n	80058e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	61bb      	str	r3, [r7, #24]
}
 80058de:	bf00      	nop
 80058e0:	e7fe      	b.n	80058e0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80058e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00d      	beq.n	8005908 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80058f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	4613      	mov	r3, r2
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	68b9      	ldr	r1, [r7, #8]
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 f843 	bl	800598e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800590a:	4618      	mov	r0, r3
 800590c:	3730      	adds	r7, #48	; 0x30
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005912:	b580      	push	{r7, lr}
 8005914:	b08a      	sub	sp, #40	; 0x28
 8005916:	af02      	add	r7, sp, #8
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	4613      	mov	r3, r2
 800591e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10a      	bne.n	800593c <xQueueGenericCreate+0x2a>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	613b      	str	r3, [r7, #16]
}
 8005938:	bf00      	nop
 800593a:	e7fe      	b.n	800593a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d102      	bne.n	8005948 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005942:	2300      	movs	r3, #0
 8005944:	61fb      	str	r3, [r7, #28]
 8005946:	e004      	b.n	8005952 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	fb02 f303 	mul.w	r3, r2, r3
 8005950:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	3348      	adds	r3, #72	; 0x48
 8005956:	4618      	mov	r0, r3
 8005958:	f001 fd00 	bl	800735c <pvPortMalloc>
 800595c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00f      	beq.n	8005984 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	3348      	adds	r3, #72	; 0x48
 8005968:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005972:	79fa      	ldrb	r2, [r7, #7]
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	4613      	mov	r3, r2
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	68b9      	ldr	r1, [r7, #8]
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 f805 	bl	800598e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005984:	69bb      	ldr	r3, [r7, #24]
	}
 8005986:	4618      	mov	r0, r3
 8005988:	3720      	adds	r7, #32
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	607a      	str	r2, [r7, #4]
 800599a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d103      	bne.n	80059aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	e002      	b.n	80059b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059bc:	2101      	movs	r1, #1
 80059be:	69b8      	ldr	r0, [r7, #24]
 80059c0:	f7ff fec8 	bl	8005754 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80059c4:	bf00      	nop
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08e      	sub	sp, #56	; 0x38
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059da:	2300      	movs	r3, #0
 80059dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <xQueueGenericSend+0x32>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d103      	bne.n	8005a0c <xQueueGenericSend+0x40>
 8005a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <xQueueGenericSend+0x44>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <xQueueGenericSend+0x46>
 8005a10:	2300      	movs	r3, #0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10a      	bne.n	8005a2c <xQueueGenericSend+0x60>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a28:	bf00      	nop
 8005a2a:	e7fe      	b.n	8005a2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d103      	bne.n	8005a3a <xQueueGenericSend+0x6e>
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <xQueueGenericSend+0x72>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <xQueueGenericSend+0x74>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10a      	bne.n	8005a5a <xQueueGenericSend+0x8e>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	623b      	str	r3, [r7, #32]
}
 8005a56:	bf00      	nop
 8005a58:	e7fe      	b.n	8005a58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a5a:	f001 f981 	bl	8006d60 <xTaskGetSchedulerState>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d102      	bne.n	8005a6a <xQueueGenericSend+0x9e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <xQueueGenericSend+0xa2>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <xQueueGenericSend+0xa4>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10a      	bne.n	8005a8a <xQueueGenericSend+0xbe>
	__asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	61fb      	str	r3, [r7, #28]
}
 8005a86:	bf00      	nop
 8005a88:	e7fe      	b.n	8005a88 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a8a:	f001 fb67 	bl	800715c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d302      	bcc.n	8005aa0 <xQueueGenericSend+0xd4>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d129      	bne.n	8005af4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	68b9      	ldr	r1, [r7, #8]
 8005aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aa6:	f000 fa87 	bl	8005fb8 <prvCopyDataToQueue>
 8005aaa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d010      	beq.n	8005ad6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab6:	3324      	adds	r3, #36	; 0x24
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 ff91 	bl	80069e0 <xTaskRemoveFromEventList>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d013      	beq.n	8005aec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ac4:	4b3f      	ldr	r3, [pc, #252]	; (8005bc4 <xQueueGenericSend+0x1f8>)
 8005ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	e00a      	b.n	8005aec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005adc:	4b39      	ldr	r3, [pc, #228]	; (8005bc4 <xQueueGenericSend+0x1f8>)
 8005ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005aec:	f001 fb66 	bl	80071bc <vPortExitCritical>
				return pdPASS;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e063      	b.n	8005bbc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d103      	bne.n	8005b02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005afa:	f001 fb5f 	bl	80071bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005afe:	2300      	movs	r3, #0
 8005b00:	e05c      	b.n	8005bbc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d106      	bne.n	8005b16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b08:	f107 0314 	add.w	r3, r7, #20
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 ffc9 	bl	8006aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b12:	2301      	movs	r3, #1
 8005b14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b16:	f001 fb51 	bl	80071bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b1a:	f000 fd7b 	bl	8006614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b1e:	f001 fb1d 	bl	800715c <vPortEnterCritical>
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b28:	b25b      	sxtb	r3, r3
 8005b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2e:	d103      	bne.n	8005b38 <xQueueGenericSend+0x16c>
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b3e:	b25b      	sxtb	r3, r3
 8005b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b44:	d103      	bne.n	8005b4e <xQueueGenericSend+0x182>
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b4e:	f001 fb35 	bl	80071bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b52:	1d3a      	adds	r2, r7, #4
 8005b54:	f107 0314 	add.w	r3, r7, #20
 8005b58:	4611      	mov	r1, r2
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 ffb8 	bl	8006ad0 <xTaskCheckForTimeOut>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d124      	bne.n	8005bb0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b68:	f000 fb1e 	bl	80061a8 <prvIsQueueFull>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d018      	beq.n	8005ba4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	3310      	adds	r3, #16
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	4611      	mov	r1, r2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 ff0c 	bl	8006998 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b82:	f000 faa9 	bl	80060d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b86:	f000 fd53 	bl	8006630 <xTaskResumeAll>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f47f af7c 	bne.w	8005a8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005b92:	4b0c      	ldr	r3, [pc, #48]	; (8005bc4 <xQueueGenericSend+0x1f8>)
 8005b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	e772      	b.n	8005a8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ba6:	f000 fa97 	bl	80060d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005baa:	f000 fd41 	bl	8006630 <xTaskResumeAll>
 8005bae:	e76c      	b.n	8005a8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bb2:	f000 fa91 	bl	80060d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bb6:	f000 fd3b 	bl	8006630 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005bba:	2300      	movs	r3, #0
		}
	}
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3738      	adds	r7, #56	; 0x38
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	e000ed04 	.word	0xe000ed04

08005bc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08e      	sub	sp, #56	; 0x38
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
 8005bd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10a      	bne.n	8005bf6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d103      	bne.n	8005c04 <xQueueGenericSendFromISR+0x3c>
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <xQueueGenericSendFromISR+0x40>
 8005c04:	2301      	movs	r3, #1
 8005c06:	e000      	b.n	8005c0a <xQueueGenericSendFromISR+0x42>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10a      	bne.n	8005c24 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	623b      	str	r3, [r7, #32]
}
 8005c20:	bf00      	nop
 8005c22:	e7fe      	b.n	8005c22 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d103      	bne.n	8005c32 <xQueueGenericSendFromISR+0x6a>
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <xQueueGenericSendFromISR+0x6e>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <xQueueGenericSendFromISR+0x70>
 8005c36:	2300      	movs	r3, #0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10a      	bne.n	8005c52 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	61fb      	str	r3, [r7, #28]
}
 8005c4e:	bf00      	nop
 8005c50:	e7fe      	b.n	8005c50 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c52:	f001 fb45 	bl	80072e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c56:	f3ef 8211 	mrs	r2, BASEPRI
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	61ba      	str	r2, [r7, #24]
 8005c6c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c6e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d302      	bcc.n	8005c84 <xQueueGenericSendFromISR+0xbc>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d12c      	bne.n	8005cde <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c94:	f000 f990 	bl	8005fb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c98:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca0:	d112      	bne.n	8005cc8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d016      	beq.n	8005cd8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	3324      	adds	r3, #36	; 0x24
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 fe96 	bl	80069e0 <xTaskRemoveFromEventList>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00e      	beq.n	8005cd8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00b      	beq.n	8005cd8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	e007      	b.n	8005cd8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005cc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ccc:	3301      	adds	r3, #1
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	b25a      	sxtb	r2, r3
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005cdc:	e001      	b.n	8005ce2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005cec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3738      	adds	r7, #56	; 0x38
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08c      	sub	sp, #48	; 0x30
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d04:	2300      	movs	r3, #0
 8005d06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10a      	bne.n	8005d28 <xQueueReceive+0x30>
	__asm volatile
 8005d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	623b      	str	r3, [r7, #32]
}
 8005d24:	bf00      	nop
 8005d26:	e7fe      	b.n	8005d26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <xQueueReceive+0x3e>
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <xQueueReceive+0x42>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <xQueueReceive+0x44>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10a      	bne.n	8005d56 <xQueueReceive+0x5e>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	61fb      	str	r3, [r7, #28]
}
 8005d52:	bf00      	nop
 8005d54:	e7fe      	b.n	8005d54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d56:	f001 f803 	bl	8006d60 <xTaskGetSchedulerState>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d102      	bne.n	8005d66 <xQueueReceive+0x6e>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <xQueueReceive+0x72>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <xQueueReceive+0x74>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <xQueueReceive+0x8e>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	61bb      	str	r3, [r7, #24]
}
 8005d82:	bf00      	nop
 8005d84:	e7fe      	b.n	8005d84 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d86:	f001 f9e9 	bl	800715c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d01f      	beq.n	8005dd6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d96:	68b9      	ldr	r1, [r7, #8]
 8005d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d9a:	f000 f977 	bl	800608c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	1e5a      	subs	r2, r3, #1
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00f      	beq.n	8005dce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	3310      	adds	r3, #16
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fe14 	bl	80069e0 <xTaskRemoveFromEventList>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d007      	beq.n	8005dce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005dbe:	4b3d      	ldr	r3, [pc, #244]	; (8005eb4 <xQueueReceive+0x1bc>)
 8005dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005dce:	f001 f9f5 	bl	80071bc <vPortExitCritical>
				return pdPASS;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e069      	b.n	8005eaa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d103      	bne.n	8005de4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ddc:	f001 f9ee 	bl	80071bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005de0:	2300      	movs	r3, #0
 8005de2:	e062      	b.n	8005eaa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d106      	bne.n	8005df8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dea:	f107 0310 	add.w	r3, r7, #16
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fe58 	bl	8006aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005df4:	2301      	movs	r3, #1
 8005df6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005df8:	f001 f9e0 	bl	80071bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dfc:	f000 fc0a 	bl	8006614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e00:	f001 f9ac 	bl	800715c <vPortEnterCritical>
 8005e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e0a:	b25b      	sxtb	r3, r3
 8005e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e10:	d103      	bne.n	8005e1a <xQueueReceive+0x122>
 8005e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e20:	b25b      	sxtb	r3, r3
 8005e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e26:	d103      	bne.n	8005e30 <xQueueReceive+0x138>
 8005e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e30:	f001 f9c4 	bl	80071bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e34:	1d3a      	adds	r2, r7, #4
 8005e36:	f107 0310 	add.w	r3, r7, #16
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fe47 	bl	8006ad0 <xTaskCheckForTimeOut>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d123      	bne.n	8005e90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e4a:	f000 f997 	bl	800617c <prvIsQueueEmpty>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d017      	beq.n	8005e84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	3324      	adds	r3, #36	; 0x24
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fd9b 	bl	8006998 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e64:	f000 f938 	bl	80060d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e68:	f000 fbe2 	bl	8006630 <xTaskResumeAll>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d189      	bne.n	8005d86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005e72:	4b10      	ldr	r3, [pc, #64]	; (8005eb4 <xQueueReceive+0x1bc>)
 8005e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	e780      	b.n	8005d86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e86:	f000 f927 	bl	80060d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e8a:	f000 fbd1 	bl	8006630 <xTaskResumeAll>
 8005e8e:	e77a      	b.n	8005d86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e92:	f000 f921 	bl	80060d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e96:	f000 fbcb 	bl	8006630 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e9c:	f000 f96e 	bl	800617c <prvIsQueueEmpty>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f43f af6f 	beq.w	8005d86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ea8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3730      	adds	r7, #48	; 0x30
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	e000ed04 	.word	0xe000ed04

08005eb8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08e      	sub	sp, #56	; 0x38
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10a      	bne.n	8005ee4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	623b      	str	r3, [r7, #32]
}
 8005ee0:	bf00      	nop
 8005ee2:	e7fe      	b.n	8005ee2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d103      	bne.n	8005ef2 <xQueueReceiveFromISR+0x3a>
 8005eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <xQueueReceiveFromISR+0x3e>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <xQueueReceiveFromISR+0x40>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10a      	bne.n	8005f12 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	61fb      	str	r3, [r7, #28]
}
 8005f0e:	bf00      	nop
 8005f10:	e7fe      	b.n	8005f10 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f12:	f001 f9e5 	bl	80072e0 <vPortValidateInterruptPriority>
	__asm volatile
 8005f16:	f3ef 8211 	mrs	r2, BASEPRI
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	61ba      	str	r2, [r7, #24]
 8005f2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005f2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d02f      	beq.n	8005f9e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f4c:	f000 f89e 	bl	800608c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f52:	1e5a      	subs	r2, r3, #1
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005f58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f60:	d112      	bne.n	8005f88 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d016      	beq.n	8005f98 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6c:	3310      	adds	r3, #16
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 fd36 	bl	80069e0 <xTaskRemoveFromEventList>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00e      	beq.n	8005f98 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00b      	beq.n	8005f98 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	e007      	b.n	8005f98 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	b25a      	sxtb	r2, r3
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9c:	e001      	b.n	8005fa2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8005fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f383 8811 	msr	BASEPRI, r3
}
 8005fac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3738      	adds	r7, #56	; 0x38
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10d      	bne.n	8005ff2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d14d      	bne.n	800607a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 feda 	bl	8006d9c <xTaskPriorityDisinherit>
 8005fe8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	605a      	str	r2, [r3, #4]
 8005ff0:	e043      	b.n	800607a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d119      	bne.n	800602c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6898      	ldr	r0, [r3, #8]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	461a      	mov	r2, r3
 8006002:	68b9      	ldr	r1, [r7, #8]
 8006004:	f001 fbac 	bl	8007760 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	441a      	add	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	429a      	cmp	r2, r3
 8006020:	d32b      	bcc.n	800607a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	609a      	str	r2, [r3, #8]
 800602a:	e026      	b.n	800607a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	68d8      	ldr	r0, [r3, #12]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006034:	461a      	mov	r2, r3
 8006036:	68b9      	ldr	r1, [r7, #8]
 8006038:	f001 fb92 	bl	8007760 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	425b      	negs	r3, r3
 8006046:	441a      	add	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	429a      	cmp	r2, r3
 8006056:	d207      	bcs.n	8006068 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006060:	425b      	negs	r3, r3
 8006062:	441a      	add	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d105      	bne.n	800607a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	3b01      	subs	r3, #1
 8006078:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006082:	697b      	ldr	r3, [r7, #20]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	d018      	beq.n	80060d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	441a      	add	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d303      	bcc.n	80060c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68d9      	ldr	r1, [r3, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c8:	461a      	mov	r2, r3
 80060ca:	6838      	ldr	r0, [r7, #0]
 80060cc:	f001 fb48 	bl	8007760 <memcpy>
	}
}
 80060d0:	bf00      	nop
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80060e0:	f001 f83c 	bl	800715c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060ec:	e011      	b.n	8006112 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d012      	beq.n	800611c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	3324      	adds	r3, #36	; 0x24
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 fc70 	bl	80069e0 <xTaskRemoveFromEventList>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006106:	f000 fd45 	bl	8006b94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	3b01      	subs	r3, #1
 800610e:	b2db      	uxtb	r3, r3
 8006110:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006116:	2b00      	cmp	r3, #0
 8006118:	dce9      	bgt.n	80060ee <prvUnlockQueue+0x16>
 800611a:	e000      	b.n	800611e <prvUnlockQueue+0x46>
					break;
 800611c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	22ff      	movs	r2, #255	; 0xff
 8006122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006126:	f001 f849 	bl	80071bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800612a:	f001 f817 	bl	800715c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006134:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006136:	e011      	b.n	800615c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d012      	beq.n	8006166 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3310      	adds	r3, #16
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fc4b 	bl	80069e0 <xTaskRemoveFromEventList>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006150:	f000 fd20 	bl	8006b94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006154:	7bbb      	ldrb	r3, [r7, #14]
 8006156:	3b01      	subs	r3, #1
 8006158:	b2db      	uxtb	r3, r3
 800615a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800615c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006160:	2b00      	cmp	r3, #0
 8006162:	dce9      	bgt.n	8006138 <prvUnlockQueue+0x60>
 8006164:	e000      	b.n	8006168 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006166:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	22ff      	movs	r2, #255	; 0xff
 800616c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006170:	f001 f824 	bl	80071bc <vPortExitCritical>
}
 8006174:	bf00      	nop
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006184:	f000 ffea 	bl	800715c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618c:	2b00      	cmp	r3, #0
 800618e:	d102      	bne.n	8006196 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006190:	2301      	movs	r3, #1
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	e001      	b.n	800619a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800619a:	f001 f80f 	bl	80071bc <vPortExitCritical>

	return xReturn;
 800619e:	68fb      	ldr	r3, [r7, #12]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061b0:	f000 ffd4 	bl	800715c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061bc:	429a      	cmp	r2, r3
 80061be:	d102      	bne.n	80061c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80061c0:	2301      	movs	r3, #1
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	e001      	b.n	80061ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061ca:	f000 fff7 	bl	80071bc <vPortExitCritical>

	return xReturn;
 80061ce:	68fb      	ldr	r3, [r7, #12]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08e      	sub	sp, #56	; 0x38
 80061dc:	af04      	add	r7, sp, #16
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <xTaskCreateStatic+0x2a>
	__asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	623b      	str	r3, [r7, #32]
}
 80061fe:	bf00      	nop
 8006200:	e7fe      	b.n	8006200 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10a      	bne.n	800621e <xTaskCreateStatic+0x46>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	61fb      	str	r3, [r7, #28]
}
 800621a:	bf00      	nop
 800621c:	e7fe      	b.n	800621c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800621e:	2354      	movs	r3, #84	; 0x54
 8006220:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	2b54      	cmp	r3, #84	; 0x54
 8006226:	d00a      	beq.n	800623e <xTaskCreateStatic+0x66>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	61bb      	str	r3, [r7, #24]
}
 800623a:	bf00      	nop
 800623c:	e7fe      	b.n	800623c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01e      	beq.n	8006282 <xTaskCreateStatic+0xaa>
 8006244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006246:	2b00      	cmp	r3, #0
 8006248:	d01b      	beq.n	8006282 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800624a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006252:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	2202      	movs	r2, #2
 8006258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800625c:	2300      	movs	r3, #0
 800625e:	9303      	str	r3, [sp, #12]
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	9302      	str	r3, [sp, #8]
 8006264:	f107 0314 	add.w	r3, r7, #20
 8006268:	9301      	str	r3, [sp, #4]
 800626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	68b9      	ldr	r1, [r7, #8]
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 f850 	bl	800631a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800627a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800627c:	f000 f8cc 	bl	8006418 <prvAddNewTaskToReadyList>
 8006280:	e001      	b.n	8006286 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006282:	2300      	movs	r3, #0
 8006284:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006286:	697b      	ldr	r3, [r7, #20]
	}
 8006288:	4618      	mov	r0, r3
 800628a:	3728      	adds	r7, #40	; 0x28
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08c      	sub	sp, #48	; 0x30
 8006294:	af04      	add	r7, sp, #16
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	603b      	str	r3, [r7, #0]
 800629c:	4613      	mov	r3, r2
 800629e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062a0:	88fb      	ldrh	r3, [r7, #6]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4618      	mov	r0, r3
 80062a6:	f001 f859 	bl	800735c <pvPortMalloc>
 80062aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00e      	beq.n	80062d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80062b2:	2054      	movs	r0, #84	; 0x54
 80062b4:	f001 f852 	bl	800735c <pvPortMalloc>
 80062b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	631a      	str	r2, [r3, #48]	; 0x30
 80062c6:	e005      	b.n	80062d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062c8:	6978      	ldr	r0, [r7, #20]
 80062ca:	f001 f90b 	bl	80074e4 <vPortFree>
 80062ce:	e001      	b.n	80062d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062d0:	2300      	movs	r3, #0
 80062d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d017      	beq.n	800630a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062e2:	88fa      	ldrh	r2, [r7, #6]
 80062e4:	2300      	movs	r3, #0
 80062e6:	9303      	str	r3, [sp, #12]
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	9302      	str	r3, [sp, #8]
 80062ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ee:	9301      	str	r3, [sp, #4]
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	68b9      	ldr	r1, [r7, #8]
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 f80e 	bl	800631a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062fe:	69f8      	ldr	r0, [r7, #28]
 8006300:	f000 f88a 	bl	8006418 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006304:	2301      	movs	r3, #1
 8006306:	61bb      	str	r3, [r7, #24]
 8006308:	e002      	b.n	8006310 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800630a:	f04f 33ff 	mov.w	r3, #4294967295
 800630e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006310:	69bb      	ldr	r3, [r7, #24]
	}
 8006312:	4618      	mov	r0, r3
 8006314:	3720      	adds	r7, #32
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b088      	sub	sp, #32
 800631e:	af00      	add	r7, sp, #0
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
 8006326:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006332:	3b01      	subs	r3, #1
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	f023 0307 	bic.w	r3, r3, #7
 8006340:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00a      	beq.n	8006362 <prvInitialiseNewTask+0x48>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	617b      	str	r3, [r7, #20]
}
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006362:	2300      	movs	r3, #0
 8006364:	61fb      	str	r3, [r7, #28]
 8006366:	e012      	b.n	800638e <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	4413      	add	r3, r2
 800636e:	7819      	ldrb	r1, [r3, #0]
 8006370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	4413      	add	r3, r2
 8006376:	3334      	adds	r3, #52	; 0x34
 8006378:	460a      	mov	r2, r1
 800637a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d006      	beq.n	8006396 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	3301      	adds	r3, #1
 800638c:	61fb      	str	r3, [r7, #28]
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	2b0f      	cmp	r3, #15
 8006392:	d9e9      	bls.n	8006368 <prvInitialiseNewTask+0x4e>
 8006394:	e000      	b.n	8006398 <prvInitialiseNewTask+0x7e>
		{
			break;
 8006396:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	2b06      	cmp	r3, #6
 80063a4:	d901      	bls.n	80063aa <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063a6:	2306      	movs	r3, #6
 80063a8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063b4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	2200      	movs	r2, #0
 80063ba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	3304      	adds	r3, #4
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7ff f936 	bl	8005632 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	3318      	adds	r3, #24
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff f931 	bl	8005632 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	f1c3 0207 	rsb	r2, r3, #7
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063e4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	2200      	movs	r2, #0
 80063ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063f4:	683a      	ldr	r2, [r7, #0]
 80063f6:	68f9      	ldr	r1, [r7, #12]
 80063f8:	69b8      	ldr	r0, [r7, #24]
 80063fa:	f000 fdbb 	bl	8006f74 <pxPortInitialiseStack>
 80063fe:	4602      	mov	r2, r0
 8006400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006402:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800640a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800640e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006410:	bf00      	nop
 8006412:	3720      	adds	r7, #32
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006420:	f000 fe9c 	bl	800715c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006424:	4b2a      	ldr	r3, [pc, #168]	; (80064d0 <prvAddNewTaskToReadyList+0xb8>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3301      	adds	r3, #1
 800642a:	4a29      	ldr	r2, [pc, #164]	; (80064d0 <prvAddNewTaskToReadyList+0xb8>)
 800642c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800642e:	4b29      	ldr	r3, [pc, #164]	; (80064d4 <prvAddNewTaskToReadyList+0xbc>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d109      	bne.n	800644a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006436:	4a27      	ldr	r2, [pc, #156]	; (80064d4 <prvAddNewTaskToReadyList+0xbc>)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800643c:	4b24      	ldr	r3, [pc, #144]	; (80064d0 <prvAddNewTaskToReadyList+0xb8>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d110      	bne.n	8006466 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006444:	f000 fbca 	bl	8006bdc <prvInitialiseTaskLists>
 8006448:	e00d      	b.n	8006466 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800644a:	4b23      	ldr	r3, [pc, #140]	; (80064d8 <prvAddNewTaskToReadyList+0xc0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d109      	bne.n	8006466 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006452:	4b20      	ldr	r3, [pc, #128]	; (80064d4 <prvAddNewTaskToReadyList+0xbc>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	429a      	cmp	r2, r3
 800645e:	d802      	bhi.n	8006466 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006460:	4a1c      	ldr	r2, [pc, #112]	; (80064d4 <prvAddNewTaskToReadyList+0xbc>)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006466:	4b1d      	ldr	r3, [pc, #116]	; (80064dc <prvAddNewTaskToReadyList+0xc4>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3301      	adds	r3, #1
 800646c:	4a1b      	ldr	r2, [pc, #108]	; (80064dc <prvAddNewTaskToReadyList+0xc4>)
 800646e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006474:	2201      	movs	r2, #1
 8006476:	409a      	lsls	r2, r3
 8006478:	4b19      	ldr	r3, [pc, #100]	; (80064e0 <prvAddNewTaskToReadyList+0xc8>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4313      	orrs	r3, r2
 800647e:	4a18      	ldr	r2, [pc, #96]	; (80064e0 <prvAddNewTaskToReadyList+0xc8>)
 8006480:	6013      	str	r3, [r2, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006486:	4613      	mov	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4a15      	ldr	r2, [pc, #84]	; (80064e4 <prvAddNewTaskToReadyList+0xcc>)
 8006490:	441a      	add	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3304      	adds	r3, #4
 8006496:	4619      	mov	r1, r3
 8006498:	4610      	mov	r0, r2
 800649a:	f7ff f8d6 	bl	800564a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800649e:	f000 fe8d 	bl	80071bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064a2:	4b0d      	ldr	r3, [pc, #52]	; (80064d8 <prvAddNewTaskToReadyList+0xc0>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00e      	beq.n	80064c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064aa:	4b0a      	ldr	r3, [pc, #40]	; (80064d4 <prvAddNewTaskToReadyList+0xbc>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d207      	bcs.n	80064c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064b8:	4b0b      	ldr	r3, [pc, #44]	; (80064e8 <prvAddNewTaskToReadyList+0xd0>)
 80064ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064c8:	bf00      	nop
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	20003778 	.word	0x20003778
 80064d4:	20003678 	.word	0x20003678
 80064d8:	20003784 	.word	0x20003784
 80064dc:	20003794 	.word	0x20003794
 80064e0:	20003780 	.word	0x20003780
 80064e4:	2000367c 	.word	0x2000367c
 80064e8:	e000ed04 	.word	0xe000ed04

080064ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d017      	beq.n	800652e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064fe:	4b13      	ldr	r3, [pc, #76]	; (800654c <vTaskDelay+0x60>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <vTaskDelay+0x30>
	__asm volatile
 8006506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	60bb      	str	r3, [r7, #8]
}
 8006518:	bf00      	nop
 800651a:	e7fe      	b.n	800651a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800651c:	f000 f87a 	bl	8006614 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006520:	2100      	movs	r1, #0
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fcc0 	bl	8006ea8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006528:	f000 f882 	bl	8006630 <xTaskResumeAll>
 800652c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d107      	bne.n	8006544 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006534:	4b06      	ldr	r3, [pc, #24]	; (8006550 <vTaskDelay+0x64>)
 8006536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006544:	bf00      	nop
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	200037a0 	.word	0x200037a0
 8006550:	e000ed04 	.word	0xe000ed04

08006554 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08a      	sub	sp, #40	; 0x28
 8006558:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800655a:	2300      	movs	r3, #0
 800655c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800655e:	2300      	movs	r3, #0
 8006560:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006562:	463a      	mov	r2, r7
 8006564:	1d39      	adds	r1, r7, #4
 8006566:	f107 0308 	add.w	r3, r7, #8
 800656a:	4618      	mov	r0, r3
 800656c:	f7fb f9d4 	bl	8001918 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	9202      	str	r2, [sp, #8]
 8006578:	9301      	str	r3, [sp, #4]
 800657a:	2300      	movs	r3, #0
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	2300      	movs	r3, #0
 8006580:	460a      	mov	r2, r1
 8006582:	491e      	ldr	r1, [pc, #120]	; (80065fc <vTaskStartScheduler+0xa8>)
 8006584:	481e      	ldr	r0, [pc, #120]	; (8006600 <vTaskStartScheduler+0xac>)
 8006586:	f7ff fe27 	bl	80061d8 <xTaskCreateStatic>
 800658a:	4603      	mov	r3, r0
 800658c:	4a1d      	ldr	r2, [pc, #116]	; (8006604 <vTaskStartScheduler+0xb0>)
 800658e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006590:	4b1c      	ldr	r3, [pc, #112]	; (8006604 <vTaskStartScheduler+0xb0>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006598:	2301      	movs	r3, #1
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	e001      	b.n	80065a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d116      	bne.n	80065d6 <vTaskStartScheduler+0x82>
	__asm volatile
 80065a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	613b      	str	r3, [r7, #16]
}
 80065ba:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065bc:	4b12      	ldr	r3, [pc, #72]	; (8006608 <vTaskStartScheduler+0xb4>)
 80065be:	f04f 32ff 	mov.w	r2, #4294967295
 80065c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065c4:	4b11      	ldr	r3, [pc, #68]	; (800660c <vTaskStartScheduler+0xb8>)
 80065c6:	2201      	movs	r2, #1
 80065c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80065ca:	4b11      	ldr	r3, [pc, #68]	; (8006610 <vTaskStartScheduler+0xbc>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065d0:	f000 fd52 	bl	8007078 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065d4:	e00e      	b.n	80065f4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065dc:	d10a      	bne.n	80065f4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	60fb      	str	r3, [r7, #12]
}
 80065f0:	bf00      	nop
 80065f2:	e7fe      	b.n	80065f2 <vTaskStartScheduler+0x9e>
}
 80065f4:	bf00      	nop
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	0800acec 	.word	0x0800acec
 8006600:	08006bad 	.word	0x08006bad
 8006604:	2000379c 	.word	0x2000379c
 8006608:	20003798 	.word	0x20003798
 800660c:	20003784 	.word	0x20003784
 8006610:	2000377c 	.word	0x2000377c

08006614 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006614:	b480      	push	{r7}
 8006616:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006618:	4b04      	ldr	r3, [pc, #16]	; (800662c <vTaskSuspendAll+0x18>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3301      	adds	r3, #1
 800661e:	4a03      	ldr	r2, [pc, #12]	; (800662c <vTaskSuspendAll+0x18>)
 8006620:	6013      	str	r3, [r2, #0]
}
 8006622:	bf00      	nop
 8006624:	46bd      	mov	sp, r7
 8006626:	bc80      	pop	{r7}
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	200037a0 	.word	0x200037a0

08006630 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800663a:	2300      	movs	r3, #0
 800663c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800663e:	4b41      	ldr	r3, [pc, #260]	; (8006744 <xTaskResumeAll+0x114>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10a      	bne.n	800665c <xTaskResumeAll+0x2c>
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	603b      	str	r3, [r7, #0]
}
 8006658:	bf00      	nop
 800665a:	e7fe      	b.n	800665a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800665c:	f000 fd7e 	bl	800715c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006660:	4b38      	ldr	r3, [pc, #224]	; (8006744 <xTaskResumeAll+0x114>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3b01      	subs	r3, #1
 8006666:	4a37      	ldr	r2, [pc, #220]	; (8006744 <xTaskResumeAll+0x114>)
 8006668:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800666a:	4b36      	ldr	r3, [pc, #216]	; (8006744 <xTaskResumeAll+0x114>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d161      	bne.n	8006736 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006672:	4b35      	ldr	r3, [pc, #212]	; (8006748 <xTaskResumeAll+0x118>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d05d      	beq.n	8006736 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800667a:	e02e      	b.n	80066da <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800667c:	4b33      	ldr	r3, [pc, #204]	; (800674c <xTaskResumeAll+0x11c>)
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3318      	adds	r3, #24
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff f839 	bl	8005700 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3304      	adds	r3, #4
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff f834 	bl	8005700 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669c:	2201      	movs	r2, #1
 800669e:	409a      	lsls	r2, r3
 80066a0:	4b2b      	ldr	r3, [pc, #172]	; (8006750 <xTaskResumeAll+0x120>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	4a2a      	ldr	r2, [pc, #168]	; (8006750 <xTaskResumeAll+0x120>)
 80066a8:	6013      	str	r3, [r2, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ae:	4613      	mov	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4a27      	ldr	r2, [pc, #156]	; (8006754 <xTaskResumeAll+0x124>)
 80066b8:	441a      	add	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3304      	adds	r3, #4
 80066be:	4619      	mov	r1, r3
 80066c0:	4610      	mov	r0, r2
 80066c2:	f7fe ffc2 	bl	800564a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ca:	4b23      	ldr	r3, [pc, #140]	; (8006758 <xTaskResumeAll+0x128>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d302      	bcc.n	80066da <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80066d4:	4b21      	ldr	r3, [pc, #132]	; (800675c <xTaskResumeAll+0x12c>)
 80066d6:	2201      	movs	r2, #1
 80066d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066da:	4b1c      	ldr	r3, [pc, #112]	; (800674c <xTaskResumeAll+0x11c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1cc      	bne.n	800667c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066e8:	f000 fb16 	bl	8006d18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80066ec:	4b1c      	ldr	r3, [pc, #112]	; (8006760 <xTaskResumeAll+0x130>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d010      	beq.n	800671a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066f8:	f000 f836 	bl	8006768 <xTaskIncrementTick>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d002      	beq.n	8006708 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006702:	4b16      	ldr	r3, [pc, #88]	; (800675c <xTaskResumeAll+0x12c>)
 8006704:	2201      	movs	r2, #1
 8006706:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3b01      	subs	r3, #1
 800670c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1f1      	bne.n	80066f8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006714:	4b12      	ldr	r3, [pc, #72]	; (8006760 <xTaskResumeAll+0x130>)
 8006716:	2200      	movs	r2, #0
 8006718:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800671a:	4b10      	ldr	r3, [pc, #64]	; (800675c <xTaskResumeAll+0x12c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d009      	beq.n	8006736 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006722:	2301      	movs	r3, #1
 8006724:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006726:	4b0f      	ldr	r3, [pc, #60]	; (8006764 <xTaskResumeAll+0x134>)
 8006728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006736:	f000 fd41 	bl	80071bc <vPortExitCritical>

	return xAlreadyYielded;
 800673a:	68bb      	ldr	r3, [r7, #8]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	200037a0 	.word	0x200037a0
 8006748:	20003778 	.word	0x20003778
 800674c:	20003738 	.word	0x20003738
 8006750:	20003780 	.word	0x20003780
 8006754:	2000367c 	.word	0x2000367c
 8006758:	20003678 	.word	0x20003678
 800675c:	2000378c 	.word	0x2000378c
 8006760:	20003788 	.word	0x20003788
 8006764:	e000ed04 	.word	0xe000ed04

08006768 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800676e:	2300      	movs	r3, #0
 8006770:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006772:	4b51      	ldr	r3, [pc, #324]	; (80068b8 <xTaskIncrementTick+0x150>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f040 808d 	bne.w	8006896 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800677c:	4b4f      	ldr	r3, [pc, #316]	; (80068bc <xTaskIncrementTick+0x154>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3301      	adds	r3, #1
 8006782:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006784:	4a4d      	ldr	r2, [pc, #308]	; (80068bc <xTaskIncrementTick+0x154>)
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d120      	bne.n	80067d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006790:	4b4b      	ldr	r3, [pc, #300]	; (80068c0 <xTaskIncrementTick+0x158>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	603b      	str	r3, [r7, #0]
}
 80067ac:	bf00      	nop
 80067ae:	e7fe      	b.n	80067ae <xTaskIncrementTick+0x46>
 80067b0:	4b43      	ldr	r3, [pc, #268]	; (80068c0 <xTaskIncrementTick+0x158>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	60fb      	str	r3, [r7, #12]
 80067b6:	4b43      	ldr	r3, [pc, #268]	; (80068c4 <xTaskIncrementTick+0x15c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a41      	ldr	r2, [pc, #260]	; (80068c0 <xTaskIncrementTick+0x158>)
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	4a41      	ldr	r2, [pc, #260]	; (80068c4 <xTaskIncrementTick+0x15c>)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	4b40      	ldr	r3, [pc, #256]	; (80068c8 <xTaskIncrementTick+0x160>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3301      	adds	r3, #1
 80067ca:	4a3f      	ldr	r2, [pc, #252]	; (80068c8 <xTaskIncrementTick+0x160>)
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	f000 faa3 	bl	8006d18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067d2:	4b3e      	ldr	r3, [pc, #248]	; (80068cc <xTaskIncrementTick+0x164>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d34d      	bcc.n	8006878 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067dc:	4b38      	ldr	r3, [pc, #224]	; (80068c0 <xTaskIncrementTick+0x158>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <xTaskIncrementTick+0x82>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e000      	b.n	80067ec <xTaskIncrementTick+0x84>
 80067ea:	2300      	movs	r3, #0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d004      	beq.n	80067fa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067f0:	4b36      	ldr	r3, [pc, #216]	; (80068cc <xTaskIncrementTick+0x164>)
 80067f2:	f04f 32ff 	mov.w	r2, #4294967295
 80067f6:	601a      	str	r2, [r3, #0]
					break;
 80067f8:	e03e      	b.n	8006878 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067fa:	4b31      	ldr	r3, [pc, #196]	; (80068c0 <xTaskIncrementTick+0x158>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	429a      	cmp	r2, r3
 8006810:	d203      	bcs.n	800681a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006812:	4a2e      	ldr	r2, [pc, #184]	; (80068cc <xTaskIncrementTick+0x164>)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6013      	str	r3, [r2, #0]
						break;
 8006818:	e02e      	b.n	8006878 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	3304      	adds	r3, #4
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe ff6e 	bl	8005700 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006828:	2b00      	cmp	r3, #0
 800682a:	d004      	beq.n	8006836 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	3318      	adds	r3, #24
 8006830:	4618      	mov	r0, r3
 8006832:	f7fe ff65 	bl	8005700 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683a:	2201      	movs	r2, #1
 800683c:	409a      	lsls	r2, r3
 800683e:	4b24      	ldr	r3, [pc, #144]	; (80068d0 <xTaskIncrementTick+0x168>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4313      	orrs	r3, r2
 8006844:	4a22      	ldr	r2, [pc, #136]	; (80068d0 <xTaskIncrementTick+0x168>)
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4a1f      	ldr	r2, [pc, #124]	; (80068d4 <xTaskIncrementTick+0x16c>)
 8006856:	441a      	add	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	3304      	adds	r3, #4
 800685c:	4619      	mov	r1, r3
 800685e:	4610      	mov	r0, r2
 8006860:	f7fe fef3 	bl	800564a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006868:	4b1b      	ldr	r3, [pc, #108]	; (80068d8 <xTaskIncrementTick+0x170>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686e:	429a      	cmp	r2, r3
 8006870:	d3b4      	bcc.n	80067dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006872:	2301      	movs	r3, #1
 8006874:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006876:	e7b1      	b.n	80067dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006878:	4b17      	ldr	r3, [pc, #92]	; (80068d8 <xTaskIncrementTick+0x170>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800687e:	4915      	ldr	r1, [pc, #84]	; (80068d4 <xTaskIncrementTick+0x16c>)
 8006880:	4613      	mov	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	440b      	add	r3, r1
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d907      	bls.n	80068a0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006890:	2301      	movs	r3, #1
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	e004      	b.n	80068a0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006896:	4b11      	ldr	r3, [pc, #68]	; (80068dc <xTaskIncrementTick+0x174>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3301      	adds	r3, #1
 800689c:	4a0f      	ldr	r2, [pc, #60]	; (80068dc <xTaskIncrementTick+0x174>)
 800689e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80068a0:	4b0f      	ldr	r3, [pc, #60]	; (80068e0 <xTaskIncrementTick+0x178>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80068a8:	2301      	movs	r3, #1
 80068aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80068ac:	697b      	ldr	r3, [r7, #20]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	200037a0 	.word	0x200037a0
 80068bc:	2000377c 	.word	0x2000377c
 80068c0:	20003730 	.word	0x20003730
 80068c4:	20003734 	.word	0x20003734
 80068c8:	20003790 	.word	0x20003790
 80068cc:	20003798 	.word	0x20003798
 80068d0:	20003780 	.word	0x20003780
 80068d4:	2000367c 	.word	0x2000367c
 80068d8:	20003678 	.word	0x20003678
 80068dc:	20003788 	.word	0x20003788
 80068e0:	2000378c 	.word	0x2000378c

080068e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068ea:	4b26      	ldr	r3, [pc, #152]	; (8006984 <vTaskSwitchContext+0xa0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068f2:	4b25      	ldr	r3, [pc, #148]	; (8006988 <vTaskSwitchContext+0xa4>)
 80068f4:	2201      	movs	r2, #1
 80068f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068f8:	e03f      	b.n	800697a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80068fa:	4b23      	ldr	r3, [pc, #140]	; (8006988 <vTaskSwitchContext+0xa4>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006900:	4b22      	ldr	r3, [pc, #136]	; (800698c <vTaskSwitchContext+0xa8>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	fab3 f383 	clz	r3, r3
 800690c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800690e:	7afb      	ldrb	r3, [r7, #11]
 8006910:	f1c3 031f 	rsb	r3, r3, #31
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	491e      	ldr	r1, [pc, #120]	; (8006990 <vTaskSwitchContext+0xac>)
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	4613      	mov	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	440b      	add	r3, r1
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10a      	bne.n	8006940 <vTaskSwitchContext+0x5c>
	__asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	607b      	str	r3, [r7, #4]
}
 800693c:	bf00      	nop
 800693e:	e7fe      	b.n	800693e <vTaskSwitchContext+0x5a>
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	4613      	mov	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4a11      	ldr	r2, [pc, #68]	; (8006990 <vTaskSwitchContext+0xac>)
 800694c:	4413      	add	r3, r2
 800694e:	613b      	str	r3, [r7, #16]
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	605a      	str	r2, [r3, #4]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	3308      	adds	r3, #8
 8006962:	429a      	cmp	r2, r3
 8006964:	d104      	bne.n	8006970 <vTaskSwitchContext+0x8c>
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	605a      	str	r2, [r3, #4]
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	4a07      	ldr	r2, [pc, #28]	; (8006994 <vTaskSwitchContext+0xb0>)
 8006978:	6013      	str	r3, [r2, #0]
}
 800697a:	bf00      	nop
 800697c:	371c      	adds	r7, #28
 800697e:	46bd      	mov	sp, r7
 8006980:	bc80      	pop	{r7}
 8006982:	4770      	bx	lr
 8006984:	200037a0 	.word	0x200037a0
 8006988:	2000378c 	.word	0x2000378c
 800698c:	20003780 	.word	0x20003780
 8006990:	2000367c 	.word	0x2000367c
 8006994:	20003678 	.word	0x20003678

08006998 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10a      	bne.n	80069be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	60fb      	str	r3, [r7, #12]
}
 80069ba:	bf00      	nop
 80069bc:	e7fe      	b.n	80069bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069be:	4b07      	ldr	r3, [pc, #28]	; (80069dc <vTaskPlaceOnEventList+0x44>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3318      	adds	r3, #24
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fe fe62 	bl	8005690 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069cc:	2101      	movs	r1, #1
 80069ce:	6838      	ldr	r0, [r7, #0]
 80069d0:	f000 fa6a 	bl	8006ea8 <prvAddCurrentTaskToDelayedList>
}
 80069d4:	bf00      	nop
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	20003678 	.word	0x20003678

080069e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10a      	bne.n	8006a0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	60fb      	str	r3, [r7, #12]
}
 8006a08:	bf00      	nop
 8006a0a:	e7fe      	b.n	8006a0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	3318      	adds	r3, #24
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fe fe75 	bl	8005700 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a16:	4b1d      	ldr	r3, [pc, #116]	; (8006a8c <xTaskRemoveFromEventList+0xac>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d11c      	bne.n	8006a58 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	3304      	adds	r3, #4
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe fe6c 	bl	8005700 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	409a      	lsls	r2, r3
 8006a30:	4b17      	ldr	r3, [pc, #92]	; (8006a90 <xTaskRemoveFromEventList+0xb0>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	4a16      	ldr	r2, [pc, #88]	; (8006a90 <xTaskRemoveFromEventList+0xb0>)
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3e:	4613      	mov	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4a13      	ldr	r2, [pc, #76]	; (8006a94 <xTaskRemoveFromEventList+0xb4>)
 8006a48:	441a      	add	r2, r3
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4610      	mov	r0, r2
 8006a52:	f7fe fdfa 	bl	800564a <vListInsertEnd>
 8006a56:	e005      	b.n	8006a64 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	3318      	adds	r3, #24
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	480e      	ldr	r0, [pc, #56]	; (8006a98 <xTaskRemoveFromEventList+0xb8>)
 8006a60:	f7fe fdf3 	bl	800564a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a68:	4b0c      	ldr	r3, [pc, #48]	; (8006a9c <xTaskRemoveFromEventList+0xbc>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d905      	bls.n	8006a7e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a72:	2301      	movs	r3, #1
 8006a74:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a76:	4b0a      	ldr	r3, [pc, #40]	; (8006aa0 <xTaskRemoveFromEventList+0xc0>)
 8006a78:	2201      	movs	r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	e001      	b.n	8006a82 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006a82:	697b      	ldr	r3, [r7, #20]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	200037a0 	.word	0x200037a0
 8006a90:	20003780 	.word	0x20003780
 8006a94:	2000367c 	.word	0x2000367c
 8006a98:	20003738 	.word	0x20003738
 8006a9c:	20003678 	.word	0x20003678
 8006aa0:	2000378c 	.word	0x2000378c

08006aa4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006aac:	4b06      	ldr	r3, [pc, #24]	; (8006ac8 <vTaskInternalSetTimeOutState+0x24>)
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ab4:	4b05      	ldr	r3, [pc, #20]	; (8006acc <vTaskInternalSetTimeOutState+0x28>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	605a      	str	r2, [r3, #4]
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	20003790 	.word	0x20003790
 8006acc:	2000377c 	.word	0x2000377c

08006ad0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10a      	bne.n	8006af6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	613b      	str	r3, [r7, #16]
}
 8006af2:	bf00      	nop
 8006af4:	e7fe      	b.n	8006af4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	60fb      	str	r3, [r7, #12]
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006b12:	f000 fb23 	bl	800715c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b16:	4b1d      	ldr	r3, [pc, #116]	; (8006b8c <xTaskCheckForTimeOut+0xbc>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2e:	d102      	bne.n	8006b36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b30:	2300      	movs	r3, #0
 8006b32:	61fb      	str	r3, [r7, #28]
 8006b34:	e023      	b.n	8006b7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <xTaskCheckForTimeOut+0xc0>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d007      	beq.n	8006b52 <xTaskCheckForTimeOut+0x82>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d302      	bcc.n	8006b52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	61fb      	str	r3, [r7, #28]
 8006b50:	e015      	b.n	8006b7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d20b      	bcs.n	8006b74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	1ad2      	subs	r2, r2, r3
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff ff9b 	bl	8006aa4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61fb      	str	r3, [r7, #28]
 8006b72:	e004      	b.n	8006b7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b7e:	f000 fb1d 	bl	80071bc <vPortExitCritical>

	return xReturn;
 8006b82:	69fb      	ldr	r3, [r7, #28]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3720      	adds	r7, #32
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	2000377c 	.word	0x2000377c
 8006b90:	20003790 	.word	0x20003790

08006b94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b94:	b480      	push	{r7}
 8006b96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b98:	4b03      	ldr	r3, [pc, #12]	; (8006ba8 <vTaskMissedYield+0x14>)
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	601a      	str	r2, [r3, #0]
}
 8006b9e:	bf00      	nop
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	2000378c 	.word	0x2000378c

08006bac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006bb4:	f000 f852 	bl	8006c5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bb8:	4b06      	ldr	r3, [pc, #24]	; (8006bd4 <prvIdleTask+0x28>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d9f9      	bls.n	8006bb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006bc0:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <prvIdleTask+0x2c>)
 8006bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bd0:	e7f0      	b.n	8006bb4 <prvIdleTask+0x8>
 8006bd2:	bf00      	nop
 8006bd4:	2000367c 	.word	0x2000367c
 8006bd8:	e000ed04 	.word	0xe000ed04

08006bdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006be2:	2300      	movs	r3, #0
 8006be4:	607b      	str	r3, [r7, #4]
 8006be6:	e00c      	b.n	8006c02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4a12      	ldr	r2, [pc, #72]	; (8006c3c <prvInitialiseTaskLists+0x60>)
 8006bf4:	4413      	add	r3, r2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fe fcfc 	bl	80055f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	607b      	str	r3, [r7, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b06      	cmp	r3, #6
 8006c06:	d9ef      	bls.n	8006be8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c08:	480d      	ldr	r0, [pc, #52]	; (8006c40 <prvInitialiseTaskLists+0x64>)
 8006c0a:	f7fe fcf3 	bl	80055f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c0e:	480d      	ldr	r0, [pc, #52]	; (8006c44 <prvInitialiseTaskLists+0x68>)
 8006c10:	f7fe fcf0 	bl	80055f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c14:	480c      	ldr	r0, [pc, #48]	; (8006c48 <prvInitialiseTaskLists+0x6c>)
 8006c16:	f7fe fced 	bl	80055f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c1a:	480c      	ldr	r0, [pc, #48]	; (8006c4c <prvInitialiseTaskLists+0x70>)
 8006c1c:	f7fe fcea 	bl	80055f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c20:	480b      	ldr	r0, [pc, #44]	; (8006c50 <prvInitialiseTaskLists+0x74>)
 8006c22:	f7fe fce7 	bl	80055f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c26:	4b0b      	ldr	r3, [pc, #44]	; (8006c54 <prvInitialiseTaskLists+0x78>)
 8006c28:	4a05      	ldr	r2, [pc, #20]	; (8006c40 <prvInitialiseTaskLists+0x64>)
 8006c2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c2c:	4b0a      	ldr	r3, [pc, #40]	; (8006c58 <prvInitialiseTaskLists+0x7c>)
 8006c2e:	4a05      	ldr	r2, [pc, #20]	; (8006c44 <prvInitialiseTaskLists+0x68>)
 8006c30:	601a      	str	r2, [r3, #0]
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	2000367c 	.word	0x2000367c
 8006c40:	20003708 	.word	0x20003708
 8006c44:	2000371c 	.word	0x2000371c
 8006c48:	20003738 	.word	0x20003738
 8006c4c:	2000374c 	.word	0x2000374c
 8006c50:	20003764 	.word	0x20003764
 8006c54:	20003730 	.word	0x20003730
 8006c58:	20003734 	.word	0x20003734

08006c5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c62:	e019      	b.n	8006c98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c64:	f000 fa7a 	bl	800715c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006c68:	4b10      	ldr	r3, [pc, #64]	; (8006cac <prvCheckTasksWaitingTermination+0x50>)
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3304      	adds	r3, #4
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fe fd43 	bl	8005700 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c7a:	4b0d      	ldr	r3, [pc, #52]	; (8006cb0 <prvCheckTasksWaitingTermination+0x54>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	4a0b      	ldr	r2, [pc, #44]	; (8006cb0 <prvCheckTasksWaitingTermination+0x54>)
 8006c82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c84:	4b0b      	ldr	r3, [pc, #44]	; (8006cb4 <prvCheckTasksWaitingTermination+0x58>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	4a0a      	ldr	r2, [pc, #40]	; (8006cb4 <prvCheckTasksWaitingTermination+0x58>)
 8006c8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c8e:	f000 fa95 	bl	80071bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f810 	bl	8006cb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c98:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <prvCheckTasksWaitingTermination+0x58>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1e1      	bne.n	8006c64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ca0:	bf00      	nop
 8006ca2:	bf00      	nop
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	2000374c 	.word	0x2000374c
 8006cb0:	20003778 	.word	0x20003778
 8006cb4:	20003760 	.word	0x20003760

08006cb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d108      	bne.n	8006cdc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 fc08 	bl	80074e4 <vPortFree>
				vPortFree( pxTCB );
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fc05 	bl	80074e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006cda:	e018      	b.n	8006d0e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d103      	bne.n	8006cee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fbfc 	bl	80074e4 <vPortFree>
	}
 8006cec:	e00f      	b.n	8006d0e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d00a      	beq.n	8006d0e <prvDeleteTCB+0x56>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	60fb      	str	r3, [r7, #12]
}
 8006d0a:	bf00      	nop
 8006d0c:	e7fe      	b.n	8006d0c <prvDeleteTCB+0x54>
	}
 8006d0e:	bf00      	nop
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
	...

08006d18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d1e:	4b0e      	ldr	r3, [pc, #56]	; (8006d58 <prvResetNextTaskUnblockTime+0x40>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <prvResetNextTaskUnblockTime+0x14>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e000      	b.n	8006d2e <prvResetNextTaskUnblockTime+0x16>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d004      	beq.n	8006d3c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d32:	4b0a      	ldr	r3, [pc, #40]	; (8006d5c <prvResetNextTaskUnblockTime+0x44>)
 8006d34:	f04f 32ff 	mov.w	r2, #4294967295
 8006d38:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d3a:	e008      	b.n	8006d4e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d3c:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <prvResetNextTaskUnblockTime+0x40>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	4a04      	ldr	r2, [pc, #16]	; (8006d5c <prvResetNextTaskUnblockTime+0x44>)
 8006d4c:	6013      	str	r3, [r2, #0]
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr
 8006d58:	20003730 	.word	0x20003730
 8006d5c:	20003798 	.word	0x20003798

08006d60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d66:	4b0b      	ldr	r3, [pc, #44]	; (8006d94 <xTaskGetSchedulerState+0x34>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d102      	bne.n	8006d74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	607b      	str	r3, [r7, #4]
 8006d72:	e008      	b.n	8006d86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d74:	4b08      	ldr	r3, [pc, #32]	; (8006d98 <xTaskGetSchedulerState+0x38>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d102      	bne.n	8006d82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	607b      	str	r3, [r7, #4]
 8006d80:	e001      	b.n	8006d86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d82:	2300      	movs	r3, #0
 8006d84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d86:	687b      	ldr	r3, [r7, #4]
	}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bc80      	pop	{r7}
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	20003784 	.word	0x20003784
 8006d98:	200037a0 	.word	0x200037a0

08006d9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006da8:	2300      	movs	r3, #0
 8006daa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d06e      	beq.n	8006e90 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006db2:	4b3a      	ldr	r3, [pc, #232]	; (8006e9c <xTaskPriorityDisinherit+0x100>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d00a      	beq.n	8006dd2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	60fb      	str	r3, [r7, #12]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10a      	bne.n	8006df0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	60bb      	str	r3, [r7, #8]
}
 8006dec:	bf00      	nop
 8006dee:	e7fe      	b.n	8006dee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006df4:	1e5a      	subs	r2, r3, #1
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d044      	beq.n	8006e90 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d140      	bne.n	8006e90 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	3304      	adds	r3, #4
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe fc74 	bl	8005700 <uxListRemove>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d115      	bne.n	8006e4a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e22:	491f      	ldr	r1, [pc, #124]	; (8006ea0 <xTaskPriorityDisinherit+0x104>)
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10a      	bne.n	8006e4a <xTaskPriorityDisinherit+0xae>
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e38:	2201      	movs	r2, #1
 8006e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3e:	43da      	mvns	r2, r3
 8006e40:	4b18      	ldr	r3, [pc, #96]	; (8006ea4 <xTaskPriorityDisinherit+0x108>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4013      	ands	r3, r2
 8006e46:	4a17      	ldr	r2, [pc, #92]	; (8006ea4 <xTaskPriorityDisinherit+0x108>)
 8006e48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e56:	f1c3 0207 	rsb	r2, r3, #7
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e62:	2201      	movs	r2, #1
 8006e64:	409a      	lsls	r2, r3
 8006e66:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <xTaskPriorityDisinherit+0x108>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	4a0d      	ldr	r2, [pc, #52]	; (8006ea4 <xTaskPriorityDisinherit+0x108>)
 8006e6e:	6013      	str	r3, [r2, #0]
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e74:	4613      	mov	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4a08      	ldr	r2, [pc, #32]	; (8006ea0 <xTaskPriorityDisinherit+0x104>)
 8006e7e:	441a      	add	r2, r3
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	3304      	adds	r3, #4
 8006e84:	4619      	mov	r1, r3
 8006e86:	4610      	mov	r0, r2
 8006e88:	f7fe fbdf 	bl	800564a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e90:	697b      	ldr	r3, [r7, #20]
	}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20003678 	.word	0x20003678
 8006ea0:	2000367c 	.word	0x2000367c
 8006ea4:	20003780 	.word	0x20003780

08006ea8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006eb2:	4b29      	ldr	r3, [pc, #164]	; (8006f58 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eb8:	4b28      	ldr	r3, [pc, #160]	; (8006f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fe fc1e 	bl	8005700 <uxListRemove>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10b      	bne.n	8006ee2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006eca:	4b24      	ldr	r3, [pc, #144]	; (8006f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed6:	43da      	mvns	r2, r3
 8006ed8:	4b21      	ldr	r3, [pc, #132]	; (8006f60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4013      	ands	r3, r2
 8006ede:	4a20      	ldr	r2, [pc, #128]	; (8006f60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ee0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee8:	d10a      	bne.n	8006f00 <prvAddCurrentTaskToDelayedList+0x58>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d007      	beq.n	8006f00 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ef0:	4b1a      	ldr	r3, [pc, #104]	; (8006f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	481a      	ldr	r0, [pc, #104]	; (8006f64 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006efa:	f7fe fba6 	bl	800564a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006efe:	e026      	b.n	8006f4e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4413      	add	r3, r2
 8006f06:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f08:	4b14      	ldr	r3, [pc, #80]	; (8006f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d209      	bcs.n	8006f2c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f18:	4b13      	ldr	r3, [pc, #76]	; (8006f68 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	4b0f      	ldr	r3, [pc, #60]	; (8006f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3304      	adds	r3, #4
 8006f22:	4619      	mov	r1, r3
 8006f24:	4610      	mov	r0, r2
 8006f26:	f7fe fbb3 	bl	8005690 <vListInsert>
}
 8006f2a:	e010      	b.n	8006f4e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f2c:	4b0f      	ldr	r3, [pc, #60]	; (8006f6c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	4b0a      	ldr	r3, [pc, #40]	; (8006f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3304      	adds	r3, #4
 8006f36:	4619      	mov	r1, r3
 8006f38:	4610      	mov	r0, r2
 8006f3a:	f7fe fba9 	bl	8005690 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f3e:	4b0c      	ldr	r3, [pc, #48]	; (8006f70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d202      	bcs.n	8006f4e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006f48:	4a09      	ldr	r2, [pc, #36]	; (8006f70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	6013      	str	r3, [r2, #0]
}
 8006f4e:	bf00      	nop
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	2000377c 	.word	0x2000377c
 8006f5c:	20003678 	.word	0x20003678
 8006f60:	20003780 	.word	0x20003780
 8006f64:	20003764 	.word	0x20003764
 8006f68:	20003734 	.word	0x20003734
 8006f6c:	20003730 	.word	0x20003730
 8006f70:	20003798 	.word	0x20003798

08006f74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	3b04      	subs	r3, #4
 8006f84:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3b04      	subs	r3, #4
 8006f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f023 0201 	bic.w	r2, r3, #1
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3b04      	subs	r3, #4
 8006fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fa4:	4a08      	ldr	r2, [pc, #32]	; (8006fc8 <pxPortInitialiseStack+0x54>)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3b14      	subs	r3, #20
 8006fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	3b20      	subs	r3, #32
 8006fba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bc80      	pop	{r7}
 8006fc6:	4770      	bx	lr
 8006fc8:	08006fcd 	.word	0x08006fcd

08006fcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006fd6:	4b12      	ldr	r3, [pc, #72]	; (8007020 <prvTaskExitError+0x54>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fde:	d00a      	beq.n	8006ff6 <prvTaskExitError+0x2a>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	60fb      	str	r3, [r7, #12]
}
 8006ff2:	bf00      	nop
 8006ff4:	e7fe      	b.n	8006ff4 <prvTaskExitError+0x28>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	60bb      	str	r3, [r7, #8]
}
 8007008:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800700a:	bf00      	nop
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d0fc      	beq.n	800700c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007012:	bf00      	nop
 8007014:	bf00      	nop
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	bc80      	pop	{r7}
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	20000020 	.word	0x20000020
	...

08007030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007030:	4b07      	ldr	r3, [pc, #28]	; (8007050 <pxCurrentTCBConst2>)
 8007032:	6819      	ldr	r1, [r3, #0]
 8007034:	6808      	ldr	r0, [r1, #0]
 8007036:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800703a:	f380 8809 	msr	PSP, r0
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f04f 0000 	mov.w	r0, #0
 8007046:	f380 8811 	msr	BASEPRI, r0
 800704a:	f04e 0e0d 	orr.w	lr, lr, #13
 800704e:	4770      	bx	lr

08007050 <pxCurrentTCBConst2>:
 8007050:	20003678 	.word	0x20003678
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007054:	bf00      	nop
 8007056:	bf00      	nop

08007058 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007058:	4806      	ldr	r0, [pc, #24]	; (8007074 <prvPortStartFirstTask+0x1c>)
 800705a:	6800      	ldr	r0, [r0, #0]
 800705c:	6800      	ldr	r0, [r0, #0]
 800705e:	f380 8808 	msr	MSP, r0
 8007062:	b662      	cpsie	i
 8007064:	b661      	cpsie	f
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	df00      	svc	0
 8007070:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007072:	bf00      	nop
 8007074:	e000ed08 	.word	0xe000ed08

08007078 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800707e:	4b32      	ldr	r3, [pc, #200]	; (8007148 <xPortStartScheduler+0xd0>)
 8007080:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	b2db      	uxtb	r3, r3
 8007088:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	22ff      	movs	r2, #255	; 0xff
 800708e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	b2db      	uxtb	r3, r3
 8007096:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007098:	78fb      	ldrb	r3, [r7, #3]
 800709a:	b2db      	uxtb	r3, r3
 800709c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	4b2a      	ldr	r3, [pc, #168]	; (800714c <xPortStartScheduler+0xd4>)
 80070a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070a6:	4b2a      	ldr	r3, [pc, #168]	; (8007150 <xPortStartScheduler+0xd8>)
 80070a8:	2207      	movs	r2, #7
 80070aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070ac:	e009      	b.n	80070c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80070ae:	4b28      	ldr	r3, [pc, #160]	; (8007150 <xPortStartScheduler+0xd8>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	4a26      	ldr	r2, [pc, #152]	; (8007150 <xPortStartScheduler+0xd8>)
 80070b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070b8:	78fb      	ldrb	r3, [r7, #3]
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	005b      	lsls	r3, r3, #1
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070c2:	78fb      	ldrb	r3, [r7, #3]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ca:	2b80      	cmp	r3, #128	; 0x80
 80070cc:	d0ef      	beq.n	80070ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070ce:	4b20      	ldr	r3, [pc, #128]	; (8007150 <xPortStartScheduler+0xd8>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f1c3 0307 	rsb	r3, r3, #7
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d00a      	beq.n	80070f0 <xPortStartScheduler+0x78>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	60bb      	str	r3, [r7, #8]
}
 80070ec:	bf00      	nop
 80070ee:	e7fe      	b.n	80070ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070f0:	4b17      	ldr	r3, [pc, #92]	; (8007150 <xPortStartScheduler+0xd8>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	021b      	lsls	r3, r3, #8
 80070f6:	4a16      	ldr	r2, [pc, #88]	; (8007150 <xPortStartScheduler+0xd8>)
 80070f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070fa:	4b15      	ldr	r3, [pc, #84]	; (8007150 <xPortStartScheduler+0xd8>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007102:	4a13      	ldr	r2, [pc, #76]	; (8007150 <xPortStartScheduler+0xd8>)
 8007104:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	b2da      	uxtb	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800710e:	4b11      	ldr	r3, [pc, #68]	; (8007154 <xPortStartScheduler+0xdc>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a10      	ldr	r2, [pc, #64]	; (8007154 <xPortStartScheduler+0xdc>)
 8007114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007118:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800711a:	4b0e      	ldr	r3, [pc, #56]	; (8007154 <xPortStartScheduler+0xdc>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a0d      	ldr	r2, [pc, #52]	; (8007154 <xPortStartScheduler+0xdc>)
 8007120:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007124:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007126:	f000 f8b9 	bl	800729c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800712a:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <xPortStartScheduler+0xe0>)
 800712c:	2200      	movs	r2, #0
 800712e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007130:	f7ff ff92 	bl	8007058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007134:	f7ff fbd6 	bl	80068e4 <vTaskSwitchContext>
	prvTaskExitError();
 8007138:	f7ff ff48 	bl	8006fcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	e000e400 	.word	0xe000e400
 800714c:	200037a4 	.word	0x200037a4
 8007150:	200037a8 	.word	0x200037a8
 8007154:	e000ed20 	.word	0xe000ed20
 8007158:	20000020 	.word	0x20000020

0800715c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	607b      	str	r3, [r7, #4]
}
 8007174:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007176:	4b0f      	ldr	r3, [pc, #60]	; (80071b4 <vPortEnterCritical+0x58>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3301      	adds	r3, #1
 800717c:	4a0d      	ldr	r2, [pc, #52]	; (80071b4 <vPortEnterCritical+0x58>)
 800717e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007180:	4b0c      	ldr	r3, [pc, #48]	; (80071b4 <vPortEnterCritical+0x58>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d10f      	bne.n	80071a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007188:	4b0b      	ldr	r3, [pc, #44]	; (80071b8 <vPortEnterCritical+0x5c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00a      	beq.n	80071a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	603b      	str	r3, [r7, #0]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <vPortEnterCritical+0x4a>
	}
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bc80      	pop	{r7}
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	20000020 	.word	0x20000020
 80071b8:	e000ed04 	.word	0xe000ed04

080071bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071c2:	4b11      	ldr	r3, [pc, #68]	; (8007208 <vPortExitCritical+0x4c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10a      	bne.n	80071e0 <vPortExitCritical+0x24>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	607b      	str	r3, [r7, #4]
}
 80071dc:	bf00      	nop
 80071de:	e7fe      	b.n	80071de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071e0:	4b09      	ldr	r3, [pc, #36]	; (8007208 <vPortExitCritical+0x4c>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3b01      	subs	r3, #1
 80071e6:	4a08      	ldr	r2, [pc, #32]	; (8007208 <vPortExitCritical+0x4c>)
 80071e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071ea:	4b07      	ldr	r3, [pc, #28]	; (8007208 <vPortExitCritical+0x4c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d105      	bne.n	80071fe <vPortExitCritical+0x42>
 80071f2:	2300      	movs	r3, #0
 80071f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	f383 8811 	msr	BASEPRI, r3
}
 80071fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	bc80      	pop	{r7}
 8007206:	4770      	bx	lr
 8007208:	20000020 	.word	0x20000020
 800720c:	00000000 	.word	0x00000000

08007210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007210:	f3ef 8009 	mrs	r0, PSP
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	4b0d      	ldr	r3, [pc, #52]	; (8007250 <pxCurrentTCBConst>)
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007220:	6010      	str	r0, [r2, #0]
 8007222:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007226:	f04f 0050 	mov.w	r0, #80	; 0x50
 800722a:	f380 8811 	msr	BASEPRI, r0
 800722e:	f7ff fb59 	bl	80068e4 <vTaskSwitchContext>
 8007232:	f04f 0000 	mov.w	r0, #0
 8007236:	f380 8811 	msr	BASEPRI, r0
 800723a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800723e:	6819      	ldr	r1, [r3, #0]
 8007240:	6808      	ldr	r0, [r1, #0]
 8007242:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007246:	f380 8809 	msr	PSP, r0
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	4770      	bx	lr

08007250 <pxCurrentTCBConst>:
 8007250:	20003678 	.word	0x20003678
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop

08007258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	607b      	str	r3, [r7, #4]
}
 8007270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007272:	f7ff fa79 	bl	8006768 <xTaskIncrementTick>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800727c:	4b06      	ldr	r3, [pc, #24]	; (8007298 <SysTick_Handler+0x40>)
 800727e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	2300      	movs	r3, #0
 8007286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	f383 8811 	msr	BASEPRI, r3
}
 800728e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007290:	bf00      	nop
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	e000ed04 	.word	0xe000ed04

0800729c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072a0:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <vPortSetupTimerInterrupt+0x30>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072a6:	4b0a      	ldr	r3, [pc, #40]	; (80072d0 <vPortSetupTimerInterrupt+0x34>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072ac:	4b09      	ldr	r3, [pc, #36]	; (80072d4 <vPortSetupTimerInterrupt+0x38>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a09      	ldr	r2, [pc, #36]	; (80072d8 <vPortSetupTimerInterrupt+0x3c>)
 80072b2:	fba2 2303 	umull	r2, r3, r2, r3
 80072b6:	099b      	lsrs	r3, r3, #6
 80072b8:	4a08      	ldr	r2, [pc, #32]	; (80072dc <vPortSetupTimerInterrupt+0x40>)
 80072ba:	3b01      	subs	r3, #1
 80072bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072be:	4b03      	ldr	r3, [pc, #12]	; (80072cc <vPortSetupTimerInterrupt+0x30>)
 80072c0:	2207      	movs	r2, #7
 80072c2:	601a      	str	r2, [r3, #0]
}
 80072c4:	bf00      	nop
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bc80      	pop	{r7}
 80072ca:	4770      	bx	lr
 80072cc:	e000e010 	.word	0xe000e010
 80072d0:	e000e018 	.word	0xe000e018
 80072d4:	20000014 	.word	0x20000014
 80072d8:	10624dd3 	.word	0x10624dd3
 80072dc:	e000e014 	.word	0xe000e014

080072e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072e6:	f3ef 8305 	mrs	r3, IPSR
 80072ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2b0f      	cmp	r3, #15
 80072f0:	d914      	bls.n	800731c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072f2:	4a16      	ldr	r2, [pc, #88]	; (800734c <vPortValidateInterruptPriority+0x6c>)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4413      	add	r3, r2
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072fc:	4b14      	ldr	r3, [pc, #80]	; (8007350 <vPortValidateInterruptPriority+0x70>)
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	7afa      	ldrb	r2, [r7, #11]
 8007302:	429a      	cmp	r2, r3
 8007304:	d20a      	bcs.n	800731c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	607b      	str	r3, [r7, #4]
}
 8007318:	bf00      	nop
 800731a:	e7fe      	b.n	800731a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800731c:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <vPortValidateInterruptPriority+0x74>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007324:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <vPortValidateInterruptPriority+0x78>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d90a      	bls.n	8007342 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	603b      	str	r3, [r7, #0]
}
 800733e:	bf00      	nop
 8007340:	e7fe      	b.n	8007340 <vPortValidateInterruptPriority+0x60>
	}
 8007342:	bf00      	nop
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	bc80      	pop	{r7}
 800734a:	4770      	bx	lr
 800734c:	e000e3f0 	.word	0xe000e3f0
 8007350:	200037a4 	.word	0x200037a4
 8007354:	e000ed0c 	.word	0xe000ed0c
 8007358:	200037a8 	.word	0x200037a8

0800735c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08a      	sub	sp, #40	; 0x28
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007364:	2300      	movs	r3, #0
 8007366:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007368:	f7ff f954 	bl	8006614 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800736c:	4b58      	ldr	r3, [pc, #352]	; (80074d0 <pvPortMalloc+0x174>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007374:	f000 f910 	bl	8007598 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007378:	4b56      	ldr	r3, [pc, #344]	; (80074d4 <pvPortMalloc+0x178>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4013      	ands	r3, r2
 8007380:	2b00      	cmp	r3, #0
 8007382:	f040 808e 	bne.w	80074a2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01d      	beq.n	80073c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800738c:	2208      	movs	r2, #8
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4413      	add	r3, r2
 8007392:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	2b00      	cmp	r3, #0
 800739c:	d014      	beq.n	80073c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f023 0307 	bic.w	r3, r3, #7
 80073a4:	3308      	adds	r3, #8
 80073a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <pvPortMalloc+0x6c>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	617b      	str	r3, [r7, #20]
}
 80073c4:	bf00      	nop
 80073c6:	e7fe      	b.n	80073c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d069      	beq.n	80074a2 <pvPortMalloc+0x146>
 80073ce:	4b42      	ldr	r3, [pc, #264]	; (80074d8 <pvPortMalloc+0x17c>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d864      	bhi.n	80074a2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073d8:	4b40      	ldr	r3, [pc, #256]	; (80074dc <pvPortMalloc+0x180>)
 80073da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073dc:	4b3f      	ldr	r3, [pc, #252]	; (80074dc <pvPortMalloc+0x180>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073e2:	e004      	b.n	80073ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d903      	bls.n	8007400 <pvPortMalloc+0xa4>
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1f1      	bne.n	80073e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007400:	4b33      	ldr	r3, [pc, #204]	; (80074d0 <pvPortMalloc+0x174>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007406:	429a      	cmp	r2, r3
 8007408:	d04b      	beq.n	80074a2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2208      	movs	r2, #8
 8007410:	4413      	add	r3, r2
 8007412:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	1ad2      	subs	r2, r2, r3
 8007424:	2308      	movs	r3, #8
 8007426:	005b      	lsls	r3, r3, #1
 8007428:	429a      	cmp	r2, r3
 800742a:	d91f      	bls.n	800746c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800742c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4413      	add	r3, r2
 8007432:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <pvPortMalloc+0xf8>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	613b      	str	r3, [r7, #16]
}
 8007450:	bf00      	nop
 8007452:	e7fe      	b.n	8007452 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	1ad2      	subs	r2, r2, r3
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007466:	69b8      	ldr	r0, [r7, #24]
 8007468:	f000 f8f8 	bl	800765c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800746c:	4b1a      	ldr	r3, [pc, #104]	; (80074d8 <pvPortMalloc+0x17c>)
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	4a18      	ldr	r2, [pc, #96]	; (80074d8 <pvPortMalloc+0x17c>)
 8007478:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800747a:	4b17      	ldr	r3, [pc, #92]	; (80074d8 <pvPortMalloc+0x17c>)
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	4b18      	ldr	r3, [pc, #96]	; (80074e0 <pvPortMalloc+0x184>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	429a      	cmp	r2, r3
 8007484:	d203      	bcs.n	800748e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007486:	4b14      	ldr	r3, [pc, #80]	; (80074d8 <pvPortMalloc+0x17c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a15      	ldr	r2, [pc, #84]	; (80074e0 <pvPortMalloc+0x184>)
 800748c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	4b10      	ldr	r3, [pc, #64]	; (80074d4 <pvPortMalloc+0x178>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	431a      	orrs	r2, r3
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	2200      	movs	r2, #0
 80074a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074a2:	f7ff f8c5 	bl	8006630 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <pvPortMalloc+0x16a>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	60fb      	str	r3, [r7, #12]
}
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <pvPortMalloc+0x168>
	return pvReturn;
 80074c6:	69fb      	ldr	r3, [r7, #28]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3728      	adds	r7, #40	; 0x28
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	2000c06c 	.word	0x2000c06c
 80074d4:	2000c078 	.word	0x2000c078
 80074d8:	2000c070 	.word	0x2000c070
 80074dc:	2000c064 	.word	0x2000c064
 80074e0:	2000c074 	.word	0x2000c074

080074e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d048      	beq.n	8007588 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80074f6:	2308      	movs	r3, #8
 80074f8:	425b      	negs	r3, r3
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	4413      	add	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	4b21      	ldr	r3, [pc, #132]	; (8007590 <vPortFree+0xac>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4013      	ands	r3, r2
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10a      	bne.n	8007528 <vPortFree+0x44>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	60fb      	str	r3, [r7, #12]
}
 8007524:	bf00      	nop
 8007526:	e7fe      	b.n	8007526 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <vPortFree+0x62>
	__asm volatile
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	60bb      	str	r3, [r7, #8]
}
 8007542:	bf00      	nop
 8007544:	e7fe      	b.n	8007544 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	685a      	ldr	r2, [r3, #4]
 800754a:	4b11      	ldr	r3, [pc, #68]	; (8007590 <vPortFree+0xac>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4013      	ands	r3, r2
 8007550:	2b00      	cmp	r3, #0
 8007552:	d019      	beq.n	8007588 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d115      	bne.n	8007588 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	4b0b      	ldr	r3, [pc, #44]	; (8007590 <vPortFree+0xac>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	43db      	mvns	r3, r3
 8007566:	401a      	ands	r2, r3
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800756c:	f7ff f852 	bl	8006614 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	4b07      	ldr	r3, [pc, #28]	; (8007594 <vPortFree+0xb0>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4413      	add	r3, r2
 800757a:	4a06      	ldr	r2, [pc, #24]	; (8007594 <vPortFree+0xb0>)
 800757c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800757e:	6938      	ldr	r0, [r7, #16]
 8007580:	f000 f86c 	bl	800765c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007584:	f7ff f854 	bl	8006630 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007588:	bf00      	nop
 800758a:	3718      	adds	r7, #24
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	2000c078 	.word	0x2000c078
 8007594:	2000c070 	.word	0x2000c070

08007598 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800759e:	f648 03b8 	movw	r3, #35000	; 0x88b8
 80075a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075a4:	4b27      	ldr	r3, [pc, #156]	; (8007644 <prvHeapInit+0xac>)
 80075a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f003 0307 	and.w	r3, r3, #7
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00c      	beq.n	80075cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3307      	adds	r3, #7
 80075b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f023 0307 	bic.w	r3, r3, #7
 80075be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	4a1f      	ldr	r2, [pc, #124]	; (8007644 <prvHeapInit+0xac>)
 80075c8:	4413      	add	r3, r2
 80075ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075d0:	4a1d      	ldr	r2, [pc, #116]	; (8007648 <prvHeapInit+0xb0>)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075d6:	4b1c      	ldr	r3, [pc, #112]	; (8007648 <prvHeapInit+0xb0>)
 80075d8:	2200      	movs	r2, #0
 80075da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	4413      	add	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075e4:	2208      	movs	r2, #8
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	1a9b      	subs	r3, r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f023 0307 	bic.w	r3, r3, #7
 80075f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4a15      	ldr	r2, [pc, #84]	; (800764c <prvHeapInit+0xb4>)
 80075f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80075fa:	4b14      	ldr	r3, [pc, #80]	; (800764c <prvHeapInit+0xb4>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2200      	movs	r2, #0
 8007600:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007602:	4b12      	ldr	r3, [pc, #72]	; (800764c <prvHeapInit+0xb4>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2200      	movs	r2, #0
 8007608:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	1ad2      	subs	r2, r2, r3
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007618:	4b0c      	ldr	r3, [pc, #48]	; (800764c <prvHeapInit+0xb4>)
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	4a0a      	ldr	r2, [pc, #40]	; (8007650 <prvHeapInit+0xb8>)
 8007626:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	4a09      	ldr	r2, [pc, #36]	; (8007654 <prvHeapInit+0xbc>)
 800762e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007630:	4b09      	ldr	r3, [pc, #36]	; (8007658 <prvHeapInit+0xc0>)
 8007632:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007636:	601a      	str	r2, [r3, #0]
}
 8007638:	bf00      	nop
 800763a:	3714      	adds	r7, #20
 800763c:	46bd      	mov	sp, r7
 800763e:	bc80      	pop	{r7}
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	200037ac 	.word	0x200037ac
 8007648:	2000c064 	.word	0x2000c064
 800764c:	2000c06c 	.word	0x2000c06c
 8007650:	2000c074 	.word	0x2000c074
 8007654:	2000c070 	.word	0x2000c070
 8007658:	2000c078 	.word	0x2000c078

0800765c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007664:	4b27      	ldr	r3, [pc, #156]	; (8007704 <prvInsertBlockIntoFreeList+0xa8>)
 8007666:	60fb      	str	r3, [r7, #12]
 8007668:	e002      	b.n	8007670 <prvInsertBlockIntoFreeList+0x14>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	60fb      	str	r3, [r7, #12]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	429a      	cmp	r2, r3
 8007678:	d8f7      	bhi.n	800766a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	4413      	add	r3, r2
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	429a      	cmp	r2, r3
 800768a:	d108      	bne.n	800769e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	441a      	add	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	441a      	add	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d118      	bne.n	80076e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	4b14      	ldr	r3, [pc, #80]	; (8007708 <prvInsertBlockIntoFreeList+0xac>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d00d      	beq.n	80076da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	441a      	add	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	e008      	b.n	80076ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076da:	4b0b      	ldr	r3, [pc, #44]	; (8007708 <prvInsertBlockIntoFreeList+0xac>)
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	e003      	b.n	80076ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d002      	beq.n	80076fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076fa:	bf00      	nop
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	bc80      	pop	{r7}
 8007702:	4770      	bx	lr
 8007704:	2000c064 	.word	0x2000c064
 8007708:	2000c06c 	.word	0x2000c06c

0800770c <__errno>:
 800770c:	4b01      	ldr	r3, [pc, #4]	; (8007714 <__errno+0x8>)
 800770e:	6818      	ldr	r0, [r3, #0]
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	20000024 	.word	0x20000024

08007718 <__libc_init_array>:
 8007718:	b570      	push	{r4, r5, r6, lr}
 800771a:	2600      	movs	r6, #0
 800771c:	4d0c      	ldr	r5, [pc, #48]	; (8007750 <__libc_init_array+0x38>)
 800771e:	4c0d      	ldr	r4, [pc, #52]	; (8007754 <__libc_init_array+0x3c>)
 8007720:	1b64      	subs	r4, r4, r5
 8007722:	10a4      	asrs	r4, r4, #2
 8007724:	42a6      	cmp	r6, r4
 8007726:	d109      	bne.n	800773c <__libc_init_array+0x24>
 8007728:	f003 f9c6 	bl	800aab8 <_init>
 800772c:	2600      	movs	r6, #0
 800772e:	4d0a      	ldr	r5, [pc, #40]	; (8007758 <__libc_init_array+0x40>)
 8007730:	4c0a      	ldr	r4, [pc, #40]	; (800775c <__libc_init_array+0x44>)
 8007732:	1b64      	subs	r4, r4, r5
 8007734:	10a4      	asrs	r4, r4, #2
 8007736:	42a6      	cmp	r6, r4
 8007738:	d105      	bne.n	8007746 <__libc_init_array+0x2e>
 800773a:	bd70      	pop	{r4, r5, r6, pc}
 800773c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007740:	4798      	blx	r3
 8007742:	3601      	adds	r6, #1
 8007744:	e7ee      	b.n	8007724 <__libc_init_array+0xc>
 8007746:	f855 3b04 	ldr.w	r3, [r5], #4
 800774a:	4798      	blx	r3
 800774c:	3601      	adds	r6, #1
 800774e:	e7f2      	b.n	8007736 <__libc_init_array+0x1e>
 8007750:	0800b1a0 	.word	0x0800b1a0
 8007754:	0800b1a0 	.word	0x0800b1a0
 8007758:	0800b1a0 	.word	0x0800b1a0
 800775c:	0800b1a4 	.word	0x0800b1a4

08007760 <memcpy>:
 8007760:	440a      	add	r2, r1
 8007762:	4291      	cmp	r1, r2
 8007764:	f100 33ff 	add.w	r3, r0, #4294967295
 8007768:	d100      	bne.n	800776c <memcpy+0xc>
 800776a:	4770      	bx	lr
 800776c:	b510      	push	{r4, lr}
 800776e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007772:	4291      	cmp	r1, r2
 8007774:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007778:	d1f9      	bne.n	800776e <memcpy+0xe>
 800777a:	bd10      	pop	{r4, pc}

0800777c <memset>:
 800777c:	4603      	mov	r3, r0
 800777e:	4402      	add	r2, r0
 8007780:	4293      	cmp	r3, r2
 8007782:	d100      	bne.n	8007786 <memset+0xa>
 8007784:	4770      	bx	lr
 8007786:	f803 1b01 	strb.w	r1, [r3], #1
 800778a:	e7f9      	b.n	8007780 <memset+0x4>

0800778c <siprintf>:
 800778c:	b40e      	push	{r1, r2, r3}
 800778e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007792:	b500      	push	{lr}
 8007794:	b09c      	sub	sp, #112	; 0x70
 8007796:	ab1d      	add	r3, sp, #116	; 0x74
 8007798:	9002      	str	r0, [sp, #8]
 800779a:	9006      	str	r0, [sp, #24]
 800779c:	9107      	str	r1, [sp, #28]
 800779e:	9104      	str	r1, [sp, #16]
 80077a0:	4808      	ldr	r0, [pc, #32]	; (80077c4 <siprintf+0x38>)
 80077a2:	4909      	ldr	r1, [pc, #36]	; (80077c8 <siprintf+0x3c>)
 80077a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a8:	9105      	str	r1, [sp, #20]
 80077aa:	6800      	ldr	r0, [r0, #0]
 80077ac:	a902      	add	r1, sp, #8
 80077ae:	9301      	str	r3, [sp, #4]
 80077b0:	f002 f918 	bl	80099e4 <_svfiprintf_r>
 80077b4:	2200      	movs	r2, #0
 80077b6:	9b02      	ldr	r3, [sp, #8]
 80077b8:	701a      	strb	r2, [r3, #0]
 80077ba:	b01c      	add	sp, #112	; 0x70
 80077bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80077c0:	b003      	add	sp, #12
 80077c2:	4770      	bx	lr
 80077c4:	20000024 	.word	0x20000024
 80077c8:	ffff0208 	.word	0xffff0208

080077cc <strcat>:
 80077cc:	4602      	mov	r2, r0
 80077ce:	b510      	push	{r4, lr}
 80077d0:	7814      	ldrb	r4, [r2, #0]
 80077d2:	4613      	mov	r3, r2
 80077d4:	3201      	adds	r2, #1
 80077d6:	2c00      	cmp	r4, #0
 80077d8:	d1fa      	bne.n	80077d0 <strcat+0x4>
 80077da:	3b01      	subs	r3, #1
 80077dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077e4:	2a00      	cmp	r2, #0
 80077e6:	d1f9      	bne.n	80077dc <strcat+0x10>
 80077e8:	bd10      	pop	{r4, pc}

080077ea <strstr>:
 80077ea:	780a      	ldrb	r2, [r1, #0]
 80077ec:	b570      	push	{r4, r5, r6, lr}
 80077ee:	b96a      	cbnz	r2, 800780c <strstr+0x22>
 80077f0:	bd70      	pop	{r4, r5, r6, pc}
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d109      	bne.n	800780a <strstr+0x20>
 80077f6:	460c      	mov	r4, r1
 80077f8:	4605      	mov	r5, r0
 80077fa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0f6      	beq.n	80077f0 <strstr+0x6>
 8007802:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007806:	429e      	cmp	r6, r3
 8007808:	d0f7      	beq.n	80077fa <strstr+0x10>
 800780a:	3001      	adds	r0, #1
 800780c:	7803      	ldrb	r3, [r0, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1ef      	bne.n	80077f2 <strstr+0x8>
 8007812:	4618      	mov	r0, r3
 8007814:	e7ec      	b.n	80077f0 <strstr+0x6>

08007816 <sulp>:
 8007816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800781a:	460f      	mov	r7, r1
 800781c:	4690      	mov	r8, r2
 800781e:	f001 fe4d 	bl	80094bc <__ulp>
 8007822:	4604      	mov	r4, r0
 8007824:	460d      	mov	r5, r1
 8007826:	f1b8 0f00 	cmp.w	r8, #0
 800782a:	d011      	beq.n	8007850 <sulp+0x3a>
 800782c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007830:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007834:	2b00      	cmp	r3, #0
 8007836:	dd0b      	ble.n	8007850 <sulp+0x3a>
 8007838:	2400      	movs	r4, #0
 800783a:	051b      	lsls	r3, r3, #20
 800783c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007840:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007844:	4622      	mov	r2, r4
 8007846:	462b      	mov	r3, r5
 8007848:	f7f8 feb6 	bl	80005b8 <__aeabi_dmul>
 800784c:	4604      	mov	r4, r0
 800784e:	460d      	mov	r5, r1
 8007850:	4620      	mov	r0, r4
 8007852:	4629      	mov	r1, r5
 8007854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007858 <_strtod_l>:
 8007858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785c:	469b      	mov	fp, r3
 800785e:	2300      	movs	r3, #0
 8007860:	b09f      	sub	sp, #124	; 0x7c
 8007862:	931a      	str	r3, [sp, #104]	; 0x68
 8007864:	4b9e      	ldr	r3, [pc, #632]	; (8007ae0 <_strtod_l+0x288>)
 8007866:	4682      	mov	sl, r0
 8007868:	681f      	ldr	r7, [r3, #0]
 800786a:	460e      	mov	r6, r1
 800786c:	4638      	mov	r0, r7
 800786e:	9215      	str	r2, [sp, #84]	; 0x54
 8007870:	f7f8 fcde 	bl	8000230 <strlen>
 8007874:	f04f 0800 	mov.w	r8, #0
 8007878:	4604      	mov	r4, r0
 800787a:	f04f 0900 	mov.w	r9, #0
 800787e:	9619      	str	r6, [sp, #100]	; 0x64
 8007880:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007882:	781a      	ldrb	r2, [r3, #0]
 8007884:	2a2b      	cmp	r2, #43	; 0x2b
 8007886:	d04c      	beq.n	8007922 <_strtod_l+0xca>
 8007888:	d83a      	bhi.n	8007900 <_strtod_l+0xa8>
 800788a:	2a0d      	cmp	r2, #13
 800788c:	d833      	bhi.n	80078f6 <_strtod_l+0x9e>
 800788e:	2a08      	cmp	r2, #8
 8007890:	d833      	bhi.n	80078fa <_strtod_l+0xa2>
 8007892:	2a00      	cmp	r2, #0
 8007894:	d03d      	beq.n	8007912 <_strtod_l+0xba>
 8007896:	2300      	movs	r3, #0
 8007898:	930a      	str	r3, [sp, #40]	; 0x28
 800789a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800789c:	782b      	ldrb	r3, [r5, #0]
 800789e:	2b30      	cmp	r3, #48	; 0x30
 80078a0:	f040 80aa 	bne.w	80079f8 <_strtod_l+0x1a0>
 80078a4:	786b      	ldrb	r3, [r5, #1]
 80078a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80078aa:	2b58      	cmp	r3, #88	; 0x58
 80078ac:	d166      	bne.n	800797c <_strtod_l+0x124>
 80078ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b0:	4650      	mov	r0, sl
 80078b2:	9301      	str	r3, [sp, #4]
 80078b4:	ab1a      	add	r3, sp, #104	; 0x68
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	4a8a      	ldr	r2, [pc, #552]	; (8007ae4 <_strtod_l+0x28c>)
 80078ba:	f8cd b008 	str.w	fp, [sp, #8]
 80078be:	ab1b      	add	r3, sp, #108	; 0x6c
 80078c0:	a919      	add	r1, sp, #100	; 0x64
 80078c2:	f000 ff73 	bl	80087ac <__gethex>
 80078c6:	f010 0607 	ands.w	r6, r0, #7
 80078ca:	4604      	mov	r4, r0
 80078cc:	d005      	beq.n	80078da <_strtod_l+0x82>
 80078ce:	2e06      	cmp	r6, #6
 80078d0:	d129      	bne.n	8007926 <_strtod_l+0xce>
 80078d2:	2300      	movs	r3, #0
 80078d4:	3501      	adds	r5, #1
 80078d6:	9519      	str	r5, [sp, #100]	; 0x64
 80078d8:	930a      	str	r3, [sp, #40]	; 0x28
 80078da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f040 858a 	bne.w	80083f6 <_strtod_l+0xb9e>
 80078e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078e4:	b1d3      	cbz	r3, 800791c <_strtod_l+0xc4>
 80078e6:	4642      	mov	r2, r8
 80078e8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80078ec:	4610      	mov	r0, r2
 80078ee:	4619      	mov	r1, r3
 80078f0:	b01f      	add	sp, #124	; 0x7c
 80078f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f6:	2a20      	cmp	r2, #32
 80078f8:	d1cd      	bne.n	8007896 <_strtod_l+0x3e>
 80078fa:	3301      	adds	r3, #1
 80078fc:	9319      	str	r3, [sp, #100]	; 0x64
 80078fe:	e7bf      	b.n	8007880 <_strtod_l+0x28>
 8007900:	2a2d      	cmp	r2, #45	; 0x2d
 8007902:	d1c8      	bne.n	8007896 <_strtod_l+0x3e>
 8007904:	2201      	movs	r2, #1
 8007906:	920a      	str	r2, [sp, #40]	; 0x28
 8007908:	1c5a      	adds	r2, r3, #1
 800790a:	9219      	str	r2, [sp, #100]	; 0x64
 800790c:	785b      	ldrb	r3, [r3, #1]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1c3      	bne.n	800789a <_strtod_l+0x42>
 8007912:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007914:	9619      	str	r6, [sp, #100]	; 0x64
 8007916:	2b00      	cmp	r3, #0
 8007918:	f040 856b 	bne.w	80083f2 <_strtod_l+0xb9a>
 800791c:	4642      	mov	r2, r8
 800791e:	464b      	mov	r3, r9
 8007920:	e7e4      	b.n	80078ec <_strtod_l+0x94>
 8007922:	2200      	movs	r2, #0
 8007924:	e7ef      	b.n	8007906 <_strtod_l+0xae>
 8007926:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007928:	b13a      	cbz	r2, 800793a <_strtod_l+0xe2>
 800792a:	2135      	movs	r1, #53	; 0x35
 800792c:	a81c      	add	r0, sp, #112	; 0x70
 800792e:	f001 fec9 	bl	80096c4 <__copybits>
 8007932:	4650      	mov	r0, sl
 8007934:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007936:	f001 fa91 	bl	8008e5c <_Bfree>
 800793a:	3e01      	subs	r6, #1
 800793c:	2e04      	cmp	r6, #4
 800793e:	d806      	bhi.n	800794e <_strtod_l+0xf6>
 8007940:	e8df f006 	tbb	[pc, r6]
 8007944:	1714030a 	.word	0x1714030a
 8007948:	0a          	.byte	0x0a
 8007949:	00          	.byte	0x00
 800794a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800794e:	0721      	lsls	r1, r4, #28
 8007950:	d5c3      	bpl.n	80078da <_strtod_l+0x82>
 8007952:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007956:	e7c0      	b.n	80078da <_strtod_l+0x82>
 8007958:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800795a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800795e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007962:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007966:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800796a:	e7f0      	b.n	800794e <_strtod_l+0xf6>
 800796c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007ae8 <_strtod_l+0x290>
 8007970:	e7ed      	b.n	800794e <_strtod_l+0xf6>
 8007972:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007976:	f04f 38ff 	mov.w	r8, #4294967295
 800797a:	e7e8      	b.n	800794e <_strtod_l+0xf6>
 800797c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	9219      	str	r2, [sp, #100]	; 0x64
 8007982:	785b      	ldrb	r3, [r3, #1]
 8007984:	2b30      	cmp	r3, #48	; 0x30
 8007986:	d0f9      	beq.n	800797c <_strtod_l+0x124>
 8007988:	2b00      	cmp	r3, #0
 800798a:	d0a6      	beq.n	80078da <_strtod_l+0x82>
 800798c:	2301      	movs	r3, #1
 800798e:	9307      	str	r3, [sp, #28]
 8007990:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007992:	220a      	movs	r2, #10
 8007994:	9308      	str	r3, [sp, #32]
 8007996:	2300      	movs	r3, #0
 8007998:	469b      	mov	fp, r3
 800799a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800799e:	9819      	ldr	r0, [sp, #100]	; 0x64
 80079a0:	7805      	ldrb	r5, [r0, #0]
 80079a2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80079a6:	b2d9      	uxtb	r1, r3
 80079a8:	2909      	cmp	r1, #9
 80079aa:	d927      	bls.n	80079fc <_strtod_l+0x1a4>
 80079ac:	4622      	mov	r2, r4
 80079ae:	4639      	mov	r1, r7
 80079b0:	f002 fc20 	bl	800a1f4 <strncmp>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d033      	beq.n	8007a20 <_strtod_l+0x1c8>
 80079b8:	2000      	movs	r0, #0
 80079ba:	462a      	mov	r2, r5
 80079bc:	465c      	mov	r4, fp
 80079be:	4603      	mov	r3, r0
 80079c0:	9004      	str	r0, [sp, #16]
 80079c2:	2a65      	cmp	r2, #101	; 0x65
 80079c4:	d001      	beq.n	80079ca <_strtod_l+0x172>
 80079c6:	2a45      	cmp	r2, #69	; 0x45
 80079c8:	d114      	bne.n	80079f4 <_strtod_l+0x19c>
 80079ca:	b91c      	cbnz	r4, 80079d4 <_strtod_l+0x17c>
 80079cc:	9a07      	ldr	r2, [sp, #28]
 80079ce:	4302      	orrs	r2, r0
 80079d0:	d09f      	beq.n	8007912 <_strtod_l+0xba>
 80079d2:	2400      	movs	r4, #0
 80079d4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80079d6:	1c72      	adds	r2, r6, #1
 80079d8:	9219      	str	r2, [sp, #100]	; 0x64
 80079da:	7872      	ldrb	r2, [r6, #1]
 80079dc:	2a2b      	cmp	r2, #43	; 0x2b
 80079de:	d079      	beq.n	8007ad4 <_strtod_l+0x27c>
 80079e0:	2a2d      	cmp	r2, #45	; 0x2d
 80079e2:	f000 8083 	beq.w	8007aec <_strtod_l+0x294>
 80079e6:	2700      	movs	r7, #0
 80079e8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80079ec:	2909      	cmp	r1, #9
 80079ee:	f240 8083 	bls.w	8007af8 <_strtod_l+0x2a0>
 80079f2:	9619      	str	r6, [sp, #100]	; 0x64
 80079f4:	2500      	movs	r5, #0
 80079f6:	e09f      	b.n	8007b38 <_strtod_l+0x2e0>
 80079f8:	2300      	movs	r3, #0
 80079fa:	e7c8      	b.n	800798e <_strtod_l+0x136>
 80079fc:	f1bb 0f08 	cmp.w	fp, #8
 8007a00:	bfd5      	itete	le
 8007a02:	9906      	ldrle	r1, [sp, #24]
 8007a04:	9905      	ldrgt	r1, [sp, #20]
 8007a06:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a0a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007a0e:	f100 0001 	add.w	r0, r0, #1
 8007a12:	bfd4      	ite	le
 8007a14:	9306      	strle	r3, [sp, #24]
 8007a16:	9305      	strgt	r3, [sp, #20]
 8007a18:	f10b 0b01 	add.w	fp, fp, #1
 8007a1c:	9019      	str	r0, [sp, #100]	; 0x64
 8007a1e:	e7be      	b.n	800799e <_strtod_l+0x146>
 8007a20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a22:	191a      	adds	r2, r3, r4
 8007a24:	9219      	str	r2, [sp, #100]	; 0x64
 8007a26:	5d1a      	ldrb	r2, [r3, r4]
 8007a28:	f1bb 0f00 	cmp.w	fp, #0
 8007a2c:	d036      	beq.n	8007a9c <_strtod_l+0x244>
 8007a2e:	465c      	mov	r4, fp
 8007a30:	9004      	str	r0, [sp, #16]
 8007a32:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007a36:	2b09      	cmp	r3, #9
 8007a38:	d912      	bls.n	8007a60 <_strtod_l+0x208>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e7c1      	b.n	80079c2 <_strtod_l+0x16a>
 8007a3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a40:	3001      	adds	r0, #1
 8007a42:	1c5a      	adds	r2, r3, #1
 8007a44:	9219      	str	r2, [sp, #100]	; 0x64
 8007a46:	785a      	ldrb	r2, [r3, #1]
 8007a48:	2a30      	cmp	r2, #48	; 0x30
 8007a4a:	d0f8      	beq.n	8007a3e <_strtod_l+0x1e6>
 8007a4c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	f200 84d5 	bhi.w	8008400 <_strtod_l+0xba8>
 8007a56:	9004      	str	r0, [sp, #16]
 8007a58:	2000      	movs	r0, #0
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a5e:	9308      	str	r3, [sp, #32]
 8007a60:	3a30      	subs	r2, #48	; 0x30
 8007a62:	f100 0301 	add.w	r3, r0, #1
 8007a66:	d013      	beq.n	8007a90 <_strtod_l+0x238>
 8007a68:	9904      	ldr	r1, [sp, #16]
 8007a6a:	1905      	adds	r5, r0, r4
 8007a6c:	4419      	add	r1, r3
 8007a6e:	9104      	str	r1, [sp, #16]
 8007a70:	4623      	mov	r3, r4
 8007a72:	210a      	movs	r1, #10
 8007a74:	42ab      	cmp	r3, r5
 8007a76:	d113      	bne.n	8007aa0 <_strtod_l+0x248>
 8007a78:	1823      	adds	r3, r4, r0
 8007a7a:	2b08      	cmp	r3, #8
 8007a7c:	f104 0401 	add.w	r4, r4, #1
 8007a80:	4404      	add	r4, r0
 8007a82:	dc1b      	bgt.n	8007abc <_strtod_l+0x264>
 8007a84:	230a      	movs	r3, #10
 8007a86:	9906      	ldr	r1, [sp, #24]
 8007a88:	fb03 2301 	mla	r3, r3, r1, r2
 8007a8c:	9306      	str	r3, [sp, #24]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007a92:	4618      	mov	r0, r3
 8007a94:	1c51      	adds	r1, r2, #1
 8007a96:	9119      	str	r1, [sp, #100]	; 0x64
 8007a98:	7852      	ldrb	r2, [r2, #1]
 8007a9a:	e7ca      	b.n	8007a32 <_strtod_l+0x1da>
 8007a9c:	4658      	mov	r0, fp
 8007a9e:	e7d3      	b.n	8007a48 <_strtod_l+0x1f0>
 8007aa0:	2b08      	cmp	r3, #8
 8007aa2:	dc04      	bgt.n	8007aae <_strtod_l+0x256>
 8007aa4:	9f06      	ldr	r7, [sp, #24]
 8007aa6:	434f      	muls	r7, r1
 8007aa8:	9706      	str	r7, [sp, #24]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	e7e2      	b.n	8007a74 <_strtod_l+0x21c>
 8007aae:	1c5f      	adds	r7, r3, #1
 8007ab0:	2f10      	cmp	r7, #16
 8007ab2:	bfde      	ittt	le
 8007ab4:	9f05      	ldrle	r7, [sp, #20]
 8007ab6:	434f      	mulle	r7, r1
 8007ab8:	9705      	strle	r7, [sp, #20]
 8007aba:	e7f6      	b.n	8007aaa <_strtod_l+0x252>
 8007abc:	2c10      	cmp	r4, #16
 8007abe:	bfdf      	itttt	le
 8007ac0:	230a      	movle	r3, #10
 8007ac2:	9905      	ldrle	r1, [sp, #20]
 8007ac4:	fb03 2301 	mlale	r3, r3, r1, r2
 8007ac8:	9305      	strle	r3, [sp, #20]
 8007aca:	e7e0      	b.n	8007a8e <_strtod_l+0x236>
 8007acc:	2300      	movs	r3, #0
 8007ace:	9304      	str	r3, [sp, #16]
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e77b      	b.n	80079cc <_strtod_l+0x174>
 8007ad4:	2700      	movs	r7, #0
 8007ad6:	1cb2      	adds	r2, r6, #2
 8007ad8:	9219      	str	r2, [sp, #100]	; 0x64
 8007ada:	78b2      	ldrb	r2, [r6, #2]
 8007adc:	e784      	b.n	80079e8 <_strtod_l+0x190>
 8007ade:	bf00      	nop
 8007ae0:	0800af98 	.word	0x0800af98
 8007ae4:	0800ad1c 	.word	0x0800ad1c
 8007ae8:	7ff00000 	.word	0x7ff00000
 8007aec:	2701      	movs	r7, #1
 8007aee:	e7f2      	b.n	8007ad6 <_strtod_l+0x27e>
 8007af0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007af2:	1c51      	adds	r1, r2, #1
 8007af4:	9119      	str	r1, [sp, #100]	; 0x64
 8007af6:	7852      	ldrb	r2, [r2, #1]
 8007af8:	2a30      	cmp	r2, #48	; 0x30
 8007afa:	d0f9      	beq.n	8007af0 <_strtod_l+0x298>
 8007afc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007b00:	2908      	cmp	r1, #8
 8007b02:	f63f af77 	bhi.w	80079f4 <_strtod_l+0x19c>
 8007b06:	f04f 0e0a 	mov.w	lr, #10
 8007b0a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007b0e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b10:	9209      	str	r2, [sp, #36]	; 0x24
 8007b12:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b14:	1c51      	adds	r1, r2, #1
 8007b16:	9119      	str	r1, [sp, #100]	; 0x64
 8007b18:	7852      	ldrb	r2, [r2, #1]
 8007b1a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007b1e:	2d09      	cmp	r5, #9
 8007b20:	d935      	bls.n	8007b8e <_strtod_l+0x336>
 8007b22:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007b24:	1b49      	subs	r1, r1, r5
 8007b26:	2908      	cmp	r1, #8
 8007b28:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007b2c:	dc02      	bgt.n	8007b34 <_strtod_l+0x2dc>
 8007b2e:	4565      	cmp	r5, ip
 8007b30:	bfa8      	it	ge
 8007b32:	4665      	movge	r5, ip
 8007b34:	b107      	cbz	r7, 8007b38 <_strtod_l+0x2e0>
 8007b36:	426d      	negs	r5, r5
 8007b38:	2c00      	cmp	r4, #0
 8007b3a:	d14c      	bne.n	8007bd6 <_strtod_l+0x37e>
 8007b3c:	9907      	ldr	r1, [sp, #28]
 8007b3e:	4301      	orrs	r1, r0
 8007b40:	f47f aecb 	bne.w	80078da <_strtod_l+0x82>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f47f aee4 	bne.w	8007912 <_strtod_l+0xba>
 8007b4a:	2a69      	cmp	r2, #105	; 0x69
 8007b4c:	d026      	beq.n	8007b9c <_strtod_l+0x344>
 8007b4e:	dc23      	bgt.n	8007b98 <_strtod_l+0x340>
 8007b50:	2a49      	cmp	r2, #73	; 0x49
 8007b52:	d023      	beq.n	8007b9c <_strtod_l+0x344>
 8007b54:	2a4e      	cmp	r2, #78	; 0x4e
 8007b56:	f47f aedc 	bne.w	8007912 <_strtod_l+0xba>
 8007b5a:	499d      	ldr	r1, [pc, #628]	; (8007dd0 <_strtod_l+0x578>)
 8007b5c:	a819      	add	r0, sp, #100	; 0x64
 8007b5e:	f001 f873 	bl	8008c48 <__match>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	f43f aed5 	beq.w	8007912 <_strtod_l+0xba>
 8007b68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2b28      	cmp	r3, #40	; 0x28
 8007b6e:	d12c      	bne.n	8007bca <_strtod_l+0x372>
 8007b70:	4998      	ldr	r1, [pc, #608]	; (8007dd4 <_strtod_l+0x57c>)
 8007b72:	aa1c      	add	r2, sp, #112	; 0x70
 8007b74:	a819      	add	r0, sp, #100	; 0x64
 8007b76:	f001 f87b 	bl	8008c70 <__hexnan>
 8007b7a:	2805      	cmp	r0, #5
 8007b7c:	d125      	bne.n	8007bca <_strtod_l+0x372>
 8007b7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b80:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007b84:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007b88:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007b8c:	e6a5      	b.n	80078da <_strtod_l+0x82>
 8007b8e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007b92:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007b96:	e7bc      	b.n	8007b12 <_strtod_l+0x2ba>
 8007b98:	2a6e      	cmp	r2, #110	; 0x6e
 8007b9a:	e7dc      	b.n	8007b56 <_strtod_l+0x2fe>
 8007b9c:	498e      	ldr	r1, [pc, #568]	; (8007dd8 <_strtod_l+0x580>)
 8007b9e:	a819      	add	r0, sp, #100	; 0x64
 8007ba0:	f001 f852 	bl	8008c48 <__match>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	f43f aeb4 	beq.w	8007912 <_strtod_l+0xba>
 8007baa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bac:	498b      	ldr	r1, [pc, #556]	; (8007ddc <_strtod_l+0x584>)
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	a819      	add	r0, sp, #100	; 0x64
 8007bb2:	9319      	str	r3, [sp, #100]	; 0x64
 8007bb4:	f001 f848 	bl	8008c48 <__match>
 8007bb8:	b910      	cbnz	r0, 8007bc0 <_strtod_l+0x368>
 8007bba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	9319      	str	r3, [sp, #100]	; 0x64
 8007bc0:	f04f 0800 	mov.w	r8, #0
 8007bc4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007de0 <_strtod_l+0x588>
 8007bc8:	e687      	b.n	80078da <_strtod_l+0x82>
 8007bca:	4886      	ldr	r0, [pc, #536]	; (8007de4 <_strtod_l+0x58c>)
 8007bcc:	f002 faf8 	bl	800a1c0 <nan>
 8007bd0:	4680      	mov	r8, r0
 8007bd2:	4689      	mov	r9, r1
 8007bd4:	e681      	b.n	80078da <_strtod_l+0x82>
 8007bd6:	9b04      	ldr	r3, [sp, #16]
 8007bd8:	f1bb 0f00 	cmp.w	fp, #0
 8007bdc:	bf08      	it	eq
 8007bde:	46a3      	moveq	fp, r4
 8007be0:	1aeb      	subs	r3, r5, r3
 8007be2:	2c10      	cmp	r4, #16
 8007be4:	9806      	ldr	r0, [sp, #24]
 8007be6:	4626      	mov	r6, r4
 8007be8:	9307      	str	r3, [sp, #28]
 8007bea:	bfa8      	it	ge
 8007bec:	2610      	movge	r6, #16
 8007bee:	f7f8 fc69 	bl	80004c4 <__aeabi_ui2d>
 8007bf2:	2c09      	cmp	r4, #9
 8007bf4:	4680      	mov	r8, r0
 8007bf6:	4689      	mov	r9, r1
 8007bf8:	dd13      	ble.n	8007c22 <_strtod_l+0x3ca>
 8007bfa:	4b7b      	ldr	r3, [pc, #492]	; (8007de8 <_strtod_l+0x590>)
 8007bfc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c00:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007c04:	f7f8 fcd8 	bl	80005b8 <__aeabi_dmul>
 8007c08:	4680      	mov	r8, r0
 8007c0a:	9805      	ldr	r0, [sp, #20]
 8007c0c:	4689      	mov	r9, r1
 8007c0e:	f7f8 fc59 	bl	80004c4 <__aeabi_ui2d>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	4640      	mov	r0, r8
 8007c18:	4649      	mov	r1, r9
 8007c1a:	f7f8 fb17 	bl	800024c <__adddf3>
 8007c1e:	4680      	mov	r8, r0
 8007c20:	4689      	mov	r9, r1
 8007c22:	2c0f      	cmp	r4, #15
 8007c24:	dc36      	bgt.n	8007c94 <_strtod_l+0x43c>
 8007c26:	9b07      	ldr	r3, [sp, #28]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f43f ae56 	beq.w	80078da <_strtod_l+0x82>
 8007c2e:	dd22      	ble.n	8007c76 <_strtod_l+0x41e>
 8007c30:	2b16      	cmp	r3, #22
 8007c32:	dc09      	bgt.n	8007c48 <_strtod_l+0x3f0>
 8007c34:	496c      	ldr	r1, [pc, #432]	; (8007de8 <_strtod_l+0x590>)
 8007c36:	4642      	mov	r2, r8
 8007c38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c3c:	464b      	mov	r3, r9
 8007c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c42:	f7f8 fcb9 	bl	80005b8 <__aeabi_dmul>
 8007c46:	e7c3      	b.n	8007bd0 <_strtod_l+0x378>
 8007c48:	9a07      	ldr	r2, [sp, #28]
 8007c4a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	db20      	blt.n	8007c94 <_strtod_l+0x43c>
 8007c52:	4d65      	ldr	r5, [pc, #404]	; (8007de8 <_strtod_l+0x590>)
 8007c54:	f1c4 040f 	rsb	r4, r4, #15
 8007c58:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007c5c:	4642      	mov	r2, r8
 8007c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c62:	464b      	mov	r3, r9
 8007c64:	f7f8 fca8 	bl	80005b8 <__aeabi_dmul>
 8007c68:	9b07      	ldr	r3, [sp, #28]
 8007c6a:	1b1c      	subs	r4, r3, r4
 8007c6c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007c70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c74:	e7e5      	b.n	8007c42 <_strtod_l+0x3ea>
 8007c76:	9b07      	ldr	r3, [sp, #28]
 8007c78:	3316      	adds	r3, #22
 8007c7a:	db0b      	blt.n	8007c94 <_strtod_l+0x43c>
 8007c7c:	9b04      	ldr	r3, [sp, #16]
 8007c7e:	4640      	mov	r0, r8
 8007c80:	1b5d      	subs	r5, r3, r5
 8007c82:	4b59      	ldr	r3, [pc, #356]	; (8007de8 <_strtod_l+0x590>)
 8007c84:	4649      	mov	r1, r9
 8007c86:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007c8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c8e:	f7f8 fdbd 	bl	800080c <__aeabi_ddiv>
 8007c92:	e79d      	b.n	8007bd0 <_strtod_l+0x378>
 8007c94:	9b07      	ldr	r3, [sp, #28]
 8007c96:	1ba6      	subs	r6, r4, r6
 8007c98:	441e      	add	r6, r3
 8007c9a:	2e00      	cmp	r6, #0
 8007c9c:	dd74      	ble.n	8007d88 <_strtod_l+0x530>
 8007c9e:	f016 030f 	ands.w	r3, r6, #15
 8007ca2:	d00a      	beq.n	8007cba <_strtod_l+0x462>
 8007ca4:	4950      	ldr	r1, [pc, #320]	; (8007de8 <_strtod_l+0x590>)
 8007ca6:	4642      	mov	r2, r8
 8007ca8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cb0:	464b      	mov	r3, r9
 8007cb2:	f7f8 fc81 	bl	80005b8 <__aeabi_dmul>
 8007cb6:	4680      	mov	r8, r0
 8007cb8:	4689      	mov	r9, r1
 8007cba:	f036 060f 	bics.w	r6, r6, #15
 8007cbe:	d052      	beq.n	8007d66 <_strtod_l+0x50e>
 8007cc0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007cc4:	dd27      	ble.n	8007d16 <_strtod_l+0x4be>
 8007cc6:	f04f 0b00 	mov.w	fp, #0
 8007cca:	f8cd b010 	str.w	fp, [sp, #16]
 8007cce:	f8cd b020 	str.w	fp, [sp, #32]
 8007cd2:	f8cd b018 	str.w	fp, [sp, #24]
 8007cd6:	2322      	movs	r3, #34	; 0x22
 8007cd8:	f04f 0800 	mov.w	r8, #0
 8007cdc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007de0 <_strtod_l+0x588>
 8007ce0:	f8ca 3000 	str.w	r3, [sl]
 8007ce4:	9b08      	ldr	r3, [sp, #32]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f43f adf7 	beq.w	80078da <_strtod_l+0x82>
 8007cec:	4650      	mov	r0, sl
 8007cee:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007cf0:	f001 f8b4 	bl	8008e5c <_Bfree>
 8007cf4:	4650      	mov	r0, sl
 8007cf6:	9906      	ldr	r1, [sp, #24]
 8007cf8:	f001 f8b0 	bl	8008e5c <_Bfree>
 8007cfc:	4650      	mov	r0, sl
 8007cfe:	9904      	ldr	r1, [sp, #16]
 8007d00:	f001 f8ac 	bl	8008e5c <_Bfree>
 8007d04:	4650      	mov	r0, sl
 8007d06:	9908      	ldr	r1, [sp, #32]
 8007d08:	f001 f8a8 	bl	8008e5c <_Bfree>
 8007d0c:	4659      	mov	r1, fp
 8007d0e:	4650      	mov	r0, sl
 8007d10:	f001 f8a4 	bl	8008e5c <_Bfree>
 8007d14:	e5e1      	b.n	80078da <_strtod_l+0x82>
 8007d16:	4b35      	ldr	r3, [pc, #212]	; (8007dec <_strtod_l+0x594>)
 8007d18:	4640      	mov	r0, r8
 8007d1a:	9305      	str	r3, [sp, #20]
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	4649      	mov	r1, r9
 8007d20:	461f      	mov	r7, r3
 8007d22:	1136      	asrs	r6, r6, #4
 8007d24:	2e01      	cmp	r6, #1
 8007d26:	dc21      	bgt.n	8007d6c <_strtod_l+0x514>
 8007d28:	b10b      	cbz	r3, 8007d2e <_strtod_l+0x4d6>
 8007d2a:	4680      	mov	r8, r0
 8007d2c:	4689      	mov	r9, r1
 8007d2e:	4b2f      	ldr	r3, [pc, #188]	; (8007dec <_strtod_l+0x594>)
 8007d30:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007d34:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007d38:	4642      	mov	r2, r8
 8007d3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d3e:	464b      	mov	r3, r9
 8007d40:	f7f8 fc3a 	bl	80005b8 <__aeabi_dmul>
 8007d44:	4b26      	ldr	r3, [pc, #152]	; (8007de0 <_strtod_l+0x588>)
 8007d46:	460a      	mov	r2, r1
 8007d48:	400b      	ands	r3, r1
 8007d4a:	4929      	ldr	r1, [pc, #164]	; (8007df0 <_strtod_l+0x598>)
 8007d4c:	4680      	mov	r8, r0
 8007d4e:	428b      	cmp	r3, r1
 8007d50:	d8b9      	bhi.n	8007cc6 <_strtod_l+0x46e>
 8007d52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007d56:	428b      	cmp	r3, r1
 8007d58:	bf86      	itte	hi
 8007d5a:	f04f 38ff 	movhi.w	r8, #4294967295
 8007d5e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007df4 <_strtod_l+0x59c>
 8007d62:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007d66:	2300      	movs	r3, #0
 8007d68:	9305      	str	r3, [sp, #20]
 8007d6a:	e07f      	b.n	8007e6c <_strtod_l+0x614>
 8007d6c:	07f2      	lsls	r2, r6, #31
 8007d6e:	d505      	bpl.n	8007d7c <_strtod_l+0x524>
 8007d70:	9b05      	ldr	r3, [sp, #20]
 8007d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d76:	f7f8 fc1f 	bl	80005b8 <__aeabi_dmul>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	9a05      	ldr	r2, [sp, #20]
 8007d7e:	3701      	adds	r7, #1
 8007d80:	3208      	adds	r2, #8
 8007d82:	1076      	asrs	r6, r6, #1
 8007d84:	9205      	str	r2, [sp, #20]
 8007d86:	e7cd      	b.n	8007d24 <_strtod_l+0x4cc>
 8007d88:	d0ed      	beq.n	8007d66 <_strtod_l+0x50e>
 8007d8a:	4276      	negs	r6, r6
 8007d8c:	f016 020f 	ands.w	r2, r6, #15
 8007d90:	d00a      	beq.n	8007da8 <_strtod_l+0x550>
 8007d92:	4b15      	ldr	r3, [pc, #84]	; (8007de8 <_strtod_l+0x590>)
 8007d94:	4640      	mov	r0, r8
 8007d96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d9a:	4649      	mov	r1, r9
 8007d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da0:	f7f8 fd34 	bl	800080c <__aeabi_ddiv>
 8007da4:	4680      	mov	r8, r0
 8007da6:	4689      	mov	r9, r1
 8007da8:	1136      	asrs	r6, r6, #4
 8007daa:	d0dc      	beq.n	8007d66 <_strtod_l+0x50e>
 8007dac:	2e1f      	cmp	r6, #31
 8007dae:	dd23      	ble.n	8007df8 <_strtod_l+0x5a0>
 8007db0:	f04f 0b00 	mov.w	fp, #0
 8007db4:	f8cd b010 	str.w	fp, [sp, #16]
 8007db8:	f8cd b020 	str.w	fp, [sp, #32]
 8007dbc:	f8cd b018 	str.w	fp, [sp, #24]
 8007dc0:	2322      	movs	r3, #34	; 0x22
 8007dc2:	f04f 0800 	mov.w	r8, #0
 8007dc6:	f04f 0900 	mov.w	r9, #0
 8007dca:	f8ca 3000 	str.w	r3, [sl]
 8007dce:	e789      	b.n	8007ce4 <_strtod_l+0x48c>
 8007dd0:	0800ad19 	.word	0x0800ad19
 8007dd4:	0800ad30 	.word	0x0800ad30
 8007dd8:	0800ad10 	.word	0x0800ad10
 8007ddc:	0800ad13 	.word	0x0800ad13
 8007de0:	7ff00000 	.word	0x7ff00000
 8007de4:	0800ae1f 	.word	0x0800ae1f
 8007de8:	0800b030 	.word	0x0800b030
 8007dec:	0800b008 	.word	0x0800b008
 8007df0:	7ca00000 	.word	0x7ca00000
 8007df4:	7fefffff 	.word	0x7fefffff
 8007df8:	f016 0310 	ands.w	r3, r6, #16
 8007dfc:	bf18      	it	ne
 8007dfe:	236a      	movne	r3, #106	; 0x6a
 8007e00:	4640      	mov	r0, r8
 8007e02:	9305      	str	r3, [sp, #20]
 8007e04:	4649      	mov	r1, r9
 8007e06:	2300      	movs	r3, #0
 8007e08:	4fb0      	ldr	r7, [pc, #704]	; (80080cc <_strtod_l+0x874>)
 8007e0a:	07f2      	lsls	r2, r6, #31
 8007e0c:	d504      	bpl.n	8007e18 <_strtod_l+0x5c0>
 8007e0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e12:	f7f8 fbd1 	bl	80005b8 <__aeabi_dmul>
 8007e16:	2301      	movs	r3, #1
 8007e18:	1076      	asrs	r6, r6, #1
 8007e1a:	f107 0708 	add.w	r7, r7, #8
 8007e1e:	d1f4      	bne.n	8007e0a <_strtod_l+0x5b2>
 8007e20:	b10b      	cbz	r3, 8007e26 <_strtod_l+0x5ce>
 8007e22:	4680      	mov	r8, r0
 8007e24:	4689      	mov	r9, r1
 8007e26:	9b05      	ldr	r3, [sp, #20]
 8007e28:	b1c3      	cbz	r3, 8007e5c <_strtod_l+0x604>
 8007e2a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007e2e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	4649      	mov	r1, r9
 8007e36:	dd11      	ble.n	8007e5c <_strtod_l+0x604>
 8007e38:	2b1f      	cmp	r3, #31
 8007e3a:	f340 8127 	ble.w	800808c <_strtod_l+0x834>
 8007e3e:	2b34      	cmp	r3, #52	; 0x34
 8007e40:	bfd8      	it	le
 8007e42:	f04f 33ff 	movle.w	r3, #4294967295
 8007e46:	f04f 0800 	mov.w	r8, #0
 8007e4a:	bfcf      	iteee	gt
 8007e4c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007e50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007e54:	fa03 f202 	lslle.w	r2, r3, r2
 8007e58:	ea02 0901 	andle.w	r9, r2, r1
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	2300      	movs	r3, #0
 8007e60:	4640      	mov	r0, r8
 8007e62:	4649      	mov	r1, r9
 8007e64:	f7f8 fe10 	bl	8000a88 <__aeabi_dcmpeq>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d1a1      	bne.n	8007db0 <_strtod_l+0x558>
 8007e6c:	9b06      	ldr	r3, [sp, #24]
 8007e6e:	465a      	mov	r2, fp
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	4650      	mov	r0, sl
 8007e74:	4623      	mov	r3, r4
 8007e76:	9908      	ldr	r1, [sp, #32]
 8007e78:	f001 f858 	bl	8008f2c <__s2b>
 8007e7c:	9008      	str	r0, [sp, #32]
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	f43f af21 	beq.w	8007cc6 <_strtod_l+0x46e>
 8007e84:	9b04      	ldr	r3, [sp, #16]
 8007e86:	f04f 0b00 	mov.w	fp, #0
 8007e8a:	1b5d      	subs	r5, r3, r5
 8007e8c:	9b07      	ldr	r3, [sp, #28]
 8007e8e:	f8cd b010 	str.w	fp, [sp, #16]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	bfb4      	ite	lt
 8007e96:	462b      	movlt	r3, r5
 8007e98:	2300      	movge	r3, #0
 8007e9a:	930e      	str	r3, [sp, #56]	; 0x38
 8007e9c:	9b07      	ldr	r3, [sp, #28]
 8007e9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007ea2:	9314      	str	r3, [sp, #80]	; 0x50
 8007ea4:	9b08      	ldr	r3, [sp, #32]
 8007ea6:	4650      	mov	r0, sl
 8007ea8:	6859      	ldr	r1, [r3, #4]
 8007eaa:	f000 ff97 	bl	8008ddc <_Balloc>
 8007eae:	9006      	str	r0, [sp, #24]
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	f43f af10 	beq.w	8007cd6 <_strtod_l+0x47e>
 8007eb6:	9b08      	ldr	r3, [sp, #32]
 8007eb8:	300c      	adds	r0, #12
 8007eba:	691a      	ldr	r2, [r3, #16]
 8007ebc:	f103 010c 	add.w	r1, r3, #12
 8007ec0:	3202      	adds	r2, #2
 8007ec2:	0092      	lsls	r2, r2, #2
 8007ec4:	f7ff fc4c 	bl	8007760 <memcpy>
 8007ec8:	ab1c      	add	r3, sp, #112	; 0x70
 8007eca:	9301      	str	r3, [sp, #4]
 8007ecc:	ab1b      	add	r3, sp, #108	; 0x6c
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	4642      	mov	r2, r8
 8007ed2:	464b      	mov	r3, r9
 8007ed4:	4650      	mov	r0, sl
 8007ed6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007eda:	f001 fb69 	bl	80095b0 <__d2b>
 8007ede:	901a      	str	r0, [sp, #104]	; 0x68
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	f43f aef8 	beq.w	8007cd6 <_strtod_l+0x47e>
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	4650      	mov	r0, sl
 8007eea:	f001 f8b7 	bl	800905c <__i2b>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	9004      	str	r0, [sp, #16]
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	f43f aeef 	beq.w	8007cd6 <_strtod_l+0x47e>
 8007ef8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007efa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007efc:	2d00      	cmp	r5, #0
 8007efe:	bfab      	itete	ge
 8007f00:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007f02:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007f04:	18ee      	addge	r6, r5, r3
 8007f06:	1b5c      	sublt	r4, r3, r5
 8007f08:	9b05      	ldr	r3, [sp, #20]
 8007f0a:	bfa8      	it	ge
 8007f0c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8007f0e:	eba5 0503 	sub.w	r5, r5, r3
 8007f12:	4415      	add	r5, r2
 8007f14:	4b6e      	ldr	r3, [pc, #440]	; (80080d0 <_strtod_l+0x878>)
 8007f16:	f105 35ff 	add.w	r5, r5, #4294967295
 8007f1a:	bfb8      	it	lt
 8007f1c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007f1e:	429d      	cmp	r5, r3
 8007f20:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007f24:	f280 80c4 	bge.w	80080b0 <_strtod_l+0x858>
 8007f28:	1b5b      	subs	r3, r3, r5
 8007f2a:	2b1f      	cmp	r3, #31
 8007f2c:	f04f 0701 	mov.w	r7, #1
 8007f30:	eba2 0203 	sub.w	r2, r2, r3
 8007f34:	f300 80b1 	bgt.w	800809a <_strtod_l+0x842>
 8007f38:	2500      	movs	r5, #0
 8007f3a:	fa07 f303 	lsl.w	r3, r7, r3
 8007f3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f40:	18b7      	adds	r7, r6, r2
 8007f42:	9b05      	ldr	r3, [sp, #20]
 8007f44:	42be      	cmp	r6, r7
 8007f46:	4414      	add	r4, r2
 8007f48:	441c      	add	r4, r3
 8007f4a:	4633      	mov	r3, r6
 8007f4c:	bfa8      	it	ge
 8007f4e:	463b      	movge	r3, r7
 8007f50:	42a3      	cmp	r3, r4
 8007f52:	bfa8      	it	ge
 8007f54:	4623      	movge	r3, r4
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	bfc2      	ittt	gt
 8007f5a:	1aff      	subgt	r7, r7, r3
 8007f5c:	1ae4      	subgt	r4, r4, r3
 8007f5e:	1af6      	subgt	r6, r6, r3
 8007f60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	dd17      	ble.n	8007f96 <_strtod_l+0x73e>
 8007f66:	461a      	mov	r2, r3
 8007f68:	4650      	mov	r0, sl
 8007f6a:	9904      	ldr	r1, [sp, #16]
 8007f6c:	f001 f934 	bl	80091d8 <__pow5mult>
 8007f70:	9004      	str	r0, [sp, #16]
 8007f72:	2800      	cmp	r0, #0
 8007f74:	f43f aeaf 	beq.w	8007cd6 <_strtod_l+0x47e>
 8007f78:	4601      	mov	r1, r0
 8007f7a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007f7c:	4650      	mov	r0, sl
 8007f7e:	f001 f883 	bl	8009088 <__multiply>
 8007f82:	9009      	str	r0, [sp, #36]	; 0x24
 8007f84:	2800      	cmp	r0, #0
 8007f86:	f43f aea6 	beq.w	8007cd6 <_strtod_l+0x47e>
 8007f8a:	4650      	mov	r0, sl
 8007f8c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007f8e:	f000 ff65 	bl	8008e5c <_Bfree>
 8007f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f94:	931a      	str	r3, [sp, #104]	; 0x68
 8007f96:	2f00      	cmp	r7, #0
 8007f98:	f300 808e 	bgt.w	80080b8 <_strtod_l+0x860>
 8007f9c:	9b07      	ldr	r3, [sp, #28]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	dd08      	ble.n	8007fb4 <_strtod_l+0x75c>
 8007fa2:	4650      	mov	r0, sl
 8007fa4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007fa6:	9906      	ldr	r1, [sp, #24]
 8007fa8:	f001 f916 	bl	80091d8 <__pow5mult>
 8007fac:	9006      	str	r0, [sp, #24]
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	f43f ae91 	beq.w	8007cd6 <_strtod_l+0x47e>
 8007fb4:	2c00      	cmp	r4, #0
 8007fb6:	dd08      	ble.n	8007fca <_strtod_l+0x772>
 8007fb8:	4622      	mov	r2, r4
 8007fba:	4650      	mov	r0, sl
 8007fbc:	9906      	ldr	r1, [sp, #24]
 8007fbe:	f001 f965 	bl	800928c <__lshift>
 8007fc2:	9006      	str	r0, [sp, #24]
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	f43f ae86 	beq.w	8007cd6 <_strtod_l+0x47e>
 8007fca:	2e00      	cmp	r6, #0
 8007fcc:	dd08      	ble.n	8007fe0 <_strtod_l+0x788>
 8007fce:	4632      	mov	r2, r6
 8007fd0:	4650      	mov	r0, sl
 8007fd2:	9904      	ldr	r1, [sp, #16]
 8007fd4:	f001 f95a 	bl	800928c <__lshift>
 8007fd8:	9004      	str	r0, [sp, #16]
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	f43f ae7b 	beq.w	8007cd6 <_strtod_l+0x47e>
 8007fe0:	4650      	mov	r0, sl
 8007fe2:	9a06      	ldr	r2, [sp, #24]
 8007fe4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007fe6:	f001 f9dd 	bl	80093a4 <__mdiff>
 8007fea:	4683      	mov	fp, r0
 8007fec:	2800      	cmp	r0, #0
 8007fee:	f43f ae72 	beq.w	8007cd6 <_strtod_l+0x47e>
 8007ff2:	2400      	movs	r4, #0
 8007ff4:	68c3      	ldr	r3, [r0, #12]
 8007ff6:	9904      	ldr	r1, [sp, #16]
 8007ff8:	60c4      	str	r4, [r0, #12]
 8007ffa:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ffc:	f001 f9b6 	bl	800936c <__mcmp>
 8008000:	42a0      	cmp	r0, r4
 8008002:	da6b      	bge.n	80080dc <_strtod_l+0x884>
 8008004:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008006:	ea53 0308 	orrs.w	r3, r3, r8
 800800a:	f040 8091 	bne.w	8008130 <_strtod_l+0x8d8>
 800800e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008012:	2b00      	cmp	r3, #0
 8008014:	f040 808c 	bne.w	8008130 <_strtod_l+0x8d8>
 8008018:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800801c:	0d1b      	lsrs	r3, r3, #20
 800801e:	051b      	lsls	r3, r3, #20
 8008020:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008024:	f240 8084 	bls.w	8008130 <_strtod_l+0x8d8>
 8008028:	f8db 3014 	ldr.w	r3, [fp, #20]
 800802c:	b91b      	cbnz	r3, 8008036 <_strtod_l+0x7de>
 800802e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008032:	2b01      	cmp	r3, #1
 8008034:	dd7c      	ble.n	8008130 <_strtod_l+0x8d8>
 8008036:	4659      	mov	r1, fp
 8008038:	2201      	movs	r2, #1
 800803a:	4650      	mov	r0, sl
 800803c:	f001 f926 	bl	800928c <__lshift>
 8008040:	9904      	ldr	r1, [sp, #16]
 8008042:	4683      	mov	fp, r0
 8008044:	f001 f992 	bl	800936c <__mcmp>
 8008048:	2800      	cmp	r0, #0
 800804a:	dd71      	ble.n	8008130 <_strtod_l+0x8d8>
 800804c:	9905      	ldr	r1, [sp, #20]
 800804e:	464b      	mov	r3, r9
 8008050:	4a20      	ldr	r2, [pc, #128]	; (80080d4 <_strtod_l+0x87c>)
 8008052:	2900      	cmp	r1, #0
 8008054:	f000 808c 	beq.w	8008170 <_strtod_l+0x918>
 8008058:	ea02 0109 	and.w	r1, r2, r9
 800805c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008060:	f300 8086 	bgt.w	8008170 <_strtod_l+0x918>
 8008064:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008068:	f77f aeaa 	ble.w	8007dc0 <_strtod_l+0x568>
 800806c:	4640      	mov	r0, r8
 800806e:	4649      	mov	r1, r9
 8008070:	4b19      	ldr	r3, [pc, #100]	; (80080d8 <_strtod_l+0x880>)
 8008072:	2200      	movs	r2, #0
 8008074:	f7f8 faa0 	bl	80005b8 <__aeabi_dmul>
 8008078:	460b      	mov	r3, r1
 800807a:	4303      	orrs	r3, r0
 800807c:	bf08      	it	eq
 800807e:	2322      	moveq	r3, #34	; 0x22
 8008080:	4680      	mov	r8, r0
 8008082:	4689      	mov	r9, r1
 8008084:	bf08      	it	eq
 8008086:	f8ca 3000 	streq.w	r3, [sl]
 800808a:	e62f      	b.n	8007cec <_strtod_l+0x494>
 800808c:	f04f 32ff 	mov.w	r2, #4294967295
 8008090:	fa02 f303 	lsl.w	r3, r2, r3
 8008094:	ea03 0808 	and.w	r8, r3, r8
 8008098:	e6e0      	b.n	8007e5c <_strtod_l+0x604>
 800809a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800809e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80080a2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80080a6:	35e2      	adds	r5, #226	; 0xe2
 80080a8:	fa07 f505 	lsl.w	r5, r7, r5
 80080ac:	970f      	str	r7, [sp, #60]	; 0x3c
 80080ae:	e747      	b.n	8007f40 <_strtod_l+0x6e8>
 80080b0:	2301      	movs	r3, #1
 80080b2:	2500      	movs	r5, #0
 80080b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80080b6:	e743      	b.n	8007f40 <_strtod_l+0x6e8>
 80080b8:	463a      	mov	r2, r7
 80080ba:	4650      	mov	r0, sl
 80080bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80080be:	f001 f8e5 	bl	800928c <__lshift>
 80080c2:	901a      	str	r0, [sp, #104]	; 0x68
 80080c4:	2800      	cmp	r0, #0
 80080c6:	f47f af69 	bne.w	8007f9c <_strtod_l+0x744>
 80080ca:	e604      	b.n	8007cd6 <_strtod_l+0x47e>
 80080cc:	0800ad48 	.word	0x0800ad48
 80080d0:	fffffc02 	.word	0xfffffc02
 80080d4:	7ff00000 	.word	0x7ff00000
 80080d8:	39500000 	.word	0x39500000
 80080dc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80080e0:	d165      	bne.n	80081ae <_strtod_l+0x956>
 80080e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080e8:	b35a      	cbz	r2, 8008142 <_strtod_l+0x8ea>
 80080ea:	4a99      	ldr	r2, [pc, #612]	; (8008350 <_strtod_l+0xaf8>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d12b      	bne.n	8008148 <_strtod_l+0x8f0>
 80080f0:	9b05      	ldr	r3, [sp, #20]
 80080f2:	4641      	mov	r1, r8
 80080f4:	b303      	cbz	r3, 8008138 <_strtod_l+0x8e0>
 80080f6:	464a      	mov	r2, r9
 80080f8:	4b96      	ldr	r3, [pc, #600]	; (8008354 <_strtod_l+0xafc>)
 80080fa:	4013      	ands	r3, r2
 80080fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008100:	f04f 32ff 	mov.w	r2, #4294967295
 8008104:	d81b      	bhi.n	800813e <_strtod_l+0x8e6>
 8008106:	0d1b      	lsrs	r3, r3, #20
 8008108:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800810c:	fa02 f303 	lsl.w	r3, r2, r3
 8008110:	4299      	cmp	r1, r3
 8008112:	d119      	bne.n	8008148 <_strtod_l+0x8f0>
 8008114:	4b90      	ldr	r3, [pc, #576]	; (8008358 <_strtod_l+0xb00>)
 8008116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008118:	429a      	cmp	r2, r3
 800811a:	d102      	bne.n	8008122 <_strtod_l+0x8ca>
 800811c:	3101      	adds	r1, #1
 800811e:	f43f adda 	beq.w	8007cd6 <_strtod_l+0x47e>
 8008122:	f04f 0800 	mov.w	r8, #0
 8008126:	4b8b      	ldr	r3, [pc, #556]	; (8008354 <_strtod_l+0xafc>)
 8008128:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800812a:	401a      	ands	r2, r3
 800812c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008130:	9b05      	ldr	r3, [sp, #20]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d19a      	bne.n	800806c <_strtod_l+0x814>
 8008136:	e5d9      	b.n	8007cec <_strtod_l+0x494>
 8008138:	f04f 33ff 	mov.w	r3, #4294967295
 800813c:	e7e8      	b.n	8008110 <_strtod_l+0x8b8>
 800813e:	4613      	mov	r3, r2
 8008140:	e7e6      	b.n	8008110 <_strtod_l+0x8b8>
 8008142:	ea53 0308 	orrs.w	r3, r3, r8
 8008146:	d081      	beq.n	800804c <_strtod_l+0x7f4>
 8008148:	b1e5      	cbz	r5, 8008184 <_strtod_l+0x92c>
 800814a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814c:	421d      	tst	r5, r3
 800814e:	d0ef      	beq.n	8008130 <_strtod_l+0x8d8>
 8008150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008152:	4640      	mov	r0, r8
 8008154:	4649      	mov	r1, r9
 8008156:	9a05      	ldr	r2, [sp, #20]
 8008158:	b1c3      	cbz	r3, 800818c <_strtod_l+0x934>
 800815a:	f7ff fb5c 	bl	8007816 <sulp>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008166:	f7f8 f871 	bl	800024c <__adddf3>
 800816a:	4680      	mov	r8, r0
 800816c:	4689      	mov	r9, r1
 800816e:	e7df      	b.n	8008130 <_strtod_l+0x8d8>
 8008170:	4013      	ands	r3, r2
 8008172:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008176:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800817a:	f04f 38ff 	mov.w	r8, #4294967295
 800817e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008182:	e7d5      	b.n	8008130 <_strtod_l+0x8d8>
 8008184:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008186:	ea13 0f08 	tst.w	r3, r8
 800818a:	e7e0      	b.n	800814e <_strtod_l+0x8f6>
 800818c:	f7ff fb43 	bl	8007816 <sulp>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008198:	f7f8 f856 	bl	8000248 <__aeabi_dsub>
 800819c:	2200      	movs	r2, #0
 800819e:	2300      	movs	r3, #0
 80081a0:	4680      	mov	r8, r0
 80081a2:	4689      	mov	r9, r1
 80081a4:	f7f8 fc70 	bl	8000a88 <__aeabi_dcmpeq>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	d0c1      	beq.n	8008130 <_strtod_l+0x8d8>
 80081ac:	e608      	b.n	8007dc0 <_strtod_l+0x568>
 80081ae:	4658      	mov	r0, fp
 80081b0:	9904      	ldr	r1, [sp, #16]
 80081b2:	f001 fa59 	bl	8009668 <__ratio>
 80081b6:	2200      	movs	r2, #0
 80081b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081bc:	4606      	mov	r6, r0
 80081be:	460f      	mov	r7, r1
 80081c0:	f7f8 fc76 	bl	8000ab0 <__aeabi_dcmple>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	d070      	beq.n	80082aa <_strtod_l+0xa52>
 80081c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d042      	beq.n	8008254 <_strtod_l+0x9fc>
 80081ce:	2600      	movs	r6, #0
 80081d0:	4f62      	ldr	r7, [pc, #392]	; (800835c <_strtod_l+0xb04>)
 80081d2:	4d62      	ldr	r5, [pc, #392]	; (800835c <_strtod_l+0xb04>)
 80081d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081da:	0d1b      	lsrs	r3, r3, #20
 80081dc:	051b      	lsls	r3, r3, #20
 80081de:	930f      	str	r3, [sp, #60]	; 0x3c
 80081e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081e2:	4b5f      	ldr	r3, [pc, #380]	; (8008360 <_strtod_l+0xb08>)
 80081e4:	429a      	cmp	r2, r3
 80081e6:	f040 80c3 	bne.w	8008370 <_strtod_l+0xb18>
 80081ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ec:	4640      	mov	r0, r8
 80081ee:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80081f2:	4649      	mov	r1, r9
 80081f4:	f001 f962 	bl	80094bc <__ulp>
 80081f8:	4602      	mov	r2, r0
 80081fa:	460b      	mov	r3, r1
 80081fc:	4630      	mov	r0, r6
 80081fe:	4639      	mov	r1, r7
 8008200:	f7f8 f9da 	bl	80005b8 <__aeabi_dmul>
 8008204:	4642      	mov	r2, r8
 8008206:	464b      	mov	r3, r9
 8008208:	f7f8 f820 	bl	800024c <__adddf3>
 800820c:	460b      	mov	r3, r1
 800820e:	4951      	ldr	r1, [pc, #324]	; (8008354 <_strtod_l+0xafc>)
 8008210:	4a54      	ldr	r2, [pc, #336]	; (8008364 <_strtod_l+0xb0c>)
 8008212:	4019      	ands	r1, r3
 8008214:	4291      	cmp	r1, r2
 8008216:	4680      	mov	r8, r0
 8008218:	d95d      	bls.n	80082d6 <_strtod_l+0xa7e>
 800821a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800821c:	4b4e      	ldr	r3, [pc, #312]	; (8008358 <_strtod_l+0xb00>)
 800821e:	429a      	cmp	r2, r3
 8008220:	d103      	bne.n	800822a <_strtod_l+0x9d2>
 8008222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008224:	3301      	adds	r3, #1
 8008226:	f43f ad56 	beq.w	8007cd6 <_strtod_l+0x47e>
 800822a:	f04f 38ff 	mov.w	r8, #4294967295
 800822e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008358 <_strtod_l+0xb00>
 8008232:	4650      	mov	r0, sl
 8008234:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008236:	f000 fe11 	bl	8008e5c <_Bfree>
 800823a:	4650      	mov	r0, sl
 800823c:	9906      	ldr	r1, [sp, #24]
 800823e:	f000 fe0d 	bl	8008e5c <_Bfree>
 8008242:	4650      	mov	r0, sl
 8008244:	9904      	ldr	r1, [sp, #16]
 8008246:	f000 fe09 	bl	8008e5c <_Bfree>
 800824a:	4659      	mov	r1, fp
 800824c:	4650      	mov	r0, sl
 800824e:	f000 fe05 	bl	8008e5c <_Bfree>
 8008252:	e627      	b.n	8007ea4 <_strtod_l+0x64c>
 8008254:	f1b8 0f00 	cmp.w	r8, #0
 8008258:	d119      	bne.n	800828e <_strtod_l+0xa36>
 800825a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800825c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008260:	b9e3      	cbnz	r3, 800829c <_strtod_l+0xa44>
 8008262:	2200      	movs	r2, #0
 8008264:	4630      	mov	r0, r6
 8008266:	4639      	mov	r1, r7
 8008268:	4b3c      	ldr	r3, [pc, #240]	; (800835c <_strtod_l+0xb04>)
 800826a:	f7f8 fc17 	bl	8000a9c <__aeabi_dcmplt>
 800826e:	b9c8      	cbnz	r0, 80082a4 <_strtod_l+0xa4c>
 8008270:	2200      	movs	r2, #0
 8008272:	4630      	mov	r0, r6
 8008274:	4639      	mov	r1, r7
 8008276:	4b3c      	ldr	r3, [pc, #240]	; (8008368 <_strtod_l+0xb10>)
 8008278:	f7f8 f99e 	bl	80005b8 <__aeabi_dmul>
 800827c:	4604      	mov	r4, r0
 800827e:	460d      	mov	r5, r1
 8008280:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008284:	9416      	str	r4, [sp, #88]	; 0x58
 8008286:	9317      	str	r3, [sp, #92]	; 0x5c
 8008288:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800828c:	e7a2      	b.n	80081d4 <_strtod_l+0x97c>
 800828e:	f1b8 0f01 	cmp.w	r8, #1
 8008292:	d103      	bne.n	800829c <_strtod_l+0xa44>
 8008294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008296:	2b00      	cmp	r3, #0
 8008298:	f43f ad92 	beq.w	8007dc0 <_strtod_l+0x568>
 800829c:	2600      	movs	r6, #0
 800829e:	2400      	movs	r4, #0
 80082a0:	4f32      	ldr	r7, [pc, #200]	; (800836c <_strtod_l+0xb14>)
 80082a2:	e796      	b.n	80081d2 <_strtod_l+0x97a>
 80082a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80082a6:	4d30      	ldr	r5, [pc, #192]	; (8008368 <_strtod_l+0xb10>)
 80082a8:	e7ea      	b.n	8008280 <_strtod_l+0xa28>
 80082aa:	4b2f      	ldr	r3, [pc, #188]	; (8008368 <_strtod_l+0xb10>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	4630      	mov	r0, r6
 80082b0:	4639      	mov	r1, r7
 80082b2:	f7f8 f981 	bl	80005b8 <__aeabi_dmul>
 80082b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082b8:	4604      	mov	r4, r0
 80082ba:	460d      	mov	r5, r1
 80082bc:	b933      	cbnz	r3, 80082cc <_strtod_l+0xa74>
 80082be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082c2:	9010      	str	r0, [sp, #64]	; 0x40
 80082c4:	9311      	str	r3, [sp, #68]	; 0x44
 80082c6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80082ca:	e783      	b.n	80081d4 <_strtod_l+0x97c>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80082d4:	e7f7      	b.n	80082c6 <_strtod_l+0xa6e>
 80082d6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80082da:	9b05      	ldr	r3, [sp, #20]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1a8      	bne.n	8008232 <_strtod_l+0x9da>
 80082e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80082e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082e6:	0d1b      	lsrs	r3, r3, #20
 80082e8:	051b      	lsls	r3, r3, #20
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d1a1      	bne.n	8008232 <_strtod_l+0x9da>
 80082ee:	4620      	mov	r0, r4
 80082f0:	4629      	mov	r1, r5
 80082f2:	f7f8 fe33 	bl	8000f5c <__aeabi_d2lz>
 80082f6:	f7f8 f931 	bl	800055c <__aeabi_l2d>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	4620      	mov	r0, r4
 8008300:	4629      	mov	r1, r5
 8008302:	f7f7 ffa1 	bl	8000248 <__aeabi_dsub>
 8008306:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008308:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800830c:	ea43 0308 	orr.w	r3, r3, r8
 8008310:	4313      	orrs	r3, r2
 8008312:	4604      	mov	r4, r0
 8008314:	460d      	mov	r5, r1
 8008316:	d066      	beq.n	80083e6 <_strtod_l+0xb8e>
 8008318:	a309      	add	r3, pc, #36	; (adr r3, 8008340 <_strtod_l+0xae8>)
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	f7f8 fbbd 	bl	8000a9c <__aeabi_dcmplt>
 8008322:	2800      	cmp	r0, #0
 8008324:	f47f ace2 	bne.w	8007cec <_strtod_l+0x494>
 8008328:	a307      	add	r3, pc, #28	; (adr r3, 8008348 <_strtod_l+0xaf0>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	4620      	mov	r0, r4
 8008330:	4629      	mov	r1, r5
 8008332:	f7f8 fbd1 	bl	8000ad8 <__aeabi_dcmpgt>
 8008336:	2800      	cmp	r0, #0
 8008338:	f43f af7b 	beq.w	8008232 <_strtod_l+0x9da>
 800833c:	e4d6      	b.n	8007cec <_strtod_l+0x494>
 800833e:	bf00      	nop
 8008340:	94a03595 	.word	0x94a03595
 8008344:	3fdfffff 	.word	0x3fdfffff
 8008348:	35afe535 	.word	0x35afe535
 800834c:	3fe00000 	.word	0x3fe00000
 8008350:	000fffff 	.word	0x000fffff
 8008354:	7ff00000 	.word	0x7ff00000
 8008358:	7fefffff 	.word	0x7fefffff
 800835c:	3ff00000 	.word	0x3ff00000
 8008360:	7fe00000 	.word	0x7fe00000
 8008364:	7c9fffff 	.word	0x7c9fffff
 8008368:	3fe00000 	.word	0x3fe00000
 800836c:	bff00000 	.word	0xbff00000
 8008370:	9b05      	ldr	r3, [sp, #20]
 8008372:	b313      	cbz	r3, 80083ba <_strtod_l+0xb62>
 8008374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008376:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800837a:	d81e      	bhi.n	80083ba <_strtod_l+0xb62>
 800837c:	a326      	add	r3, pc, #152	; (adr r3, 8008418 <_strtod_l+0xbc0>)
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	4620      	mov	r0, r4
 8008384:	4629      	mov	r1, r5
 8008386:	f7f8 fb93 	bl	8000ab0 <__aeabi_dcmple>
 800838a:	b190      	cbz	r0, 80083b2 <_strtod_l+0xb5a>
 800838c:	4629      	mov	r1, r5
 800838e:	4620      	mov	r0, r4
 8008390:	f7f8 fbc2 	bl	8000b18 <__aeabi_d2uiz>
 8008394:	2801      	cmp	r0, #1
 8008396:	bf38      	it	cc
 8008398:	2001      	movcc	r0, #1
 800839a:	f7f8 f893 	bl	80004c4 <__aeabi_ui2d>
 800839e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083a0:	4604      	mov	r4, r0
 80083a2:	460d      	mov	r5, r1
 80083a4:	b9d3      	cbnz	r3, 80083dc <_strtod_l+0xb84>
 80083a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083aa:	9012      	str	r0, [sp, #72]	; 0x48
 80083ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80083ae:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80083b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083b4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80083b8:	1a9f      	subs	r7, r3, r2
 80083ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083be:	f001 f87d 	bl	80094bc <__ulp>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4630      	mov	r0, r6
 80083c8:	4639      	mov	r1, r7
 80083ca:	f7f8 f8f5 	bl	80005b8 <__aeabi_dmul>
 80083ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80083d2:	f7f7 ff3b 	bl	800024c <__adddf3>
 80083d6:	4680      	mov	r8, r0
 80083d8:	4689      	mov	r9, r1
 80083da:	e77e      	b.n	80082da <_strtod_l+0xa82>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80083e4:	e7e3      	b.n	80083ae <_strtod_l+0xb56>
 80083e6:	a30e      	add	r3, pc, #56	; (adr r3, 8008420 <_strtod_l+0xbc8>)
 80083e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ec:	f7f8 fb56 	bl	8000a9c <__aeabi_dcmplt>
 80083f0:	e7a1      	b.n	8008336 <_strtod_l+0xade>
 80083f2:	2300      	movs	r3, #0
 80083f4:	930a      	str	r3, [sp, #40]	; 0x28
 80083f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80083fa:	6013      	str	r3, [r2, #0]
 80083fc:	f7ff ba71 	b.w	80078e2 <_strtod_l+0x8a>
 8008400:	2a65      	cmp	r2, #101	; 0x65
 8008402:	f43f ab63 	beq.w	8007acc <_strtod_l+0x274>
 8008406:	2a45      	cmp	r2, #69	; 0x45
 8008408:	f43f ab60 	beq.w	8007acc <_strtod_l+0x274>
 800840c:	2301      	movs	r3, #1
 800840e:	f7ff bb95 	b.w	8007b3c <_strtod_l+0x2e4>
 8008412:	bf00      	nop
 8008414:	f3af 8000 	nop.w
 8008418:	ffc00000 	.word	0xffc00000
 800841c:	41dfffff 	.word	0x41dfffff
 8008420:	94a03595 	.word	0x94a03595
 8008424:	3fcfffff 	.word	0x3fcfffff

08008428 <strtof>:
 8008428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800842c:	4f22      	ldr	r7, [pc, #136]	; (80084b8 <strtof+0x90>)
 800842e:	460a      	mov	r2, r1
 8008430:	4b22      	ldr	r3, [pc, #136]	; (80084bc <strtof+0x94>)
 8008432:	4601      	mov	r1, r0
 8008434:	6838      	ldr	r0, [r7, #0]
 8008436:	f7ff fa0f 	bl	8007858 <_strtod_l>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	4606      	mov	r6, r0
 8008440:	460c      	mov	r4, r1
 8008442:	f7f8 fb53 	bl	8000aec <__aeabi_dcmpun>
 8008446:	b168      	cbz	r0, 8008464 <strtof+0x3c>
 8008448:	2c00      	cmp	r4, #0
 800844a:	481d      	ldr	r0, [pc, #116]	; (80084c0 <strtof+0x98>)
 800844c:	da06      	bge.n	800845c <strtof+0x34>
 800844e:	f001 fecd 	bl	800a1ec <nanf>
 8008452:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8008456:	4628      	mov	r0, r5
 8008458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800845c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008460:	f001 bec4 	b.w	800a1ec <nanf>
 8008464:	4621      	mov	r1, r4
 8008466:	4630      	mov	r0, r6
 8008468:	f7f8 fb76 	bl	8000b58 <__aeabi_d2f>
 800846c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8008470:	4605      	mov	r5, r0
 8008472:	4914      	ldr	r1, [pc, #80]	; (80084c4 <strtof+0x9c>)
 8008474:	4640      	mov	r0, r8
 8008476:	f7f8 fd43 	bl	8000f00 <__aeabi_fcmpun>
 800847a:	2800      	cmp	r0, #0
 800847c:	d1eb      	bne.n	8008456 <strtof+0x2e>
 800847e:	4640      	mov	r0, r8
 8008480:	4910      	ldr	r1, [pc, #64]	; (80084c4 <strtof+0x9c>)
 8008482:	f7f8 fd1f 	bl	8000ec4 <__aeabi_fcmple>
 8008486:	2800      	cmp	r0, #0
 8008488:	d1e5      	bne.n	8008456 <strtof+0x2e>
 800848a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800848e:	f04f 32ff 	mov.w	r2, #4294967295
 8008492:	4630      	mov	r0, r6
 8008494:	4621      	mov	r1, r4
 8008496:	4b0c      	ldr	r3, [pc, #48]	; (80084c8 <strtof+0xa0>)
 8008498:	f7f8 fb28 	bl	8000aec <__aeabi_dcmpun>
 800849c:	b940      	cbnz	r0, 80084b0 <strtof+0x88>
 800849e:	f04f 32ff 	mov.w	r2, #4294967295
 80084a2:	4630      	mov	r0, r6
 80084a4:	4621      	mov	r1, r4
 80084a6:	4b08      	ldr	r3, [pc, #32]	; (80084c8 <strtof+0xa0>)
 80084a8:	f7f8 fb02 	bl	8000ab0 <__aeabi_dcmple>
 80084ac:	2800      	cmp	r0, #0
 80084ae:	d0d2      	beq.n	8008456 <strtof+0x2e>
 80084b0:	2222      	movs	r2, #34	; 0x22
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	e7ce      	b.n	8008456 <strtof+0x2e>
 80084b8:	20000024 	.word	0x20000024
 80084bc:	2000008c 	.word	0x2000008c
 80084c0:	0800ae1f 	.word	0x0800ae1f
 80084c4:	7f7fffff 	.word	0x7f7fffff
 80084c8:	7fefffff 	.word	0x7fefffff

080084cc <strtok>:
 80084cc:	4b16      	ldr	r3, [pc, #88]	; (8008528 <strtok+0x5c>)
 80084ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d2:	681f      	ldr	r7, [r3, #0]
 80084d4:	4605      	mov	r5, r0
 80084d6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80084d8:	460e      	mov	r6, r1
 80084da:	b9ec      	cbnz	r4, 8008518 <strtok+0x4c>
 80084dc:	2050      	movs	r0, #80	; 0x50
 80084de:	f000 fc63 	bl	8008da8 <malloc>
 80084e2:	4602      	mov	r2, r0
 80084e4:	65b8      	str	r0, [r7, #88]	; 0x58
 80084e6:	b920      	cbnz	r0, 80084f2 <strtok+0x26>
 80084e8:	2157      	movs	r1, #87	; 0x57
 80084ea:	4b10      	ldr	r3, [pc, #64]	; (800852c <strtok+0x60>)
 80084ec:	4810      	ldr	r0, [pc, #64]	; (8008530 <strtok+0x64>)
 80084ee:	f000 f8c5 	bl	800867c <__assert_func>
 80084f2:	e9c0 4400 	strd	r4, r4, [r0]
 80084f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80084fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80084fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008502:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008506:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800850a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800850e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008512:	6184      	str	r4, [r0, #24]
 8008514:	7704      	strb	r4, [r0, #28]
 8008516:	6244      	str	r4, [r0, #36]	; 0x24
 8008518:	4631      	mov	r1, r6
 800851a:	4628      	mov	r0, r5
 800851c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800851e:	2301      	movs	r3, #1
 8008520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008524:	f000 b806 	b.w	8008534 <__strtok_r>
 8008528:	20000024 	.word	0x20000024
 800852c:	0800ad70 	.word	0x0800ad70
 8008530:	0800ad87 	.word	0x0800ad87

08008534 <__strtok_r>:
 8008534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008536:	b908      	cbnz	r0, 800853c <__strtok_r+0x8>
 8008538:	6810      	ldr	r0, [r2, #0]
 800853a:	b188      	cbz	r0, 8008560 <__strtok_r+0x2c>
 800853c:	4604      	mov	r4, r0
 800853e:	460f      	mov	r7, r1
 8008540:	4620      	mov	r0, r4
 8008542:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008546:	f817 6b01 	ldrb.w	r6, [r7], #1
 800854a:	b91e      	cbnz	r6, 8008554 <__strtok_r+0x20>
 800854c:	b965      	cbnz	r5, 8008568 <__strtok_r+0x34>
 800854e:	4628      	mov	r0, r5
 8008550:	6015      	str	r5, [r2, #0]
 8008552:	e005      	b.n	8008560 <__strtok_r+0x2c>
 8008554:	42b5      	cmp	r5, r6
 8008556:	d1f6      	bne.n	8008546 <__strtok_r+0x12>
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1f0      	bne.n	800853e <__strtok_r+0xa>
 800855c:	6014      	str	r4, [r2, #0]
 800855e:	7003      	strb	r3, [r0, #0]
 8008560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008562:	461c      	mov	r4, r3
 8008564:	e00c      	b.n	8008580 <__strtok_r+0x4c>
 8008566:	b915      	cbnz	r5, 800856e <__strtok_r+0x3a>
 8008568:	460e      	mov	r6, r1
 800856a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800856e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008572:	42ab      	cmp	r3, r5
 8008574:	d1f7      	bne.n	8008566 <__strtok_r+0x32>
 8008576:	2b00      	cmp	r3, #0
 8008578:	d0f3      	beq.n	8008562 <__strtok_r+0x2e>
 800857a:	2300      	movs	r3, #0
 800857c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008580:	6014      	str	r4, [r2, #0]
 8008582:	e7ed      	b.n	8008560 <__strtok_r+0x2c>

08008584 <_strtoul_l.constprop.0>:
 8008584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008588:	4686      	mov	lr, r0
 800858a:	460d      	mov	r5, r1
 800858c:	4f35      	ldr	r7, [pc, #212]	; (8008664 <_strtoul_l.constprop.0+0xe0>)
 800858e:	4628      	mov	r0, r5
 8008590:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008594:	5de6      	ldrb	r6, [r4, r7]
 8008596:	f016 0608 	ands.w	r6, r6, #8
 800859a:	d1f8      	bne.n	800858e <_strtoul_l.constprop.0+0xa>
 800859c:	2c2d      	cmp	r4, #45	; 0x2d
 800859e:	d12f      	bne.n	8008600 <_strtoul_l.constprop.0+0x7c>
 80085a0:	2601      	movs	r6, #1
 80085a2:	782c      	ldrb	r4, [r5, #0]
 80085a4:	1c85      	adds	r5, r0, #2
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d057      	beq.n	800865a <_strtoul_l.constprop.0+0xd6>
 80085aa:	2b10      	cmp	r3, #16
 80085ac:	d109      	bne.n	80085c2 <_strtoul_l.constprop.0+0x3e>
 80085ae:	2c30      	cmp	r4, #48	; 0x30
 80085b0:	d107      	bne.n	80085c2 <_strtoul_l.constprop.0+0x3e>
 80085b2:	7828      	ldrb	r0, [r5, #0]
 80085b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80085b8:	2858      	cmp	r0, #88	; 0x58
 80085ba:	d149      	bne.n	8008650 <_strtoul_l.constprop.0+0xcc>
 80085bc:	2310      	movs	r3, #16
 80085be:	786c      	ldrb	r4, [r5, #1]
 80085c0:	3502      	adds	r5, #2
 80085c2:	f04f 38ff 	mov.w	r8, #4294967295
 80085c6:	fbb8 f8f3 	udiv	r8, r8, r3
 80085ca:	2700      	movs	r7, #0
 80085cc:	fb03 f908 	mul.w	r9, r3, r8
 80085d0:	4638      	mov	r0, r7
 80085d2:	ea6f 0909 	mvn.w	r9, r9
 80085d6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80085da:	f1bc 0f09 	cmp.w	ip, #9
 80085de:	d814      	bhi.n	800860a <_strtoul_l.constprop.0+0x86>
 80085e0:	4664      	mov	r4, ip
 80085e2:	42a3      	cmp	r3, r4
 80085e4:	dd22      	ble.n	800862c <_strtoul_l.constprop.0+0xa8>
 80085e6:	2f00      	cmp	r7, #0
 80085e8:	db1d      	blt.n	8008626 <_strtoul_l.constprop.0+0xa2>
 80085ea:	4580      	cmp	r8, r0
 80085ec:	d31b      	bcc.n	8008626 <_strtoul_l.constprop.0+0xa2>
 80085ee:	d101      	bne.n	80085f4 <_strtoul_l.constprop.0+0x70>
 80085f0:	45a1      	cmp	r9, r4
 80085f2:	db18      	blt.n	8008626 <_strtoul_l.constprop.0+0xa2>
 80085f4:	2701      	movs	r7, #1
 80085f6:	fb00 4003 	mla	r0, r0, r3, r4
 80085fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085fe:	e7ea      	b.n	80085d6 <_strtoul_l.constprop.0+0x52>
 8008600:	2c2b      	cmp	r4, #43	; 0x2b
 8008602:	bf04      	itt	eq
 8008604:	782c      	ldrbeq	r4, [r5, #0]
 8008606:	1c85      	addeq	r5, r0, #2
 8008608:	e7cd      	b.n	80085a6 <_strtoul_l.constprop.0+0x22>
 800860a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800860e:	f1bc 0f19 	cmp.w	ip, #25
 8008612:	d801      	bhi.n	8008618 <_strtoul_l.constprop.0+0x94>
 8008614:	3c37      	subs	r4, #55	; 0x37
 8008616:	e7e4      	b.n	80085e2 <_strtoul_l.constprop.0+0x5e>
 8008618:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800861c:	f1bc 0f19 	cmp.w	ip, #25
 8008620:	d804      	bhi.n	800862c <_strtoul_l.constprop.0+0xa8>
 8008622:	3c57      	subs	r4, #87	; 0x57
 8008624:	e7dd      	b.n	80085e2 <_strtoul_l.constprop.0+0x5e>
 8008626:	f04f 37ff 	mov.w	r7, #4294967295
 800862a:	e7e6      	b.n	80085fa <_strtoul_l.constprop.0+0x76>
 800862c:	2f00      	cmp	r7, #0
 800862e:	da07      	bge.n	8008640 <_strtoul_l.constprop.0+0xbc>
 8008630:	2322      	movs	r3, #34	; 0x22
 8008632:	f04f 30ff 	mov.w	r0, #4294967295
 8008636:	f8ce 3000 	str.w	r3, [lr]
 800863a:	b932      	cbnz	r2, 800864a <_strtoul_l.constprop.0+0xc6>
 800863c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008640:	b106      	cbz	r6, 8008644 <_strtoul_l.constprop.0+0xc0>
 8008642:	4240      	negs	r0, r0
 8008644:	2a00      	cmp	r2, #0
 8008646:	d0f9      	beq.n	800863c <_strtoul_l.constprop.0+0xb8>
 8008648:	b107      	cbz	r7, 800864c <_strtoul_l.constprop.0+0xc8>
 800864a:	1e69      	subs	r1, r5, #1
 800864c:	6011      	str	r1, [r2, #0]
 800864e:	e7f5      	b.n	800863c <_strtoul_l.constprop.0+0xb8>
 8008650:	2430      	movs	r4, #48	; 0x30
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1b5      	bne.n	80085c2 <_strtoul_l.constprop.0+0x3e>
 8008656:	2308      	movs	r3, #8
 8008658:	e7b3      	b.n	80085c2 <_strtoul_l.constprop.0+0x3e>
 800865a:	2c30      	cmp	r4, #48	; 0x30
 800865c:	d0a9      	beq.n	80085b2 <_strtoul_l.constprop.0+0x2e>
 800865e:	230a      	movs	r3, #10
 8008660:	e7af      	b.n	80085c2 <_strtoul_l.constprop.0+0x3e>
 8008662:	bf00      	nop
 8008664:	0800ae21 	.word	0x0800ae21

08008668 <strtoul>:
 8008668:	4613      	mov	r3, r2
 800866a:	460a      	mov	r2, r1
 800866c:	4601      	mov	r1, r0
 800866e:	4802      	ldr	r0, [pc, #8]	; (8008678 <strtoul+0x10>)
 8008670:	6800      	ldr	r0, [r0, #0]
 8008672:	f7ff bf87 	b.w	8008584 <_strtoul_l.constprop.0>
 8008676:	bf00      	nop
 8008678:	20000024 	.word	0x20000024

0800867c <__assert_func>:
 800867c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800867e:	4614      	mov	r4, r2
 8008680:	461a      	mov	r2, r3
 8008682:	4b09      	ldr	r3, [pc, #36]	; (80086a8 <__assert_func+0x2c>)
 8008684:	4605      	mov	r5, r0
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68d8      	ldr	r0, [r3, #12]
 800868a:	b14c      	cbz	r4, 80086a0 <__assert_func+0x24>
 800868c:	4b07      	ldr	r3, [pc, #28]	; (80086ac <__assert_func+0x30>)
 800868e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008692:	9100      	str	r1, [sp, #0]
 8008694:	462b      	mov	r3, r5
 8008696:	4906      	ldr	r1, [pc, #24]	; (80086b0 <__assert_func+0x34>)
 8008698:	f000 f80e 	bl	80086b8 <fiprintf>
 800869c:	f001 fe8c 	bl	800a3b8 <abort>
 80086a0:	4b04      	ldr	r3, [pc, #16]	; (80086b4 <__assert_func+0x38>)
 80086a2:	461c      	mov	r4, r3
 80086a4:	e7f3      	b.n	800868e <__assert_func+0x12>
 80086a6:	bf00      	nop
 80086a8:	20000024 	.word	0x20000024
 80086ac:	0800ade4 	.word	0x0800ade4
 80086b0:	0800adf1 	.word	0x0800adf1
 80086b4:	0800ae1f 	.word	0x0800ae1f

080086b8 <fiprintf>:
 80086b8:	b40e      	push	{r1, r2, r3}
 80086ba:	b503      	push	{r0, r1, lr}
 80086bc:	4601      	mov	r1, r0
 80086be:	ab03      	add	r3, sp, #12
 80086c0:	4805      	ldr	r0, [pc, #20]	; (80086d8 <fiprintf+0x20>)
 80086c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80086c6:	6800      	ldr	r0, [r0, #0]
 80086c8:	9301      	str	r3, [sp, #4]
 80086ca:	f001 fab3 	bl	8009c34 <_vfiprintf_r>
 80086ce:	b002      	add	sp, #8
 80086d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80086d4:	b003      	add	sp, #12
 80086d6:	4770      	bx	lr
 80086d8:	20000024 	.word	0x20000024

080086dc <rshift>:
 80086dc:	6903      	ldr	r3, [r0, #16]
 80086de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80086e6:	f100 0414 	add.w	r4, r0, #20
 80086ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 80086ee:	dd46      	ble.n	800877e <rshift+0xa2>
 80086f0:	f011 011f 	ands.w	r1, r1, #31
 80086f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80086f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80086fc:	d10c      	bne.n	8008718 <rshift+0x3c>
 80086fe:	4629      	mov	r1, r5
 8008700:	f100 0710 	add.w	r7, r0, #16
 8008704:	42b1      	cmp	r1, r6
 8008706:	d335      	bcc.n	8008774 <rshift+0x98>
 8008708:	1a9b      	subs	r3, r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	1eea      	subs	r2, r5, #3
 800870e:	4296      	cmp	r6, r2
 8008710:	bf38      	it	cc
 8008712:	2300      	movcc	r3, #0
 8008714:	4423      	add	r3, r4
 8008716:	e015      	b.n	8008744 <rshift+0x68>
 8008718:	46a1      	mov	r9, r4
 800871a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800871e:	f1c1 0820 	rsb	r8, r1, #32
 8008722:	40cf      	lsrs	r7, r1
 8008724:	f105 0e04 	add.w	lr, r5, #4
 8008728:	4576      	cmp	r6, lr
 800872a:	46f4      	mov	ip, lr
 800872c:	d816      	bhi.n	800875c <rshift+0x80>
 800872e:	1a9a      	subs	r2, r3, r2
 8008730:	0092      	lsls	r2, r2, #2
 8008732:	3a04      	subs	r2, #4
 8008734:	3501      	adds	r5, #1
 8008736:	42ae      	cmp	r6, r5
 8008738:	bf38      	it	cc
 800873a:	2200      	movcc	r2, #0
 800873c:	18a3      	adds	r3, r4, r2
 800873e:	50a7      	str	r7, [r4, r2]
 8008740:	b107      	cbz	r7, 8008744 <rshift+0x68>
 8008742:	3304      	adds	r3, #4
 8008744:	42a3      	cmp	r3, r4
 8008746:	eba3 0204 	sub.w	r2, r3, r4
 800874a:	bf08      	it	eq
 800874c:	2300      	moveq	r3, #0
 800874e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008752:	6102      	str	r2, [r0, #16]
 8008754:	bf08      	it	eq
 8008756:	6143      	streq	r3, [r0, #20]
 8008758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800875c:	f8dc c000 	ldr.w	ip, [ip]
 8008760:	fa0c fc08 	lsl.w	ip, ip, r8
 8008764:	ea4c 0707 	orr.w	r7, ip, r7
 8008768:	f849 7b04 	str.w	r7, [r9], #4
 800876c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008770:	40cf      	lsrs	r7, r1
 8008772:	e7d9      	b.n	8008728 <rshift+0x4c>
 8008774:	f851 cb04 	ldr.w	ip, [r1], #4
 8008778:	f847 cf04 	str.w	ip, [r7, #4]!
 800877c:	e7c2      	b.n	8008704 <rshift+0x28>
 800877e:	4623      	mov	r3, r4
 8008780:	e7e0      	b.n	8008744 <rshift+0x68>

08008782 <__hexdig_fun>:
 8008782:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008786:	2b09      	cmp	r3, #9
 8008788:	d802      	bhi.n	8008790 <__hexdig_fun+0xe>
 800878a:	3820      	subs	r0, #32
 800878c:	b2c0      	uxtb	r0, r0
 800878e:	4770      	bx	lr
 8008790:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008794:	2b05      	cmp	r3, #5
 8008796:	d801      	bhi.n	800879c <__hexdig_fun+0x1a>
 8008798:	3847      	subs	r0, #71	; 0x47
 800879a:	e7f7      	b.n	800878c <__hexdig_fun+0xa>
 800879c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80087a0:	2b05      	cmp	r3, #5
 80087a2:	d801      	bhi.n	80087a8 <__hexdig_fun+0x26>
 80087a4:	3827      	subs	r0, #39	; 0x27
 80087a6:	e7f1      	b.n	800878c <__hexdig_fun+0xa>
 80087a8:	2000      	movs	r0, #0
 80087aa:	4770      	bx	lr

080087ac <__gethex>:
 80087ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b0:	b08b      	sub	sp, #44	; 0x2c
 80087b2:	9305      	str	r3, [sp, #20]
 80087b4:	4bb2      	ldr	r3, [pc, #712]	; (8008a80 <__gethex+0x2d4>)
 80087b6:	9002      	str	r0, [sp, #8]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	468b      	mov	fp, r1
 80087bc:	4618      	mov	r0, r3
 80087be:	4690      	mov	r8, r2
 80087c0:	9303      	str	r3, [sp, #12]
 80087c2:	f7f7 fd35 	bl	8000230 <strlen>
 80087c6:	4682      	mov	sl, r0
 80087c8:	9b03      	ldr	r3, [sp, #12]
 80087ca:	f8db 2000 	ldr.w	r2, [fp]
 80087ce:	4403      	add	r3, r0
 80087d0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80087d4:	9306      	str	r3, [sp, #24]
 80087d6:	1c93      	adds	r3, r2, #2
 80087d8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80087dc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80087e0:	32fe      	adds	r2, #254	; 0xfe
 80087e2:	18d1      	adds	r1, r2, r3
 80087e4:	461f      	mov	r7, r3
 80087e6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80087ea:	9101      	str	r1, [sp, #4]
 80087ec:	2830      	cmp	r0, #48	; 0x30
 80087ee:	d0f8      	beq.n	80087e2 <__gethex+0x36>
 80087f0:	f7ff ffc7 	bl	8008782 <__hexdig_fun>
 80087f4:	4604      	mov	r4, r0
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d13a      	bne.n	8008870 <__gethex+0xc4>
 80087fa:	4652      	mov	r2, sl
 80087fc:	4638      	mov	r0, r7
 80087fe:	9903      	ldr	r1, [sp, #12]
 8008800:	f001 fcf8 	bl	800a1f4 <strncmp>
 8008804:	4605      	mov	r5, r0
 8008806:	2800      	cmp	r0, #0
 8008808:	d166      	bne.n	80088d8 <__gethex+0x12c>
 800880a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800880e:	eb07 060a 	add.w	r6, r7, sl
 8008812:	f7ff ffb6 	bl	8008782 <__hexdig_fun>
 8008816:	2800      	cmp	r0, #0
 8008818:	d060      	beq.n	80088dc <__gethex+0x130>
 800881a:	4633      	mov	r3, r6
 800881c:	7818      	ldrb	r0, [r3, #0]
 800881e:	461f      	mov	r7, r3
 8008820:	2830      	cmp	r0, #48	; 0x30
 8008822:	f103 0301 	add.w	r3, r3, #1
 8008826:	d0f9      	beq.n	800881c <__gethex+0x70>
 8008828:	f7ff ffab 	bl	8008782 <__hexdig_fun>
 800882c:	2301      	movs	r3, #1
 800882e:	fab0 f480 	clz	r4, r0
 8008832:	4635      	mov	r5, r6
 8008834:	0964      	lsrs	r4, r4, #5
 8008836:	9301      	str	r3, [sp, #4]
 8008838:	463a      	mov	r2, r7
 800883a:	4616      	mov	r6, r2
 800883c:	7830      	ldrb	r0, [r6, #0]
 800883e:	3201      	adds	r2, #1
 8008840:	f7ff ff9f 	bl	8008782 <__hexdig_fun>
 8008844:	2800      	cmp	r0, #0
 8008846:	d1f8      	bne.n	800883a <__gethex+0x8e>
 8008848:	4652      	mov	r2, sl
 800884a:	4630      	mov	r0, r6
 800884c:	9903      	ldr	r1, [sp, #12]
 800884e:	f001 fcd1 	bl	800a1f4 <strncmp>
 8008852:	b980      	cbnz	r0, 8008876 <__gethex+0xca>
 8008854:	b94d      	cbnz	r5, 800886a <__gethex+0xbe>
 8008856:	eb06 050a 	add.w	r5, r6, sl
 800885a:	462a      	mov	r2, r5
 800885c:	4616      	mov	r6, r2
 800885e:	7830      	ldrb	r0, [r6, #0]
 8008860:	3201      	adds	r2, #1
 8008862:	f7ff ff8e 	bl	8008782 <__hexdig_fun>
 8008866:	2800      	cmp	r0, #0
 8008868:	d1f8      	bne.n	800885c <__gethex+0xb0>
 800886a:	1bad      	subs	r5, r5, r6
 800886c:	00ad      	lsls	r5, r5, #2
 800886e:	e004      	b.n	800887a <__gethex+0xce>
 8008870:	2400      	movs	r4, #0
 8008872:	4625      	mov	r5, r4
 8008874:	e7e0      	b.n	8008838 <__gethex+0x8c>
 8008876:	2d00      	cmp	r5, #0
 8008878:	d1f7      	bne.n	800886a <__gethex+0xbe>
 800887a:	7833      	ldrb	r3, [r6, #0]
 800887c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008880:	2b50      	cmp	r3, #80	; 0x50
 8008882:	d139      	bne.n	80088f8 <__gethex+0x14c>
 8008884:	7873      	ldrb	r3, [r6, #1]
 8008886:	2b2b      	cmp	r3, #43	; 0x2b
 8008888:	d02a      	beq.n	80088e0 <__gethex+0x134>
 800888a:	2b2d      	cmp	r3, #45	; 0x2d
 800888c:	d02c      	beq.n	80088e8 <__gethex+0x13c>
 800888e:	f04f 0900 	mov.w	r9, #0
 8008892:	1c71      	adds	r1, r6, #1
 8008894:	7808      	ldrb	r0, [r1, #0]
 8008896:	f7ff ff74 	bl	8008782 <__hexdig_fun>
 800889a:	1e43      	subs	r3, r0, #1
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b18      	cmp	r3, #24
 80088a0:	d82a      	bhi.n	80088f8 <__gethex+0x14c>
 80088a2:	f1a0 0210 	sub.w	r2, r0, #16
 80088a6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80088aa:	f7ff ff6a 	bl	8008782 <__hexdig_fun>
 80088ae:	1e43      	subs	r3, r0, #1
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b18      	cmp	r3, #24
 80088b4:	d91b      	bls.n	80088ee <__gethex+0x142>
 80088b6:	f1b9 0f00 	cmp.w	r9, #0
 80088ba:	d000      	beq.n	80088be <__gethex+0x112>
 80088bc:	4252      	negs	r2, r2
 80088be:	4415      	add	r5, r2
 80088c0:	f8cb 1000 	str.w	r1, [fp]
 80088c4:	b1d4      	cbz	r4, 80088fc <__gethex+0x150>
 80088c6:	9b01      	ldr	r3, [sp, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	bf14      	ite	ne
 80088cc:	2700      	movne	r7, #0
 80088ce:	2706      	moveq	r7, #6
 80088d0:	4638      	mov	r0, r7
 80088d2:	b00b      	add	sp, #44	; 0x2c
 80088d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d8:	463e      	mov	r6, r7
 80088da:	4625      	mov	r5, r4
 80088dc:	2401      	movs	r4, #1
 80088de:	e7cc      	b.n	800887a <__gethex+0xce>
 80088e0:	f04f 0900 	mov.w	r9, #0
 80088e4:	1cb1      	adds	r1, r6, #2
 80088e6:	e7d5      	b.n	8008894 <__gethex+0xe8>
 80088e8:	f04f 0901 	mov.w	r9, #1
 80088ec:	e7fa      	b.n	80088e4 <__gethex+0x138>
 80088ee:	230a      	movs	r3, #10
 80088f0:	fb03 0202 	mla	r2, r3, r2, r0
 80088f4:	3a10      	subs	r2, #16
 80088f6:	e7d6      	b.n	80088a6 <__gethex+0xfa>
 80088f8:	4631      	mov	r1, r6
 80088fa:	e7e1      	b.n	80088c0 <__gethex+0x114>
 80088fc:	4621      	mov	r1, r4
 80088fe:	1bf3      	subs	r3, r6, r7
 8008900:	3b01      	subs	r3, #1
 8008902:	2b07      	cmp	r3, #7
 8008904:	dc0a      	bgt.n	800891c <__gethex+0x170>
 8008906:	9802      	ldr	r0, [sp, #8]
 8008908:	f000 fa68 	bl	8008ddc <_Balloc>
 800890c:	4604      	mov	r4, r0
 800890e:	b940      	cbnz	r0, 8008922 <__gethex+0x176>
 8008910:	4602      	mov	r2, r0
 8008912:	21de      	movs	r1, #222	; 0xde
 8008914:	4b5b      	ldr	r3, [pc, #364]	; (8008a84 <__gethex+0x2d8>)
 8008916:	485c      	ldr	r0, [pc, #368]	; (8008a88 <__gethex+0x2dc>)
 8008918:	f7ff feb0 	bl	800867c <__assert_func>
 800891c:	3101      	adds	r1, #1
 800891e:	105b      	asrs	r3, r3, #1
 8008920:	e7ef      	b.n	8008902 <__gethex+0x156>
 8008922:	f04f 0b00 	mov.w	fp, #0
 8008926:	f100 0914 	add.w	r9, r0, #20
 800892a:	f1ca 0301 	rsb	r3, sl, #1
 800892e:	f8cd 9010 	str.w	r9, [sp, #16]
 8008932:	f8cd b004 	str.w	fp, [sp, #4]
 8008936:	9308      	str	r3, [sp, #32]
 8008938:	42b7      	cmp	r7, r6
 800893a:	d33f      	bcc.n	80089bc <__gethex+0x210>
 800893c:	9f04      	ldr	r7, [sp, #16]
 800893e:	9b01      	ldr	r3, [sp, #4]
 8008940:	f847 3b04 	str.w	r3, [r7], #4
 8008944:	eba7 0709 	sub.w	r7, r7, r9
 8008948:	10bf      	asrs	r7, r7, #2
 800894a:	6127      	str	r7, [r4, #16]
 800894c:	4618      	mov	r0, r3
 800894e:	f000 fb37 	bl	8008fc0 <__hi0bits>
 8008952:	017f      	lsls	r7, r7, #5
 8008954:	f8d8 6000 	ldr.w	r6, [r8]
 8008958:	1a3f      	subs	r7, r7, r0
 800895a:	42b7      	cmp	r7, r6
 800895c:	dd62      	ble.n	8008a24 <__gethex+0x278>
 800895e:	1bbf      	subs	r7, r7, r6
 8008960:	4639      	mov	r1, r7
 8008962:	4620      	mov	r0, r4
 8008964:	f000 fed1 	bl	800970a <__any_on>
 8008968:	4682      	mov	sl, r0
 800896a:	b1a8      	cbz	r0, 8008998 <__gethex+0x1ec>
 800896c:	f04f 0a01 	mov.w	sl, #1
 8008970:	1e7b      	subs	r3, r7, #1
 8008972:	1159      	asrs	r1, r3, #5
 8008974:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008978:	f003 021f 	and.w	r2, r3, #31
 800897c:	fa0a f202 	lsl.w	r2, sl, r2
 8008980:	420a      	tst	r2, r1
 8008982:	d009      	beq.n	8008998 <__gethex+0x1ec>
 8008984:	4553      	cmp	r3, sl
 8008986:	dd05      	ble.n	8008994 <__gethex+0x1e8>
 8008988:	4620      	mov	r0, r4
 800898a:	1eb9      	subs	r1, r7, #2
 800898c:	f000 febd 	bl	800970a <__any_on>
 8008990:	2800      	cmp	r0, #0
 8008992:	d144      	bne.n	8008a1e <__gethex+0x272>
 8008994:	f04f 0a02 	mov.w	sl, #2
 8008998:	4639      	mov	r1, r7
 800899a:	4620      	mov	r0, r4
 800899c:	f7ff fe9e 	bl	80086dc <rshift>
 80089a0:	443d      	add	r5, r7
 80089a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089a6:	42ab      	cmp	r3, r5
 80089a8:	da4a      	bge.n	8008a40 <__gethex+0x294>
 80089aa:	4621      	mov	r1, r4
 80089ac:	9802      	ldr	r0, [sp, #8]
 80089ae:	f000 fa55 	bl	8008e5c <_Bfree>
 80089b2:	2300      	movs	r3, #0
 80089b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80089b6:	27a3      	movs	r7, #163	; 0xa3
 80089b8:	6013      	str	r3, [r2, #0]
 80089ba:	e789      	b.n	80088d0 <__gethex+0x124>
 80089bc:	1e73      	subs	r3, r6, #1
 80089be:	9a06      	ldr	r2, [sp, #24]
 80089c0:	9307      	str	r3, [sp, #28]
 80089c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d019      	beq.n	80089fe <__gethex+0x252>
 80089ca:	f1bb 0f20 	cmp.w	fp, #32
 80089ce:	d107      	bne.n	80089e0 <__gethex+0x234>
 80089d0:	9b04      	ldr	r3, [sp, #16]
 80089d2:	9a01      	ldr	r2, [sp, #4]
 80089d4:	f843 2b04 	str.w	r2, [r3], #4
 80089d8:	9304      	str	r3, [sp, #16]
 80089da:	2300      	movs	r3, #0
 80089dc:	469b      	mov	fp, r3
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80089e4:	f7ff fecd 	bl	8008782 <__hexdig_fun>
 80089e8:	9b01      	ldr	r3, [sp, #4]
 80089ea:	f000 000f 	and.w	r0, r0, #15
 80089ee:	fa00 f00b 	lsl.w	r0, r0, fp
 80089f2:	4303      	orrs	r3, r0
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	f10b 0b04 	add.w	fp, fp, #4
 80089fa:	9b07      	ldr	r3, [sp, #28]
 80089fc:	e00d      	b.n	8008a1a <__gethex+0x26e>
 80089fe:	9a08      	ldr	r2, [sp, #32]
 8008a00:	1e73      	subs	r3, r6, #1
 8008a02:	4413      	add	r3, r2
 8008a04:	42bb      	cmp	r3, r7
 8008a06:	d3e0      	bcc.n	80089ca <__gethex+0x21e>
 8008a08:	4618      	mov	r0, r3
 8008a0a:	4652      	mov	r2, sl
 8008a0c:	9903      	ldr	r1, [sp, #12]
 8008a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a10:	f001 fbf0 	bl	800a1f4 <strncmp>
 8008a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d1d7      	bne.n	80089ca <__gethex+0x21e>
 8008a1a:	461e      	mov	r6, r3
 8008a1c:	e78c      	b.n	8008938 <__gethex+0x18c>
 8008a1e:	f04f 0a03 	mov.w	sl, #3
 8008a22:	e7b9      	b.n	8008998 <__gethex+0x1ec>
 8008a24:	da09      	bge.n	8008a3a <__gethex+0x28e>
 8008a26:	1bf7      	subs	r7, r6, r7
 8008a28:	4621      	mov	r1, r4
 8008a2a:	463a      	mov	r2, r7
 8008a2c:	9802      	ldr	r0, [sp, #8]
 8008a2e:	f000 fc2d 	bl	800928c <__lshift>
 8008a32:	4604      	mov	r4, r0
 8008a34:	1bed      	subs	r5, r5, r7
 8008a36:	f100 0914 	add.w	r9, r0, #20
 8008a3a:	f04f 0a00 	mov.w	sl, #0
 8008a3e:	e7b0      	b.n	80089a2 <__gethex+0x1f6>
 8008a40:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008a44:	42a8      	cmp	r0, r5
 8008a46:	dd72      	ble.n	8008b2e <__gethex+0x382>
 8008a48:	1b45      	subs	r5, r0, r5
 8008a4a:	42ae      	cmp	r6, r5
 8008a4c:	dc35      	bgt.n	8008aba <__gethex+0x30e>
 8008a4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d029      	beq.n	8008aaa <__gethex+0x2fe>
 8008a56:	2b03      	cmp	r3, #3
 8008a58:	d02b      	beq.n	8008ab2 <__gethex+0x306>
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d11c      	bne.n	8008a98 <__gethex+0x2ec>
 8008a5e:	42ae      	cmp	r6, r5
 8008a60:	d11a      	bne.n	8008a98 <__gethex+0x2ec>
 8008a62:	2e01      	cmp	r6, #1
 8008a64:	d112      	bne.n	8008a8c <__gethex+0x2e0>
 8008a66:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008a6a:	9a05      	ldr	r2, [sp, #20]
 8008a6c:	2762      	movs	r7, #98	; 0x62
 8008a6e:	6013      	str	r3, [r2, #0]
 8008a70:	2301      	movs	r3, #1
 8008a72:	6123      	str	r3, [r4, #16]
 8008a74:	f8c9 3000 	str.w	r3, [r9]
 8008a78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a7a:	601c      	str	r4, [r3, #0]
 8008a7c:	e728      	b.n	80088d0 <__gethex+0x124>
 8008a7e:	bf00      	nop
 8008a80:	0800af98 	.word	0x0800af98
 8008a84:	0800af21 	.word	0x0800af21
 8008a88:	0800af32 	.word	0x0800af32
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	1e71      	subs	r1, r6, #1
 8008a90:	f000 fe3b 	bl	800970a <__any_on>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d1e6      	bne.n	8008a66 <__gethex+0x2ba>
 8008a98:	4621      	mov	r1, r4
 8008a9a:	9802      	ldr	r0, [sp, #8]
 8008a9c:	f000 f9de 	bl	8008e5c <_Bfree>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008aa4:	2750      	movs	r7, #80	; 0x50
 8008aa6:	6013      	str	r3, [r2, #0]
 8008aa8:	e712      	b.n	80088d0 <__gethex+0x124>
 8008aaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1f3      	bne.n	8008a98 <__gethex+0x2ec>
 8008ab0:	e7d9      	b.n	8008a66 <__gethex+0x2ba>
 8008ab2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1d6      	bne.n	8008a66 <__gethex+0x2ba>
 8008ab8:	e7ee      	b.n	8008a98 <__gethex+0x2ec>
 8008aba:	1e6f      	subs	r7, r5, #1
 8008abc:	f1ba 0f00 	cmp.w	sl, #0
 8008ac0:	d132      	bne.n	8008b28 <__gethex+0x37c>
 8008ac2:	b127      	cbz	r7, 8008ace <__gethex+0x322>
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 fe1f 	bl	800970a <__any_on>
 8008acc:	4682      	mov	sl, r0
 8008ace:	2101      	movs	r1, #1
 8008ad0:	117b      	asrs	r3, r7, #5
 8008ad2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008ad6:	f007 071f 	and.w	r7, r7, #31
 8008ada:	fa01 f707 	lsl.w	r7, r1, r7
 8008ade:	421f      	tst	r7, r3
 8008ae0:	f04f 0702 	mov.w	r7, #2
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	bf18      	it	ne
 8008aea:	f04a 0a02 	orrne.w	sl, sl, #2
 8008aee:	1b76      	subs	r6, r6, r5
 8008af0:	f7ff fdf4 	bl	80086dc <rshift>
 8008af4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008af8:	f1ba 0f00 	cmp.w	sl, #0
 8008afc:	d048      	beq.n	8008b90 <__gethex+0x3e4>
 8008afe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d015      	beq.n	8008b32 <__gethex+0x386>
 8008b06:	2b03      	cmp	r3, #3
 8008b08:	d017      	beq.n	8008b3a <__gethex+0x38e>
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d109      	bne.n	8008b22 <__gethex+0x376>
 8008b0e:	f01a 0f02 	tst.w	sl, #2
 8008b12:	d006      	beq.n	8008b22 <__gethex+0x376>
 8008b14:	f8d9 0000 	ldr.w	r0, [r9]
 8008b18:	ea4a 0a00 	orr.w	sl, sl, r0
 8008b1c:	f01a 0f01 	tst.w	sl, #1
 8008b20:	d10e      	bne.n	8008b40 <__gethex+0x394>
 8008b22:	f047 0710 	orr.w	r7, r7, #16
 8008b26:	e033      	b.n	8008b90 <__gethex+0x3e4>
 8008b28:	f04f 0a01 	mov.w	sl, #1
 8008b2c:	e7cf      	b.n	8008ace <__gethex+0x322>
 8008b2e:	2701      	movs	r7, #1
 8008b30:	e7e2      	b.n	8008af8 <__gethex+0x34c>
 8008b32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b34:	f1c3 0301 	rsb	r3, r3, #1
 8008b38:	9315      	str	r3, [sp, #84]	; 0x54
 8008b3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d0f0      	beq.n	8008b22 <__gethex+0x376>
 8008b40:	f04f 0c00 	mov.w	ip, #0
 8008b44:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b48:	f104 0314 	add.w	r3, r4, #20
 8008b4c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008b50:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b54:	4618      	mov	r0, r3
 8008b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b5a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008b5e:	d01c      	beq.n	8008b9a <__gethex+0x3ee>
 8008b60:	3201      	adds	r2, #1
 8008b62:	6002      	str	r2, [r0, #0]
 8008b64:	2f02      	cmp	r7, #2
 8008b66:	f104 0314 	add.w	r3, r4, #20
 8008b6a:	d13d      	bne.n	8008be8 <__gethex+0x43c>
 8008b6c:	f8d8 2000 	ldr.w	r2, [r8]
 8008b70:	3a01      	subs	r2, #1
 8008b72:	42b2      	cmp	r2, r6
 8008b74:	d10a      	bne.n	8008b8c <__gethex+0x3e0>
 8008b76:	2201      	movs	r2, #1
 8008b78:	1171      	asrs	r1, r6, #5
 8008b7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b7e:	f006 061f 	and.w	r6, r6, #31
 8008b82:	fa02 f606 	lsl.w	r6, r2, r6
 8008b86:	421e      	tst	r6, r3
 8008b88:	bf18      	it	ne
 8008b8a:	4617      	movne	r7, r2
 8008b8c:	f047 0720 	orr.w	r7, r7, #32
 8008b90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b92:	601c      	str	r4, [r3, #0]
 8008b94:	9b05      	ldr	r3, [sp, #20]
 8008b96:	601d      	str	r5, [r3, #0]
 8008b98:	e69a      	b.n	80088d0 <__gethex+0x124>
 8008b9a:	4299      	cmp	r1, r3
 8008b9c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ba0:	d8d8      	bhi.n	8008b54 <__gethex+0x3a8>
 8008ba2:	68a3      	ldr	r3, [r4, #8]
 8008ba4:	459b      	cmp	fp, r3
 8008ba6:	db17      	blt.n	8008bd8 <__gethex+0x42c>
 8008ba8:	6861      	ldr	r1, [r4, #4]
 8008baa:	9802      	ldr	r0, [sp, #8]
 8008bac:	3101      	adds	r1, #1
 8008bae:	f000 f915 	bl	8008ddc <_Balloc>
 8008bb2:	4681      	mov	r9, r0
 8008bb4:	b918      	cbnz	r0, 8008bbe <__gethex+0x412>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	2184      	movs	r1, #132	; 0x84
 8008bba:	4b19      	ldr	r3, [pc, #100]	; (8008c20 <__gethex+0x474>)
 8008bbc:	e6ab      	b.n	8008916 <__gethex+0x16a>
 8008bbe:	6922      	ldr	r2, [r4, #16]
 8008bc0:	f104 010c 	add.w	r1, r4, #12
 8008bc4:	3202      	adds	r2, #2
 8008bc6:	0092      	lsls	r2, r2, #2
 8008bc8:	300c      	adds	r0, #12
 8008bca:	f7fe fdc9 	bl	8007760 <memcpy>
 8008bce:	4621      	mov	r1, r4
 8008bd0:	9802      	ldr	r0, [sp, #8]
 8008bd2:	f000 f943 	bl	8008e5c <_Bfree>
 8008bd6:	464c      	mov	r4, r9
 8008bd8:	6923      	ldr	r3, [r4, #16]
 8008bda:	1c5a      	adds	r2, r3, #1
 8008bdc:	6122      	str	r2, [r4, #16]
 8008bde:	2201      	movs	r2, #1
 8008be0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008be4:	615a      	str	r2, [r3, #20]
 8008be6:	e7bd      	b.n	8008b64 <__gethex+0x3b8>
 8008be8:	6922      	ldr	r2, [r4, #16]
 8008bea:	455a      	cmp	r2, fp
 8008bec:	dd0b      	ble.n	8008c06 <__gethex+0x45a>
 8008bee:	2101      	movs	r1, #1
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f7ff fd73 	bl	80086dc <rshift>
 8008bf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bfa:	3501      	adds	r5, #1
 8008bfc:	42ab      	cmp	r3, r5
 8008bfe:	f6ff aed4 	blt.w	80089aa <__gethex+0x1fe>
 8008c02:	2701      	movs	r7, #1
 8008c04:	e7c2      	b.n	8008b8c <__gethex+0x3e0>
 8008c06:	f016 061f 	ands.w	r6, r6, #31
 8008c0a:	d0fa      	beq.n	8008c02 <__gethex+0x456>
 8008c0c:	4453      	add	r3, sl
 8008c0e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008c12:	f000 f9d5 	bl	8008fc0 <__hi0bits>
 8008c16:	f1c6 0620 	rsb	r6, r6, #32
 8008c1a:	42b0      	cmp	r0, r6
 8008c1c:	dbe7      	blt.n	8008bee <__gethex+0x442>
 8008c1e:	e7f0      	b.n	8008c02 <__gethex+0x456>
 8008c20:	0800af21 	.word	0x0800af21

08008c24 <L_shift>:
 8008c24:	f1c2 0208 	rsb	r2, r2, #8
 8008c28:	0092      	lsls	r2, r2, #2
 8008c2a:	b570      	push	{r4, r5, r6, lr}
 8008c2c:	f1c2 0620 	rsb	r6, r2, #32
 8008c30:	6843      	ldr	r3, [r0, #4]
 8008c32:	6804      	ldr	r4, [r0, #0]
 8008c34:	fa03 f506 	lsl.w	r5, r3, r6
 8008c38:	432c      	orrs	r4, r5
 8008c3a:	40d3      	lsrs	r3, r2
 8008c3c:	6004      	str	r4, [r0, #0]
 8008c3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c42:	4288      	cmp	r0, r1
 8008c44:	d3f4      	bcc.n	8008c30 <L_shift+0xc>
 8008c46:	bd70      	pop	{r4, r5, r6, pc}

08008c48 <__match>:
 8008c48:	b530      	push	{r4, r5, lr}
 8008c4a:	6803      	ldr	r3, [r0, #0]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c52:	b914      	cbnz	r4, 8008c5a <__match+0x12>
 8008c54:	6003      	str	r3, [r0, #0]
 8008c56:	2001      	movs	r0, #1
 8008c58:	bd30      	pop	{r4, r5, pc}
 8008c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008c62:	2d19      	cmp	r5, #25
 8008c64:	bf98      	it	ls
 8008c66:	3220      	addls	r2, #32
 8008c68:	42a2      	cmp	r2, r4
 8008c6a:	d0f0      	beq.n	8008c4e <__match+0x6>
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	e7f3      	b.n	8008c58 <__match+0x10>

08008c70 <__hexnan>:
 8008c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c74:	2500      	movs	r5, #0
 8008c76:	680b      	ldr	r3, [r1, #0]
 8008c78:	4682      	mov	sl, r0
 8008c7a:	115e      	asrs	r6, r3, #5
 8008c7c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008c80:	f013 031f 	ands.w	r3, r3, #31
 8008c84:	bf18      	it	ne
 8008c86:	3604      	addne	r6, #4
 8008c88:	1f37      	subs	r7, r6, #4
 8008c8a:	46b9      	mov	r9, r7
 8008c8c:	463c      	mov	r4, r7
 8008c8e:	46ab      	mov	fp, r5
 8008c90:	b087      	sub	sp, #28
 8008c92:	4690      	mov	r8, r2
 8008c94:	6802      	ldr	r2, [r0, #0]
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	f846 5c04 	str.w	r5, [r6, #-4]
 8008c9c:	9502      	str	r5, [sp, #8]
 8008c9e:	7851      	ldrb	r1, [r2, #1]
 8008ca0:	1c53      	adds	r3, r2, #1
 8008ca2:	9303      	str	r3, [sp, #12]
 8008ca4:	b341      	cbz	r1, 8008cf8 <__hexnan+0x88>
 8008ca6:	4608      	mov	r0, r1
 8008ca8:	9205      	str	r2, [sp, #20]
 8008caa:	9104      	str	r1, [sp, #16]
 8008cac:	f7ff fd69 	bl	8008782 <__hexdig_fun>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d14f      	bne.n	8008d54 <__hexnan+0xe4>
 8008cb4:	9904      	ldr	r1, [sp, #16]
 8008cb6:	9a05      	ldr	r2, [sp, #20]
 8008cb8:	2920      	cmp	r1, #32
 8008cba:	d818      	bhi.n	8008cee <__hexnan+0x7e>
 8008cbc:	9b02      	ldr	r3, [sp, #8]
 8008cbe:	459b      	cmp	fp, r3
 8008cc0:	dd13      	ble.n	8008cea <__hexnan+0x7a>
 8008cc2:	454c      	cmp	r4, r9
 8008cc4:	d206      	bcs.n	8008cd4 <__hexnan+0x64>
 8008cc6:	2d07      	cmp	r5, #7
 8008cc8:	dc04      	bgt.n	8008cd4 <__hexnan+0x64>
 8008cca:	462a      	mov	r2, r5
 8008ccc:	4649      	mov	r1, r9
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f7ff ffa8 	bl	8008c24 <L_shift>
 8008cd4:	4544      	cmp	r4, r8
 8008cd6:	d950      	bls.n	8008d7a <__hexnan+0x10a>
 8008cd8:	2300      	movs	r3, #0
 8008cda:	f1a4 0904 	sub.w	r9, r4, #4
 8008cde:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ce2:	461d      	mov	r5, r3
 8008ce4:	464c      	mov	r4, r9
 8008ce6:	f8cd b008 	str.w	fp, [sp, #8]
 8008cea:	9a03      	ldr	r2, [sp, #12]
 8008cec:	e7d7      	b.n	8008c9e <__hexnan+0x2e>
 8008cee:	2929      	cmp	r1, #41	; 0x29
 8008cf0:	d156      	bne.n	8008da0 <__hexnan+0x130>
 8008cf2:	3202      	adds	r2, #2
 8008cf4:	f8ca 2000 	str.w	r2, [sl]
 8008cf8:	f1bb 0f00 	cmp.w	fp, #0
 8008cfc:	d050      	beq.n	8008da0 <__hexnan+0x130>
 8008cfe:	454c      	cmp	r4, r9
 8008d00:	d206      	bcs.n	8008d10 <__hexnan+0xa0>
 8008d02:	2d07      	cmp	r5, #7
 8008d04:	dc04      	bgt.n	8008d10 <__hexnan+0xa0>
 8008d06:	462a      	mov	r2, r5
 8008d08:	4649      	mov	r1, r9
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f7ff ff8a 	bl	8008c24 <L_shift>
 8008d10:	4544      	cmp	r4, r8
 8008d12:	d934      	bls.n	8008d7e <__hexnan+0x10e>
 8008d14:	4623      	mov	r3, r4
 8008d16:	f1a8 0204 	sub.w	r2, r8, #4
 8008d1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d1e:	429f      	cmp	r7, r3
 8008d20:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d24:	d2f9      	bcs.n	8008d1a <__hexnan+0xaa>
 8008d26:	1b3b      	subs	r3, r7, r4
 8008d28:	f023 0303 	bic.w	r3, r3, #3
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	3401      	adds	r4, #1
 8008d30:	3e03      	subs	r6, #3
 8008d32:	42b4      	cmp	r4, r6
 8008d34:	bf88      	it	hi
 8008d36:	2304      	movhi	r3, #4
 8008d38:	2200      	movs	r2, #0
 8008d3a:	4443      	add	r3, r8
 8008d3c:	f843 2b04 	str.w	r2, [r3], #4
 8008d40:	429f      	cmp	r7, r3
 8008d42:	d2fb      	bcs.n	8008d3c <__hexnan+0xcc>
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	b91b      	cbnz	r3, 8008d50 <__hexnan+0xe0>
 8008d48:	4547      	cmp	r7, r8
 8008d4a:	d127      	bne.n	8008d9c <__hexnan+0x12c>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	2005      	movs	r0, #5
 8008d52:	e026      	b.n	8008da2 <__hexnan+0x132>
 8008d54:	3501      	adds	r5, #1
 8008d56:	2d08      	cmp	r5, #8
 8008d58:	f10b 0b01 	add.w	fp, fp, #1
 8008d5c:	dd06      	ble.n	8008d6c <__hexnan+0xfc>
 8008d5e:	4544      	cmp	r4, r8
 8008d60:	d9c3      	bls.n	8008cea <__hexnan+0x7a>
 8008d62:	2300      	movs	r3, #0
 8008d64:	2501      	movs	r5, #1
 8008d66:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d6a:	3c04      	subs	r4, #4
 8008d6c:	6822      	ldr	r2, [r4, #0]
 8008d6e:	f000 000f 	and.w	r0, r0, #15
 8008d72:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008d76:	6022      	str	r2, [r4, #0]
 8008d78:	e7b7      	b.n	8008cea <__hexnan+0x7a>
 8008d7a:	2508      	movs	r5, #8
 8008d7c:	e7b5      	b.n	8008cea <__hexnan+0x7a>
 8008d7e:	9b01      	ldr	r3, [sp, #4]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d0df      	beq.n	8008d44 <__hexnan+0xd4>
 8008d84:	f04f 32ff 	mov.w	r2, #4294967295
 8008d88:	f1c3 0320 	rsb	r3, r3, #32
 8008d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d90:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008d94:	401a      	ands	r2, r3
 8008d96:	f846 2c04 	str.w	r2, [r6, #-4]
 8008d9a:	e7d3      	b.n	8008d44 <__hexnan+0xd4>
 8008d9c:	3f04      	subs	r7, #4
 8008d9e:	e7d1      	b.n	8008d44 <__hexnan+0xd4>
 8008da0:	2004      	movs	r0, #4
 8008da2:	b007      	add	sp, #28
 8008da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008da8 <malloc>:
 8008da8:	4b02      	ldr	r3, [pc, #8]	; (8008db4 <malloc+0xc>)
 8008daa:	4601      	mov	r1, r0
 8008dac:	6818      	ldr	r0, [r3, #0]
 8008dae:	f000 bd49 	b.w	8009844 <_malloc_r>
 8008db2:	bf00      	nop
 8008db4:	20000024 	.word	0x20000024

08008db8 <__ascii_mbtowc>:
 8008db8:	b082      	sub	sp, #8
 8008dba:	b901      	cbnz	r1, 8008dbe <__ascii_mbtowc+0x6>
 8008dbc:	a901      	add	r1, sp, #4
 8008dbe:	b142      	cbz	r2, 8008dd2 <__ascii_mbtowc+0x1a>
 8008dc0:	b14b      	cbz	r3, 8008dd6 <__ascii_mbtowc+0x1e>
 8008dc2:	7813      	ldrb	r3, [r2, #0]
 8008dc4:	600b      	str	r3, [r1, #0]
 8008dc6:	7812      	ldrb	r2, [r2, #0]
 8008dc8:	1e10      	subs	r0, r2, #0
 8008dca:	bf18      	it	ne
 8008dcc:	2001      	movne	r0, #1
 8008dce:	b002      	add	sp, #8
 8008dd0:	4770      	bx	lr
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	e7fb      	b.n	8008dce <__ascii_mbtowc+0x16>
 8008dd6:	f06f 0001 	mvn.w	r0, #1
 8008dda:	e7f8      	b.n	8008dce <__ascii_mbtowc+0x16>

08008ddc <_Balloc>:
 8008ddc:	b570      	push	{r4, r5, r6, lr}
 8008dde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008de0:	4604      	mov	r4, r0
 8008de2:	460d      	mov	r5, r1
 8008de4:	b976      	cbnz	r6, 8008e04 <_Balloc+0x28>
 8008de6:	2010      	movs	r0, #16
 8008de8:	f7ff ffde 	bl	8008da8 <malloc>
 8008dec:	4602      	mov	r2, r0
 8008dee:	6260      	str	r0, [r4, #36]	; 0x24
 8008df0:	b920      	cbnz	r0, 8008dfc <_Balloc+0x20>
 8008df2:	2166      	movs	r1, #102	; 0x66
 8008df4:	4b17      	ldr	r3, [pc, #92]	; (8008e54 <_Balloc+0x78>)
 8008df6:	4818      	ldr	r0, [pc, #96]	; (8008e58 <_Balloc+0x7c>)
 8008df8:	f7ff fc40 	bl	800867c <__assert_func>
 8008dfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e00:	6006      	str	r6, [r0, #0]
 8008e02:	60c6      	str	r6, [r0, #12]
 8008e04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e06:	68f3      	ldr	r3, [r6, #12]
 8008e08:	b183      	cbz	r3, 8008e2c <_Balloc+0x50>
 8008e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e12:	b9b8      	cbnz	r0, 8008e44 <_Balloc+0x68>
 8008e14:	2101      	movs	r1, #1
 8008e16:	fa01 f605 	lsl.w	r6, r1, r5
 8008e1a:	1d72      	adds	r2, r6, #5
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	0092      	lsls	r2, r2, #2
 8008e20:	f000 fc94 	bl	800974c <_calloc_r>
 8008e24:	b160      	cbz	r0, 8008e40 <_Balloc+0x64>
 8008e26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e2a:	e00e      	b.n	8008e4a <_Balloc+0x6e>
 8008e2c:	2221      	movs	r2, #33	; 0x21
 8008e2e:	2104      	movs	r1, #4
 8008e30:	4620      	mov	r0, r4
 8008e32:	f000 fc8b 	bl	800974c <_calloc_r>
 8008e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e38:	60f0      	str	r0, [r6, #12]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1e4      	bne.n	8008e0a <_Balloc+0x2e>
 8008e40:	2000      	movs	r0, #0
 8008e42:	bd70      	pop	{r4, r5, r6, pc}
 8008e44:	6802      	ldr	r2, [r0, #0]
 8008e46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e50:	e7f7      	b.n	8008e42 <_Balloc+0x66>
 8008e52:	bf00      	nop
 8008e54:	0800ad70 	.word	0x0800ad70
 8008e58:	0800afac 	.word	0x0800afac

08008e5c <_Bfree>:
 8008e5c:	b570      	push	{r4, r5, r6, lr}
 8008e5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e60:	4605      	mov	r5, r0
 8008e62:	460c      	mov	r4, r1
 8008e64:	b976      	cbnz	r6, 8008e84 <_Bfree+0x28>
 8008e66:	2010      	movs	r0, #16
 8008e68:	f7ff ff9e 	bl	8008da8 <malloc>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	6268      	str	r0, [r5, #36]	; 0x24
 8008e70:	b920      	cbnz	r0, 8008e7c <_Bfree+0x20>
 8008e72:	218a      	movs	r1, #138	; 0x8a
 8008e74:	4b08      	ldr	r3, [pc, #32]	; (8008e98 <_Bfree+0x3c>)
 8008e76:	4809      	ldr	r0, [pc, #36]	; (8008e9c <_Bfree+0x40>)
 8008e78:	f7ff fc00 	bl	800867c <__assert_func>
 8008e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e80:	6006      	str	r6, [r0, #0]
 8008e82:	60c6      	str	r6, [r0, #12]
 8008e84:	b13c      	cbz	r4, 8008e96 <_Bfree+0x3a>
 8008e86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e88:	6862      	ldr	r2, [r4, #4]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e90:	6021      	str	r1, [r4, #0]
 8008e92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e96:	bd70      	pop	{r4, r5, r6, pc}
 8008e98:	0800ad70 	.word	0x0800ad70
 8008e9c:	0800afac 	.word	0x0800afac

08008ea0 <__multadd>:
 8008ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea4:	4607      	mov	r7, r0
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	461e      	mov	r6, r3
 8008eaa:	2000      	movs	r0, #0
 8008eac:	690d      	ldr	r5, [r1, #16]
 8008eae:	f101 0c14 	add.w	ip, r1, #20
 8008eb2:	f8dc 3000 	ldr.w	r3, [ip]
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	b299      	uxth	r1, r3
 8008eba:	fb02 6101 	mla	r1, r2, r1, r6
 8008ebe:	0c1e      	lsrs	r6, r3, #16
 8008ec0:	0c0b      	lsrs	r3, r1, #16
 8008ec2:	fb02 3306 	mla	r3, r2, r6, r3
 8008ec6:	b289      	uxth	r1, r1
 8008ec8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ecc:	4285      	cmp	r5, r0
 8008ece:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ed2:	f84c 1b04 	str.w	r1, [ip], #4
 8008ed6:	dcec      	bgt.n	8008eb2 <__multadd+0x12>
 8008ed8:	b30e      	cbz	r6, 8008f1e <__multadd+0x7e>
 8008eda:	68a3      	ldr	r3, [r4, #8]
 8008edc:	42ab      	cmp	r3, r5
 8008ede:	dc19      	bgt.n	8008f14 <__multadd+0x74>
 8008ee0:	6861      	ldr	r1, [r4, #4]
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	3101      	adds	r1, #1
 8008ee6:	f7ff ff79 	bl	8008ddc <_Balloc>
 8008eea:	4680      	mov	r8, r0
 8008eec:	b928      	cbnz	r0, 8008efa <__multadd+0x5a>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	21b5      	movs	r1, #181	; 0xb5
 8008ef2:	4b0c      	ldr	r3, [pc, #48]	; (8008f24 <__multadd+0x84>)
 8008ef4:	480c      	ldr	r0, [pc, #48]	; (8008f28 <__multadd+0x88>)
 8008ef6:	f7ff fbc1 	bl	800867c <__assert_func>
 8008efa:	6922      	ldr	r2, [r4, #16]
 8008efc:	f104 010c 	add.w	r1, r4, #12
 8008f00:	3202      	adds	r2, #2
 8008f02:	0092      	lsls	r2, r2, #2
 8008f04:	300c      	adds	r0, #12
 8008f06:	f7fe fc2b 	bl	8007760 <memcpy>
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	4638      	mov	r0, r7
 8008f0e:	f7ff ffa5 	bl	8008e5c <_Bfree>
 8008f12:	4644      	mov	r4, r8
 8008f14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f18:	3501      	adds	r5, #1
 8008f1a:	615e      	str	r6, [r3, #20]
 8008f1c:	6125      	str	r5, [r4, #16]
 8008f1e:	4620      	mov	r0, r4
 8008f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f24:	0800af21 	.word	0x0800af21
 8008f28:	0800afac 	.word	0x0800afac

08008f2c <__s2b>:
 8008f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f30:	4615      	mov	r5, r2
 8008f32:	2209      	movs	r2, #9
 8008f34:	461f      	mov	r7, r3
 8008f36:	3308      	adds	r3, #8
 8008f38:	460c      	mov	r4, r1
 8008f3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f3e:	4606      	mov	r6, r0
 8008f40:	2201      	movs	r2, #1
 8008f42:	2100      	movs	r1, #0
 8008f44:	429a      	cmp	r2, r3
 8008f46:	db09      	blt.n	8008f5c <__s2b+0x30>
 8008f48:	4630      	mov	r0, r6
 8008f4a:	f7ff ff47 	bl	8008ddc <_Balloc>
 8008f4e:	b940      	cbnz	r0, 8008f62 <__s2b+0x36>
 8008f50:	4602      	mov	r2, r0
 8008f52:	21ce      	movs	r1, #206	; 0xce
 8008f54:	4b18      	ldr	r3, [pc, #96]	; (8008fb8 <__s2b+0x8c>)
 8008f56:	4819      	ldr	r0, [pc, #100]	; (8008fbc <__s2b+0x90>)
 8008f58:	f7ff fb90 	bl	800867c <__assert_func>
 8008f5c:	0052      	lsls	r2, r2, #1
 8008f5e:	3101      	adds	r1, #1
 8008f60:	e7f0      	b.n	8008f44 <__s2b+0x18>
 8008f62:	9b08      	ldr	r3, [sp, #32]
 8008f64:	2d09      	cmp	r5, #9
 8008f66:	6143      	str	r3, [r0, #20]
 8008f68:	f04f 0301 	mov.w	r3, #1
 8008f6c:	6103      	str	r3, [r0, #16]
 8008f6e:	dd16      	ble.n	8008f9e <__s2b+0x72>
 8008f70:	f104 0909 	add.w	r9, r4, #9
 8008f74:	46c8      	mov	r8, r9
 8008f76:	442c      	add	r4, r5
 8008f78:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008f7c:	4601      	mov	r1, r0
 8008f7e:	220a      	movs	r2, #10
 8008f80:	4630      	mov	r0, r6
 8008f82:	3b30      	subs	r3, #48	; 0x30
 8008f84:	f7ff ff8c 	bl	8008ea0 <__multadd>
 8008f88:	45a0      	cmp	r8, r4
 8008f8a:	d1f5      	bne.n	8008f78 <__s2b+0x4c>
 8008f8c:	f1a5 0408 	sub.w	r4, r5, #8
 8008f90:	444c      	add	r4, r9
 8008f92:	1b2d      	subs	r5, r5, r4
 8008f94:	1963      	adds	r3, r4, r5
 8008f96:	42bb      	cmp	r3, r7
 8008f98:	db04      	blt.n	8008fa4 <__s2b+0x78>
 8008f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f9e:	2509      	movs	r5, #9
 8008fa0:	340a      	adds	r4, #10
 8008fa2:	e7f6      	b.n	8008f92 <__s2b+0x66>
 8008fa4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008fa8:	4601      	mov	r1, r0
 8008faa:	220a      	movs	r2, #10
 8008fac:	4630      	mov	r0, r6
 8008fae:	3b30      	subs	r3, #48	; 0x30
 8008fb0:	f7ff ff76 	bl	8008ea0 <__multadd>
 8008fb4:	e7ee      	b.n	8008f94 <__s2b+0x68>
 8008fb6:	bf00      	nop
 8008fb8:	0800af21 	.word	0x0800af21
 8008fbc:	0800afac 	.word	0x0800afac

08008fc0 <__hi0bits>:
 8008fc0:	0c02      	lsrs	r2, r0, #16
 8008fc2:	0412      	lsls	r2, r2, #16
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	b9ca      	cbnz	r2, 8008ffc <__hi0bits+0x3c>
 8008fc8:	0403      	lsls	r3, r0, #16
 8008fca:	2010      	movs	r0, #16
 8008fcc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008fd0:	bf04      	itt	eq
 8008fd2:	021b      	lsleq	r3, r3, #8
 8008fd4:	3008      	addeq	r0, #8
 8008fd6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008fda:	bf04      	itt	eq
 8008fdc:	011b      	lsleq	r3, r3, #4
 8008fde:	3004      	addeq	r0, #4
 8008fe0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008fe4:	bf04      	itt	eq
 8008fe6:	009b      	lsleq	r3, r3, #2
 8008fe8:	3002      	addeq	r0, #2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	db05      	blt.n	8008ffa <__hi0bits+0x3a>
 8008fee:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008ff2:	f100 0001 	add.w	r0, r0, #1
 8008ff6:	bf08      	it	eq
 8008ff8:	2020      	moveq	r0, #32
 8008ffa:	4770      	bx	lr
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	e7e5      	b.n	8008fcc <__hi0bits+0xc>

08009000 <__lo0bits>:
 8009000:	6803      	ldr	r3, [r0, #0]
 8009002:	4602      	mov	r2, r0
 8009004:	f013 0007 	ands.w	r0, r3, #7
 8009008:	d00b      	beq.n	8009022 <__lo0bits+0x22>
 800900a:	07d9      	lsls	r1, r3, #31
 800900c:	d421      	bmi.n	8009052 <__lo0bits+0x52>
 800900e:	0798      	lsls	r0, r3, #30
 8009010:	bf49      	itett	mi
 8009012:	085b      	lsrmi	r3, r3, #1
 8009014:	089b      	lsrpl	r3, r3, #2
 8009016:	2001      	movmi	r0, #1
 8009018:	6013      	strmi	r3, [r2, #0]
 800901a:	bf5c      	itt	pl
 800901c:	2002      	movpl	r0, #2
 800901e:	6013      	strpl	r3, [r2, #0]
 8009020:	4770      	bx	lr
 8009022:	b299      	uxth	r1, r3
 8009024:	b909      	cbnz	r1, 800902a <__lo0bits+0x2a>
 8009026:	2010      	movs	r0, #16
 8009028:	0c1b      	lsrs	r3, r3, #16
 800902a:	b2d9      	uxtb	r1, r3
 800902c:	b909      	cbnz	r1, 8009032 <__lo0bits+0x32>
 800902e:	3008      	adds	r0, #8
 8009030:	0a1b      	lsrs	r3, r3, #8
 8009032:	0719      	lsls	r1, r3, #28
 8009034:	bf04      	itt	eq
 8009036:	091b      	lsreq	r3, r3, #4
 8009038:	3004      	addeq	r0, #4
 800903a:	0799      	lsls	r1, r3, #30
 800903c:	bf04      	itt	eq
 800903e:	089b      	lsreq	r3, r3, #2
 8009040:	3002      	addeq	r0, #2
 8009042:	07d9      	lsls	r1, r3, #31
 8009044:	d403      	bmi.n	800904e <__lo0bits+0x4e>
 8009046:	085b      	lsrs	r3, r3, #1
 8009048:	f100 0001 	add.w	r0, r0, #1
 800904c:	d003      	beq.n	8009056 <__lo0bits+0x56>
 800904e:	6013      	str	r3, [r2, #0]
 8009050:	4770      	bx	lr
 8009052:	2000      	movs	r0, #0
 8009054:	4770      	bx	lr
 8009056:	2020      	movs	r0, #32
 8009058:	4770      	bx	lr
	...

0800905c <__i2b>:
 800905c:	b510      	push	{r4, lr}
 800905e:	460c      	mov	r4, r1
 8009060:	2101      	movs	r1, #1
 8009062:	f7ff febb 	bl	8008ddc <_Balloc>
 8009066:	4602      	mov	r2, r0
 8009068:	b928      	cbnz	r0, 8009076 <__i2b+0x1a>
 800906a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800906e:	4b04      	ldr	r3, [pc, #16]	; (8009080 <__i2b+0x24>)
 8009070:	4804      	ldr	r0, [pc, #16]	; (8009084 <__i2b+0x28>)
 8009072:	f7ff fb03 	bl	800867c <__assert_func>
 8009076:	2301      	movs	r3, #1
 8009078:	6144      	str	r4, [r0, #20]
 800907a:	6103      	str	r3, [r0, #16]
 800907c:	bd10      	pop	{r4, pc}
 800907e:	bf00      	nop
 8009080:	0800af21 	.word	0x0800af21
 8009084:	0800afac 	.word	0x0800afac

08009088 <__multiply>:
 8009088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908c:	4691      	mov	r9, r2
 800908e:	690a      	ldr	r2, [r1, #16]
 8009090:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009094:	460c      	mov	r4, r1
 8009096:	429a      	cmp	r2, r3
 8009098:	bfbe      	ittt	lt
 800909a:	460b      	movlt	r3, r1
 800909c:	464c      	movlt	r4, r9
 800909e:	4699      	movlt	r9, r3
 80090a0:	6927      	ldr	r7, [r4, #16]
 80090a2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80090a6:	68a3      	ldr	r3, [r4, #8]
 80090a8:	6861      	ldr	r1, [r4, #4]
 80090aa:	eb07 060a 	add.w	r6, r7, sl
 80090ae:	42b3      	cmp	r3, r6
 80090b0:	b085      	sub	sp, #20
 80090b2:	bfb8      	it	lt
 80090b4:	3101      	addlt	r1, #1
 80090b6:	f7ff fe91 	bl	8008ddc <_Balloc>
 80090ba:	b930      	cbnz	r0, 80090ca <__multiply+0x42>
 80090bc:	4602      	mov	r2, r0
 80090be:	f240 115d 	movw	r1, #349	; 0x15d
 80090c2:	4b43      	ldr	r3, [pc, #268]	; (80091d0 <__multiply+0x148>)
 80090c4:	4843      	ldr	r0, [pc, #268]	; (80091d4 <__multiply+0x14c>)
 80090c6:	f7ff fad9 	bl	800867c <__assert_func>
 80090ca:	f100 0514 	add.w	r5, r0, #20
 80090ce:	462b      	mov	r3, r5
 80090d0:	2200      	movs	r2, #0
 80090d2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090d6:	4543      	cmp	r3, r8
 80090d8:	d321      	bcc.n	800911e <__multiply+0x96>
 80090da:	f104 0314 	add.w	r3, r4, #20
 80090de:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80090e2:	f109 0314 	add.w	r3, r9, #20
 80090e6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80090ea:	9202      	str	r2, [sp, #8]
 80090ec:	1b3a      	subs	r2, r7, r4
 80090ee:	3a15      	subs	r2, #21
 80090f0:	f022 0203 	bic.w	r2, r2, #3
 80090f4:	3204      	adds	r2, #4
 80090f6:	f104 0115 	add.w	r1, r4, #21
 80090fa:	428f      	cmp	r7, r1
 80090fc:	bf38      	it	cc
 80090fe:	2204      	movcc	r2, #4
 8009100:	9201      	str	r2, [sp, #4]
 8009102:	9a02      	ldr	r2, [sp, #8]
 8009104:	9303      	str	r3, [sp, #12]
 8009106:	429a      	cmp	r2, r3
 8009108:	d80c      	bhi.n	8009124 <__multiply+0x9c>
 800910a:	2e00      	cmp	r6, #0
 800910c:	dd03      	ble.n	8009116 <__multiply+0x8e>
 800910e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009112:	2b00      	cmp	r3, #0
 8009114:	d059      	beq.n	80091ca <__multiply+0x142>
 8009116:	6106      	str	r6, [r0, #16]
 8009118:	b005      	add	sp, #20
 800911a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911e:	f843 2b04 	str.w	r2, [r3], #4
 8009122:	e7d8      	b.n	80090d6 <__multiply+0x4e>
 8009124:	f8b3 a000 	ldrh.w	sl, [r3]
 8009128:	f1ba 0f00 	cmp.w	sl, #0
 800912c:	d023      	beq.n	8009176 <__multiply+0xee>
 800912e:	46a9      	mov	r9, r5
 8009130:	f04f 0c00 	mov.w	ip, #0
 8009134:	f104 0e14 	add.w	lr, r4, #20
 8009138:	f85e 2b04 	ldr.w	r2, [lr], #4
 800913c:	f8d9 1000 	ldr.w	r1, [r9]
 8009140:	fa1f fb82 	uxth.w	fp, r2
 8009144:	b289      	uxth	r1, r1
 8009146:	fb0a 110b 	mla	r1, sl, fp, r1
 800914a:	4461      	add	r1, ip
 800914c:	f8d9 c000 	ldr.w	ip, [r9]
 8009150:	0c12      	lsrs	r2, r2, #16
 8009152:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009156:	fb0a c202 	mla	r2, sl, r2, ip
 800915a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800915e:	b289      	uxth	r1, r1
 8009160:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009164:	4577      	cmp	r7, lr
 8009166:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800916a:	f849 1b04 	str.w	r1, [r9], #4
 800916e:	d8e3      	bhi.n	8009138 <__multiply+0xb0>
 8009170:	9a01      	ldr	r2, [sp, #4]
 8009172:	f845 c002 	str.w	ip, [r5, r2]
 8009176:	9a03      	ldr	r2, [sp, #12]
 8009178:	3304      	adds	r3, #4
 800917a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800917e:	f1b9 0f00 	cmp.w	r9, #0
 8009182:	d020      	beq.n	80091c6 <__multiply+0x13e>
 8009184:	46ae      	mov	lr, r5
 8009186:	f04f 0a00 	mov.w	sl, #0
 800918a:	6829      	ldr	r1, [r5, #0]
 800918c:	f104 0c14 	add.w	ip, r4, #20
 8009190:	f8bc b000 	ldrh.w	fp, [ip]
 8009194:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009198:	b289      	uxth	r1, r1
 800919a:	fb09 220b 	mla	r2, r9, fp, r2
 800919e:	4492      	add	sl, r2
 80091a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80091a4:	f84e 1b04 	str.w	r1, [lr], #4
 80091a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80091ac:	f8be 1000 	ldrh.w	r1, [lr]
 80091b0:	0c12      	lsrs	r2, r2, #16
 80091b2:	fb09 1102 	mla	r1, r9, r2, r1
 80091b6:	4567      	cmp	r7, ip
 80091b8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80091bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80091c0:	d8e6      	bhi.n	8009190 <__multiply+0x108>
 80091c2:	9a01      	ldr	r2, [sp, #4]
 80091c4:	50a9      	str	r1, [r5, r2]
 80091c6:	3504      	adds	r5, #4
 80091c8:	e79b      	b.n	8009102 <__multiply+0x7a>
 80091ca:	3e01      	subs	r6, #1
 80091cc:	e79d      	b.n	800910a <__multiply+0x82>
 80091ce:	bf00      	nop
 80091d0:	0800af21 	.word	0x0800af21
 80091d4:	0800afac 	.word	0x0800afac

080091d8 <__pow5mult>:
 80091d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091dc:	4615      	mov	r5, r2
 80091de:	f012 0203 	ands.w	r2, r2, #3
 80091e2:	4606      	mov	r6, r0
 80091e4:	460f      	mov	r7, r1
 80091e6:	d007      	beq.n	80091f8 <__pow5mult+0x20>
 80091e8:	4c25      	ldr	r4, [pc, #148]	; (8009280 <__pow5mult+0xa8>)
 80091ea:	3a01      	subs	r2, #1
 80091ec:	2300      	movs	r3, #0
 80091ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091f2:	f7ff fe55 	bl	8008ea0 <__multadd>
 80091f6:	4607      	mov	r7, r0
 80091f8:	10ad      	asrs	r5, r5, #2
 80091fa:	d03d      	beq.n	8009278 <__pow5mult+0xa0>
 80091fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80091fe:	b97c      	cbnz	r4, 8009220 <__pow5mult+0x48>
 8009200:	2010      	movs	r0, #16
 8009202:	f7ff fdd1 	bl	8008da8 <malloc>
 8009206:	4602      	mov	r2, r0
 8009208:	6270      	str	r0, [r6, #36]	; 0x24
 800920a:	b928      	cbnz	r0, 8009218 <__pow5mult+0x40>
 800920c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009210:	4b1c      	ldr	r3, [pc, #112]	; (8009284 <__pow5mult+0xac>)
 8009212:	481d      	ldr	r0, [pc, #116]	; (8009288 <__pow5mult+0xb0>)
 8009214:	f7ff fa32 	bl	800867c <__assert_func>
 8009218:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800921c:	6004      	str	r4, [r0, #0]
 800921e:	60c4      	str	r4, [r0, #12]
 8009220:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009224:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009228:	b94c      	cbnz	r4, 800923e <__pow5mult+0x66>
 800922a:	f240 2171 	movw	r1, #625	; 0x271
 800922e:	4630      	mov	r0, r6
 8009230:	f7ff ff14 	bl	800905c <__i2b>
 8009234:	2300      	movs	r3, #0
 8009236:	4604      	mov	r4, r0
 8009238:	f8c8 0008 	str.w	r0, [r8, #8]
 800923c:	6003      	str	r3, [r0, #0]
 800923e:	f04f 0900 	mov.w	r9, #0
 8009242:	07eb      	lsls	r3, r5, #31
 8009244:	d50a      	bpl.n	800925c <__pow5mult+0x84>
 8009246:	4639      	mov	r1, r7
 8009248:	4622      	mov	r2, r4
 800924a:	4630      	mov	r0, r6
 800924c:	f7ff ff1c 	bl	8009088 <__multiply>
 8009250:	4680      	mov	r8, r0
 8009252:	4639      	mov	r1, r7
 8009254:	4630      	mov	r0, r6
 8009256:	f7ff fe01 	bl	8008e5c <_Bfree>
 800925a:	4647      	mov	r7, r8
 800925c:	106d      	asrs	r5, r5, #1
 800925e:	d00b      	beq.n	8009278 <__pow5mult+0xa0>
 8009260:	6820      	ldr	r0, [r4, #0]
 8009262:	b938      	cbnz	r0, 8009274 <__pow5mult+0x9c>
 8009264:	4622      	mov	r2, r4
 8009266:	4621      	mov	r1, r4
 8009268:	4630      	mov	r0, r6
 800926a:	f7ff ff0d 	bl	8009088 <__multiply>
 800926e:	6020      	str	r0, [r4, #0]
 8009270:	f8c0 9000 	str.w	r9, [r0]
 8009274:	4604      	mov	r4, r0
 8009276:	e7e4      	b.n	8009242 <__pow5mult+0x6a>
 8009278:	4638      	mov	r0, r7
 800927a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800927e:	bf00      	nop
 8009280:	0800b0f8 	.word	0x0800b0f8
 8009284:	0800ad70 	.word	0x0800ad70
 8009288:	0800afac 	.word	0x0800afac

0800928c <__lshift>:
 800928c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009290:	460c      	mov	r4, r1
 8009292:	4607      	mov	r7, r0
 8009294:	4691      	mov	r9, r2
 8009296:	6923      	ldr	r3, [r4, #16]
 8009298:	6849      	ldr	r1, [r1, #4]
 800929a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800929e:	68a3      	ldr	r3, [r4, #8]
 80092a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092a4:	f108 0601 	add.w	r6, r8, #1
 80092a8:	42b3      	cmp	r3, r6
 80092aa:	db0b      	blt.n	80092c4 <__lshift+0x38>
 80092ac:	4638      	mov	r0, r7
 80092ae:	f7ff fd95 	bl	8008ddc <_Balloc>
 80092b2:	4605      	mov	r5, r0
 80092b4:	b948      	cbnz	r0, 80092ca <__lshift+0x3e>
 80092b6:	4602      	mov	r2, r0
 80092b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80092bc:	4b29      	ldr	r3, [pc, #164]	; (8009364 <__lshift+0xd8>)
 80092be:	482a      	ldr	r0, [pc, #168]	; (8009368 <__lshift+0xdc>)
 80092c0:	f7ff f9dc 	bl	800867c <__assert_func>
 80092c4:	3101      	adds	r1, #1
 80092c6:	005b      	lsls	r3, r3, #1
 80092c8:	e7ee      	b.n	80092a8 <__lshift+0x1c>
 80092ca:	2300      	movs	r3, #0
 80092cc:	f100 0114 	add.w	r1, r0, #20
 80092d0:	f100 0210 	add.w	r2, r0, #16
 80092d4:	4618      	mov	r0, r3
 80092d6:	4553      	cmp	r3, sl
 80092d8:	db37      	blt.n	800934a <__lshift+0xbe>
 80092da:	6920      	ldr	r0, [r4, #16]
 80092dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092e0:	f104 0314 	add.w	r3, r4, #20
 80092e4:	f019 091f 	ands.w	r9, r9, #31
 80092e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80092f0:	d02f      	beq.n	8009352 <__lshift+0xc6>
 80092f2:	468a      	mov	sl, r1
 80092f4:	f04f 0c00 	mov.w	ip, #0
 80092f8:	f1c9 0e20 	rsb	lr, r9, #32
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	fa02 f209 	lsl.w	r2, r2, r9
 8009302:	ea42 020c 	orr.w	r2, r2, ip
 8009306:	f84a 2b04 	str.w	r2, [sl], #4
 800930a:	f853 2b04 	ldr.w	r2, [r3], #4
 800930e:	4298      	cmp	r0, r3
 8009310:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009314:	d8f2      	bhi.n	80092fc <__lshift+0x70>
 8009316:	1b03      	subs	r3, r0, r4
 8009318:	3b15      	subs	r3, #21
 800931a:	f023 0303 	bic.w	r3, r3, #3
 800931e:	3304      	adds	r3, #4
 8009320:	f104 0215 	add.w	r2, r4, #21
 8009324:	4290      	cmp	r0, r2
 8009326:	bf38      	it	cc
 8009328:	2304      	movcc	r3, #4
 800932a:	f841 c003 	str.w	ip, [r1, r3]
 800932e:	f1bc 0f00 	cmp.w	ip, #0
 8009332:	d001      	beq.n	8009338 <__lshift+0xac>
 8009334:	f108 0602 	add.w	r6, r8, #2
 8009338:	3e01      	subs	r6, #1
 800933a:	4638      	mov	r0, r7
 800933c:	4621      	mov	r1, r4
 800933e:	612e      	str	r6, [r5, #16]
 8009340:	f7ff fd8c 	bl	8008e5c <_Bfree>
 8009344:	4628      	mov	r0, r5
 8009346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800934a:	f842 0f04 	str.w	r0, [r2, #4]!
 800934e:	3301      	adds	r3, #1
 8009350:	e7c1      	b.n	80092d6 <__lshift+0x4a>
 8009352:	3904      	subs	r1, #4
 8009354:	f853 2b04 	ldr.w	r2, [r3], #4
 8009358:	4298      	cmp	r0, r3
 800935a:	f841 2f04 	str.w	r2, [r1, #4]!
 800935e:	d8f9      	bhi.n	8009354 <__lshift+0xc8>
 8009360:	e7ea      	b.n	8009338 <__lshift+0xac>
 8009362:	bf00      	nop
 8009364:	0800af21 	.word	0x0800af21
 8009368:	0800afac 	.word	0x0800afac

0800936c <__mcmp>:
 800936c:	4603      	mov	r3, r0
 800936e:	690a      	ldr	r2, [r1, #16]
 8009370:	6900      	ldr	r0, [r0, #16]
 8009372:	b530      	push	{r4, r5, lr}
 8009374:	1a80      	subs	r0, r0, r2
 8009376:	d10d      	bne.n	8009394 <__mcmp+0x28>
 8009378:	3314      	adds	r3, #20
 800937a:	3114      	adds	r1, #20
 800937c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009380:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009384:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009388:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800938c:	4295      	cmp	r5, r2
 800938e:	d002      	beq.n	8009396 <__mcmp+0x2a>
 8009390:	d304      	bcc.n	800939c <__mcmp+0x30>
 8009392:	2001      	movs	r0, #1
 8009394:	bd30      	pop	{r4, r5, pc}
 8009396:	42a3      	cmp	r3, r4
 8009398:	d3f4      	bcc.n	8009384 <__mcmp+0x18>
 800939a:	e7fb      	b.n	8009394 <__mcmp+0x28>
 800939c:	f04f 30ff 	mov.w	r0, #4294967295
 80093a0:	e7f8      	b.n	8009394 <__mcmp+0x28>
	...

080093a4 <__mdiff>:
 80093a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a8:	460d      	mov	r5, r1
 80093aa:	4607      	mov	r7, r0
 80093ac:	4611      	mov	r1, r2
 80093ae:	4628      	mov	r0, r5
 80093b0:	4614      	mov	r4, r2
 80093b2:	f7ff ffdb 	bl	800936c <__mcmp>
 80093b6:	1e06      	subs	r6, r0, #0
 80093b8:	d111      	bne.n	80093de <__mdiff+0x3a>
 80093ba:	4631      	mov	r1, r6
 80093bc:	4638      	mov	r0, r7
 80093be:	f7ff fd0d 	bl	8008ddc <_Balloc>
 80093c2:	4602      	mov	r2, r0
 80093c4:	b928      	cbnz	r0, 80093d2 <__mdiff+0x2e>
 80093c6:	f240 2132 	movw	r1, #562	; 0x232
 80093ca:	4b3a      	ldr	r3, [pc, #232]	; (80094b4 <__mdiff+0x110>)
 80093cc:	483a      	ldr	r0, [pc, #232]	; (80094b8 <__mdiff+0x114>)
 80093ce:	f7ff f955 	bl	800867c <__assert_func>
 80093d2:	2301      	movs	r3, #1
 80093d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80093d8:	4610      	mov	r0, r2
 80093da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093de:	bfa4      	itt	ge
 80093e0:	4623      	movge	r3, r4
 80093e2:	462c      	movge	r4, r5
 80093e4:	4638      	mov	r0, r7
 80093e6:	6861      	ldr	r1, [r4, #4]
 80093e8:	bfa6      	itte	ge
 80093ea:	461d      	movge	r5, r3
 80093ec:	2600      	movge	r6, #0
 80093ee:	2601      	movlt	r6, #1
 80093f0:	f7ff fcf4 	bl	8008ddc <_Balloc>
 80093f4:	4602      	mov	r2, r0
 80093f6:	b918      	cbnz	r0, 8009400 <__mdiff+0x5c>
 80093f8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80093fc:	4b2d      	ldr	r3, [pc, #180]	; (80094b4 <__mdiff+0x110>)
 80093fe:	e7e5      	b.n	80093cc <__mdiff+0x28>
 8009400:	f102 0814 	add.w	r8, r2, #20
 8009404:	46c2      	mov	sl, r8
 8009406:	f04f 0c00 	mov.w	ip, #0
 800940a:	6927      	ldr	r7, [r4, #16]
 800940c:	60c6      	str	r6, [r0, #12]
 800940e:	692e      	ldr	r6, [r5, #16]
 8009410:	f104 0014 	add.w	r0, r4, #20
 8009414:	f105 0914 	add.w	r9, r5, #20
 8009418:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800941c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009420:	3410      	adds	r4, #16
 8009422:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009426:	f859 3b04 	ldr.w	r3, [r9], #4
 800942a:	fa1f f18b 	uxth.w	r1, fp
 800942e:	448c      	add	ip, r1
 8009430:	b299      	uxth	r1, r3
 8009432:	0c1b      	lsrs	r3, r3, #16
 8009434:	ebac 0101 	sub.w	r1, ip, r1
 8009438:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800943c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009440:	b289      	uxth	r1, r1
 8009442:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009446:	454e      	cmp	r6, r9
 8009448:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800944c:	f84a 3b04 	str.w	r3, [sl], #4
 8009450:	d8e7      	bhi.n	8009422 <__mdiff+0x7e>
 8009452:	1b73      	subs	r3, r6, r5
 8009454:	3b15      	subs	r3, #21
 8009456:	f023 0303 	bic.w	r3, r3, #3
 800945a:	3515      	adds	r5, #21
 800945c:	3304      	adds	r3, #4
 800945e:	42ae      	cmp	r6, r5
 8009460:	bf38      	it	cc
 8009462:	2304      	movcc	r3, #4
 8009464:	4418      	add	r0, r3
 8009466:	4443      	add	r3, r8
 8009468:	461e      	mov	r6, r3
 800946a:	4605      	mov	r5, r0
 800946c:	4575      	cmp	r5, lr
 800946e:	d30e      	bcc.n	800948e <__mdiff+0xea>
 8009470:	f10e 0103 	add.w	r1, lr, #3
 8009474:	1a09      	subs	r1, r1, r0
 8009476:	f021 0103 	bic.w	r1, r1, #3
 800947a:	3803      	subs	r0, #3
 800947c:	4586      	cmp	lr, r0
 800947e:	bf38      	it	cc
 8009480:	2100      	movcc	r1, #0
 8009482:	4419      	add	r1, r3
 8009484:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009488:	b18b      	cbz	r3, 80094ae <__mdiff+0x10a>
 800948a:	6117      	str	r7, [r2, #16]
 800948c:	e7a4      	b.n	80093d8 <__mdiff+0x34>
 800948e:	f855 8b04 	ldr.w	r8, [r5], #4
 8009492:	fa1f f188 	uxth.w	r1, r8
 8009496:	4461      	add	r1, ip
 8009498:	140c      	asrs	r4, r1, #16
 800949a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800949e:	b289      	uxth	r1, r1
 80094a0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80094a4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80094a8:	f846 1b04 	str.w	r1, [r6], #4
 80094ac:	e7de      	b.n	800946c <__mdiff+0xc8>
 80094ae:	3f01      	subs	r7, #1
 80094b0:	e7e8      	b.n	8009484 <__mdiff+0xe0>
 80094b2:	bf00      	nop
 80094b4:	0800af21 	.word	0x0800af21
 80094b8:	0800afac 	.word	0x0800afac

080094bc <__ulp>:
 80094bc:	4b11      	ldr	r3, [pc, #68]	; (8009504 <__ulp+0x48>)
 80094be:	400b      	ands	r3, r1
 80094c0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	dd02      	ble.n	80094ce <__ulp+0x12>
 80094c8:	2000      	movs	r0, #0
 80094ca:	4619      	mov	r1, r3
 80094cc:	4770      	bx	lr
 80094ce:	425b      	negs	r3, r3
 80094d0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80094d4:	f04f 0000 	mov.w	r0, #0
 80094d8:	f04f 0100 	mov.w	r1, #0
 80094dc:	ea4f 5223 	mov.w	r2, r3, asr #20
 80094e0:	da04      	bge.n	80094ec <__ulp+0x30>
 80094e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80094e6:	fa43 f102 	asr.w	r1, r3, r2
 80094ea:	4770      	bx	lr
 80094ec:	f1a2 0314 	sub.w	r3, r2, #20
 80094f0:	2b1e      	cmp	r3, #30
 80094f2:	bfd6      	itet	le
 80094f4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80094f8:	2301      	movgt	r3, #1
 80094fa:	fa22 f303 	lsrle.w	r3, r2, r3
 80094fe:	4618      	mov	r0, r3
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	7ff00000 	.word	0x7ff00000

08009508 <__b2d>:
 8009508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800950c:	6907      	ldr	r7, [r0, #16]
 800950e:	f100 0914 	add.w	r9, r0, #20
 8009512:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009516:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800951a:	f1a7 0804 	sub.w	r8, r7, #4
 800951e:	4630      	mov	r0, r6
 8009520:	f7ff fd4e 	bl	8008fc0 <__hi0bits>
 8009524:	f1c0 0320 	rsb	r3, r0, #32
 8009528:	280a      	cmp	r0, #10
 800952a:	600b      	str	r3, [r1, #0]
 800952c:	491f      	ldr	r1, [pc, #124]	; (80095ac <__b2d+0xa4>)
 800952e:	dc17      	bgt.n	8009560 <__b2d+0x58>
 8009530:	45c1      	cmp	r9, r8
 8009532:	bf28      	it	cs
 8009534:	2200      	movcs	r2, #0
 8009536:	f1c0 0c0b 	rsb	ip, r0, #11
 800953a:	fa26 f30c 	lsr.w	r3, r6, ip
 800953e:	bf38      	it	cc
 8009540:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009544:	ea43 0501 	orr.w	r5, r3, r1
 8009548:	f100 0315 	add.w	r3, r0, #21
 800954c:	fa06 f303 	lsl.w	r3, r6, r3
 8009550:	fa22 f20c 	lsr.w	r2, r2, ip
 8009554:	ea43 0402 	orr.w	r4, r3, r2
 8009558:	4620      	mov	r0, r4
 800955a:	4629      	mov	r1, r5
 800955c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009560:	45c1      	cmp	r9, r8
 8009562:	bf2e      	itee	cs
 8009564:	2200      	movcs	r2, #0
 8009566:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800956a:	f1a7 0808 	subcc.w	r8, r7, #8
 800956e:	f1b0 030b 	subs.w	r3, r0, #11
 8009572:	d016      	beq.n	80095a2 <__b2d+0x9a>
 8009574:	f1c3 0720 	rsb	r7, r3, #32
 8009578:	fa22 f107 	lsr.w	r1, r2, r7
 800957c:	45c8      	cmp	r8, r9
 800957e:	fa06 f603 	lsl.w	r6, r6, r3
 8009582:	ea46 0601 	orr.w	r6, r6, r1
 8009586:	bf94      	ite	ls
 8009588:	2100      	movls	r1, #0
 800958a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800958e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009592:	fa02 f003 	lsl.w	r0, r2, r3
 8009596:	40f9      	lsrs	r1, r7
 8009598:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800959c:	ea40 0401 	orr.w	r4, r0, r1
 80095a0:	e7da      	b.n	8009558 <__b2d+0x50>
 80095a2:	4614      	mov	r4, r2
 80095a4:	ea46 0501 	orr.w	r5, r6, r1
 80095a8:	e7d6      	b.n	8009558 <__b2d+0x50>
 80095aa:	bf00      	nop
 80095ac:	3ff00000 	.word	0x3ff00000

080095b0 <__d2b>:
 80095b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80095b4:	2101      	movs	r1, #1
 80095b6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80095ba:	4690      	mov	r8, r2
 80095bc:	461d      	mov	r5, r3
 80095be:	f7ff fc0d 	bl	8008ddc <_Balloc>
 80095c2:	4604      	mov	r4, r0
 80095c4:	b930      	cbnz	r0, 80095d4 <__d2b+0x24>
 80095c6:	4602      	mov	r2, r0
 80095c8:	f240 310a 	movw	r1, #778	; 0x30a
 80095cc:	4b24      	ldr	r3, [pc, #144]	; (8009660 <__d2b+0xb0>)
 80095ce:	4825      	ldr	r0, [pc, #148]	; (8009664 <__d2b+0xb4>)
 80095d0:	f7ff f854 	bl	800867c <__assert_func>
 80095d4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80095d8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80095dc:	bb2d      	cbnz	r5, 800962a <__d2b+0x7a>
 80095de:	9301      	str	r3, [sp, #4]
 80095e0:	f1b8 0300 	subs.w	r3, r8, #0
 80095e4:	d026      	beq.n	8009634 <__d2b+0x84>
 80095e6:	4668      	mov	r0, sp
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	f7ff fd09 	bl	8009000 <__lo0bits>
 80095ee:	9900      	ldr	r1, [sp, #0]
 80095f0:	b1f0      	cbz	r0, 8009630 <__d2b+0x80>
 80095f2:	9a01      	ldr	r2, [sp, #4]
 80095f4:	f1c0 0320 	rsb	r3, r0, #32
 80095f8:	fa02 f303 	lsl.w	r3, r2, r3
 80095fc:	430b      	orrs	r3, r1
 80095fe:	40c2      	lsrs	r2, r0
 8009600:	6163      	str	r3, [r4, #20]
 8009602:	9201      	str	r2, [sp, #4]
 8009604:	9b01      	ldr	r3, [sp, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	bf14      	ite	ne
 800960a:	2102      	movne	r1, #2
 800960c:	2101      	moveq	r1, #1
 800960e:	61a3      	str	r3, [r4, #24]
 8009610:	6121      	str	r1, [r4, #16]
 8009612:	b1c5      	cbz	r5, 8009646 <__d2b+0x96>
 8009614:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009618:	4405      	add	r5, r0
 800961a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800961e:	603d      	str	r5, [r7, #0]
 8009620:	6030      	str	r0, [r6, #0]
 8009622:	4620      	mov	r0, r4
 8009624:	b002      	add	sp, #8
 8009626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800962a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800962e:	e7d6      	b.n	80095de <__d2b+0x2e>
 8009630:	6161      	str	r1, [r4, #20]
 8009632:	e7e7      	b.n	8009604 <__d2b+0x54>
 8009634:	a801      	add	r0, sp, #4
 8009636:	f7ff fce3 	bl	8009000 <__lo0bits>
 800963a:	2101      	movs	r1, #1
 800963c:	9b01      	ldr	r3, [sp, #4]
 800963e:	6121      	str	r1, [r4, #16]
 8009640:	6163      	str	r3, [r4, #20]
 8009642:	3020      	adds	r0, #32
 8009644:	e7e5      	b.n	8009612 <__d2b+0x62>
 8009646:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800964a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800964e:	6038      	str	r0, [r7, #0]
 8009650:	6918      	ldr	r0, [r3, #16]
 8009652:	f7ff fcb5 	bl	8008fc0 <__hi0bits>
 8009656:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800965a:	6031      	str	r1, [r6, #0]
 800965c:	e7e1      	b.n	8009622 <__d2b+0x72>
 800965e:	bf00      	nop
 8009660:	0800af21 	.word	0x0800af21
 8009664:	0800afac 	.word	0x0800afac

08009668 <__ratio>:
 8009668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800966c:	4688      	mov	r8, r1
 800966e:	4669      	mov	r1, sp
 8009670:	4681      	mov	r9, r0
 8009672:	f7ff ff49 	bl	8009508 <__b2d>
 8009676:	460f      	mov	r7, r1
 8009678:	4604      	mov	r4, r0
 800967a:	460d      	mov	r5, r1
 800967c:	4640      	mov	r0, r8
 800967e:	a901      	add	r1, sp, #4
 8009680:	f7ff ff42 	bl	8009508 <__b2d>
 8009684:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009688:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800968c:	468b      	mov	fp, r1
 800968e:	eba3 0c02 	sub.w	ip, r3, r2
 8009692:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009696:	1a9b      	subs	r3, r3, r2
 8009698:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800969c:	2b00      	cmp	r3, #0
 800969e:	bfd5      	itete	le
 80096a0:	460a      	movle	r2, r1
 80096a2:	462a      	movgt	r2, r5
 80096a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80096a8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80096ac:	bfd8      	it	le
 80096ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80096b2:	465b      	mov	r3, fp
 80096b4:	4602      	mov	r2, r0
 80096b6:	4639      	mov	r1, r7
 80096b8:	4620      	mov	r0, r4
 80096ba:	f7f7 f8a7 	bl	800080c <__aeabi_ddiv>
 80096be:	b003      	add	sp, #12
 80096c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096c4 <__copybits>:
 80096c4:	3901      	subs	r1, #1
 80096c6:	b570      	push	{r4, r5, r6, lr}
 80096c8:	1149      	asrs	r1, r1, #5
 80096ca:	6914      	ldr	r4, [r2, #16]
 80096cc:	3101      	adds	r1, #1
 80096ce:	f102 0314 	add.w	r3, r2, #20
 80096d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80096d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80096da:	1f05      	subs	r5, r0, #4
 80096dc:	42a3      	cmp	r3, r4
 80096de:	d30c      	bcc.n	80096fa <__copybits+0x36>
 80096e0:	1aa3      	subs	r3, r4, r2
 80096e2:	3b11      	subs	r3, #17
 80096e4:	f023 0303 	bic.w	r3, r3, #3
 80096e8:	3211      	adds	r2, #17
 80096ea:	42a2      	cmp	r2, r4
 80096ec:	bf88      	it	hi
 80096ee:	2300      	movhi	r3, #0
 80096f0:	4418      	add	r0, r3
 80096f2:	2300      	movs	r3, #0
 80096f4:	4288      	cmp	r0, r1
 80096f6:	d305      	bcc.n	8009704 <__copybits+0x40>
 80096f8:	bd70      	pop	{r4, r5, r6, pc}
 80096fa:	f853 6b04 	ldr.w	r6, [r3], #4
 80096fe:	f845 6f04 	str.w	r6, [r5, #4]!
 8009702:	e7eb      	b.n	80096dc <__copybits+0x18>
 8009704:	f840 3b04 	str.w	r3, [r0], #4
 8009708:	e7f4      	b.n	80096f4 <__copybits+0x30>

0800970a <__any_on>:
 800970a:	f100 0214 	add.w	r2, r0, #20
 800970e:	6900      	ldr	r0, [r0, #16]
 8009710:	114b      	asrs	r3, r1, #5
 8009712:	4298      	cmp	r0, r3
 8009714:	b510      	push	{r4, lr}
 8009716:	db11      	blt.n	800973c <__any_on+0x32>
 8009718:	dd0a      	ble.n	8009730 <__any_on+0x26>
 800971a:	f011 011f 	ands.w	r1, r1, #31
 800971e:	d007      	beq.n	8009730 <__any_on+0x26>
 8009720:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009724:	fa24 f001 	lsr.w	r0, r4, r1
 8009728:	fa00 f101 	lsl.w	r1, r0, r1
 800972c:	428c      	cmp	r4, r1
 800972e:	d10b      	bne.n	8009748 <__any_on+0x3e>
 8009730:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009734:	4293      	cmp	r3, r2
 8009736:	d803      	bhi.n	8009740 <__any_on+0x36>
 8009738:	2000      	movs	r0, #0
 800973a:	bd10      	pop	{r4, pc}
 800973c:	4603      	mov	r3, r0
 800973e:	e7f7      	b.n	8009730 <__any_on+0x26>
 8009740:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009744:	2900      	cmp	r1, #0
 8009746:	d0f5      	beq.n	8009734 <__any_on+0x2a>
 8009748:	2001      	movs	r0, #1
 800974a:	e7f6      	b.n	800973a <__any_on+0x30>

0800974c <_calloc_r>:
 800974c:	b570      	push	{r4, r5, r6, lr}
 800974e:	fba1 5402 	umull	r5, r4, r1, r2
 8009752:	b934      	cbnz	r4, 8009762 <_calloc_r+0x16>
 8009754:	4629      	mov	r1, r5
 8009756:	f000 f875 	bl	8009844 <_malloc_r>
 800975a:	4606      	mov	r6, r0
 800975c:	b928      	cbnz	r0, 800976a <_calloc_r+0x1e>
 800975e:	4630      	mov	r0, r6
 8009760:	bd70      	pop	{r4, r5, r6, pc}
 8009762:	220c      	movs	r2, #12
 8009764:	2600      	movs	r6, #0
 8009766:	6002      	str	r2, [r0, #0]
 8009768:	e7f9      	b.n	800975e <_calloc_r+0x12>
 800976a:	462a      	mov	r2, r5
 800976c:	4621      	mov	r1, r4
 800976e:	f7fe f805 	bl	800777c <memset>
 8009772:	e7f4      	b.n	800975e <_calloc_r+0x12>

08009774 <_free_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	4605      	mov	r5, r0
 8009778:	2900      	cmp	r1, #0
 800977a:	d040      	beq.n	80097fe <_free_r+0x8a>
 800977c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009780:	1f0c      	subs	r4, r1, #4
 8009782:	2b00      	cmp	r3, #0
 8009784:	bfb8      	it	lt
 8009786:	18e4      	addlt	r4, r4, r3
 8009788:	f001 f862 	bl	800a850 <__malloc_lock>
 800978c:	4a1c      	ldr	r2, [pc, #112]	; (8009800 <_free_r+0x8c>)
 800978e:	6813      	ldr	r3, [r2, #0]
 8009790:	b933      	cbnz	r3, 80097a0 <_free_r+0x2c>
 8009792:	6063      	str	r3, [r4, #4]
 8009794:	6014      	str	r4, [r2, #0]
 8009796:	4628      	mov	r0, r5
 8009798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800979c:	f001 b85e 	b.w	800a85c <__malloc_unlock>
 80097a0:	42a3      	cmp	r3, r4
 80097a2:	d908      	bls.n	80097b6 <_free_r+0x42>
 80097a4:	6820      	ldr	r0, [r4, #0]
 80097a6:	1821      	adds	r1, r4, r0
 80097a8:	428b      	cmp	r3, r1
 80097aa:	bf01      	itttt	eq
 80097ac:	6819      	ldreq	r1, [r3, #0]
 80097ae:	685b      	ldreq	r3, [r3, #4]
 80097b0:	1809      	addeq	r1, r1, r0
 80097b2:	6021      	streq	r1, [r4, #0]
 80097b4:	e7ed      	b.n	8009792 <_free_r+0x1e>
 80097b6:	461a      	mov	r2, r3
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	b10b      	cbz	r3, 80097c0 <_free_r+0x4c>
 80097bc:	42a3      	cmp	r3, r4
 80097be:	d9fa      	bls.n	80097b6 <_free_r+0x42>
 80097c0:	6811      	ldr	r1, [r2, #0]
 80097c2:	1850      	adds	r0, r2, r1
 80097c4:	42a0      	cmp	r0, r4
 80097c6:	d10b      	bne.n	80097e0 <_free_r+0x6c>
 80097c8:	6820      	ldr	r0, [r4, #0]
 80097ca:	4401      	add	r1, r0
 80097cc:	1850      	adds	r0, r2, r1
 80097ce:	4283      	cmp	r3, r0
 80097d0:	6011      	str	r1, [r2, #0]
 80097d2:	d1e0      	bne.n	8009796 <_free_r+0x22>
 80097d4:	6818      	ldr	r0, [r3, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	4401      	add	r1, r0
 80097da:	6011      	str	r1, [r2, #0]
 80097dc:	6053      	str	r3, [r2, #4]
 80097de:	e7da      	b.n	8009796 <_free_r+0x22>
 80097e0:	d902      	bls.n	80097e8 <_free_r+0x74>
 80097e2:	230c      	movs	r3, #12
 80097e4:	602b      	str	r3, [r5, #0]
 80097e6:	e7d6      	b.n	8009796 <_free_r+0x22>
 80097e8:	6820      	ldr	r0, [r4, #0]
 80097ea:	1821      	adds	r1, r4, r0
 80097ec:	428b      	cmp	r3, r1
 80097ee:	bf01      	itttt	eq
 80097f0:	6819      	ldreq	r1, [r3, #0]
 80097f2:	685b      	ldreq	r3, [r3, #4]
 80097f4:	1809      	addeq	r1, r1, r0
 80097f6:	6021      	streq	r1, [r4, #0]
 80097f8:	6063      	str	r3, [r4, #4]
 80097fa:	6054      	str	r4, [r2, #4]
 80097fc:	e7cb      	b.n	8009796 <_free_r+0x22>
 80097fe:	bd38      	pop	{r3, r4, r5, pc}
 8009800:	2000c07c 	.word	0x2000c07c

08009804 <sbrk_aligned>:
 8009804:	b570      	push	{r4, r5, r6, lr}
 8009806:	4e0e      	ldr	r6, [pc, #56]	; (8009840 <sbrk_aligned+0x3c>)
 8009808:	460c      	mov	r4, r1
 800980a:	6831      	ldr	r1, [r6, #0]
 800980c:	4605      	mov	r5, r0
 800980e:	b911      	cbnz	r1, 8009816 <sbrk_aligned+0x12>
 8009810:	f000 fcdc 	bl	800a1cc <_sbrk_r>
 8009814:	6030      	str	r0, [r6, #0]
 8009816:	4621      	mov	r1, r4
 8009818:	4628      	mov	r0, r5
 800981a:	f000 fcd7 	bl	800a1cc <_sbrk_r>
 800981e:	1c43      	adds	r3, r0, #1
 8009820:	d00a      	beq.n	8009838 <sbrk_aligned+0x34>
 8009822:	1cc4      	adds	r4, r0, #3
 8009824:	f024 0403 	bic.w	r4, r4, #3
 8009828:	42a0      	cmp	r0, r4
 800982a:	d007      	beq.n	800983c <sbrk_aligned+0x38>
 800982c:	1a21      	subs	r1, r4, r0
 800982e:	4628      	mov	r0, r5
 8009830:	f000 fccc 	bl	800a1cc <_sbrk_r>
 8009834:	3001      	adds	r0, #1
 8009836:	d101      	bne.n	800983c <sbrk_aligned+0x38>
 8009838:	f04f 34ff 	mov.w	r4, #4294967295
 800983c:	4620      	mov	r0, r4
 800983e:	bd70      	pop	{r4, r5, r6, pc}
 8009840:	2000c080 	.word	0x2000c080

08009844 <_malloc_r>:
 8009844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009848:	1ccd      	adds	r5, r1, #3
 800984a:	f025 0503 	bic.w	r5, r5, #3
 800984e:	3508      	adds	r5, #8
 8009850:	2d0c      	cmp	r5, #12
 8009852:	bf38      	it	cc
 8009854:	250c      	movcc	r5, #12
 8009856:	2d00      	cmp	r5, #0
 8009858:	4607      	mov	r7, r0
 800985a:	db01      	blt.n	8009860 <_malloc_r+0x1c>
 800985c:	42a9      	cmp	r1, r5
 800985e:	d905      	bls.n	800986c <_malloc_r+0x28>
 8009860:	230c      	movs	r3, #12
 8009862:	2600      	movs	r6, #0
 8009864:	603b      	str	r3, [r7, #0]
 8009866:	4630      	mov	r0, r6
 8009868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800986c:	4e2e      	ldr	r6, [pc, #184]	; (8009928 <_malloc_r+0xe4>)
 800986e:	f000 ffef 	bl	800a850 <__malloc_lock>
 8009872:	6833      	ldr	r3, [r6, #0]
 8009874:	461c      	mov	r4, r3
 8009876:	bb34      	cbnz	r4, 80098c6 <_malloc_r+0x82>
 8009878:	4629      	mov	r1, r5
 800987a:	4638      	mov	r0, r7
 800987c:	f7ff ffc2 	bl	8009804 <sbrk_aligned>
 8009880:	1c43      	adds	r3, r0, #1
 8009882:	4604      	mov	r4, r0
 8009884:	d14d      	bne.n	8009922 <_malloc_r+0xde>
 8009886:	6834      	ldr	r4, [r6, #0]
 8009888:	4626      	mov	r6, r4
 800988a:	2e00      	cmp	r6, #0
 800988c:	d140      	bne.n	8009910 <_malloc_r+0xcc>
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	4631      	mov	r1, r6
 8009892:	4638      	mov	r0, r7
 8009894:	eb04 0803 	add.w	r8, r4, r3
 8009898:	f000 fc98 	bl	800a1cc <_sbrk_r>
 800989c:	4580      	cmp	r8, r0
 800989e:	d13a      	bne.n	8009916 <_malloc_r+0xd2>
 80098a0:	6821      	ldr	r1, [r4, #0]
 80098a2:	3503      	adds	r5, #3
 80098a4:	1a6d      	subs	r5, r5, r1
 80098a6:	f025 0503 	bic.w	r5, r5, #3
 80098aa:	3508      	adds	r5, #8
 80098ac:	2d0c      	cmp	r5, #12
 80098ae:	bf38      	it	cc
 80098b0:	250c      	movcc	r5, #12
 80098b2:	4638      	mov	r0, r7
 80098b4:	4629      	mov	r1, r5
 80098b6:	f7ff ffa5 	bl	8009804 <sbrk_aligned>
 80098ba:	3001      	adds	r0, #1
 80098bc:	d02b      	beq.n	8009916 <_malloc_r+0xd2>
 80098be:	6823      	ldr	r3, [r4, #0]
 80098c0:	442b      	add	r3, r5
 80098c2:	6023      	str	r3, [r4, #0]
 80098c4:	e00e      	b.n	80098e4 <_malloc_r+0xa0>
 80098c6:	6822      	ldr	r2, [r4, #0]
 80098c8:	1b52      	subs	r2, r2, r5
 80098ca:	d41e      	bmi.n	800990a <_malloc_r+0xc6>
 80098cc:	2a0b      	cmp	r2, #11
 80098ce:	d916      	bls.n	80098fe <_malloc_r+0xba>
 80098d0:	1961      	adds	r1, r4, r5
 80098d2:	42a3      	cmp	r3, r4
 80098d4:	6025      	str	r5, [r4, #0]
 80098d6:	bf18      	it	ne
 80098d8:	6059      	strne	r1, [r3, #4]
 80098da:	6863      	ldr	r3, [r4, #4]
 80098dc:	bf08      	it	eq
 80098de:	6031      	streq	r1, [r6, #0]
 80098e0:	5162      	str	r2, [r4, r5]
 80098e2:	604b      	str	r3, [r1, #4]
 80098e4:	4638      	mov	r0, r7
 80098e6:	f104 060b 	add.w	r6, r4, #11
 80098ea:	f000 ffb7 	bl	800a85c <__malloc_unlock>
 80098ee:	f026 0607 	bic.w	r6, r6, #7
 80098f2:	1d23      	adds	r3, r4, #4
 80098f4:	1af2      	subs	r2, r6, r3
 80098f6:	d0b6      	beq.n	8009866 <_malloc_r+0x22>
 80098f8:	1b9b      	subs	r3, r3, r6
 80098fa:	50a3      	str	r3, [r4, r2]
 80098fc:	e7b3      	b.n	8009866 <_malloc_r+0x22>
 80098fe:	6862      	ldr	r2, [r4, #4]
 8009900:	42a3      	cmp	r3, r4
 8009902:	bf0c      	ite	eq
 8009904:	6032      	streq	r2, [r6, #0]
 8009906:	605a      	strne	r2, [r3, #4]
 8009908:	e7ec      	b.n	80098e4 <_malloc_r+0xa0>
 800990a:	4623      	mov	r3, r4
 800990c:	6864      	ldr	r4, [r4, #4]
 800990e:	e7b2      	b.n	8009876 <_malloc_r+0x32>
 8009910:	4634      	mov	r4, r6
 8009912:	6876      	ldr	r6, [r6, #4]
 8009914:	e7b9      	b.n	800988a <_malloc_r+0x46>
 8009916:	230c      	movs	r3, #12
 8009918:	4638      	mov	r0, r7
 800991a:	603b      	str	r3, [r7, #0]
 800991c:	f000 ff9e 	bl	800a85c <__malloc_unlock>
 8009920:	e7a1      	b.n	8009866 <_malloc_r+0x22>
 8009922:	6025      	str	r5, [r4, #0]
 8009924:	e7de      	b.n	80098e4 <_malloc_r+0xa0>
 8009926:	bf00      	nop
 8009928:	2000c07c 	.word	0x2000c07c

0800992c <__ssputs_r>:
 800992c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009930:	688e      	ldr	r6, [r1, #8]
 8009932:	4682      	mov	sl, r0
 8009934:	429e      	cmp	r6, r3
 8009936:	460c      	mov	r4, r1
 8009938:	4690      	mov	r8, r2
 800993a:	461f      	mov	r7, r3
 800993c:	d838      	bhi.n	80099b0 <__ssputs_r+0x84>
 800993e:	898a      	ldrh	r2, [r1, #12]
 8009940:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009944:	d032      	beq.n	80099ac <__ssputs_r+0x80>
 8009946:	6825      	ldr	r5, [r4, #0]
 8009948:	6909      	ldr	r1, [r1, #16]
 800994a:	3301      	adds	r3, #1
 800994c:	eba5 0901 	sub.w	r9, r5, r1
 8009950:	6965      	ldr	r5, [r4, #20]
 8009952:	444b      	add	r3, r9
 8009954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009958:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800995c:	106d      	asrs	r5, r5, #1
 800995e:	429d      	cmp	r5, r3
 8009960:	bf38      	it	cc
 8009962:	461d      	movcc	r5, r3
 8009964:	0553      	lsls	r3, r2, #21
 8009966:	d531      	bpl.n	80099cc <__ssputs_r+0xa0>
 8009968:	4629      	mov	r1, r5
 800996a:	f7ff ff6b 	bl	8009844 <_malloc_r>
 800996e:	4606      	mov	r6, r0
 8009970:	b950      	cbnz	r0, 8009988 <__ssputs_r+0x5c>
 8009972:	230c      	movs	r3, #12
 8009974:	f04f 30ff 	mov.w	r0, #4294967295
 8009978:	f8ca 3000 	str.w	r3, [sl]
 800997c:	89a3      	ldrh	r3, [r4, #12]
 800997e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009982:	81a3      	strh	r3, [r4, #12]
 8009984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009988:	464a      	mov	r2, r9
 800998a:	6921      	ldr	r1, [r4, #16]
 800998c:	f7fd fee8 	bl	8007760 <memcpy>
 8009990:	89a3      	ldrh	r3, [r4, #12]
 8009992:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800999a:	81a3      	strh	r3, [r4, #12]
 800999c:	6126      	str	r6, [r4, #16]
 800999e:	444e      	add	r6, r9
 80099a0:	6026      	str	r6, [r4, #0]
 80099a2:	463e      	mov	r6, r7
 80099a4:	6165      	str	r5, [r4, #20]
 80099a6:	eba5 0509 	sub.w	r5, r5, r9
 80099aa:	60a5      	str	r5, [r4, #8]
 80099ac:	42be      	cmp	r6, r7
 80099ae:	d900      	bls.n	80099b2 <__ssputs_r+0x86>
 80099b0:	463e      	mov	r6, r7
 80099b2:	4632      	mov	r2, r6
 80099b4:	4641      	mov	r1, r8
 80099b6:	6820      	ldr	r0, [r4, #0]
 80099b8:	f000 ff30 	bl	800a81c <memmove>
 80099bc:	68a3      	ldr	r3, [r4, #8]
 80099be:	2000      	movs	r0, #0
 80099c0:	1b9b      	subs	r3, r3, r6
 80099c2:	60a3      	str	r3, [r4, #8]
 80099c4:	6823      	ldr	r3, [r4, #0]
 80099c6:	4433      	add	r3, r6
 80099c8:	6023      	str	r3, [r4, #0]
 80099ca:	e7db      	b.n	8009984 <__ssputs_r+0x58>
 80099cc:	462a      	mov	r2, r5
 80099ce:	f000 ff4b 	bl	800a868 <_realloc_r>
 80099d2:	4606      	mov	r6, r0
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d1e1      	bne.n	800999c <__ssputs_r+0x70>
 80099d8:	4650      	mov	r0, sl
 80099da:	6921      	ldr	r1, [r4, #16]
 80099dc:	f7ff feca 	bl	8009774 <_free_r>
 80099e0:	e7c7      	b.n	8009972 <__ssputs_r+0x46>
	...

080099e4 <_svfiprintf_r>:
 80099e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e8:	4698      	mov	r8, r3
 80099ea:	898b      	ldrh	r3, [r1, #12]
 80099ec:	4607      	mov	r7, r0
 80099ee:	061b      	lsls	r3, r3, #24
 80099f0:	460d      	mov	r5, r1
 80099f2:	4614      	mov	r4, r2
 80099f4:	b09d      	sub	sp, #116	; 0x74
 80099f6:	d50e      	bpl.n	8009a16 <_svfiprintf_r+0x32>
 80099f8:	690b      	ldr	r3, [r1, #16]
 80099fa:	b963      	cbnz	r3, 8009a16 <_svfiprintf_r+0x32>
 80099fc:	2140      	movs	r1, #64	; 0x40
 80099fe:	f7ff ff21 	bl	8009844 <_malloc_r>
 8009a02:	6028      	str	r0, [r5, #0]
 8009a04:	6128      	str	r0, [r5, #16]
 8009a06:	b920      	cbnz	r0, 8009a12 <_svfiprintf_r+0x2e>
 8009a08:	230c      	movs	r3, #12
 8009a0a:	603b      	str	r3, [r7, #0]
 8009a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a10:	e0d1      	b.n	8009bb6 <_svfiprintf_r+0x1d2>
 8009a12:	2340      	movs	r3, #64	; 0x40
 8009a14:	616b      	str	r3, [r5, #20]
 8009a16:	2300      	movs	r3, #0
 8009a18:	9309      	str	r3, [sp, #36]	; 0x24
 8009a1a:	2320      	movs	r3, #32
 8009a1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a20:	2330      	movs	r3, #48	; 0x30
 8009a22:	f04f 0901 	mov.w	r9, #1
 8009a26:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009bd0 <_svfiprintf_r+0x1ec>
 8009a2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a32:	4623      	mov	r3, r4
 8009a34:	469a      	mov	sl, r3
 8009a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a3a:	b10a      	cbz	r2, 8009a40 <_svfiprintf_r+0x5c>
 8009a3c:	2a25      	cmp	r2, #37	; 0x25
 8009a3e:	d1f9      	bne.n	8009a34 <_svfiprintf_r+0x50>
 8009a40:	ebba 0b04 	subs.w	fp, sl, r4
 8009a44:	d00b      	beq.n	8009a5e <_svfiprintf_r+0x7a>
 8009a46:	465b      	mov	r3, fp
 8009a48:	4622      	mov	r2, r4
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	f7ff ff6d 	bl	800992c <__ssputs_r>
 8009a52:	3001      	adds	r0, #1
 8009a54:	f000 80aa 	beq.w	8009bac <_svfiprintf_r+0x1c8>
 8009a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a5a:	445a      	add	r2, fp
 8009a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f000 80a2 	beq.w	8009bac <_svfiprintf_r+0x1c8>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a72:	f10a 0a01 	add.w	sl, sl, #1
 8009a76:	9304      	str	r3, [sp, #16]
 8009a78:	9307      	str	r3, [sp, #28]
 8009a7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a7e:	931a      	str	r3, [sp, #104]	; 0x68
 8009a80:	4654      	mov	r4, sl
 8009a82:	2205      	movs	r2, #5
 8009a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a88:	4851      	ldr	r0, [pc, #324]	; (8009bd0 <_svfiprintf_r+0x1ec>)
 8009a8a:	f000 feb9 	bl	800a800 <memchr>
 8009a8e:	9a04      	ldr	r2, [sp, #16]
 8009a90:	b9d8      	cbnz	r0, 8009aca <_svfiprintf_r+0xe6>
 8009a92:	06d0      	lsls	r0, r2, #27
 8009a94:	bf44      	itt	mi
 8009a96:	2320      	movmi	r3, #32
 8009a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a9c:	0711      	lsls	r1, r2, #28
 8009a9e:	bf44      	itt	mi
 8009aa0:	232b      	movmi	r3, #43	; 0x2b
 8009aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8009aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8009aac:	d015      	beq.n	8009ada <_svfiprintf_r+0xf6>
 8009aae:	4654      	mov	r4, sl
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	f04f 0c0a 	mov.w	ip, #10
 8009ab6:	9a07      	ldr	r2, [sp, #28]
 8009ab8:	4621      	mov	r1, r4
 8009aba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009abe:	3b30      	subs	r3, #48	; 0x30
 8009ac0:	2b09      	cmp	r3, #9
 8009ac2:	d94e      	bls.n	8009b62 <_svfiprintf_r+0x17e>
 8009ac4:	b1b0      	cbz	r0, 8009af4 <_svfiprintf_r+0x110>
 8009ac6:	9207      	str	r2, [sp, #28]
 8009ac8:	e014      	b.n	8009af4 <_svfiprintf_r+0x110>
 8009aca:	eba0 0308 	sub.w	r3, r0, r8
 8009ace:	fa09 f303 	lsl.w	r3, r9, r3
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	46a2      	mov	sl, r4
 8009ad6:	9304      	str	r3, [sp, #16]
 8009ad8:	e7d2      	b.n	8009a80 <_svfiprintf_r+0x9c>
 8009ada:	9b03      	ldr	r3, [sp, #12]
 8009adc:	1d19      	adds	r1, r3, #4
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	9103      	str	r1, [sp, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	bfbb      	ittet	lt
 8009ae6:	425b      	neglt	r3, r3
 8009ae8:	f042 0202 	orrlt.w	r2, r2, #2
 8009aec:	9307      	strge	r3, [sp, #28]
 8009aee:	9307      	strlt	r3, [sp, #28]
 8009af0:	bfb8      	it	lt
 8009af2:	9204      	strlt	r2, [sp, #16]
 8009af4:	7823      	ldrb	r3, [r4, #0]
 8009af6:	2b2e      	cmp	r3, #46	; 0x2e
 8009af8:	d10c      	bne.n	8009b14 <_svfiprintf_r+0x130>
 8009afa:	7863      	ldrb	r3, [r4, #1]
 8009afc:	2b2a      	cmp	r3, #42	; 0x2a
 8009afe:	d135      	bne.n	8009b6c <_svfiprintf_r+0x188>
 8009b00:	9b03      	ldr	r3, [sp, #12]
 8009b02:	3402      	adds	r4, #2
 8009b04:	1d1a      	adds	r2, r3, #4
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	9203      	str	r2, [sp, #12]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	bfb8      	it	lt
 8009b0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b12:	9305      	str	r3, [sp, #20]
 8009b14:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009bd4 <_svfiprintf_r+0x1f0>
 8009b18:	2203      	movs	r2, #3
 8009b1a:	4650      	mov	r0, sl
 8009b1c:	7821      	ldrb	r1, [r4, #0]
 8009b1e:	f000 fe6f 	bl	800a800 <memchr>
 8009b22:	b140      	cbz	r0, 8009b36 <_svfiprintf_r+0x152>
 8009b24:	2340      	movs	r3, #64	; 0x40
 8009b26:	eba0 000a 	sub.w	r0, r0, sl
 8009b2a:	fa03 f000 	lsl.w	r0, r3, r0
 8009b2e:	9b04      	ldr	r3, [sp, #16]
 8009b30:	3401      	adds	r4, #1
 8009b32:	4303      	orrs	r3, r0
 8009b34:	9304      	str	r3, [sp, #16]
 8009b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b3a:	2206      	movs	r2, #6
 8009b3c:	4826      	ldr	r0, [pc, #152]	; (8009bd8 <_svfiprintf_r+0x1f4>)
 8009b3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b42:	f000 fe5d 	bl	800a800 <memchr>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d038      	beq.n	8009bbc <_svfiprintf_r+0x1d8>
 8009b4a:	4b24      	ldr	r3, [pc, #144]	; (8009bdc <_svfiprintf_r+0x1f8>)
 8009b4c:	bb1b      	cbnz	r3, 8009b96 <_svfiprintf_r+0x1b2>
 8009b4e:	9b03      	ldr	r3, [sp, #12]
 8009b50:	3307      	adds	r3, #7
 8009b52:	f023 0307 	bic.w	r3, r3, #7
 8009b56:	3308      	adds	r3, #8
 8009b58:	9303      	str	r3, [sp, #12]
 8009b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b5c:	4433      	add	r3, r6
 8009b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b60:	e767      	b.n	8009a32 <_svfiprintf_r+0x4e>
 8009b62:	460c      	mov	r4, r1
 8009b64:	2001      	movs	r0, #1
 8009b66:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b6a:	e7a5      	b.n	8009ab8 <_svfiprintf_r+0xd4>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	f04f 0c0a 	mov.w	ip, #10
 8009b72:	4619      	mov	r1, r3
 8009b74:	3401      	adds	r4, #1
 8009b76:	9305      	str	r3, [sp, #20]
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b7e:	3a30      	subs	r2, #48	; 0x30
 8009b80:	2a09      	cmp	r2, #9
 8009b82:	d903      	bls.n	8009b8c <_svfiprintf_r+0x1a8>
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d0c5      	beq.n	8009b14 <_svfiprintf_r+0x130>
 8009b88:	9105      	str	r1, [sp, #20]
 8009b8a:	e7c3      	b.n	8009b14 <_svfiprintf_r+0x130>
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	2301      	movs	r3, #1
 8009b90:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b94:	e7f0      	b.n	8009b78 <_svfiprintf_r+0x194>
 8009b96:	ab03      	add	r3, sp, #12
 8009b98:	9300      	str	r3, [sp, #0]
 8009b9a:	462a      	mov	r2, r5
 8009b9c:	4638      	mov	r0, r7
 8009b9e:	4b10      	ldr	r3, [pc, #64]	; (8009be0 <_svfiprintf_r+0x1fc>)
 8009ba0:	a904      	add	r1, sp, #16
 8009ba2:	f3af 8000 	nop.w
 8009ba6:	1c42      	adds	r2, r0, #1
 8009ba8:	4606      	mov	r6, r0
 8009baa:	d1d6      	bne.n	8009b5a <_svfiprintf_r+0x176>
 8009bac:	89ab      	ldrh	r3, [r5, #12]
 8009bae:	065b      	lsls	r3, r3, #25
 8009bb0:	f53f af2c 	bmi.w	8009a0c <_svfiprintf_r+0x28>
 8009bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bb6:	b01d      	add	sp, #116	; 0x74
 8009bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bbc:	ab03      	add	r3, sp, #12
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	462a      	mov	r2, r5
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	4b06      	ldr	r3, [pc, #24]	; (8009be0 <_svfiprintf_r+0x1fc>)
 8009bc6:	a904      	add	r1, sp, #16
 8009bc8:	f000 f9d4 	bl	8009f74 <_printf_i>
 8009bcc:	e7eb      	b.n	8009ba6 <_svfiprintf_r+0x1c2>
 8009bce:	bf00      	nop
 8009bd0:	0800b104 	.word	0x0800b104
 8009bd4:	0800b10a 	.word	0x0800b10a
 8009bd8:	0800b10e 	.word	0x0800b10e
 8009bdc:	00000000 	.word	0x00000000
 8009be0:	0800992d 	.word	0x0800992d

08009be4 <__sfputc_r>:
 8009be4:	6893      	ldr	r3, [r2, #8]
 8009be6:	b410      	push	{r4}
 8009be8:	3b01      	subs	r3, #1
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	6093      	str	r3, [r2, #8]
 8009bee:	da07      	bge.n	8009c00 <__sfputc_r+0x1c>
 8009bf0:	6994      	ldr	r4, [r2, #24]
 8009bf2:	42a3      	cmp	r3, r4
 8009bf4:	db01      	blt.n	8009bfa <__sfputc_r+0x16>
 8009bf6:	290a      	cmp	r1, #10
 8009bf8:	d102      	bne.n	8009c00 <__sfputc_r+0x1c>
 8009bfa:	bc10      	pop	{r4}
 8009bfc:	f000 bb0e 	b.w	800a21c <__swbuf_r>
 8009c00:	6813      	ldr	r3, [r2, #0]
 8009c02:	1c58      	adds	r0, r3, #1
 8009c04:	6010      	str	r0, [r2, #0]
 8009c06:	7019      	strb	r1, [r3, #0]
 8009c08:	4608      	mov	r0, r1
 8009c0a:	bc10      	pop	{r4}
 8009c0c:	4770      	bx	lr

08009c0e <__sfputs_r>:
 8009c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c10:	4606      	mov	r6, r0
 8009c12:	460f      	mov	r7, r1
 8009c14:	4614      	mov	r4, r2
 8009c16:	18d5      	adds	r5, r2, r3
 8009c18:	42ac      	cmp	r4, r5
 8009c1a:	d101      	bne.n	8009c20 <__sfputs_r+0x12>
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	e007      	b.n	8009c30 <__sfputs_r+0x22>
 8009c20:	463a      	mov	r2, r7
 8009c22:	4630      	mov	r0, r6
 8009c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c28:	f7ff ffdc 	bl	8009be4 <__sfputc_r>
 8009c2c:	1c43      	adds	r3, r0, #1
 8009c2e:	d1f3      	bne.n	8009c18 <__sfputs_r+0xa>
 8009c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c34 <_vfiprintf_r>:
 8009c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c38:	460d      	mov	r5, r1
 8009c3a:	4614      	mov	r4, r2
 8009c3c:	4698      	mov	r8, r3
 8009c3e:	4606      	mov	r6, r0
 8009c40:	b09d      	sub	sp, #116	; 0x74
 8009c42:	b118      	cbz	r0, 8009c4c <_vfiprintf_r+0x18>
 8009c44:	6983      	ldr	r3, [r0, #24]
 8009c46:	b90b      	cbnz	r3, 8009c4c <_vfiprintf_r+0x18>
 8009c48:	f000 fcd4 	bl	800a5f4 <__sinit>
 8009c4c:	4b89      	ldr	r3, [pc, #548]	; (8009e74 <_vfiprintf_r+0x240>)
 8009c4e:	429d      	cmp	r5, r3
 8009c50:	d11b      	bne.n	8009c8a <_vfiprintf_r+0x56>
 8009c52:	6875      	ldr	r5, [r6, #4]
 8009c54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c56:	07d9      	lsls	r1, r3, #31
 8009c58:	d405      	bmi.n	8009c66 <_vfiprintf_r+0x32>
 8009c5a:	89ab      	ldrh	r3, [r5, #12]
 8009c5c:	059a      	lsls	r2, r3, #22
 8009c5e:	d402      	bmi.n	8009c66 <_vfiprintf_r+0x32>
 8009c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c62:	f000 fd65 	bl	800a730 <__retarget_lock_acquire_recursive>
 8009c66:	89ab      	ldrh	r3, [r5, #12]
 8009c68:	071b      	lsls	r3, r3, #28
 8009c6a:	d501      	bpl.n	8009c70 <_vfiprintf_r+0x3c>
 8009c6c:	692b      	ldr	r3, [r5, #16]
 8009c6e:	b9eb      	cbnz	r3, 8009cac <_vfiprintf_r+0x78>
 8009c70:	4629      	mov	r1, r5
 8009c72:	4630      	mov	r0, r6
 8009c74:	f000 fb32 	bl	800a2dc <__swsetup_r>
 8009c78:	b1c0      	cbz	r0, 8009cac <_vfiprintf_r+0x78>
 8009c7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c7c:	07dc      	lsls	r4, r3, #31
 8009c7e:	d50e      	bpl.n	8009c9e <_vfiprintf_r+0x6a>
 8009c80:	f04f 30ff 	mov.w	r0, #4294967295
 8009c84:	b01d      	add	sp, #116	; 0x74
 8009c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8a:	4b7b      	ldr	r3, [pc, #492]	; (8009e78 <_vfiprintf_r+0x244>)
 8009c8c:	429d      	cmp	r5, r3
 8009c8e:	d101      	bne.n	8009c94 <_vfiprintf_r+0x60>
 8009c90:	68b5      	ldr	r5, [r6, #8]
 8009c92:	e7df      	b.n	8009c54 <_vfiprintf_r+0x20>
 8009c94:	4b79      	ldr	r3, [pc, #484]	; (8009e7c <_vfiprintf_r+0x248>)
 8009c96:	429d      	cmp	r5, r3
 8009c98:	bf08      	it	eq
 8009c9a:	68f5      	ldreq	r5, [r6, #12]
 8009c9c:	e7da      	b.n	8009c54 <_vfiprintf_r+0x20>
 8009c9e:	89ab      	ldrh	r3, [r5, #12]
 8009ca0:	0598      	lsls	r0, r3, #22
 8009ca2:	d4ed      	bmi.n	8009c80 <_vfiprintf_r+0x4c>
 8009ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ca6:	f000 fd44 	bl	800a732 <__retarget_lock_release_recursive>
 8009caa:	e7e9      	b.n	8009c80 <_vfiprintf_r+0x4c>
 8009cac:	2300      	movs	r3, #0
 8009cae:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb0:	2320      	movs	r3, #32
 8009cb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cb6:	2330      	movs	r3, #48	; 0x30
 8009cb8:	f04f 0901 	mov.w	r9, #1
 8009cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cc0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009e80 <_vfiprintf_r+0x24c>
 8009cc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cc8:	4623      	mov	r3, r4
 8009cca:	469a      	mov	sl, r3
 8009ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cd0:	b10a      	cbz	r2, 8009cd6 <_vfiprintf_r+0xa2>
 8009cd2:	2a25      	cmp	r2, #37	; 0x25
 8009cd4:	d1f9      	bne.n	8009cca <_vfiprintf_r+0x96>
 8009cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8009cda:	d00b      	beq.n	8009cf4 <_vfiprintf_r+0xc0>
 8009cdc:	465b      	mov	r3, fp
 8009cde:	4622      	mov	r2, r4
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f7ff ff93 	bl	8009c0e <__sfputs_r>
 8009ce8:	3001      	adds	r0, #1
 8009cea:	f000 80aa 	beq.w	8009e42 <_vfiprintf_r+0x20e>
 8009cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cf0:	445a      	add	r2, fp
 8009cf2:	9209      	str	r2, [sp, #36]	; 0x24
 8009cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f000 80a2 	beq.w	8009e42 <_vfiprintf_r+0x20e>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f04f 32ff 	mov.w	r2, #4294967295
 8009d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d08:	f10a 0a01 	add.w	sl, sl, #1
 8009d0c:	9304      	str	r3, [sp, #16]
 8009d0e:	9307      	str	r3, [sp, #28]
 8009d10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d14:	931a      	str	r3, [sp, #104]	; 0x68
 8009d16:	4654      	mov	r4, sl
 8009d18:	2205      	movs	r2, #5
 8009d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d1e:	4858      	ldr	r0, [pc, #352]	; (8009e80 <_vfiprintf_r+0x24c>)
 8009d20:	f000 fd6e 	bl	800a800 <memchr>
 8009d24:	9a04      	ldr	r2, [sp, #16]
 8009d26:	b9d8      	cbnz	r0, 8009d60 <_vfiprintf_r+0x12c>
 8009d28:	06d1      	lsls	r1, r2, #27
 8009d2a:	bf44      	itt	mi
 8009d2c:	2320      	movmi	r3, #32
 8009d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d32:	0713      	lsls	r3, r2, #28
 8009d34:	bf44      	itt	mi
 8009d36:	232b      	movmi	r3, #43	; 0x2b
 8009d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d40:	2b2a      	cmp	r3, #42	; 0x2a
 8009d42:	d015      	beq.n	8009d70 <_vfiprintf_r+0x13c>
 8009d44:	4654      	mov	r4, sl
 8009d46:	2000      	movs	r0, #0
 8009d48:	f04f 0c0a 	mov.w	ip, #10
 8009d4c:	9a07      	ldr	r2, [sp, #28]
 8009d4e:	4621      	mov	r1, r4
 8009d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d54:	3b30      	subs	r3, #48	; 0x30
 8009d56:	2b09      	cmp	r3, #9
 8009d58:	d94e      	bls.n	8009df8 <_vfiprintf_r+0x1c4>
 8009d5a:	b1b0      	cbz	r0, 8009d8a <_vfiprintf_r+0x156>
 8009d5c:	9207      	str	r2, [sp, #28]
 8009d5e:	e014      	b.n	8009d8a <_vfiprintf_r+0x156>
 8009d60:	eba0 0308 	sub.w	r3, r0, r8
 8009d64:	fa09 f303 	lsl.w	r3, r9, r3
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	46a2      	mov	sl, r4
 8009d6c:	9304      	str	r3, [sp, #16]
 8009d6e:	e7d2      	b.n	8009d16 <_vfiprintf_r+0xe2>
 8009d70:	9b03      	ldr	r3, [sp, #12]
 8009d72:	1d19      	adds	r1, r3, #4
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	9103      	str	r1, [sp, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	bfbb      	ittet	lt
 8009d7c:	425b      	neglt	r3, r3
 8009d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d82:	9307      	strge	r3, [sp, #28]
 8009d84:	9307      	strlt	r3, [sp, #28]
 8009d86:	bfb8      	it	lt
 8009d88:	9204      	strlt	r2, [sp, #16]
 8009d8a:	7823      	ldrb	r3, [r4, #0]
 8009d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8009d8e:	d10c      	bne.n	8009daa <_vfiprintf_r+0x176>
 8009d90:	7863      	ldrb	r3, [r4, #1]
 8009d92:	2b2a      	cmp	r3, #42	; 0x2a
 8009d94:	d135      	bne.n	8009e02 <_vfiprintf_r+0x1ce>
 8009d96:	9b03      	ldr	r3, [sp, #12]
 8009d98:	3402      	adds	r4, #2
 8009d9a:	1d1a      	adds	r2, r3, #4
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	9203      	str	r2, [sp, #12]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	bfb8      	it	lt
 8009da4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009da8:	9305      	str	r3, [sp, #20]
 8009daa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009e84 <_vfiprintf_r+0x250>
 8009dae:	2203      	movs	r2, #3
 8009db0:	4650      	mov	r0, sl
 8009db2:	7821      	ldrb	r1, [r4, #0]
 8009db4:	f000 fd24 	bl	800a800 <memchr>
 8009db8:	b140      	cbz	r0, 8009dcc <_vfiprintf_r+0x198>
 8009dba:	2340      	movs	r3, #64	; 0x40
 8009dbc:	eba0 000a 	sub.w	r0, r0, sl
 8009dc0:	fa03 f000 	lsl.w	r0, r3, r0
 8009dc4:	9b04      	ldr	r3, [sp, #16]
 8009dc6:	3401      	adds	r4, #1
 8009dc8:	4303      	orrs	r3, r0
 8009dca:	9304      	str	r3, [sp, #16]
 8009dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd0:	2206      	movs	r2, #6
 8009dd2:	482d      	ldr	r0, [pc, #180]	; (8009e88 <_vfiprintf_r+0x254>)
 8009dd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dd8:	f000 fd12 	bl	800a800 <memchr>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	d03f      	beq.n	8009e60 <_vfiprintf_r+0x22c>
 8009de0:	4b2a      	ldr	r3, [pc, #168]	; (8009e8c <_vfiprintf_r+0x258>)
 8009de2:	bb1b      	cbnz	r3, 8009e2c <_vfiprintf_r+0x1f8>
 8009de4:	9b03      	ldr	r3, [sp, #12]
 8009de6:	3307      	adds	r3, #7
 8009de8:	f023 0307 	bic.w	r3, r3, #7
 8009dec:	3308      	adds	r3, #8
 8009dee:	9303      	str	r3, [sp, #12]
 8009df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df2:	443b      	add	r3, r7
 8009df4:	9309      	str	r3, [sp, #36]	; 0x24
 8009df6:	e767      	b.n	8009cc8 <_vfiprintf_r+0x94>
 8009df8:	460c      	mov	r4, r1
 8009dfa:	2001      	movs	r0, #1
 8009dfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e00:	e7a5      	b.n	8009d4e <_vfiprintf_r+0x11a>
 8009e02:	2300      	movs	r3, #0
 8009e04:	f04f 0c0a 	mov.w	ip, #10
 8009e08:	4619      	mov	r1, r3
 8009e0a:	3401      	adds	r4, #1
 8009e0c:	9305      	str	r3, [sp, #20]
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e14:	3a30      	subs	r2, #48	; 0x30
 8009e16:	2a09      	cmp	r2, #9
 8009e18:	d903      	bls.n	8009e22 <_vfiprintf_r+0x1ee>
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d0c5      	beq.n	8009daa <_vfiprintf_r+0x176>
 8009e1e:	9105      	str	r1, [sp, #20]
 8009e20:	e7c3      	b.n	8009daa <_vfiprintf_r+0x176>
 8009e22:	4604      	mov	r4, r0
 8009e24:	2301      	movs	r3, #1
 8009e26:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e2a:	e7f0      	b.n	8009e0e <_vfiprintf_r+0x1da>
 8009e2c:	ab03      	add	r3, sp, #12
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	462a      	mov	r2, r5
 8009e32:	4630      	mov	r0, r6
 8009e34:	4b16      	ldr	r3, [pc, #88]	; (8009e90 <_vfiprintf_r+0x25c>)
 8009e36:	a904      	add	r1, sp, #16
 8009e38:	f3af 8000 	nop.w
 8009e3c:	4607      	mov	r7, r0
 8009e3e:	1c78      	adds	r0, r7, #1
 8009e40:	d1d6      	bne.n	8009df0 <_vfiprintf_r+0x1bc>
 8009e42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e44:	07d9      	lsls	r1, r3, #31
 8009e46:	d405      	bmi.n	8009e54 <_vfiprintf_r+0x220>
 8009e48:	89ab      	ldrh	r3, [r5, #12]
 8009e4a:	059a      	lsls	r2, r3, #22
 8009e4c:	d402      	bmi.n	8009e54 <_vfiprintf_r+0x220>
 8009e4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e50:	f000 fc6f 	bl	800a732 <__retarget_lock_release_recursive>
 8009e54:	89ab      	ldrh	r3, [r5, #12]
 8009e56:	065b      	lsls	r3, r3, #25
 8009e58:	f53f af12 	bmi.w	8009c80 <_vfiprintf_r+0x4c>
 8009e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e5e:	e711      	b.n	8009c84 <_vfiprintf_r+0x50>
 8009e60:	ab03      	add	r3, sp, #12
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	462a      	mov	r2, r5
 8009e66:	4630      	mov	r0, r6
 8009e68:	4b09      	ldr	r3, [pc, #36]	; (8009e90 <_vfiprintf_r+0x25c>)
 8009e6a:	a904      	add	r1, sp, #16
 8009e6c:	f000 f882 	bl	8009f74 <_printf_i>
 8009e70:	e7e4      	b.n	8009e3c <_vfiprintf_r+0x208>
 8009e72:	bf00      	nop
 8009e74:	0800b158 	.word	0x0800b158
 8009e78:	0800b178 	.word	0x0800b178
 8009e7c:	0800b138 	.word	0x0800b138
 8009e80:	0800b104 	.word	0x0800b104
 8009e84:	0800b10a 	.word	0x0800b10a
 8009e88:	0800b10e 	.word	0x0800b10e
 8009e8c:	00000000 	.word	0x00000000
 8009e90:	08009c0f 	.word	0x08009c0f

08009e94 <_printf_common>:
 8009e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e98:	4616      	mov	r6, r2
 8009e9a:	4699      	mov	r9, r3
 8009e9c:	688a      	ldr	r2, [r1, #8]
 8009e9e:	690b      	ldr	r3, [r1, #16]
 8009ea0:	4607      	mov	r7, r0
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	bfb8      	it	lt
 8009ea6:	4613      	movlt	r3, r2
 8009ea8:	6033      	str	r3, [r6, #0]
 8009eaa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009eae:	460c      	mov	r4, r1
 8009eb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009eb4:	b10a      	cbz	r2, 8009eba <_printf_common+0x26>
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	6033      	str	r3, [r6, #0]
 8009eba:	6823      	ldr	r3, [r4, #0]
 8009ebc:	0699      	lsls	r1, r3, #26
 8009ebe:	bf42      	ittt	mi
 8009ec0:	6833      	ldrmi	r3, [r6, #0]
 8009ec2:	3302      	addmi	r3, #2
 8009ec4:	6033      	strmi	r3, [r6, #0]
 8009ec6:	6825      	ldr	r5, [r4, #0]
 8009ec8:	f015 0506 	ands.w	r5, r5, #6
 8009ecc:	d106      	bne.n	8009edc <_printf_common+0x48>
 8009ece:	f104 0a19 	add.w	sl, r4, #25
 8009ed2:	68e3      	ldr	r3, [r4, #12]
 8009ed4:	6832      	ldr	r2, [r6, #0]
 8009ed6:	1a9b      	subs	r3, r3, r2
 8009ed8:	42ab      	cmp	r3, r5
 8009eda:	dc28      	bgt.n	8009f2e <_printf_common+0x9a>
 8009edc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ee0:	1e13      	subs	r3, r2, #0
 8009ee2:	6822      	ldr	r2, [r4, #0]
 8009ee4:	bf18      	it	ne
 8009ee6:	2301      	movne	r3, #1
 8009ee8:	0692      	lsls	r2, r2, #26
 8009eea:	d42d      	bmi.n	8009f48 <_printf_common+0xb4>
 8009eec:	4649      	mov	r1, r9
 8009eee:	4638      	mov	r0, r7
 8009ef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ef4:	47c0      	blx	r8
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	d020      	beq.n	8009f3c <_printf_common+0xa8>
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	68e5      	ldr	r5, [r4, #12]
 8009efe:	f003 0306 	and.w	r3, r3, #6
 8009f02:	2b04      	cmp	r3, #4
 8009f04:	bf18      	it	ne
 8009f06:	2500      	movne	r5, #0
 8009f08:	6832      	ldr	r2, [r6, #0]
 8009f0a:	f04f 0600 	mov.w	r6, #0
 8009f0e:	68a3      	ldr	r3, [r4, #8]
 8009f10:	bf08      	it	eq
 8009f12:	1aad      	subeq	r5, r5, r2
 8009f14:	6922      	ldr	r2, [r4, #16]
 8009f16:	bf08      	it	eq
 8009f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	bfc4      	itt	gt
 8009f20:	1a9b      	subgt	r3, r3, r2
 8009f22:	18ed      	addgt	r5, r5, r3
 8009f24:	341a      	adds	r4, #26
 8009f26:	42b5      	cmp	r5, r6
 8009f28:	d11a      	bne.n	8009f60 <_printf_common+0xcc>
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	e008      	b.n	8009f40 <_printf_common+0xac>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	4652      	mov	r2, sl
 8009f32:	4649      	mov	r1, r9
 8009f34:	4638      	mov	r0, r7
 8009f36:	47c0      	blx	r8
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d103      	bne.n	8009f44 <_printf_common+0xb0>
 8009f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f44:	3501      	adds	r5, #1
 8009f46:	e7c4      	b.n	8009ed2 <_printf_common+0x3e>
 8009f48:	2030      	movs	r0, #48	; 0x30
 8009f4a:	18e1      	adds	r1, r4, r3
 8009f4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f50:	1c5a      	adds	r2, r3, #1
 8009f52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f56:	4422      	add	r2, r4
 8009f58:	3302      	adds	r3, #2
 8009f5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f5e:	e7c5      	b.n	8009eec <_printf_common+0x58>
 8009f60:	2301      	movs	r3, #1
 8009f62:	4622      	mov	r2, r4
 8009f64:	4649      	mov	r1, r9
 8009f66:	4638      	mov	r0, r7
 8009f68:	47c0      	blx	r8
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	d0e6      	beq.n	8009f3c <_printf_common+0xa8>
 8009f6e:	3601      	adds	r6, #1
 8009f70:	e7d9      	b.n	8009f26 <_printf_common+0x92>
	...

08009f74 <_printf_i>:
 8009f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f78:	7e0f      	ldrb	r7, [r1, #24]
 8009f7a:	4691      	mov	r9, r2
 8009f7c:	2f78      	cmp	r7, #120	; 0x78
 8009f7e:	4680      	mov	r8, r0
 8009f80:	460c      	mov	r4, r1
 8009f82:	469a      	mov	sl, r3
 8009f84:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f8a:	d807      	bhi.n	8009f9c <_printf_i+0x28>
 8009f8c:	2f62      	cmp	r7, #98	; 0x62
 8009f8e:	d80a      	bhi.n	8009fa6 <_printf_i+0x32>
 8009f90:	2f00      	cmp	r7, #0
 8009f92:	f000 80d9 	beq.w	800a148 <_printf_i+0x1d4>
 8009f96:	2f58      	cmp	r7, #88	; 0x58
 8009f98:	f000 80a4 	beq.w	800a0e4 <_printf_i+0x170>
 8009f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fa4:	e03a      	b.n	800a01c <_printf_i+0xa8>
 8009fa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009faa:	2b15      	cmp	r3, #21
 8009fac:	d8f6      	bhi.n	8009f9c <_printf_i+0x28>
 8009fae:	a101      	add	r1, pc, #4	; (adr r1, 8009fb4 <_printf_i+0x40>)
 8009fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fb4:	0800a00d 	.word	0x0800a00d
 8009fb8:	0800a021 	.word	0x0800a021
 8009fbc:	08009f9d 	.word	0x08009f9d
 8009fc0:	08009f9d 	.word	0x08009f9d
 8009fc4:	08009f9d 	.word	0x08009f9d
 8009fc8:	08009f9d 	.word	0x08009f9d
 8009fcc:	0800a021 	.word	0x0800a021
 8009fd0:	08009f9d 	.word	0x08009f9d
 8009fd4:	08009f9d 	.word	0x08009f9d
 8009fd8:	08009f9d 	.word	0x08009f9d
 8009fdc:	08009f9d 	.word	0x08009f9d
 8009fe0:	0800a12f 	.word	0x0800a12f
 8009fe4:	0800a051 	.word	0x0800a051
 8009fe8:	0800a111 	.word	0x0800a111
 8009fec:	08009f9d 	.word	0x08009f9d
 8009ff0:	08009f9d 	.word	0x08009f9d
 8009ff4:	0800a151 	.word	0x0800a151
 8009ff8:	08009f9d 	.word	0x08009f9d
 8009ffc:	0800a051 	.word	0x0800a051
 800a000:	08009f9d 	.word	0x08009f9d
 800a004:	08009f9d 	.word	0x08009f9d
 800a008:	0800a119 	.word	0x0800a119
 800a00c:	682b      	ldr	r3, [r5, #0]
 800a00e:	1d1a      	adds	r2, r3, #4
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	602a      	str	r2, [r5, #0]
 800a014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a01c:	2301      	movs	r3, #1
 800a01e:	e0a4      	b.n	800a16a <_printf_i+0x1f6>
 800a020:	6820      	ldr	r0, [r4, #0]
 800a022:	6829      	ldr	r1, [r5, #0]
 800a024:	0606      	lsls	r6, r0, #24
 800a026:	f101 0304 	add.w	r3, r1, #4
 800a02a:	d50a      	bpl.n	800a042 <_printf_i+0xce>
 800a02c:	680e      	ldr	r6, [r1, #0]
 800a02e:	602b      	str	r3, [r5, #0]
 800a030:	2e00      	cmp	r6, #0
 800a032:	da03      	bge.n	800a03c <_printf_i+0xc8>
 800a034:	232d      	movs	r3, #45	; 0x2d
 800a036:	4276      	negs	r6, r6
 800a038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a03c:	230a      	movs	r3, #10
 800a03e:	485e      	ldr	r0, [pc, #376]	; (800a1b8 <_printf_i+0x244>)
 800a040:	e019      	b.n	800a076 <_printf_i+0x102>
 800a042:	680e      	ldr	r6, [r1, #0]
 800a044:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a048:	602b      	str	r3, [r5, #0]
 800a04a:	bf18      	it	ne
 800a04c:	b236      	sxthne	r6, r6
 800a04e:	e7ef      	b.n	800a030 <_printf_i+0xbc>
 800a050:	682b      	ldr	r3, [r5, #0]
 800a052:	6820      	ldr	r0, [r4, #0]
 800a054:	1d19      	adds	r1, r3, #4
 800a056:	6029      	str	r1, [r5, #0]
 800a058:	0601      	lsls	r1, r0, #24
 800a05a:	d501      	bpl.n	800a060 <_printf_i+0xec>
 800a05c:	681e      	ldr	r6, [r3, #0]
 800a05e:	e002      	b.n	800a066 <_printf_i+0xf2>
 800a060:	0646      	lsls	r6, r0, #25
 800a062:	d5fb      	bpl.n	800a05c <_printf_i+0xe8>
 800a064:	881e      	ldrh	r6, [r3, #0]
 800a066:	2f6f      	cmp	r7, #111	; 0x6f
 800a068:	bf0c      	ite	eq
 800a06a:	2308      	moveq	r3, #8
 800a06c:	230a      	movne	r3, #10
 800a06e:	4852      	ldr	r0, [pc, #328]	; (800a1b8 <_printf_i+0x244>)
 800a070:	2100      	movs	r1, #0
 800a072:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a076:	6865      	ldr	r5, [r4, #4]
 800a078:	2d00      	cmp	r5, #0
 800a07a:	bfa8      	it	ge
 800a07c:	6821      	ldrge	r1, [r4, #0]
 800a07e:	60a5      	str	r5, [r4, #8]
 800a080:	bfa4      	itt	ge
 800a082:	f021 0104 	bicge.w	r1, r1, #4
 800a086:	6021      	strge	r1, [r4, #0]
 800a088:	b90e      	cbnz	r6, 800a08e <_printf_i+0x11a>
 800a08a:	2d00      	cmp	r5, #0
 800a08c:	d04d      	beq.n	800a12a <_printf_i+0x1b6>
 800a08e:	4615      	mov	r5, r2
 800a090:	fbb6 f1f3 	udiv	r1, r6, r3
 800a094:	fb03 6711 	mls	r7, r3, r1, r6
 800a098:	5dc7      	ldrb	r7, [r0, r7]
 800a09a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a09e:	4637      	mov	r7, r6
 800a0a0:	42bb      	cmp	r3, r7
 800a0a2:	460e      	mov	r6, r1
 800a0a4:	d9f4      	bls.n	800a090 <_printf_i+0x11c>
 800a0a6:	2b08      	cmp	r3, #8
 800a0a8:	d10b      	bne.n	800a0c2 <_printf_i+0x14e>
 800a0aa:	6823      	ldr	r3, [r4, #0]
 800a0ac:	07de      	lsls	r6, r3, #31
 800a0ae:	d508      	bpl.n	800a0c2 <_printf_i+0x14e>
 800a0b0:	6923      	ldr	r3, [r4, #16]
 800a0b2:	6861      	ldr	r1, [r4, #4]
 800a0b4:	4299      	cmp	r1, r3
 800a0b6:	bfde      	ittt	le
 800a0b8:	2330      	movle	r3, #48	; 0x30
 800a0ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0be:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0c2:	1b52      	subs	r2, r2, r5
 800a0c4:	6122      	str	r2, [r4, #16]
 800a0c6:	464b      	mov	r3, r9
 800a0c8:	4621      	mov	r1, r4
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	f8cd a000 	str.w	sl, [sp]
 800a0d0:	aa03      	add	r2, sp, #12
 800a0d2:	f7ff fedf 	bl	8009e94 <_printf_common>
 800a0d6:	3001      	adds	r0, #1
 800a0d8:	d14c      	bne.n	800a174 <_printf_i+0x200>
 800a0da:	f04f 30ff 	mov.w	r0, #4294967295
 800a0de:	b004      	add	sp, #16
 800a0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e4:	4834      	ldr	r0, [pc, #208]	; (800a1b8 <_printf_i+0x244>)
 800a0e6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a0ea:	6829      	ldr	r1, [r5, #0]
 800a0ec:	6823      	ldr	r3, [r4, #0]
 800a0ee:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0f2:	6029      	str	r1, [r5, #0]
 800a0f4:	061d      	lsls	r5, r3, #24
 800a0f6:	d514      	bpl.n	800a122 <_printf_i+0x1ae>
 800a0f8:	07df      	lsls	r7, r3, #31
 800a0fa:	bf44      	itt	mi
 800a0fc:	f043 0320 	orrmi.w	r3, r3, #32
 800a100:	6023      	strmi	r3, [r4, #0]
 800a102:	b91e      	cbnz	r6, 800a10c <_printf_i+0x198>
 800a104:	6823      	ldr	r3, [r4, #0]
 800a106:	f023 0320 	bic.w	r3, r3, #32
 800a10a:	6023      	str	r3, [r4, #0]
 800a10c:	2310      	movs	r3, #16
 800a10e:	e7af      	b.n	800a070 <_printf_i+0xfc>
 800a110:	6823      	ldr	r3, [r4, #0]
 800a112:	f043 0320 	orr.w	r3, r3, #32
 800a116:	6023      	str	r3, [r4, #0]
 800a118:	2378      	movs	r3, #120	; 0x78
 800a11a:	4828      	ldr	r0, [pc, #160]	; (800a1bc <_printf_i+0x248>)
 800a11c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a120:	e7e3      	b.n	800a0ea <_printf_i+0x176>
 800a122:	0659      	lsls	r1, r3, #25
 800a124:	bf48      	it	mi
 800a126:	b2b6      	uxthmi	r6, r6
 800a128:	e7e6      	b.n	800a0f8 <_printf_i+0x184>
 800a12a:	4615      	mov	r5, r2
 800a12c:	e7bb      	b.n	800a0a6 <_printf_i+0x132>
 800a12e:	682b      	ldr	r3, [r5, #0]
 800a130:	6826      	ldr	r6, [r4, #0]
 800a132:	1d18      	adds	r0, r3, #4
 800a134:	6961      	ldr	r1, [r4, #20]
 800a136:	6028      	str	r0, [r5, #0]
 800a138:	0635      	lsls	r5, r6, #24
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	d501      	bpl.n	800a142 <_printf_i+0x1ce>
 800a13e:	6019      	str	r1, [r3, #0]
 800a140:	e002      	b.n	800a148 <_printf_i+0x1d4>
 800a142:	0670      	lsls	r0, r6, #25
 800a144:	d5fb      	bpl.n	800a13e <_printf_i+0x1ca>
 800a146:	8019      	strh	r1, [r3, #0]
 800a148:	2300      	movs	r3, #0
 800a14a:	4615      	mov	r5, r2
 800a14c:	6123      	str	r3, [r4, #16]
 800a14e:	e7ba      	b.n	800a0c6 <_printf_i+0x152>
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	2100      	movs	r1, #0
 800a154:	1d1a      	adds	r2, r3, #4
 800a156:	602a      	str	r2, [r5, #0]
 800a158:	681d      	ldr	r5, [r3, #0]
 800a15a:	6862      	ldr	r2, [r4, #4]
 800a15c:	4628      	mov	r0, r5
 800a15e:	f000 fb4f 	bl	800a800 <memchr>
 800a162:	b108      	cbz	r0, 800a168 <_printf_i+0x1f4>
 800a164:	1b40      	subs	r0, r0, r5
 800a166:	6060      	str	r0, [r4, #4]
 800a168:	6863      	ldr	r3, [r4, #4]
 800a16a:	6123      	str	r3, [r4, #16]
 800a16c:	2300      	movs	r3, #0
 800a16e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a172:	e7a8      	b.n	800a0c6 <_printf_i+0x152>
 800a174:	462a      	mov	r2, r5
 800a176:	4649      	mov	r1, r9
 800a178:	4640      	mov	r0, r8
 800a17a:	6923      	ldr	r3, [r4, #16]
 800a17c:	47d0      	blx	sl
 800a17e:	3001      	adds	r0, #1
 800a180:	d0ab      	beq.n	800a0da <_printf_i+0x166>
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	079b      	lsls	r3, r3, #30
 800a186:	d413      	bmi.n	800a1b0 <_printf_i+0x23c>
 800a188:	68e0      	ldr	r0, [r4, #12]
 800a18a:	9b03      	ldr	r3, [sp, #12]
 800a18c:	4298      	cmp	r0, r3
 800a18e:	bfb8      	it	lt
 800a190:	4618      	movlt	r0, r3
 800a192:	e7a4      	b.n	800a0de <_printf_i+0x16a>
 800a194:	2301      	movs	r3, #1
 800a196:	4632      	mov	r2, r6
 800a198:	4649      	mov	r1, r9
 800a19a:	4640      	mov	r0, r8
 800a19c:	47d0      	blx	sl
 800a19e:	3001      	adds	r0, #1
 800a1a0:	d09b      	beq.n	800a0da <_printf_i+0x166>
 800a1a2:	3501      	adds	r5, #1
 800a1a4:	68e3      	ldr	r3, [r4, #12]
 800a1a6:	9903      	ldr	r1, [sp, #12]
 800a1a8:	1a5b      	subs	r3, r3, r1
 800a1aa:	42ab      	cmp	r3, r5
 800a1ac:	dcf2      	bgt.n	800a194 <_printf_i+0x220>
 800a1ae:	e7eb      	b.n	800a188 <_printf_i+0x214>
 800a1b0:	2500      	movs	r5, #0
 800a1b2:	f104 0619 	add.w	r6, r4, #25
 800a1b6:	e7f5      	b.n	800a1a4 <_printf_i+0x230>
 800a1b8:	0800b115 	.word	0x0800b115
 800a1bc:	0800b126 	.word	0x0800b126

0800a1c0 <nan>:
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	4901      	ldr	r1, [pc, #4]	; (800a1c8 <nan+0x8>)
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	7ff80000 	.word	0x7ff80000

0800a1cc <_sbrk_r>:
 800a1cc:	b538      	push	{r3, r4, r5, lr}
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	4d05      	ldr	r5, [pc, #20]	; (800a1e8 <_sbrk_r+0x1c>)
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	4608      	mov	r0, r1
 800a1d6:	602b      	str	r3, [r5, #0]
 800a1d8:	f7f8 fe14 	bl	8002e04 <_sbrk>
 800a1dc:	1c43      	adds	r3, r0, #1
 800a1de:	d102      	bne.n	800a1e6 <_sbrk_r+0x1a>
 800a1e0:	682b      	ldr	r3, [r5, #0]
 800a1e2:	b103      	cbz	r3, 800a1e6 <_sbrk_r+0x1a>
 800a1e4:	6023      	str	r3, [r4, #0]
 800a1e6:	bd38      	pop	{r3, r4, r5, pc}
 800a1e8:	2000c088 	.word	0x2000c088

0800a1ec <nanf>:
 800a1ec:	4800      	ldr	r0, [pc, #0]	; (800a1f0 <nanf+0x4>)
 800a1ee:	4770      	bx	lr
 800a1f0:	7fc00000 	.word	0x7fc00000

0800a1f4 <strncmp>:
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	b510      	push	{r4, lr}
 800a1f8:	b172      	cbz	r2, 800a218 <strncmp+0x24>
 800a1fa:	3901      	subs	r1, #1
 800a1fc:	1884      	adds	r4, r0, r2
 800a1fe:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a202:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a206:	4290      	cmp	r0, r2
 800a208:	d101      	bne.n	800a20e <strncmp+0x1a>
 800a20a:	42a3      	cmp	r3, r4
 800a20c:	d101      	bne.n	800a212 <strncmp+0x1e>
 800a20e:	1a80      	subs	r0, r0, r2
 800a210:	bd10      	pop	{r4, pc}
 800a212:	2800      	cmp	r0, #0
 800a214:	d1f3      	bne.n	800a1fe <strncmp+0xa>
 800a216:	e7fa      	b.n	800a20e <strncmp+0x1a>
 800a218:	4610      	mov	r0, r2
 800a21a:	e7f9      	b.n	800a210 <strncmp+0x1c>

0800a21c <__swbuf_r>:
 800a21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a21e:	460e      	mov	r6, r1
 800a220:	4614      	mov	r4, r2
 800a222:	4605      	mov	r5, r0
 800a224:	b118      	cbz	r0, 800a22e <__swbuf_r+0x12>
 800a226:	6983      	ldr	r3, [r0, #24]
 800a228:	b90b      	cbnz	r3, 800a22e <__swbuf_r+0x12>
 800a22a:	f000 f9e3 	bl	800a5f4 <__sinit>
 800a22e:	4b21      	ldr	r3, [pc, #132]	; (800a2b4 <__swbuf_r+0x98>)
 800a230:	429c      	cmp	r4, r3
 800a232:	d12b      	bne.n	800a28c <__swbuf_r+0x70>
 800a234:	686c      	ldr	r4, [r5, #4]
 800a236:	69a3      	ldr	r3, [r4, #24]
 800a238:	60a3      	str	r3, [r4, #8]
 800a23a:	89a3      	ldrh	r3, [r4, #12]
 800a23c:	071a      	lsls	r2, r3, #28
 800a23e:	d52f      	bpl.n	800a2a0 <__swbuf_r+0x84>
 800a240:	6923      	ldr	r3, [r4, #16]
 800a242:	b36b      	cbz	r3, 800a2a0 <__swbuf_r+0x84>
 800a244:	6923      	ldr	r3, [r4, #16]
 800a246:	6820      	ldr	r0, [r4, #0]
 800a248:	b2f6      	uxtb	r6, r6
 800a24a:	1ac0      	subs	r0, r0, r3
 800a24c:	6963      	ldr	r3, [r4, #20]
 800a24e:	4637      	mov	r7, r6
 800a250:	4283      	cmp	r3, r0
 800a252:	dc04      	bgt.n	800a25e <__swbuf_r+0x42>
 800a254:	4621      	mov	r1, r4
 800a256:	4628      	mov	r0, r5
 800a258:	f000 f938 	bl	800a4cc <_fflush_r>
 800a25c:	bb30      	cbnz	r0, 800a2ac <__swbuf_r+0x90>
 800a25e:	68a3      	ldr	r3, [r4, #8]
 800a260:	3001      	adds	r0, #1
 800a262:	3b01      	subs	r3, #1
 800a264:	60a3      	str	r3, [r4, #8]
 800a266:	6823      	ldr	r3, [r4, #0]
 800a268:	1c5a      	adds	r2, r3, #1
 800a26a:	6022      	str	r2, [r4, #0]
 800a26c:	701e      	strb	r6, [r3, #0]
 800a26e:	6963      	ldr	r3, [r4, #20]
 800a270:	4283      	cmp	r3, r0
 800a272:	d004      	beq.n	800a27e <__swbuf_r+0x62>
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	07db      	lsls	r3, r3, #31
 800a278:	d506      	bpl.n	800a288 <__swbuf_r+0x6c>
 800a27a:	2e0a      	cmp	r6, #10
 800a27c:	d104      	bne.n	800a288 <__swbuf_r+0x6c>
 800a27e:	4621      	mov	r1, r4
 800a280:	4628      	mov	r0, r5
 800a282:	f000 f923 	bl	800a4cc <_fflush_r>
 800a286:	b988      	cbnz	r0, 800a2ac <__swbuf_r+0x90>
 800a288:	4638      	mov	r0, r7
 800a28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a28c:	4b0a      	ldr	r3, [pc, #40]	; (800a2b8 <__swbuf_r+0x9c>)
 800a28e:	429c      	cmp	r4, r3
 800a290:	d101      	bne.n	800a296 <__swbuf_r+0x7a>
 800a292:	68ac      	ldr	r4, [r5, #8]
 800a294:	e7cf      	b.n	800a236 <__swbuf_r+0x1a>
 800a296:	4b09      	ldr	r3, [pc, #36]	; (800a2bc <__swbuf_r+0xa0>)
 800a298:	429c      	cmp	r4, r3
 800a29a:	bf08      	it	eq
 800a29c:	68ec      	ldreq	r4, [r5, #12]
 800a29e:	e7ca      	b.n	800a236 <__swbuf_r+0x1a>
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	f000 f81a 	bl	800a2dc <__swsetup_r>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	d0cb      	beq.n	800a244 <__swbuf_r+0x28>
 800a2ac:	f04f 37ff 	mov.w	r7, #4294967295
 800a2b0:	e7ea      	b.n	800a288 <__swbuf_r+0x6c>
 800a2b2:	bf00      	nop
 800a2b4:	0800b158 	.word	0x0800b158
 800a2b8:	0800b178 	.word	0x0800b178
 800a2bc:	0800b138 	.word	0x0800b138

0800a2c0 <__ascii_wctomb>:
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	4608      	mov	r0, r1
 800a2c4:	b141      	cbz	r1, 800a2d8 <__ascii_wctomb+0x18>
 800a2c6:	2aff      	cmp	r2, #255	; 0xff
 800a2c8:	d904      	bls.n	800a2d4 <__ascii_wctomb+0x14>
 800a2ca:	228a      	movs	r2, #138	; 0x8a
 800a2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d0:	601a      	str	r2, [r3, #0]
 800a2d2:	4770      	bx	lr
 800a2d4:	2001      	movs	r0, #1
 800a2d6:	700a      	strb	r2, [r1, #0]
 800a2d8:	4770      	bx	lr
	...

0800a2dc <__swsetup_r>:
 800a2dc:	4b32      	ldr	r3, [pc, #200]	; (800a3a8 <__swsetup_r+0xcc>)
 800a2de:	b570      	push	{r4, r5, r6, lr}
 800a2e0:	681d      	ldr	r5, [r3, #0]
 800a2e2:	4606      	mov	r6, r0
 800a2e4:	460c      	mov	r4, r1
 800a2e6:	b125      	cbz	r5, 800a2f2 <__swsetup_r+0x16>
 800a2e8:	69ab      	ldr	r3, [r5, #24]
 800a2ea:	b913      	cbnz	r3, 800a2f2 <__swsetup_r+0x16>
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	f000 f981 	bl	800a5f4 <__sinit>
 800a2f2:	4b2e      	ldr	r3, [pc, #184]	; (800a3ac <__swsetup_r+0xd0>)
 800a2f4:	429c      	cmp	r4, r3
 800a2f6:	d10f      	bne.n	800a318 <__swsetup_r+0x3c>
 800a2f8:	686c      	ldr	r4, [r5, #4]
 800a2fa:	89a3      	ldrh	r3, [r4, #12]
 800a2fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a300:	0719      	lsls	r1, r3, #28
 800a302:	d42c      	bmi.n	800a35e <__swsetup_r+0x82>
 800a304:	06dd      	lsls	r5, r3, #27
 800a306:	d411      	bmi.n	800a32c <__swsetup_r+0x50>
 800a308:	2309      	movs	r3, #9
 800a30a:	6033      	str	r3, [r6, #0]
 800a30c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a310:	f04f 30ff 	mov.w	r0, #4294967295
 800a314:	81a3      	strh	r3, [r4, #12]
 800a316:	e03e      	b.n	800a396 <__swsetup_r+0xba>
 800a318:	4b25      	ldr	r3, [pc, #148]	; (800a3b0 <__swsetup_r+0xd4>)
 800a31a:	429c      	cmp	r4, r3
 800a31c:	d101      	bne.n	800a322 <__swsetup_r+0x46>
 800a31e:	68ac      	ldr	r4, [r5, #8]
 800a320:	e7eb      	b.n	800a2fa <__swsetup_r+0x1e>
 800a322:	4b24      	ldr	r3, [pc, #144]	; (800a3b4 <__swsetup_r+0xd8>)
 800a324:	429c      	cmp	r4, r3
 800a326:	bf08      	it	eq
 800a328:	68ec      	ldreq	r4, [r5, #12]
 800a32a:	e7e6      	b.n	800a2fa <__swsetup_r+0x1e>
 800a32c:	0758      	lsls	r0, r3, #29
 800a32e:	d512      	bpl.n	800a356 <__swsetup_r+0x7a>
 800a330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a332:	b141      	cbz	r1, 800a346 <__swsetup_r+0x6a>
 800a334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a338:	4299      	cmp	r1, r3
 800a33a:	d002      	beq.n	800a342 <__swsetup_r+0x66>
 800a33c:	4630      	mov	r0, r6
 800a33e:	f7ff fa19 	bl	8009774 <_free_r>
 800a342:	2300      	movs	r3, #0
 800a344:	6363      	str	r3, [r4, #52]	; 0x34
 800a346:	89a3      	ldrh	r3, [r4, #12]
 800a348:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a34c:	81a3      	strh	r3, [r4, #12]
 800a34e:	2300      	movs	r3, #0
 800a350:	6063      	str	r3, [r4, #4]
 800a352:	6923      	ldr	r3, [r4, #16]
 800a354:	6023      	str	r3, [r4, #0]
 800a356:	89a3      	ldrh	r3, [r4, #12]
 800a358:	f043 0308 	orr.w	r3, r3, #8
 800a35c:	81a3      	strh	r3, [r4, #12]
 800a35e:	6923      	ldr	r3, [r4, #16]
 800a360:	b94b      	cbnz	r3, 800a376 <__swsetup_r+0x9a>
 800a362:	89a3      	ldrh	r3, [r4, #12]
 800a364:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a36c:	d003      	beq.n	800a376 <__swsetup_r+0x9a>
 800a36e:	4621      	mov	r1, r4
 800a370:	4630      	mov	r0, r6
 800a372:	f000 fa05 	bl	800a780 <__smakebuf_r>
 800a376:	89a0      	ldrh	r0, [r4, #12]
 800a378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a37c:	f010 0301 	ands.w	r3, r0, #1
 800a380:	d00a      	beq.n	800a398 <__swsetup_r+0xbc>
 800a382:	2300      	movs	r3, #0
 800a384:	60a3      	str	r3, [r4, #8]
 800a386:	6963      	ldr	r3, [r4, #20]
 800a388:	425b      	negs	r3, r3
 800a38a:	61a3      	str	r3, [r4, #24]
 800a38c:	6923      	ldr	r3, [r4, #16]
 800a38e:	b943      	cbnz	r3, 800a3a2 <__swsetup_r+0xc6>
 800a390:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a394:	d1ba      	bne.n	800a30c <__swsetup_r+0x30>
 800a396:	bd70      	pop	{r4, r5, r6, pc}
 800a398:	0781      	lsls	r1, r0, #30
 800a39a:	bf58      	it	pl
 800a39c:	6963      	ldrpl	r3, [r4, #20]
 800a39e:	60a3      	str	r3, [r4, #8]
 800a3a0:	e7f4      	b.n	800a38c <__swsetup_r+0xb0>
 800a3a2:	2000      	movs	r0, #0
 800a3a4:	e7f7      	b.n	800a396 <__swsetup_r+0xba>
 800a3a6:	bf00      	nop
 800a3a8:	20000024 	.word	0x20000024
 800a3ac:	0800b158 	.word	0x0800b158
 800a3b0:	0800b178 	.word	0x0800b178
 800a3b4:	0800b138 	.word	0x0800b138

0800a3b8 <abort>:
 800a3b8:	2006      	movs	r0, #6
 800a3ba:	b508      	push	{r3, lr}
 800a3bc:	f000 faac 	bl	800a918 <raise>
 800a3c0:	2001      	movs	r0, #1
 800a3c2:	f7f8 fcac 	bl	8002d1e <_exit>
	...

0800a3c8 <__sflush_r>:
 800a3c8:	898a      	ldrh	r2, [r1, #12]
 800a3ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	0710      	lsls	r0, r2, #28
 800a3d0:	460c      	mov	r4, r1
 800a3d2:	d457      	bmi.n	800a484 <__sflush_r+0xbc>
 800a3d4:	684b      	ldr	r3, [r1, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	dc04      	bgt.n	800a3e4 <__sflush_r+0x1c>
 800a3da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	dc01      	bgt.n	800a3e4 <__sflush_r+0x1c>
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3e6:	2e00      	cmp	r6, #0
 800a3e8:	d0fa      	beq.n	800a3e0 <__sflush_r+0x18>
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3f0:	682f      	ldr	r7, [r5, #0]
 800a3f2:	602b      	str	r3, [r5, #0]
 800a3f4:	d032      	beq.n	800a45c <__sflush_r+0x94>
 800a3f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3f8:	89a3      	ldrh	r3, [r4, #12]
 800a3fa:	075a      	lsls	r2, r3, #29
 800a3fc:	d505      	bpl.n	800a40a <__sflush_r+0x42>
 800a3fe:	6863      	ldr	r3, [r4, #4]
 800a400:	1ac0      	subs	r0, r0, r3
 800a402:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a404:	b10b      	cbz	r3, 800a40a <__sflush_r+0x42>
 800a406:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a408:	1ac0      	subs	r0, r0, r3
 800a40a:	2300      	movs	r3, #0
 800a40c:	4602      	mov	r2, r0
 800a40e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a410:	4628      	mov	r0, r5
 800a412:	6a21      	ldr	r1, [r4, #32]
 800a414:	47b0      	blx	r6
 800a416:	1c43      	adds	r3, r0, #1
 800a418:	89a3      	ldrh	r3, [r4, #12]
 800a41a:	d106      	bne.n	800a42a <__sflush_r+0x62>
 800a41c:	6829      	ldr	r1, [r5, #0]
 800a41e:	291d      	cmp	r1, #29
 800a420:	d82c      	bhi.n	800a47c <__sflush_r+0xb4>
 800a422:	4a29      	ldr	r2, [pc, #164]	; (800a4c8 <__sflush_r+0x100>)
 800a424:	40ca      	lsrs	r2, r1
 800a426:	07d6      	lsls	r6, r2, #31
 800a428:	d528      	bpl.n	800a47c <__sflush_r+0xb4>
 800a42a:	2200      	movs	r2, #0
 800a42c:	6062      	str	r2, [r4, #4]
 800a42e:	6922      	ldr	r2, [r4, #16]
 800a430:	04d9      	lsls	r1, r3, #19
 800a432:	6022      	str	r2, [r4, #0]
 800a434:	d504      	bpl.n	800a440 <__sflush_r+0x78>
 800a436:	1c42      	adds	r2, r0, #1
 800a438:	d101      	bne.n	800a43e <__sflush_r+0x76>
 800a43a:	682b      	ldr	r3, [r5, #0]
 800a43c:	b903      	cbnz	r3, 800a440 <__sflush_r+0x78>
 800a43e:	6560      	str	r0, [r4, #84]	; 0x54
 800a440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a442:	602f      	str	r7, [r5, #0]
 800a444:	2900      	cmp	r1, #0
 800a446:	d0cb      	beq.n	800a3e0 <__sflush_r+0x18>
 800a448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a44c:	4299      	cmp	r1, r3
 800a44e:	d002      	beq.n	800a456 <__sflush_r+0x8e>
 800a450:	4628      	mov	r0, r5
 800a452:	f7ff f98f 	bl	8009774 <_free_r>
 800a456:	2000      	movs	r0, #0
 800a458:	6360      	str	r0, [r4, #52]	; 0x34
 800a45a:	e7c2      	b.n	800a3e2 <__sflush_r+0x1a>
 800a45c:	6a21      	ldr	r1, [r4, #32]
 800a45e:	2301      	movs	r3, #1
 800a460:	4628      	mov	r0, r5
 800a462:	47b0      	blx	r6
 800a464:	1c41      	adds	r1, r0, #1
 800a466:	d1c7      	bne.n	800a3f8 <__sflush_r+0x30>
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d0c4      	beq.n	800a3f8 <__sflush_r+0x30>
 800a46e:	2b1d      	cmp	r3, #29
 800a470:	d001      	beq.n	800a476 <__sflush_r+0xae>
 800a472:	2b16      	cmp	r3, #22
 800a474:	d101      	bne.n	800a47a <__sflush_r+0xb2>
 800a476:	602f      	str	r7, [r5, #0]
 800a478:	e7b2      	b.n	800a3e0 <__sflush_r+0x18>
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a480:	81a3      	strh	r3, [r4, #12]
 800a482:	e7ae      	b.n	800a3e2 <__sflush_r+0x1a>
 800a484:	690f      	ldr	r7, [r1, #16]
 800a486:	2f00      	cmp	r7, #0
 800a488:	d0aa      	beq.n	800a3e0 <__sflush_r+0x18>
 800a48a:	0793      	lsls	r3, r2, #30
 800a48c:	bf18      	it	ne
 800a48e:	2300      	movne	r3, #0
 800a490:	680e      	ldr	r6, [r1, #0]
 800a492:	bf08      	it	eq
 800a494:	694b      	ldreq	r3, [r1, #20]
 800a496:	1bf6      	subs	r6, r6, r7
 800a498:	600f      	str	r7, [r1, #0]
 800a49a:	608b      	str	r3, [r1, #8]
 800a49c:	2e00      	cmp	r6, #0
 800a49e:	dd9f      	ble.n	800a3e0 <__sflush_r+0x18>
 800a4a0:	4633      	mov	r3, r6
 800a4a2:	463a      	mov	r2, r7
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	6a21      	ldr	r1, [r4, #32]
 800a4a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a4ac:	47e0      	blx	ip
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	dc06      	bgt.n	800a4c0 <__sflush_r+0xf8>
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4bc:	81a3      	strh	r3, [r4, #12]
 800a4be:	e790      	b.n	800a3e2 <__sflush_r+0x1a>
 800a4c0:	4407      	add	r7, r0
 800a4c2:	1a36      	subs	r6, r6, r0
 800a4c4:	e7ea      	b.n	800a49c <__sflush_r+0xd4>
 800a4c6:	bf00      	nop
 800a4c8:	20400001 	.word	0x20400001

0800a4cc <_fflush_r>:
 800a4cc:	b538      	push	{r3, r4, r5, lr}
 800a4ce:	690b      	ldr	r3, [r1, #16]
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	b913      	cbnz	r3, 800a4dc <_fflush_r+0x10>
 800a4d6:	2500      	movs	r5, #0
 800a4d8:	4628      	mov	r0, r5
 800a4da:	bd38      	pop	{r3, r4, r5, pc}
 800a4dc:	b118      	cbz	r0, 800a4e6 <_fflush_r+0x1a>
 800a4de:	6983      	ldr	r3, [r0, #24]
 800a4e0:	b90b      	cbnz	r3, 800a4e6 <_fflush_r+0x1a>
 800a4e2:	f000 f887 	bl	800a5f4 <__sinit>
 800a4e6:	4b14      	ldr	r3, [pc, #80]	; (800a538 <_fflush_r+0x6c>)
 800a4e8:	429c      	cmp	r4, r3
 800a4ea:	d11b      	bne.n	800a524 <_fflush_r+0x58>
 800a4ec:	686c      	ldr	r4, [r5, #4]
 800a4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d0ef      	beq.n	800a4d6 <_fflush_r+0xa>
 800a4f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4f8:	07d0      	lsls	r0, r2, #31
 800a4fa:	d404      	bmi.n	800a506 <_fflush_r+0x3a>
 800a4fc:	0599      	lsls	r1, r3, #22
 800a4fe:	d402      	bmi.n	800a506 <_fflush_r+0x3a>
 800a500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a502:	f000 f915 	bl	800a730 <__retarget_lock_acquire_recursive>
 800a506:	4628      	mov	r0, r5
 800a508:	4621      	mov	r1, r4
 800a50a:	f7ff ff5d 	bl	800a3c8 <__sflush_r>
 800a50e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a510:	4605      	mov	r5, r0
 800a512:	07da      	lsls	r2, r3, #31
 800a514:	d4e0      	bmi.n	800a4d8 <_fflush_r+0xc>
 800a516:	89a3      	ldrh	r3, [r4, #12]
 800a518:	059b      	lsls	r3, r3, #22
 800a51a:	d4dd      	bmi.n	800a4d8 <_fflush_r+0xc>
 800a51c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a51e:	f000 f908 	bl	800a732 <__retarget_lock_release_recursive>
 800a522:	e7d9      	b.n	800a4d8 <_fflush_r+0xc>
 800a524:	4b05      	ldr	r3, [pc, #20]	; (800a53c <_fflush_r+0x70>)
 800a526:	429c      	cmp	r4, r3
 800a528:	d101      	bne.n	800a52e <_fflush_r+0x62>
 800a52a:	68ac      	ldr	r4, [r5, #8]
 800a52c:	e7df      	b.n	800a4ee <_fflush_r+0x22>
 800a52e:	4b04      	ldr	r3, [pc, #16]	; (800a540 <_fflush_r+0x74>)
 800a530:	429c      	cmp	r4, r3
 800a532:	bf08      	it	eq
 800a534:	68ec      	ldreq	r4, [r5, #12]
 800a536:	e7da      	b.n	800a4ee <_fflush_r+0x22>
 800a538:	0800b158 	.word	0x0800b158
 800a53c:	0800b178 	.word	0x0800b178
 800a540:	0800b138 	.word	0x0800b138

0800a544 <std>:
 800a544:	2300      	movs	r3, #0
 800a546:	b510      	push	{r4, lr}
 800a548:	4604      	mov	r4, r0
 800a54a:	e9c0 3300 	strd	r3, r3, [r0]
 800a54e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a552:	6083      	str	r3, [r0, #8]
 800a554:	8181      	strh	r1, [r0, #12]
 800a556:	6643      	str	r3, [r0, #100]	; 0x64
 800a558:	81c2      	strh	r2, [r0, #14]
 800a55a:	6183      	str	r3, [r0, #24]
 800a55c:	4619      	mov	r1, r3
 800a55e:	2208      	movs	r2, #8
 800a560:	305c      	adds	r0, #92	; 0x5c
 800a562:	f7fd f90b 	bl	800777c <memset>
 800a566:	4b05      	ldr	r3, [pc, #20]	; (800a57c <std+0x38>)
 800a568:	6224      	str	r4, [r4, #32]
 800a56a:	6263      	str	r3, [r4, #36]	; 0x24
 800a56c:	4b04      	ldr	r3, [pc, #16]	; (800a580 <std+0x3c>)
 800a56e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a570:	4b04      	ldr	r3, [pc, #16]	; (800a584 <std+0x40>)
 800a572:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a574:	4b04      	ldr	r3, [pc, #16]	; (800a588 <std+0x44>)
 800a576:	6323      	str	r3, [r4, #48]	; 0x30
 800a578:	bd10      	pop	{r4, pc}
 800a57a:	bf00      	nop
 800a57c:	0800a951 	.word	0x0800a951
 800a580:	0800a973 	.word	0x0800a973
 800a584:	0800a9ab 	.word	0x0800a9ab
 800a588:	0800a9cf 	.word	0x0800a9cf

0800a58c <_cleanup_r>:
 800a58c:	4901      	ldr	r1, [pc, #4]	; (800a594 <_cleanup_r+0x8>)
 800a58e:	f000 b8af 	b.w	800a6f0 <_fwalk_reent>
 800a592:	bf00      	nop
 800a594:	0800a4cd 	.word	0x0800a4cd

0800a598 <__sfmoreglue>:
 800a598:	2268      	movs	r2, #104	; 0x68
 800a59a:	b570      	push	{r4, r5, r6, lr}
 800a59c:	1e4d      	subs	r5, r1, #1
 800a59e:	4355      	muls	r5, r2
 800a5a0:	460e      	mov	r6, r1
 800a5a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a5a6:	f7ff f94d 	bl	8009844 <_malloc_r>
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	b140      	cbz	r0, 800a5c0 <__sfmoreglue+0x28>
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	e9c0 1600 	strd	r1, r6, [r0]
 800a5b4:	300c      	adds	r0, #12
 800a5b6:	60a0      	str	r0, [r4, #8]
 800a5b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5bc:	f7fd f8de 	bl	800777c <memset>
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	bd70      	pop	{r4, r5, r6, pc}

0800a5c4 <__sfp_lock_acquire>:
 800a5c4:	4801      	ldr	r0, [pc, #4]	; (800a5cc <__sfp_lock_acquire+0x8>)
 800a5c6:	f000 b8b3 	b.w	800a730 <__retarget_lock_acquire_recursive>
 800a5ca:	bf00      	nop
 800a5cc:	2000c085 	.word	0x2000c085

0800a5d0 <__sfp_lock_release>:
 800a5d0:	4801      	ldr	r0, [pc, #4]	; (800a5d8 <__sfp_lock_release+0x8>)
 800a5d2:	f000 b8ae 	b.w	800a732 <__retarget_lock_release_recursive>
 800a5d6:	bf00      	nop
 800a5d8:	2000c085 	.word	0x2000c085

0800a5dc <__sinit_lock_acquire>:
 800a5dc:	4801      	ldr	r0, [pc, #4]	; (800a5e4 <__sinit_lock_acquire+0x8>)
 800a5de:	f000 b8a7 	b.w	800a730 <__retarget_lock_acquire_recursive>
 800a5e2:	bf00      	nop
 800a5e4:	2000c086 	.word	0x2000c086

0800a5e8 <__sinit_lock_release>:
 800a5e8:	4801      	ldr	r0, [pc, #4]	; (800a5f0 <__sinit_lock_release+0x8>)
 800a5ea:	f000 b8a2 	b.w	800a732 <__retarget_lock_release_recursive>
 800a5ee:	bf00      	nop
 800a5f0:	2000c086 	.word	0x2000c086

0800a5f4 <__sinit>:
 800a5f4:	b510      	push	{r4, lr}
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	f7ff fff0 	bl	800a5dc <__sinit_lock_acquire>
 800a5fc:	69a3      	ldr	r3, [r4, #24]
 800a5fe:	b11b      	cbz	r3, 800a608 <__sinit+0x14>
 800a600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a604:	f7ff bff0 	b.w	800a5e8 <__sinit_lock_release>
 800a608:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a60c:	6523      	str	r3, [r4, #80]	; 0x50
 800a60e:	4b13      	ldr	r3, [pc, #76]	; (800a65c <__sinit+0x68>)
 800a610:	4a13      	ldr	r2, [pc, #76]	; (800a660 <__sinit+0x6c>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	62a2      	str	r2, [r4, #40]	; 0x28
 800a616:	42a3      	cmp	r3, r4
 800a618:	bf08      	it	eq
 800a61a:	2301      	moveq	r3, #1
 800a61c:	4620      	mov	r0, r4
 800a61e:	bf08      	it	eq
 800a620:	61a3      	streq	r3, [r4, #24]
 800a622:	f000 f81f 	bl	800a664 <__sfp>
 800a626:	6060      	str	r0, [r4, #4]
 800a628:	4620      	mov	r0, r4
 800a62a:	f000 f81b 	bl	800a664 <__sfp>
 800a62e:	60a0      	str	r0, [r4, #8]
 800a630:	4620      	mov	r0, r4
 800a632:	f000 f817 	bl	800a664 <__sfp>
 800a636:	2200      	movs	r2, #0
 800a638:	2104      	movs	r1, #4
 800a63a:	60e0      	str	r0, [r4, #12]
 800a63c:	6860      	ldr	r0, [r4, #4]
 800a63e:	f7ff ff81 	bl	800a544 <std>
 800a642:	2201      	movs	r2, #1
 800a644:	2109      	movs	r1, #9
 800a646:	68a0      	ldr	r0, [r4, #8]
 800a648:	f7ff ff7c 	bl	800a544 <std>
 800a64c:	2202      	movs	r2, #2
 800a64e:	2112      	movs	r1, #18
 800a650:	68e0      	ldr	r0, [r4, #12]
 800a652:	f7ff ff77 	bl	800a544 <std>
 800a656:	2301      	movs	r3, #1
 800a658:	61a3      	str	r3, [r4, #24]
 800a65a:	e7d1      	b.n	800a600 <__sinit+0xc>
 800a65c:	0800ad0c 	.word	0x0800ad0c
 800a660:	0800a58d 	.word	0x0800a58d

0800a664 <__sfp>:
 800a664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a666:	4607      	mov	r7, r0
 800a668:	f7ff ffac 	bl	800a5c4 <__sfp_lock_acquire>
 800a66c:	4b1e      	ldr	r3, [pc, #120]	; (800a6e8 <__sfp+0x84>)
 800a66e:	681e      	ldr	r6, [r3, #0]
 800a670:	69b3      	ldr	r3, [r6, #24]
 800a672:	b913      	cbnz	r3, 800a67a <__sfp+0x16>
 800a674:	4630      	mov	r0, r6
 800a676:	f7ff ffbd 	bl	800a5f4 <__sinit>
 800a67a:	3648      	adds	r6, #72	; 0x48
 800a67c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a680:	3b01      	subs	r3, #1
 800a682:	d503      	bpl.n	800a68c <__sfp+0x28>
 800a684:	6833      	ldr	r3, [r6, #0]
 800a686:	b30b      	cbz	r3, 800a6cc <__sfp+0x68>
 800a688:	6836      	ldr	r6, [r6, #0]
 800a68a:	e7f7      	b.n	800a67c <__sfp+0x18>
 800a68c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a690:	b9d5      	cbnz	r5, 800a6c8 <__sfp+0x64>
 800a692:	4b16      	ldr	r3, [pc, #88]	; (800a6ec <__sfp+0x88>)
 800a694:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a698:	60e3      	str	r3, [r4, #12]
 800a69a:	6665      	str	r5, [r4, #100]	; 0x64
 800a69c:	f000 f847 	bl	800a72e <__retarget_lock_init_recursive>
 800a6a0:	f7ff ff96 	bl	800a5d0 <__sfp_lock_release>
 800a6a4:	2208      	movs	r2, #8
 800a6a6:	4629      	mov	r1, r5
 800a6a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a6ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a6b0:	6025      	str	r5, [r4, #0]
 800a6b2:	61a5      	str	r5, [r4, #24]
 800a6b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a6b8:	f7fd f860 	bl	800777c <memset>
 800a6bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6c8:	3468      	adds	r4, #104	; 0x68
 800a6ca:	e7d9      	b.n	800a680 <__sfp+0x1c>
 800a6cc:	2104      	movs	r1, #4
 800a6ce:	4638      	mov	r0, r7
 800a6d0:	f7ff ff62 	bl	800a598 <__sfmoreglue>
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	6030      	str	r0, [r6, #0]
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	d1d5      	bne.n	800a688 <__sfp+0x24>
 800a6dc:	f7ff ff78 	bl	800a5d0 <__sfp_lock_release>
 800a6e0:	230c      	movs	r3, #12
 800a6e2:	603b      	str	r3, [r7, #0]
 800a6e4:	e7ee      	b.n	800a6c4 <__sfp+0x60>
 800a6e6:	bf00      	nop
 800a6e8:	0800ad0c 	.word	0x0800ad0c
 800a6ec:	ffff0001 	.word	0xffff0001

0800a6f0 <_fwalk_reent>:
 800a6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6f4:	4606      	mov	r6, r0
 800a6f6:	4688      	mov	r8, r1
 800a6f8:	2700      	movs	r7, #0
 800a6fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a6fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a702:	f1b9 0901 	subs.w	r9, r9, #1
 800a706:	d505      	bpl.n	800a714 <_fwalk_reent+0x24>
 800a708:	6824      	ldr	r4, [r4, #0]
 800a70a:	2c00      	cmp	r4, #0
 800a70c:	d1f7      	bne.n	800a6fe <_fwalk_reent+0xe>
 800a70e:	4638      	mov	r0, r7
 800a710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a714:	89ab      	ldrh	r3, [r5, #12]
 800a716:	2b01      	cmp	r3, #1
 800a718:	d907      	bls.n	800a72a <_fwalk_reent+0x3a>
 800a71a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a71e:	3301      	adds	r3, #1
 800a720:	d003      	beq.n	800a72a <_fwalk_reent+0x3a>
 800a722:	4629      	mov	r1, r5
 800a724:	4630      	mov	r0, r6
 800a726:	47c0      	blx	r8
 800a728:	4307      	orrs	r7, r0
 800a72a:	3568      	adds	r5, #104	; 0x68
 800a72c:	e7e9      	b.n	800a702 <_fwalk_reent+0x12>

0800a72e <__retarget_lock_init_recursive>:
 800a72e:	4770      	bx	lr

0800a730 <__retarget_lock_acquire_recursive>:
 800a730:	4770      	bx	lr

0800a732 <__retarget_lock_release_recursive>:
 800a732:	4770      	bx	lr

0800a734 <__swhatbuf_r>:
 800a734:	b570      	push	{r4, r5, r6, lr}
 800a736:	460e      	mov	r6, r1
 800a738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a73c:	4614      	mov	r4, r2
 800a73e:	2900      	cmp	r1, #0
 800a740:	461d      	mov	r5, r3
 800a742:	b096      	sub	sp, #88	; 0x58
 800a744:	da08      	bge.n	800a758 <__swhatbuf_r+0x24>
 800a746:	2200      	movs	r2, #0
 800a748:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a74c:	602a      	str	r2, [r5, #0]
 800a74e:	061a      	lsls	r2, r3, #24
 800a750:	d410      	bmi.n	800a774 <__swhatbuf_r+0x40>
 800a752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a756:	e00e      	b.n	800a776 <__swhatbuf_r+0x42>
 800a758:	466a      	mov	r2, sp
 800a75a:	f000 f95f 	bl	800aa1c <_fstat_r>
 800a75e:	2800      	cmp	r0, #0
 800a760:	dbf1      	blt.n	800a746 <__swhatbuf_r+0x12>
 800a762:	9a01      	ldr	r2, [sp, #4]
 800a764:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a768:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a76c:	425a      	negs	r2, r3
 800a76e:	415a      	adcs	r2, r3
 800a770:	602a      	str	r2, [r5, #0]
 800a772:	e7ee      	b.n	800a752 <__swhatbuf_r+0x1e>
 800a774:	2340      	movs	r3, #64	; 0x40
 800a776:	2000      	movs	r0, #0
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	b016      	add	sp, #88	; 0x58
 800a77c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a780 <__smakebuf_r>:
 800a780:	898b      	ldrh	r3, [r1, #12]
 800a782:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a784:	079d      	lsls	r5, r3, #30
 800a786:	4606      	mov	r6, r0
 800a788:	460c      	mov	r4, r1
 800a78a:	d507      	bpl.n	800a79c <__smakebuf_r+0x1c>
 800a78c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a790:	6023      	str	r3, [r4, #0]
 800a792:	6123      	str	r3, [r4, #16]
 800a794:	2301      	movs	r3, #1
 800a796:	6163      	str	r3, [r4, #20]
 800a798:	b002      	add	sp, #8
 800a79a:	bd70      	pop	{r4, r5, r6, pc}
 800a79c:	466a      	mov	r2, sp
 800a79e:	ab01      	add	r3, sp, #4
 800a7a0:	f7ff ffc8 	bl	800a734 <__swhatbuf_r>
 800a7a4:	9900      	ldr	r1, [sp, #0]
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	f7ff f84b 	bl	8009844 <_malloc_r>
 800a7ae:	b948      	cbnz	r0, 800a7c4 <__smakebuf_r+0x44>
 800a7b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7b4:	059a      	lsls	r2, r3, #22
 800a7b6:	d4ef      	bmi.n	800a798 <__smakebuf_r+0x18>
 800a7b8:	f023 0303 	bic.w	r3, r3, #3
 800a7bc:	f043 0302 	orr.w	r3, r3, #2
 800a7c0:	81a3      	strh	r3, [r4, #12]
 800a7c2:	e7e3      	b.n	800a78c <__smakebuf_r+0xc>
 800a7c4:	4b0d      	ldr	r3, [pc, #52]	; (800a7fc <__smakebuf_r+0x7c>)
 800a7c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7c8:	89a3      	ldrh	r3, [r4, #12]
 800a7ca:	6020      	str	r0, [r4, #0]
 800a7cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7d0:	81a3      	strh	r3, [r4, #12]
 800a7d2:	9b00      	ldr	r3, [sp, #0]
 800a7d4:	6120      	str	r0, [r4, #16]
 800a7d6:	6163      	str	r3, [r4, #20]
 800a7d8:	9b01      	ldr	r3, [sp, #4]
 800a7da:	b15b      	cbz	r3, 800a7f4 <__smakebuf_r+0x74>
 800a7dc:	4630      	mov	r0, r6
 800a7de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7e2:	f000 f92d 	bl	800aa40 <_isatty_r>
 800a7e6:	b128      	cbz	r0, 800a7f4 <__smakebuf_r+0x74>
 800a7e8:	89a3      	ldrh	r3, [r4, #12]
 800a7ea:	f023 0303 	bic.w	r3, r3, #3
 800a7ee:	f043 0301 	orr.w	r3, r3, #1
 800a7f2:	81a3      	strh	r3, [r4, #12]
 800a7f4:	89a0      	ldrh	r0, [r4, #12]
 800a7f6:	4305      	orrs	r5, r0
 800a7f8:	81a5      	strh	r5, [r4, #12]
 800a7fa:	e7cd      	b.n	800a798 <__smakebuf_r+0x18>
 800a7fc:	0800a58d 	.word	0x0800a58d

0800a800 <memchr>:
 800a800:	4603      	mov	r3, r0
 800a802:	b510      	push	{r4, lr}
 800a804:	b2c9      	uxtb	r1, r1
 800a806:	4402      	add	r2, r0
 800a808:	4293      	cmp	r3, r2
 800a80a:	4618      	mov	r0, r3
 800a80c:	d101      	bne.n	800a812 <memchr+0x12>
 800a80e:	2000      	movs	r0, #0
 800a810:	e003      	b.n	800a81a <memchr+0x1a>
 800a812:	7804      	ldrb	r4, [r0, #0]
 800a814:	3301      	adds	r3, #1
 800a816:	428c      	cmp	r4, r1
 800a818:	d1f6      	bne.n	800a808 <memchr+0x8>
 800a81a:	bd10      	pop	{r4, pc}

0800a81c <memmove>:
 800a81c:	4288      	cmp	r0, r1
 800a81e:	b510      	push	{r4, lr}
 800a820:	eb01 0402 	add.w	r4, r1, r2
 800a824:	d902      	bls.n	800a82c <memmove+0x10>
 800a826:	4284      	cmp	r4, r0
 800a828:	4623      	mov	r3, r4
 800a82a:	d807      	bhi.n	800a83c <memmove+0x20>
 800a82c:	1e43      	subs	r3, r0, #1
 800a82e:	42a1      	cmp	r1, r4
 800a830:	d008      	beq.n	800a844 <memmove+0x28>
 800a832:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a836:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a83a:	e7f8      	b.n	800a82e <memmove+0x12>
 800a83c:	4601      	mov	r1, r0
 800a83e:	4402      	add	r2, r0
 800a840:	428a      	cmp	r2, r1
 800a842:	d100      	bne.n	800a846 <memmove+0x2a>
 800a844:	bd10      	pop	{r4, pc}
 800a846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a84a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a84e:	e7f7      	b.n	800a840 <memmove+0x24>

0800a850 <__malloc_lock>:
 800a850:	4801      	ldr	r0, [pc, #4]	; (800a858 <__malloc_lock+0x8>)
 800a852:	f7ff bf6d 	b.w	800a730 <__retarget_lock_acquire_recursive>
 800a856:	bf00      	nop
 800a858:	2000c084 	.word	0x2000c084

0800a85c <__malloc_unlock>:
 800a85c:	4801      	ldr	r0, [pc, #4]	; (800a864 <__malloc_unlock+0x8>)
 800a85e:	f7ff bf68 	b.w	800a732 <__retarget_lock_release_recursive>
 800a862:	bf00      	nop
 800a864:	2000c084 	.word	0x2000c084

0800a868 <_realloc_r>:
 800a868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a86c:	4680      	mov	r8, r0
 800a86e:	4614      	mov	r4, r2
 800a870:	460e      	mov	r6, r1
 800a872:	b921      	cbnz	r1, 800a87e <_realloc_r+0x16>
 800a874:	4611      	mov	r1, r2
 800a876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a87a:	f7fe bfe3 	b.w	8009844 <_malloc_r>
 800a87e:	b92a      	cbnz	r2, 800a88c <_realloc_r+0x24>
 800a880:	f7fe ff78 	bl	8009774 <_free_r>
 800a884:	4625      	mov	r5, r4
 800a886:	4628      	mov	r0, r5
 800a888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a88c:	f000 f8fa 	bl	800aa84 <_malloc_usable_size_r>
 800a890:	4284      	cmp	r4, r0
 800a892:	4607      	mov	r7, r0
 800a894:	d802      	bhi.n	800a89c <_realloc_r+0x34>
 800a896:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a89a:	d812      	bhi.n	800a8c2 <_realloc_r+0x5a>
 800a89c:	4621      	mov	r1, r4
 800a89e:	4640      	mov	r0, r8
 800a8a0:	f7fe ffd0 	bl	8009844 <_malloc_r>
 800a8a4:	4605      	mov	r5, r0
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	d0ed      	beq.n	800a886 <_realloc_r+0x1e>
 800a8aa:	42bc      	cmp	r4, r7
 800a8ac:	4622      	mov	r2, r4
 800a8ae:	4631      	mov	r1, r6
 800a8b0:	bf28      	it	cs
 800a8b2:	463a      	movcs	r2, r7
 800a8b4:	f7fc ff54 	bl	8007760 <memcpy>
 800a8b8:	4631      	mov	r1, r6
 800a8ba:	4640      	mov	r0, r8
 800a8bc:	f7fe ff5a 	bl	8009774 <_free_r>
 800a8c0:	e7e1      	b.n	800a886 <_realloc_r+0x1e>
 800a8c2:	4635      	mov	r5, r6
 800a8c4:	e7df      	b.n	800a886 <_realloc_r+0x1e>

0800a8c6 <_raise_r>:
 800a8c6:	291f      	cmp	r1, #31
 800a8c8:	b538      	push	{r3, r4, r5, lr}
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	460d      	mov	r5, r1
 800a8ce:	d904      	bls.n	800a8da <_raise_r+0x14>
 800a8d0:	2316      	movs	r3, #22
 800a8d2:	6003      	str	r3, [r0, #0]
 800a8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d8:	bd38      	pop	{r3, r4, r5, pc}
 800a8da:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a8dc:	b112      	cbz	r2, 800a8e4 <_raise_r+0x1e>
 800a8de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8e2:	b94b      	cbnz	r3, 800a8f8 <_raise_r+0x32>
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f000 f831 	bl	800a94c <_getpid_r>
 800a8ea:	462a      	mov	r2, r5
 800a8ec:	4601      	mov	r1, r0
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8f4:	f000 b818 	b.w	800a928 <_kill_r>
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d00a      	beq.n	800a912 <_raise_r+0x4c>
 800a8fc:	1c59      	adds	r1, r3, #1
 800a8fe:	d103      	bne.n	800a908 <_raise_r+0x42>
 800a900:	2316      	movs	r3, #22
 800a902:	6003      	str	r3, [r0, #0]
 800a904:	2001      	movs	r0, #1
 800a906:	e7e7      	b.n	800a8d8 <_raise_r+0x12>
 800a908:	2400      	movs	r4, #0
 800a90a:	4628      	mov	r0, r5
 800a90c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a910:	4798      	blx	r3
 800a912:	2000      	movs	r0, #0
 800a914:	e7e0      	b.n	800a8d8 <_raise_r+0x12>
	...

0800a918 <raise>:
 800a918:	4b02      	ldr	r3, [pc, #8]	; (800a924 <raise+0xc>)
 800a91a:	4601      	mov	r1, r0
 800a91c:	6818      	ldr	r0, [r3, #0]
 800a91e:	f7ff bfd2 	b.w	800a8c6 <_raise_r>
 800a922:	bf00      	nop
 800a924:	20000024 	.word	0x20000024

0800a928 <_kill_r>:
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	2300      	movs	r3, #0
 800a92c:	4d06      	ldr	r5, [pc, #24]	; (800a948 <_kill_r+0x20>)
 800a92e:	4604      	mov	r4, r0
 800a930:	4608      	mov	r0, r1
 800a932:	4611      	mov	r1, r2
 800a934:	602b      	str	r3, [r5, #0]
 800a936:	f7f8 f9e2 	bl	8002cfe <_kill>
 800a93a:	1c43      	adds	r3, r0, #1
 800a93c:	d102      	bne.n	800a944 <_kill_r+0x1c>
 800a93e:	682b      	ldr	r3, [r5, #0]
 800a940:	b103      	cbz	r3, 800a944 <_kill_r+0x1c>
 800a942:	6023      	str	r3, [r4, #0]
 800a944:	bd38      	pop	{r3, r4, r5, pc}
 800a946:	bf00      	nop
 800a948:	2000c088 	.word	0x2000c088

0800a94c <_getpid_r>:
 800a94c:	f7f8 b9d0 	b.w	8002cf0 <_getpid>

0800a950 <__sread>:
 800a950:	b510      	push	{r4, lr}
 800a952:	460c      	mov	r4, r1
 800a954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a958:	f000 f89c 	bl	800aa94 <_read_r>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	bfab      	itete	ge
 800a960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a962:	89a3      	ldrhlt	r3, [r4, #12]
 800a964:	181b      	addge	r3, r3, r0
 800a966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a96a:	bfac      	ite	ge
 800a96c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a96e:	81a3      	strhlt	r3, [r4, #12]
 800a970:	bd10      	pop	{r4, pc}

0800a972 <__swrite>:
 800a972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a976:	461f      	mov	r7, r3
 800a978:	898b      	ldrh	r3, [r1, #12]
 800a97a:	4605      	mov	r5, r0
 800a97c:	05db      	lsls	r3, r3, #23
 800a97e:	460c      	mov	r4, r1
 800a980:	4616      	mov	r6, r2
 800a982:	d505      	bpl.n	800a990 <__swrite+0x1e>
 800a984:	2302      	movs	r3, #2
 800a986:	2200      	movs	r2, #0
 800a988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a98c:	f000 f868 	bl	800aa60 <_lseek_r>
 800a990:	89a3      	ldrh	r3, [r4, #12]
 800a992:	4632      	mov	r2, r6
 800a994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a998:	81a3      	strh	r3, [r4, #12]
 800a99a:	4628      	mov	r0, r5
 800a99c:	463b      	mov	r3, r7
 800a99e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a6:	f000 b817 	b.w	800a9d8 <_write_r>

0800a9aa <__sseek>:
 800a9aa:	b510      	push	{r4, lr}
 800a9ac:	460c      	mov	r4, r1
 800a9ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b2:	f000 f855 	bl	800aa60 <_lseek_r>
 800a9b6:	1c43      	adds	r3, r0, #1
 800a9b8:	89a3      	ldrh	r3, [r4, #12]
 800a9ba:	bf15      	itete	ne
 800a9bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9c6:	81a3      	strheq	r3, [r4, #12]
 800a9c8:	bf18      	it	ne
 800a9ca:	81a3      	strhne	r3, [r4, #12]
 800a9cc:	bd10      	pop	{r4, pc}

0800a9ce <__sclose>:
 800a9ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d2:	f000 b813 	b.w	800a9fc <_close_r>
	...

0800a9d8 <_write_r>:
 800a9d8:	b538      	push	{r3, r4, r5, lr}
 800a9da:	4604      	mov	r4, r0
 800a9dc:	4608      	mov	r0, r1
 800a9de:	4611      	mov	r1, r2
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	4d05      	ldr	r5, [pc, #20]	; (800a9f8 <_write_r+0x20>)
 800a9e4:	602a      	str	r2, [r5, #0]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	f7f8 f9c0 	bl	8002d6c <_write>
 800a9ec:	1c43      	adds	r3, r0, #1
 800a9ee:	d102      	bne.n	800a9f6 <_write_r+0x1e>
 800a9f0:	682b      	ldr	r3, [r5, #0]
 800a9f2:	b103      	cbz	r3, 800a9f6 <_write_r+0x1e>
 800a9f4:	6023      	str	r3, [r4, #0]
 800a9f6:	bd38      	pop	{r3, r4, r5, pc}
 800a9f8:	2000c088 	.word	0x2000c088

0800a9fc <_close_r>:
 800a9fc:	b538      	push	{r3, r4, r5, lr}
 800a9fe:	2300      	movs	r3, #0
 800aa00:	4d05      	ldr	r5, [pc, #20]	; (800aa18 <_close_r+0x1c>)
 800aa02:	4604      	mov	r4, r0
 800aa04:	4608      	mov	r0, r1
 800aa06:	602b      	str	r3, [r5, #0]
 800aa08:	f7f8 f9cc 	bl	8002da4 <_close>
 800aa0c:	1c43      	adds	r3, r0, #1
 800aa0e:	d102      	bne.n	800aa16 <_close_r+0x1a>
 800aa10:	682b      	ldr	r3, [r5, #0]
 800aa12:	b103      	cbz	r3, 800aa16 <_close_r+0x1a>
 800aa14:	6023      	str	r3, [r4, #0]
 800aa16:	bd38      	pop	{r3, r4, r5, pc}
 800aa18:	2000c088 	.word	0x2000c088

0800aa1c <_fstat_r>:
 800aa1c:	b538      	push	{r3, r4, r5, lr}
 800aa1e:	2300      	movs	r3, #0
 800aa20:	4d06      	ldr	r5, [pc, #24]	; (800aa3c <_fstat_r+0x20>)
 800aa22:	4604      	mov	r4, r0
 800aa24:	4608      	mov	r0, r1
 800aa26:	4611      	mov	r1, r2
 800aa28:	602b      	str	r3, [r5, #0]
 800aa2a:	f7f8 f9c6 	bl	8002dba <_fstat>
 800aa2e:	1c43      	adds	r3, r0, #1
 800aa30:	d102      	bne.n	800aa38 <_fstat_r+0x1c>
 800aa32:	682b      	ldr	r3, [r5, #0]
 800aa34:	b103      	cbz	r3, 800aa38 <_fstat_r+0x1c>
 800aa36:	6023      	str	r3, [r4, #0]
 800aa38:	bd38      	pop	{r3, r4, r5, pc}
 800aa3a:	bf00      	nop
 800aa3c:	2000c088 	.word	0x2000c088

0800aa40 <_isatty_r>:
 800aa40:	b538      	push	{r3, r4, r5, lr}
 800aa42:	2300      	movs	r3, #0
 800aa44:	4d05      	ldr	r5, [pc, #20]	; (800aa5c <_isatty_r+0x1c>)
 800aa46:	4604      	mov	r4, r0
 800aa48:	4608      	mov	r0, r1
 800aa4a:	602b      	str	r3, [r5, #0]
 800aa4c:	f7f8 f9c4 	bl	8002dd8 <_isatty>
 800aa50:	1c43      	adds	r3, r0, #1
 800aa52:	d102      	bne.n	800aa5a <_isatty_r+0x1a>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	b103      	cbz	r3, 800aa5a <_isatty_r+0x1a>
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	bd38      	pop	{r3, r4, r5, pc}
 800aa5c:	2000c088 	.word	0x2000c088

0800aa60 <_lseek_r>:
 800aa60:	b538      	push	{r3, r4, r5, lr}
 800aa62:	4604      	mov	r4, r0
 800aa64:	4608      	mov	r0, r1
 800aa66:	4611      	mov	r1, r2
 800aa68:	2200      	movs	r2, #0
 800aa6a:	4d05      	ldr	r5, [pc, #20]	; (800aa80 <_lseek_r+0x20>)
 800aa6c:	602a      	str	r2, [r5, #0]
 800aa6e:	461a      	mov	r2, r3
 800aa70:	f7f8 f9bc 	bl	8002dec <_lseek>
 800aa74:	1c43      	adds	r3, r0, #1
 800aa76:	d102      	bne.n	800aa7e <_lseek_r+0x1e>
 800aa78:	682b      	ldr	r3, [r5, #0]
 800aa7a:	b103      	cbz	r3, 800aa7e <_lseek_r+0x1e>
 800aa7c:	6023      	str	r3, [r4, #0]
 800aa7e:	bd38      	pop	{r3, r4, r5, pc}
 800aa80:	2000c088 	.word	0x2000c088

0800aa84 <_malloc_usable_size_r>:
 800aa84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa88:	1f18      	subs	r0, r3, #4
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	bfbc      	itt	lt
 800aa8e:	580b      	ldrlt	r3, [r1, r0]
 800aa90:	18c0      	addlt	r0, r0, r3
 800aa92:	4770      	bx	lr

0800aa94 <_read_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	4604      	mov	r4, r0
 800aa98:	4608      	mov	r0, r1
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	4d05      	ldr	r5, [pc, #20]	; (800aab4 <_read_r+0x20>)
 800aaa0:	602a      	str	r2, [r5, #0]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	f7f8 f945 	bl	8002d32 <_read>
 800aaa8:	1c43      	adds	r3, r0, #1
 800aaaa:	d102      	bne.n	800aab2 <_read_r+0x1e>
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	b103      	cbz	r3, 800aab2 <_read_r+0x1e>
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	bd38      	pop	{r3, r4, r5, pc}
 800aab4:	2000c088 	.word	0x2000c088

0800aab8 <_init>:
 800aab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaba:	bf00      	nop
 800aabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aabe:	bc08      	pop	{r3}
 800aac0:	469e      	mov	lr, r3
 800aac2:	4770      	bx	lr

0800aac4 <_fini>:
 800aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac6:	bf00      	nop
 800aac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaca:	bc08      	pop	{r3}
 800aacc:	469e      	mov	lr, r3
 800aace:	4770      	bx	lr
