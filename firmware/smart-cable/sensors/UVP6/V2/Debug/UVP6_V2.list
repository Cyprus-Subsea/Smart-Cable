
UVP6_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3d8  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  0800a5c8  0800a5c8  0001a5c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac70  0800ac70  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac70  0800ac70  0001ac70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac78  0800ac78  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac78  0800ac78  0001ac78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac7c  0800ac7c  0001ac7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800ac80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aaf8  200001f8  0800ae74  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000acf0  0800ae74  0002acf0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aef4  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004048  00000000  00000000  0003b111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  0003f160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  00040608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000234fa  00000000  00000000  000418f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017033  00000000  00000000  00064df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5286  00000000  00000000  0007be25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001410ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a6c  00000000  00000000  00141100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001f8 	.word	0x200001f8
 800020c:	00000000 	.word	0x00000000
 8000210:	0800a5b0 	.word	0x0800a5b0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001fc 	.word	0x200001fc
 800022c:	0800a5b0 	.word	0x0800a5b0

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	; 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__gesf2>:
 8000e14:	f04f 3cff 	mov.w	ip, #4294967295
 8000e18:	e006      	b.n	8000e28 <__cmpsf2+0x4>
 8000e1a:	bf00      	nop

08000e1c <__lesf2>:
 8000e1c:	f04f 0c01 	mov.w	ip, #1
 8000e20:	e002      	b.n	8000e28 <__cmpsf2+0x4>
 8000e22:	bf00      	nop

08000e24 <__cmpsf2>:
 8000e24:	f04f 0c01 	mov.w	ip, #1
 8000e28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e2c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e38:	bf18      	it	ne
 8000e3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e3e:	d011      	beq.n	8000e64 <__cmpsf2+0x40>
 8000e40:	b001      	add	sp, #4
 8000e42:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e46:	bf18      	it	ne
 8000e48:	ea90 0f01 	teqne	r0, r1
 8000e4c:	bf58      	it	pl
 8000e4e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e52:	bf88      	it	hi
 8000e54:	17c8      	asrhi	r0, r1, #31
 8000e56:	bf38      	it	cc
 8000e58:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e5c:	bf18      	it	ne
 8000e5e:	f040 0001 	orrne.w	r0, r0, #1
 8000e62:	4770      	bx	lr
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	d102      	bne.n	8000e70 <__cmpsf2+0x4c>
 8000e6a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e6e:	d105      	bne.n	8000e7c <__cmpsf2+0x58>
 8000e70:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e74:	d1e4      	bne.n	8000e40 <__cmpsf2+0x1c>
 8000e76:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e7a:	d0e1      	beq.n	8000e40 <__cmpsf2+0x1c>
 8000e7c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <__aeabi_cfrcmple>:
 8000e84:	4684      	mov	ip, r0
 8000e86:	4608      	mov	r0, r1
 8000e88:	4661      	mov	r1, ip
 8000e8a:	e7ff      	b.n	8000e8c <__aeabi_cfcmpeq>

08000e8c <__aeabi_cfcmpeq>:
 8000e8c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e8e:	f7ff ffc9 	bl	8000e24 <__cmpsf2>
 8000e92:	2800      	cmp	r0, #0
 8000e94:	bf48      	it	mi
 8000e96:	f110 0f00 	cmnmi.w	r0, #0
 8000e9a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e9c <__aeabi_fcmpeq>:
 8000e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea0:	f7ff fff4 	bl	8000e8c <__aeabi_cfcmpeq>
 8000ea4:	bf0c      	ite	eq
 8000ea6:	2001      	moveq	r0, #1
 8000ea8:	2000      	movne	r0, #0
 8000eaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eae:	bf00      	nop

08000eb0 <__aeabi_fcmplt>:
 8000eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb4:	f7ff ffea 	bl	8000e8c <__aeabi_cfcmpeq>
 8000eb8:	bf34      	ite	cc
 8000eba:	2001      	movcc	r0, #1
 8000ebc:	2000      	movcs	r0, #0
 8000ebe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_fcmple>:
 8000ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec8:	f7ff ffe0 	bl	8000e8c <__aeabi_cfcmpeq>
 8000ecc:	bf94      	ite	ls
 8000ece:	2001      	movls	r0, #1
 8000ed0:	2000      	movhi	r0, #0
 8000ed2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_fcmpge>:
 8000ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000edc:	f7ff ffd2 	bl	8000e84 <__aeabi_cfrcmple>
 8000ee0:	bf94      	ite	ls
 8000ee2:	2001      	movls	r0, #1
 8000ee4:	2000      	movhi	r0, #0
 8000ee6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eea:	bf00      	nop

08000eec <__aeabi_fcmpgt>:
 8000eec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef0:	f7ff ffc8 	bl	8000e84 <__aeabi_cfrcmple>
 8000ef4:	bf34      	ite	cc
 8000ef6:	2001      	movcc	r0, #1
 8000ef8:	2000      	movcs	r0, #0
 8000efa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000efe:	bf00      	nop

08000f00 <__aeabi_fcmpun>:
 8000f00:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f0c:	d102      	bne.n	8000f14 <__aeabi_fcmpun+0x14>
 8000f0e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f12:	d108      	bne.n	8000f26 <__aeabi_fcmpun+0x26>
 8000f14:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f18:	d102      	bne.n	8000f20 <__aeabi_fcmpun+0x20>
 8000f1a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f1e:	d102      	bne.n	8000f26 <__aeabi_fcmpun+0x26>
 8000f20:	f04f 0000 	mov.w	r0, #0
 8000f24:	4770      	bx	lr
 8000f26:	f04f 0001 	mov.w	r0, #1
 8000f2a:	4770      	bx	lr

08000f2c <__aeabi_uldivmod>:
 8000f2c:	b953      	cbnz	r3, 8000f44 <__aeabi_uldivmod+0x18>
 8000f2e:	b94a      	cbnz	r2, 8000f44 <__aeabi_uldivmod+0x18>
 8000f30:	2900      	cmp	r1, #0
 8000f32:	bf08      	it	eq
 8000f34:	2800      	cmpeq	r0, #0
 8000f36:	bf1c      	itt	ne
 8000f38:	f04f 31ff 	movne.w	r1, #4294967295
 8000f3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000f40:	f000 b9a6 	b.w	8001290 <__aeabi_idiv0>
 8000f44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f4c:	f000 f83e 	bl	8000fcc <__udivmoddi4>
 8000f50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f58:	b004      	add	sp, #16
 8000f5a:	4770      	bx	lr

08000f5c <__aeabi_d2lz>:
 8000f5c:	b538      	push	{r3, r4, r5, lr}
 8000f5e:	460c      	mov	r4, r1
 8000f60:	4605      	mov	r5, r0
 8000f62:	4621      	mov	r1, r4
 8000f64:	4628      	mov	r0, r5
 8000f66:	2200      	movs	r2, #0
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f7ff fd97 	bl	8000a9c <__aeabi_dcmplt>
 8000f6e:	b928      	cbnz	r0, 8000f7c <__aeabi_d2lz+0x20>
 8000f70:	4628      	mov	r0, r5
 8000f72:	4621      	mov	r1, r4
 8000f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f78:	f000 b80a 	b.w	8000f90 <__aeabi_d2ulz>
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000f82:	f000 f805 	bl	8000f90 <__aeabi_d2ulz>
 8000f86:	4240      	negs	r0, r0
 8000f88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f8c:	bd38      	pop	{r3, r4, r5, pc}
 8000f8e:	bf00      	nop

08000f90 <__aeabi_d2ulz>:
 8000f90:	b5d0      	push	{r4, r6, r7, lr}
 8000f92:	2200      	movs	r2, #0
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <__aeabi_d2ulz+0x34>)
 8000f96:	4606      	mov	r6, r0
 8000f98:	460f      	mov	r7, r1
 8000f9a:	f7ff fb0d 	bl	80005b8 <__aeabi_dmul>
 8000f9e:	f7ff fdbb 	bl	8000b18 <__aeabi_d2uiz>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	f7ff fa8e 	bl	80004c4 <__aeabi_ui2d>
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <__aeabi_d2ulz+0x38>)
 8000fac:	f7ff fb04 	bl	80005b8 <__aeabi_dmul>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	4639      	mov	r1, r7
 8000fb8:	f7ff f946 	bl	8000248 <__aeabi_dsub>
 8000fbc:	f7ff fdac 	bl	8000b18 <__aeabi_d2uiz>
 8000fc0:	4621      	mov	r1, r4
 8000fc2:	bdd0      	pop	{r4, r6, r7, pc}
 8000fc4:	3df00000 	.word	0x3df00000
 8000fc8:	41f00000 	.word	0x41f00000

08000fcc <__udivmoddi4>:
 8000fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fd0:	9e08      	ldr	r6, [sp, #32]
 8000fd2:	460d      	mov	r5, r1
 8000fd4:	4604      	mov	r4, r0
 8000fd6:	468e      	mov	lr, r1
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f040 8083 	bne.w	80010e4 <__udivmoddi4+0x118>
 8000fde:	428a      	cmp	r2, r1
 8000fe0:	4617      	mov	r7, r2
 8000fe2:	d947      	bls.n	8001074 <__udivmoddi4+0xa8>
 8000fe4:	fab2 f382 	clz	r3, r2
 8000fe8:	b14b      	cbz	r3, 8000ffe <__udivmoddi4+0x32>
 8000fea:	f1c3 0120 	rsb	r1, r3, #32
 8000fee:	fa05 fe03 	lsl.w	lr, r5, r3
 8000ff2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ff6:	409f      	lsls	r7, r3
 8000ff8:	ea41 0e0e 	orr.w	lr, r1, lr
 8000ffc:	409c      	lsls	r4, r3
 8000ffe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001002:	fbbe fcf8 	udiv	ip, lr, r8
 8001006:	fa1f f987 	uxth.w	r9, r7
 800100a:	fb08 e21c 	mls	r2, r8, ip, lr
 800100e:	fb0c f009 	mul.w	r0, ip, r9
 8001012:	0c21      	lsrs	r1, r4, #16
 8001014:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001018:	4290      	cmp	r0, r2
 800101a:	d90a      	bls.n	8001032 <__udivmoddi4+0x66>
 800101c:	18ba      	adds	r2, r7, r2
 800101e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001022:	f080 8118 	bcs.w	8001256 <__udivmoddi4+0x28a>
 8001026:	4290      	cmp	r0, r2
 8001028:	f240 8115 	bls.w	8001256 <__udivmoddi4+0x28a>
 800102c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001030:	443a      	add	r2, r7
 8001032:	1a12      	subs	r2, r2, r0
 8001034:	fbb2 f0f8 	udiv	r0, r2, r8
 8001038:	fb08 2210 	mls	r2, r8, r0, r2
 800103c:	fb00 f109 	mul.w	r1, r0, r9
 8001040:	b2a4      	uxth	r4, r4
 8001042:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001046:	42a1      	cmp	r1, r4
 8001048:	d909      	bls.n	800105e <__udivmoddi4+0x92>
 800104a:	193c      	adds	r4, r7, r4
 800104c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001050:	f080 8103 	bcs.w	800125a <__udivmoddi4+0x28e>
 8001054:	42a1      	cmp	r1, r4
 8001056:	f240 8100 	bls.w	800125a <__udivmoddi4+0x28e>
 800105a:	3802      	subs	r0, #2
 800105c:	443c      	add	r4, r7
 800105e:	1a64      	subs	r4, r4, r1
 8001060:	2100      	movs	r1, #0
 8001062:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001066:	b11e      	cbz	r6, 8001070 <__udivmoddi4+0xa4>
 8001068:	2200      	movs	r2, #0
 800106a:	40dc      	lsrs	r4, r3
 800106c:	e9c6 4200 	strd	r4, r2, [r6]
 8001070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001074:	b902      	cbnz	r2, 8001078 <__udivmoddi4+0xac>
 8001076:	deff      	udf	#255	; 0xff
 8001078:	fab2 f382 	clz	r3, r2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d14f      	bne.n	8001120 <__udivmoddi4+0x154>
 8001080:	1a8d      	subs	r5, r1, r2
 8001082:	2101      	movs	r1, #1
 8001084:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001088:	fa1f f882 	uxth.w	r8, r2
 800108c:	fbb5 fcfe 	udiv	ip, r5, lr
 8001090:	fb0e 551c 	mls	r5, lr, ip, r5
 8001094:	fb08 f00c 	mul.w	r0, r8, ip
 8001098:	0c22      	lsrs	r2, r4, #16
 800109a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800109e:	42a8      	cmp	r0, r5
 80010a0:	d907      	bls.n	80010b2 <__udivmoddi4+0xe6>
 80010a2:	197d      	adds	r5, r7, r5
 80010a4:	f10c 32ff 	add.w	r2, ip, #4294967295
 80010a8:	d202      	bcs.n	80010b0 <__udivmoddi4+0xe4>
 80010aa:	42a8      	cmp	r0, r5
 80010ac:	f200 80e9 	bhi.w	8001282 <__udivmoddi4+0x2b6>
 80010b0:	4694      	mov	ip, r2
 80010b2:	1a2d      	subs	r5, r5, r0
 80010b4:	fbb5 f0fe 	udiv	r0, r5, lr
 80010b8:	fb0e 5510 	mls	r5, lr, r0, r5
 80010bc:	fb08 f800 	mul.w	r8, r8, r0
 80010c0:	b2a4      	uxth	r4, r4
 80010c2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80010c6:	45a0      	cmp	r8, r4
 80010c8:	d907      	bls.n	80010da <__udivmoddi4+0x10e>
 80010ca:	193c      	adds	r4, r7, r4
 80010cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80010d0:	d202      	bcs.n	80010d8 <__udivmoddi4+0x10c>
 80010d2:	45a0      	cmp	r8, r4
 80010d4:	f200 80d9 	bhi.w	800128a <__udivmoddi4+0x2be>
 80010d8:	4610      	mov	r0, r2
 80010da:	eba4 0408 	sub.w	r4, r4, r8
 80010de:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010e2:	e7c0      	b.n	8001066 <__udivmoddi4+0x9a>
 80010e4:	428b      	cmp	r3, r1
 80010e6:	d908      	bls.n	80010fa <__udivmoddi4+0x12e>
 80010e8:	2e00      	cmp	r6, #0
 80010ea:	f000 80b1 	beq.w	8001250 <__udivmoddi4+0x284>
 80010ee:	2100      	movs	r1, #0
 80010f0:	e9c6 0500 	strd	r0, r5, [r6]
 80010f4:	4608      	mov	r0, r1
 80010f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010fa:	fab3 f183 	clz	r1, r3
 80010fe:	2900      	cmp	r1, #0
 8001100:	d14b      	bne.n	800119a <__udivmoddi4+0x1ce>
 8001102:	42ab      	cmp	r3, r5
 8001104:	d302      	bcc.n	800110c <__udivmoddi4+0x140>
 8001106:	4282      	cmp	r2, r0
 8001108:	f200 80b9 	bhi.w	800127e <__udivmoddi4+0x2b2>
 800110c:	1a84      	subs	r4, r0, r2
 800110e:	eb65 0303 	sbc.w	r3, r5, r3
 8001112:	2001      	movs	r0, #1
 8001114:	469e      	mov	lr, r3
 8001116:	2e00      	cmp	r6, #0
 8001118:	d0aa      	beq.n	8001070 <__udivmoddi4+0xa4>
 800111a:	e9c6 4e00 	strd	r4, lr, [r6]
 800111e:	e7a7      	b.n	8001070 <__udivmoddi4+0xa4>
 8001120:	409f      	lsls	r7, r3
 8001122:	f1c3 0220 	rsb	r2, r3, #32
 8001126:	40d1      	lsrs	r1, r2
 8001128:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800112c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001130:	fa1f f887 	uxth.w	r8, r7
 8001134:	fb0e 1110 	mls	r1, lr, r0, r1
 8001138:	fa24 f202 	lsr.w	r2, r4, r2
 800113c:	409d      	lsls	r5, r3
 800113e:	fb00 fc08 	mul.w	ip, r0, r8
 8001142:	432a      	orrs	r2, r5
 8001144:	0c15      	lsrs	r5, r2, #16
 8001146:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800114a:	45ac      	cmp	ip, r5
 800114c:	fa04 f403 	lsl.w	r4, r4, r3
 8001150:	d909      	bls.n	8001166 <__udivmoddi4+0x19a>
 8001152:	197d      	adds	r5, r7, r5
 8001154:	f100 31ff 	add.w	r1, r0, #4294967295
 8001158:	f080 808f 	bcs.w	800127a <__udivmoddi4+0x2ae>
 800115c:	45ac      	cmp	ip, r5
 800115e:	f240 808c 	bls.w	800127a <__udivmoddi4+0x2ae>
 8001162:	3802      	subs	r0, #2
 8001164:	443d      	add	r5, r7
 8001166:	eba5 050c 	sub.w	r5, r5, ip
 800116a:	fbb5 f1fe 	udiv	r1, r5, lr
 800116e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001172:	fb01 f908 	mul.w	r9, r1, r8
 8001176:	b295      	uxth	r5, r2
 8001178:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800117c:	45a9      	cmp	r9, r5
 800117e:	d907      	bls.n	8001190 <__udivmoddi4+0x1c4>
 8001180:	197d      	adds	r5, r7, r5
 8001182:	f101 32ff 	add.w	r2, r1, #4294967295
 8001186:	d274      	bcs.n	8001272 <__udivmoddi4+0x2a6>
 8001188:	45a9      	cmp	r9, r5
 800118a:	d972      	bls.n	8001272 <__udivmoddi4+0x2a6>
 800118c:	3902      	subs	r1, #2
 800118e:	443d      	add	r5, r7
 8001190:	eba5 0509 	sub.w	r5, r5, r9
 8001194:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001198:	e778      	b.n	800108c <__udivmoddi4+0xc0>
 800119a:	f1c1 0720 	rsb	r7, r1, #32
 800119e:	408b      	lsls	r3, r1
 80011a0:	fa22 fc07 	lsr.w	ip, r2, r7
 80011a4:	ea4c 0c03 	orr.w	ip, ip, r3
 80011a8:	fa25 f407 	lsr.w	r4, r5, r7
 80011ac:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80011b0:	fbb4 f9fe 	udiv	r9, r4, lr
 80011b4:	fa1f f88c 	uxth.w	r8, ip
 80011b8:	fb0e 4419 	mls	r4, lr, r9, r4
 80011bc:	fa20 f307 	lsr.w	r3, r0, r7
 80011c0:	fb09 fa08 	mul.w	sl, r9, r8
 80011c4:	408d      	lsls	r5, r1
 80011c6:	431d      	orrs	r5, r3
 80011c8:	0c2b      	lsrs	r3, r5, #16
 80011ca:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80011ce:	45a2      	cmp	sl, r4
 80011d0:	fa02 f201 	lsl.w	r2, r2, r1
 80011d4:	fa00 f301 	lsl.w	r3, r0, r1
 80011d8:	d909      	bls.n	80011ee <__udivmoddi4+0x222>
 80011da:	eb1c 0404 	adds.w	r4, ip, r4
 80011de:	f109 30ff 	add.w	r0, r9, #4294967295
 80011e2:	d248      	bcs.n	8001276 <__udivmoddi4+0x2aa>
 80011e4:	45a2      	cmp	sl, r4
 80011e6:	d946      	bls.n	8001276 <__udivmoddi4+0x2aa>
 80011e8:	f1a9 0902 	sub.w	r9, r9, #2
 80011ec:	4464      	add	r4, ip
 80011ee:	eba4 040a 	sub.w	r4, r4, sl
 80011f2:	fbb4 f0fe 	udiv	r0, r4, lr
 80011f6:	fb0e 4410 	mls	r4, lr, r0, r4
 80011fa:	fb00 fa08 	mul.w	sl, r0, r8
 80011fe:	b2ad      	uxth	r5, r5
 8001200:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001204:	45a2      	cmp	sl, r4
 8001206:	d908      	bls.n	800121a <__udivmoddi4+0x24e>
 8001208:	eb1c 0404 	adds.w	r4, ip, r4
 800120c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001210:	d22d      	bcs.n	800126e <__udivmoddi4+0x2a2>
 8001212:	45a2      	cmp	sl, r4
 8001214:	d92b      	bls.n	800126e <__udivmoddi4+0x2a2>
 8001216:	3802      	subs	r0, #2
 8001218:	4464      	add	r4, ip
 800121a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800121e:	fba0 8902 	umull	r8, r9, r0, r2
 8001222:	eba4 040a 	sub.w	r4, r4, sl
 8001226:	454c      	cmp	r4, r9
 8001228:	46c6      	mov	lr, r8
 800122a:	464d      	mov	r5, r9
 800122c:	d319      	bcc.n	8001262 <__udivmoddi4+0x296>
 800122e:	d016      	beq.n	800125e <__udivmoddi4+0x292>
 8001230:	b15e      	cbz	r6, 800124a <__udivmoddi4+0x27e>
 8001232:	ebb3 020e 	subs.w	r2, r3, lr
 8001236:	eb64 0405 	sbc.w	r4, r4, r5
 800123a:	fa04 f707 	lsl.w	r7, r4, r7
 800123e:	fa22 f301 	lsr.w	r3, r2, r1
 8001242:	431f      	orrs	r7, r3
 8001244:	40cc      	lsrs	r4, r1
 8001246:	e9c6 7400 	strd	r7, r4, [r6]
 800124a:	2100      	movs	r1, #0
 800124c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001250:	4631      	mov	r1, r6
 8001252:	4630      	mov	r0, r6
 8001254:	e70c      	b.n	8001070 <__udivmoddi4+0xa4>
 8001256:	468c      	mov	ip, r1
 8001258:	e6eb      	b.n	8001032 <__udivmoddi4+0x66>
 800125a:	4610      	mov	r0, r2
 800125c:	e6ff      	b.n	800105e <__udivmoddi4+0x92>
 800125e:	4543      	cmp	r3, r8
 8001260:	d2e6      	bcs.n	8001230 <__udivmoddi4+0x264>
 8001262:	ebb8 0e02 	subs.w	lr, r8, r2
 8001266:	eb69 050c 	sbc.w	r5, r9, ip
 800126a:	3801      	subs	r0, #1
 800126c:	e7e0      	b.n	8001230 <__udivmoddi4+0x264>
 800126e:	4628      	mov	r0, r5
 8001270:	e7d3      	b.n	800121a <__udivmoddi4+0x24e>
 8001272:	4611      	mov	r1, r2
 8001274:	e78c      	b.n	8001190 <__udivmoddi4+0x1c4>
 8001276:	4681      	mov	r9, r0
 8001278:	e7b9      	b.n	80011ee <__udivmoddi4+0x222>
 800127a:	4608      	mov	r0, r1
 800127c:	e773      	b.n	8001166 <__udivmoddi4+0x19a>
 800127e:	4608      	mov	r0, r1
 8001280:	e749      	b.n	8001116 <__udivmoddi4+0x14a>
 8001282:	f1ac 0c02 	sub.w	ip, ip, #2
 8001286:	443d      	add	r5, r7
 8001288:	e713      	b.n	80010b2 <__udivmoddi4+0xe6>
 800128a:	3802      	subs	r0, #2
 800128c:	443c      	add	r4, r7
 800128e:	e724      	b.n	80010da <__udivmoddi4+0x10e>

08001290 <__aeabi_idiv0>:
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop

08001294 <uvp6_init>:

//$start:ACQ_CSCS_022H,20211404,120000;\n
const char* uvp6_commands_strings[]={"$start:ACQ_CSCS_022H,","$stop;\n","wkp;\n"};

void uvp6_init(uvp6* uvp6_obj)
{
 8001294:	b5b0      	push	{r4, r5, r7, lr}
 8001296:	b096      	sub	sp, #88	; 0x58
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	uvp6_messages_init(uvp6_obj);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f9ed 	bl	800167c <uvp6_messages_init>

	osMessageQDef(uvp6_events_q, 20, uint8_t);
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <uvp6_init+0x90>)
 80012a4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80012a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uvp6_obj->events_q= osMessageCreate(osMessageQ(uvp6_events_q), NULL);
 80012ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f003 fe6a 	bl	8004f8e <osMessageCreate>
 80012ba:	4602      	mov	r2, r0
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	609a      	str	r2, [r3, #8]

	osMessageQDef(uvp6_media_rx_q, 20, uint16_t);
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <uvp6_init+0x94>)
 80012c2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80012c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uvp6_obj->media_rx_messages_q= osMessageCreate(osMessageQ(uvp6_media_rx_q), NULL);
 80012cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 fe5b 	bl	8004f8e <osMessageCreate>
 80012d8:	4602      	mov	r2, r0
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	601a      	str	r2, [r3, #0]

	osMessageQDef(uvp6_media_tx_q, 400, uint8_t);
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <uvp6_init+0x98>)
 80012e0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80012e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uvp6_obj->media_tx_q = osMessageCreate(osMessageQ(uvp6_media_tx_q), NULL);
 80012ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f003 fe4c 	bl	8004f8e <osMessageCreate>
 80012f6:	4602      	mov	r2, r0
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	605a      	str	r2, [r3, #4]

	osThreadDef(uvp6_task, uvp6_loop, osPriorityNormal, 0, 128);
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <uvp6_init+0x9c>)
 80012fe:	f107 040c 	add.w	r4, r7, #12
 8001302:	461d      	mov	r5, r3
 8001304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001308:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800130c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(uvp6_task), uvp6_obj);
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	4618      	mov	r0, r3
 8001318:	f003 fdd9 	bl	8004ece <osThreadCreate>
}
 800131c:	bf00      	nop
 800131e:	3758      	adds	r7, #88	; 0x58
 8001320:	46bd      	mov	sp, r7
 8001322:	bdb0      	pop	{r4, r5, r7, pc}
 8001324:	0800a5fc 	.word	0x0800a5fc
 8001328:	0800a60c 	.word	0x0800a60c
 800132c:	0800a61c 	.word	0x0800a61c
 8001330:	0800a62c 	.word	0x0800a62c

08001334 <uvp6_media_process_byte>:

void uvp6_media_process_byte(uvp6* uvp6_obj,uint8_t rx_byte)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	70fb      	strb	r3, [r7, #3]
	if(uvp6_obj->media_status==UVP6_MEDIA_READY)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7b9b      	ldrb	r3, [r3, #14]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d15f      	bne.n	8001408 <uvp6_media_process_byte+0xd4>
	{
		uvp6_obj->rx_buffer[uvp6_obj->rx_buffer_indx]=rx_byte;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 800134e:	b29b      	uxth	r3, r3
 8001350:	461a      	mov	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	78fa      	ldrb	r2, [r7, #3]
 8001358:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		if(rx_byte=='\n')
 800135c:	78fb      	ldrb	r3, [r7, #3]
 800135e:	2b0a      	cmp	r3, #10
 8001360:	d133      	bne.n	80013ca <uvp6_media_process_byte+0x96>
		{
			uvp6_obj->rx_buffer[uvp6_obj->rx_buffer_indx]=0x00;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 8001368:	b29b      	uxth	r3, r3
 800136a:	461a      	mov	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	2200      	movs	r2, #0
 8001372:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			osMessagePut(uvp6_obj->media_rx_messages_q,uvp6_obj->rx_buffer_new_string_indx,1);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f8b3 345c 	ldrh.w	r3, [r3, #1116]	; 0x45c
 8001380:	b29b      	uxth	r3, r3
 8001382:	2201      	movs	r2, #1
 8001384:	4619      	mov	r1, r3
 8001386:	f003 fe2b 	bl	8004fe0 <osMessagePut>
			if(uvp6_obj->rx_buffer_indx>UVP6_RX_BUFFER_THR) uvp6_obj->rx_buffer_indx=0;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 8001390:	b29b      	uxth	r3, r3
 8001392:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001396:	d907      	bls.n	80013a8 <uvp6_media_process_byte+0x74>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 80013a6:	e008      	b.n	80013ba <uvp6_media_process_byte+0x86>
			else  uvp6_obj->rx_buffer_indx++;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	3301      	adds	r3, #1
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
			uvp6_obj->rx_buffer_new_string_indx=uvp6_obj->rx_buffer_indx;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
 80013c8:	e008      	b.n	80013dc <uvp6_media_process_byte+0xa8>
		}
		else uvp6_obj->rx_buffer_indx++;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	3301      	adds	r3, #1
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
		if(uvp6_obj->rx_buffer_indx==UVP6_RX_BUFFER_SIZE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e8:	d11c      	bne.n	8001424 <uvp6_media_process_byte+0xf0>
		{
			uvp6_obj->rx_buffer_indx=0;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
			uvp6_obj->rx_buffer_new_string_indx=uvp6_obj->rx_buffer_indx;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80013fe:	b29a      	uxth	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
	else
	{
		uvp6_obj->rx_buffer_indx=0;
		uvp6_obj->rx_buffer_new_string_indx=uvp6_obj->rx_buffer_indx;
	}
}
 8001406:	e00d      	b.n	8001424 <uvp6_media_process_byte+0xf0>
		uvp6_obj->rx_buffer_indx=0;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 8001410:	2200      	movs	r2, #0
 8001412:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
		uvp6_obj->rx_buffer_new_string_indx=uvp6_obj->rx_buffer_indx;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 800141c:	b29a      	uxth	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <uvp6_loop>:

void uvp6_loop(uvp6* uvp6_obj)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 uint16_t msg_indx;
 for(;;)
 {
	if(xQueueReceive(uvp6_obj->media_rx_messages_q,&msg_indx,0))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f107 010a 	add.w	r1, r7, #10
 800143c:	2200      	movs	r2, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f004 fa04 	bl	800584c <xQueueReceive>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d008      	beq.n	800145c <uvp6_loop+0x30>
	{
		uint8_t* msg=uvp6_obj->rx_buffer+msg_indx;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	335a      	adds	r3, #90	; 0x5a
 800144e:	897a      	ldrh	r2, [r7, #10]
 8001450:	4413      	add	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]
		uvp6_parse_message(uvp6_obj,msg);
 8001454:	68f9      	ldr	r1, [r7, #12]
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f8c0 	bl	80015dc <uvp6_parse_message>
	}
	osDelay(1);
 800145c:	2001      	movs	r0, #1
 800145e:	f003 fd82 	bl	8004f66 <osDelay>
	if(xQueueReceive(uvp6_obj->media_rx_messages_q,&msg_indx,0))
 8001462:	e7e7      	b.n	8001434 <uvp6_loop+0x8>

08001464 <uvp6_media_get_byte>:

}


uint8_t uvp6_media_get_byte(uvp6* uvp6_obj,uint8_t* tx_byte)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(uvp6_obj->media_tx_q,0);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6859      	ldr	r1, [r3, #4]
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	2200      	movs	r2, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f003 fdf1 	bl	8005060 <osMessageGet>
	if(res.status==osEventMessage)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b10      	cmp	r3, #16
 8001482:	d105      	bne.n	8001490 <uvp6_media_get_byte+0x2c>
     {
		*tx_byte=res.value.v;
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	701a      	strb	r2, [r3, #0]
		return UVP6_F_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	e000      	b.n	8001492 <uvp6_media_get_byte+0x2e>
     }
   return UVP6_F_ERR;
 8001490:	2301      	movs	r3, #1
}
 8001492:	4618      	mov	r0, r3
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <uvp6_send_cmd>:


void uvp6_send_cmd(uvp6* uvp6_obj,uint8_t cmd_id,void* arg)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b092      	sub	sp, #72	; 0x48
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	460b      	mov	r3, r1
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	72fb      	strb	r3, [r7, #11]

 char tmp_cmd[40];
 for(int i=0;i<strlen(uvp6_commands_strings[UVP6_CMD_WKUP]);i++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	647b      	str	r3, [r7, #68]	; 0x44
 80014ae:	e00d      	b.n	80014cc <uvp6_send_cmd+0x30>
 {
	  osMessagePut(uvp6_obj->media_tx_q,*(uvp6_commands_strings[UVP6_CMD_WKUP]+i),0);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6858      	ldr	r0, [r3, #4]
 80014b4:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <uvp6_send_cmd+0x10c>)
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014ba:	4413      	add	r3, r2
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	f003 fd8d 	bl	8004fe0 <osMessagePut>
 for(int i=0;i<strlen(uvp6_commands_strings[UVP6_CMD_WKUP]);i++)
 80014c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014c8:	3301      	adds	r3, #1
 80014ca:	647b      	str	r3, [r7, #68]	; 0x44
 80014cc:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <uvp6_send_cmd+0x10c>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7fe fead 	bl	8000230 <strlen>
 80014d6:	4602      	mov	r2, r0
 80014d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014da:	429a      	cmp	r2, r3
 80014dc:	d8e8      	bhi.n	80014b0 <uvp6_send_cmd+0x14>
 }
 osDelay(20);
 80014de:	2014      	movs	r0, #20
 80014e0:	f003 fd41 	bl	8004f66 <osDelay>
 switch(cmd_id)
 80014e4:	7afb      	ldrb	r3, [r7, #11]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <uvp6_send_cmd+0x54>
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d03a      	beq.n	8001564 <uvp6_send_cmd+0xc8>
	   }
	   uvp6_obj->status=UVP6_READY;
	 break;
 }

}
 80014ee:	e057      	b.n	80015a0 <uvp6_send_cmd+0x104>
       tmp_cmd[0]=0x00;
 80014f0:	2300      	movs	r3, #0
 80014f2:	753b      	strb	r3, [r7, #20]
       strcat(tmp_cmd,uvp6_commands_strings[UVP6_CMD_START_ACQ]);
 80014f4:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <uvp6_send_cmd+0x10c>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f005 ff0c 	bl	800731c <strcat>
       strcat(tmp_cmd,(char*)arg);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4618      	mov	r0, r3
 800150c:	f005 ff06 	bl	800731c <strcat>
       strcat(tmp_cmd,";\n");
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4618      	mov	r0, r3
 8001516:	f7fe fe8b 	bl	8000230 <strlen>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4413      	add	r3, r2
 8001524:	4a21      	ldr	r2, [pc, #132]	; (80015ac <uvp6_send_cmd+0x110>)
 8001526:	8811      	ldrh	r1, [r2, #0]
 8001528:	7892      	ldrb	r2, [r2, #2]
 800152a:	8019      	strh	r1, [r3, #0]
 800152c:	709a      	strb	r2, [r3, #2]
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 800152e:	2300      	movs	r3, #0
 8001530:	643b      	str	r3, [r7, #64]	; 0x40
 8001532:	e00d      	b.n	8001550 <uvp6_send_cmd+0xb4>
  		   osMessagePut(uvp6_obj->media_tx_q,tmp_cmd[i],0);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6858      	ldr	r0, [r3, #4]
 8001538:	f107 0214 	add.w	r2, r7, #20
 800153c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800153e:	4413      	add	r3, r2
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2200      	movs	r2, #0
 8001544:	4619      	mov	r1, r3
 8001546:	f003 fd4b 	bl	8004fe0 <osMessagePut>
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 800154a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800154c:	3301      	adds	r3, #1
 800154e:	643b      	str	r3, [r7, #64]	; 0x40
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe fe6b 	bl	8000230 <strlen>
 800155a:	4602      	mov	r2, r0
 800155c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800155e:	429a      	cmp	r2, r3
 8001560:	d8e8      	bhi.n	8001534 <uvp6_send_cmd+0x98>
	 break;
 8001562:	e01d      	b.n	80015a0 <uvp6_send_cmd+0x104>
	   for(int i=0;i<strlen(uvp6_commands_strings[UVP6_CMD_STOP_ACQ]);i++)
 8001564:	2300      	movs	r3, #0
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001568:	e00d      	b.n	8001586 <uvp6_send_cmd+0xea>
		   osMessagePut(uvp6_obj->media_tx_q,*(uvp6_commands_strings[UVP6_CMD_STOP_ACQ]+i),0);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6858      	ldr	r0, [r3, #4]
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <uvp6_send_cmd+0x10c>)
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001574:	4413      	add	r3, r2
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2200      	movs	r2, #0
 800157a:	4619      	mov	r1, r3
 800157c:	f003 fd30 	bl	8004fe0 <osMessagePut>
	   for(int i=0;i<strlen(uvp6_commands_strings[UVP6_CMD_STOP_ACQ]);i++)
 8001580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001582:	3301      	adds	r3, #1
 8001584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <uvp6_send_cmd+0x10c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe fe50 	bl	8000230 <strlen>
 8001590:	4602      	mov	r2, r0
 8001592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001594:	429a      	cmp	r2, r3
 8001596:	d8e8      	bhi.n	800156a <uvp6_send_cmd+0xce>
	   uvp6_obj->status=UVP6_READY;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2201      	movs	r2, #1
 800159c:	735a      	strb	r2, [r3, #13]
	 break;
 800159e:	bf00      	nop
}
 80015a0:	bf00      	nop
 80015a2:	3748      	adds	r7, #72	; 0x48
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000000 	.word	0x20000000
 80015ac:	0800a648 	.word	0x0800a648

080015b0 <uvp6_get_event>:


uint8_t uvp6_get_event(uvp6* uvp6_obj,uint8_t* event)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
	if(xQueueReceive(uvp6_obj->events_q,event,1))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2201      	movs	r2, #1
 80015c0:	6839      	ldr	r1, [r7, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f004 f942 	bl	800584c <xQueueReceive>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <uvp6_get_event+0x22>
	{
     return UVP6_F_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e000      	b.n	80015d4 <uvp6_get_event+0x24>
	}
	return UVP6_F_ERR;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <uvp6_parse_message>:



int uvp6_parse_message(uvp6* uvp6_obj,uint8_t* msg)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,",");//header
 80015e6:	4922      	ldr	r1, [pc, #136]	; (8001670 <uvp6_parse_message+0x94>)
 80015e8:	6838      	ldr	r0, [r7, #0]
 80015ea:	f006 fd27 	bl	800803c <strtok>
 80015ee:	6138      	str	r0, [r7, #16]
	uint8_t* tmp_ptr;
	for(int i=0;i<UVP6_MSG_NUM_OF_FUNCTIONS;i++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e033      	b.n	800165e <uvp6_parse_message+0x82>
	{
	   if(strlen(pch)==strlen(uvp6_messages_strings[i]))
 80015f6:	6938      	ldr	r0, [r7, #16]
 80015f8:	f7fe fe1a 	bl	8000230 <strlen>
 80015fc:	4604      	mov	r4, r0
 80015fe:	4a1d      	ldr	r2, [pc, #116]	; (8001674 <uvp6_parse_message+0x98>)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe fe12 	bl	8000230 <strlen>
 800160c:	4603      	mov	r3, r0
 800160e:	429c      	cmp	r4, r3
 8001610:	d122      	bne.n	8001658 <uvp6_parse_message+0x7c>
	   {
		  tmp_ptr=0;
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
		  tmp_ptr=strstr(pch,uvp6_messages_strings[i]);
 8001616:	4a17      	ldr	r2, [pc, #92]	; (8001674 <uvp6_parse_message+0x98>)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161e:	4619      	mov	r1, r3
 8001620:	6938      	ldr	r0, [r7, #16]
 8001622:	f005 fe8a 	bl	800733a <strstr>
 8001626:	60f8      	str	r0, [r7, #12]
		  if(tmp_ptr)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d014      	beq.n	8001658 <uvp6_parse_message+0x7c>
		   {
			 if(uvp6_functions[i](uvp6_obj,msg+strlen(tmp_ptr)+1)==UVP6_F_OK) return UVP6_F_OK;
 800162e:	4a12      	ldr	r2, [pc, #72]	; (8001678 <uvp6_parse_message+0x9c>)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f7fe fdfa 	bl	8000230 <strlen>
 800163c:	4603      	mov	r3, r0
 800163e:	3301      	adds	r3, #1
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	4413      	add	r3, r2
 8001644:	4619      	mov	r1, r3
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	47a0      	blx	r4
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <uvp6_parse_message+0x78>
 8001650:	2300      	movs	r3, #0
 8001652:	e008      	b.n	8001666 <uvp6_parse_message+0x8a>
	         else return UVP6_F_ERR;
 8001654:	2301      	movs	r3, #1
 8001656:	e006      	b.n	8001666 <uvp6_parse_message+0x8a>
	for(int i=0;i<UVP6_MSG_NUM_OF_FUNCTIONS;i++)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	3301      	adds	r3, #1
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2b03      	cmp	r3, #3
 8001662:	ddc8      	ble.n	80015f6 <uvp6_parse_message+0x1a>
		   }
		}
	 }
	 return UVP6_F_ERR;
 8001664:	2301      	movs	r3, #1

}
 8001666:	4618      	mov	r0, r3
 8001668:	371c      	adds	r7, #28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd90      	pop	{r4, r7, pc}
 800166e:	bf00      	nop
 8001670:	0800a64c 	.word	0x0800a64c
 8001674:	20007b00 	.word	0x20007b00
 8001678:	20007af0 	.word	0x20007af0

0800167c <uvp6_messages_init>:

void uvp6_messages_init(uvp6* uvp6_obj)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	uvp6_functions[UVP6_MSG_HW_CONF] = UVP6_MSG_HW_CONF_f;
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <uvp6_messages_init+0x44>)
 8001686:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <uvp6_messages_init+0x48>)
 8001688:	601a      	str	r2, [r3, #0]
	uvp6_functions[UVP6_MSG_BLACK_DATA] = UVP6_MSG_BLACK_DATA_f;
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <uvp6_messages_init+0x44>)
 800168c:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <uvp6_messages_init+0x4c>)
 800168e:	605a      	str	r2, [r3, #4]
	uvp6_functions[UVP6_MSG_LPM_DATA] = UVP6_MSG_LPM_DATA_f;
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <uvp6_messages_init+0x44>)
 8001692:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <uvp6_messages_init+0x50>)
 8001694:	609a      	str	r2, [r3, #8]
	uvp6_functions[UVP6_MSG_ACQ_CONF] = UVP6_MSG_ACQ_CONF_f;
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <uvp6_messages_init+0x44>)
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <uvp6_messages_init+0x54>)
 800169a:	60da      	str	r2, [r3, #12]

	uvp6_messages_strings[UVP6_MSG_HW_CONF] = "HW_CONF";
 800169c:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <uvp6_messages_init+0x58>)
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <uvp6_messages_init+0x5c>)
 80016a0:	601a      	str	r2, [r3, #0]
	uvp6_messages_strings[UVP6_MSG_BLACK_DATA] = "BLACK_DATA";
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <uvp6_messages_init+0x58>)
 80016a4:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <uvp6_messages_init+0x60>)
 80016a6:	605a      	str	r2, [r3, #4]
	uvp6_messages_strings[UVP6_MSG_LPM_DATA] = "LPM_DATA";
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <uvp6_messages_init+0x58>)
 80016aa:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <uvp6_messages_init+0x64>)
 80016ac:	609a      	str	r2, [r3, #8]
	uvp6_messages_strings[UVP6_MSG_ACQ_CONF] = "ACQ_CONF";
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <uvp6_messages_init+0x58>)
 80016b0:	4a0c      	ldr	r2, [pc, #48]	; (80016e4 <uvp6_messages_init+0x68>)
 80016b2:	60da      	str	r2, [r3, #12]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20007af0 	.word	0x20007af0
 80016c4:	080016e9 	.word	0x080016e9
 80016c8:	08001711 	.word	0x08001711
 80016cc:	08001729 	.word	0x08001729
 80016d0:	08001861 	.word	0x08001861
 80016d4:	20007b00 	.word	0x20007b00
 80016d8:	0800a650 	.word	0x0800a650
 80016dc:	0800a658 	.word	0x0800a658
 80016e0:	0800a664 	.word	0x0800a664
 80016e4:	0800a670 	.word	0x0800a670

080016e8 <UVP6_MSG_HW_CONF_f>:


int UVP6_MSG_HW_CONF_f(uvp6* uvp6_obj,uint8_t* msg)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
   osMessagePut(uvp6_obj->events_q,UVP6_EVNT_BOOTED,1);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2201      	movs	r2, #1
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f003 fc70 	bl	8004fe0 <osMessagePut>
   uvp6_obj->status=UVP6_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	735a      	strb	r2, [r3, #13]
   return UVP6_F_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <UVP6_MSG_BLACK_DATA_f>:
int UVP6_MSG_BLACK_DATA_f(uvp6* uvp6_obj,uint8_t* msg)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
	return UVP6_F_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
	...

08001728 <UVP6_MSG_LPM_DATA_f>:
int UVP6_MSG_LPM_DATA_f(uvp6* uvp6_obj,uint8_t* msg)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,",");//depth
 8001732:	4949      	ldr	r1, [pc, #292]	; (8001858 <UVP6_MSG_LPM_DATA_f+0x130>)
 8001734:	6838      	ldr	r0, [r7, #0]
 8001736:	f006 fc81 	bl	800803c <strtok>
 800173a:	60f8      	str	r0, [r7, #12]
	uvp6_obj->lpm_data.depth=strtof(pch,NULL);
 800173c:	2100      	movs	r1, #0
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f006 fc2a 	bl	8007f98 <strtof>
 8001744:	4603      	mov	r3, r0
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fb10 	bl	8000d6c <__aeabi_i2f>
 800174c:	4602      	mov	r2, r0
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f8c3 200f 	str.w	r2, [r3, #15]
	pch = strtok (NULL,",");//date
 8001754:	4940      	ldr	r1, [pc, #256]	; (8001858 <UVP6_MSG_LPM_DATA_f+0x130>)
 8001756:	2000      	movs	r0, #0
 8001758:	f006 fc70 	bl	800803c <strtok>
 800175c:	60f8      	str	r0, [r7, #12]
	memcpy(uvp6_obj->lpm_data.date,pch,8);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3313      	adds	r3, #19
 8001762:	2208      	movs	r2, #8
 8001764:	68f9      	ldr	r1, [r7, #12]
 8001766:	4618      	mov	r0, r3
 8001768:	f005 fda2 	bl	80072b0 <memcpy>
	pch = strtok (NULL,",");//time
 800176c:	493a      	ldr	r1, [pc, #232]	; (8001858 <UVP6_MSG_LPM_DATA_f+0x130>)
 800176e:	2000      	movs	r0, #0
 8001770:	f006 fc64 	bl	800803c <strtok>
 8001774:	60f8      	str	r0, [r7, #12]
	memcpy(uvp6_obj->lpm_data.time,pch,6);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	331b      	adds	r3, #27
 800177a:	2206      	movs	r2, #6
 800177c:	68f9      	ldr	r1, [r7, #12]
 800177e:	4618      	mov	r0, r3
 8001780:	f005 fd96 	bl	80072b0 <memcpy>
	pch = strtok (NULL,",");//avg_images
 8001784:	4934      	ldr	r1, [pc, #208]	; (8001858 <UVP6_MSG_LPM_DATA_f+0x130>)
 8001786:	2000      	movs	r0, #0
 8001788:	f006 fc58 	bl	800803c <strtok>
 800178c:	60f8      	str	r0, [r7, #12]
	uvp6_obj->lpm_data.number_of_images=strtoul(pch,NULL,0);
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f006 fd2a 	bl	80081ec <strtoul>
 8001798:	4603      	mov	r3, r0
 800179a:	b2da      	uxtb	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	pch = strtok (NULL,",");//temperature
 80017a2:	492d      	ldr	r1, [pc, #180]	; (8001858 <UVP6_MSG_LPM_DATA_f+0x130>)
 80017a4:	2000      	movs	r0, #0
 80017a6:	f006 fc49 	bl	800803c <strtok>
 80017aa:	60f8      	str	r0, [r7, #12]
	uvp6_obj->lpm_data.temperature=strtof(pch,NULL);
 80017ac:	2100      	movs	r1, #0
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f006 fbf2 	bl	8007f98 <strtof>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fad8 	bl	8000d6c <__aeabi_i2f>
 80017bc:	4602      	mov	r2, r0
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f8c3 2022 	str.w	r2, [r3, #34]	; 0x22
	//data
	for(int i=0;i<18;i++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	e018      	b.n	80017fc <UVP6_MSG_LPM_DATA_f+0xd4>
	{
		if(pch = strtok (NULL,","))//data i
 80017ca:	4923      	ldr	r1, [pc, #140]	; (8001858 <UVP6_MSG_LPM_DATA_f+0x130>)
 80017cc:	2000      	movs	r0, #0
 80017ce:	f006 fc35 	bl	800803c <strtok>
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00d      	beq.n	80017f6 <UVP6_MSG_LPM_DATA_f+0xce>
		{
		 uvp6_obj->lpm_data.data[i]=strtoul(pch,NULL,0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f006 fd04 	bl	80081ec <strtoul>
 80017e4:	4603      	mov	r3, r0
 80017e6:	b299      	uxth	r1, r3
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	330c      	adds	r3, #12
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	460a      	mov	r2, r1
 80017f4:	81da      	strh	r2, [r3, #14]
	for(int i=0;i<18;i++)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2b11      	cmp	r3, #17
 8001800:	dde3      	ble.n	80017ca <UVP6_MSG_LPM_DATA_f+0xa2>
		}

	}
	//grey levels
	for(int i=0;i<16;i++)
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	e017      	b.n	8001838 <UVP6_MSG_LPM_DATA_f+0x110>
	{
		if(pch = strtok (NULL,",;"))//grey level i
 8001808:	4914      	ldr	r1, [pc, #80]	; (800185c <UVP6_MSG_LPM_DATA_f+0x134>)
 800180a:	2000      	movs	r0, #0
 800180c:	f006 fc16 	bl	800803c <strtok>
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00c      	beq.n	8001832 <UVP6_MSG_LPM_DATA_f+0x10a>
		{
		 uvp6_obj->lpm_data.grey_levels[i]=strtoul(pch,NULL,0);
 8001818:	2200      	movs	r2, #0
 800181a:	2100      	movs	r1, #0
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f006 fce5 	bl	80081ec <strtoul>
 8001822:	4603      	mov	r3, r0
 8001824:	b2d9      	uxtb	r1, r3
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	4413      	add	r3, r2
 800182c:	334a      	adds	r3, #74	; 0x4a
 800182e:	460a      	mov	r2, r1
 8001830:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<16;i++)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	3301      	adds	r3, #1
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	2b0f      	cmp	r3, #15
 800183c:	dde4      	ble.n	8001808 <UVP6_MSG_LPM_DATA_f+0xe0>
		}
	}



	osMessagePut(uvp6_obj->events_q,UVP6_EVNT_LPM_DATA_RCVD,1);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2201      	movs	r2, #1
 8001844:	2101      	movs	r1, #1
 8001846:	4618      	mov	r0, r3
 8001848:	f003 fbca 	bl	8004fe0 <osMessagePut>
	return UVP6_F_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	0800a64c 	.word	0x0800a64c
 800185c:	0800a67c 	.word	0x0800a67c

08001860 <UVP6_MSG_ACQ_CONF_f>:

int UVP6_MSG_ACQ_CONF_f(uvp6* uvp6_obj,uint8_t* msg)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
	osMessagePut(uvp6_obj->events_q,UVP6_EVNT_ACQ_CONF_RCVD,1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2201      	movs	r2, #1
 8001870:	2103      	movs	r1, #3
 8001872:	4618      	mov	r0, r3
 8001874:	f003 fbb4 	bl	8004fe0 <osMessagePut>
	uvp6_obj->status=UVP6_ACQ_STARTED;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2202      	movs	r2, #2
 800187c:	735a      	strb	r2, [r3, #13]
	return UVP6_F_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4a06      	ldr	r2, [pc, #24]	; (80018b0 <vApplicationGetIdleTaskMemory+0x28>)
 8001898:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800189e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	20000214 	.word	0x20000214
 80018b4:	20000268 	.word	0x20000268

080018b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	b08e      	sub	sp, #56	; 0x38
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018be:	f001 f92f 	bl	8002b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c2:	f000 f857 	bl	8001974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c6:	f000 f8f7 	bl	8001ab8 <MX_GPIO_Init>
  MX_UART5_Init();
 80018ca:	f000 f8a1 	bl	8001a10 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80018ce:	f000 f8c9 	bl	8001a64 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  mcu_flash_init(&data_flash,82);
 80018d2:	2152      	movs	r1, #82	; 0x52
 80018d4:	481c      	ldr	r0, [pc, #112]	; (8001948 <main+0x90>)
 80018d6:	f000 fb4e 	bl	8001f76 <mcu_flash_init>

  uvp6_init(&uvp6_sensor1);
 80018da:	481c      	ldr	r0, [pc, #112]	; (800194c <main+0x94>)
 80018dc:	f7ff fcda 	bl	8001294 <uvp6_init>
  HAL_UART_Receive_IT(&UVP6_UART,&(uvp6_sensor1.media_rx_byte),1);
 80018e0:	2201      	movs	r2, #1
 80018e2:	491b      	ldr	r1, [pc, #108]	; (8001950 <main+0x98>)
 80018e4:	481b      	ldr	r0, [pc, #108]	; (8001954 <main+0x9c>)
 80018e6:	f002 ff74 	bl	80047d2 <HAL_UART_Receive_IT>

  seaglider_init(&glider1);
 80018ea:	481b      	ldr	r0, [pc, #108]	; (8001958 <main+0xa0>)
 80018ec:	f000 fc58 	bl	80021a0 <seaglider_init>
  HAL_UART_Receive_IT(&GLIDER_UART,&(glider1.media_rx_byte),1);
 80018f0:	2201      	movs	r2, #1
 80018f2:	491a      	ldr	r1, [pc, #104]	; (800195c <main+0xa4>)
 80018f4:	481a      	ldr	r0, [pc, #104]	; (8001960 <main+0xa8>)
 80018f6:	f002 ff6c 	bl	80047d2 <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <main+0xac>)
 80018fc:	f107 041c 	add.w	r4, r7, #28
 8001900:	461d      	mov	r5, r3
 8001902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001906:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800190a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f003 fada 	bl	8004ece <osThreadCreate>
 800191a:	4603      	mov	r3, r0
 800191c:	4a12      	ldr	r2, [pc, #72]	; (8001968 <main+0xb0>)
 800191e:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart_tx_t */
  osThreadDef(uart_tx_t, uart_tx_f, osPriorityNormal, 0, 128);
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <main+0xb4>)
 8001922:	463c      	mov	r4, r7
 8001924:	461d      	mov	r5, r3
 8001926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001928:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800192a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800192e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart_tx_tHandle = osThreadCreate(osThread(uart_tx_t), NULL);
 8001932:	463b      	mov	r3, r7
 8001934:	2100      	movs	r1, #0
 8001936:	4618      	mov	r0, r3
 8001938:	f003 fac9 	bl	8004ece <osThreadCreate>
 800193c:	4603      	mov	r3, r0
 800193e:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <main+0xb8>)
 8001940:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001942:	f003 fabd 	bl	8004ec0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001946:	e7fe      	b.n	8001946 <main+0x8e>
 8001948:	20008424 	.word	0x20008424
 800194c:	20007fc4 	.word	0x20007fc4
 8001950:	20007fd0 	.word	0x20007fd0
 8001954:	20007f44 	.word	0x20007f44
 8001958:	20007b14 	.word	0x20007b14
 800195c:	20007b20 	.word	0x20007b20
 8001960:	20007f84 	.word	0x20007f84
 8001964:	0800a698 	.word	0x0800a698
 8001968:	20007b10 	.word	0x20007b10
 800196c:	0800a6b4 	.word	0x0800a6b4
 8001970:	20007f3c 	.word	0x20007f3c

08001974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b094      	sub	sp, #80	; 0x50
 8001978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197a:	f107 0318 	add.w	r3, r7, #24
 800197e:	2238      	movs	r2, #56	; 0x38
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f005 fca2 	bl	80072cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001996:	2301      	movs	r3, #1
 8001998:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800199a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800199e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80019a0:	2301      	movs	r3, #1
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a4:	2301      	movs	r3, #1
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ac:	2302      	movs	r3, #2
 80019ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80019b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80019bc:	2300      	movs	r3, #0
 80019be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c0:	f107 0318 	add.w	r3, r7, #24
 80019c4:	4618      	mov	r0, r3
 80019c6:	f001 fe49 	bl	800365c <HAL_RCC_OscConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80019d0:	f000 faaa 	bl	8001f28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d4:	230f      	movs	r3, #15
 80019d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d8:	2302      	movs	r3, #2
 80019da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	2101      	movs	r1, #1
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 f94b 	bl	8003c88 <HAL_RCC_ClockConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80019f8:	f000 fa96 	bl	8001f28 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <SystemClock_Config+0x98>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
}
 8001a02:	bf00      	nop
 8001a04:	3750      	adds	r7, #80	; 0x50
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	42420070 	.word	0x42420070

08001a10 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_UART5_Init+0x4c>)
 8001a16:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <MX_UART5_Init+0x50>)
 8001a18:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <MX_UART5_Init+0x4c>)
 8001a1c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001a20:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <MX_UART5_Init+0x4c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <MX_UART5_Init+0x4c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <MX_UART5_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <MX_UART5_Init+0x4c>)
 8001a36:	220c      	movs	r2, #12
 8001a38:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <MX_UART5_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <MX_UART5_Init+0x4c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_UART5_Init+0x4c>)
 8001a48:	f002 fda0 	bl	800458c <HAL_UART_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001a52:	f000 fa69 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20007f44 	.word	0x20007f44
 8001a60:	40005000 	.word	0x40005000

08001a64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_USART1_UART_Init+0x4c>)
 8001a6a:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <MX_USART1_UART_Init+0x50>)
 8001a6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <MX_USART1_UART_Init+0x4c>)
 8001a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <MX_USART1_UART_Init+0x4c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <MX_USART1_UART_Init+0x4c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <MX_USART1_UART_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <MX_USART1_UART_Init+0x4c>)
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <MX_USART1_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <MX_USART1_UART_Init+0x4c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_USART1_UART_Init+0x4c>)
 8001a9c:	f002 fd76 	bl	800458c <HAL_UART_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001aa6:	f000 fa3f 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20007f84 	.word	0x20007f84
 8001ab4:	40013800 	.word	0x40013800

08001ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <MX_GPIO_Init+0x58>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <MX_GPIO_Init+0x58>)
 8001ac4:	f043 0320 	orr.w	r3, r3, #32
 8001ac8:	6193      	str	r3, [r2, #24]
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_GPIO_Init+0x58>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	f003 0320 	and.w	r3, r3, #32
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <MX_GPIO_Init+0x58>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <MX_GPIO_Init+0x58>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6193      	str	r3, [r2, #24]
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <MX_GPIO_Init+0x58>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <MX_GPIO_Init+0x58>)
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <MX_GPIO_Init+0x58>)
 8001af4:	f043 0310 	orr.w	r3, r3, #16
 8001af8:	6193      	str	r3, [r2, #24]
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <MX_GPIO_Init+0x58>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]

}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	40021000 	.word	0x40021000

08001b14 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */
uint8_t tmp1;
uint8_t tmp2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 if(huart==&UVP6_UART)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <HAL_UART_RxCpltCallback+0x50>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d10b      	bne.n	8001b3c <HAL_UART_RxCpltCallback+0x28>
 {   //send new received byte to uvp6 object
	 uvp6_media_process_byte(&uvp6_sensor1,uvp6_sensor1.media_rx_byte);
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <HAL_UART_RxCpltCallback+0x54>)
 8001b26:	7b1b      	ldrb	r3, [r3, #12]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480f      	ldr	r0, [pc, #60]	; (8001b68 <HAL_UART_RxCpltCallback+0x54>)
 8001b2c:	f7ff fc02 	bl	8001334 <uvp6_media_process_byte>
	 HAL_UART_Receive_IT(&UVP6_UART,&(uvp6_sensor1.media_rx_byte),1);
 8001b30:	2201      	movs	r2, #1
 8001b32:	490e      	ldr	r1, [pc, #56]	; (8001b6c <HAL_UART_RxCpltCallback+0x58>)
 8001b34:	480b      	ldr	r0, [pc, #44]	; (8001b64 <HAL_UART_RxCpltCallback+0x50>)
 8001b36:	f002 fe4c 	bl	80047d2 <HAL_UART_Receive_IT>
 else if(huart==&GLIDER_UART)
 {
	 seaglider_media_process_byte(&glider1,glider1.media_rx_byte);
	 HAL_UART_Receive_IT(&GLIDER_UART,&(glider1.media_rx_byte),1);
 }
}
 8001b3a:	e00e      	b.n	8001b5a <HAL_UART_RxCpltCallback+0x46>
 else if(huart==&GLIDER_UART)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <HAL_UART_RxCpltCallback+0x5c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d10a      	bne.n	8001b5a <HAL_UART_RxCpltCallback+0x46>
	 seaglider_media_process_byte(&glider1,glider1.media_rx_byte);
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_UART_RxCpltCallback+0x60>)
 8001b46:	7b1b      	ldrb	r3, [r3, #12]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	480a      	ldr	r0, [pc, #40]	; (8001b74 <HAL_UART_RxCpltCallback+0x60>)
 8001b4c:	f000 fb91 	bl	8002272 <seaglider_media_process_byte>
	 HAL_UART_Receive_IT(&GLIDER_UART,&(glider1.media_rx_byte),1);
 8001b50:	2201      	movs	r2, #1
 8001b52:	4909      	ldr	r1, [pc, #36]	; (8001b78 <HAL_UART_RxCpltCallback+0x64>)
 8001b54:	4806      	ldr	r0, [pc, #24]	; (8001b70 <HAL_UART_RxCpltCallback+0x5c>)
 8001b56:	f002 fe3c 	bl	80047d2 <HAL_UART_Receive_IT>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20007f44 	.word	0x20007f44
 8001b68:	20007fc4 	.word	0x20007fc4
 8001b6c:	20007fd0 	.word	0x20007fd0
 8001b70:	20007f84 	.word	0x20007f84
 8001b74:	20007b14 	.word	0x20007b14
 8001b78:	20007b20 	.word	0x20007b20

08001b7c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

 if(huart==&UVP6_UART)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <HAL_UART_TxCpltCallback+0x54>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d10c      	bne.n	8001ba6 <HAL_UART_TxCpltCallback+0x2a>
 {
	 if(uvp6_media_get_byte(&uvp6_sensor1,&tmp2)==UVP6_F_OK)
 8001b8c:	4911      	ldr	r1, [pc, #68]	; (8001bd4 <HAL_UART_TxCpltCallback+0x58>)
 8001b8e:	4812      	ldr	r0, [pc, #72]	; (8001bd8 <HAL_UART_TxCpltCallback+0x5c>)
 8001b90:	f7ff fc68 	bl	8001464 <uvp6_media_get_byte>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d115      	bne.n	8001bc6 <HAL_UART_TxCpltCallback+0x4a>
	 {
	    HAL_UART_Transmit_IT(&UVP6_UART,&tmp2,1);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	490d      	ldr	r1, [pc, #52]	; (8001bd4 <HAL_UART_TxCpltCallback+0x58>)
 8001b9e:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <HAL_UART_TxCpltCallback+0x54>)
 8001ba0:	f002 fdd3 	bl	800474a <HAL_UART_Transmit_IT>
	 if(seaglider_media_get_byte(&glider1,&tmp1)==SEAGLIDER_F_OK)
	 {
	    HAL_UART_Transmit_IT(&GLIDER_UART,&tmp1,1);
	 }
 }
}
 8001ba4:	e00f      	b.n	8001bc6 <HAL_UART_TxCpltCallback+0x4a>
 else if(huart==&GLIDER_UART)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a0c      	ldr	r2, [pc, #48]	; (8001bdc <HAL_UART_TxCpltCallback+0x60>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d10b      	bne.n	8001bc6 <HAL_UART_TxCpltCallback+0x4a>
	 if(seaglider_media_get_byte(&glider1,&tmp1)==SEAGLIDER_F_OK)
 8001bae:	490c      	ldr	r1, [pc, #48]	; (8001be0 <HAL_UART_TxCpltCallback+0x64>)
 8001bb0:	480c      	ldr	r0, [pc, #48]	; (8001be4 <HAL_UART_TxCpltCallback+0x68>)
 8001bb2:	f000 fbda 	bl	800236a <seaglider_media_get_byte>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d104      	bne.n	8001bc6 <HAL_UART_TxCpltCallback+0x4a>
	    HAL_UART_Transmit_IT(&GLIDER_UART,&tmp1,1);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4908      	ldr	r1, [pc, #32]	; (8001be0 <HAL_UART_TxCpltCallback+0x64>)
 8001bc0:	4806      	ldr	r0, [pc, #24]	; (8001bdc <HAL_UART_TxCpltCallback+0x60>)
 8001bc2:	f002 fdc2 	bl	800474a <HAL_UART_Transmit_IT>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20007f44 	.word	0x20007f44
 8001bd4:	20007f40 	.word	0x20007f40
 8001bd8:	20007fc4 	.word	0x20007fc4
 8001bdc:	20007f84 	.word	0x20007f84
 8001be0:	2000ac54 	.word	0x2000ac54
 8001be4:	20007b14 	.word	0x20007b14

08001be8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001be8:	b5b0      	push	{r4, r5, r7, lr}
 8001bea:	b09e      	sub	sp, #120	; 0x78
 8001bec:	af04      	add	r7, sp, #16
 8001bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  mcu_flash_open(&data_flash);
 8001bf0:	489c      	ldr	r0, [pc, #624]	; (8001e64 <StartDefaultTask+0x27c>)
 8001bf2:	f000 f9fb 	bl	8001fec <mcu_flash_open>
  char tmp_str[20];
  uint8_t event_id;
  char avg_str[40];
  uint16_t avg_data[5];
  uint8_t y=0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  memory_region_pointer ptr1;

  uint8_t lpm_messages_couter=0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

  for(;;)
  {
	 //glider task
	 if(seaglider_get_event(&glider1,&event_id)==SEAGLIDER_F_OK)
 8001c02:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8001c06:	4619      	mov	r1, r3
 8001c08:	4897      	ldr	r0, [pc, #604]	; (8001e68 <StartDefaultTask+0x280>)
 8001c0a:	f000 fc11 	bl	8002430 <seaglider_get_event>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f040 8085 	bne.w	8001d20 <StartDefaultTask+0x138>
	 {
		switch(event_id)
 8001c16:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	f200 8083 	bhi.w	8001d26 <StartDefaultTask+0x13e>
 8001c20:	a201      	add	r2, pc, #4	; (adr r2, 8001c28 <StartDefaultTask+0x40>)
 8001c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c26:	bf00      	nop
 8001c28:	08001c39 	.word	0x08001c39
 8001c2c:	08001ca5 	.word	0x08001ca5
 8001c30:	08001ccb 	.word	0x08001ccb
 8001c34:	08001cf1 	.word	0x08001cf1
		{
		 case SEAGLIDER_EVNT_START_RCVD:
		   if(uvp6_sensor1.status!=UVP6_READY) osDelay(2000);
 8001c38:	4b8c      	ldr	r3, [pc, #560]	; (8001e6c <StartDefaultTask+0x284>)
 8001c3a:	7b5b      	ldrb	r3, [r3, #13]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d003      	beq.n	8001c48 <StartDefaultTask+0x60>
 8001c40:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c44:	f003 f98f 	bl	8004f66 <osDelay>
		   if(uvp6_sensor1.status!=UVP6_READY) break;
 8001c48:	4b88      	ldr	r3, [pc, #544]	; (8001e6c <StartDefaultTask+0x284>)
 8001c4a:	7b5b      	ldrb	r3, [r3, #13]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d169      	bne.n	8001d24 <StartDefaultTask+0x13c>
			 memcpy(tmp_str,glider1.date,8);
 8001c50:	4a85      	ldr	r2, [pc, #532]	; (8001e68 <StartDefaultTask+0x280>)
 8001c52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c56:	3213      	adds	r2, #19
 8001c58:	6810      	ldr	r0, [r2, #0]
 8001c5a:	6851      	ldr	r1, [r2, #4]
 8001c5c:	c303      	stmia	r3!, {r0, r1}
			 memcpy(tmp_str+8,",",1);
 8001c5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c62:	3308      	adds	r3, #8
 8001c64:	2201      	movs	r2, #1
 8001c66:	4982      	ldr	r1, [pc, #520]	; (8001e70 <StartDefaultTask+0x288>)
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f005 fb21 	bl	80072b0 <memcpy>
			 memcpy(tmp_str+9,glider1.time,6);
 8001c6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c72:	3309      	adds	r3, #9
 8001c74:	497c      	ldr	r1, [pc, #496]	; (8001e68 <StartDefaultTask+0x280>)
 8001c76:	461a      	mov	r2, r3
 8001c78:	f101 031b 	add.w	r3, r1, #27
 8001c7c:	6819      	ldr	r1, [r3, #0]
 8001c7e:	6011      	str	r1, [r2, #0]
 8001c80:	889b      	ldrh	r3, [r3, #4]
 8001c82:	8093      	strh	r3, [r2, #4]
			 tmp_str[15]=0x00;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			 uvp6_send_cmd(&uvp6_sensor1,UVP6_CMD_START_ACQ,tmp_str);
 8001c8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c8e:	461a      	mov	r2, r3
 8001c90:	2100      	movs	r1, #0
 8001c92:	4876      	ldr	r0, [pc, #472]	; (8001e6c <StartDefaultTask+0x284>)
 8001c94:	f7ff fc02 	bl	800149c <uvp6_send_cmd>
			 seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4872      	ldr	r0, [pc, #456]	; (8001e68 <StartDefaultTask+0x280>)
 8001c9e:	f000 fb7f 	bl	80023a0 <seaglider_send_cmd>
		 break;
 8001ca2:	e040      	b.n	8001d26 <StartDefaultTask+0x13e>
		 case SEAGLIDER_EVNT_STOP_RCVD:
			  uvp6_send_cmd(&uvp6_sensor1,UVP6_CMD_STOP_ACQ,NULL);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4870      	ldr	r0, [pc, #448]	; (8001e6c <StartDefaultTask+0x284>)
 8001caa:	f7ff fbf7 	bl	800149c <uvp6_send_cmd>
			  osDelay(1000);
 8001cae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cb2:	f003 f958 	bl	8004f66 <osDelay>
			  mcu_flash_close(&data_flash,MCU_FLASH_CLEAN_FLAG);
 8001cb6:	496f      	ldr	r1, [pc, #444]	; (8001e74 <StartDefaultTask+0x28c>)
 8001cb8:	486a      	ldr	r0, [pc, #424]	; (8001e64 <StartDefaultTask+0x27c>)
 8001cba:	f000 f9e3 	bl	8002084 <mcu_flash_close>
			  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4869      	ldr	r0, [pc, #420]	; (8001e68 <StartDefaultTask+0x280>)
 8001cc4:	f000 fb6c 	bl	80023a0 <seaglider_send_cmd>
		 break;
 8001cc8:	e02d      	b.n	8001d26 <StartDefaultTask+0x13e>
		 case SEAGLIDER_EVNT_TEST_RCVD:
			  ptr1.start_addr=data_flash.data_pages_addr;
 8001cca:	4b66      	ldr	r3, [pc, #408]	; (8001e64 <StartDefaultTask+0x27c>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	60fb      	str	r3, [r7, #12]
			  ptr1.size=data_flash.flash_state.write_indx;
 8001cd0:	4b64      	ldr	r3, [pc, #400]	; (8001e64 <StartDefaultTask+0x27c>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	613b      	str	r3, [r7, #16]
			  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_SEND_DATA,&ptr1);
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2101      	movs	r1, #1
 8001cde:	4862      	ldr	r0, [pc, #392]	; (8001e68 <StartDefaultTask+0x280>)
 8001ce0:	f000 fb5e 	bl	80023a0 <seaglider_send_cmd>
			  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	485f      	ldr	r0, [pc, #380]	; (8001e68 <StartDefaultTask+0x280>)
 8001cea:	f000 fb59 	bl	80023a0 <seaglider_send_cmd>
		 break;
 8001cee:	e01a      	b.n	8001d26 <StartDefaultTask+0x13e>
		 case SEAGLIDER_EVNT_SEND_TXT_FILE_RCVD:
			  mcu_flash_close(&data_flash,MCU_FLASH_DIRTY_FLAG);
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf4:	485b      	ldr	r0, [pc, #364]	; (8001e64 <StartDefaultTask+0x27c>)
 8001cf6:	f000 f9c5 	bl	8002084 <mcu_flash_close>
			  ptr1.start_addr=data_flash.data_pages_addr;
 8001cfa:	4b5a      	ldr	r3, [pc, #360]	; (8001e64 <StartDefaultTask+0x27c>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	60fb      	str	r3, [r7, #12]
			  ptr1.size=data_flash.flash_state.write_indx;
 8001d00:	4b58      	ldr	r3, [pc, #352]	; (8001e64 <StartDefaultTask+0x27c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	613b      	str	r3, [r7, #16]
			  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_SEND_DATA,&ptr1);
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	4856      	ldr	r0, [pc, #344]	; (8001e68 <StartDefaultTask+0x280>)
 8001d10:	f000 fb46 	bl	80023a0 <seaglider_send_cmd>
			  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	4853      	ldr	r0, [pc, #332]	; (8001e68 <StartDefaultTask+0x280>)
 8001d1a:	f000 fb41 	bl	80023a0 <seaglider_send_cmd>
		 break;
 8001d1e:	e002      	b.n	8001d26 <StartDefaultTask+0x13e>

		}
	 }
 8001d20:	bf00      	nop
 8001d22:	e000      	b.n	8001d26 <StartDefaultTask+0x13e>
		   if(uvp6_sensor1.status!=UVP6_READY) break;
 8001d24:	bf00      	nop

	 //UVP6 tasks

	 if(uvp6_get_event(&uvp6_sensor1,&event_id)==UVP6_F_OK)
 8001d26:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	484f      	ldr	r0, [pc, #316]	; (8001e6c <StartDefaultTask+0x284>)
 8001d2e:	f7ff fc3f 	bl	80015b0 <uvp6_get_event>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f040 808e 	bne.w	8001e56 <StartDefaultTask+0x26e>
	 {
        switch(event_id)
 8001d3a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <StartDefaultTask+0x160>
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d006      	beq.n	8001d54 <StartDefaultTask+0x16c>
 8001d46:	e089      	b.n	8001e5c <StartDefaultTask+0x274>
        {
         case UVP6_EVNT_BOOTED:
        	 seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4846      	ldr	r0, [pc, #280]	; (8001e68 <StartDefaultTask+0x280>)
 8001d4e:	f000 fb27 	bl	80023a0 <seaglider_send_cmd>
         break;
 8001d52:	e083      	b.n	8001e5c <StartDefaultTask+0x274>
         case UVP6_EVNT_LPM_DATA_RCVD:
			//save only every 10 message
			lpm_messages_couter++;
 8001d54:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			lpm_messages_couter=lpm_messages_couter%10;
 8001d5e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8001d62:	4b45      	ldr	r3, [pc, #276]	; (8001e78 <StartDefaultTask+0x290>)
 8001d64:	fba3 1302 	umull	r1, r3, r3, r2
 8001d68:	08d9      	lsrs	r1, r3, #3
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        	//read LPM values
          if(uvp6_sensor1.status==UVP6_ACQ_STARTED && lpm_messages_couter==1)
 8001d78:	4b3c      	ldr	r3, [pc, #240]	; (8001e6c <StartDefaultTask+0x284>)
 8001d7a:	7b5b      	ldrb	r3, [r3, #13]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d16c      	bne.n	8001e5a <StartDefaultTask+0x272>
 8001d80:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d168      	bne.n	8001e5a <StartDefaultTask+0x272>
        	{

        	  y=0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  for(int i=0;i<13;i+=4)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	663b      	str	r3, [r7, #96]	; 0x60
 8001d92:	e034      	b.n	8001dfe <StartDefaultTask+0x216>
			  {
				avg_data[y]=uvp6_sensor1.lpm_data.data[i]+uvp6_sensor1.lpm_data.data[i+1]+uvp6_sensor1.lpm_data.data[i+2]+uvp6_sensor1.lpm_data.data[i+3];
 8001d94:	4a35      	ldr	r2, [pc, #212]	; (8001e6c <StartDefaultTask+0x284>)
 8001d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d98:	330c      	adds	r3, #12
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	89db      	ldrh	r3, [r3, #14]
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001da4:	3301      	adds	r3, #1
 8001da6:	4931      	ldr	r1, [pc, #196]	; (8001e6c <StartDefaultTask+0x284>)
 8001da8:	330c      	adds	r3, #12
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	440b      	add	r3, r1
 8001dae:	89db      	ldrh	r3, [r3, #14]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	4413      	add	r3, r2
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001db8:	3302      	adds	r3, #2
 8001dba:	492c      	ldr	r1, [pc, #176]	; (8001e6c <StartDefaultTask+0x284>)
 8001dbc:	330c      	adds	r3, #12
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	440b      	add	r3, r1
 8001dc2:	89db      	ldrh	r3, [r3, #14]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	b299      	uxth	r1, r3
 8001dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dcc:	3303      	adds	r3, #3
 8001dce:	4a27      	ldr	r2, [pc, #156]	; (8001e6c <StartDefaultTask+0x284>)
 8001dd0:	330c      	adds	r3, #12
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	89db      	ldrh	r3, [r3, #14]
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001dde:	440a      	add	r2, r1
 8001de0:	b292      	uxth	r2, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001de8:	440b      	add	r3, r1
 8001dea:	f823 2c54 	strh.w	r2, [r3, #-84]
				y++;
 8001dee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001df2:	3301      	adds	r3, #1
 8001df4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  for(int i=0;i<13;i+=4)
 8001df8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	663b      	str	r3, [r7, #96]	; 0x60
 8001dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e00:	2b0c      	cmp	r3, #12
 8001e02:	ddc7      	ble.n	8001d94 <StartDefaultTask+0x1ac>
			  }
			avg_data[4]=uvp6_sensor1.lpm_data.data[16]+uvp6_sensor1.lpm_data.data[17];
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <StartDefaultTask+0x284>)
 8001e06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <StartDefaultTask+0x284>)
 8001e0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	4413      	add	r3, r2
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	83bb      	strh	r3, [r7, #28]
			sprintf(avg_str,"%d,%d,%d,%d,%d\n",avg_data[0],avg_data[1],avg_data[2],avg_data[3],avg_data[4]);
 8001e1a:	8abb      	ldrh	r3, [r7, #20]
 8001e1c:	461c      	mov	r4, r3
 8001e1e:	8afb      	ldrh	r3, [r7, #22]
 8001e20:	461d      	mov	r5, r3
 8001e22:	8b3b      	ldrh	r3, [r7, #24]
 8001e24:	8b7a      	ldrh	r2, [r7, #26]
 8001e26:	8bb9      	ldrh	r1, [r7, #28]
 8001e28:	f107 0020 	add.w	r0, r7, #32
 8001e2c:	9102      	str	r1, [sp, #8]
 8001e2e:	9201      	str	r2, [sp, #4]
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	462b      	mov	r3, r5
 8001e34:	4622      	mov	r2, r4
 8001e36:	4911      	ldr	r1, [pc, #68]	; (8001e7c <StartDefaultTask+0x294>)
 8001e38:	f005 fa50 	bl	80072dc <siprintf>
			mcu_flash_write(&data_flash,avg_str,strlen(avg_str));
 8001e3c:	f107 0320 	add.w	r3, r7, #32
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe f9f5 	bl	8000230 <strlen>
 8001e46:	4602      	mov	r2, r0
 8001e48:	f107 0320 	add.w	r3, r7, #32
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4805      	ldr	r0, [pc, #20]	; (8001e64 <StartDefaultTask+0x27c>)
 8001e50:	f000 f86f 	bl	8001f32 <mcu_flash_write>
			//seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
          }
		 break;
 8001e54:	e001      	b.n	8001e5a <StartDefaultTask+0x272>
        }
	 }
 8001e56:	bf00      	nop
 8001e58:	e000      	b.n	8001e5c <StartDefaultTask+0x274>
		 break;
 8001e5a:	bf00      	nop
	 osDelay(1);
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f003 f882 	bl	8004f66 <osDelay>
	 if(seaglider_get_event(&glider1,&event_id)==SEAGLIDER_F_OK)
 8001e62:	e6ce      	b.n	8001c02 <StartDefaultTask+0x1a>
 8001e64:	20008424 	.word	0x20008424
 8001e68:	20007b14 	.word	0x20007b14
 8001e6c:	20007fc4 	.word	0x20007fc4
 8001e70:	0800a6d0 	.word	0x0800a6d0
 8001e74:	fa1205ab 	.word	0xfa1205ab
 8001e78:	cccccccd 	.word	0xcccccccd
 8001e7c:	0800a6d4 	.word	0x0800a6d4

08001e80 <uart_tx_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_tx_f */
void uart_tx_f(void const * argument)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_tx_f */
  /* Infinite loop */
  uint8_t tmp1;
  uint8_t tmp2;
  uvp6_sensor1.media_status=UVP6_MEDIA_READY;
 8001e88:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <uart_tx_f+0x74>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	739a      	strb	r2, [r3, #14]
  glider1.media_status=SEAGLIDER_MEDIA_READY;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <uart_tx_f+0x78>)
 8001e90:	220a      	movs	r2, #10
 8001e92:	735a      	strb	r2, [r3, #13]
  for(;;)
  {
       if(GLIDER_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <uart_tx_f+0x7c>)
 8001e96:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b21      	cmp	r3, #33	; 0x21
 8001e9e:	d00f      	beq.n	8001ec0 <uart_tx_f+0x40>
       {
		if(seaglider_media_get_byte(&glider1,&tmp1)==SEAGLIDER_F_OK)
 8001ea0:	f107 030f 	add.w	r3, r7, #15
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <uart_tx_f+0x78>)
 8001ea8:	f000 fa5f 	bl	800236a <seaglider_media_get_byte>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <uart_tx_f+0x40>
		{
		   HAL_UART_Transmit_IT(&GLIDER_UART,&tmp1,1);
 8001eb2:	f107 030f 	add.w	r3, r7, #15
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4810      	ldr	r0, [pc, #64]	; (8001efc <uart_tx_f+0x7c>)
 8001ebc:	f002 fc45 	bl	800474a <HAL_UART_Transmit_IT>
		}
       }
       if(UVP6_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <uart_tx_f+0x80>)
 8001ec2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b21      	cmp	r3, #33	; 0x21
 8001eca:	d00f      	beq.n	8001eec <uart_tx_f+0x6c>
       {
		if(uvp6_media_get_byte(&uvp6_sensor1,&tmp2)==UVP6_F_OK)
 8001ecc:	f107 030e 	add.w	r3, r7, #14
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4808      	ldr	r0, [pc, #32]	; (8001ef4 <uart_tx_f+0x74>)
 8001ed4:	f7ff fac6 	bl	8001464 <uvp6_media_get_byte>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d106      	bne.n	8001eec <uart_tx_f+0x6c>
		{
		   HAL_UART_Transmit_IT(&UVP6_UART,&tmp2,1);
 8001ede:	f107 030e 	add.w	r3, r7, #14
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4806      	ldr	r0, [pc, #24]	; (8001f00 <uart_tx_f+0x80>)
 8001ee8:	f002 fc2f 	bl	800474a <HAL_UART_Transmit_IT>
		}
       }
    osDelay(1);
 8001eec:	2001      	movs	r0, #1
 8001eee:	f003 f83a 	bl	8004f66 <osDelay>
       if(GLIDER_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8001ef2:	e7cf      	b.n	8001e94 <uart_tx_f+0x14>
 8001ef4:	20007fc4 	.word	0x20007fc4
 8001ef8:	20007b14 	.word	0x20007b14
 8001efc:	20007f84 	.word	0x20007f84
 8001f00:	20007f44 	.word	0x20007f44

08001f04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f16:	f000 fe19 	bl	8002b4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40012c00 	.word	0x40012c00

08001f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f2c:	b672      	cpsid	i
}
 8001f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <Error_Handler+0x8>

08001f32 <mcu_flash_write>:
extern UART_HandleTypeDef huart1;
//HAL_UART_Transmit(&huart1,msg,strlen(msg),100)


void mcu_flash_write(mcu_flash* mcu_flash_obj,uint8_t* data, uint32_t datalen)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
	if((mcu_flash_obj->flash_state.write_indx+datalen)<FLASH_BUFFER_SIZE)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8001f4a:	d210      	bcs.n	8001f6e <mcu_flash_write+0x3c>
	{
		memcpy(mcu_flash_obj->buffer+mcu_flash_obj->flash_state.write_indx,data,datalen);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f103 0214 	add.w	r2, r3, #20
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	68b9      	ldr	r1, [r7, #8]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f005 f9a7 	bl	80072b0 <memcpy>
		mcu_flash_obj->flash_state.write_indx=mcu_flash_obj->flash_state.write_indx+datalen;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	441a      	add	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	605a      	str	r2, [r3, #4]
	}
}
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <mcu_flash_init>:



void mcu_flash_init(mcu_flash* mcu_flash_obj,uint32_t start_page)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]
	mcu_flash_obj->sys_page_addr=FLASH_BASE+(start_page*FLASH_PAGE_SIZE);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001f86:	02da      	lsls	r2, r3, #11
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
	mcu_flash_obj->data_pages_addr=mcu_flash_obj->sys_page_addr+FLASH_PAGE_SIZE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	60da      	str	r2, [r3, #12]
	mcu_flash_obj->num_of_pages=(FLASH_BUFFER_SIZE/FLASH_PAGE_SIZE)+1;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f042 0206 	orr.w	r2, r2, #6
 8001fa0:	741a      	strb	r2, [r3, #16]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	745a      	strb	r2, [r3, #17]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	749a      	strb	r2, [r3, #18]
 8001faa:	2200      	movs	r2, #0
 8001fac:	74da      	strb	r2, [r3, #19]
	mcu_flash_obj->flash_state.flag=MCU_FLASH_CLEAN_FLAG;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f062 0254 	orn	r2, r2, #84	; 0x54
 8001fb6:	701a      	strb	r2, [r3, #0]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f042 0205 	orr.w	r2, r2, #5
 8001fbe:	705a      	strb	r2, [r3, #1]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f042 0212 	orr.w	r2, r2, #18
 8001fc6:	709a      	strb	r2, [r3, #2]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f062 0205 	orn	r2, r2, #5
 8001fce:	70da      	strb	r2, [r3, #3]
	mcu_flash_obj->flash_state.write_indx=0;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	711a      	strb	r2, [r3, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	715a      	strb	r2, [r3, #5]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	719a      	strb	r2, [r3, #6]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	71da      	strb	r2, [r3, #7]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <mcu_flash_open>:

void mcu_flash_open(mcu_flash* mcu_flash_obj)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

	memcpy((uint8_t*)&(mcu_flash_obj->flash_state),(uint8_t*)mcu_flash_obj->sys_page_addr,sizeof(flash_state_str));
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f005 f957 	bl	80072b0 <memcpy>
	HAL_UART_Transmit(&huart1,&(mcu_flash_obj->flash_state.flag),4,100);
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	2364      	movs	r3, #100	; 0x64
 8002006:	2204      	movs	r2, #4
 8002008:	481c      	ldr	r0, [pc, #112]	; (800207c <mcu_flash_open+0x90>)
 800200a:	f002 fb0c 	bl	8004626 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,&(mcu_flash_obj->flash_state.write_indx),4,100);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	1d19      	adds	r1, r3, #4
 8002012:	2364      	movs	r3, #100	; 0x64
 8002014:	2204      	movs	r2, #4
 8002016:	4819      	ldr	r0, [pc, #100]	; (800207c <mcu_flash_open+0x90>)
 8002018:	f002 fb05 	bl	8004626 <HAL_UART_Transmit>
	if(mcu_flash_obj->flash_state.flag!=MCU_FLASH_CLEAN_FLAG)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a17      	ldr	r2, [pc, #92]	; (8002080 <mcu_flash_open+0x94>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d01a      	beq.n	800205c <mcu_flash_open+0x70>
	{
	  mcu_flash_obj->flash_state.flag=MCU_FLASH_CLEAN_FLAG;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f062 0254 	orn	r2, r2, #84	; 0x54
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	2200      	movs	r2, #0
 8002032:	f042 0205 	orr.w	r2, r2, #5
 8002036:	705a      	strb	r2, [r3, #1]
 8002038:	2200      	movs	r2, #0
 800203a:	f042 0212 	orr.w	r2, r2, #18
 800203e:	709a      	strb	r2, [r3, #2]
 8002040:	2200      	movs	r2, #0
 8002042:	f062 0205 	orn	r2, r2, #5
 8002046:	70da      	strb	r2, [r3, #3]
	  mcu_flash_obj->flash_state.write_indx=0;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	711a      	strb	r2, [r3, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	715a      	strb	r2, [r3, #5]
 8002052:	2200      	movs	r2, #0
 8002054:	719a      	strb	r2, [r3, #6]
 8002056:	2200      	movs	r2, #0
 8002058:	71da      	strb	r2, [r3, #7]
	{
	 memcpy(mcu_flash_obj->buffer,(uint8_t*)mcu_flash_obj->data_pages_addr,mcu_flash_obj->flash_state.write_indx);
	}


}
 800205a:	e00a      	b.n	8002072 <mcu_flash_open+0x86>
	 memcpy(mcu_flash_obj->buffer,(uint8_t*)mcu_flash_obj->data_pages_addr,mcu_flash_obj->flash_state.write_indx);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f103 0014 	add.w	r0, r3, #20
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	4619      	mov	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	461a      	mov	r2, r3
 800206e:	f005 f91f 	bl	80072b0 <memcpy>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20007f84 	.word	0x20007f84
 8002080:	fa1205ab 	.word	0xfa1205ab

08002084 <mcu_flash_close>:
void mcu_flash_close(mcu_flash* mcu_flash_obj,uint32_t flag)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08c      	sub	sp, #48	; 0x30
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
	mcu_flash_obj->flash_state.flag=flag;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	601a      	str	r2, [r3, #0]
	uint32_t start_addr=mcu_flash_obj->sys_page_addr;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_FLASH_Unlock();
 800209a:	f000 ffcb 	bl	8003034 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef erase_info = {
 800209e:	f107 030c 	add.w	r3, r7, #12
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	617b      	str	r3, [r7, #20]
		.TypeErase = FLASH_TYPEERASE_PAGES,
		.PageAddress = start_addr ,
		.NbPages = mcu_flash_obj->num_of_pages,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
	FLASH_EraseInitTypeDef erase_info = {
 80020b4:	61bb      	str	r3, [r7, #24]
	};

	uint32_t pgerr = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&erase_info, &pgerr);
 80020ba:	f107 0208 	add.w	r2, r7, #8
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f001 f89d 	bl	8003204 <HAL_FLASHEx_Erase>

	if(pgerr != 0xFFFFFFFFul)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d002      	beq.n	80020d8 <mcu_flash_close+0x54>
	{
		HAL_FLASH_Lock();
 80020d2:	f000 ffd5 	bl	8003080 <HAL_FLASH_Lock>
 80020d6:	e060      	b.n	800219a <mcu_flash_close+0x116>
		return ;
	}

	uint32_t i=0;
 80020d8:	2300      	movs	r3, #0
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t tmp;
	uint8_t* data=(uint8_t*)&(mcu_flash_obj->flash_state);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	623b      	str	r3, [r7, #32]
    uint32_t datalen=sizeof(flash_state_str);
 80020e0:	2308      	movs	r3, #8
 80020e2:	61fb      	str	r3, [r7, #28]
	while(i<datalen)
 80020e4:	e021      	b.n	800212a <mcu_flash_close+0xa6>
	{
        tmp=(tmp&0x0000)|(data[i]&0x00FF);
 80020e6:	6a3a      	ldr	r2, [r7, #32]
 80020e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ea:	4413      	add	r3, r2
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	857b      	strh	r3, [r7, #42]	; 0x2a
		if((i+1)<datalen) tmp=tmp|(data[i+1]<<8&0xFF00);
 80020f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f2:	3301      	adds	r3, #1
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d90b      	bls.n	8002112 <mcu_flash_close+0x8e>
 80020fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fc:	3301      	adds	r3, #1
 80020fe:	6a3a      	ldr	r2, [r7, #32]
 8002100:	4413      	add	r3, r2
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	b21a      	sxth	r2, r3
 8002108:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800210c:	4313      	orrs	r3, r2
 800210e:	b21b      	sxth	r3, r3
 8002110:	857b      	strh	r3, [r7, #42]	; 0x2a
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,start_addr+i,tmp);
 8002112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002116:	18d1      	adds	r1, r2, r3
 8002118:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	2001      	movs	r0, #1
 8002120:	f000 ff18 	bl	8002f54 <HAL_FLASH_Program>
		i=i+2;
 8002124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002126:	3302      	adds	r3, #2
 8002128:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(i<datalen)
 800212a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	429a      	cmp	r2, r3
 8002130:	d3d9      	bcc.n	80020e6 <mcu_flash_close+0x62>
	}

	i=0;
 8002132:	2300      	movs	r3, #0
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c
	start_addr=mcu_flash_obj->data_pages_addr;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
	data=mcu_flash_obj->buffer;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3314      	adds	r3, #20
 8002140:	623b      	str	r3, [r7, #32]
	datalen=mcu_flash_obj->flash_state.write_indx;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	61fb      	str	r3, [r7, #28]
	while(i<datalen)
 8002148:	e021      	b.n	800218e <mcu_flash_close+0x10a>
	{
        tmp=(tmp&0x0000)|(data[i]&0x00FF);
 800214a:	6a3a      	ldr	r2, [r7, #32]
 800214c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214e:	4413      	add	r3, r2
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	857b      	strh	r3, [r7, #42]	; 0x2a
		if((i+1)<datalen) tmp=tmp|(data[i+1]<<8&0xFF00);
 8002154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002156:	3301      	adds	r3, #1
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	429a      	cmp	r2, r3
 800215c:	d90b      	bls.n	8002176 <mcu_flash_close+0xf2>
 800215e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002160:	3301      	adds	r3, #1
 8002162:	6a3a      	ldr	r2, [r7, #32]
 8002164:	4413      	add	r3, r2
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	021b      	lsls	r3, r3, #8
 800216a:	b21a      	sxth	r2, r3
 800216c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002170:	4313      	orrs	r3, r2
 8002172:	b21b      	sxth	r3, r3
 8002174:	857b      	strh	r3, [r7, #42]	; 0x2a
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,start_addr+i,tmp);
 8002176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217a:	18d1      	adds	r1, r2, r3
 800217c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	2001      	movs	r0, #1
 8002184:	f000 fee6 	bl	8002f54 <HAL_FLASH_Program>
		i=i+2;
 8002188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218a:	3302      	adds	r3, #2
 800218c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(i<datalen)
 800218e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	429a      	cmp	r2, r3
 8002194:	d3d9      	bcc.n	800214a <mcu_flash_close+0xc6>
	}


	HAL_FLASH_Lock();
 8002196:	f000 ff73 	bl	8003080 <HAL_FLASH_Lock>
}
 800219a:	3730      	adds	r7, #48	; 0x30
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <seaglider_init>:

const char* seaglider_commands_strings[]={"UV>\r"};


void seaglider_init(seaglider* seaglider_obj)
{
 80021a0:	b5b0      	push	{r4, r5, r7, lr}
 80021a2:	b096      	sub	sp, #88	; 0x58
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

	seaglider_messages_init(seaglider_obj);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f98b 	bl	80024c4 <seaglider_messages_init>


	osMessageQDef(seaglider_events_q, 20, uint8_t);
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <seaglider_init+0x90>)
 80021b0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80021b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	seaglider_obj->events_q= osMessageCreate(osMessageQ(seaglider_events_q), NULL);
 80021ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f002 fee4 	bl	8004f8e <osMessageCreate>
 80021c6:	4602      	mov	r2, r0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	609a      	str	r2, [r3, #8]

	osMessageQDef(seaglider_media_rx_q, 20, uint16_t);
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <seaglider_init+0x94>)
 80021ce:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80021d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	seaglider_obj->media_rx_messages_q= osMessageCreate(osMessageQ(seaglider_media_rx_q), NULL);
 80021d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f002 fed5 	bl	8004f8e <osMessageCreate>
 80021e4:	4602      	mov	r2, r0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	601a      	str	r2, [r3, #0]

	osMessageQDef(seaglider_media_tx_q, 200, uint8_t);
 80021ea:	4b13      	ldr	r3, [pc, #76]	; (8002238 <seaglider_init+0x98>)
 80021ec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80021f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	seaglider_obj->media_tx_q = osMessageCreate(osMessageQ(seaglider_media_tx_q), NULL);
 80021f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f002 fec6 	bl	8004f8e <osMessageCreate>
 8002202:	4602      	mov	r2, r0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	605a      	str	r2, [r3, #4]

	osThreadDef(seaglider_task, seaglider_loop, osPriorityNormal, 0, 128);
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <seaglider_init+0x9c>)
 800220a:	f107 040c 	add.w	r4, r7, #12
 800220e:	461d      	mov	r5, r3
 8002210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002214:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(seaglider_task), seaglider_obj);
 800221c:	f107 030c 	add.w	r3, r7, #12
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4618      	mov	r0, r3
 8002224:	f002 fe53 	bl	8004ece <osThreadCreate>


}
 8002228:	bf00      	nop
 800222a:	3758      	adds	r7, #88	; 0x58
 800222c:	46bd      	mov	sp, r7
 800222e:	bdb0      	pop	{r4, r5, r7, pc}
 8002230:	0800a6fc 	.word	0x0800a6fc
 8002234:	0800a70c 	.word	0x0800a70c
 8002238:	0800a71c 	.word	0x0800a71c
 800223c:	0800a72c 	.word	0x0800a72c

08002240 <seaglider_loop>:


void seaglider_loop(seaglider* seaglider_obj)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	 uint16_t msg_indx;
	 for(;;)
	 {
		//test loopback
		if(xQueueReceive(seaglider_obj->media_rx_messages_q,&msg_indx,0))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f107 010a 	add.w	r1, r7, #10
 8002250:	2200      	movs	r2, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f003 fafa 	bl	800584c <xQueueReceive>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f4      	beq.n	8002248 <seaglider_loop+0x8>
		{   uint8_t* msg=seaglider_obj->rx_buffer+msg_indx;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3321      	adds	r3, #33	; 0x21
 8002262:	897a      	ldrh	r2, [r7, #10]
 8002264:	4413      	add	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
			seaglider_parse_message(seaglider_obj,msg);
 8002268:	68f9      	ldr	r1, [r7, #12]
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f8f6 	bl	800245c <seaglider_parse_message>
		if(xQueueReceive(seaglider_obj->media_rx_messages_q,&msg_indx,0))
 8002270:	e7ea      	b.n	8002248 <seaglider_loop+0x8>

08002272 <seaglider_media_process_byte>:

}


void seaglider_media_process_byte(seaglider* seaglider_obj,uint8_t rx_byte)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	70fb      	strb	r3, [r7, #3]
	if(seaglider_obj->media_status==SEAGLIDER_MEDIA_READY)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	7b5b      	ldrb	r3, [r3, #13]
 8002282:	2b0a      	cmp	r3, #10
 8002284:	d15f      	bne.n	8002346 <seaglider_media_process_byte+0xd4>
	{
		seaglider_obj->rx_buffer[seaglider_obj->rx_buffer_indx]=rx_byte;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f8b3 3421 	ldrh.w	r3, [r3, #1057]	; 0x421
 800228c:	b29b      	uxth	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4413      	add	r3, r2
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		if(rx_byte=='\r')
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	2b0d      	cmp	r3, #13
 800229e:	d133      	bne.n	8002308 <seaglider_media_process_byte+0x96>
		{
			seaglider_obj->rx_buffer[seaglider_obj->rx_buffer_indx]=0x00;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f8b3 3421 	ldrh.w	r3, [r3, #1057]	; 0x421
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			osMessagePut(seaglider_obj->media_rx_messages_q,seaglider_obj->rx_buffer_new_string_indx,1);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f8b3 3423 	ldrh.w	r3, [r3, #1059]	; 0x423
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2201      	movs	r2, #1
 80022c2:	4619      	mov	r1, r3
 80022c4:	f002 fe8c 	bl	8004fe0 <osMessagePut>
			if(seaglider_obj->rx_buffer_indx>SEAGLIDER_RX_BUFFER_THR) seaglider_obj->rx_buffer_indx=0;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f8b3 3421 	ldrh.w	r3, [r3, #1057]	; 0x421
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022d4:	d907      	bls.n	80022e6 <seaglider_media_process_byte+0x74>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
 80022e4:	e008      	b.n	80022f8 <seaglider_media_process_byte+0x86>
			else  seaglider_obj->rx_buffer_indx++;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f8b3 3421 	ldrh.w	r3, [r3, #1057]	; 0x421
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3301      	adds	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f8a3 2421 	strh.w	r2, [r3, #1057]	; 0x421
			seaglider_obj->rx_buffer_new_string_indx=seaglider_obj->rx_buffer_indx;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f8b3 3421 	ldrh.w	r3, [r3, #1057]	; 0x421
 80022fe:	b29a      	uxth	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f8a3 2423 	strh.w	r2, [r3, #1059]	; 0x423
 8002306:	e008      	b.n	800231a <seaglider_media_process_byte+0xa8>
		}
		else seaglider_obj->rx_buffer_indx++;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8b3 3421 	ldrh.w	r3, [r3, #1057]	; 0x421
 800230e:	b29b      	uxth	r3, r3
 8002310:	3301      	adds	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8a3 2421 	strh.w	r2, [r3, #1057]	; 0x421
		if(seaglider_obj->rx_buffer_indx==SEAGLIDER_RX_BUFFER_SIZE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8b3 3421 	ldrh.w	r3, [r3, #1057]	; 0x421
 8002320:	b29b      	uxth	r3, r3
 8002322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002326:	d11c      	bne.n	8002362 <seaglider_media_process_byte+0xf0>
		{
			seaglider_obj->rx_buffer_indx=0;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
			seaglider_obj->rx_buffer_new_string_indx=seaglider_obj->rx_buffer_indx;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f8b3 3421 	ldrh.w	r3, [r3, #1057]	; 0x421
 800233c:	b29a      	uxth	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f8a3 2423 	strh.w	r2, [r3, #1059]	; 0x423
	else
	{
		seaglider_obj->rx_buffer_indx=0;
		seaglider_obj->rx_buffer_new_string_indx=seaglider_obj->rx_buffer_indx;
	}
}
 8002344:	e00d      	b.n	8002362 <seaglider_media_process_byte+0xf0>
		seaglider_obj->rx_buffer_indx=0;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
		seaglider_obj->rx_buffer_new_string_indx=seaglider_obj->rx_buffer_indx;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f8b3 3421 	ldrh.w	r3, [r3, #1057]	; 0x421
 800235a:	b29a      	uxth	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f8a3 2423 	strh.w	r2, [r3, #1059]	; 0x423
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <seaglider_media_get_byte>:

uint8_t seaglider_media_get_byte(seaglider* seaglider_obj,uint8_t* tx_byte)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(seaglider_obj->media_tx_q,0);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6859      	ldr	r1, [r3, #4]
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	2200      	movs	r2, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f002 fe6e 	bl	8005060 <osMessageGet>
	if(res.status==osEventMessage)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b10      	cmp	r3, #16
 8002388:	d105      	bne.n	8002396 <seaglider_media_get_byte+0x2c>
    {
		*tx_byte=res.value.v;
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	b2da      	uxtb	r2, r3
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	701a      	strb	r2, [r3, #0]
		return SEAGLIDER_F_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	e000      	b.n	8002398 <seaglider_media_get_byte+0x2e>
    }
  return SEAGLIDER_F_ERR;
 8002396:	2301      	movs	r3, #1
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <seaglider_send_cmd>:


void seaglider_send_cmd(seaglider* seaglider_obj,uint8_t cmd_id,void* arg)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	460b      	mov	r3, r1
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	72fb      	strb	r3, [r7, #11]
 memory_region_pointer* ptr1;
 switch(cmd_id)
 80023ae:	7afb      	ldrb	r3, [r7, #11]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <seaglider_send_cmd+0x1a>
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d01b      	beq.n	80023f0 <seaglider_send_cmd+0x50>
		   osMessagePut(seaglider_obj->media_tx_q,*((uint8_t*)(ptr1->start_addr)+i),osWaitForever);
	   }
     break;
 }

}
 80023b8:	e034      	b.n	8002424 <seaglider_send_cmd+0x84>
  	   for(int i=0;i<strlen(seaglider_commands_strings[SEAGLIDER_CMD_PROMPT]);i++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e00d      	b.n	80023dc <seaglider_send_cmd+0x3c>
  		   osMessagePut(seaglider_obj->media_tx_q,*(seaglider_commands_strings[SEAGLIDER_CMD_PROMPT]+i),1);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6858      	ldr	r0, [r3, #4]
 80023c4:	4b19      	ldr	r3, [pc, #100]	; (800242c <seaglider_send_cmd+0x8c>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	4413      	add	r3, r2
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2201      	movs	r2, #1
 80023d0:	4619      	mov	r1, r3
 80023d2:	f002 fe05 	bl	8004fe0 <osMessagePut>
  	   for(int i=0;i<strlen(seaglider_commands_strings[SEAGLIDER_CMD_PROMPT]);i++)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3301      	adds	r3, #1
 80023da:	61fb      	str	r3, [r7, #28]
 80023dc:	4b13      	ldr	r3, [pc, #76]	; (800242c <seaglider_send_cmd+0x8c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fd ff25 	bl	8000230 <strlen>
 80023e6:	4602      	mov	r2, r0
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d8e8      	bhi.n	80023c0 <seaglider_send_cmd+0x20>
	 break;
 80023ee:	e019      	b.n	8002424 <seaglider_send_cmd+0x84>
       ptr1=arg;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	617b      	str	r3, [r7, #20]
       for(int i=0;i<ptr1->size;i++)
 80023f4:	2300      	movs	r3, #0
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	e00e      	b.n	8002418 <seaglider_send_cmd+0x78>
		   osMessagePut(seaglider_obj->media_tx_q,*((uint8_t*)(ptr1->start_addr)+i),osWaitForever);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6858      	ldr	r0, [r3, #4]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4413      	add	r3, r2
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	f04f 32ff 	mov.w	r2, #4294967295
 800240c:	4619      	mov	r1, r3
 800240e:	f002 fde7 	bl	8004fe0 <osMessagePut>
       for(int i=0;i<ptr1->size;i++)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	3301      	adds	r3, #1
 8002416:	61bb      	str	r3, [r7, #24]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	429a      	cmp	r2, r3
 8002420:	d8eb      	bhi.n	80023fa <seaglider_send_cmd+0x5a>
     break;
 8002422:	bf00      	nop
}
 8002424:	bf00      	nop
 8002426:	3720      	adds	r7, #32
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	2000000c 	.word	0x2000000c

08002430 <seaglider_get_event>:

uint8_t seaglider_get_event(seaglider* seaglider_obj,uint8_t* event)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
	if(xQueueReceive(seaglider_obj->events_q,event,1))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2201      	movs	r2, #1
 8002440:	6839      	ldr	r1, [r7, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f003 fa02 	bl	800584c <xQueueReceive>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <seaglider_get_event+0x22>
	{
     return SEAGLIDER_F_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	e000      	b.n	8002454 <seaglider_get_event+0x24>
	}
	return SEAGLIDER_F_ERR;
 8002452:	2301      	movs	r3, #1
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <seaglider_parse_message>:


int seaglider_parse_message(seaglider* seaglider_obj,uint8_t* msg)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
 uint8_t* tmp_ptr;
 for(int i=0;i<SEAGLIDER_MSG_NUM_OF_FUNCTIONS;i++)
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	e01e      	b.n	80024aa <seaglider_parse_message+0x4e>
 {
	  tmp_ptr=0;
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]
	  tmp_ptr=strstr(msg,seaglider_messages_strings[i]);
 8002470:	4a12      	ldr	r2, [pc, #72]	; (80024bc <seaglider_parse_message+0x60>)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002478:	4619      	mov	r1, r3
 800247a:	6838      	ldr	r0, [r7, #0]
 800247c:	f004 ff5d 	bl	800733a <strstr>
 8002480:	60b8      	str	r0, [r7, #8]
	  if(tmp_ptr)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00d      	beq.n	80024a4 <seaglider_parse_message+0x48>
		{
			if(seaglider_functions[i](seaglider_obj,msg)==SEAGLIDER_F_OK) return SEAGLIDER_F_OK;
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <seaglider_parse_message+0x64>)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002490:	6839      	ldr	r1, [r7, #0]
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	4798      	blx	r3
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <seaglider_parse_message+0x44>
 800249c:	2300      	movs	r3, #0
 800249e:	e008      	b.n	80024b2 <seaglider_parse_message+0x56>
      else return SEAGLIDER_F_ERR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e006      	b.n	80024b2 <seaglider_parse_message+0x56>
 for(int i=0;i<SEAGLIDER_MSG_NUM_OF_FUNCTIONS;i++)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3301      	adds	r3, #1
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b06      	cmp	r3, #6
 80024ae:	dddd      	ble.n	800246c <seaglider_parse_message+0x10>
		}

 }
 return SEAGLIDER_F_ERR;
 80024b0:	2301      	movs	r3, #1
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	2000ac58 	.word	0x2000ac58
 80024c0:	2000ac38 	.word	0x2000ac38

080024c4 <seaglider_messages_init>:

void seaglider_messages_init(seaglider* seaglider_obj)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	seaglider_functions[SEAGLIDER_MSG_DEPTH] = SEAGLIDER_MSG_DEPTH_f;
 80024cc:	4b17      	ldr	r3, [pc, #92]	; (800252c <seaglider_messages_init+0x68>)
 80024ce:	4a18      	ldr	r2, [pc, #96]	; (8002530 <seaglider_messages_init+0x6c>)
 80024d0:	601a      	str	r2, [r3, #0]
	seaglider_functions[SEAGLIDER_MSG_STOP] = SEAGLIDER_MSG_STOP_f;
 80024d2:	4b16      	ldr	r3, [pc, #88]	; (800252c <seaglider_messages_init+0x68>)
 80024d4:	4a17      	ldr	r2, [pc, #92]	; (8002534 <seaglider_messages_init+0x70>)
 80024d6:	605a      	str	r2, [r3, #4]
	seaglider_functions[SEAGLIDER_MSG_SEND_TXT_FILE] = SEAGLIDER_MSG_SEND_TXT_FILE_f;
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <seaglider_messages_init+0x68>)
 80024da:	4a17      	ldr	r2, [pc, #92]	; (8002538 <seaglider_messages_init+0x74>)
 80024dc:	609a      	str	r2, [r3, #8]
	seaglider_functions[SEAGLIDER_MSG_START] = SEAGLIDER_MSG_START_f;
 80024de:	4b13      	ldr	r3, [pc, #76]	; (800252c <seaglider_messages_init+0x68>)
 80024e0:	4a16      	ldr	r2, [pc, #88]	; (800253c <seaglider_messages_init+0x78>)
 80024e2:	60da      	str	r2, [r3, #12]
	seaglider_functions[SEAGLIDER_MSG_SEND_INFO] =SEAGLIDER_MSG_SEND_INFO_f;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <seaglider_messages_init+0x68>)
 80024e6:	4a16      	ldr	r2, [pc, #88]	; (8002540 <seaglider_messages_init+0x7c>)
 80024e8:	611a      	str	r2, [r3, #16]
	seaglider_functions[SEAGLIDER_MSG_RESET] =SEAGLIDER_MSG_RESET_f;
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <seaglider_messages_init+0x68>)
 80024ec:	4a15      	ldr	r2, [pc, #84]	; (8002544 <seaglider_messages_init+0x80>)
 80024ee:	615a      	str	r2, [r3, #20]
	seaglider_functions[SEAGLIDER_MSG_TEST] =SEAGLIDER_MSG_TEST_f;
 80024f0:	4b0e      	ldr	r3, [pc, #56]	; (800252c <seaglider_messages_init+0x68>)
 80024f2:	4a15      	ldr	r2, [pc, #84]	; (8002548 <seaglider_messages_init+0x84>)
 80024f4:	619a      	str	r2, [r3, #24]

	seaglider_messages_strings[SEAGLIDER_MSG_DEPTH] = "DEPTH";
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <seaglider_messages_init+0x88>)
 80024f8:	4a15      	ldr	r2, [pc, #84]	; (8002550 <seaglider_messages_init+0x8c>)
 80024fa:	601a      	str	r2, [r3, #0]
	seaglider_messages_strings[SEAGLIDER_MSG_STOP] = "STOP";
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <seaglider_messages_init+0x88>)
 80024fe:	4a15      	ldr	r2, [pc, #84]	; (8002554 <seaglider_messages_init+0x90>)
 8002500:	605a      	str	r2, [r3, #4]
	seaglider_messages_strings[SEAGLIDER_MSG_SEND_TXT_FILE] = "SEND_TXT_FILE";
 8002502:	4b12      	ldr	r3, [pc, #72]	; (800254c <seaglider_messages_init+0x88>)
 8002504:	4a14      	ldr	r2, [pc, #80]	; (8002558 <seaglider_messages_init+0x94>)
 8002506:	609a      	str	r2, [r3, #8]
	seaglider_messages_strings[SEAGLIDER_MSG_START] = "START";
 8002508:	4b10      	ldr	r3, [pc, #64]	; (800254c <seaglider_messages_init+0x88>)
 800250a:	4a14      	ldr	r2, [pc, #80]	; (800255c <seaglider_messages_init+0x98>)
 800250c:	60da      	str	r2, [r3, #12]
	seaglider_messages_strings[SEAGLIDER_MSG_SEND_INFO] ="SEND_INFO";
 800250e:	4b0f      	ldr	r3, [pc, #60]	; (800254c <seaglider_messages_init+0x88>)
 8002510:	4a13      	ldr	r2, [pc, #76]	; (8002560 <seaglider_messages_init+0x9c>)
 8002512:	611a      	str	r2, [r3, #16]
	seaglider_messages_strings[SEAGLIDER_MSG_RESET] ="RESET";
 8002514:	4b0d      	ldr	r3, [pc, #52]	; (800254c <seaglider_messages_init+0x88>)
 8002516:	4a13      	ldr	r2, [pc, #76]	; (8002564 <seaglider_messages_init+0xa0>)
 8002518:	615a      	str	r2, [r3, #20]
	seaglider_messages_strings[SEAGLIDER_MSG_TEST] ="TEST";
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <seaglider_messages_init+0x88>)
 800251c:	4a12      	ldr	r2, [pc, #72]	; (8002568 <seaglider_messages_init+0xa4>)
 800251e:	619a      	str	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	2000ac38 	.word	0x2000ac38
 8002530:	0800256d 	.word	0x0800256d
 8002534:	08002583 	.word	0x08002583
 8002538:	08002609 	.word	0x08002609
 800253c:	080025a5 	.word	0x080025a5
 8002540:	0800262b 	.word	0x0800262b
 8002544:	08002641 	.word	0x08002641
 8002548:	08002657 	.word	0x08002657
 800254c:	2000ac58 	.word	0x2000ac58
 8002550:	0800a748 	.word	0x0800a748
 8002554:	0800a750 	.word	0x0800a750
 8002558:	0800a758 	.word	0x0800a758
 800255c:	0800a768 	.word	0x0800a768
 8002560:	0800a770 	.word	0x0800a770
 8002564:	0800a77c 	.word	0x0800a77c
 8002568:	0800a784 	.word	0x0800a784

0800256c <SEAGLIDER_MSG_DEPTH_f>:


int SEAGLIDER_MSG_DEPTH_f(seaglider* seaglider_obj,uint8_t* msg)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
	return SEAGLIDER_F_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <SEAGLIDER_MSG_STOP_f>:
int SEAGLIDER_MSG_STOP_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_STOP_RCVD,1);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2201      	movs	r2, #1
 8002592:	2101      	movs	r1, #1
 8002594:	4618      	mov	r0, r3
 8002596:	f002 fd23 	bl	8004fe0 <osMessagePut>
	return SEAGLIDER_F_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <SEAGLIDER_MSG_START_f>:
int SEAGLIDER_MSG_START_f(seaglider* seaglider_obj,uint8_t* msg)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg," ");//header
 80025ae:	4914      	ldr	r1, [pc, #80]	; (8002600 <SEAGLIDER_MSG_START_f+0x5c>)
 80025b0:	6838      	ldr	r0, [r7, #0]
 80025b2:	f005 fd43 	bl	800803c <strtok>
 80025b6:	60f8      	str	r0, [r7, #12]
	pch = strtok (NULL,",:");//date
 80025b8:	4912      	ldr	r1, [pc, #72]	; (8002604 <SEAGLIDER_MSG_START_f+0x60>)
 80025ba:	2000      	movs	r0, #0
 80025bc:	f005 fd3e 	bl	800803c <strtok>
 80025c0:	60f8      	str	r0, [r7, #12]
	memcpy(seaglider_obj->date,pch,8);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3313      	adds	r3, #19
 80025c6:	2208      	movs	r2, #8
 80025c8:	68f9      	ldr	r1, [r7, #12]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f004 fe70 	bl	80072b0 <memcpy>
	pch = strtok (NULL,",:");//time
 80025d0:	490c      	ldr	r1, [pc, #48]	; (8002604 <SEAGLIDER_MSG_START_f+0x60>)
 80025d2:	2000      	movs	r0, #0
 80025d4:	f005 fd32 	bl	800803c <strtok>
 80025d8:	60f8      	str	r0, [r7, #12]
	memcpy(seaglider_obj->time,pch,6);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	331b      	adds	r3, #27
 80025de:	2206      	movs	r2, #6
 80025e0:	68f9      	ldr	r1, [r7, #12]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f004 fe64 	bl	80072b0 <memcpy>

	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_START_RCVD,1);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2201      	movs	r2, #1
 80025ee:	2100      	movs	r1, #0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f002 fcf5 	bl	8004fe0 <osMessagePut>
	return SEAGLIDER_F_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	0800a78c 	.word	0x0800a78c
 8002604:	0800a790 	.word	0x0800a790

08002608 <SEAGLIDER_MSG_SEND_TXT_FILE_f>:
int SEAGLIDER_MSG_SEND_TXT_FILE_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_SEND_TXT_FILE_RCVD,1);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2201      	movs	r2, #1
 8002618:	2103      	movs	r1, #3
 800261a:	4618      	mov	r0, r3
 800261c:	f002 fce0 	bl	8004fe0 <osMessagePut>
	return SEAGLIDER_F_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <SEAGLIDER_MSG_SEND_INFO_f>:
int SEAGLIDER_MSG_SEND_INFO_f(seaglider* seaglider_obj,uint8_t* msg)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
	return SEAGLIDER_F_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <SEAGLIDER_MSG_RESET_f>:
int SEAGLIDER_MSG_RESET_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
	return SEAGLIDER_F_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <SEAGLIDER_MSG_TEST_f>:
int SEAGLIDER_MSG_TEST_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_TEST_RCVD,1);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2201      	movs	r2, #1
 8002666:	2102      	movs	r1, #2
 8002668:	4618      	mov	r0, r3
 800266a:	f002 fcb9 	bl	8004fe0 <osMessagePut>
	return SEAGLIDER_F_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800267e:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <HAL_MspInit+0x68>)
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	4a17      	ldr	r2, [pc, #92]	; (80026e0 <HAL_MspInit+0x68>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6193      	str	r3, [r2, #24]
 800268a:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_MspInit+0x68>)
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_MspInit+0x68>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	4a11      	ldr	r2, [pc, #68]	; (80026e0 <HAL_MspInit+0x68>)
 800269c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a0:	61d3      	str	r3, [r2, #28]
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <HAL_MspInit+0x68>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	607b      	str	r3, [r7, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	210f      	movs	r1, #15
 80026b2:	f06f 0001 	mvn.w	r0, #1
 80026b6:	f000 fb1a 	bl	8002cee <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <HAL_MspInit+0x6c>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <HAL_MspInit+0x6c>)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40010000 	.word	0x40010000

080026e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08c      	sub	sp, #48	; 0x30
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f0:	f107 0320 	add.w	r3, r7, #32
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART5)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a46      	ldr	r2, [pc, #280]	; (800281c <HAL_UART_MspInit+0x134>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d145      	bne.n	8002794 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002708:	4b45      	ldr	r3, [pc, #276]	; (8002820 <HAL_UART_MspInit+0x138>)
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	4a44      	ldr	r2, [pc, #272]	; (8002820 <HAL_UART_MspInit+0x138>)
 800270e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002712:	61d3      	str	r3, [r2, #28]
 8002714:	4b42      	ldr	r3, [pc, #264]	; (8002820 <HAL_UART_MspInit+0x138>)
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002720:	4b3f      	ldr	r3, [pc, #252]	; (8002820 <HAL_UART_MspInit+0x138>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	4a3e      	ldr	r2, [pc, #248]	; (8002820 <HAL_UART_MspInit+0x138>)
 8002726:	f043 0310 	orr.w	r3, r3, #16
 800272a:	6193      	str	r3, [r2, #24]
 800272c:	4b3c      	ldr	r3, [pc, #240]	; (8002820 <HAL_UART_MspInit+0x138>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	61bb      	str	r3, [r7, #24]
 8002736:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002738:	4b39      	ldr	r3, [pc, #228]	; (8002820 <HAL_UART_MspInit+0x138>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	4a38      	ldr	r2, [pc, #224]	; (8002820 <HAL_UART_MspInit+0x138>)
 800273e:	f043 0320 	orr.w	r3, r3, #32
 8002742:	6193      	str	r3, [r2, #24]
 8002744:	4b36      	ldr	r3, [pc, #216]	; (8002820 <HAL_UART_MspInit+0x138>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800275a:	2303      	movs	r3, #3
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275e:	f107 0320 	add.w	r3, r7, #32
 8002762:	4619      	mov	r1, r3
 8002764:	482f      	ldr	r0, [pc, #188]	; (8002824 <HAL_UART_MspInit+0x13c>)
 8002766:	f000 fdf5 	bl	8003354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800276a:	2304      	movs	r3, #4
 800276c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800276e:	2300      	movs	r3, #0
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002776:	f107 0320 	add.w	r3, r7, #32
 800277a:	4619      	mov	r1, r3
 800277c:	482a      	ldr	r0, [pc, #168]	; (8002828 <HAL_UART_MspInit+0x140>)
 800277e:	f000 fde9 	bl	8003354 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2105      	movs	r1, #5
 8002786:	2035      	movs	r0, #53	; 0x35
 8002788:	f000 fab1 	bl	8002cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800278c:	2035      	movs	r0, #53	; 0x35
 800278e:	f000 faca 	bl	8002d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002792:	e03e      	b.n	8002812 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a24      	ldr	r2, [pc, #144]	; (800282c <HAL_UART_MspInit+0x144>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d139      	bne.n	8002812 <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800279e:	4b20      	ldr	r3, [pc, #128]	; (8002820 <HAL_UART_MspInit+0x138>)
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	4a1f      	ldr	r2, [pc, #124]	; (8002820 <HAL_UART_MspInit+0x138>)
 80027a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a8:	6193      	str	r3, [r2, #24]
 80027aa:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <HAL_UART_MspInit+0x138>)
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b6:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <HAL_UART_MspInit+0x138>)
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	4a19      	ldr	r2, [pc, #100]	; (8002820 <HAL_UART_MspInit+0x138>)
 80027bc:	f043 0304 	orr.w	r3, r3, #4
 80027c0:	6193      	str	r3, [r2, #24]
 80027c2:	4b17      	ldr	r3, [pc, #92]	; (8002820 <HAL_UART_MspInit+0x138>)
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027d8:	2303      	movs	r3, #3
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027dc:	f107 0320 	add.w	r3, r7, #32
 80027e0:	4619      	mov	r1, r3
 80027e2:	4813      	ldr	r0, [pc, #76]	; (8002830 <HAL_UART_MspInit+0x148>)
 80027e4:	f000 fdb6 	bl	8003354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ee:	2300      	movs	r3, #0
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f6:	f107 0320 	add.w	r3, r7, #32
 80027fa:	4619      	mov	r1, r3
 80027fc:	480c      	ldr	r0, [pc, #48]	; (8002830 <HAL_UART_MspInit+0x148>)
 80027fe:	f000 fda9 	bl	8003354 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002802:	2200      	movs	r2, #0
 8002804:	2105      	movs	r1, #5
 8002806:	2025      	movs	r0, #37	; 0x25
 8002808:	f000 fa71 	bl	8002cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800280c:	2025      	movs	r0, #37	; 0x25
 800280e:	f000 fa8a 	bl	8002d26 <HAL_NVIC_EnableIRQ>
}
 8002812:	bf00      	nop
 8002814:	3730      	adds	r7, #48	; 0x30
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40005000 	.word	0x40005000
 8002820:	40021000 	.word	0x40021000
 8002824:	40011000 	.word	0x40011000
 8002828:	40011400 	.word	0x40011400
 800282c:	40013800 	.word	0x40013800
 8002830:	40010800 	.word	0x40010800

08002834 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08c      	sub	sp, #48	; 0x30
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002844:	2200      	movs	r2, #0
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	2019      	movs	r0, #25
 800284a:	f000 fa50 	bl	8002cee <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800284e:	2019      	movs	r0, #25
 8002850:	f000 fa69 	bl	8002d26 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002854:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <HAL_InitTick+0x9c>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <HAL_InitTick+0x9c>)
 800285a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800285e:	6193      	str	r3, [r2, #24]
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <HAL_InitTick+0x9c>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800286c:	f107 0210 	add.w	r2, r7, #16
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f001 fbde 	bl	8004038 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800287c:	f001 fbc8 	bl	8004010 <HAL_RCC_GetPCLK2Freq>
 8002880:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	4a13      	ldr	r2, [pc, #76]	; (80028d4 <HAL_InitTick+0xa0>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	0c9b      	lsrs	r3, r3, #18
 800288c:	3b01      	subs	r3, #1
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_InitTick+0xa4>)
 8002892:	4a12      	ldr	r2, [pc, #72]	; (80028dc <HAL_InitTick+0xa8>)
 8002894:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <HAL_InitTick+0xa4>)
 8002898:	f240 32e7 	movw	r2, #999	; 0x3e7
 800289c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800289e:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <HAL_InitTick+0xa4>)
 80028a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <HAL_InitTick+0xa4>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028aa:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_InitTick+0xa4>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80028b0:	4809      	ldr	r0, [pc, #36]	; (80028d8 <HAL_InitTick+0xa4>)
 80028b2:	f001 fc0f 	bl	80040d4 <HAL_TIM_Base_Init>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d104      	bne.n	80028c6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80028bc:	4806      	ldr	r0, [pc, #24]	; (80028d8 <HAL_InitTick+0xa4>)
 80028be:	f001 fc61 	bl	8004184 <HAL_TIM_Base_Start_IT>
 80028c2:	4603      	mov	r3, r0
 80028c4:	e000      	b.n	80028c8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3730      	adds	r7, #48	; 0x30
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	431bde83 	.word	0x431bde83
 80028d8:	2000ac74 	.word	0x2000ac74
 80028dc:	40012c00 	.word	0x40012c00

080028e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <NMI_Handler+0x4>

080028e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ea:	e7fe      	b.n	80028ea <HardFault_Handler+0x4>

080028ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <MemManage_Handler+0x4>

080028f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f6:	e7fe      	b.n	80028f6 <BusFault_Handler+0x4>

080028f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028fc:	e7fe      	b.n	80028fc <UsageFault_Handler+0x4>

080028fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
	...

0800290c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002910:	4802      	ldr	r0, [pc, #8]	; (800291c <TIM1_UP_IRQHandler+0x10>)
 8002912:	f001 fc91 	bl	8004238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	2000ac74 	.word	0x2000ac74

08002920 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002924:	4802      	ldr	r0, [pc, #8]	; (8002930 <USART1_IRQHandler+0x10>)
 8002926:	f001 ffa9 	bl	800487c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20007f84 	.word	0x20007f84

08002934 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002938:	4802      	ldr	r0, [pc, #8]	; (8002944 <UART5_IRQHandler+0x10>)
 800293a:	f001 ff9f 	bl	800487c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20007f44 	.word	0x20007f44

08002948 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
	return 1;
 800294c:	2301      	movs	r3, #1
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <_kill>:

int _kill(int pid, int sig)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002960:	f004 fc7c 	bl	800725c <__errno>
 8002964:	4603      	mov	r3, r0
 8002966:	2216      	movs	r2, #22
 8002968:	601a      	str	r2, [r3, #0]
	return -1;
 800296a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <_exit>:

void _exit (int status)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800297e:	f04f 31ff 	mov.w	r1, #4294967295
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ffe7 	bl	8002956 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002988:	e7fe      	b.n	8002988 <_exit+0x12>

0800298a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	e00a      	b.n	80029b2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800299c:	f3af 8000 	nop.w
 80029a0:	4601      	mov	r1, r0
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	60ba      	str	r2, [r7, #8]
 80029a8:	b2ca      	uxtb	r2, r1
 80029aa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	3301      	adds	r3, #1
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	dbf0      	blt.n	800299c <_read+0x12>
	}

return len;
 80029ba:	687b      	ldr	r3, [r7, #4]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	e009      	b.n	80029ea <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	60ba      	str	r2, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	3301      	adds	r3, #1
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	dbf1      	blt.n	80029d6 <_write+0x12>
	}
	return len;
 80029f2:	687b      	ldr	r3, [r7, #4]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <_close>:

int _close(int file)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	return -1;
 8002a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a22:	605a      	str	r2, [r3, #4]
	return 0;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <_isatty>:

int _isatty(int file)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	return 1;
 8002a38:	2301      	movs	r3, #1
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
	return 0;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a64:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <_sbrk+0x5c>)
 8002a66:	4b15      	ldr	r3, [pc, #84]	; (8002abc <_sbrk+0x60>)
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a70:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <_sbrk+0x64>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d102      	bne.n	8002a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <_sbrk+0x64>)
 8002a7a:	4a12      	ldr	r2, [pc, #72]	; (8002ac4 <_sbrk+0x68>)
 8002a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <_sbrk+0x64>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d207      	bcs.n	8002a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a8c:	f004 fbe6 	bl	800725c <__errno>
 8002a90:	4603      	mov	r3, r0
 8002a92:	220c      	movs	r2, #12
 8002a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9a:	e009      	b.n	8002ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <_sbrk+0x64>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aa2:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <_sbrk+0x64>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <_sbrk+0x64>)
 8002aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aae:	68fb      	ldr	r3, [r7, #12]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20010000 	.word	0x20010000
 8002abc:	00000400 	.word	0x00000400
 8002ac0:	20000468 	.word	0x20000468
 8002ac4:	2000acf0 	.word	0x2000acf0

08002ac8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002ad4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002ad6:	e003      	b.n	8002ae0 <LoopCopyDataInit>

08002ad8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002ada:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002adc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002ade:	3104      	adds	r1, #4

08002ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ae0:	480a      	ldr	r0, [pc, #40]	; (8002b0c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002ae4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002ae6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002ae8:	d3f6      	bcc.n	8002ad8 <CopyDataInit>
  ldr r2, =_sbss
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002aec:	e002      	b.n	8002af4 <LoopFillZerobss>

08002aee <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002aee:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002af0:	f842 3b04 	str.w	r3, [r2], #4

08002af4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002af4:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002af6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002af8:	d3f9      	bcc.n	8002aee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002afa:	f7ff ffe5 	bl	8002ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002afe:	f004 fbb3 	bl	8007268 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b02:	f7fe fed9 	bl	80018b8 <main>
  bx lr
 8002b06:	4770      	bx	lr
  ldr r3, =_sidata
 8002b08:	0800ac80 	.word	0x0800ac80
  ldr r0, =_sdata
 8002b0c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002b10:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8002b14:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8002b18:	2000acf0 	.word	0x2000acf0

08002b1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b1c:	e7fe      	b.n	8002b1c <ADC1_2_IRQHandler>
	...

08002b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b24:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <HAL_Init+0x28>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a07      	ldr	r2, [pc, #28]	; (8002b48 <HAL_Init+0x28>)
 8002b2a:	f043 0310 	orr.w	r3, r3, #16
 8002b2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b30:	2003      	movs	r0, #3
 8002b32:	f000 f8d1 	bl	8002cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7ff fe7c 	bl	8002834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b3c:	f7ff fd9c 	bl	8002678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40022000 	.word	0x40022000

08002b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <HAL_IncTick+0x1c>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_IncTick+0x20>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	4a03      	ldr	r2, [pc, #12]	; (8002b6c <HAL_IncTick+0x20>)
 8002b5e:	6013      	str	r3, [r2, #0]
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr
 8002b68:	20000018 	.word	0x20000018
 8002b6c:	2000acbc 	.word	0x2000acbc

08002b70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return uwTick;
 8002b74:	4b02      	ldr	r3, [pc, #8]	; (8002b80 <HAL_GetTick+0x10>)
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	2000acbc 	.word	0x2000acbc

08002b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bb6:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	60d3      	str	r3, [r2, #12]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	f003 0307 	and.w	r3, r3, #7
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	db0b      	blt.n	8002c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	f003 021f 	and.w	r2, r3, #31
 8002c00:	4906      	ldr	r1, [pc, #24]	; (8002c1c <__NVIC_EnableIRQ+0x34>)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	2001      	movs	r0, #1
 8002c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	e000e100 	.word	0xe000e100

08002c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	6039      	str	r1, [r7, #0]
 8002c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	db0a      	blt.n	8002c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	490c      	ldr	r1, [pc, #48]	; (8002c6c <__NVIC_SetPriority+0x4c>)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	0112      	lsls	r2, r2, #4
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	440b      	add	r3, r1
 8002c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c48:	e00a      	b.n	8002c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4908      	ldr	r1, [pc, #32]	; (8002c70 <__NVIC_SetPriority+0x50>)
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	3b04      	subs	r3, #4
 8002c58:	0112      	lsls	r2, r2, #4
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	761a      	strb	r2, [r3, #24]
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	e000e100 	.word	0xe000e100
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b089      	sub	sp, #36	; 0x24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f1c3 0307 	rsb	r3, r3, #7
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	bf28      	it	cs
 8002c92:	2304      	movcs	r3, #4
 8002c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	2b06      	cmp	r3, #6
 8002c9c:	d902      	bls.n	8002ca4 <NVIC_EncodePriority+0x30>
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3b03      	subs	r3, #3
 8002ca2:	e000      	b.n	8002ca6 <NVIC_EncodePriority+0x32>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	43d9      	mvns	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ccc:	4313      	orrs	r3, r2
         );
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3724      	adds	r7, #36	; 0x24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff ff4f 	bl	8002b84 <__NVIC_SetPriorityGrouping>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b086      	sub	sp, #24
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d00:	f7ff ff64 	bl	8002bcc <__NVIC_GetPriorityGrouping>
 8002d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	6978      	ldr	r0, [r7, #20]
 8002d0c:	f7ff ffb2 	bl	8002c74 <NVIC_EncodePriority>
 8002d10:	4602      	mov	r2, r0
 8002d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff81 	bl	8002c20 <__NVIC_SetPriority>
}
 8002d1e:	bf00      	nop
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff ff57 	bl	8002be8 <__NVIC_EnableIRQ>
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d005      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
 8002d64:	e0d6      	b.n	8002f14 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 020e 	bic.w	r2, r2, #14
 8002d74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0201 	bic.w	r2, r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4b64      	ldr	r3, [pc, #400]	; (8002f20 <HAL_DMA_Abort_IT+0x1dc>)
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d958      	bls.n	8002e44 <HAL_DMA_Abort_IT+0x100>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a63      	ldr	r2, [pc, #396]	; (8002f24 <HAL_DMA_Abort_IT+0x1e0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d04f      	beq.n	8002e3c <HAL_DMA_Abort_IT+0xf8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a61      	ldr	r2, [pc, #388]	; (8002f28 <HAL_DMA_Abort_IT+0x1e4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d048      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xf4>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a60      	ldr	r2, [pc, #384]	; (8002f2c <HAL_DMA_Abort_IT+0x1e8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d040      	beq.n	8002e32 <HAL_DMA_Abort_IT+0xee>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a5e      	ldr	r2, [pc, #376]	; (8002f30 <HAL_DMA_Abort_IT+0x1ec>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d038      	beq.n	8002e2c <HAL_DMA_Abort_IT+0xe8>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a5d      	ldr	r2, [pc, #372]	; (8002f34 <HAL_DMA_Abort_IT+0x1f0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d030      	beq.n	8002e26 <HAL_DMA_Abort_IT+0xe2>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a5b      	ldr	r2, [pc, #364]	; (8002f38 <HAL_DMA_Abort_IT+0x1f4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d028      	beq.n	8002e20 <HAL_DMA_Abort_IT+0xdc>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a53      	ldr	r2, [pc, #332]	; (8002f20 <HAL_DMA_Abort_IT+0x1dc>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d020      	beq.n	8002e1a <HAL_DMA_Abort_IT+0xd6>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a57      	ldr	r2, [pc, #348]	; (8002f3c <HAL_DMA_Abort_IT+0x1f8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d019      	beq.n	8002e16 <HAL_DMA_Abort_IT+0xd2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a56      	ldr	r2, [pc, #344]	; (8002f40 <HAL_DMA_Abort_IT+0x1fc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d012      	beq.n	8002e12 <HAL_DMA_Abort_IT+0xce>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a54      	ldr	r2, [pc, #336]	; (8002f44 <HAL_DMA_Abort_IT+0x200>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00a      	beq.n	8002e0c <HAL_DMA_Abort_IT+0xc8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a53      	ldr	r2, [pc, #332]	; (8002f48 <HAL_DMA_Abort_IT+0x204>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d102      	bne.n	8002e06 <HAL_DMA_Abort_IT+0xc2>
 8002e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e04:	e01b      	b.n	8002e3e <HAL_DMA_Abort_IT+0xfa>
 8002e06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e0a:	e018      	b.n	8002e3e <HAL_DMA_Abort_IT+0xfa>
 8002e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e10:	e015      	b.n	8002e3e <HAL_DMA_Abort_IT+0xfa>
 8002e12:	2310      	movs	r3, #16
 8002e14:	e013      	b.n	8002e3e <HAL_DMA_Abort_IT+0xfa>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e011      	b.n	8002e3e <HAL_DMA_Abort_IT+0xfa>
 8002e1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e1e:	e00e      	b.n	8002e3e <HAL_DMA_Abort_IT+0xfa>
 8002e20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e24:	e00b      	b.n	8002e3e <HAL_DMA_Abort_IT+0xfa>
 8002e26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e2a:	e008      	b.n	8002e3e <HAL_DMA_Abort_IT+0xfa>
 8002e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e30:	e005      	b.n	8002e3e <HAL_DMA_Abort_IT+0xfa>
 8002e32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e36:	e002      	b.n	8002e3e <HAL_DMA_Abort_IT+0xfa>
 8002e38:	2310      	movs	r3, #16
 8002e3a:	e000      	b.n	8002e3e <HAL_DMA_Abort_IT+0xfa>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	4a43      	ldr	r2, [pc, #268]	; (8002f4c <HAL_DMA_Abort_IT+0x208>)
 8002e40:	6053      	str	r3, [r2, #4]
 8002e42:	e057      	b.n	8002ef4 <HAL_DMA_Abort_IT+0x1b0>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a36      	ldr	r2, [pc, #216]	; (8002f24 <HAL_DMA_Abort_IT+0x1e0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d04f      	beq.n	8002eee <HAL_DMA_Abort_IT+0x1aa>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a35      	ldr	r2, [pc, #212]	; (8002f28 <HAL_DMA_Abort_IT+0x1e4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d048      	beq.n	8002eea <HAL_DMA_Abort_IT+0x1a6>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a33      	ldr	r2, [pc, #204]	; (8002f2c <HAL_DMA_Abort_IT+0x1e8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d040      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x1a0>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a32      	ldr	r2, [pc, #200]	; (8002f30 <HAL_DMA_Abort_IT+0x1ec>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d038      	beq.n	8002ede <HAL_DMA_Abort_IT+0x19a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a30      	ldr	r2, [pc, #192]	; (8002f34 <HAL_DMA_Abort_IT+0x1f0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d030      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x194>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2f      	ldr	r2, [pc, #188]	; (8002f38 <HAL_DMA_Abort_IT+0x1f4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d028      	beq.n	8002ed2 <HAL_DMA_Abort_IT+0x18e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a26      	ldr	r2, [pc, #152]	; (8002f20 <HAL_DMA_Abort_IT+0x1dc>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d020      	beq.n	8002ecc <HAL_DMA_Abort_IT+0x188>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2b      	ldr	r2, [pc, #172]	; (8002f3c <HAL_DMA_Abort_IT+0x1f8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d019      	beq.n	8002ec8 <HAL_DMA_Abort_IT+0x184>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a29      	ldr	r2, [pc, #164]	; (8002f40 <HAL_DMA_Abort_IT+0x1fc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d012      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x180>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a28      	ldr	r2, [pc, #160]	; (8002f44 <HAL_DMA_Abort_IT+0x200>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00a      	beq.n	8002ebe <HAL_DMA_Abort_IT+0x17a>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a26      	ldr	r2, [pc, #152]	; (8002f48 <HAL_DMA_Abort_IT+0x204>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d102      	bne.n	8002eb8 <HAL_DMA_Abort_IT+0x174>
 8002eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eb6:	e01b      	b.n	8002ef0 <HAL_DMA_Abort_IT+0x1ac>
 8002eb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ebc:	e018      	b.n	8002ef0 <HAL_DMA_Abort_IT+0x1ac>
 8002ebe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ec2:	e015      	b.n	8002ef0 <HAL_DMA_Abort_IT+0x1ac>
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	e013      	b.n	8002ef0 <HAL_DMA_Abort_IT+0x1ac>
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e011      	b.n	8002ef0 <HAL_DMA_Abort_IT+0x1ac>
 8002ecc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ed0:	e00e      	b.n	8002ef0 <HAL_DMA_Abort_IT+0x1ac>
 8002ed2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ed6:	e00b      	b.n	8002ef0 <HAL_DMA_Abort_IT+0x1ac>
 8002ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002edc:	e008      	b.n	8002ef0 <HAL_DMA_Abort_IT+0x1ac>
 8002ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ee2:	e005      	b.n	8002ef0 <HAL_DMA_Abort_IT+0x1ac>
 8002ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ee8:	e002      	b.n	8002ef0 <HAL_DMA_Abort_IT+0x1ac>
 8002eea:	2310      	movs	r3, #16
 8002eec:	e000      	b.n	8002ef0 <HAL_DMA_Abort_IT+0x1ac>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	4a17      	ldr	r2, [pc, #92]	; (8002f50 <HAL_DMA_Abort_IT+0x20c>)
 8002ef2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	4798      	blx	r3
    } 
  }
  return status;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40020080 	.word	0x40020080
 8002f24:	40020008 	.word	0x40020008
 8002f28:	4002001c 	.word	0x4002001c
 8002f2c:	40020030 	.word	0x40020030
 8002f30:	40020044 	.word	0x40020044
 8002f34:	40020058 	.word	0x40020058
 8002f38:	4002006c 	.word	0x4002006c
 8002f3c:	40020408 	.word	0x40020408
 8002f40:	4002041c 	.word	0x4002041c
 8002f44:	40020430 	.word	0x40020430
 8002f48:	40020444 	.word	0x40020444
 8002f4c:	40020400 	.word	0x40020400
 8002f50:	40020000 	.word	0x40020000

08002f54 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f6e:	4b2f      	ldr	r3, [pc, #188]	; (800302c <HAL_FLASH_Program+0xd8>)
 8002f70:	7e1b      	ldrb	r3, [r3, #24]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_FLASH_Program+0x26>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e054      	b.n	8003024 <HAL_FLASH_Program+0xd0>
 8002f7a:	4b2c      	ldr	r3, [pc, #176]	; (800302c <HAL_FLASH_Program+0xd8>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002f80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f84:	f000 f8a8 	bl	80030d8 <FLASH_WaitForLastOperation>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d144      	bne.n	800301c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d102      	bne.n	8002f9e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	757b      	strb	r3, [r7, #21]
 8002f9c:	e007      	b.n	8002fae <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d102      	bne.n	8002faa <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	757b      	strb	r3, [r7, #21]
 8002fa8:	e001      	b.n	8002fae <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002faa:	2304      	movs	r3, #4
 8002fac:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002fae:	2300      	movs	r3, #0
 8002fb0:	75bb      	strb	r3, [r7, #22]
 8002fb2:	e02d      	b.n	8003010 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002fb4:	7dbb      	ldrb	r3, [r7, #22]
 8002fb6:	005a      	lsls	r2, r3, #1
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	eb02 0c03 	add.w	ip, r2, r3
 8002fbe:	7dbb      	ldrb	r3, [r7, #22]
 8002fc0:	0119      	lsls	r1, r3, #4
 8002fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fc6:	f1c1 0620 	rsb	r6, r1, #32
 8002fca:	f1a1 0020 	sub.w	r0, r1, #32
 8002fce:	fa22 f401 	lsr.w	r4, r2, r1
 8002fd2:	fa03 f606 	lsl.w	r6, r3, r6
 8002fd6:	4334      	orrs	r4, r6
 8002fd8:	fa23 f000 	lsr.w	r0, r3, r0
 8002fdc:	4304      	orrs	r4, r0
 8002fde:	fa23 f501 	lsr.w	r5, r3, r1
 8002fe2:	b2a3      	uxth	r3, r4
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4660      	mov	r0, ip
 8002fe8:	f000 f85a 	bl	80030a0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002fec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ff0:	f000 f872 	bl	80030d8 <FLASH_WaitForLastOperation>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002ff8:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <HAL_FLASH_Program+0xdc>)
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	4a0c      	ldr	r2, [pc, #48]	; (8003030 <HAL_FLASH_Program+0xdc>)
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d107      	bne.n	800301a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800300a:	7dbb      	ldrb	r3, [r7, #22]
 800300c:	3301      	adds	r3, #1
 800300e:	75bb      	strb	r3, [r7, #22]
 8003010:	7dba      	ldrb	r2, [r7, #22]
 8003012:	7d7b      	ldrb	r3, [r7, #21]
 8003014:	429a      	cmp	r2, r3
 8003016:	d3cd      	bcc.n	8002fb4 <HAL_FLASH_Program+0x60>
 8003018:	e000      	b.n	800301c <HAL_FLASH_Program+0xc8>
      {
        break;
 800301a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <HAL_FLASH_Program+0xd8>)
 800301e:	2200      	movs	r2, #0
 8003020:	761a      	strb	r2, [r3, #24]

  return status;
 8003022:	7dfb      	ldrb	r3, [r7, #23]
}
 8003024:	4618      	mov	r0, r3
 8003026:	371c      	adds	r7, #28
 8003028:	46bd      	mov	sp, r7
 800302a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800302c:	2000acc0 	.word	0x2000acc0
 8003030:	40022000 	.word	0x40022000

08003034 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800303e:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <HAL_FLASH_Unlock+0x40>)
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <HAL_FLASH_Unlock+0x40>)
 800304c:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <HAL_FLASH_Unlock+0x44>)
 800304e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <HAL_FLASH_Unlock+0x40>)
 8003052:	4a0a      	ldr	r2, [pc, #40]	; (800307c <HAL_FLASH_Unlock+0x48>)
 8003054:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003056:	4b07      	ldr	r3, [pc, #28]	; (8003074 <HAL_FLASH_Unlock+0x40>)
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003066:	79fb      	ldrb	r3, [r7, #7]
}
 8003068:	4618      	mov	r0, r3
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40022000 	.word	0x40022000
 8003078:	45670123 	.word	0x45670123
 800307c:	cdef89ab 	.word	0xcdef89ab

08003080 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_FLASH_Lock+0x1c>)
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	4a04      	ldr	r2, [pc, #16]	; (800309c <HAL_FLASH_Lock+0x1c>)
 800308a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800308e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40022000 	.word	0x40022000

080030a0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030ac:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <FLASH_Program_HalfWord+0x30>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80030b2:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <FLASH_Program_HalfWord+0x34>)
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <FLASH_Program_HalfWord+0x34>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	887a      	ldrh	r2, [r7, #2]
 80030c2:	801a      	strh	r2, [r3, #0]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	2000acc0 	.word	0x2000acc0
 80030d4:	40022000 	.word	0x40022000

080030d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80030e0:	f7ff fd46 	bl	8002b70 <HAL_GetTick>
 80030e4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80030e6:	e010      	b.n	800310a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ee:	d00c      	beq.n	800310a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d007      	beq.n	8003106 <FLASH_WaitForLastOperation+0x2e>
 80030f6:	f7ff fd3b 	bl	8002b70 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	429a      	cmp	r2, r3
 8003104:	d201      	bcs.n	800310a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e025      	b.n	8003156 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800310a:	4b15      	ldr	r3, [pc, #84]	; (8003160 <FLASH_WaitForLastOperation+0x88>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e8      	bne.n	80030e8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003116:	4b12      	ldr	r3, [pc, #72]	; (8003160 <FLASH_WaitForLastOperation+0x88>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003122:	4b0f      	ldr	r3, [pc, #60]	; (8003160 <FLASH_WaitForLastOperation+0x88>)
 8003124:	2220      	movs	r2, #32
 8003126:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003128:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <FLASH_WaitForLastOperation+0x88>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10b      	bne.n	800314c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003134:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <FLASH_WaitForLastOperation+0x88>)
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003140:	4b07      	ldr	r3, [pc, #28]	; (8003160 <FLASH_WaitForLastOperation+0x88>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800314c:	f000 f80a 	bl	8003164 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40022000 	.word	0x40022000

08003164 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800316e:	4b23      	ldr	r3, [pc, #140]	; (80031fc <FLASH_SetErrorCode+0x98>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800317a:	4b21      	ldr	r3, [pc, #132]	; (8003200 <FLASH_SetErrorCode+0x9c>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f043 0302 	orr.w	r3, r3, #2
 8003182:	4a1f      	ldr	r2, [pc, #124]	; (8003200 <FLASH_SetErrorCode+0x9c>)
 8003184:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f043 0310 	orr.w	r3, r3, #16
 800318c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800318e:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <FLASH_SetErrorCode+0x98>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800319a:	4b19      	ldr	r3, [pc, #100]	; (8003200 <FLASH_SetErrorCode+0x9c>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	4a17      	ldr	r2, [pc, #92]	; (8003200 <FLASH_SetErrorCode+0x9c>)
 80031a4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f043 0304 	orr.w	r3, r3, #4
 80031ac:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80031ae:	4b13      	ldr	r3, [pc, #76]	; (80031fc <FLASH_SetErrorCode+0x98>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80031ba:	4b11      	ldr	r3, [pc, #68]	; (8003200 <FLASH_SetErrorCode+0x9c>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f043 0304 	orr.w	r3, r3, #4
 80031c2:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <FLASH_SetErrorCode+0x9c>)
 80031c4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80031c6:	4b0d      	ldr	r3, [pc, #52]	; (80031fc <FLASH_SetErrorCode+0x98>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	4a0c      	ldr	r2, [pc, #48]	; (80031fc <FLASH_SetErrorCode+0x98>)
 80031cc:	f023 0301 	bic.w	r3, r3, #1
 80031d0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f240 1201 	movw	r2, #257	; 0x101
 80031d8:	4293      	cmp	r3, r2
 80031da:	d106      	bne.n	80031ea <FLASH_SetErrorCode+0x86>
 80031dc:	4b07      	ldr	r3, [pc, #28]	; (80031fc <FLASH_SetErrorCode+0x98>)
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	4a06      	ldr	r2, [pc, #24]	; (80031fc <FLASH_SetErrorCode+0x98>)
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	61d3      	str	r3, [r2, #28]
}  
 80031e8:	e002      	b.n	80031f0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80031ea:	4a04      	ldr	r2, [pc, #16]	; (80031fc <FLASH_SetErrorCode+0x98>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	60d3      	str	r3, [r2, #12]
}  
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40022000 	.word	0x40022000
 8003200:	2000acc0 	.word	0x2000acc0

08003204 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003216:	4b2f      	ldr	r3, [pc, #188]	; (80032d4 <HAL_FLASHEx_Erase+0xd0>)
 8003218:	7e1b      	ldrb	r3, [r3, #24]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_FLASHEx_Erase+0x1e>
 800321e:	2302      	movs	r3, #2
 8003220:	e053      	b.n	80032ca <HAL_FLASHEx_Erase+0xc6>
 8003222:	4b2c      	ldr	r3, [pc, #176]	; (80032d4 <HAL_FLASHEx_Erase+0xd0>)
 8003224:	2201      	movs	r2, #1
 8003226:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d116      	bne.n	800325e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003230:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003234:	f7ff ff50 	bl	80030d8 <FLASH_WaitForLastOperation>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d141      	bne.n	80032c2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800323e:	2001      	movs	r0, #1
 8003240:	f000 f84c 	bl	80032dc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003244:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003248:	f7ff ff46 	bl	80030d8 <FLASH_WaitForLastOperation>
 800324c:	4603      	mov	r3, r0
 800324e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003250:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <HAL_FLASHEx_Erase+0xd4>)
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	4a20      	ldr	r2, [pc, #128]	; (80032d8 <HAL_FLASHEx_Erase+0xd4>)
 8003256:	f023 0304 	bic.w	r3, r3, #4
 800325a:	6113      	str	r3, [r2, #16]
 800325c:	e031      	b.n	80032c2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800325e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003262:	f7ff ff39 	bl	80030d8 <FLASH_WaitForLastOperation>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d12a      	bne.n	80032c2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	f04f 32ff 	mov.w	r2, #4294967295
 8003272:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	e019      	b.n	80032b0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800327c:	68b8      	ldr	r0, [r7, #8]
 800327e:	f000 f849 	bl	8003314 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003282:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003286:	f7ff ff27 	bl	80030d8 <FLASH_WaitForLastOperation>
 800328a:	4603      	mov	r3, r0
 800328c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800328e:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <HAL_FLASHEx_Erase+0xd4>)
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	4a11      	ldr	r2, [pc, #68]	; (80032d8 <HAL_FLASHEx_Erase+0xd4>)
 8003294:	f023 0302 	bic.w	r3, r3, #2
 8003298:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	601a      	str	r2, [r3, #0]
            break;
 80032a6:	e00c      	b.n	80032c2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ae:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	02da      	lsls	r2, r3, #11
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d3dc      	bcc.n	800327c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80032c2:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <HAL_FLASHEx_Erase+0xd0>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	761a      	strb	r2, [r3, #24]

  return status;
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	2000acc0 	.word	0x2000acc0
 80032d8:	40022000 	.word	0x40022000

080032dc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80032e4:	4b09      	ldr	r3, [pc, #36]	; (800330c <FLASH_MassErase+0x30>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80032ea:	4b09      	ldr	r3, [pc, #36]	; (8003310 <FLASH_MassErase+0x34>)
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	4a08      	ldr	r2, [pc, #32]	; (8003310 <FLASH_MassErase+0x34>)
 80032f0:	f043 0304 	orr.w	r3, r3, #4
 80032f4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80032f6:	4b06      	ldr	r3, [pc, #24]	; (8003310 <FLASH_MassErase+0x34>)
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	4a05      	ldr	r2, [pc, #20]	; (8003310 <FLASH_MassErase+0x34>)
 80032fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003300:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr
 800330c:	2000acc0 	.word	0x2000acc0
 8003310:	40022000 	.word	0x40022000

08003314 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <FLASH_PageErase+0x38>)
 800331e:	2200      	movs	r2, #0
 8003320:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003322:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <FLASH_PageErase+0x3c>)
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	4a0a      	ldr	r2, [pc, #40]	; (8003350 <FLASH_PageErase+0x3c>)
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800332e:	4a08      	ldr	r2, [pc, #32]	; (8003350 <FLASH_PageErase+0x3c>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <FLASH_PageErase+0x3c>)
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	4a05      	ldr	r2, [pc, #20]	; (8003350 <FLASH_PageErase+0x3c>)
 800333a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800333e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	2000acc0 	.word	0x2000acc0
 8003350:	40022000 	.word	0x40022000

08003354 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003354:	b480      	push	{r7}
 8003356:	b08b      	sub	sp, #44	; 0x2c
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800335e:	2300      	movs	r3, #0
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003362:	2300      	movs	r3, #0
 8003364:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003366:	e169      	b.n	800363c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003368:	2201      	movs	r2, #1
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69fa      	ldr	r2, [r7, #28]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	429a      	cmp	r2, r3
 8003382:	f040 8158 	bne.w	8003636 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4a9a      	ldr	r2, [pc, #616]	; (80035f4 <HAL_GPIO_Init+0x2a0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d05e      	beq.n	800344e <HAL_GPIO_Init+0xfa>
 8003390:	4a98      	ldr	r2, [pc, #608]	; (80035f4 <HAL_GPIO_Init+0x2a0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d875      	bhi.n	8003482 <HAL_GPIO_Init+0x12e>
 8003396:	4a98      	ldr	r2, [pc, #608]	; (80035f8 <HAL_GPIO_Init+0x2a4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d058      	beq.n	800344e <HAL_GPIO_Init+0xfa>
 800339c:	4a96      	ldr	r2, [pc, #600]	; (80035f8 <HAL_GPIO_Init+0x2a4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d86f      	bhi.n	8003482 <HAL_GPIO_Init+0x12e>
 80033a2:	4a96      	ldr	r2, [pc, #600]	; (80035fc <HAL_GPIO_Init+0x2a8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d052      	beq.n	800344e <HAL_GPIO_Init+0xfa>
 80033a8:	4a94      	ldr	r2, [pc, #592]	; (80035fc <HAL_GPIO_Init+0x2a8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d869      	bhi.n	8003482 <HAL_GPIO_Init+0x12e>
 80033ae:	4a94      	ldr	r2, [pc, #592]	; (8003600 <HAL_GPIO_Init+0x2ac>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d04c      	beq.n	800344e <HAL_GPIO_Init+0xfa>
 80033b4:	4a92      	ldr	r2, [pc, #584]	; (8003600 <HAL_GPIO_Init+0x2ac>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d863      	bhi.n	8003482 <HAL_GPIO_Init+0x12e>
 80033ba:	4a92      	ldr	r2, [pc, #584]	; (8003604 <HAL_GPIO_Init+0x2b0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d046      	beq.n	800344e <HAL_GPIO_Init+0xfa>
 80033c0:	4a90      	ldr	r2, [pc, #576]	; (8003604 <HAL_GPIO_Init+0x2b0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d85d      	bhi.n	8003482 <HAL_GPIO_Init+0x12e>
 80033c6:	2b12      	cmp	r3, #18
 80033c8:	d82a      	bhi.n	8003420 <HAL_GPIO_Init+0xcc>
 80033ca:	2b12      	cmp	r3, #18
 80033cc:	d859      	bhi.n	8003482 <HAL_GPIO_Init+0x12e>
 80033ce:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <HAL_GPIO_Init+0x80>)
 80033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d4:	0800344f 	.word	0x0800344f
 80033d8:	08003429 	.word	0x08003429
 80033dc:	0800343b 	.word	0x0800343b
 80033e0:	0800347d 	.word	0x0800347d
 80033e4:	08003483 	.word	0x08003483
 80033e8:	08003483 	.word	0x08003483
 80033ec:	08003483 	.word	0x08003483
 80033f0:	08003483 	.word	0x08003483
 80033f4:	08003483 	.word	0x08003483
 80033f8:	08003483 	.word	0x08003483
 80033fc:	08003483 	.word	0x08003483
 8003400:	08003483 	.word	0x08003483
 8003404:	08003483 	.word	0x08003483
 8003408:	08003483 	.word	0x08003483
 800340c:	08003483 	.word	0x08003483
 8003410:	08003483 	.word	0x08003483
 8003414:	08003483 	.word	0x08003483
 8003418:	08003431 	.word	0x08003431
 800341c:	08003445 	.word	0x08003445
 8003420:	4a79      	ldr	r2, [pc, #484]	; (8003608 <HAL_GPIO_Init+0x2b4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003426:	e02c      	b.n	8003482 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	623b      	str	r3, [r7, #32]
          break;
 800342e:	e029      	b.n	8003484 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	3304      	adds	r3, #4
 8003436:	623b      	str	r3, [r7, #32]
          break;
 8003438:	e024      	b.n	8003484 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	3308      	adds	r3, #8
 8003440:	623b      	str	r3, [r7, #32]
          break;
 8003442:	e01f      	b.n	8003484 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	330c      	adds	r3, #12
 800344a:	623b      	str	r3, [r7, #32]
          break;
 800344c:	e01a      	b.n	8003484 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d102      	bne.n	800345c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003456:	2304      	movs	r3, #4
 8003458:	623b      	str	r3, [r7, #32]
          break;
 800345a:	e013      	b.n	8003484 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d105      	bne.n	8003470 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003464:	2308      	movs	r3, #8
 8003466:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	611a      	str	r2, [r3, #16]
          break;
 800346e:	e009      	b.n	8003484 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003470:	2308      	movs	r3, #8
 8003472:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	615a      	str	r2, [r3, #20]
          break;
 800347a:	e003      	b.n	8003484 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800347c:	2300      	movs	r3, #0
 800347e:	623b      	str	r3, [r7, #32]
          break;
 8003480:	e000      	b.n	8003484 <HAL_GPIO_Init+0x130>
          break;
 8003482:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2bff      	cmp	r3, #255	; 0xff
 8003488:	d801      	bhi.n	800348e <HAL_GPIO_Init+0x13a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	e001      	b.n	8003492 <HAL_GPIO_Init+0x13e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	2bff      	cmp	r3, #255	; 0xff
 8003498:	d802      	bhi.n	80034a0 <HAL_GPIO_Init+0x14c>
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	e002      	b.n	80034a6 <HAL_GPIO_Init+0x152>
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	3b08      	subs	r3, #8
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	210f      	movs	r1, #15
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	fa01 f303 	lsl.w	r3, r1, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	401a      	ands	r2, r3
 80034b8:	6a39      	ldr	r1, [r7, #32]
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	fa01 f303 	lsl.w	r3, r1, r3
 80034c0:	431a      	orrs	r2, r3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 80b1 	beq.w	8003636 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034d4:	4b4d      	ldr	r3, [pc, #308]	; (800360c <HAL_GPIO_Init+0x2b8>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	4a4c      	ldr	r2, [pc, #304]	; (800360c <HAL_GPIO_Init+0x2b8>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6193      	str	r3, [r2, #24]
 80034e0:	4b4a      	ldr	r3, [pc, #296]	; (800360c <HAL_GPIO_Init+0x2b8>)
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034ec:	4a48      	ldr	r2, [pc, #288]	; (8003610 <HAL_GPIO_Init+0x2bc>)
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	3302      	adds	r3, #2
 80034f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	220f      	movs	r2, #15
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4013      	ands	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a40      	ldr	r2, [pc, #256]	; (8003614 <HAL_GPIO_Init+0x2c0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d013      	beq.n	8003540 <HAL_GPIO_Init+0x1ec>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a3f      	ldr	r2, [pc, #252]	; (8003618 <HAL_GPIO_Init+0x2c4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00d      	beq.n	800353c <HAL_GPIO_Init+0x1e8>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a3e      	ldr	r2, [pc, #248]	; (800361c <HAL_GPIO_Init+0x2c8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d007      	beq.n	8003538 <HAL_GPIO_Init+0x1e4>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a3d      	ldr	r2, [pc, #244]	; (8003620 <HAL_GPIO_Init+0x2cc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d101      	bne.n	8003534 <HAL_GPIO_Init+0x1e0>
 8003530:	2303      	movs	r3, #3
 8003532:	e006      	b.n	8003542 <HAL_GPIO_Init+0x1ee>
 8003534:	2304      	movs	r3, #4
 8003536:	e004      	b.n	8003542 <HAL_GPIO_Init+0x1ee>
 8003538:	2302      	movs	r3, #2
 800353a:	e002      	b.n	8003542 <HAL_GPIO_Init+0x1ee>
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <HAL_GPIO_Init+0x1ee>
 8003540:	2300      	movs	r3, #0
 8003542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003544:	f002 0203 	and.w	r2, r2, #3
 8003548:	0092      	lsls	r2, r2, #2
 800354a:	4093      	lsls	r3, r2
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003552:	492f      	ldr	r1, [pc, #188]	; (8003610 <HAL_GPIO_Init+0x2bc>)
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	089b      	lsrs	r3, r3, #2
 8003558:	3302      	adds	r3, #2
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d006      	beq.n	800357a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800356c:	4b2d      	ldr	r3, [pc, #180]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	492c      	ldr	r1, [pc, #176]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	4313      	orrs	r3, r2
 8003576:	600b      	str	r3, [r1, #0]
 8003578:	e006      	b.n	8003588 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800357a:	4b2a      	ldr	r3, [pc, #168]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	43db      	mvns	r3, r3
 8003582:	4928      	ldr	r1, [pc, #160]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 8003584:	4013      	ands	r3, r2
 8003586:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d006      	beq.n	80035a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003594:	4b23      	ldr	r3, [pc, #140]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	4922      	ldr	r1, [pc, #136]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]
 80035a0:	e006      	b.n	80035b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035a2:	4b20      	ldr	r3, [pc, #128]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	491e      	ldr	r1, [pc, #120]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d006      	beq.n	80035ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035bc:	4b19      	ldr	r3, [pc, #100]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	4918      	ldr	r1, [pc, #96]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	608b      	str	r3, [r1, #8]
 80035c8:	e006      	b.n	80035d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035ca:	4b16      	ldr	r3, [pc, #88]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	43db      	mvns	r3, r3
 80035d2:	4914      	ldr	r1, [pc, #80]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d021      	beq.n	8003628 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035e4:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	490e      	ldr	r1, [pc, #56]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60cb      	str	r3, [r1, #12]
 80035f0:	e021      	b.n	8003636 <HAL_GPIO_Init+0x2e2>
 80035f2:	bf00      	nop
 80035f4:	10320000 	.word	0x10320000
 80035f8:	10310000 	.word	0x10310000
 80035fc:	10220000 	.word	0x10220000
 8003600:	10210000 	.word	0x10210000
 8003604:	10120000 	.word	0x10120000
 8003608:	10110000 	.word	0x10110000
 800360c:	40021000 	.word	0x40021000
 8003610:	40010000 	.word	0x40010000
 8003614:	40010800 	.word	0x40010800
 8003618:	40010c00 	.word	0x40010c00
 800361c:	40011000 	.word	0x40011000
 8003620:	40011400 	.word	0x40011400
 8003624:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_GPIO_Init+0x304>)
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	43db      	mvns	r3, r3
 8003630:	4909      	ldr	r1, [pc, #36]	; (8003658 <HAL_GPIO_Init+0x304>)
 8003632:	4013      	ands	r3, r2
 8003634:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	3301      	adds	r3, #1
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	fa22 f303 	lsr.w	r3, r2, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	f47f ae8e 	bne.w	8003368 <HAL_GPIO_Init+0x14>
  }
}
 800364c:	bf00      	nop
 800364e:	bf00      	nop
 8003650:	372c      	adds	r7, #44	; 0x2c
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr
 8003658:	40010400 	.word	0x40010400

0800365c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e304      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 8087 	beq.w	800378a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800367c:	4b92      	ldr	r3, [pc, #584]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 030c 	and.w	r3, r3, #12
 8003684:	2b04      	cmp	r3, #4
 8003686:	d00c      	beq.n	80036a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003688:	4b8f      	ldr	r3, [pc, #572]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	2b08      	cmp	r3, #8
 8003692:	d112      	bne.n	80036ba <HAL_RCC_OscConfig+0x5e>
 8003694:	4b8c      	ldr	r3, [pc, #560]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a0:	d10b      	bne.n	80036ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a2:	4b89      	ldr	r3, [pc, #548]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d06c      	beq.n	8003788 <HAL_RCC_OscConfig+0x12c>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d168      	bne.n	8003788 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e2de      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c2:	d106      	bne.n	80036d2 <HAL_RCC_OscConfig+0x76>
 80036c4:	4b80      	ldr	r3, [pc, #512]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a7f      	ldr	r2, [pc, #508]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	e02e      	b.n	8003730 <HAL_RCC_OscConfig+0xd4>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x98>
 80036da:	4b7b      	ldr	r3, [pc, #492]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a7a      	ldr	r2, [pc, #488]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	4b78      	ldr	r3, [pc, #480]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a77      	ldr	r2, [pc, #476]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	e01d      	b.n	8003730 <HAL_RCC_OscConfig+0xd4>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036fc:	d10c      	bne.n	8003718 <HAL_RCC_OscConfig+0xbc>
 80036fe:	4b72      	ldr	r3, [pc, #456]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a71      	ldr	r2, [pc, #452]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	4b6f      	ldr	r3, [pc, #444]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a6e      	ldr	r2, [pc, #440]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	e00b      	b.n	8003730 <HAL_RCC_OscConfig+0xd4>
 8003718:	4b6b      	ldr	r3, [pc, #428]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a6a      	ldr	r2, [pc, #424]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800371e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	4b68      	ldr	r3, [pc, #416]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a67      	ldr	r2, [pc, #412]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800372a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800372e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d013      	beq.n	8003760 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003738:	f7ff fa1a 	bl	8002b70 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003740:	f7ff fa16 	bl	8002b70 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b64      	cmp	r3, #100	; 0x64
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e292      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003752:	4b5d      	ldr	r3, [pc, #372]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0f0      	beq.n	8003740 <HAL_RCC_OscConfig+0xe4>
 800375e:	e014      	b.n	800378a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7ff fa06 	bl	8002b70 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003768:	f7ff fa02 	bl	8002b70 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b64      	cmp	r3, #100	; 0x64
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e27e      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377a:	4b53      	ldr	r3, [pc, #332]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x10c>
 8003786:	e000      	b.n	800378a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d063      	beq.n	800385e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003796:	4b4c      	ldr	r3, [pc, #304]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00b      	beq.n	80037ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037a2:	4b49      	ldr	r3, [pc, #292]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d11c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x18c>
 80037ae:	4b46      	ldr	r3, [pc, #280]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d116      	bne.n	80037e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ba:	4b43      	ldr	r3, [pc, #268]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_RCC_OscConfig+0x176>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d001      	beq.n	80037d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e252      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d2:	4b3d      	ldr	r3, [pc, #244]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4939      	ldr	r1, [pc, #228]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e6:	e03a      	b.n	800385e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d020      	beq.n	8003832 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037f0:	4b36      	ldr	r3, [pc, #216]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f6:	f7ff f9bb 	bl	8002b70 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037fe:	f7ff f9b7 	bl	8002b70 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e233      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003810:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381c:	4b2a      	ldr	r3, [pc, #168]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4927      	ldr	r1, [pc, #156]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800382c:	4313      	orrs	r3, r2
 800382e:	600b      	str	r3, [r1, #0]
 8003830:	e015      	b.n	800385e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003832:	4b26      	ldr	r3, [pc, #152]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7ff f99a 	bl	8002b70 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003840:	f7ff f996 	bl	8002b70 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e212      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003852:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d03a      	beq.n	80038e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d019      	beq.n	80038a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003872:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003874:	2201      	movs	r2, #1
 8003876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003878:	f7ff f97a 	bl	8002b70 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003880:	f7ff f976 	bl	8002b70 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e1f2      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003892:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800389e:	2001      	movs	r0, #1
 80038a0:	f000 fbfa 	bl	8004098 <RCC_Delay>
 80038a4:	e01c      	b.n	80038e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ac:	f7ff f960 	bl	8002b70 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b2:	e00f      	b.n	80038d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b4:	f7ff f95c 	bl	8002b70 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d908      	bls.n	80038d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e1d8      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000
 80038cc:	42420000 	.word	0x42420000
 80038d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d4:	4b9b      	ldr	r3, [pc, #620]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e9      	bne.n	80038b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 80a6 	beq.w	8003a3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ee:	2300      	movs	r3, #0
 80038f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038f2:	4b94      	ldr	r3, [pc, #592]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10d      	bne.n	800391a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038fe:	4b91      	ldr	r3, [pc, #580]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	4a90      	ldr	r2, [pc, #576]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003908:	61d3      	str	r3, [r2, #28]
 800390a:	4b8e      	ldr	r3, [pc, #568]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	60bb      	str	r3, [r7, #8]
 8003914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003916:	2301      	movs	r3, #1
 8003918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391a:	4b8b      	ldr	r3, [pc, #556]	; (8003b48 <HAL_RCC_OscConfig+0x4ec>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	2b00      	cmp	r3, #0
 8003924:	d118      	bne.n	8003958 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003926:	4b88      	ldr	r3, [pc, #544]	; (8003b48 <HAL_RCC_OscConfig+0x4ec>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a87      	ldr	r2, [pc, #540]	; (8003b48 <HAL_RCC_OscConfig+0x4ec>)
 800392c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003932:	f7ff f91d 	bl	8002b70 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800393a:	f7ff f919 	bl	8002b70 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b64      	cmp	r3, #100	; 0x64
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e195      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394c:	4b7e      	ldr	r3, [pc, #504]	; (8003b48 <HAL_RCC_OscConfig+0x4ec>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d106      	bne.n	800396e <HAL_RCC_OscConfig+0x312>
 8003960:	4b78      	ldr	r3, [pc, #480]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	4a77      	ldr	r2, [pc, #476]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	6213      	str	r3, [r2, #32]
 800396c:	e02d      	b.n	80039ca <HAL_RCC_OscConfig+0x36e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10c      	bne.n	8003990 <HAL_RCC_OscConfig+0x334>
 8003976:	4b73      	ldr	r3, [pc, #460]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	4a72      	ldr	r2, [pc, #456]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 800397c:	f023 0301 	bic.w	r3, r3, #1
 8003980:	6213      	str	r3, [r2, #32]
 8003982:	4b70      	ldr	r3, [pc, #448]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	4a6f      	ldr	r2, [pc, #444]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003988:	f023 0304 	bic.w	r3, r3, #4
 800398c:	6213      	str	r3, [r2, #32]
 800398e:	e01c      	b.n	80039ca <HAL_RCC_OscConfig+0x36e>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	2b05      	cmp	r3, #5
 8003996:	d10c      	bne.n	80039b2 <HAL_RCC_OscConfig+0x356>
 8003998:	4b6a      	ldr	r3, [pc, #424]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	4a69      	ldr	r2, [pc, #420]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 800399e:	f043 0304 	orr.w	r3, r3, #4
 80039a2:	6213      	str	r3, [r2, #32]
 80039a4:	4b67      	ldr	r3, [pc, #412]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	4a66      	ldr	r2, [pc, #408]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6213      	str	r3, [r2, #32]
 80039b0:	e00b      	b.n	80039ca <HAL_RCC_OscConfig+0x36e>
 80039b2:	4b64      	ldr	r3, [pc, #400]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	4a63      	ldr	r2, [pc, #396]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 80039b8:	f023 0301 	bic.w	r3, r3, #1
 80039bc:	6213      	str	r3, [r2, #32]
 80039be:	4b61      	ldr	r3, [pc, #388]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	4a60      	ldr	r2, [pc, #384]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 80039c4:	f023 0304 	bic.w	r3, r3, #4
 80039c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d015      	beq.n	80039fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d2:	f7ff f8cd 	bl	8002b70 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7ff f8c9 	bl	8002b70 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e143      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f0:	4b54      	ldr	r3, [pc, #336]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0ee      	beq.n	80039da <HAL_RCC_OscConfig+0x37e>
 80039fc:	e014      	b.n	8003a28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fe:	f7ff f8b7 	bl	8002b70 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a04:	e00a      	b.n	8003a1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a06:	f7ff f8b3 	bl	8002b70 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e12d      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1c:	4b49      	ldr	r3, [pc, #292]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1ee      	bne.n	8003a06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d105      	bne.n	8003a3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a2e:	4b45      	ldr	r3, [pc, #276]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	4a44      	ldr	r2, [pc, #272]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a38:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 808c 	beq.w	8003b5c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003a44:	4b3f      	ldr	r3, [pc, #252]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a50:	d10e      	bne.n	8003a70 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003a52:	4b3c      	ldr	r3, [pc, #240]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d108      	bne.n	8003a70 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003a5e:	4b39      	ldr	r3, [pc, #228]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6a:	d101      	bne.n	8003a70 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e103      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d14e      	bne.n	8003b16 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003a78:	4b32      	ldr	r3, [pc, #200]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d009      	beq.n	8003a98 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003a84:	4b2f      	ldr	r3, [pc, #188]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0ef      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003a98:	4b2c      	ldr	r3, [pc, #176]	; (8003b4c <HAL_RCC_OscConfig+0x4f0>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9e:	f7ff f867 	bl	8002b70 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003aa6:	f7ff f863 	bl	8002b70 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b64      	cmp	r3, #100	; 0x64
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e0df      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003ab8:	4b22      	ldr	r3, [pc, #136]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f0      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003ac4:	4b1f      	ldr	r3, [pc, #124]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad0:	491c      	ldr	r1, [pc, #112]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003ad6:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	4918      	ldr	r1, [pc, #96]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003ae8:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <HAL_RCC_OscConfig+0x4f0>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aee:	f7ff f83f 	bl	8002b70 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003af6:	f7ff f83b 	bl	8002b70 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b64      	cmp	r3, #100	; 0x64
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e0b7      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003b08:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x49a>
 8003b14:	e022      	b.n	8003b5c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003b16:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <HAL_RCC_OscConfig+0x4e8>)
 8003b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <HAL_RCC_OscConfig+0x4f0>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b28:	f7ff f822 	bl	8002b70 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003b2e:	e00f      	b.n	8003b50 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003b30:	f7ff f81e 	bl	8002b70 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	; 0x64
 8003b3c:	d908      	bls.n	8003b50 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e09a      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40007000 	.word	0x40007000
 8003b4c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003b50:	4b4b      	ldr	r3, [pc, #300]	; (8003c80 <HAL_RCC_OscConfig+0x624>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e9      	bne.n	8003b30 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8088 	beq.w	8003c76 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b66:	4b46      	ldr	r3, [pc, #280]	; (8003c80 <HAL_RCC_OscConfig+0x624>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d068      	beq.n	8003c44 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d14d      	bne.n	8003c16 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7a:	4b42      	ldr	r3, [pc, #264]	; (8003c84 <HAL_RCC_OscConfig+0x628>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7fe fff6 	bl	8002b70 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b88:	f7fe fff2 	bl	8002b70 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e06e      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b9a:	4b39      	ldr	r3, [pc, #228]	; (8003c80 <HAL_RCC_OscConfig+0x624>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bae:	d10f      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003bb0:	4b33      	ldr	r3, [pc, #204]	; (8003c80 <HAL_RCC_OscConfig+0x624>)
 8003bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4931      	ldr	r1, [pc, #196]	; (8003c80 <HAL_RCC_OscConfig+0x624>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bbe:	4b30      	ldr	r3, [pc, #192]	; (8003c80 <HAL_RCC_OscConfig+0x624>)
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	f023 020f 	bic.w	r2, r3, #15
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	492d      	ldr	r1, [pc, #180]	; (8003c80 <HAL_RCC_OscConfig+0x624>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bd0:	4b2b      	ldr	r3, [pc, #172]	; (8003c80 <HAL_RCC_OscConfig+0x624>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	430b      	orrs	r3, r1
 8003be2:	4927      	ldr	r1, [pc, #156]	; (8003c80 <HAL_RCC_OscConfig+0x624>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be8:	4b26      	ldr	r3, [pc, #152]	; (8003c84 <HAL_RCC_OscConfig+0x628>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bee:	f7fe ffbf 	bl	8002b70 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf6:	f7fe ffbb 	bl	8002b70 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e037      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c08:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <HAL_RCC_OscConfig+0x624>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0f0      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x59a>
 8003c14:	e02f      	b.n	8003c76 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c16:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <HAL_RCC_OscConfig+0x628>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1c:	f7fe ffa8 	bl	8002b70 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c24:	f7fe ffa4 	bl	8002b70 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e020      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c36:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <HAL_RCC_OscConfig+0x624>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x5c8>
 8003c42:	e018      	b.n	8003c76 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e013      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_RCC_OscConfig+0x624>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d106      	bne.n	8003c72 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d001      	beq.n	8003c76 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40021000 	.word	0x40021000
 8003c84:	42420060 	.word	0x42420060

08003c88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0d0      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c9c:	4b6a      	ldr	r3, [pc, #424]	; (8003e48 <HAL_RCC_ClockConfig+0x1c0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d910      	bls.n	8003ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003caa:	4b67      	ldr	r3, [pc, #412]	; (8003e48 <HAL_RCC_ClockConfig+0x1c0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 0207 	bic.w	r2, r3, #7
 8003cb2:	4965      	ldr	r1, [pc, #404]	; (8003e48 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cba:	4b63      	ldr	r3, [pc, #396]	; (8003e48 <HAL_RCC_ClockConfig+0x1c0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0b8      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d020      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ce4:	4b59      	ldr	r3, [pc, #356]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	4a58      	ldr	r2, [pc, #352]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003cea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cfc:	4b53      	ldr	r3, [pc, #332]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4a52      	ldr	r2, [pc, #328]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d08:	4b50      	ldr	r3, [pc, #320]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	494d      	ldr	r1, [pc, #308]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d040      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2e:	4b47      	ldr	r3, [pc, #284]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d115      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e07f      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d107      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d46:	4b41      	ldr	r3, [pc, #260]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d109      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e073      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d56:	4b3d      	ldr	r3, [pc, #244]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e06b      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d66:	4b39      	ldr	r3, [pc, #228]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f023 0203 	bic.w	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4936      	ldr	r1, [pc, #216]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d78:	f7fe fefa 	bl	8002b70 <HAL_GetTick>
 8003d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7e:	e00a      	b.n	8003d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d80:	f7fe fef6 	bl	8002b70 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e053      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d96:	4b2d      	ldr	r3, [pc, #180]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 020c 	and.w	r2, r3, #12
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d1eb      	bne.n	8003d80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003da8:	4b27      	ldr	r3, [pc, #156]	; (8003e48 <HAL_RCC_ClockConfig+0x1c0>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d210      	bcs.n	8003dd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db6:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <HAL_RCC_ClockConfig+0x1c0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 0207 	bic.w	r2, r3, #7
 8003dbe:	4922      	ldr	r1, [pc, #136]	; (8003e48 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e032      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003de4:	4b19      	ldr	r3, [pc, #100]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4916      	ldr	r1, [pc, #88]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e02:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	490e      	ldr	r1, [pc, #56]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e16:	f000 f821 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	091b      	lsrs	r3, r3, #4
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	490a      	ldr	r1, [pc, #40]	; (8003e50 <HAL_RCC_ClockConfig+0x1c8>)
 8003e28:	5ccb      	ldrb	r3, [r1, r3]
 8003e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2e:	4a09      	ldr	r2, [pc, #36]	; (8003e54 <HAL_RCC_ClockConfig+0x1cc>)
 8003e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e32:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <HAL_RCC_ClockConfig+0x1d0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe fcfc 	bl	8002834 <HAL_InitTick>

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40022000 	.word	0x40022000
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	0800a7bc 	.word	0x0800a7bc
 8003e54:	20000010 	.word	0x20000010
 8003e58:	20000014 	.word	0x20000014

08003e5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e5e:	b091      	sub	sp, #68	; 0x44
 8003e60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8003e62:	4b56      	ldr	r3, [pc, #344]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8003e64:	f107 0414 	add.w	r4, r7, #20
 8003e68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e6a:	c407      	stmia	r4!, {r0, r1, r2}
 8003e6c:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8003e6e:	4b54      	ldr	r3, [pc, #336]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003e70:	1d3c      	adds	r4, r7, #4
 8003e72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8003e80:	2300      	movs	r3, #0
 8003e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e84:	2300      	movs	r3, #0
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e90:	2300      	movs	r3, #0
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e94:	4b4b      	ldr	r3, [pc, #300]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9c:	f003 030c 	and.w	r3, r3, #12
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d002      	beq.n	8003eaa <HAL_RCC_GetSysClockFreq+0x4e>
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d003      	beq.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x54>
 8003ea8:	e080      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003eaa:	4b47      	ldr	r3, [pc, #284]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003eac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003eae:	e080      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb2:	0c9b      	lsrs	r3, r3, #18
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8003ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d066      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003ece:	4b3d      	ldr	r3, [pc, #244]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003eda:	4413      	add	r3, r2
 8003edc:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8003ee0:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003ee2:	4b38      	ldr	r3, [pc, #224]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d044      	beq.n	8003f78 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003eee:	4b35      	ldr	r3, [pc, #212]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef2:	091b      	lsrs	r3, r3, #4
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	3301      	adds	r3, #1
 8003efa:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003efc:	4b31      	ldr	r3, [pc, #196]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	0a1b      	lsrs	r3, r3, #8
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	3302      	adds	r3, #2
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f04f 0100 	mov.w	r1, #0
 8003f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f14:	461a      	mov	r2, r3
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	fb02 f501 	mul.w	r5, r2, r1
 8003f1e:	fb00 f403 	mul.w	r4, r0, r3
 8003f22:	442c      	add	r4, r5
 8003f24:	fba0 2302 	umull	r2, r3, r0, r2
 8003f28:	18e1      	adds	r1, r4, r3
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4926      	ldr	r1, [pc, #152]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003f2e:	fb01 f003 	mul.w	r0, r1, r3
 8003f32:	2100      	movs	r1, #0
 8003f34:	fb01 f102 	mul.w	r1, r1, r2
 8003f38:	4401      	add	r1, r0
 8003f3a:	4823      	ldr	r0, [pc, #140]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003f3c:	fba2 4500 	umull	r4, r5, r2, r0
 8003f40:	194b      	adds	r3, r1, r5
 8003f42:	461d      	mov	r5, r3
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	4618      	mov	r0, r3
 8003f48:	f04f 0100 	mov.w	r1, #0
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	fb02 fc01 	mul.w	ip, r2, r1
 8003f58:	fb00 f603 	mul.w	r6, r0, r3
 8003f5c:	4466      	add	r6, ip
 8003f5e:	fba0 2302 	umull	r2, r3, r0, r2
 8003f62:	18f1      	adds	r1, r6, r3
 8003f64:	460b      	mov	r3, r1
 8003f66:	4620      	mov	r0, r4
 8003f68:	4629      	mov	r1, r5
 8003f6a:	f7fc ffdf 	bl	8000f2c <__aeabi_uldivmod>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4613      	mov	r3, r2
 8003f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f76:	e007      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7a:	4a13      	ldr	r2, [pc, #76]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003f7c:	fb02 f203 	mul.w	r2, r2, r3
 8003f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003f88:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d108      	bne.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8003f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f96:	085b      	lsrs	r3, r3, #1
 8003f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f9a:	e004      	b.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9e:	4a0b      	ldr	r2, [pc, #44]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x170>)
 8003fa0:	fb02 f303 	mul.w	r3, r2, r3
 8003fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8003fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003faa:	e002      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fac:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x174>)
 8003fae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3744      	adds	r7, #68	; 0x44
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fbc:	0800a794 	.word	0x0800a794
 8003fc0:	0800a7a4 	.word	0x0800a7a4
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	00989680 	.word	0x00989680
 8003fcc:	003d0900 	.word	0x003d0900
 8003fd0:	007a1200 	.word	0x007a1200

08003fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd8:	4b02      	ldr	r3, [pc, #8]	; (8003fe4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fda:	681b      	ldr	r3, [r3, #0]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr
 8003fe4:	20000010 	.word	0x20000010

08003fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fec:	f7ff fff2 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	4903      	ldr	r1, [pc, #12]	; (800400c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ffe:	5ccb      	ldrb	r3, [r1, r3]
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004004:	4618      	mov	r0, r3
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40021000 	.word	0x40021000
 800400c:	0800a7cc 	.word	0x0800a7cc

08004010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004014:	f7ff ffde 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 8004018:	4602      	mov	r2, r0
 800401a:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	0adb      	lsrs	r3, r3, #11
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	4903      	ldr	r1, [pc, #12]	; (8004034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004026:	5ccb      	ldrb	r3, [r1, r3]
 8004028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800402c:	4618      	mov	r0, r3
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40021000 	.word	0x40021000
 8004034:	0800a7cc 	.word	0x0800a7cc

08004038 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	220f      	movs	r2, #15
 8004046:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004048:	4b11      	ldr	r3, [pc, #68]	; (8004090 <HAL_RCC_GetClockConfig+0x58>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 0203 	and.w	r2, r3, #3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004054:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <HAL_RCC_GetClockConfig+0x58>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_GetClockConfig+0x58>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800406c:	4b08      	ldr	r3, [pc, #32]	; (8004090 <HAL_RCC_GetClockConfig+0x58>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	08db      	lsrs	r3, r3, #3
 8004072:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800407a:	4b06      	ldr	r3, [pc, #24]	; (8004094 <HAL_RCC_GetClockConfig+0x5c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0207 	and.w	r2, r3, #7
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr
 8004090:	40021000 	.word	0x40021000
 8004094:	40022000 	.word	0x40022000

08004098 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040a0:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <RCC_Delay+0x34>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <RCC_Delay+0x38>)
 80040a6:	fba2 2303 	umull	r2, r3, r2, r3
 80040aa:	0a5b      	lsrs	r3, r3, #9
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040b4:	bf00      	nop
  }
  while (Delay --);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1e5a      	subs	r2, r3, #1
 80040ba:	60fa      	str	r2, [r7, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1f9      	bne.n	80040b4 <RCC_Delay+0x1c>
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr
 80040cc:	20000010 	.word	0x20000010
 80040d0:	10624dd3 	.word	0x10624dd3

080040d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e041      	b.n	800416a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f839 	bl	8004172 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3304      	adds	r3, #4
 8004110:	4619      	mov	r1, r3
 8004112:	4610      	mov	r0, r2
 8004114:	f000 f9bc 	bl	8004490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b01      	cmp	r3, #1
 8004196:	d001      	beq.n	800419c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e03f      	b.n	800421c <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1b      	ldr	r2, [pc, #108]	; (8004228 <HAL_TIM_Base_Start_IT+0xa4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <HAL_TIM_Base_Start_IT+0x62>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c6:	d00e      	beq.n	80041e6 <HAL_TIM_Base_Start_IT+0x62>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a17      	ldr	r2, [pc, #92]	; (800422c <HAL_TIM_Base_Start_IT+0xa8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d009      	beq.n	80041e6 <HAL_TIM_Base_Start_IT+0x62>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a16      	ldr	r2, [pc, #88]	; (8004230 <HAL_TIM_Base_Start_IT+0xac>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d004      	beq.n	80041e6 <HAL_TIM_Base_Start_IT+0x62>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a14      	ldr	r2, [pc, #80]	; (8004234 <HAL_TIM_Base_Start_IT+0xb0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d111      	bne.n	800420a <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b06      	cmp	r3, #6
 80041f6:	d010      	beq.n	800421a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004208:	e007      	b.n	800421a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0201 	orr.w	r2, r2, #1
 8004218:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40012c00 	.word	0x40012c00
 800422c:	40000400 	.word	0x40000400
 8004230:	40000800 	.word	0x40000800
 8004234:	40000c00 	.word	0x40000c00

08004238 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b02      	cmp	r3, #2
 800424c:	d122      	bne.n	8004294 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b02      	cmp	r3, #2
 800425a:	d11b      	bne.n	8004294 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0202 	mvn.w	r2, #2
 8004264:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f8ed 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 8004280:	e005      	b.n	800428e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f8e0 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f8ef 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d122      	bne.n	80042e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d11b      	bne.n	80042e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0204 	mvn.w	r2, #4
 80042b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2202      	movs	r2, #2
 80042be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f8c3 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 80042d4:	e005      	b.n	80042e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f8b6 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f8c5 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d122      	bne.n	800433c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b08      	cmp	r3, #8
 8004302:	d11b      	bne.n	800433c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0208 	mvn.w	r2, #8
 800430c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2204      	movs	r2, #4
 8004312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f899 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 8004328:	e005      	b.n	8004336 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f88c 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f89b 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	2b10      	cmp	r3, #16
 8004348:	d122      	bne.n	8004390 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b10      	cmp	r3, #16
 8004356:	d11b      	bne.n	8004390 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0210 	mvn.w	r2, #16
 8004360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2208      	movs	r2, #8
 8004366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f86f 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 800437c:	e005      	b.n	800438a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f862 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f871 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b01      	cmp	r3, #1
 800439c:	d10e      	bne.n	80043bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d107      	bne.n	80043bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0201 	mvn.w	r2, #1
 80043b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fd fda4 	bl	8001f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c6:	2b80      	cmp	r3, #128	; 0x80
 80043c8:	d10e      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d4:	2b80      	cmp	r3, #128	; 0x80
 80043d6:	d107      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f8c9 	bl	800457a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b40      	cmp	r3, #64	; 0x40
 80043f4:	d10e      	bne.n	8004414 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004400:	2b40      	cmp	r3, #64	; 0x40
 8004402:	d107      	bne.n	8004414 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800440c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f835 	bl	800447e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b20      	cmp	r3, #32
 8004420:	d10e      	bne.n	8004440 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b20      	cmp	r3, #32
 800442e:	d107      	bne.n	8004440 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0220 	mvn.w	r2, #32
 8004438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f894 	bl	8004568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr

0800445a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr

0800447e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a2d      	ldr	r2, [pc, #180]	; (8004558 <TIM_Base_SetConfig+0xc8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00f      	beq.n	80044c8 <TIM_Base_SetConfig+0x38>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ae:	d00b      	beq.n	80044c8 <TIM_Base_SetConfig+0x38>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a2a      	ldr	r2, [pc, #168]	; (800455c <TIM_Base_SetConfig+0xcc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d007      	beq.n	80044c8 <TIM_Base_SetConfig+0x38>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a29      	ldr	r2, [pc, #164]	; (8004560 <TIM_Base_SetConfig+0xd0>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d003      	beq.n	80044c8 <TIM_Base_SetConfig+0x38>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a28      	ldr	r2, [pc, #160]	; (8004564 <TIM_Base_SetConfig+0xd4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d108      	bne.n	80044da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a1e      	ldr	r2, [pc, #120]	; (8004558 <TIM_Base_SetConfig+0xc8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00f      	beq.n	8004502 <TIM_Base_SetConfig+0x72>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e8:	d00b      	beq.n	8004502 <TIM_Base_SetConfig+0x72>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a1b      	ldr	r2, [pc, #108]	; (800455c <TIM_Base_SetConfig+0xcc>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d007      	beq.n	8004502 <TIM_Base_SetConfig+0x72>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a1a      	ldr	r2, [pc, #104]	; (8004560 <TIM_Base_SetConfig+0xd0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d003      	beq.n	8004502 <TIM_Base_SetConfig+0x72>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a19      	ldr	r2, [pc, #100]	; (8004564 <TIM_Base_SetConfig+0xd4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d108      	bne.n	8004514 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a07      	ldr	r2, [pc, #28]	; (8004558 <TIM_Base_SetConfig+0xc8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d103      	bne.n	8004548 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	615a      	str	r2, [r3, #20]
}
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40000400 	.word	0x40000400
 8004560:	40000800 	.word	0x40000800
 8004564:	40000c00 	.word	0x40000c00

08004568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr

0800457a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e03f      	b.n	800461e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fe f898 	bl	80026e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2224      	movs	r2, #36	; 0x24
 80045bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fbbf 	bl	8004d54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695a      	ldr	r2, [r3, #20]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004604:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b08a      	sub	sp, #40	; 0x28
 800462a:	af02      	add	r7, sp, #8
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	603b      	str	r3, [r7, #0]
 8004632:	4613      	mov	r3, r2
 8004634:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b20      	cmp	r3, #32
 8004644:	d17c      	bne.n	8004740 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <HAL_UART_Transmit+0x2c>
 800464c:	88fb      	ldrh	r3, [r7, #6]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e075      	b.n	8004742 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_UART_Transmit+0x3e>
 8004660:	2302      	movs	r3, #2
 8004662:	e06e      	b.n	8004742 <HAL_UART_Transmit+0x11c>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2221      	movs	r2, #33	; 0x21
 8004676:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800467a:	f7fe fa79 	bl	8002b70 <HAL_GetTick>
 800467e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	88fa      	ldrh	r2, [r7, #6]
 8004684:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	88fa      	ldrh	r2, [r7, #6]
 800468a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004694:	d108      	bne.n	80046a8 <HAL_UART_Transmit+0x82>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d104      	bne.n	80046a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	e003      	b.n	80046b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80046b8:	e02a      	b.n	8004710 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2200      	movs	r2, #0
 80046c2:	2180      	movs	r1, #128	; 0x80
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f9e2 	bl	8004a8e <UART_WaitOnFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e036      	b.n	8004742 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10b      	bne.n	80046f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	3302      	adds	r3, #2
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	e007      	b.n	8004702 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	781a      	ldrb	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	3301      	adds	r3, #1
 8004700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1cf      	bne.n	80046ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2200      	movs	r2, #0
 8004722:	2140      	movs	r1, #64	; 0x40
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f9b2 	bl	8004a8e <UART_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e006      	b.n	8004742 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	e000      	b.n	8004742 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
  }
}
 8004742:	4618      	mov	r0, r3
 8004744:	3720      	adds	r7, #32
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	4613      	mov	r3, r2
 8004756:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b20      	cmp	r3, #32
 8004762:	d130      	bne.n	80047c6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_UART_Transmit_IT+0x26>
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e029      	b.n	80047c8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_UART_Transmit_IT+0x38>
 800477e:	2302      	movs	r3, #2
 8004780:	e022      	b.n	80047c8 <HAL_UART_Transmit_IT+0x7e>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	88fa      	ldrh	r2, [r7, #6]
 8004794:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	88fa      	ldrh	r2, [r7, #6]
 800479a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2221      	movs	r2, #33	; 0x21
 80047a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047c0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e000      	b.n	80047c8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80047c6:	2302      	movs	r3, #2
  }
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr

080047d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b085      	sub	sp, #20
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	4613      	mov	r3, r2
 80047de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d140      	bne.n	800486e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <HAL_UART_Receive_IT+0x26>
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e039      	b.n	8004870 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_UART_Receive_IT+0x38>
 8004806:	2302      	movs	r3, #2
 8004808:	e032      	b.n	8004870 <HAL_UART_Receive_IT+0x9e>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	88fa      	ldrh	r2, [r7, #6]
 800481c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	88fa      	ldrh	r2, [r7, #6]
 8004822:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2222      	movs	r2, #34	; 0x22
 800482e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004848:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695a      	ldr	r2, [r3, #20]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f042 0201 	orr.w	r2, r2, #1
 8004858:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0220 	orr.w	r2, r2, #32
 8004868:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	e000      	b.n	8004870 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800486e:	2302      	movs	r3, #2
  }
}
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	bc80      	pop	{r7}
 8004878:	4770      	bx	lr
	...

0800487c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10d      	bne.n	80048ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	f003 0320 	and.w	r3, r3, #32
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <HAL_UART_IRQHandler+0x52>
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	f003 0320 	and.w	r3, r3, #32
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f9c3 	bl	8004c52 <UART_Receive_IT>
      return;
 80048cc:	e0d0      	b.n	8004a70 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 80b0 	beq.w	8004a36 <HAL_UART_IRQHandler+0x1ba>
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d105      	bne.n	80048ec <HAL_UART_IRQHandler+0x70>
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 80a5 	beq.w	8004a36 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_UART_IRQHandler+0x90>
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004904:	f043 0201 	orr.w	r2, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HAL_UART_IRQHandler+0xb0>
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004924:	f043 0202 	orr.w	r2, r3, #2
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <HAL_UART_IRQHandler+0xd0>
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004944:	f043 0204 	orr.w	r2, r3, #4
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00f      	beq.n	8004976 <HAL_UART_IRQHandler+0xfa>
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b00      	cmp	r3, #0
 800495e:	d104      	bne.n	800496a <HAL_UART_IRQHandler+0xee>
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496e:	f043 0208 	orr.w	r2, r3, #8
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d077      	beq.n	8004a6e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d007      	beq.n	8004998 <HAL_UART_IRQHandler+0x11c>
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f95d 	bl	8004c52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	bf14      	ite	ne
 80049a6:	2301      	movne	r3, #1
 80049a8:	2300      	moveq	r3, #0
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d102      	bne.n	80049c0 <HAL_UART_IRQHandler+0x144>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d031      	beq.n	8004a24 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f8ae 	bl	8004b22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d023      	beq.n	8004a1c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695a      	ldr	r2, [r3, #20]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049e2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d013      	beq.n	8004a14 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f0:	4a21      	ldr	r2, [pc, #132]	; (8004a78 <HAL_UART_IRQHandler+0x1fc>)
 80049f2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fe f9a3 	bl	8002d44 <HAL_DMA_Abort_IT>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d016      	beq.n	8004a32 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a0e:	4610      	mov	r0, r2
 8004a10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a12:	e00e      	b.n	8004a32 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f831 	bl	8004a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a1a:	e00a      	b.n	8004a32 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f82d 	bl	8004a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a22:	e006      	b.n	8004a32 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f829 	bl	8004a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004a30:	e01d      	b.n	8004a6e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a32:	bf00      	nop
    return;
 8004a34:	e01b      	b.n	8004a6e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <HAL_UART_IRQHandler+0x1d6>
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f89a 	bl	8004b84 <UART_Transmit_IT>
    return;
 8004a50:	e00e      	b.n	8004a70 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d009      	beq.n	8004a70 <HAL_UART_IRQHandler+0x1f4>
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d004      	beq.n	8004a70 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f8db 	bl	8004c22 <UART_EndTransmit_IT>
    return;
 8004a6c:	e000      	b.n	8004a70 <HAL_UART_IRQHandler+0x1f4>
    return;
 8004a6e:	bf00      	nop
  }
}
 8004a70:	3720      	adds	r7, #32
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	08004b5d 	.word	0x08004b5d

08004a7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr

08004a8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b084      	sub	sp, #16
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	603b      	str	r3, [r7, #0]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a9e:	e02c      	b.n	8004afa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa6:	d028      	beq.n	8004afa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d007      	beq.n	8004abe <UART_WaitOnFlagUntilTimeout+0x30>
 8004aae:	f7fe f85f 	bl	8002b70 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d21d      	bcs.n	8004afa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004acc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695a      	ldr	r2, [r3, #20]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0201 	bic.w	r2, r2, #1
 8004adc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e00f      	b.n	8004b1a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4013      	ands	r3, r2
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	bf0c      	ite	eq
 8004b0a:	2301      	moveq	r3, #1
 8004b0c:	2300      	movne	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	461a      	mov	r2, r3
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d0c3      	beq.n	8004aa0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b38:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695a      	ldr	r2, [r3, #20]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0201 	bic.w	r2, r2, #1
 8004b48:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr

08004b5c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f7ff ff80 	bl	8004a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b7c:	bf00      	nop
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b21      	cmp	r3, #33	; 0x21
 8004b96:	d13e      	bne.n	8004c16 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba0:	d114      	bne.n	8004bcc <UART_Transmit_IT+0x48>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d110      	bne.n	8004bcc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bbe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	1c9a      	adds	r2, r3, #2
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	621a      	str	r2, [r3, #32]
 8004bca:	e008      	b.n	8004bde <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	1c59      	adds	r1, r3, #1
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6211      	str	r1, [r2, #32]
 8004bd6:	781a      	ldrb	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	4619      	mov	r1, r3
 8004bec:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10f      	bne.n	8004c12 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c00:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c10:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	e000      	b.n	8004c18 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c16:	2302      	movs	r3, #2
  }
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bc80      	pop	{r7}
 8004c20:	4770      	bx	lr

08004c22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b082      	sub	sp, #8
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fc ff9a 	bl	8001b7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b22      	cmp	r3, #34	; 0x22
 8004c64:	d170      	bne.n	8004d48 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6e:	d117      	bne.n	8004ca0 <UART_Receive_IT+0x4e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d113      	bne.n	8004ca0 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c80:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	1c9a      	adds	r2, r3, #2
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	629a      	str	r2, [r3, #40]	; 0x28
 8004c9e:	e026      	b.n	8004cee <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb2:	d007      	beq.n	8004cc4 <UART_Receive_IT+0x72>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <UART_Receive_IT+0x80>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d106      	bne.n	8004cd2 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	701a      	strb	r2, [r3, #0]
 8004cd0:	e008      	b.n	8004ce4 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d120      	bne.n	8004d44 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0220 	bic.w	r2, r2, #32
 8004d10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695a      	ldr	r2, [r3, #20]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0201 	bic.w	r2, r2, #1
 8004d30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fc feea 	bl	8001b14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	e002      	b.n	8004d4a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	e000      	b.n	8004d4a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004d48:	2302      	movs	r3, #2
  }
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d8e:	f023 030c 	bic.w	r3, r3, #12
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6812      	ldr	r2, [r2, #0]
 8004d96:	68b9      	ldr	r1, [r7, #8]
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a2c      	ldr	r2, [pc, #176]	; (8004e68 <UART_SetConfig+0x114>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d103      	bne.n	8004dc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004dbc:	f7ff f928 	bl	8004010 <HAL_RCC_GetPCLK2Freq>
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	e002      	b.n	8004dca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004dc4:	f7ff f910 	bl	8003fe8 <HAL_RCC_GetPCLK1Freq>
 8004dc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009a      	lsls	r2, r3, #2
 8004dd4:	441a      	add	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de0:	4a22      	ldr	r2, [pc, #136]	; (8004e6c <UART_SetConfig+0x118>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	0119      	lsls	r1, r3, #4
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4613      	mov	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	009a      	lsls	r2, r3, #2
 8004df4:	441a      	add	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e00:	4b1a      	ldr	r3, [pc, #104]	; (8004e6c <UART_SetConfig+0x118>)
 8004e02:	fba3 0302 	umull	r0, r3, r3, r2
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	2064      	movs	r0, #100	; 0x64
 8004e0a:	fb00 f303 	mul.w	r3, r0, r3
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	3332      	adds	r3, #50	; 0x32
 8004e14:	4a15      	ldr	r2, [pc, #84]	; (8004e6c <UART_SetConfig+0x118>)
 8004e16:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e20:	4419      	add	r1, r3
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4613      	mov	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	009a      	lsls	r2, r3, #2
 8004e2c:	441a      	add	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e38:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <UART_SetConfig+0x118>)
 8004e3a:	fba3 0302 	umull	r0, r3, r3, r2
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	2064      	movs	r0, #100	; 0x64
 8004e42:	fb00 f303 	mul.w	r3, r0, r3
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	3332      	adds	r3, #50	; 0x32
 8004e4c:	4a07      	ldr	r2, [pc, #28]	; (8004e6c <UART_SetConfig+0x118>)
 8004e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	f003 020f 	and.w	r2, r3, #15
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e60:	bf00      	nop
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40013800 	.word	0x40013800
 8004e6c:	51eb851f 	.word	0x51eb851f

08004e70 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	4603      	mov	r3, r0
 8004e78:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e82:	2b84      	cmp	r3, #132	; 0x84
 8004e84:	d005      	beq.n	8004e92 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004e86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3303      	adds	r3, #3
 8004e90:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004e92:	68fb      	ldr	r3, [r7, #12]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr

08004e9e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ea4:	f3ef 8305 	mrs	r3, IPSR
 8004ea8:	607b      	str	r3, [r7, #4]
  return(result);
 8004eaa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	bf14      	ite	ne
 8004eb0:	2301      	movne	r3, #1
 8004eb2:	2300      	moveq	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr

08004ec0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004ec4:	f001 f8f0 	bl	80060a8 <vTaskStartScheduler>
  
  return osOK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004ece:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed0:	b089      	sub	sp, #36	; 0x24
 8004ed2:	af04      	add	r7, sp, #16
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d020      	beq.n	8004f22 <osThreadCreate+0x54>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01c      	beq.n	8004f22 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685c      	ldr	r4, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681d      	ldr	r5, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691e      	ldr	r6, [r3, #16]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff ffb8 	bl	8004e70 <makeFreeRtosPriority>
 8004f00:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f0a:	9202      	str	r2, [sp, #8]
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	9100      	str	r1, [sp, #0]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	4632      	mov	r2, r6
 8004f14:	4629      	mov	r1, r5
 8004f16:	4620      	mov	r0, r4
 8004f18:	f000 ff08 	bl	8005d2c <xTaskCreateStatic>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	e01c      	b.n	8004f5c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685c      	ldr	r4, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f2e:	b29e      	uxth	r6, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff ff9a 	bl	8004e70 <makeFreeRtosPriority>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	f107 030c 	add.w	r3, r7, #12
 8004f42:	9301      	str	r3, [sp, #4]
 8004f44:	9200      	str	r2, [sp, #0]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	4632      	mov	r2, r6
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	f000 ff49 	bl	8005de4 <xTaskCreate>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d001      	beq.n	8004f5c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	e000      	b.n	8004f5e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f66 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <osDelay+0x16>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	e000      	b.n	8004f7e <osDelay+0x18>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f001 f85e 	bl	8006040 <vTaskDelay>
  
  return osOK;
 8004f84:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004f8e:	b590      	push	{r4, r7, lr}
 8004f90:	b085      	sub	sp, #20
 8004f92:	af02      	add	r7, sp, #8
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d011      	beq.n	8004fc4 <osMessageCreate+0x36>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00d      	beq.n	8004fc4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6859      	ldr	r1, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	2400      	movs	r4, #0
 8004fba:	9400      	str	r4, [sp, #0]
 8004fbc:	f000 f9dc 	bl	8005378 <xQueueGenericCreateStatic>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	e008      	b.n	8004fd6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6818      	ldr	r0, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	4619      	mov	r1, r3
 8004fd0:	f000 fa49 	bl	8005466 <xQueueGenericCreate>
 8004fd4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd90      	pop	{r4, r7, pc}
	...

08004fe0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004fec:	2300      	movs	r3, #0
 8004fee:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <osMessagePut+0x1e>
    ticks = 1;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004ffe:	f7ff ff4e 	bl	8004e9e <inHandlerMode>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d018      	beq.n	800503a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005008:	f107 0210 	add.w	r2, r7, #16
 800500c:	f107 0108 	add.w	r1, r7, #8
 8005010:	2300      	movs	r3, #0
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 fb82 	bl	800571c <xQueueGenericSendFromISR>
 8005018:	4603      	mov	r3, r0
 800501a:	2b01      	cmp	r3, #1
 800501c:	d001      	beq.n	8005022 <osMessagePut+0x42>
      return osErrorOS;
 800501e:	23ff      	movs	r3, #255	; 0xff
 8005020:	e018      	b.n	8005054 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d014      	beq.n	8005052 <osMessagePut+0x72>
 8005028:	4b0c      	ldr	r3, [pc, #48]	; (800505c <osMessagePut+0x7c>)
 800502a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	e00b      	b.n	8005052 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800503a:	f107 0108 	add.w	r1, r7, #8
 800503e:	2300      	movs	r3, #0
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 fa6c 	bl	8005520 <xQueueGenericSend>
 8005048:	4603      	mov	r3, r0
 800504a:	2b01      	cmp	r3, #1
 800504c:	d001      	beq.n	8005052 <osMessagePut+0x72>
      return osErrorOS;
 800504e:	23ff      	movs	r3, #255	; 0xff
 8005050:	e000      	b.n	8005054 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	e000ed04 	.word	0xe000ed04

08005060 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005060:	b590      	push	{r4, r7, lr}
 8005062:	b08b      	sub	sp, #44	; 0x2c
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10a      	bne.n	8005090 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800507a:	2380      	movs	r3, #128	; 0x80
 800507c:	617b      	str	r3, [r7, #20]
    return event;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	461c      	mov	r4, r3
 8005082:	f107 0314 	add.w	r3, r7, #20
 8005086:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800508a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800508e:	e054      	b.n	800513a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005090:	2300      	movs	r3, #0
 8005092:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005094:	2300      	movs	r3, #0
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509e:	d103      	bne.n	80050a8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80050a0:	f04f 33ff 	mov.w	r3, #4294967295
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
 80050a6:	e009      	b.n	80050bc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d006      	beq.n	80050bc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <osMessageGet+0x5c>
      ticks = 1;
 80050b8:	2301      	movs	r3, #1
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80050bc:	f7ff feef 	bl	8004e9e <inHandlerMode>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d01c      	beq.n	8005100 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80050c6:	f107 0220 	add.w	r2, r7, #32
 80050ca:	f107 0314 	add.w	r3, r7, #20
 80050ce:	3304      	adds	r3, #4
 80050d0:	4619      	mov	r1, r3
 80050d2:	68b8      	ldr	r0, [r7, #8]
 80050d4:	f000 fc9a 	bl	8005a0c <xQueueReceiveFromISR>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d102      	bne.n	80050e4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80050de:	2310      	movs	r3, #16
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	e001      	b.n	80050e8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d01d      	beq.n	800512a <osMessageGet+0xca>
 80050ee:	4b15      	ldr	r3, [pc, #84]	; (8005144 <osMessageGet+0xe4>)
 80050f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	e014      	b.n	800512a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005100:	f107 0314 	add.w	r3, r7, #20
 8005104:	3304      	adds	r3, #4
 8005106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005108:	4619      	mov	r1, r3
 800510a:	68b8      	ldr	r0, [r7, #8]
 800510c:	f000 fb9e 	bl	800584c <xQueueReceive>
 8005110:	4603      	mov	r3, r0
 8005112:	2b01      	cmp	r3, #1
 8005114:	d102      	bne.n	800511c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005116:	2310      	movs	r3, #16
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	e006      	b.n	800512a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <osMessageGet+0xc6>
 8005122:	2300      	movs	r3, #0
 8005124:	e000      	b.n	8005128 <osMessageGet+0xc8>
 8005126:	2340      	movs	r3, #64	; 0x40
 8005128:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	461c      	mov	r4, r3
 800512e:	f107 0314 	add.w	r3, r7, #20
 8005132:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005136:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	372c      	adds	r7, #44	; 0x2c
 800513e:	46bd      	mov	sp, r7
 8005140:	bd90      	pop	{r4, r7, pc}
 8005142:	bf00      	nop
 8005144:	e000ed04 	.word	0xe000ed04

08005148 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f103 0208 	add.w	r2, r3, #8
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f04f 32ff 	mov.w	r2, #4294967295
 8005160:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f103 0208 	add.w	r2, r3, #8
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f103 0208 	add.w	r2, r3, #8
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr

08005186 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	4770      	bx	lr

0800519e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800519e:	b480      	push	{r7}
 80051a0:	b085      	sub	sp, #20
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	601a      	str	r2, [r3, #0]
}
 80051da:	bf00      	nop
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr

080051e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fa:	d103      	bne.n	8005204 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	e00c      	b.n	800521e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3308      	adds	r3, #8
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	e002      	b.n	8005212 <vListInsert+0x2e>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	429a      	cmp	r2, r3
 800521c:	d2f6      	bcs.n	800520c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	601a      	str	r2, [r3, #0]
}
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr

08005254 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6892      	ldr	r2, [r2, #8]
 800526a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6852      	ldr	r2, [r2, #4]
 8005274:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	429a      	cmp	r2, r3
 800527e:	d103      	bne.n	8005288 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	1e5a      	subs	r2, r3, #1
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr
	...

080052a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10a      	bne.n	80052d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052ce:	bf00      	nop
 80052d0:	e7fe      	b.n	80052d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80052d2:	f001 fceb 	bl	8006cac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052de:	68f9      	ldr	r1, [r7, #12]
 80052e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052e2:	fb01 f303 	mul.w	r3, r1, r3
 80052e6:	441a      	add	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005302:	3b01      	subs	r3, #1
 8005304:	68f9      	ldr	r1, [r7, #12]
 8005306:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005308:	fb01 f303 	mul.w	r3, r1, r3
 800530c:	441a      	add	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	22ff      	movs	r2, #255	; 0xff
 8005316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	22ff      	movs	r2, #255	; 0xff
 800531e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d114      	bne.n	8005352 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d01a      	beq.n	8005366 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3310      	adds	r3, #16
 8005334:	4618      	mov	r0, r3
 8005336:	f001 f8fd 	bl	8006534 <xTaskRemoveFromEventList>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d012      	beq.n	8005366 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005340:	4b0c      	ldr	r3, [pc, #48]	; (8005374 <xQueueGenericReset+0xcc>)
 8005342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	e009      	b.n	8005366 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3310      	adds	r3, #16
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff fef6 	bl	8005148 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	3324      	adds	r3, #36	; 0x24
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff fef1 	bl	8005148 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005366:	f001 fcd1 	bl	8006d0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800536a:	2301      	movs	r3, #1
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	e000ed04 	.word	0xe000ed04

08005378 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08e      	sub	sp, #56	; 0x38
 800537c:	af02      	add	r7, sp, #8
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10a      	bne.n	80053be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053ba:	bf00      	nop
 80053bc:	e7fe      	b.n	80053bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <xQueueGenericCreateStatic+0x52>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <xQueueGenericCreateStatic+0x56>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <xQueueGenericCreateStatic+0x58>
 80053ce:	2300      	movs	r3, #0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10a      	bne.n	80053ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	623b      	str	r3, [r7, #32]
}
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d102      	bne.n	80053f6 <xQueueGenericCreateStatic+0x7e>
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <xQueueGenericCreateStatic+0x82>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <xQueueGenericCreateStatic+0x84>
 80053fa:	2300      	movs	r3, #0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10a      	bne.n	8005416 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	61fb      	str	r3, [r7, #28]
}
 8005412:	bf00      	nop
 8005414:	e7fe      	b.n	8005414 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005416:	2348      	movs	r3, #72	; 0x48
 8005418:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b48      	cmp	r3, #72	; 0x48
 800541e:	d00a      	beq.n	8005436 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	61bb      	str	r3, [r7, #24]
}
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00d      	beq.n	800545c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005448:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	4613      	mov	r3, r2
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 f843 	bl	80054e2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800545e:	4618      	mov	r0, r3
 8005460:	3730      	adds	r7, #48	; 0x30
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005466:	b580      	push	{r7, lr}
 8005468:	b08a      	sub	sp, #40	; 0x28
 800546a:	af02      	add	r7, sp, #8
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	4613      	mov	r3, r2
 8005472:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10a      	bne.n	8005490 <xQueueGenericCreate+0x2a>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	613b      	str	r3, [r7, #16]
}
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d102      	bne.n	800549c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	e004      	b.n	80054a6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	fb02 f303 	mul.w	r3, r2, r3
 80054a4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	3348      	adds	r3, #72	; 0x48
 80054aa:	4618      	mov	r0, r3
 80054ac:	f001 fcfe 	bl	8006eac <pvPortMalloc>
 80054b0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00f      	beq.n	80054d8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	3348      	adds	r3, #72	; 0x48
 80054bc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054c6:	79fa      	ldrb	r2, [r7, #7]
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	4613      	mov	r3, r2
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	68b9      	ldr	r1, [r7, #8]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f805 	bl	80054e2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80054d8:	69bb      	ldr	r3, [r7, #24]
	}
 80054da:	4618      	mov	r0, r3
 80054dc:	3720      	adds	r7, #32
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	607a      	str	r2, [r7, #4]
 80054ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d103      	bne.n	80054fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	e002      	b.n	8005504 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005510:	2101      	movs	r1, #1
 8005512:	69b8      	ldr	r0, [r7, #24]
 8005514:	f7ff fec8 	bl	80052a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005518:	bf00      	nop
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08e      	sub	sp, #56	; 0x38
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800552e:	2300      	movs	r3, #0
 8005530:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10a      	bne.n	8005552 <xQueueGenericSend+0x32>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800554e:	bf00      	nop
 8005550:	e7fe      	b.n	8005550 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d103      	bne.n	8005560 <xQueueGenericSend+0x40>
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <xQueueGenericSend+0x44>
 8005560:	2301      	movs	r3, #1
 8005562:	e000      	b.n	8005566 <xQueueGenericSend+0x46>
 8005564:	2300      	movs	r3, #0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <xQueueGenericSend+0x60>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800557c:	bf00      	nop
 800557e:	e7fe      	b.n	800557e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d103      	bne.n	800558e <xQueueGenericSend+0x6e>
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558a:	2b01      	cmp	r3, #1
 800558c:	d101      	bne.n	8005592 <xQueueGenericSend+0x72>
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <xQueueGenericSend+0x74>
 8005592:	2300      	movs	r3, #0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10a      	bne.n	80055ae <xQueueGenericSend+0x8e>
	__asm volatile
 8005598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	623b      	str	r3, [r7, #32]
}
 80055aa:	bf00      	nop
 80055ac:	e7fe      	b.n	80055ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055ae:	f001 f981 	bl	80068b4 <xTaskGetSchedulerState>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d102      	bne.n	80055be <xQueueGenericSend+0x9e>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <xQueueGenericSend+0xa2>
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <xQueueGenericSend+0xa4>
 80055c2:	2300      	movs	r3, #0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <xQueueGenericSend+0xbe>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	61fb      	str	r3, [r7, #28]
}
 80055da:	bf00      	nop
 80055dc:	e7fe      	b.n	80055dc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055de:	f001 fb65 	bl	8006cac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d302      	bcc.n	80055f4 <xQueueGenericSend+0xd4>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d129      	bne.n	8005648 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055fa:	f000 fa87 	bl	8005b0c <prvCopyDataToQueue>
 80055fe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	2b00      	cmp	r3, #0
 8005606:	d010      	beq.n	800562a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	3324      	adds	r3, #36	; 0x24
 800560c:	4618      	mov	r0, r3
 800560e:	f000 ff91 	bl	8006534 <xTaskRemoveFromEventList>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d013      	beq.n	8005640 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005618:	4b3f      	ldr	r3, [pc, #252]	; (8005718 <xQueueGenericSend+0x1f8>)
 800561a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	e00a      	b.n	8005640 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800562a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005630:	4b39      	ldr	r3, [pc, #228]	; (8005718 <xQueueGenericSend+0x1f8>)
 8005632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005640:	f001 fb64 	bl	8006d0c <vPortExitCritical>
				return pdPASS;
 8005644:	2301      	movs	r3, #1
 8005646:	e063      	b.n	8005710 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d103      	bne.n	8005656 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800564e:	f001 fb5d 	bl	8006d0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005652:	2300      	movs	r3, #0
 8005654:	e05c      	b.n	8005710 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800565c:	f107 0314 	add.w	r3, r7, #20
 8005660:	4618      	mov	r0, r3
 8005662:	f000 ffc9 	bl	80065f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005666:	2301      	movs	r3, #1
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800566a:	f001 fb4f 	bl	8006d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800566e:	f000 fd7b 	bl	8006168 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005672:	f001 fb1b 	bl	8006cac <vPortEnterCritical>
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800567c:	b25b      	sxtb	r3, r3
 800567e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005682:	d103      	bne.n	800568c <xQueueGenericSend+0x16c>
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005692:	b25b      	sxtb	r3, r3
 8005694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005698:	d103      	bne.n	80056a2 <xQueueGenericSend+0x182>
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056a2:	f001 fb33 	bl	8006d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056a6:	1d3a      	adds	r2, r7, #4
 80056a8:	f107 0314 	add.w	r3, r7, #20
 80056ac:	4611      	mov	r1, r2
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 ffb8 	bl	8006624 <xTaskCheckForTimeOut>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d124      	bne.n	8005704 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056bc:	f000 fb1e 	bl	8005cfc <prvIsQueueFull>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d018      	beq.n	80056f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	3310      	adds	r3, #16
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	4611      	mov	r1, r2
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 ff0c 	bl	80064ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056d6:	f000 faa9 	bl	8005c2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056da:	f000 fd53 	bl	8006184 <xTaskResumeAll>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f47f af7c 	bne.w	80055de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80056e6:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <xQueueGenericSend+0x1f8>)
 80056e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	e772      	b.n	80055de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056fa:	f000 fa97 	bl	8005c2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056fe:	f000 fd41 	bl	8006184 <xTaskResumeAll>
 8005702:	e76c      	b.n	80055de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005706:	f000 fa91 	bl	8005c2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800570a:	f000 fd3b 	bl	8006184 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800570e:	2300      	movs	r3, #0
		}
	}
}
 8005710:	4618      	mov	r0, r3
 8005712:	3738      	adds	r7, #56	; 0x38
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	e000ed04 	.word	0xe000ed04

0800571c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08e      	sub	sp, #56	; 0x38
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005746:	bf00      	nop
 8005748:	e7fe      	b.n	8005748 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d103      	bne.n	8005758 <xQueueGenericSendFromISR+0x3c>
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <xQueueGenericSendFromISR+0x40>
 8005758:	2301      	movs	r3, #1
 800575a:	e000      	b.n	800575e <xQueueGenericSendFromISR+0x42>
 800575c:	2300      	movs	r3, #0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10a      	bne.n	8005778 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	623b      	str	r3, [r7, #32]
}
 8005774:	bf00      	nop
 8005776:	e7fe      	b.n	8005776 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b02      	cmp	r3, #2
 800577c:	d103      	bne.n	8005786 <xQueueGenericSendFromISR+0x6a>
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <xQueueGenericSendFromISR+0x6e>
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <xQueueGenericSendFromISR+0x70>
 800578a:	2300      	movs	r3, #0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10a      	bne.n	80057a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	61fb      	str	r3, [r7, #28]
}
 80057a2:	bf00      	nop
 80057a4:	e7fe      	b.n	80057a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057a6:	f001 fb43 	bl	8006e30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057aa:	f3ef 8211 	mrs	r2, BASEPRI
 80057ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	61ba      	str	r2, [r7, #24]
 80057c0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057c2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d302      	bcc.n	80057d8 <xQueueGenericSendFromISR+0xbc>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d12c      	bne.n	8005832 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057e8:	f000 f990 	bl	8005b0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057ec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f4:	d112      	bne.n	800581c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d016      	beq.n	800582c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	3324      	adds	r3, #36	; 0x24
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fe96 	bl	8006534 <xTaskRemoveFromEventList>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00e      	beq.n	800582c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00b      	beq.n	800582c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	e007      	b.n	800582c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800581c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005820:	3301      	adds	r3, #1
 8005822:	b2db      	uxtb	r3, r3
 8005824:	b25a      	sxtb	r2, r3
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800582c:	2301      	movs	r3, #1
 800582e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005830:	e001      	b.n	8005836 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005832:	2300      	movs	r3, #0
 8005834:	637b      	str	r3, [r7, #52]	; 0x34
 8005836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005838:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005840:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005844:	4618      	mov	r0, r3
 8005846:	3738      	adds	r7, #56	; 0x38
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08c      	sub	sp, #48	; 0x30
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005858:	2300      	movs	r3, #0
 800585a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <xQueueReceive+0x30>
	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	623b      	str	r3, [r7, #32]
}
 8005878:	bf00      	nop
 800587a:	e7fe      	b.n	800587a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d103      	bne.n	800588a <xQueueReceive+0x3e>
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <xQueueReceive+0x42>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <xQueueReceive+0x44>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <xQueueReceive+0x5e>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	61fb      	str	r3, [r7, #28]
}
 80058a6:	bf00      	nop
 80058a8:	e7fe      	b.n	80058a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058aa:	f001 f803 	bl	80068b4 <xTaskGetSchedulerState>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d102      	bne.n	80058ba <xQueueReceive+0x6e>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <xQueueReceive+0x72>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <xQueueReceive+0x74>
 80058be:	2300      	movs	r3, #0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <xQueueReceive+0x8e>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	61bb      	str	r3, [r7, #24]
}
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80058da:	f001 f9e7 	bl	8006cac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d01f      	beq.n	800592a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ee:	f000 f977 	bl	8005be0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	1e5a      	subs	r2, r3, #1
 80058f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00f      	beq.n	8005922 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005904:	3310      	adds	r3, #16
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fe14 	bl	8006534 <xTaskRemoveFromEventList>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d007      	beq.n	8005922 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005912:	4b3d      	ldr	r3, [pc, #244]	; (8005a08 <xQueueReceive+0x1bc>)
 8005914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005922:	f001 f9f3 	bl	8006d0c <vPortExitCritical>
				return pdPASS;
 8005926:	2301      	movs	r3, #1
 8005928:	e069      	b.n	80059fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d103      	bne.n	8005938 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005930:	f001 f9ec 	bl	8006d0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005934:	2300      	movs	r3, #0
 8005936:	e062      	b.n	80059fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800593e:	f107 0310 	add.w	r3, r7, #16
 8005942:	4618      	mov	r0, r3
 8005944:	f000 fe58 	bl	80065f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005948:	2301      	movs	r3, #1
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800594c:	f001 f9de 	bl	8006d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005950:	f000 fc0a 	bl	8006168 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005954:	f001 f9aa 	bl	8006cac <vPortEnterCritical>
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800595e:	b25b      	sxtb	r3, r3
 8005960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005964:	d103      	bne.n	800596e <xQueueReceive+0x122>
 8005966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005970:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005974:	b25b      	sxtb	r3, r3
 8005976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597a:	d103      	bne.n	8005984 <xQueueReceive+0x138>
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005984:	f001 f9c2 	bl	8006d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005988:	1d3a      	adds	r2, r7, #4
 800598a:	f107 0310 	add.w	r3, r7, #16
 800598e:	4611      	mov	r1, r2
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fe47 	bl	8006624 <xTaskCheckForTimeOut>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d123      	bne.n	80059e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800599c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800599e:	f000 f997 	bl	8005cd0 <prvIsQueueEmpty>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d017      	beq.n	80059d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059aa:	3324      	adds	r3, #36	; 0x24
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	4611      	mov	r1, r2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fd9b 	bl	80064ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059b8:	f000 f938 	bl	8005c2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059bc:	f000 fbe2 	bl	8006184 <xTaskResumeAll>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d189      	bne.n	80058da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80059c6:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <xQueueReceive+0x1bc>)
 80059c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	e780      	b.n	80058da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80059d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059da:	f000 f927 	bl	8005c2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059de:	f000 fbd1 	bl	8006184 <xTaskResumeAll>
 80059e2:	e77a      	b.n	80058da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80059e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059e6:	f000 f921 	bl	8005c2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059ea:	f000 fbcb 	bl	8006184 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059f0:	f000 f96e 	bl	8005cd0 <prvIsQueueEmpty>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f43f af6f 	beq.w	80058da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3730      	adds	r7, #48	; 0x30
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	e000ed04 	.word	0xe000ed04

08005a0c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08e      	sub	sp, #56	; 0x38
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10a      	bne.n	8005a38 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	623b      	str	r3, [r7, #32]
}
 8005a34:	bf00      	nop
 8005a36:	e7fe      	b.n	8005a36 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d103      	bne.n	8005a46 <xQueueReceiveFromISR+0x3a>
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <xQueueReceiveFromISR+0x3e>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e000      	b.n	8005a4c <xQueueReceiveFromISR+0x40>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	61fb      	str	r3, [r7, #28]
}
 8005a62:	bf00      	nop
 8005a64:	e7fe      	b.n	8005a64 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a66:	f001 f9e3 	bl	8006e30 <vPortValidateInterruptPriority>
	__asm volatile
 8005a6a:	f3ef 8211 	mrs	r2, BASEPRI
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	61ba      	str	r2, [r7, #24]
 8005a80:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005a82:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d02f      	beq.n	8005af2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aa0:	f000 f89e 	bl	8005be0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa6:	1e5a      	subs	r2, r3, #1
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aaa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005aac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab4:	d112      	bne.n	8005adc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d016      	beq.n	8005aec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac0:	3310      	adds	r3, #16
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fd36 	bl	8006534 <xTaskRemoveFromEventList>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00e      	beq.n	8005aec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00b      	beq.n	8005aec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	e007      	b.n	8005aec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	b25a      	sxtb	r2, r3
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005aec:	2301      	movs	r3, #1
 8005aee:	637b      	str	r3, [r7, #52]	; 0x34
 8005af0:	e001      	b.n	8005af6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	637b      	str	r3, [r7, #52]	; 0x34
 8005af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f383 8811 	msr	BASEPRI, r3
}
 8005b00:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3738      	adds	r7, #56	; 0x38
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10d      	bne.n	8005b46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d14d      	bne.n	8005bce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 feda 	bl	80068f0 <xTaskPriorityDisinherit>
 8005b3c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	605a      	str	r2, [r3, #4]
 8005b44:	e043      	b.n	8005bce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d119      	bne.n	8005b80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6898      	ldr	r0, [r3, #8]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b54:	461a      	mov	r2, r3
 8005b56:	68b9      	ldr	r1, [r7, #8]
 8005b58:	f001 fbaa 	bl	80072b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	441a      	add	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d32b      	bcc.n	8005bce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	609a      	str	r2, [r3, #8]
 8005b7e:	e026      	b.n	8005bce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	68d8      	ldr	r0, [r3, #12]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	461a      	mov	r2, r3
 8005b8a:	68b9      	ldr	r1, [r7, #8]
 8005b8c:	f001 fb90 	bl	80072b0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	425b      	negs	r3, r3
 8005b9a:	441a      	add	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d207      	bcs.n	8005bbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb4:	425b      	negs	r3, r3
 8005bb6:	441a      	add	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d105      	bne.n	8005bce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005bd6:	697b      	ldr	r3, [r7, #20]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d018      	beq.n	8005c24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	441a      	add	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d303      	bcc.n	8005c14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68d9      	ldr	r1, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	6838      	ldr	r0, [r7, #0]
 8005c20:	f001 fb46 	bl	80072b0 <memcpy>
	}
}
 8005c24:	bf00      	nop
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c34:	f001 f83a 	bl	8006cac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c40:	e011      	b.n	8005c66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d012      	beq.n	8005c70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3324      	adds	r3, #36	; 0x24
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fc70 	bl	8006534 <xTaskRemoveFromEventList>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c5a:	f000 fd45 	bl	80066e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	dce9      	bgt.n	8005c42 <prvUnlockQueue+0x16>
 8005c6e:	e000      	b.n	8005c72 <prvUnlockQueue+0x46>
					break;
 8005c70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	22ff      	movs	r2, #255	; 0xff
 8005c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c7a:	f001 f847 	bl	8006d0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c7e:	f001 f815 	bl	8006cac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c8a:	e011      	b.n	8005cb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d012      	beq.n	8005cba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3310      	adds	r3, #16
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 fc4b 	bl	8006534 <xTaskRemoveFromEventList>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ca4:	f000 fd20 	bl	80066e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ca8:	7bbb      	ldrb	r3, [r7, #14]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	dce9      	bgt.n	8005c8c <prvUnlockQueue+0x60>
 8005cb8:	e000      	b.n	8005cbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005cba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	22ff      	movs	r2, #255	; 0xff
 8005cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005cc4:	f001 f822 	bl	8006d0c <vPortExitCritical>
}
 8005cc8:	bf00      	nop
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cd8:	f000 ffe8 	bl	8006cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d102      	bne.n	8005cea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	e001      	b.n	8005cee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005cea:	2300      	movs	r3, #0
 8005cec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cee:	f001 f80d 	bl	8006d0c <vPortExitCritical>

	return xReturn;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d04:	f000 ffd2 	bl	8006cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d102      	bne.n	8005d1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d14:	2301      	movs	r3, #1
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	e001      	b.n	8005d1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d1e:	f000 fff5 	bl	8006d0c <vPortExitCritical>

	return xReturn;
 8005d22:	68fb      	ldr	r3, [r7, #12]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08e      	sub	sp, #56	; 0x38
 8005d30:	af04      	add	r7, sp, #16
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
 8005d38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10a      	bne.n	8005d56 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	623b      	str	r3, [r7, #32]
}
 8005d52:	bf00      	nop
 8005d54:	e7fe      	b.n	8005d54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10a      	bne.n	8005d72 <xTaskCreateStatic+0x46>
	__asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	61fb      	str	r3, [r7, #28]
}
 8005d6e:	bf00      	nop
 8005d70:	e7fe      	b.n	8005d70 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d72:	2354      	movs	r3, #84	; 0x54
 8005d74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	2b54      	cmp	r3, #84	; 0x54
 8005d7a:	d00a      	beq.n	8005d92 <xTaskCreateStatic+0x66>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	61bb      	str	r3, [r7, #24]
}
 8005d8e:	bf00      	nop
 8005d90:	e7fe      	b.n	8005d90 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01e      	beq.n	8005dd6 <xTaskCreateStatic+0xaa>
 8005d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d01b      	beq.n	8005dd6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005da6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005db0:	2300      	movs	r3, #0
 8005db2:	9303      	str	r3, [sp, #12]
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	9302      	str	r3, [sp, #8]
 8005db8:	f107 0314 	add.w	r3, r7, #20
 8005dbc:	9301      	str	r3, [sp, #4]
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	68b9      	ldr	r1, [r7, #8]
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 f850 	bl	8005e6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005dce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dd0:	f000 f8cc 	bl	8005f6c <prvAddNewTaskToReadyList>
 8005dd4:	e001      	b.n	8005dda <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005dda:	697b      	ldr	r3, [r7, #20]
	}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3728      	adds	r7, #40	; 0x28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08c      	sub	sp, #48	; 0x30
 8005de8:	af04      	add	r7, sp, #16
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	603b      	str	r3, [r7, #0]
 8005df0:	4613      	mov	r3, r2
 8005df2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005df4:	88fb      	ldrh	r3, [r7, #6]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f001 f857 	bl	8006eac <pvPortMalloc>
 8005dfe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00e      	beq.n	8005e24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005e06:	2054      	movs	r0, #84	; 0x54
 8005e08:	f001 f850 	bl	8006eac <pvPortMalloc>
 8005e0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	631a      	str	r2, [r3, #48]	; 0x30
 8005e1a:	e005      	b.n	8005e28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e1c:	6978      	ldr	r0, [r7, #20]
 8005e1e:	f001 f909 	bl	8007034 <vPortFree>
 8005e22:	e001      	b.n	8005e28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e24:	2300      	movs	r3, #0
 8005e26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d017      	beq.n	8005e5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e36:	88fa      	ldrh	r2, [r7, #6]
 8005e38:	2300      	movs	r3, #0
 8005e3a:	9303      	str	r3, [sp, #12]
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	9302      	str	r3, [sp, #8]
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 f80e 	bl	8005e6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e52:	69f8      	ldr	r0, [r7, #28]
 8005e54:	f000 f88a 	bl	8005f6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	61bb      	str	r3, [r7, #24]
 8005e5c:	e002      	b.n	8005e64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e64:	69bb      	ldr	r3, [r7, #24]
	}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3720      	adds	r7, #32
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b088      	sub	sp, #32
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	607a      	str	r2, [r7, #4]
 8005e7a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e86:	3b01      	subs	r3, #1
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	f023 0307 	bic.w	r3, r3, #7
 8005e94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00a      	beq.n	8005eb6 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	617b      	str	r3, [r7, #20]
}
 8005eb2:	bf00      	nop
 8005eb4:	e7fe      	b.n	8005eb4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61fb      	str	r3, [r7, #28]
 8005eba:	e012      	b.n	8005ee2 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	7819      	ldrb	r1, [r3, #0]
 8005ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	3334      	adds	r3, #52	; 0x34
 8005ecc:	460a      	mov	r2, r1
 8005ece:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d006      	beq.n	8005eea <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	61fb      	str	r3, [r7, #28]
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	2b0f      	cmp	r3, #15
 8005ee6:	d9e9      	bls.n	8005ebc <prvInitialiseNewTask+0x4e>
 8005ee8:	e000      	b.n	8005eec <prvInitialiseNewTask+0x7e>
		{
			break;
 8005eea:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	2b06      	cmp	r3, #6
 8005ef8:	d901      	bls.n	8005efe <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005efa:	2306      	movs	r3, #6
 8005efc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f02:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f08:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f12:	3304      	adds	r3, #4
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7ff f936 	bl	8005186 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	3318      	adds	r3, #24
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7ff f931 	bl	8005186 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f28:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2c:	f1c3 0207 	rsb	r2, r3, #7
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f38:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	68f9      	ldr	r1, [r7, #12]
 8005f4c:	69b8      	ldr	r0, [r7, #24]
 8005f4e:	f000 fdbb 	bl	8006ac8 <pxPortInitialiseStack>
 8005f52:	4602      	mov	r2, r0
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f64:	bf00      	nop
 8005f66:	3720      	adds	r7, #32
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f74:	f000 fe9a 	bl	8006cac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f78:	4b2a      	ldr	r3, [pc, #168]	; (8006024 <prvAddNewTaskToReadyList+0xb8>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	4a29      	ldr	r2, [pc, #164]	; (8006024 <prvAddNewTaskToReadyList+0xb8>)
 8005f80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f82:	4b29      	ldr	r3, [pc, #164]	; (8006028 <prvAddNewTaskToReadyList+0xbc>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d109      	bne.n	8005f9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f8a:	4a27      	ldr	r2, [pc, #156]	; (8006028 <prvAddNewTaskToReadyList+0xbc>)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f90:	4b24      	ldr	r3, [pc, #144]	; (8006024 <prvAddNewTaskToReadyList+0xb8>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d110      	bne.n	8005fba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f98:	f000 fbca 	bl	8006730 <prvInitialiseTaskLists>
 8005f9c:	e00d      	b.n	8005fba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f9e:	4b23      	ldr	r3, [pc, #140]	; (800602c <prvAddNewTaskToReadyList+0xc0>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fa6:	4b20      	ldr	r3, [pc, #128]	; (8006028 <prvAddNewTaskToReadyList+0xbc>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d802      	bhi.n	8005fba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005fb4:	4a1c      	ldr	r2, [pc, #112]	; (8006028 <prvAddNewTaskToReadyList+0xbc>)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005fba:	4b1d      	ldr	r3, [pc, #116]	; (8006030 <prvAddNewTaskToReadyList+0xc4>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	4a1b      	ldr	r2, [pc, #108]	; (8006030 <prvAddNewTaskToReadyList+0xc4>)
 8005fc2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc8:	2201      	movs	r2, #1
 8005fca:	409a      	lsls	r2, r3
 8005fcc:	4b19      	ldr	r3, [pc, #100]	; (8006034 <prvAddNewTaskToReadyList+0xc8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	4a18      	ldr	r2, [pc, #96]	; (8006034 <prvAddNewTaskToReadyList+0xc8>)
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4a15      	ldr	r2, [pc, #84]	; (8006038 <prvAddNewTaskToReadyList+0xcc>)
 8005fe4:	441a      	add	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	4619      	mov	r1, r3
 8005fec:	4610      	mov	r0, r2
 8005fee:	f7ff f8d6 	bl	800519e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ff2:	f000 fe8b 	bl	8006d0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	; (800602c <prvAddNewTaskToReadyList+0xc0>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00e      	beq.n	800601c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ffe:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <prvAddNewTaskToReadyList+0xbc>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	429a      	cmp	r2, r3
 800600a:	d207      	bcs.n	800601c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800600c:	4b0b      	ldr	r3, [pc, #44]	; (800603c <prvAddNewTaskToReadyList+0xd0>)
 800600e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800601c:	bf00      	nop
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	2000056c 	.word	0x2000056c
 8006028:	2000046c 	.word	0x2000046c
 800602c:	20000578 	.word	0x20000578
 8006030:	20000588 	.word	0x20000588
 8006034:	20000574 	.word	0x20000574
 8006038:	20000470 	.word	0x20000470
 800603c:	e000ed04 	.word	0xe000ed04

08006040 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006048:	2300      	movs	r3, #0
 800604a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d017      	beq.n	8006082 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006052:	4b13      	ldr	r3, [pc, #76]	; (80060a0 <vTaskDelay+0x60>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <vTaskDelay+0x30>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	60bb      	str	r3, [r7, #8]
}
 800606c:	bf00      	nop
 800606e:	e7fe      	b.n	800606e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006070:	f000 f87a 	bl	8006168 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006074:	2100      	movs	r1, #0
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fcc0 	bl	80069fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800607c:	f000 f882 	bl	8006184 <xTaskResumeAll>
 8006080:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d107      	bne.n	8006098 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006088:	4b06      	ldr	r3, [pc, #24]	; (80060a4 <vTaskDelay+0x64>)
 800608a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006098:	bf00      	nop
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20000594 	.word	0x20000594
 80060a4:	e000ed04 	.word	0xe000ed04

080060a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08a      	sub	sp, #40	; 0x28
 80060ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060b2:	2300      	movs	r3, #0
 80060b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060b6:	463a      	mov	r2, r7
 80060b8:	1d39      	adds	r1, r7, #4
 80060ba:	f107 0308 	add.w	r3, r7, #8
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fb fbe2 	bl	8001888 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	9202      	str	r2, [sp, #8]
 80060cc:	9301      	str	r3, [sp, #4]
 80060ce:	2300      	movs	r3, #0
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	2300      	movs	r3, #0
 80060d4:	460a      	mov	r2, r1
 80060d6:	491e      	ldr	r1, [pc, #120]	; (8006150 <vTaskStartScheduler+0xa8>)
 80060d8:	481e      	ldr	r0, [pc, #120]	; (8006154 <vTaskStartScheduler+0xac>)
 80060da:	f7ff fe27 	bl	8005d2c <xTaskCreateStatic>
 80060de:	4603      	mov	r3, r0
 80060e0:	4a1d      	ldr	r2, [pc, #116]	; (8006158 <vTaskStartScheduler+0xb0>)
 80060e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060e4:	4b1c      	ldr	r3, [pc, #112]	; (8006158 <vTaskStartScheduler+0xb0>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060ec:	2301      	movs	r3, #1
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	e001      	b.n	80060f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d116      	bne.n	800612a <vTaskStartScheduler+0x82>
	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	613b      	str	r3, [r7, #16]
}
 800610e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006110:	4b12      	ldr	r3, [pc, #72]	; (800615c <vTaskStartScheduler+0xb4>)
 8006112:	f04f 32ff 	mov.w	r2, #4294967295
 8006116:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006118:	4b11      	ldr	r3, [pc, #68]	; (8006160 <vTaskStartScheduler+0xb8>)
 800611a:	2201      	movs	r2, #1
 800611c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800611e:	4b11      	ldr	r3, [pc, #68]	; (8006164 <vTaskStartScheduler+0xbc>)
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006124:	f000 fd50 	bl	8006bc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006128:	e00e      	b.n	8006148 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006130:	d10a      	bne.n	8006148 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	60fb      	str	r3, [r7, #12]
}
 8006144:	bf00      	nop
 8006146:	e7fe      	b.n	8006146 <vTaskStartScheduler+0x9e>
}
 8006148:	bf00      	nop
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	0800a7b4 	.word	0x0800a7b4
 8006154:	08006701 	.word	0x08006701
 8006158:	20000590 	.word	0x20000590
 800615c:	2000058c 	.word	0x2000058c
 8006160:	20000578 	.word	0x20000578
 8006164:	20000570 	.word	0x20000570

08006168 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800616c:	4b04      	ldr	r3, [pc, #16]	; (8006180 <vTaskSuspendAll+0x18>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3301      	adds	r3, #1
 8006172:	4a03      	ldr	r2, [pc, #12]	; (8006180 <vTaskSuspendAll+0x18>)
 8006174:	6013      	str	r3, [r2, #0]
}
 8006176:	bf00      	nop
 8006178:	46bd      	mov	sp, r7
 800617a:	bc80      	pop	{r7}
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	20000594 	.word	0x20000594

08006184 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800618e:	2300      	movs	r3, #0
 8006190:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006192:	4b41      	ldr	r3, [pc, #260]	; (8006298 <xTaskResumeAll+0x114>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10a      	bne.n	80061b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	603b      	str	r3, [r7, #0]
}
 80061ac:	bf00      	nop
 80061ae:	e7fe      	b.n	80061ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061b0:	f000 fd7c 	bl	8006cac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061b4:	4b38      	ldr	r3, [pc, #224]	; (8006298 <xTaskResumeAll+0x114>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	4a37      	ldr	r2, [pc, #220]	; (8006298 <xTaskResumeAll+0x114>)
 80061bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061be:	4b36      	ldr	r3, [pc, #216]	; (8006298 <xTaskResumeAll+0x114>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d161      	bne.n	800628a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061c6:	4b35      	ldr	r3, [pc, #212]	; (800629c <xTaskResumeAll+0x118>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d05d      	beq.n	800628a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061ce:	e02e      	b.n	800622e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80061d0:	4b33      	ldr	r3, [pc, #204]	; (80062a0 <xTaskResumeAll+0x11c>)
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3318      	adds	r3, #24
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff f839 	bl	8005254 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3304      	adds	r3, #4
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff f834 	bl	8005254 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f0:	2201      	movs	r2, #1
 80061f2:	409a      	lsls	r2, r3
 80061f4:	4b2b      	ldr	r3, [pc, #172]	; (80062a4 <xTaskResumeAll+0x120>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	4a2a      	ldr	r2, [pc, #168]	; (80062a4 <xTaskResumeAll+0x120>)
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4a27      	ldr	r2, [pc, #156]	; (80062a8 <xTaskResumeAll+0x124>)
 800620c:	441a      	add	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3304      	adds	r3, #4
 8006212:	4619      	mov	r1, r3
 8006214:	4610      	mov	r0, r2
 8006216:	f7fe ffc2 	bl	800519e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621e:	4b23      	ldr	r3, [pc, #140]	; (80062ac <xTaskResumeAll+0x128>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006224:	429a      	cmp	r2, r3
 8006226:	d302      	bcc.n	800622e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006228:	4b21      	ldr	r3, [pc, #132]	; (80062b0 <xTaskResumeAll+0x12c>)
 800622a:	2201      	movs	r2, #1
 800622c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800622e:	4b1c      	ldr	r3, [pc, #112]	; (80062a0 <xTaskResumeAll+0x11c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1cc      	bne.n	80061d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800623c:	f000 fb16 	bl	800686c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006240:	4b1c      	ldr	r3, [pc, #112]	; (80062b4 <xTaskResumeAll+0x130>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d010      	beq.n	800626e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800624c:	f000 f836 	bl	80062bc <xTaskIncrementTick>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006256:	4b16      	ldr	r3, [pc, #88]	; (80062b0 <xTaskResumeAll+0x12c>)
 8006258:	2201      	movs	r2, #1
 800625a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3b01      	subs	r3, #1
 8006260:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1f1      	bne.n	800624c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006268:	4b12      	ldr	r3, [pc, #72]	; (80062b4 <xTaskResumeAll+0x130>)
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800626e:	4b10      	ldr	r3, [pc, #64]	; (80062b0 <xTaskResumeAll+0x12c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d009      	beq.n	800628a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006276:	2301      	movs	r3, #1
 8006278:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800627a:	4b0f      	ldr	r3, [pc, #60]	; (80062b8 <xTaskResumeAll+0x134>)
 800627c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800628a:	f000 fd3f 	bl	8006d0c <vPortExitCritical>

	return xAlreadyYielded;
 800628e:	68bb      	ldr	r3, [r7, #8]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	20000594 	.word	0x20000594
 800629c:	2000056c 	.word	0x2000056c
 80062a0:	2000052c 	.word	0x2000052c
 80062a4:	20000574 	.word	0x20000574
 80062a8:	20000470 	.word	0x20000470
 80062ac:	2000046c 	.word	0x2000046c
 80062b0:	20000580 	.word	0x20000580
 80062b4:	2000057c 	.word	0x2000057c
 80062b8:	e000ed04 	.word	0xe000ed04

080062bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062c2:	2300      	movs	r3, #0
 80062c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062c6:	4b51      	ldr	r3, [pc, #324]	; (800640c <xTaskIncrementTick+0x150>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f040 808d 	bne.w	80063ea <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062d0:	4b4f      	ldr	r3, [pc, #316]	; (8006410 <xTaskIncrementTick+0x154>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3301      	adds	r3, #1
 80062d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062d8:	4a4d      	ldr	r2, [pc, #308]	; (8006410 <xTaskIncrementTick+0x154>)
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d120      	bne.n	8006326 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80062e4:	4b4b      	ldr	r3, [pc, #300]	; (8006414 <xTaskIncrementTick+0x158>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <xTaskIncrementTick+0x48>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	603b      	str	r3, [r7, #0]
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <xTaskIncrementTick+0x46>
 8006304:	4b43      	ldr	r3, [pc, #268]	; (8006414 <xTaskIncrementTick+0x158>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	4b43      	ldr	r3, [pc, #268]	; (8006418 <xTaskIncrementTick+0x15c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a41      	ldr	r2, [pc, #260]	; (8006414 <xTaskIncrementTick+0x158>)
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	4a41      	ldr	r2, [pc, #260]	; (8006418 <xTaskIncrementTick+0x15c>)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6013      	str	r3, [r2, #0]
 8006318:	4b40      	ldr	r3, [pc, #256]	; (800641c <xTaskIncrementTick+0x160>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3301      	adds	r3, #1
 800631e:	4a3f      	ldr	r2, [pc, #252]	; (800641c <xTaskIncrementTick+0x160>)
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	f000 faa3 	bl	800686c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006326:	4b3e      	ldr	r3, [pc, #248]	; (8006420 <xTaskIncrementTick+0x164>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	429a      	cmp	r2, r3
 800632e:	d34d      	bcc.n	80063cc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006330:	4b38      	ldr	r3, [pc, #224]	; (8006414 <xTaskIncrementTick+0x158>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <xTaskIncrementTick+0x82>
 800633a:	2301      	movs	r3, #1
 800633c:	e000      	b.n	8006340 <xTaskIncrementTick+0x84>
 800633e:	2300      	movs	r3, #0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d004      	beq.n	800634e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006344:	4b36      	ldr	r3, [pc, #216]	; (8006420 <xTaskIncrementTick+0x164>)
 8006346:	f04f 32ff 	mov.w	r2, #4294967295
 800634a:	601a      	str	r2, [r3, #0]
					break;
 800634c:	e03e      	b.n	80063cc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800634e:	4b31      	ldr	r3, [pc, #196]	; (8006414 <xTaskIncrementTick+0x158>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	429a      	cmp	r2, r3
 8006364:	d203      	bcs.n	800636e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006366:	4a2e      	ldr	r2, [pc, #184]	; (8006420 <xTaskIncrementTick+0x164>)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6013      	str	r3, [r2, #0]
						break;
 800636c:	e02e      	b.n	80063cc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	3304      	adds	r3, #4
 8006372:	4618      	mov	r0, r3
 8006374:	f7fe ff6e 	bl	8005254 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637c:	2b00      	cmp	r3, #0
 800637e:	d004      	beq.n	800638a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	3318      	adds	r3, #24
 8006384:	4618      	mov	r0, r3
 8006386:	f7fe ff65 	bl	8005254 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	2201      	movs	r2, #1
 8006390:	409a      	lsls	r2, r3
 8006392:	4b24      	ldr	r3, [pc, #144]	; (8006424 <xTaskIncrementTick+0x168>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4313      	orrs	r3, r2
 8006398:	4a22      	ldr	r2, [pc, #136]	; (8006424 <xTaskIncrementTick+0x168>)
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a0:	4613      	mov	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4a1f      	ldr	r2, [pc, #124]	; (8006428 <xTaskIncrementTick+0x16c>)
 80063aa:	441a      	add	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	3304      	adds	r3, #4
 80063b0:	4619      	mov	r1, r3
 80063b2:	4610      	mov	r0, r2
 80063b4:	f7fe fef3 	bl	800519e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063bc:	4b1b      	ldr	r3, [pc, #108]	; (800642c <xTaskIncrementTick+0x170>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d3b4      	bcc.n	8006330 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80063c6:	2301      	movs	r3, #1
 80063c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ca:	e7b1      	b.n	8006330 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063cc:	4b17      	ldr	r3, [pc, #92]	; (800642c <xTaskIncrementTick+0x170>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d2:	4915      	ldr	r1, [pc, #84]	; (8006428 <xTaskIncrementTick+0x16c>)
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d907      	bls.n	80063f4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80063e4:	2301      	movs	r3, #1
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	e004      	b.n	80063f4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80063ea:	4b11      	ldr	r3, [pc, #68]	; (8006430 <xTaskIncrementTick+0x174>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3301      	adds	r3, #1
 80063f0:	4a0f      	ldr	r2, [pc, #60]	; (8006430 <xTaskIncrementTick+0x174>)
 80063f2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80063f4:	4b0f      	ldr	r3, [pc, #60]	; (8006434 <xTaskIncrementTick+0x178>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80063fc:	2301      	movs	r3, #1
 80063fe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006400:	697b      	ldr	r3, [r7, #20]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20000594 	.word	0x20000594
 8006410:	20000570 	.word	0x20000570
 8006414:	20000524 	.word	0x20000524
 8006418:	20000528 	.word	0x20000528
 800641c:	20000584 	.word	0x20000584
 8006420:	2000058c 	.word	0x2000058c
 8006424:	20000574 	.word	0x20000574
 8006428:	20000470 	.word	0x20000470
 800642c:	2000046c 	.word	0x2000046c
 8006430:	2000057c 	.word	0x2000057c
 8006434:	20000580 	.word	0x20000580

08006438 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800643e:	4b26      	ldr	r3, [pc, #152]	; (80064d8 <vTaskSwitchContext+0xa0>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006446:	4b25      	ldr	r3, [pc, #148]	; (80064dc <vTaskSwitchContext+0xa4>)
 8006448:	2201      	movs	r2, #1
 800644a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800644c:	e03f      	b.n	80064ce <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800644e:	4b23      	ldr	r3, [pc, #140]	; (80064dc <vTaskSwitchContext+0xa4>)
 8006450:	2200      	movs	r2, #0
 8006452:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006454:	4b22      	ldr	r3, [pc, #136]	; (80064e0 <vTaskSwitchContext+0xa8>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	fab3 f383 	clz	r3, r3
 8006460:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006462:	7afb      	ldrb	r3, [r7, #11]
 8006464:	f1c3 031f 	rsb	r3, r3, #31
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	491e      	ldr	r1, [pc, #120]	; (80064e4 <vTaskSwitchContext+0xac>)
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4613      	mov	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	440b      	add	r3, r1
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10a      	bne.n	8006494 <vTaskSwitchContext+0x5c>
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	607b      	str	r3, [r7, #4]
}
 8006490:	bf00      	nop
 8006492:	e7fe      	b.n	8006492 <vTaskSwitchContext+0x5a>
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4a11      	ldr	r2, [pc, #68]	; (80064e4 <vTaskSwitchContext+0xac>)
 80064a0:	4413      	add	r3, r2
 80064a2:	613b      	str	r3, [r7, #16]
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	605a      	str	r2, [r3, #4]
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	3308      	adds	r3, #8
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d104      	bne.n	80064c4 <vTaskSwitchContext+0x8c>
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	605a      	str	r2, [r3, #4]
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	4a07      	ldr	r2, [pc, #28]	; (80064e8 <vTaskSwitchContext+0xb0>)
 80064cc:	6013      	str	r3, [r2, #0]
}
 80064ce:	bf00      	nop
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bc80      	pop	{r7}
 80064d6:	4770      	bx	lr
 80064d8:	20000594 	.word	0x20000594
 80064dc:	20000580 	.word	0x20000580
 80064e0:	20000574 	.word	0x20000574
 80064e4:	20000470 	.word	0x20000470
 80064e8:	2000046c 	.word	0x2000046c

080064ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10a      	bne.n	8006512 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80064fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006500:	f383 8811 	msr	BASEPRI, r3
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	60fb      	str	r3, [r7, #12]
}
 800650e:	bf00      	nop
 8006510:	e7fe      	b.n	8006510 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006512:	4b07      	ldr	r3, [pc, #28]	; (8006530 <vTaskPlaceOnEventList+0x44>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3318      	adds	r3, #24
 8006518:	4619      	mov	r1, r3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7fe fe62 	bl	80051e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006520:	2101      	movs	r1, #1
 8006522:	6838      	ldr	r0, [r7, #0]
 8006524:	f000 fa6a 	bl	80069fc <prvAddCurrentTaskToDelayedList>
}
 8006528:	bf00      	nop
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	2000046c 	.word	0x2000046c

08006534 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10a      	bne.n	8006560 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	60fb      	str	r3, [r7, #12]
}
 800655c:	bf00      	nop
 800655e:	e7fe      	b.n	800655e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	3318      	adds	r3, #24
 8006564:	4618      	mov	r0, r3
 8006566:	f7fe fe75 	bl	8005254 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800656a:	4b1d      	ldr	r3, [pc, #116]	; (80065e0 <xTaskRemoveFromEventList+0xac>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d11c      	bne.n	80065ac <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	3304      	adds	r3, #4
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe fe6c 	bl	8005254 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	2201      	movs	r2, #1
 8006582:	409a      	lsls	r2, r3
 8006584:	4b17      	ldr	r3, [pc, #92]	; (80065e4 <xTaskRemoveFromEventList+0xb0>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4313      	orrs	r3, r2
 800658a:	4a16      	ldr	r2, [pc, #88]	; (80065e4 <xTaskRemoveFromEventList+0xb0>)
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006592:	4613      	mov	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4a13      	ldr	r2, [pc, #76]	; (80065e8 <xTaskRemoveFromEventList+0xb4>)
 800659c:	441a      	add	r2, r3
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	3304      	adds	r3, #4
 80065a2:	4619      	mov	r1, r3
 80065a4:	4610      	mov	r0, r2
 80065a6:	f7fe fdfa 	bl	800519e <vListInsertEnd>
 80065aa:	e005      	b.n	80065b8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	3318      	adds	r3, #24
 80065b0:	4619      	mov	r1, r3
 80065b2:	480e      	ldr	r0, [pc, #56]	; (80065ec <xTaskRemoveFromEventList+0xb8>)
 80065b4:	f7fe fdf3 	bl	800519e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065bc:	4b0c      	ldr	r3, [pc, #48]	; (80065f0 <xTaskRemoveFromEventList+0xbc>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d905      	bls.n	80065d2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065c6:	2301      	movs	r3, #1
 80065c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065ca:	4b0a      	ldr	r3, [pc, #40]	; (80065f4 <xTaskRemoveFromEventList+0xc0>)
 80065cc:	2201      	movs	r2, #1
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	e001      	b.n	80065d6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80065d2:	2300      	movs	r3, #0
 80065d4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80065d6:	697b      	ldr	r3, [r7, #20]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	20000594 	.word	0x20000594
 80065e4:	20000574 	.word	0x20000574
 80065e8:	20000470 	.word	0x20000470
 80065ec:	2000052c 	.word	0x2000052c
 80065f0:	2000046c 	.word	0x2000046c
 80065f4:	20000580 	.word	0x20000580

080065f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006600:	4b06      	ldr	r3, [pc, #24]	; (800661c <vTaskInternalSetTimeOutState+0x24>)
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006608:	4b05      	ldr	r3, [pc, #20]	; (8006620 <vTaskInternalSetTimeOutState+0x28>)
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	605a      	str	r2, [r3, #4]
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	bc80      	pop	{r7}
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	20000584 	.word	0x20000584
 8006620:	20000570 	.word	0x20000570

08006624 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10a      	bne.n	800664a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	613b      	str	r3, [r7, #16]
}
 8006646:	bf00      	nop
 8006648:	e7fe      	b.n	8006648 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10a      	bne.n	8006666 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	60fb      	str	r3, [r7, #12]
}
 8006662:	bf00      	nop
 8006664:	e7fe      	b.n	8006664 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006666:	f000 fb21 	bl	8006cac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800666a:	4b1d      	ldr	r3, [pc, #116]	; (80066e0 <xTaskCheckForTimeOut+0xbc>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006682:	d102      	bne.n	800668a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006684:	2300      	movs	r3, #0
 8006686:	61fb      	str	r3, [r7, #28]
 8006688:	e023      	b.n	80066d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	4b15      	ldr	r3, [pc, #84]	; (80066e4 <xTaskCheckForTimeOut+0xc0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	429a      	cmp	r2, r3
 8006694:	d007      	beq.n	80066a6 <xTaskCheckForTimeOut+0x82>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	429a      	cmp	r2, r3
 800669e:	d302      	bcc.n	80066a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066a0:	2301      	movs	r3, #1
 80066a2:	61fb      	str	r3, [r7, #28]
 80066a4:	e015      	b.n	80066d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d20b      	bcs.n	80066c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	1ad2      	subs	r2, r2, r3
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff ff9b 	bl	80065f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066c2:	2300      	movs	r3, #0
 80066c4:	61fb      	str	r3, [r7, #28]
 80066c6:	e004      	b.n	80066d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2200      	movs	r2, #0
 80066cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066ce:	2301      	movs	r3, #1
 80066d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80066d2:	f000 fb1b 	bl	8006d0c <vPortExitCritical>

	return xReturn;
 80066d6:	69fb      	ldr	r3, [r7, #28]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3720      	adds	r7, #32
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	20000570 	.word	0x20000570
 80066e4:	20000584 	.word	0x20000584

080066e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066ec:	4b03      	ldr	r3, [pc, #12]	; (80066fc <vTaskMissedYield+0x14>)
 80066ee:	2201      	movs	r2, #1
 80066f0:	601a      	str	r2, [r3, #0]
}
 80066f2:	bf00      	nop
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	20000580 	.word	0x20000580

08006700 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006708:	f000 f852 	bl	80067b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800670c:	4b06      	ldr	r3, [pc, #24]	; (8006728 <prvIdleTask+0x28>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d9f9      	bls.n	8006708 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006714:	4b05      	ldr	r3, [pc, #20]	; (800672c <prvIdleTask+0x2c>)
 8006716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006724:	e7f0      	b.n	8006708 <prvIdleTask+0x8>
 8006726:	bf00      	nop
 8006728:	20000470 	.word	0x20000470
 800672c:	e000ed04 	.word	0xe000ed04

08006730 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006736:	2300      	movs	r3, #0
 8006738:	607b      	str	r3, [r7, #4]
 800673a:	e00c      	b.n	8006756 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4a12      	ldr	r2, [pc, #72]	; (8006790 <prvInitialiseTaskLists+0x60>)
 8006748:	4413      	add	r3, r2
 800674a:	4618      	mov	r0, r3
 800674c:	f7fe fcfc 	bl	8005148 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3301      	adds	r3, #1
 8006754:	607b      	str	r3, [r7, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b06      	cmp	r3, #6
 800675a:	d9ef      	bls.n	800673c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800675c:	480d      	ldr	r0, [pc, #52]	; (8006794 <prvInitialiseTaskLists+0x64>)
 800675e:	f7fe fcf3 	bl	8005148 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006762:	480d      	ldr	r0, [pc, #52]	; (8006798 <prvInitialiseTaskLists+0x68>)
 8006764:	f7fe fcf0 	bl	8005148 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006768:	480c      	ldr	r0, [pc, #48]	; (800679c <prvInitialiseTaskLists+0x6c>)
 800676a:	f7fe fced 	bl	8005148 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800676e:	480c      	ldr	r0, [pc, #48]	; (80067a0 <prvInitialiseTaskLists+0x70>)
 8006770:	f7fe fcea 	bl	8005148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006774:	480b      	ldr	r0, [pc, #44]	; (80067a4 <prvInitialiseTaskLists+0x74>)
 8006776:	f7fe fce7 	bl	8005148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800677a:	4b0b      	ldr	r3, [pc, #44]	; (80067a8 <prvInitialiseTaskLists+0x78>)
 800677c:	4a05      	ldr	r2, [pc, #20]	; (8006794 <prvInitialiseTaskLists+0x64>)
 800677e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006780:	4b0a      	ldr	r3, [pc, #40]	; (80067ac <prvInitialiseTaskLists+0x7c>)
 8006782:	4a05      	ldr	r2, [pc, #20]	; (8006798 <prvInitialiseTaskLists+0x68>)
 8006784:	601a      	str	r2, [r3, #0]
}
 8006786:	bf00      	nop
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20000470 	.word	0x20000470
 8006794:	200004fc 	.word	0x200004fc
 8006798:	20000510 	.word	0x20000510
 800679c:	2000052c 	.word	0x2000052c
 80067a0:	20000540 	.word	0x20000540
 80067a4:	20000558 	.word	0x20000558
 80067a8:	20000524 	.word	0x20000524
 80067ac:	20000528 	.word	0x20000528

080067b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067b6:	e019      	b.n	80067ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067b8:	f000 fa78 	bl	8006cac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80067bc:	4b10      	ldr	r3, [pc, #64]	; (8006800 <prvCheckTasksWaitingTermination+0x50>)
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3304      	adds	r3, #4
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fe fd43 	bl	8005254 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067ce:	4b0d      	ldr	r3, [pc, #52]	; (8006804 <prvCheckTasksWaitingTermination+0x54>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	4a0b      	ldr	r2, [pc, #44]	; (8006804 <prvCheckTasksWaitingTermination+0x54>)
 80067d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067d8:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <prvCheckTasksWaitingTermination+0x58>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3b01      	subs	r3, #1
 80067de:	4a0a      	ldr	r2, [pc, #40]	; (8006808 <prvCheckTasksWaitingTermination+0x58>)
 80067e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067e2:	f000 fa93 	bl	8006d0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f810 	bl	800680c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067ec:	4b06      	ldr	r3, [pc, #24]	; (8006808 <prvCheckTasksWaitingTermination+0x58>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1e1      	bne.n	80067b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000540 	.word	0x20000540
 8006804:	2000056c 	.word	0x2000056c
 8006808:	20000554 	.word	0x20000554

0800680c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800681a:	2b00      	cmp	r3, #0
 800681c:	d108      	bne.n	8006830 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fc06 	bl	8007034 <vPortFree>
				vPortFree( pxTCB );
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fc03 	bl	8007034 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800682e:	e018      	b.n	8006862 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006836:	2b01      	cmp	r3, #1
 8006838:	d103      	bne.n	8006842 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fbfa 	bl	8007034 <vPortFree>
	}
 8006840:	e00f      	b.n	8006862 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006848:	2b02      	cmp	r3, #2
 800684a:	d00a      	beq.n	8006862 <prvDeleteTCB+0x56>
	__asm volatile
 800684c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	60fb      	str	r3, [r7, #12]
}
 800685e:	bf00      	nop
 8006860:	e7fe      	b.n	8006860 <prvDeleteTCB+0x54>
	}
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
	...

0800686c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006872:	4b0e      	ldr	r3, [pc, #56]	; (80068ac <prvResetNextTaskUnblockTime+0x40>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <prvResetNextTaskUnblockTime+0x14>
 800687c:	2301      	movs	r3, #1
 800687e:	e000      	b.n	8006882 <prvResetNextTaskUnblockTime+0x16>
 8006880:	2300      	movs	r3, #0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d004      	beq.n	8006890 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006886:	4b0a      	ldr	r3, [pc, #40]	; (80068b0 <prvResetNextTaskUnblockTime+0x44>)
 8006888:	f04f 32ff 	mov.w	r2, #4294967295
 800688c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800688e:	e008      	b.n	80068a2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006890:	4b06      	ldr	r3, [pc, #24]	; (80068ac <prvResetNextTaskUnblockTime+0x40>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	4a04      	ldr	r2, [pc, #16]	; (80068b0 <prvResetNextTaskUnblockTime+0x44>)
 80068a0:	6013      	str	r3, [r2, #0]
}
 80068a2:	bf00      	nop
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bc80      	pop	{r7}
 80068aa:	4770      	bx	lr
 80068ac:	20000524 	.word	0x20000524
 80068b0:	2000058c 	.word	0x2000058c

080068b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068ba:	4b0b      	ldr	r3, [pc, #44]	; (80068e8 <xTaskGetSchedulerState+0x34>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d102      	bne.n	80068c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068c2:	2301      	movs	r3, #1
 80068c4:	607b      	str	r3, [r7, #4]
 80068c6:	e008      	b.n	80068da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068c8:	4b08      	ldr	r3, [pc, #32]	; (80068ec <xTaskGetSchedulerState+0x38>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d102      	bne.n	80068d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068d0:	2302      	movs	r3, #2
 80068d2:	607b      	str	r3, [r7, #4]
 80068d4:	e001      	b.n	80068da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068d6:	2300      	movs	r3, #0
 80068d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068da:	687b      	ldr	r3, [r7, #4]
	}
 80068dc:	4618      	mov	r0, r3
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bc80      	pop	{r7}
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	20000578 	.word	0x20000578
 80068ec:	20000594 	.word	0x20000594

080068f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068fc:	2300      	movs	r3, #0
 80068fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d06e      	beq.n	80069e4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006906:	4b3a      	ldr	r3, [pc, #232]	; (80069f0 <xTaskPriorityDisinherit+0x100>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	429a      	cmp	r2, r3
 800690e:	d00a      	beq.n	8006926 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	60fb      	str	r3, [r7, #12]
}
 8006922:	bf00      	nop
 8006924:	e7fe      	b.n	8006924 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10a      	bne.n	8006944 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	60bb      	str	r3, [r7, #8]
}
 8006940:	bf00      	nop
 8006942:	e7fe      	b.n	8006942 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006948:	1e5a      	subs	r2, r3, #1
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006956:	429a      	cmp	r2, r3
 8006958:	d044      	beq.n	80069e4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800695e:	2b00      	cmp	r3, #0
 8006960:	d140      	bne.n	80069e4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	3304      	adds	r3, #4
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe fc74 	bl	8005254 <uxListRemove>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d115      	bne.n	800699e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006976:	491f      	ldr	r1, [pc, #124]	; (80069f4 <xTaskPriorityDisinherit+0x104>)
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	440b      	add	r3, r1
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10a      	bne.n	800699e <xTaskPriorityDisinherit+0xae>
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698c:	2201      	movs	r2, #1
 800698e:	fa02 f303 	lsl.w	r3, r2, r3
 8006992:	43da      	mvns	r2, r3
 8006994:	4b18      	ldr	r3, [pc, #96]	; (80069f8 <xTaskPriorityDisinherit+0x108>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4013      	ands	r3, r2
 800699a:	4a17      	ldr	r2, [pc, #92]	; (80069f8 <xTaskPriorityDisinherit+0x108>)
 800699c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069aa:	f1c3 0207 	rsb	r2, r3, #7
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b6:	2201      	movs	r2, #1
 80069b8:	409a      	lsls	r2, r3
 80069ba:	4b0f      	ldr	r3, [pc, #60]	; (80069f8 <xTaskPriorityDisinherit+0x108>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4313      	orrs	r3, r2
 80069c0:	4a0d      	ldr	r2, [pc, #52]	; (80069f8 <xTaskPriorityDisinherit+0x108>)
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c8:	4613      	mov	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4a08      	ldr	r2, [pc, #32]	; (80069f4 <xTaskPriorityDisinherit+0x104>)
 80069d2:	441a      	add	r2, r3
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	3304      	adds	r3, #4
 80069d8:	4619      	mov	r1, r3
 80069da:	4610      	mov	r0, r2
 80069dc:	f7fe fbdf 	bl	800519e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80069e0:	2301      	movs	r3, #1
 80069e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069e4:	697b      	ldr	r3, [r7, #20]
	}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	2000046c 	.word	0x2000046c
 80069f4:	20000470 	.word	0x20000470
 80069f8:	20000574 	.word	0x20000574

080069fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a06:	4b29      	ldr	r3, [pc, #164]	; (8006aac <prvAddCurrentTaskToDelayedList+0xb0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a0c:	4b28      	ldr	r3, [pc, #160]	; (8006ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3304      	adds	r3, #4
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe fc1e 	bl	8005254 <uxListRemove>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10b      	bne.n	8006a36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006a1e:	4b24      	ldr	r3, [pc, #144]	; (8006ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a24:	2201      	movs	r2, #1
 8006a26:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2a:	43da      	mvns	r2, r3
 8006a2c:	4b21      	ldr	r3, [pc, #132]	; (8006ab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4013      	ands	r3, r2
 8006a32:	4a20      	ldr	r2, [pc, #128]	; (8006ab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3c:	d10a      	bne.n	8006a54 <prvAddCurrentTaskToDelayedList+0x58>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d007      	beq.n	8006a54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a44:	4b1a      	ldr	r3, [pc, #104]	; (8006ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	481a      	ldr	r0, [pc, #104]	; (8006ab8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006a4e:	f7fe fba6 	bl	800519e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a52:	e026      	b.n	8006aa2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4413      	add	r3, r2
 8006a5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a5c:	4b14      	ldr	r3, [pc, #80]	; (8006ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d209      	bcs.n	8006a80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a6c:	4b13      	ldr	r3, [pc, #76]	; (8006abc <prvAddCurrentTaskToDelayedList+0xc0>)
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	4b0f      	ldr	r3, [pc, #60]	; (8006ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3304      	adds	r3, #4
 8006a76:	4619      	mov	r1, r3
 8006a78:	4610      	mov	r0, r2
 8006a7a:	f7fe fbb3 	bl	80051e4 <vListInsert>
}
 8006a7e:	e010      	b.n	8006aa2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a80:	4b0f      	ldr	r3, [pc, #60]	; (8006ac0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	4b0a      	ldr	r3, [pc, #40]	; (8006ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3304      	adds	r3, #4
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	f7fe fba9 	bl	80051e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a92:	4b0c      	ldr	r3, [pc, #48]	; (8006ac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d202      	bcs.n	8006aa2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006a9c:	4a09      	ldr	r2, [pc, #36]	; (8006ac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	6013      	str	r3, [r2, #0]
}
 8006aa2:	bf00      	nop
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20000570 	.word	0x20000570
 8006ab0:	2000046c 	.word	0x2000046c
 8006ab4:	20000574 	.word	0x20000574
 8006ab8:	20000558 	.word	0x20000558
 8006abc:	20000528 	.word	0x20000528
 8006ac0:	20000524 	.word	0x20000524
 8006ac4:	2000058c 	.word	0x2000058c

08006ac8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	3b04      	subs	r3, #4
 8006ad8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3b04      	subs	r3, #4
 8006ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f023 0201 	bic.w	r2, r3, #1
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	3b04      	subs	r3, #4
 8006af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006af8:	4a08      	ldr	r2, [pc, #32]	; (8006b1c <pxPortInitialiseStack+0x54>)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	3b14      	subs	r3, #20
 8006b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3b20      	subs	r3, #32
 8006b0e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b10:	68fb      	ldr	r3, [r7, #12]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bc80      	pop	{r7}
 8006b1a:	4770      	bx	lr
 8006b1c:	08006b21 	.word	0x08006b21

08006b20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006b26:	2300      	movs	r3, #0
 8006b28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b2a:	4b12      	ldr	r3, [pc, #72]	; (8006b74 <prvTaskExitError+0x54>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b32:	d00a      	beq.n	8006b4a <prvTaskExitError+0x2a>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	60fb      	str	r3, [r7, #12]
}
 8006b46:	bf00      	nop
 8006b48:	e7fe      	b.n	8006b48 <prvTaskExitError+0x28>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	60bb      	str	r3, [r7, #8]
}
 8006b5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b5e:	bf00      	nop
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0fc      	beq.n	8006b60 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b66:	bf00      	nop
 8006b68:	bf00      	nop
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	2000001c 	.word	0x2000001c
	...

08006b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b80:	4b07      	ldr	r3, [pc, #28]	; (8006ba0 <pxCurrentTCBConst2>)
 8006b82:	6819      	ldr	r1, [r3, #0]
 8006b84:	6808      	ldr	r0, [r1, #0]
 8006b86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b8a:	f380 8809 	msr	PSP, r0
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f04f 0000 	mov.w	r0, #0
 8006b96:	f380 8811 	msr	BASEPRI, r0
 8006b9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006b9e:	4770      	bx	lr

08006ba0 <pxCurrentTCBConst2>:
 8006ba0:	2000046c 	.word	0x2000046c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop

08006ba8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006ba8:	4806      	ldr	r0, [pc, #24]	; (8006bc4 <prvPortStartFirstTask+0x1c>)
 8006baa:	6800      	ldr	r0, [r0, #0]
 8006bac:	6800      	ldr	r0, [r0, #0]
 8006bae:	f380 8808 	msr	MSP, r0
 8006bb2:	b662      	cpsie	i
 8006bb4:	b661      	cpsie	f
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	df00      	svc	0
 8006bc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006bc2:	bf00      	nop
 8006bc4:	e000ed08 	.word	0xe000ed08

08006bc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006bce:	4b32      	ldr	r3, [pc, #200]	; (8006c98 <xPortStartScheduler+0xd0>)
 8006bd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	22ff      	movs	r2, #255	; 0xff
 8006bde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006be8:	78fb      	ldrb	r3, [r7, #3]
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	4b2a      	ldr	r3, [pc, #168]	; (8006c9c <xPortStartScheduler+0xd4>)
 8006bf4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006bf6:	4b2a      	ldr	r3, [pc, #168]	; (8006ca0 <xPortStartScheduler+0xd8>)
 8006bf8:	2207      	movs	r2, #7
 8006bfa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bfc:	e009      	b.n	8006c12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006bfe:	4b28      	ldr	r3, [pc, #160]	; (8006ca0 <xPortStartScheduler+0xd8>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	4a26      	ldr	r2, [pc, #152]	; (8006ca0 <xPortStartScheduler+0xd8>)
 8006c06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c08:	78fb      	ldrb	r3, [r7, #3]
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c12:	78fb      	ldrb	r3, [r7, #3]
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c1a:	2b80      	cmp	r3, #128	; 0x80
 8006c1c:	d0ef      	beq.n	8006bfe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c1e:	4b20      	ldr	r3, [pc, #128]	; (8006ca0 <xPortStartScheduler+0xd8>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f1c3 0307 	rsb	r3, r3, #7
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	d00a      	beq.n	8006c40 <xPortStartScheduler+0x78>
	__asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	60bb      	str	r3, [r7, #8]
}
 8006c3c:	bf00      	nop
 8006c3e:	e7fe      	b.n	8006c3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c40:	4b17      	ldr	r3, [pc, #92]	; (8006ca0 <xPortStartScheduler+0xd8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	021b      	lsls	r3, r3, #8
 8006c46:	4a16      	ldr	r2, [pc, #88]	; (8006ca0 <xPortStartScheduler+0xd8>)
 8006c48:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c4a:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <xPortStartScheduler+0xd8>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c52:	4a13      	ldr	r2, [pc, #76]	; (8006ca0 <xPortStartScheduler+0xd8>)
 8006c54:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c5e:	4b11      	ldr	r3, [pc, #68]	; (8006ca4 <xPortStartScheduler+0xdc>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a10      	ldr	r2, [pc, #64]	; (8006ca4 <xPortStartScheduler+0xdc>)
 8006c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ca4 <xPortStartScheduler+0xdc>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a0d      	ldr	r2, [pc, #52]	; (8006ca4 <xPortStartScheduler+0xdc>)
 8006c70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c74:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c76:	f000 f8b9 	bl	8006dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ca8 <xPortStartScheduler+0xe0>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c80:	f7ff ff92 	bl	8006ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c84:	f7ff fbd8 	bl	8006438 <vTaskSwitchContext>
	prvTaskExitError();
 8006c88:	f7ff ff4a 	bl	8006b20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	e000e400 	.word	0xe000e400
 8006c9c:	20000598 	.word	0x20000598
 8006ca0:	2000059c 	.word	0x2000059c
 8006ca4:	e000ed20 	.word	0xe000ed20
 8006ca8:	2000001c 	.word	0x2000001c

08006cac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	607b      	str	r3, [r7, #4]
}
 8006cc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006cc6:	4b0f      	ldr	r3, [pc, #60]	; (8006d04 <vPortEnterCritical+0x58>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	4a0d      	ldr	r2, [pc, #52]	; (8006d04 <vPortEnterCritical+0x58>)
 8006cce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006cd0:	4b0c      	ldr	r3, [pc, #48]	; (8006d04 <vPortEnterCritical+0x58>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d10f      	bne.n	8006cf8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006cd8:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <vPortEnterCritical+0x5c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <vPortEnterCritical+0x4c>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	603b      	str	r3, [r7, #0]
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <vPortEnterCritical+0x4a>
	}
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bc80      	pop	{r7}
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	2000001c 	.word	0x2000001c
 8006d08:	e000ed04 	.word	0xe000ed04

08006d0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d12:	4b11      	ldr	r3, [pc, #68]	; (8006d58 <vPortExitCritical+0x4c>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10a      	bne.n	8006d30 <vPortExitCritical+0x24>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	607b      	str	r3, [r7, #4]
}
 8006d2c:	bf00      	nop
 8006d2e:	e7fe      	b.n	8006d2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d30:	4b09      	ldr	r3, [pc, #36]	; (8006d58 <vPortExitCritical+0x4c>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	4a08      	ldr	r2, [pc, #32]	; (8006d58 <vPortExitCritical+0x4c>)
 8006d38:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d3a:	4b07      	ldr	r3, [pc, #28]	; (8006d58 <vPortExitCritical+0x4c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d105      	bne.n	8006d4e <vPortExitCritical+0x42>
 8006d42:	2300      	movs	r3, #0
 8006d44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	f383 8811 	msr	BASEPRI, r3
}
 8006d4c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr
 8006d58:	2000001c 	.word	0x2000001c
 8006d5c:	00000000 	.word	0x00000000

08006d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d60:	f3ef 8009 	mrs	r0, PSP
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	4b0d      	ldr	r3, [pc, #52]	; (8006da0 <pxCurrentTCBConst>)
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006d70:	6010      	str	r0, [r2, #0]
 8006d72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006d76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d7a:	f380 8811 	msr	BASEPRI, r0
 8006d7e:	f7ff fb5b 	bl	8006438 <vTaskSwitchContext>
 8006d82:	f04f 0000 	mov.w	r0, #0
 8006d86:	f380 8811 	msr	BASEPRI, r0
 8006d8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006d8e:	6819      	ldr	r1, [r3, #0]
 8006d90:	6808      	ldr	r0, [r1, #0]
 8006d92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006d96:	f380 8809 	msr	PSP, r0
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	4770      	bx	lr

08006da0 <pxCurrentTCBConst>:
 8006da0:	2000046c 	.word	0x2000046c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop

08006da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	607b      	str	r3, [r7, #4]
}
 8006dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006dc2:	f7ff fa7b 	bl	80062bc <xTaskIncrementTick>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dcc:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <SysTick_Handler+0x40>)
 8006dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	f383 8811 	msr	BASEPRI, r3
}
 8006dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006de0:	bf00      	nop
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	e000ed04 	.word	0xe000ed04

08006dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006df0:	4b0a      	ldr	r3, [pc, #40]	; (8006e1c <vPortSetupTimerInterrupt+0x30>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006df6:	4b0a      	ldr	r3, [pc, #40]	; (8006e20 <vPortSetupTimerInterrupt+0x34>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006dfc:	4b09      	ldr	r3, [pc, #36]	; (8006e24 <vPortSetupTimerInterrupt+0x38>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a09      	ldr	r2, [pc, #36]	; (8006e28 <vPortSetupTimerInterrupt+0x3c>)
 8006e02:	fba2 2303 	umull	r2, r3, r2, r3
 8006e06:	099b      	lsrs	r3, r3, #6
 8006e08:	4a08      	ldr	r2, [pc, #32]	; (8006e2c <vPortSetupTimerInterrupt+0x40>)
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e0e:	4b03      	ldr	r3, [pc, #12]	; (8006e1c <vPortSetupTimerInterrupt+0x30>)
 8006e10:	2207      	movs	r2, #7
 8006e12:	601a      	str	r2, [r3, #0]
}
 8006e14:	bf00      	nop
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bc80      	pop	{r7}
 8006e1a:	4770      	bx	lr
 8006e1c:	e000e010 	.word	0xe000e010
 8006e20:	e000e018 	.word	0xe000e018
 8006e24:	20000010 	.word	0x20000010
 8006e28:	10624dd3 	.word	0x10624dd3
 8006e2c:	e000e014 	.word	0xe000e014

08006e30 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e36:	f3ef 8305 	mrs	r3, IPSR
 8006e3a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b0f      	cmp	r3, #15
 8006e40:	d914      	bls.n	8006e6c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e42:	4a16      	ldr	r2, [pc, #88]	; (8006e9c <vPortValidateInterruptPriority+0x6c>)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4413      	add	r3, r2
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e4c:	4b14      	ldr	r3, [pc, #80]	; (8006ea0 <vPortValidateInterruptPriority+0x70>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	7afa      	ldrb	r2, [r7, #11]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d20a      	bcs.n	8006e6c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	607b      	str	r3, [r7, #4]
}
 8006e68:	bf00      	nop
 8006e6a:	e7fe      	b.n	8006e6a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e6c:	4b0d      	ldr	r3, [pc, #52]	; (8006ea4 <vPortValidateInterruptPriority+0x74>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e74:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <vPortValidateInterruptPriority+0x78>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d90a      	bls.n	8006e92 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	603b      	str	r3, [r7, #0]
}
 8006e8e:	bf00      	nop
 8006e90:	e7fe      	b.n	8006e90 <vPortValidateInterruptPriority+0x60>
	}
 8006e92:	bf00      	nop
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bc80      	pop	{r7}
 8006e9a:	4770      	bx	lr
 8006e9c:	e000e3f0 	.word	0xe000e3f0
 8006ea0:	20000598 	.word	0x20000598
 8006ea4:	e000ed0c 	.word	0xe000ed0c
 8006ea8:	2000059c 	.word	0x2000059c

08006eac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b08a      	sub	sp, #40	; 0x28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006eb8:	f7ff f956 	bl	8006168 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ebc:	4b58      	ldr	r3, [pc, #352]	; (8007020 <pvPortMalloc+0x174>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ec4:	f000 f910 	bl	80070e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ec8:	4b56      	ldr	r3, [pc, #344]	; (8007024 <pvPortMalloc+0x178>)
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4013      	ands	r3, r2
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f040 808e 	bne.w	8006ff2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d01d      	beq.n	8006f18 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006edc:	2208      	movs	r2, #8
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f003 0307 	and.w	r3, r3, #7
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d014      	beq.n	8006f18 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f023 0307 	bic.w	r3, r3, #7
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f003 0307 	and.w	r3, r3, #7
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00a      	beq.n	8006f18 <pvPortMalloc+0x6c>
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f06:	f383 8811 	msr	BASEPRI, r3
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	617b      	str	r3, [r7, #20]
}
 8006f14:	bf00      	nop
 8006f16:	e7fe      	b.n	8006f16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d069      	beq.n	8006ff2 <pvPortMalloc+0x146>
 8006f1e:	4b42      	ldr	r3, [pc, #264]	; (8007028 <pvPortMalloc+0x17c>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d864      	bhi.n	8006ff2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f28:	4b40      	ldr	r3, [pc, #256]	; (800702c <pvPortMalloc+0x180>)
 8006f2a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f2c:	4b3f      	ldr	r3, [pc, #252]	; (800702c <pvPortMalloc+0x180>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f32:	e004      	b.n	8006f3e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d903      	bls.n	8006f50 <pvPortMalloc+0xa4>
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1f1      	bne.n	8006f34 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f50:	4b33      	ldr	r3, [pc, #204]	; (8007020 <pvPortMalloc+0x174>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d04b      	beq.n	8006ff2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2208      	movs	r2, #8
 8006f60:	4413      	add	r3, r2
 8006f62:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	1ad2      	subs	r2, r2, r3
 8006f74:	2308      	movs	r3, #8
 8006f76:	005b      	lsls	r3, r3, #1
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d91f      	bls.n	8006fbc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4413      	add	r3, r2
 8006f82:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <pvPortMalloc+0xf8>
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	613b      	str	r3, [r7, #16]
}
 8006fa0:	bf00      	nop
 8006fa2:	e7fe      	b.n	8006fa2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	1ad2      	subs	r2, r2, r3
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006fb6:	69b8      	ldr	r0, [r7, #24]
 8006fb8:	f000 f8f8 	bl	80071ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fbc:	4b1a      	ldr	r3, [pc, #104]	; (8007028 <pvPortMalloc+0x17c>)
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	4a18      	ldr	r2, [pc, #96]	; (8007028 <pvPortMalloc+0x17c>)
 8006fc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fca:	4b17      	ldr	r3, [pc, #92]	; (8007028 <pvPortMalloc+0x17c>)
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	4b18      	ldr	r3, [pc, #96]	; (8007030 <pvPortMalloc+0x184>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d203      	bcs.n	8006fde <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fd6:	4b14      	ldr	r3, [pc, #80]	; (8007028 <pvPortMalloc+0x17c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a15      	ldr	r2, [pc, #84]	; (8007030 <pvPortMalloc+0x184>)
 8006fdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	4b10      	ldr	r3, [pc, #64]	; (8007024 <pvPortMalloc+0x178>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	2200      	movs	r2, #0
 8006ff0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ff2:	f7ff f8c7 	bl	8006184 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	f003 0307 	and.w	r3, r3, #7
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00a      	beq.n	8007016 <pvPortMalloc+0x16a>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	60fb      	str	r3, [r7, #12]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <pvPortMalloc+0x168>
	return pvReturn;
 8007016:	69fb      	ldr	r3, [r7, #28]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3728      	adds	r7, #40	; 0x28
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	20007ad8 	.word	0x20007ad8
 8007024:	20007ae4 	.word	0x20007ae4
 8007028:	20007adc 	.word	0x20007adc
 800702c:	20007ad0 	.word	0x20007ad0
 8007030:	20007ae0 	.word	0x20007ae0

08007034 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d048      	beq.n	80070d8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007046:	2308      	movs	r3, #8
 8007048:	425b      	negs	r3, r3
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	4413      	add	r3, r2
 800704e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	4b21      	ldr	r3, [pc, #132]	; (80070e0 <vPortFree+0xac>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4013      	ands	r3, r2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10a      	bne.n	8007078 <vPortFree+0x44>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	60fb      	str	r3, [r7, #12]
}
 8007074:	bf00      	nop
 8007076:	e7fe      	b.n	8007076 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <vPortFree+0x62>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	60bb      	str	r3, [r7, #8]
}
 8007092:	bf00      	nop
 8007094:	e7fe      	b.n	8007094 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	4b11      	ldr	r3, [pc, #68]	; (80070e0 <vPortFree+0xac>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4013      	ands	r3, r2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d019      	beq.n	80070d8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d115      	bne.n	80070d8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	4b0b      	ldr	r3, [pc, #44]	; (80070e0 <vPortFree+0xac>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	43db      	mvns	r3, r3
 80070b6:	401a      	ands	r2, r3
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070bc:	f7ff f854 	bl	8006168 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	4b07      	ldr	r3, [pc, #28]	; (80070e4 <vPortFree+0xb0>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4413      	add	r3, r2
 80070ca:	4a06      	ldr	r2, [pc, #24]	; (80070e4 <vPortFree+0xb0>)
 80070cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070ce:	6938      	ldr	r0, [r7, #16]
 80070d0:	f000 f86c 	bl	80071ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80070d4:	f7ff f856 	bl	8006184 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070d8:	bf00      	nop
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20007ae4 	.word	0x20007ae4
 80070e4:	20007adc 	.word	0x20007adc

080070e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070ee:	f247 5330 	movw	r3, #30000	; 0x7530
 80070f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070f4:	4b27      	ldr	r3, [pc, #156]	; (8007194 <prvHeapInit+0xac>)
 80070f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00c      	beq.n	800711c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	3307      	adds	r3, #7
 8007106:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f023 0307 	bic.w	r3, r3, #7
 800710e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	4a1f      	ldr	r2, [pc, #124]	; (8007194 <prvHeapInit+0xac>)
 8007118:	4413      	add	r3, r2
 800711a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007120:	4a1d      	ldr	r2, [pc, #116]	; (8007198 <prvHeapInit+0xb0>)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007126:	4b1c      	ldr	r3, [pc, #112]	; (8007198 <prvHeapInit+0xb0>)
 8007128:	2200      	movs	r2, #0
 800712a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	4413      	add	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007134:	2208      	movs	r2, #8
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	1a9b      	subs	r3, r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f023 0307 	bic.w	r3, r3, #7
 8007142:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4a15      	ldr	r2, [pc, #84]	; (800719c <prvHeapInit+0xb4>)
 8007148:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800714a:	4b14      	ldr	r3, [pc, #80]	; (800719c <prvHeapInit+0xb4>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2200      	movs	r2, #0
 8007150:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007152:	4b12      	ldr	r3, [pc, #72]	; (800719c <prvHeapInit+0xb4>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2200      	movs	r2, #0
 8007158:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	1ad2      	subs	r2, r2, r3
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007168:	4b0c      	ldr	r3, [pc, #48]	; (800719c <prvHeapInit+0xb4>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	4a0a      	ldr	r2, [pc, #40]	; (80071a0 <prvHeapInit+0xb8>)
 8007176:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	4a09      	ldr	r2, [pc, #36]	; (80071a4 <prvHeapInit+0xbc>)
 800717e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007180:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <prvHeapInit+0xc0>)
 8007182:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007186:	601a      	str	r2, [r3, #0]
}
 8007188:	bf00      	nop
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	bc80      	pop	{r7}
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	200005a0 	.word	0x200005a0
 8007198:	20007ad0 	.word	0x20007ad0
 800719c:	20007ad8 	.word	0x20007ad8
 80071a0:	20007ae0 	.word	0x20007ae0
 80071a4:	20007adc 	.word	0x20007adc
 80071a8:	20007ae4 	.word	0x20007ae4

080071ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071b4:	4b27      	ldr	r3, [pc, #156]	; (8007254 <prvInsertBlockIntoFreeList+0xa8>)
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	e002      	b.n	80071c0 <prvInsertBlockIntoFreeList+0x14>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d8f7      	bhi.n	80071ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	4413      	add	r3, r2
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d108      	bne.n	80071ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	441a      	add	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	441a      	add	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d118      	bne.n	8007234 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	4b14      	ldr	r3, [pc, #80]	; (8007258 <prvInsertBlockIntoFreeList+0xac>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	429a      	cmp	r2, r3
 800720c:	d00d      	beq.n	800722a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	441a      	add	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	e008      	b.n	800723c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800722a:	4b0b      	ldr	r3, [pc, #44]	; (8007258 <prvInsertBlockIntoFreeList+0xac>)
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	e003      	b.n	800723c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	429a      	cmp	r2, r3
 8007242:	d002      	beq.n	800724a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800724a:	bf00      	nop
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	bc80      	pop	{r7}
 8007252:	4770      	bx	lr
 8007254:	20007ad0 	.word	0x20007ad0
 8007258:	20007ad8 	.word	0x20007ad8

0800725c <__errno>:
 800725c:	4b01      	ldr	r3, [pc, #4]	; (8007264 <__errno+0x8>)
 800725e:	6818      	ldr	r0, [r3, #0]
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	20000020 	.word	0x20000020

08007268 <__libc_init_array>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	2600      	movs	r6, #0
 800726c:	4d0c      	ldr	r5, [pc, #48]	; (80072a0 <__libc_init_array+0x38>)
 800726e:	4c0d      	ldr	r4, [pc, #52]	; (80072a4 <__libc_init_array+0x3c>)
 8007270:	1b64      	subs	r4, r4, r5
 8007272:	10a4      	asrs	r4, r4, #2
 8007274:	42a6      	cmp	r6, r4
 8007276:	d109      	bne.n	800728c <__libc_init_array+0x24>
 8007278:	f003 f99a 	bl	800a5b0 <_init>
 800727c:	2600      	movs	r6, #0
 800727e:	4d0a      	ldr	r5, [pc, #40]	; (80072a8 <__libc_init_array+0x40>)
 8007280:	4c0a      	ldr	r4, [pc, #40]	; (80072ac <__libc_init_array+0x44>)
 8007282:	1b64      	subs	r4, r4, r5
 8007284:	10a4      	asrs	r4, r4, #2
 8007286:	42a6      	cmp	r6, r4
 8007288:	d105      	bne.n	8007296 <__libc_init_array+0x2e>
 800728a:	bd70      	pop	{r4, r5, r6, pc}
 800728c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007290:	4798      	blx	r3
 8007292:	3601      	adds	r6, #1
 8007294:	e7ee      	b.n	8007274 <__libc_init_array+0xc>
 8007296:	f855 3b04 	ldr.w	r3, [r5], #4
 800729a:	4798      	blx	r3
 800729c:	3601      	adds	r6, #1
 800729e:	e7f2      	b.n	8007286 <__libc_init_array+0x1e>
 80072a0:	0800ac78 	.word	0x0800ac78
 80072a4:	0800ac78 	.word	0x0800ac78
 80072a8:	0800ac78 	.word	0x0800ac78
 80072ac:	0800ac7c 	.word	0x0800ac7c

080072b0 <memcpy>:
 80072b0:	440a      	add	r2, r1
 80072b2:	4291      	cmp	r1, r2
 80072b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80072b8:	d100      	bne.n	80072bc <memcpy+0xc>
 80072ba:	4770      	bx	lr
 80072bc:	b510      	push	{r4, lr}
 80072be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072c2:	4291      	cmp	r1, r2
 80072c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072c8:	d1f9      	bne.n	80072be <memcpy+0xe>
 80072ca:	bd10      	pop	{r4, pc}

080072cc <memset>:
 80072cc:	4603      	mov	r3, r0
 80072ce:	4402      	add	r2, r0
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d100      	bne.n	80072d6 <memset+0xa>
 80072d4:	4770      	bx	lr
 80072d6:	f803 1b01 	strb.w	r1, [r3], #1
 80072da:	e7f9      	b.n	80072d0 <memset+0x4>

080072dc <siprintf>:
 80072dc:	b40e      	push	{r1, r2, r3}
 80072de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072e2:	b500      	push	{lr}
 80072e4:	b09c      	sub	sp, #112	; 0x70
 80072e6:	ab1d      	add	r3, sp, #116	; 0x74
 80072e8:	9002      	str	r0, [sp, #8]
 80072ea:	9006      	str	r0, [sp, #24]
 80072ec:	9107      	str	r1, [sp, #28]
 80072ee:	9104      	str	r1, [sp, #16]
 80072f0:	4808      	ldr	r0, [pc, #32]	; (8007314 <siprintf+0x38>)
 80072f2:	4909      	ldr	r1, [pc, #36]	; (8007318 <siprintf+0x3c>)
 80072f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80072f8:	9105      	str	r1, [sp, #20]
 80072fa:	6800      	ldr	r0, [r0, #0]
 80072fc:	a902      	add	r1, sp, #8
 80072fe:	9301      	str	r3, [sp, #4]
 8007300:	f002 f8f6 	bl	80094f0 <_svfiprintf_r>
 8007304:	2200      	movs	r2, #0
 8007306:	9b02      	ldr	r3, [sp, #8]
 8007308:	701a      	strb	r2, [r3, #0]
 800730a:	b01c      	add	sp, #112	; 0x70
 800730c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007310:	b003      	add	sp, #12
 8007312:	4770      	bx	lr
 8007314:	20000020 	.word	0x20000020
 8007318:	ffff0208 	.word	0xffff0208

0800731c <strcat>:
 800731c:	4602      	mov	r2, r0
 800731e:	b510      	push	{r4, lr}
 8007320:	7814      	ldrb	r4, [r2, #0]
 8007322:	4613      	mov	r3, r2
 8007324:	3201      	adds	r2, #1
 8007326:	2c00      	cmp	r4, #0
 8007328:	d1fa      	bne.n	8007320 <strcat+0x4>
 800732a:	3b01      	subs	r3, #1
 800732c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007330:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007334:	2a00      	cmp	r2, #0
 8007336:	d1f9      	bne.n	800732c <strcat+0x10>
 8007338:	bd10      	pop	{r4, pc}

0800733a <strstr>:
 800733a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800733c:	780c      	ldrb	r4, [r1, #0]
 800733e:	b164      	cbz	r4, 800735a <strstr+0x20>
 8007340:	4603      	mov	r3, r0
 8007342:	781a      	ldrb	r2, [r3, #0]
 8007344:	4618      	mov	r0, r3
 8007346:	1c5e      	adds	r6, r3, #1
 8007348:	b90a      	cbnz	r2, 800734e <strstr+0x14>
 800734a:	4610      	mov	r0, r2
 800734c:	e005      	b.n	800735a <strstr+0x20>
 800734e:	4294      	cmp	r4, r2
 8007350:	d108      	bne.n	8007364 <strstr+0x2a>
 8007352:	460d      	mov	r5, r1
 8007354:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8007358:	b902      	cbnz	r2, 800735c <strstr+0x22>
 800735a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800735c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8007360:	4297      	cmp	r7, r2
 8007362:	d0f7      	beq.n	8007354 <strstr+0x1a>
 8007364:	4633      	mov	r3, r6
 8007366:	e7ec      	b.n	8007342 <strstr+0x8>

08007368 <sulp>:
 8007368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800736c:	460f      	mov	r7, r1
 800736e:	4690      	mov	r8, r2
 8007370:	f001 fe66 	bl	8009040 <__ulp>
 8007374:	4604      	mov	r4, r0
 8007376:	460d      	mov	r5, r1
 8007378:	f1b8 0f00 	cmp.w	r8, #0
 800737c:	d011      	beq.n	80073a2 <sulp+0x3a>
 800737e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007382:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007386:	2b00      	cmp	r3, #0
 8007388:	dd0b      	ble.n	80073a2 <sulp+0x3a>
 800738a:	2400      	movs	r4, #0
 800738c:	051b      	lsls	r3, r3, #20
 800738e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007392:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007396:	4622      	mov	r2, r4
 8007398:	462b      	mov	r3, r5
 800739a:	f7f9 f90d 	bl	80005b8 <__aeabi_dmul>
 800739e:	4604      	mov	r4, r0
 80073a0:	460d      	mov	r5, r1
 80073a2:	4620      	mov	r0, r4
 80073a4:	4629      	mov	r1, r5
 80073a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073aa:	0000      	movs	r0, r0
 80073ac:	0000      	movs	r0, r0
	...

080073b0 <_strtod_l>:
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	469b      	mov	fp, r3
 80073b6:	2300      	movs	r3, #0
 80073b8:	b0a1      	sub	sp, #132	; 0x84
 80073ba:	931c      	str	r3, [sp, #112]	; 0x70
 80073bc:	4ba1      	ldr	r3, [pc, #644]	; (8007644 <_strtod_l+0x294>)
 80073be:	4682      	mov	sl, r0
 80073c0:	681f      	ldr	r7, [r3, #0]
 80073c2:	460e      	mov	r6, r1
 80073c4:	4638      	mov	r0, r7
 80073c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80073c8:	f7f8 ff32 	bl	8000230 <strlen>
 80073cc:	f04f 0800 	mov.w	r8, #0
 80073d0:	4604      	mov	r4, r0
 80073d2:	f04f 0900 	mov.w	r9, #0
 80073d6:	961b      	str	r6, [sp, #108]	; 0x6c
 80073d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073da:	781a      	ldrb	r2, [r3, #0]
 80073dc:	2a2b      	cmp	r2, #43	; 0x2b
 80073de:	d04c      	beq.n	800747a <_strtod_l+0xca>
 80073e0:	d83a      	bhi.n	8007458 <_strtod_l+0xa8>
 80073e2:	2a0d      	cmp	r2, #13
 80073e4:	d833      	bhi.n	800744e <_strtod_l+0x9e>
 80073e6:	2a08      	cmp	r2, #8
 80073e8:	d833      	bhi.n	8007452 <_strtod_l+0xa2>
 80073ea:	2a00      	cmp	r2, #0
 80073ec:	d03d      	beq.n	800746a <_strtod_l+0xba>
 80073ee:	2300      	movs	r3, #0
 80073f0:	930c      	str	r3, [sp, #48]	; 0x30
 80073f2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80073f4:	782b      	ldrb	r3, [r5, #0]
 80073f6:	2b30      	cmp	r3, #48	; 0x30
 80073f8:	f040 80af 	bne.w	800755a <_strtod_l+0x1aa>
 80073fc:	786b      	ldrb	r3, [r5, #1]
 80073fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007402:	2b58      	cmp	r3, #88	; 0x58
 8007404:	d16c      	bne.n	80074e0 <_strtod_l+0x130>
 8007406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007408:	4650      	mov	r0, sl
 800740a:	9301      	str	r3, [sp, #4]
 800740c:	ab1c      	add	r3, sp, #112	; 0x70
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	4a8d      	ldr	r2, [pc, #564]	; (8007648 <_strtod_l+0x298>)
 8007412:	f8cd b008 	str.w	fp, [sp, #8]
 8007416:	ab1d      	add	r3, sp, #116	; 0x74
 8007418:	a91b      	add	r1, sp, #108	; 0x6c
 800741a:	f000 ff89 	bl	8008330 <__gethex>
 800741e:	f010 0607 	ands.w	r6, r0, #7
 8007422:	4604      	mov	r4, r0
 8007424:	d005      	beq.n	8007432 <_strtod_l+0x82>
 8007426:	2e06      	cmp	r6, #6
 8007428:	d129      	bne.n	800747e <_strtod_l+0xce>
 800742a:	2300      	movs	r3, #0
 800742c:	3501      	adds	r5, #1
 800742e:	951b      	str	r5, [sp, #108]	; 0x6c
 8007430:	930c      	str	r3, [sp, #48]	; 0x30
 8007432:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007434:	2b00      	cmp	r3, #0
 8007436:	f040 8596 	bne.w	8007f66 <_strtod_l+0xbb6>
 800743a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800743c:	b1d3      	cbz	r3, 8007474 <_strtod_l+0xc4>
 800743e:	4642      	mov	r2, r8
 8007440:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007444:	4610      	mov	r0, r2
 8007446:	4619      	mov	r1, r3
 8007448:	b021      	add	sp, #132	; 0x84
 800744a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744e:	2a20      	cmp	r2, #32
 8007450:	d1cd      	bne.n	80073ee <_strtod_l+0x3e>
 8007452:	3301      	adds	r3, #1
 8007454:	931b      	str	r3, [sp, #108]	; 0x6c
 8007456:	e7bf      	b.n	80073d8 <_strtod_l+0x28>
 8007458:	2a2d      	cmp	r2, #45	; 0x2d
 800745a:	d1c8      	bne.n	80073ee <_strtod_l+0x3e>
 800745c:	2201      	movs	r2, #1
 800745e:	920c      	str	r2, [sp, #48]	; 0x30
 8007460:	1c5a      	adds	r2, r3, #1
 8007462:	921b      	str	r2, [sp, #108]	; 0x6c
 8007464:	785b      	ldrb	r3, [r3, #1]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1c3      	bne.n	80073f2 <_strtod_l+0x42>
 800746a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800746c:	961b      	str	r6, [sp, #108]	; 0x6c
 800746e:	2b00      	cmp	r3, #0
 8007470:	f040 8577 	bne.w	8007f62 <_strtod_l+0xbb2>
 8007474:	4642      	mov	r2, r8
 8007476:	464b      	mov	r3, r9
 8007478:	e7e4      	b.n	8007444 <_strtod_l+0x94>
 800747a:	2200      	movs	r2, #0
 800747c:	e7ef      	b.n	800745e <_strtod_l+0xae>
 800747e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007480:	b13a      	cbz	r2, 8007492 <_strtod_l+0xe2>
 8007482:	2135      	movs	r1, #53	; 0x35
 8007484:	a81e      	add	r0, sp, #120	; 0x78
 8007486:	f001 fedf 	bl	8009248 <__copybits>
 800748a:	4650      	mov	r0, sl
 800748c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800748e:	f001 faa7 	bl	80089e0 <_Bfree>
 8007492:	3e01      	subs	r6, #1
 8007494:	2e05      	cmp	r6, #5
 8007496:	d807      	bhi.n	80074a8 <_strtod_l+0xf8>
 8007498:	e8df f006 	tbb	[pc, r6]
 800749c:	1d180b0e 	.word	0x1d180b0e
 80074a0:	030e      	.short	0x030e
 80074a2:	f04f 0900 	mov.w	r9, #0
 80074a6:	46c8      	mov	r8, r9
 80074a8:	0721      	lsls	r1, r4, #28
 80074aa:	d5c2      	bpl.n	8007432 <_strtod_l+0x82>
 80074ac:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80074b0:	e7bf      	b.n	8007432 <_strtod_l+0x82>
 80074b2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80074b6:	e7f7      	b.n	80074a8 <_strtod_l+0xf8>
 80074b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80074ba:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80074be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80074c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80074c6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80074ca:	e7ed      	b.n	80074a8 <_strtod_l+0xf8>
 80074cc:	f04f 0800 	mov.w	r8, #0
 80074d0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800764c <_strtod_l+0x29c>
 80074d4:	e7e8      	b.n	80074a8 <_strtod_l+0xf8>
 80074d6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80074da:	f04f 38ff 	mov.w	r8, #4294967295
 80074de:	e7e3      	b.n	80074a8 <_strtod_l+0xf8>
 80074e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074e2:	1c5a      	adds	r2, r3, #1
 80074e4:	921b      	str	r2, [sp, #108]	; 0x6c
 80074e6:	785b      	ldrb	r3, [r3, #1]
 80074e8:	2b30      	cmp	r3, #48	; 0x30
 80074ea:	d0f9      	beq.n	80074e0 <_strtod_l+0x130>
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d0a0      	beq.n	8007432 <_strtod_l+0x82>
 80074f0:	2301      	movs	r3, #1
 80074f2:	9307      	str	r3, [sp, #28]
 80074f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074f6:	220a      	movs	r2, #10
 80074f8:	9308      	str	r3, [sp, #32]
 80074fa:	2300      	movs	r3, #0
 80074fc:	469b      	mov	fp, r3
 80074fe:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007502:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007504:	7805      	ldrb	r5, [r0, #0]
 8007506:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800750a:	b2d9      	uxtb	r1, r3
 800750c:	2909      	cmp	r1, #9
 800750e:	d926      	bls.n	800755e <_strtod_l+0x1ae>
 8007510:	4622      	mov	r2, r4
 8007512:	4639      	mov	r1, r7
 8007514:	f002 fbf4 	bl	8009d00 <strncmp>
 8007518:	2800      	cmp	r0, #0
 800751a:	d032      	beq.n	8007582 <_strtod_l+0x1d2>
 800751c:	2000      	movs	r0, #0
 800751e:	462b      	mov	r3, r5
 8007520:	465c      	mov	r4, fp
 8007522:	4602      	mov	r2, r0
 8007524:	9004      	str	r0, [sp, #16]
 8007526:	2b65      	cmp	r3, #101	; 0x65
 8007528:	d001      	beq.n	800752e <_strtod_l+0x17e>
 800752a:	2b45      	cmp	r3, #69	; 0x45
 800752c:	d113      	bne.n	8007556 <_strtod_l+0x1a6>
 800752e:	b91c      	cbnz	r4, 8007538 <_strtod_l+0x188>
 8007530:	9b07      	ldr	r3, [sp, #28]
 8007532:	4303      	orrs	r3, r0
 8007534:	d099      	beq.n	800746a <_strtod_l+0xba>
 8007536:	2400      	movs	r4, #0
 8007538:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800753a:	1c73      	adds	r3, r6, #1
 800753c:	931b      	str	r3, [sp, #108]	; 0x6c
 800753e:	7873      	ldrb	r3, [r6, #1]
 8007540:	2b2b      	cmp	r3, #43	; 0x2b
 8007542:	d078      	beq.n	8007636 <_strtod_l+0x286>
 8007544:	2b2d      	cmp	r3, #45	; 0x2d
 8007546:	d07b      	beq.n	8007640 <_strtod_l+0x290>
 8007548:	2700      	movs	r7, #0
 800754a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800754e:	2909      	cmp	r1, #9
 8007550:	f240 8082 	bls.w	8007658 <_strtod_l+0x2a8>
 8007554:	961b      	str	r6, [sp, #108]	; 0x6c
 8007556:	2500      	movs	r5, #0
 8007558:	e09e      	b.n	8007698 <_strtod_l+0x2e8>
 800755a:	2300      	movs	r3, #0
 800755c:	e7c9      	b.n	80074f2 <_strtod_l+0x142>
 800755e:	f1bb 0f08 	cmp.w	fp, #8
 8007562:	bfd5      	itete	le
 8007564:	9906      	ldrle	r1, [sp, #24]
 8007566:	9905      	ldrgt	r1, [sp, #20]
 8007568:	fb02 3301 	mlale	r3, r2, r1, r3
 800756c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007570:	f100 0001 	add.w	r0, r0, #1
 8007574:	bfd4      	ite	le
 8007576:	9306      	strle	r3, [sp, #24]
 8007578:	9305      	strgt	r3, [sp, #20]
 800757a:	f10b 0b01 	add.w	fp, fp, #1
 800757e:	901b      	str	r0, [sp, #108]	; 0x6c
 8007580:	e7bf      	b.n	8007502 <_strtod_l+0x152>
 8007582:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007584:	191a      	adds	r2, r3, r4
 8007586:	921b      	str	r2, [sp, #108]	; 0x6c
 8007588:	5d1b      	ldrb	r3, [r3, r4]
 800758a:	f1bb 0f00 	cmp.w	fp, #0
 800758e:	d036      	beq.n	80075fe <_strtod_l+0x24e>
 8007590:	465c      	mov	r4, fp
 8007592:	9004      	str	r0, [sp, #16]
 8007594:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007598:	2a09      	cmp	r2, #9
 800759a:	d912      	bls.n	80075c2 <_strtod_l+0x212>
 800759c:	2201      	movs	r2, #1
 800759e:	e7c2      	b.n	8007526 <_strtod_l+0x176>
 80075a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075a2:	3001      	adds	r0, #1
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	921b      	str	r2, [sp, #108]	; 0x6c
 80075a8:	785b      	ldrb	r3, [r3, #1]
 80075aa:	2b30      	cmp	r3, #48	; 0x30
 80075ac:	d0f8      	beq.n	80075a0 <_strtod_l+0x1f0>
 80075ae:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80075b2:	2a08      	cmp	r2, #8
 80075b4:	f200 84dc 	bhi.w	8007f70 <_strtod_l+0xbc0>
 80075b8:	9004      	str	r0, [sp, #16]
 80075ba:	2000      	movs	r0, #0
 80075bc:	4604      	mov	r4, r0
 80075be:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80075c0:	9208      	str	r2, [sp, #32]
 80075c2:	3b30      	subs	r3, #48	; 0x30
 80075c4:	f100 0201 	add.w	r2, r0, #1
 80075c8:	d013      	beq.n	80075f2 <_strtod_l+0x242>
 80075ca:	9904      	ldr	r1, [sp, #16]
 80075cc:	1905      	adds	r5, r0, r4
 80075ce:	4411      	add	r1, r2
 80075d0:	9104      	str	r1, [sp, #16]
 80075d2:	4622      	mov	r2, r4
 80075d4:	210a      	movs	r1, #10
 80075d6:	42aa      	cmp	r2, r5
 80075d8:	d113      	bne.n	8007602 <_strtod_l+0x252>
 80075da:	1822      	adds	r2, r4, r0
 80075dc:	2a08      	cmp	r2, #8
 80075de:	f104 0401 	add.w	r4, r4, #1
 80075e2:	4404      	add	r4, r0
 80075e4:	dc1b      	bgt.n	800761e <_strtod_l+0x26e>
 80075e6:	220a      	movs	r2, #10
 80075e8:	9906      	ldr	r1, [sp, #24]
 80075ea:	fb02 3301 	mla	r3, r2, r1, r3
 80075ee:	9306      	str	r3, [sp, #24]
 80075f0:	2200      	movs	r2, #0
 80075f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075f4:	4610      	mov	r0, r2
 80075f6:	1c59      	adds	r1, r3, #1
 80075f8:	911b      	str	r1, [sp, #108]	; 0x6c
 80075fa:	785b      	ldrb	r3, [r3, #1]
 80075fc:	e7ca      	b.n	8007594 <_strtod_l+0x1e4>
 80075fe:	4658      	mov	r0, fp
 8007600:	e7d3      	b.n	80075aa <_strtod_l+0x1fa>
 8007602:	2a08      	cmp	r2, #8
 8007604:	dc04      	bgt.n	8007610 <_strtod_l+0x260>
 8007606:	9f06      	ldr	r7, [sp, #24]
 8007608:	434f      	muls	r7, r1
 800760a:	9706      	str	r7, [sp, #24]
 800760c:	3201      	adds	r2, #1
 800760e:	e7e2      	b.n	80075d6 <_strtod_l+0x226>
 8007610:	1c57      	adds	r7, r2, #1
 8007612:	2f10      	cmp	r7, #16
 8007614:	bfde      	ittt	le
 8007616:	9f05      	ldrle	r7, [sp, #20]
 8007618:	434f      	mulle	r7, r1
 800761a:	9705      	strle	r7, [sp, #20]
 800761c:	e7f6      	b.n	800760c <_strtod_l+0x25c>
 800761e:	2c10      	cmp	r4, #16
 8007620:	bfdf      	itttt	le
 8007622:	220a      	movle	r2, #10
 8007624:	9905      	ldrle	r1, [sp, #20]
 8007626:	fb02 3301 	mlale	r3, r2, r1, r3
 800762a:	9305      	strle	r3, [sp, #20]
 800762c:	e7e0      	b.n	80075f0 <_strtod_l+0x240>
 800762e:	2300      	movs	r3, #0
 8007630:	2201      	movs	r2, #1
 8007632:	9304      	str	r3, [sp, #16]
 8007634:	e77c      	b.n	8007530 <_strtod_l+0x180>
 8007636:	2700      	movs	r7, #0
 8007638:	1cb3      	adds	r3, r6, #2
 800763a:	931b      	str	r3, [sp, #108]	; 0x6c
 800763c:	78b3      	ldrb	r3, [r6, #2]
 800763e:	e784      	b.n	800754a <_strtod_l+0x19a>
 8007640:	2701      	movs	r7, #1
 8007642:	e7f9      	b.n	8007638 <_strtod_l+0x288>
 8007644:	0800aa68 	.word	0x0800aa68
 8007648:	0800a7e4 	.word	0x0800a7e4
 800764c:	7ff00000 	.word	0x7ff00000
 8007650:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007652:	1c59      	adds	r1, r3, #1
 8007654:	911b      	str	r1, [sp, #108]	; 0x6c
 8007656:	785b      	ldrb	r3, [r3, #1]
 8007658:	2b30      	cmp	r3, #48	; 0x30
 800765a:	d0f9      	beq.n	8007650 <_strtod_l+0x2a0>
 800765c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007660:	2908      	cmp	r1, #8
 8007662:	f63f af78 	bhi.w	8007556 <_strtod_l+0x1a6>
 8007666:	f04f 0e0a 	mov.w	lr, #10
 800766a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800766e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007670:	9309      	str	r3, [sp, #36]	; 0x24
 8007672:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007674:	1c59      	adds	r1, r3, #1
 8007676:	911b      	str	r1, [sp, #108]	; 0x6c
 8007678:	785b      	ldrb	r3, [r3, #1]
 800767a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800767e:	2d09      	cmp	r5, #9
 8007680:	d935      	bls.n	80076ee <_strtod_l+0x33e>
 8007682:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007684:	1b49      	subs	r1, r1, r5
 8007686:	2908      	cmp	r1, #8
 8007688:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800768c:	dc02      	bgt.n	8007694 <_strtod_l+0x2e4>
 800768e:	4565      	cmp	r5, ip
 8007690:	bfa8      	it	ge
 8007692:	4665      	movge	r5, ip
 8007694:	b107      	cbz	r7, 8007698 <_strtod_l+0x2e8>
 8007696:	426d      	negs	r5, r5
 8007698:	2c00      	cmp	r4, #0
 800769a:	d14c      	bne.n	8007736 <_strtod_l+0x386>
 800769c:	9907      	ldr	r1, [sp, #28]
 800769e:	4301      	orrs	r1, r0
 80076a0:	f47f aec7 	bne.w	8007432 <_strtod_l+0x82>
 80076a4:	2a00      	cmp	r2, #0
 80076a6:	f47f aee0 	bne.w	800746a <_strtod_l+0xba>
 80076aa:	2b69      	cmp	r3, #105	; 0x69
 80076ac:	d026      	beq.n	80076fc <_strtod_l+0x34c>
 80076ae:	dc23      	bgt.n	80076f8 <_strtod_l+0x348>
 80076b0:	2b49      	cmp	r3, #73	; 0x49
 80076b2:	d023      	beq.n	80076fc <_strtod_l+0x34c>
 80076b4:	2b4e      	cmp	r3, #78	; 0x4e
 80076b6:	f47f aed8 	bne.w	800746a <_strtod_l+0xba>
 80076ba:	499c      	ldr	r1, [pc, #624]	; (800792c <_strtod_l+0x57c>)
 80076bc:	a81b      	add	r0, sp, #108	; 0x6c
 80076be:	f001 f885 	bl	80087cc <__match>
 80076c2:	2800      	cmp	r0, #0
 80076c4:	f43f aed1 	beq.w	800746a <_strtod_l+0xba>
 80076c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b28      	cmp	r3, #40	; 0x28
 80076ce:	d12c      	bne.n	800772a <_strtod_l+0x37a>
 80076d0:	4997      	ldr	r1, [pc, #604]	; (8007930 <_strtod_l+0x580>)
 80076d2:	aa1e      	add	r2, sp, #120	; 0x78
 80076d4:	a81b      	add	r0, sp, #108	; 0x6c
 80076d6:	f001 f88d 	bl	80087f4 <__hexnan>
 80076da:	2805      	cmp	r0, #5
 80076dc:	d125      	bne.n	800772a <_strtod_l+0x37a>
 80076de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80076e0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80076e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80076e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80076ec:	e6a1      	b.n	8007432 <_strtod_l+0x82>
 80076ee:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80076f2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80076f6:	e7bc      	b.n	8007672 <_strtod_l+0x2c2>
 80076f8:	2b6e      	cmp	r3, #110	; 0x6e
 80076fa:	e7dc      	b.n	80076b6 <_strtod_l+0x306>
 80076fc:	498d      	ldr	r1, [pc, #564]	; (8007934 <_strtod_l+0x584>)
 80076fe:	a81b      	add	r0, sp, #108	; 0x6c
 8007700:	f001 f864 	bl	80087cc <__match>
 8007704:	2800      	cmp	r0, #0
 8007706:	f43f aeb0 	beq.w	800746a <_strtod_l+0xba>
 800770a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800770c:	498a      	ldr	r1, [pc, #552]	; (8007938 <_strtod_l+0x588>)
 800770e:	3b01      	subs	r3, #1
 8007710:	a81b      	add	r0, sp, #108	; 0x6c
 8007712:	931b      	str	r3, [sp, #108]	; 0x6c
 8007714:	f001 f85a 	bl	80087cc <__match>
 8007718:	b910      	cbnz	r0, 8007720 <_strtod_l+0x370>
 800771a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800771c:	3301      	adds	r3, #1
 800771e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007720:	f04f 0800 	mov.w	r8, #0
 8007724:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8007948 <_strtod_l+0x598>
 8007728:	e683      	b.n	8007432 <_strtod_l+0x82>
 800772a:	4884      	ldr	r0, [pc, #528]	; (800793c <_strtod_l+0x58c>)
 800772c:	f002 face 	bl	8009ccc <nan>
 8007730:	4680      	mov	r8, r0
 8007732:	4689      	mov	r9, r1
 8007734:	e67d      	b.n	8007432 <_strtod_l+0x82>
 8007736:	9b04      	ldr	r3, [sp, #16]
 8007738:	f1bb 0f00 	cmp.w	fp, #0
 800773c:	bf08      	it	eq
 800773e:	46a3      	moveq	fp, r4
 8007740:	1aeb      	subs	r3, r5, r3
 8007742:	2c10      	cmp	r4, #16
 8007744:	9806      	ldr	r0, [sp, #24]
 8007746:	4626      	mov	r6, r4
 8007748:	9307      	str	r3, [sp, #28]
 800774a:	bfa8      	it	ge
 800774c:	2610      	movge	r6, #16
 800774e:	f7f8 feb9 	bl	80004c4 <__aeabi_ui2d>
 8007752:	2c09      	cmp	r4, #9
 8007754:	4680      	mov	r8, r0
 8007756:	4689      	mov	r9, r1
 8007758:	dd13      	ble.n	8007782 <_strtod_l+0x3d2>
 800775a:	4b79      	ldr	r3, [pc, #484]	; (8007940 <_strtod_l+0x590>)
 800775c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007760:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007764:	f7f8 ff28 	bl	80005b8 <__aeabi_dmul>
 8007768:	4680      	mov	r8, r0
 800776a:	9805      	ldr	r0, [sp, #20]
 800776c:	4689      	mov	r9, r1
 800776e:	f7f8 fea9 	bl	80004c4 <__aeabi_ui2d>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	4640      	mov	r0, r8
 8007778:	4649      	mov	r1, r9
 800777a:	f7f8 fd67 	bl	800024c <__adddf3>
 800777e:	4680      	mov	r8, r0
 8007780:	4689      	mov	r9, r1
 8007782:	2c0f      	cmp	r4, #15
 8007784:	dc36      	bgt.n	80077f4 <_strtod_l+0x444>
 8007786:	9b07      	ldr	r3, [sp, #28]
 8007788:	2b00      	cmp	r3, #0
 800778a:	f43f ae52 	beq.w	8007432 <_strtod_l+0x82>
 800778e:	dd22      	ble.n	80077d6 <_strtod_l+0x426>
 8007790:	2b16      	cmp	r3, #22
 8007792:	dc09      	bgt.n	80077a8 <_strtod_l+0x3f8>
 8007794:	4c6a      	ldr	r4, [pc, #424]	; (8007940 <_strtod_l+0x590>)
 8007796:	4642      	mov	r2, r8
 8007798:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800779c:	464b      	mov	r3, r9
 800779e:	e9d4 0100 	ldrd	r0, r1, [r4]
 80077a2:	f7f8 ff09 	bl	80005b8 <__aeabi_dmul>
 80077a6:	e7c3      	b.n	8007730 <_strtod_l+0x380>
 80077a8:	9a07      	ldr	r2, [sp, #28]
 80077aa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80077ae:	4293      	cmp	r3, r2
 80077b0:	db20      	blt.n	80077f4 <_strtod_l+0x444>
 80077b2:	4d63      	ldr	r5, [pc, #396]	; (8007940 <_strtod_l+0x590>)
 80077b4:	f1c4 040f 	rsb	r4, r4, #15
 80077b8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80077bc:	4642      	mov	r2, r8
 80077be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077c2:	464b      	mov	r3, r9
 80077c4:	f7f8 fef8 	bl	80005b8 <__aeabi_dmul>
 80077c8:	9b07      	ldr	r3, [sp, #28]
 80077ca:	1b1c      	subs	r4, r3, r4
 80077cc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80077d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077d4:	e7e5      	b.n	80077a2 <_strtod_l+0x3f2>
 80077d6:	9b07      	ldr	r3, [sp, #28]
 80077d8:	3316      	adds	r3, #22
 80077da:	db0b      	blt.n	80077f4 <_strtod_l+0x444>
 80077dc:	9b04      	ldr	r3, [sp, #16]
 80077de:	4a58      	ldr	r2, [pc, #352]	; (8007940 <_strtod_l+0x590>)
 80077e0:	1b5d      	subs	r5, r3, r5
 80077e2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80077e6:	4640      	mov	r0, r8
 80077e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077ec:	4649      	mov	r1, r9
 80077ee:	f7f9 f80d 	bl	800080c <__aeabi_ddiv>
 80077f2:	e79d      	b.n	8007730 <_strtod_l+0x380>
 80077f4:	9b07      	ldr	r3, [sp, #28]
 80077f6:	1ba6      	subs	r6, r4, r6
 80077f8:	441e      	add	r6, r3
 80077fa:	2e00      	cmp	r6, #0
 80077fc:	dd71      	ble.n	80078e2 <_strtod_l+0x532>
 80077fe:	f016 030f 	ands.w	r3, r6, #15
 8007802:	d00a      	beq.n	800781a <_strtod_l+0x46a>
 8007804:	494e      	ldr	r1, [pc, #312]	; (8007940 <_strtod_l+0x590>)
 8007806:	4642      	mov	r2, r8
 8007808:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800780c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007810:	464b      	mov	r3, r9
 8007812:	f7f8 fed1 	bl	80005b8 <__aeabi_dmul>
 8007816:	4680      	mov	r8, r0
 8007818:	4689      	mov	r9, r1
 800781a:	f036 060f 	bics.w	r6, r6, #15
 800781e:	d050      	beq.n	80078c2 <_strtod_l+0x512>
 8007820:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007824:	dd27      	ble.n	8007876 <_strtod_l+0x4c6>
 8007826:	f04f 0b00 	mov.w	fp, #0
 800782a:	f8cd b010 	str.w	fp, [sp, #16]
 800782e:	f8cd b020 	str.w	fp, [sp, #32]
 8007832:	f8cd b018 	str.w	fp, [sp, #24]
 8007836:	2322      	movs	r3, #34	; 0x22
 8007838:	f04f 0800 	mov.w	r8, #0
 800783c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007948 <_strtod_l+0x598>
 8007840:	f8ca 3000 	str.w	r3, [sl]
 8007844:	9b08      	ldr	r3, [sp, #32]
 8007846:	2b00      	cmp	r3, #0
 8007848:	f43f adf3 	beq.w	8007432 <_strtod_l+0x82>
 800784c:	4650      	mov	r0, sl
 800784e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007850:	f001 f8c6 	bl	80089e0 <_Bfree>
 8007854:	4650      	mov	r0, sl
 8007856:	9906      	ldr	r1, [sp, #24]
 8007858:	f001 f8c2 	bl	80089e0 <_Bfree>
 800785c:	4650      	mov	r0, sl
 800785e:	9904      	ldr	r1, [sp, #16]
 8007860:	f001 f8be 	bl	80089e0 <_Bfree>
 8007864:	4650      	mov	r0, sl
 8007866:	9908      	ldr	r1, [sp, #32]
 8007868:	f001 f8ba 	bl	80089e0 <_Bfree>
 800786c:	4659      	mov	r1, fp
 800786e:	4650      	mov	r0, sl
 8007870:	f001 f8b6 	bl	80089e0 <_Bfree>
 8007874:	e5dd      	b.n	8007432 <_strtod_l+0x82>
 8007876:	2300      	movs	r3, #0
 8007878:	4640      	mov	r0, r8
 800787a:	4649      	mov	r1, r9
 800787c:	461f      	mov	r7, r3
 800787e:	1136      	asrs	r6, r6, #4
 8007880:	2e01      	cmp	r6, #1
 8007882:	dc21      	bgt.n	80078c8 <_strtod_l+0x518>
 8007884:	b10b      	cbz	r3, 800788a <_strtod_l+0x4da>
 8007886:	4680      	mov	r8, r0
 8007888:	4689      	mov	r9, r1
 800788a:	4b2e      	ldr	r3, [pc, #184]	; (8007944 <_strtod_l+0x594>)
 800788c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007890:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007894:	4642      	mov	r2, r8
 8007896:	e9d7 0100 	ldrd	r0, r1, [r7]
 800789a:	464b      	mov	r3, r9
 800789c:	f7f8 fe8c 	bl	80005b8 <__aeabi_dmul>
 80078a0:	4b29      	ldr	r3, [pc, #164]	; (8007948 <_strtod_l+0x598>)
 80078a2:	460a      	mov	r2, r1
 80078a4:	400b      	ands	r3, r1
 80078a6:	4929      	ldr	r1, [pc, #164]	; (800794c <_strtod_l+0x59c>)
 80078a8:	4680      	mov	r8, r0
 80078aa:	428b      	cmp	r3, r1
 80078ac:	d8bb      	bhi.n	8007826 <_strtod_l+0x476>
 80078ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80078b2:	428b      	cmp	r3, r1
 80078b4:	bf86      	itte	hi
 80078b6:	f04f 38ff 	movhi.w	r8, #4294967295
 80078ba:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007950 <_strtod_l+0x5a0>
 80078be:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80078c2:	2300      	movs	r3, #0
 80078c4:	9305      	str	r3, [sp, #20]
 80078c6:	e07e      	b.n	80079c6 <_strtod_l+0x616>
 80078c8:	07f2      	lsls	r2, r6, #31
 80078ca:	d507      	bpl.n	80078dc <_strtod_l+0x52c>
 80078cc:	4b1d      	ldr	r3, [pc, #116]	; (8007944 <_strtod_l+0x594>)
 80078ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d6:	f7f8 fe6f 	bl	80005b8 <__aeabi_dmul>
 80078da:	2301      	movs	r3, #1
 80078dc:	3701      	adds	r7, #1
 80078de:	1076      	asrs	r6, r6, #1
 80078e0:	e7ce      	b.n	8007880 <_strtod_l+0x4d0>
 80078e2:	d0ee      	beq.n	80078c2 <_strtod_l+0x512>
 80078e4:	4276      	negs	r6, r6
 80078e6:	f016 020f 	ands.w	r2, r6, #15
 80078ea:	d00a      	beq.n	8007902 <_strtod_l+0x552>
 80078ec:	4b14      	ldr	r3, [pc, #80]	; (8007940 <_strtod_l+0x590>)
 80078ee:	4640      	mov	r0, r8
 80078f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078f4:	4649      	mov	r1, r9
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	f7f8 ff87 	bl	800080c <__aeabi_ddiv>
 80078fe:	4680      	mov	r8, r0
 8007900:	4689      	mov	r9, r1
 8007902:	1136      	asrs	r6, r6, #4
 8007904:	d0dd      	beq.n	80078c2 <_strtod_l+0x512>
 8007906:	2e1f      	cmp	r6, #31
 8007908:	dd24      	ble.n	8007954 <_strtod_l+0x5a4>
 800790a:	f04f 0b00 	mov.w	fp, #0
 800790e:	f8cd b010 	str.w	fp, [sp, #16]
 8007912:	f8cd b020 	str.w	fp, [sp, #32]
 8007916:	f8cd b018 	str.w	fp, [sp, #24]
 800791a:	2322      	movs	r3, #34	; 0x22
 800791c:	f04f 0800 	mov.w	r8, #0
 8007920:	f04f 0900 	mov.w	r9, #0
 8007924:	f8ca 3000 	str.w	r3, [sl]
 8007928:	e78c      	b.n	8007844 <_strtod_l+0x494>
 800792a:	bf00      	nop
 800792c:	0800a7e1 	.word	0x0800a7e1
 8007930:	0800a7f8 	.word	0x0800a7f8
 8007934:	0800a7d8 	.word	0x0800a7d8
 8007938:	0800a7db 	.word	0x0800a7db
 800793c:	0800a8eb 	.word	0x0800a8eb
 8007940:	0800ab08 	.word	0x0800ab08
 8007944:	0800aae0 	.word	0x0800aae0
 8007948:	7ff00000 	.word	0x7ff00000
 800794c:	7ca00000 	.word	0x7ca00000
 8007950:	7fefffff 	.word	0x7fefffff
 8007954:	f016 0310 	ands.w	r3, r6, #16
 8007958:	bf18      	it	ne
 800795a:	236a      	movne	r3, #106	; 0x6a
 800795c:	4640      	mov	r0, r8
 800795e:	9305      	str	r3, [sp, #20]
 8007960:	4649      	mov	r1, r9
 8007962:	2300      	movs	r3, #0
 8007964:	4fb2      	ldr	r7, [pc, #712]	; (8007c30 <_strtod_l+0x880>)
 8007966:	07f2      	lsls	r2, r6, #31
 8007968:	d504      	bpl.n	8007974 <_strtod_l+0x5c4>
 800796a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800796e:	f7f8 fe23 	bl	80005b8 <__aeabi_dmul>
 8007972:	2301      	movs	r3, #1
 8007974:	1076      	asrs	r6, r6, #1
 8007976:	f107 0708 	add.w	r7, r7, #8
 800797a:	d1f4      	bne.n	8007966 <_strtod_l+0x5b6>
 800797c:	b10b      	cbz	r3, 8007982 <_strtod_l+0x5d2>
 800797e:	4680      	mov	r8, r0
 8007980:	4689      	mov	r9, r1
 8007982:	9b05      	ldr	r3, [sp, #20]
 8007984:	b1bb      	cbz	r3, 80079b6 <_strtod_l+0x606>
 8007986:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800798a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800798e:	2b00      	cmp	r3, #0
 8007990:	4649      	mov	r1, r9
 8007992:	dd10      	ble.n	80079b6 <_strtod_l+0x606>
 8007994:	2b1f      	cmp	r3, #31
 8007996:	f340 812b 	ble.w	8007bf0 <_strtod_l+0x840>
 800799a:	2b34      	cmp	r3, #52	; 0x34
 800799c:	bfd8      	it	le
 800799e:	f04f 32ff 	movle.w	r2, #4294967295
 80079a2:	f04f 0800 	mov.w	r8, #0
 80079a6:	bfcf      	iteee	gt
 80079a8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80079ac:	3b20      	suble	r3, #32
 80079ae:	fa02 f303 	lslle.w	r3, r2, r3
 80079b2:	ea03 0901 	andle.w	r9, r3, r1
 80079b6:	2200      	movs	r2, #0
 80079b8:	2300      	movs	r3, #0
 80079ba:	4640      	mov	r0, r8
 80079bc:	4649      	mov	r1, r9
 80079be:	f7f9 f863 	bl	8000a88 <__aeabi_dcmpeq>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d1a1      	bne.n	800790a <_strtod_l+0x55a>
 80079c6:	9b06      	ldr	r3, [sp, #24]
 80079c8:	465a      	mov	r2, fp
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	4650      	mov	r0, sl
 80079ce:	4623      	mov	r3, r4
 80079d0:	9908      	ldr	r1, [sp, #32]
 80079d2:	f001 f871 	bl	8008ab8 <__s2b>
 80079d6:	9008      	str	r0, [sp, #32]
 80079d8:	2800      	cmp	r0, #0
 80079da:	f43f af24 	beq.w	8007826 <_strtod_l+0x476>
 80079de:	9b04      	ldr	r3, [sp, #16]
 80079e0:	f04f 0b00 	mov.w	fp, #0
 80079e4:	1b5d      	subs	r5, r3, r5
 80079e6:	9b07      	ldr	r3, [sp, #28]
 80079e8:	f8cd b010 	str.w	fp, [sp, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	bfb4      	ite	lt
 80079f0:	462b      	movlt	r3, r5
 80079f2:	2300      	movge	r3, #0
 80079f4:	930e      	str	r3, [sp, #56]	; 0x38
 80079f6:	9b07      	ldr	r3, [sp, #28]
 80079f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80079fc:	9316      	str	r3, [sp, #88]	; 0x58
 80079fe:	9b08      	ldr	r3, [sp, #32]
 8007a00:	4650      	mov	r0, sl
 8007a02:	6859      	ldr	r1, [r3, #4]
 8007a04:	f000 ffac 	bl	8008960 <_Balloc>
 8007a08:	9006      	str	r0, [sp, #24]
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	f43f af13 	beq.w	8007836 <_strtod_l+0x486>
 8007a10:	9b08      	ldr	r3, [sp, #32]
 8007a12:	300c      	adds	r0, #12
 8007a14:	691a      	ldr	r2, [r3, #16]
 8007a16:	f103 010c 	add.w	r1, r3, #12
 8007a1a:	3202      	adds	r2, #2
 8007a1c:	0092      	lsls	r2, r2, #2
 8007a1e:	f7ff fc47 	bl	80072b0 <memcpy>
 8007a22:	ab1e      	add	r3, sp, #120	; 0x78
 8007a24:	9301      	str	r3, [sp, #4]
 8007a26:	ab1d      	add	r3, sp, #116	; 0x74
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	4642      	mov	r2, r8
 8007a2c:	464b      	mov	r3, r9
 8007a2e:	4650      	mov	r0, sl
 8007a30:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8007a34:	f001 fb7e 	bl	8009134 <__d2b>
 8007a38:	901c      	str	r0, [sp, #112]	; 0x70
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	f43f aefb 	beq.w	8007836 <_strtod_l+0x486>
 8007a40:	2101      	movs	r1, #1
 8007a42:	4650      	mov	r0, sl
 8007a44:	f001 f8d0 	bl	8008be8 <__i2b>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	9004      	str	r0, [sp, #16]
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	f43f aef2 	beq.w	8007836 <_strtod_l+0x486>
 8007a52:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8007a54:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007a56:	2d00      	cmp	r5, #0
 8007a58:	bfab      	itete	ge
 8007a5a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007a5c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007a5e:	18ee      	addge	r6, r5, r3
 8007a60:	1b5c      	sublt	r4, r3, r5
 8007a62:	9b05      	ldr	r3, [sp, #20]
 8007a64:	bfa8      	it	ge
 8007a66:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007a68:	eba5 0503 	sub.w	r5, r5, r3
 8007a6c:	4415      	add	r5, r2
 8007a6e:	4b71      	ldr	r3, [pc, #452]	; (8007c34 <_strtod_l+0x884>)
 8007a70:	f105 35ff 	add.w	r5, r5, #4294967295
 8007a74:	bfb8      	it	lt
 8007a76:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007a78:	429d      	cmp	r5, r3
 8007a7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007a7e:	f280 80c9 	bge.w	8007c14 <_strtod_l+0x864>
 8007a82:	1b5b      	subs	r3, r3, r5
 8007a84:	2b1f      	cmp	r3, #31
 8007a86:	f04f 0701 	mov.w	r7, #1
 8007a8a:	eba2 0203 	sub.w	r2, r2, r3
 8007a8e:	f300 80b6 	bgt.w	8007bfe <_strtod_l+0x84e>
 8007a92:	2500      	movs	r5, #0
 8007a94:	fa07 f303 	lsl.w	r3, r7, r3
 8007a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a9a:	18b7      	adds	r7, r6, r2
 8007a9c:	9b05      	ldr	r3, [sp, #20]
 8007a9e:	42be      	cmp	r6, r7
 8007aa0:	4414      	add	r4, r2
 8007aa2:	441c      	add	r4, r3
 8007aa4:	4633      	mov	r3, r6
 8007aa6:	bfa8      	it	ge
 8007aa8:	463b      	movge	r3, r7
 8007aaa:	42a3      	cmp	r3, r4
 8007aac:	bfa8      	it	ge
 8007aae:	4623      	movge	r3, r4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	bfc2      	ittt	gt
 8007ab4:	1aff      	subgt	r7, r7, r3
 8007ab6:	1ae4      	subgt	r4, r4, r3
 8007ab8:	1af6      	subgt	r6, r6, r3
 8007aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	dd17      	ble.n	8007af0 <_strtod_l+0x740>
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	4650      	mov	r0, sl
 8007ac4:	9904      	ldr	r1, [sp, #16]
 8007ac6:	f001 f949 	bl	8008d5c <__pow5mult>
 8007aca:	9004      	str	r0, [sp, #16]
 8007acc:	2800      	cmp	r0, #0
 8007ace:	f43f aeb2 	beq.w	8007836 <_strtod_l+0x486>
 8007ad2:	4601      	mov	r1, r0
 8007ad4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007ad6:	4650      	mov	r0, sl
 8007ad8:	f001 f89c 	bl	8008c14 <__multiply>
 8007adc:	9009      	str	r0, [sp, #36]	; 0x24
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	f43f aea9 	beq.w	8007836 <_strtod_l+0x486>
 8007ae4:	4650      	mov	r0, sl
 8007ae6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007ae8:	f000 ff7a 	bl	80089e0 <_Bfree>
 8007aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aee:	931c      	str	r3, [sp, #112]	; 0x70
 8007af0:	2f00      	cmp	r7, #0
 8007af2:	f300 8093 	bgt.w	8007c1c <_strtod_l+0x86c>
 8007af6:	9b07      	ldr	r3, [sp, #28]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	dd08      	ble.n	8007b0e <_strtod_l+0x75e>
 8007afc:	4650      	mov	r0, sl
 8007afe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007b00:	9906      	ldr	r1, [sp, #24]
 8007b02:	f001 f92b 	bl	8008d5c <__pow5mult>
 8007b06:	9006      	str	r0, [sp, #24]
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	f43f ae94 	beq.w	8007836 <_strtod_l+0x486>
 8007b0e:	2c00      	cmp	r4, #0
 8007b10:	dd08      	ble.n	8007b24 <_strtod_l+0x774>
 8007b12:	4622      	mov	r2, r4
 8007b14:	4650      	mov	r0, sl
 8007b16:	9906      	ldr	r1, [sp, #24]
 8007b18:	f001 f97a 	bl	8008e10 <__lshift>
 8007b1c:	9006      	str	r0, [sp, #24]
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	f43f ae89 	beq.w	8007836 <_strtod_l+0x486>
 8007b24:	2e00      	cmp	r6, #0
 8007b26:	dd08      	ble.n	8007b3a <_strtod_l+0x78a>
 8007b28:	4632      	mov	r2, r6
 8007b2a:	4650      	mov	r0, sl
 8007b2c:	9904      	ldr	r1, [sp, #16]
 8007b2e:	f001 f96f 	bl	8008e10 <__lshift>
 8007b32:	9004      	str	r0, [sp, #16]
 8007b34:	2800      	cmp	r0, #0
 8007b36:	f43f ae7e 	beq.w	8007836 <_strtod_l+0x486>
 8007b3a:	4650      	mov	r0, sl
 8007b3c:	9a06      	ldr	r2, [sp, #24]
 8007b3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007b40:	f001 f9ee 	bl	8008f20 <__mdiff>
 8007b44:	4683      	mov	fp, r0
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f43f ae75 	beq.w	8007836 <_strtod_l+0x486>
 8007b4c:	2400      	movs	r4, #0
 8007b4e:	68c3      	ldr	r3, [r0, #12]
 8007b50:	9904      	ldr	r1, [sp, #16]
 8007b52:	60c4      	str	r4, [r0, #12]
 8007b54:	930d      	str	r3, [sp, #52]	; 0x34
 8007b56:	f001 f9c7 	bl	8008ee8 <__mcmp>
 8007b5a:	42a0      	cmp	r0, r4
 8007b5c:	da70      	bge.n	8007c40 <_strtod_l+0x890>
 8007b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b60:	ea53 0308 	orrs.w	r3, r3, r8
 8007b64:	f040 8096 	bne.w	8007c94 <_strtod_l+0x8e4>
 8007b68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f040 8091 	bne.w	8007c94 <_strtod_l+0x8e4>
 8007b72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b76:	0d1b      	lsrs	r3, r3, #20
 8007b78:	051b      	lsls	r3, r3, #20
 8007b7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007b7e:	f240 8089 	bls.w	8007c94 <_strtod_l+0x8e4>
 8007b82:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007b86:	b923      	cbnz	r3, 8007b92 <_strtod_l+0x7e2>
 8007b88:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	f340 8081 	ble.w	8007c94 <_strtod_l+0x8e4>
 8007b92:	4659      	mov	r1, fp
 8007b94:	2201      	movs	r2, #1
 8007b96:	4650      	mov	r0, sl
 8007b98:	f001 f93a 	bl	8008e10 <__lshift>
 8007b9c:	9904      	ldr	r1, [sp, #16]
 8007b9e:	4683      	mov	fp, r0
 8007ba0:	f001 f9a2 	bl	8008ee8 <__mcmp>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	dd75      	ble.n	8007c94 <_strtod_l+0x8e4>
 8007ba8:	9905      	ldr	r1, [sp, #20]
 8007baa:	464b      	mov	r3, r9
 8007bac:	4a22      	ldr	r2, [pc, #136]	; (8007c38 <_strtod_l+0x888>)
 8007bae:	2900      	cmp	r1, #0
 8007bb0:	f000 8091 	beq.w	8007cd6 <_strtod_l+0x926>
 8007bb4:	ea02 0109 	and.w	r1, r2, r9
 8007bb8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007bbc:	f300 808b 	bgt.w	8007cd6 <_strtod_l+0x926>
 8007bc0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007bc4:	f77f aea9 	ble.w	800791a <_strtod_l+0x56a>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	4a1c      	ldr	r2, [pc, #112]	; (8007c3c <_strtod_l+0x88c>)
 8007bcc:	4640      	mov	r0, r8
 8007bce:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007bd8:	f7f8 fcee 	bl	80005b8 <__aeabi_dmul>
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4303      	orrs	r3, r0
 8007be0:	bf08      	it	eq
 8007be2:	2322      	moveq	r3, #34	; 0x22
 8007be4:	4680      	mov	r8, r0
 8007be6:	4689      	mov	r9, r1
 8007be8:	bf08      	it	eq
 8007bea:	f8ca 3000 	streq.w	r3, [sl]
 8007bee:	e62d      	b.n	800784c <_strtod_l+0x49c>
 8007bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf8:	ea03 0808 	and.w	r8, r3, r8
 8007bfc:	e6db      	b.n	80079b6 <_strtod_l+0x606>
 8007bfe:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007c02:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007c06:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007c0a:	35e2      	adds	r5, #226	; 0xe2
 8007c0c:	fa07 f505 	lsl.w	r5, r7, r5
 8007c10:	970f      	str	r7, [sp, #60]	; 0x3c
 8007c12:	e742      	b.n	8007a9a <_strtod_l+0x6ea>
 8007c14:	2301      	movs	r3, #1
 8007c16:	2500      	movs	r5, #0
 8007c18:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c1a:	e73e      	b.n	8007a9a <_strtod_l+0x6ea>
 8007c1c:	463a      	mov	r2, r7
 8007c1e:	4650      	mov	r0, sl
 8007c20:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c22:	f001 f8f5 	bl	8008e10 <__lshift>
 8007c26:	901c      	str	r0, [sp, #112]	; 0x70
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	f47f af64 	bne.w	8007af6 <_strtod_l+0x746>
 8007c2e:	e602      	b.n	8007836 <_strtod_l+0x486>
 8007c30:	0800a810 	.word	0x0800a810
 8007c34:	fffffc02 	.word	0xfffffc02
 8007c38:	7ff00000 	.word	0x7ff00000
 8007c3c:	39500000 	.word	0x39500000
 8007c40:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007c44:	d166      	bne.n	8007d14 <_strtod_l+0x964>
 8007c46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c4c:	b35a      	cbz	r2, 8007ca6 <_strtod_l+0x8f6>
 8007c4e:	4a9c      	ldr	r2, [pc, #624]	; (8007ec0 <_strtod_l+0xb10>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d12c      	bne.n	8007cae <_strtod_l+0x8fe>
 8007c54:	9b05      	ldr	r3, [sp, #20]
 8007c56:	4640      	mov	r0, r8
 8007c58:	b303      	cbz	r3, 8007c9c <_strtod_l+0x8ec>
 8007c5a:	464b      	mov	r3, r9
 8007c5c:	4a99      	ldr	r2, [pc, #612]	; (8007ec4 <_strtod_l+0xb14>)
 8007c5e:	f04f 31ff 	mov.w	r1, #4294967295
 8007c62:	401a      	ands	r2, r3
 8007c64:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007c68:	d81b      	bhi.n	8007ca2 <_strtod_l+0x8f2>
 8007c6a:	0d12      	lsrs	r2, r2, #20
 8007c6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007c70:	fa01 f303 	lsl.w	r3, r1, r3
 8007c74:	4298      	cmp	r0, r3
 8007c76:	d11a      	bne.n	8007cae <_strtod_l+0x8fe>
 8007c78:	4b93      	ldr	r3, [pc, #588]	; (8007ec8 <_strtod_l+0xb18>)
 8007c7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d102      	bne.n	8007c86 <_strtod_l+0x8d6>
 8007c80:	3001      	adds	r0, #1
 8007c82:	f43f add8 	beq.w	8007836 <_strtod_l+0x486>
 8007c86:	f04f 0800 	mov.w	r8, #0
 8007c8a:	4b8e      	ldr	r3, [pc, #568]	; (8007ec4 <_strtod_l+0xb14>)
 8007c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c8e:	401a      	ands	r2, r3
 8007c90:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007c94:	9b05      	ldr	r3, [sp, #20]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d196      	bne.n	8007bc8 <_strtod_l+0x818>
 8007c9a:	e5d7      	b.n	800784c <_strtod_l+0x49c>
 8007c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca0:	e7e8      	b.n	8007c74 <_strtod_l+0x8c4>
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	e7e6      	b.n	8007c74 <_strtod_l+0x8c4>
 8007ca6:	ea53 0308 	orrs.w	r3, r3, r8
 8007caa:	f43f af7d 	beq.w	8007ba8 <_strtod_l+0x7f8>
 8007cae:	b1e5      	cbz	r5, 8007cea <_strtod_l+0x93a>
 8007cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb2:	421d      	tst	r5, r3
 8007cb4:	d0ee      	beq.n	8007c94 <_strtod_l+0x8e4>
 8007cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cb8:	4640      	mov	r0, r8
 8007cba:	4649      	mov	r1, r9
 8007cbc:	9a05      	ldr	r2, [sp, #20]
 8007cbe:	b1c3      	cbz	r3, 8007cf2 <_strtod_l+0x942>
 8007cc0:	f7ff fb52 	bl	8007368 <sulp>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ccc:	f7f8 fabe 	bl	800024c <__adddf3>
 8007cd0:	4680      	mov	r8, r0
 8007cd2:	4689      	mov	r9, r1
 8007cd4:	e7de      	b.n	8007c94 <_strtod_l+0x8e4>
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007cdc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007ce0:	f04f 38ff 	mov.w	r8, #4294967295
 8007ce4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007ce8:	e7d4      	b.n	8007c94 <_strtod_l+0x8e4>
 8007cea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cec:	ea13 0f08 	tst.w	r3, r8
 8007cf0:	e7e0      	b.n	8007cb4 <_strtod_l+0x904>
 8007cf2:	f7ff fb39 	bl	8007368 <sulp>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007cfe:	f7f8 faa3 	bl	8000248 <__aeabi_dsub>
 8007d02:	2200      	movs	r2, #0
 8007d04:	2300      	movs	r3, #0
 8007d06:	4680      	mov	r8, r0
 8007d08:	4689      	mov	r9, r1
 8007d0a:	f7f8 febd 	bl	8000a88 <__aeabi_dcmpeq>
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	d0c0      	beq.n	8007c94 <_strtod_l+0x8e4>
 8007d12:	e602      	b.n	800791a <_strtod_l+0x56a>
 8007d14:	4658      	mov	r0, fp
 8007d16:	9904      	ldr	r1, [sp, #16]
 8007d18:	f001 fa68 	bl	80091ec <__ratio>
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d22:	4606      	mov	r6, r0
 8007d24:	460f      	mov	r7, r1
 8007d26:	f7f8 fec3 	bl	8000ab0 <__aeabi_dcmple>
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	d075      	beq.n	8007e1a <_strtod_l+0xa6a>
 8007d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d047      	beq.n	8007dc4 <_strtod_l+0xa14>
 8007d34:	2600      	movs	r6, #0
 8007d36:	4f65      	ldr	r7, [pc, #404]	; (8007ecc <_strtod_l+0xb1c>)
 8007d38:	4d64      	ldr	r5, [pc, #400]	; (8007ecc <_strtod_l+0xb1c>)
 8007d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d40:	0d1b      	lsrs	r3, r3, #20
 8007d42:	051b      	lsls	r3, r3, #20
 8007d44:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d48:	4b61      	ldr	r3, [pc, #388]	; (8007ed0 <_strtod_l+0xb20>)
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	f040 80c8 	bne.w	8007ee0 <_strtod_l+0xb30>
 8007d50:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d54:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d5a:	4640      	mov	r0, r8
 8007d5c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007d60:	4649      	mov	r1, r9
 8007d62:	f001 f96d 	bl	8009040 <__ulp>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	4639      	mov	r1, r7
 8007d6e:	f7f8 fc23 	bl	80005b8 <__aeabi_dmul>
 8007d72:	4642      	mov	r2, r8
 8007d74:	464b      	mov	r3, r9
 8007d76:	f7f8 fa69 	bl	800024c <__adddf3>
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	4951      	ldr	r1, [pc, #324]	; (8007ec4 <_strtod_l+0xb14>)
 8007d7e:	4a55      	ldr	r2, [pc, #340]	; (8007ed4 <_strtod_l+0xb24>)
 8007d80:	4019      	ands	r1, r3
 8007d82:	4291      	cmp	r1, r2
 8007d84:	4680      	mov	r8, r0
 8007d86:	d95e      	bls.n	8007e46 <_strtod_l+0xa96>
 8007d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d8a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d103      	bne.n	8007d9a <_strtod_l+0x9ea>
 8007d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d94:	3301      	adds	r3, #1
 8007d96:	f43f ad4e 	beq.w	8007836 <_strtod_l+0x486>
 8007d9a:	f04f 38ff 	mov.w	r8, #4294967295
 8007d9e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007ec8 <_strtod_l+0xb18>
 8007da2:	4650      	mov	r0, sl
 8007da4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007da6:	f000 fe1b 	bl	80089e0 <_Bfree>
 8007daa:	4650      	mov	r0, sl
 8007dac:	9906      	ldr	r1, [sp, #24]
 8007dae:	f000 fe17 	bl	80089e0 <_Bfree>
 8007db2:	4650      	mov	r0, sl
 8007db4:	9904      	ldr	r1, [sp, #16]
 8007db6:	f000 fe13 	bl	80089e0 <_Bfree>
 8007dba:	4659      	mov	r1, fp
 8007dbc:	4650      	mov	r0, sl
 8007dbe:	f000 fe0f 	bl	80089e0 <_Bfree>
 8007dc2:	e61c      	b.n	80079fe <_strtod_l+0x64e>
 8007dc4:	f1b8 0f00 	cmp.w	r8, #0
 8007dc8:	d119      	bne.n	8007dfe <_strtod_l+0xa4e>
 8007dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dd0:	b9e3      	cbnz	r3, 8007e0c <_strtod_l+0xa5c>
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	4639      	mov	r1, r7
 8007dd8:	4b3c      	ldr	r3, [pc, #240]	; (8007ecc <_strtod_l+0xb1c>)
 8007dda:	f7f8 fe5f 	bl	8000a9c <__aeabi_dcmplt>
 8007dde:	b9c8      	cbnz	r0, 8007e14 <_strtod_l+0xa64>
 8007de0:	2200      	movs	r2, #0
 8007de2:	4630      	mov	r0, r6
 8007de4:	4639      	mov	r1, r7
 8007de6:	4b3c      	ldr	r3, [pc, #240]	; (8007ed8 <_strtod_l+0xb28>)
 8007de8:	f7f8 fbe6 	bl	80005b8 <__aeabi_dmul>
 8007dec:	4604      	mov	r4, r0
 8007dee:	460d      	mov	r5, r1
 8007df0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007df4:	9418      	str	r4, [sp, #96]	; 0x60
 8007df6:	9319      	str	r3, [sp, #100]	; 0x64
 8007df8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8007dfc:	e79d      	b.n	8007d3a <_strtod_l+0x98a>
 8007dfe:	f1b8 0f01 	cmp.w	r8, #1
 8007e02:	d103      	bne.n	8007e0c <_strtod_l+0xa5c>
 8007e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f43f ad87 	beq.w	800791a <_strtod_l+0x56a>
 8007e0c:	2600      	movs	r6, #0
 8007e0e:	2400      	movs	r4, #0
 8007e10:	4f32      	ldr	r7, [pc, #200]	; (8007edc <_strtod_l+0xb2c>)
 8007e12:	e791      	b.n	8007d38 <_strtod_l+0x988>
 8007e14:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007e16:	4d30      	ldr	r5, [pc, #192]	; (8007ed8 <_strtod_l+0xb28>)
 8007e18:	e7ea      	b.n	8007df0 <_strtod_l+0xa40>
 8007e1a:	4b2f      	ldr	r3, [pc, #188]	; (8007ed8 <_strtod_l+0xb28>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	4630      	mov	r0, r6
 8007e20:	4639      	mov	r1, r7
 8007e22:	f7f8 fbc9 	bl	80005b8 <__aeabi_dmul>
 8007e26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e28:	4604      	mov	r4, r0
 8007e2a:	460d      	mov	r5, r1
 8007e2c:	b933      	cbnz	r3, 8007e3c <_strtod_l+0xa8c>
 8007e2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e32:	9010      	str	r0, [sp, #64]	; 0x40
 8007e34:	9311      	str	r3, [sp, #68]	; 0x44
 8007e36:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007e3a:	e77e      	b.n	8007d3a <_strtod_l+0x98a>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007e44:	e7f7      	b.n	8007e36 <_strtod_l+0xa86>
 8007e46:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007e4a:	9b05      	ldr	r3, [sp, #20]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1a8      	bne.n	8007da2 <_strtod_l+0x9f2>
 8007e50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e56:	0d1b      	lsrs	r3, r3, #20
 8007e58:	051b      	lsls	r3, r3, #20
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d1a1      	bne.n	8007da2 <_strtod_l+0x9f2>
 8007e5e:	4620      	mov	r0, r4
 8007e60:	4629      	mov	r1, r5
 8007e62:	f7f9 f87b 	bl	8000f5c <__aeabi_d2lz>
 8007e66:	f7f8 fb79 	bl	800055c <__aeabi_l2d>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4620      	mov	r0, r4
 8007e70:	4629      	mov	r1, r5
 8007e72:	f7f8 f9e9 	bl	8000248 <__aeabi_dsub>
 8007e76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e7c:	ea43 0308 	orr.w	r3, r3, r8
 8007e80:	4313      	orrs	r3, r2
 8007e82:	4604      	mov	r4, r0
 8007e84:	460d      	mov	r5, r1
 8007e86:	d066      	beq.n	8007f56 <_strtod_l+0xba6>
 8007e88:	a309      	add	r3, pc, #36	; (adr r3, 8007eb0 <_strtod_l+0xb00>)
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	f7f8 fe05 	bl	8000a9c <__aeabi_dcmplt>
 8007e92:	2800      	cmp	r0, #0
 8007e94:	f47f acda 	bne.w	800784c <_strtod_l+0x49c>
 8007e98:	a307      	add	r3, pc, #28	; (adr r3, 8007eb8 <_strtod_l+0xb08>)
 8007e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	f7f8 fe19 	bl	8000ad8 <__aeabi_dcmpgt>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	f43f af7b 	beq.w	8007da2 <_strtod_l+0x9f2>
 8007eac:	e4ce      	b.n	800784c <_strtod_l+0x49c>
 8007eae:	bf00      	nop
 8007eb0:	94a03595 	.word	0x94a03595
 8007eb4:	3fdfffff 	.word	0x3fdfffff
 8007eb8:	35afe535 	.word	0x35afe535
 8007ebc:	3fe00000 	.word	0x3fe00000
 8007ec0:	000fffff 	.word	0x000fffff
 8007ec4:	7ff00000 	.word	0x7ff00000
 8007ec8:	7fefffff 	.word	0x7fefffff
 8007ecc:	3ff00000 	.word	0x3ff00000
 8007ed0:	7fe00000 	.word	0x7fe00000
 8007ed4:	7c9fffff 	.word	0x7c9fffff
 8007ed8:	3fe00000 	.word	0x3fe00000
 8007edc:	bff00000 	.word	0xbff00000
 8007ee0:	9b05      	ldr	r3, [sp, #20]
 8007ee2:	b313      	cbz	r3, 8007f2a <_strtod_l+0xb7a>
 8007ee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ee6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007eea:	d81e      	bhi.n	8007f2a <_strtod_l+0xb7a>
 8007eec:	a326      	add	r3, pc, #152	; (adr r3, 8007f88 <_strtod_l+0xbd8>)
 8007eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	f7f8 fddb 	bl	8000ab0 <__aeabi_dcmple>
 8007efa:	b190      	cbz	r0, 8007f22 <_strtod_l+0xb72>
 8007efc:	4629      	mov	r1, r5
 8007efe:	4620      	mov	r0, r4
 8007f00:	f7f8 fe0a 	bl	8000b18 <__aeabi_d2uiz>
 8007f04:	2801      	cmp	r0, #1
 8007f06:	bf38      	it	cc
 8007f08:	2001      	movcc	r0, #1
 8007f0a:	f7f8 fadb 	bl	80004c4 <__aeabi_ui2d>
 8007f0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f10:	4604      	mov	r4, r0
 8007f12:	460d      	mov	r5, r1
 8007f14:	b9d3      	cbnz	r3, 8007f4c <_strtod_l+0xb9c>
 8007f16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f1a:	9012      	str	r0, [sp, #72]	; 0x48
 8007f1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f1e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007f22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f24:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007f28:	1a9f      	subs	r7, r3, r2
 8007f2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f2e:	f001 f887 	bl	8009040 <__ulp>
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	4630      	mov	r0, r6
 8007f38:	4639      	mov	r1, r7
 8007f3a:	f7f8 fb3d 	bl	80005b8 <__aeabi_dmul>
 8007f3e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f42:	f7f8 f983 	bl	800024c <__adddf3>
 8007f46:	4680      	mov	r8, r0
 8007f48:	4689      	mov	r9, r1
 8007f4a:	e77e      	b.n	8007e4a <_strtod_l+0xa9a>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007f54:	e7e3      	b.n	8007f1e <_strtod_l+0xb6e>
 8007f56:	a30e      	add	r3, pc, #56	; (adr r3, 8007f90 <_strtod_l+0xbe0>)
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	f7f8 fd9e 	bl	8000a9c <__aeabi_dcmplt>
 8007f60:	e7a1      	b.n	8007ea6 <_strtod_l+0xaf6>
 8007f62:	2300      	movs	r3, #0
 8007f64:	930c      	str	r3, [sp, #48]	; 0x30
 8007f66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	f7ff ba65 	b.w	800743a <_strtod_l+0x8a>
 8007f70:	2b65      	cmp	r3, #101	; 0x65
 8007f72:	f43f ab5c 	beq.w	800762e <_strtod_l+0x27e>
 8007f76:	2b45      	cmp	r3, #69	; 0x45
 8007f78:	f43f ab59 	beq.w	800762e <_strtod_l+0x27e>
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f7ff bb8d 	b.w	800769c <_strtod_l+0x2ec>
 8007f82:	bf00      	nop
 8007f84:	f3af 8000 	nop.w
 8007f88:	ffc00000 	.word	0xffc00000
 8007f8c:	41dfffff 	.word	0x41dfffff
 8007f90:	94a03595 	.word	0x94a03595
 8007f94:	3fcfffff 	.word	0x3fcfffff

08007f98 <strtof>:
 8007f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f9c:	4f22      	ldr	r7, [pc, #136]	; (8008028 <strtof+0x90>)
 8007f9e:	460a      	mov	r2, r1
 8007fa0:	4b22      	ldr	r3, [pc, #136]	; (800802c <strtof+0x94>)
 8007fa2:	4601      	mov	r1, r0
 8007fa4:	6838      	ldr	r0, [r7, #0]
 8007fa6:	f7ff fa03 	bl	80073b0 <_strtod_l>
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	4606      	mov	r6, r0
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	f7f8 fd9b 	bl	8000aec <__aeabi_dcmpun>
 8007fb6:	b168      	cbz	r0, 8007fd4 <strtof+0x3c>
 8007fb8:	2c00      	cmp	r4, #0
 8007fba:	481d      	ldr	r0, [pc, #116]	; (8008030 <strtof+0x98>)
 8007fbc:	da06      	bge.n	8007fcc <strtof+0x34>
 8007fbe:	f001 fe9b 	bl	8009cf8 <nanf>
 8007fc2:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd0:	f001 be92 	b.w	8009cf8 <nanf>
 8007fd4:	4621      	mov	r1, r4
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f7f8 fdbe 	bl	8000b58 <__aeabi_d2f>
 8007fdc:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	4914      	ldr	r1, [pc, #80]	; (8008034 <strtof+0x9c>)
 8007fe4:	4640      	mov	r0, r8
 8007fe6:	f7f8 ff8b 	bl	8000f00 <__aeabi_fcmpun>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	d1eb      	bne.n	8007fc6 <strtof+0x2e>
 8007fee:	4640      	mov	r0, r8
 8007ff0:	4910      	ldr	r1, [pc, #64]	; (8008034 <strtof+0x9c>)
 8007ff2:	f7f8 ff67 	bl	8000ec4 <__aeabi_fcmple>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	d1e5      	bne.n	8007fc6 <strtof+0x2e>
 8007ffa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8008002:	4630      	mov	r0, r6
 8008004:	4621      	mov	r1, r4
 8008006:	4b0c      	ldr	r3, [pc, #48]	; (8008038 <strtof+0xa0>)
 8008008:	f7f8 fd70 	bl	8000aec <__aeabi_dcmpun>
 800800c:	b940      	cbnz	r0, 8008020 <strtof+0x88>
 800800e:	f04f 32ff 	mov.w	r2, #4294967295
 8008012:	4630      	mov	r0, r6
 8008014:	4621      	mov	r1, r4
 8008016:	4b08      	ldr	r3, [pc, #32]	; (8008038 <strtof+0xa0>)
 8008018:	f7f8 fd4a 	bl	8000ab0 <__aeabi_dcmple>
 800801c:	2800      	cmp	r0, #0
 800801e:	d0d2      	beq.n	8007fc6 <strtof+0x2e>
 8008020:	2222      	movs	r2, #34	; 0x22
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	e7ce      	b.n	8007fc6 <strtof+0x2e>
 8008028:	20000020 	.word	0x20000020
 800802c:	20000088 	.word	0x20000088
 8008030:	0800a8eb 	.word	0x0800a8eb
 8008034:	7f7fffff 	.word	0x7f7fffff
 8008038:	7fefffff 	.word	0x7fefffff

0800803c <strtok>:
 800803c:	4b16      	ldr	r3, [pc, #88]	; (8008098 <strtok+0x5c>)
 800803e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008042:	681f      	ldr	r7, [r3, #0]
 8008044:	4605      	mov	r5, r0
 8008046:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8008048:	460e      	mov	r6, r1
 800804a:	b9ec      	cbnz	r4, 8008088 <strtok+0x4c>
 800804c:	2050      	movs	r0, #80	; 0x50
 800804e:	f000 fc6d 	bl	800892c <malloc>
 8008052:	4602      	mov	r2, r0
 8008054:	65b8      	str	r0, [r7, #88]	; 0x58
 8008056:	b920      	cbnz	r0, 8008062 <strtok+0x26>
 8008058:	2157      	movs	r1, #87	; 0x57
 800805a:	4b10      	ldr	r3, [pc, #64]	; (800809c <strtok+0x60>)
 800805c:	4810      	ldr	r0, [pc, #64]	; (80080a0 <strtok+0x64>)
 800805e:	f000 f8cf 	bl	8008200 <__assert_func>
 8008062:	e9c0 4400 	strd	r4, r4, [r0]
 8008066:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800806a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800806e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008072:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008076:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800807a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800807e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008082:	6184      	str	r4, [r0, #24]
 8008084:	7704      	strb	r4, [r0, #28]
 8008086:	6244      	str	r4, [r0, #36]	; 0x24
 8008088:	4631      	mov	r1, r6
 800808a:	4628      	mov	r0, r5
 800808c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800808e:	2301      	movs	r3, #1
 8008090:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008094:	f000 b806 	b.w	80080a4 <__strtok_r>
 8008098:	20000020 	.word	0x20000020
 800809c:	0800a838 	.word	0x0800a838
 80080a0:	0800a84f 	.word	0x0800a84f

080080a4 <__strtok_r>:
 80080a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080a6:	b908      	cbnz	r0, 80080ac <__strtok_r+0x8>
 80080a8:	6810      	ldr	r0, [r2, #0]
 80080aa:	b188      	cbz	r0, 80080d0 <__strtok_r+0x2c>
 80080ac:	4604      	mov	r4, r0
 80080ae:	460f      	mov	r7, r1
 80080b0:	4620      	mov	r0, r4
 80080b2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80080b6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80080ba:	b91e      	cbnz	r6, 80080c4 <__strtok_r+0x20>
 80080bc:	b965      	cbnz	r5, 80080d8 <__strtok_r+0x34>
 80080be:	4628      	mov	r0, r5
 80080c0:	6015      	str	r5, [r2, #0]
 80080c2:	e005      	b.n	80080d0 <__strtok_r+0x2c>
 80080c4:	42b5      	cmp	r5, r6
 80080c6:	d1f6      	bne.n	80080b6 <__strtok_r+0x12>
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1f0      	bne.n	80080ae <__strtok_r+0xa>
 80080cc:	6014      	str	r4, [r2, #0]
 80080ce:	7003      	strb	r3, [r0, #0]
 80080d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d2:	461c      	mov	r4, r3
 80080d4:	e00c      	b.n	80080f0 <__strtok_r+0x4c>
 80080d6:	b915      	cbnz	r5, 80080de <__strtok_r+0x3a>
 80080d8:	460e      	mov	r6, r1
 80080da:	f814 3b01 	ldrb.w	r3, [r4], #1
 80080de:	f816 5b01 	ldrb.w	r5, [r6], #1
 80080e2:	42ab      	cmp	r3, r5
 80080e4:	d1f7      	bne.n	80080d6 <__strtok_r+0x32>
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d0f3      	beq.n	80080d2 <__strtok_r+0x2e>
 80080ea:	2300      	movs	r3, #0
 80080ec:	f804 3c01 	strb.w	r3, [r4, #-1]
 80080f0:	6014      	str	r4, [r2, #0]
 80080f2:	e7ed      	b.n	80080d0 <__strtok_r+0x2c>

080080f4 <_strtoul_l.isra.0>:
 80080f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080f8:	468c      	mov	ip, r1
 80080fa:	4686      	mov	lr, r0
 80080fc:	4e3a      	ldr	r6, [pc, #232]	; (80081e8 <_strtoul_l.isra.0+0xf4>)
 80080fe:	4660      	mov	r0, ip
 8008100:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008104:	5da5      	ldrb	r5, [r4, r6]
 8008106:	f015 0508 	ands.w	r5, r5, #8
 800810a:	d1f8      	bne.n	80080fe <_strtoul_l.isra.0+0xa>
 800810c:	2c2d      	cmp	r4, #45	; 0x2d
 800810e:	d134      	bne.n	800817a <_strtoul_l.isra.0+0x86>
 8008110:	f04f 0801 	mov.w	r8, #1
 8008114:	f89c 4000 	ldrb.w	r4, [ip]
 8008118:	f100 0c02 	add.w	ip, r0, #2
 800811c:	2b00      	cmp	r3, #0
 800811e:	d05e      	beq.n	80081de <_strtoul_l.isra.0+0xea>
 8008120:	2b10      	cmp	r3, #16
 8008122:	d10c      	bne.n	800813e <_strtoul_l.isra.0+0x4a>
 8008124:	2c30      	cmp	r4, #48	; 0x30
 8008126:	d10a      	bne.n	800813e <_strtoul_l.isra.0+0x4a>
 8008128:	f89c 0000 	ldrb.w	r0, [ip]
 800812c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008130:	2858      	cmp	r0, #88	; 0x58
 8008132:	d14f      	bne.n	80081d4 <_strtoul_l.isra.0+0xe0>
 8008134:	2310      	movs	r3, #16
 8008136:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800813a:	f10c 0c02 	add.w	ip, ip, #2
 800813e:	f04f 37ff 	mov.w	r7, #4294967295
 8008142:	fbb7 f7f3 	udiv	r7, r7, r3
 8008146:	2500      	movs	r5, #0
 8008148:	fb03 f907 	mul.w	r9, r3, r7
 800814c:	4628      	mov	r0, r5
 800814e:	ea6f 0909 	mvn.w	r9, r9
 8008152:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8008156:	2e09      	cmp	r6, #9
 8008158:	d818      	bhi.n	800818c <_strtoul_l.isra.0+0x98>
 800815a:	4634      	mov	r4, r6
 800815c:	42a3      	cmp	r3, r4
 800815e:	dd24      	ble.n	80081aa <_strtoul_l.isra.0+0xb6>
 8008160:	2d00      	cmp	r5, #0
 8008162:	db1f      	blt.n	80081a4 <_strtoul_l.isra.0+0xb0>
 8008164:	4287      	cmp	r7, r0
 8008166:	d31d      	bcc.n	80081a4 <_strtoul_l.isra.0+0xb0>
 8008168:	d101      	bne.n	800816e <_strtoul_l.isra.0+0x7a>
 800816a:	45a1      	cmp	r9, r4
 800816c:	db1a      	blt.n	80081a4 <_strtoul_l.isra.0+0xb0>
 800816e:	2501      	movs	r5, #1
 8008170:	fb00 4003 	mla	r0, r0, r3, r4
 8008174:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008178:	e7eb      	b.n	8008152 <_strtoul_l.isra.0+0x5e>
 800817a:	2c2b      	cmp	r4, #43	; 0x2b
 800817c:	bf08      	it	eq
 800817e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8008182:	46a8      	mov	r8, r5
 8008184:	bf08      	it	eq
 8008186:	f100 0c02 	addeq.w	ip, r0, #2
 800818a:	e7c7      	b.n	800811c <_strtoul_l.isra.0+0x28>
 800818c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8008190:	2e19      	cmp	r6, #25
 8008192:	d801      	bhi.n	8008198 <_strtoul_l.isra.0+0xa4>
 8008194:	3c37      	subs	r4, #55	; 0x37
 8008196:	e7e1      	b.n	800815c <_strtoul_l.isra.0+0x68>
 8008198:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800819c:	2e19      	cmp	r6, #25
 800819e:	d804      	bhi.n	80081aa <_strtoul_l.isra.0+0xb6>
 80081a0:	3c57      	subs	r4, #87	; 0x57
 80081a2:	e7db      	b.n	800815c <_strtoul_l.isra.0+0x68>
 80081a4:	f04f 35ff 	mov.w	r5, #4294967295
 80081a8:	e7e4      	b.n	8008174 <_strtoul_l.isra.0+0x80>
 80081aa:	2d00      	cmp	r5, #0
 80081ac:	da07      	bge.n	80081be <_strtoul_l.isra.0+0xca>
 80081ae:	2322      	movs	r3, #34	; 0x22
 80081b0:	f04f 30ff 	mov.w	r0, #4294967295
 80081b4:	f8ce 3000 	str.w	r3, [lr]
 80081b8:	b942      	cbnz	r2, 80081cc <_strtoul_l.isra.0+0xd8>
 80081ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081be:	f1b8 0f00 	cmp.w	r8, #0
 80081c2:	d000      	beq.n	80081c6 <_strtoul_l.isra.0+0xd2>
 80081c4:	4240      	negs	r0, r0
 80081c6:	2a00      	cmp	r2, #0
 80081c8:	d0f7      	beq.n	80081ba <_strtoul_l.isra.0+0xc6>
 80081ca:	b10d      	cbz	r5, 80081d0 <_strtoul_l.isra.0+0xdc>
 80081cc:	f10c 31ff 	add.w	r1, ip, #4294967295
 80081d0:	6011      	str	r1, [r2, #0]
 80081d2:	e7f2      	b.n	80081ba <_strtoul_l.isra.0+0xc6>
 80081d4:	2430      	movs	r4, #48	; 0x30
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1b1      	bne.n	800813e <_strtoul_l.isra.0+0x4a>
 80081da:	2308      	movs	r3, #8
 80081dc:	e7af      	b.n	800813e <_strtoul_l.isra.0+0x4a>
 80081de:	2c30      	cmp	r4, #48	; 0x30
 80081e0:	d0a2      	beq.n	8008128 <_strtoul_l.isra.0+0x34>
 80081e2:	230a      	movs	r3, #10
 80081e4:	e7ab      	b.n	800813e <_strtoul_l.isra.0+0x4a>
 80081e6:	bf00      	nop
 80081e8:	0800a8ed 	.word	0x0800a8ed

080081ec <strtoul>:
 80081ec:	4613      	mov	r3, r2
 80081ee:	460a      	mov	r2, r1
 80081f0:	4601      	mov	r1, r0
 80081f2:	4802      	ldr	r0, [pc, #8]	; (80081fc <strtoul+0x10>)
 80081f4:	6800      	ldr	r0, [r0, #0]
 80081f6:	f7ff bf7d 	b.w	80080f4 <_strtoul_l.isra.0>
 80081fa:	bf00      	nop
 80081fc:	20000020 	.word	0x20000020

08008200 <__assert_func>:
 8008200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008202:	4614      	mov	r4, r2
 8008204:	461a      	mov	r2, r3
 8008206:	4b09      	ldr	r3, [pc, #36]	; (800822c <__assert_func+0x2c>)
 8008208:	4605      	mov	r5, r0
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68d8      	ldr	r0, [r3, #12]
 800820e:	b14c      	cbz	r4, 8008224 <__assert_func+0x24>
 8008210:	4b07      	ldr	r3, [pc, #28]	; (8008230 <__assert_func+0x30>)
 8008212:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008216:	9100      	str	r1, [sp, #0]
 8008218:	462b      	mov	r3, r5
 800821a:	4906      	ldr	r1, [pc, #24]	; (8008234 <__assert_func+0x34>)
 800821c:	f000 f80e 	bl	800823c <fiprintf>
 8008220:	f001 fe4e 	bl	8009ec0 <abort>
 8008224:	4b04      	ldr	r3, [pc, #16]	; (8008238 <__assert_func+0x38>)
 8008226:	461c      	mov	r4, r3
 8008228:	e7f3      	b.n	8008212 <__assert_func+0x12>
 800822a:	bf00      	nop
 800822c:	20000020 	.word	0x20000020
 8008230:	0800a8b0 	.word	0x0800a8b0
 8008234:	0800a8bd 	.word	0x0800a8bd
 8008238:	0800a8eb 	.word	0x0800a8eb

0800823c <fiprintf>:
 800823c:	b40e      	push	{r1, r2, r3}
 800823e:	b503      	push	{r0, r1, lr}
 8008240:	4601      	mov	r1, r0
 8008242:	ab03      	add	r3, sp, #12
 8008244:	4805      	ldr	r0, [pc, #20]	; (800825c <fiprintf+0x20>)
 8008246:	f853 2b04 	ldr.w	r2, [r3], #4
 800824a:	6800      	ldr	r0, [r0, #0]
 800824c:	9301      	str	r3, [sp, #4]
 800824e:	f001 fa77 	bl	8009740 <_vfiprintf_r>
 8008252:	b002      	add	sp, #8
 8008254:	f85d eb04 	ldr.w	lr, [sp], #4
 8008258:	b003      	add	sp, #12
 800825a:	4770      	bx	lr
 800825c:	20000020 	.word	0x20000020

08008260 <rshift>:
 8008260:	6903      	ldr	r3, [r0, #16]
 8008262:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008266:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800826a:	f100 0414 	add.w	r4, r0, #20
 800826e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008272:	dd46      	ble.n	8008302 <rshift+0xa2>
 8008274:	f011 011f 	ands.w	r1, r1, #31
 8008278:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800827c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008280:	d10c      	bne.n	800829c <rshift+0x3c>
 8008282:	4629      	mov	r1, r5
 8008284:	f100 0710 	add.w	r7, r0, #16
 8008288:	42b1      	cmp	r1, r6
 800828a:	d335      	bcc.n	80082f8 <rshift+0x98>
 800828c:	1a9b      	subs	r3, r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	1eea      	subs	r2, r5, #3
 8008292:	4296      	cmp	r6, r2
 8008294:	bf38      	it	cc
 8008296:	2300      	movcc	r3, #0
 8008298:	4423      	add	r3, r4
 800829a:	e015      	b.n	80082c8 <rshift+0x68>
 800829c:	46a1      	mov	r9, r4
 800829e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80082a2:	f1c1 0820 	rsb	r8, r1, #32
 80082a6:	40cf      	lsrs	r7, r1
 80082a8:	f105 0e04 	add.w	lr, r5, #4
 80082ac:	4576      	cmp	r6, lr
 80082ae:	46f4      	mov	ip, lr
 80082b0:	d816      	bhi.n	80082e0 <rshift+0x80>
 80082b2:	1a9b      	subs	r3, r3, r2
 80082b4:	009a      	lsls	r2, r3, #2
 80082b6:	3a04      	subs	r2, #4
 80082b8:	3501      	adds	r5, #1
 80082ba:	42ae      	cmp	r6, r5
 80082bc:	bf38      	it	cc
 80082be:	2200      	movcc	r2, #0
 80082c0:	18a3      	adds	r3, r4, r2
 80082c2:	50a7      	str	r7, [r4, r2]
 80082c4:	b107      	cbz	r7, 80082c8 <rshift+0x68>
 80082c6:	3304      	adds	r3, #4
 80082c8:	42a3      	cmp	r3, r4
 80082ca:	eba3 0204 	sub.w	r2, r3, r4
 80082ce:	bf08      	it	eq
 80082d0:	2300      	moveq	r3, #0
 80082d2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80082d6:	6102      	str	r2, [r0, #16]
 80082d8:	bf08      	it	eq
 80082da:	6143      	streq	r3, [r0, #20]
 80082dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082e0:	f8dc c000 	ldr.w	ip, [ip]
 80082e4:	fa0c fc08 	lsl.w	ip, ip, r8
 80082e8:	ea4c 0707 	orr.w	r7, ip, r7
 80082ec:	f849 7b04 	str.w	r7, [r9], #4
 80082f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082f4:	40cf      	lsrs	r7, r1
 80082f6:	e7d9      	b.n	80082ac <rshift+0x4c>
 80082f8:	f851 cb04 	ldr.w	ip, [r1], #4
 80082fc:	f847 cf04 	str.w	ip, [r7, #4]!
 8008300:	e7c2      	b.n	8008288 <rshift+0x28>
 8008302:	4623      	mov	r3, r4
 8008304:	e7e0      	b.n	80082c8 <rshift+0x68>

08008306 <__hexdig_fun>:
 8008306:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800830a:	2b09      	cmp	r3, #9
 800830c:	d802      	bhi.n	8008314 <__hexdig_fun+0xe>
 800830e:	3820      	subs	r0, #32
 8008310:	b2c0      	uxtb	r0, r0
 8008312:	4770      	bx	lr
 8008314:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008318:	2b05      	cmp	r3, #5
 800831a:	d801      	bhi.n	8008320 <__hexdig_fun+0x1a>
 800831c:	3847      	subs	r0, #71	; 0x47
 800831e:	e7f7      	b.n	8008310 <__hexdig_fun+0xa>
 8008320:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008324:	2b05      	cmp	r3, #5
 8008326:	d801      	bhi.n	800832c <__hexdig_fun+0x26>
 8008328:	3827      	subs	r0, #39	; 0x27
 800832a:	e7f1      	b.n	8008310 <__hexdig_fun+0xa>
 800832c:	2000      	movs	r0, #0
 800832e:	4770      	bx	lr

08008330 <__gethex>:
 8008330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	b08b      	sub	sp, #44	; 0x2c
 8008336:	9306      	str	r3, [sp, #24]
 8008338:	4bb9      	ldr	r3, [pc, #740]	; (8008620 <__gethex+0x2f0>)
 800833a:	9002      	str	r0, [sp, #8]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	468b      	mov	fp, r1
 8008340:	4618      	mov	r0, r3
 8008342:	4690      	mov	r8, r2
 8008344:	9303      	str	r3, [sp, #12]
 8008346:	f7f7 ff73 	bl	8000230 <strlen>
 800834a:	4682      	mov	sl, r0
 800834c:	9b03      	ldr	r3, [sp, #12]
 800834e:	f8db 2000 	ldr.w	r2, [fp]
 8008352:	4403      	add	r3, r0
 8008354:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008358:	9307      	str	r3, [sp, #28]
 800835a:	1c93      	adds	r3, r2, #2
 800835c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008360:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008364:	32fe      	adds	r2, #254	; 0xfe
 8008366:	18d1      	adds	r1, r2, r3
 8008368:	461f      	mov	r7, r3
 800836a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800836e:	9101      	str	r1, [sp, #4]
 8008370:	2830      	cmp	r0, #48	; 0x30
 8008372:	d0f8      	beq.n	8008366 <__gethex+0x36>
 8008374:	f7ff ffc7 	bl	8008306 <__hexdig_fun>
 8008378:	4604      	mov	r4, r0
 800837a:	2800      	cmp	r0, #0
 800837c:	d13a      	bne.n	80083f4 <__gethex+0xc4>
 800837e:	4652      	mov	r2, sl
 8008380:	4638      	mov	r0, r7
 8008382:	9903      	ldr	r1, [sp, #12]
 8008384:	f001 fcbc 	bl	8009d00 <strncmp>
 8008388:	4605      	mov	r5, r0
 800838a:	2800      	cmp	r0, #0
 800838c:	d166      	bne.n	800845c <__gethex+0x12c>
 800838e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008392:	eb07 060a 	add.w	r6, r7, sl
 8008396:	f7ff ffb6 	bl	8008306 <__hexdig_fun>
 800839a:	2800      	cmp	r0, #0
 800839c:	d060      	beq.n	8008460 <__gethex+0x130>
 800839e:	4633      	mov	r3, r6
 80083a0:	7818      	ldrb	r0, [r3, #0]
 80083a2:	461f      	mov	r7, r3
 80083a4:	2830      	cmp	r0, #48	; 0x30
 80083a6:	f103 0301 	add.w	r3, r3, #1
 80083aa:	d0f9      	beq.n	80083a0 <__gethex+0x70>
 80083ac:	f7ff ffab 	bl	8008306 <__hexdig_fun>
 80083b0:	2301      	movs	r3, #1
 80083b2:	fab0 f480 	clz	r4, r0
 80083b6:	4635      	mov	r5, r6
 80083b8:	0964      	lsrs	r4, r4, #5
 80083ba:	9301      	str	r3, [sp, #4]
 80083bc:	463a      	mov	r2, r7
 80083be:	4616      	mov	r6, r2
 80083c0:	7830      	ldrb	r0, [r6, #0]
 80083c2:	3201      	adds	r2, #1
 80083c4:	f7ff ff9f 	bl	8008306 <__hexdig_fun>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	d1f8      	bne.n	80083be <__gethex+0x8e>
 80083cc:	4652      	mov	r2, sl
 80083ce:	4630      	mov	r0, r6
 80083d0:	9903      	ldr	r1, [sp, #12]
 80083d2:	f001 fc95 	bl	8009d00 <strncmp>
 80083d6:	b980      	cbnz	r0, 80083fa <__gethex+0xca>
 80083d8:	b94d      	cbnz	r5, 80083ee <__gethex+0xbe>
 80083da:	eb06 050a 	add.w	r5, r6, sl
 80083de:	462a      	mov	r2, r5
 80083e0:	4616      	mov	r6, r2
 80083e2:	7830      	ldrb	r0, [r6, #0]
 80083e4:	3201      	adds	r2, #1
 80083e6:	f7ff ff8e 	bl	8008306 <__hexdig_fun>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d1f8      	bne.n	80083e0 <__gethex+0xb0>
 80083ee:	1bad      	subs	r5, r5, r6
 80083f0:	00ad      	lsls	r5, r5, #2
 80083f2:	e004      	b.n	80083fe <__gethex+0xce>
 80083f4:	2400      	movs	r4, #0
 80083f6:	4625      	mov	r5, r4
 80083f8:	e7e0      	b.n	80083bc <__gethex+0x8c>
 80083fa:	2d00      	cmp	r5, #0
 80083fc:	d1f7      	bne.n	80083ee <__gethex+0xbe>
 80083fe:	7833      	ldrb	r3, [r6, #0]
 8008400:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008404:	2b50      	cmp	r3, #80	; 0x50
 8008406:	d139      	bne.n	800847c <__gethex+0x14c>
 8008408:	7873      	ldrb	r3, [r6, #1]
 800840a:	2b2b      	cmp	r3, #43	; 0x2b
 800840c:	d02a      	beq.n	8008464 <__gethex+0x134>
 800840e:	2b2d      	cmp	r3, #45	; 0x2d
 8008410:	d02c      	beq.n	800846c <__gethex+0x13c>
 8008412:	f04f 0900 	mov.w	r9, #0
 8008416:	1c71      	adds	r1, r6, #1
 8008418:	7808      	ldrb	r0, [r1, #0]
 800841a:	f7ff ff74 	bl	8008306 <__hexdig_fun>
 800841e:	1e43      	subs	r3, r0, #1
 8008420:	b2db      	uxtb	r3, r3
 8008422:	2b18      	cmp	r3, #24
 8008424:	d82a      	bhi.n	800847c <__gethex+0x14c>
 8008426:	f1a0 0210 	sub.w	r2, r0, #16
 800842a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800842e:	f7ff ff6a 	bl	8008306 <__hexdig_fun>
 8008432:	1e43      	subs	r3, r0, #1
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b18      	cmp	r3, #24
 8008438:	d91b      	bls.n	8008472 <__gethex+0x142>
 800843a:	f1b9 0f00 	cmp.w	r9, #0
 800843e:	d000      	beq.n	8008442 <__gethex+0x112>
 8008440:	4252      	negs	r2, r2
 8008442:	4415      	add	r5, r2
 8008444:	f8cb 1000 	str.w	r1, [fp]
 8008448:	b1d4      	cbz	r4, 8008480 <__gethex+0x150>
 800844a:	9b01      	ldr	r3, [sp, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	bf14      	ite	ne
 8008450:	2700      	movne	r7, #0
 8008452:	2706      	moveq	r7, #6
 8008454:	4638      	mov	r0, r7
 8008456:	b00b      	add	sp, #44	; 0x2c
 8008458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845c:	463e      	mov	r6, r7
 800845e:	4625      	mov	r5, r4
 8008460:	2401      	movs	r4, #1
 8008462:	e7cc      	b.n	80083fe <__gethex+0xce>
 8008464:	f04f 0900 	mov.w	r9, #0
 8008468:	1cb1      	adds	r1, r6, #2
 800846a:	e7d5      	b.n	8008418 <__gethex+0xe8>
 800846c:	f04f 0901 	mov.w	r9, #1
 8008470:	e7fa      	b.n	8008468 <__gethex+0x138>
 8008472:	230a      	movs	r3, #10
 8008474:	fb03 0202 	mla	r2, r3, r2, r0
 8008478:	3a10      	subs	r2, #16
 800847a:	e7d6      	b.n	800842a <__gethex+0xfa>
 800847c:	4631      	mov	r1, r6
 800847e:	e7e1      	b.n	8008444 <__gethex+0x114>
 8008480:	4621      	mov	r1, r4
 8008482:	1bf3      	subs	r3, r6, r7
 8008484:	3b01      	subs	r3, #1
 8008486:	2b07      	cmp	r3, #7
 8008488:	dc0a      	bgt.n	80084a0 <__gethex+0x170>
 800848a:	9802      	ldr	r0, [sp, #8]
 800848c:	f000 fa68 	bl	8008960 <_Balloc>
 8008490:	4604      	mov	r4, r0
 8008492:	b940      	cbnz	r0, 80084a6 <__gethex+0x176>
 8008494:	4602      	mov	r2, r0
 8008496:	21de      	movs	r1, #222	; 0xde
 8008498:	4b62      	ldr	r3, [pc, #392]	; (8008624 <__gethex+0x2f4>)
 800849a:	4863      	ldr	r0, [pc, #396]	; (8008628 <__gethex+0x2f8>)
 800849c:	f7ff feb0 	bl	8008200 <__assert_func>
 80084a0:	3101      	adds	r1, #1
 80084a2:	105b      	asrs	r3, r3, #1
 80084a4:	e7ef      	b.n	8008486 <__gethex+0x156>
 80084a6:	f04f 0b00 	mov.w	fp, #0
 80084aa:	f100 0914 	add.w	r9, r0, #20
 80084ae:	f1ca 0301 	rsb	r3, sl, #1
 80084b2:	f8cd 9010 	str.w	r9, [sp, #16]
 80084b6:	f8cd b004 	str.w	fp, [sp, #4]
 80084ba:	9308      	str	r3, [sp, #32]
 80084bc:	42b7      	cmp	r7, r6
 80084be:	d33f      	bcc.n	8008540 <__gethex+0x210>
 80084c0:	9f04      	ldr	r7, [sp, #16]
 80084c2:	9b01      	ldr	r3, [sp, #4]
 80084c4:	f847 3b04 	str.w	r3, [r7], #4
 80084c8:	eba7 0709 	sub.w	r7, r7, r9
 80084cc:	10bf      	asrs	r7, r7, #2
 80084ce:	6127      	str	r7, [r4, #16]
 80084d0:	4618      	mov	r0, r3
 80084d2:	f000 fb3b 	bl	8008b4c <__hi0bits>
 80084d6:	017f      	lsls	r7, r7, #5
 80084d8:	f8d8 6000 	ldr.w	r6, [r8]
 80084dc:	1a3f      	subs	r7, r7, r0
 80084de:	42b7      	cmp	r7, r6
 80084e0:	dd62      	ble.n	80085a8 <__gethex+0x278>
 80084e2:	1bbf      	subs	r7, r7, r6
 80084e4:	4639      	mov	r1, r7
 80084e6:	4620      	mov	r0, r4
 80084e8:	f000 fed1 	bl	800928e <__any_on>
 80084ec:	4682      	mov	sl, r0
 80084ee:	b1a8      	cbz	r0, 800851c <__gethex+0x1ec>
 80084f0:	f04f 0a01 	mov.w	sl, #1
 80084f4:	1e7b      	subs	r3, r7, #1
 80084f6:	1159      	asrs	r1, r3, #5
 80084f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80084fc:	f003 021f 	and.w	r2, r3, #31
 8008500:	fa0a f202 	lsl.w	r2, sl, r2
 8008504:	420a      	tst	r2, r1
 8008506:	d009      	beq.n	800851c <__gethex+0x1ec>
 8008508:	4553      	cmp	r3, sl
 800850a:	dd05      	ble.n	8008518 <__gethex+0x1e8>
 800850c:	4620      	mov	r0, r4
 800850e:	1eb9      	subs	r1, r7, #2
 8008510:	f000 febd 	bl	800928e <__any_on>
 8008514:	2800      	cmp	r0, #0
 8008516:	d144      	bne.n	80085a2 <__gethex+0x272>
 8008518:	f04f 0a02 	mov.w	sl, #2
 800851c:	4639      	mov	r1, r7
 800851e:	4620      	mov	r0, r4
 8008520:	f7ff fe9e 	bl	8008260 <rshift>
 8008524:	443d      	add	r5, r7
 8008526:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800852a:	42ab      	cmp	r3, r5
 800852c:	da4a      	bge.n	80085c4 <__gethex+0x294>
 800852e:	4621      	mov	r1, r4
 8008530:	9802      	ldr	r0, [sp, #8]
 8008532:	f000 fa55 	bl	80089e0 <_Bfree>
 8008536:	2300      	movs	r3, #0
 8008538:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800853a:	27a3      	movs	r7, #163	; 0xa3
 800853c:	6013      	str	r3, [r2, #0]
 800853e:	e789      	b.n	8008454 <__gethex+0x124>
 8008540:	1e73      	subs	r3, r6, #1
 8008542:	9a07      	ldr	r2, [sp, #28]
 8008544:	9305      	str	r3, [sp, #20]
 8008546:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800854a:	4293      	cmp	r3, r2
 800854c:	d019      	beq.n	8008582 <__gethex+0x252>
 800854e:	f1bb 0f20 	cmp.w	fp, #32
 8008552:	d107      	bne.n	8008564 <__gethex+0x234>
 8008554:	9b04      	ldr	r3, [sp, #16]
 8008556:	9a01      	ldr	r2, [sp, #4]
 8008558:	f843 2b04 	str.w	r2, [r3], #4
 800855c:	9304      	str	r3, [sp, #16]
 800855e:	2300      	movs	r3, #0
 8008560:	469b      	mov	fp, r3
 8008562:	9301      	str	r3, [sp, #4]
 8008564:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008568:	f7ff fecd 	bl	8008306 <__hexdig_fun>
 800856c:	9b01      	ldr	r3, [sp, #4]
 800856e:	f000 000f 	and.w	r0, r0, #15
 8008572:	fa00 f00b 	lsl.w	r0, r0, fp
 8008576:	4303      	orrs	r3, r0
 8008578:	9301      	str	r3, [sp, #4]
 800857a:	f10b 0b04 	add.w	fp, fp, #4
 800857e:	9b05      	ldr	r3, [sp, #20]
 8008580:	e00d      	b.n	800859e <__gethex+0x26e>
 8008582:	9b05      	ldr	r3, [sp, #20]
 8008584:	9a08      	ldr	r2, [sp, #32]
 8008586:	4413      	add	r3, r2
 8008588:	42bb      	cmp	r3, r7
 800858a:	d3e0      	bcc.n	800854e <__gethex+0x21e>
 800858c:	4618      	mov	r0, r3
 800858e:	4652      	mov	r2, sl
 8008590:	9903      	ldr	r1, [sp, #12]
 8008592:	9309      	str	r3, [sp, #36]	; 0x24
 8008594:	f001 fbb4 	bl	8009d00 <strncmp>
 8008598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800859a:	2800      	cmp	r0, #0
 800859c:	d1d7      	bne.n	800854e <__gethex+0x21e>
 800859e:	461e      	mov	r6, r3
 80085a0:	e78c      	b.n	80084bc <__gethex+0x18c>
 80085a2:	f04f 0a03 	mov.w	sl, #3
 80085a6:	e7b9      	b.n	800851c <__gethex+0x1ec>
 80085a8:	da09      	bge.n	80085be <__gethex+0x28e>
 80085aa:	1bf7      	subs	r7, r6, r7
 80085ac:	4621      	mov	r1, r4
 80085ae:	463a      	mov	r2, r7
 80085b0:	9802      	ldr	r0, [sp, #8]
 80085b2:	f000 fc2d 	bl	8008e10 <__lshift>
 80085b6:	4604      	mov	r4, r0
 80085b8:	1bed      	subs	r5, r5, r7
 80085ba:	f100 0914 	add.w	r9, r0, #20
 80085be:	f04f 0a00 	mov.w	sl, #0
 80085c2:	e7b0      	b.n	8008526 <__gethex+0x1f6>
 80085c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80085c8:	42a8      	cmp	r0, r5
 80085ca:	dd71      	ble.n	80086b0 <__gethex+0x380>
 80085cc:	1b45      	subs	r5, r0, r5
 80085ce:	42ae      	cmp	r6, r5
 80085d0:	dc34      	bgt.n	800863c <__gethex+0x30c>
 80085d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d028      	beq.n	800862c <__gethex+0x2fc>
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d02a      	beq.n	8008634 <__gethex+0x304>
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d115      	bne.n	800860e <__gethex+0x2de>
 80085e2:	42ae      	cmp	r6, r5
 80085e4:	d113      	bne.n	800860e <__gethex+0x2de>
 80085e6:	2e01      	cmp	r6, #1
 80085e8:	d10b      	bne.n	8008602 <__gethex+0x2d2>
 80085ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80085ee:	9a06      	ldr	r2, [sp, #24]
 80085f0:	2762      	movs	r7, #98	; 0x62
 80085f2:	6013      	str	r3, [r2, #0]
 80085f4:	2301      	movs	r3, #1
 80085f6:	6123      	str	r3, [r4, #16]
 80085f8:	f8c9 3000 	str.w	r3, [r9]
 80085fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085fe:	601c      	str	r4, [r3, #0]
 8008600:	e728      	b.n	8008454 <__gethex+0x124>
 8008602:	4620      	mov	r0, r4
 8008604:	1e71      	subs	r1, r6, #1
 8008606:	f000 fe42 	bl	800928e <__any_on>
 800860a:	2800      	cmp	r0, #0
 800860c:	d1ed      	bne.n	80085ea <__gethex+0x2ba>
 800860e:	4621      	mov	r1, r4
 8008610:	9802      	ldr	r0, [sp, #8]
 8008612:	f000 f9e5 	bl	80089e0 <_Bfree>
 8008616:	2300      	movs	r3, #0
 8008618:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800861a:	2750      	movs	r7, #80	; 0x50
 800861c:	6013      	str	r3, [r2, #0]
 800861e:	e719      	b.n	8008454 <__gethex+0x124>
 8008620:	0800aa68 	.word	0x0800aa68
 8008624:	0800a9ed 	.word	0x0800a9ed
 8008628:	0800a9fe 	.word	0x0800a9fe
 800862c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1ed      	bne.n	800860e <__gethex+0x2de>
 8008632:	e7da      	b.n	80085ea <__gethex+0x2ba>
 8008634:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1d7      	bne.n	80085ea <__gethex+0x2ba>
 800863a:	e7e8      	b.n	800860e <__gethex+0x2de>
 800863c:	1e6f      	subs	r7, r5, #1
 800863e:	f1ba 0f00 	cmp.w	sl, #0
 8008642:	d132      	bne.n	80086aa <__gethex+0x37a>
 8008644:	b127      	cbz	r7, 8008650 <__gethex+0x320>
 8008646:	4639      	mov	r1, r7
 8008648:	4620      	mov	r0, r4
 800864a:	f000 fe20 	bl	800928e <__any_on>
 800864e:	4682      	mov	sl, r0
 8008650:	2101      	movs	r1, #1
 8008652:	117b      	asrs	r3, r7, #5
 8008654:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008658:	f007 071f 	and.w	r7, r7, #31
 800865c:	fa01 f707 	lsl.w	r7, r1, r7
 8008660:	421f      	tst	r7, r3
 8008662:	f04f 0702 	mov.w	r7, #2
 8008666:	4629      	mov	r1, r5
 8008668:	4620      	mov	r0, r4
 800866a:	bf18      	it	ne
 800866c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008670:	1b76      	subs	r6, r6, r5
 8008672:	f7ff fdf5 	bl	8008260 <rshift>
 8008676:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800867a:	f1ba 0f00 	cmp.w	sl, #0
 800867e:	d048      	beq.n	8008712 <__gethex+0x3e2>
 8008680:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008684:	2b02      	cmp	r3, #2
 8008686:	d015      	beq.n	80086b4 <__gethex+0x384>
 8008688:	2b03      	cmp	r3, #3
 800868a:	d017      	beq.n	80086bc <__gethex+0x38c>
 800868c:	2b01      	cmp	r3, #1
 800868e:	d109      	bne.n	80086a4 <__gethex+0x374>
 8008690:	f01a 0f02 	tst.w	sl, #2
 8008694:	d006      	beq.n	80086a4 <__gethex+0x374>
 8008696:	f8d9 0000 	ldr.w	r0, [r9]
 800869a:	ea4a 0a00 	orr.w	sl, sl, r0
 800869e:	f01a 0f01 	tst.w	sl, #1
 80086a2:	d10e      	bne.n	80086c2 <__gethex+0x392>
 80086a4:	f047 0710 	orr.w	r7, r7, #16
 80086a8:	e033      	b.n	8008712 <__gethex+0x3e2>
 80086aa:	f04f 0a01 	mov.w	sl, #1
 80086ae:	e7cf      	b.n	8008650 <__gethex+0x320>
 80086b0:	2701      	movs	r7, #1
 80086b2:	e7e2      	b.n	800867a <__gethex+0x34a>
 80086b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086b6:	f1c3 0301 	rsb	r3, r3, #1
 80086ba:	9315      	str	r3, [sp, #84]	; 0x54
 80086bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d0f0      	beq.n	80086a4 <__gethex+0x374>
 80086c2:	f04f 0c00 	mov.w	ip, #0
 80086c6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80086ca:	f104 0314 	add.w	r3, r4, #20
 80086ce:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80086d2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80086d6:	4618      	mov	r0, r3
 80086d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80086e0:	d01c      	beq.n	800871c <__gethex+0x3ec>
 80086e2:	3201      	adds	r2, #1
 80086e4:	6002      	str	r2, [r0, #0]
 80086e6:	2f02      	cmp	r7, #2
 80086e8:	f104 0314 	add.w	r3, r4, #20
 80086ec:	d13d      	bne.n	800876a <__gethex+0x43a>
 80086ee:	f8d8 2000 	ldr.w	r2, [r8]
 80086f2:	3a01      	subs	r2, #1
 80086f4:	42b2      	cmp	r2, r6
 80086f6:	d10a      	bne.n	800870e <__gethex+0x3de>
 80086f8:	2201      	movs	r2, #1
 80086fa:	1171      	asrs	r1, r6, #5
 80086fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008700:	f006 061f 	and.w	r6, r6, #31
 8008704:	fa02 f606 	lsl.w	r6, r2, r6
 8008708:	421e      	tst	r6, r3
 800870a:	bf18      	it	ne
 800870c:	4617      	movne	r7, r2
 800870e:	f047 0720 	orr.w	r7, r7, #32
 8008712:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008714:	601c      	str	r4, [r3, #0]
 8008716:	9b06      	ldr	r3, [sp, #24]
 8008718:	601d      	str	r5, [r3, #0]
 800871a:	e69b      	b.n	8008454 <__gethex+0x124>
 800871c:	4299      	cmp	r1, r3
 800871e:	f843 cc04 	str.w	ip, [r3, #-4]
 8008722:	d8d8      	bhi.n	80086d6 <__gethex+0x3a6>
 8008724:	68a3      	ldr	r3, [r4, #8]
 8008726:	459b      	cmp	fp, r3
 8008728:	db17      	blt.n	800875a <__gethex+0x42a>
 800872a:	6861      	ldr	r1, [r4, #4]
 800872c:	9802      	ldr	r0, [sp, #8]
 800872e:	3101      	adds	r1, #1
 8008730:	f000 f916 	bl	8008960 <_Balloc>
 8008734:	4681      	mov	r9, r0
 8008736:	b918      	cbnz	r0, 8008740 <__gethex+0x410>
 8008738:	4602      	mov	r2, r0
 800873a:	2184      	movs	r1, #132	; 0x84
 800873c:	4b19      	ldr	r3, [pc, #100]	; (80087a4 <__gethex+0x474>)
 800873e:	e6ac      	b.n	800849a <__gethex+0x16a>
 8008740:	6922      	ldr	r2, [r4, #16]
 8008742:	f104 010c 	add.w	r1, r4, #12
 8008746:	3202      	adds	r2, #2
 8008748:	0092      	lsls	r2, r2, #2
 800874a:	300c      	adds	r0, #12
 800874c:	f7fe fdb0 	bl	80072b0 <memcpy>
 8008750:	4621      	mov	r1, r4
 8008752:	9802      	ldr	r0, [sp, #8]
 8008754:	f000 f944 	bl	80089e0 <_Bfree>
 8008758:	464c      	mov	r4, r9
 800875a:	6923      	ldr	r3, [r4, #16]
 800875c:	1c5a      	adds	r2, r3, #1
 800875e:	6122      	str	r2, [r4, #16]
 8008760:	2201      	movs	r2, #1
 8008762:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008766:	615a      	str	r2, [r3, #20]
 8008768:	e7bd      	b.n	80086e6 <__gethex+0x3b6>
 800876a:	6922      	ldr	r2, [r4, #16]
 800876c:	455a      	cmp	r2, fp
 800876e:	dd0b      	ble.n	8008788 <__gethex+0x458>
 8008770:	2101      	movs	r1, #1
 8008772:	4620      	mov	r0, r4
 8008774:	f7ff fd74 	bl	8008260 <rshift>
 8008778:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800877c:	3501      	adds	r5, #1
 800877e:	42ab      	cmp	r3, r5
 8008780:	f6ff aed5 	blt.w	800852e <__gethex+0x1fe>
 8008784:	2701      	movs	r7, #1
 8008786:	e7c2      	b.n	800870e <__gethex+0x3de>
 8008788:	f016 061f 	ands.w	r6, r6, #31
 800878c:	d0fa      	beq.n	8008784 <__gethex+0x454>
 800878e:	449a      	add	sl, r3
 8008790:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008794:	f000 f9da 	bl	8008b4c <__hi0bits>
 8008798:	f1c6 0620 	rsb	r6, r6, #32
 800879c:	42b0      	cmp	r0, r6
 800879e:	dbe7      	blt.n	8008770 <__gethex+0x440>
 80087a0:	e7f0      	b.n	8008784 <__gethex+0x454>
 80087a2:	bf00      	nop
 80087a4:	0800a9ed 	.word	0x0800a9ed

080087a8 <L_shift>:
 80087a8:	f1c2 0208 	rsb	r2, r2, #8
 80087ac:	0092      	lsls	r2, r2, #2
 80087ae:	b570      	push	{r4, r5, r6, lr}
 80087b0:	f1c2 0620 	rsb	r6, r2, #32
 80087b4:	6843      	ldr	r3, [r0, #4]
 80087b6:	6804      	ldr	r4, [r0, #0]
 80087b8:	fa03 f506 	lsl.w	r5, r3, r6
 80087bc:	432c      	orrs	r4, r5
 80087be:	40d3      	lsrs	r3, r2
 80087c0:	6004      	str	r4, [r0, #0]
 80087c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80087c6:	4288      	cmp	r0, r1
 80087c8:	d3f4      	bcc.n	80087b4 <L_shift+0xc>
 80087ca:	bd70      	pop	{r4, r5, r6, pc}

080087cc <__match>:
 80087cc:	b530      	push	{r4, r5, lr}
 80087ce:	6803      	ldr	r3, [r0, #0]
 80087d0:	3301      	adds	r3, #1
 80087d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087d6:	b914      	cbnz	r4, 80087de <__match+0x12>
 80087d8:	6003      	str	r3, [r0, #0]
 80087da:	2001      	movs	r0, #1
 80087dc:	bd30      	pop	{r4, r5, pc}
 80087de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80087e6:	2d19      	cmp	r5, #25
 80087e8:	bf98      	it	ls
 80087ea:	3220      	addls	r2, #32
 80087ec:	42a2      	cmp	r2, r4
 80087ee:	d0f0      	beq.n	80087d2 <__match+0x6>
 80087f0:	2000      	movs	r0, #0
 80087f2:	e7f3      	b.n	80087dc <__match+0x10>

080087f4 <__hexnan>:
 80087f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f8:	2500      	movs	r5, #0
 80087fa:	680b      	ldr	r3, [r1, #0]
 80087fc:	4682      	mov	sl, r0
 80087fe:	115e      	asrs	r6, r3, #5
 8008800:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008804:	f013 031f 	ands.w	r3, r3, #31
 8008808:	bf18      	it	ne
 800880a:	3604      	addne	r6, #4
 800880c:	1f37      	subs	r7, r6, #4
 800880e:	4690      	mov	r8, r2
 8008810:	46b9      	mov	r9, r7
 8008812:	463c      	mov	r4, r7
 8008814:	46ab      	mov	fp, r5
 8008816:	b087      	sub	sp, #28
 8008818:	6801      	ldr	r1, [r0, #0]
 800881a:	9301      	str	r3, [sp, #4]
 800881c:	f846 5c04 	str.w	r5, [r6, #-4]
 8008820:	9502      	str	r5, [sp, #8]
 8008822:	784a      	ldrb	r2, [r1, #1]
 8008824:	1c4b      	adds	r3, r1, #1
 8008826:	9303      	str	r3, [sp, #12]
 8008828:	b342      	cbz	r2, 800887c <__hexnan+0x88>
 800882a:	4610      	mov	r0, r2
 800882c:	9105      	str	r1, [sp, #20]
 800882e:	9204      	str	r2, [sp, #16]
 8008830:	f7ff fd69 	bl	8008306 <__hexdig_fun>
 8008834:	2800      	cmp	r0, #0
 8008836:	d14f      	bne.n	80088d8 <__hexnan+0xe4>
 8008838:	9a04      	ldr	r2, [sp, #16]
 800883a:	9905      	ldr	r1, [sp, #20]
 800883c:	2a20      	cmp	r2, #32
 800883e:	d818      	bhi.n	8008872 <__hexnan+0x7e>
 8008840:	9b02      	ldr	r3, [sp, #8]
 8008842:	459b      	cmp	fp, r3
 8008844:	dd13      	ble.n	800886e <__hexnan+0x7a>
 8008846:	454c      	cmp	r4, r9
 8008848:	d206      	bcs.n	8008858 <__hexnan+0x64>
 800884a:	2d07      	cmp	r5, #7
 800884c:	dc04      	bgt.n	8008858 <__hexnan+0x64>
 800884e:	462a      	mov	r2, r5
 8008850:	4649      	mov	r1, r9
 8008852:	4620      	mov	r0, r4
 8008854:	f7ff ffa8 	bl	80087a8 <L_shift>
 8008858:	4544      	cmp	r4, r8
 800885a:	d950      	bls.n	80088fe <__hexnan+0x10a>
 800885c:	2300      	movs	r3, #0
 800885e:	f1a4 0904 	sub.w	r9, r4, #4
 8008862:	f844 3c04 	str.w	r3, [r4, #-4]
 8008866:	461d      	mov	r5, r3
 8008868:	464c      	mov	r4, r9
 800886a:	f8cd b008 	str.w	fp, [sp, #8]
 800886e:	9903      	ldr	r1, [sp, #12]
 8008870:	e7d7      	b.n	8008822 <__hexnan+0x2e>
 8008872:	2a29      	cmp	r2, #41	; 0x29
 8008874:	d156      	bne.n	8008924 <__hexnan+0x130>
 8008876:	3102      	adds	r1, #2
 8008878:	f8ca 1000 	str.w	r1, [sl]
 800887c:	f1bb 0f00 	cmp.w	fp, #0
 8008880:	d050      	beq.n	8008924 <__hexnan+0x130>
 8008882:	454c      	cmp	r4, r9
 8008884:	d206      	bcs.n	8008894 <__hexnan+0xa0>
 8008886:	2d07      	cmp	r5, #7
 8008888:	dc04      	bgt.n	8008894 <__hexnan+0xa0>
 800888a:	462a      	mov	r2, r5
 800888c:	4649      	mov	r1, r9
 800888e:	4620      	mov	r0, r4
 8008890:	f7ff ff8a 	bl	80087a8 <L_shift>
 8008894:	4544      	cmp	r4, r8
 8008896:	d934      	bls.n	8008902 <__hexnan+0x10e>
 8008898:	4623      	mov	r3, r4
 800889a:	f1a8 0204 	sub.w	r2, r8, #4
 800889e:	f853 1b04 	ldr.w	r1, [r3], #4
 80088a2:	429f      	cmp	r7, r3
 80088a4:	f842 1f04 	str.w	r1, [r2, #4]!
 80088a8:	d2f9      	bcs.n	800889e <__hexnan+0xaa>
 80088aa:	1b3b      	subs	r3, r7, r4
 80088ac:	f023 0303 	bic.w	r3, r3, #3
 80088b0:	3304      	adds	r3, #4
 80088b2:	3401      	adds	r4, #1
 80088b4:	3e03      	subs	r6, #3
 80088b6:	42b4      	cmp	r4, r6
 80088b8:	bf88      	it	hi
 80088ba:	2304      	movhi	r3, #4
 80088bc:	2200      	movs	r2, #0
 80088be:	4443      	add	r3, r8
 80088c0:	f843 2b04 	str.w	r2, [r3], #4
 80088c4:	429f      	cmp	r7, r3
 80088c6:	d2fb      	bcs.n	80088c0 <__hexnan+0xcc>
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	b91b      	cbnz	r3, 80088d4 <__hexnan+0xe0>
 80088cc:	4547      	cmp	r7, r8
 80088ce:	d127      	bne.n	8008920 <__hexnan+0x12c>
 80088d0:	2301      	movs	r3, #1
 80088d2:	603b      	str	r3, [r7, #0]
 80088d4:	2005      	movs	r0, #5
 80088d6:	e026      	b.n	8008926 <__hexnan+0x132>
 80088d8:	3501      	adds	r5, #1
 80088da:	2d08      	cmp	r5, #8
 80088dc:	f10b 0b01 	add.w	fp, fp, #1
 80088e0:	dd06      	ble.n	80088f0 <__hexnan+0xfc>
 80088e2:	4544      	cmp	r4, r8
 80088e4:	d9c3      	bls.n	800886e <__hexnan+0x7a>
 80088e6:	2300      	movs	r3, #0
 80088e8:	2501      	movs	r5, #1
 80088ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80088ee:	3c04      	subs	r4, #4
 80088f0:	6822      	ldr	r2, [r4, #0]
 80088f2:	f000 000f 	and.w	r0, r0, #15
 80088f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80088fa:	6022      	str	r2, [r4, #0]
 80088fc:	e7b7      	b.n	800886e <__hexnan+0x7a>
 80088fe:	2508      	movs	r5, #8
 8008900:	e7b5      	b.n	800886e <__hexnan+0x7a>
 8008902:	9b01      	ldr	r3, [sp, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d0df      	beq.n	80088c8 <__hexnan+0xd4>
 8008908:	f04f 32ff 	mov.w	r2, #4294967295
 800890c:	f1c3 0320 	rsb	r3, r3, #32
 8008910:	fa22 f303 	lsr.w	r3, r2, r3
 8008914:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008918:	401a      	ands	r2, r3
 800891a:	f846 2c04 	str.w	r2, [r6, #-4]
 800891e:	e7d3      	b.n	80088c8 <__hexnan+0xd4>
 8008920:	3f04      	subs	r7, #4
 8008922:	e7d1      	b.n	80088c8 <__hexnan+0xd4>
 8008924:	2004      	movs	r0, #4
 8008926:	b007      	add	sp, #28
 8008928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800892c <malloc>:
 800892c:	4b02      	ldr	r3, [pc, #8]	; (8008938 <malloc+0xc>)
 800892e:	4601      	mov	r1, r0
 8008930:	6818      	ldr	r0, [r3, #0]
 8008932:	f000 bd27 	b.w	8009384 <_malloc_r>
 8008936:	bf00      	nop
 8008938:	20000020 	.word	0x20000020

0800893c <__ascii_mbtowc>:
 800893c:	b082      	sub	sp, #8
 800893e:	b901      	cbnz	r1, 8008942 <__ascii_mbtowc+0x6>
 8008940:	a901      	add	r1, sp, #4
 8008942:	b142      	cbz	r2, 8008956 <__ascii_mbtowc+0x1a>
 8008944:	b14b      	cbz	r3, 800895a <__ascii_mbtowc+0x1e>
 8008946:	7813      	ldrb	r3, [r2, #0]
 8008948:	600b      	str	r3, [r1, #0]
 800894a:	7812      	ldrb	r2, [r2, #0]
 800894c:	1e10      	subs	r0, r2, #0
 800894e:	bf18      	it	ne
 8008950:	2001      	movne	r0, #1
 8008952:	b002      	add	sp, #8
 8008954:	4770      	bx	lr
 8008956:	4610      	mov	r0, r2
 8008958:	e7fb      	b.n	8008952 <__ascii_mbtowc+0x16>
 800895a:	f06f 0001 	mvn.w	r0, #1
 800895e:	e7f8      	b.n	8008952 <__ascii_mbtowc+0x16>

08008960 <_Balloc>:
 8008960:	b570      	push	{r4, r5, r6, lr}
 8008962:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008964:	4604      	mov	r4, r0
 8008966:	460d      	mov	r5, r1
 8008968:	b976      	cbnz	r6, 8008988 <_Balloc+0x28>
 800896a:	2010      	movs	r0, #16
 800896c:	f7ff ffde 	bl	800892c <malloc>
 8008970:	4602      	mov	r2, r0
 8008972:	6260      	str	r0, [r4, #36]	; 0x24
 8008974:	b920      	cbnz	r0, 8008980 <_Balloc+0x20>
 8008976:	2166      	movs	r1, #102	; 0x66
 8008978:	4b17      	ldr	r3, [pc, #92]	; (80089d8 <_Balloc+0x78>)
 800897a:	4818      	ldr	r0, [pc, #96]	; (80089dc <_Balloc+0x7c>)
 800897c:	f7ff fc40 	bl	8008200 <__assert_func>
 8008980:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008984:	6006      	str	r6, [r0, #0]
 8008986:	60c6      	str	r6, [r0, #12]
 8008988:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800898a:	68f3      	ldr	r3, [r6, #12]
 800898c:	b183      	cbz	r3, 80089b0 <_Balloc+0x50>
 800898e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008996:	b9b8      	cbnz	r0, 80089c8 <_Balloc+0x68>
 8008998:	2101      	movs	r1, #1
 800899a:	fa01 f605 	lsl.w	r6, r1, r5
 800899e:	1d72      	adds	r2, r6, #5
 80089a0:	4620      	mov	r0, r4
 80089a2:	0092      	lsls	r2, r2, #2
 80089a4:	f000 fc94 	bl	80092d0 <_calloc_r>
 80089a8:	b160      	cbz	r0, 80089c4 <_Balloc+0x64>
 80089aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089ae:	e00e      	b.n	80089ce <_Balloc+0x6e>
 80089b0:	2221      	movs	r2, #33	; 0x21
 80089b2:	2104      	movs	r1, #4
 80089b4:	4620      	mov	r0, r4
 80089b6:	f000 fc8b 	bl	80092d0 <_calloc_r>
 80089ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089bc:	60f0      	str	r0, [r6, #12]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1e4      	bne.n	800898e <_Balloc+0x2e>
 80089c4:	2000      	movs	r0, #0
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	6802      	ldr	r2, [r0, #0]
 80089ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089ce:	2300      	movs	r3, #0
 80089d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089d4:	e7f7      	b.n	80089c6 <_Balloc+0x66>
 80089d6:	bf00      	nop
 80089d8:	0800a838 	.word	0x0800a838
 80089dc:	0800aa7c 	.word	0x0800aa7c

080089e0 <_Bfree>:
 80089e0:	b570      	push	{r4, r5, r6, lr}
 80089e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089e4:	4605      	mov	r5, r0
 80089e6:	460c      	mov	r4, r1
 80089e8:	b976      	cbnz	r6, 8008a08 <_Bfree+0x28>
 80089ea:	2010      	movs	r0, #16
 80089ec:	f7ff ff9e 	bl	800892c <malloc>
 80089f0:	4602      	mov	r2, r0
 80089f2:	6268      	str	r0, [r5, #36]	; 0x24
 80089f4:	b920      	cbnz	r0, 8008a00 <_Bfree+0x20>
 80089f6:	218a      	movs	r1, #138	; 0x8a
 80089f8:	4b08      	ldr	r3, [pc, #32]	; (8008a1c <_Bfree+0x3c>)
 80089fa:	4809      	ldr	r0, [pc, #36]	; (8008a20 <_Bfree+0x40>)
 80089fc:	f7ff fc00 	bl	8008200 <__assert_func>
 8008a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a04:	6006      	str	r6, [r0, #0]
 8008a06:	60c6      	str	r6, [r0, #12]
 8008a08:	b13c      	cbz	r4, 8008a1a <_Bfree+0x3a>
 8008a0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a0c:	6862      	ldr	r2, [r4, #4]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a14:	6021      	str	r1, [r4, #0]
 8008a16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a1a:	bd70      	pop	{r4, r5, r6, pc}
 8008a1c:	0800a838 	.word	0x0800a838
 8008a20:	0800aa7c 	.word	0x0800aa7c

08008a24 <__multadd>:
 8008a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a28:	4698      	mov	r8, r3
 8008a2a:	460c      	mov	r4, r1
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	690e      	ldr	r6, [r1, #16]
 8008a30:	4607      	mov	r7, r0
 8008a32:	f101 0014 	add.w	r0, r1, #20
 8008a36:	6805      	ldr	r5, [r0, #0]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	b2a9      	uxth	r1, r5
 8008a3c:	fb02 8101 	mla	r1, r2, r1, r8
 8008a40:	0c2d      	lsrs	r5, r5, #16
 8008a42:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008a46:	fb02 c505 	mla	r5, r2, r5, ip
 8008a4a:	b289      	uxth	r1, r1
 8008a4c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008a50:	429e      	cmp	r6, r3
 8008a52:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008a56:	f840 1b04 	str.w	r1, [r0], #4
 8008a5a:	dcec      	bgt.n	8008a36 <__multadd+0x12>
 8008a5c:	f1b8 0f00 	cmp.w	r8, #0
 8008a60:	d022      	beq.n	8008aa8 <__multadd+0x84>
 8008a62:	68a3      	ldr	r3, [r4, #8]
 8008a64:	42b3      	cmp	r3, r6
 8008a66:	dc19      	bgt.n	8008a9c <__multadd+0x78>
 8008a68:	6861      	ldr	r1, [r4, #4]
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	3101      	adds	r1, #1
 8008a6e:	f7ff ff77 	bl	8008960 <_Balloc>
 8008a72:	4605      	mov	r5, r0
 8008a74:	b928      	cbnz	r0, 8008a82 <__multadd+0x5e>
 8008a76:	4602      	mov	r2, r0
 8008a78:	21b5      	movs	r1, #181	; 0xb5
 8008a7a:	4b0d      	ldr	r3, [pc, #52]	; (8008ab0 <__multadd+0x8c>)
 8008a7c:	480d      	ldr	r0, [pc, #52]	; (8008ab4 <__multadd+0x90>)
 8008a7e:	f7ff fbbf 	bl	8008200 <__assert_func>
 8008a82:	6922      	ldr	r2, [r4, #16]
 8008a84:	f104 010c 	add.w	r1, r4, #12
 8008a88:	3202      	adds	r2, #2
 8008a8a:	0092      	lsls	r2, r2, #2
 8008a8c:	300c      	adds	r0, #12
 8008a8e:	f7fe fc0f 	bl	80072b0 <memcpy>
 8008a92:	4621      	mov	r1, r4
 8008a94:	4638      	mov	r0, r7
 8008a96:	f7ff ffa3 	bl	80089e0 <_Bfree>
 8008a9a:	462c      	mov	r4, r5
 8008a9c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008aa0:	3601      	adds	r6, #1
 8008aa2:	f8c3 8014 	str.w	r8, [r3, #20]
 8008aa6:	6126      	str	r6, [r4, #16]
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aae:	bf00      	nop
 8008ab0:	0800a9ed 	.word	0x0800a9ed
 8008ab4:	0800aa7c 	.word	0x0800aa7c

08008ab8 <__s2b>:
 8008ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008abc:	4615      	mov	r5, r2
 8008abe:	2209      	movs	r2, #9
 8008ac0:	461f      	mov	r7, r3
 8008ac2:	3308      	adds	r3, #8
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008aca:	4606      	mov	r6, r0
 8008acc:	2201      	movs	r2, #1
 8008ace:	2100      	movs	r1, #0
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	db09      	blt.n	8008ae8 <__s2b+0x30>
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	f7ff ff43 	bl	8008960 <_Balloc>
 8008ada:	b940      	cbnz	r0, 8008aee <__s2b+0x36>
 8008adc:	4602      	mov	r2, r0
 8008ade:	21ce      	movs	r1, #206	; 0xce
 8008ae0:	4b18      	ldr	r3, [pc, #96]	; (8008b44 <__s2b+0x8c>)
 8008ae2:	4819      	ldr	r0, [pc, #100]	; (8008b48 <__s2b+0x90>)
 8008ae4:	f7ff fb8c 	bl	8008200 <__assert_func>
 8008ae8:	0052      	lsls	r2, r2, #1
 8008aea:	3101      	adds	r1, #1
 8008aec:	e7f0      	b.n	8008ad0 <__s2b+0x18>
 8008aee:	9b08      	ldr	r3, [sp, #32]
 8008af0:	2d09      	cmp	r5, #9
 8008af2:	6143      	str	r3, [r0, #20]
 8008af4:	f04f 0301 	mov.w	r3, #1
 8008af8:	6103      	str	r3, [r0, #16]
 8008afa:	dd16      	ble.n	8008b2a <__s2b+0x72>
 8008afc:	f104 0909 	add.w	r9, r4, #9
 8008b00:	46c8      	mov	r8, r9
 8008b02:	442c      	add	r4, r5
 8008b04:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008b08:	4601      	mov	r1, r0
 8008b0a:	220a      	movs	r2, #10
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	3b30      	subs	r3, #48	; 0x30
 8008b10:	f7ff ff88 	bl	8008a24 <__multadd>
 8008b14:	45a0      	cmp	r8, r4
 8008b16:	d1f5      	bne.n	8008b04 <__s2b+0x4c>
 8008b18:	f1a5 0408 	sub.w	r4, r5, #8
 8008b1c:	444c      	add	r4, r9
 8008b1e:	1b2d      	subs	r5, r5, r4
 8008b20:	1963      	adds	r3, r4, r5
 8008b22:	42bb      	cmp	r3, r7
 8008b24:	db04      	blt.n	8008b30 <__s2b+0x78>
 8008b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b2a:	2509      	movs	r5, #9
 8008b2c:	340a      	adds	r4, #10
 8008b2e:	e7f6      	b.n	8008b1e <__s2b+0x66>
 8008b30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b34:	4601      	mov	r1, r0
 8008b36:	220a      	movs	r2, #10
 8008b38:	4630      	mov	r0, r6
 8008b3a:	3b30      	subs	r3, #48	; 0x30
 8008b3c:	f7ff ff72 	bl	8008a24 <__multadd>
 8008b40:	e7ee      	b.n	8008b20 <__s2b+0x68>
 8008b42:	bf00      	nop
 8008b44:	0800a9ed 	.word	0x0800a9ed
 8008b48:	0800aa7c 	.word	0x0800aa7c

08008b4c <__hi0bits>:
 8008b4c:	0c02      	lsrs	r2, r0, #16
 8008b4e:	0412      	lsls	r2, r2, #16
 8008b50:	4603      	mov	r3, r0
 8008b52:	b9ca      	cbnz	r2, 8008b88 <__hi0bits+0x3c>
 8008b54:	0403      	lsls	r3, r0, #16
 8008b56:	2010      	movs	r0, #16
 8008b58:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008b5c:	bf04      	itt	eq
 8008b5e:	021b      	lsleq	r3, r3, #8
 8008b60:	3008      	addeq	r0, #8
 8008b62:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008b66:	bf04      	itt	eq
 8008b68:	011b      	lsleq	r3, r3, #4
 8008b6a:	3004      	addeq	r0, #4
 8008b6c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008b70:	bf04      	itt	eq
 8008b72:	009b      	lsleq	r3, r3, #2
 8008b74:	3002      	addeq	r0, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	db05      	blt.n	8008b86 <__hi0bits+0x3a>
 8008b7a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008b7e:	f100 0001 	add.w	r0, r0, #1
 8008b82:	bf08      	it	eq
 8008b84:	2020      	moveq	r0, #32
 8008b86:	4770      	bx	lr
 8008b88:	2000      	movs	r0, #0
 8008b8a:	e7e5      	b.n	8008b58 <__hi0bits+0xc>

08008b8c <__lo0bits>:
 8008b8c:	6803      	ldr	r3, [r0, #0]
 8008b8e:	4602      	mov	r2, r0
 8008b90:	f013 0007 	ands.w	r0, r3, #7
 8008b94:	d00b      	beq.n	8008bae <__lo0bits+0x22>
 8008b96:	07d9      	lsls	r1, r3, #31
 8008b98:	d422      	bmi.n	8008be0 <__lo0bits+0x54>
 8008b9a:	0798      	lsls	r0, r3, #30
 8008b9c:	bf49      	itett	mi
 8008b9e:	085b      	lsrmi	r3, r3, #1
 8008ba0:	089b      	lsrpl	r3, r3, #2
 8008ba2:	2001      	movmi	r0, #1
 8008ba4:	6013      	strmi	r3, [r2, #0]
 8008ba6:	bf5c      	itt	pl
 8008ba8:	2002      	movpl	r0, #2
 8008baa:	6013      	strpl	r3, [r2, #0]
 8008bac:	4770      	bx	lr
 8008bae:	b299      	uxth	r1, r3
 8008bb0:	b909      	cbnz	r1, 8008bb6 <__lo0bits+0x2a>
 8008bb2:	2010      	movs	r0, #16
 8008bb4:	0c1b      	lsrs	r3, r3, #16
 8008bb6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008bba:	bf04      	itt	eq
 8008bbc:	0a1b      	lsreq	r3, r3, #8
 8008bbe:	3008      	addeq	r0, #8
 8008bc0:	0719      	lsls	r1, r3, #28
 8008bc2:	bf04      	itt	eq
 8008bc4:	091b      	lsreq	r3, r3, #4
 8008bc6:	3004      	addeq	r0, #4
 8008bc8:	0799      	lsls	r1, r3, #30
 8008bca:	bf04      	itt	eq
 8008bcc:	089b      	lsreq	r3, r3, #2
 8008bce:	3002      	addeq	r0, #2
 8008bd0:	07d9      	lsls	r1, r3, #31
 8008bd2:	d403      	bmi.n	8008bdc <__lo0bits+0x50>
 8008bd4:	085b      	lsrs	r3, r3, #1
 8008bd6:	f100 0001 	add.w	r0, r0, #1
 8008bda:	d003      	beq.n	8008be4 <__lo0bits+0x58>
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	4770      	bx	lr
 8008be0:	2000      	movs	r0, #0
 8008be2:	4770      	bx	lr
 8008be4:	2020      	movs	r0, #32
 8008be6:	4770      	bx	lr

08008be8 <__i2b>:
 8008be8:	b510      	push	{r4, lr}
 8008bea:	460c      	mov	r4, r1
 8008bec:	2101      	movs	r1, #1
 8008bee:	f7ff feb7 	bl	8008960 <_Balloc>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	b928      	cbnz	r0, 8008c02 <__i2b+0x1a>
 8008bf6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008bfa:	4b04      	ldr	r3, [pc, #16]	; (8008c0c <__i2b+0x24>)
 8008bfc:	4804      	ldr	r0, [pc, #16]	; (8008c10 <__i2b+0x28>)
 8008bfe:	f7ff faff 	bl	8008200 <__assert_func>
 8008c02:	2301      	movs	r3, #1
 8008c04:	6144      	str	r4, [r0, #20]
 8008c06:	6103      	str	r3, [r0, #16]
 8008c08:	bd10      	pop	{r4, pc}
 8008c0a:	bf00      	nop
 8008c0c:	0800a9ed 	.word	0x0800a9ed
 8008c10:	0800aa7c 	.word	0x0800aa7c

08008c14 <__multiply>:
 8008c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c18:	4614      	mov	r4, r2
 8008c1a:	690a      	ldr	r2, [r1, #16]
 8008c1c:	6923      	ldr	r3, [r4, #16]
 8008c1e:	460d      	mov	r5, r1
 8008c20:	429a      	cmp	r2, r3
 8008c22:	bfbe      	ittt	lt
 8008c24:	460b      	movlt	r3, r1
 8008c26:	4625      	movlt	r5, r4
 8008c28:	461c      	movlt	r4, r3
 8008c2a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008c2e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008c32:	68ab      	ldr	r3, [r5, #8]
 8008c34:	6869      	ldr	r1, [r5, #4]
 8008c36:	eb0a 0709 	add.w	r7, sl, r9
 8008c3a:	42bb      	cmp	r3, r7
 8008c3c:	b085      	sub	sp, #20
 8008c3e:	bfb8      	it	lt
 8008c40:	3101      	addlt	r1, #1
 8008c42:	f7ff fe8d 	bl	8008960 <_Balloc>
 8008c46:	b930      	cbnz	r0, 8008c56 <__multiply+0x42>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	f240 115d 	movw	r1, #349	; 0x15d
 8008c4e:	4b41      	ldr	r3, [pc, #260]	; (8008d54 <__multiply+0x140>)
 8008c50:	4841      	ldr	r0, [pc, #260]	; (8008d58 <__multiply+0x144>)
 8008c52:	f7ff fad5 	bl	8008200 <__assert_func>
 8008c56:	f100 0614 	add.w	r6, r0, #20
 8008c5a:	4633      	mov	r3, r6
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008c62:	4543      	cmp	r3, r8
 8008c64:	d31e      	bcc.n	8008ca4 <__multiply+0x90>
 8008c66:	f105 0c14 	add.w	ip, r5, #20
 8008c6a:	f104 0314 	add.w	r3, r4, #20
 8008c6e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008c72:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008c76:	9202      	str	r2, [sp, #8]
 8008c78:	ebac 0205 	sub.w	r2, ip, r5
 8008c7c:	3a15      	subs	r2, #21
 8008c7e:	f022 0203 	bic.w	r2, r2, #3
 8008c82:	3204      	adds	r2, #4
 8008c84:	f105 0115 	add.w	r1, r5, #21
 8008c88:	458c      	cmp	ip, r1
 8008c8a:	bf38      	it	cc
 8008c8c:	2204      	movcc	r2, #4
 8008c8e:	9201      	str	r2, [sp, #4]
 8008c90:	9a02      	ldr	r2, [sp, #8]
 8008c92:	9303      	str	r3, [sp, #12]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d808      	bhi.n	8008caa <__multiply+0x96>
 8008c98:	2f00      	cmp	r7, #0
 8008c9a:	dc55      	bgt.n	8008d48 <__multiply+0x134>
 8008c9c:	6107      	str	r7, [r0, #16]
 8008c9e:	b005      	add	sp, #20
 8008ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca4:	f843 2b04 	str.w	r2, [r3], #4
 8008ca8:	e7db      	b.n	8008c62 <__multiply+0x4e>
 8008caa:	f8b3 a000 	ldrh.w	sl, [r3]
 8008cae:	f1ba 0f00 	cmp.w	sl, #0
 8008cb2:	d020      	beq.n	8008cf6 <__multiply+0xe2>
 8008cb4:	46b1      	mov	r9, r6
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f105 0e14 	add.w	lr, r5, #20
 8008cbc:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008cc0:	f8d9 b000 	ldr.w	fp, [r9]
 8008cc4:	b2a1      	uxth	r1, r4
 8008cc6:	fa1f fb8b 	uxth.w	fp, fp
 8008cca:	fb0a b101 	mla	r1, sl, r1, fp
 8008cce:	4411      	add	r1, r2
 8008cd0:	f8d9 2000 	ldr.w	r2, [r9]
 8008cd4:	0c24      	lsrs	r4, r4, #16
 8008cd6:	0c12      	lsrs	r2, r2, #16
 8008cd8:	fb0a 2404 	mla	r4, sl, r4, r2
 8008cdc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008ce0:	b289      	uxth	r1, r1
 8008ce2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008ce6:	45f4      	cmp	ip, lr
 8008ce8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008cec:	f849 1b04 	str.w	r1, [r9], #4
 8008cf0:	d8e4      	bhi.n	8008cbc <__multiply+0xa8>
 8008cf2:	9901      	ldr	r1, [sp, #4]
 8008cf4:	5072      	str	r2, [r6, r1]
 8008cf6:	9a03      	ldr	r2, [sp, #12]
 8008cf8:	3304      	adds	r3, #4
 8008cfa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008cfe:	f1b9 0f00 	cmp.w	r9, #0
 8008d02:	d01f      	beq.n	8008d44 <__multiply+0x130>
 8008d04:	46b6      	mov	lr, r6
 8008d06:	f04f 0a00 	mov.w	sl, #0
 8008d0a:	6834      	ldr	r4, [r6, #0]
 8008d0c:	f105 0114 	add.w	r1, r5, #20
 8008d10:	880a      	ldrh	r2, [r1, #0]
 8008d12:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008d16:	b2a4      	uxth	r4, r4
 8008d18:	fb09 b202 	mla	r2, r9, r2, fp
 8008d1c:	4492      	add	sl, r2
 8008d1e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008d22:	f84e 4b04 	str.w	r4, [lr], #4
 8008d26:	f851 4b04 	ldr.w	r4, [r1], #4
 8008d2a:	f8be 2000 	ldrh.w	r2, [lr]
 8008d2e:	0c24      	lsrs	r4, r4, #16
 8008d30:	fb09 2404 	mla	r4, r9, r4, r2
 8008d34:	458c      	cmp	ip, r1
 8008d36:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008d3a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008d3e:	d8e7      	bhi.n	8008d10 <__multiply+0xfc>
 8008d40:	9a01      	ldr	r2, [sp, #4]
 8008d42:	50b4      	str	r4, [r6, r2]
 8008d44:	3604      	adds	r6, #4
 8008d46:	e7a3      	b.n	8008c90 <__multiply+0x7c>
 8008d48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1a5      	bne.n	8008c9c <__multiply+0x88>
 8008d50:	3f01      	subs	r7, #1
 8008d52:	e7a1      	b.n	8008c98 <__multiply+0x84>
 8008d54:	0800a9ed 	.word	0x0800a9ed
 8008d58:	0800aa7c 	.word	0x0800aa7c

08008d5c <__pow5mult>:
 8008d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d60:	4615      	mov	r5, r2
 8008d62:	f012 0203 	ands.w	r2, r2, #3
 8008d66:	4606      	mov	r6, r0
 8008d68:	460f      	mov	r7, r1
 8008d6a:	d007      	beq.n	8008d7c <__pow5mult+0x20>
 8008d6c:	4c25      	ldr	r4, [pc, #148]	; (8008e04 <__pow5mult+0xa8>)
 8008d6e:	3a01      	subs	r2, #1
 8008d70:	2300      	movs	r3, #0
 8008d72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d76:	f7ff fe55 	bl	8008a24 <__multadd>
 8008d7a:	4607      	mov	r7, r0
 8008d7c:	10ad      	asrs	r5, r5, #2
 8008d7e:	d03d      	beq.n	8008dfc <__pow5mult+0xa0>
 8008d80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008d82:	b97c      	cbnz	r4, 8008da4 <__pow5mult+0x48>
 8008d84:	2010      	movs	r0, #16
 8008d86:	f7ff fdd1 	bl	800892c <malloc>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	6270      	str	r0, [r6, #36]	; 0x24
 8008d8e:	b928      	cbnz	r0, 8008d9c <__pow5mult+0x40>
 8008d90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008d94:	4b1c      	ldr	r3, [pc, #112]	; (8008e08 <__pow5mult+0xac>)
 8008d96:	481d      	ldr	r0, [pc, #116]	; (8008e0c <__pow5mult+0xb0>)
 8008d98:	f7ff fa32 	bl	8008200 <__assert_func>
 8008d9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008da0:	6004      	str	r4, [r0, #0]
 8008da2:	60c4      	str	r4, [r0, #12]
 8008da4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008da8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008dac:	b94c      	cbnz	r4, 8008dc2 <__pow5mult+0x66>
 8008dae:	f240 2171 	movw	r1, #625	; 0x271
 8008db2:	4630      	mov	r0, r6
 8008db4:	f7ff ff18 	bl	8008be8 <__i2b>
 8008db8:	2300      	movs	r3, #0
 8008dba:	4604      	mov	r4, r0
 8008dbc:	f8c8 0008 	str.w	r0, [r8, #8]
 8008dc0:	6003      	str	r3, [r0, #0]
 8008dc2:	f04f 0900 	mov.w	r9, #0
 8008dc6:	07eb      	lsls	r3, r5, #31
 8008dc8:	d50a      	bpl.n	8008de0 <__pow5mult+0x84>
 8008dca:	4639      	mov	r1, r7
 8008dcc:	4622      	mov	r2, r4
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f7ff ff20 	bl	8008c14 <__multiply>
 8008dd4:	4680      	mov	r8, r0
 8008dd6:	4639      	mov	r1, r7
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f7ff fe01 	bl	80089e0 <_Bfree>
 8008dde:	4647      	mov	r7, r8
 8008de0:	106d      	asrs	r5, r5, #1
 8008de2:	d00b      	beq.n	8008dfc <__pow5mult+0xa0>
 8008de4:	6820      	ldr	r0, [r4, #0]
 8008de6:	b938      	cbnz	r0, 8008df8 <__pow5mult+0x9c>
 8008de8:	4622      	mov	r2, r4
 8008dea:	4621      	mov	r1, r4
 8008dec:	4630      	mov	r0, r6
 8008dee:	f7ff ff11 	bl	8008c14 <__multiply>
 8008df2:	6020      	str	r0, [r4, #0]
 8008df4:	f8c0 9000 	str.w	r9, [r0]
 8008df8:	4604      	mov	r4, r0
 8008dfa:	e7e4      	b.n	8008dc6 <__pow5mult+0x6a>
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e02:	bf00      	nop
 8008e04:	0800abd0 	.word	0x0800abd0
 8008e08:	0800a838 	.word	0x0800a838
 8008e0c:	0800aa7c 	.word	0x0800aa7c

08008e10 <__lshift>:
 8008e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e14:	460c      	mov	r4, r1
 8008e16:	4607      	mov	r7, r0
 8008e18:	4691      	mov	r9, r2
 8008e1a:	6923      	ldr	r3, [r4, #16]
 8008e1c:	6849      	ldr	r1, [r1, #4]
 8008e1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e22:	68a3      	ldr	r3, [r4, #8]
 8008e24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e28:	f108 0601 	add.w	r6, r8, #1
 8008e2c:	42b3      	cmp	r3, r6
 8008e2e:	db0b      	blt.n	8008e48 <__lshift+0x38>
 8008e30:	4638      	mov	r0, r7
 8008e32:	f7ff fd95 	bl	8008960 <_Balloc>
 8008e36:	4605      	mov	r5, r0
 8008e38:	b948      	cbnz	r0, 8008e4e <__lshift+0x3e>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008e40:	4b27      	ldr	r3, [pc, #156]	; (8008ee0 <__lshift+0xd0>)
 8008e42:	4828      	ldr	r0, [pc, #160]	; (8008ee4 <__lshift+0xd4>)
 8008e44:	f7ff f9dc 	bl	8008200 <__assert_func>
 8008e48:	3101      	adds	r1, #1
 8008e4a:	005b      	lsls	r3, r3, #1
 8008e4c:	e7ee      	b.n	8008e2c <__lshift+0x1c>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	f100 0114 	add.w	r1, r0, #20
 8008e54:	f100 0210 	add.w	r2, r0, #16
 8008e58:	4618      	mov	r0, r3
 8008e5a:	4553      	cmp	r3, sl
 8008e5c:	db33      	blt.n	8008ec6 <__lshift+0xb6>
 8008e5e:	6920      	ldr	r0, [r4, #16]
 8008e60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e64:	f104 0314 	add.w	r3, r4, #20
 8008e68:	f019 091f 	ands.w	r9, r9, #31
 8008e6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e74:	d02b      	beq.n	8008ece <__lshift+0xbe>
 8008e76:	468a      	mov	sl, r1
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f1c9 0e20 	rsb	lr, r9, #32
 8008e7e:	6818      	ldr	r0, [r3, #0]
 8008e80:	fa00 f009 	lsl.w	r0, r0, r9
 8008e84:	4302      	orrs	r2, r0
 8008e86:	f84a 2b04 	str.w	r2, [sl], #4
 8008e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e8e:	459c      	cmp	ip, r3
 8008e90:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e94:	d8f3      	bhi.n	8008e7e <__lshift+0x6e>
 8008e96:	ebac 0304 	sub.w	r3, ip, r4
 8008e9a:	3b15      	subs	r3, #21
 8008e9c:	f023 0303 	bic.w	r3, r3, #3
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	f104 0015 	add.w	r0, r4, #21
 8008ea6:	4584      	cmp	ip, r0
 8008ea8:	bf38      	it	cc
 8008eaa:	2304      	movcc	r3, #4
 8008eac:	50ca      	str	r2, [r1, r3]
 8008eae:	b10a      	cbz	r2, 8008eb4 <__lshift+0xa4>
 8008eb0:	f108 0602 	add.w	r6, r8, #2
 8008eb4:	3e01      	subs	r6, #1
 8008eb6:	4638      	mov	r0, r7
 8008eb8:	4621      	mov	r1, r4
 8008eba:	612e      	str	r6, [r5, #16]
 8008ebc:	f7ff fd90 	bl	80089e0 <_Bfree>
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008eca:	3301      	adds	r3, #1
 8008ecc:	e7c5      	b.n	8008e5a <__lshift+0x4a>
 8008ece:	3904      	subs	r1, #4
 8008ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ed4:	459c      	cmp	ip, r3
 8008ed6:	f841 2f04 	str.w	r2, [r1, #4]!
 8008eda:	d8f9      	bhi.n	8008ed0 <__lshift+0xc0>
 8008edc:	e7ea      	b.n	8008eb4 <__lshift+0xa4>
 8008ede:	bf00      	nop
 8008ee0:	0800a9ed 	.word	0x0800a9ed
 8008ee4:	0800aa7c 	.word	0x0800aa7c

08008ee8 <__mcmp>:
 8008ee8:	4603      	mov	r3, r0
 8008eea:	690a      	ldr	r2, [r1, #16]
 8008eec:	6900      	ldr	r0, [r0, #16]
 8008eee:	b530      	push	{r4, r5, lr}
 8008ef0:	1a80      	subs	r0, r0, r2
 8008ef2:	d10d      	bne.n	8008f10 <__mcmp+0x28>
 8008ef4:	3314      	adds	r3, #20
 8008ef6:	3114      	adds	r1, #20
 8008ef8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008efc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008f00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008f08:	4295      	cmp	r5, r2
 8008f0a:	d002      	beq.n	8008f12 <__mcmp+0x2a>
 8008f0c:	d304      	bcc.n	8008f18 <__mcmp+0x30>
 8008f0e:	2001      	movs	r0, #1
 8008f10:	bd30      	pop	{r4, r5, pc}
 8008f12:	42a3      	cmp	r3, r4
 8008f14:	d3f4      	bcc.n	8008f00 <__mcmp+0x18>
 8008f16:	e7fb      	b.n	8008f10 <__mcmp+0x28>
 8008f18:	f04f 30ff 	mov.w	r0, #4294967295
 8008f1c:	e7f8      	b.n	8008f10 <__mcmp+0x28>
	...

08008f20 <__mdiff>:
 8008f20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f24:	460c      	mov	r4, r1
 8008f26:	4606      	mov	r6, r0
 8008f28:	4611      	mov	r1, r2
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	4692      	mov	sl, r2
 8008f2e:	f7ff ffdb 	bl	8008ee8 <__mcmp>
 8008f32:	1e05      	subs	r5, r0, #0
 8008f34:	d111      	bne.n	8008f5a <__mdiff+0x3a>
 8008f36:	4629      	mov	r1, r5
 8008f38:	4630      	mov	r0, r6
 8008f3a:	f7ff fd11 	bl	8008960 <_Balloc>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	b928      	cbnz	r0, 8008f4e <__mdiff+0x2e>
 8008f42:	f240 2132 	movw	r1, #562	; 0x232
 8008f46:	4b3c      	ldr	r3, [pc, #240]	; (8009038 <__mdiff+0x118>)
 8008f48:	483c      	ldr	r0, [pc, #240]	; (800903c <__mdiff+0x11c>)
 8008f4a:	f7ff f959 	bl	8008200 <__assert_func>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f54:	4610      	mov	r0, r2
 8008f56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5a:	bfa4      	itt	ge
 8008f5c:	4653      	movge	r3, sl
 8008f5e:	46a2      	movge	sl, r4
 8008f60:	4630      	mov	r0, r6
 8008f62:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008f66:	bfa6      	itte	ge
 8008f68:	461c      	movge	r4, r3
 8008f6a:	2500      	movge	r5, #0
 8008f6c:	2501      	movlt	r5, #1
 8008f6e:	f7ff fcf7 	bl	8008960 <_Balloc>
 8008f72:	4602      	mov	r2, r0
 8008f74:	b918      	cbnz	r0, 8008f7e <__mdiff+0x5e>
 8008f76:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008f7a:	4b2f      	ldr	r3, [pc, #188]	; (8009038 <__mdiff+0x118>)
 8008f7c:	e7e4      	b.n	8008f48 <__mdiff+0x28>
 8008f7e:	f100 0814 	add.w	r8, r0, #20
 8008f82:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008f86:	60c5      	str	r5, [r0, #12]
 8008f88:	f04f 0c00 	mov.w	ip, #0
 8008f8c:	f10a 0514 	add.w	r5, sl, #20
 8008f90:	f10a 0010 	add.w	r0, sl, #16
 8008f94:	46c2      	mov	sl, r8
 8008f96:	6926      	ldr	r6, [r4, #16]
 8008f98:	f104 0914 	add.w	r9, r4, #20
 8008f9c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008fa0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008fa4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008fa8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008fac:	fa1f f18b 	uxth.w	r1, fp
 8008fb0:	4461      	add	r1, ip
 8008fb2:	fa1f fc83 	uxth.w	ip, r3
 8008fb6:	0c1b      	lsrs	r3, r3, #16
 8008fb8:	eba1 010c 	sub.w	r1, r1, ip
 8008fbc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008fc0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008fc4:	b289      	uxth	r1, r1
 8008fc6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008fca:	454e      	cmp	r6, r9
 8008fcc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008fd0:	f84a 3b04 	str.w	r3, [sl], #4
 8008fd4:	d8e6      	bhi.n	8008fa4 <__mdiff+0x84>
 8008fd6:	1b33      	subs	r3, r6, r4
 8008fd8:	3b15      	subs	r3, #21
 8008fda:	f023 0303 	bic.w	r3, r3, #3
 8008fde:	3415      	adds	r4, #21
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	42a6      	cmp	r6, r4
 8008fe4:	bf38      	it	cc
 8008fe6:	2304      	movcc	r3, #4
 8008fe8:	441d      	add	r5, r3
 8008fea:	4443      	add	r3, r8
 8008fec:	461e      	mov	r6, r3
 8008fee:	462c      	mov	r4, r5
 8008ff0:	4574      	cmp	r4, lr
 8008ff2:	d30e      	bcc.n	8009012 <__mdiff+0xf2>
 8008ff4:	f10e 0103 	add.w	r1, lr, #3
 8008ff8:	1b49      	subs	r1, r1, r5
 8008ffa:	f021 0103 	bic.w	r1, r1, #3
 8008ffe:	3d03      	subs	r5, #3
 8009000:	45ae      	cmp	lr, r5
 8009002:	bf38      	it	cc
 8009004:	2100      	movcc	r1, #0
 8009006:	4419      	add	r1, r3
 8009008:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800900c:	b18b      	cbz	r3, 8009032 <__mdiff+0x112>
 800900e:	6117      	str	r7, [r2, #16]
 8009010:	e7a0      	b.n	8008f54 <__mdiff+0x34>
 8009012:	f854 8b04 	ldr.w	r8, [r4], #4
 8009016:	fa1f f188 	uxth.w	r1, r8
 800901a:	4461      	add	r1, ip
 800901c:	1408      	asrs	r0, r1, #16
 800901e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009022:	b289      	uxth	r1, r1
 8009024:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009028:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800902c:	f846 1b04 	str.w	r1, [r6], #4
 8009030:	e7de      	b.n	8008ff0 <__mdiff+0xd0>
 8009032:	3f01      	subs	r7, #1
 8009034:	e7e8      	b.n	8009008 <__mdiff+0xe8>
 8009036:	bf00      	nop
 8009038:	0800a9ed 	.word	0x0800a9ed
 800903c:	0800aa7c 	.word	0x0800aa7c

08009040 <__ulp>:
 8009040:	4b11      	ldr	r3, [pc, #68]	; (8009088 <__ulp+0x48>)
 8009042:	400b      	ands	r3, r1
 8009044:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009048:	2b00      	cmp	r3, #0
 800904a:	dd02      	ble.n	8009052 <__ulp+0x12>
 800904c:	2000      	movs	r0, #0
 800904e:	4619      	mov	r1, r3
 8009050:	4770      	bx	lr
 8009052:	425b      	negs	r3, r3
 8009054:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009058:	f04f 0000 	mov.w	r0, #0
 800905c:	f04f 0100 	mov.w	r1, #0
 8009060:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009064:	da04      	bge.n	8009070 <__ulp+0x30>
 8009066:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800906a:	fa43 f102 	asr.w	r1, r3, r2
 800906e:	4770      	bx	lr
 8009070:	f1a2 0314 	sub.w	r3, r2, #20
 8009074:	2b1e      	cmp	r3, #30
 8009076:	bfd6      	itet	le
 8009078:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800907c:	2301      	movgt	r3, #1
 800907e:	fa22 f303 	lsrle.w	r3, r2, r3
 8009082:	4618      	mov	r0, r3
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	7ff00000 	.word	0x7ff00000

0800908c <__b2d>:
 800908c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009090:	6907      	ldr	r7, [r0, #16]
 8009092:	f100 0914 	add.w	r9, r0, #20
 8009096:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800909a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800909e:	f1a7 0804 	sub.w	r8, r7, #4
 80090a2:	4630      	mov	r0, r6
 80090a4:	f7ff fd52 	bl	8008b4c <__hi0bits>
 80090a8:	f1c0 0320 	rsb	r3, r0, #32
 80090ac:	280a      	cmp	r0, #10
 80090ae:	600b      	str	r3, [r1, #0]
 80090b0:	491f      	ldr	r1, [pc, #124]	; (8009130 <__b2d+0xa4>)
 80090b2:	dc17      	bgt.n	80090e4 <__b2d+0x58>
 80090b4:	45c1      	cmp	r9, r8
 80090b6:	bf28      	it	cs
 80090b8:	2200      	movcs	r2, #0
 80090ba:	f1c0 0c0b 	rsb	ip, r0, #11
 80090be:	fa26 f30c 	lsr.w	r3, r6, ip
 80090c2:	bf38      	it	cc
 80090c4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80090c8:	ea43 0501 	orr.w	r5, r3, r1
 80090cc:	f100 0315 	add.w	r3, r0, #21
 80090d0:	fa06 f303 	lsl.w	r3, r6, r3
 80090d4:	fa22 f20c 	lsr.w	r2, r2, ip
 80090d8:	ea43 0402 	orr.w	r4, r3, r2
 80090dc:	4620      	mov	r0, r4
 80090de:	4629      	mov	r1, r5
 80090e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090e4:	45c1      	cmp	r9, r8
 80090e6:	bf2e      	itee	cs
 80090e8:	2200      	movcs	r2, #0
 80090ea:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80090ee:	f1a7 0808 	subcc.w	r8, r7, #8
 80090f2:	f1b0 030b 	subs.w	r3, r0, #11
 80090f6:	d016      	beq.n	8009126 <__b2d+0x9a>
 80090f8:	f1c3 0720 	rsb	r7, r3, #32
 80090fc:	fa22 f107 	lsr.w	r1, r2, r7
 8009100:	45c8      	cmp	r8, r9
 8009102:	fa06 f603 	lsl.w	r6, r6, r3
 8009106:	ea46 0601 	orr.w	r6, r6, r1
 800910a:	bf94      	ite	ls
 800910c:	2100      	movls	r1, #0
 800910e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009112:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009116:	fa02 f003 	lsl.w	r0, r2, r3
 800911a:	40f9      	lsrs	r1, r7
 800911c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009120:	ea40 0401 	orr.w	r4, r0, r1
 8009124:	e7da      	b.n	80090dc <__b2d+0x50>
 8009126:	4614      	mov	r4, r2
 8009128:	ea46 0501 	orr.w	r5, r6, r1
 800912c:	e7d6      	b.n	80090dc <__b2d+0x50>
 800912e:	bf00      	nop
 8009130:	3ff00000 	.word	0x3ff00000

08009134 <__d2b>:
 8009134:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009138:	2101      	movs	r1, #1
 800913a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800913e:	4690      	mov	r8, r2
 8009140:	461d      	mov	r5, r3
 8009142:	f7ff fc0d 	bl	8008960 <_Balloc>
 8009146:	4604      	mov	r4, r0
 8009148:	b930      	cbnz	r0, 8009158 <__d2b+0x24>
 800914a:	4602      	mov	r2, r0
 800914c:	f240 310a 	movw	r1, #778	; 0x30a
 8009150:	4b24      	ldr	r3, [pc, #144]	; (80091e4 <__d2b+0xb0>)
 8009152:	4825      	ldr	r0, [pc, #148]	; (80091e8 <__d2b+0xb4>)
 8009154:	f7ff f854 	bl	8008200 <__assert_func>
 8009158:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800915c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009160:	bb2d      	cbnz	r5, 80091ae <__d2b+0x7a>
 8009162:	9301      	str	r3, [sp, #4]
 8009164:	f1b8 0300 	subs.w	r3, r8, #0
 8009168:	d026      	beq.n	80091b8 <__d2b+0x84>
 800916a:	4668      	mov	r0, sp
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	f7ff fd0d 	bl	8008b8c <__lo0bits>
 8009172:	9900      	ldr	r1, [sp, #0]
 8009174:	b1f0      	cbz	r0, 80091b4 <__d2b+0x80>
 8009176:	9a01      	ldr	r2, [sp, #4]
 8009178:	f1c0 0320 	rsb	r3, r0, #32
 800917c:	fa02 f303 	lsl.w	r3, r2, r3
 8009180:	430b      	orrs	r3, r1
 8009182:	40c2      	lsrs	r2, r0
 8009184:	6163      	str	r3, [r4, #20]
 8009186:	9201      	str	r2, [sp, #4]
 8009188:	9b01      	ldr	r3, [sp, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	bf14      	ite	ne
 800918e:	2102      	movne	r1, #2
 8009190:	2101      	moveq	r1, #1
 8009192:	61a3      	str	r3, [r4, #24]
 8009194:	6121      	str	r1, [r4, #16]
 8009196:	b1c5      	cbz	r5, 80091ca <__d2b+0x96>
 8009198:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800919c:	4405      	add	r5, r0
 800919e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80091a2:	603d      	str	r5, [r7, #0]
 80091a4:	6030      	str	r0, [r6, #0]
 80091a6:	4620      	mov	r0, r4
 80091a8:	b002      	add	sp, #8
 80091aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091b2:	e7d6      	b.n	8009162 <__d2b+0x2e>
 80091b4:	6161      	str	r1, [r4, #20]
 80091b6:	e7e7      	b.n	8009188 <__d2b+0x54>
 80091b8:	a801      	add	r0, sp, #4
 80091ba:	f7ff fce7 	bl	8008b8c <__lo0bits>
 80091be:	2101      	movs	r1, #1
 80091c0:	9b01      	ldr	r3, [sp, #4]
 80091c2:	6121      	str	r1, [r4, #16]
 80091c4:	6163      	str	r3, [r4, #20]
 80091c6:	3020      	adds	r0, #32
 80091c8:	e7e5      	b.n	8009196 <__d2b+0x62>
 80091ca:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80091ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80091d2:	6038      	str	r0, [r7, #0]
 80091d4:	6918      	ldr	r0, [r3, #16]
 80091d6:	f7ff fcb9 	bl	8008b4c <__hi0bits>
 80091da:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80091de:	6031      	str	r1, [r6, #0]
 80091e0:	e7e1      	b.n	80091a6 <__d2b+0x72>
 80091e2:	bf00      	nop
 80091e4:	0800a9ed 	.word	0x0800a9ed
 80091e8:	0800aa7c 	.word	0x0800aa7c

080091ec <__ratio>:
 80091ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f0:	4688      	mov	r8, r1
 80091f2:	4669      	mov	r1, sp
 80091f4:	4681      	mov	r9, r0
 80091f6:	f7ff ff49 	bl	800908c <__b2d>
 80091fa:	460f      	mov	r7, r1
 80091fc:	4604      	mov	r4, r0
 80091fe:	460d      	mov	r5, r1
 8009200:	4640      	mov	r0, r8
 8009202:	a901      	add	r1, sp, #4
 8009204:	f7ff ff42 	bl	800908c <__b2d>
 8009208:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800920c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009210:	468b      	mov	fp, r1
 8009212:	eba3 0c02 	sub.w	ip, r3, r2
 8009216:	e9dd 3200 	ldrd	r3, r2, [sp]
 800921a:	1a9b      	subs	r3, r3, r2
 800921c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009220:	2b00      	cmp	r3, #0
 8009222:	bfd5      	itete	le
 8009224:	460a      	movle	r2, r1
 8009226:	462a      	movgt	r2, r5
 8009228:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800922c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009230:	bfd8      	it	le
 8009232:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009236:	465b      	mov	r3, fp
 8009238:	4602      	mov	r2, r0
 800923a:	4639      	mov	r1, r7
 800923c:	4620      	mov	r0, r4
 800923e:	f7f7 fae5 	bl	800080c <__aeabi_ddiv>
 8009242:	b003      	add	sp, #12
 8009244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009248 <__copybits>:
 8009248:	3901      	subs	r1, #1
 800924a:	b570      	push	{r4, r5, r6, lr}
 800924c:	1149      	asrs	r1, r1, #5
 800924e:	6914      	ldr	r4, [r2, #16]
 8009250:	3101      	adds	r1, #1
 8009252:	f102 0314 	add.w	r3, r2, #20
 8009256:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800925a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800925e:	1f05      	subs	r5, r0, #4
 8009260:	42a3      	cmp	r3, r4
 8009262:	d30c      	bcc.n	800927e <__copybits+0x36>
 8009264:	1aa3      	subs	r3, r4, r2
 8009266:	3b11      	subs	r3, #17
 8009268:	f023 0303 	bic.w	r3, r3, #3
 800926c:	3211      	adds	r2, #17
 800926e:	42a2      	cmp	r2, r4
 8009270:	bf88      	it	hi
 8009272:	2300      	movhi	r3, #0
 8009274:	4418      	add	r0, r3
 8009276:	2300      	movs	r3, #0
 8009278:	4288      	cmp	r0, r1
 800927a:	d305      	bcc.n	8009288 <__copybits+0x40>
 800927c:	bd70      	pop	{r4, r5, r6, pc}
 800927e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009282:	f845 6f04 	str.w	r6, [r5, #4]!
 8009286:	e7eb      	b.n	8009260 <__copybits+0x18>
 8009288:	f840 3b04 	str.w	r3, [r0], #4
 800928c:	e7f4      	b.n	8009278 <__copybits+0x30>

0800928e <__any_on>:
 800928e:	f100 0214 	add.w	r2, r0, #20
 8009292:	6900      	ldr	r0, [r0, #16]
 8009294:	114b      	asrs	r3, r1, #5
 8009296:	4298      	cmp	r0, r3
 8009298:	b510      	push	{r4, lr}
 800929a:	db11      	blt.n	80092c0 <__any_on+0x32>
 800929c:	dd0a      	ble.n	80092b4 <__any_on+0x26>
 800929e:	f011 011f 	ands.w	r1, r1, #31
 80092a2:	d007      	beq.n	80092b4 <__any_on+0x26>
 80092a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80092a8:	fa24 f001 	lsr.w	r0, r4, r1
 80092ac:	fa00 f101 	lsl.w	r1, r0, r1
 80092b0:	428c      	cmp	r4, r1
 80092b2:	d10b      	bne.n	80092cc <__any_on+0x3e>
 80092b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d803      	bhi.n	80092c4 <__any_on+0x36>
 80092bc:	2000      	movs	r0, #0
 80092be:	bd10      	pop	{r4, pc}
 80092c0:	4603      	mov	r3, r0
 80092c2:	e7f7      	b.n	80092b4 <__any_on+0x26>
 80092c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80092c8:	2900      	cmp	r1, #0
 80092ca:	d0f5      	beq.n	80092b8 <__any_on+0x2a>
 80092cc:	2001      	movs	r0, #1
 80092ce:	e7f6      	b.n	80092be <__any_on+0x30>

080092d0 <_calloc_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	fb02 f501 	mul.w	r5, r2, r1
 80092d6:	4629      	mov	r1, r5
 80092d8:	f000 f854 	bl	8009384 <_malloc_r>
 80092dc:	4604      	mov	r4, r0
 80092de:	b118      	cbz	r0, 80092e8 <_calloc_r+0x18>
 80092e0:	462a      	mov	r2, r5
 80092e2:	2100      	movs	r1, #0
 80092e4:	f7fd fff2 	bl	80072cc <memset>
 80092e8:	4620      	mov	r0, r4
 80092ea:	bd38      	pop	{r3, r4, r5, pc}

080092ec <_free_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4605      	mov	r5, r0
 80092f0:	2900      	cmp	r1, #0
 80092f2:	d043      	beq.n	800937c <_free_r+0x90>
 80092f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092f8:	1f0c      	subs	r4, r1, #4
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	bfb8      	it	lt
 80092fe:	18e4      	addlt	r4, r4, r3
 8009300:	f001 f82c 	bl	800a35c <__malloc_lock>
 8009304:	4a1e      	ldr	r2, [pc, #120]	; (8009380 <_free_r+0x94>)
 8009306:	6813      	ldr	r3, [r2, #0]
 8009308:	4610      	mov	r0, r2
 800930a:	b933      	cbnz	r3, 800931a <_free_r+0x2e>
 800930c:	6063      	str	r3, [r4, #4]
 800930e:	6014      	str	r4, [r2, #0]
 8009310:	4628      	mov	r0, r5
 8009312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009316:	f001 b827 	b.w	800a368 <__malloc_unlock>
 800931a:	42a3      	cmp	r3, r4
 800931c:	d90a      	bls.n	8009334 <_free_r+0x48>
 800931e:	6821      	ldr	r1, [r4, #0]
 8009320:	1862      	adds	r2, r4, r1
 8009322:	4293      	cmp	r3, r2
 8009324:	bf01      	itttt	eq
 8009326:	681a      	ldreq	r2, [r3, #0]
 8009328:	685b      	ldreq	r3, [r3, #4]
 800932a:	1852      	addeq	r2, r2, r1
 800932c:	6022      	streq	r2, [r4, #0]
 800932e:	6063      	str	r3, [r4, #4]
 8009330:	6004      	str	r4, [r0, #0]
 8009332:	e7ed      	b.n	8009310 <_free_r+0x24>
 8009334:	461a      	mov	r2, r3
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	b10b      	cbz	r3, 800933e <_free_r+0x52>
 800933a:	42a3      	cmp	r3, r4
 800933c:	d9fa      	bls.n	8009334 <_free_r+0x48>
 800933e:	6811      	ldr	r1, [r2, #0]
 8009340:	1850      	adds	r0, r2, r1
 8009342:	42a0      	cmp	r0, r4
 8009344:	d10b      	bne.n	800935e <_free_r+0x72>
 8009346:	6820      	ldr	r0, [r4, #0]
 8009348:	4401      	add	r1, r0
 800934a:	1850      	adds	r0, r2, r1
 800934c:	4283      	cmp	r3, r0
 800934e:	6011      	str	r1, [r2, #0]
 8009350:	d1de      	bne.n	8009310 <_free_r+0x24>
 8009352:	6818      	ldr	r0, [r3, #0]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	4401      	add	r1, r0
 8009358:	6011      	str	r1, [r2, #0]
 800935a:	6053      	str	r3, [r2, #4]
 800935c:	e7d8      	b.n	8009310 <_free_r+0x24>
 800935e:	d902      	bls.n	8009366 <_free_r+0x7a>
 8009360:	230c      	movs	r3, #12
 8009362:	602b      	str	r3, [r5, #0]
 8009364:	e7d4      	b.n	8009310 <_free_r+0x24>
 8009366:	6820      	ldr	r0, [r4, #0]
 8009368:	1821      	adds	r1, r4, r0
 800936a:	428b      	cmp	r3, r1
 800936c:	bf01      	itttt	eq
 800936e:	6819      	ldreq	r1, [r3, #0]
 8009370:	685b      	ldreq	r3, [r3, #4]
 8009372:	1809      	addeq	r1, r1, r0
 8009374:	6021      	streq	r1, [r4, #0]
 8009376:	6063      	str	r3, [r4, #4]
 8009378:	6054      	str	r4, [r2, #4]
 800937a:	e7c9      	b.n	8009310 <_free_r+0x24>
 800937c:	bd38      	pop	{r3, r4, r5, pc}
 800937e:	bf00      	nop
 8009380:	20007ae8 	.word	0x20007ae8

08009384 <_malloc_r>:
 8009384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009386:	1ccd      	adds	r5, r1, #3
 8009388:	f025 0503 	bic.w	r5, r5, #3
 800938c:	3508      	adds	r5, #8
 800938e:	2d0c      	cmp	r5, #12
 8009390:	bf38      	it	cc
 8009392:	250c      	movcc	r5, #12
 8009394:	2d00      	cmp	r5, #0
 8009396:	4606      	mov	r6, r0
 8009398:	db01      	blt.n	800939e <_malloc_r+0x1a>
 800939a:	42a9      	cmp	r1, r5
 800939c:	d903      	bls.n	80093a6 <_malloc_r+0x22>
 800939e:	230c      	movs	r3, #12
 80093a0:	6033      	str	r3, [r6, #0]
 80093a2:	2000      	movs	r0, #0
 80093a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093a6:	f000 ffd9 	bl	800a35c <__malloc_lock>
 80093aa:	4921      	ldr	r1, [pc, #132]	; (8009430 <_malloc_r+0xac>)
 80093ac:	680a      	ldr	r2, [r1, #0]
 80093ae:	4614      	mov	r4, r2
 80093b0:	b99c      	cbnz	r4, 80093da <_malloc_r+0x56>
 80093b2:	4f20      	ldr	r7, [pc, #128]	; (8009434 <_malloc_r+0xb0>)
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	b923      	cbnz	r3, 80093c2 <_malloc_r+0x3e>
 80093b8:	4621      	mov	r1, r4
 80093ba:	4630      	mov	r0, r6
 80093bc:	f000 fc8c 	bl	8009cd8 <_sbrk_r>
 80093c0:	6038      	str	r0, [r7, #0]
 80093c2:	4629      	mov	r1, r5
 80093c4:	4630      	mov	r0, r6
 80093c6:	f000 fc87 	bl	8009cd8 <_sbrk_r>
 80093ca:	1c43      	adds	r3, r0, #1
 80093cc:	d123      	bne.n	8009416 <_malloc_r+0x92>
 80093ce:	230c      	movs	r3, #12
 80093d0:	4630      	mov	r0, r6
 80093d2:	6033      	str	r3, [r6, #0]
 80093d4:	f000 ffc8 	bl	800a368 <__malloc_unlock>
 80093d8:	e7e3      	b.n	80093a2 <_malloc_r+0x1e>
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	1b5b      	subs	r3, r3, r5
 80093de:	d417      	bmi.n	8009410 <_malloc_r+0x8c>
 80093e0:	2b0b      	cmp	r3, #11
 80093e2:	d903      	bls.n	80093ec <_malloc_r+0x68>
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	441c      	add	r4, r3
 80093e8:	6025      	str	r5, [r4, #0]
 80093ea:	e004      	b.n	80093f6 <_malloc_r+0x72>
 80093ec:	6863      	ldr	r3, [r4, #4]
 80093ee:	42a2      	cmp	r2, r4
 80093f0:	bf0c      	ite	eq
 80093f2:	600b      	streq	r3, [r1, #0]
 80093f4:	6053      	strne	r3, [r2, #4]
 80093f6:	4630      	mov	r0, r6
 80093f8:	f000 ffb6 	bl	800a368 <__malloc_unlock>
 80093fc:	f104 000b 	add.w	r0, r4, #11
 8009400:	1d23      	adds	r3, r4, #4
 8009402:	f020 0007 	bic.w	r0, r0, #7
 8009406:	1ac2      	subs	r2, r0, r3
 8009408:	d0cc      	beq.n	80093a4 <_malloc_r+0x20>
 800940a:	1a1b      	subs	r3, r3, r0
 800940c:	50a3      	str	r3, [r4, r2]
 800940e:	e7c9      	b.n	80093a4 <_malloc_r+0x20>
 8009410:	4622      	mov	r2, r4
 8009412:	6864      	ldr	r4, [r4, #4]
 8009414:	e7cc      	b.n	80093b0 <_malloc_r+0x2c>
 8009416:	1cc4      	adds	r4, r0, #3
 8009418:	f024 0403 	bic.w	r4, r4, #3
 800941c:	42a0      	cmp	r0, r4
 800941e:	d0e3      	beq.n	80093e8 <_malloc_r+0x64>
 8009420:	1a21      	subs	r1, r4, r0
 8009422:	4630      	mov	r0, r6
 8009424:	f000 fc58 	bl	8009cd8 <_sbrk_r>
 8009428:	3001      	adds	r0, #1
 800942a:	d1dd      	bne.n	80093e8 <_malloc_r+0x64>
 800942c:	e7cf      	b.n	80093ce <_malloc_r+0x4a>
 800942e:	bf00      	nop
 8009430:	20007ae8 	.word	0x20007ae8
 8009434:	20007aec 	.word	0x20007aec

08009438 <__ssputs_r>:
 8009438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800943c:	688e      	ldr	r6, [r1, #8]
 800943e:	4682      	mov	sl, r0
 8009440:	429e      	cmp	r6, r3
 8009442:	460c      	mov	r4, r1
 8009444:	4690      	mov	r8, r2
 8009446:	461f      	mov	r7, r3
 8009448:	d838      	bhi.n	80094bc <__ssputs_r+0x84>
 800944a:	898a      	ldrh	r2, [r1, #12]
 800944c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009450:	d032      	beq.n	80094b8 <__ssputs_r+0x80>
 8009452:	6825      	ldr	r5, [r4, #0]
 8009454:	6909      	ldr	r1, [r1, #16]
 8009456:	3301      	adds	r3, #1
 8009458:	eba5 0901 	sub.w	r9, r5, r1
 800945c:	6965      	ldr	r5, [r4, #20]
 800945e:	444b      	add	r3, r9
 8009460:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009464:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009468:	106d      	asrs	r5, r5, #1
 800946a:	429d      	cmp	r5, r3
 800946c:	bf38      	it	cc
 800946e:	461d      	movcc	r5, r3
 8009470:	0553      	lsls	r3, r2, #21
 8009472:	d531      	bpl.n	80094d8 <__ssputs_r+0xa0>
 8009474:	4629      	mov	r1, r5
 8009476:	f7ff ff85 	bl	8009384 <_malloc_r>
 800947a:	4606      	mov	r6, r0
 800947c:	b950      	cbnz	r0, 8009494 <__ssputs_r+0x5c>
 800947e:	230c      	movs	r3, #12
 8009480:	f04f 30ff 	mov.w	r0, #4294967295
 8009484:	f8ca 3000 	str.w	r3, [sl]
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800948e:	81a3      	strh	r3, [r4, #12]
 8009490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009494:	464a      	mov	r2, r9
 8009496:	6921      	ldr	r1, [r4, #16]
 8009498:	f7fd ff0a 	bl	80072b0 <memcpy>
 800949c:	89a3      	ldrh	r3, [r4, #12]
 800949e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094a6:	81a3      	strh	r3, [r4, #12]
 80094a8:	6126      	str	r6, [r4, #16]
 80094aa:	444e      	add	r6, r9
 80094ac:	6026      	str	r6, [r4, #0]
 80094ae:	463e      	mov	r6, r7
 80094b0:	6165      	str	r5, [r4, #20]
 80094b2:	eba5 0509 	sub.w	r5, r5, r9
 80094b6:	60a5      	str	r5, [r4, #8]
 80094b8:	42be      	cmp	r6, r7
 80094ba:	d900      	bls.n	80094be <__ssputs_r+0x86>
 80094bc:	463e      	mov	r6, r7
 80094be:	4632      	mov	r2, r6
 80094c0:	4641      	mov	r1, r8
 80094c2:	6820      	ldr	r0, [r4, #0]
 80094c4:	f000 ff30 	bl	800a328 <memmove>
 80094c8:	68a3      	ldr	r3, [r4, #8]
 80094ca:	6822      	ldr	r2, [r4, #0]
 80094cc:	1b9b      	subs	r3, r3, r6
 80094ce:	4432      	add	r2, r6
 80094d0:	2000      	movs	r0, #0
 80094d2:	60a3      	str	r3, [r4, #8]
 80094d4:	6022      	str	r2, [r4, #0]
 80094d6:	e7db      	b.n	8009490 <__ssputs_r+0x58>
 80094d8:	462a      	mov	r2, r5
 80094da:	f000 ff4b 	bl	800a374 <_realloc_r>
 80094de:	4606      	mov	r6, r0
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d1e1      	bne.n	80094a8 <__ssputs_r+0x70>
 80094e4:	4650      	mov	r0, sl
 80094e6:	6921      	ldr	r1, [r4, #16]
 80094e8:	f7ff ff00 	bl	80092ec <_free_r>
 80094ec:	e7c7      	b.n	800947e <__ssputs_r+0x46>
	...

080094f0 <_svfiprintf_r>:
 80094f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f4:	4698      	mov	r8, r3
 80094f6:	898b      	ldrh	r3, [r1, #12]
 80094f8:	4607      	mov	r7, r0
 80094fa:	061b      	lsls	r3, r3, #24
 80094fc:	460d      	mov	r5, r1
 80094fe:	4614      	mov	r4, r2
 8009500:	b09d      	sub	sp, #116	; 0x74
 8009502:	d50e      	bpl.n	8009522 <_svfiprintf_r+0x32>
 8009504:	690b      	ldr	r3, [r1, #16]
 8009506:	b963      	cbnz	r3, 8009522 <_svfiprintf_r+0x32>
 8009508:	2140      	movs	r1, #64	; 0x40
 800950a:	f7ff ff3b 	bl	8009384 <_malloc_r>
 800950e:	6028      	str	r0, [r5, #0]
 8009510:	6128      	str	r0, [r5, #16]
 8009512:	b920      	cbnz	r0, 800951e <_svfiprintf_r+0x2e>
 8009514:	230c      	movs	r3, #12
 8009516:	603b      	str	r3, [r7, #0]
 8009518:	f04f 30ff 	mov.w	r0, #4294967295
 800951c:	e0d1      	b.n	80096c2 <_svfiprintf_r+0x1d2>
 800951e:	2340      	movs	r3, #64	; 0x40
 8009520:	616b      	str	r3, [r5, #20]
 8009522:	2300      	movs	r3, #0
 8009524:	9309      	str	r3, [sp, #36]	; 0x24
 8009526:	2320      	movs	r3, #32
 8009528:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800952c:	2330      	movs	r3, #48	; 0x30
 800952e:	f04f 0901 	mov.w	r9, #1
 8009532:	f8cd 800c 	str.w	r8, [sp, #12]
 8009536:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80096dc <_svfiprintf_r+0x1ec>
 800953a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800953e:	4623      	mov	r3, r4
 8009540:	469a      	mov	sl, r3
 8009542:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009546:	b10a      	cbz	r2, 800954c <_svfiprintf_r+0x5c>
 8009548:	2a25      	cmp	r2, #37	; 0x25
 800954a:	d1f9      	bne.n	8009540 <_svfiprintf_r+0x50>
 800954c:	ebba 0b04 	subs.w	fp, sl, r4
 8009550:	d00b      	beq.n	800956a <_svfiprintf_r+0x7a>
 8009552:	465b      	mov	r3, fp
 8009554:	4622      	mov	r2, r4
 8009556:	4629      	mov	r1, r5
 8009558:	4638      	mov	r0, r7
 800955a:	f7ff ff6d 	bl	8009438 <__ssputs_r>
 800955e:	3001      	adds	r0, #1
 8009560:	f000 80aa 	beq.w	80096b8 <_svfiprintf_r+0x1c8>
 8009564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009566:	445a      	add	r2, fp
 8009568:	9209      	str	r2, [sp, #36]	; 0x24
 800956a:	f89a 3000 	ldrb.w	r3, [sl]
 800956e:	2b00      	cmp	r3, #0
 8009570:	f000 80a2 	beq.w	80096b8 <_svfiprintf_r+0x1c8>
 8009574:	2300      	movs	r3, #0
 8009576:	f04f 32ff 	mov.w	r2, #4294967295
 800957a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800957e:	f10a 0a01 	add.w	sl, sl, #1
 8009582:	9304      	str	r3, [sp, #16]
 8009584:	9307      	str	r3, [sp, #28]
 8009586:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800958a:	931a      	str	r3, [sp, #104]	; 0x68
 800958c:	4654      	mov	r4, sl
 800958e:	2205      	movs	r2, #5
 8009590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009594:	4851      	ldr	r0, [pc, #324]	; (80096dc <_svfiprintf_r+0x1ec>)
 8009596:	f000 feb9 	bl	800a30c <memchr>
 800959a:	9a04      	ldr	r2, [sp, #16]
 800959c:	b9d8      	cbnz	r0, 80095d6 <_svfiprintf_r+0xe6>
 800959e:	06d0      	lsls	r0, r2, #27
 80095a0:	bf44      	itt	mi
 80095a2:	2320      	movmi	r3, #32
 80095a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095a8:	0711      	lsls	r1, r2, #28
 80095aa:	bf44      	itt	mi
 80095ac:	232b      	movmi	r3, #43	; 0x2b
 80095ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095b2:	f89a 3000 	ldrb.w	r3, [sl]
 80095b6:	2b2a      	cmp	r3, #42	; 0x2a
 80095b8:	d015      	beq.n	80095e6 <_svfiprintf_r+0xf6>
 80095ba:	4654      	mov	r4, sl
 80095bc:	2000      	movs	r0, #0
 80095be:	f04f 0c0a 	mov.w	ip, #10
 80095c2:	9a07      	ldr	r2, [sp, #28]
 80095c4:	4621      	mov	r1, r4
 80095c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095ca:	3b30      	subs	r3, #48	; 0x30
 80095cc:	2b09      	cmp	r3, #9
 80095ce:	d94e      	bls.n	800966e <_svfiprintf_r+0x17e>
 80095d0:	b1b0      	cbz	r0, 8009600 <_svfiprintf_r+0x110>
 80095d2:	9207      	str	r2, [sp, #28]
 80095d4:	e014      	b.n	8009600 <_svfiprintf_r+0x110>
 80095d6:	eba0 0308 	sub.w	r3, r0, r8
 80095da:	fa09 f303 	lsl.w	r3, r9, r3
 80095de:	4313      	orrs	r3, r2
 80095e0:	46a2      	mov	sl, r4
 80095e2:	9304      	str	r3, [sp, #16]
 80095e4:	e7d2      	b.n	800958c <_svfiprintf_r+0x9c>
 80095e6:	9b03      	ldr	r3, [sp, #12]
 80095e8:	1d19      	adds	r1, r3, #4
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	9103      	str	r1, [sp, #12]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	bfbb      	ittet	lt
 80095f2:	425b      	neglt	r3, r3
 80095f4:	f042 0202 	orrlt.w	r2, r2, #2
 80095f8:	9307      	strge	r3, [sp, #28]
 80095fa:	9307      	strlt	r3, [sp, #28]
 80095fc:	bfb8      	it	lt
 80095fe:	9204      	strlt	r2, [sp, #16]
 8009600:	7823      	ldrb	r3, [r4, #0]
 8009602:	2b2e      	cmp	r3, #46	; 0x2e
 8009604:	d10c      	bne.n	8009620 <_svfiprintf_r+0x130>
 8009606:	7863      	ldrb	r3, [r4, #1]
 8009608:	2b2a      	cmp	r3, #42	; 0x2a
 800960a:	d135      	bne.n	8009678 <_svfiprintf_r+0x188>
 800960c:	9b03      	ldr	r3, [sp, #12]
 800960e:	3402      	adds	r4, #2
 8009610:	1d1a      	adds	r2, r3, #4
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	9203      	str	r2, [sp, #12]
 8009616:	2b00      	cmp	r3, #0
 8009618:	bfb8      	it	lt
 800961a:	f04f 33ff 	movlt.w	r3, #4294967295
 800961e:	9305      	str	r3, [sp, #20]
 8009620:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80096ec <_svfiprintf_r+0x1fc>
 8009624:	2203      	movs	r2, #3
 8009626:	4650      	mov	r0, sl
 8009628:	7821      	ldrb	r1, [r4, #0]
 800962a:	f000 fe6f 	bl	800a30c <memchr>
 800962e:	b140      	cbz	r0, 8009642 <_svfiprintf_r+0x152>
 8009630:	2340      	movs	r3, #64	; 0x40
 8009632:	eba0 000a 	sub.w	r0, r0, sl
 8009636:	fa03 f000 	lsl.w	r0, r3, r0
 800963a:	9b04      	ldr	r3, [sp, #16]
 800963c:	3401      	adds	r4, #1
 800963e:	4303      	orrs	r3, r0
 8009640:	9304      	str	r3, [sp, #16]
 8009642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009646:	2206      	movs	r2, #6
 8009648:	4825      	ldr	r0, [pc, #148]	; (80096e0 <_svfiprintf_r+0x1f0>)
 800964a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800964e:	f000 fe5d 	bl	800a30c <memchr>
 8009652:	2800      	cmp	r0, #0
 8009654:	d038      	beq.n	80096c8 <_svfiprintf_r+0x1d8>
 8009656:	4b23      	ldr	r3, [pc, #140]	; (80096e4 <_svfiprintf_r+0x1f4>)
 8009658:	bb1b      	cbnz	r3, 80096a2 <_svfiprintf_r+0x1b2>
 800965a:	9b03      	ldr	r3, [sp, #12]
 800965c:	3307      	adds	r3, #7
 800965e:	f023 0307 	bic.w	r3, r3, #7
 8009662:	3308      	adds	r3, #8
 8009664:	9303      	str	r3, [sp, #12]
 8009666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009668:	4433      	add	r3, r6
 800966a:	9309      	str	r3, [sp, #36]	; 0x24
 800966c:	e767      	b.n	800953e <_svfiprintf_r+0x4e>
 800966e:	460c      	mov	r4, r1
 8009670:	2001      	movs	r0, #1
 8009672:	fb0c 3202 	mla	r2, ip, r2, r3
 8009676:	e7a5      	b.n	80095c4 <_svfiprintf_r+0xd4>
 8009678:	2300      	movs	r3, #0
 800967a:	f04f 0c0a 	mov.w	ip, #10
 800967e:	4619      	mov	r1, r3
 8009680:	3401      	adds	r4, #1
 8009682:	9305      	str	r3, [sp, #20]
 8009684:	4620      	mov	r0, r4
 8009686:	f810 2b01 	ldrb.w	r2, [r0], #1
 800968a:	3a30      	subs	r2, #48	; 0x30
 800968c:	2a09      	cmp	r2, #9
 800968e:	d903      	bls.n	8009698 <_svfiprintf_r+0x1a8>
 8009690:	2b00      	cmp	r3, #0
 8009692:	d0c5      	beq.n	8009620 <_svfiprintf_r+0x130>
 8009694:	9105      	str	r1, [sp, #20]
 8009696:	e7c3      	b.n	8009620 <_svfiprintf_r+0x130>
 8009698:	4604      	mov	r4, r0
 800969a:	2301      	movs	r3, #1
 800969c:	fb0c 2101 	mla	r1, ip, r1, r2
 80096a0:	e7f0      	b.n	8009684 <_svfiprintf_r+0x194>
 80096a2:	ab03      	add	r3, sp, #12
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	462a      	mov	r2, r5
 80096a8:	4638      	mov	r0, r7
 80096aa:	4b0f      	ldr	r3, [pc, #60]	; (80096e8 <_svfiprintf_r+0x1f8>)
 80096ac:	a904      	add	r1, sp, #16
 80096ae:	f3af 8000 	nop.w
 80096b2:	1c42      	adds	r2, r0, #1
 80096b4:	4606      	mov	r6, r0
 80096b6:	d1d6      	bne.n	8009666 <_svfiprintf_r+0x176>
 80096b8:	89ab      	ldrh	r3, [r5, #12]
 80096ba:	065b      	lsls	r3, r3, #25
 80096bc:	f53f af2c 	bmi.w	8009518 <_svfiprintf_r+0x28>
 80096c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096c2:	b01d      	add	sp, #116	; 0x74
 80096c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c8:	ab03      	add	r3, sp, #12
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	462a      	mov	r2, r5
 80096ce:	4638      	mov	r0, r7
 80096d0:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <_svfiprintf_r+0x1f8>)
 80096d2:	a904      	add	r1, sp, #16
 80096d4:	f000 f9d4 	bl	8009a80 <_printf_i>
 80096d8:	e7eb      	b.n	80096b2 <_svfiprintf_r+0x1c2>
 80096da:	bf00      	nop
 80096dc:	0800abdc 	.word	0x0800abdc
 80096e0:	0800abe6 	.word	0x0800abe6
 80096e4:	00000000 	.word	0x00000000
 80096e8:	08009439 	.word	0x08009439
 80096ec:	0800abe2 	.word	0x0800abe2

080096f0 <__sfputc_r>:
 80096f0:	6893      	ldr	r3, [r2, #8]
 80096f2:	b410      	push	{r4}
 80096f4:	3b01      	subs	r3, #1
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	6093      	str	r3, [r2, #8]
 80096fa:	da07      	bge.n	800970c <__sfputc_r+0x1c>
 80096fc:	6994      	ldr	r4, [r2, #24]
 80096fe:	42a3      	cmp	r3, r4
 8009700:	db01      	blt.n	8009706 <__sfputc_r+0x16>
 8009702:	290a      	cmp	r1, #10
 8009704:	d102      	bne.n	800970c <__sfputc_r+0x1c>
 8009706:	bc10      	pop	{r4}
 8009708:	f000 bb0c 	b.w	8009d24 <__swbuf_r>
 800970c:	6813      	ldr	r3, [r2, #0]
 800970e:	1c58      	adds	r0, r3, #1
 8009710:	6010      	str	r0, [r2, #0]
 8009712:	7019      	strb	r1, [r3, #0]
 8009714:	4608      	mov	r0, r1
 8009716:	bc10      	pop	{r4}
 8009718:	4770      	bx	lr

0800971a <__sfputs_r>:
 800971a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971c:	4606      	mov	r6, r0
 800971e:	460f      	mov	r7, r1
 8009720:	4614      	mov	r4, r2
 8009722:	18d5      	adds	r5, r2, r3
 8009724:	42ac      	cmp	r4, r5
 8009726:	d101      	bne.n	800972c <__sfputs_r+0x12>
 8009728:	2000      	movs	r0, #0
 800972a:	e007      	b.n	800973c <__sfputs_r+0x22>
 800972c:	463a      	mov	r2, r7
 800972e:	4630      	mov	r0, r6
 8009730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009734:	f7ff ffdc 	bl	80096f0 <__sfputc_r>
 8009738:	1c43      	adds	r3, r0, #1
 800973a:	d1f3      	bne.n	8009724 <__sfputs_r+0xa>
 800973c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009740 <_vfiprintf_r>:
 8009740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	460d      	mov	r5, r1
 8009746:	4614      	mov	r4, r2
 8009748:	4698      	mov	r8, r3
 800974a:	4606      	mov	r6, r0
 800974c:	b09d      	sub	sp, #116	; 0x74
 800974e:	b118      	cbz	r0, 8009758 <_vfiprintf_r+0x18>
 8009750:	6983      	ldr	r3, [r0, #24]
 8009752:	b90b      	cbnz	r3, 8009758 <_vfiprintf_r+0x18>
 8009754:	f000 fcd6 	bl	800a104 <__sinit>
 8009758:	4b89      	ldr	r3, [pc, #548]	; (8009980 <_vfiprintf_r+0x240>)
 800975a:	429d      	cmp	r5, r3
 800975c:	d11b      	bne.n	8009796 <_vfiprintf_r+0x56>
 800975e:	6875      	ldr	r5, [r6, #4]
 8009760:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009762:	07d9      	lsls	r1, r3, #31
 8009764:	d405      	bmi.n	8009772 <_vfiprintf_r+0x32>
 8009766:	89ab      	ldrh	r3, [r5, #12]
 8009768:	059a      	lsls	r2, r3, #22
 800976a:	d402      	bmi.n	8009772 <_vfiprintf_r+0x32>
 800976c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800976e:	f000 fd67 	bl	800a240 <__retarget_lock_acquire_recursive>
 8009772:	89ab      	ldrh	r3, [r5, #12]
 8009774:	071b      	lsls	r3, r3, #28
 8009776:	d501      	bpl.n	800977c <_vfiprintf_r+0x3c>
 8009778:	692b      	ldr	r3, [r5, #16]
 800977a:	b9eb      	cbnz	r3, 80097b8 <_vfiprintf_r+0x78>
 800977c:	4629      	mov	r1, r5
 800977e:	4630      	mov	r0, r6
 8009780:	f000 fb30 	bl	8009de4 <__swsetup_r>
 8009784:	b1c0      	cbz	r0, 80097b8 <_vfiprintf_r+0x78>
 8009786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009788:	07dc      	lsls	r4, r3, #31
 800978a:	d50e      	bpl.n	80097aa <_vfiprintf_r+0x6a>
 800978c:	f04f 30ff 	mov.w	r0, #4294967295
 8009790:	b01d      	add	sp, #116	; 0x74
 8009792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009796:	4b7b      	ldr	r3, [pc, #492]	; (8009984 <_vfiprintf_r+0x244>)
 8009798:	429d      	cmp	r5, r3
 800979a:	d101      	bne.n	80097a0 <_vfiprintf_r+0x60>
 800979c:	68b5      	ldr	r5, [r6, #8]
 800979e:	e7df      	b.n	8009760 <_vfiprintf_r+0x20>
 80097a0:	4b79      	ldr	r3, [pc, #484]	; (8009988 <_vfiprintf_r+0x248>)
 80097a2:	429d      	cmp	r5, r3
 80097a4:	bf08      	it	eq
 80097a6:	68f5      	ldreq	r5, [r6, #12]
 80097a8:	e7da      	b.n	8009760 <_vfiprintf_r+0x20>
 80097aa:	89ab      	ldrh	r3, [r5, #12]
 80097ac:	0598      	lsls	r0, r3, #22
 80097ae:	d4ed      	bmi.n	800978c <_vfiprintf_r+0x4c>
 80097b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097b2:	f000 fd46 	bl	800a242 <__retarget_lock_release_recursive>
 80097b6:	e7e9      	b.n	800978c <_vfiprintf_r+0x4c>
 80097b8:	2300      	movs	r3, #0
 80097ba:	9309      	str	r3, [sp, #36]	; 0x24
 80097bc:	2320      	movs	r3, #32
 80097be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097c2:	2330      	movs	r3, #48	; 0x30
 80097c4:	f04f 0901 	mov.w	r9, #1
 80097c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80097cc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800998c <_vfiprintf_r+0x24c>
 80097d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097d4:	4623      	mov	r3, r4
 80097d6:	469a      	mov	sl, r3
 80097d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097dc:	b10a      	cbz	r2, 80097e2 <_vfiprintf_r+0xa2>
 80097de:	2a25      	cmp	r2, #37	; 0x25
 80097e0:	d1f9      	bne.n	80097d6 <_vfiprintf_r+0x96>
 80097e2:	ebba 0b04 	subs.w	fp, sl, r4
 80097e6:	d00b      	beq.n	8009800 <_vfiprintf_r+0xc0>
 80097e8:	465b      	mov	r3, fp
 80097ea:	4622      	mov	r2, r4
 80097ec:	4629      	mov	r1, r5
 80097ee:	4630      	mov	r0, r6
 80097f0:	f7ff ff93 	bl	800971a <__sfputs_r>
 80097f4:	3001      	adds	r0, #1
 80097f6:	f000 80aa 	beq.w	800994e <_vfiprintf_r+0x20e>
 80097fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097fc:	445a      	add	r2, fp
 80097fe:	9209      	str	r2, [sp, #36]	; 0x24
 8009800:	f89a 3000 	ldrb.w	r3, [sl]
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 80a2 	beq.w	800994e <_vfiprintf_r+0x20e>
 800980a:	2300      	movs	r3, #0
 800980c:	f04f 32ff 	mov.w	r2, #4294967295
 8009810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009814:	f10a 0a01 	add.w	sl, sl, #1
 8009818:	9304      	str	r3, [sp, #16]
 800981a:	9307      	str	r3, [sp, #28]
 800981c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009820:	931a      	str	r3, [sp, #104]	; 0x68
 8009822:	4654      	mov	r4, sl
 8009824:	2205      	movs	r2, #5
 8009826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800982a:	4858      	ldr	r0, [pc, #352]	; (800998c <_vfiprintf_r+0x24c>)
 800982c:	f000 fd6e 	bl	800a30c <memchr>
 8009830:	9a04      	ldr	r2, [sp, #16]
 8009832:	b9d8      	cbnz	r0, 800986c <_vfiprintf_r+0x12c>
 8009834:	06d1      	lsls	r1, r2, #27
 8009836:	bf44      	itt	mi
 8009838:	2320      	movmi	r3, #32
 800983a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800983e:	0713      	lsls	r3, r2, #28
 8009840:	bf44      	itt	mi
 8009842:	232b      	movmi	r3, #43	; 0x2b
 8009844:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009848:	f89a 3000 	ldrb.w	r3, [sl]
 800984c:	2b2a      	cmp	r3, #42	; 0x2a
 800984e:	d015      	beq.n	800987c <_vfiprintf_r+0x13c>
 8009850:	4654      	mov	r4, sl
 8009852:	2000      	movs	r0, #0
 8009854:	f04f 0c0a 	mov.w	ip, #10
 8009858:	9a07      	ldr	r2, [sp, #28]
 800985a:	4621      	mov	r1, r4
 800985c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009860:	3b30      	subs	r3, #48	; 0x30
 8009862:	2b09      	cmp	r3, #9
 8009864:	d94e      	bls.n	8009904 <_vfiprintf_r+0x1c4>
 8009866:	b1b0      	cbz	r0, 8009896 <_vfiprintf_r+0x156>
 8009868:	9207      	str	r2, [sp, #28]
 800986a:	e014      	b.n	8009896 <_vfiprintf_r+0x156>
 800986c:	eba0 0308 	sub.w	r3, r0, r8
 8009870:	fa09 f303 	lsl.w	r3, r9, r3
 8009874:	4313      	orrs	r3, r2
 8009876:	46a2      	mov	sl, r4
 8009878:	9304      	str	r3, [sp, #16]
 800987a:	e7d2      	b.n	8009822 <_vfiprintf_r+0xe2>
 800987c:	9b03      	ldr	r3, [sp, #12]
 800987e:	1d19      	adds	r1, r3, #4
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	9103      	str	r1, [sp, #12]
 8009884:	2b00      	cmp	r3, #0
 8009886:	bfbb      	ittet	lt
 8009888:	425b      	neglt	r3, r3
 800988a:	f042 0202 	orrlt.w	r2, r2, #2
 800988e:	9307      	strge	r3, [sp, #28]
 8009890:	9307      	strlt	r3, [sp, #28]
 8009892:	bfb8      	it	lt
 8009894:	9204      	strlt	r2, [sp, #16]
 8009896:	7823      	ldrb	r3, [r4, #0]
 8009898:	2b2e      	cmp	r3, #46	; 0x2e
 800989a:	d10c      	bne.n	80098b6 <_vfiprintf_r+0x176>
 800989c:	7863      	ldrb	r3, [r4, #1]
 800989e:	2b2a      	cmp	r3, #42	; 0x2a
 80098a0:	d135      	bne.n	800990e <_vfiprintf_r+0x1ce>
 80098a2:	9b03      	ldr	r3, [sp, #12]
 80098a4:	3402      	adds	r4, #2
 80098a6:	1d1a      	adds	r2, r3, #4
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	9203      	str	r2, [sp, #12]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	bfb8      	it	lt
 80098b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80098b4:	9305      	str	r3, [sp, #20]
 80098b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800999c <_vfiprintf_r+0x25c>
 80098ba:	2203      	movs	r2, #3
 80098bc:	4650      	mov	r0, sl
 80098be:	7821      	ldrb	r1, [r4, #0]
 80098c0:	f000 fd24 	bl	800a30c <memchr>
 80098c4:	b140      	cbz	r0, 80098d8 <_vfiprintf_r+0x198>
 80098c6:	2340      	movs	r3, #64	; 0x40
 80098c8:	eba0 000a 	sub.w	r0, r0, sl
 80098cc:	fa03 f000 	lsl.w	r0, r3, r0
 80098d0:	9b04      	ldr	r3, [sp, #16]
 80098d2:	3401      	adds	r4, #1
 80098d4:	4303      	orrs	r3, r0
 80098d6:	9304      	str	r3, [sp, #16]
 80098d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098dc:	2206      	movs	r2, #6
 80098de:	482c      	ldr	r0, [pc, #176]	; (8009990 <_vfiprintf_r+0x250>)
 80098e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098e4:	f000 fd12 	bl	800a30c <memchr>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d03f      	beq.n	800996c <_vfiprintf_r+0x22c>
 80098ec:	4b29      	ldr	r3, [pc, #164]	; (8009994 <_vfiprintf_r+0x254>)
 80098ee:	bb1b      	cbnz	r3, 8009938 <_vfiprintf_r+0x1f8>
 80098f0:	9b03      	ldr	r3, [sp, #12]
 80098f2:	3307      	adds	r3, #7
 80098f4:	f023 0307 	bic.w	r3, r3, #7
 80098f8:	3308      	adds	r3, #8
 80098fa:	9303      	str	r3, [sp, #12]
 80098fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098fe:	443b      	add	r3, r7
 8009900:	9309      	str	r3, [sp, #36]	; 0x24
 8009902:	e767      	b.n	80097d4 <_vfiprintf_r+0x94>
 8009904:	460c      	mov	r4, r1
 8009906:	2001      	movs	r0, #1
 8009908:	fb0c 3202 	mla	r2, ip, r2, r3
 800990c:	e7a5      	b.n	800985a <_vfiprintf_r+0x11a>
 800990e:	2300      	movs	r3, #0
 8009910:	f04f 0c0a 	mov.w	ip, #10
 8009914:	4619      	mov	r1, r3
 8009916:	3401      	adds	r4, #1
 8009918:	9305      	str	r3, [sp, #20]
 800991a:	4620      	mov	r0, r4
 800991c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009920:	3a30      	subs	r2, #48	; 0x30
 8009922:	2a09      	cmp	r2, #9
 8009924:	d903      	bls.n	800992e <_vfiprintf_r+0x1ee>
 8009926:	2b00      	cmp	r3, #0
 8009928:	d0c5      	beq.n	80098b6 <_vfiprintf_r+0x176>
 800992a:	9105      	str	r1, [sp, #20]
 800992c:	e7c3      	b.n	80098b6 <_vfiprintf_r+0x176>
 800992e:	4604      	mov	r4, r0
 8009930:	2301      	movs	r3, #1
 8009932:	fb0c 2101 	mla	r1, ip, r1, r2
 8009936:	e7f0      	b.n	800991a <_vfiprintf_r+0x1da>
 8009938:	ab03      	add	r3, sp, #12
 800993a:	9300      	str	r3, [sp, #0]
 800993c:	462a      	mov	r2, r5
 800993e:	4630      	mov	r0, r6
 8009940:	4b15      	ldr	r3, [pc, #84]	; (8009998 <_vfiprintf_r+0x258>)
 8009942:	a904      	add	r1, sp, #16
 8009944:	f3af 8000 	nop.w
 8009948:	4607      	mov	r7, r0
 800994a:	1c78      	adds	r0, r7, #1
 800994c:	d1d6      	bne.n	80098fc <_vfiprintf_r+0x1bc>
 800994e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009950:	07d9      	lsls	r1, r3, #31
 8009952:	d405      	bmi.n	8009960 <_vfiprintf_r+0x220>
 8009954:	89ab      	ldrh	r3, [r5, #12]
 8009956:	059a      	lsls	r2, r3, #22
 8009958:	d402      	bmi.n	8009960 <_vfiprintf_r+0x220>
 800995a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800995c:	f000 fc71 	bl	800a242 <__retarget_lock_release_recursive>
 8009960:	89ab      	ldrh	r3, [r5, #12]
 8009962:	065b      	lsls	r3, r3, #25
 8009964:	f53f af12 	bmi.w	800978c <_vfiprintf_r+0x4c>
 8009968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800996a:	e711      	b.n	8009790 <_vfiprintf_r+0x50>
 800996c:	ab03      	add	r3, sp, #12
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	462a      	mov	r2, r5
 8009972:	4630      	mov	r0, r6
 8009974:	4b08      	ldr	r3, [pc, #32]	; (8009998 <_vfiprintf_r+0x258>)
 8009976:	a904      	add	r1, sp, #16
 8009978:	f000 f882 	bl	8009a80 <_printf_i>
 800997c:	e7e4      	b.n	8009948 <_vfiprintf_r+0x208>
 800997e:	bf00      	nop
 8009980:	0800ac30 	.word	0x0800ac30
 8009984:	0800ac50 	.word	0x0800ac50
 8009988:	0800ac10 	.word	0x0800ac10
 800998c:	0800abdc 	.word	0x0800abdc
 8009990:	0800abe6 	.word	0x0800abe6
 8009994:	00000000 	.word	0x00000000
 8009998:	0800971b 	.word	0x0800971b
 800999c:	0800abe2 	.word	0x0800abe2

080099a0 <_printf_common>:
 80099a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099a4:	4616      	mov	r6, r2
 80099a6:	4699      	mov	r9, r3
 80099a8:	688a      	ldr	r2, [r1, #8]
 80099aa:	690b      	ldr	r3, [r1, #16]
 80099ac:	4607      	mov	r7, r0
 80099ae:	4293      	cmp	r3, r2
 80099b0:	bfb8      	it	lt
 80099b2:	4613      	movlt	r3, r2
 80099b4:	6033      	str	r3, [r6, #0]
 80099b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099ba:	460c      	mov	r4, r1
 80099bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099c0:	b10a      	cbz	r2, 80099c6 <_printf_common+0x26>
 80099c2:	3301      	adds	r3, #1
 80099c4:	6033      	str	r3, [r6, #0]
 80099c6:	6823      	ldr	r3, [r4, #0]
 80099c8:	0699      	lsls	r1, r3, #26
 80099ca:	bf42      	ittt	mi
 80099cc:	6833      	ldrmi	r3, [r6, #0]
 80099ce:	3302      	addmi	r3, #2
 80099d0:	6033      	strmi	r3, [r6, #0]
 80099d2:	6825      	ldr	r5, [r4, #0]
 80099d4:	f015 0506 	ands.w	r5, r5, #6
 80099d8:	d106      	bne.n	80099e8 <_printf_common+0x48>
 80099da:	f104 0a19 	add.w	sl, r4, #25
 80099de:	68e3      	ldr	r3, [r4, #12]
 80099e0:	6832      	ldr	r2, [r6, #0]
 80099e2:	1a9b      	subs	r3, r3, r2
 80099e4:	42ab      	cmp	r3, r5
 80099e6:	dc28      	bgt.n	8009a3a <_printf_common+0x9a>
 80099e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099ec:	1e13      	subs	r3, r2, #0
 80099ee:	6822      	ldr	r2, [r4, #0]
 80099f0:	bf18      	it	ne
 80099f2:	2301      	movne	r3, #1
 80099f4:	0692      	lsls	r2, r2, #26
 80099f6:	d42d      	bmi.n	8009a54 <_printf_common+0xb4>
 80099f8:	4649      	mov	r1, r9
 80099fa:	4638      	mov	r0, r7
 80099fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a00:	47c0      	blx	r8
 8009a02:	3001      	adds	r0, #1
 8009a04:	d020      	beq.n	8009a48 <_printf_common+0xa8>
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	68e5      	ldr	r5, [r4, #12]
 8009a0a:	f003 0306 	and.w	r3, r3, #6
 8009a0e:	2b04      	cmp	r3, #4
 8009a10:	bf18      	it	ne
 8009a12:	2500      	movne	r5, #0
 8009a14:	6832      	ldr	r2, [r6, #0]
 8009a16:	f04f 0600 	mov.w	r6, #0
 8009a1a:	68a3      	ldr	r3, [r4, #8]
 8009a1c:	bf08      	it	eq
 8009a1e:	1aad      	subeq	r5, r5, r2
 8009a20:	6922      	ldr	r2, [r4, #16]
 8009a22:	bf08      	it	eq
 8009a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	bfc4      	itt	gt
 8009a2c:	1a9b      	subgt	r3, r3, r2
 8009a2e:	18ed      	addgt	r5, r5, r3
 8009a30:	341a      	adds	r4, #26
 8009a32:	42b5      	cmp	r5, r6
 8009a34:	d11a      	bne.n	8009a6c <_printf_common+0xcc>
 8009a36:	2000      	movs	r0, #0
 8009a38:	e008      	b.n	8009a4c <_printf_common+0xac>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	4652      	mov	r2, sl
 8009a3e:	4649      	mov	r1, r9
 8009a40:	4638      	mov	r0, r7
 8009a42:	47c0      	blx	r8
 8009a44:	3001      	adds	r0, #1
 8009a46:	d103      	bne.n	8009a50 <_printf_common+0xb0>
 8009a48:	f04f 30ff 	mov.w	r0, #4294967295
 8009a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a50:	3501      	adds	r5, #1
 8009a52:	e7c4      	b.n	80099de <_printf_common+0x3e>
 8009a54:	2030      	movs	r0, #48	; 0x30
 8009a56:	18e1      	adds	r1, r4, r3
 8009a58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a5c:	1c5a      	adds	r2, r3, #1
 8009a5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a62:	4422      	add	r2, r4
 8009a64:	3302      	adds	r3, #2
 8009a66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a6a:	e7c5      	b.n	80099f8 <_printf_common+0x58>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	4622      	mov	r2, r4
 8009a70:	4649      	mov	r1, r9
 8009a72:	4638      	mov	r0, r7
 8009a74:	47c0      	blx	r8
 8009a76:	3001      	adds	r0, #1
 8009a78:	d0e6      	beq.n	8009a48 <_printf_common+0xa8>
 8009a7a:	3601      	adds	r6, #1
 8009a7c:	e7d9      	b.n	8009a32 <_printf_common+0x92>
	...

08009a80 <_printf_i>:
 8009a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a84:	460c      	mov	r4, r1
 8009a86:	7e27      	ldrb	r7, [r4, #24]
 8009a88:	4691      	mov	r9, r2
 8009a8a:	2f78      	cmp	r7, #120	; 0x78
 8009a8c:	4680      	mov	r8, r0
 8009a8e:	469a      	mov	sl, r3
 8009a90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009a92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a96:	d807      	bhi.n	8009aa8 <_printf_i+0x28>
 8009a98:	2f62      	cmp	r7, #98	; 0x62
 8009a9a:	d80a      	bhi.n	8009ab2 <_printf_i+0x32>
 8009a9c:	2f00      	cmp	r7, #0
 8009a9e:	f000 80d9 	beq.w	8009c54 <_printf_i+0x1d4>
 8009aa2:	2f58      	cmp	r7, #88	; 0x58
 8009aa4:	f000 80a4 	beq.w	8009bf0 <_printf_i+0x170>
 8009aa8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009aac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ab0:	e03a      	b.n	8009b28 <_printf_i+0xa8>
 8009ab2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ab6:	2b15      	cmp	r3, #21
 8009ab8:	d8f6      	bhi.n	8009aa8 <_printf_i+0x28>
 8009aba:	a001      	add	r0, pc, #4	; (adr r0, 8009ac0 <_printf_i+0x40>)
 8009abc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009ac0:	08009b19 	.word	0x08009b19
 8009ac4:	08009b2d 	.word	0x08009b2d
 8009ac8:	08009aa9 	.word	0x08009aa9
 8009acc:	08009aa9 	.word	0x08009aa9
 8009ad0:	08009aa9 	.word	0x08009aa9
 8009ad4:	08009aa9 	.word	0x08009aa9
 8009ad8:	08009b2d 	.word	0x08009b2d
 8009adc:	08009aa9 	.word	0x08009aa9
 8009ae0:	08009aa9 	.word	0x08009aa9
 8009ae4:	08009aa9 	.word	0x08009aa9
 8009ae8:	08009aa9 	.word	0x08009aa9
 8009aec:	08009c3b 	.word	0x08009c3b
 8009af0:	08009b5d 	.word	0x08009b5d
 8009af4:	08009c1d 	.word	0x08009c1d
 8009af8:	08009aa9 	.word	0x08009aa9
 8009afc:	08009aa9 	.word	0x08009aa9
 8009b00:	08009c5d 	.word	0x08009c5d
 8009b04:	08009aa9 	.word	0x08009aa9
 8009b08:	08009b5d 	.word	0x08009b5d
 8009b0c:	08009aa9 	.word	0x08009aa9
 8009b10:	08009aa9 	.word	0x08009aa9
 8009b14:	08009c25 	.word	0x08009c25
 8009b18:	680b      	ldr	r3, [r1, #0]
 8009b1a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b1e:	1d1a      	adds	r2, r3, #4
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	600a      	str	r2, [r1, #0]
 8009b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b28:	2301      	movs	r3, #1
 8009b2a:	e0a4      	b.n	8009c76 <_printf_i+0x1f6>
 8009b2c:	6825      	ldr	r5, [r4, #0]
 8009b2e:	6808      	ldr	r0, [r1, #0]
 8009b30:	062e      	lsls	r6, r5, #24
 8009b32:	f100 0304 	add.w	r3, r0, #4
 8009b36:	d50a      	bpl.n	8009b4e <_printf_i+0xce>
 8009b38:	6805      	ldr	r5, [r0, #0]
 8009b3a:	600b      	str	r3, [r1, #0]
 8009b3c:	2d00      	cmp	r5, #0
 8009b3e:	da03      	bge.n	8009b48 <_printf_i+0xc8>
 8009b40:	232d      	movs	r3, #45	; 0x2d
 8009b42:	426d      	negs	r5, r5
 8009b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b48:	230a      	movs	r3, #10
 8009b4a:	485e      	ldr	r0, [pc, #376]	; (8009cc4 <_printf_i+0x244>)
 8009b4c:	e019      	b.n	8009b82 <_printf_i+0x102>
 8009b4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009b52:	6805      	ldr	r5, [r0, #0]
 8009b54:	600b      	str	r3, [r1, #0]
 8009b56:	bf18      	it	ne
 8009b58:	b22d      	sxthne	r5, r5
 8009b5a:	e7ef      	b.n	8009b3c <_printf_i+0xbc>
 8009b5c:	680b      	ldr	r3, [r1, #0]
 8009b5e:	6825      	ldr	r5, [r4, #0]
 8009b60:	1d18      	adds	r0, r3, #4
 8009b62:	6008      	str	r0, [r1, #0]
 8009b64:	0628      	lsls	r0, r5, #24
 8009b66:	d501      	bpl.n	8009b6c <_printf_i+0xec>
 8009b68:	681d      	ldr	r5, [r3, #0]
 8009b6a:	e002      	b.n	8009b72 <_printf_i+0xf2>
 8009b6c:	0669      	lsls	r1, r5, #25
 8009b6e:	d5fb      	bpl.n	8009b68 <_printf_i+0xe8>
 8009b70:	881d      	ldrh	r5, [r3, #0]
 8009b72:	2f6f      	cmp	r7, #111	; 0x6f
 8009b74:	bf0c      	ite	eq
 8009b76:	2308      	moveq	r3, #8
 8009b78:	230a      	movne	r3, #10
 8009b7a:	4852      	ldr	r0, [pc, #328]	; (8009cc4 <_printf_i+0x244>)
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b82:	6866      	ldr	r6, [r4, #4]
 8009b84:	2e00      	cmp	r6, #0
 8009b86:	bfa8      	it	ge
 8009b88:	6821      	ldrge	r1, [r4, #0]
 8009b8a:	60a6      	str	r6, [r4, #8]
 8009b8c:	bfa4      	itt	ge
 8009b8e:	f021 0104 	bicge.w	r1, r1, #4
 8009b92:	6021      	strge	r1, [r4, #0]
 8009b94:	b90d      	cbnz	r5, 8009b9a <_printf_i+0x11a>
 8009b96:	2e00      	cmp	r6, #0
 8009b98:	d04d      	beq.n	8009c36 <_printf_i+0x1b6>
 8009b9a:	4616      	mov	r6, r2
 8009b9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ba0:	fb03 5711 	mls	r7, r3, r1, r5
 8009ba4:	5dc7      	ldrb	r7, [r0, r7]
 8009ba6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009baa:	462f      	mov	r7, r5
 8009bac:	42bb      	cmp	r3, r7
 8009bae:	460d      	mov	r5, r1
 8009bb0:	d9f4      	bls.n	8009b9c <_printf_i+0x11c>
 8009bb2:	2b08      	cmp	r3, #8
 8009bb4:	d10b      	bne.n	8009bce <_printf_i+0x14e>
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	07df      	lsls	r7, r3, #31
 8009bba:	d508      	bpl.n	8009bce <_printf_i+0x14e>
 8009bbc:	6923      	ldr	r3, [r4, #16]
 8009bbe:	6861      	ldr	r1, [r4, #4]
 8009bc0:	4299      	cmp	r1, r3
 8009bc2:	bfde      	ittt	le
 8009bc4:	2330      	movle	r3, #48	; 0x30
 8009bc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009bca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009bce:	1b92      	subs	r2, r2, r6
 8009bd0:	6122      	str	r2, [r4, #16]
 8009bd2:	464b      	mov	r3, r9
 8009bd4:	4621      	mov	r1, r4
 8009bd6:	4640      	mov	r0, r8
 8009bd8:	f8cd a000 	str.w	sl, [sp]
 8009bdc:	aa03      	add	r2, sp, #12
 8009bde:	f7ff fedf 	bl	80099a0 <_printf_common>
 8009be2:	3001      	adds	r0, #1
 8009be4:	d14c      	bne.n	8009c80 <_printf_i+0x200>
 8009be6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bea:	b004      	add	sp, #16
 8009bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf0:	4834      	ldr	r0, [pc, #208]	; (8009cc4 <_printf_i+0x244>)
 8009bf2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009bf6:	680e      	ldr	r6, [r1, #0]
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	f856 5b04 	ldr.w	r5, [r6], #4
 8009bfe:	061f      	lsls	r7, r3, #24
 8009c00:	600e      	str	r6, [r1, #0]
 8009c02:	d514      	bpl.n	8009c2e <_printf_i+0x1ae>
 8009c04:	07d9      	lsls	r1, r3, #31
 8009c06:	bf44      	itt	mi
 8009c08:	f043 0320 	orrmi.w	r3, r3, #32
 8009c0c:	6023      	strmi	r3, [r4, #0]
 8009c0e:	b91d      	cbnz	r5, 8009c18 <_printf_i+0x198>
 8009c10:	6823      	ldr	r3, [r4, #0]
 8009c12:	f023 0320 	bic.w	r3, r3, #32
 8009c16:	6023      	str	r3, [r4, #0]
 8009c18:	2310      	movs	r3, #16
 8009c1a:	e7af      	b.n	8009b7c <_printf_i+0xfc>
 8009c1c:	6823      	ldr	r3, [r4, #0]
 8009c1e:	f043 0320 	orr.w	r3, r3, #32
 8009c22:	6023      	str	r3, [r4, #0]
 8009c24:	2378      	movs	r3, #120	; 0x78
 8009c26:	4828      	ldr	r0, [pc, #160]	; (8009cc8 <_printf_i+0x248>)
 8009c28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c2c:	e7e3      	b.n	8009bf6 <_printf_i+0x176>
 8009c2e:	065e      	lsls	r6, r3, #25
 8009c30:	bf48      	it	mi
 8009c32:	b2ad      	uxthmi	r5, r5
 8009c34:	e7e6      	b.n	8009c04 <_printf_i+0x184>
 8009c36:	4616      	mov	r6, r2
 8009c38:	e7bb      	b.n	8009bb2 <_printf_i+0x132>
 8009c3a:	680b      	ldr	r3, [r1, #0]
 8009c3c:	6826      	ldr	r6, [r4, #0]
 8009c3e:	1d1d      	adds	r5, r3, #4
 8009c40:	6960      	ldr	r0, [r4, #20]
 8009c42:	600d      	str	r5, [r1, #0]
 8009c44:	0635      	lsls	r5, r6, #24
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	d501      	bpl.n	8009c4e <_printf_i+0x1ce>
 8009c4a:	6018      	str	r0, [r3, #0]
 8009c4c:	e002      	b.n	8009c54 <_printf_i+0x1d4>
 8009c4e:	0671      	lsls	r1, r6, #25
 8009c50:	d5fb      	bpl.n	8009c4a <_printf_i+0x1ca>
 8009c52:	8018      	strh	r0, [r3, #0]
 8009c54:	2300      	movs	r3, #0
 8009c56:	4616      	mov	r6, r2
 8009c58:	6123      	str	r3, [r4, #16]
 8009c5a:	e7ba      	b.n	8009bd2 <_printf_i+0x152>
 8009c5c:	680b      	ldr	r3, [r1, #0]
 8009c5e:	1d1a      	adds	r2, r3, #4
 8009c60:	600a      	str	r2, [r1, #0]
 8009c62:	681e      	ldr	r6, [r3, #0]
 8009c64:	2100      	movs	r1, #0
 8009c66:	4630      	mov	r0, r6
 8009c68:	6862      	ldr	r2, [r4, #4]
 8009c6a:	f000 fb4f 	bl	800a30c <memchr>
 8009c6e:	b108      	cbz	r0, 8009c74 <_printf_i+0x1f4>
 8009c70:	1b80      	subs	r0, r0, r6
 8009c72:	6060      	str	r0, [r4, #4]
 8009c74:	6863      	ldr	r3, [r4, #4]
 8009c76:	6123      	str	r3, [r4, #16]
 8009c78:	2300      	movs	r3, #0
 8009c7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c7e:	e7a8      	b.n	8009bd2 <_printf_i+0x152>
 8009c80:	4632      	mov	r2, r6
 8009c82:	4649      	mov	r1, r9
 8009c84:	4640      	mov	r0, r8
 8009c86:	6923      	ldr	r3, [r4, #16]
 8009c88:	47d0      	blx	sl
 8009c8a:	3001      	adds	r0, #1
 8009c8c:	d0ab      	beq.n	8009be6 <_printf_i+0x166>
 8009c8e:	6823      	ldr	r3, [r4, #0]
 8009c90:	079b      	lsls	r3, r3, #30
 8009c92:	d413      	bmi.n	8009cbc <_printf_i+0x23c>
 8009c94:	68e0      	ldr	r0, [r4, #12]
 8009c96:	9b03      	ldr	r3, [sp, #12]
 8009c98:	4298      	cmp	r0, r3
 8009c9a:	bfb8      	it	lt
 8009c9c:	4618      	movlt	r0, r3
 8009c9e:	e7a4      	b.n	8009bea <_printf_i+0x16a>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	4632      	mov	r2, r6
 8009ca4:	4649      	mov	r1, r9
 8009ca6:	4640      	mov	r0, r8
 8009ca8:	47d0      	blx	sl
 8009caa:	3001      	adds	r0, #1
 8009cac:	d09b      	beq.n	8009be6 <_printf_i+0x166>
 8009cae:	3501      	adds	r5, #1
 8009cb0:	68e3      	ldr	r3, [r4, #12]
 8009cb2:	9903      	ldr	r1, [sp, #12]
 8009cb4:	1a5b      	subs	r3, r3, r1
 8009cb6:	42ab      	cmp	r3, r5
 8009cb8:	dcf2      	bgt.n	8009ca0 <_printf_i+0x220>
 8009cba:	e7eb      	b.n	8009c94 <_printf_i+0x214>
 8009cbc:	2500      	movs	r5, #0
 8009cbe:	f104 0619 	add.w	r6, r4, #25
 8009cc2:	e7f5      	b.n	8009cb0 <_printf_i+0x230>
 8009cc4:	0800abed 	.word	0x0800abed
 8009cc8:	0800abfe 	.word	0x0800abfe

08009ccc <nan>:
 8009ccc:	2000      	movs	r0, #0
 8009cce:	4901      	ldr	r1, [pc, #4]	; (8009cd4 <nan+0x8>)
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	7ff80000 	.word	0x7ff80000

08009cd8 <_sbrk_r>:
 8009cd8:	b538      	push	{r3, r4, r5, lr}
 8009cda:	2300      	movs	r3, #0
 8009cdc:	4d05      	ldr	r5, [pc, #20]	; (8009cf4 <_sbrk_r+0x1c>)
 8009cde:	4604      	mov	r4, r0
 8009ce0:	4608      	mov	r0, r1
 8009ce2:	602b      	str	r3, [r5, #0]
 8009ce4:	f7f8 feba 	bl	8002a5c <_sbrk>
 8009ce8:	1c43      	adds	r3, r0, #1
 8009cea:	d102      	bne.n	8009cf2 <_sbrk_r+0x1a>
 8009cec:	682b      	ldr	r3, [r5, #0]
 8009cee:	b103      	cbz	r3, 8009cf2 <_sbrk_r+0x1a>
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	bd38      	pop	{r3, r4, r5, pc}
 8009cf4:	2000acec 	.word	0x2000acec

08009cf8 <nanf>:
 8009cf8:	4800      	ldr	r0, [pc, #0]	; (8009cfc <nanf+0x4>)
 8009cfa:	4770      	bx	lr
 8009cfc:	7fc00000 	.word	0x7fc00000

08009d00 <strncmp>:
 8009d00:	b510      	push	{r4, lr}
 8009d02:	b16a      	cbz	r2, 8009d20 <strncmp+0x20>
 8009d04:	3901      	subs	r1, #1
 8009d06:	1884      	adds	r4, r0, r2
 8009d08:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009d0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d103      	bne.n	8009d1c <strncmp+0x1c>
 8009d14:	42a0      	cmp	r0, r4
 8009d16:	d001      	beq.n	8009d1c <strncmp+0x1c>
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1f5      	bne.n	8009d08 <strncmp+0x8>
 8009d1c:	1a98      	subs	r0, r3, r2
 8009d1e:	bd10      	pop	{r4, pc}
 8009d20:	4610      	mov	r0, r2
 8009d22:	e7fc      	b.n	8009d1e <strncmp+0x1e>

08009d24 <__swbuf_r>:
 8009d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d26:	460e      	mov	r6, r1
 8009d28:	4614      	mov	r4, r2
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	b118      	cbz	r0, 8009d36 <__swbuf_r+0x12>
 8009d2e:	6983      	ldr	r3, [r0, #24]
 8009d30:	b90b      	cbnz	r3, 8009d36 <__swbuf_r+0x12>
 8009d32:	f000 f9e7 	bl	800a104 <__sinit>
 8009d36:	4b21      	ldr	r3, [pc, #132]	; (8009dbc <__swbuf_r+0x98>)
 8009d38:	429c      	cmp	r4, r3
 8009d3a:	d12b      	bne.n	8009d94 <__swbuf_r+0x70>
 8009d3c:	686c      	ldr	r4, [r5, #4]
 8009d3e:	69a3      	ldr	r3, [r4, #24]
 8009d40:	60a3      	str	r3, [r4, #8]
 8009d42:	89a3      	ldrh	r3, [r4, #12]
 8009d44:	071a      	lsls	r2, r3, #28
 8009d46:	d52f      	bpl.n	8009da8 <__swbuf_r+0x84>
 8009d48:	6923      	ldr	r3, [r4, #16]
 8009d4a:	b36b      	cbz	r3, 8009da8 <__swbuf_r+0x84>
 8009d4c:	6923      	ldr	r3, [r4, #16]
 8009d4e:	6820      	ldr	r0, [r4, #0]
 8009d50:	b2f6      	uxtb	r6, r6
 8009d52:	1ac0      	subs	r0, r0, r3
 8009d54:	6963      	ldr	r3, [r4, #20]
 8009d56:	4637      	mov	r7, r6
 8009d58:	4283      	cmp	r3, r0
 8009d5a:	dc04      	bgt.n	8009d66 <__swbuf_r+0x42>
 8009d5c:	4621      	mov	r1, r4
 8009d5e:	4628      	mov	r0, r5
 8009d60:	f000 f93c 	bl	8009fdc <_fflush_r>
 8009d64:	bb30      	cbnz	r0, 8009db4 <__swbuf_r+0x90>
 8009d66:	68a3      	ldr	r3, [r4, #8]
 8009d68:	3001      	adds	r0, #1
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	60a3      	str	r3, [r4, #8]
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	1c5a      	adds	r2, r3, #1
 8009d72:	6022      	str	r2, [r4, #0]
 8009d74:	701e      	strb	r6, [r3, #0]
 8009d76:	6963      	ldr	r3, [r4, #20]
 8009d78:	4283      	cmp	r3, r0
 8009d7a:	d004      	beq.n	8009d86 <__swbuf_r+0x62>
 8009d7c:	89a3      	ldrh	r3, [r4, #12]
 8009d7e:	07db      	lsls	r3, r3, #31
 8009d80:	d506      	bpl.n	8009d90 <__swbuf_r+0x6c>
 8009d82:	2e0a      	cmp	r6, #10
 8009d84:	d104      	bne.n	8009d90 <__swbuf_r+0x6c>
 8009d86:	4621      	mov	r1, r4
 8009d88:	4628      	mov	r0, r5
 8009d8a:	f000 f927 	bl	8009fdc <_fflush_r>
 8009d8e:	b988      	cbnz	r0, 8009db4 <__swbuf_r+0x90>
 8009d90:	4638      	mov	r0, r7
 8009d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d94:	4b0a      	ldr	r3, [pc, #40]	; (8009dc0 <__swbuf_r+0x9c>)
 8009d96:	429c      	cmp	r4, r3
 8009d98:	d101      	bne.n	8009d9e <__swbuf_r+0x7a>
 8009d9a:	68ac      	ldr	r4, [r5, #8]
 8009d9c:	e7cf      	b.n	8009d3e <__swbuf_r+0x1a>
 8009d9e:	4b09      	ldr	r3, [pc, #36]	; (8009dc4 <__swbuf_r+0xa0>)
 8009da0:	429c      	cmp	r4, r3
 8009da2:	bf08      	it	eq
 8009da4:	68ec      	ldreq	r4, [r5, #12]
 8009da6:	e7ca      	b.n	8009d3e <__swbuf_r+0x1a>
 8009da8:	4621      	mov	r1, r4
 8009daa:	4628      	mov	r0, r5
 8009dac:	f000 f81a 	bl	8009de4 <__swsetup_r>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d0cb      	beq.n	8009d4c <__swbuf_r+0x28>
 8009db4:	f04f 37ff 	mov.w	r7, #4294967295
 8009db8:	e7ea      	b.n	8009d90 <__swbuf_r+0x6c>
 8009dba:	bf00      	nop
 8009dbc:	0800ac30 	.word	0x0800ac30
 8009dc0:	0800ac50 	.word	0x0800ac50
 8009dc4:	0800ac10 	.word	0x0800ac10

08009dc8 <__ascii_wctomb>:
 8009dc8:	4603      	mov	r3, r0
 8009dca:	4608      	mov	r0, r1
 8009dcc:	b141      	cbz	r1, 8009de0 <__ascii_wctomb+0x18>
 8009dce:	2aff      	cmp	r2, #255	; 0xff
 8009dd0:	d904      	bls.n	8009ddc <__ascii_wctomb+0x14>
 8009dd2:	228a      	movs	r2, #138	; 0x8a
 8009dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd8:	601a      	str	r2, [r3, #0]
 8009dda:	4770      	bx	lr
 8009ddc:	2001      	movs	r0, #1
 8009dde:	700a      	strb	r2, [r1, #0]
 8009de0:	4770      	bx	lr
	...

08009de4 <__swsetup_r>:
 8009de4:	4b32      	ldr	r3, [pc, #200]	; (8009eb0 <__swsetup_r+0xcc>)
 8009de6:	b570      	push	{r4, r5, r6, lr}
 8009de8:	681d      	ldr	r5, [r3, #0]
 8009dea:	4606      	mov	r6, r0
 8009dec:	460c      	mov	r4, r1
 8009dee:	b125      	cbz	r5, 8009dfa <__swsetup_r+0x16>
 8009df0:	69ab      	ldr	r3, [r5, #24]
 8009df2:	b913      	cbnz	r3, 8009dfa <__swsetup_r+0x16>
 8009df4:	4628      	mov	r0, r5
 8009df6:	f000 f985 	bl	800a104 <__sinit>
 8009dfa:	4b2e      	ldr	r3, [pc, #184]	; (8009eb4 <__swsetup_r+0xd0>)
 8009dfc:	429c      	cmp	r4, r3
 8009dfe:	d10f      	bne.n	8009e20 <__swsetup_r+0x3c>
 8009e00:	686c      	ldr	r4, [r5, #4]
 8009e02:	89a3      	ldrh	r3, [r4, #12]
 8009e04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e08:	0719      	lsls	r1, r3, #28
 8009e0a:	d42c      	bmi.n	8009e66 <__swsetup_r+0x82>
 8009e0c:	06dd      	lsls	r5, r3, #27
 8009e0e:	d411      	bmi.n	8009e34 <__swsetup_r+0x50>
 8009e10:	2309      	movs	r3, #9
 8009e12:	6033      	str	r3, [r6, #0]
 8009e14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e18:	f04f 30ff 	mov.w	r0, #4294967295
 8009e1c:	81a3      	strh	r3, [r4, #12]
 8009e1e:	e03e      	b.n	8009e9e <__swsetup_r+0xba>
 8009e20:	4b25      	ldr	r3, [pc, #148]	; (8009eb8 <__swsetup_r+0xd4>)
 8009e22:	429c      	cmp	r4, r3
 8009e24:	d101      	bne.n	8009e2a <__swsetup_r+0x46>
 8009e26:	68ac      	ldr	r4, [r5, #8]
 8009e28:	e7eb      	b.n	8009e02 <__swsetup_r+0x1e>
 8009e2a:	4b24      	ldr	r3, [pc, #144]	; (8009ebc <__swsetup_r+0xd8>)
 8009e2c:	429c      	cmp	r4, r3
 8009e2e:	bf08      	it	eq
 8009e30:	68ec      	ldreq	r4, [r5, #12]
 8009e32:	e7e6      	b.n	8009e02 <__swsetup_r+0x1e>
 8009e34:	0758      	lsls	r0, r3, #29
 8009e36:	d512      	bpl.n	8009e5e <__swsetup_r+0x7a>
 8009e38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e3a:	b141      	cbz	r1, 8009e4e <__swsetup_r+0x6a>
 8009e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e40:	4299      	cmp	r1, r3
 8009e42:	d002      	beq.n	8009e4a <__swsetup_r+0x66>
 8009e44:	4630      	mov	r0, r6
 8009e46:	f7ff fa51 	bl	80092ec <_free_r>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	6363      	str	r3, [r4, #52]	; 0x34
 8009e4e:	89a3      	ldrh	r3, [r4, #12]
 8009e50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e54:	81a3      	strh	r3, [r4, #12]
 8009e56:	2300      	movs	r3, #0
 8009e58:	6063      	str	r3, [r4, #4]
 8009e5a:	6923      	ldr	r3, [r4, #16]
 8009e5c:	6023      	str	r3, [r4, #0]
 8009e5e:	89a3      	ldrh	r3, [r4, #12]
 8009e60:	f043 0308 	orr.w	r3, r3, #8
 8009e64:	81a3      	strh	r3, [r4, #12]
 8009e66:	6923      	ldr	r3, [r4, #16]
 8009e68:	b94b      	cbnz	r3, 8009e7e <__swsetup_r+0x9a>
 8009e6a:	89a3      	ldrh	r3, [r4, #12]
 8009e6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e74:	d003      	beq.n	8009e7e <__swsetup_r+0x9a>
 8009e76:	4621      	mov	r1, r4
 8009e78:	4630      	mov	r0, r6
 8009e7a:	f000 fa07 	bl	800a28c <__smakebuf_r>
 8009e7e:	89a0      	ldrh	r0, [r4, #12]
 8009e80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e84:	f010 0301 	ands.w	r3, r0, #1
 8009e88:	d00a      	beq.n	8009ea0 <__swsetup_r+0xbc>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	60a3      	str	r3, [r4, #8]
 8009e8e:	6963      	ldr	r3, [r4, #20]
 8009e90:	425b      	negs	r3, r3
 8009e92:	61a3      	str	r3, [r4, #24]
 8009e94:	6923      	ldr	r3, [r4, #16]
 8009e96:	b943      	cbnz	r3, 8009eaa <__swsetup_r+0xc6>
 8009e98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e9c:	d1ba      	bne.n	8009e14 <__swsetup_r+0x30>
 8009e9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ea0:	0781      	lsls	r1, r0, #30
 8009ea2:	bf58      	it	pl
 8009ea4:	6963      	ldrpl	r3, [r4, #20]
 8009ea6:	60a3      	str	r3, [r4, #8]
 8009ea8:	e7f4      	b.n	8009e94 <__swsetup_r+0xb0>
 8009eaa:	2000      	movs	r0, #0
 8009eac:	e7f7      	b.n	8009e9e <__swsetup_r+0xba>
 8009eae:	bf00      	nop
 8009eb0:	20000020 	.word	0x20000020
 8009eb4:	0800ac30 	.word	0x0800ac30
 8009eb8:	0800ac50 	.word	0x0800ac50
 8009ebc:	0800ac10 	.word	0x0800ac10

08009ec0 <abort>:
 8009ec0:	2006      	movs	r0, #6
 8009ec2:	b508      	push	{r3, lr}
 8009ec4:	f000 faa4 	bl	800a410 <raise>
 8009ec8:	2001      	movs	r0, #1
 8009eca:	f7f8 fd54 	bl	8002976 <_exit>
	...

08009ed0 <__sflush_r>:
 8009ed0:	898a      	ldrh	r2, [r1, #12]
 8009ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed6:	4605      	mov	r5, r0
 8009ed8:	0710      	lsls	r0, r2, #28
 8009eda:	460c      	mov	r4, r1
 8009edc:	d458      	bmi.n	8009f90 <__sflush_r+0xc0>
 8009ede:	684b      	ldr	r3, [r1, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	dc05      	bgt.n	8009ef0 <__sflush_r+0x20>
 8009ee4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	dc02      	bgt.n	8009ef0 <__sflush_r+0x20>
 8009eea:	2000      	movs	r0, #0
 8009eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ef2:	2e00      	cmp	r6, #0
 8009ef4:	d0f9      	beq.n	8009eea <__sflush_r+0x1a>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009efc:	682f      	ldr	r7, [r5, #0]
 8009efe:	602b      	str	r3, [r5, #0]
 8009f00:	d032      	beq.n	8009f68 <__sflush_r+0x98>
 8009f02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f04:	89a3      	ldrh	r3, [r4, #12]
 8009f06:	075a      	lsls	r2, r3, #29
 8009f08:	d505      	bpl.n	8009f16 <__sflush_r+0x46>
 8009f0a:	6863      	ldr	r3, [r4, #4]
 8009f0c:	1ac0      	subs	r0, r0, r3
 8009f0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f10:	b10b      	cbz	r3, 8009f16 <__sflush_r+0x46>
 8009f12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f14:	1ac0      	subs	r0, r0, r3
 8009f16:	2300      	movs	r3, #0
 8009f18:	4602      	mov	r2, r0
 8009f1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	6a21      	ldr	r1, [r4, #32]
 8009f20:	47b0      	blx	r6
 8009f22:	1c43      	adds	r3, r0, #1
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	d106      	bne.n	8009f36 <__sflush_r+0x66>
 8009f28:	6829      	ldr	r1, [r5, #0]
 8009f2a:	291d      	cmp	r1, #29
 8009f2c:	d82c      	bhi.n	8009f88 <__sflush_r+0xb8>
 8009f2e:	4a2a      	ldr	r2, [pc, #168]	; (8009fd8 <__sflush_r+0x108>)
 8009f30:	40ca      	lsrs	r2, r1
 8009f32:	07d6      	lsls	r6, r2, #31
 8009f34:	d528      	bpl.n	8009f88 <__sflush_r+0xb8>
 8009f36:	2200      	movs	r2, #0
 8009f38:	6062      	str	r2, [r4, #4]
 8009f3a:	6922      	ldr	r2, [r4, #16]
 8009f3c:	04d9      	lsls	r1, r3, #19
 8009f3e:	6022      	str	r2, [r4, #0]
 8009f40:	d504      	bpl.n	8009f4c <__sflush_r+0x7c>
 8009f42:	1c42      	adds	r2, r0, #1
 8009f44:	d101      	bne.n	8009f4a <__sflush_r+0x7a>
 8009f46:	682b      	ldr	r3, [r5, #0]
 8009f48:	b903      	cbnz	r3, 8009f4c <__sflush_r+0x7c>
 8009f4a:	6560      	str	r0, [r4, #84]	; 0x54
 8009f4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f4e:	602f      	str	r7, [r5, #0]
 8009f50:	2900      	cmp	r1, #0
 8009f52:	d0ca      	beq.n	8009eea <__sflush_r+0x1a>
 8009f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f58:	4299      	cmp	r1, r3
 8009f5a:	d002      	beq.n	8009f62 <__sflush_r+0x92>
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	f7ff f9c5 	bl	80092ec <_free_r>
 8009f62:	2000      	movs	r0, #0
 8009f64:	6360      	str	r0, [r4, #52]	; 0x34
 8009f66:	e7c1      	b.n	8009eec <__sflush_r+0x1c>
 8009f68:	6a21      	ldr	r1, [r4, #32]
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	47b0      	blx	r6
 8009f70:	1c41      	adds	r1, r0, #1
 8009f72:	d1c7      	bne.n	8009f04 <__sflush_r+0x34>
 8009f74:	682b      	ldr	r3, [r5, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d0c4      	beq.n	8009f04 <__sflush_r+0x34>
 8009f7a:	2b1d      	cmp	r3, #29
 8009f7c:	d001      	beq.n	8009f82 <__sflush_r+0xb2>
 8009f7e:	2b16      	cmp	r3, #22
 8009f80:	d101      	bne.n	8009f86 <__sflush_r+0xb6>
 8009f82:	602f      	str	r7, [r5, #0]
 8009f84:	e7b1      	b.n	8009eea <__sflush_r+0x1a>
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f8c:	81a3      	strh	r3, [r4, #12]
 8009f8e:	e7ad      	b.n	8009eec <__sflush_r+0x1c>
 8009f90:	690f      	ldr	r7, [r1, #16]
 8009f92:	2f00      	cmp	r7, #0
 8009f94:	d0a9      	beq.n	8009eea <__sflush_r+0x1a>
 8009f96:	0793      	lsls	r3, r2, #30
 8009f98:	bf18      	it	ne
 8009f9a:	2300      	movne	r3, #0
 8009f9c:	680e      	ldr	r6, [r1, #0]
 8009f9e:	bf08      	it	eq
 8009fa0:	694b      	ldreq	r3, [r1, #20]
 8009fa2:	eba6 0807 	sub.w	r8, r6, r7
 8009fa6:	600f      	str	r7, [r1, #0]
 8009fa8:	608b      	str	r3, [r1, #8]
 8009faa:	f1b8 0f00 	cmp.w	r8, #0
 8009fae:	dd9c      	ble.n	8009eea <__sflush_r+0x1a>
 8009fb0:	4643      	mov	r3, r8
 8009fb2:	463a      	mov	r2, r7
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	6a21      	ldr	r1, [r4, #32]
 8009fb8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009fba:	47b0      	blx	r6
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	dc06      	bgt.n	8009fce <__sflush_r+0xfe>
 8009fc0:	89a3      	ldrh	r3, [r4, #12]
 8009fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fca:	81a3      	strh	r3, [r4, #12]
 8009fcc:	e78e      	b.n	8009eec <__sflush_r+0x1c>
 8009fce:	4407      	add	r7, r0
 8009fd0:	eba8 0800 	sub.w	r8, r8, r0
 8009fd4:	e7e9      	b.n	8009faa <__sflush_r+0xda>
 8009fd6:	bf00      	nop
 8009fd8:	20400001 	.word	0x20400001

08009fdc <_fflush_r>:
 8009fdc:	b538      	push	{r3, r4, r5, lr}
 8009fde:	690b      	ldr	r3, [r1, #16]
 8009fe0:	4605      	mov	r5, r0
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	b913      	cbnz	r3, 8009fec <_fflush_r+0x10>
 8009fe6:	2500      	movs	r5, #0
 8009fe8:	4628      	mov	r0, r5
 8009fea:	bd38      	pop	{r3, r4, r5, pc}
 8009fec:	b118      	cbz	r0, 8009ff6 <_fflush_r+0x1a>
 8009fee:	6983      	ldr	r3, [r0, #24]
 8009ff0:	b90b      	cbnz	r3, 8009ff6 <_fflush_r+0x1a>
 8009ff2:	f000 f887 	bl	800a104 <__sinit>
 8009ff6:	4b14      	ldr	r3, [pc, #80]	; (800a048 <_fflush_r+0x6c>)
 8009ff8:	429c      	cmp	r4, r3
 8009ffa:	d11b      	bne.n	800a034 <_fflush_r+0x58>
 8009ffc:	686c      	ldr	r4, [r5, #4]
 8009ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d0ef      	beq.n	8009fe6 <_fflush_r+0xa>
 800a006:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a008:	07d0      	lsls	r0, r2, #31
 800a00a:	d404      	bmi.n	800a016 <_fflush_r+0x3a>
 800a00c:	0599      	lsls	r1, r3, #22
 800a00e:	d402      	bmi.n	800a016 <_fflush_r+0x3a>
 800a010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a012:	f000 f915 	bl	800a240 <__retarget_lock_acquire_recursive>
 800a016:	4628      	mov	r0, r5
 800a018:	4621      	mov	r1, r4
 800a01a:	f7ff ff59 	bl	8009ed0 <__sflush_r>
 800a01e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a020:	4605      	mov	r5, r0
 800a022:	07da      	lsls	r2, r3, #31
 800a024:	d4e0      	bmi.n	8009fe8 <_fflush_r+0xc>
 800a026:	89a3      	ldrh	r3, [r4, #12]
 800a028:	059b      	lsls	r3, r3, #22
 800a02a:	d4dd      	bmi.n	8009fe8 <_fflush_r+0xc>
 800a02c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a02e:	f000 f908 	bl	800a242 <__retarget_lock_release_recursive>
 800a032:	e7d9      	b.n	8009fe8 <_fflush_r+0xc>
 800a034:	4b05      	ldr	r3, [pc, #20]	; (800a04c <_fflush_r+0x70>)
 800a036:	429c      	cmp	r4, r3
 800a038:	d101      	bne.n	800a03e <_fflush_r+0x62>
 800a03a:	68ac      	ldr	r4, [r5, #8]
 800a03c:	e7df      	b.n	8009ffe <_fflush_r+0x22>
 800a03e:	4b04      	ldr	r3, [pc, #16]	; (800a050 <_fflush_r+0x74>)
 800a040:	429c      	cmp	r4, r3
 800a042:	bf08      	it	eq
 800a044:	68ec      	ldreq	r4, [r5, #12]
 800a046:	e7da      	b.n	8009ffe <_fflush_r+0x22>
 800a048:	0800ac30 	.word	0x0800ac30
 800a04c:	0800ac50 	.word	0x0800ac50
 800a050:	0800ac10 	.word	0x0800ac10

0800a054 <std>:
 800a054:	2300      	movs	r3, #0
 800a056:	b510      	push	{r4, lr}
 800a058:	4604      	mov	r4, r0
 800a05a:	e9c0 3300 	strd	r3, r3, [r0]
 800a05e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a062:	6083      	str	r3, [r0, #8]
 800a064:	8181      	strh	r1, [r0, #12]
 800a066:	6643      	str	r3, [r0, #100]	; 0x64
 800a068:	81c2      	strh	r2, [r0, #14]
 800a06a:	6183      	str	r3, [r0, #24]
 800a06c:	4619      	mov	r1, r3
 800a06e:	2208      	movs	r2, #8
 800a070:	305c      	adds	r0, #92	; 0x5c
 800a072:	f7fd f92b 	bl	80072cc <memset>
 800a076:	4b05      	ldr	r3, [pc, #20]	; (800a08c <std+0x38>)
 800a078:	6224      	str	r4, [r4, #32]
 800a07a:	6263      	str	r3, [r4, #36]	; 0x24
 800a07c:	4b04      	ldr	r3, [pc, #16]	; (800a090 <std+0x3c>)
 800a07e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a080:	4b04      	ldr	r3, [pc, #16]	; (800a094 <std+0x40>)
 800a082:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a084:	4b04      	ldr	r3, [pc, #16]	; (800a098 <std+0x44>)
 800a086:	6323      	str	r3, [r4, #48]	; 0x30
 800a088:	bd10      	pop	{r4, pc}
 800a08a:	bf00      	nop
 800a08c:	0800a449 	.word	0x0800a449
 800a090:	0800a46b 	.word	0x0800a46b
 800a094:	0800a4a3 	.word	0x0800a4a3
 800a098:	0800a4c7 	.word	0x0800a4c7

0800a09c <_cleanup_r>:
 800a09c:	4901      	ldr	r1, [pc, #4]	; (800a0a4 <_cleanup_r+0x8>)
 800a09e:	f000 b8af 	b.w	800a200 <_fwalk_reent>
 800a0a2:	bf00      	nop
 800a0a4:	08009fdd 	.word	0x08009fdd

0800a0a8 <__sfmoreglue>:
 800a0a8:	b570      	push	{r4, r5, r6, lr}
 800a0aa:	2568      	movs	r5, #104	; 0x68
 800a0ac:	1e4a      	subs	r2, r1, #1
 800a0ae:	4355      	muls	r5, r2
 800a0b0:	460e      	mov	r6, r1
 800a0b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a0b6:	f7ff f965 	bl	8009384 <_malloc_r>
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	b140      	cbz	r0, 800a0d0 <__sfmoreglue+0x28>
 800a0be:	2100      	movs	r1, #0
 800a0c0:	e9c0 1600 	strd	r1, r6, [r0]
 800a0c4:	300c      	adds	r0, #12
 800a0c6:	60a0      	str	r0, [r4, #8]
 800a0c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a0cc:	f7fd f8fe 	bl	80072cc <memset>
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	bd70      	pop	{r4, r5, r6, pc}

0800a0d4 <__sfp_lock_acquire>:
 800a0d4:	4801      	ldr	r0, [pc, #4]	; (800a0dc <__sfp_lock_acquire+0x8>)
 800a0d6:	f000 b8b3 	b.w	800a240 <__retarget_lock_acquire_recursive>
 800a0da:	bf00      	nop
 800a0dc:	2000ace8 	.word	0x2000ace8

0800a0e0 <__sfp_lock_release>:
 800a0e0:	4801      	ldr	r0, [pc, #4]	; (800a0e8 <__sfp_lock_release+0x8>)
 800a0e2:	f000 b8ae 	b.w	800a242 <__retarget_lock_release_recursive>
 800a0e6:	bf00      	nop
 800a0e8:	2000ace8 	.word	0x2000ace8

0800a0ec <__sinit_lock_acquire>:
 800a0ec:	4801      	ldr	r0, [pc, #4]	; (800a0f4 <__sinit_lock_acquire+0x8>)
 800a0ee:	f000 b8a7 	b.w	800a240 <__retarget_lock_acquire_recursive>
 800a0f2:	bf00      	nop
 800a0f4:	2000ace3 	.word	0x2000ace3

0800a0f8 <__sinit_lock_release>:
 800a0f8:	4801      	ldr	r0, [pc, #4]	; (800a100 <__sinit_lock_release+0x8>)
 800a0fa:	f000 b8a2 	b.w	800a242 <__retarget_lock_release_recursive>
 800a0fe:	bf00      	nop
 800a100:	2000ace3 	.word	0x2000ace3

0800a104 <__sinit>:
 800a104:	b510      	push	{r4, lr}
 800a106:	4604      	mov	r4, r0
 800a108:	f7ff fff0 	bl	800a0ec <__sinit_lock_acquire>
 800a10c:	69a3      	ldr	r3, [r4, #24]
 800a10e:	b11b      	cbz	r3, 800a118 <__sinit+0x14>
 800a110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a114:	f7ff bff0 	b.w	800a0f8 <__sinit_lock_release>
 800a118:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a11c:	6523      	str	r3, [r4, #80]	; 0x50
 800a11e:	4b13      	ldr	r3, [pc, #76]	; (800a16c <__sinit+0x68>)
 800a120:	4a13      	ldr	r2, [pc, #76]	; (800a170 <__sinit+0x6c>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	62a2      	str	r2, [r4, #40]	; 0x28
 800a126:	42a3      	cmp	r3, r4
 800a128:	bf08      	it	eq
 800a12a:	2301      	moveq	r3, #1
 800a12c:	4620      	mov	r0, r4
 800a12e:	bf08      	it	eq
 800a130:	61a3      	streq	r3, [r4, #24]
 800a132:	f000 f81f 	bl	800a174 <__sfp>
 800a136:	6060      	str	r0, [r4, #4]
 800a138:	4620      	mov	r0, r4
 800a13a:	f000 f81b 	bl	800a174 <__sfp>
 800a13e:	60a0      	str	r0, [r4, #8]
 800a140:	4620      	mov	r0, r4
 800a142:	f000 f817 	bl	800a174 <__sfp>
 800a146:	2200      	movs	r2, #0
 800a148:	2104      	movs	r1, #4
 800a14a:	60e0      	str	r0, [r4, #12]
 800a14c:	6860      	ldr	r0, [r4, #4]
 800a14e:	f7ff ff81 	bl	800a054 <std>
 800a152:	2201      	movs	r2, #1
 800a154:	2109      	movs	r1, #9
 800a156:	68a0      	ldr	r0, [r4, #8]
 800a158:	f7ff ff7c 	bl	800a054 <std>
 800a15c:	2202      	movs	r2, #2
 800a15e:	2112      	movs	r1, #18
 800a160:	68e0      	ldr	r0, [r4, #12]
 800a162:	f7ff ff77 	bl	800a054 <std>
 800a166:	2301      	movs	r3, #1
 800a168:	61a3      	str	r3, [r4, #24]
 800a16a:	e7d1      	b.n	800a110 <__sinit+0xc>
 800a16c:	0800a7d4 	.word	0x0800a7d4
 800a170:	0800a09d 	.word	0x0800a09d

0800a174 <__sfp>:
 800a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a176:	4607      	mov	r7, r0
 800a178:	f7ff ffac 	bl	800a0d4 <__sfp_lock_acquire>
 800a17c:	4b1e      	ldr	r3, [pc, #120]	; (800a1f8 <__sfp+0x84>)
 800a17e:	681e      	ldr	r6, [r3, #0]
 800a180:	69b3      	ldr	r3, [r6, #24]
 800a182:	b913      	cbnz	r3, 800a18a <__sfp+0x16>
 800a184:	4630      	mov	r0, r6
 800a186:	f7ff ffbd 	bl	800a104 <__sinit>
 800a18a:	3648      	adds	r6, #72	; 0x48
 800a18c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a190:	3b01      	subs	r3, #1
 800a192:	d503      	bpl.n	800a19c <__sfp+0x28>
 800a194:	6833      	ldr	r3, [r6, #0]
 800a196:	b30b      	cbz	r3, 800a1dc <__sfp+0x68>
 800a198:	6836      	ldr	r6, [r6, #0]
 800a19a:	e7f7      	b.n	800a18c <__sfp+0x18>
 800a19c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a1a0:	b9d5      	cbnz	r5, 800a1d8 <__sfp+0x64>
 800a1a2:	4b16      	ldr	r3, [pc, #88]	; (800a1fc <__sfp+0x88>)
 800a1a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a1a8:	60e3      	str	r3, [r4, #12]
 800a1aa:	6665      	str	r5, [r4, #100]	; 0x64
 800a1ac:	f000 f847 	bl	800a23e <__retarget_lock_init_recursive>
 800a1b0:	f7ff ff96 	bl	800a0e0 <__sfp_lock_release>
 800a1b4:	2208      	movs	r2, #8
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a1bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a1c0:	6025      	str	r5, [r4, #0]
 800a1c2:	61a5      	str	r5, [r4, #24]
 800a1c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a1c8:	f7fd f880 	bl	80072cc <memset>
 800a1cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a1d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1d8:	3468      	adds	r4, #104	; 0x68
 800a1da:	e7d9      	b.n	800a190 <__sfp+0x1c>
 800a1dc:	2104      	movs	r1, #4
 800a1de:	4638      	mov	r0, r7
 800a1e0:	f7ff ff62 	bl	800a0a8 <__sfmoreglue>
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	6030      	str	r0, [r6, #0]
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d1d5      	bne.n	800a198 <__sfp+0x24>
 800a1ec:	f7ff ff78 	bl	800a0e0 <__sfp_lock_release>
 800a1f0:	230c      	movs	r3, #12
 800a1f2:	603b      	str	r3, [r7, #0]
 800a1f4:	e7ee      	b.n	800a1d4 <__sfp+0x60>
 800a1f6:	bf00      	nop
 800a1f8:	0800a7d4 	.word	0x0800a7d4
 800a1fc:	ffff0001 	.word	0xffff0001

0800a200 <_fwalk_reent>:
 800a200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a204:	4606      	mov	r6, r0
 800a206:	4688      	mov	r8, r1
 800a208:	2700      	movs	r7, #0
 800a20a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a20e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a212:	f1b9 0901 	subs.w	r9, r9, #1
 800a216:	d505      	bpl.n	800a224 <_fwalk_reent+0x24>
 800a218:	6824      	ldr	r4, [r4, #0]
 800a21a:	2c00      	cmp	r4, #0
 800a21c:	d1f7      	bne.n	800a20e <_fwalk_reent+0xe>
 800a21e:	4638      	mov	r0, r7
 800a220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a224:	89ab      	ldrh	r3, [r5, #12]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d907      	bls.n	800a23a <_fwalk_reent+0x3a>
 800a22a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a22e:	3301      	adds	r3, #1
 800a230:	d003      	beq.n	800a23a <_fwalk_reent+0x3a>
 800a232:	4629      	mov	r1, r5
 800a234:	4630      	mov	r0, r6
 800a236:	47c0      	blx	r8
 800a238:	4307      	orrs	r7, r0
 800a23a:	3568      	adds	r5, #104	; 0x68
 800a23c:	e7e9      	b.n	800a212 <_fwalk_reent+0x12>

0800a23e <__retarget_lock_init_recursive>:
 800a23e:	4770      	bx	lr

0800a240 <__retarget_lock_acquire_recursive>:
 800a240:	4770      	bx	lr

0800a242 <__retarget_lock_release_recursive>:
 800a242:	4770      	bx	lr

0800a244 <__swhatbuf_r>:
 800a244:	b570      	push	{r4, r5, r6, lr}
 800a246:	460e      	mov	r6, r1
 800a248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a24c:	4614      	mov	r4, r2
 800a24e:	2900      	cmp	r1, #0
 800a250:	461d      	mov	r5, r3
 800a252:	b096      	sub	sp, #88	; 0x58
 800a254:	da07      	bge.n	800a266 <__swhatbuf_r+0x22>
 800a256:	2300      	movs	r3, #0
 800a258:	602b      	str	r3, [r5, #0]
 800a25a:	89b3      	ldrh	r3, [r6, #12]
 800a25c:	061a      	lsls	r2, r3, #24
 800a25e:	d410      	bmi.n	800a282 <__swhatbuf_r+0x3e>
 800a260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a264:	e00e      	b.n	800a284 <__swhatbuf_r+0x40>
 800a266:	466a      	mov	r2, sp
 800a268:	f000 f954 	bl	800a514 <_fstat_r>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	dbf2      	blt.n	800a256 <__swhatbuf_r+0x12>
 800a270:	9a01      	ldr	r2, [sp, #4]
 800a272:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a276:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a27a:	425a      	negs	r2, r3
 800a27c:	415a      	adcs	r2, r3
 800a27e:	602a      	str	r2, [r5, #0]
 800a280:	e7ee      	b.n	800a260 <__swhatbuf_r+0x1c>
 800a282:	2340      	movs	r3, #64	; 0x40
 800a284:	2000      	movs	r0, #0
 800a286:	6023      	str	r3, [r4, #0]
 800a288:	b016      	add	sp, #88	; 0x58
 800a28a:	bd70      	pop	{r4, r5, r6, pc}

0800a28c <__smakebuf_r>:
 800a28c:	898b      	ldrh	r3, [r1, #12]
 800a28e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a290:	079d      	lsls	r5, r3, #30
 800a292:	4606      	mov	r6, r0
 800a294:	460c      	mov	r4, r1
 800a296:	d507      	bpl.n	800a2a8 <__smakebuf_r+0x1c>
 800a298:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	6123      	str	r3, [r4, #16]
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	6163      	str	r3, [r4, #20]
 800a2a4:	b002      	add	sp, #8
 800a2a6:	bd70      	pop	{r4, r5, r6, pc}
 800a2a8:	466a      	mov	r2, sp
 800a2aa:	ab01      	add	r3, sp, #4
 800a2ac:	f7ff ffca 	bl	800a244 <__swhatbuf_r>
 800a2b0:	9900      	ldr	r1, [sp, #0]
 800a2b2:	4605      	mov	r5, r0
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	f7ff f865 	bl	8009384 <_malloc_r>
 800a2ba:	b948      	cbnz	r0, 800a2d0 <__smakebuf_r+0x44>
 800a2bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2c0:	059a      	lsls	r2, r3, #22
 800a2c2:	d4ef      	bmi.n	800a2a4 <__smakebuf_r+0x18>
 800a2c4:	f023 0303 	bic.w	r3, r3, #3
 800a2c8:	f043 0302 	orr.w	r3, r3, #2
 800a2cc:	81a3      	strh	r3, [r4, #12]
 800a2ce:	e7e3      	b.n	800a298 <__smakebuf_r+0xc>
 800a2d0:	4b0d      	ldr	r3, [pc, #52]	; (800a308 <__smakebuf_r+0x7c>)
 800a2d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a2d4:	89a3      	ldrh	r3, [r4, #12]
 800a2d6:	6020      	str	r0, [r4, #0]
 800a2d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2dc:	81a3      	strh	r3, [r4, #12]
 800a2de:	9b00      	ldr	r3, [sp, #0]
 800a2e0:	6120      	str	r0, [r4, #16]
 800a2e2:	6163      	str	r3, [r4, #20]
 800a2e4:	9b01      	ldr	r3, [sp, #4]
 800a2e6:	b15b      	cbz	r3, 800a300 <__smakebuf_r+0x74>
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2ee:	f000 f923 	bl	800a538 <_isatty_r>
 800a2f2:	b128      	cbz	r0, 800a300 <__smakebuf_r+0x74>
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	f023 0303 	bic.w	r3, r3, #3
 800a2fa:	f043 0301 	orr.w	r3, r3, #1
 800a2fe:	81a3      	strh	r3, [r4, #12]
 800a300:	89a0      	ldrh	r0, [r4, #12]
 800a302:	4305      	orrs	r5, r0
 800a304:	81a5      	strh	r5, [r4, #12]
 800a306:	e7cd      	b.n	800a2a4 <__smakebuf_r+0x18>
 800a308:	0800a09d 	.word	0x0800a09d

0800a30c <memchr>:
 800a30c:	4603      	mov	r3, r0
 800a30e:	b510      	push	{r4, lr}
 800a310:	b2c9      	uxtb	r1, r1
 800a312:	4402      	add	r2, r0
 800a314:	4293      	cmp	r3, r2
 800a316:	4618      	mov	r0, r3
 800a318:	d101      	bne.n	800a31e <memchr+0x12>
 800a31a:	2000      	movs	r0, #0
 800a31c:	e003      	b.n	800a326 <memchr+0x1a>
 800a31e:	7804      	ldrb	r4, [r0, #0]
 800a320:	3301      	adds	r3, #1
 800a322:	428c      	cmp	r4, r1
 800a324:	d1f6      	bne.n	800a314 <memchr+0x8>
 800a326:	bd10      	pop	{r4, pc}

0800a328 <memmove>:
 800a328:	4288      	cmp	r0, r1
 800a32a:	b510      	push	{r4, lr}
 800a32c:	eb01 0402 	add.w	r4, r1, r2
 800a330:	d902      	bls.n	800a338 <memmove+0x10>
 800a332:	4284      	cmp	r4, r0
 800a334:	4623      	mov	r3, r4
 800a336:	d807      	bhi.n	800a348 <memmove+0x20>
 800a338:	1e43      	subs	r3, r0, #1
 800a33a:	42a1      	cmp	r1, r4
 800a33c:	d008      	beq.n	800a350 <memmove+0x28>
 800a33e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a342:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a346:	e7f8      	b.n	800a33a <memmove+0x12>
 800a348:	4601      	mov	r1, r0
 800a34a:	4402      	add	r2, r0
 800a34c:	428a      	cmp	r2, r1
 800a34e:	d100      	bne.n	800a352 <memmove+0x2a>
 800a350:	bd10      	pop	{r4, pc}
 800a352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a35a:	e7f7      	b.n	800a34c <memmove+0x24>

0800a35c <__malloc_lock>:
 800a35c:	4801      	ldr	r0, [pc, #4]	; (800a364 <__malloc_lock+0x8>)
 800a35e:	f7ff bf6f 	b.w	800a240 <__retarget_lock_acquire_recursive>
 800a362:	bf00      	nop
 800a364:	2000ace4 	.word	0x2000ace4

0800a368 <__malloc_unlock>:
 800a368:	4801      	ldr	r0, [pc, #4]	; (800a370 <__malloc_unlock+0x8>)
 800a36a:	f7ff bf6a 	b.w	800a242 <__retarget_lock_release_recursive>
 800a36e:	bf00      	nop
 800a370:	2000ace4 	.word	0x2000ace4

0800a374 <_realloc_r>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	4607      	mov	r7, r0
 800a378:	4614      	mov	r4, r2
 800a37a:	460e      	mov	r6, r1
 800a37c:	b921      	cbnz	r1, 800a388 <_realloc_r+0x14>
 800a37e:	4611      	mov	r1, r2
 800a380:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a384:	f7fe bffe 	b.w	8009384 <_malloc_r>
 800a388:	b922      	cbnz	r2, 800a394 <_realloc_r+0x20>
 800a38a:	f7fe ffaf 	bl	80092ec <_free_r>
 800a38e:	4625      	mov	r5, r4
 800a390:	4628      	mov	r0, r5
 800a392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a394:	f000 f8f2 	bl	800a57c <_malloc_usable_size_r>
 800a398:	42a0      	cmp	r0, r4
 800a39a:	d20f      	bcs.n	800a3bc <_realloc_r+0x48>
 800a39c:	4621      	mov	r1, r4
 800a39e:	4638      	mov	r0, r7
 800a3a0:	f7fe fff0 	bl	8009384 <_malloc_r>
 800a3a4:	4605      	mov	r5, r0
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d0f2      	beq.n	800a390 <_realloc_r+0x1c>
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	4622      	mov	r2, r4
 800a3ae:	f7fc ff7f 	bl	80072b0 <memcpy>
 800a3b2:	4631      	mov	r1, r6
 800a3b4:	4638      	mov	r0, r7
 800a3b6:	f7fe ff99 	bl	80092ec <_free_r>
 800a3ba:	e7e9      	b.n	800a390 <_realloc_r+0x1c>
 800a3bc:	4635      	mov	r5, r6
 800a3be:	e7e7      	b.n	800a390 <_realloc_r+0x1c>

0800a3c0 <_raise_r>:
 800a3c0:	291f      	cmp	r1, #31
 800a3c2:	b538      	push	{r3, r4, r5, lr}
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	460d      	mov	r5, r1
 800a3c8:	d904      	bls.n	800a3d4 <_raise_r+0x14>
 800a3ca:	2316      	movs	r3, #22
 800a3cc:	6003      	str	r3, [r0, #0]
 800a3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d2:	bd38      	pop	{r3, r4, r5, pc}
 800a3d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a3d6:	b112      	cbz	r2, 800a3de <_raise_r+0x1e>
 800a3d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a3dc:	b94b      	cbnz	r3, 800a3f2 <_raise_r+0x32>
 800a3de:	4620      	mov	r0, r4
 800a3e0:	f000 f830 	bl	800a444 <_getpid_r>
 800a3e4:	462a      	mov	r2, r5
 800a3e6:	4601      	mov	r1, r0
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3ee:	f000 b817 	b.w	800a420 <_kill_r>
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d00a      	beq.n	800a40c <_raise_r+0x4c>
 800a3f6:	1c59      	adds	r1, r3, #1
 800a3f8:	d103      	bne.n	800a402 <_raise_r+0x42>
 800a3fa:	2316      	movs	r3, #22
 800a3fc:	6003      	str	r3, [r0, #0]
 800a3fe:	2001      	movs	r0, #1
 800a400:	e7e7      	b.n	800a3d2 <_raise_r+0x12>
 800a402:	2400      	movs	r4, #0
 800a404:	4628      	mov	r0, r5
 800a406:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a40a:	4798      	blx	r3
 800a40c:	2000      	movs	r0, #0
 800a40e:	e7e0      	b.n	800a3d2 <_raise_r+0x12>

0800a410 <raise>:
 800a410:	4b02      	ldr	r3, [pc, #8]	; (800a41c <raise+0xc>)
 800a412:	4601      	mov	r1, r0
 800a414:	6818      	ldr	r0, [r3, #0]
 800a416:	f7ff bfd3 	b.w	800a3c0 <_raise_r>
 800a41a:	bf00      	nop
 800a41c:	20000020 	.word	0x20000020

0800a420 <_kill_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	2300      	movs	r3, #0
 800a424:	4d06      	ldr	r5, [pc, #24]	; (800a440 <_kill_r+0x20>)
 800a426:	4604      	mov	r4, r0
 800a428:	4608      	mov	r0, r1
 800a42a:	4611      	mov	r1, r2
 800a42c:	602b      	str	r3, [r5, #0]
 800a42e:	f7f8 fa92 	bl	8002956 <_kill>
 800a432:	1c43      	adds	r3, r0, #1
 800a434:	d102      	bne.n	800a43c <_kill_r+0x1c>
 800a436:	682b      	ldr	r3, [r5, #0]
 800a438:	b103      	cbz	r3, 800a43c <_kill_r+0x1c>
 800a43a:	6023      	str	r3, [r4, #0]
 800a43c:	bd38      	pop	{r3, r4, r5, pc}
 800a43e:	bf00      	nop
 800a440:	2000acec 	.word	0x2000acec

0800a444 <_getpid_r>:
 800a444:	f7f8 ba80 	b.w	8002948 <_getpid>

0800a448 <__sread>:
 800a448:	b510      	push	{r4, lr}
 800a44a:	460c      	mov	r4, r1
 800a44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a450:	f000 f89c 	bl	800a58c <_read_r>
 800a454:	2800      	cmp	r0, #0
 800a456:	bfab      	itete	ge
 800a458:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a45a:	89a3      	ldrhlt	r3, [r4, #12]
 800a45c:	181b      	addge	r3, r3, r0
 800a45e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a462:	bfac      	ite	ge
 800a464:	6563      	strge	r3, [r4, #84]	; 0x54
 800a466:	81a3      	strhlt	r3, [r4, #12]
 800a468:	bd10      	pop	{r4, pc}

0800a46a <__swrite>:
 800a46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a46e:	461f      	mov	r7, r3
 800a470:	898b      	ldrh	r3, [r1, #12]
 800a472:	4605      	mov	r5, r0
 800a474:	05db      	lsls	r3, r3, #23
 800a476:	460c      	mov	r4, r1
 800a478:	4616      	mov	r6, r2
 800a47a:	d505      	bpl.n	800a488 <__swrite+0x1e>
 800a47c:	2302      	movs	r3, #2
 800a47e:	2200      	movs	r2, #0
 800a480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a484:	f000 f868 	bl	800a558 <_lseek_r>
 800a488:	89a3      	ldrh	r3, [r4, #12]
 800a48a:	4632      	mov	r2, r6
 800a48c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a490:	81a3      	strh	r3, [r4, #12]
 800a492:	4628      	mov	r0, r5
 800a494:	463b      	mov	r3, r7
 800a496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a49a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a49e:	f000 b817 	b.w	800a4d0 <_write_r>

0800a4a2 <__sseek>:
 800a4a2:	b510      	push	{r4, lr}
 800a4a4:	460c      	mov	r4, r1
 800a4a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4aa:	f000 f855 	bl	800a558 <_lseek_r>
 800a4ae:	1c43      	adds	r3, r0, #1
 800a4b0:	89a3      	ldrh	r3, [r4, #12]
 800a4b2:	bf15      	itete	ne
 800a4b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4be:	81a3      	strheq	r3, [r4, #12]
 800a4c0:	bf18      	it	ne
 800a4c2:	81a3      	strhne	r3, [r4, #12]
 800a4c4:	bd10      	pop	{r4, pc}

0800a4c6 <__sclose>:
 800a4c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ca:	f000 b813 	b.w	800a4f4 <_close_r>
	...

0800a4d0 <_write_r>:
 800a4d0:	b538      	push	{r3, r4, r5, lr}
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	4608      	mov	r0, r1
 800a4d6:	4611      	mov	r1, r2
 800a4d8:	2200      	movs	r2, #0
 800a4da:	4d05      	ldr	r5, [pc, #20]	; (800a4f0 <_write_r+0x20>)
 800a4dc:	602a      	str	r2, [r5, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	f7f8 fa70 	bl	80029c4 <_write>
 800a4e4:	1c43      	adds	r3, r0, #1
 800a4e6:	d102      	bne.n	800a4ee <_write_r+0x1e>
 800a4e8:	682b      	ldr	r3, [r5, #0]
 800a4ea:	b103      	cbz	r3, 800a4ee <_write_r+0x1e>
 800a4ec:	6023      	str	r3, [r4, #0]
 800a4ee:	bd38      	pop	{r3, r4, r5, pc}
 800a4f0:	2000acec 	.word	0x2000acec

0800a4f4 <_close_r>:
 800a4f4:	b538      	push	{r3, r4, r5, lr}
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	4d05      	ldr	r5, [pc, #20]	; (800a510 <_close_r+0x1c>)
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	4608      	mov	r0, r1
 800a4fe:	602b      	str	r3, [r5, #0]
 800a500:	f7f8 fa7c 	bl	80029fc <_close>
 800a504:	1c43      	adds	r3, r0, #1
 800a506:	d102      	bne.n	800a50e <_close_r+0x1a>
 800a508:	682b      	ldr	r3, [r5, #0]
 800a50a:	b103      	cbz	r3, 800a50e <_close_r+0x1a>
 800a50c:	6023      	str	r3, [r4, #0]
 800a50e:	bd38      	pop	{r3, r4, r5, pc}
 800a510:	2000acec 	.word	0x2000acec

0800a514 <_fstat_r>:
 800a514:	b538      	push	{r3, r4, r5, lr}
 800a516:	2300      	movs	r3, #0
 800a518:	4d06      	ldr	r5, [pc, #24]	; (800a534 <_fstat_r+0x20>)
 800a51a:	4604      	mov	r4, r0
 800a51c:	4608      	mov	r0, r1
 800a51e:	4611      	mov	r1, r2
 800a520:	602b      	str	r3, [r5, #0]
 800a522:	f7f8 fa76 	bl	8002a12 <_fstat>
 800a526:	1c43      	adds	r3, r0, #1
 800a528:	d102      	bne.n	800a530 <_fstat_r+0x1c>
 800a52a:	682b      	ldr	r3, [r5, #0]
 800a52c:	b103      	cbz	r3, 800a530 <_fstat_r+0x1c>
 800a52e:	6023      	str	r3, [r4, #0]
 800a530:	bd38      	pop	{r3, r4, r5, pc}
 800a532:	bf00      	nop
 800a534:	2000acec 	.word	0x2000acec

0800a538 <_isatty_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	2300      	movs	r3, #0
 800a53c:	4d05      	ldr	r5, [pc, #20]	; (800a554 <_isatty_r+0x1c>)
 800a53e:	4604      	mov	r4, r0
 800a540:	4608      	mov	r0, r1
 800a542:	602b      	str	r3, [r5, #0]
 800a544:	f7f8 fa74 	bl	8002a30 <_isatty>
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	d102      	bne.n	800a552 <_isatty_r+0x1a>
 800a54c:	682b      	ldr	r3, [r5, #0]
 800a54e:	b103      	cbz	r3, 800a552 <_isatty_r+0x1a>
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	bd38      	pop	{r3, r4, r5, pc}
 800a554:	2000acec 	.word	0x2000acec

0800a558 <_lseek_r>:
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	4604      	mov	r4, r0
 800a55c:	4608      	mov	r0, r1
 800a55e:	4611      	mov	r1, r2
 800a560:	2200      	movs	r2, #0
 800a562:	4d05      	ldr	r5, [pc, #20]	; (800a578 <_lseek_r+0x20>)
 800a564:	602a      	str	r2, [r5, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	f7f8 fa6c 	bl	8002a44 <_lseek>
 800a56c:	1c43      	adds	r3, r0, #1
 800a56e:	d102      	bne.n	800a576 <_lseek_r+0x1e>
 800a570:	682b      	ldr	r3, [r5, #0]
 800a572:	b103      	cbz	r3, 800a576 <_lseek_r+0x1e>
 800a574:	6023      	str	r3, [r4, #0]
 800a576:	bd38      	pop	{r3, r4, r5, pc}
 800a578:	2000acec 	.word	0x2000acec

0800a57c <_malloc_usable_size_r>:
 800a57c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a580:	1f18      	subs	r0, r3, #4
 800a582:	2b00      	cmp	r3, #0
 800a584:	bfbc      	itt	lt
 800a586:	580b      	ldrlt	r3, [r1, r0]
 800a588:	18c0      	addlt	r0, r0, r3
 800a58a:	4770      	bx	lr

0800a58c <_read_r>:
 800a58c:	b538      	push	{r3, r4, r5, lr}
 800a58e:	4604      	mov	r4, r0
 800a590:	4608      	mov	r0, r1
 800a592:	4611      	mov	r1, r2
 800a594:	2200      	movs	r2, #0
 800a596:	4d05      	ldr	r5, [pc, #20]	; (800a5ac <_read_r+0x20>)
 800a598:	602a      	str	r2, [r5, #0]
 800a59a:	461a      	mov	r2, r3
 800a59c:	f7f8 f9f5 	bl	800298a <_read>
 800a5a0:	1c43      	adds	r3, r0, #1
 800a5a2:	d102      	bne.n	800a5aa <_read_r+0x1e>
 800a5a4:	682b      	ldr	r3, [r5, #0]
 800a5a6:	b103      	cbz	r3, 800a5aa <_read_r+0x1e>
 800a5a8:	6023      	str	r3, [r4, #0]
 800a5aa:	bd38      	pop	{r3, r4, r5, pc}
 800a5ac:	2000acec 	.word	0x2000acec

0800a5b0 <_init>:
 800a5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b2:	bf00      	nop
 800a5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5b6:	bc08      	pop	{r3}
 800a5b8:	469e      	mov	lr, r3
 800a5ba:	4770      	bx	lr

0800a5bc <_fini>:
 800a5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5be:	bf00      	nop
 800a5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5c2:	bc08      	pop	{r3}
 800a5c4:	469e      	mov	lr, r3
 800a5c6:	4770      	bx	lr
