
HydroC_UNI_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d98  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001090  08013f88  08013f88  00023f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015018  08015018  000303bc  2**0
                  CONTENTS
  4 .ARM          00000008  08015018  08015018  00025018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015020  08015020  000303bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015020  08015020  00025020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015024  08015024  00025024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003bc  20000000  08015028  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a3a4  200003c0  080153e4  000303c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000a764  080153e4  0003a764  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000303bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000245f0  00000000  00000000  000303e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000555a  00000000  00000000  000549d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e10  00000000  00000000  00059f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c08  00000000  00000000  0005bd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e04  00000000  00000000  0005d948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025cd5  00000000  00000000  0007e74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8f3e  00000000  00000000  000a4421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014d35f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009168  00000000  00000000  0014d3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200003c0 	.word	0x200003c0
 800020c:	00000000 	.word	0x00000000
 8000210:	08013f70 	.word	0x08013f70

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200003c4 	.word	0x200003c4
 800022c:	08013f70 	.word	0x08013f70

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__gesf2>:
 8000bf8:	f04f 3cff 	mov.w	ip, #4294967295
 8000bfc:	e006      	b.n	8000c0c <__cmpsf2+0x4>
 8000bfe:	bf00      	nop

08000c00 <__lesf2>:
 8000c00:	f04f 0c01 	mov.w	ip, #1
 8000c04:	e002      	b.n	8000c0c <__cmpsf2+0x4>
 8000c06:	bf00      	nop

08000c08 <__cmpsf2>:
 8000c08:	f04f 0c01 	mov.w	ip, #1
 8000c0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c1c:	bf18      	it	ne
 8000c1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c22:	d011      	beq.n	8000c48 <__cmpsf2+0x40>
 8000c24:	b001      	add	sp, #4
 8000c26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c2a:	bf18      	it	ne
 8000c2c:	ea90 0f01 	teqne	r0, r1
 8000c30:	bf58      	it	pl
 8000c32:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c36:	bf88      	it	hi
 8000c38:	17c8      	asrhi	r0, r1, #31
 8000c3a:	bf38      	it	cc
 8000c3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c40:	bf18      	it	ne
 8000c42:	f040 0001 	orrne.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c4c:	d102      	bne.n	8000c54 <__cmpsf2+0x4c>
 8000c4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c52:	d105      	bne.n	8000c60 <__cmpsf2+0x58>
 8000c54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c58:	d1e4      	bne.n	8000c24 <__cmpsf2+0x1c>
 8000c5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c5e:	d0e1      	beq.n	8000c24 <__cmpsf2+0x1c>
 8000c60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_cfrcmple>:
 8000c68:	4684      	mov	ip, r0
 8000c6a:	4608      	mov	r0, r1
 8000c6c:	4661      	mov	r1, ip
 8000c6e:	e7ff      	b.n	8000c70 <__aeabi_cfcmpeq>

08000c70 <__aeabi_cfcmpeq>:
 8000c70:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c72:	f7ff ffc9 	bl	8000c08 <__cmpsf2>
 8000c76:	2800      	cmp	r0, #0
 8000c78:	bf48      	it	mi
 8000c7a:	f110 0f00 	cmnmi.w	r0, #0
 8000c7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c80 <__aeabi_fcmpeq>:
 8000c80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c84:	f7ff fff4 	bl	8000c70 <__aeabi_cfcmpeq>
 8000c88:	bf0c      	ite	eq
 8000c8a:	2001      	moveq	r0, #1
 8000c8c:	2000      	movne	r0, #0
 8000c8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c92:	bf00      	nop

08000c94 <__aeabi_fcmplt>:
 8000c94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c98:	f7ff ffea 	bl	8000c70 <__aeabi_cfcmpeq>
 8000c9c:	bf34      	ite	cc
 8000c9e:	2001      	movcc	r0, #1
 8000ca0:	2000      	movcs	r0, #0
 8000ca2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_fcmple>:
 8000ca8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cac:	f7ff ffe0 	bl	8000c70 <__aeabi_cfcmpeq>
 8000cb0:	bf94      	ite	ls
 8000cb2:	2001      	movls	r0, #1
 8000cb4:	2000      	movhi	r0, #0
 8000cb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cba:	bf00      	nop

08000cbc <__aeabi_fcmpge>:
 8000cbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cc0:	f7ff ffd2 	bl	8000c68 <__aeabi_cfrcmple>
 8000cc4:	bf94      	ite	ls
 8000cc6:	2001      	movls	r0, #1
 8000cc8:	2000      	movhi	r0, #0
 8000cca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fcmpgt>:
 8000cd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cd4:	f7ff ffc8 	bl	8000c68 <__aeabi_cfrcmple>
 8000cd8:	bf34      	ite	cc
 8000cda:	2001      	movcc	r0, #1
 8000cdc:	2000      	movcs	r0, #0
 8000cde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_fcmpun>:
 8000ce4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	d102      	bne.n	8000cf8 <__aeabi_fcmpun+0x14>
 8000cf2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cf6:	d108      	bne.n	8000d0a <__aeabi_fcmpun+0x26>
 8000cf8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cfc:	d102      	bne.n	8000d04 <__aeabi_fcmpun+0x20>
 8000cfe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d02:	d102      	bne.n	8000d0a <__aeabi_fcmpun+0x26>
 8000d04:	f04f 0000 	mov.w	r0, #0
 8000d08:	4770      	bx	lr
 8000d0a:	f04f 0001 	mov.w	r0, #1
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_uldivmod>:
 8000d10:	b953      	cbnz	r3, 8000d28 <__aeabi_uldivmod+0x18>
 8000d12:	b94a      	cbnz	r2, 8000d28 <__aeabi_uldivmod+0x18>
 8000d14:	2900      	cmp	r1, #0
 8000d16:	bf08      	it	eq
 8000d18:	2800      	cmpeq	r0, #0
 8000d1a:	bf1c      	itt	ne
 8000d1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d20:	f04f 30ff 	movne.w	r0, #4294967295
 8000d24:	f000 b9ae 	b.w	8001084 <__aeabi_idiv0>
 8000d28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d30:	f000 f83e 	bl	8000db0 <__udivmoddi4>
 8000d34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3c:	b004      	add	sp, #16
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_d2lz>:
 8000d40:	b538      	push	{r3, r4, r5, lr}
 8000d42:	4605      	mov	r5, r0
 8000d44:	460c      	mov	r4, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	2300      	movs	r3, #0
 8000d4a:	4628      	mov	r0, r5
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	f7ff fea5 	bl	8000a9c <__aeabi_dcmplt>
 8000d52:	b928      	cbnz	r0, 8000d60 <__aeabi_d2lz+0x20>
 8000d54:	4628      	mov	r0, r5
 8000d56:	4621      	mov	r1, r4
 8000d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d5c:	f000 b80a 	b.w	8000d74 <__aeabi_d2ulz>
 8000d60:	4628      	mov	r0, r5
 8000d62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000d66:	f000 f805 	bl	8000d74 <__aeabi_d2ulz>
 8000d6a:	4240      	negs	r0, r0
 8000d6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d70:	bd38      	pop	{r3, r4, r5, pc}
 8000d72:	bf00      	nop

08000d74 <__aeabi_d2ulz>:
 8000d74:	b5d0      	push	{r4, r6, r7, lr}
 8000d76:	2200      	movs	r2, #0
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <__aeabi_d2ulz+0x34>)
 8000d7a:	4606      	mov	r6, r0
 8000d7c:	460f      	mov	r7, r1
 8000d7e:	f7ff fc1b 	bl	80005b8 <__aeabi_dmul>
 8000d82:	f7ff fec9 	bl	8000b18 <__aeabi_d2uiz>
 8000d86:	4604      	mov	r4, r0
 8000d88:	f7ff fb9c 	bl	80004c4 <__aeabi_ui2d>
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <__aeabi_d2ulz+0x38>)
 8000d90:	f7ff fc12 	bl	80005b8 <__aeabi_dmul>
 8000d94:	4602      	mov	r2, r0
 8000d96:	460b      	mov	r3, r1
 8000d98:	4630      	mov	r0, r6
 8000d9a:	4639      	mov	r1, r7
 8000d9c:	f7ff fa54 	bl	8000248 <__aeabi_dsub>
 8000da0:	f7ff feba 	bl	8000b18 <__aeabi_d2uiz>
 8000da4:	4621      	mov	r1, r4
 8000da6:	bdd0      	pop	{r4, r6, r7, pc}
 8000da8:	3df00000 	.word	0x3df00000
 8000dac:	41f00000 	.word	0x41f00000

08000db0 <__udivmoddi4>:
 8000db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db4:	9e08      	ldr	r6, [sp, #32]
 8000db6:	460d      	mov	r5, r1
 8000db8:	4604      	mov	r4, r0
 8000dba:	4688      	mov	r8, r1
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d14d      	bne.n	8000e5c <__udivmoddi4+0xac>
 8000dc0:	428a      	cmp	r2, r1
 8000dc2:	4694      	mov	ip, r2
 8000dc4:	d968      	bls.n	8000e98 <__udivmoddi4+0xe8>
 8000dc6:	fab2 f282 	clz	r2, r2
 8000dca:	b152      	cbz	r2, 8000de2 <__udivmoddi4+0x32>
 8000dcc:	fa01 f302 	lsl.w	r3, r1, r2
 8000dd0:	f1c2 0120 	rsb	r1, r2, #32
 8000dd4:	fa20 f101 	lsr.w	r1, r0, r1
 8000dd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ddc:	ea41 0803 	orr.w	r8, r1, r3
 8000de0:	4094      	lsls	r4, r2
 8000de2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000de6:	fbb8 f7f1 	udiv	r7, r8, r1
 8000dea:	fa1f fe8c 	uxth.w	lr, ip
 8000dee:	fb01 8817 	mls	r8, r1, r7, r8
 8000df2:	fb07 f00e 	mul.w	r0, r7, lr
 8000df6:	0c23      	lsrs	r3, r4, #16
 8000df8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x66>
 8000e00:	eb1c 0303 	adds.w	r3, ip, r3
 8000e04:	f107 35ff 	add.w	r5, r7, #4294967295
 8000e08:	f080 811e 	bcs.w	8001048 <__udivmoddi4+0x298>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f240 811b 	bls.w	8001048 <__udivmoddi4+0x298>
 8000e12:	3f02      	subs	r7, #2
 8000e14:	4463      	add	r3, ip
 8000e16:	1a1b      	subs	r3, r3, r0
 8000e18:	fbb3 f0f1 	udiv	r0, r3, r1
 8000e1c:	fb01 3310 	mls	r3, r1, r0, r3
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	b2a4      	uxth	r4, r4
 8000e26:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	d90a      	bls.n	8000e44 <__udivmoddi4+0x94>
 8000e2e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	f080 8109 	bcs.w	800104c <__udivmoddi4+0x29c>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	f240 8106 	bls.w	800104c <__udivmoddi4+0x29c>
 8000e40:	4464      	add	r4, ip
 8000e42:	3802      	subs	r0, #2
 8000e44:	2100      	movs	r1, #0
 8000e46:	eba4 040e 	sub.w	r4, r4, lr
 8000e4a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e4e:	b11e      	cbz	r6, 8000e58 <__udivmoddi4+0xa8>
 8000e50:	2300      	movs	r3, #0
 8000e52:	40d4      	lsrs	r4, r2
 8000e54:	e9c6 4300 	strd	r4, r3, [r6]
 8000e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0xc2>
 8000e60:	2e00      	cmp	r6, #0
 8000e62:	f000 80ee 	beq.w	8001042 <__udivmoddi4+0x292>
 8000e66:	2100      	movs	r1, #0
 8000e68:	e9c6 0500 	strd	r0, r5, [r6]
 8000e6c:	4608      	mov	r0, r1
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f183 	clz	r1, r3
 8000e76:	2900      	cmp	r1, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x160>
 8000e7a:	42ab      	cmp	r3, r5
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0xd4>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80fc 	bhi.w	800107c <__udivmoddi4+0x2cc>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb65 0303 	sbc.w	r3, r5, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	4698      	mov	r8, r3
 8000e8e:	2e00      	cmp	r6, #0
 8000e90:	d0e2      	beq.n	8000e58 <__udivmoddi4+0xa8>
 8000e92:	e9c6 4800 	strd	r4, r8, [r6]
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0xa8>
 8000e98:	b902      	cbnz	r2, 8000e9c <__udivmoddi4+0xec>
 8000e9a:	deff      	udf	#255	; 0xff
 8000e9c:	fab2 f282 	clz	r2, r2
 8000ea0:	2a00      	cmp	r2, #0
 8000ea2:	f040 8091 	bne.w	8000fc8 <__udivmoddi4+0x218>
 8000ea6:	eba1 000c 	sub.w	r0, r1, ip
 8000eaa:	2101      	movs	r1, #1
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb0 f3f7 	udiv	r3, r0, r7
 8000eb8:	fb07 0013 	mls	r0, r7, r3, r0
 8000ebc:	0c25      	lsrs	r5, r4, #16
 8000ebe:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ec2:	fb0e f003 	mul.w	r0, lr, r3
 8000ec6:	42a8      	cmp	r0, r5
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x12c>
 8000eca:	eb1c 0505 	adds.w	r5, ip, r5
 8000ece:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x12a>
 8000ed4:	42a8      	cmp	r0, r5
 8000ed6:	f200 80ce 	bhi.w	8001076 <__udivmoddi4+0x2c6>
 8000eda:	4643      	mov	r3, r8
 8000edc:	1a2d      	subs	r5, r5, r0
 8000ede:	fbb5 f0f7 	udiv	r0, r5, r7
 8000ee2:	fb07 5510 	mls	r5, r7, r0, r5
 8000ee6:	fb0e fe00 	mul.w	lr, lr, r0
 8000eea:	b2a4      	uxth	r4, r4
 8000eec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ef0:	45a6      	cmp	lr, r4
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x156>
 8000ef4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000efc:	d202      	bcs.n	8000f04 <__udivmoddi4+0x154>
 8000efe:	45a6      	cmp	lr, r4
 8000f00:	f200 80b6 	bhi.w	8001070 <__udivmoddi4+0x2c0>
 8000f04:	4628      	mov	r0, r5
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f0e:	e79e      	b.n	8000e4e <__udivmoddi4+0x9e>
 8000f10:	f1c1 0720 	rsb	r7, r1, #32
 8000f14:	408b      	lsls	r3, r1
 8000f16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f1e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000f22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f26:	fbba f8f9 	udiv	r8, sl, r9
 8000f2a:	fa20 f307 	lsr.w	r3, r0, r7
 8000f2e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000f32:	408d      	lsls	r5, r1
 8000f34:	fa1f fe8c 	uxth.w	lr, ip
 8000f38:	431d      	orrs	r5, r3
 8000f3a:	fa00 f301 	lsl.w	r3, r0, r1
 8000f3e:	fb08 f00e 	mul.w	r0, r8, lr
 8000f42:	0c2c      	lsrs	r4, r5, #16
 8000f44:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000f48:	42a0      	cmp	r0, r4
 8000f4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f4e:	d90b      	bls.n	8000f68 <__udivmoddi4+0x1b8>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f58:	f080 8088 	bcs.w	800106c <__udivmoddi4+0x2bc>
 8000f5c:	42a0      	cmp	r0, r4
 8000f5e:	f240 8085 	bls.w	800106c <__udivmoddi4+0x2bc>
 8000f62:	f1a8 0802 	sub.w	r8, r8, #2
 8000f66:	4464      	add	r4, ip
 8000f68:	1a24      	subs	r4, r4, r0
 8000f6a:	fbb4 f0f9 	udiv	r0, r4, r9
 8000f6e:	fb09 4410 	mls	r4, r9, r0, r4
 8000f72:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f76:	b2ad      	uxth	r5, r5
 8000f78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f7c:	45a6      	cmp	lr, r4
 8000f7e:	d908      	bls.n	8000f92 <__udivmoddi4+0x1e2>
 8000f80:	eb1c 0404 	adds.w	r4, ip, r4
 8000f84:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f88:	d26c      	bcs.n	8001064 <__udivmoddi4+0x2b4>
 8000f8a:	45a6      	cmp	lr, r4
 8000f8c:	d96a      	bls.n	8001064 <__udivmoddi4+0x2b4>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	4464      	add	r4, ip
 8000f92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f96:	fba0 9502 	umull	r9, r5, r0, r2
 8000f9a:	eba4 040e 	sub.w	r4, r4, lr
 8000f9e:	42ac      	cmp	r4, r5
 8000fa0:	46c8      	mov	r8, r9
 8000fa2:	46ae      	mov	lr, r5
 8000fa4:	d356      	bcc.n	8001054 <__udivmoddi4+0x2a4>
 8000fa6:	d053      	beq.n	8001050 <__udivmoddi4+0x2a0>
 8000fa8:	2e00      	cmp	r6, #0
 8000faa:	d069      	beq.n	8001080 <__udivmoddi4+0x2d0>
 8000fac:	ebb3 0208 	subs.w	r2, r3, r8
 8000fb0:	eb64 040e 	sbc.w	r4, r4, lr
 8000fb4:	fa22 f301 	lsr.w	r3, r2, r1
 8000fb8:	fa04 f707 	lsl.w	r7, r4, r7
 8000fbc:	431f      	orrs	r7, r3
 8000fbe:	40cc      	lsrs	r4, r1
 8000fc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e747      	b.n	8000e58 <__udivmoddi4+0xa8>
 8000fc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fcc:	f1c2 0120 	rsb	r1, r2, #32
 8000fd0:	fa25 f301 	lsr.w	r3, r5, r1
 8000fd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fd8:	fa20 f101 	lsr.w	r1, r0, r1
 8000fdc:	4095      	lsls	r5, r2
 8000fde:	430d      	orrs	r5, r1
 8000fe0:	fbb3 f1f7 	udiv	r1, r3, r7
 8000fe4:	fb07 3311 	mls	r3, r7, r1, r3
 8000fe8:	fa1f fe8c 	uxth.w	lr, ip
 8000fec:	0c28      	lsrs	r0, r5, #16
 8000fee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ff2:	fb01 f30e 	mul.w	r3, r1, lr
 8000ff6:	4283      	cmp	r3, r0
 8000ff8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ffc:	d908      	bls.n	8001010 <__udivmoddi4+0x260>
 8000ffe:	eb1c 0000 	adds.w	r0, ip, r0
 8001002:	f101 38ff 	add.w	r8, r1, #4294967295
 8001006:	d22f      	bcs.n	8001068 <__udivmoddi4+0x2b8>
 8001008:	4283      	cmp	r3, r0
 800100a:	d92d      	bls.n	8001068 <__udivmoddi4+0x2b8>
 800100c:	3902      	subs	r1, #2
 800100e:	4460      	add	r0, ip
 8001010:	1ac0      	subs	r0, r0, r3
 8001012:	fbb0 f3f7 	udiv	r3, r0, r7
 8001016:	fb07 0013 	mls	r0, r7, r3, r0
 800101a:	b2ad      	uxth	r5, r5
 800101c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001020:	fb03 f00e 	mul.w	r0, r3, lr
 8001024:	42a8      	cmp	r0, r5
 8001026:	d908      	bls.n	800103a <__udivmoddi4+0x28a>
 8001028:	eb1c 0505 	adds.w	r5, ip, r5
 800102c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001030:	d216      	bcs.n	8001060 <__udivmoddi4+0x2b0>
 8001032:	42a8      	cmp	r0, r5
 8001034:	d914      	bls.n	8001060 <__udivmoddi4+0x2b0>
 8001036:	3b02      	subs	r3, #2
 8001038:	4465      	add	r5, ip
 800103a:	1a28      	subs	r0, r5, r0
 800103c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001040:	e738      	b.n	8000eb4 <__udivmoddi4+0x104>
 8001042:	4631      	mov	r1, r6
 8001044:	4630      	mov	r0, r6
 8001046:	e707      	b.n	8000e58 <__udivmoddi4+0xa8>
 8001048:	462f      	mov	r7, r5
 800104a:	e6e4      	b.n	8000e16 <__udivmoddi4+0x66>
 800104c:	4618      	mov	r0, r3
 800104e:	e6f9      	b.n	8000e44 <__udivmoddi4+0x94>
 8001050:	454b      	cmp	r3, r9
 8001052:	d2a9      	bcs.n	8000fa8 <__udivmoddi4+0x1f8>
 8001054:	ebb9 0802 	subs.w	r8, r9, r2
 8001058:	eb65 0e0c 	sbc.w	lr, r5, ip
 800105c:	3801      	subs	r0, #1
 800105e:	e7a3      	b.n	8000fa8 <__udivmoddi4+0x1f8>
 8001060:	4643      	mov	r3, r8
 8001062:	e7ea      	b.n	800103a <__udivmoddi4+0x28a>
 8001064:	4628      	mov	r0, r5
 8001066:	e794      	b.n	8000f92 <__udivmoddi4+0x1e2>
 8001068:	4641      	mov	r1, r8
 800106a:	e7d1      	b.n	8001010 <__udivmoddi4+0x260>
 800106c:	46d0      	mov	r8, sl
 800106e:	e77b      	b.n	8000f68 <__udivmoddi4+0x1b8>
 8001070:	4464      	add	r4, ip
 8001072:	3802      	subs	r0, #2
 8001074:	e747      	b.n	8000f06 <__udivmoddi4+0x156>
 8001076:	3b02      	subs	r3, #2
 8001078:	4465      	add	r5, ip
 800107a:	e72f      	b.n	8000edc <__udivmoddi4+0x12c>
 800107c:	4608      	mov	r0, r1
 800107e:	e706      	b.n	8000e8e <__udivmoddi4+0xde>
 8001080:	4631      	mov	r1, r6
 8001082:	e6e9      	b.n	8000e58 <__udivmoddi4+0xa8>

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <hydroc_schedule_for_tx>:
char*  hydroc_messages_strings[HYDROC_MSG_NUM_OF_FUNCTIONS];
const char* hydroc_commands_strings[]={"$COCFG,0,0,W,1\r\n","$COCFG,0,0,W,0\r\n","$CORTS,0,0,W,1000,","$COPEX,0,0,W,1,0\r\n","$COPEX,0,0,W,0,0\r\n","$COMDI,0,0,W,","$","$","$CODBC,0,0,W,1\r\n","TEST\r\n","$CODPV,0,0,R\r\n"};
const hydroc_model_specific_t hydroc_models[]={{HYDROC_TYPE_UNKNOWN,"UNKNOWN"},{HYDROC_TYPE_CO2,"CO2"},{HYDROC_TYPE_CH4,"CH4"}};

void hydroc_schedule_for_tx(hydroc* hydroc_obj,uint8_t* message,uint32_t size)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
 osSemaphoreWait(hydroc_obj->out_q_sem,osWaitForever);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	4618      	mov	r0, r3
 800109e:	f00c fc77 	bl	800d990 <osSemaphoreWait>
 for(int i=0;i<size;i++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	e00d      	b.n	80010c4 <hydroc_schedule_for_tx+0x3c>
 {
   osMessagePut(hydroc_obj->media_tx_q,*(message+i),osWaitForever);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6858      	ldr	r0, [r3, #4]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	4413      	add	r3, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	4619      	mov	r1, r3
 80010ba:	f00c fd15 	bl	800dae8 <osMessagePut>
 for(int i=0;i<size;i++)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3301      	adds	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8ed      	bhi.n	80010a8 <hydroc_schedule_for_tx+0x20>
 }
 osSemaphoreRelease(hydroc_obj->out_q_sem);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f00c fcab 	bl	800da2c <osSemaphoreRelease>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <hydroc_init>:

void    hydroc_init(hydroc* hydroc_obj,osMessageQId events_q_Handle,osSemaphoreId out_q_sem)
{
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b094      	sub	sp, #80	; 0x50
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
	hydroc_messages_init(hydroc_obj);
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f000 faa3 	bl	8001638 <hydroc_messages_init>

	//osMessageQDef(hydroc_events_q, 20, uint8_t);
	//hydroc_obj->events_q= osMessageCreate(osMessageQ(hydroc_events_q), NULL);

	hydroc_obj->events_q=events_q_Handle;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	609a      	str	r2, [r3, #8]
	hydroc_obj->out_q_sem=out_q_sem;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	60da      	str	r2, [r3, #12]

	osMessageQDef(hydroc_media_rx_q, 20, uint16_t);
 80010fe:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <hydroc_init+0x108>)
 8001100:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001104:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001106:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	hydroc_obj->media_rx_messages_q= osMessageCreate(osMessageQ(hydroc_media_rx_q), NULL);
 800110a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f00c fcc1 	bl	800da98 <osMessageCreate>
 8001116:	4602      	mov	r2, r0
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	601a      	str	r2, [r3, #0]

	osMessageQDef(hydroc_media_tx_q, 400, uint8_t);
 800111c:	4b33      	ldr	r3, [pc, #204]	; (80011ec <hydroc_init+0x10c>)
 800111e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001124:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	hydroc_obj->media_tx_q = osMessageCreate(osMessageQ(hydroc_media_tx_q), NULL);
 8001128:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f00c fcb2 	bl	800da98 <osMessageCreate>
 8001134:	4602      	mov	r2, r0
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	605a      	str	r2, [r3, #4]

	osThreadDef(hydroc_task, hydroc_loop, osPriorityNormal, 0, 256);
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <hydroc_init+0x110>)
 800113c:	f107 0414 	add.w	r4, r7, #20
 8001140:	461d      	mov	r5, r3
 8001142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001146:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800114a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(hydroc_task), hydroc_obj);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	68f9      	ldr	r1, [r7, #12]
 8001154:	4618      	mov	r0, r3
 8001156:	f00c fb88 	bl	800d86a <osThreadCreate>

	hydroc_obj->rx_buffer_indx=0;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2815 	strb.w	r2, [r3, #2069]	; 0x815

	hydroc_obj->errors.P_in=0;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2971 	strb.w	r2, [r3, #2417]	; 0x971
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2972 	strb.w	r2, [r3, #2418]	; 0x972
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2973 	strb.w	r2, [r3, #2419]	; 0x973
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2974 	strb.w	r2, [r3, #2420]	; 0x974
	hydroc_obj->errors.P_pump=0;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 297d 	strb.w	r2, [r3, #2429]	; 0x97d
 800118a:	2200      	movs	r2, #0
 800118c:	f883 297e 	strb.w	r2, [r3, #2430]	; 0x97e
 8001190:	2200      	movs	r2, #0
 8001192:	f883 297f 	strb.w	r2, [r3, #2431]	; 0x97f
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2980 	strb.w	r2, [r3, #2432]	; 0x980
	hydroc_obj->errors.T_control=0;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2979 	strb.w	r2, [r3, #2425]	; 0x979
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 297a 	strb.w	r2, [r3, #2426]	; 0x97a
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 297b 	strb.w	r2, [r3, #2427]	; 0x97b
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 297c 	strb.w	r2, [r3, #2428]	; 0x97c
	hydroc_obj->errors.rH_gas=0;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2975 	strb.w	r2, [r3, #2421]	; 0x975
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2976 	strb.w	r2, [r3, #2422]	; 0x976
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2977 	strb.w	r2, [r3, #2423]	; 0x977
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2978 	strb.w	r2, [r3, #2424]	; 0x978
	hydroc_obj->model_specific=&hydroc_models[HYDROC_TYPE_UNKNOWN];
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <hydroc_init+0x114>)
 80011d4:	f8c3 29a4 	str.w	r2, [r3, #2468]	; 0x9a4
	hydroc_obj->pump_status=HYDROC_PUMP_UNKNOWN;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2202      	movs	r2, #2
 80011dc:	f883 29a8 	strb.w	r2, [r3, #2472]	; 0x9a8

}
 80011e0:	bf00      	nop
 80011e2:	3750      	adds	r7, #80	; 0x50
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bdb0      	pop	{r4, r5, r7, pc}
 80011e8:	08014038 	.word	0x08014038
 80011ec:	08014048 	.word	0x08014048
 80011f0:	08014058 	.word	0x08014058
 80011f4:	08014514 	.word	0x08014514

080011f8 <hydroc_media_process_byte>:

void hydroc_media_process_byte(hydroc* hydroc_obj,uint8_t rx_byte)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	70fb      	strb	r3, [r7, #3]
	if(hydroc_obj->media_status==HYDROC_MEDIA_READY){
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7cdb      	ldrb	r3, [r3, #19]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d160      	bne.n	80012ce <hydroc_media_process_byte+0xd6>
		hydroc_obj->rx_buffer[hydroc_obj->rx_buffer_indx]=rx_byte;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
 8001212:	b29b      	uxth	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	78fa      	ldrb	r2, [r7, #3]
 800121c:	751a      	strb	r2, [r3, #20]
		if(rx_byte=='\r'|| rx_byte=='\n'){
 800121e:	78fb      	ldrb	r3, [r7, #3]
 8001220:	2b0d      	cmp	r3, #13
 8001222:	d002      	beq.n	800122a <hydroc_media_process_byte+0x32>
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	2b0a      	cmp	r3, #10
 8001228:	d132      	bne.n	8001290 <hydroc_media_process_byte+0x98>
			hydroc_obj->rx_buffer[hydroc_obj->rx_buffer_indx]=0x00;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
 8001230:	b29b      	uxth	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4413      	add	r3, r2
 8001238:	2200      	movs	r2, #0
 800123a:	751a      	strb	r2, [r3, #20]
			osMessagePut(hydroc_obj->media_rx_messages_q,hydroc_obj->rx_buffer_new_string_indx,1);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f8b3 3816 	ldrh.w	r3, [r3, #2070]	; 0x816
 8001246:	b29b      	uxth	r3, r3
 8001248:	2201      	movs	r2, #1
 800124a:	4619      	mov	r1, r3
 800124c:	f00c fc4c 	bl	800dae8 <osMessagePut>
			if(hydroc_obj->rx_buffer_indx>HYDROC_RX_BUFFER_THR) hydroc_obj->rx_buffer_indx=0;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
 8001256:	b29b      	uxth	r3, r3
 8001258:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800125c:	d907      	bls.n	800126e <hydroc_media_process_byte+0x76>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2815 	strb.w	r2, [r3, #2069]	; 0x815
 800126c:	e008      	b.n	8001280 <hydroc_media_process_byte+0x88>
			else  hydroc_obj->rx_buffer_indx++;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
 8001274:	b29b      	uxth	r3, r3
 8001276:	3301      	adds	r3, #1
 8001278:	b29a      	uxth	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f8a3 2814 	strh.w	r2, [r3, #2068]	; 0x814
			hydroc_obj->rx_buffer_new_string_indx=hydroc_obj->rx_buffer_indx;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
 8001286:	b29a      	uxth	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f8a3 2816 	strh.w	r2, [r3, #2070]	; 0x816
 800128e:	e008      	b.n	80012a2 <hydroc_media_process_byte+0xaa>
		}
		else hydroc_obj->rx_buffer_indx++;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
 8001296:	b29b      	uxth	r3, r3
 8001298:	3301      	adds	r3, #1
 800129a:	b29a      	uxth	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f8a3 2814 	strh.w	r2, [r3, #2068]	; 0x814
		if(hydroc_obj->rx_buffer_indx==HYDROC_RX_BUFFER_SIZE){
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012ae:	d11c      	bne.n	80012ea <hydroc_media_process_byte+0xf2>
			hydroc_obj->rx_buffer_indx=0;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2815 	strb.w	r2, [r3, #2069]	; 0x815
			hydroc_obj->rx_buffer_new_string_indx=hydroc_obj->rx_buffer_indx;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f8a3 2816 	strh.w	r2, [r3, #2070]	; 0x816
	}
	else{
		hydroc_obj->rx_buffer_indx=0;
		hydroc_obj->rx_buffer_new_string_indx=hydroc_obj->rx_buffer_indx;
	}
}
 80012cc:	e00d      	b.n	80012ea <hydroc_media_process_byte+0xf2>
		hydroc_obj->rx_buffer_indx=0;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2815 	strb.w	r2, [r3, #2069]	; 0x815
		hydroc_obj->rx_buffer_new_string_indx=hydroc_obj->rx_buffer_indx;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f8a3 2816 	strh.w	r2, [r3, #2070]	; 0x816
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <hydroc_loop>:

void hydroc_loop(hydroc* hydroc_obj)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b084      	sub	sp, #16
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 uint16_t msg_indx;
 for(;;)
 {
	if(xQueueReceive(hydroc_obj->media_rx_messages_q,&msg_indx,1)){
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f107 010a 	add.w	r1, r7, #10
 8001302:	2201      	movs	r2, #1
 8001304:	4618      	mov	r0, r3
 8001306:	f00d f8b3 	bl	800e470 <xQueueReceive>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d008      	beq.n	8001322 <hydroc_loop+0x30>
		uint8_t* msg=hydroc_obj->rx_buffer+msg_indx;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3314      	adds	r3, #20
 8001314:	897a      	ldrh	r2, [r7, #10]
 8001316:	4413      	add	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]
		hydroc_parse_message(hydroc_obj,msg);
 800131a:	68f9      	ldr	r1, [r7, #12]
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 f93b 	bl	8001598 <hydroc_parse_message>
	}
	osDelay(1);
 8001322:	2001      	movs	r0, #1
 8001324:	f00c faed 	bl	800d902 <osDelay>
	if(xQueueReceive(hydroc_obj->media_rx_messages_q,&msg_indx,1)){
 8001328:	e7e7      	b.n	80012fa <hydroc_loop+0x8>

0800132a <hydroc_media_get_byte>:
 }
}

uint8_t hydroc_media_get_byte(hydroc* hydroc_obj,uint8_t* tx_byte)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(hydroc_obj->media_tx_q,0);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6859      	ldr	r1, [r3, #4]
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	2200      	movs	r2, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f00c fc12 	bl	800db68 <osMessageGet>
	if(res.status==osEventMessage)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b10      	cmp	r3, #16
 8001348:	d105      	bne.n	8001356 <hydroc_media_get_byte+0x2c>
     {
		*tx_byte=res.value.v;
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	701a      	strb	r2, [r3, #0]
		return HYDROC_F_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <hydroc_media_get_byte+0x2e>
     }
   return HYDROC_F_ERR;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <hydroc_send_cmd>:


void hydroc_send_cmd(hydroc* hydroc_obj,uint8_t cmd_id,void* arg)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	460b      	mov	r3, r1
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	72fb      	strb	r3, [r7, #11]
 char* tmp_cmd=(char*) malloc(50);
 800136e:	2032      	movs	r0, #50	; 0x32
 8001370:	f00f fcc8 	bl	8010d04 <malloc>
 8001374:	4603      	mov	r3, r0
 8001376:	617b      	str	r3, [r7, #20]
 switch(cmd_id)
 8001378:	7afb      	ldrb	r3, [r7, #11]
 800137a:	2b0a      	cmp	r3, #10
 800137c:	f200 80ff 	bhi.w	800157e <hydroc_send_cmd+0x21e>
 8001380:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <hydroc_send_cmd+0x28>)
 8001382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001386:	bf00      	nop
 8001388:	080013d1 	.word	0x080013d1
 800138c:	080013ed 	.word	0x080013ed
 8001390:	08001409 	.word	0x08001409
 8001394:	08001455 	.word	0x08001455
 8001398:	08001547 	.word	0x08001547
 800139c:	0800157f 	.word	0x0800157f
 80013a0:	08001471 	.word	0x08001471
 80013a4:	080014bd 	.word	0x080014bd
 80013a8:	0800152b 	.word	0x0800152b
 80013ac:	080013b5 	.word	0x080013b5
 80013b0:	08001563 	.word	0x08001563
 {
     case HYDROC_CMD_TEST:
	  hydroc_schedule_for_tx(hydroc_obj,(uint8_t*)hydroc_commands_strings[HYDROC_CMD_TEST_STRING],strlen(hydroc_commands_strings[HYDROC_CMD_TEST_STRING]));
 80013b4:	4b74      	ldr	r3, [pc, #464]	; (8001588 <hydroc_send_cmd+0x228>)
 80013b6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80013b8:	4b73      	ldr	r3, [pc, #460]	; (8001588 <hydroc_send_cmd+0x228>)
 80013ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013bc:	4618      	mov	r0, r3
 80013be:	f7fe ff37 	bl	8000230 <strlen>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	4621      	mov	r1, r4
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f7ff fe5d 	bl	8001088 <hydroc_schedule_for_tx>
	 break;
 80013ce:	e0d6      	b.n	800157e <hydroc_send_cmd+0x21e>
     case HYDROC_CMD_ENTER_CFG:
 	  hydroc_schedule_for_tx(hydroc_obj,(uint8_t*)hydroc_commands_strings[HYDROC_CMD_ENTER_CFG],strlen(hydroc_commands_strings[HYDROC_CMD_ENTER_CFG]));
 80013d0:	4b6d      	ldr	r3, [pc, #436]	; (8001588 <hydroc_send_cmd+0x228>)
 80013d2:	681c      	ldr	r4, [r3, #0]
 80013d4:	4b6c      	ldr	r3, [pc, #432]	; (8001588 <hydroc_send_cmd+0x228>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7fe ff29 	bl	8000230 <strlen>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4621      	mov	r1, r4
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f7ff fe4f 	bl	8001088 <hydroc_schedule_for_tx>
	 break;
 80013ea:	e0c8      	b.n	800157e <hydroc_send_cmd+0x21e>
     case HYDROC_CMD_EXIT_CFG:
  	  hydroc_schedule_for_tx(hydroc_obj,(uint8_t*)hydroc_commands_strings[HYDROC_CMD_EXIT_CFG],strlen(hydroc_commands_strings[HYDROC_CMD_EXIT_CFG]));
 80013ec:	4b66      	ldr	r3, [pc, #408]	; (8001588 <hydroc_send_cmd+0x228>)
 80013ee:	685c      	ldr	r4, [r3, #4]
 80013f0:	4b65      	ldr	r3, [pc, #404]	; (8001588 <hydroc_send_cmd+0x228>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7fe ff1b 	bl	8000230 <strlen>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	4621      	mov	r1, r4
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f7ff fe41 	bl	8001088 <hydroc_schedule_for_tx>
	 break;
 8001406:	e0ba      	b.n	800157e <hydroc_send_cmd+0x21e>
     case HYDROC_CMD_SET_REAL_TIME:
       tmp_cmd[0]=0x00;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
       strcat(tmp_cmd,hydroc_commands_strings[HYDROC_CMD_SET_REAL_TIME]);
 800140e:	4b5e      	ldr	r3, [pc, #376]	; (8001588 <hydroc_send_cmd+0x228>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	4619      	mov	r1, r3
 8001414:	6978      	ldr	r0, [r7, #20]
 8001416:	f00f fe54 	bl	80110c2 <strcat>
       strcat(tmp_cmd,(char*)arg);
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	6978      	ldr	r0, [r7, #20]
 800141e:	f00f fe50 	bl	80110c2 <strcat>
       strcat(tmp_cmd,"\r\n");
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7fe ff04 	bl	8000230 <strlen>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	4413      	add	r3, r2
 8001430:	4a56      	ldr	r2, [pc, #344]	; (800158c <hydroc_send_cmd+0x22c>)
 8001432:	8811      	ldrh	r1, [r2, #0]
 8001434:	7892      	ldrb	r2, [r2, #2]
 8001436:	8019      	strh	r1, [r3, #0]
 8001438:	709a      	strb	r2, [r3, #2]

       hydroc_schedule_for_tx(hydroc_obj,(uint8_t*)tmp_cmd,strlen(tmp_cmd));
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f7fe fef8 	bl	8000230 <strlen>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	6979      	ldr	r1, [r7, #20]
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff fe1e 	bl	8001088 <hydroc_schedule_for_tx>
       free(tmp_cmd);
 800144c:	6978      	ldr	r0, [r7, #20]
 800144e:	f00f fc61 	bl	8010d14 <free>
	 break;
 8001452:	e094      	b.n	800157e <hydroc_send_cmd+0x21e>
     case HYDROC_CMD_ENABLE_PUMP:
   	  hydroc_schedule_for_tx(hydroc_obj,(uint8_t*)hydroc_commands_strings[HYDROC_CMD_ENABLE_PUMP],strlen(hydroc_commands_strings[HYDROC_CMD_ENABLE_PUMP]));
 8001454:	4b4c      	ldr	r3, [pc, #304]	; (8001588 <hydroc_send_cmd+0x228>)
 8001456:	68dc      	ldr	r4, [r3, #12]
 8001458:	4b4b      	ldr	r3, [pc, #300]	; (8001588 <hydroc_send_cmd+0x228>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	4618      	mov	r0, r3
 800145e:	f7fe fee7 	bl	8000230 <strlen>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	4621      	mov	r1, r4
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f7ff fe0d 	bl	8001088 <hydroc_schedule_for_tx>
	 break;
 800146e:	e086      	b.n	800157e <hydroc_send_cmd+0x21e>
     case HYDROC_CMD_SET_ZERO_MODE:
       tmp_cmd[0]=0x00;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
       strcat(tmp_cmd,hydroc_commands_strings[HYDROC_CMD_SET_MODE]);
 8001476:	4b44      	ldr	r3, [pc, #272]	; (8001588 <hydroc_send_cmd+0x228>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	4619      	mov	r1, r3
 800147c:	6978      	ldr	r0, [r7, #20]
 800147e:	f00f fe20 	bl	80110c2 <strcat>
       strcat(tmp_cmd,"1,120,2,2,2\r\n");
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7fe fed4 	bl	8000230 <strlen>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	4413      	add	r3, r2
 8001490:	4a3f      	ldr	r2, [pc, #252]	; (8001590 <hydroc_send_cmd+0x230>)
 8001492:	461c      	mov	r4, r3
 8001494:	4613      	mov	r3, r2
 8001496:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001498:	6020      	str	r0, [r4, #0]
 800149a:	6061      	str	r1, [r4, #4]
 800149c:	60a2      	str	r2, [r4, #8]
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	81a3      	strh	r3, [r4, #12]

       hydroc_schedule_for_tx(hydroc_obj,(uint8_t*)tmp_cmd,strlen(tmp_cmd));
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7fe fec4 	bl	8000230 <strlen>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	6979      	ldr	r1, [r7, #20]
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f7ff fdea 	bl	8001088 <hydroc_schedule_for_tx>
       free(tmp_cmd);
 80014b4:	6978      	ldr	r0, [r7, #20]
 80014b6:	f00f fc2d 	bl	8010d14 <free>
	 break;
 80014ba:	e060      	b.n	800157e <hydroc_send_cmd+0x21e>
     case HYDROC_CMD_SET_MEASURE_MODE:
       tmp_cmd[0]=0x00;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
       strcat(tmp_cmd,hydroc_commands_strings[HYDROC_CMD_SET_MODE]);
 80014c2:	4b31      	ldr	r3, [pc, #196]	; (8001588 <hydroc_send_cmd+0x228>)
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	4619      	mov	r1, r3
 80014c8:	6978      	ldr	r0, [r7, #20]
 80014ca:	f00f fdfa 	bl	80110c2 <strcat>
       strcat(tmp_cmd,"3,3500000,");
 80014ce:	6978      	ldr	r0, [r7, #20]
 80014d0:	f7fe feae 	bl	8000230 <strlen>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	4413      	add	r3, r2
 80014dc:	492d      	ldr	r1, [pc, #180]	; (8001594 <hydroc_send_cmd+0x234>)
 80014de:	461a      	mov	r2, r3
 80014e0:	460b      	mov	r3, r1
 80014e2:	cb03      	ldmia	r3!, {r0, r1}
 80014e4:	6010      	str	r0, [r2, #0]
 80014e6:	6051      	str	r1, [r2, #4]
 80014e8:	8819      	ldrh	r1, [r3, #0]
 80014ea:	789b      	ldrb	r3, [r3, #2]
 80014ec:	8111      	strh	r1, [r2, #8]
 80014ee:	7293      	strb	r3, [r2, #10]
       strcat(tmp_cmd,(char*)arg);
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f00f fde5 	bl	80110c2 <strcat>
       strcat(tmp_cmd,"\r\n");
 80014f8:	6978      	ldr	r0, [r7, #20]
 80014fa:	f7fe fe99 	bl	8000230 <strlen>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	4413      	add	r3, r2
 8001506:	4a21      	ldr	r2, [pc, #132]	; (800158c <hydroc_send_cmd+0x22c>)
 8001508:	8811      	ldrh	r1, [r2, #0]
 800150a:	7892      	ldrb	r2, [r2, #2]
 800150c:	8019      	strh	r1, [r3, #0]
 800150e:	709a      	strb	r2, [r3, #2]

  	   hydroc_schedule_for_tx(hydroc_obj,(uint8_t*)tmp_cmd,strlen(tmp_cmd));
 8001510:	6978      	ldr	r0, [r7, #20]
 8001512:	f7fe fe8d 	bl	8000230 <strlen>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	6979      	ldr	r1, [r7, #20]
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f7ff fdb3 	bl	8001088 <hydroc_schedule_for_tx>
  	   free(tmp_cmd);
 8001522:	6978      	ldr	r0, [r7, #20]
 8001524:	f00f fbf6 	bl	8010d14 <free>
	 break;
 8001528:	e029      	b.n	800157e <hydroc_send_cmd+0x21e>
     case HYDROC_CMD_CLEAR:
  	   hydroc_schedule_for_tx(hydroc_obj,(uint8_t*)hydroc_commands_strings[HYDROC_CMD_CLEAR],strlen(hydroc_commands_strings[HYDROC_CMD_CLEAR]));
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <hydroc_send_cmd+0x228>)
 800152c:	6a1c      	ldr	r4, [r3, #32]
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <hydroc_send_cmd+0x228>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe fe7c 	bl	8000230 <strlen>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	4621      	mov	r1, r4
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f7ff fda2 	bl	8001088 <hydroc_schedule_for_tx>
  	 break;
 8001544:	e01b      	b.n	800157e <hydroc_send_cmd+0x21e>
     case HYDROC_CMD_DISABLE_PUMP:
   	   hydroc_schedule_for_tx(hydroc_obj,(uint8_t*)hydroc_commands_strings[HYDROC_CMD_DISABLE_PUMP],strlen(hydroc_commands_strings[HYDROC_CMD_DISABLE_PUMP]));
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <hydroc_send_cmd+0x228>)
 8001548:	691c      	ldr	r4, [r3, #16]
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <hydroc_send_cmd+0x228>)
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe fe6e 	bl	8000230 <strlen>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	4621      	mov	r1, r4
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f7ff fd94 	bl	8001088 <hydroc_schedule_for_tx>
     break;
 8001560:	e00d      	b.n	800157e <hydroc_send_cmd+0x21e>
     case HYDROC_CMD_READ_INVENTORY:
       hydroc_schedule_for_tx(hydroc_obj,(uint8_t*)hydroc_commands_strings[HYDROC_CMD_READ_INVENTORY],strlen(hydroc_commands_strings[HYDROC_CMD_READ_INVENTORY]));
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <hydroc_send_cmd+0x228>)
 8001564:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <hydroc_send_cmd+0x228>)
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe fe60 	bl	8000230 <strlen>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	4621      	mov	r1, r4
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f7ff fd86 	bl	8001088 <hydroc_schedule_for_tx>
     break;
 800157c:	bf00      	nop
 }
}
 800157e:	bf00      	nop
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd90      	pop	{r4, r7, pc}
 8001586:	bf00      	nop
 8001588:	20000000 	.word	0x20000000
 800158c:	08014074 	.word	0x08014074
 8001590:	08014078 	.word	0x08014078
 8001594:	08014088 	.word	0x08014088

08001598 <hydroc_parse_message>:
	}
	return HYDROC_F_ERR;
}

int hydroc_parse_message(hydroc* hydroc_obj,uint8_t* msg)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,",");//header
 80015a2:	4922      	ldr	r1, [pc, #136]	; (800162c <hydroc_parse_message+0x94>)
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f010 fc15 	bl	8011dd4 <strtok>
 80015aa:	6138      	str	r0, [r7, #16]
	uint8_t* tmp_ptr;
	for(int i=0;i<HYDROC_MSG_NUM_OF_FUNCTIONS;i++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e033      	b.n	800161a <hydroc_parse_message+0x82>
	{
	   if(strlen(pch)==strlen(hydroc_messages_strings[i]))
 80015b2:	6938      	ldr	r0, [r7, #16]
 80015b4:	f7fe fe3c 	bl	8000230 <strlen>
 80015b8:	4604      	mov	r4, r0
 80015ba:	4a1d      	ldr	r2, [pc, #116]	; (8001630 <hydroc_parse_message+0x98>)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe fe34 	bl	8000230 <strlen>
 80015c8:	4603      	mov	r3, r0
 80015ca:	429c      	cmp	r4, r3
 80015cc:	d122      	bne.n	8001614 <hydroc_parse_message+0x7c>
	   {
		  tmp_ptr=0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
		  tmp_ptr=strstr(pch,hydroc_messages_strings[i]);
 80015d2:	4a17      	ldr	r2, [pc, #92]	; (8001630 <hydroc_parse_message+0x98>)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015da:	4619      	mov	r1, r3
 80015dc:	6938      	ldr	r0, [r7, #16]
 80015de:	f00f fd87 	bl	80110f0 <strstr>
 80015e2:	60f8      	str	r0, [r7, #12]
		  if(tmp_ptr)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d014      	beq.n	8001614 <hydroc_parse_message+0x7c>
		   {
			 if(hydroc_functions[i](hydroc_obj,msg+strlen(tmp_ptr)+1)==HYDROC_F_OK) return HYDROC_F_OK;
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <hydroc_parse_message+0x9c>)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f7fe fe1c 	bl	8000230 <strlen>
 80015f8:	4603      	mov	r3, r0
 80015fa:	3301      	adds	r3, #1
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4619      	mov	r1, r3
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	47a0      	blx	r4
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <hydroc_parse_message+0x78>
 800160c:	2300      	movs	r3, #0
 800160e:	e008      	b.n	8001622 <hydroc_parse_message+0x8a>
	         else return HYDROC_F_ERR;
 8001610:	2301      	movs	r3, #1
 8001612:	e006      	b.n	8001622 <hydroc_parse_message+0x8a>
	for(int i=0;i<HYDROC_MSG_NUM_OF_FUNCTIONS;i++)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3301      	adds	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2b08      	cmp	r3, #8
 800161e:	ddc8      	ble.n	80015b2 <hydroc_parse_message+0x1a>
		   }
		}
	 }
	 return HYDROC_F_ERR;
 8001620:	2301      	movs	r3, #1

}
 8001622:	4618      	mov	r0, r3
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd90      	pop	{r4, r7, pc}
 800162a:	bf00      	nop
 800162c:	08014094 	.word	0x08014094
 8001630:	20000400 	.word	0x20000400
 8001634:	200003dc 	.word	0x200003dc

08001638 <hydroc_messages_init>:

void hydroc_messages_init(hydroc* hydroc_obj)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	hydroc_functions[HYDROC_MSG_COSIM] = HYDROC_MSG_COSIM_f;
 8001640:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <hydroc_messages_init+0x80>)
 8001642:	4a1e      	ldr	r2, [pc, #120]	; (80016bc <hydroc_messages_init+0x84>)
 8001644:	601a      	str	r2, [r3, #0]
	hydroc_functions[HYDROC_MSG_CODS4] = HYDROC_MSG_CODS4_f;
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <hydroc_messages_init+0x80>)
 8001648:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <hydroc_messages_init+0x88>)
 800164a:	605a      	str	r2, [r3, #4]
	hydroc_functions[HYDROC_MSG_COTS1] = HYDROC_MSG_COTS1_f;
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <hydroc_messages_init+0x80>)
 800164e:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <hydroc_messages_init+0x8c>)
 8001650:	609a      	str	r2, [r3, #8]
	hydroc_functions[HYDROC_MSG_COCFG] = HYDROC_MSG_COCFG_f;
 8001652:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <hydroc_messages_init+0x80>)
 8001654:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <hydroc_messages_init+0x90>)
 8001656:	60da      	str	r2, [r3, #12]
	hydroc_functions[HYDROC_MSG_CODPV] = HYDROC_MSG_CODPV_f;
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <hydroc_messages_init+0x80>)
 800165a:	4a1c      	ldr	r2, [pc, #112]	; (80016cc <hydroc_messages_init+0x94>)
 800165c:	611a      	str	r2, [r3, #16]
	hydroc_functions[HYDROC_MSG_COPEX] = HYDROC_MSG_COPEX_f;
 800165e:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <hydroc_messages_init+0x80>)
 8001660:	4a1b      	ldr	r2, [pc, #108]	; (80016d0 <hydroc_messages_init+0x98>)
 8001662:	615a      	str	r2, [r3, #20]
	hydroc_functions[HYDROC_MSG_CORTS] = HYDROC_MSG_CORTS_f;
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <hydroc_messages_init+0x80>)
 8001666:	4a1b      	ldr	r2, [pc, #108]	; (80016d4 <hydroc_messages_init+0x9c>)
 8001668:	619a      	str	r2, [r3, #24]
	hydroc_functions[HYDROC_MSG_COEXT] = HYDROC_MSG_COEXT_f;
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <hydroc_messages_init+0x80>)
 800166c:	4a1a      	ldr	r2, [pc, #104]	; (80016d8 <hydroc_messages_init+0xa0>)
 800166e:	61da      	str	r2, [r3, #28]
	hydroc_functions[HYDROC_MSG_COERR] = HYDROC_MSG_COERR_f;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <hydroc_messages_init+0x80>)
 8001672:	4a1a      	ldr	r2, [pc, #104]	; (80016dc <hydroc_messages_init+0xa4>)
 8001674:	621a      	str	r2, [r3, #32]

	hydroc_messages_strings[HYDROC_MSG_COSIM] = "$COSIM";
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <hydroc_messages_init+0xa8>)
 8001678:	4a1a      	ldr	r2, [pc, #104]	; (80016e4 <hydroc_messages_init+0xac>)
 800167a:	601a      	str	r2, [r3, #0]
	hydroc_messages_strings[HYDROC_MSG_CODS4] = "$CODS4";
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <hydroc_messages_init+0xa8>)
 800167e:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <hydroc_messages_init+0xb0>)
 8001680:	605a      	str	r2, [r3, #4]
	hydroc_messages_strings[HYDROC_MSG_COTS1] = "$COTS1";
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <hydroc_messages_init+0xa8>)
 8001684:	4a19      	ldr	r2, [pc, #100]	; (80016ec <hydroc_messages_init+0xb4>)
 8001686:	609a      	str	r2, [r3, #8]
	hydroc_messages_strings[HYDROC_MSG_COCFG] = "$COCFG";
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <hydroc_messages_init+0xa8>)
 800168a:	4a19      	ldr	r2, [pc, #100]	; (80016f0 <hydroc_messages_init+0xb8>)
 800168c:	60da      	str	r2, [r3, #12]
	hydroc_messages_strings[HYDROC_MSG_CODPV] = "$CODPV";
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <hydroc_messages_init+0xa8>)
 8001690:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <hydroc_messages_init+0xbc>)
 8001692:	611a      	str	r2, [r3, #16]
	hydroc_messages_strings[HYDROC_MSG_COPEX] = "$COPEX";
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <hydroc_messages_init+0xa8>)
 8001696:	4a18      	ldr	r2, [pc, #96]	; (80016f8 <hydroc_messages_init+0xc0>)
 8001698:	615a      	str	r2, [r3, #20]
	hydroc_messages_strings[HYDROC_MSG_CORTS] = "$CORTS";
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <hydroc_messages_init+0xa8>)
 800169c:	4a17      	ldr	r2, [pc, #92]	; (80016fc <hydroc_messages_init+0xc4>)
 800169e:	619a      	str	r2, [r3, #24]
	hydroc_messages_strings[HYDROC_MSG_COEXT] = "$COEXT";
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <hydroc_messages_init+0xa8>)
 80016a2:	4a17      	ldr	r2, [pc, #92]	; (8001700 <hydroc_messages_init+0xc8>)
 80016a4:	61da      	str	r2, [r3, #28]
	hydroc_messages_strings[HYDROC_MSG_COERR] = "$COERR";
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <hydroc_messages_init+0xa8>)
 80016a8:	4a16      	ldr	r2, [pc, #88]	; (8001704 <hydroc_messages_init+0xcc>)
 80016aa:	621a      	str	r2, [r3, #32]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	200003dc 	.word	0x200003dc
 80016bc:	08001709 	.word	0x08001709
 80016c0:	08001849 	.word	0x08001849
 80016c4:	08001725 	.word	0x08001725
 80016c8:	08001b09 	.word	0x08001b09
 80016cc:	08001b85 	.word	0x08001b85
 80016d0:	08001c89 	.word	0x08001c89
 80016d4:	08001d21 	.word	0x08001d21
 80016d8:	08001d61 	.word	0x08001d61
 80016dc:	08001d99 	.word	0x08001d99
 80016e0:	20000400 	.word	0x20000400
 80016e4:	08014098 	.word	0x08014098
 80016e8:	080140a0 	.word	0x080140a0
 80016ec:	080140a8 	.word	0x080140a8
 80016f0:	080140b0 	.word	0x080140b0
 80016f4:	080140b8 	.word	0x080140b8
 80016f8:	080140c0 	.word	0x080140c0
 80016fc:	080140c8 	.word	0x080140c8
 8001700:	080140d0 	.word	0x080140d0
 8001704:	080140d8 	.word	0x080140d8

08001708 <HYDROC_MSG_COSIM_f>:


int HYDROC_MSG_COSIM_f(hydroc* hydroc_obj,uint8_t* msg)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
    //osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_BOOTED,1);
    hydroc_obj->status=HYDROC_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	745a      	strb	r2, [r3, #17]
    return HYDROC_F_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <HYDROC_MSG_COTS1_f>:

int HYDROC_MSG_COTS1_f(hydroc* hydroc_obj,uint8_t* msg)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
     char * pch;

	 pch = strtok ((char*)msg,",");//destination
 800172e:	4945      	ldr	r1, [pc, #276]	; (8001844 <HYDROC_MSG_COTS1_f+0x120>)
 8001730:	6838      	ldr	r0, [r7, #0]
 8001732:	f010 fb4f 	bl	8011dd4 <strtok>
 8001736:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//source
 8001738:	4942      	ldr	r1, [pc, #264]	; (8001844 <HYDROC_MSG_COTS1_f+0x120>)
 800173a:	2000      	movs	r0, #0
 800173c:	f010 fb4a 	bl	8011dd4 <strtok>
 8001740:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//data
 8001742:	4940      	ldr	r1, [pc, #256]	; (8001844 <HYDROC_MSG_COTS1_f+0x120>)
 8001744:	2000      	movs	r0, #0
 8001746:	f010 fb45 	bl	8011dd4 <strtok>
 800174a:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//format
 800174c:	493d      	ldr	r1, [pc, #244]	; (8001844 <HYDROC_MSG_COTS1_f+0x120>)
 800174e:	2000      	movs	r0, #0
 8001750:	f010 fb40 	bl	8011dd4 <strtok>
 8001754:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//LDN
 8001756:	493b      	ldr	r1, [pc, #236]	; (8001844 <HYDROC_MSG_COTS1_f+0x120>)
 8001758:	2000      	movs	r0, #0
 800175a:	f010 fb3b 	bl	8011dd4 <strtok>
 800175e:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//date
 8001760:	4938      	ldr	r1, [pc, #224]	; (8001844 <HYDROC_MSG_COTS1_f+0x120>)
 8001762:	2000      	movs	r0, #0
 8001764:	f010 fb36 	bl	8011dd4 <strtok>
 8001768:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ts1.date[0]=0x00;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2917 	strb.w	r2, [r3, #2327]	; 0x917
	 strcpy(hydroc_obj->ts1.date,pch);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f603 1317 	addw	r3, r3, #2327	; 0x917
 8001778:	68f9      	ldr	r1, [r7, #12]
 800177a:	4618      	mov	r0, r3
 800177c:	f00f fcb0 	bl	80110e0 <strcpy>
	 pch = strtok (NULL,",");//time
 8001780:	4930      	ldr	r1, [pc, #192]	; (8001844 <HYDROC_MSG_COTS1_f+0x120>)
 8001782:	2000      	movs	r0, #0
 8001784:	f010 fb26 	bl	8011dd4 <strtok>
 8001788:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ts1.time[0]=0x00;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2926 	strb.w	r2, [r3, #2342]	; 0x926
	 strcpy(hydroc_obj->ts1.time,pch);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f603 1326 	addw	r3, r3, #2342	; 0x926
 8001798:	68f9      	ldr	r1, [r7, #12]
 800179a:	4618      	mov	r0, r3
 800179c:	f00f fca0 	bl	80110e0 <strcpy>
	 pch = strtok (NULL,",");//weekday
 80017a0:	4928      	ldr	r1, [pc, #160]	; (8001844 <HYDROC_MSG_COTS1_f+0x120>)
 80017a2:	2000      	movs	r0, #0
 80017a4:	f010 fb16 	bl	8011dd4 <strtok>
 80017a8:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//T_control
 80017aa:	4926      	ldr	r1, [pc, #152]	; (8001844 <HYDROC_MSG_COTS1_f+0x120>)
 80017ac:	2000      	movs	r0, #0
 80017ae:	f010 fb11 	bl	8011dd4 <strtok>
 80017b2:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ts1.T_control[0]=0x00;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2944 	strb.w	r2, [r3, #2372]	; 0x944
	 strcpy(hydroc_obj->ts1.T_control,pch);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f603 1344 	addw	r3, r3, #2372	; 0x944
 80017c2:	68f9      	ldr	r1, [r7, #12]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f00f fc8b 	bl	80110e0 <strcpy>
	 pch = strtok (NULL,",");//xz
 80017ca:	491e      	ldr	r1, [pc, #120]	; (8001844 <HYDROC_MSG_COTS1_f+0x120>)
 80017cc:	2000      	movs	r0, #0
 80017ce:	f010 fb01 	bl	8011dd4 <strtok>
 80017d2:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//T_gas
 80017d4:	491b      	ldr	r1, [pc, #108]	; (8001844 <HYDROC_MSG_COTS1_f+0x120>)
 80017d6:	2000      	movs	r0, #0
 80017d8:	f010 fafc 	bl	8011dd4 <strtok>
 80017dc:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ts1.T_gas[0]=0x00;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
	 strcpy(hydroc_obj->ts1.T_gas,pch);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f603 1353 	addw	r3, r3, #2387	; 0x953
 80017ec:	68f9      	ldr	r1, [r7, #12]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f00f fc76 	bl	80110e0 <strcpy>
	 pch = strtok (NULL,",");//xz
 80017f4:	4913      	ldr	r1, [pc, #76]	; (8001844 <HYDROC_MSG_COTS1_f+0x120>)
 80017f6:	2000      	movs	r0, #0
 80017f8:	f010 faec 	bl	8011dd4 <strtok>
 80017fc:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//xz
 80017fe:	4911      	ldr	r1, [pc, #68]	; (8001844 <HYDROC_MSG_COTS1_f+0x120>)
 8001800:	2000      	movs	r0, #0
 8001802:	f010 fae7 	bl	8011dd4 <strtok>
 8001806:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//rH_gas
 8001808:	490e      	ldr	r1, [pc, #56]	; (8001844 <HYDROC_MSG_COTS1_f+0x120>)
 800180a:	2000      	movs	r0, #0
 800180c:	f010 fae2 	bl	8011dd4 <strtok>
 8001810:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ts1.rH_gas[0]=0x00;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2962 	strb.w	r2, [r3, #2402]	; 0x962
	 strcpy(hydroc_obj->ts1.rH_gas,pch);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f603 1362 	addw	r3, r3, #2402	; 0x962
 8001820:	68f9      	ldr	r1, [r7, #12]
 8001822:	4618      	mov	r0, r3
 8001824:	f00f fc5c 	bl	80110e0 <strcpy>
	 osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_COTS1,1);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2201      	movs	r2, #1
 800182e:	f240 2172 	movw	r1, #626	; 0x272
 8001832:	4618      	mov	r0, r3
 8001834:	f00c f958 	bl	800dae8 <osMessagePut>

     return HYDROC_F_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	08014094 	.word	0x08014094

08001848 <HYDROC_MSG_CODS4_f>:

int HYDROC_MSG_CODS4_f(hydroc* hydroc_obj,uint8_t* msg)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
     char * pch;
	 pch = strtok ((char*)msg,",");//destination
 8001852:	49ab      	ldr	r1, [pc, #684]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 8001854:	6838      	ldr	r0, [r7, #0]
 8001856:	f010 fabd 	bl	8011dd4 <strtok>
 800185a:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//source
 800185c:	49a8      	ldr	r1, [pc, #672]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 800185e:	2000      	movs	r0, #0
 8001860:	f010 fab8 	bl	8011dd4 <strtok>
 8001864:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//data
 8001866:	49a6      	ldr	r1, [pc, #664]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 8001868:	2000      	movs	r0, #0
 800186a:	f010 fab3 	bl	8011dd4 <strtok>
 800186e:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//format
 8001870:	49a3      	ldr	r1, [pc, #652]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 8001872:	2000      	movs	r0, #0
 8001874:	f010 faae 	bl	8011dd4 <strtok>
 8001878:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//LDN
 800187a:	49a1      	ldr	r1, [pc, #644]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 800187c:	2000      	movs	r0, #0
 800187e:	f010 faa9 	bl	8011dd4 <strtok>
 8001882:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//date
 8001884:	499e      	ldr	r1, [pc, #632]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 8001886:	2000      	movs	r0, #0
 8001888:	f010 faa4 	bl	8011dd4 <strtok>
 800188c:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.date[0]=0x00;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
	 strcpy(hydroc_obj->ds4.date,pch);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800189c:	68f9      	ldr	r1, [r7, #12]
 800189e:	4618      	mov	r0, r3
 80018a0:	f00f fc1e 	bl	80110e0 <strcpy>
	 pch = strtok (NULL,",");//time
 80018a4:	4996      	ldr	r1, [pc, #600]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 80018a6:	2000      	movs	r0, #0
 80018a8:	f010 fa94 	bl	8011dd4 <strtok>
 80018ac:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.time[0]=0x00;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2827 	strb.w	r2, [r3, #2087]	; 0x827
	 strcpy(hydroc_obj->ds4.time,pch);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f603 0327 	addw	r3, r3, #2087	; 0x827
 80018bc:	68f9      	ldr	r1, [r7, #12]
 80018be:	4618      	mov	r0, r3
 80018c0:	f00f fc0e 	bl	80110e0 <strcpy>
	 //pch = strtok (NULL,",");//msec
	 pch = strtok (NULL,",");//weekday
 80018c4:	498e      	ldr	r1, [pc, #568]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 80018c6:	2000      	movs	r0, #0
 80018c8:	f010 fa84 	bl	8011dd4 <strtok>
 80018cc:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.weekday[0]=0x00;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2836 	strb.w	r2, [r3, #2102]	; 0x836
	 strcpy(hydroc_obj->ds4.weekday,pch);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f603 0336 	addw	r3, r3, #2102	; 0x836
 80018dc:	68f9      	ldr	r1, [r7, #12]
 80018de:	4618      	mov	r0, r3
 80018e0:	f00f fbfe 	bl	80110e0 <strcpy>
	 pch = strtok (NULL,",");//power_pump
 80018e4:	4986      	ldr	r1, [pc, #536]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 80018e6:	2000      	movs	r0, #0
 80018e8:	f010 fa74 	bl	8011dd4 <strtok>
 80018ec:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.pump_pwr[0]=0x00;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2845 	strb.w	r2, [r3, #2117]	; 0x845
	 strcpy(hydroc_obj->ds4.pump_pwr,pch);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f603 0345 	addw	r3, r3, #2117	; 0x845
 80018fc:	68f9      	ldr	r1, [r7, #12]
 80018fe:	4618      	mov	r0, r3
 8001900:	f00f fbee 	bl	80110e0 <strcpy>
	 //pch = strtok (NULL,",");//analog_1
	 pch = strtok (NULL,",");//p_ndir
 8001904:	497e      	ldr	r1, [pc, #504]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 8001906:	2000      	movs	r0, #0
 8001908:	f010 fa64 	bl	8011dd4 <strtok>
 800190c:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.P_SENSOR[0]=0x00;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
	 strcpy(hydroc_obj->ds4.P_SENSOR,pch);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f603 0354 	addw	r3, r3, #2132	; 0x854
 800191c:	68f9      	ldr	r1, [r7, #12]
 800191e:	4618      	mov	r0, r3
 8001920:	f00f fbde 	bl	80110e0 <strcpy>
	 pch = strtok (NULL,",");//p_in
 8001924:	4976      	ldr	r1, [pc, #472]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 8001926:	2000      	movs	r0, #0
 8001928:	f010 fa54 	bl	8011dd4 <strtok>
 800192c:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.P_IN[0]=0x00;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2863 	strb.w	r2, [r3, #2147]	; 0x863
	 strcpy(hydroc_obj->ds4.P_IN,pch);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f603 0363 	addw	r3, r3, #2147	; 0x863
 800193c:	68f9      	ldr	r1, [r7, #12]
 800193e:	4618      	mov	r0, r3
 8001940:	f00f fbce 	bl	80110e0 <strcpy>
	 //pch = strtok (NULL,",");//analog_4
	 //pch = strtok (NULL,",");//analog_5
	 pch = strtok (NULL,",");//I_total
 8001944:	496e      	ldr	r1, [pc, #440]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 8001946:	2000      	movs	r0, #0
 8001948:	f010 fa44 	bl	8011dd4 <strtok>
 800194c:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.I_total[0]=0x00;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2872 	strb.w	r2, [r3, #2162]	; 0x872
	 strcpy(hydroc_obj->ds4.I_total,pch);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f603 0372 	addw	r3, r3, #2162	; 0x872
 800195c:	68f9      	ldr	r1, [r7, #12]
 800195e:	4618      	mov	r0, r3
 8001960:	f00f fbbe 	bl	80110e0 <strcpy>
	 pch = strtok (NULL,",");//U_total
 8001964:	4966      	ldr	r1, [pc, #408]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 8001966:	2000      	movs	r0, #0
 8001968:	f010 fa34 	bl	8011dd4 <strtok>
 800196c:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.U_total[0]=0x00;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2881 	strb.w	r2, [r3, #2177]	; 0x881
	 strcpy(hydroc_obj->ds4.U_total,pch);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f603 0381 	addw	r3, r3, #2177	; 0x881
 800197c:	68f9      	ldr	r1, [r7, #12]
 800197e:	4618      	mov	r0, r3
 8001980:	f00f fbae 	bl	80110e0 <strcpy>
	 pch = strtok (NULL,",");//state 1
 8001984:	495e      	ldr	r1, [pc, #376]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 8001986:	2000      	movs	r0, #0
 8001988:	f010 fa24 	bl	8011dd4 <strtok>
 800198c:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.status_zeroing[0]=0x00;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2890 	strb.w	r2, [r3, #2192]	; 0x890
	 strcpy(hydroc_obj->ds4.status_zeroing,pch);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f503 6309 	add.w	r3, r3, #2192	; 0x890
 800199c:	68f9      	ldr	r1, [r7, #12]
 800199e:	4618      	mov	r0, r3
 80019a0:	f00f fb9e 	bl	80110e0 <strcpy>
	 pch = strtok (NULL,",");//state 2
 80019a4:	4956      	ldr	r1, [pc, #344]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 80019a6:	2000      	movs	r0, #0
 80019a8:	f010 fa14 	bl	8011dd4 <strtok>
 80019ac:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.status_flush[0]=0x00;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2895 	strb.w	r2, [r3, #2197]	; 0x895
	 strcpy(hydroc_obj->ds4.status_flush,pch);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f603 0395 	addw	r3, r3, #2197	; 0x895
 80019bc:	68f9      	ldr	r1, [r7, #12]
 80019be:	4618      	mov	r0, r3
 80019c0:	f00f fb8e 	bl	80110e0 <strcpy>
	 pch = strtok (NULL,",");//state 3
 80019c4:	494e      	ldr	r1, [pc, #312]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 80019c6:	2000      	movs	r0, #0
 80019c8:	f010 fa04 	bl	8011dd4 <strtok>
 80019cc:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.status_pump[0]=0x00;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 289a 	strb.w	r2, [r3, #2202]	; 0x89a
	 strcpy(hydroc_obj->ds4.status_pump,pch);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f603 039a 	addw	r3, r3, #2202	; 0x89a
 80019dc:	68f9      	ldr	r1, [r7, #12]
 80019de:	4618      	mov	r0, r3
 80019e0:	f00f fb7e 	bl	80110e0 <strcpy>
	 //pch = strtok (NULL,",");//xz
	 //pch = strtok (NULL,",");//xz
	 //pch = strtok (NULL,",");//xz
	 //pch = strtok (NULL,",");//xz
	 pch = strtok (NULL,",");//runtime
 80019e4:	4946      	ldr	r1, [pc, #280]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 80019e6:	2000      	movs	r0, #0
 80019e8:	f010 f9f4 	bl	8011dd4 <strtok>
 80019ec:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.runtime[0]=0x00;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 289f 	strb.w	r2, [r3, #2207]	; 0x89f
	 strcpy(hydroc_obj->ds4.runtime,pch);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f603 039f 	addw	r3, r3, #2207	; 0x89f
 80019fc:	68f9      	ldr	r1, [r7, #12]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f00f fb6e 	bl	80110e0 <strcpy>
	 pch = strtok (NULL,",");//signal raw
 8001a04:	493e      	ldr	r1, [pc, #248]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 8001a06:	2000      	movs	r0, #0
 8001a08:	f010 f9e4 	bl	8011dd4 <strtok>
 8001a0c:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.signal_raw[0]=0x00;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 28ae 	strb.w	r2, [r3, #2222]	; 0x8ae
	 strcpy(hydroc_obj->ds4.signal_raw,pch);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f603 03ae 	addw	r3, r3, #2222	; 0x8ae
 8001a1c:	68f9      	ldr	r1, [r7, #12]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f00f fb5e 	bl	80110e0 <strcpy>
	 pch = strtok (NULL,",");//signal ref
 8001a24:	4936      	ldr	r1, [pc, #216]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 8001a26:	2000      	movs	r0, #0
 8001a28:	f010 f9d4 	bl	8011dd4 <strtok>
 8001a2c:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.signal_ref[0]=0x00;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 28bd 	strb.w	r2, [r3, #2237]	; 0x8bd
	 strcpy(hydroc_obj->ds4.signal_ref,pch);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f603 03bd 	addw	r3, r3, #2237	; 0x8bd
 8001a3c:	68f9      	ldr	r1, [r7, #12]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f00f fb4e 	bl	80110e0 <strcpy>
	 pch = strtok (NULL,",");//t sensor
 8001a44:	492e      	ldr	r1, [pc, #184]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 8001a46:	2000      	movs	r0, #0
 8001a48:	f010 f9c4 	bl	8011dd4 <strtok>
 8001a4c:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.T_sensor[0]=0x00;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 28cc 	strb.w	r2, [r3, #2252]	; 0x8cc
	 strcpy(hydroc_obj->ds4.T_sensor,pch);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f603 03cc 	addw	r3, r3, #2252	; 0x8cc
 8001a5c:	68f9      	ldr	r1, [r7, #12]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f00f fb3e 	bl	80110e0 <strcpy>
	 pch = strtok (NULL,",");//signal proc
 8001a64:	4926      	ldr	r1, [pc, #152]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 8001a66:	2000      	movs	r0, #0
 8001a68:	f010 f9b4 	bl	8011dd4 <strtok>
 8001a6c:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.signal_proc[0]=0x00;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 28db 	strb.w	r2, [r3, #2267]	; 0x8db
	 strcpy(hydroc_obj->ds4.signal_proc,pch);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f603 03db 	addw	r3, r3, #2267	; 0x8db
 8001a7c:	68f9      	ldr	r1, [r7, #12]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f00f fb2e 	bl	80110e0 <strcpy>
	 pch = strtok (NULL,",");//conc_estimate
 8001a84:	491e      	ldr	r1, [pc, #120]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 8001a86:	2000      	movs	r0, #0
 8001a88:	f010 f9a4 	bl	8011dd4 <strtok>
 8001a8c:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.conc_estimate[0]=0x00;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 28ea 	strb.w	r2, [r3, #2282]	; 0x8ea
	 strcpy(hydroc_obj->ds4.conc_estimate,pch);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f603 03ea 	addw	r3, r3, #2282	; 0x8ea
 8001a9c:	68f9      	ldr	r1, [r7, #12]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f00f fb1e 	bl	80110e0 <strcpy>
	 pch = strtok (NULL,",");//pGas_corr
 8001aa4:	4916      	ldr	r1, [pc, #88]	; (8001b00 <HYDROC_MSG_CODS4_f+0x2b8>)
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f010 f994 	bl	8011dd4 <strtok>
 8001aac:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.pGas_corr[0]=0x00;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 28f9 	strb.w	r2, [r3, #2297]	; 0x8f9
	 strcpy(hydroc_obj->ds4.pGas_corr,pch);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f603 03f9 	addw	r3, r3, #2297	; 0x8f9
 8001abc:	68f9      	ldr	r1, [r7, #12]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f00f fb0e 	bl	80110e0 <strcpy>
	 pch = strtok (NULL,"*");//xGas_corr
 8001ac4:	490f      	ldr	r1, [pc, #60]	; (8001b04 <HYDROC_MSG_CODS4_f+0x2bc>)
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f010 f984 	bl	8011dd4 <strtok>
 8001acc:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.xGas_corr[0]=0x00;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2908 	strb.w	r2, [r3, #2312]	; 0x908
	 strcpy(hydroc_obj->ds4.xGas_corr,pch);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8001adc:	68f9      	ldr	r1, [r7, #12]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f00f fafe 	bl	80110e0 <strcpy>

     osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_CODS4,1);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f240 2171 	movw	r1, #625	; 0x271
 8001aee:	4618      	mov	r0, r3
 8001af0:	f00b fffa 	bl	800dae8 <osMessagePut>
     //strcpy(hydroc_obj->ds4_data,msg);

     return HYDROC_F_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	08014094 	.word	0x08014094
 8001b04:	080140e0 	.word	0x080140e0

08001b08 <HYDROC_MSG_COCFG_f>:

int HYDROC_MSG_COCFG_f(hydroc* hydroc_obj,uint8_t* msg)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
   char * pch;
   pch = strtok ((char*)msg,",");//destination
 8001b12:	491b      	ldr	r1, [pc, #108]	; (8001b80 <HYDROC_MSG_COCFG_f+0x78>)
 8001b14:	6838      	ldr	r0, [r7, #0]
 8001b16:	f010 f95d 	bl	8011dd4 <strtok>
 8001b1a:	60f8      	str	r0, [r7, #12]
   pch = strtok (NULL,",");//source
 8001b1c:	4918      	ldr	r1, [pc, #96]	; (8001b80 <HYDROC_MSG_COCFG_f+0x78>)
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f010 f958 	bl	8011dd4 <strtok>
 8001b24:	60f8      	str	r0, [r7, #12]
   pch = strtok (NULL,",");//Write, read or data
 8001b26:	4916      	ldr	r1, [pc, #88]	; (8001b80 <HYDROC_MSG_COCFG_f+0x78>)
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f010 f953 	bl	8011dd4 <strtok>
 8001b2e:	60f8      	str	r0, [r7, #12]


   pch = strtok (NULL,",");//enable/disable
 8001b30:	4913      	ldr	r1, [pc, #76]	; (8001b80 <HYDROC_MSG_COCFG_f+0x78>)
 8001b32:	2000      	movs	r0, #0
 8001b34:	f010 f94e 	bl	8011dd4 <strtok>
 8001b38:	60f8      	str	r0, [r7, #12]
   uint32_t cfg_enable_status=strtol(pch,NULL,10);
 8001b3a:	220a      	movs	r2, #10
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f010 fa20 	bl	8011f84 <strtol>
 8001b44:	4603      	mov	r3, r0
 8001b46:	60bb      	str	r3, [r7, #8]
   if(cfg_enable_status==1) osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_CFG_ENTERED,1);
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d108      	bne.n	8001b60 <HYDROC_MSG_COCFG_f+0x58>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f00b ffc5 	bl	800dae8 <osMessagePut>
 8001b5e:	e00a      	b.n	8001b76 <HYDROC_MSG_COCFG_f+0x6e>
   else if(cfg_enable_status==0) osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_CFG_EXITED,1);
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d107      	bne.n	8001b76 <HYDROC_MSG_COCFG_f+0x6e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f240 216d 	movw	r1, #621	; 0x26d
 8001b70:	4618      	mov	r0, r3
 8001b72:	f00b ffb9 	bl	800dae8 <osMessagePut>

   return HYDROC_F_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	08014094 	.word	0x08014094

08001b84 <HYDROC_MSG_CODPV_f>:

int HYDROC_MSG_CODPV_f(hydroc* hydroc_obj,uint8_t* msg)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
   char * pch;
   pch = strtok ((char*)msg,",");//destination
 8001b8e:	4939      	ldr	r1, [pc, #228]	; (8001c74 <HYDROC_MSG_CODPV_f+0xf0>)
 8001b90:	6838      	ldr	r0, [r7, #0]
 8001b92:	f010 f91f 	bl	8011dd4 <strtok>
 8001b96:	60f8      	str	r0, [r7, #12]
   pch = strtok (NULL,",");//source
 8001b98:	4936      	ldr	r1, [pc, #216]	; (8001c74 <HYDROC_MSG_CODPV_f+0xf0>)
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f010 f91a 	bl	8011dd4 <strtok>
 8001ba0:	60f8      	str	r0, [r7, #12]
   pch = strtok (NULL,",");//Write, read or data
 8001ba2:	4934      	ldr	r1, [pc, #208]	; (8001c74 <HYDROC_MSG_CODPV_f+0xf0>)
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f010 f915 	bl	8011dd4 <strtok>
 8001baa:	60f8      	str	r0, [r7, #12]

   pch = strtok (NULL,",");//PCB num
 8001bac:	4931      	ldr	r1, [pc, #196]	; (8001c74 <HYDROC_MSG_CODPV_f+0xf0>)
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f010 f910 	bl	8011dd4 <strtok>
 8001bb4:	60f8      	str	r0, [r7, #12]
   hydroc_obj->inventory_PCB_num=strtol(pch,NULL,10);
 8001bb6:	220a      	movs	r2, #10
 8001bb8:	2100      	movs	r1, #0
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f010 f9e2 	bl	8011f84 <strtol>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f8c3 2985 	str.w	r2, [r3, #2437]	; 0x985
   pch = strtok (NULL,",");//firmware ver
 8001bca:	492a      	ldr	r1, [pc, #168]	; (8001c74 <HYDROC_MSG_CODPV_f+0xf0>)
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f010 f901 	bl	8011dd4 <strtok>
 8001bd2:	60f8      	str	r0, [r7, #12]
   hydroc_obj->inventory_FW_ver=strtol(pch,NULL,10);
 8001bd4:	220a      	movs	r2, #10
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f010 f9d3 	bl	8011f84 <strtol>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f8c3 2989 	str.w	r2, [r3, #2441]	; 0x989
   pch = strtok (NULL,",");//HW ID
 8001be8:	4922      	ldr	r1, [pc, #136]	; (8001c74 <HYDROC_MSG_CODPV_f+0xf0>)
 8001bea:	2000      	movs	r0, #0
 8001bec:	f010 f8f2 	bl	8011dd4 <strtok>
 8001bf0:	60f8      	str	r0, [r7, #12]
   hydroc_obj->inventory_HW_id=strtol(pch,NULL,10);
 8001bf2:	220a      	movs	r2, #10
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f010 f9c4 	bl	8011f84 <strtol>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	461a      	mov	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8c3 298d 	str.w	r2, [r3, #2445]	; 0x98d
   pch = strtok (NULL,",");//serial number
 8001c06:	491b      	ldr	r1, [pc, #108]	; (8001c74 <HYDROC_MSG_CODPV_f+0xf0>)
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f010 f8e3 	bl	8011dd4 <strtok>
 8001c0e:	60f8      	str	r0, [r7, #12]
   strcpy(hydroc_obj->inventory_serial_number,pch);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f603 1391 	addw	r3, r3, #2449	; 0x991
 8001c16:	68f9      	ldr	r1, [r7, #12]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f00f fa61 	bl	80110e0 <strcpy>

   if(strstr(hydroc_obj->inventory_serial_number,"CH4"))hydroc_obj->model_specific=&hydroc_models[HYDROC_TYPE_CH4];
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f603 1391 	addw	r3, r3, #2449	; 0x991
 8001c24:	4914      	ldr	r1, [pc, #80]	; (8001c78 <HYDROC_MSG_CODPV_f+0xf4>)
 8001c26:	4618      	mov	r0, r3
 8001c28:	f00f fa62 	bl	80110f0 <strstr>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d004      	beq.n	8001c3c <HYDROC_MSG_CODPV_f+0xb8>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a11      	ldr	r2, [pc, #68]	; (8001c7c <HYDROC_MSG_CODPV_f+0xf8>)
 8001c36:	f8c3 29a4 	str.w	r2, [r3, #2468]	; 0x9a4
 8001c3a:	e00d      	b.n	8001c58 <HYDROC_MSG_CODPV_f+0xd4>
   else if(strstr(hydroc_obj->inventory_serial_number,"CO2")) hydroc_obj->model_specific=&hydroc_models[HYDROC_TYPE_CO2];
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f603 1391 	addw	r3, r3, #2449	; 0x991
 8001c42:	490f      	ldr	r1, [pc, #60]	; (8001c80 <HYDROC_MSG_CODPV_f+0xfc>)
 8001c44:	4618      	mov	r0, r3
 8001c46:	f00f fa53 	bl	80110f0 <strstr>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HYDROC_MSG_CODPV_f+0xd4>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <HYDROC_MSG_CODPV_f+0x100>)
 8001c54:	f8c3 29a4 	str.w	r2, [r3, #2468]	; 0x9a4

   osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_INVENTORY_UPDATED,1);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f240 216b 	movw	r1, #619	; 0x26b
 8001c62:	4618      	mov	r0, r3
 8001c64:	f00b ff40 	bl	800dae8 <osMessagePut>

   return HYDROC_F_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	08014094 	.word	0x08014094
 8001c78:	080140e4 	.word	0x080140e4
 8001c7c:	0801452a 	.word	0x0801452a
 8001c80:	080140e8 	.word	0x080140e8
 8001c84:	0801451f 	.word	0x0801451f

08001c88 <HYDROC_MSG_COPEX_f>:

int HYDROC_MSG_COPEX_f(hydroc* hydroc_obj,uint8_t* msg)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
   char * pch;
   pch = strtok ((char*)msg,",");//destination
 8001c92:	4922      	ldr	r1, [pc, #136]	; (8001d1c <HYDROC_MSG_COPEX_f+0x94>)
 8001c94:	6838      	ldr	r0, [r7, #0]
 8001c96:	f010 f89d 	bl	8011dd4 <strtok>
 8001c9a:	60f8      	str	r0, [r7, #12]
   pch = strtok (NULL,",");//source
 8001c9c:	491f      	ldr	r1, [pc, #124]	; (8001d1c <HYDROC_MSG_COPEX_f+0x94>)
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f010 f898 	bl	8011dd4 <strtok>
 8001ca4:	60f8      	str	r0, [r7, #12]
   pch = strtok (NULL,",");//Write, read or data
 8001ca6:	491d      	ldr	r1, [pc, #116]	; (8001d1c <HYDROC_MSG_COPEX_f+0x94>)
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f010 f893 	bl	8011dd4 <strtok>
 8001cae:	60f8      	str	r0, [r7, #12]

   pch = strtok (NULL,",");//enable/disable
 8001cb0:	491a      	ldr	r1, [pc, #104]	; (8001d1c <HYDROC_MSG_COPEX_f+0x94>)
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f010 f88e 	bl	8011dd4 <strtok>
 8001cb8:	60f8      	str	r0, [r7, #12]
   uint32_t tmp=strtol(pch,NULL,10);
 8001cba:	220a      	movs	r2, #10
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f010 f960 	bl	8011f84 <strtol>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	60bb      	str	r3, [r7, #8]
   if(tmp==0){
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10c      	bne.n	8001ce8 <HYDROC_MSG_COPEX_f+0x60>
	 hydroc_obj->pump_status=HYDROC_PUMP_DISABLED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 29a8 	strb.w	r2, [r3, #2472]	; 0x9a8
	 osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_PUMP_DISABLED,1);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f240 216f 	movw	r1, #623	; 0x26f
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f00b ff01 	bl	800dae8 <osMessagePut>
 8001ce6:	e00e      	b.n	8001d06 <HYDROC_MSG_COPEX_f+0x7e>
   }
   else if(tmp==1){
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d10b      	bne.n	8001d06 <HYDROC_MSG_COPEX_f+0x7e>
	 hydroc_obj->pump_status=HYDROC_PUMP_ENABLED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 29a8 	strb.w	r2, [r3, #2472]	; 0x9a8
	 osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_PUMP_ENABLED,1);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f240 216e 	movw	r1, #622	; 0x26e
 8001d00:	4618      	mov	r0, r3
 8001d02:	f00b fef1 	bl	800dae8 <osMessagePut>
   }
   pch = strtok (NULL,",");//if powered???
 8001d06:	4905      	ldr	r1, [pc, #20]	; (8001d1c <HYDROC_MSG_COPEX_f+0x94>)
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f010 f863 	bl	8011dd4 <strtok>
 8001d0e:	60f8      	str	r0, [r7, #12]

   return HYDROC_F_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	08014094 	.word	0x08014094

08001d20 <HYDROC_MSG_CORTS_f>:

int HYDROC_MSG_CORTS_f(hydroc* hydroc_obj,uint8_t* msg)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
   char* pch;
   pch = strtok ((char*)msg,",");//destination
 8001d2a:	490c      	ldr	r1, [pc, #48]	; (8001d5c <HYDROC_MSG_CORTS_f+0x3c>)
 8001d2c:	6838      	ldr	r0, [r7, #0]
 8001d2e:	f010 f851 	bl	8011dd4 <strtok>
 8001d32:	60f8      	str	r0, [r7, #12]
   pch = strtok (NULL,",");//source
 8001d34:	4909      	ldr	r1, [pc, #36]	; (8001d5c <HYDROC_MSG_CORTS_f+0x3c>)
 8001d36:	2000      	movs	r0, #0
 8001d38:	f010 f84c 	bl	8011dd4 <strtok>
 8001d3c:	60f8      	str	r0, [r7, #12]
   pch = strtok (NULL,",");//Write, read or data
 8001d3e:	4907      	ldr	r1, [pc, #28]	; (8001d5c <HYDROC_MSG_CORTS_f+0x3c>)
 8001d40:	2000      	movs	r0, #0
 8001d42:	f010 f847 	bl	8011dd4 <strtok>
 8001d46:	60f8      	str	r0, [r7, #12]

   pch = strtok (NULL,",");//value
 8001d48:	4904      	ldr	r1, [pc, #16]	; (8001d5c <HYDROC_MSG_CORTS_f+0x3c>)
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f010 f842 	bl	8011dd4 <strtok>
 8001d50:	60f8      	str	r0, [r7, #12]

   return HYDROC_F_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	08014094 	.word	0x08014094

08001d60 <HYDROC_MSG_COEXT_f>:

int HYDROC_MSG_COEXT_f(hydroc* hydroc_obj,uint8_t* msg)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
   char * pch;
   pch = strtok ((char*)msg,",");//destination
 8001d6a:	490a      	ldr	r1, [pc, #40]	; (8001d94 <HYDROC_MSG_COEXT_f+0x34>)
 8001d6c:	6838      	ldr	r0, [r7, #0]
 8001d6e:	f010 f831 	bl	8011dd4 <strtok>
 8001d72:	60f8      	str	r0, [r7, #12]
   pch = strtok (NULL,",");//source
 8001d74:	4907      	ldr	r1, [pc, #28]	; (8001d94 <HYDROC_MSG_COEXT_f+0x34>)
 8001d76:	2000      	movs	r0, #0
 8001d78:	f010 f82c 	bl	8011dd4 <strtok>
 8001d7c:	60f8      	str	r0, [r7, #12]
   pch = strtok (NULL,",");//Write, read or data
 8001d7e:	4905      	ldr	r1, [pc, #20]	; (8001d94 <HYDROC_MSG_COEXT_f+0x34>)
 8001d80:	2000      	movs	r0, #0
 8001d82:	f010 f827 	bl	8011dd4 <strtok>
 8001d86:	60f8      	str	r0, [r7, #12]
   return HYDROC_F_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	08014094 	.word	0x08014094

08001d98 <HYDROC_MSG_COERR_f>:

int HYDROC_MSG_COERR_f(hydroc* hydroc_obj,uint8_t* msg)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
   char * pch;
   pch = strtok ((char*)msg,",");//destination
 8001da2:	4945      	ldr	r1, [pc, #276]	; (8001eb8 <HYDROC_MSG_COERR_f+0x120>)
 8001da4:	6838      	ldr	r0, [r7, #0]
 8001da6:	f010 f815 	bl	8011dd4 <strtok>
 8001daa:	60f8      	str	r0, [r7, #12]
   pch = strtok (NULL,",");//source
 8001dac:	4942      	ldr	r1, [pc, #264]	; (8001eb8 <HYDROC_MSG_COERR_f+0x120>)
 8001dae:	2000      	movs	r0, #0
 8001db0:	f010 f810 	bl	8011dd4 <strtok>
 8001db4:	60f8      	str	r0, [r7, #12]
   pch = strtok (NULL,",");//Write, read or data
 8001db6:	4940      	ldr	r1, [pc, #256]	; (8001eb8 <HYDROC_MSG_COERR_f+0x120>)
 8001db8:	2000      	movs	r0, #0
 8001dba:	f010 f80b 	bl	8011dd4 <strtok>
 8001dbe:	60f8      	str	r0, [r7, #12]

   pch = strtok (NULL,",");//err value
 8001dc0:	493d      	ldr	r1, [pc, #244]	; (8001eb8 <HYDROC_MSG_COERR_f+0x120>)
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f010 f806 	bl	8011dd4 <strtok>
 8001dc8:	60f8      	str	r0, [r7, #12]
   uint32_t err_code=strtol(pch,NULL,10);
 8001dca:	220a      	movs	r2, #10
 8001dcc:	2100      	movs	r1, #0
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f010 f8d8 	bl	8011f84 <strtol>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60bb      	str	r3, [r7, #8]
   if(err_code==1)osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_ERR_BATTERY,1);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d108      	bne.n	8001df0 <HYDROC_MSG_COERR_f+0x58>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f240 2162 	movw	r1, #610	; 0x262
 8001de8:	4618      	mov	r0, r3
 8001dea:	f00b fe7d 	bl	800dae8 <osMessagePut>
 8001dee:	e05e      	b.n	8001eae <HYDROC_MSG_COERR_f+0x116>
   else if(err_code==2)osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_ERR_TOKEN,1);
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d108      	bne.n	8001e08 <HYDROC_MSG_COERR_f+0x70>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f240 2163 	movw	r1, #611	; 0x263
 8001e00:	4618      	mov	r0, r3
 8001e02:	f00b fe71 	bl	800dae8 <osMessagePut>
 8001e06:	e052      	b.n	8001eae <HYDROC_MSG_COERR_f+0x116>
   else if(err_code==3)osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_ERR_ARGUMENT,1);
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d108      	bne.n	8001e20 <HYDROC_MSG_COERR_f+0x88>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f44f 7119 	mov.w	r1, #612	; 0x264
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f00b fe65 	bl	800dae8 <osMessagePut>
 8001e1e:	e046      	b.n	8001eae <HYDROC_MSG_COERR_f+0x116>
   else if(err_code==4)osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_ERR_CHECKSUM,1);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d108      	bne.n	8001e38 <HYDROC_MSG_COERR_f+0xa0>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f240 2165 	movw	r1, #613	; 0x265
 8001e30:	4618      	mov	r0, r3
 8001e32:	f00b fe59 	bl	800dae8 <osMessagePut>
 8001e36:	e03a      	b.n	8001eae <HYDROC_MSG_COERR_f+0x116>
   else if(err_code==5)osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_ERR_BUFFER,1);
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b05      	cmp	r3, #5
 8001e3c:	d108      	bne.n	8001e50 <HYDROC_MSG_COERR_f+0xb8>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f240 2166 	movw	r1, #614	; 0x266
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f00b fe4d 	bl	800dae8 <osMessagePut>
 8001e4e:	e02e      	b.n	8001eae <HYDROC_MSG_COERR_f+0x116>
   else if(err_code==6)osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_ERR_LENGTH,1);
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d108      	bne.n	8001e68 <HYDROC_MSG_COERR_f+0xd0>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f240 2167 	movw	r1, #615	; 0x267
 8001e60:	4618      	mov	r0, r3
 8001e62:	f00b fe41 	bl	800dae8 <osMessagePut>
 8001e66:	e022      	b.n	8001eae <HYDROC_MSG_COERR_f+0x116>
   else if(err_code==7)osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_ERR_CONFIG,1);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b07      	cmp	r3, #7
 8001e6c:	d108      	bne.n	8001e80 <HYDROC_MSG_COERR_f+0xe8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f44f 711a 	mov.w	r1, #616	; 0x268
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f00b fe35 	bl	800dae8 <osMessagePut>
 8001e7e:	e016      	b.n	8001eae <HYDROC_MSG_COERR_f+0x116>
   else if(err_code==8)osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_ERR_REQUEST,1);
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d108      	bne.n	8001e98 <HYDROC_MSG_COERR_f+0x100>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f240 2169 	movw	r1, #617	; 0x269
 8001e90:	4618      	mov	r0, r3
 8001e92:	f00b fe29 	bl	800dae8 <osMessagePut>
 8001e96:	e00a      	b.n	8001eae <HYDROC_MSG_COERR_f+0x116>
   else if(err_code==9)osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_ERR_EXT_PUMP,1);
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b09      	cmp	r3, #9
 8001e9c:	d107      	bne.n	8001eae <HYDROC_MSG_COERR_f+0x116>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f240 216a 	movw	r1, #618	; 0x26a
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f00b fe1d 	bl	800dae8 <osMessagePut>

   return HYDROC_F_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	08014094 	.word	0x08014094

08001ebc <disp_proc_get_event>:
#define  GLIDER_UART             huart5
extern UART_HandleTypeDef huart5;
extern UART_HandleTypeDef huart1;

F_RES disp_proc_get_event(proc_dispatcher* self_object,uint32_t* event)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(self_object->events_q_Handle,1);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f00b fe48 	bl	800db68 <osMessageGet>
	if(res.status==osEventMessage){
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b10      	cmp	r3, #16
 8001edc:	d104      	bne.n	8001ee8 <disp_proc_get_event+0x2c>
		*event=res.value.v;
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	601a      	str	r2, [r3, #0]
		return F_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e004      	b.n	8001ef2 <disp_proc_get_event+0x36>
	}
	else  if(res.status==osEventTimeout)return F_TIMEOUT;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b40      	cmp	r3, #64	; 0x40
 8001eec:	d101      	bne.n	8001ef2 <disp_proc_get_event+0x36>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e7ff      	b.n	8001ef2 <disp_proc_get_event+0x36>
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <disp_proc_send_event>:

F_RES disp_proc_send_event(proc_dispatcher* self_object,osMessageQId out_Q,uint32_t event)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
	if(osMessagePut(out_Q,(uint32_t)event,1))
 8001f06:	2201      	movs	r2, #1
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	68b8      	ldr	r0, [r7, #8]
 8001f0c:	f00b fdec 	bl	800dae8 <osMessagePut>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <disp_proc_send_event+0x20>
	{
     return F_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e000      	b.n	8001f1c <disp_proc_send_event+0x22>
	}
	return F_ERR;
 8001f1a:	2301      	movs	r3, #1
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <disp_proc_init>:




void disp_proc_init(proc_dispatcher* self_object,osMessageQId workers_cmd_q_Handle,osMessageQId events_q_Handle)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
	self_object->workers_cmd_q_Handle=workers_cmd_q_Handle;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	self_object->events_q_Handle=events_q_Handle;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	fsm_init();
 8001f40:	f001 fc1a 	bl	8003778 <fsm_init>
}
 8001f44:	bf00      	nop
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <disp_proc_init_func>:

void disp_proc_init_func(proc_dispatcher* self_object,uint32_t proc_ID,void* func_ptr,
		osMessageQId inQ, proc_queue_gen_flag in_gen_flag , void* proc_self_object,uint32_t events_num,uint32_t* evnt)
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]

	if(in_gen_flag==PROC_CREATE_NEW_Q){
 8001f5a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d113      	bne.n	8001f8a <disp_proc_init_func+0x3e>
		osMessageQDef(proc_func_in_q, DISP_PROC_Q_LEN, uint32_t);
 8001f62:	4b25      	ldr	r3, [pc, #148]	; (8001ff8 <disp_proc_init_func+0xac>)
 8001f64:	f107 0410 	add.w	r4, r7, #16
 8001f68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		self_object->processes[proc_ID].proc_arg.inQ_handle = osMessageCreate(osMessageQ(proc_func_in_q), NULL);
 8001f6e:	f107 0310 	add.w	r3, r7, #16
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f00b fd8f 	bl	800da98 <osMessageCreate>
 8001f7a:	4601      	mov	r1, r0
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	015b      	lsls	r3, r3, #5
 8001f82:	4413      	add	r3, r2
 8001f84:	3308      	adds	r3, #8
 8001f86:	6019      	str	r1, [r3, #0]
 8001f88:	e006      	b.n	8001f98 <disp_proc_init_func+0x4c>
	}
	else{
		self_object->processes[proc_ID].proc_arg.inQ_handle = inQ;
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	015b      	lsls	r3, r3, #5
 8001f90:	4413      	add	r3, r2
 8001f92:	3308      	adds	r3, #8
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	601a      	str	r2, [r3, #0]
	}

	self_object->processes[proc_ID].proc_arg.outQ_handle = self_object->events_q_Handle;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8001f9e:	68f9      	ldr	r1, [r7, #12]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	015b      	lsls	r3, r3, #5
 8001fa4:	440b      	add	r3, r1
 8001fa6:	330c      	adds	r3, #12
 8001fa8:	601a      	str	r2, [r3, #0]

	self_object->processes[proc_ID].proc_arg.func_self_object=proc_self_object;
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	015b      	lsls	r3, r3, #5
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fb6:	601a      	str	r2, [r3, #0]
	self_object->processes[proc_ID].proc_func_ptr=func_ptr;
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	68f9      	ldr	r1, [r7, #12]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	015b      	lsls	r3, r3, #5
 8001fc0:	440b      	add	r3, r1
 8001fc2:	601a      	str	r2, [r3, #0]
	self_object->processes[proc_ID].events.size=events_num;
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	015b      	lsls	r3, r3, #5
 8001fca:	4413      	add	r3, r2
 8001fcc:	3318      	adds	r3, #24
 8001fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fd0:	601a      	str	r2, [r3, #0]
	self_object->processes[proc_ID].events.evnt=evnt;
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	015b      	lsls	r3, r3, #5
 8001fd8:	4413      	add	r3, r2
 8001fda:	331c      	adds	r3, #28
 8001fdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fde:	601a      	str	r2, [r3, #0]
	self_object->processes[proc_ID].state=PROC_STOPPED;
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	015b      	lsls	r3, r3, #5
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3314      	adds	r3, #20
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
}
 8001fee:	bf00      	nop
 8001ff0:	3724      	adds	r7, #36	; 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd90      	pop	{r4, r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	080140ec 	.word	0x080140ec

08001ffc <disp_proc_start>:

F_RES  disp_proc_start(proc_dispatcher* self_object,uint32_t proc_ID,void* func_args)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
	if(self_object->processes[proc_ID].state!=PROC_STARTED&&self_object->processes[proc_ID].state!=PROC_START_PENDING){
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	015b      	lsls	r3, r3, #5
 800200e:	4413      	add	r3, r2
 8002010:	3314      	adds	r3, #20
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d01f      	beq.n	8002058 <disp_proc_start+0x5c>
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	015b      	lsls	r3, r3, #5
 800201e:	4413      	add	r3, r2
 8002020:	3314      	adds	r3, #20
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d017      	beq.n	8002058 <disp_proc_start+0x5c>
	  self_object->processes[proc_ID].proc_arg.func_args=func_args;
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	015b      	lsls	r3, r3, #5
 800202e:	4413      	add	r3, r2
 8002030:	3310      	adds	r3, #16
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	601a      	str	r2, [r3, #0]
	  self_object->processes[proc_ID].state=PROC_START_PENDING;
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	015b      	lsls	r3, r3, #5
 800203c:	4413      	add	r3, r2
 800203e:	3314      	adds	r3, #20
 8002040:	2202      	movs	r2, #2
 8002042:	701a      	strb	r2, [r3, #0]
	  osMessagePut(self_object->workers_cmd_q_Handle,proc_ID,1);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800204a:	2201      	movs	r2, #1
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	4618      	mov	r0, r3
 8002050:	f00b fd4a 	bl	800dae8 <osMessagePut>
	  return F_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	e000      	b.n	800205a <disp_proc_start+0x5e>
	}
	return F_ERR;
 8002058:	2301      	movs	r3, #1
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <disp_proc_execute>:

void disp_proc_execute(proc_dispatcher* self_object,uint32_t proc_ID)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	6039      	str	r1, [r7, #0]
	self_object->processes[proc_ID].state=PROC_STARTED;
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	015b      	lsls	r3, r3, #5
 8002072:	4413      	add	r3, r2
 8002074:	3314      	adds	r3, #20
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
	self_object->processes[proc_ID].proc_func_ptr(&self_object->processes[proc_ID].proc_arg);
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	015b      	lsls	r3, r3, #5
 8002080:	4413      	add	r3, r2
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	0152      	lsls	r2, r2, #5
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	440a      	add	r2, r1
 800208c:	3204      	adds	r2, #4
 800208e:	4610      	mov	r0, r2
 8002090:	4798      	blx	r3
    //move dependent event from in to out here
	self_object->processes[proc_ID].state=PROC_STOPPED;
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	015b      	lsls	r3, r3, #5
 8002098:	4413      	add	r3, r2
 800209a:	3314      	adds	r3, #20
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <disp_proc_set_EA_table>:

void disp_proc_set_EA_table(proc_dispatcher* self_object,EA_table_t*  EA_table)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
	self_object->EA_table=EA_table;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <disp_proc_loop>:

extern UART_HandleTypeDef huart5;
void disp_proc_loop(proc_dispatcher* self_object)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b09e      	sub	sp, #120	; 0x78
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
    uint32_t last_event;
    char tt[100];

    for(;;)
    {
     if(disp_proc_get_event(self_object,&last_event)==F_OK){
 80020cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020d0:	4619      	mov	r1, r3
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff fef2 	bl	8001ebc <disp_proc_get_event>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f6      	bne.n	80020cc <disp_proc_loop+0x8>

      for(int i=0;i<DISP_NUM_OF_PROCESSES;i++)
 80020de:	2300      	movs	r3, #0
 80020e0:	677b      	str	r3, [r7, #116]	; 0x74
 80020e2:	e021      	b.n	8002128 <disp_proc_loop+0x64>
      {
        if(self_object->processes[i].state==PROC_STARTED){
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020e8:	015b      	lsls	r3, r3, #5
 80020ea:	4413      	add	r3, r2
 80020ec:	3314      	adds	r3, #20
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d116      	bne.n	8002122 <disp_proc_loop+0x5e>
        	if(disp_proc_check_event(last_event,&self_object->processes[i].events)==F_OK){
 80020f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80020f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020f8:	015b      	lsls	r3, r3, #5
 80020fa:	3318      	adds	r3, #24
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	4413      	add	r3, r2
 8002100:	4619      	mov	r1, r3
 8002102:	f000 f836 	bl	8002172 <disp_proc_check_event>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10a      	bne.n	8002122 <disp_proc_loop+0x5e>
        		disp_proc_send_event(self_object,self_object->processes[i].proc_arg.inQ_handle,last_event);
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002110:	015b      	lsls	r3, r3, #5
 8002112:	4413      	add	r3, r2
 8002114:	3308      	adds	r3, #8
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800211a:	4619      	mov	r1, r3
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff feec 	bl	8001efa <disp_proc_send_event>
      for(int i=0;i<DISP_NUM_OF_PROCESSES;i++)
 8002122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002124:	3301      	adds	r3, #1
 8002126:	677b      	str	r3, [r7, #116]	; 0x74
 8002128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800212a:	2b0c      	cmp	r3, #12
 800212c:	ddda      	ble.n	80020e4 <disp_proc_loop+0x20>
        }
      }
      //EA table check
      //sprintf(tt,"Event:%d\n",last_event);
      //HAL_UART_Transmit(&huart5,tt,strlen(tt),100);
      for(int y=0;y<(self_object->EA_table->num_of_events);y++)
 800212e:	2300      	movs	r3, #0
 8002130:	673b      	str	r3, [r7, #112]	; 0x70
 8002132:	e016      	b.n	8002162 <disp_proc_loop+0x9e>
      {
          //sprintf(tt,"Event:%d\n",self_object->EA_table->EAT[y].event);
          //HAL_UART_Transmit(&huart5,tt,strlen(tt),100);
    	  if(last_event==self_object->EA_table->EAT[y].event) {
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4413      	add	r3, r2
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002146:	429a      	cmp	r2, r3
 8002148:	d108      	bne.n	800215c <disp_proc_loop+0x98>
    		  self_object->EA_table->EAT[y].action();
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4798      	blx	r3
      for(int y=0;y<(self_object->EA_table->num_of_events);y++)
 800215c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800215e:	3301      	adds	r3, #1
 8002160:	673b      	str	r3, [r7, #112]	; 0x70
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800216c:	429a      	cmp	r2, r3
 800216e:	d8e1      	bhi.n	8002134 <disp_proc_loop+0x70>
     if(disp_proc_get_event(self_object,&last_event)==F_OK){
 8002170:	e7ac      	b.n	80020cc <disp_proc_loop+0x8>

08002172 <disp_proc_check_event>:
     }
    }
}

F_RES disp_proc_check_event(uint32_t event,proc_events_t* events)
{
 8002172:	b480      	push	{r7}
 8002174:	b085      	sub	sp, #20
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
	for(int i=0;i<events->size;i++){
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	e00d      	b.n	800219e <disp_proc_check_event+0x2c>
		if(events->evnt[i]==event) return F_OK;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	d101      	bne.n	8002198 <disp_proc_check_event+0x26>
 8002194:	2300      	movs	r3, #0
 8002196:	e008      	b.n	80021aa <disp_proc_check_event+0x38>
	for(int i=0;i<events->size;i++){
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3301      	adds	r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d8ec      	bhi.n	8002182 <disp_proc_check_event+0x10>
	}
	return F_ERR;
 80021a8:	2301      	movs	r3, #1
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <sd_storage_disk_init>:
#include "diskio.h"

extern ss_pp sd_cards_ss[SD_STORAGE_NUM_SLOTS];

F_RES sd_storage_disk_init(FATFS* fs,char* path)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
	if(f_mount(fs,path,1)==FR_OK) return F_OK;
 80021be:	2201      	movs	r2, #1
 80021c0:	6839      	ldr	r1, [r7, #0]
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f009 fdba 	bl	800bd3c <f_mount>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <sd_storage_disk_init+0x1e>
 80021ce:	2300      	movs	r3, #0
 80021d0:	e000      	b.n	80021d4 <sd_storage_disk_init+0x20>
	else return F_ERR;
 80021d2:	2301      	movs	r3, #1
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <sd_storage_init>:

F_RES sd_storage_init(sd_storage_t* self_object,osSemaphoreId microsd_media_sem)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08c      	sub	sp, #48	; 0x30
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  self_object->microsd_media_sem=microsd_media_sem;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  char tt[10];
  FRESULT res;
  DWORD fre_clust, fre_sect, tot_sect;
  FATFS*  fs;
  self_object->active_disk_indx=0;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
  self_object->num_of_discs=0;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
  self_object->status=STORAGE_NOT_INITTIALIZED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8002206:	2300      	movs	r3, #0
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800220a:	e093      	b.n	8002334 <sd_storage_init+0x158>
  {
   sd_cards_ss[i].Stat=STA_NOINIT;
 800220c:	495e      	ldr	r1, [pc, #376]	; (8002388 <sd_storage_init+0x1ac>)
 800220e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002210:	4613      	mov	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	3309      	adds	r3, #9
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
   self_object->disks[i].fs.fs_type=0;
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002224:	f44f 7111 	mov.w	r1, #580	; 0x244
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	4413      	add	r3, r2
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
   sprintf(tt,"%d:",i);
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002238:	4954      	ldr	r1, [pc, #336]	; (800238c <sd_storage_init+0x1b0>)
 800223a:	4618      	mov	r0, r3
 800223c:	f00e fede 	bl	8010ffc <siprintf>
   if(sd_storage_disk_init(&self_object->disks[i].fs,tt)==F_OK){
 8002240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002242:	f44f 7211 	mov.w	r2, #580	; 0x244
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	f107 0214 	add.w	r2, r7, #20
 8002252:	4611      	mov	r1, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ffad 	bl	80021b4 <sd_storage_disk_init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d15b      	bne.n	8002318 <sd_storage_init+0x13c>
		  self_object->disks[i].status=DISK_PRESENT;
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	f44f 7111 	mov.w	r1, #580	; 0x244
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4413      	add	r3, r2
 800226e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
		  self_object->num_of_discs++;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 324c 	ldrb.w	r3, [r3, #588]	; 0x24c
 800227c:	3301      	adds	r3, #1
 800227e:	b2da      	uxtb	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
  		  if(f_getfree(tt, &fre_clust, &fs)==FR_OK){
 8002286:	f107 020c 	add.w	r2, r7, #12
 800228a:	f107 0110 	add.w	r1, r7, #16
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	4618      	mov	r0, r3
 8002294:	f00b f89a 	bl	800d3cc <f_getfree>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d147      	bne.n	800232e <sd_storage_init+0x152>
		    tot_sect = (self_object->disks[i].fs.n_fatent - 2) * self_object->disks[i].fs.csize;
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a2:	f44f 7111 	mov.w	r1, #580	; 0x244
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	331c      	adds	r3, #28
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	3b02      	subs	r3, #2
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b6:	f44f 7011 	mov.w	r0, #580	; 0x244
 80022ba:	fb00 f202 	mul.w	r2, r0, r2
 80022be:	440a      	add	r2, r1
 80022c0:	320a      	adds	r2, #10
 80022c2:	8812      	ldrh	r2, [r2, #0]
 80022c4:	fb02 f303 	mul.w	r3, r2, r3
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
			fre_sect = fre_clust * self_object->disks[i].fs.csize;
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ce:	f44f 7111 	mov.w	r1, #580	; 0x244
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	330a      	adds	r3, #10
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	fb02 f303 	mul.w	r3, r2, r3
 80022e4:	623b      	str	r3, [r7, #32]
			self_object->disks[i].size=tot_sect/2;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	085a      	lsrs	r2, r3, #1
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ee:	f44f 7011 	mov.w	r0, #580	; 0x244
 80022f2:	fb00 f303 	mul.w	r3, r0, r3
 80022f6:	440b      	add	r3, r1
 80022f8:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80022fc:	601a      	str	r2, [r3, #0]
			self_object->disks[i].free_space=fre_sect/2;
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	085a      	lsrs	r2, r3, #1
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002306:	f44f 7011 	mov.w	r0, #580	; 0x244
 800230a:	fb00 f303 	mul.w	r3, r0, r3
 800230e:	440b      	add	r3, r1
 8002310:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	e00a      	b.n	800232e <sd_storage_init+0x152>
		  }
   }
   else self_object->disks[i].status=DISK_ABSENT;
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231c:	f44f 7111 	mov.w	r1, #580	; 0x244
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800232a:	2201      	movs	r2, #1
 800232c:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	3301      	adds	r3, #1
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002336:	2b00      	cmp	r3, #0
 8002338:	f77f af68 	ble.w	800220c <sd_storage_init+0x30>
  }

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 800233c:	2300      	movs	r3, #0
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002340:	e019      	b.n	8002376 <sd_storage_init+0x19a>
  {
   if(self_object->disks[i].status==DISK_PRESENT){
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002346:	f44f 7111 	mov.w	r1, #580	; 0x244
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10a      	bne.n	8002370 <sd_storage_init+0x194>
	   self_object->active_disk_indx=i;
 800235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235c:	b2da      	uxtb	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	   self_object->status=STORAGE_INITTIALIZED;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d
	   return F_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	e006      	b.n	800237e <sd_storage_init+0x1a2>
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8002370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002372:	3301      	adds	r3, #1
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
 8002376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002378:	2b00      	cmp	r3, #0
 800237a:	dde2      	ble.n	8002342 <sd_storage_init+0x166>
   }
  }
  return F_ERR;
 800237c:	2301      	movs	r3, #1
}
 800237e:	4618      	mov	r0, r3
 8002380:	3730      	adds	r7, #48	; 0x30
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200027f4 	.word	0x200027f4
 800238c:	080140fc 	.word	0x080140fc

08002390 <sd_storage_link_ss>:

F_RES sd_storage_link_ss(sd_storage_t* self_object,uint8_t disk_num, uint16_t sd_ss_pin,GPIO_TypeDef* sd_ss_port)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	460b      	mov	r3, r1
 800239c:	72fb      	strb	r3, [r7, #11]
 800239e:	4613      	mov	r3, r2
 80023a0:	813b      	strh	r3, [r7, #8]
	  sd_cards_ss[disk_num].sd_ss_pin=sd_ss_pin;
 80023a2:	7afa      	ldrb	r2, [r7, #11]
 80023a4:	4916      	ldr	r1, [pc, #88]	; (8002400 <sd_storage_link_ss+0x70>)
 80023a6:	4613      	mov	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	893a      	ldrh	r2, [r7, #8]
 80023b2:	801a      	strh	r2, [r3, #0]
	  sd_cards_ss[disk_num].sd_ss_port=sd_ss_port;
 80023b4:	7afa      	ldrb	r2, [r7, #11]
 80023b6:	4912      	ldr	r1, [pc, #72]	; (8002400 <sd_storage_link_ss+0x70>)
 80023b8:	4613      	mov	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	3304      	adds	r3, #4
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	601a      	str	r2, [r3, #0]
	  sd_cards_ss[disk_num].Stat=STA_NOINIT;
 80023c8:	7afa      	ldrb	r2, [r7, #11]
 80023ca:	490d      	ldr	r1, [pc, #52]	; (8002400 <sd_storage_link_ss+0x70>)
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	3309      	adds	r3, #9
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
	  if(sd_ss_pin!=NULL&&sd_ss_port!=NULL) HAL_GPIO_WritePin(sd_ss_port, sd_ss_pin, GPIO_PIN_SET);
 80023dc:	893b      	ldrh	r3, [r7, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d008      	beq.n	80023f4 <sd_storage_link_ss+0x64>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <sd_storage_link_ss+0x64>
 80023e8:	893b      	ldrh	r3, [r7, #8]
 80023ea:	2201      	movs	r2, #1
 80023ec:	4619      	mov	r1, r3
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f003 ffc2 	bl	8006378 <HAL_GPIO_WritePin>
	  return F_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	200027f4 	.word	0x200027f4

08002404 <read_raw_data_crc16>:

F_RES read_raw_data_crc16(sd_storage_t* self_object,uint8_t* data,uint32_t size,char* filename)
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 800240a:	af00      	add	r7, sp, #0
 800240c:	f507 7426 	add.w	r4, r7, #664	; 0x298
 8002410:	f5a4 7423 	sub.w	r4, r4, #652	; 0x28c
 8002414:	6020      	str	r0, [r4, #0]
 8002416:	f507 7026 	add.w	r0, r7, #664	; 0x298
 800241a:	f5a0 7024 	sub.w	r0, r0, #656	; 0x290
 800241e:	6001      	str	r1, [r0, #0]
 8002420:	f507 7126 	add.w	r1, r7, #664	; 0x298
 8002424:	f5a1 7125 	sub.w	r1, r1, #660	; 0x294
 8002428:	600a      	str	r2, [r1, #0]
 800242a:	f507 7226 	add.w	r2, r7, #664	; 0x298
 800242e:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 8002432:	6013      	str	r3, [r2, #0]
	FIL data_file;
	int16_t CRC16_from_disk;
	uint32_t bytes_readed;
	char tmp_str[SD_FILENAME_LEN+2];
	osSemaphoreWait(self_object->microsd_media_sem, osWaitForever);
 8002434:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002438:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002442:	f04f 31ff 	mov.w	r1, #4294967295
 8002446:	4618      	mov	r0, r3
 8002448:	f00b faa2 	bl	800d990 <osSemaphoreWait>
	sprintf(tmp_str,"%u:%s",(unsigned int)self_object->active_disk_indx,filename);
 800244c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002450:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800245a:	461a      	mov	r2, r3
 800245c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002460:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8002464:	f107 0010 	add.w	r0, r7, #16
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4953      	ldr	r1, [pc, #332]	; (80025b8 <read_raw_data_crc16+0x1b4>)
 800246c:	f00e fdc6 	bl	8010ffc <siprintf>
	if(f_open(&data_file,tmp_str,FA_READ)==FR_OK){
 8002470:	f107 0110 	add.w	r1, r7, #16
 8002474:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002478:	2201      	movs	r2, #1
 800247a:	4618      	mov	r0, r3
 800247c:	f009 fca4 	bl	800bdc8 <f_open>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	f040 8087 	bne.w	8002596 <read_raw_data_crc16+0x192>
	  if(f_read(&data_file,(uint8_t*)data,size,(UINT*)&bytes_readed)==FR_OK){
 8002488:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800248c:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8002490:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 8002494:	f507 7126 	add.w	r1, r7, #664	; 0x298
 8002498:	f5a1 7124 	sub.w	r1, r1, #656	; 0x290
 800249c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	6809      	ldr	r1, [r1, #0]
 80024a4:	f009 ff51 	bl	800c34a <f_read>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d167      	bne.n	800257e <read_raw_data_crc16+0x17a>
	   if(bytes_readed!=size){
 80024ae:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80024b2:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f507 7226 	add.w	r2, r7, #664	; 0x298
 80024bc:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d010      	beq.n	80024e8 <read_raw_data_crc16+0xe4>
		   f_close(&data_file);
 80024c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024ca:	4618      	mov	r0, r3
 80024cc:	f00a fb89 	bl	800cbe2 <f_close>
		   osSemaphoreRelease(self_object->microsd_media_sem);
 80024d0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80024d4:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 80024de:	4618      	mov	r0, r3
 80024e0:	f00b faa4 	bl	800da2c <osSemaphoreRelease>
		   return F_ERR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e061      	b.n	80025ac <read_raw_data_crc16+0x1a8>
	   }
	   if(f_read(&data_file,(uint8_t*)&CRC16_from_disk,2,(UINT*)&bytes_readed)==FR_OK) f_close(&data_file);
 80024e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024ec:	f107 0136 	add.w	r1, r7, #54	; 0x36
 80024f0:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80024f4:	2202      	movs	r2, #2
 80024f6:	f009 ff28 	bl	800c34a <f_read>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d104      	bne.n	800250a <read_raw_data_crc16+0x106>
 8002500:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002504:	4618      	mov	r0, r3
 8002506:	f00a fb6c 	bl	800cbe2 <f_close>
	   if(bytes_readed!=2)return F_ERR;
 800250a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800250e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d001      	beq.n	800251c <read_raw_data_crc16+0x118>
 8002518:	2301      	movs	r3, #1
 800251a:	e047      	b.n	80025ac <read_raw_data_crc16+0x1a8>
	   int16_t CRC16_calculated=usMBCRC16((uint8_t*)data,size);
 800251c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002520:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8002524:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002528:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800252c:	6811      	ldr	r1, [r2, #0]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	f001 fe40 	bl	80041b4 <usMBCRC16>
 8002534:	4603      	mov	r3, r0
 8002536:	f8a7 3296 	strh.w	r3, [r7, #662]	; 0x296
	   if(CRC16_calculated==CRC16_from_disk) {
 800253a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800253e:	f2a3 2362 	subw	r3, r3, #610	; 0x262
 8002542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002546:	f9b7 2296 	ldrsh.w	r2, [r7, #662]	; 0x296
 800254a:	429a      	cmp	r2, r3
 800254c:	d10b      	bne.n	8002566 <read_raw_data_crc16+0x162>
		  osSemaphoreRelease(self_object->microsd_media_sem);
 800254e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002552:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800255c:	4618      	mov	r0, r3
 800255e:	f00b fa65 	bl	800da2c <osSemaphoreRelease>
		  return F_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	e022      	b.n	80025ac <read_raw_data_crc16+0x1a8>
	   }
	   osSemaphoreRelease(self_object->microsd_media_sem);
 8002566:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800256a:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002574:	4618      	mov	r0, r3
 8002576:	f00b fa59 	bl	800da2c <osSemaphoreRelease>
	   return F_ERR;
 800257a:	2301      	movs	r3, #1
 800257c:	e016      	b.n	80025ac <read_raw_data_crc16+0x1a8>
	  }
	  osSemaphoreRelease(self_object->microsd_media_sem);
 800257e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002582:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800258c:	4618      	mov	r0, r3
 800258e:	f00b fa4d 	bl	800da2c <osSemaphoreRelease>
	  return F_ERR;
 8002592:	2301      	movs	r3, #1
 8002594:	e00a      	b.n	80025ac <read_raw_data_crc16+0x1a8>
	}
	osSemaphoreRelease(self_object->microsd_media_sem);
 8002596:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800259a:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 80025a4:	4618      	mov	r0, r3
 80025a6:	f00b fa41 	bl	800da2c <osSemaphoreRelease>
	return F_ERR;
 80025aa:	2301      	movs	r3, #1
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	f507 7727 	add.w	r7, r7, #668	; 0x29c
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd90      	pop	{r4, r7, pc}
 80025b6:	bf00      	nop
 80025b8:	08014100 	.word	0x08014100

080025bc <save_raw_data_crc16>:

F_RES save_raw_data_crc16(sd_storage_t* self_object,uint8_t* data,uint32_t size,char* filename)
{
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	f507 7426 	add.w	r4, r7, #664	; 0x298
 80025c8:	f5a4 7423 	sub.w	r4, r4, #652	; 0x28c
 80025cc:	6020      	str	r0, [r4, #0]
 80025ce:	f507 7026 	add.w	r0, r7, #664	; 0x298
 80025d2:	f5a0 7024 	sub.w	r0, r0, #656	; 0x290
 80025d6:	6001      	str	r1, [r0, #0]
 80025d8:	f507 7126 	add.w	r1, r7, #664	; 0x298
 80025dc:	f5a1 7125 	sub.w	r1, r1, #660	; 0x294
 80025e0:	600a      	str	r2, [r1, #0]
 80025e2:	f507 7226 	add.w	r2, r7, #664	; 0x298
 80025e6:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 80025ea:	6013      	str	r3, [r2, #0]
	uint32_t byteswritten;
	FIL data_file;
	char tmp_str[SD_FILENAME_LEN+2];
	osSemaphoreWait(self_object->microsd_media_sem, osWaitForever);
 80025ec:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80025f0:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 80025fa:	f04f 31ff 	mov.w	r1, #4294967295
 80025fe:	4618      	mov	r0, r3
 8002600:	f00b f9c6 	bl	800d990 <osSemaphoreWait>
	sprintf(tmp_str,"%u:%s",(unsigned int)self_object->active_disk_indx,filename);
 8002604:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002608:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8002612:	461a      	mov	r2, r3
 8002614:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002618:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800261c:	f107 0018 	add.w	r0, r7, #24
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4943      	ldr	r1, [pc, #268]	; (8002730 <save_raw_data_crc16+0x174>)
 8002624:	f00e fcea 	bl	8010ffc <siprintf>

	if(f_open(&data_file,tmp_str,FA_CREATE_ALWAYS|FA_WRITE)==FR_OK){
 8002628:	f107 0118 	add.w	r1, r7, #24
 800262c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002630:	220a      	movs	r2, #10
 8002632:	4618      	mov	r0, r3
 8002634:	f009 fbc8 	bl	800bdc8 <f_open>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d167      	bne.n	800270e <save_raw_data_crc16+0x152>
	  int16_t CRC16_calculated=usMBCRC16((uint8_t*)data,size);
 800263e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002642:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8002646:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800264a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800264e:	6811      	ldr	r1, [r2, #0]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	f001 fdaf 	bl	80041b4 <usMBCRC16>
 8002656:	4603      	mov	r3, r0
 8002658:	461a      	mov	r2, r3
 800265a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800265e:	f2a3 2382 	subw	r3, r3, #642	; 0x282
 8002662:	801a      	strh	r2, [r3, #0]
	  if(f_write(&data_file,(uint8_t*)data,size,(UINT*)&byteswritten)==FR_OK){
 8002664:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8002668:	f507 7226 	add.w	r2, r7, #664	; 0x298
 800266c:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 8002670:	f507 7126 	add.w	r1, r7, #664	; 0x298
 8002674:	f5a1 7124 	sub.w	r1, r1, #656	; 0x290
 8002678:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	6809      	ldr	r1, [r1, #0]
 8002680:	f009 ffdd 	bl	800c63e <f_write>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d135      	bne.n	80026f6 <save_raw_data_crc16+0x13a>
		  if(byteswritten==size){
 800268a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800268e:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8002692:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d120      	bne.n	80026de <save_raw_data_crc16+0x122>
			if(f_write(&data_file,(uint8_t*)&CRC16_calculated,2,(UINT*)&byteswritten)==FR_OK){
 800269c:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80026a0:	f107 0116 	add.w	r1, r7, #22
 80026a4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80026a8:	2202      	movs	r2, #2
 80026aa:	f009 ffc8 	bl	800c63e <f_write>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d114      	bne.n	80026de <save_raw_data_crc16+0x122>
			 if(byteswritten==2){
 80026b4:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d110      	bne.n	80026de <save_raw_data_crc16+0x122>
			  f_close(&data_file);
 80026bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026c0:	4618      	mov	r0, r3
 80026c2:	f00a fa8e 	bl	800cbe2 <f_close>
			  osSemaphoreRelease(self_object->microsd_media_sem);
 80026c6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80026ca:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 80026d4:	4618      	mov	r0, r3
 80026d6:	f00b f9a9 	bl	800da2c <osSemaphoreRelease>
			  return F_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e022      	b.n	8002724 <save_raw_data_crc16+0x168>
			 }
			}
		  }
		  osSemaphoreRelease(self_object->microsd_media_sem);
 80026de:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80026e2:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 80026ec:	4618      	mov	r0, r3
 80026ee:	f00b f99d 	bl	800da2c <osSemaphoreRelease>
		  return F_ERR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e016      	b.n	8002724 <save_raw_data_crc16+0x168>
	  }
	  osSemaphoreRelease(self_object->microsd_media_sem);
 80026f6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80026fa:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002704:	4618      	mov	r0, r3
 8002706:	f00b f991 	bl	800da2c <osSemaphoreRelease>
	  return F_ERR;
 800270a:	2301      	movs	r3, #1
 800270c:	e00a      	b.n	8002724 <save_raw_data_crc16+0x168>
	}
	osSemaphoreRelease(self_object->microsd_media_sem);
 800270e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002712:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800271c:	4618      	mov	r0, r3
 800271e:	f00b f985 	bl	800da2c <osSemaphoreRelease>
	return F_ERR;
 8002722:	2301      	movs	r3, #1
}
 8002724:	4618      	mov	r0, r3
 8002726:	f507 7727 	add.w	r7, r7, #668	; 0x29c
 800272a:	46bd      	mov	sp, r7
 800272c:	bd90      	pop	{r4, r7, pc}
 800272e:	bf00      	nop
 8002730:	08014100 	.word	0x08014100

08002734 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a06      	ldr	r2, [pc, #24]	; (800275c <vApplicationGetIdleTaskMemory+0x28>)
 8002744:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	4a05      	ldr	r2, [pc, #20]	; (8002760 <vApplicationGetIdleTaskMemory+0x2c>)
 800274a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2280      	movs	r2, #128	; 0x80
 8002750:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002752:	bf00      	nop
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	20000424 	.word	0x20000424
 8002760:	200004d8 	.word	0x200004d8

08002764 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4a07      	ldr	r2, [pc, #28]	; (8002790 <vApplicationGetTimerTaskMemory+0x2c>)
 8002774:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	4a06      	ldr	r2, [pc, #24]	; (8002794 <vApplicationGetTimerTaskMemory+0x30>)
 800277a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002782:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002784:	bf00      	nop
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	200006d8 	.word	0x200006d8
 8002794:	2000078c 	.word	0x2000078c

08002798 <microsd_init_proc>:

uint32_t  microsd_init_events[]={0};
#define   microsd_init_events_num                                             0

void microsd_init_proc(proc_arg_t* proc_arg)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 MX_FATFS_Init();
 80027a0:	f005 fd26 	bl	80081f0 <MX_FATFS_Init>
 sd_storage_link_ss(&microsd_storage,0,SS_SD1_Pin,GPIOA);
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <microsd_init_proc+0x54>)
 80027a6:	2202      	movs	r2, #2
 80027a8:	2100      	movs	r1, #0
 80027aa:	4811      	ldr	r0, [pc, #68]	; (80027f0 <microsd_init_proc+0x58>)
 80027ac:	f7ff fdf0 	bl	8002390 <sd_storage_link_ss>

 while(sd_storage_init(&microsd_storage,microSD_semHandle)!=F_OK){
 80027b0:	e009      	b.n	80027c6 <microsd_init_proc+0x2e>
  osDelay(500);
 80027b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027b6:	f00b f8a4 	bl	800d902 <osDelay>
  fsm_generate_event(proc_arg->outQ_handle,MICROSD_EVNT_STORAGE_NOT_INITIALIZED);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2165      	movs	r1, #101	; 0x65
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 f8d1 	bl	8003968 <fsm_generate_event>
 while(sd_storage_init(&microsd_storage,microSD_semHandle)!=F_OK){
 80027c6:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <microsd_init_proc+0x5c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4619      	mov	r1, r3
 80027cc:	4808      	ldr	r0, [pc, #32]	; (80027f0 <microsd_init_proc+0x58>)
 80027ce:	f7ff fd05 	bl	80021dc <sd_storage_init>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1ec      	bne.n	80027b2 <microsd_init_proc+0x1a>
 }
 fsm_generate_event(proc_arg->outQ_handle,MICROSD_EVNT_STORAGE_INITIALIZED);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2164      	movs	r1, #100	; 0x64
 80027de:	4618      	mov	r0, r3
 80027e0:	f001 f8c2 	bl	8003968 <fsm_generate_event>
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40010800 	.word	0x40010800
 80027f0:	200023dc 	.word	0x200023dc
 80027f4:	200015ec 	.word	0x200015ec

080027f8 <load_settings_proc>:

uint32_t  load_settings_events[]={0};
#define   load_settings_events_num                                             0

void load_settings_proc(proc_arg_t* proc_arg)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if(read_settings()==F_ERR){
 8002800:	f002 fbac 	bl	8004f5c <read_settings>
 8002804:	4603      	mov	r3, r0
 8002806:	2b01      	cmp	r3, #1
 8002808:	d10b      	bne.n	8002822 <load_settings_proc+0x2a>
 	  set_default_settings();
 800280a:	f002 fb9b 	bl	8004f44 <set_default_settings>
 	  save_settings();
 800280e:	f002 fbbb 	bl	8004f88 <save_settings>
 	  fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_DEFAULT_SETTINGS_LOADED);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f240 112d 	movw	r1, #301	; 0x12d
 800281a:	4618      	mov	r0, r3
 800281c:	f001 f8a4 	bl	8003968 <fsm_generate_event>
  }
  else{
    fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_SETTINGS_LOADED);

  }
}
 8002820:	e006      	b.n	8002830 <load_settings_proc+0x38>
    fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_SETTINGS_LOADED);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800282a:	4618      	mov	r0, r3
 800282c:	f001 f89c 	bl	8003968 <fsm_generate_event>
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <set_clock_proc>:
uint32_t  set_clock_events[]={HYDROC_EVNT_CFG_ENTERED,
		                      HYDROC_EVNT_CFG_EXITED};
#define   set_clock_events_num                                             2

void set_clock_proc(proc_arg_t* proc_arg)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08c      	sub	sp, #48	; 0x30
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  char tmp_str[30];
  uint32_t in_event;

  memcpy(tmp_str,glider1.date,8);
 8002840:	4a37      	ldr	r2, [pc, #220]	; (8002920 <set_clock_proc+0xe8>)
 8002842:	f107 0310 	add.w	r3, r7, #16
 8002846:	321d      	adds	r2, #29
 8002848:	6810      	ldr	r0, [r2, #0]
 800284a:	6851      	ldr	r1, [r2, #4]
 800284c:	c303      	stmia	r3!, {r0, r1}
  memcpy(tmp_str+8,",0,",3);
 800284e:	f107 0310 	add.w	r3, r7, #16
 8002852:	3308      	adds	r3, #8
 8002854:	2203      	movs	r2, #3
 8002856:	4933      	ldr	r1, [pc, #204]	; (8002924 <set_clock_proc+0xec>)
 8002858:	4618      	mov	r0, r3
 800285a:	f00e fa63 	bl	8010d24 <memcpy>
  memcpy(tmp_str+11,glider1.time,8);
 800285e:	f107 0310 	add.w	r3, r7, #16
 8002862:	330b      	adds	r3, #11
 8002864:	492e      	ldr	r1, [pc, #184]	; (8002920 <set_clock_proc+0xe8>)
 8002866:	461a      	mov	r2, r3
 8002868:	f101 0325 	add.w	r3, r1, #37	; 0x25
 800286c:	6819      	ldr	r1, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	6011      	str	r1, [r2, #0]
 8002872:	6053      	str	r3, [r2, #4]
  memcpy(tmp_str+19,",0",2);
 8002874:	f107 0310 	add.w	r3, r7, #16
 8002878:	3313      	adds	r3, #19
 800287a:	2202      	movs	r2, #2
 800287c:	492a      	ldr	r1, [pc, #168]	; (8002928 <set_clock_proc+0xf0>)
 800287e:	4618      	mov	r0, r3
 8002880:	f00e fa50 	bl	8010d24 <memcpy>
  tmp_str[21]=0x00;
 8002884:	2300      	movs	r3, #0
 8002886:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_ENTER_CFG,tmp_str);
 800288a:	f107 0310 	add.w	r3, r7, #16
 800288e:	461a      	mov	r2, r3
 8002890:	2100      	movs	r1, #0
 8002892:	4826      	ldr	r0, [pc, #152]	; (800292c <set_clock_proc+0xf4>)
 8002894:	f7fe fd64 	bl	8001360 <hydroc_send_cmd>
  F_RES res=fsm_take_event(proc_arg->inQ_handle,&in_event, HYDROC_CMD_TIMEOUT);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f107 010c 	add.w	r1, r7, #12
 80028a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a4:	4618      	mov	r0, r3
 80028a6:	f001 f86e 	bl	8003986 <fsm_take_event>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if(res==F_OK){
 80028b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d12e      	bne.n	8002916 <set_clock_proc+0xde>
	if(in_event==HYDROC_EVNT_CFG_ENTERED){
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 80028be:	d12a      	bne.n	8002916 <set_clock_proc+0xde>
		hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_SET_REAL_TIME,tmp_str);
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	461a      	mov	r2, r3
 80028c6:	2102      	movs	r1, #2
 80028c8:	4818      	ldr	r0, [pc, #96]	; (800292c <set_clock_proc+0xf4>)
 80028ca:	f7fe fd49 	bl	8001360 <hydroc_send_cmd>
		osDelay(200);
 80028ce:	20c8      	movs	r0, #200	; 0xc8
 80028d0:	f00b f817 	bl	800d902 <osDelay>
  	    hydroc_send_cmd(&hydroc_sensor1, HYDROC_CMD_EXIT_CFG, NULL);
 80028d4:	2200      	movs	r2, #0
 80028d6:	2101      	movs	r1, #1
 80028d8:	4814      	ldr	r0, [pc, #80]	; (800292c <set_clock_proc+0xf4>)
 80028da:	f7fe fd41 	bl	8001360 <hydroc_send_cmd>
		res=fsm_take_event(proc_arg->inQ_handle,&in_event, HYDROC_CMD_TIMEOUT);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f107 010c 	add.w	r1, r7, #12
 80028e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 f84b 	bl	8003986 <fsm_take_event>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(res==F_OK){
 80028f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10b      	bne.n	8002916 <set_clock_proc+0xde>
		  if(in_event==HYDROC_EVNT_CFG_EXITED){
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f240 226d 	movw	r2, #621	; 0x26d
 8002904:	4293      	cmp	r3, r2
 8002906:	d106      	bne.n	8002916 <set_clock_proc+0xde>
			fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_CLOCK_UPDATED);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f44f 7198 	mov.w	r1, #304	; 0x130
 8002910:	4618      	mov	r0, r3
 8002912:	f001 f829 	bl	8003968 <fsm_generate_event>
		  }
	    }
	}
  }
}
 8002916:	bf00      	nop
 8002918:	3730      	adds	r7, #48	; 0x30
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	200015f0 	.word	0x200015f0
 8002924:	08014108 	.word	0x08014108
 8002928:	0801410c 	.word	0x0801410c
 800292c:	20001a30 	.word	0x20001a30

08002930 <send_errors_proc>:
uint32_t  send_errors_events[]={
                               };
#define   send_errors_events_num                                          0

void send_errors_proc(proc_arg_t* proc_arg)
{
 8002930:	b590      	push	{r4, r7, lr}
 8002932:	b0a5      	sub	sp, #148	; 0x94
 8002934:	af04      	add	r7, sp, #16
 8002936:	6078      	str	r0, [r7, #4]
	memory_region_pointer ptr1;
	char tmp_filename[50];

	uint32_t bytesreaded;

	sprintf(tmp_filename,"%u:%s_%s_%u%s",microsd_storage.active_disk_indx,
 8002938:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <send_errors_proc+0x110>)
 800293a:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800293e:	461c      	mov	r4, r3
			ERR_FILE_PREFIX,hydroc_sensor1.model_specific->type_name,(unsigned int)run_cfg.last_file_index,ERR_FILE_EXTENSION);
 8002940:	4b40      	ldr	r3, [pc, #256]	; (8002a44 <send_errors_proc+0x114>)
 8002942:	f8d3 39a4 	ldr.w	r3, [r3, #2468]	; 0x9a4
 8002946:	3301      	adds	r3, #1
 8002948:	4a3f      	ldr	r2, [pc, #252]	; (8002a48 <send_errors_proc+0x118>)
 800294a:	6812      	ldr	r2, [r2, #0]
	sprintf(tmp_filename,"%u:%s_%s_%u%s",microsd_storage.active_disk_indx,
 800294c:	f107 0010 	add.w	r0, r7, #16
 8002950:	493e      	ldr	r1, [pc, #248]	; (8002a4c <send_errors_proc+0x11c>)
 8002952:	9102      	str	r1, [sp, #8]
 8002954:	9201      	str	r2, [sp, #4]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <send_errors_proc+0x120>)
 800295a:	4622      	mov	r2, r4
 800295c:	493d      	ldr	r1, [pc, #244]	; (8002a54 <send_errors_proc+0x124>)
 800295e:	f00e fb4d 	bl	8010ffc <siprintf>
	osSemaphoreWait(microsd_storage.microsd_media_sem, osWaitForever);
 8002962:	4b37      	ldr	r3, [pc, #220]	; (8002a40 <send_errors_proc+0x110>)
 8002964:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002968:	f04f 31ff 	mov.w	r1, #4294967295
 800296c:	4618      	mov	r0, r3
 800296e:	f00b f80f 	bl	800d990 <osSemaphoreWait>
	if(f_open(&err_file,tmp_filename,FA_READ)==FR_OK){
 8002972:	f107 0310 	add.w	r3, r7, #16
 8002976:	2201      	movs	r2, #1
 8002978:	4619      	mov	r1, r3
 800297a:	4837      	ldr	r0, [pc, #220]	; (8002a58 <send_errors_proc+0x128>)
 800297c:	f009 fa24 	bl	800bdc8 <f_open>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d133      	bne.n	80029ee <send_errors_proc+0xbe>
     if(f_read(&err_file,(uint8_t*)&hydroc_sensor1.errors,sizeof(hydroc_sensor1.errors),(UINT*)&bytesreaded)==FR_OK){
 8002986:	f107 030c 	add.w	r3, r7, #12
 800298a:	2210      	movs	r2, #16
 800298c:	4933      	ldr	r1, [pc, #204]	; (8002a5c <send_errors_proc+0x12c>)
 800298e:	4832      	ldr	r0, [pc, #200]	; (8002a58 <send_errors_proc+0x128>)
 8002990:	f009 fcdb 	bl	800c34a <f_read>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d122      	bne.n	80029e0 <send_errors_proc+0xb0>
      if(sizeof(hydroc_sensor1.errors)==bytesreaded){
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b10      	cmp	r3, #16
 800299e:	d115      	bne.n	80029cc <send_errors_proc+0x9c>
    		sprintf(err_msg,"P_in:%u,rH_gas:%u,T_control:%u,P_pump:%u\r",
    				   (unsigned int)hydroc_sensor1.errors.P_in,
 80029a0:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <send_errors_proc+0x114>)
 80029a2:	f8d3 1971 	ldr.w	r1, [r3, #2417]	; 0x971
					   (unsigned int)hydroc_sensor1.errors.rH_gas,
 80029a6:	4b27      	ldr	r3, [pc, #156]	; (8002a44 <send_errors_proc+0x114>)
 80029a8:	f8d3 4975 	ldr.w	r4, [r3, #2421]	; 0x975
					   (unsigned int)hydroc_sensor1.errors.T_control,
 80029ac:	4b25      	ldr	r3, [pc, #148]	; (8002a44 <send_errors_proc+0x114>)
 80029ae:	f8d3 3979 	ldr.w	r3, [r3, #2425]	; 0x979
					   (unsigned int)hydroc_sensor1.errors.P_pump
 80029b2:	4a24      	ldr	r2, [pc, #144]	; (8002a44 <send_errors_proc+0x114>)
 80029b4:	f8d2 297d 	ldr.w	r2, [r2, #2429]	; 0x97d
    		sprintf(err_msg,"P_in:%u,rH_gas:%u,T_control:%u,P_pump:%u\r",
 80029b8:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80029bc:	9201      	str	r2, [sp, #4]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	4623      	mov	r3, r4
 80029c2:	460a      	mov	r2, r1
 80029c4:	4926      	ldr	r1, [pc, #152]	; (8002a60 <send_errors_proc+0x130>)
 80029c6:	f00e fb19 	bl	8010ffc <siprintf>
 80029ca:	e005      	b.n	80029d8 <send_errors_proc+0xa8>
    				   );
      }
      else sprintf(err_msg,"Errors file corrupted\r");
 80029cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029d0:	4924      	ldr	r1, [pc, #144]	; (8002a64 <send_errors_proc+0x134>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	f00e fb12 	bl	8010ffc <siprintf>
      f_close(&err_file);
 80029d8:	481f      	ldr	r0, [pc, #124]	; (8002a58 <send_errors_proc+0x128>)
 80029da:	f00a f902 	bl	800cbe2 <f_close>
 80029de:	e00c      	b.n	80029fa <send_errors_proc+0xca>
     }
     else sprintf(err_msg,"Errors file can't be read\r");
 80029e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029e4:	4920      	ldr	r1, [pc, #128]	; (8002a68 <send_errors_proc+0x138>)
 80029e6:	4618      	mov	r0, r3
 80029e8:	f00e fb08 	bl	8010ffc <siprintf>
 80029ec:	e005      	b.n	80029fa <send_errors_proc+0xca>
	}
	else sprintf(err_msg,"Errors file not found\r");
 80029ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029f2:	491e      	ldr	r1, [pc, #120]	; (8002a6c <send_errors_proc+0x13c>)
 80029f4:	4618      	mov	r0, r3
 80029f6:	f00e fb01 	bl	8010ffc <siprintf>
	osSemaphoreRelease(microsd_storage.microsd_media_sem);
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <send_errors_proc+0x110>)
 80029fc:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002a00:	4618      	mov	r0, r3
 8002a02:	f00b f813 	bl	800da2c <osSemaphoreRelease>
	ptr1.start_addr=err_msg;
 8002a06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a0a:	647b      	str	r3, [r7, #68]	; 0x44
	ptr1.size=strlen(err_msg);
 8002a0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fd fc0d 	bl	8000230 <strlen>
 8002a16:	4603      	mov	r3, r0
 8002a18:	64bb      	str	r3, [r7, #72]	; 0x48
	seaglider_send_cmd(&glider1,SEAGLIDER_CMD_SEND_DATA,&ptr1);
 8002a1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2101      	movs	r1, #1
 8002a22:	4813      	ldr	r0, [pc, #76]	; (8002a70 <send_errors_proc+0x140>)
 8002a24:	f001 fff2 	bl	8004a0c <seaglider_send_cmd>
	fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_ERRORS_SENT);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f240 1131 	movw	r1, #305	; 0x131
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 ff99 	bl	8003968 <fsm_generate_event>

}
 8002a36:	bf00      	nop
 8002a38:	3784      	adds	r7, #132	; 0x84
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd90      	pop	{r4, r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200023dc 	.word	0x200023dc
 8002a44:	20001a30 	.word	0x20001a30
 8002a48:	20002a84 	.word	0x20002a84
 8002a4c:	08014128 	.word	0x08014128
 8002a50:	08014110 	.word	0x08014110
 8002a54:	08014118 	.word	0x08014118
 8002a58:	200011e8 	.word	0x200011e8
 8002a5c:	200023a1 	.word	0x200023a1
 8002a60:	08014130 	.word	0x08014130
 8002a64:	0801415c 	.word	0x0801415c
 8002a68:	08014174 	.word	0x08014174
 8002a6c:	08014190 	.word	0x08014190
 8002a70:	200015f0 	.word	0x200015f0

08002a74 <send_data_proc>:
uint32_t  send_data_events[]={
		                     };
#define   send_data_events_num                                             0

void send_data_proc(proc_arg_t* proc_arg)
{
 8002a74:	b590      	push	{r4, r7, lr}
 8002a76:	b0b1      	sub	sp, #196	; 0xc4
 8002a78:	af04      	add	r7, sp, #16
 8002a7a:	6078      	str	r0, [r7, #4]
	memory_region_pointer ptr1;
	char tmp_filename[50];
	uint8_t tx_buff[100];
	uint32_t bytesreaded;

	sprintf(tmp_filename,"%u:%s_%s_%u%s",microsd_storage.active_disk_indx,
 8002a7c:	4b40      	ldr	r3, [pc, #256]	; (8002b80 <send_data_proc+0x10c>)
 8002a7e:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8002a82:	461c      	mov	r4, r3
			DATA_FILE_PREFIX,hydroc_sensor1.model_specific->type_name,(unsigned int)run_cfg.last_file_index,DATA_FILE_EXTENSION);
 8002a84:	4b3f      	ldr	r3, [pc, #252]	; (8002b84 <send_data_proc+0x110>)
 8002a86:	f8d3 39a4 	ldr.w	r3, [r3, #2468]	; 0x9a4
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	4a3e      	ldr	r2, [pc, #248]	; (8002b88 <send_data_proc+0x114>)
 8002a8e:	6812      	ldr	r2, [r2, #0]
	sprintf(tmp_filename,"%u:%s_%s_%u%s",microsd_storage.active_disk_indx,
 8002a90:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8002a94:	493d      	ldr	r1, [pc, #244]	; (8002b8c <send_data_proc+0x118>)
 8002a96:	9102      	str	r1, [sp, #8]
 8002a98:	9201      	str	r2, [sp, #4]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	4b3c      	ldr	r3, [pc, #240]	; (8002b90 <send_data_proc+0x11c>)
 8002a9e:	4622      	mov	r2, r4
 8002aa0:	493c      	ldr	r1, [pc, #240]	; (8002b94 <send_data_proc+0x120>)
 8002aa2:	f00e faab 	bl	8010ffc <siprintf>
	osSemaphoreWait(microsd_storage.microsd_media_sem, osWaitForever);
 8002aa6:	4b36      	ldr	r3, [pc, #216]	; (8002b80 <send_data_proc+0x10c>)
 8002aa8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002aac:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f00a ff6d 	bl	800d990 <osSemaphoreWait>
	if(f_open(&data_file,tmp_filename,FA_READ)==FR_OK){
 8002ab6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002aba:	2201      	movs	r2, #1
 8002abc:	4619      	mov	r1, r3
 8002abe:	4836      	ldr	r0, [pc, #216]	; (8002b98 <send_data_proc+0x124>)
 8002ac0:	f009 f982 	bl	800bdc8 <f_open>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d149      	bne.n	8002b5e <send_data_proc+0xea>
		sprintf(tmp_filename,"%s_%s_%u%s\r\n",DATA_FILE_PREFIX,hydroc_sensor1.model_specific->type_name,(unsigned int)run_cfg.last_file_index,DATA_FILE_EXTENSION);
 8002aca:	4b2e      	ldr	r3, [pc, #184]	; (8002b84 <send_data_proc+0x110>)
 8002acc:	f8d3 39a4 	ldr.w	r3, [r3, #2468]	; 0x9a4
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	4b2d      	ldr	r3, [pc, #180]	; (8002b88 <send_data_proc+0x114>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8002ada:	492c      	ldr	r1, [pc, #176]	; (8002b8c <send_data_proc+0x118>)
 8002adc:	9101      	str	r1, [sp, #4]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	4a2b      	ldr	r2, [pc, #172]	; (8002b90 <send_data_proc+0x11c>)
 8002ae4:	492d      	ldr	r1, [pc, #180]	; (8002b9c <send_data_proc+0x128>)
 8002ae6:	f00e fa89 	bl	8010ffc <siprintf>
		ptr1.start_addr=(uint8_t*)tmp_filename;
 8002aea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002aee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		ptr1.size=strlen(tmp_filename);
 8002af2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fb9a 	bl	8000230 <strlen>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		seaglider_send_cmd(&glider1,SEAGLIDER_CMD_SEND_DATA,&ptr1);
 8002b02:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002b06:	461a      	mov	r2, r3
 8002b08:	2101      	movs	r1, #1
 8002b0a:	4825      	ldr	r0, [pc, #148]	; (8002ba0 <send_data_proc+0x12c>)
 8002b0c:	f001 ff7e 	bl	8004a0c <seaglider_send_cmd>
		do{
		   if(f_read(&data_file,tx_buff,50,(UINT*)&bytesreaded)==FR_OK){
 8002b10:	f107 030c 	add.w	r3, r7, #12
 8002b14:	f107 0110 	add.w	r1, r7, #16
 8002b18:	2232      	movs	r2, #50	; 0x32
 8002b1a:	481f      	ldr	r0, [pc, #124]	; (8002b98 <send_data_proc+0x124>)
 8002b1c:	f009 fc15 	bl	800c34a <f_read>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10d      	bne.n	8002b42 <send_data_proc+0xce>
		    ptr1.start_addr=tx_buff;
 8002b26:	f107 0310 	add.w	r3, r7, #16
 8002b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		    ptr1.size=bytesreaded;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		    seaglider_send_cmd(&glider1,SEAGLIDER_CMD_SEND_DATA,&ptr1);
 8002b34:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	4818      	ldr	r0, [pc, #96]	; (8002ba0 <send_data_proc+0x12c>)
 8002b3e:	f001 ff65 	bl	8004a0c <seaglider_send_cmd>
		   }
		}while(bytesreaded==50);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b32      	cmp	r3, #50	; 0x32
 8002b46:	d0e3      	beq.n	8002b10 <send_data_proc+0x9c>
		f_close(&data_file);
 8002b48:	4813      	ldr	r0, [pc, #76]	; (8002b98 <send_data_proc+0x124>)
 8002b4a:	f00a f84a 	bl	800cbe2 <f_close>
		fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_DATA_SENT);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f44f 7199 	mov.w	r1, #306	; 0x132
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 ff06 	bl	8003968 <fsm_generate_event>
 8002b5c:	e006      	b.n	8002b6c <send_data_proc+0xf8>
	}
	else fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_DATA_CANT_BE_SENT);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f240 1133 	movw	r1, #307	; 0x133
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fefe 	bl	8003968 <fsm_generate_event>
	osSemaphoreRelease(microsd_storage.microsd_media_sem);
 8002b6c:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <send_data_proc+0x10c>)
 8002b6e:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002b72:	4618      	mov	r0, r3
 8002b74:	f00a ff5a 	bl	800da2c <osSemaphoreRelease>
}
 8002b78:	bf00      	nop
 8002b7a:	37b4      	adds	r7, #180	; 0xb4
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd90      	pop	{r4, r7, pc}
 8002b80:	200023dc 	.word	0x200023dc
 8002b84:	20001a30 	.word	0x20001a30
 8002b88:	20002a84 	.word	0x20002a84
 8002b8c:	080141a8 	.word	0x080141a8
 8002b90:	08014110 	.word	0x08014110
 8002b94:	08014118 	.word	0x08014118
 8002b98:	20000f90 	.word	0x20000f90
 8002b9c:	080141b0 	.word	0x080141b0
 8002ba0:	200015f0 	.word	0x200015f0

08002ba4 <hydroc_data_saver_proc>:
		                                  FSM_EVNT_TS1_PROCESSED
		                             };
#define   hydroc_data_saver_events_num                                             2

void hydroc_data_saver_proc(proc_arg_t* proc_arg)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 uint32_t in_event;
 uint32_t byteswritten;

 for(;;){
   if(fsm_take_event(proc_arg->inQ_handle,&in_event, osWaitForever)==F_OK){
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f107 010c 	add.w	r1, r7, #12
 8002bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fee4 	bl	8003986 <fsm_take_event>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d13a      	bne.n	8002c3a <hydroc_data_saver_proc+0x96>
	   switch(in_event){
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8002bca:	d004      	beq.n	8002bd6 <hydroc_data_saver_proc+0x32>
 8002bcc:	f240 1237 	movw	r2, #311	; 0x137
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d019      	beq.n	8002c08 <hydroc_data_saver_proc+0x64>
 8002bd4:	e032      	b.n	8002c3c <hydroc_data_saver_proc+0x98>
	     case FSM_EVNT_DS4_PROCESSED:
	    	 osSemaphoreWait(microsd_storage.microsd_media_sem, osWaitForever);
 8002bd6:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <hydroc_data_saver_proc+0x9c>)
 8002bd8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002be0:	4618      	mov	r0, r3
 8002be2:	f00a fed5 	bl	800d990 <osSemaphoreWait>
	    	 f_write(&data_file,log_ds4_msg,strlen(log_ds4_msg),(UINT*)&byteswritten);
 8002be6:	4817      	ldr	r0, [pc, #92]	; (8002c44 <hydroc_data_saver_proc+0xa0>)
 8002be8:	f7fd fb22 	bl	8000230 <strlen>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f107 0308 	add.w	r3, r7, #8
 8002bf2:	4914      	ldr	r1, [pc, #80]	; (8002c44 <hydroc_data_saver_proc+0xa0>)
 8002bf4:	4814      	ldr	r0, [pc, #80]	; (8002c48 <hydroc_data_saver_proc+0xa4>)
 8002bf6:	f009 fd22 	bl	800c63e <f_write>
	    	 osSemaphoreRelease(microsd_storage.microsd_media_sem);
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <hydroc_data_saver_proc+0x9c>)
 8002bfc:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002c00:	4618      	mov	r0, r3
 8002c02:	f00a ff13 	bl	800da2c <osSemaphoreRelease>
		 break;
 8002c06:	e019      	b.n	8002c3c <hydroc_data_saver_proc+0x98>
	     case FSM_EVNT_TS1_PROCESSED:
	    	 osSemaphoreWait(microsd_storage.microsd_media_sem, osWaitForever);
 8002c08:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <hydroc_data_saver_proc+0x9c>)
 8002c0a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002c0e:	f04f 31ff 	mov.w	r1, #4294967295
 8002c12:	4618      	mov	r0, r3
 8002c14:	f00a febc 	bl	800d990 <osSemaphoreWait>
	    	 f_write(&data_file,log_ts1_msg,strlen(log_ts1_msg),(UINT*)&byteswritten);
 8002c18:	480c      	ldr	r0, [pc, #48]	; (8002c4c <hydroc_data_saver_proc+0xa8>)
 8002c1a:	f7fd fb09 	bl	8000230 <strlen>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	f107 0308 	add.w	r3, r7, #8
 8002c24:	4909      	ldr	r1, [pc, #36]	; (8002c4c <hydroc_data_saver_proc+0xa8>)
 8002c26:	4808      	ldr	r0, [pc, #32]	; (8002c48 <hydroc_data_saver_proc+0xa4>)
 8002c28:	f009 fd09 	bl	800c63e <f_write>
	    	 osSemaphoreRelease(microsd_storage.microsd_media_sem);
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <hydroc_data_saver_proc+0x9c>)
 8002c2e:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002c32:	4618      	mov	r0, r3
 8002c34:	f00a fefa 	bl	800da2c <osSemaphoreRelease>
		 break;
 8002c38:	e000      	b.n	8002c3c <hydroc_data_saver_proc+0x98>

	   };
 8002c3a:	bf00      	nop
   if(fsm_take_event(proc_arg->inQ_handle,&in_event, osWaitForever)==F_OK){
 8002c3c:	e7b6      	b.n	8002bac <hydroc_data_saver_proc+0x8>
 8002c3e:	bf00      	nop
 8002c40:	200023dc 	.word	0x200023dc
 8002c44:	20000b8c 	.word	0x20000b8c
 8002c48:	20000f90 	.word	0x20000f90
 8002c4c:	20000d8c 	.word	0x20000d8c

08002c50 <open_files_proc>:
uint32_t  open_files_events[]={
		                      };
#define   open_files_events_num                                             0

void open_files_proc(proc_arg_t* proc_arg)
{
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b091      	sub	sp, #68	; 0x44
 8002c54:	af04      	add	r7, sp, #16
 8002c56:	6078      	str	r0, [r7, #4]
 char filename[30];
 uint32_t bytesreaded;

 hydroc_sensor1.data_profile_id=glider1.param_z;
 8002c58:	4b96      	ldr	r3, [pc, #600]	; (8002eb4 <open_files_proc+0x264>)
 8002c5a:	f8d3 3439 	ldr.w	r3, [r3, #1081]	; 0x439
 8002c5e:	4a96      	ldr	r2, [pc, #600]	; (8002eb8 <open_files_proc+0x268>)
 8002c60:	f8c2 3981 	str.w	r3, [r2, #2433]	; 0x981

 osSemaphoreWait(microsd_storage.microsd_media_sem, osWaitForever);
 8002c64:	4b95      	ldr	r3, [pc, #596]	; (8002ebc <open_files_proc+0x26c>)
 8002c66:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002c6a:	f04f 31ff 	mov.w	r1, #4294967295
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f00a fe8e 	bl	800d990 <osSemaphoreWait>
 if(glider1.dive_status==SEAGLIDER_STATUS_DIVE){
 8002c74:	4b8f      	ldr	r3, [pc, #572]	; (8002eb4 <open_files_proc+0x264>)
 8002c76:	7cdb      	ldrb	r3, [r3, #19]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	f040 809b 	bne.w	8002db4 <open_files_proc+0x164>

  run_cfg.last_file_index++;
 8002c7e:	4b90      	ldr	r3, [pc, #576]	; (8002ec0 <open_files_proc+0x270>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	4a8e      	ldr	r2, [pc, #568]	; (8002ec0 <open_files_proc+0x270>)
 8002c86:	6013      	str	r3, [r2, #0]
  sprintf(filename,"%u:%s_%s_%u%s",microsd_storage.active_disk_indx,
 8002c88:	4b8c      	ldr	r3, [pc, #560]	; (8002ebc <open_files_proc+0x26c>)
 8002c8a:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8002c8e:	461c      	mov	r4, r3
		  DATA_FILE_PREFIX,hydroc_sensor1.model_specific->type_name,(unsigned int)run_cfg.last_file_index,DATA_FILE_EXTENSION);
 8002c90:	4b89      	ldr	r3, [pc, #548]	; (8002eb8 <open_files_proc+0x268>)
 8002c92:	f8d3 39a4 	ldr.w	r3, [r3, #2468]	; 0x9a4
 8002c96:	3301      	adds	r3, #1
 8002c98:	4a89      	ldr	r2, [pc, #548]	; (8002ec0 <open_files_proc+0x270>)
 8002c9a:	6812      	ldr	r2, [r2, #0]
  sprintf(filename,"%u:%s_%s_%u%s",microsd_storage.active_disk_indx,
 8002c9c:	f107 0010 	add.w	r0, r7, #16
 8002ca0:	4988      	ldr	r1, [pc, #544]	; (8002ec4 <open_files_proc+0x274>)
 8002ca2:	9102      	str	r1, [sp, #8]
 8002ca4:	9201      	str	r2, [sp, #4]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	4b87      	ldr	r3, [pc, #540]	; (8002ec8 <open_files_proc+0x278>)
 8002caa:	4622      	mov	r2, r4
 8002cac:	4987      	ldr	r1, [pc, #540]	; (8002ecc <open_files_proc+0x27c>)
 8002cae:	f00e f9a5 	bl	8010ffc <siprintf>
  if(f_open(&data_file,filename,FA_CREATE_ALWAYS|FA_WRITE)!=FR_OK){
 8002cb2:	f107 0310 	add.w	r3, r7, #16
 8002cb6:	220a      	movs	r2, #10
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4885      	ldr	r0, [pc, #532]	; (8002ed0 <open_files_proc+0x280>)
 8002cbc:	f009 f884 	bl	800bdc8 <f_open>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00d      	beq.n	8002ce2 <open_files_proc+0x92>
	  fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_FILE_OPEN_ERR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f240 113d 	movw	r1, #317	; 0x13d
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fe4a 	bl	8003968 <fsm_generate_event>
	  osSemaphoreRelease(microsd_storage.microsd_media_sem);
 8002cd4:	4b79      	ldr	r3, [pc, #484]	; (8002ebc <open_files_proc+0x26c>)
 8002cd6:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f00a fea6 	bl	800da2c <osSemaphoreRelease>
	  return;
 8002ce0:	e0e4      	b.n	8002eac <open_files_proc+0x25c>
  }

  sprintf(filename,"%u:%s_%s_%u%s",microsd_storage.active_disk_indx,
 8002ce2:	4b76      	ldr	r3, [pc, #472]	; (8002ebc <open_files_proc+0x26c>)
 8002ce4:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8002ce8:	461c      	mov	r4, r3
		  ERR_FILE_PREFIX,hydroc_sensor1.model_specific->type_name,(unsigned int)run_cfg.last_file_index,ERR_FILE_EXTENSION);
 8002cea:	4b73      	ldr	r3, [pc, #460]	; (8002eb8 <open_files_proc+0x268>)
 8002cec:	f8d3 39a4 	ldr.w	r3, [r3, #2468]	; 0x9a4
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	4a73      	ldr	r2, [pc, #460]	; (8002ec0 <open_files_proc+0x270>)
 8002cf4:	6812      	ldr	r2, [r2, #0]
  sprintf(filename,"%u:%s_%s_%u%s",microsd_storage.active_disk_indx,
 8002cf6:	f107 0010 	add.w	r0, r7, #16
 8002cfa:	4976      	ldr	r1, [pc, #472]	; (8002ed4 <open_files_proc+0x284>)
 8002cfc:	9102      	str	r1, [sp, #8]
 8002cfe:	9201      	str	r2, [sp, #4]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	4b71      	ldr	r3, [pc, #452]	; (8002ec8 <open_files_proc+0x278>)
 8002d04:	4622      	mov	r2, r4
 8002d06:	4971      	ldr	r1, [pc, #452]	; (8002ecc <open_files_proc+0x27c>)
 8002d08:	f00e f978 	bl	8010ffc <siprintf>
  if(f_open(&err_file,filename,FA_CREATE_ALWAYS|FA_WRITE)!=FR_OK){
 8002d0c:	f107 0310 	add.w	r3, r7, #16
 8002d10:	220a      	movs	r2, #10
 8002d12:	4619      	mov	r1, r3
 8002d14:	4870      	ldr	r0, [pc, #448]	; (8002ed8 <open_files_proc+0x288>)
 8002d16:	f009 f857 	bl	800bdc8 <f_open>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00d      	beq.n	8002d3c <open_files_proc+0xec>
	  fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_FILE_OPEN_ERR);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f240 113d 	movw	r1, #317	; 0x13d
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fe1d 	bl	8003968 <fsm_generate_event>
	  osSemaphoreRelease(microsd_storage.microsd_media_sem);
 8002d2e:	4b63      	ldr	r3, [pc, #396]	; (8002ebc <open_files_proc+0x26c>)
 8002d30:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002d34:	4618      	mov	r0, r3
 8002d36:	f00a fe79 	bl	800da2c <osSemaphoreRelease>
	  return;
 8002d3a:	e0b7      	b.n	8002eac <open_files_proc+0x25c>
  }

  hydroc_sensor1.errors.P_in=0;
 8002d3c:	4b5e      	ldr	r3, [pc, #376]	; (8002eb8 <open_files_proc+0x268>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2971 	strb.w	r2, [r3, #2417]	; 0x971
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2972 	strb.w	r2, [r3, #2418]	; 0x972
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2973 	strb.w	r2, [r3, #2419]	; 0x973
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2974 	strb.w	r2, [r3, #2420]	; 0x974
  hydroc_sensor1.errors.rH_gas=0;
 8002d56:	4b58      	ldr	r3, [pc, #352]	; (8002eb8 <open_files_proc+0x268>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2975 	strb.w	r2, [r3, #2421]	; 0x975
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2976 	strb.w	r2, [r3, #2422]	; 0x976
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2977 	strb.w	r2, [r3, #2423]	; 0x977
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2978 	strb.w	r2, [r3, #2424]	; 0x978
  hydroc_sensor1.errors.T_control=0;
 8002d70:	4b51      	ldr	r3, [pc, #324]	; (8002eb8 <open_files_proc+0x268>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2979 	strb.w	r2, [r3, #2425]	; 0x979
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 297a 	strb.w	r2, [r3, #2426]	; 0x97a
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 297b 	strb.w	r2, [r3, #2427]	; 0x97b
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 297c 	strb.w	r2, [r3, #2428]	; 0x97c
  hydroc_sensor1.errors.P_pump=0;
 8002d8a:	4b4b      	ldr	r3, [pc, #300]	; (8002eb8 <open_files_proc+0x268>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 297d 	strb.w	r2, [r3, #2429]	; 0x97d
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 297e 	strb.w	r2, [r3, #2430]	; 0x97e
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 297f 	strb.w	r2, [r3, #2431]	; 0x97f
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2980 	strb.w	r2, [r3, #2432]	; 0x980

  fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_FILES_CREATED);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fddb 	bl	8003968 <fsm_generate_event>
 8002db2:	e075      	b.n	8002ea0 <open_files_proc+0x250>
 }
 else if(glider1.dive_status==SEAGLIDER_STATUS_CLIMB){
 8002db4:	4b3f      	ldr	r3, [pc, #252]	; (8002eb4 <open_files_proc+0x264>)
 8002db6:	7cdb      	ldrb	r3, [r3, #19]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d171      	bne.n	8002ea0 <open_files_proc+0x250>

  sprintf(filename,"%u:%s_%s_%u%s",microsd_storage.active_disk_indx,
 8002dbc:	4b3f      	ldr	r3, [pc, #252]	; (8002ebc <open_files_proc+0x26c>)
 8002dbe:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8002dc2:	461c      	mov	r4, r3
		  DATA_FILE_PREFIX,hydroc_sensor1.model_specific->type_name,(unsigned int)run_cfg.last_file_index,DATA_FILE_EXTENSION);
 8002dc4:	4b3c      	ldr	r3, [pc, #240]	; (8002eb8 <open_files_proc+0x268>)
 8002dc6:	f8d3 39a4 	ldr.w	r3, [r3, #2468]	; 0x9a4
 8002dca:	3301      	adds	r3, #1
 8002dcc:	4a3c      	ldr	r2, [pc, #240]	; (8002ec0 <open_files_proc+0x270>)
 8002dce:	6812      	ldr	r2, [r2, #0]
  sprintf(filename,"%u:%s_%s_%u%s",microsd_storage.active_disk_indx,
 8002dd0:	f107 0010 	add.w	r0, r7, #16
 8002dd4:	493b      	ldr	r1, [pc, #236]	; (8002ec4 <open_files_proc+0x274>)
 8002dd6:	9102      	str	r1, [sp, #8]
 8002dd8:	9201      	str	r2, [sp, #4]
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	4b3a      	ldr	r3, [pc, #232]	; (8002ec8 <open_files_proc+0x278>)
 8002dde:	4622      	mov	r2, r4
 8002de0:	493a      	ldr	r1, [pc, #232]	; (8002ecc <open_files_proc+0x27c>)
 8002de2:	f00e f90b 	bl	8010ffc <siprintf>
  if(f_open(&data_file,filename,FA_OPEN_APPEND|FA_WRITE)!=FR_OK) {
 8002de6:	f107 0310 	add.w	r3, r7, #16
 8002dea:	2232      	movs	r2, #50	; 0x32
 8002dec:	4619      	mov	r1, r3
 8002dee:	4838      	ldr	r0, [pc, #224]	; (8002ed0 <open_files_proc+0x280>)
 8002df0:	f008 ffea 	bl	800bdc8 <f_open>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00d      	beq.n	8002e16 <open_files_proc+0x1c6>
	  fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_FILE_OPEN_ERR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f240 113d 	movw	r1, #317	; 0x13d
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fdb0 	bl	8003968 <fsm_generate_event>
	  osSemaphoreRelease(microsd_storage.microsd_media_sem);
 8002e08:	4b2c      	ldr	r3, [pc, #176]	; (8002ebc <open_files_proc+0x26c>)
 8002e0a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f00a fe0c 	bl	800da2c <osSemaphoreRelease>
	  return;
 8002e14:	e04a      	b.n	8002eac <open_files_proc+0x25c>
  }
  sprintf(filename,"%u:%s_%s_%u%s",microsd_storage.active_disk_indx,
 8002e16:	4b29      	ldr	r3, [pc, #164]	; (8002ebc <open_files_proc+0x26c>)
 8002e18:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8002e1c:	461c      	mov	r4, r3
		  ERR_FILE_PREFIX,hydroc_sensor1.model_specific->type_name,(unsigned int)run_cfg.last_file_index,ERR_FILE_EXTENSION);
 8002e1e:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <open_files_proc+0x268>)
 8002e20:	f8d3 39a4 	ldr.w	r3, [r3, #2468]	; 0x9a4
 8002e24:	3301      	adds	r3, #1
 8002e26:	4a26      	ldr	r2, [pc, #152]	; (8002ec0 <open_files_proc+0x270>)
 8002e28:	6812      	ldr	r2, [r2, #0]
  sprintf(filename,"%u:%s_%s_%u%s",microsd_storage.active_disk_indx,
 8002e2a:	f107 0010 	add.w	r0, r7, #16
 8002e2e:	4929      	ldr	r1, [pc, #164]	; (8002ed4 <open_files_proc+0x284>)
 8002e30:	9102      	str	r1, [sp, #8]
 8002e32:	9201      	str	r2, [sp, #4]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <open_files_proc+0x278>)
 8002e38:	4622      	mov	r2, r4
 8002e3a:	4924      	ldr	r1, [pc, #144]	; (8002ecc <open_files_proc+0x27c>)
 8002e3c:	f00e f8de 	bl	8010ffc <siprintf>
  if(f_open(&err_file,filename,FA_OPEN_APPEND|FA_WRITE)!=FR_OK){
 8002e40:	f107 0310 	add.w	r3, r7, #16
 8002e44:	2232      	movs	r2, #50	; 0x32
 8002e46:	4619      	mov	r1, r3
 8002e48:	4823      	ldr	r0, [pc, #140]	; (8002ed8 <open_files_proc+0x288>)
 8002e4a:	f008 ffbd 	bl	800bdc8 <f_open>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00d      	beq.n	8002e70 <open_files_proc+0x220>
	  fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_FILE_OPEN_ERR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f240 113d 	movw	r1, #317	; 0x13d
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fd83 	bl	8003968 <fsm_generate_event>
	  osSemaphoreRelease(microsd_storage.microsd_media_sem);
 8002e62:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <open_files_proc+0x26c>)
 8002e64:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f00a fddf 	bl	800da2c <osSemaphoreRelease>
	  return;
 8002e6e:	e01d      	b.n	8002eac <open_files_proc+0x25c>
  }
  if(f_read(&err_file,(uint8_t*)&hydroc_sensor1.errors,sizeof(hydroc_sensor1.errors),(UINT*)&bytesreaded)==FR_OK){
 8002e70:	f107 030c 	add.w	r3, r7, #12
 8002e74:	2210      	movs	r2, #16
 8002e76:	4919      	ldr	r1, [pc, #100]	; (8002edc <open_files_proc+0x28c>)
 8002e78:	4817      	ldr	r0, [pc, #92]	; (8002ed8 <open_files_proc+0x288>)
 8002e7a:	f009 fa66 	bl	800c34a <f_read>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d106      	bne.n	8002e92 <open_files_proc+0x242>
  f_rewind(&err_file);}
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	4812      	ldr	r0, [pc, #72]	; (8002ed8 <open_files_proc+0x288>)
 8002e8e:	f009 fed2 	bl	800cc36 <f_lseek>

  fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_FILES_OPENED);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f240 1139 	movw	r1, #313	; 0x139
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fd64 	bl	8003968 <fsm_generate_event>
 }
 osSemaphoreRelease(microsd_storage.microsd_media_sem);
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <open_files_proc+0x26c>)
 8002ea2:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f00a fdc0 	bl	800da2c <osSemaphoreRelease>
}
 8002eac:	3734      	adds	r7, #52	; 0x34
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd90      	pop	{r4, r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200015f0 	.word	0x200015f0
 8002eb8:	20001a30 	.word	0x20001a30
 8002ebc:	200023dc 	.word	0x200023dc
 8002ec0:	20002a84 	.word	0x20002a84
 8002ec4:	080141a8 	.word	0x080141a8
 8002ec8:	08014110 	.word	0x08014110
 8002ecc:	08014118 	.word	0x08014118
 8002ed0:	20000f90 	.word	0x20000f90
 8002ed4:	08014128 	.word	0x08014128
 8002ed8:	200011e8 	.word	0x200011e8
 8002edc:	200023a1 	.word	0x200023a1

08002ee0 <close_files_proc>:
uint32_t  close_files_events[]={
		                      };
#define   close_files_events_num                                             0

void close_files_proc(proc_arg_t* proc_arg)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 uint32_t byteswritten;

  osSemaphoreWait(microsd_storage.microsd_media_sem, osWaitForever);
 8002ee8:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <close_files_proc+0x60>)
 8002eea:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002eee:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f00a fd4c 	bl	800d990 <osSemaphoreWait>
  f_close(&data_file);
 8002ef8:	4812      	ldr	r0, [pc, #72]	; (8002f44 <close_files_proc+0x64>)
 8002efa:	f009 fe72 	bl	800cbe2 <f_close>
  if(f_write(&err_file,(uint8_t*)&hydroc_sensor1.errors,sizeof(hydroc_sensor1.errors),(UINT*)&byteswritten)==FR_OK){
 8002efe:	f107 030c 	add.w	r3, r7, #12
 8002f02:	2210      	movs	r2, #16
 8002f04:	4910      	ldr	r1, [pc, #64]	; (8002f48 <close_files_proc+0x68>)
 8002f06:	4811      	ldr	r0, [pc, #68]	; (8002f4c <close_files_proc+0x6c>)
 8002f08:	f009 fb99 	bl	800c63e <f_write>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d102      	bne.n	8002f18 <close_files_proc+0x38>
   f_close(&err_file);
 8002f12:	480e      	ldr	r0, [pc, #56]	; (8002f4c <close_files_proc+0x6c>)
 8002f14:	f009 fe65 	bl	800cbe2 <f_close>
  }
  osSemaphoreRelease(microsd_storage.microsd_media_sem);
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <close_files_proc+0x60>)
 8002f1a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f00a fd84 	bl	800da2c <osSemaphoreRelease>
  save_settings();
 8002f24:	f002 f830 	bl	8004f88 <save_settings>
  fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_FILES_CLOSED);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 fd19 	bl	8003968 <fsm_generate_event>

}
 8002f36:	bf00      	nop
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	200023dc 	.word	0x200023dc
 8002f44:	20000f90 	.word	0x20000f90
 8002f48:	200023a1 	.word	0x200023a1
 8002f4c:	200011e8 	.word	0x200011e8

08002f50 <sensor_post_config_proc>:
		                               HYDROC_EVNT_CFG_EXITED
		                      };
#define   sensor_post_config_events_num                                             2

void sensor_post_config_proc(proc_arg_t* proc_arg)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 uint32_t in_event;

 if(hydroc_sensor1.model_specific->type_id==HYDROC_TYPE_CO2){
 8002f58:	4b4a      	ldr	r3, [pc, #296]	; (8003084 <sensor_post_config_proc+0x134>)
 8002f5a:	f8d3 39a4 	ldr.w	r3, [r3, #2468]	; 0x9a4
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d145      	bne.n	8002ff0 <sensor_post_config_proc+0xa0>
  if(glider1.dive_status==glider1.param_y){
 8002f64:	4b48      	ldr	r3, [pc, #288]	; (8003088 <sensor_post_config_proc+0x138>)
 8002f66:	7cdb      	ldrb	r3, [r3, #19]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b47      	ldr	r3, [pc, #284]	; (8003088 <sensor_post_config_proc+0x138>)
 8002f6c:	f8d3 3435 	ldr.w	r3, [r3, #1077]	; 0x435
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d17c      	bne.n	800306e <sensor_post_config_proc+0x11e>
	  hydroc_send_cmd(&hydroc_sensor1, HYDROC_CMD_ENTER_CFG, NULL);
 8002f74:	2200      	movs	r2, #0
 8002f76:	2100      	movs	r1, #0
 8002f78:	4842      	ldr	r0, [pc, #264]	; (8003084 <sensor_post_config_proc+0x134>)
 8002f7a:	f7fe f9f1 	bl	8001360 <hydroc_send_cmd>
	  F_RES res=fsm_take_event(proc_arg->inQ_handle,&in_event, HYDROC_CMD_TIMEOUT);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f107 0108 	add.w	r1, r7, #8
 8002f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fcfb 	bl	8003986 <fsm_take_event>
 8002f90:	4603      	mov	r3, r0
 8002f92:	73bb      	strb	r3, [r7, #14]
	  if(res==F_OK){
 8002f94:	7bbb      	ldrb	r3, [r7, #14]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d169      	bne.n	800306e <sensor_post_config_proc+0x11e>
		if(in_event==HYDROC_EVNT_CFG_ENTERED){
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002fa0:	d165      	bne.n	800306e <sensor_post_config_proc+0x11e>
		  hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_SET_ZERO_MODE,NULL);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2106      	movs	r1, #6
 8002fa6:	4837      	ldr	r0, [pc, #220]	; (8003084 <sensor_post_config_proc+0x134>)
 8002fa8:	f7fe f9da 	bl	8001360 <hydroc_send_cmd>
		  osDelay(100);
 8002fac:	2064      	movs	r0, #100	; 0x64
 8002fae:	f00a fca8 	bl	800d902 <osDelay>
		  if(glider1.stop_pump_flag==SEAGLIDER_STOP_PUMP_FLAG_ACTIVATED){
 8002fb2:	4b35      	ldr	r3, [pc, #212]	; (8003088 <sensor_post_config_proc+0x138>)
 8002fb4:	7d1b      	ldrb	r3, [r3, #20]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d104      	bne.n	8002fc4 <sensor_post_config_proc+0x74>
			  hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_DISABLE_PUMP,NULL);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2104      	movs	r1, #4
 8002fbe:	4831      	ldr	r0, [pc, #196]	; (8003084 <sensor_post_config_proc+0x134>)
 8002fc0:	f7fe f9ce 	bl	8001360 <hydroc_send_cmd>
		  }
		  osDelay(100);
 8002fc4:	2064      	movs	r0, #100	; 0x64
 8002fc6:	f00a fc9c 	bl	800d902 <osDelay>
		  hydroc_send_cmd(&hydroc_sensor1, HYDROC_CMD_EXIT_CFG, NULL);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2101      	movs	r1, #1
 8002fce:	482d      	ldr	r0, [pc, #180]	; (8003084 <sensor_post_config_proc+0x134>)
 8002fd0:	f7fe f9c6 	bl	8001360 <hydroc_send_cmd>
		  res=fsm_take_event(proc_arg->inQ_handle,&in_event, HYDROC_CMD_TIMEOUT);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f107 0108 	add.w	r1, r7, #8
 8002fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fcd0 	bl	8003986 <fsm_take_event>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	73bb      	strb	r3, [r7, #14]
		  if(res==F_OK){
 8002fea:	7bbb      	ldrb	r3, [r7, #14]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	e03e      	b.n	800306e <sensor_post_config_proc+0x11e>
		  }
		}
	  }
  }
 }
 else if(hydroc_sensor1.model_specific->type_id==HYDROC_TYPE_CH4){
 8002ff0:	4b24      	ldr	r3, [pc, #144]	; (8003084 <sensor_post_config_proc+0x134>)
 8002ff2:	f8d3 39a4 	ldr.w	r3, [r3, #2468]	; 0x9a4
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d138      	bne.n	800306e <sensor_post_config_proc+0x11e>
  if(glider1.dive_status==SEAGLIDER_STATUS_CLIMB&&glider1.stop_pump_flag==SEAGLIDER_STOP_PUMP_FLAG_ACTIVATED){
 8002ffc:	4b22      	ldr	r3, [pc, #136]	; (8003088 <sensor_post_config_proc+0x138>)
 8002ffe:	7cdb      	ldrb	r3, [r3, #19]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d134      	bne.n	800306e <sensor_post_config_proc+0x11e>
 8003004:	4b20      	ldr	r3, [pc, #128]	; (8003088 <sensor_post_config_proc+0x138>)
 8003006:	7d1b      	ldrb	r3, [r3, #20]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d130      	bne.n	800306e <sensor_post_config_proc+0x11e>
	  hydroc_send_cmd(&hydroc_sensor1, HYDROC_CMD_ENTER_CFG, NULL);
 800300c:	2200      	movs	r2, #0
 800300e:	2100      	movs	r1, #0
 8003010:	481c      	ldr	r0, [pc, #112]	; (8003084 <sensor_post_config_proc+0x134>)
 8003012:	f7fe f9a5 	bl	8001360 <hydroc_send_cmd>
	  F_RES res=fsm_take_event(proc_arg->inQ_handle,&in_event, HYDROC_CMD_TIMEOUT);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f107 0108 	add.w	r1, r7, #8
 800301e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fcaf 	bl	8003986 <fsm_take_event>
 8003028:	4603      	mov	r3, r0
 800302a:	73fb      	strb	r3, [r7, #15]
	  if(res==F_OK){
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d11d      	bne.n	800306e <sensor_post_config_proc+0x11e>
		if(in_event==HYDROC_EVNT_CFG_ENTERED){
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8003038:	d119      	bne.n	800306e <sensor_post_config_proc+0x11e>
		  hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_DISABLE_PUMP,NULL);
 800303a:	2200      	movs	r2, #0
 800303c:	2104      	movs	r1, #4
 800303e:	4811      	ldr	r0, [pc, #68]	; (8003084 <sensor_post_config_proc+0x134>)
 8003040:	f7fe f98e 	bl	8001360 <hydroc_send_cmd>
		  osDelay(100);
 8003044:	2064      	movs	r0, #100	; 0x64
 8003046:	f00a fc5c 	bl	800d902 <osDelay>
		  hydroc_send_cmd(&hydroc_sensor1, HYDROC_CMD_EXIT_CFG, NULL);
 800304a:	2200      	movs	r2, #0
 800304c:	2101      	movs	r1, #1
 800304e:	480d      	ldr	r0, [pc, #52]	; (8003084 <sensor_post_config_proc+0x134>)
 8003050:	f7fe f986 	bl	8001360 <hydroc_send_cmd>
		  res=fsm_take_event(proc_arg->inQ_handle,&in_event, HYDROC_CMD_TIMEOUT);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f107 0108 	add.w	r1, r7, #8
 800305c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fc90 	bl	8003986 <fsm_take_event>
 8003066:	4603      	mov	r3, r0
 8003068:	73fb      	strb	r3, [r7, #15]
		  if(res==F_OK){
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	2b00      	cmp	r3, #0
	  }
  }

 }

 fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_POST_CONF_FINISHED);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f240 113b 	movw	r1, #315	; 0x13b
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fc76 	bl	8003968 <fsm_generate_event>
}
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20001a30 	.word	0x20001a30
 8003088:	200015f0 	.word	0x200015f0

0800308c <sensor_pre_config_proc>:
		                              HYDROC_EVNT_CFG_EXITED
		                      };
#define   sensor_pre_config_events_num                                             2

void sensor_pre_config_proc(proc_arg_t* proc_arg)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t in_event;

  hydroc_send_cmd(&hydroc_sensor1, HYDROC_CMD_ENTER_CFG, NULL);
 8003094:	2200      	movs	r2, #0
 8003096:	2100      	movs	r1, #0
 8003098:	481f      	ldr	r0, [pc, #124]	; (8003118 <sensor_pre_config_proc+0x8c>)
 800309a:	f7fe f961 	bl	8001360 <hydroc_send_cmd>
  F_RES res=fsm_take_event(proc_arg->inQ_handle,&in_event, HYDROC_CMD_TIMEOUT);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f107 0108 	add.w	r1, r7, #8
 80030a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fc6b 	bl	8003986 <fsm_take_event>
 80030b0:	4603      	mov	r3, r0
 80030b2:	73fb      	strb	r3, [r7, #15]
  if(res==F_OK){
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d12a      	bne.n	8003110 <sensor_pre_config_proc+0x84>
	if(in_event==HYDROC_EVNT_CFG_ENTERED){
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 80030c0:	d126      	bne.n	8003110 <sensor_pre_config_proc+0x84>
	  hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_ENABLE_PUMP,NULL);
 80030c2:	2200      	movs	r2, #0
 80030c4:	2103      	movs	r1, #3
 80030c6:	4814      	ldr	r0, [pc, #80]	; (8003118 <sensor_pre_config_proc+0x8c>)
 80030c8:	f7fe f94a 	bl	8001360 <hydroc_send_cmd>
	  osDelay(100);
 80030cc:	2064      	movs	r0, #100	; 0x64
 80030ce:	f00a fc18 	bl	800d902 <osDelay>
	  hydroc_send_cmd(&hydroc_sensor1, HYDROC_CMD_EXIT_CFG, NULL);
 80030d2:	2200      	movs	r2, #0
 80030d4:	2101      	movs	r1, #1
 80030d6:	4810      	ldr	r0, [pc, #64]	; (8003118 <sensor_pre_config_proc+0x8c>)
 80030d8:	f7fe f942 	bl	8001360 <hydroc_send_cmd>
	  res=fsm_take_event(proc_arg->inQ_handle,&in_event, HYDROC_CMD_TIMEOUT);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f107 0108 	add.w	r1, r7, #8
 80030e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fc4c 	bl	8003986 <fsm_take_event>
 80030ee:	4603      	mov	r3, r0
 80030f0:	73fb      	strb	r3, [r7, #15]
	  if(res==F_OK){
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10b      	bne.n	8003110 <sensor_pre_config_proc+0x84>
		 if(in_event==HYDROC_EVNT_CFG_EXITED){
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f240 226d 	movw	r2, #621	; 0x26d
 80030fe:	4293      	cmp	r3, r2
 8003100:	d106      	bne.n	8003110 <sensor_pre_config_proc+0x84>
			fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_PRE_CONF_FINISHED);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fc2c 	bl	8003968 <fsm_generate_event>
		 }
	  }
	}
  }
}
 8003110:	bf00      	nop
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20001a30 	.word	0x20001a30

0800311c <hydroc_data_processor_proc>:
		                                  FSM_EVNT_TS1_DATA_READY
		                                 };
#define   hydroc_data_processor_events_num                                             2

void hydroc_data_processor_proc(proc_arg_t* proc_arg)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b090      	sub	sp, #64	; 0x40
 8003120:	af08      	add	r7, sp, #32
 8003122:	6078      	str	r0, [r7, #4]
 uint32_t in_event;

 for(;;){
   if(fsm_take_event(proc_arg->inQ_handle,&in_event, osWaitForever)==F_OK){
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f107 010c 	add.w	r1, r7, #12
 800312c:	f04f 32ff 	mov.w	r2, #4294967295
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fc28 	bl	8003986 <fsm_take_event>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	f040 810c 	bne.w	8003356 <hydroc_data_processor_proc+0x23a>
    		switch(in_event){
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8003144:	d005      	beq.n	8003152 <hydroc_data_processor_proc+0x36>
 8003146:	f240 1235 	movw	r2, #309	; 0x135
 800314a:	4293      	cmp	r3, r2
 800314c:	f000 80a6 	beq.w	800329c <hydroc_data_processor_proc+0x180>
 8003150:	e102      	b.n	8003358 <hydroc_data_processor_proc+0x23c>
    		 case FSM_EVNT_DS4_DATA_READY:
    			log_ds4_msg[0]=0x00;
 8003152:	4b82      	ldr	r3, [pc, #520]	; (800335c <hydroc_data_processor_proc+0x240>)
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
			    switch(hydroc_sensor1.data_profile_id){
 8003158:	4b81      	ldr	r3, [pc, #516]	; (8003360 <hydroc_data_processor_proc+0x244>)
 800315a:	f8d3 3981 	ldr.w	r3, [r3, #2433]	; 0x981
 800315e:	2b03      	cmp	r3, #3
 8003160:	d86c      	bhi.n	800323c <hydroc_data_processor_proc+0x120>
 8003162:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <hydroc_data_processor_proc+0x4c>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	0800323d 	.word	0x0800323d
 800316c:	08003179 	.word	0x08003179
 8003170:	0800318b 	.word	0x0800318b
 8003174:	080031cf 	.word	0x080031cf
				  case HYDROC_PROFILE_0:

				  break;
				  case HYDROC_PROFILE_1:
				   sprintf(log_ds4_msg,"DS4:%s,%s,%s\r"
 8003178:	4b7a      	ldr	r3, [pc, #488]	; (8003364 <hydroc_data_processor_proc+0x248>)
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	4b7a      	ldr	r3, [pc, #488]	; (8003368 <hydroc_data_processor_proc+0x24c>)
 800317e:	4a7b      	ldr	r2, [pc, #492]	; (800336c <hydroc_data_processor_proc+0x250>)
 8003180:	497b      	ldr	r1, [pc, #492]	; (8003370 <hydroc_data_processor_proc+0x254>)
 8003182:	4876      	ldr	r0, [pc, #472]	; (800335c <hydroc_data_processor_proc+0x240>)
 8003184:	f00d ff3a 	bl	8010ffc <siprintf>
						 ,hydroc_sensor1.ds4.pGas_corr
						 ,hydroc_sensor1.ds4.P_IN
						 ,hydroc_sensor1.ds4.runtime);
				  break;
 8003188:	e058      	b.n	800323c <hydroc_data_processor_proc+0x120>
				  case HYDROC_PROFILE_2:
					  if(hydroc_sensor1.model_specific->type_id==HYDROC_TYPE_CO2){
 800318a:	4b75      	ldr	r3, [pc, #468]	; (8003360 <hydroc_data_processor_proc+0x244>)
 800318c:	f8d3 39a4 	ldr.w	r3, [r3, #2468]	; 0x9a4
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d10c      	bne.n	80031b0 <hydroc_data_processor_proc+0x94>
						   sprintf(log_ds4_msg,"DS4:%s,%s,%s,%s,%s\r"
 8003196:	4b77      	ldr	r3, [pc, #476]	; (8003374 <hydroc_data_processor_proc+0x258>)
 8003198:	9302      	str	r3, [sp, #8]
 800319a:	4b77      	ldr	r3, [pc, #476]	; (8003378 <hydroc_data_processor_proc+0x25c>)
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	4b71      	ldr	r3, [pc, #452]	; (8003364 <hydroc_data_processor_proc+0x248>)
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	4b71      	ldr	r3, [pc, #452]	; (8003368 <hydroc_data_processor_proc+0x24c>)
 80031a4:	4a71      	ldr	r2, [pc, #452]	; (800336c <hydroc_data_processor_proc+0x250>)
 80031a6:	4975      	ldr	r1, [pc, #468]	; (800337c <hydroc_data_processor_proc+0x260>)
 80031a8:	486c      	ldr	r0, [pc, #432]	; (800335c <hydroc_data_processor_proc+0x240>)
 80031aa:	f00d ff27 	bl	8010ffc <siprintf>
						   sprintf(log_ds4_msg,"DS4:%s,%s,%s\r"
								 ,hydroc_sensor1.ds4.pGas_corr
								 ,hydroc_sensor1.ds4.P_IN
								 ,hydroc_sensor1.ds4.runtime);
					  }
				  break;
 80031ae:	e042      	b.n	8003236 <hydroc_data_processor_proc+0x11a>
					  else if(hydroc_sensor1.model_specific->type_id==HYDROC_TYPE_CH4){
 80031b0:	4b6b      	ldr	r3, [pc, #428]	; (8003360 <hydroc_data_processor_proc+0x244>)
 80031b2:	f8d3 39a4 	ldr.w	r3, [r3, #2468]	; 0x9a4
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d13c      	bne.n	8003236 <hydroc_data_processor_proc+0x11a>
						   sprintf(log_ds4_msg,"DS4:%s,%s,%s\r"
 80031bc:	4b69      	ldr	r3, [pc, #420]	; (8003364 <hydroc_data_processor_proc+0x248>)
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	4b69      	ldr	r3, [pc, #420]	; (8003368 <hydroc_data_processor_proc+0x24c>)
 80031c2:	4a6a      	ldr	r2, [pc, #424]	; (800336c <hydroc_data_processor_proc+0x250>)
 80031c4:	496a      	ldr	r1, [pc, #424]	; (8003370 <hydroc_data_processor_proc+0x254>)
 80031c6:	4865      	ldr	r0, [pc, #404]	; (800335c <hydroc_data_processor_proc+0x240>)
 80031c8:	f00d ff18 	bl	8010ffc <siprintf>
				  break;
 80031cc:	e033      	b.n	8003236 <hydroc_data_processor_proc+0x11a>
				  case HYDROC_PROFILE_3:
					  if(hydroc_sensor1.model_specific->type_id==HYDROC_TYPE_CO2){
 80031ce:	4b64      	ldr	r3, [pc, #400]	; (8003360 <hydroc_data_processor_proc+0x244>)
 80031d0:	f8d3 39a4 	ldr.w	r3, [r3, #2468]	; 0x9a4
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d114      	bne.n	8003204 <hydroc_data_processor_proc+0xe8>
						   sprintf(log_ds4_msg,"DS4:%s,%s,%s,%s,%s,%s,%s,%s,%s\r"
 80031da:	4b66      	ldr	r3, [pc, #408]	; (8003374 <hydroc_data_processor_proc+0x258>)
 80031dc:	9306      	str	r3, [sp, #24]
 80031de:	4b66      	ldr	r3, [pc, #408]	; (8003378 <hydroc_data_processor_proc+0x25c>)
 80031e0:	9305      	str	r3, [sp, #20]
 80031e2:	4b67      	ldr	r3, [pc, #412]	; (8003380 <hydroc_data_processor_proc+0x264>)
 80031e4:	9304      	str	r3, [sp, #16]
 80031e6:	4b67      	ldr	r3, [pc, #412]	; (8003384 <hydroc_data_processor_proc+0x268>)
 80031e8:	9303      	str	r3, [sp, #12]
 80031ea:	4b5e      	ldr	r3, [pc, #376]	; (8003364 <hydroc_data_processor_proc+0x248>)
 80031ec:	9302      	str	r3, [sp, #8]
 80031ee:	4b66      	ldr	r3, [pc, #408]	; (8003388 <hydroc_data_processor_proc+0x26c>)
 80031f0:	9301      	str	r3, [sp, #4]
 80031f2:	4b66      	ldr	r3, [pc, #408]	; (800338c <hydroc_data_processor_proc+0x270>)
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	4b5d      	ldr	r3, [pc, #372]	; (800336c <hydroc_data_processor_proc+0x250>)
 80031f8:	4a5b      	ldr	r2, [pc, #364]	; (8003368 <hydroc_data_processor_proc+0x24c>)
 80031fa:	4965      	ldr	r1, [pc, #404]	; (8003390 <hydroc_data_processor_proc+0x274>)
 80031fc:	4857      	ldr	r0, [pc, #348]	; (800335c <hydroc_data_processor_proc+0x240>)
 80031fe:	f00d fefd 	bl	8010ffc <siprintf>
								 ,hydroc_sensor1.ds4.xGas_corr
								 ,hydroc_sensor1.ds4.runtime
								 ,hydroc_sensor1.ds4.date
								 ,hydroc_sensor1.ds4.time);
					  }
				  break;
 8003202:	e01a      	b.n	800323a <hydroc_data_processor_proc+0x11e>
					  else if(hydroc_sensor1.model_specific->type_id==HYDROC_TYPE_CH4){
 8003204:	4b56      	ldr	r3, [pc, #344]	; (8003360 <hydroc_data_processor_proc+0x244>)
 8003206:	f8d3 39a4 	ldr.w	r3, [r3, #2468]	; 0x9a4
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d114      	bne.n	800323a <hydroc_data_processor_proc+0x11e>
						   sprintf(log_ds4_msg,"DS4:%s,%s,%s,%s,%s,%s,%s,%s\r"
 8003210:	4b5b      	ldr	r3, [pc, #364]	; (8003380 <hydroc_data_processor_proc+0x264>)
 8003212:	9305      	str	r3, [sp, #20]
 8003214:	4b5b      	ldr	r3, [pc, #364]	; (8003384 <hydroc_data_processor_proc+0x268>)
 8003216:	9304      	str	r3, [sp, #16]
 8003218:	4b52      	ldr	r3, [pc, #328]	; (8003364 <hydroc_data_processor_proc+0x248>)
 800321a:	9303      	str	r3, [sp, #12]
 800321c:	4b5a      	ldr	r3, [pc, #360]	; (8003388 <hydroc_data_processor_proc+0x26c>)
 800321e:	9302      	str	r3, [sp, #8]
 8003220:	4b5a      	ldr	r3, [pc, #360]	; (800338c <hydroc_data_processor_proc+0x270>)
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	4b51      	ldr	r3, [pc, #324]	; (800336c <hydroc_data_processor_proc+0x250>)
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	4b4f      	ldr	r3, [pc, #316]	; (8003368 <hydroc_data_processor_proc+0x24c>)
 800322a:	4a5a      	ldr	r2, [pc, #360]	; (8003394 <hydroc_data_processor_proc+0x278>)
 800322c:	495a      	ldr	r1, [pc, #360]	; (8003398 <hydroc_data_processor_proc+0x27c>)
 800322e:	484b      	ldr	r0, [pc, #300]	; (800335c <hydroc_data_processor_proc+0x240>)
 8003230:	f00d fee4 	bl	8010ffc <siprintf>
				  break;
 8003234:	e001      	b.n	800323a <hydroc_data_processor_proc+0x11e>
				  break;
 8003236:	bf00      	nop
 8003238:	e000      	b.n	800323c <hydroc_data_processor_proc+0x120>
				  break;
 800323a:	bf00      	nop
			    };
	        	uint32_t P_IN=strtol(hydroc_sensor1.ds4.P_IN,NULL,10);
 800323c:	220a      	movs	r2, #10
 800323e:	2100      	movs	r1, #0
 8003240:	4849      	ldr	r0, [pc, #292]	; (8003368 <hydroc_data_processor_proc+0x24c>)
 8003242:	f00e fe9f 	bl	8011f84 <strtol>
 8003246:	4603      	mov	r3, r0
 8003248:	617b      	str	r3, [r7, #20]
	        	uint32_t pump_pwr=strtol(hydroc_sensor1.ds4.pump_pwr,NULL,10);
 800324a:	220a      	movs	r2, #10
 800324c:	2100      	movs	r1, #0
 800324e:	4853      	ldr	r0, [pc, #332]	; (800339c <hydroc_data_processor_proc+0x280>)
 8003250:	f00e fe98 	bl	8011f84 <strtol>
 8003254:	4603      	mov	r3, r0
 8003256:	613b      	str	r3, [r7, #16]

	        	if(P_IN>110000) hydroc_sensor1.errors.P_in++;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	4a51      	ldr	r2, [pc, #324]	; (80033a0 <hydroc_data_processor_proc+0x284>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d906      	bls.n	800326e <hydroc_data_processor_proc+0x152>
 8003260:	4b3f      	ldr	r3, [pc, #252]	; (8003360 <hydroc_data_processor_proc+0x244>)
 8003262:	f8d3 3971 	ldr.w	r3, [r3, #2417]	; 0x971
 8003266:	3301      	adds	r3, #1
 8003268:	4a3d      	ldr	r2, [pc, #244]	; (8003360 <hydroc_data_processor_proc+0x244>)
 800326a:	f8c2 3971 	str.w	r3, [r2, #2417]	; 0x971
	       		if(pump_pwr>1600 || pump_pwr<300)hydroc_sensor1.errors.P_pump++;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003274:	d803      	bhi.n	800327e <hydroc_data_processor_proc+0x162>
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800327c:	d206      	bcs.n	800328c <hydroc_data_processor_proc+0x170>
 800327e:	4b38      	ldr	r3, [pc, #224]	; (8003360 <hydroc_data_processor_proc+0x244>)
 8003280:	f8d3 397d 	ldr.w	r3, [r3, #2429]	; 0x97d
 8003284:	3301      	adds	r3, #1
 8003286:	4a36      	ldr	r2, [pc, #216]	; (8003360 <hydroc_data_processor_proc+0x244>)
 8003288:	f8c2 397d 	str.w	r3, [r2, #2429]	; 0x97d
	       		fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_DS4_PROCESSED);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f44f 719b 	mov.w	r1, #310	; 0x136
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fb67 	bl	8003968 <fsm_generate_event>
    		 break;
 800329a:	e05d      	b.n	8003358 <hydroc_data_processor_proc+0x23c>
    		 case FSM_EVNT_TS1_DATA_READY:
    			 log_ts1_msg[0]=0x00;
 800329c:	4b41      	ldr	r3, [pc, #260]	; (80033a4 <hydroc_data_processor_proc+0x288>)
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]
	             switch(hydroc_sensor1.data_profile_id){
 80032a2:	4b2f      	ldr	r3, [pc, #188]	; (8003360 <hydroc_data_processor_proc+0x244>)
 80032a4:	f8d3 3981 	ldr.w	r3, [r3, #2433]	; 0x981
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d822      	bhi.n	80032f2 <hydroc_data_processor_proc+0x1d6>
 80032ac:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <hydroc_data_processor_proc+0x198>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	080032f3 	.word	0x080032f3
 80032b8:	080032c5 	.word	0x080032c5
 80032bc:	080032d3 	.word	0x080032d3
 80032c0:	080032e1 	.word	0x080032e1
	              case HYDROC_PROFILE_0:

                 break;
	              case HYDROC_PROFILE_1:
                  sprintf(log_ts1_msg,"TS1:%s,%s\r"
 80032c4:	4b38      	ldr	r3, [pc, #224]	; (80033a8 <hydroc_data_processor_proc+0x28c>)
 80032c6:	4a39      	ldr	r2, [pc, #228]	; (80033ac <hydroc_data_processor_proc+0x290>)
 80032c8:	4939      	ldr	r1, [pc, #228]	; (80033b0 <hydroc_data_processor_proc+0x294>)
 80032ca:	4836      	ldr	r0, [pc, #216]	; (80033a4 <hydroc_data_processor_proc+0x288>)
 80032cc:	f00d fe96 	bl	8010ffc <siprintf>
					 ,hydroc_sensor1.ts1.T_gas
					 ,hydroc_sensor1.ts1.rH_gas
                      );
                 break;
 80032d0:	e00f      	b.n	80032f2 <hydroc_data_processor_proc+0x1d6>
	              case HYDROC_PROFILE_2:
                  sprintf(log_ts1_msg,"TS1:%s,%s\r"
 80032d2:	4b35      	ldr	r3, [pc, #212]	; (80033a8 <hydroc_data_processor_proc+0x28c>)
 80032d4:	4a35      	ldr	r2, [pc, #212]	; (80033ac <hydroc_data_processor_proc+0x290>)
 80032d6:	4936      	ldr	r1, [pc, #216]	; (80033b0 <hydroc_data_processor_proc+0x294>)
 80032d8:	4832      	ldr	r0, [pc, #200]	; (80033a4 <hydroc_data_processor_proc+0x288>)
 80032da:	f00d fe8f 	bl	8010ffc <siprintf>
					 ,hydroc_sensor1.ts1.T_gas
					 ,hydroc_sensor1.ts1.rH_gas
                      );
                 break;
 80032de:	e008      	b.n	80032f2 <hydroc_data_processor_proc+0x1d6>
	              case HYDROC_PROFILE_3:
                  sprintf(log_ts1_msg,"TS1:%s,%s,%s\r"
 80032e0:	4b34      	ldr	r3, [pc, #208]	; (80033b4 <hydroc_data_processor_proc+0x298>)
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	4b31      	ldr	r3, [pc, #196]	; (80033ac <hydroc_data_processor_proc+0x290>)
 80032e6:	4a30      	ldr	r2, [pc, #192]	; (80033a8 <hydroc_data_processor_proc+0x28c>)
 80032e8:	4933      	ldr	r1, [pc, #204]	; (80033b8 <hydroc_data_processor_proc+0x29c>)
 80032ea:	482e      	ldr	r0, [pc, #184]	; (80033a4 <hydroc_data_processor_proc+0x288>)
 80032ec:	f00d fe86 	bl	8010ffc <siprintf>
					 ,hydroc_sensor1.ts1.rH_gas
					 ,hydroc_sensor1.ts1.T_gas
					 ,hydroc_sensor1.ts1.T_control
                     );
                 break;
 80032f0:	bf00      	nop
	             };
	        	 uint32_t rH_gas=strtol(hydroc_sensor1.ts1.rH_gas,NULL,10);
 80032f2:	220a      	movs	r2, #10
 80032f4:	2100      	movs	r1, #0
 80032f6:	482c      	ldr	r0, [pc, #176]	; (80033a8 <hydroc_data_processor_proc+0x28c>)
 80032f8:	f00e fe44 	bl	8011f84 <strtol>
 80032fc:	4603      	mov	r3, r0
 80032fe:	61fb      	str	r3, [r7, #28]
	        	 uint32_t T_control=strtol(hydroc_sensor1.ts1.T_control,NULL,10);
 8003300:	220a      	movs	r2, #10
 8003302:	2100      	movs	r1, #0
 8003304:	482b      	ldr	r0, [pc, #172]	; (80033b4 <hydroc_data_processor_proc+0x298>)
 8003306:	f00e fe3d 	bl	8011f84 <strtol>
 800330a:	4603      	mov	r3, r0
 800330c:	61bb      	str	r3, [r7, #24]

	        	 if(rH_gas>85000) hydroc_sensor1.errors.rH_gas++;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	4a2a      	ldr	r2, [pc, #168]	; (80033bc <hydroc_data_processor_proc+0x2a0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d906      	bls.n	8003324 <hydroc_data_processor_proc+0x208>
 8003316:	4b12      	ldr	r3, [pc, #72]	; (8003360 <hydroc_data_processor_proc+0x244>)
 8003318:	f8d3 3975 	ldr.w	r3, [r3, #2421]	; 0x975
 800331c:	3301      	adds	r3, #1
 800331e:	4a10      	ldr	r2, [pc, #64]	; (8003360 <hydroc_data_processor_proc+0x244>)
 8003320:	f8c2 3975 	str.w	r3, [r2, #2421]	; 0x975
	       		 if(T_control>28500 || T_control<27500)hydroc_sensor1.errors.T_control++;
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	f646 7254 	movw	r2, #28500	; 0x6f54
 800332a:	4293      	cmp	r3, r2
 800332c:	d804      	bhi.n	8003338 <hydroc_data_processor_proc+0x21c>
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	f646 326b 	movw	r2, #27499	; 0x6b6b
 8003334:	4293      	cmp	r3, r2
 8003336:	d806      	bhi.n	8003346 <hydroc_data_processor_proc+0x22a>
 8003338:	4b09      	ldr	r3, [pc, #36]	; (8003360 <hydroc_data_processor_proc+0x244>)
 800333a:	f8d3 3979 	ldr.w	r3, [r3, #2425]	; 0x979
 800333e:	3301      	adds	r3, #1
 8003340:	4a07      	ldr	r2, [pc, #28]	; (8003360 <hydroc_data_processor_proc+0x244>)
 8003342:	f8c2 3979 	str.w	r3, [r2, #2425]	; 0x979
	       		 fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_TS1_PROCESSED);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f240 1137 	movw	r1, #311	; 0x137
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fb0a 	bl	8003968 <fsm_generate_event>
    		 break;
 8003354:	e000      	b.n	8003358 <hydroc_data_processor_proc+0x23c>
    		};
 8003356:	bf00      	nop
   if(fsm_take_event(proc_arg->inQ_handle,&in_event, osWaitForever)==F_OK){
 8003358:	e6e4      	b.n	8003124 <hydroc_data_processor_proc+0x8>
 800335a:	bf00      	nop
 800335c:	20000b8c 	.word	0x20000b8c
 8003360:	20001a30 	.word	0x20001a30
 8003364:	200022cf 	.word	0x200022cf
 8003368:	20002293 	.word	0x20002293
 800336c:	20002329 	.word	0x20002329
 8003370:	080141c0 	.word	0x080141c0
 8003374:	200022ed 	.word	0x200022ed
 8003378:	200022de 	.word	0x200022de
 800337c:	080141d0 	.word	0x080141d0
 8003380:	20002257 	.word	0x20002257
 8003384:	20002248 	.word	0x20002248
 8003388:	20002338 	.word	0x20002338
 800338c:	200022fc 	.word	0x200022fc
 8003390:	080141e4 	.word	0x080141e4
 8003394:	20002284 	.word	0x20002284
 8003398:	08014204 	.word	0x08014204
 800339c:	20002275 	.word	0x20002275
 80033a0:	0001adb0 	.word	0x0001adb0
 80033a4:	20000d8c 	.word	0x20000d8c
 80033a8:	20002392 	.word	0x20002392
 80033ac:	20002383 	.word	0x20002383
 80033b0:	08014224 	.word	0x08014224
 80033b4:	20002374 	.word	0x20002374
 80033b8:	08014230 	.word	0x08014230
 80033bc:	00014c08 	.word	0x00014c08

080033c0 <read_sensor_type_proc>:
									 HYDROC_EVNT_CFG_EXITED
                                    };
#define   read_sensor_type_events_num                     3

void read_sensor_type_proc(proc_arg_t* proc_arg)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  hydroc* hydroc_obj=proc_arg->func_self_object;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	617b      	str	r3, [r7, #20]
  uint32_t in_event;
  hydroc_send_cmd(hydroc_obj, HYDROC_CMD_ENTER_CFG, NULL);
 80033ce:	2200      	movs	r2, #0
 80033d0:	2100      	movs	r1, #0
 80033d2:	6978      	ldr	r0, [r7, #20]
 80033d4:	f7fd ffc4 	bl	8001360 <hydroc_send_cmd>
  F_RES res=fsm_take_event(proc_arg->inQ_handle,&in_event, HYDROC_CMD_TIMEOUT);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f107 010c 	add.w	r1, r7, #12
 80033e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 face 	bl	8003986 <fsm_take_event>
 80033ea:	4603      	mov	r3, r0
 80033ec:	74fb      	strb	r3, [r7, #19]
  if(res==F_OK){
 80033ee:	7cfb      	ldrb	r3, [r7, #19]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d156      	bne.n	80034a2 <read_sensor_type_proc+0xe2>
	if(in_event==HYDROC_EVNT_CFG_ENTERED){
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 80033fa:	d14b      	bne.n	8003494 <read_sensor_type_proc+0xd4>
	  hydroc_send_cmd(hydroc_obj, HYDROC_CMD_READ_INVENTORY, NULL);
 80033fc:	2200      	movs	r2, #0
 80033fe:	210a      	movs	r1, #10
 8003400:	6978      	ldr	r0, [r7, #20]
 8003402:	f7fd ffad 	bl	8001360 <hydroc_send_cmd>
	  res=fsm_take_event(proc_arg->inQ_handle,&in_event, HYDROC_CMD_TIMEOUT);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f107 010c 	add.w	r1, r7, #12
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fab7 	bl	8003986 <fsm_take_event>
 8003418:	4603      	mov	r3, r0
 800341a:	74fb      	strb	r3, [r7, #19]
	  if(res==F_OK){
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d131      	bne.n	8003486 <read_sensor_type_proc+0xc6>
		if(in_event==HYDROC_EVNT_INVENTORY_UPDATED){
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f240 226b 	movw	r2, #619	; 0x26b
 8003428:	4293      	cmp	r3, r2
 800342a:	d125      	bne.n	8003478 <read_sensor_type_proc+0xb8>
		   hydroc_send_cmd(hydroc_obj, HYDROC_CMD_EXIT_CFG, NULL);
 800342c:	2200      	movs	r2, #0
 800342e:	2101      	movs	r1, #1
 8003430:	6978      	ldr	r0, [r7, #20]
 8003432:	f7fd ff95 	bl	8001360 <hydroc_send_cmd>
		   res=fsm_take_event(proc_arg->inQ_handle,&in_event, HYDROC_CMD_TIMEOUT);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f107 010c 	add.w	r1, r7, #12
 800343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fa9f 	bl	8003986 <fsm_take_event>
 8003448:	4603      	mov	r3, r0
 800344a:	74fb      	strb	r3, [r7, #19]
		   if(res==F_OK){
 800344c:	7cfb      	ldrb	r3, [r7, #19]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <read_sensor_type_proc+0xaa>
			 if(in_event==HYDROC_EVNT_CFG_EXITED){
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f240 226d 	movw	r2, #621	; 0x26d
 8003458:	4293      	cmp	r3, r2
 800345a:	d106      	bne.n	800346a <read_sensor_type_proc+0xaa>
					fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_SENSOR_INITIALIZED);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fa7f 	bl	8003968 <fsm_generate_event>
			 }
		   }
		   fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_SENSOR_INIT_ERROR);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f240 112f 	movw	r1, #303	; 0x12f
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fa78 	bl	8003968 <fsm_generate_event>
		}
		fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_SENSOR_INIT_ERROR);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f240 112f 	movw	r1, #303	; 0x12f
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fa71 	bl	8003968 <fsm_generate_event>
	  }
	  fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_SENSOR_INIT_ERROR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f240 112f 	movw	r1, #303	; 0x12f
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fa6a 	bl	8003968 <fsm_generate_event>
    }
	fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_SENSOR_INIT_ERROR);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f240 112f 	movw	r1, #303	; 0x12f
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fa63 	bl	8003968 <fsm_generate_event>
  }
  fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_SENSOR_INIT_ERROR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f240 112f 	movw	r1, #303	; 0x12f
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fa5c 	bl	8003968 <fsm_generate_event>
}
 80034b0:	bf00      	nop
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <seaglider_send_evnt_proc>:
										 FSM_EVNT_FILES_CREATED,
										 FSM_EVNT_FILES_CLOSED,
                                       };
#define   seaglider_send_evnt_events_num                                 14
void seaglider_send_evnt_proc(proc_arg_t* proc_arg)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	seaglider* glider_obj=proc_arg->func_self_object;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	617b      	str	r3, [r7, #20]
    uint32_t in_event;
    F_RES res;
    osDelay(5000);
 80034c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80034ca:	f00a fa1a 	bl	800d902 <osDelay>
    while(1)
    {
  	 res=fsm_take_event(proc_arg->inQ_handle,&in_event,osWaitForever);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f107 010c 	add.w	r1, r7, #12
 80034d6:	f04f 32ff 	mov.w	r2, #4294967295
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fa53 	bl	8003986 <fsm_take_event>
 80034e0:	4603      	mov	r3, r0
 80034e2:	74fb      	strb	r3, [r7, #19]
     if(res==F_OK){
 80034e4:	7cfb      	ldrb	r3, [r7, #19]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f1      	bne.n	80034ce <seaglider_send_evnt_proc+0x16>
    	 seaglider_send_evnt(glider_obj,in_event);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4619      	mov	r1, r3
 80034ee:	6978      	ldr	r0, [r7, #20]
 80034f0:	f001 fa66 	bl	80049c0 <seaglider_send_evnt>
  	 res=fsm_take_event(proc_arg->inQ_handle,&in_event,osWaitForever);
 80034f4:	e7eb      	b.n	80034ce <seaglider_send_evnt_proc+0x16>
	...

080034f8 <init_act>:
//---------------- EA tables description END ----------------------


//-----------------BEGIN ACTION FUNCTIONS------------------------------
void  init_act()
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
	change_fsm_to_S0();
 80034fc:	f000 f8a0 	bl	8003640 <change_fsm_to_S0>
	//if(disp_proc_start(&dispatcher1, REPORT_EVENT, NULL)==F_ERR){/*err processing*/}
	if(disp_proc_start(&dispatcher1, MICROSD_INIT, NULL)==F_ERR){/*err processing*/}
 8003500:	2200      	movs	r2, #0
 8003502:	2100      	movs	r1, #0
 8003504:	4807      	ldr	r0, [pc, #28]	; (8003524 <init_act+0x2c>)
 8003506:	f7fe fd79 	bl	8001ffc <disp_proc_start>
	if(disp_proc_start(&dispatcher1, HYDROC_DATA_PROCESSOR, NULL)==F_ERR){/*err processing*/}
 800350a:	2200      	movs	r2, #0
 800350c:	2107      	movs	r1, #7
 800350e:	4805      	ldr	r0, [pc, #20]	; (8003524 <init_act+0x2c>)
 8003510:	f7fe fd74 	bl	8001ffc <disp_proc_start>
	if(disp_proc_start(&dispatcher1, HYDROC_DATA_SAVER, NULL)==F_ERR){/*err processing*/}
 8003514:	2200      	movs	r2, #0
 8003516:	2108      	movs	r1, #8
 8003518:	4802      	ldr	r0, [pc, #8]	; (8003524 <init_act+0x2c>)
 800351a:	f7fe fd6f 	bl	8001ffc <disp_proc_start>
}
 800351e:	bf00      	nop
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20002630 	.word	0x20002630

08003528 <process_DS4>:

void process_DS4()
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  fsm_generate_event(dispatcher1.events_q_Handle,FSM_EVNT_DS4_DATA_READY);
 800352c:	4b04      	ldr	r3, [pc, #16]	; (8003540 <process_DS4+0x18>)
 800352e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003532:	f44f 719a 	mov.w	r1, #308	; 0x134
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fa16 	bl	8003968 <fsm_generate_event>
}
 800353c:	bf00      	nop
 800353e:	bd80      	pop	{r7, pc}
 8003540:	20002630 	.word	0x20002630

08003544 <process_TS1>:

void process_TS1()
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  fsm_generate_event(dispatcher1.events_q_Handle,FSM_EVNT_TS1_DATA_READY);
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <process_TS1+0x18>)
 800354a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800354e:	f240 1135 	movw	r1, #309	; 0x135
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fa08 	bl	8003968 <fsm_generate_event>
}
 8003558:	bf00      	nop
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20002630 	.word	0x20002630

08003560 <send_prompt>:

void  send_prompt()
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 8003564:	2200      	movs	r2, #0
 8003566:	2100      	movs	r1, #0
 8003568:	4802      	ldr	r0, [pc, #8]	; (8003574 <send_prompt+0x14>)
 800356a:	f001 fa4f 	bl	8004a0c <seaglider_send_cmd>
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	200015f0 	.word	0x200015f0

08003578 <read_settings_from_microsd>:

void  read_settings_from_microsd()
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  if(disp_proc_start(&dispatcher1, LOAD_SETTINGS, NULL)==F_ERR){/*err processing*/}
 800357c:	2200      	movs	r2, #0
 800357e:	2102      	movs	r1, #2
 8003580:	4802      	ldr	r0, [pc, #8]	; (800358c <read_settings_from_microsd+0x14>)
 8003582:	f7fe fd3b 	bl	8001ffc <disp_proc_start>
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20002630 	.word	0x20002630

08003590 <upload_last_data>:

void upload_last_data()
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  if(disp_proc_start(&dispatcher1, SEND_DATA, NULL)==F_ERR){/*err processing*/}
 8003594:	2200      	movs	r2, #0
 8003596:	2106      	movs	r1, #6
 8003598:	4802      	ldr	r0, [pc, #8]	; (80035a4 <upload_last_data+0x14>)
 800359a:	f7fe fd2f 	bl	8001ffc <disp_proc_start>
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20002630 	.word	0x20002630

080035a8 <upload_errors>:

void upload_errors()
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  if(disp_proc_start(&dispatcher1, SEND_ERRORS, NULL)==F_ERR){/*err processing*/}
 80035ac:	2200      	movs	r2, #0
 80035ae:	2105      	movs	r1, #5
 80035b0:	4802      	ldr	r0, [pc, #8]	; (80035bc <upload_errors+0x14>)
 80035b2:	f7fe fd23 	bl	8001ffc <disp_proc_start>
}
 80035b6:	bf00      	nop
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20002630 	.word	0x20002630

080035c0 <update_sensor_clock>:

void update_sensor_clock()
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  if(disp_proc_start(&dispatcher1, SET_CLOCK, NULL)==F_ERR){/*err processing*/}
 80035c4:	2200      	movs	r2, #0
 80035c6:	2104      	movs	r1, #4
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <update_sensor_clock+0x14>)
 80035ca:	f7fe fd17 	bl	8001ffc <disp_proc_start>
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20002630 	.word	0x20002630

080035d8 <pre_config>:

void pre_config()
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  change_fsm_to_S3();
 80035dc:	f000 f882 	bl	80036e4 <change_fsm_to_S3>
  if(disp_proc_start(&dispatcher1, OPEN_FILES, NULL)==F_ERR){/*err processing*/}
 80035e0:	2200      	movs	r2, #0
 80035e2:	2109      	movs	r1, #9
 80035e4:	4802      	ldr	r0, [pc, #8]	; (80035f0 <pre_config+0x18>)
 80035e6:	f7fe fd09 	bl	8001ffc <disp_proc_start>
}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20002630 	.word	0x20002630

080035f4 <sensor_pre_config>:

void sensor_pre_config()
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  if(disp_proc_start(&dispatcher1, SENSOR_PRE_CONF, NULL)==F_ERR){/*err processing*/}
 80035f8:	2200      	movs	r2, #0
 80035fa:	210c      	movs	r1, #12
 80035fc:	4802      	ldr	r0, [pc, #8]	; (8003608 <sensor_pre_config+0x14>)
 80035fe:	f7fe fcfd 	bl	8001ffc <disp_proc_start>
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20002630 	.word	0x20002630

0800360c <post_config>:

void post_config()
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  change_fsm_to_S5();
 8003610:	f000 f892 	bl	8003738 <change_fsm_to_S5>
  if(disp_proc_start(&dispatcher1, CLOSE_FILES, NULL)==F_ERR){/*err processing*/}
 8003614:	2200      	movs	r2, #0
 8003616:	210a      	movs	r1, #10
 8003618:	4802      	ldr	r0, [pc, #8]	; (8003624 <post_config+0x18>)
 800361a:	f7fe fcef 	bl	8001ffc <disp_proc_start>
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20002630 	.word	0x20002630

08003628 <sensor_post_config>:

void sensor_post_config()
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  if(disp_proc_start(&dispatcher1, SENSOR_POST_CONF, NULL)==F_ERR){/*err processing*/}
 800362c:	2200      	movs	r2, #0
 800362e:	210b      	movs	r1, #11
 8003630:	4802      	ldr	r0, [pc, #8]	; (800363c <sensor_post_config+0x14>)
 8003632:	f7fe fce3 	bl	8001ffc <disp_proc_start>
}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20002630 	.word	0x20002630

08003640 <change_fsm_to_S0>:

void  change_fsm_to_S0()
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  disp_proc_set_EA_table(&dispatcher1,&fsm_S0_init_microSD);
 8003644:	4906      	ldr	r1, [pc, #24]	; (8003660 <change_fsm_to_S0+0x20>)
 8003646:	4807      	ldr	r0, [pc, #28]	; (8003664 <change_fsm_to_S0+0x24>)
 8003648:	f7fe fd2e 	bl	80020a8 <disp_proc_set_EA_table>
  fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_S0);
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <change_fsm_to_S0+0x24>)
 800364e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003652:	21c8      	movs	r1, #200	; 0xc8
 8003654:	4618      	mov	r0, r3
 8003656:	f000 f987 	bl	8003968 <fsm_generate_event>
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000140 	.word	0x20000140
 8003664:	20002630 	.word	0x20002630

08003668 <change_fsm_to_S1>:

void  change_fsm_to_S1()
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  disp_proc_set_EA_table(&dispatcher1,&fsm_S1_init_sensor);
 800366c:	4906      	ldr	r1, [pc, #24]	; (8003688 <change_fsm_to_S1+0x20>)
 800366e:	4807      	ldr	r0, [pc, #28]	; (800368c <change_fsm_to_S1+0x24>)
 8003670:	f7fe fd1a 	bl	80020a8 <disp_proc_set_EA_table>
  fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_S1);
 8003674:	4b05      	ldr	r3, [pc, #20]	; (800368c <change_fsm_to_S1+0x24>)
 8003676:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800367a:	21c9      	movs	r1, #201	; 0xc9
 800367c:	4618      	mov	r0, r3
 800367e:	f000 f973 	bl	8003968 <fsm_generate_event>
}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000148 	.word	0x20000148
 800368c:	20002630 	.word	0x20002630

08003690 <change_fsm_from_S1_to_S2>:

void  change_fsm_from_S1_to_S2()
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  disp_proc_set_EA_table(&dispatcher1,&fsm_S2_wait_mission);
 8003694:	4906      	ldr	r1, [pc, #24]	; (80036b0 <change_fsm_from_S1_to_S2+0x20>)
 8003696:	4807      	ldr	r0, [pc, #28]	; (80036b4 <change_fsm_from_S1_to_S2+0x24>)
 8003698:	f7fe fd06 	bl	80020a8 <disp_proc_set_EA_table>
  fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_S2);
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <change_fsm_from_S1_to_S2+0x24>)
 800369e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80036a2:	21ca      	movs	r1, #202	; 0xca
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 f95f 	bl	8003968 <fsm_generate_event>
}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000150 	.word	0x20000150
 80036b4:	20002630 	.word	0x20002630

080036b8 <change_fsm_from_S5_to_S2>:

void  change_fsm_from_S5_to_S2()
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  disp_proc_set_EA_table(&dispatcher1,&fsm_S2_wait_mission);
 80036bc:	4907      	ldr	r1, [pc, #28]	; (80036dc <change_fsm_from_S5_to_S2+0x24>)
 80036be:	4808      	ldr	r0, [pc, #32]	; (80036e0 <change_fsm_from_S5_to_S2+0x28>)
 80036c0:	f7fe fcf2 	bl	80020a8 <disp_proc_set_EA_table>
  fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_S2);
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <change_fsm_from_S5_to_S2+0x28>)
 80036c6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80036ca:	21ca      	movs	r1, #202	; 0xca
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 f94b 	bl	8003968 <fsm_generate_event>
  send_prompt();
 80036d2:	f7ff ff45 	bl	8003560 <send_prompt>
}
 80036d6:	bf00      	nop
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000150 	.word	0x20000150
 80036e0:	20002630 	.word	0x20002630

080036e4 <change_fsm_to_S3>:

void  change_fsm_to_S3()
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  disp_proc_set_EA_table(&dispatcher1,&fsm_S3_pre_config);
 80036e8:	4906      	ldr	r1, [pc, #24]	; (8003704 <change_fsm_to_S3+0x20>)
 80036ea:	4807      	ldr	r0, [pc, #28]	; (8003708 <change_fsm_to_S3+0x24>)
 80036ec:	f7fe fcdc 	bl	80020a8 <disp_proc_set_EA_table>
  fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_S3);
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <change_fsm_to_S3+0x24>)
 80036f2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80036f6:	21cb      	movs	r1, #203	; 0xcb
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 f935 	bl	8003968 <fsm_generate_event>
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000158 	.word	0x20000158
 8003708:	20002630 	.word	0x20002630

0800370c <change_fsm_to_S4>:

void  change_fsm_to_S4()
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  disp_proc_set_EA_table(&dispatcher1,&fsm_S4_data_processing);
 8003710:	4907      	ldr	r1, [pc, #28]	; (8003730 <change_fsm_to_S4+0x24>)
 8003712:	4808      	ldr	r0, [pc, #32]	; (8003734 <change_fsm_to_S4+0x28>)
 8003714:	f7fe fcc8 	bl	80020a8 <disp_proc_set_EA_table>
  fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_S4);
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <change_fsm_to_S4+0x28>)
 800371a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800371e:	21cc      	movs	r1, #204	; 0xcc
 8003720:	4618      	mov	r0, r3
 8003722:	f000 f921 	bl	8003968 <fsm_generate_event>
  send_prompt();
 8003726:	f7ff ff1b 	bl	8003560 <send_prompt>
}
 800372a:	bf00      	nop
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000160 	.word	0x20000160
 8003734:	20002630 	.word	0x20002630

08003738 <change_fsm_to_S5>:

void  change_fsm_to_S5()
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  disp_proc_set_EA_table(&dispatcher1,&fsm_S5_post_config);
 800373c:	4906      	ldr	r1, [pc, #24]	; (8003758 <change_fsm_to_S5+0x20>)
 800373e:	4807      	ldr	r0, [pc, #28]	; (800375c <change_fsm_to_S5+0x24>)
 8003740:	f7fe fcb2 	bl	80020a8 <disp_proc_set_EA_table>
  fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_S5);
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <change_fsm_to_S5+0x24>)
 8003746:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800374a:	21cd      	movs	r1, #205	; 0xcd
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f90b 	bl	8003968 <fsm_generate_event>
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20000168 	.word	0x20000168
 800375c:	20002630 	.word	0x20002630

08003760 <read_sensor_type>:

void  read_sensor_type()
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  if(disp_proc_start(&dispatcher1, READ_SENSOR_TYPE, NULL)==F_ERR){/*err processing*/}
 8003764:	2200      	movs	r2, #0
 8003766:	2103      	movs	r1, #3
 8003768:	4802      	ldr	r0, [pc, #8]	; (8003774 <read_sensor_type+0x14>)
 800376a:	f7fe fc47 	bl	8001ffc <disp_proc_start>
}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20002630 	.word	0x20002630

08003778 <fsm_init>:

//----------------- END  ACTION FUNCTIONS------------------------------


void fsm_init()
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af04      	add	r7, sp, #16
	disp_proc_init_func(&dispatcher1, MICROSD_INIT,&microsd_init_proc,NULL,PROC_CREATE_NEW_Q,NULL,microsd_init_events_num,microsd_init_events);
 800377e:	4b5d      	ldr	r3, [pc, #372]	; (80038f4 <fsm_init+0x17c>)
 8003780:	9303      	str	r3, [sp, #12]
 8003782:	2300      	movs	r3, #0
 8003784:	9302      	str	r3, [sp, #8]
 8003786:	2300      	movs	r3, #0
 8003788:	9301      	str	r3, [sp, #4]
 800378a:	2300      	movs	r3, #0
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	2300      	movs	r3, #0
 8003790:	4a59      	ldr	r2, [pc, #356]	; (80038f8 <fsm_init+0x180>)
 8003792:	2100      	movs	r1, #0
 8003794:	4859      	ldr	r0, [pc, #356]	; (80038fc <fsm_init+0x184>)
 8003796:	f7fe fbd9 	bl	8001f4c <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, REPORT_EVENT,&seaglider_send_evnt_proc,NULL,PROC_CREATE_NEW_Q,&glider1,seaglider_send_evnt_events_num,seaglider_send_evnt_events);
 800379a:	4b59      	ldr	r3, [pc, #356]	; (8003900 <fsm_init+0x188>)
 800379c:	9303      	str	r3, [sp, #12]
 800379e:	230e      	movs	r3, #14
 80037a0:	9302      	str	r3, [sp, #8]
 80037a2:	4b58      	ldr	r3, [pc, #352]	; (8003904 <fsm_init+0x18c>)
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	2300      	movs	r3, #0
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	2300      	movs	r3, #0
 80037ac:	4a56      	ldr	r2, [pc, #344]	; (8003908 <fsm_init+0x190>)
 80037ae:	2101      	movs	r1, #1
 80037b0:	4852      	ldr	r0, [pc, #328]	; (80038fc <fsm_init+0x184>)
 80037b2:	f7fe fbcb 	bl	8001f4c <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, LOAD_SETTINGS,&load_settings_proc,NULL,PROC_CREATE_NEW_Q,&glider1,load_settings_events_num,load_settings_events);
 80037b6:	4b55      	ldr	r3, [pc, #340]	; (800390c <fsm_init+0x194>)
 80037b8:	9303      	str	r3, [sp, #12]
 80037ba:	2300      	movs	r3, #0
 80037bc:	9302      	str	r3, [sp, #8]
 80037be:	4b51      	ldr	r3, [pc, #324]	; (8003904 <fsm_init+0x18c>)
 80037c0:	9301      	str	r3, [sp, #4]
 80037c2:	2300      	movs	r3, #0
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	2300      	movs	r3, #0
 80037c8:	4a51      	ldr	r2, [pc, #324]	; (8003910 <fsm_init+0x198>)
 80037ca:	2102      	movs	r1, #2
 80037cc:	484b      	ldr	r0, [pc, #300]	; (80038fc <fsm_init+0x184>)
 80037ce:	f7fe fbbd 	bl	8001f4c <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, READ_SENSOR_TYPE,&read_sensor_type_proc,NULL,PROC_CREATE_NEW_Q,&hydroc_sensor1,read_sensor_type_events_num,read_sensor_type_events);
 80037d2:	4b50      	ldr	r3, [pc, #320]	; (8003914 <fsm_init+0x19c>)
 80037d4:	9303      	str	r3, [sp, #12]
 80037d6:	2303      	movs	r3, #3
 80037d8:	9302      	str	r3, [sp, #8]
 80037da:	4b4f      	ldr	r3, [pc, #316]	; (8003918 <fsm_init+0x1a0>)
 80037dc:	9301      	str	r3, [sp, #4]
 80037de:	2300      	movs	r3, #0
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	2300      	movs	r3, #0
 80037e4:	4a4d      	ldr	r2, [pc, #308]	; (800391c <fsm_init+0x1a4>)
 80037e6:	2103      	movs	r1, #3
 80037e8:	4844      	ldr	r0, [pc, #272]	; (80038fc <fsm_init+0x184>)
 80037ea:	f7fe fbaf 	bl	8001f4c <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, SET_CLOCK,&set_clock_proc,NULL,PROC_CREATE_NEW_Q,&hydroc_sensor1,set_clock_events_num,set_clock_events);
 80037ee:	4b4c      	ldr	r3, [pc, #304]	; (8003920 <fsm_init+0x1a8>)
 80037f0:	9303      	str	r3, [sp, #12]
 80037f2:	2302      	movs	r3, #2
 80037f4:	9302      	str	r3, [sp, #8]
 80037f6:	4b48      	ldr	r3, [pc, #288]	; (8003918 <fsm_init+0x1a0>)
 80037f8:	9301      	str	r3, [sp, #4]
 80037fa:	2300      	movs	r3, #0
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	2300      	movs	r3, #0
 8003800:	4a48      	ldr	r2, [pc, #288]	; (8003924 <fsm_init+0x1ac>)
 8003802:	2104      	movs	r1, #4
 8003804:	483d      	ldr	r0, [pc, #244]	; (80038fc <fsm_init+0x184>)
 8003806:	f7fe fba1 	bl	8001f4c <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, SEND_ERRORS,&send_errors_proc,NULL,PROC_CREATE_NEW_Q,&glider1,send_errors_events_num,send_errors_events);
 800380a:	4b47      	ldr	r3, [pc, #284]	; (8003928 <fsm_init+0x1b0>)
 800380c:	9303      	str	r3, [sp, #12]
 800380e:	2300      	movs	r3, #0
 8003810:	9302      	str	r3, [sp, #8]
 8003812:	4b3c      	ldr	r3, [pc, #240]	; (8003904 <fsm_init+0x18c>)
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	2300      	movs	r3, #0
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	2300      	movs	r3, #0
 800381c:	4a43      	ldr	r2, [pc, #268]	; (800392c <fsm_init+0x1b4>)
 800381e:	2105      	movs	r1, #5
 8003820:	4836      	ldr	r0, [pc, #216]	; (80038fc <fsm_init+0x184>)
 8003822:	f7fe fb93 	bl	8001f4c <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, SEND_DATA,&send_data_proc,NULL,PROC_CREATE_NEW_Q,NULL,send_data_events_num,send_data_events);
 8003826:	4b42      	ldr	r3, [pc, #264]	; (8003930 <fsm_init+0x1b8>)
 8003828:	9303      	str	r3, [sp, #12]
 800382a:	2300      	movs	r3, #0
 800382c:	9302      	str	r3, [sp, #8]
 800382e:	2300      	movs	r3, #0
 8003830:	9301      	str	r3, [sp, #4]
 8003832:	2300      	movs	r3, #0
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	2300      	movs	r3, #0
 8003838:	4a3e      	ldr	r2, [pc, #248]	; (8003934 <fsm_init+0x1bc>)
 800383a:	2106      	movs	r1, #6
 800383c:	482f      	ldr	r0, [pc, #188]	; (80038fc <fsm_init+0x184>)
 800383e:	f7fe fb85 	bl	8001f4c <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, HYDROC_DATA_PROCESSOR,&hydroc_data_processor_proc,NULL,PROC_CREATE_NEW_Q,NULL,hydroc_data_processor_events_num,hydroc_data_processor_events);
 8003842:	4b3d      	ldr	r3, [pc, #244]	; (8003938 <fsm_init+0x1c0>)
 8003844:	9303      	str	r3, [sp, #12]
 8003846:	2302      	movs	r3, #2
 8003848:	9302      	str	r3, [sp, #8]
 800384a:	2300      	movs	r3, #0
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	2300      	movs	r3, #0
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	2300      	movs	r3, #0
 8003854:	4a39      	ldr	r2, [pc, #228]	; (800393c <fsm_init+0x1c4>)
 8003856:	2107      	movs	r1, #7
 8003858:	4828      	ldr	r0, [pc, #160]	; (80038fc <fsm_init+0x184>)
 800385a:	f7fe fb77 	bl	8001f4c <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, HYDROC_DATA_SAVER,&hydroc_data_saver_proc,NULL,PROC_CREATE_NEW_Q,NULL,hydroc_data_saver_events_num,hydroc_data_saver_events);
 800385e:	4b38      	ldr	r3, [pc, #224]	; (8003940 <fsm_init+0x1c8>)
 8003860:	9303      	str	r3, [sp, #12]
 8003862:	2302      	movs	r3, #2
 8003864:	9302      	str	r3, [sp, #8]
 8003866:	2300      	movs	r3, #0
 8003868:	9301      	str	r3, [sp, #4]
 800386a:	2300      	movs	r3, #0
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	2300      	movs	r3, #0
 8003870:	4a34      	ldr	r2, [pc, #208]	; (8003944 <fsm_init+0x1cc>)
 8003872:	2108      	movs	r1, #8
 8003874:	4821      	ldr	r0, [pc, #132]	; (80038fc <fsm_init+0x184>)
 8003876:	f7fe fb69 	bl	8001f4c <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, OPEN_FILES,&open_files_proc,NULL,PROC_CREATE_NEW_Q,NULL,open_files_events_num,open_files_events);
 800387a:	4b33      	ldr	r3, [pc, #204]	; (8003948 <fsm_init+0x1d0>)
 800387c:	9303      	str	r3, [sp, #12]
 800387e:	2300      	movs	r3, #0
 8003880:	9302      	str	r3, [sp, #8]
 8003882:	2300      	movs	r3, #0
 8003884:	9301      	str	r3, [sp, #4]
 8003886:	2300      	movs	r3, #0
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	2300      	movs	r3, #0
 800388c:	4a2f      	ldr	r2, [pc, #188]	; (800394c <fsm_init+0x1d4>)
 800388e:	2109      	movs	r1, #9
 8003890:	481a      	ldr	r0, [pc, #104]	; (80038fc <fsm_init+0x184>)
 8003892:	f7fe fb5b 	bl	8001f4c <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, CLOSE_FILES,&close_files_proc,NULL,PROC_CREATE_NEW_Q,NULL,close_files_events_num,close_files_events);
 8003896:	4b2e      	ldr	r3, [pc, #184]	; (8003950 <fsm_init+0x1d8>)
 8003898:	9303      	str	r3, [sp, #12]
 800389a:	2300      	movs	r3, #0
 800389c:	9302      	str	r3, [sp, #8]
 800389e:	2300      	movs	r3, #0
 80038a0:	9301      	str	r3, [sp, #4]
 80038a2:	2300      	movs	r3, #0
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	2300      	movs	r3, #0
 80038a8:	4a2a      	ldr	r2, [pc, #168]	; (8003954 <fsm_init+0x1dc>)
 80038aa:	210a      	movs	r1, #10
 80038ac:	4813      	ldr	r0, [pc, #76]	; (80038fc <fsm_init+0x184>)
 80038ae:	f7fe fb4d 	bl	8001f4c <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, SENSOR_POST_CONF,&sensor_post_config_proc,NULL,PROC_CREATE_NEW_Q,NULL,sensor_post_config_events_num,sensor_post_config_events);
 80038b2:	4b29      	ldr	r3, [pc, #164]	; (8003958 <fsm_init+0x1e0>)
 80038b4:	9303      	str	r3, [sp, #12]
 80038b6:	2302      	movs	r3, #2
 80038b8:	9302      	str	r3, [sp, #8]
 80038ba:	2300      	movs	r3, #0
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	2300      	movs	r3, #0
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	2300      	movs	r3, #0
 80038c4:	4a25      	ldr	r2, [pc, #148]	; (800395c <fsm_init+0x1e4>)
 80038c6:	210b      	movs	r1, #11
 80038c8:	480c      	ldr	r0, [pc, #48]	; (80038fc <fsm_init+0x184>)
 80038ca:	f7fe fb3f 	bl	8001f4c <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, SENSOR_PRE_CONF,&sensor_pre_config_proc,NULL,PROC_CREATE_NEW_Q,NULL,sensor_pre_config_events_num,sensor_pre_config_events);
 80038ce:	4b24      	ldr	r3, [pc, #144]	; (8003960 <fsm_init+0x1e8>)
 80038d0:	9303      	str	r3, [sp, #12]
 80038d2:	2302      	movs	r3, #2
 80038d4:	9302      	str	r3, [sp, #8]
 80038d6:	2300      	movs	r3, #0
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	2300      	movs	r3, #0
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	2300      	movs	r3, #0
 80038e0:	4a20      	ldr	r2, [pc, #128]	; (8003964 <fsm_init+0x1ec>)
 80038e2:	210c      	movs	r1, #12
 80038e4:	4805      	ldr	r0, [pc, #20]	; (80038fc <fsm_init+0x184>)
 80038e6:	f7fe fb31 	bl	8001f4c <disp_proc_init_func>

	//start action
	init_act();
 80038ea:	f7ff fe05 	bl	80034f8 <init_act>
}
 80038ee:	bf00      	nop
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20001440 	.word	0x20001440
 80038f8:	08002799 	.word	0x08002799
 80038fc:	20002630 	.word	0x20002630
 8003900:	20000060 	.word	0x20000060
 8003904:	200015f0 	.word	0x200015f0
 8003908:	080034b9 	.word	0x080034b9
 800390c:	20001444 	.word	0x20001444
 8003910:	080027f9 	.word	0x080027f9
 8003914:	20000054 	.word	0x20000054
 8003918:	20001a30 	.word	0x20001a30
 800391c:	080033c1 	.word	0x080033c1
 8003920:	2000002c 	.word	0x2000002c
 8003924:	08002839 	.word	0x08002839
 8003928:	20001448 	.word	0x20001448
 800392c:	08002931 	.word	0x08002931
 8003930:	20001448 	.word	0x20001448
 8003934:	08002a75 	.word	0x08002a75
 8003938:	2000004c 	.word	0x2000004c
 800393c:	0800311d 	.word	0x0800311d
 8003940:	20000034 	.word	0x20000034
 8003944:	08002ba5 	.word	0x08002ba5
 8003948:	20001448 	.word	0x20001448
 800394c:	08002c51 	.word	0x08002c51
 8003950:	20001448 	.word	0x20001448
 8003954:	08002ee1 	.word	0x08002ee1
 8003958:	2000003c 	.word	0x2000003c
 800395c:	08002f51 	.word	0x08002f51
 8003960:	20000044 	.word	0x20000044
 8003964:	0800308d 	.word	0x0800308d

08003968 <fsm_generate_event>:

void fsm_generate_event(osMessageQId out_Q,uint32_t event)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
	osMessagePut(out_Q,event,osWaitForever);
 8003972:	f04f 32ff 	mov.w	r2, #4294967295
 8003976:	6839      	ldr	r1, [r7, #0]
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f00a f8b5 	bl	800dae8 <osMessagePut>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <fsm_take_event>:

F_RES fsm_take_event(osMessageQId Q_handle,uint32_t* event,uint32_t wait_time)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b088      	sub	sp, #32
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
	osEvent res;
	res=osMessageGet(Q_handle,wait_time);
 8003992:	f107 0314 	add.w	r3, r7, #20
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68f9      	ldr	r1, [r7, #12]
 800399a:	4618      	mov	r0, r3
 800399c:	f00a f8e4 	bl	800db68 <osMessageGet>
	if(res.status==osEventMessage){
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2b10      	cmp	r3, #16
 80039a4:	d104      	bne.n	80039b0 <fsm_take_event+0x2a>
		*event=res.value.v;
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	601a      	str	r2, [r3, #0]
		return F_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	e005      	b.n	80039bc <fsm_take_event+0x36>
	}
	else  if(res.status==osEventTimeout)return F_TIMEOUT;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d101      	bne.n	80039ba <fsm_take_event+0x34>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e000      	b.n	80039bc <fsm_take_event+0x36>
	return F_ERR;
 80039ba:	2301      	movs	r3, #1
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3720      	adds	r7, #32
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039c4:	b5b0      	push	{r4, r5, r7, lr}
 80039c6:	b0d2      	sub	sp, #328	; 0x148
 80039c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039ca:	f001 fe3b 	bl	8005644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039ce:	f000 f95d 	bl	8003c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039d2:	f000 fa4d 	bl	8003e70 <MX_GPIO_Init>
  MX_DMA_Init();
 80039d6:	f000 fa25 	bl	8003e24 <MX_DMA_Init>
  MX_SPI1_Init();
 80039da:	f000 f999 	bl	8003d10 <MX_SPI1_Init>
  MX_UART5_Init();
 80039de:	f000 f9cd 	bl	8003d7c <MX_UART5_Init>
  MX_USART1_UART_Init();
 80039e2:	f000 f9f5 	bl	8003dd0 <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of seaglider_uart_q_sem */
  osSemaphoreDef(seaglider_uart_q_sem);
 80039e6:	2300      	movs	r3, #0
 80039e8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80039ec:	2300      	movs	r3, #0
 80039ee:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  seaglider_uart_q_semHandle = osSemaphoreCreate(osSemaphore(seaglider_uart_q_sem), 1);
 80039f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80039f6:	2101      	movs	r1, #1
 80039f8:	4618      	mov	r0, r3
 80039fa:	f009 ff96 	bl	800d92a <osSemaphoreCreate>
 80039fe:	4603      	mov	r3, r0
 8003a00:	4a88      	ldr	r2, [pc, #544]	; (8003c24 <main+0x260>)
 8003a02:	6013      	str	r3, [r2, #0]

  /* definition and creation of hydroc_uart_q_sem */
  osSemaphoreDef(hydroc_uart_q_sem);
 8003a04:	2300      	movs	r3, #0
 8003a06:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  hydroc_uart_q_semHandle = osSemaphoreCreate(osSemaphore(hydroc_uart_q_sem), 1);
 8003a10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003a14:	2101      	movs	r1, #1
 8003a16:	4618      	mov	r0, r3
 8003a18:	f009 ff87 	bl	800d92a <osSemaphoreCreate>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	4a82      	ldr	r2, [pc, #520]	; (8003c28 <main+0x264>)
 8003a20:	6013      	str	r3, [r2, #0]

  /* definition and creation of seaglider_uart_media_sem */
  osSemaphoreDef(seaglider_uart_media_sem);
 8003a22:	2300      	movs	r3, #0
 8003a24:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  seaglider_uart_media_semHandle = osSemaphoreCreate(osSemaphore(seaglider_uart_media_sem), 1);
 8003a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a32:	2101      	movs	r1, #1
 8003a34:	4618      	mov	r0, r3
 8003a36:	f009 ff78 	bl	800d92a <osSemaphoreCreate>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4a7b      	ldr	r2, [pc, #492]	; (8003c2c <main+0x268>)
 8003a3e:	6013      	str	r3, [r2, #0]

  /* definition and creation of hydroc_uart_media_sem */
  osSemaphoreDef(hydroc_uart_media_sem);
 8003a40:	2300      	movs	r3, #0
 8003a42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003a46:	2300      	movs	r3, #0
 8003a48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  hydroc_uart_media_semHandle = osSemaphoreCreate(osSemaphore(hydroc_uart_media_sem), 1);
 8003a4c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003a50:	2101      	movs	r1, #1
 8003a52:	4618      	mov	r0, r3
 8003a54:	f009 ff69 	bl	800d92a <osSemaphoreCreate>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	4a75      	ldr	r2, [pc, #468]	; (8003c30 <main+0x26c>)
 8003a5c:	6013      	str	r3, [r2, #0]

  /* definition and creation of microSD_sem */
  osSemaphoreDef(microSD_sem);
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a64:	2300      	movs	r3, #0
 8003a66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  microSD_semHandle = osSemaphoreCreate(osSemaphore(microSD_sem), 1);
 8003a6a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003a6e:	2101      	movs	r1, #1
 8003a70:	4618      	mov	r0, r3
 8003a72:	f009 ff5a 	bl	800d92a <osSemaphoreCreate>
 8003a76:	4603      	mov	r3, r0
 8003a78:	4a6e      	ldr	r2, [pc, #440]	; (8003c34 <main+0x270>)
 8003a7a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of worker_cmd_q */
  osMessageQDef(worker_cmd_q, 16, uint32_t);
 8003a7c:	4b6e      	ldr	r3, [pc, #440]	; (8003c38 <main+0x274>)
 8003a7e:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8003a82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  worker_cmd_qHandle = osMessageCreate(osMessageQ(worker_cmd_q), NULL);
 8003a88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f00a f802 	bl	800da98 <osMessageCreate>
 8003a94:	4603      	mov	r3, r0
 8003a96:	4a69      	ldr	r2, [pc, #420]	; (8003c3c <main+0x278>)
 8003a98:	6013      	str	r3, [r2, #0]

  /* definition and creation of events_q */
  osMessageQDef(events_q, 16, uint32_t);
 8003a9a:	4b67      	ldr	r3, [pc, #412]	; (8003c38 <main+0x274>)
 8003a9c:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8003aa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  events_qHandle = osMessageCreate(osMessageQ(events_q), NULL);
 8003aa6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4618      	mov	r0, r3
 8003aae:	f009 fff3 	bl	800da98 <osMessageCreate>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	4a62      	ldr	r2, [pc, #392]	; (8003c40 <main+0x27c>)
 8003ab6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8003ab8:	4b62      	ldr	r3, [pc, #392]	; (8003c44 <main+0x280>)
 8003aba:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8003abe:	461d      	mov	r5, r3
 8003ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ac4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ac8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003acc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f009 fec9 	bl	800d86a <osThreadCreate>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	4a5b      	ldr	r2, [pc, #364]	; (8003c48 <main+0x284>)
 8003adc:	6013      	str	r3, [r2, #0]

  /* definition and creation of glider_uart_tx_ */
  osThreadDef(glider_uart_tx_, glider_uart_tx_f, osPriorityNormal, 0, 256);
 8003ade:	4b5b      	ldr	r3, [pc, #364]	; (8003c4c <main+0x288>)
 8003ae0:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8003ae4:	461d      	mov	r5, r3
 8003ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003aea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003aee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  glider_uart_tx_Handle = osThreadCreate(osThread(glider_uart_tx_), NULL);
 8003af2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003af6:	2100      	movs	r1, #0
 8003af8:	4618      	mov	r0, r3
 8003afa:	f009 feb6 	bl	800d86a <osThreadCreate>
 8003afe:	4603      	mov	r3, r0
 8003b00:	4a53      	ldr	r2, [pc, #332]	; (8003c50 <main+0x28c>)
 8003b02:	6013      	str	r3, [r2, #0]

  /* definition and creation of worker1_t */
  osThreadDef(worker1_t, worker_f, osPriorityNormal, 0, 512);
 8003b04:	4b53      	ldr	r3, [pc, #332]	; (8003c54 <main+0x290>)
 8003b06:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8003b0a:	461d      	mov	r5, r3
 8003b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  worker1_tHandle = osThreadCreate(osThread(worker1_t), NULL);
 8003b18:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f009 fea3 	bl	800d86a <osThreadCreate>
 8003b24:	4603      	mov	r3, r0
 8003b26:	4a4c      	ldr	r2, [pc, #304]	; (8003c58 <main+0x294>)
 8003b28:	6013      	str	r3, [r2, #0]

  /* definition and creation of worker2_t */
  osThreadDef(worker2_t, worker_f, osPriorityNormal, 0, 512);
 8003b2a:	4b4c      	ldr	r3, [pc, #304]	; (8003c5c <main+0x298>)
 8003b2c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8003b30:	461d      	mov	r5, r3
 8003b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  worker2_tHandle = osThreadCreate(osThread(worker2_t), NULL);
 8003b3e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003b42:	2100      	movs	r1, #0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f009 fe90 	bl	800d86a <osThreadCreate>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4a44      	ldr	r2, [pc, #272]	; (8003c60 <main+0x29c>)
 8003b4e:	6013      	str	r3, [r2, #0]

  /* definition and creation of worker3_t */
  osThreadDef(worker3_t, worker_f, osPriorityNormal, 0, 512);
 8003b50:	4b44      	ldr	r3, [pc, #272]	; (8003c64 <main+0x2a0>)
 8003b52:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8003b56:	461d      	mov	r5, r3
 8003b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  worker3_tHandle = osThreadCreate(osThread(worker3_t), NULL);
 8003b64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003b68:	2100      	movs	r1, #0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f009 fe7d 	bl	800d86a <osThreadCreate>
 8003b70:	4603      	mov	r3, r0
 8003b72:	4a3d      	ldr	r2, [pc, #244]	; (8003c68 <main+0x2a4>)
 8003b74:	6013      	str	r3, [r2, #0]

  /* definition and creation of worker4_t */
  osThreadDef(worker4_t, worker_f, osPriorityNormal, 0, 512);
 8003b76:	4b3d      	ldr	r3, [pc, #244]	; (8003c6c <main+0x2a8>)
 8003b78:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8003b7c:	461d      	mov	r5, r3
 8003b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  worker4_tHandle = osThreadCreate(osThread(worker4_t), NULL);
 8003b8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f009 fe6a 	bl	800d86a <osThreadCreate>
 8003b96:	4603      	mov	r3, r0
 8003b98:	4a35      	ldr	r2, [pc, #212]	; (8003c70 <main+0x2ac>)
 8003b9a:	6013      	str	r3, [r2, #0]

  /* definition and creation of hydroc_uart_tx_ */
  osThreadDef(hydroc_uart_tx_, hydroc_uart_tx_f, osPriorityNormal, 0, 256);
 8003b9c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003ba0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ba4:	4a33      	ldr	r2, [pc, #204]	; (8003c74 <main+0x2b0>)
 8003ba6:	461c      	mov	r4, r3
 8003ba8:	4615      	mov	r5, r2
 8003baa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003bb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hydroc_uart_tx_Handle = osThreadCreate(osThread(hydroc_uart_tx_), NULL);
 8003bb6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f009 fe54 	bl	800d86a <osThreadCreate>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4a2c      	ldr	r2, [pc, #176]	; (8003c78 <main+0x2b4>)
 8003bc6:	6013      	str	r3, [r2, #0]

  /* definition and creation of worker5_t */
  osThreadDef(worker5_t, worker_f, osPriorityNormal, 0, 512);
 8003bc8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003bcc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003bd0:	4a2a      	ldr	r2, [pc, #168]	; (8003c7c <main+0x2b8>)
 8003bd2:	461c      	mov	r4, r3
 8003bd4:	4615      	mov	r5, r2
 8003bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003bde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  worker5_tHandle = osThreadCreate(osThread(worker5_t), NULL);
 8003be2:	f107 0320 	add.w	r3, r7, #32
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f009 fe3e 	bl	800d86a <osThreadCreate>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <main+0x2bc>)
 8003bf2:	6013      	str	r3, [r2, #0]

  /* definition and creation of worker6_t */
  osThreadDef(worker6_t, worker_f, osPriorityNormal, 0, 512);
 8003bf4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003bf8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003bfc:	4a21      	ldr	r2, [pc, #132]	; (8003c84 <main+0x2c0>)
 8003bfe:	461c      	mov	r4, r3
 8003c00:	4615      	mov	r5, r2
 8003c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  worker6_tHandle = osThreadCreate(osThread(worker6_t), NULL);
 8003c0e:	1d3b      	adds	r3, r7, #4
 8003c10:	2100      	movs	r1, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f009 fe29 	bl	800d86a <osThreadCreate>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4a1b      	ldr	r2, [pc, #108]	; (8003c88 <main+0x2c4>)
 8003c1c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003c1e:	f009 fe1d 	bl	800d85c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003c22:	e7fe      	b.n	8003c22 <main+0x25e>
 8003c24:	200015dc 	.word	0x200015dc
 8003c28:	200015e0 	.word	0x200015e0
 8003c2c:	200015e4 	.word	0x200015e4
 8003c30:	200015e8 	.word	0x200015e8
 8003c34:	200015ec 	.word	0x200015ec
 8003c38:	080142b4 	.word	0x080142b4
 8003c3c:	200015d4 	.word	0x200015d4
 8003c40:	200015d8 	.word	0x200015d8
 8003c44:	080142c4 	.word	0x080142c4
 8003c48:	200015b0 	.word	0x200015b0
 8003c4c:	080142e0 	.word	0x080142e0
 8003c50:	200015b4 	.word	0x200015b4
 8003c54:	080142fc 	.word	0x080142fc
 8003c58:	200015b8 	.word	0x200015b8
 8003c5c:	08014318 	.word	0x08014318
 8003c60:	200015bc 	.word	0x200015bc
 8003c64:	08014334 	.word	0x08014334
 8003c68:	200015c0 	.word	0x200015c0
 8003c6c:	08014350 	.word	0x08014350
 8003c70:	200015c4 	.word	0x200015c4
 8003c74:	0801436c 	.word	0x0801436c
 8003c78:	200015c8 	.word	0x200015c8
 8003c7c:	08014388 	.word	0x08014388
 8003c80:	200015cc 	.word	0x200015cc
 8003c84:	080143a4 	.word	0x080143a4
 8003c88:	200015d0 	.word	0x200015d0

08003c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b090      	sub	sp, #64	; 0x40
 8003c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c92:	f107 0318 	add.w	r3, r7, #24
 8003c96:	2228      	movs	r2, #40	; 0x28
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f00d f850 	bl	8010d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ca0:	1d3b      	adds	r3, r7, #4
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
 8003ca8:	609a      	str	r2, [r3, #8]
 8003caa:	60da      	str	r2, [r3, #12]
 8003cac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cb6:	2310      	movs	r3, #16
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003cc2:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8003cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cc8:	f107 0318 	add.w	r3, r7, #24
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f002 fb6b 	bl	80063a8 <HAL_RCC_OscConfig>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <SystemClock_Config+0x50>
  {
    Error_Handler();
 8003cd8:	f000 fa66 	bl	80041a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cdc:	230f      	movs	r3, #15
 8003cde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003cf2:	1d3b      	adds	r3, r7, #4
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f002 fdd8 	bl	80068ac <HAL_RCC_ClockConfig>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8003d02:	f000 fa51 	bl	80041a8 <Error_Handler>
  }
}
 8003d06:	bf00      	nop
 8003d08:	3740      	adds	r7, #64	; 0x40
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003d14:	4b17      	ldr	r3, [pc, #92]	; (8003d74 <MX_SPI1_Init+0x64>)
 8003d16:	4a18      	ldr	r2, [pc, #96]	; (8003d78 <MX_SPI1_Init+0x68>)
 8003d18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d1a:	4b16      	ldr	r3, [pc, #88]	; (8003d74 <MX_SPI1_Init+0x64>)
 8003d1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d22:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <MX_SPI1_Init+0x64>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d28:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <MX_SPI1_Init+0x64>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <MX_SPI1_Init+0x64>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d34:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <MX_SPI1_Init+0x64>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d3a:	4b0e      	ldr	r3, [pc, #56]	; (8003d74 <MX_SPI1_Init+0x64>)
 8003d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003d42:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <MX_SPI1_Init+0x64>)
 8003d44:	2208      	movs	r2, #8
 8003d46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d48:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <MX_SPI1_Init+0x64>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d4e:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <MX_SPI1_Init+0x64>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d54:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <MX_SPI1_Init+0x64>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003d5a:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <MX_SPI1_Init+0x64>)
 8003d5c:	220a      	movs	r2, #10
 8003d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d60:	4804      	ldr	r0, [pc, #16]	; (8003d74 <MX_SPI1_Init+0x64>)
 8003d62:	f002 ff6d 	bl	8006c40 <HAL_SPI_Init>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003d6c:	f000 fa1c 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d70:	bf00      	nop
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20001448 	.word	0x20001448
 8003d78:	40013000 	.word	0x40013000

08003d7c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003d80:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <MX_UART5_Init+0x4c>)
 8003d82:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <MX_UART5_Init+0x50>)
 8003d84:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <MX_UART5_Init+0x4c>)
 8003d88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003d8c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003d8e:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <MX_UART5_Init+0x4c>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003d94:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <MX_UART5_Init+0x4c>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <MX_UART5_Init+0x4c>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003da0:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <MX_UART5_Init+0x4c>)
 8003da2:	220c      	movs	r2, #12
 8003da4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003da6:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <MX_UART5_Init+0x4c>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dac:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <MX_UART5_Init+0x4c>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003db2:	4805      	ldr	r0, [pc, #20]	; (8003dc8 <MX_UART5_Init+0x4c>)
 8003db4:	f003 fd84 	bl	80078c0 <HAL_UART_Init>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003dbe:	f000 f9f3 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20001528 	.word	0x20001528
 8003dcc:	40005000 	.word	0x40005000

08003dd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003dd4:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <MX_USART1_UART_Init+0x4c>)
 8003dd6:	4a12      	ldr	r2, [pc, #72]	; (8003e20 <MX_USART1_UART_Init+0x50>)
 8003dd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003dda:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <MX_USART1_UART_Init+0x4c>)
 8003ddc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003de0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003de2:	4b0e      	ldr	r3, [pc, #56]	; (8003e1c <MX_USART1_UART_Init+0x4c>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003de8:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <MX_USART1_UART_Init+0x4c>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003dee:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <MX_USART1_UART_Init+0x4c>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003df4:	4b09      	ldr	r3, [pc, #36]	; (8003e1c <MX_USART1_UART_Init+0x4c>)
 8003df6:	220c      	movs	r2, #12
 8003df8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dfa:	4b08      	ldr	r3, [pc, #32]	; (8003e1c <MX_USART1_UART_Init+0x4c>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e00:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <MX_USART1_UART_Init+0x4c>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e06:	4805      	ldr	r0, [pc, #20]	; (8003e1c <MX_USART1_UART_Init+0x4c>)
 8003e08:	f003 fd5a 	bl	80078c0 <HAL_UART_Init>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003e12:	f000 f9c9 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	2000156c 	.word	0x2000156c
 8003e20:	40013800 	.word	0x40013800

08003e24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e2a:	4b10      	ldr	r3, [pc, #64]	; (8003e6c <MX_DMA_Init+0x48>)
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	4a0f      	ldr	r2, [pc, #60]	; (8003e6c <MX_DMA_Init+0x48>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6153      	str	r3, [r2, #20]
 8003e36:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <MX_DMA_Init+0x48>)
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	607b      	str	r3, [r7, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8003e42:	2200      	movs	r2, #0
 8003e44:	2105      	movs	r1, #5
 8003e46:	200c      	movs	r0, #12
 8003e48:	f001 fce3 	bl	8005812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003e4c:	200c      	movs	r0, #12
 8003e4e:	f001 fcfc 	bl	800584a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003e52:	2200      	movs	r2, #0
 8003e54:	2105      	movs	r1, #5
 8003e56:	200d      	movs	r0, #13
 8003e58:	f001 fcdb 	bl	8005812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003e5c:	200d      	movs	r0, #13
 8003e5e:	f001 fcf4 	bl	800584a <HAL_NVIC_EnableIRQ>

}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40021000 	.word	0x40021000

08003e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e76:	f107 0310 	add.w	r3, r7, #16
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	605a      	str	r2, [r3, #4]
 8003e80:	609a      	str	r2, [r3, #8]
 8003e82:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e84:	4b23      	ldr	r3, [pc, #140]	; (8003f14 <MX_GPIO_Init+0xa4>)
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	4a22      	ldr	r2, [pc, #136]	; (8003f14 <MX_GPIO_Init+0xa4>)
 8003e8a:	f043 0304 	orr.w	r3, r3, #4
 8003e8e:	6193      	str	r3, [r2, #24]
 8003e90:	4b20      	ldr	r3, [pc, #128]	; (8003f14 <MX_GPIO_Init+0xa4>)
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e9c:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <MX_GPIO_Init+0xa4>)
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	4a1c      	ldr	r2, [pc, #112]	; (8003f14 <MX_GPIO_Init+0xa4>)
 8003ea2:	f043 0310 	orr.w	r3, r3, #16
 8003ea6:	6193      	str	r3, [r2, #24]
 8003ea8:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <MX_GPIO_Init+0xa4>)
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	60bb      	str	r3, [r7, #8]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003eb4:	4b17      	ldr	r3, [pc, #92]	; (8003f14 <MX_GPIO_Init+0xa4>)
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	4a16      	ldr	r2, [pc, #88]	; (8003f14 <MX_GPIO_Init+0xa4>)
 8003eba:	f043 0320 	orr.w	r3, r3, #32
 8003ebe:	6193      	str	r3, [r2, #24]
 8003ec0:	4b14      	ldr	r3, [pc, #80]	; (8003f14 <MX_GPIO_Init+0xa4>)
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	607b      	str	r3, [r7, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ecc:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <MX_GPIO_Init+0xa4>)
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	4a10      	ldr	r2, [pc, #64]	; (8003f14 <MX_GPIO_Init+0xa4>)
 8003ed2:	f043 0308 	orr.w	r3, r3, #8
 8003ed6:	6193      	str	r3, [r2, #24]
 8003ed8:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <MX_GPIO_Init+0xa4>)
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	603b      	str	r3, [r7, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_SD1_GPIO_Port, SS_SD1_Pin, GPIO_PIN_SET);
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	480b      	ldr	r0, [pc, #44]	; (8003f18 <MX_GPIO_Init+0xa8>)
 8003eea:	f002 fa45 	bl	8006378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_SD1_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin;
 8003eee:	2302      	movs	r3, #2
 8003ef0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003efa:	2303      	movs	r3, #3
 8003efc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SS_SD1_GPIO_Port, &GPIO_InitStruct);
 8003efe:	f107 0310 	add.w	r3, r7, #16
 8003f02:	4619      	mov	r1, r3
 8003f04:	4804      	ldr	r0, [pc, #16]	; (8003f18 <MX_GPIO_Init+0xa8>)
 8003f06:	f002 f8a3 	bl	8006050 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003f0a:	bf00      	nop
 8003f0c:	3720      	adds	r7, #32
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40010800 	.word	0x40010800

08003f1c <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */
uint8_t tmp1;
uint8_t tmp2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 if(huart==&SENSOR_UART)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a11      	ldr	r2, [pc, #68]	; (8003f6c <HAL_UART_RxCpltCallback+0x50>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d10b      	bne.n	8003f44 <HAL_UART_RxCpltCallback+0x28>
 {
	 hydroc_media_process_byte(&hydroc_sensor1,hydroc_sensor1.media_rx_byte);
 8003f2c:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <HAL_UART_RxCpltCallback+0x54>)
 8003f2e:	7c1b      	ldrb	r3, [r3, #16]
 8003f30:	4619      	mov	r1, r3
 8003f32:	480f      	ldr	r0, [pc, #60]	; (8003f70 <HAL_UART_RxCpltCallback+0x54>)
 8003f34:	f7fd f960 	bl	80011f8 <hydroc_media_process_byte>
	 HAL_UART_Receive_IT(&SENSOR_UART,&(hydroc_sensor1.media_rx_byte),1);
 8003f38:	2201      	movs	r2, #1
 8003f3a:	490e      	ldr	r1, [pc, #56]	; (8003f74 <HAL_UART_RxCpltCallback+0x58>)
 8003f3c:	480b      	ldr	r0, [pc, #44]	; (8003f6c <HAL_UART_RxCpltCallback+0x50>)
 8003f3e:	f003 fd50 	bl	80079e2 <HAL_UART_Receive_IT>
 else if(huart==&GLIDER_UART)
 {
	 seaglider_media_process_byte(&glider1,glider1.media_rx_byte);
	 HAL_UART_Receive_IT(&GLIDER_UART,&(glider1.media_rx_byte),1);
 }
}
 8003f42:	e00e      	b.n	8003f62 <HAL_UART_RxCpltCallback+0x46>
 else if(huart==&GLIDER_UART)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a0c      	ldr	r2, [pc, #48]	; (8003f78 <HAL_UART_RxCpltCallback+0x5c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d10a      	bne.n	8003f62 <HAL_UART_RxCpltCallback+0x46>
	 seaglider_media_process_byte(&glider1,glider1.media_rx_byte);
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_UART_RxCpltCallback+0x60>)
 8003f4e:	7c1b      	ldrb	r3, [r3, #16]
 8003f50:	4619      	mov	r1, r3
 8003f52:	480a      	ldr	r0, [pc, #40]	; (8003f7c <HAL_UART_RxCpltCallback+0x60>)
 8003f54:	f000 fc99 	bl	800488a <seaglider_media_process_byte>
	 HAL_UART_Receive_IT(&GLIDER_UART,&(glider1.media_rx_byte),1);
 8003f58:	2201      	movs	r2, #1
 8003f5a:	4909      	ldr	r1, [pc, #36]	; (8003f80 <HAL_UART_RxCpltCallback+0x64>)
 8003f5c:	4806      	ldr	r0, [pc, #24]	; (8003f78 <HAL_UART_RxCpltCallback+0x5c>)
 8003f5e:	f003 fd40 	bl	80079e2 <HAL_UART_Receive_IT>
}
 8003f62:	bf00      	nop
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	2000156c 	.word	0x2000156c
 8003f70:	20001a30 	.word	0x20001a30
 8003f74:	20001a40 	.word	0x20001a40
 8003f78:	20001528 	.word	0x20001528
 8003f7c:	200015f0 	.word	0x200015f0
 8003f80:	20001600 	.word	0x20001600

08003f84 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]

 if(huart==&SENSOR_UART)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a18      	ldr	r2, [pc, #96]	; (8003ff0 <HAL_UART_TxCpltCallback+0x6c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d112      	bne.n	8003fba <HAL_UART_TxCpltCallback+0x36>
 {
	 if(hydroc_media_get_byte(&hydroc_sensor1,&tmp2)==HYDROC_F_OK)
 8003f94:	4917      	ldr	r1, [pc, #92]	; (8003ff4 <HAL_UART_TxCpltCallback+0x70>)
 8003f96:	4818      	ldr	r0, [pc, #96]	; (8003ff8 <HAL_UART_TxCpltCallback+0x74>)
 8003f98:	f7fd f9c7 	bl	800132a <hydroc_media_get_byte>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d105      	bne.n	8003fae <HAL_UART_TxCpltCallback+0x2a>
	 {
	    HAL_UART_Transmit_IT(&SENSOR_UART,&tmp2,1);
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	4913      	ldr	r1, [pc, #76]	; (8003ff4 <HAL_UART_TxCpltCallback+0x70>)
 8003fa6:	4812      	ldr	r0, [pc, #72]	; (8003ff0 <HAL_UART_TxCpltCallback+0x6c>)
 8003fa8:	f003 fcd7 	bl	800795a <HAL_UART_Transmit_IT>
	 {
	    HAL_UART_Transmit_IT(&GLIDER_UART,&tmp1,1);
	 }
	 else osSemaphoreRelease(seaglider_uart_media_semHandle);
 }
}
 8003fac:	e01b      	b.n	8003fe6 <HAL_UART_TxCpltCallback+0x62>
	 else osSemaphoreRelease(hydroc_uart_media_semHandle);
 8003fae:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <HAL_UART_TxCpltCallback+0x78>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f009 fd3a 	bl	800da2c <osSemaphoreRelease>
}
 8003fb8:	e015      	b.n	8003fe6 <HAL_UART_TxCpltCallback+0x62>
 else if(huart==&GLIDER_UART)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a10      	ldr	r2, [pc, #64]	; (8004000 <HAL_UART_TxCpltCallback+0x7c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d111      	bne.n	8003fe6 <HAL_UART_TxCpltCallback+0x62>
	 if(seaglider_media_get_byte(&glider1,&tmp1)==SEAGLIDER_F_OK)
 8003fc2:	4910      	ldr	r1, [pc, #64]	; (8004004 <HAL_UART_TxCpltCallback+0x80>)
 8003fc4:	4810      	ldr	r0, [pc, #64]	; (8004008 <HAL_UART_TxCpltCallback+0x84>)
 8003fc6:	f000 fce0 	bl	800498a <seaglider_media_get_byte>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d105      	bne.n	8003fdc <HAL_UART_TxCpltCallback+0x58>
	    HAL_UART_Transmit_IT(&GLIDER_UART,&tmp1,1);
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	490c      	ldr	r1, [pc, #48]	; (8004004 <HAL_UART_TxCpltCallback+0x80>)
 8003fd4:	480a      	ldr	r0, [pc, #40]	; (8004000 <HAL_UART_TxCpltCallback+0x7c>)
 8003fd6:	f003 fcc0 	bl	800795a <HAL_UART_Transmit_IT>
}
 8003fda:	e004      	b.n	8003fe6 <HAL_UART_TxCpltCallback+0x62>
	 else osSemaphoreRelease(seaglider_uart_media_semHandle);
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <HAL_UART_TxCpltCallback+0x88>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f009 fd23 	bl	800da2c <osSemaphoreRelease>
}
 8003fe6:	bf00      	nop
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	2000156c 	.word	0x2000156c
 8003ff4:	200027e5 	.word	0x200027e5
 8003ff8:	20001a30 	.word	0x20001a30
 8003ffc:	200015e8 	.word	0x200015e8
 8004000:	20001528 	.word	0x20001528
 8004004:	200027e4 	.word	0x200027e4
 8004008:	200015f0 	.word	0x200015f0
 800400c:	200015e4 	.word	0x200015e4

08004010 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  seaglider_init(&glider1,events_qHandle,seaglider_uart_q_semHandle);
 8004018:	4b14      	ldr	r3, [pc, #80]	; (800406c <StartDefaultTask+0x5c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a14      	ldr	r2, [pc, #80]	; (8004070 <StartDefaultTask+0x60>)
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	4619      	mov	r1, r3
 8004022:	4814      	ldr	r0, [pc, #80]	; (8004074 <StartDefaultTask+0x64>)
 8004024:	f000 fbc0 	bl	80047a8 <seaglider_init>
  HAL_UART_Receive_IT(&GLIDER_UART,&(glider1.media_rx_byte),1);
 8004028:	2201      	movs	r2, #1
 800402a:	4913      	ldr	r1, [pc, #76]	; (8004078 <StartDefaultTask+0x68>)
 800402c:	4813      	ldr	r0, [pc, #76]	; (800407c <StartDefaultTask+0x6c>)
 800402e:	f003 fcd8 	bl	80079e2 <HAL_UART_Receive_IT>

  hydroc_init(&hydroc_sensor1,events_qHandle,hydroc_uart_q_semHandle);
 8004032:	4b0e      	ldr	r3, [pc, #56]	; (800406c <StartDefaultTask+0x5c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a12      	ldr	r2, [pc, #72]	; (8004080 <StartDefaultTask+0x70>)
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	4619      	mov	r1, r3
 800403c:	4811      	ldr	r0, [pc, #68]	; (8004084 <StartDefaultTask+0x74>)
 800403e:	f7fd f84f 	bl	80010e0 <hydroc_init>
  HAL_UART_Receive_IT(&SENSOR_UART,&(hydroc_sensor1.media_rx_byte),1);
 8004042:	2201      	movs	r2, #1
 8004044:	4910      	ldr	r1, [pc, #64]	; (8004088 <StartDefaultTask+0x78>)
 8004046:	4811      	ldr	r0, [pc, #68]	; (800408c <StartDefaultTask+0x7c>)
 8004048:	f003 fccb 	bl	80079e2 <HAL_UART_Receive_IT>

  disp_proc_init(&dispatcher1,worker_cmd_qHandle,events_qHandle);
 800404c:	4b10      	ldr	r3, [pc, #64]	; (8004090 <StartDefaultTask+0x80>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a06      	ldr	r2, [pc, #24]	; (800406c <StartDefaultTask+0x5c>)
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	4619      	mov	r1, r3
 8004056:	480f      	ldr	r0, [pc, #60]	; (8004094 <StartDefaultTask+0x84>)
 8004058:	f7fd ff64 	bl	8001f24 <disp_proc_init>
  disp_proc_loop(&dispatcher1);
 800405c:	480d      	ldr	r0, [pc, #52]	; (8004094 <StartDefaultTask+0x84>)
 800405e:	f7fe f831 	bl	80020c4 <disp_proc_loop>

  /* USER CODE END 5 */
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	200015d8 	.word	0x200015d8
 8004070:	200015dc 	.word	0x200015dc
 8004074:	200015f0 	.word	0x200015f0
 8004078:	20001600 	.word	0x20001600
 800407c:	20001528 	.word	0x20001528
 8004080:	200015e0 	.word	0x200015e0
 8004084:	20001a30 	.word	0x20001a30
 8004088:	20001a40 	.word	0x20001a40
 800408c:	2000156c 	.word	0x2000156c
 8004090:	200015d4 	.word	0x200015d4
 8004094:	20002630 	.word	0x20002630

08004098 <glider_uart_tx_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_glider_uart_tx_f */
void glider_uart_tx_f(void const * argument)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN glider_uart_tx_f */
  /* Infinite loop */
  uint8_t tmp1;
  glider1.media_status=SEAGLIDER_MEDIA_READY;
 80040a0:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <glider_uart_tx_f+0x50>)
 80040a2:	220a      	movs	r2, #10
 80040a4:	745a      	strb	r2, [r3, #17]
#ifdef DEBUG_MSG
  HAL_UART_Transmit_IT(&GLIDER_UART,"G",1);
#endif
  for(;;)
  {
	osSemaphoreWait(seaglider_uart_media_semHandle,osWaitForever);
 80040a6:	4b11      	ldr	r3, [pc, #68]	; (80040ec <glider_uart_tx_f+0x54>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f04f 31ff 	mov.w	r1, #4294967295
 80040ae:	4618      	mov	r0, r3
 80040b0:	f009 fc6e 	bl	800d990 <osSemaphoreWait>
	if(seaglider_media_get_byte(&glider1,&tmp1)==SEAGLIDER_F_OK) HAL_UART_Transmit_IT(&GLIDER_UART,&tmp1,1);
 80040b4:	f107 030f 	add.w	r3, r7, #15
 80040b8:	4619      	mov	r1, r3
 80040ba:	480b      	ldr	r0, [pc, #44]	; (80040e8 <glider_uart_tx_f+0x50>)
 80040bc:	f000 fc65 	bl	800498a <seaglider_media_get_byte>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d107      	bne.n	80040d6 <glider_uart_tx_f+0x3e>
 80040c6:	f107 030f 	add.w	r3, r7, #15
 80040ca:	2201      	movs	r2, #1
 80040cc:	4619      	mov	r1, r3
 80040ce:	4808      	ldr	r0, [pc, #32]	; (80040f0 <glider_uart_tx_f+0x58>)
 80040d0:	f003 fc43 	bl	800795a <HAL_UART_Transmit_IT>
 80040d4:	e004      	b.n	80040e0 <glider_uart_tx_f+0x48>
	else osSemaphoreRelease(seaglider_uart_media_semHandle);
 80040d6:	4b05      	ldr	r3, [pc, #20]	; (80040ec <glider_uart_tx_f+0x54>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f009 fca6 	bl	800da2c <osSemaphoreRelease>
	osDelay(1);
 80040e0:	2001      	movs	r0, #1
 80040e2:	f009 fc0e 	bl	800d902 <osDelay>
	osSemaphoreWait(seaglider_uart_media_semHandle,osWaitForever);
 80040e6:	e7de      	b.n	80040a6 <glider_uart_tx_f+0xe>
 80040e8:	200015f0 	.word	0x200015f0
 80040ec:	200015e4 	.word	0x200015e4
 80040f0:	20001528 	.word	0x20001528

080040f4 <worker_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_worker_f */
void worker_f(void const * argument)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN worker_f */
  /* Infinite loop */
  for(;;)
  {
		osEvent res=osMessageGet(worker_cmd_qHandle,osWaitForever);
 80040fc:	4b08      	ldr	r3, [pc, #32]	; (8004120 <worker_f+0x2c>)
 80040fe:	6819      	ldr	r1, [r3, #0]
 8004100:	f107 030c 	add.w	r3, r7, #12
 8004104:	f04f 32ff 	mov.w	r2, #4294967295
 8004108:	4618      	mov	r0, r3
 800410a:	f009 fd2d 	bl	800db68 <osMessageGet>
		if(res.status==osEventMessage){
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b10      	cmp	r3, #16
 8004112:	d1f3      	bne.n	80040fc <worker_f+0x8>
			disp_proc_execute(&dispatcher1,res.value.v);
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4619      	mov	r1, r3
 8004118:	4802      	ldr	r0, [pc, #8]	; (8004124 <worker_f+0x30>)
 800411a:	f7fd ffa2 	bl	8002062 <disp_proc_execute>
  {
 800411e:	e7ed      	b.n	80040fc <worker_f+0x8>
 8004120:	200015d4 	.word	0x200015d4
 8004124:	20002630 	.word	0x20002630

08004128 <hydroc_uart_tx_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_hydroc_uart_tx_f */
void hydroc_uart_tx_f(void const * argument)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN hydroc_uart_tx_f */
  /* Infinite loop */
  uint8_t tmp1;
  hydroc_sensor1.media_status=HYDROC_MEDIA_READY;
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <hydroc_uart_tx_f+0x50>)
 8004132:	2201      	movs	r2, #1
 8004134:	74da      	strb	r2, [r3, #19]
#ifdef DEBUG_MSG
  HAL_UART_Transmit_IT(&SENSOR_UART,"S",1);
#endif
  for(;;)
  {
	osSemaphoreWait(hydroc_uart_media_semHandle,osWaitForever);
 8004136:	4b11      	ldr	r3, [pc, #68]	; (800417c <hydroc_uart_tx_f+0x54>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f04f 31ff 	mov.w	r1, #4294967295
 800413e:	4618      	mov	r0, r3
 8004140:	f009 fc26 	bl	800d990 <osSemaphoreWait>
	if(hydroc_media_get_byte(&hydroc_sensor1,&tmp1)==HYDROC_F_OK) HAL_UART_Transmit_IT(&SENSOR_UART,&tmp1,1);
 8004144:	f107 030f 	add.w	r3, r7, #15
 8004148:	4619      	mov	r1, r3
 800414a:	480b      	ldr	r0, [pc, #44]	; (8004178 <hydroc_uart_tx_f+0x50>)
 800414c:	f7fd f8ed 	bl	800132a <hydroc_media_get_byte>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d107      	bne.n	8004166 <hydroc_uart_tx_f+0x3e>
 8004156:	f107 030f 	add.w	r3, r7, #15
 800415a:	2201      	movs	r2, #1
 800415c:	4619      	mov	r1, r3
 800415e:	4808      	ldr	r0, [pc, #32]	; (8004180 <hydroc_uart_tx_f+0x58>)
 8004160:	f003 fbfb 	bl	800795a <HAL_UART_Transmit_IT>
 8004164:	e004      	b.n	8004170 <hydroc_uart_tx_f+0x48>
	else osSemaphoreRelease(hydroc_uart_media_semHandle);
 8004166:	4b05      	ldr	r3, [pc, #20]	; (800417c <hydroc_uart_tx_f+0x54>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f009 fc5e 	bl	800da2c <osSemaphoreRelease>
	osDelay(1);
 8004170:	2001      	movs	r0, #1
 8004172:	f009 fbc6 	bl	800d902 <osDelay>
	osSemaphoreWait(hydroc_uart_media_semHandle,osWaitForever);
 8004176:	e7de      	b.n	8004136 <hydroc_uart_tx_f+0xe>
 8004178:	20001a30 	.word	0x20001a30
 800417c:	200015e8 	.word	0x200015e8
 8004180:	2000156c 	.word	0x2000156c

08004184 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a04      	ldr	r2, [pc, #16]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d101      	bne.n	800419a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004196:	f001 fa6b 	bl	8005670 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40012c00 	.word	0x40012c00

080041a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041ac:	b672      	cpsid	i
}
 80041ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041b0:	e7fe      	b.n	80041b0 <Error_Handler+0x8>
	...

080041b4 <usMBCRC16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
    0x41, 0x81, 0x80, 0x40
};

int16_t usMBCRC16( uint8_t * pucFrame, uint32_t usLen )
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
    int8_t           ucCRCHi = 0xFF;
 80041be:	23ff      	movs	r3, #255	; 0xff
 80041c0:	73fb      	strb	r3, [r7, #15]
    int8_t           ucCRCLo = 0xFF;
 80041c2:	23ff      	movs	r3, #255	; 0xff
 80041c4:	73bb      	strb	r3, [r7, #14]
    int              iIndex;

    while( usLen-- )
 80041c6:	e014      	b.n	80041f2 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 80041c8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	1c59      	adds	r1, r3, #1
 80041d0:	6079      	str	r1, [r7, #4]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	4053      	eors	r3, r2
 80041d6:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( int8_t )( ucCRCHi ^ aucCRCHi[iIndex] );
 80041d8:	4a0f      	ldr	r2, [pc, #60]	; (8004218 <usMBCRC16+0x64>)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	4413      	add	r3, r2
 80041de:	f993 2000 	ldrsb.w	r2, [r3]
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	4053      	eors	r3, r2
 80041e6:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 80041e8:	4a0c      	ldr	r2, [pc, #48]	; (800421c <usMBCRC16+0x68>)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4413      	add	r3, r2
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	1e5a      	subs	r2, r3, #1
 80041f6:	603a      	str	r2, [r7, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e5      	bne.n	80041c8 <usMBCRC16+0x14>
    }
    return ( int16_t )( ucCRCHi << 8 | ucCRCLo );
 80041fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004200:	021b      	lsls	r3, r3, #8
 8004202:	b21a      	sxth	r2, r3
 8004204:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004208:	b21b      	sxth	r3, r3
 800420a:	4313      	orrs	r3, r2
 800420c:	b21b      	sxth	r3, r3
}
 800420e:	4618      	mov	r0, r3
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr
 8004218:	08014538 	.word	0x08014538
 800421c:	08014638 	.word	0x08014638

08004220 <sd_ss_set_active>:
extern volatile uint16_t htim2;

uint8_t spi_rx_buffer[512];

void sd_ss_set_active(uint8_t drv)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	71fb      	strb	r3, [r7, #7]
  active_sd_ss_pin=sd_cards_ss[drv].sd_ss_pin;
 800422a:	79fa      	ldrb	r2, [r7, #7]
 800422c:	4916      	ldr	r1, [pc, #88]	; (8004288 <sd_ss_set_active+0x68>)
 800422e:	4613      	mov	r3, r2
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	881a      	ldrh	r2, [r3, #0]
 800423a:	4b14      	ldr	r3, [pc, #80]	; (800428c <sd_ss_set_active+0x6c>)
 800423c:	801a      	strh	r2, [r3, #0]
  active_sd_ss_port=sd_cards_ss[drv].sd_ss_port;
 800423e:	79fa      	ldrb	r2, [r7, #7]
 8004240:	4911      	ldr	r1, [pc, #68]	; (8004288 <sd_ss_set_active+0x68>)
 8004242:	4613      	mov	r3, r2
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	440b      	add	r3, r1
 800424c:	3304      	adds	r3, #4
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a0f      	ldr	r2, [pc, #60]	; (8004290 <sd_ss_set_active+0x70>)
 8004252:	6013      	str	r3, [r2, #0]
  sdinfo=&sd_cards_ss[drv].sdinfo;
 8004254:	79fa      	ldrb	r2, [r7, #7]
 8004256:	4613      	mov	r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	3308      	adds	r3, #8
 8004260:	4a09      	ldr	r2, [pc, #36]	; (8004288 <sd_ss_set_active+0x68>)
 8004262:	4413      	add	r3, r2
 8004264:	4a0b      	ldr	r2, [pc, #44]	; (8004294 <sd_ss_set_active+0x74>)
 8004266:	6013      	str	r3, [r2, #0]
  Stat = &sd_cards_ss[drv].Stat;
 8004268:	79fa      	ldrb	r2, [r7, #7]
 800426a:	4613      	mov	r3, r2
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	3308      	adds	r3, #8
 8004274:	4a04      	ldr	r2, [pc, #16]	; (8004288 <sd_ss_set_active+0x68>)
 8004276:	4413      	add	r3, r2
 8004278:	3301      	adds	r3, #1
 800427a:	4a07      	ldr	r2, [pc, #28]	; (8004298 <sd_ss_set_active+0x78>)
 800427c:	6013      	str	r3, [r2, #0]
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr
 8004288:	200027f4 	.word	0x200027f4
 800428c:	200027ec 	.word	0x200027ec
 8004290:	200027f0 	.word	0x200027f0
 8004294:	200027e8 	.word	0x200027e8
 8004298:	20002ae8 	.word	0x20002ae8

0800429c <sd_ss_active_pin_down>:

void sd_ss_active_pin_down()
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_RESET);
 80042a0:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <sd_ss_active_pin_down+0x18>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <sd_ss_active_pin_down+0x1c>)
 80042a6:	8811      	ldrh	r1, [r2, #0]
 80042a8:	2200      	movs	r2, #0
 80042aa:	4618      	mov	r0, r3
 80042ac:	f002 f864 	bl	8006378 <HAL_GPIO_WritePin>
}
 80042b0:	bf00      	nop
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	200027f0 	.word	0x200027f0
 80042b8:	200027ec 	.word	0x200027ec

080042bc <sd_ss_active_pin_up>:
void sd_ss_active_pin_up()
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_SET);
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <sd_ss_active_pin_up+0x18>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a04      	ldr	r2, [pc, #16]	; (80042d8 <sd_ss_active_pin_up+0x1c>)
 80042c6:	8811      	ldrh	r1, [r2, #0]
 80042c8:	2201      	movs	r2, #1
 80042ca:	4618      	mov	r0, r3
 80042cc:	f002 f854 	bl	8006378 <HAL_GPIO_WritePin>
}
 80042d0:	bf00      	nop
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	200027f0 	.word	0x200027f0
 80042d8:	200027ec 	.word	0x200027ec

080042dc <SD_cmd>:


//-----------------------------------------------

static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	6039      	str	r1, [r7, #0]
 80042e6:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
  // ACMD<n> is the command sequense of CMD55-CMD<n>
  if (cmd & 0x80)
 80042e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	da0e      	bge.n	800430e <SD_cmd+0x32>
  {
    cmd &= 0x7F;
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042f6:	71fb      	strb	r3, [r7, #7]
    res = SD_cmd(CMD55, 0);
 80042f8:	2100      	movs	r1, #0
 80042fa:	2077      	movs	r0, #119	; 0x77
 80042fc:	f7ff ffee 	bl	80042dc <SD_cmd>
 8004300:	4603      	mov	r3, r0
 8004302:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 8004304:	7bbb      	ldrb	r3, [r7, #14]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d901      	bls.n	800430e <SD_cmd+0x32>
 800430a:	7bbb      	ldrb	r3, [r7, #14]
 800430c:	e03b      	b.n	8004386 <SD_cmd+0xaa>
  //SPI_ReceiveByte();

  //SS_SD_SELECT();
  //SPI_ReceiveByte();
  // Send a command packet
  SPI_SendByte(cmd); // Start + Command index
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	4618      	mov	r0, r3
 8004312:	f000 f961 	bl	80045d8 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	0e1b      	lsrs	r3, r3, #24
 800431a:	b2db      	uxtb	r3, r3
 800431c:	4618      	mov	r0, r3
 800431e:	f000 f95b 	bl	80045d8 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	0c1b      	lsrs	r3, r3, #16
 8004326:	b2db      	uxtb	r3, r3
 8004328:	4618      	mov	r0, r3
 800432a:	f000 f955 	bl	80045d8 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	0a1b      	lsrs	r3, r3, #8
 8004332:	b2db      	uxtb	r3, r3
 8004334:	4618      	mov	r0, r3
 8004336:	f000 f94f 	bl	80045d8 <SPI_SendByte>
  SPI_SendByte((uint8_t)arg); // Argument[7..0]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f94a 	bl	80045d8 <SPI_SendByte>

  n = 0x01; // Dummy CRC + Stop
 8004344:	2301      	movs	r3, #1
 8004346:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	2b40      	cmp	r3, #64	; 0x40
 800434c:	d101      	bne.n	8004352 <SD_cmd+0x76>
 800434e:	2395      	movs	r3, #149	; 0x95
 8004350:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	2b48      	cmp	r3, #72	; 0x48
 8004356:	d101      	bne.n	800435c <SD_cmd+0x80>
 8004358:	2387      	movs	r3, #135	; 0x87
 800435a:	73fb      	strb	r3, [r7, #15]
  SPI_SendByte(n);
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	4618      	mov	r0, r3
 8004360:	f000 f93a 	bl	80045d8 <SPI_SendByte>
  // Receive a command response
  n = 10; // Wait for a valid response in timeout of 10 attempts
 8004364:	230a      	movs	r3, #10
 8004366:	73fb      	strb	r3, [r7, #15]
  do {
    res = SPI_ReceiveByte();
 8004368:	f000 f943 	bl	80045f2 <SPI_ReceiveByte>
 800436c:	4603      	mov	r3, r0
 800436e:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 8004370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004374:	2b00      	cmp	r3, #0
 8004376:	da05      	bge.n	8004384 <SD_cmd+0xa8>
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	3b01      	subs	r3, #1
 800437c:	73fb      	strb	r3, [r7, #15]
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1f1      	bne.n	8004368 <SD_cmd+0x8c>
  return res;
 8004384:	7bbb      	ldrb	r3, [r7, #14]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <sd_ini>:

uint8_t sd_ini(void)
{
 8004390:	b590      	push	{r4, r7, lr}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
	  uint8_t i, cmd;
	  uint8_t ocr[4];
	  int16_t tmr;

	  uint8_t n = 5;
 8004396:	2305      	movs	r3, #5
 8004398:	72fb      	strb	r3, [r7, #11]
	  uint8_t res;

	  //LD_OFF;
	  sdinfo->type = 0;
 800439a:	4b5d      	ldr	r3, [pc, #372]	; (8004510 <sd_ini+0x180>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2200      	movs	r2, #0
 80043a0:	701a      	strb	r2, [r3, #0]

	  do {
	      res = SD_cmd(CMD0, 0);
 80043a2:	2100      	movs	r1, #0
 80043a4:	2040      	movs	r0, #64	; 0x40
 80043a6:	f7ff ff99 	bl	80042dc <SD_cmd>
 80043aa:	4603      	mov	r3, r0
 80043ac:	72bb      	strb	r3, [r7, #10]
	  } while ((res != 1) && --n);
 80043ae:	7abb      	ldrb	r3, [r7, #10]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d005      	beq.n	80043c0 <sd_ini+0x30>
 80043b4:	7afb      	ldrb	r3, [r7, #11]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	72fb      	strb	r3, [r7, #11]
 80043ba:	7afb      	ldrb	r3, [r7, #11]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1f0      	bne.n	80043a2 <sd_ini+0x12>

	  if (res == 1) // Enter Idle state
 80043c0:	7abb      	ldrb	r3, [r7, #10]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	f040 809f 	bne.w	8004506 <sd_ini+0x176>
	  {
		  SPI_Release();
 80043c8:	f000 f920 	bl	800460c <SPI_Release>
		  if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 80043cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80043d0:	2048      	movs	r0, #72	; 0x48
 80043d2:	f7ff ff83 	bl	80042dc <SD_cmd>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d158      	bne.n	800448e <sd_ini+0xfe>
		  {
			  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 80043dc:	2300      	movs	r3, #0
 80043de:	73fb      	strb	r3, [r7, #15]
 80043e0:	e00c      	b.n	80043fc <sd_ini+0x6c>
 80043e2:	7bfc      	ldrb	r4, [r7, #15]
 80043e4:	f000 f905 	bl	80045f2 <SPI_ReceiveByte>
 80043e8:	4603      	mov	r3, r0
 80043ea:	461a      	mov	r2, r3
 80043ec:	f104 0310 	add.w	r3, r4, #16
 80043f0:	443b      	add	r3, r7
 80043f2:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	3301      	adds	r3, #1
 80043fa:	73fb      	strb	r3, [r7, #15]
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d9ef      	bls.n	80043e2 <sd_ini+0x52>

			    // Get trailing return value of R7 resp
			    if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8004402:	79bb      	ldrb	r3, [r7, #6]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d17c      	bne.n	8004502 <sd_ini+0x172>
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	2baa      	cmp	r3, #170	; 0xaa
 800440c:	d179      	bne.n	8004502 <sd_ini+0x172>
			    {
			    	for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 800440e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8004412:	81bb      	strh	r3, [r7, #12]
 8004414:	e005      	b.n	8004422 <sd_ini+0x92>
 8004416:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29b      	uxth	r3, r3
 8004420:	81bb      	strh	r3, [r7, #12]
 8004422:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d007      	beq.n	800443a <sd_ini+0xaa>
 800442a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800442e:	20e9      	movs	r0, #233	; 0xe9
 8004430:	f7ff ff54 	bl	80042dc <SD_cmd>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1ed      	bne.n	8004416 <sd_ini+0x86>
			    	    ; // Wait for leaving idle state (ACMD41 with HCS bit)
			    	if (tmr && SD_cmd(CMD58, 0) == 0)
 800443a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d05f      	beq.n	8004502 <sd_ini+0x172>
 8004442:	2100      	movs	r1, #0
 8004444:	207a      	movs	r0, #122	; 0x7a
 8004446:	f7ff ff49 	bl	80042dc <SD_cmd>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d158      	bne.n	8004502 <sd_ini+0x172>
			    	 { // Check CCS bit in the OCR
			    	  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8004450:	2300      	movs	r3, #0
 8004452:	73fb      	strb	r3, [r7, #15]
 8004454:	e00c      	b.n	8004470 <sd_ini+0xe0>
 8004456:	7bfc      	ldrb	r4, [r7, #15]
 8004458:	f000 f8cb 	bl	80045f2 <SPI_ReceiveByte>
 800445c:	4603      	mov	r3, r0
 800445e:	461a      	mov	r2, r3
 8004460:	f104 0310 	add.w	r3, r4, #16
 8004464:	443b      	add	r3, r7
 8004466:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800446a:	7bfb      	ldrb	r3, [r7, #15]
 800446c:	3301      	adds	r3, #1
 800446e:	73fb      	strb	r3, [r7, #15]
 8004470:	7bfb      	ldrb	r3, [r7, #15]
 8004472:	2b03      	cmp	r3, #3
 8004474:	d9ef      	bls.n	8004456 <sd_ini+0xc6>
			     	   sdinfo->type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8004476:	793b      	ldrb	r3, [r7, #4]
 8004478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <sd_ini+0xf4>
 8004480:	220c      	movs	r2, #12
 8004482:	e000      	b.n	8004486 <sd_ini+0xf6>
 8004484:	2204      	movs	r2, #4
 8004486:	4b22      	ldr	r3, [pc, #136]	; (8004510 <sd_ini+0x180>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	701a      	strb	r2, [r3, #0]
 800448c:	e039      	b.n	8004502 <sd_ini+0x172>
			    	}
			    }
		  }
		  else //SDv1 or MMCv3
		  {
			  if (SD_cmd(ACMD41, 0) <= 1)
 800448e:	2100      	movs	r1, #0
 8004490:	20e9      	movs	r0, #233	; 0xe9
 8004492:	f7ff ff23 	bl	80042dc <SD_cmd>
 8004496:	4603      	mov	r3, r0
 8004498:	2b01      	cmp	r3, #1
 800449a:	d806      	bhi.n	80044aa <sd_ini+0x11a>
			    {
			      sdinfo->type = CT_SD1; cmd = ACMD41; // SDv1
 800449c:	4b1c      	ldr	r3, [pc, #112]	; (8004510 <sd_ini+0x180>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2202      	movs	r2, #2
 80044a2:	701a      	strb	r2, [r3, #0]
 80044a4:	23e9      	movs	r3, #233	; 0xe9
 80044a6:	73bb      	strb	r3, [r7, #14]
 80044a8:	e005      	b.n	80044b6 <sd_ini+0x126>
			    }
			    else
			    {
			      sdinfo->type = CT_MMC; cmd = CMD1; // MMCv3
 80044aa:	4b19      	ldr	r3, [pc, #100]	; (8004510 <sd_ini+0x180>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2201      	movs	r2, #1
 80044b0:	701a      	strb	r2, [r3, #0]
 80044b2:	2341      	movs	r3, #65	; 0x41
 80044b4:	73bb      	strb	r3, [r7, #14]
			    }
			    for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 80044b6:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80044ba:	81bb      	strh	r3, [r7, #12]
 80044bc:	e005      	b.n	80044ca <sd_ini+0x13a>
 80044be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	81bb      	strh	r3, [r7, #12]
 80044ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d007      	beq.n	80044e2 <sd_ini+0x152>
 80044d2:	7bbb      	ldrb	r3, [r7, #14]
 80044d4:	2100      	movs	r1, #0
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff ff00 	bl	80042dc <SD_cmd>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1ed      	bne.n	80044be <sd_ini+0x12e>
			    if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 80044e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <sd_ini+0x16a>
 80044ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044ee:	2050      	movs	r0, #80	; 0x50
 80044f0:	f7ff fef4 	bl	80042dc <SD_cmd>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <sd_ini+0x172>
			    sdinfo->type = 0;
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <sd_ini+0x180>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2200      	movs	r2, #0
 8004500:	701a      	strb	r2, [r3, #0]
		  }

		  return 0;
 8004502:	2300      	movs	r3, #0
 8004504:	e000      	b.n	8004508 <sd_ini+0x178>
	  }

	  return 1;
 8004506:	2301      	movs	r3, #1

}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	bd90      	pop	{r4, r7, pc}
 8004510:	200027e8 	.word	0x200027e8

08004514 <Error>:

static void Error (void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  //LD_ON;
}
 8004518:	bf00      	nop
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr

08004520 <SPI_wait_ready>:

uint8_t SPI_wait_ready(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 8004526:	2300      	movs	r3, #0
 8004528:	80fb      	strh	r3, [r7, #6]
  do {
    res=SPI_ReceiveByte();
 800452a:	f000 f862 	bl	80045f2 <SPI_ReceiveByte>
 800452e:	4603      	mov	r3, r0
 8004530:	717b      	strb	r3, [r7, #5]
    cnt++;
 8004532:	88fb      	ldrh	r3, [r7, #6]
 8004534:	3301      	adds	r3, #1
 8004536:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 8004538:	797b      	ldrb	r3, [r7, #5]
 800453a:	2bff      	cmp	r3, #255	; 0xff
 800453c:	d004      	beq.n	8004548 <SPI_wait_ready+0x28>
 800453e:	88fb      	ldrh	r3, [r7, #6]
 8004540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004544:	4293      	cmp	r3, r2
 8004546:	d1f0      	bne.n	800452a <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 8004548:	88fb      	ldrh	r3, [r7, #6]
 800454a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800454e:	4293      	cmp	r3, r2
 8004550:	d101      	bne.n	8004556 <SPI_wait_ready+0x36>
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <SPI_wait_ready+0x38>
  return res;
 8004556:	797b      	ldrb	r3, [r7, #5]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <SPIx_Write_Multi>:
{
	if(HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_READY) return F_OK;
	else return F_ERR;
}
F_RES SPIx_Write_Multi(uint8_t* tx_buf,uint32_t size)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af02      	add	r7, sp, #8
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
	if(HAL_SPI_TransmitReceive(&hspi1, tx_buf, spi_rx_buffer, size,HAL_MAX_DELAY)==HAL_OK) return F_OK;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f04f 32ff 	mov.w	r2, #4294967295
 8004572:	9200      	str	r2, [sp, #0]
 8004574:	4a07      	ldr	r2, [pc, #28]	; (8004594 <SPIx_Write_Multi+0x34>)
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4807      	ldr	r0, [pc, #28]	; (8004598 <SPIx_Write_Multi+0x38>)
 800457a:	f002 fbe5 	bl	8006d48 <HAL_SPI_TransmitReceive>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <SPIx_Write_Multi+0x28>
 8004584:	2300      	movs	r3, #0
 8004586:	e000      	b.n	800458a <SPIx_Write_Multi+0x2a>
		else return F_ERR;
 8004588:	2301      	movs	r3, #1
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20002824 	.word	0x20002824
 8004598:	20001448 	.word	0x20001448

0800459c <SPIx_WriteRead>:
	if(HAL_SPI_Transmit_DMA(&hspi1, tx_buf, size)==HAL_OK) return F_OK;
	else return F_ERR;
}

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	4603      	mov	r3, r0
 80045a4:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 80045aa:	f107 020f 	add.w	r2, r7, #15
 80045ae:	1df9      	adds	r1, r7, #7
 80045b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	2301      	movs	r3, #1
 80045b8:	4806      	ldr	r0, [pc, #24]	; (80045d4 <SPIx_WriteRead+0x38>)
 80045ba:	f002 fbc5 	bl	8006d48 <HAL_SPI_TransmitReceive>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <SPIx_WriteRead+0x2c>
  {
    Error();
 80045c4:	f7ff ffa6 	bl	8004514 <Error>
  }
  return receivedbyte;
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20001448 	.word	0x20001448

080045d8 <SPI_SendByte>:

void SPI_SendByte(uint8_t bt)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff ffd9 	bl	800459c <SPIx_WriteRead>
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <SPI_ReceiveByte>:

uint8_t SPI_ReceiveByte(void)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 80045f8:	20ff      	movs	r0, #255	; 0xff
 80045fa:	f7ff ffcf 	bl	800459c <SPIx_WriteRead>
 80045fe:	4603      	mov	r3, r0
 8004600:	71fb      	strb	r3, [r7, #7]
  return bt;
 8004602:	79fb      	ldrb	r3, [r7, #7]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <SPI_Release>:
void SPI_Release(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8004610:	20ff      	movs	r0, #255	; 0xff
 8004612:	f7ff ffc3 	bl	800459c <SPIx_WriteRead>
}
 8004616:	bf00      	nop
 8004618:	bd80      	pop	{r7, pc}

0800461a <SD_Read_Block>:

uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 800461a:	b590      	push	{r4, r7, lr}
 800461c:	b085      	sub	sp, #20
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;

  result=SD_cmd (CMD17, lba);
 8004624:	6839      	ldr	r1, [r7, #0]
 8004626:	2051      	movs	r0, #81	; 0x51
 8004628:	f7ff fe58 	bl	80042dc <SD_cmd>
 800462c:	4603      	mov	r3, r0
 800462e:	737b      	strb	r3, [r7, #13]
  if (result!=0x00){
 8004630:	7b7b      	ldrb	r3, [r7, #13]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <SD_Read_Block+0x20>
	  return 5;
 8004636:	2305      	movs	r3, #5
 8004638:	e02f      	b.n	800469a <SD_Read_Block+0x80>
  }

  SPI_Release();
 800463a:	f7ff ffe7 	bl	800460c <SPI_Release>
   cnt=0;
 800463e:	2300      	movs	r3, #0
 8004640:	81fb      	strh	r3, [r7, #14]
   do{
     result=SPI_ReceiveByte();
 8004642:	f7ff ffd6 	bl	80045f2 <SPI_ReceiveByte>
 8004646:	4603      	mov	r3, r0
 8004648:	737b      	strb	r3, [r7, #13]
     cnt++;
 800464a:	89fb      	ldrh	r3, [r7, #14]
 800464c:	3301      	adds	r3, #1
 800464e:	81fb      	strh	r3, [r7, #14]
   } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 8004650:	7b7b      	ldrb	r3, [r7, #13]
 8004652:	2bfe      	cmp	r3, #254	; 0xfe
 8004654:	d004      	beq.n	8004660 <SD_Read_Block+0x46>
 8004656:	89fb      	ldrh	r3, [r7, #14]
 8004658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800465c:	4293      	cmp	r3, r2
 800465e:	d1f0      	bne.n	8004642 <SD_Read_Block+0x28>
   if (cnt>=0xFFFF) {
 8004660:	89fb      	ldrh	r3, [r7, #14]
 8004662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004666:	4293      	cmp	r3, r2
 8004668:	d101      	bne.n	800466e <SD_Read_Block+0x54>
	   return 5;
 800466a:	2305      	movs	r3, #5
 800466c:	e015      	b.n	800469a <SD_Read_Block+0x80>
   }
   for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte();
 800466e:	2300      	movs	r3, #0
 8004670:	81fb      	strh	r3, [r7, #14]
 8004672:	e009      	b.n	8004688 <SD_Read_Block+0x6e>
 8004674:	89fb      	ldrh	r3, [r7, #14]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	18d4      	adds	r4, r2, r3
 800467a:	f7ff ffba 	bl	80045f2 <SPI_ReceiveByte>
 800467e:	4603      	mov	r3, r0
 8004680:	7023      	strb	r3, [r4, #0]
 8004682:	89fb      	ldrh	r3, [r7, #14]
 8004684:	3301      	adds	r3, #1
 8004686:	81fb      	strh	r3, [r7, #14]
 8004688:	89fb      	ldrh	r3, [r7, #14]
 800468a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800468e:	d3f1      	bcc.n	8004674 <SD_Read_Block+0x5a>
   SPI_Release();
 8004690:	f7ff ffbc 	bl	800460c <SPI_Release>
   SPI_Release();
 8004694:	f7ff ffba 	bl	800460c <SPI_Release>



  return 0;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd90      	pop	{r4, r7, pc}
	...

080046a4 <SD_Write_Blocks>:

uint8_t SD_Write_Blocks (uint8_t *buff, uint32_t lba,uint16_t count)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	4613      	mov	r3, r2
 80046b0:	80fb      	strh	r3, [r7, #6]
  tick1=xTaskGetTickCount();
 80046b2:	f00a fdbd 	bl	800f230 <xTaskGetTickCount>
 80046b6:	4603      	mov	r3, r0
 80046b8:	4a39      	ldr	r2, [pc, #228]	; (80047a0 <SD_Write_Blocks+0xfc>)
 80046ba:	6013      	str	r3, [r2, #0]
  uint8_t result;
  uint16_t cnt;


  result=SD_cmd(CMD25,lba);//CMD25
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	2059      	movs	r0, #89	; 0x59
 80046c0:	f7ff fe0c 	bl	80042dc <SD_cmd>
 80046c4:	4603      	mov	r3, r0
 80046c6:	75fb      	strb	r3, [r7, #23]
  if (result!=0x00){
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <SD_Write_Blocks+0x2e>
	  return 6;
 80046ce:	2306      	movs	r3, #6
 80046d0:	e061      	b.n	8004796 <SD_Write_Blocks+0xf2>
  }
  SPI_Release();  //1byte gap
 80046d2:	f7ff ff9b 	bl	800460c <SPI_Release>

  for(int i=0;i<count;i++){
 80046d6:	2300      	movs	r3, #0
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	e035      	b.n	8004748 <SD_Write_Blocks+0xa4>
   SPI_SendByte (0xFC);//token CMD25
 80046dc:	20fc      	movs	r0, #252	; 0xfc
 80046de:	f7ff ff7b 	bl	80045d8 <SPI_SendByte>

   SPIx_Write_Multi(buff,512);
 80046e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f7ff ff3a 	bl	8004560 <SPIx_Write_Multi>
   buff+=512;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80046f2:	60fb      	str	r3, [r7, #12]
   SPI_Release();   //CRC
 80046f4:	f7ff ff8a 	bl	800460c <SPI_Release>
   SPI_Release();   //CRC
 80046f8:	f7ff ff88 	bl	800460c <SPI_Release>


   result=SPI_ReceiveByte();
 80046fc:	f7ff ff79 	bl	80045f2 <SPI_ReceiveByte>
 8004700:	4603      	mov	r3, r0
 8004702:	75fb      	strb	r3, [r7, #23]
   if ((result&0x1F)!=0x05) {
 8004704:	7dfb      	ldrb	r3, [r7, #23]
 8004706:	f003 031f 	and.w	r3, r3, #31
 800470a:	2b05      	cmp	r3, #5
 800470c:	d001      	beq.n	8004712 <SD_Write_Blocks+0x6e>
	  return 6;
 800470e:	2306      	movs	r3, #6
 8004710:	e041      	b.n	8004796 <SD_Write_Blocks+0xf2>
   }
   cnt=0;
 8004712:	2300      	movs	r3, #0
 8004714:	83fb      	strh	r3, [r7, #30]
   do {
    result=SPI_ReceiveByte();
 8004716:	f7ff ff6c 	bl	80045f2 <SPI_ReceiveByte>
 800471a:	4603      	mov	r3, r0
 800471c:	75fb      	strb	r3, [r7, #23]
    cnt++;
 800471e:	8bfb      	ldrh	r3, [r7, #30]
 8004720:	3301      	adds	r3, #1
 8004722:	83fb      	strh	r3, [r7, #30]
   } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8004724:	7dfb      	ldrb	r3, [r7, #23]
 8004726:	2bff      	cmp	r3, #255	; 0xff
 8004728:	d004      	beq.n	8004734 <SD_Write_Blocks+0x90>
 800472a:	8bfb      	ldrh	r3, [r7, #30]
 800472c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004730:	4293      	cmp	r3, r2
 8004732:	d1f0      	bne.n	8004716 <SD_Write_Blocks+0x72>
   if (cnt>=0xFFFF) {
 8004734:	8bfb      	ldrh	r3, [r7, #30]
 8004736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800473a:	4293      	cmp	r3, r2
 800473c:	d101      	bne.n	8004742 <SD_Write_Blocks+0x9e>
	  return 6;
 800473e:	2306      	movs	r3, #6
 8004740:	e029      	b.n	8004796 <SD_Write_Blocks+0xf2>
  for(int i=0;i<count;i++){
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	3301      	adds	r3, #1
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	88fb      	ldrh	r3, [r7, #6]
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	429a      	cmp	r2, r3
 800474e:	dbc5      	blt.n	80046dc <SD_Write_Blocks+0x38>
   }
  }

  SPI_SendByte (0xFD); //stop transaction token for CMD25
 8004750:	20fd      	movs	r0, #253	; 0xfd
 8004752:	f7ff ff41 	bl	80045d8 <SPI_SendByte>
  SPI_Release();       //1byte gap
 8004756:	f7ff ff59 	bl	800460c <SPI_Release>
  cnt=0;
 800475a:	2300      	movs	r3, #0
 800475c:	83fb      	strh	r3, [r7, #30]
  do {
	result=SPI_ReceiveByte();
 800475e:	f7ff ff48 	bl	80045f2 <SPI_ReceiveByte>
 8004762:	4603      	mov	r3, r0
 8004764:	75fb      	strb	r3, [r7, #23]
	cnt++;
 8004766:	8bfb      	ldrh	r3, [r7, #30]
 8004768:	3301      	adds	r3, #1
 800476a:	83fb      	strh	r3, [r7, #30]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 800476c:	7dfb      	ldrb	r3, [r7, #23]
 800476e:	2bff      	cmp	r3, #255	; 0xff
 8004770:	d004      	beq.n	800477c <SD_Write_Blocks+0xd8>
 8004772:	8bfb      	ldrh	r3, [r7, #30]
 8004774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004778:	4293      	cmp	r3, r2
 800477a:	d1f0      	bne.n	800475e <SD_Write_Blocks+0xba>
  if (cnt>=0xFFFF) return 6;
 800477c:	8bfb      	ldrh	r3, [r7, #30]
 800477e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004782:	4293      	cmp	r3, r2
 8004784:	d101      	bne.n	800478a <SD_Write_Blocks+0xe6>
 8004786:	2306      	movs	r3, #6
 8004788:	e005      	b.n	8004796 <SD_Write_Blocks+0xf2>
  tick2=xTaskGetTickCount();
 800478a:	f00a fd51 	bl	800f230 <xTaskGetTickCount>
 800478e:	4603      	mov	r3, r0
 8004790:	4a04      	ldr	r2, [pc, #16]	; (80047a4 <SD_Write_Blocks+0x100>)
 8004792:	6013      	str	r3, [r2, #0]
  return 0;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	200027dc 	.word	0x200027dc
 80047a4:	200027e0 	.word	0x200027e0

080047a8 <seaglider_init>:

const char* seaglider_commands_strings[]={"CD>\r","DBG:"};


void seaglider_init(seaglider* seaglider_obj,osMessageQId events_q_Handle,osSemaphoreId out_q_sem)
{
 80047a8:	b5b0      	push	{r4, r5, r7, lr}
 80047aa:	b094      	sub	sp, #80	; 0x50
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
	seaglider_obj->last_depth=0.0;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	f8c3 2015 	str.w	r2, [r3, #21]
	seaglider_obj->prev_depth=0.0;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f8c3 2019 	str.w	r2, [r3, #25]
	seaglider_obj->dive_status=SEAGLIDER_STATUS_UNKNOWN;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	74da      	strb	r2, [r3, #19]

	seaglider_obj->stop_pump_flag=SEAGLIDER_STOP_PUMP_FLAG_DEACTIVATED;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	751a      	strb	r2, [r3, #20]
	seaglider_messages_init(seaglider_obj);
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f9a7 	bl	8004b28 <seaglider_messages_init>

	seaglider_obj->events_q = events_q_Handle;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	609a      	str	r2, [r3, #8]
	seaglider_obj->out_q_sem=out_q_sem;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	60da      	str	r2, [r3, #12]

	//osMessageQDef(seaglider_events_q, 20, uint8_t);
	//seaglider_obj->events_q= osMessageCreate(osMessageQ(seaglider_events_q), NULL);

	osMessageQDef(seaglider_media_rx_q, 20, uint16_t);
 80047e6:	4b19      	ldr	r3, [pc, #100]	; (800484c <seaglider_init+0xa4>)
 80047e8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80047ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	seaglider_obj->media_rx_messages_q= osMessageCreate(osMessageQ(seaglider_media_rx_q), NULL);
 80047f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80047f6:	2100      	movs	r1, #0
 80047f8:	4618      	mov	r0, r3
 80047fa:	f009 f94d 	bl	800da98 <osMessageCreate>
 80047fe:	4602      	mov	r2, r0
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	601a      	str	r2, [r3, #0]

	osMessageQDef(seaglider_media_tx_q, 200, uint8_t);
 8004804:	4b12      	ldr	r3, [pc, #72]	; (8004850 <seaglider_init+0xa8>)
 8004806:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800480a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800480c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	seaglider_obj->media_tx_q = osMessageCreate(osMessageQ(seaglider_media_tx_q), NULL);
 8004810:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004814:	2100      	movs	r1, #0
 8004816:	4618      	mov	r0, r3
 8004818:	f009 f93e 	bl	800da98 <osMessageCreate>
 800481c:	4602      	mov	r2, r0
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	605a      	str	r2, [r3, #4]

	osThreadDef(seaglider_task, seaglider_loop, osPriorityNormal, 0, 256);
 8004822:	4b0c      	ldr	r3, [pc, #48]	; (8004854 <seaglider_init+0xac>)
 8004824:	f107 0414 	add.w	r4, r7, #20
 8004828:	461d      	mov	r5, r3
 800482a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800482c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800482e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004832:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(seaglider_task), seaglider_obj);
 8004836:	f107 0314 	add.w	r3, r7, #20
 800483a:	68f9      	ldr	r1, [r7, #12]
 800483c:	4618      	mov	r0, r3
 800483e:	f009 f814 	bl	800d86a <osThreadCreate>


}
 8004842:	bf00      	nop
 8004844:	3750      	adds	r7, #80	; 0x50
 8004846:	46bd      	mov	sp, r7
 8004848:	bdb0      	pop	{r4, r5, r7, pc}
 800484a:	bf00      	nop
 800484c:	080143e0 	.word	0x080143e0
 8004850:	080143f0 	.word	0x080143f0
 8004854:	08014400 	.word	0x08014400

08004858 <seaglider_loop>:


void seaglider_loop(seaglider* seaglider_obj)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
	 uint16_t msg_indx;
	 for(;;)
	 {
		if(xQueueReceive(seaglider_obj->media_rx_messages_q,&msg_indx,0))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f107 010a 	add.w	r1, r7, #10
 8004868:	2200      	movs	r2, #0
 800486a:	4618      	mov	r0, r3
 800486c:	f009 fe00 	bl	800e470 <xQueueReceive>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0f4      	beq.n	8004860 <seaglider_loop+0x8>
		{   uint8_t* msg=seaglider_obj->rx_buffer+msg_indx;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	332d      	adds	r3, #45	; 0x2d
 800487a:	897a      	ldrh	r2, [r7, #10]
 800487c:	4413      	add	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
			seaglider_parse_message(seaglider_obj,msg);
 8004880:	68f9      	ldr	r1, [r7, #12]
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f91c 	bl	8004ac0 <seaglider_parse_message>
		if(xQueueReceive(seaglider_obj->media_rx_messages_q,&msg_indx,0))
 8004888:	e7ea      	b.n	8004860 <seaglider_loop+0x8>

0800488a <seaglider_media_process_byte>:

}


void seaglider_media_process_byte(seaglider* seaglider_obj,uint8_t rx_byte)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b082      	sub	sp, #8
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	460b      	mov	r3, r1
 8004894:	70fb      	strb	r3, [r7, #3]
	if(seaglider_obj->media_status==SEAGLIDER_MEDIA_READY && rx_byte!=0x00)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	7c5b      	ldrb	r3, [r3, #17]
 800489a:	2b0a      	cmp	r3, #10
 800489c:	d162      	bne.n	8004964 <seaglider_media_process_byte+0xda>
 800489e:	78fb      	ldrb	r3, [r7, #3]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d05f      	beq.n	8004964 <seaglider_media_process_byte+0xda>
	{
		seaglider_obj->rx_buffer[seaglider_obj->rx_buffer_indx]=rx_byte;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8b3 342d 	ldrh.w	r3, [r3, #1069]	; 0x42d
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4413      	add	r3, r2
 80048b2:	78fa      	ldrb	r2, [r7, #3]
 80048b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		if(rx_byte=='\r')
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	2b0d      	cmp	r3, #13
 80048bc:	d133      	bne.n	8004926 <seaglider_media_process_byte+0x9c>
		{
			seaglider_obj->rx_buffer[seaglider_obj->rx_buffer_indx]=0x00;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8b3 342d 	ldrh.w	r3, [r3, #1069]	; 0x42d
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	461a      	mov	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4413      	add	r3, r2
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			osMessagePut(seaglider_obj->media_rx_messages_q,seaglider_obj->rx_buffer_new_string_indx,1);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6818      	ldr	r0, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8b3 342f 	ldrh.w	r3, [r3, #1071]	; 0x42f
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2201      	movs	r2, #1
 80048e0:	4619      	mov	r1, r3
 80048e2:	f009 f901 	bl	800dae8 <osMessagePut>
			if(seaglider_obj->rx_buffer_indx>SEAGLIDER_RX_BUFFER_THR) seaglider_obj->rx_buffer_indx=0;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8b3 342d 	ldrh.w	r3, [r3, #1069]	; 0x42d
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048f2:	d907      	bls.n	8004904 <seaglider_media_process_byte+0x7a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
 8004902:	e008      	b.n	8004916 <seaglider_media_process_byte+0x8c>
			else  seaglider_obj->rx_buffer_indx++;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8b3 342d 	ldrh.w	r3, [r3, #1069]	; 0x42d
 800490a:	b29b      	uxth	r3, r3
 800490c:	3301      	adds	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8a3 242d 	strh.w	r2, [r3, #1069]	; 0x42d
			seaglider_obj->rx_buffer_new_string_indx=seaglider_obj->rx_buffer_indx;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8b3 342d 	ldrh.w	r3, [r3, #1069]	; 0x42d
 800491c:	b29a      	uxth	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8a3 242f 	strh.w	r2, [r3, #1071]	; 0x42f
 8004924:	e008      	b.n	8004938 <seaglider_media_process_byte+0xae>
		}
		else seaglider_obj->rx_buffer_indx++;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8b3 342d 	ldrh.w	r3, [r3, #1069]	; 0x42d
 800492c:	b29b      	uxth	r3, r3
 800492e:	3301      	adds	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8a3 242d 	strh.w	r2, [r3, #1069]	; 0x42d
		if(seaglider_obj->rx_buffer_indx==SEAGLIDER_RX_BUFFER_SIZE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8b3 342d 	ldrh.w	r3, [r3, #1069]	; 0x42d
 800493e:	b29b      	uxth	r3, r3
 8004940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004944:	d11d      	bne.n	8004982 <seaglider_media_process_byte+0xf8>
		{
			seaglider_obj->rx_buffer_indx=0;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
 800494e:	2200      	movs	r2, #0
 8004950:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
			seaglider_obj->rx_buffer_new_string_indx=seaglider_obj->rx_buffer_indx;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8b3 342d 	ldrh.w	r3, [r3, #1069]	; 0x42d
 800495a:	b29a      	uxth	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8a3 242f 	strh.w	r2, [r3, #1071]	; 0x42f
		if(seaglider_obj->rx_buffer_indx==SEAGLIDER_RX_BUFFER_SIZE)
 8004962:	e00e      	b.n	8004982 <seaglider_media_process_byte+0xf8>
		}
	}
	else
	{
		seaglider_obj->rx_buffer_indx=0;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
 800496c:	2200      	movs	r2, #0
 800496e:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
		seaglider_obj->rx_buffer_new_string_indx=seaglider_obj->rx_buffer_indx;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8b3 342d 	ldrh.w	r3, [r3, #1069]	; 0x42d
 8004978:	b29a      	uxth	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8a3 242f 	strh.w	r2, [r3, #1071]	; 0x42f
	}
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <seaglider_media_get_byte>:

uint8_t seaglider_media_get_byte(seaglider* seaglider_obj,uint8_t* tx_byte)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b086      	sub	sp, #24
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(seaglider_obj->media_tx_q,0);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6859      	ldr	r1, [r3, #4]
 8004998:	f107 030c 	add.w	r3, r7, #12
 800499c:	2200      	movs	r2, #0
 800499e:	4618      	mov	r0, r3
 80049a0:	f009 f8e2 	bl	800db68 <osMessageGet>
	if(res.status==osEventMessage)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b10      	cmp	r3, #16
 80049a8:	d105      	bne.n	80049b6 <seaglider_media_get_byte+0x2c>
    {
		*tx_byte=res.value.v;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	701a      	strb	r2, [r3, #0]
		return SEAGLIDER_F_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e000      	b.n	80049b8 <seaglider_media_get_byte+0x2e>
    }
  return SEAGLIDER_F_ERR;
 80049b6:	2301      	movs	r3, #1
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <seaglider_send_evnt>:

void seaglider_send_evnt(seaglider* seaglider_obj,uint32_t event_id)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  char* snd_buffer=(char*)malloc(SEAGLIDER_SND_BUFFER_SIZE);
 80049ca:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80049ce:	f00c f999 	bl	8010d04 <malloc>
 80049d2:	4603      	mov	r3, r0
 80049d4:	60fb      	str	r3, [r7, #12]
  sprintf( snd_buffer,"%s%u",
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <seaglider_send_evnt+0x44>)
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	490a      	ldr	r1, [pc, #40]	; (8004a08 <seaglider_send_evnt+0x48>)
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f00c fb0c 	bl	8010ffc <siprintf>
		    seaglider_commands_strings[SEAGLIDER_MSG_EVNT],
			event_id
			);
  seaglider_schedule_for_tx(seaglider_obj,(uint8_t*)snd_buffer,strlen(snd_buffer));
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f7fb fc23 	bl	8000230 <strlen>
 80049ea:	4603      	mov	r3, r0
 80049ec:	461a      	mov	r2, r3
 80049ee:	68f9      	ldr	r1, [r7, #12]
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f839 	bl	8004a68 <seaglider_schedule_for_tx>
  free(snd_buffer);
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f00c f98c 	bl	8010d14 <free>
}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20000170 	.word	0x20000170
 8004a08:	0801441c 	.word	0x0801441c

08004a0c <seaglider_send_cmd>:

void seaglider_send_cmd(seaglider* seaglider_obj,uint8_t cmd_id,void* arg)
{
 8004a0c:	b590      	push	{r4, r7, lr}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	460b      	mov	r3, r1
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	72fb      	strb	r3, [r7, #11]
 memory_region_pointer* ptr1;
 switch(cmd_id)
 8004a1a:	7afb      	ldrb	r3, [r7, #11]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <seaglider_send_cmd+0x1a>
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d00e      	beq.n	8004a42 <seaglider_send_cmd+0x36>
     case SEAGLIDER_CMD_SEND_DATA:
       ptr1=arg;
       seaglider_schedule_for_tx(seaglider_obj,(uint8_t*)ptr1->start_addr,ptr1->size);
     break;
 }
}
 8004a24:	e019      	b.n	8004a5a <seaglider_send_cmd+0x4e>
       seaglider_schedule_for_tx(seaglider_obj,(uint8_t*)seaglider_commands_strings[SEAGLIDER_MSG_PROMPT],strlen(seaglider_commands_strings[SEAGLIDER_MSG_PROMPT]));
 8004a26:	4b0f      	ldr	r3, [pc, #60]	; (8004a64 <seaglider_send_cmd+0x58>)
 8004a28:	681c      	ldr	r4, [r3, #0]
 8004a2a:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <seaglider_send_cmd+0x58>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fb fbfe 	bl	8000230 <strlen>
 8004a34:	4603      	mov	r3, r0
 8004a36:	461a      	mov	r2, r3
 8004a38:	4621      	mov	r1, r4
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f814 	bl	8004a68 <seaglider_schedule_for_tx>
	 break;
 8004a40:	e00b      	b.n	8004a5a <seaglider_send_cmd+0x4e>
       ptr1=arg;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	617b      	str	r3, [r7, #20]
       seaglider_schedule_for_tx(seaglider_obj,(uint8_t*)ptr1->start_addr,ptr1->size);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	461a      	mov	r2, r3
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 f808 	bl	8004a68 <seaglider_schedule_for_tx>
     break;
 8004a58:	bf00      	nop
}
 8004a5a:	bf00      	nop
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd90      	pop	{r4, r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000170 	.word	0x20000170

08004a68 <seaglider_schedule_for_tx>:

void seaglider_schedule_for_tx(seaglider* seaglider_obj,uint8_t* message,uint32_t size)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 osSemaphoreWait(seaglider_obj->out_q_sem,osWaitForever);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f04f 31ff 	mov.w	r1, #4294967295
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f008 ff87 	bl	800d990 <osSemaphoreWait>
 for(int i=0;i<size;i++)
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	e00d      	b.n	8004aa4 <seaglider_schedule_for_tx+0x3c>
 {
   osMessagePut(seaglider_obj->media_tx_q,*(message+i),osWaitForever);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6858      	ldr	r0, [r3, #4]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	4413      	add	r3, r2
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	f04f 32ff 	mov.w	r2, #4294967295
 8004a98:	4619      	mov	r1, r3
 8004a9a:	f009 f825 	bl	800dae8 <osMessagePut>
 for(int i=0;i<size;i++)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d8ed      	bhi.n	8004a88 <seaglider_schedule_for_tx+0x20>
 }
 osSemaphoreRelease(seaglider_obj->out_q_sem);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f008 ffbb 	bl	800da2c <osSemaphoreRelease>
}
 8004ab6:	bf00      	nop
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <seaglider_parse_message>:
 return SEAGLIDER_F_ERR;
}


int seaglider_parse_message(seaglider* seaglider_obj,uint8_t* msg)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
 uint8_t* tmp_ptr;
 for(int i=0;i<SEAGLIDER_MSG_NUM_OF_FUNCTIONS;i++)
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	e01e      	b.n	8004b0e <seaglider_parse_message+0x4e>
 {
	  tmp_ptr=0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60bb      	str	r3, [r7, #8]
	  tmp_ptr=strstr(msg,seaglider_messages_strings[i]);
 8004ad4:	4a12      	ldr	r2, [pc, #72]	; (8004b20 <seaglider_parse_message+0x60>)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004adc:	4619      	mov	r1, r3
 8004ade:	6838      	ldr	r0, [r7, #0]
 8004ae0:	f00c fb06 	bl	80110f0 <strstr>
 8004ae4:	60b8      	str	r0, [r7, #8]
	  if(tmp_ptr)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00d      	beq.n	8004b08 <seaglider_parse_message+0x48>
		{
			if(seaglider_functions[i](seaglider_obj,msg)==SEAGLIDER_F_OK) return SEAGLIDER_F_OK;
 8004aec:	4a0d      	ldr	r2, [pc, #52]	; (8004b24 <seaglider_parse_message+0x64>)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af4:	6839      	ldr	r1, [r7, #0]
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	4798      	blx	r3
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <seaglider_parse_message+0x44>
 8004b00:	2300      	movs	r3, #0
 8004b02:	e008      	b.n	8004b16 <seaglider_parse_message+0x56>
      else return SEAGLIDER_F_ERR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e006      	b.n	8004b16 <seaglider_parse_message+0x56>
 for(int i=0;i<SEAGLIDER_MSG_NUM_OF_FUNCTIONS;i++)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b0b      	cmp	r3, #11
 8004b12:	dddd      	ble.n	8004ad0 <seaglider_parse_message+0x10>
		}

 }
 return SEAGLIDER_F_ERR;
 8004b14:	2301      	movs	r3, #1
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20002a54 	.word	0x20002a54
 8004b24:	20002a24 	.word	0x20002a24

08004b28 <seaglider_messages_init>:

void seaglider_messages_init(seaglider* seaglider_obj)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	seaglider_functions[SEAGLIDER_MSG_DEPTH] = SEAGLIDER_MSG_DEPTH_f;
 8004b30:	4b26      	ldr	r3, [pc, #152]	; (8004bcc <seaglider_messages_init+0xa4>)
 8004b32:	4a27      	ldr	r2, [pc, #156]	; (8004bd0 <seaglider_messages_init+0xa8>)
 8004b34:	601a      	str	r2, [r3, #0]
	seaglider_functions[SEAGLIDER_MSG_STOP] = SEAGLIDER_MSG_STOP_f;
 8004b36:	4b25      	ldr	r3, [pc, #148]	; (8004bcc <seaglider_messages_init+0xa4>)
 8004b38:	4a26      	ldr	r2, [pc, #152]	; (8004bd4 <seaglider_messages_init+0xac>)
 8004b3a:	605a      	str	r2, [r3, #4]
	seaglider_functions[SEAGLIDER_MSG_SEND_TXT_FILE] = SEAGLIDER_MSG_SEND_TXT_FILE_f;
 8004b3c:	4b23      	ldr	r3, [pc, #140]	; (8004bcc <seaglider_messages_init+0xa4>)
 8004b3e:	4a26      	ldr	r2, [pc, #152]	; (8004bd8 <seaglider_messages_init+0xb0>)
 8004b40:	609a      	str	r2, [r3, #8]
	seaglider_functions[SEAGLIDER_MSG_START] = SEAGLIDER_MSG_START_f;
 8004b42:	4b22      	ldr	r3, [pc, #136]	; (8004bcc <seaglider_messages_init+0xa4>)
 8004b44:	4a25      	ldr	r2, [pc, #148]	; (8004bdc <seaglider_messages_init+0xb4>)
 8004b46:	60da      	str	r2, [r3, #12]
	seaglider_functions[SEAGLIDER_MSG_SEND_INFO] =SEAGLIDER_MSG_SEND_INFO_f;
 8004b48:	4b20      	ldr	r3, [pc, #128]	; (8004bcc <seaglider_messages_init+0xa4>)
 8004b4a:	4a25      	ldr	r2, [pc, #148]	; (8004be0 <seaglider_messages_init+0xb8>)
 8004b4c:	611a      	str	r2, [r3, #16]
	seaglider_functions[SEAGLIDER_MSG_RESET] =SEAGLIDER_MSG_RESET_f;
 8004b4e:	4b1f      	ldr	r3, [pc, #124]	; (8004bcc <seaglider_messages_init+0xa4>)
 8004b50:	4a24      	ldr	r2, [pc, #144]	; (8004be4 <seaglider_messages_init+0xbc>)
 8004b52:	615a      	str	r2, [r3, #20]
	seaglider_functions[SEAGLIDER_MSG_TEST] =SEAGLIDER_MSG_TEST_f;
 8004b54:	4b1d      	ldr	r3, [pc, #116]	; (8004bcc <seaglider_messages_init+0xa4>)
 8004b56:	4a24      	ldr	r2, [pc, #144]	; (8004be8 <seaglider_messages_init+0xc0>)
 8004b58:	619a      	str	r2, [r3, #24]
	seaglider_functions[SEAGLIDER_MSG_CLOCK] =SEAGLIDER_MSG_CLOCK_f;
 8004b5a:	4b1c      	ldr	r3, [pc, #112]	; (8004bcc <seaglider_messages_init+0xa4>)
 8004b5c:	4a23      	ldr	r2, [pc, #140]	; (8004bec <seaglider_messages_init+0xc4>)
 8004b5e:	61da      	str	r2, [r3, #28]
	seaglider_functions[SEAGLIDER_MSG_WAKEUP] =SEAGLIDER_MSG_WAKEUP_f;
 8004b60:	4b1a      	ldr	r3, [pc, #104]	; (8004bcc <seaglider_messages_init+0xa4>)
 8004b62:	4a23      	ldr	r2, [pc, #140]	; (8004bf0 <seaglider_messages_init+0xc8>)
 8004b64:	621a      	str	r2, [r3, #32]
	seaglider_functions[SEAGLIDER_MSG_CLEAR] =SEAGLIDER_MSG_CLEAR_f;
 8004b66:	4b19      	ldr	r3, [pc, #100]	; (8004bcc <seaglider_messages_init+0xa4>)
 8004b68:	4a22      	ldr	r2, [pc, #136]	; (8004bf4 <seaglider_messages_init+0xcc>)
 8004b6a:	625a      	str	r2, [r3, #36]	; 0x24
	seaglider_functions[SEAGLIDER_MSG_POFF] =SEAGLIDER_MSG_POFF_f;
 8004b6c:	4b17      	ldr	r3, [pc, #92]	; (8004bcc <seaglider_messages_init+0xa4>)
 8004b6e:	4a22      	ldr	r2, [pc, #136]	; (8004bf8 <seaglider_messages_init+0xd0>)
 8004b70:	629a      	str	r2, [r3, #40]	; 0x28
	seaglider_functions[SEAGLIDER_MSG_ERRORS] =SEAGLIDER_MSG_ERRORS_f;
 8004b72:	4b16      	ldr	r3, [pc, #88]	; (8004bcc <seaglider_messages_init+0xa4>)
 8004b74:	4a21      	ldr	r2, [pc, #132]	; (8004bfc <seaglider_messages_init+0xd4>)
 8004b76:	62da      	str	r2, [r3, #44]	; 0x2c

	seaglider_messages_strings[SEAGLIDER_MSG_DEPTH] = "DEPTH";
 8004b78:	4b21      	ldr	r3, [pc, #132]	; (8004c00 <seaglider_messages_init+0xd8>)
 8004b7a:	4a22      	ldr	r2, [pc, #136]	; (8004c04 <seaglider_messages_init+0xdc>)
 8004b7c:	601a      	str	r2, [r3, #0]
	seaglider_messages_strings[SEAGLIDER_MSG_STOP] = "STOP";
 8004b7e:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <seaglider_messages_init+0xd8>)
 8004b80:	4a21      	ldr	r2, [pc, #132]	; (8004c08 <seaglider_messages_init+0xe0>)
 8004b82:	605a      	str	r2, [r3, #4]
	seaglider_messages_strings[SEAGLIDER_MSG_SEND_TXT_FILE] = "SEND_TXT_FILE";
 8004b84:	4b1e      	ldr	r3, [pc, #120]	; (8004c00 <seaglider_messages_init+0xd8>)
 8004b86:	4a21      	ldr	r2, [pc, #132]	; (8004c0c <seaglider_messages_init+0xe4>)
 8004b88:	609a      	str	r2, [r3, #8]
	seaglider_messages_strings[SEAGLIDER_MSG_START] = "START";
 8004b8a:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <seaglider_messages_init+0xd8>)
 8004b8c:	4a20      	ldr	r2, [pc, #128]	; (8004c10 <seaglider_messages_init+0xe8>)
 8004b8e:	60da      	str	r2, [r3, #12]
	seaglider_messages_strings[SEAGLIDER_MSG_SEND_INFO] ="SEND_INFO";
 8004b90:	4b1b      	ldr	r3, [pc, #108]	; (8004c00 <seaglider_messages_init+0xd8>)
 8004b92:	4a20      	ldr	r2, [pc, #128]	; (8004c14 <seaglider_messages_init+0xec>)
 8004b94:	611a      	str	r2, [r3, #16]
	seaglider_messages_strings[SEAGLIDER_MSG_RESET] ="RESET";
 8004b96:	4b1a      	ldr	r3, [pc, #104]	; (8004c00 <seaglider_messages_init+0xd8>)
 8004b98:	4a1f      	ldr	r2, [pc, #124]	; (8004c18 <seaglider_messages_init+0xf0>)
 8004b9a:	615a      	str	r2, [r3, #20]
	seaglider_messages_strings[SEAGLIDER_MSG_TEST] ="TEST";
 8004b9c:	4b18      	ldr	r3, [pc, #96]	; (8004c00 <seaglider_messages_init+0xd8>)
 8004b9e:	4a1f      	ldr	r2, [pc, #124]	; (8004c1c <seaglider_messages_init+0xf4>)
 8004ba0:	619a      	str	r2, [r3, #24]
	seaglider_messages_strings[SEAGLIDER_MSG_CLOCK] ="CLOCK";
 8004ba2:	4b17      	ldr	r3, [pc, #92]	; (8004c00 <seaglider_messages_init+0xd8>)
 8004ba4:	4a1e      	ldr	r2, [pc, #120]	; (8004c20 <seaglider_messages_init+0xf8>)
 8004ba6:	61da      	str	r2, [r3, #28]
	seaglider_messages_strings[SEAGLIDER_MSG_WAKEUP] ="WAKEUP";
 8004ba8:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <seaglider_messages_init+0xd8>)
 8004baa:	4a1e      	ldr	r2, [pc, #120]	; (8004c24 <seaglider_messages_init+0xfc>)
 8004bac:	621a      	str	r2, [r3, #32]
	seaglider_messages_strings[SEAGLIDER_MSG_CLEAR] ="CLEAR";
 8004bae:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <seaglider_messages_init+0xd8>)
 8004bb0:	4a1d      	ldr	r2, [pc, #116]	; (8004c28 <seaglider_messages_init+0x100>)
 8004bb2:	625a      	str	r2, [r3, #36]	; 0x24
	seaglider_messages_strings[SEAGLIDER_MSG_POFF] ="POFF";
 8004bb4:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <seaglider_messages_init+0xd8>)
 8004bb6:	4a1d      	ldr	r2, [pc, #116]	; (8004c2c <seaglider_messages_init+0x104>)
 8004bb8:	629a      	str	r2, [r3, #40]	; 0x28
	seaglider_messages_strings[SEAGLIDER_MSG_ERRORS] ="ERRORS";
 8004bba:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <seaglider_messages_init+0xd8>)
 8004bbc:	4a1c      	ldr	r2, [pc, #112]	; (8004c30 <seaglider_messages_init+0x108>)
 8004bbe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	20002a24 	.word	0x20002a24
 8004bd0:	08004c35 	.word	0x08004c35
 8004bd4:	08004cc5 	.word	0x08004cc5
 8004bd8:	08004ddd 	.word	0x08004ddd
 8004bdc:	08004d25 	.word	0x08004d25
 8004be0:	08004e01 	.word	0x08004e01
 8004be4:	08004e17 	.word	0x08004e17
 8004be8:	08004e2d 	.word	0x08004e2d
 8004bec:	08004e51 	.word	0x08004e51
 8004bf0:	08004eb5 	.word	0x08004eb5
 8004bf4:	08004ed9 	.word	0x08004ed9
 8004bf8:	08004efd 	.word	0x08004efd
 8004bfc:	08004f21 	.word	0x08004f21
 8004c00:	20002a54 	.word	0x20002a54
 8004c04:	08014424 	.word	0x08014424
 8004c08:	0801442c 	.word	0x0801442c
 8004c0c:	08014434 	.word	0x08014434
 8004c10:	08014444 	.word	0x08014444
 8004c14:	0801444c 	.word	0x0801444c
 8004c18:	08014458 	.word	0x08014458
 8004c1c:	08014460 	.word	0x08014460
 8004c20:	08014468 	.word	0x08014468
 8004c24:	08014470 	.word	0x08014470
 8004c28:	08014478 	.word	0x08014478
 8004c2c:	08014480 	.word	0x08014480
 8004c30:	08014488 	.word	0x08014488

08004c34 <SEAGLIDER_MSG_DEPTH_f>:


int SEAGLIDER_MSG_DEPTH_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]

	char * pch;
	pch = strtok (msg,":");//header
 8004c3e:	491f      	ldr	r1, [pc, #124]	; (8004cbc <SEAGLIDER_MSG_DEPTH_f+0x88>)
 8004c40:	6838      	ldr	r0, [r7, #0]
 8004c42:	f00d f8c7 	bl	8011dd4 <strtok>
 8004c46:	60f8      	str	r0, [r7, #12]
	pch = strtok (NULL,",");//depth
 8004c48:	491d      	ldr	r1, [pc, #116]	; (8004cc0 <SEAGLIDER_MSG_DEPTH_f+0x8c>)
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	f00d f8c2 	bl	8011dd4 <strtok>
 8004c50:	60f8      	str	r0, [r7, #12]
	seaglider_obj->prev_depth=seaglider_obj->last_depth;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 2015 	ldr.w	r2, [r3, #21]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8c3 2019 	str.w	r2, [r3, #25]
	seaglider_obj->last_depth=strtof(pch,NULL);
 8004c62:	2100      	movs	r1, #0
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f00d f863 	bl	8011d30 <strtof>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8c3 2015 	str.w	r2, [r3, #21]
	pch = strtok (NULL,",");//date
 8004c72:	4913      	ldr	r1, [pc, #76]	; (8004cc0 <SEAGLIDER_MSG_DEPTH_f+0x8c>)
 8004c74:	2000      	movs	r0, #0
 8004c76:	f00d f8ad 	bl	8011dd4 <strtok>
 8004c7a:	60f8      	str	r0, [r7, #12]
	memcpy(seaglider_obj->date,pch,8);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	331d      	adds	r3, #29
 8004c80:	2208      	movs	r2, #8
 8004c82:	68f9      	ldr	r1, [r7, #12]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f00c f84d 	bl	8010d24 <memcpy>
	pch = strtok (NULL,",");//time
 8004c8a:	490d      	ldr	r1, [pc, #52]	; (8004cc0 <SEAGLIDER_MSG_DEPTH_f+0x8c>)
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	f00d f8a1 	bl	8011dd4 <strtok>
 8004c92:	60f8      	str	r0, [r7, #12]
	memcpy(seaglider_obj->time,pch,6);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3325      	adds	r3, #37	; 0x25
 8004c98:	2206      	movs	r2, #6
 8004c9a:	68f9      	ldr	r1, [r7, #12]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f00c f841 	bl	8010d24 <memcpy>

	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_DEPTH_RCVD,1);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f240 215e 	movw	r1, #606	; 0x25e
 8004cac:	4618      	mov	r0, r3
 8004cae:	f008 ff1b 	bl	800dae8 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	08014490 	.word	0x08014490
 8004cc0:	08014494 	.word	0x08014494

08004cc4 <SEAGLIDER_MSG_STOP_f>:
int SEAGLIDER_MSG_STOP_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,":");//header
 8004cce:	4913      	ldr	r1, [pc, #76]	; (8004d1c <SEAGLIDER_MSG_STOP_f+0x58>)
 8004cd0:	6838      	ldr	r0, [r7, #0]
 8004cd2:	f00d f87f 	bl	8011dd4 <strtok>
 8004cd6:	60f8      	str	r0, [r7, #12]
	pch = strtok (NULL,",");//dive-climb
 8004cd8:	4911      	ldr	r1, [pc, #68]	; (8004d20 <SEAGLIDER_MSG_STOP_f+0x5c>)
 8004cda:	2000      	movs	r0, #0
 8004cdc:	f00d f87a 	bl	8011dd4 <strtok>
 8004ce0:	60f8      	str	r0, [r7, #12]
	if(*pch=='a'){
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b61      	cmp	r3, #97	; 0x61
 8004ce8:	d103      	bne.n	8004cf2 <SEAGLIDER_MSG_STOP_f+0x2e>
	  seaglider_obj->dive_status=SEAGLIDER_STATUS_DIVE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	74da      	strb	r2, [r3, #19]
 8004cf0:	e006      	b.n	8004d00 <SEAGLIDER_MSG_STOP_f+0x3c>
	}
	else if(*pch=='b'){
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b62      	cmp	r3, #98	; 0x62
 8004cf8:	d102      	bne.n	8004d00 <SEAGLIDER_MSG_STOP_f+0x3c>
	  seaglider_obj->dive_status=SEAGLIDER_STATUS_CLIMB;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	74da      	strb	r2, [r3, #19]
	}
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_STOP_RCVD,1);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f240 2159 	movw	r1, #601	; 0x259
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f008 feec 	bl	800dae8 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	08014490 	.word	0x08014490
 8004d20:	08014494 	.word	0x08014494

08004d24 <SEAGLIDER_MSG_START_f>:
int SEAGLIDER_MSG_START_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,":");//header
 8004d2e:	4929      	ldr	r1, [pc, #164]	; (8004dd4 <SEAGLIDER_MSG_START_f+0xb0>)
 8004d30:	6838      	ldr	r0, [r7, #0]
 8004d32:	f00d f84f 	bl	8011dd4 <strtok>
 8004d36:	60f8      	str	r0, [r7, #12]
	pch = strtok (NULL,",");//param_x  pump stop after zero
 8004d38:	4927      	ldr	r1, [pc, #156]	; (8004dd8 <SEAGLIDER_MSG_START_f+0xb4>)
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	f00d f84a 	bl	8011dd4 <strtok>
 8004d40:	60f8      	str	r0, [r7, #12]
	seaglider_obj->stop_pump_flag=strtol(pch,NULL,10);
 8004d42:	220a      	movs	r2, #10
 8004d44:	2100      	movs	r1, #0
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f00d f91c 	bl	8011f84 <strtol>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	751a      	strb	r2, [r3, #20]
	pch = strtok (NULL,",");//param_y  zero after dive climb
 8004d54:	4920      	ldr	r1, [pc, #128]	; (8004dd8 <SEAGLIDER_MSG_START_f+0xb4>)
 8004d56:	2000      	movs	r0, #0
 8004d58:	f00d f83c 	bl	8011dd4 <strtok>
 8004d5c:	60f8      	str	r0, [r7, #12]
	seaglider_obj->param_y=strtol(pch,NULL,10);
 8004d5e:	220a      	movs	r2, #10
 8004d60:	2100      	movs	r1, #0
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f00d f90e 	bl	8011f84 <strtol>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8c3 2435 	str.w	r2, [r3, #1077]	; 0x435
	pch = strtok (NULL,",");//param_z  profile id
 8004d72:	4919      	ldr	r1, [pc, #100]	; (8004dd8 <SEAGLIDER_MSG_START_f+0xb4>)
 8004d74:	2000      	movs	r0, #0
 8004d76:	f00d f82d 	bl	8011dd4 <strtok>
 8004d7a:	60f8      	str	r0, [r7, #12]
	seaglider_obj->param_z=strtol(pch,NULL,10);
 8004d7c:	220a      	movs	r2, #10
 8004d7e:	2100      	movs	r1, #0
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f00d f8ff 	bl	8011f84 <strtol>
 8004d86:	4603      	mov	r3, r0
 8004d88:	461a      	mov	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8c3 2439 	str.w	r2, [r3, #1081]	; 0x439
	pch = strtok (NULL,",");//dive-climb
 8004d90:	4911      	ldr	r1, [pc, #68]	; (8004dd8 <SEAGLIDER_MSG_START_f+0xb4>)
 8004d92:	2000      	movs	r0, #0
 8004d94:	f00d f81e 	bl	8011dd4 <strtok>
 8004d98:	60f8      	str	r0, [r7, #12]
	if(*pch=='a'){
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2b61      	cmp	r3, #97	; 0x61
 8004da0:	d103      	bne.n	8004daa <SEAGLIDER_MSG_START_f+0x86>
	  seaglider_obj->dive_status=SEAGLIDER_STATUS_DIVE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	74da      	strb	r2, [r3, #19]
 8004da8:	e006      	b.n	8004db8 <SEAGLIDER_MSG_START_f+0x94>
	}
	else if(*pch=='b'){
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b62      	cmp	r3, #98	; 0x62
 8004db0:	d102      	bne.n	8004db8 <SEAGLIDER_MSG_START_f+0x94>
	  seaglider_obj->dive_status=SEAGLIDER_STATUS_CLIMB;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2202      	movs	r2, #2
 8004db6:	74da      	strb	r2, [r3, #19]
	}

	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_START_RCVD,1);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f44f 7116 	mov.w	r1, #600	; 0x258
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f008 fe90 	bl	800dae8 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	08014490 	.word	0x08014490
 8004dd8:	08014494 	.word	0x08014494

08004ddc <SEAGLIDER_MSG_SEND_TXT_FILE_f>:
int SEAGLIDER_MSG_SEND_TXT_FILE_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_SEND_TXT_FILE_RCVD,1);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f240 215b 	movw	r1, #603	; 0x25b
 8004df0:	4618      	mov	r0, r3
 8004df2:	f008 fe79 	bl	800dae8 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <SEAGLIDER_MSG_SEND_INFO_f>:
int SEAGLIDER_MSG_SEND_INFO_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
	return SEAGLIDER_F_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr

08004e16 <SEAGLIDER_MSG_RESET_f>:
int SEAGLIDER_MSG_RESET_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	6039      	str	r1, [r7, #0]
	return SEAGLIDER_F_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr

08004e2c <SEAGLIDER_MSG_TEST_f>:
int SEAGLIDER_MSG_TEST_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_TEST_RCVD,1);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f240 215a 	movw	r1, #602	; 0x25a
 8004e40:	4618      	mov	r0, r3
 8004e42:	f008 fe51 	bl	800dae8 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <SEAGLIDER_MSG_CLOCK_f>:
int SEAGLIDER_MSG_CLOCK_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,":");//header
 8004e5a:	4915      	ldr	r1, [pc, #84]	; (8004eb0 <SEAGLIDER_MSG_CLOCK_f+0x60>)
 8004e5c:	6838      	ldr	r0, [r7, #0]
 8004e5e:	f00c ffb9 	bl	8011dd4 <strtok>
 8004e62:	60f8      	str	r0, [r7, #12]
	pch = strtok (NULL,":");//date
 8004e64:	4912      	ldr	r1, [pc, #72]	; (8004eb0 <SEAGLIDER_MSG_CLOCK_f+0x60>)
 8004e66:	2000      	movs	r0, #0
 8004e68:	f00c ffb4 	bl	8011dd4 <strtok>
 8004e6c:	60f8      	str	r0, [r7, #12]
	memcpy(seaglider_obj->date,pch,8);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	331d      	adds	r3, #29
 8004e72:	2208      	movs	r2, #8
 8004e74:	68f9      	ldr	r1, [r7, #12]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f00b ff54 	bl	8010d24 <memcpy>
	pch = strtok (NULL,":");//time
 8004e7c:	490c      	ldr	r1, [pc, #48]	; (8004eb0 <SEAGLIDER_MSG_CLOCK_f+0x60>)
 8004e7e:	2000      	movs	r0, #0
 8004e80:	f00c ffa8 	bl	8011dd4 <strtok>
 8004e84:	60f8      	str	r0, [r7, #12]
	memcpy(seaglider_obj->time,pch,8);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3325      	adds	r3, #37	; 0x25
 8004e8a:	2208      	movs	r2, #8
 8004e8c:	68f9      	ldr	r1, [r7, #12]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f00b ff48 	bl	8010d24 <memcpy>

	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_CLOCK_RCVD,1);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f008 fe22 	bl	800dae8 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	08014490 	.word	0x08014490

08004eb4 <SEAGLIDER_MSG_WAKEUP_f>:

int SEAGLIDER_MSG_WAKEUP_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_WAKEUP_RCVD,1);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f240 215d 	movw	r1, #605	; 0x25d
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f008 fe0d 	bl	800dae8 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <SEAGLIDER_MSG_CLEAR_f>:

int SEAGLIDER_MSG_CLEAR_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_CLEAR_RCVD,1);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f240 215f 	movw	r1, #607	; 0x25f
 8004eec:	4618      	mov	r0, r3
 8004eee:	f008 fdfb 	bl	800dae8 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <SEAGLIDER_MSG_POFF_f>:

int SEAGLIDER_MSG_POFF_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_POFF_RCVD,1);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f44f 7118 	mov.w	r1, #608	; 0x260
 8004f10:	4618      	mov	r0, r3
 8004f12:	f008 fde9 	bl	800dae8 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <SEAGLIDER_MSG_ERRORS_f>:
int SEAGLIDER_MSG_ERRORS_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_ERRORS_RCVD,1);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f240 2161 	movw	r1, #609	; 0x261
 8004f34:	4618      	mov	r0, r3
 8004f36:	f008 fdd7 	bl	800dae8 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <set_default_settings>:
extern sd_storage_t microsd_storage;

settings_str run_cfg;

void set_default_settings()
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
	run_cfg.last_file_index=0;
 8004f48:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <set_default_settings+0x14>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
}
 8004f4e:	bf00      	nop
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bc80      	pop	{r7}
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	20002a84 	.word	0x20002a84

08004f5c <read_settings>:

F_RES read_settings()
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  if( read_raw_data_crc16(&microsd_storage,(uint8_t*)&run_cfg,sizeof(run_cfg),settings_filename)==F_OK){
 8004f60:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <read_settings+0x20>)
 8004f62:	2204      	movs	r2, #4
 8004f64:	4906      	ldr	r1, [pc, #24]	; (8004f80 <read_settings+0x24>)
 8004f66:	4807      	ldr	r0, [pc, #28]	; (8004f84 <read_settings+0x28>)
 8004f68:	f7fd fa4c 	bl	8002404 <read_raw_data_crc16>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <read_settings+0x1a>
	return F_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	e000      	b.n	8004f78 <read_settings+0x1c>
  }
  return F_ERR;
 8004f76:	2301      	movs	r3, #1
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20000178 	.word	0x20000178
 8004f80:	20002a84 	.word	0x20002a84
 8004f84:	200023dc 	.word	0x200023dc

08004f88 <save_settings>:

F_RES save_settings()
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  if( save_raw_data_crc16(&microsd_storage,(uint8_t*)&run_cfg,sizeof(run_cfg),settings_filename)==F_OK){
 8004f8c:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <save_settings+0x20>)
 8004f8e:	2204      	movs	r2, #4
 8004f90:	4906      	ldr	r1, [pc, #24]	; (8004fac <save_settings+0x24>)
 8004f92:	4807      	ldr	r0, [pc, #28]	; (8004fb0 <save_settings+0x28>)
 8004f94:	f7fd fb12 	bl	80025bc <save_raw_data_crc16>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <save_settings+0x1a>
	return F_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e000      	b.n	8004fa4 <save_settings+0x1c>
  }
  return F_ERR;
 8004fa2:	2301      	movs	r3, #1
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20000178 	.word	0x20000178
 8004fac:	20002a84 	.word	0x20002a84
 8004fb0:	200023dc 	.word	0x200023dc

08004fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004fba:	4b18      	ldr	r3, [pc, #96]	; (800501c <HAL_MspInit+0x68>)
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	4a17      	ldr	r2, [pc, #92]	; (800501c <HAL_MspInit+0x68>)
 8004fc0:	f043 0301 	orr.w	r3, r3, #1
 8004fc4:	6193      	str	r3, [r2, #24]
 8004fc6:	4b15      	ldr	r3, [pc, #84]	; (800501c <HAL_MspInit+0x68>)
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	60bb      	str	r3, [r7, #8]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fd2:	4b12      	ldr	r3, [pc, #72]	; (800501c <HAL_MspInit+0x68>)
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	4a11      	ldr	r2, [pc, #68]	; (800501c <HAL_MspInit+0x68>)
 8004fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fdc:	61d3      	str	r3, [r2, #28]
 8004fde:	4b0f      	ldr	r3, [pc, #60]	; (800501c <HAL_MspInit+0x68>)
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	607b      	str	r3, [r7, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004fea:	2200      	movs	r2, #0
 8004fec:	210f      	movs	r1, #15
 8004fee:	f06f 0001 	mvn.w	r0, #1
 8004ff2:	f000 fc0e 	bl	8005812 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <HAL_MspInit+0x6c>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	4a04      	ldr	r2, [pc, #16]	; (8005020 <HAL_MspInit+0x6c>)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005012:	bf00      	nop
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40021000 	.word	0x40021000
 8005020:	40010000 	.word	0x40010000

08005024 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08a      	sub	sp, #40	; 0x28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800502c:	f107 0314 	add.w	r3, r7, #20
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	609a      	str	r2, [r3, #8]
 8005038:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a4e      	ldr	r2, [pc, #312]	; (8005178 <HAL_SPI_MspInit+0x154>)
 8005040:	4293      	cmp	r3, r2
 8005042:	f040 8094 	bne.w	800516e <HAL_SPI_MspInit+0x14a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005046:	4b4d      	ldr	r3, [pc, #308]	; (800517c <HAL_SPI_MspInit+0x158>)
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	4a4c      	ldr	r2, [pc, #304]	; (800517c <HAL_SPI_MspInit+0x158>)
 800504c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005050:	6193      	str	r3, [r2, #24]
 8005052:	4b4a      	ldr	r3, [pc, #296]	; (800517c <HAL_SPI_MspInit+0x158>)
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800505a:	613b      	str	r3, [r7, #16]
 800505c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800505e:	4b47      	ldr	r3, [pc, #284]	; (800517c <HAL_SPI_MspInit+0x158>)
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	4a46      	ldr	r2, [pc, #280]	; (800517c <HAL_SPI_MspInit+0x158>)
 8005064:	f043 0308 	orr.w	r3, r3, #8
 8005068:	6193      	str	r3, [r2, #24]
 800506a:	4b44      	ldr	r3, [pc, #272]	; (800517c <HAL_SPI_MspInit+0x158>)
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8005076:	2328      	movs	r3, #40	; 0x28
 8005078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800507a:	2302      	movs	r3, #2
 800507c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800507e:	2303      	movs	r3, #3
 8005080:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005082:	f107 0314 	add.w	r3, r7, #20
 8005086:	4619      	mov	r1, r3
 8005088:	483d      	ldr	r0, [pc, #244]	; (8005180 <HAL_SPI_MspInit+0x15c>)
 800508a:	f000 ffe1 	bl	8006050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800508e:	2310      	movs	r3, #16
 8005090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005092:	2300      	movs	r3, #0
 8005094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005096:	2300      	movs	r3, #0
 8005098:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800509a:	f107 0314 	add.w	r3, r7, #20
 800509e:	4619      	mov	r1, r3
 80050a0:	4837      	ldr	r0, [pc, #220]	; (8005180 <HAL_SPI_MspInit+0x15c>)
 80050a2:	f000 ffd5 	bl	8006050 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80050a6:	4b37      	ldr	r3, [pc, #220]	; (8005184 <HAL_SPI_MspInit+0x160>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
 80050bc:	4a31      	ldr	r2, [pc, #196]	; (8005184 <HAL_SPI_MspInit+0x160>)
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	6053      	str	r3, [r2, #4]

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80050c2:	4b31      	ldr	r3, [pc, #196]	; (8005188 <HAL_SPI_MspInit+0x164>)
 80050c4:	4a31      	ldr	r2, [pc, #196]	; (800518c <HAL_SPI_MspInit+0x168>)
 80050c6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050c8:	4b2f      	ldr	r3, [pc, #188]	; (8005188 <HAL_SPI_MspInit+0x164>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050ce:	4b2e      	ldr	r3, [pc, #184]	; (8005188 <HAL_SPI_MspInit+0x164>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050d4:	4b2c      	ldr	r3, [pc, #176]	; (8005188 <HAL_SPI_MspInit+0x164>)
 80050d6:	2280      	movs	r2, #128	; 0x80
 80050d8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050da:	4b2b      	ldr	r3, [pc, #172]	; (8005188 <HAL_SPI_MspInit+0x164>)
 80050dc:	2200      	movs	r2, #0
 80050de:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050e0:	4b29      	ldr	r3, [pc, #164]	; (8005188 <HAL_SPI_MspInit+0x164>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80050e6:	4b28      	ldr	r3, [pc, #160]	; (8005188 <HAL_SPI_MspInit+0x164>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80050ec:	4b26      	ldr	r3, [pc, #152]	; (8005188 <HAL_SPI_MspInit+0x164>)
 80050ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80050f4:	4824      	ldr	r0, [pc, #144]	; (8005188 <HAL_SPI_MspInit+0x164>)
 80050f6:	f000 fbb7 	bl	8005868 <HAL_DMA_Init>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <HAL_SPI_MspInit+0xe0>
    {
      Error_Handler();
 8005100:	f7ff f852 	bl	80041a8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a20      	ldr	r2, [pc, #128]	; (8005188 <HAL_SPI_MspInit+0x164>)
 8005108:	64da      	str	r2, [r3, #76]	; 0x4c
 800510a:	4a1f      	ldr	r2, [pc, #124]	; (8005188 <HAL_SPI_MspInit+0x164>)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8005110:	4b1f      	ldr	r3, [pc, #124]	; (8005190 <HAL_SPI_MspInit+0x16c>)
 8005112:	4a20      	ldr	r2, [pc, #128]	; (8005194 <HAL_SPI_MspInit+0x170>)
 8005114:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005116:	4b1e      	ldr	r3, [pc, #120]	; (8005190 <HAL_SPI_MspInit+0x16c>)
 8005118:	2210      	movs	r2, #16
 800511a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800511c:	4b1c      	ldr	r3, [pc, #112]	; (8005190 <HAL_SPI_MspInit+0x16c>)
 800511e:	2200      	movs	r2, #0
 8005120:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005122:	4b1b      	ldr	r3, [pc, #108]	; (8005190 <HAL_SPI_MspInit+0x16c>)
 8005124:	2280      	movs	r2, #128	; 0x80
 8005126:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005128:	4b19      	ldr	r3, [pc, #100]	; (8005190 <HAL_SPI_MspInit+0x16c>)
 800512a:	2200      	movs	r2, #0
 800512c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800512e:	4b18      	ldr	r3, [pc, #96]	; (8005190 <HAL_SPI_MspInit+0x16c>)
 8005130:	2200      	movs	r2, #0
 8005132:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8005134:	4b16      	ldr	r3, [pc, #88]	; (8005190 <HAL_SPI_MspInit+0x16c>)
 8005136:	2200      	movs	r2, #0
 8005138:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800513a:	4b15      	ldr	r3, [pc, #84]	; (8005190 <HAL_SPI_MspInit+0x16c>)
 800513c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005140:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005142:	4813      	ldr	r0, [pc, #76]	; (8005190 <HAL_SPI_MspInit+0x16c>)
 8005144:	f000 fb90 	bl	8005868 <HAL_DMA_Init>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <HAL_SPI_MspInit+0x12e>
    {
      Error_Handler();
 800514e:	f7ff f82b 	bl	80041a8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a0e      	ldr	r2, [pc, #56]	; (8005190 <HAL_SPI_MspInit+0x16c>)
 8005156:	649a      	str	r2, [r3, #72]	; 0x48
 8005158:	4a0d      	ldr	r2, [pc, #52]	; (8005190 <HAL_SPI_MspInit+0x16c>)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800515e:	2200      	movs	r2, #0
 8005160:	2105      	movs	r1, #5
 8005162:	2023      	movs	r0, #35	; 0x23
 8005164:	f000 fb55 	bl	8005812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005168:	2023      	movs	r0, #35	; 0x23
 800516a:	f000 fb6e 	bl	800584a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800516e:	bf00      	nop
 8005170:	3728      	adds	r7, #40	; 0x28
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40013000 	.word	0x40013000
 800517c:	40021000 	.word	0x40021000
 8005180:	40010c00 	.word	0x40010c00
 8005184:	40010000 	.word	0x40010000
 8005188:	200014a0 	.word	0x200014a0
 800518c:	4002001c 	.word	0x4002001c
 8005190:	200014e4 	.word	0x200014e4
 8005194:	40020030 	.word	0x40020030

08005198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08c      	sub	sp, #48	; 0x30
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051a0:	f107 0320 	add.w	r3, r7, #32
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	605a      	str	r2, [r3, #4]
 80051aa:	609a      	str	r2, [r3, #8]
 80051ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART5)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a46      	ldr	r2, [pc, #280]	; (80052cc <HAL_UART_MspInit+0x134>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d145      	bne.n	8005244 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80051b8:	4b45      	ldr	r3, [pc, #276]	; (80052d0 <HAL_UART_MspInit+0x138>)
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	4a44      	ldr	r2, [pc, #272]	; (80052d0 <HAL_UART_MspInit+0x138>)
 80051be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051c2:	61d3      	str	r3, [r2, #28]
 80051c4:	4b42      	ldr	r3, [pc, #264]	; (80052d0 <HAL_UART_MspInit+0x138>)
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051d0:	4b3f      	ldr	r3, [pc, #252]	; (80052d0 <HAL_UART_MspInit+0x138>)
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	4a3e      	ldr	r2, [pc, #248]	; (80052d0 <HAL_UART_MspInit+0x138>)
 80051d6:	f043 0310 	orr.w	r3, r3, #16
 80051da:	6193      	str	r3, [r2, #24]
 80051dc:	4b3c      	ldr	r3, [pc, #240]	; (80052d0 <HAL_UART_MspInit+0x138>)
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	61bb      	str	r3, [r7, #24]
 80051e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80051e8:	4b39      	ldr	r3, [pc, #228]	; (80052d0 <HAL_UART_MspInit+0x138>)
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	4a38      	ldr	r2, [pc, #224]	; (80052d0 <HAL_UART_MspInit+0x138>)
 80051ee:	f043 0320 	orr.w	r3, r3, #32
 80051f2:	6193      	str	r3, [r2, #24]
 80051f4:	4b36      	ldr	r3, [pc, #216]	; (80052d0 <HAL_UART_MspInit+0x138>)
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	f003 0320 	and.w	r3, r3, #32
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005206:	2302      	movs	r3, #2
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800520a:	2303      	movs	r3, #3
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800520e:	f107 0320 	add.w	r3, r7, #32
 8005212:	4619      	mov	r1, r3
 8005214:	482f      	ldr	r0, [pc, #188]	; (80052d4 <HAL_UART_MspInit+0x13c>)
 8005216:	f000 ff1b 	bl	8006050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800521a:	2304      	movs	r3, #4
 800521c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800521e:	2300      	movs	r3, #0
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005222:	2300      	movs	r3, #0
 8005224:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005226:	f107 0320 	add.w	r3, r7, #32
 800522a:	4619      	mov	r1, r3
 800522c:	482a      	ldr	r0, [pc, #168]	; (80052d8 <HAL_UART_MspInit+0x140>)
 800522e:	f000 ff0f 	bl	8006050 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8005232:	2200      	movs	r2, #0
 8005234:	2105      	movs	r1, #5
 8005236:	2035      	movs	r0, #53	; 0x35
 8005238:	f000 faeb 	bl	8005812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800523c:	2035      	movs	r0, #53	; 0x35
 800523e:	f000 fb04 	bl	800584a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005242:	e03e      	b.n	80052c2 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a24      	ldr	r2, [pc, #144]	; (80052dc <HAL_UART_MspInit+0x144>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d139      	bne.n	80052c2 <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800524e:	4b20      	ldr	r3, [pc, #128]	; (80052d0 <HAL_UART_MspInit+0x138>)
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	4a1f      	ldr	r2, [pc, #124]	; (80052d0 <HAL_UART_MspInit+0x138>)
 8005254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005258:	6193      	str	r3, [r2, #24]
 800525a:	4b1d      	ldr	r3, [pc, #116]	; (80052d0 <HAL_UART_MspInit+0x138>)
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005266:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <HAL_UART_MspInit+0x138>)
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	4a19      	ldr	r2, [pc, #100]	; (80052d0 <HAL_UART_MspInit+0x138>)
 800526c:	f043 0304 	orr.w	r3, r3, #4
 8005270:	6193      	str	r3, [r2, #24]
 8005272:	4b17      	ldr	r3, [pc, #92]	; (80052d0 <HAL_UART_MspInit+0x138>)
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800527e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005284:	2302      	movs	r3, #2
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005288:	2303      	movs	r3, #3
 800528a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800528c:	f107 0320 	add.w	r3, r7, #32
 8005290:	4619      	mov	r1, r3
 8005292:	4813      	ldr	r0, [pc, #76]	; (80052e0 <HAL_UART_MspInit+0x148>)
 8005294:	f000 fedc 	bl	8006050 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800529c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800529e:	2300      	movs	r3, #0
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a2:	2300      	movs	r3, #0
 80052a4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052a6:	f107 0320 	add.w	r3, r7, #32
 80052aa:	4619      	mov	r1, r3
 80052ac:	480c      	ldr	r0, [pc, #48]	; (80052e0 <HAL_UART_MspInit+0x148>)
 80052ae:	f000 fecf 	bl	8006050 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80052b2:	2200      	movs	r2, #0
 80052b4:	2105      	movs	r1, #5
 80052b6:	2025      	movs	r0, #37	; 0x25
 80052b8:	f000 faab 	bl	8005812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80052bc:	2025      	movs	r0, #37	; 0x25
 80052be:	f000 fac4 	bl	800584a <HAL_NVIC_EnableIRQ>
}
 80052c2:	bf00      	nop
 80052c4:	3730      	adds	r7, #48	; 0x30
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40005000 	.word	0x40005000
 80052d0:	40021000 	.word	0x40021000
 80052d4:	40011000 	.word	0x40011000
 80052d8:	40011400 	.word	0x40011400
 80052dc:	40013800 	.word	0x40013800
 80052e0:	40010800 	.word	0x40010800

080052e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08c      	sub	sp, #48	; 0x30
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80052f4:	2300      	movs	r3, #0
 80052f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80052fa:	4b2e      	ldr	r3, [pc, #184]	; (80053b4 <HAL_InitTick+0xd0>)
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	4a2d      	ldr	r2, [pc, #180]	; (80053b4 <HAL_InitTick+0xd0>)
 8005300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005304:	6193      	str	r3, [r2, #24]
 8005306:	4b2b      	ldr	r3, [pc, #172]	; (80053b4 <HAL_InitTick+0xd0>)
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800530e:	60bb      	str	r3, [r7, #8]
 8005310:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005312:	f107 020c 	add.w	r2, r7, #12
 8005316:	f107 0310 	add.w	r3, r7, #16
 800531a:	4611      	mov	r1, r2
 800531c:	4618      	mov	r0, r3
 800531e:	f001 fc41 	bl	8006ba4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005322:	f001 fc2b 	bl	8006b7c <HAL_RCC_GetPCLK2Freq>
 8005326:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	4a23      	ldr	r2, [pc, #140]	; (80053b8 <HAL_InitTick+0xd4>)
 800532c:	fba2 2303 	umull	r2, r3, r2, r3
 8005330:	0c9b      	lsrs	r3, r3, #18
 8005332:	3b01      	subs	r3, #1
 8005334:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005336:	4b21      	ldr	r3, [pc, #132]	; (80053bc <HAL_InitTick+0xd8>)
 8005338:	4a21      	ldr	r2, [pc, #132]	; (80053c0 <HAL_InitTick+0xdc>)
 800533a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800533c:	4b1f      	ldr	r3, [pc, #124]	; (80053bc <HAL_InitTick+0xd8>)
 800533e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005342:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005344:	4a1d      	ldr	r2, [pc, #116]	; (80053bc <HAL_InitTick+0xd8>)
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800534a:	4b1c      	ldr	r3, [pc, #112]	; (80053bc <HAL_InitTick+0xd8>)
 800534c:	2200      	movs	r2, #0
 800534e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005350:	4b1a      	ldr	r3, [pc, #104]	; (80053bc <HAL_InitTick+0xd8>)
 8005352:	2200      	movs	r2, #0
 8005354:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005356:	4b19      	ldr	r3, [pc, #100]	; (80053bc <HAL_InitTick+0xd8>)
 8005358:	2200      	movs	r2, #0
 800535a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800535c:	4817      	ldr	r0, [pc, #92]	; (80053bc <HAL_InitTick+0xd8>)
 800535e:	f002 f83f 	bl	80073e0 <HAL_TIM_Base_Init>
 8005362:	4603      	mov	r3, r0
 8005364:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005368:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800536c:	2b00      	cmp	r3, #0
 800536e:	d11b      	bne.n	80053a8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8005370:	4812      	ldr	r0, [pc, #72]	; (80053bc <HAL_InitTick+0xd8>)
 8005372:	f002 f88d 	bl	8007490 <HAL_TIM_Base_Start_IT>
 8005376:	4603      	mov	r3, r0
 8005378:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800537c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005380:	2b00      	cmp	r3, #0
 8005382:	d111      	bne.n	80053a8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8005384:	2019      	movs	r0, #25
 8005386:	f000 fa60 	bl	800584a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b0f      	cmp	r3, #15
 800538e:	d808      	bhi.n	80053a2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8005390:	2200      	movs	r2, #0
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	2019      	movs	r0, #25
 8005396:	f000 fa3c 	bl	8005812 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800539a:	4a0a      	ldr	r2, [pc, #40]	; (80053c4 <HAL_InitTick+0xe0>)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e002      	b.n	80053a8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80053a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3730      	adds	r7, #48	; 0x30
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40021000 	.word	0x40021000
 80053b8:	431bde83 	.word	0x431bde83
 80053bc:	20002a88 	.word	0x20002a88
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	2000018c 	.word	0x2000018c

080053c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80053cc:	e7fe      	b.n	80053cc <NMI_Handler+0x4>

080053ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053ce:	b480      	push	{r7}
 80053d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053d2:	e7fe      	b.n	80053d2 <HardFault_Handler+0x4>

080053d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053d8:	e7fe      	b.n	80053d8 <MemManage_Handler+0x4>

080053da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053da:	b480      	push	{r7}
 80053dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053de:	e7fe      	b.n	80053de <BusFault_Handler+0x4>

080053e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053e4:	e7fe      	b.n	80053e4 <UsageFault_Handler+0x4>

080053e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053e6:	b480      	push	{r7}
 80053e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053ea:	bf00      	nop
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bc80      	pop	{r7}
 80053f0:	4770      	bx	lr
	...

080053f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80053f8:	4802      	ldr	r0, [pc, #8]	; (8005404 <DMA1_Channel2_IRQHandler+0x10>)
 80053fa:	f000 fbed 	bl	8005bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80053fe:	bf00      	nop
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	200014a0 	.word	0x200014a0

08005408 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800540c:	4802      	ldr	r0, [pc, #8]	; (8005418 <DMA1_Channel3_IRQHandler+0x10>)
 800540e:	f000 fbe3 	bl	8005bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005412:	bf00      	nop
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	200014e4 	.word	0x200014e4

0800541c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005420:	4802      	ldr	r0, [pc, #8]	; (800542c <TIM1_UP_IRQHandler+0x10>)
 8005422:	f002 f895 	bl	8007550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8005426:	bf00      	nop
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20002a88 	.word	0x20002a88

08005430 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005434:	4802      	ldr	r0, [pc, #8]	; (8005440 <SPI1_IRQHandler+0x10>)
 8005436:	f001 fe29 	bl	800708c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800543a:	bf00      	nop
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20001448 	.word	0x20001448

08005444 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005448:	4802      	ldr	r0, [pc, #8]	; (8005454 <USART1_IRQHandler+0x10>)
 800544a:	f002 fafb 	bl	8007a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800544e:	bf00      	nop
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	2000156c 	.word	0x2000156c

08005458 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800545c:	4802      	ldr	r0, [pc, #8]	; (8005468 <UART5_IRQHandler+0x10>)
 800545e:	f002 faf1 	bl	8007a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8005462:	bf00      	nop
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20001528 	.word	0x20001528

0800546c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  return 1;
 8005470:	2301      	movs	r3, #1
}
 8005472:	4618      	mov	r0, r3
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr

0800547a <_kill>:

int _kill(int pid, int sig)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b082      	sub	sp, #8
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005484:	f00b fb1a 	bl	8010abc <__errno>
 8005488:	4603      	mov	r3, r0
 800548a:	2216      	movs	r2, #22
 800548c:	601a      	str	r2, [r3, #0]
  return -1;
 800548e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <_exit>:

void _exit (int status)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80054a2:	f04f 31ff 	mov.w	r1, #4294967295
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff ffe7 	bl	800547a <_kill>
  while (1) {}    /* Make sure we hang here */
 80054ac:	e7fe      	b.n	80054ac <_exit+0x12>

080054ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b086      	sub	sp, #24
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	e00a      	b.n	80054d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80054c0:	f3af 8000 	nop.w
 80054c4:	4601      	mov	r1, r0
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	60ba      	str	r2, [r7, #8]
 80054cc:	b2ca      	uxtb	r2, r1
 80054ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	3301      	adds	r3, #1
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	429a      	cmp	r2, r3
 80054dc:	dbf0      	blt.n	80054c0 <_read+0x12>
  }

  return len;
 80054de:	687b      	ldr	r3, [r7, #4]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054f4:	2300      	movs	r3, #0
 80054f6:	617b      	str	r3, [r7, #20]
 80054f8:	e009      	b.n	800550e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	60ba      	str	r2, [r7, #8]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	3301      	adds	r3, #1
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	429a      	cmp	r2, r3
 8005514:	dbf1      	blt.n	80054fa <_write+0x12>
  }
  return len;
 8005516:	687b      	ldr	r3, [r7, #4]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <_close>:

int _close(int file)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005528:	f04f 33ff 	mov.w	r3, #4294967295
}
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005546:	605a      	str	r2, [r3, #4]
  return 0;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr

08005554 <_isatty>:

int _isatty(int file)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800555c:	2301      	movs	r3, #1
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr

08005568 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr

08005580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005588:	4a14      	ldr	r2, [pc, #80]	; (80055dc <_sbrk+0x5c>)
 800558a:	4b15      	ldr	r3, [pc, #84]	; (80055e0 <_sbrk+0x60>)
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005594:	4b13      	ldr	r3, [pc, #76]	; (80055e4 <_sbrk+0x64>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d102      	bne.n	80055a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800559c:	4b11      	ldr	r3, [pc, #68]	; (80055e4 <_sbrk+0x64>)
 800559e:	4a12      	ldr	r2, [pc, #72]	; (80055e8 <_sbrk+0x68>)
 80055a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055a2:	4b10      	ldr	r3, [pc, #64]	; (80055e4 <_sbrk+0x64>)
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4413      	add	r3, r2
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d207      	bcs.n	80055c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055b0:	f00b fa84 	bl	8010abc <__errno>
 80055b4:	4603      	mov	r3, r0
 80055b6:	220c      	movs	r2, #12
 80055b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055ba:	f04f 33ff 	mov.w	r3, #4294967295
 80055be:	e009      	b.n	80055d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055c0:	4b08      	ldr	r3, [pc, #32]	; (80055e4 <_sbrk+0x64>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80055c6:	4b07      	ldr	r3, [pc, #28]	; (80055e4 <_sbrk+0x64>)
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4413      	add	r3, r2
 80055ce:	4a05      	ldr	r2, [pc, #20]	; (80055e4 <_sbrk+0x64>)
 80055d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80055d2:	68fb      	ldr	r3, [r7, #12]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	20010000 	.word	0x20010000
 80055e0:	00000400 	.word	0x00000400
 80055e4:	20002ad0 	.word	0x20002ad0
 80055e8:	2000a768 	.word	0x2000a768

080055ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055f0:	bf00      	nop
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr

080055f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055f8:	480c      	ldr	r0, [pc, #48]	; (800562c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80055fa:	490d      	ldr	r1, [pc, #52]	; (8005630 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80055fc:	4a0d      	ldr	r2, [pc, #52]	; (8005634 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80055fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005600:	e002      	b.n	8005608 <LoopCopyDataInit>

08005602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005606:	3304      	adds	r3, #4

08005608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800560a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800560c:	d3f9      	bcc.n	8005602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800560e:	4a0a      	ldr	r2, [pc, #40]	; (8005638 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005610:	4c0a      	ldr	r4, [pc, #40]	; (800563c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005614:	e001      	b.n	800561a <LoopFillZerobss>

08005616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005618:	3204      	adds	r2, #4

0800561a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800561a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800561c:	d3fb      	bcc.n	8005616 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800561e:	f7ff ffe5 	bl	80055ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005622:	f00b fb47 	bl	8010cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005626:	f7fe f9cd 	bl	80039c4 <main>
  bx lr
 800562a:	4770      	bx	lr
  ldr r0, =_sdata
 800562c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005630:	200003bc 	.word	0x200003bc
  ldr r2, =_sidata
 8005634:	08015028 	.word	0x08015028
  ldr r2, =_sbss
 8005638:	200003c0 	.word	0x200003c0
  ldr r4, =_ebss
 800563c:	2000a764 	.word	0x2000a764

08005640 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005640:	e7fe      	b.n	8005640 <ADC1_2_IRQHandler>
	...

08005644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005648:	4b08      	ldr	r3, [pc, #32]	; (800566c <HAL_Init+0x28>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a07      	ldr	r2, [pc, #28]	; (800566c <HAL_Init+0x28>)
 800564e:	f043 0310 	orr.w	r3, r3, #16
 8005652:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005654:	2003      	movs	r0, #3
 8005656:	f000 f8d1 	bl	80057fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800565a:	200f      	movs	r0, #15
 800565c:	f7ff fe42 	bl	80052e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005660:	f7ff fca8 	bl	8004fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	40022000 	.word	0x40022000

08005670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <HAL_IncTick+0x1c>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	4b05      	ldr	r3, [pc, #20]	; (8005690 <HAL_IncTick+0x20>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4413      	add	r3, r2
 8005680:	4a03      	ldr	r2, [pc, #12]	; (8005690 <HAL_IncTick+0x20>)
 8005682:	6013      	str	r3, [r2, #0]
}
 8005684:	bf00      	nop
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr
 800568c:	20000190 	.word	0x20000190
 8005690:	20002ad4 	.word	0x20002ad4

08005694 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  return uwTick;
 8005698:	4b02      	ldr	r3, [pc, #8]	; (80056a4 <HAL_GetTick+0x10>)
 800569a:	681b      	ldr	r3, [r3, #0]
}
 800569c:	4618      	mov	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr
 80056a4:	20002ad4 	.word	0x20002ad4

080056a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056b8:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <__NVIC_SetPriorityGrouping+0x44>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056c4:	4013      	ands	r3, r2
 80056c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056da:	4a04      	ldr	r2, [pc, #16]	; (80056ec <__NVIC_SetPriorityGrouping+0x44>)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	60d3      	str	r3, [r2, #12]
}
 80056e0:	bf00      	nop
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	e000ed00 	.word	0xe000ed00

080056f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056f4:	4b04      	ldr	r3, [pc, #16]	; (8005708 <__NVIC_GetPriorityGrouping+0x18>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	0a1b      	lsrs	r3, r3, #8
 80056fa:	f003 0307 	and.w	r3, r3, #7
}
 80056fe:	4618      	mov	r0, r3
 8005700:	46bd      	mov	sp, r7
 8005702:	bc80      	pop	{r7}
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	e000ed00 	.word	0xe000ed00

0800570c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	4603      	mov	r3, r0
 8005714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571a:	2b00      	cmp	r3, #0
 800571c:	db0b      	blt.n	8005736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800571e:	79fb      	ldrb	r3, [r7, #7]
 8005720:	f003 021f 	and.w	r2, r3, #31
 8005724:	4906      	ldr	r1, [pc, #24]	; (8005740 <__NVIC_EnableIRQ+0x34>)
 8005726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800572a:	095b      	lsrs	r3, r3, #5
 800572c:	2001      	movs	r0, #1
 800572e:	fa00 f202 	lsl.w	r2, r0, r2
 8005732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr
 8005740:	e000e100 	.word	0xe000e100

08005744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	6039      	str	r1, [r7, #0]
 800574e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005754:	2b00      	cmp	r3, #0
 8005756:	db0a      	blt.n	800576e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	b2da      	uxtb	r2, r3
 800575c:	490c      	ldr	r1, [pc, #48]	; (8005790 <__NVIC_SetPriority+0x4c>)
 800575e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005762:	0112      	lsls	r2, r2, #4
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	440b      	add	r3, r1
 8005768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800576c:	e00a      	b.n	8005784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	b2da      	uxtb	r2, r3
 8005772:	4908      	ldr	r1, [pc, #32]	; (8005794 <__NVIC_SetPriority+0x50>)
 8005774:	79fb      	ldrb	r3, [r7, #7]
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	3b04      	subs	r3, #4
 800577c:	0112      	lsls	r2, r2, #4
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	440b      	add	r3, r1
 8005782:	761a      	strb	r2, [r3, #24]
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	e000e100 	.word	0xe000e100
 8005794:	e000ed00 	.word	0xe000ed00

08005798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005798:	b480      	push	{r7}
 800579a:	b089      	sub	sp, #36	; 0x24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f1c3 0307 	rsb	r3, r3, #7
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	bf28      	it	cs
 80057b6:	2304      	movcs	r3, #4
 80057b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	3304      	adds	r3, #4
 80057be:	2b06      	cmp	r3, #6
 80057c0:	d902      	bls.n	80057c8 <NVIC_EncodePriority+0x30>
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	3b03      	subs	r3, #3
 80057c6:	e000      	b.n	80057ca <NVIC_EncodePriority+0x32>
 80057c8:	2300      	movs	r3, #0
 80057ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057cc:	f04f 32ff 	mov.w	r2, #4294967295
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	43da      	mvns	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	401a      	ands	r2, r3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057e0:	f04f 31ff 	mov.w	r1, #4294967295
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ea:	43d9      	mvns	r1, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f0:	4313      	orrs	r3, r2
         );
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3724      	adds	r7, #36	; 0x24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr

080057fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff ff4f 	bl	80056a8 <__NVIC_SetPriorityGrouping>
}
 800580a:	bf00      	nop
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005812:	b580      	push	{r7, lr}
 8005814:	b086      	sub	sp, #24
 8005816:	af00      	add	r7, sp, #0
 8005818:	4603      	mov	r3, r0
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	607a      	str	r2, [r7, #4]
 800581e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005824:	f7ff ff64 	bl	80056f0 <__NVIC_GetPriorityGrouping>
 8005828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	68b9      	ldr	r1, [r7, #8]
 800582e:	6978      	ldr	r0, [r7, #20]
 8005830:	f7ff ffb2 	bl	8005798 <NVIC_EncodePriority>
 8005834:	4602      	mov	r2, r0
 8005836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800583a:	4611      	mov	r1, r2
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff ff81 	bl	8005744 <__NVIC_SetPriority>
}
 8005842:	bf00      	nop
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	4603      	mov	r3, r0
 8005852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff ff57 	bl	800570c <__NVIC_EnableIRQ>
}
 800585e:	bf00      	nop
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e059      	b.n	8005932 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	4b2d      	ldr	r3, [pc, #180]	; (800593c <HAL_DMA_Init+0xd4>)
 8005886:	429a      	cmp	r2, r3
 8005888:	d80f      	bhi.n	80058aa <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	4b2b      	ldr	r3, [pc, #172]	; (8005940 <HAL_DMA_Init+0xd8>)
 8005892:	4413      	add	r3, r2
 8005894:	4a2b      	ldr	r2, [pc, #172]	; (8005944 <HAL_DMA_Init+0xdc>)
 8005896:	fba2 2303 	umull	r2, r3, r2, r3
 800589a:	091b      	lsrs	r3, r3, #4
 800589c:	009a      	lsls	r2, r3, #2
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a28      	ldr	r2, [pc, #160]	; (8005948 <HAL_DMA_Init+0xe0>)
 80058a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80058a8:	e00e      	b.n	80058c8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	4b26      	ldr	r3, [pc, #152]	; (800594c <HAL_DMA_Init+0xe4>)
 80058b2:	4413      	add	r3, r2
 80058b4:	4a23      	ldr	r2, [pc, #140]	; (8005944 <HAL_DMA_Init+0xdc>)
 80058b6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ba:	091b      	lsrs	r3, r3, #4
 80058bc:	009a      	lsls	r2, r3, #2
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a22      	ldr	r2, [pc, #136]	; (8005950 <HAL_DMA_Init+0xe8>)
 80058c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80058de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80058e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80058ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005904:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	bc80      	pop	{r7}
 800593a:	4770      	bx	lr
 800593c:	40020407 	.word	0x40020407
 8005940:	bffdfff8 	.word	0xbffdfff8
 8005944:	cccccccd 	.word	0xcccccccd
 8005948:	40020000 	.word	0x40020000
 800594c:	bffdfbf8 	.word	0xbffdfbf8
 8005950:	40020400 	.word	0x40020400

08005954 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005966:	2b02      	cmp	r3, #2
 8005968:	d008      	beq.n	800597c <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2204      	movs	r2, #4
 800596e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e020      	b.n	80059be <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 020e 	bic.w	r2, r2, #14
 800598a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0201 	bic.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a4:	2101      	movs	r1, #1
 80059a6:	fa01 f202 	lsl.w	r2, r1, r2
 80059aa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bc80      	pop	{r7}
 80059c6:	4770      	bx	lr

080059c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d005      	beq.n	80059ea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2204      	movs	r2, #4
 80059e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	73fb      	strb	r3, [r7, #15]
 80059e8:	e0d6      	b.n	8005b98 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 020e 	bic.w	r2, r2, #14
 80059f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0201 	bic.w	r2, r2, #1
 8005a08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	4b64      	ldr	r3, [pc, #400]	; (8005ba4 <HAL_DMA_Abort_IT+0x1dc>)
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d958      	bls.n	8005ac8 <HAL_DMA_Abort_IT+0x100>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a63      	ldr	r2, [pc, #396]	; (8005ba8 <HAL_DMA_Abort_IT+0x1e0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d04f      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0xf8>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a61      	ldr	r2, [pc, #388]	; (8005bac <HAL_DMA_Abort_IT+0x1e4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d048      	beq.n	8005abc <HAL_DMA_Abort_IT+0xf4>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a60      	ldr	r2, [pc, #384]	; (8005bb0 <HAL_DMA_Abort_IT+0x1e8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d040      	beq.n	8005ab6 <HAL_DMA_Abort_IT+0xee>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a5e      	ldr	r2, [pc, #376]	; (8005bb4 <HAL_DMA_Abort_IT+0x1ec>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d038      	beq.n	8005ab0 <HAL_DMA_Abort_IT+0xe8>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a5d      	ldr	r2, [pc, #372]	; (8005bb8 <HAL_DMA_Abort_IT+0x1f0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d030      	beq.n	8005aaa <HAL_DMA_Abort_IT+0xe2>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a5b      	ldr	r2, [pc, #364]	; (8005bbc <HAL_DMA_Abort_IT+0x1f4>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d028      	beq.n	8005aa4 <HAL_DMA_Abort_IT+0xdc>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a53      	ldr	r2, [pc, #332]	; (8005ba4 <HAL_DMA_Abort_IT+0x1dc>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d020      	beq.n	8005a9e <HAL_DMA_Abort_IT+0xd6>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a57      	ldr	r2, [pc, #348]	; (8005bc0 <HAL_DMA_Abort_IT+0x1f8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d019      	beq.n	8005a9a <HAL_DMA_Abort_IT+0xd2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a56      	ldr	r2, [pc, #344]	; (8005bc4 <HAL_DMA_Abort_IT+0x1fc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d012      	beq.n	8005a96 <HAL_DMA_Abort_IT+0xce>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a54      	ldr	r2, [pc, #336]	; (8005bc8 <HAL_DMA_Abort_IT+0x200>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00a      	beq.n	8005a90 <HAL_DMA_Abort_IT+0xc8>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a53      	ldr	r2, [pc, #332]	; (8005bcc <HAL_DMA_Abort_IT+0x204>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d102      	bne.n	8005a8a <HAL_DMA_Abort_IT+0xc2>
 8005a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a88:	e01b      	b.n	8005ac2 <HAL_DMA_Abort_IT+0xfa>
 8005a8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a8e:	e018      	b.n	8005ac2 <HAL_DMA_Abort_IT+0xfa>
 8005a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a94:	e015      	b.n	8005ac2 <HAL_DMA_Abort_IT+0xfa>
 8005a96:	2310      	movs	r3, #16
 8005a98:	e013      	b.n	8005ac2 <HAL_DMA_Abort_IT+0xfa>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e011      	b.n	8005ac2 <HAL_DMA_Abort_IT+0xfa>
 8005a9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005aa2:	e00e      	b.n	8005ac2 <HAL_DMA_Abort_IT+0xfa>
 8005aa4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005aa8:	e00b      	b.n	8005ac2 <HAL_DMA_Abort_IT+0xfa>
 8005aaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005aae:	e008      	b.n	8005ac2 <HAL_DMA_Abort_IT+0xfa>
 8005ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ab4:	e005      	b.n	8005ac2 <HAL_DMA_Abort_IT+0xfa>
 8005ab6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005aba:	e002      	b.n	8005ac2 <HAL_DMA_Abort_IT+0xfa>
 8005abc:	2310      	movs	r3, #16
 8005abe:	e000      	b.n	8005ac2 <HAL_DMA_Abort_IT+0xfa>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	4a43      	ldr	r2, [pc, #268]	; (8005bd0 <HAL_DMA_Abort_IT+0x208>)
 8005ac4:	6053      	str	r3, [r2, #4]
 8005ac6:	e057      	b.n	8005b78 <HAL_DMA_Abort_IT+0x1b0>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a36      	ldr	r2, [pc, #216]	; (8005ba8 <HAL_DMA_Abort_IT+0x1e0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d04f      	beq.n	8005b72 <HAL_DMA_Abort_IT+0x1aa>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a35      	ldr	r2, [pc, #212]	; (8005bac <HAL_DMA_Abort_IT+0x1e4>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d048      	beq.n	8005b6e <HAL_DMA_Abort_IT+0x1a6>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a33      	ldr	r2, [pc, #204]	; (8005bb0 <HAL_DMA_Abort_IT+0x1e8>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d040      	beq.n	8005b68 <HAL_DMA_Abort_IT+0x1a0>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a32      	ldr	r2, [pc, #200]	; (8005bb4 <HAL_DMA_Abort_IT+0x1ec>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d038      	beq.n	8005b62 <HAL_DMA_Abort_IT+0x19a>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a30      	ldr	r2, [pc, #192]	; (8005bb8 <HAL_DMA_Abort_IT+0x1f0>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d030      	beq.n	8005b5c <HAL_DMA_Abort_IT+0x194>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a2f      	ldr	r2, [pc, #188]	; (8005bbc <HAL_DMA_Abort_IT+0x1f4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d028      	beq.n	8005b56 <HAL_DMA_Abort_IT+0x18e>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a26      	ldr	r2, [pc, #152]	; (8005ba4 <HAL_DMA_Abort_IT+0x1dc>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d020      	beq.n	8005b50 <HAL_DMA_Abort_IT+0x188>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a2b      	ldr	r2, [pc, #172]	; (8005bc0 <HAL_DMA_Abort_IT+0x1f8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d019      	beq.n	8005b4c <HAL_DMA_Abort_IT+0x184>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a29      	ldr	r2, [pc, #164]	; (8005bc4 <HAL_DMA_Abort_IT+0x1fc>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d012      	beq.n	8005b48 <HAL_DMA_Abort_IT+0x180>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a28      	ldr	r2, [pc, #160]	; (8005bc8 <HAL_DMA_Abort_IT+0x200>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00a      	beq.n	8005b42 <HAL_DMA_Abort_IT+0x17a>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a26      	ldr	r2, [pc, #152]	; (8005bcc <HAL_DMA_Abort_IT+0x204>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d102      	bne.n	8005b3c <HAL_DMA_Abort_IT+0x174>
 8005b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b3a:	e01b      	b.n	8005b74 <HAL_DMA_Abort_IT+0x1ac>
 8005b3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b40:	e018      	b.n	8005b74 <HAL_DMA_Abort_IT+0x1ac>
 8005b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b46:	e015      	b.n	8005b74 <HAL_DMA_Abort_IT+0x1ac>
 8005b48:	2310      	movs	r3, #16
 8005b4a:	e013      	b.n	8005b74 <HAL_DMA_Abort_IT+0x1ac>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e011      	b.n	8005b74 <HAL_DMA_Abort_IT+0x1ac>
 8005b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b54:	e00e      	b.n	8005b74 <HAL_DMA_Abort_IT+0x1ac>
 8005b56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005b5a:	e00b      	b.n	8005b74 <HAL_DMA_Abort_IT+0x1ac>
 8005b5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b60:	e008      	b.n	8005b74 <HAL_DMA_Abort_IT+0x1ac>
 8005b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b66:	e005      	b.n	8005b74 <HAL_DMA_Abort_IT+0x1ac>
 8005b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b6c:	e002      	b.n	8005b74 <HAL_DMA_Abort_IT+0x1ac>
 8005b6e:	2310      	movs	r3, #16
 8005b70:	e000      	b.n	8005b74 <HAL_DMA_Abort_IT+0x1ac>
 8005b72:	2301      	movs	r3, #1
 8005b74:	4a17      	ldr	r2, [pc, #92]	; (8005bd4 <HAL_DMA_Abort_IT+0x20c>)
 8005b76:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	4798      	blx	r3
    } 
  }
  return status;
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40020080 	.word	0x40020080
 8005ba8:	40020008 	.word	0x40020008
 8005bac:	4002001c 	.word	0x4002001c
 8005bb0:	40020030 	.word	0x40020030
 8005bb4:	40020044 	.word	0x40020044
 8005bb8:	40020058 	.word	0x40020058
 8005bbc:	4002006c 	.word	0x4002006c
 8005bc0:	40020408 	.word	0x40020408
 8005bc4:	4002041c 	.word	0x4002041c
 8005bc8:	40020430 	.word	0x40020430
 8005bcc:	40020444 	.word	0x40020444
 8005bd0:	40020400 	.word	0x40020400
 8005bd4:	40020000 	.word	0x40020000

08005bd8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf4:	2204      	movs	r2, #4
 8005bf6:	409a      	lsls	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 80f1 	beq.w	8005de4 <HAL_DMA_IRQHandler+0x20c>
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 80eb 	beq.w	8005de4 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0320 	and.w	r3, r3, #32
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d107      	bne.n	8005c2c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0204 	bic.w	r2, r2, #4
 8005c2a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	461a      	mov	r2, r3
 8005c32:	4b5f      	ldr	r3, [pc, #380]	; (8005db0 <HAL_DMA_IRQHandler+0x1d8>)
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d958      	bls.n	8005cea <HAL_DMA_IRQHandler+0x112>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a5d      	ldr	r2, [pc, #372]	; (8005db4 <HAL_DMA_IRQHandler+0x1dc>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d04f      	beq.n	8005ce2 <HAL_DMA_IRQHandler+0x10a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a5c      	ldr	r2, [pc, #368]	; (8005db8 <HAL_DMA_IRQHandler+0x1e0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d048      	beq.n	8005cde <HAL_DMA_IRQHandler+0x106>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a5a      	ldr	r2, [pc, #360]	; (8005dbc <HAL_DMA_IRQHandler+0x1e4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d040      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x100>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a59      	ldr	r2, [pc, #356]	; (8005dc0 <HAL_DMA_IRQHandler+0x1e8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d038      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0xfa>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a57      	ldr	r2, [pc, #348]	; (8005dc4 <HAL_DMA_IRQHandler+0x1ec>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d030      	beq.n	8005ccc <HAL_DMA_IRQHandler+0xf4>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a56      	ldr	r2, [pc, #344]	; (8005dc8 <HAL_DMA_IRQHandler+0x1f0>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d028      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0xee>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a4d      	ldr	r2, [pc, #308]	; (8005db0 <HAL_DMA_IRQHandler+0x1d8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d020      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0xe8>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a52      	ldr	r2, [pc, #328]	; (8005dcc <HAL_DMA_IRQHandler+0x1f4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d019      	beq.n	8005cbc <HAL_DMA_IRQHandler+0xe4>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a50      	ldr	r2, [pc, #320]	; (8005dd0 <HAL_DMA_IRQHandler+0x1f8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d012      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0xe0>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a4f      	ldr	r2, [pc, #316]	; (8005dd4 <HAL_DMA_IRQHandler+0x1fc>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d00a      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0xda>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a4d      	ldr	r2, [pc, #308]	; (8005dd8 <HAL_DMA_IRQHandler+0x200>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d102      	bne.n	8005cac <HAL_DMA_IRQHandler+0xd4>
 8005ca6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005caa:	e01b      	b.n	8005ce4 <HAL_DMA_IRQHandler+0x10c>
 8005cac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005cb0:	e018      	b.n	8005ce4 <HAL_DMA_IRQHandler+0x10c>
 8005cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cb6:	e015      	b.n	8005ce4 <HAL_DMA_IRQHandler+0x10c>
 8005cb8:	2340      	movs	r3, #64	; 0x40
 8005cba:	e013      	b.n	8005ce4 <HAL_DMA_IRQHandler+0x10c>
 8005cbc:	2304      	movs	r3, #4
 8005cbe:	e011      	b.n	8005ce4 <HAL_DMA_IRQHandler+0x10c>
 8005cc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005cc4:	e00e      	b.n	8005ce4 <HAL_DMA_IRQHandler+0x10c>
 8005cc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005cca:	e00b      	b.n	8005ce4 <HAL_DMA_IRQHandler+0x10c>
 8005ccc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005cd0:	e008      	b.n	8005ce4 <HAL_DMA_IRQHandler+0x10c>
 8005cd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005cd6:	e005      	b.n	8005ce4 <HAL_DMA_IRQHandler+0x10c>
 8005cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cdc:	e002      	b.n	8005ce4 <HAL_DMA_IRQHandler+0x10c>
 8005cde:	2340      	movs	r3, #64	; 0x40
 8005ce0:	e000      	b.n	8005ce4 <HAL_DMA_IRQHandler+0x10c>
 8005ce2:	2304      	movs	r3, #4
 8005ce4:	4a3d      	ldr	r2, [pc, #244]	; (8005ddc <HAL_DMA_IRQHandler+0x204>)
 8005ce6:	6053      	str	r3, [r2, #4]
 8005ce8:	e057      	b.n	8005d9a <HAL_DMA_IRQHandler+0x1c2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a31      	ldr	r2, [pc, #196]	; (8005db4 <HAL_DMA_IRQHandler+0x1dc>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d04f      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x1bc>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a2f      	ldr	r2, [pc, #188]	; (8005db8 <HAL_DMA_IRQHandler+0x1e0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d048      	beq.n	8005d90 <HAL_DMA_IRQHandler+0x1b8>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a2e      	ldr	r2, [pc, #184]	; (8005dbc <HAL_DMA_IRQHandler+0x1e4>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d040      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x1b2>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a2c      	ldr	r2, [pc, #176]	; (8005dc0 <HAL_DMA_IRQHandler+0x1e8>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d038      	beq.n	8005d84 <HAL_DMA_IRQHandler+0x1ac>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a2b      	ldr	r2, [pc, #172]	; (8005dc4 <HAL_DMA_IRQHandler+0x1ec>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d030      	beq.n	8005d7e <HAL_DMA_IRQHandler+0x1a6>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a29      	ldr	r2, [pc, #164]	; (8005dc8 <HAL_DMA_IRQHandler+0x1f0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d028      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x1a0>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a21      	ldr	r2, [pc, #132]	; (8005db0 <HAL_DMA_IRQHandler+0x1d8>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d020      	beq.n	8005d72 <HAL_DMA_IRQHandler+0x19a>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a25      	ldr	r2, [pc, #148]	; (8005dcc <HAL_DMA_IRQHandler+0x1f4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d019      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x196>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a24      	ldr	r2, [pc, #144]	; (8005dd0 <HAL_DMA_IRQHandler+0x1f8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d012      	beq.n	8005d6a <HAL_DMA_IRQHandler+0x192>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a22      	ldr	r2, [pc, #136]	; (8005dd4 <HAL_DMA_IRQHandler+0x1fc>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00a      	beq.n	8005d64 <HAL_DMA_IRQHandler+0x18c>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a21      	ldr	r2, [pc, #132]	; (8005dd8 <HAL_DMA_IRQHandler+0x200>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d102      	bne.n	8005d5e <HAL_DMA_IRQHandler+0x186>
 8005d58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d5c:	e01b      	b.n	8005d96 <HAL_DMA_IRQHandler+0x1be>
 8005d5e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005d62:	e018      	b.n	8005d96 <HAL_DMA_IRQHandler+0x1be>
 8005d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d68:	e015      	b.n	8005d96 <HAL_DMA_IRQHandler+0x1be>
 8005d6a:	2340      	movs	r3, #64	; 0x40
 8005d6c:	e013      	b.n	8005d96 <HAL_DMA_IRQHandler+0x1be>
 8005d6e:	2304      	movs	r3, #4
 8005d70:	e011      	b.n	8005d96 <HAL_DMA_IRQHandler+0x1be>
 8005d72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005d76:	e00e      	b.n	8005d96 <HAL_DMA_IRQHandler+0x1be>
 8005d78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d7c:	e00b      	b.n	8005d96 <HAL_DMA_IRQHandler+0x1be>
 8005d7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005d82:	e008      	b.n	8005d96 <HAL_DMA_IRQHandler+0x1be>
 8005d84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d88:	e005      	b.n	8005d96 <HAL_DMA_IRQHandler+0x1be>
 8005d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d8e:	e002      	b.n	8005d96 <HAL_DMA_IRQHandler+0x1be>
 8005d90:	2340      	movs	r3, #64	; 0x40
 8005d92:	e000      	b.n	8005d96 <HAL_DMA_IRQHandler+0x1be>
 8005d94:	2304      	movs	r3, #4
 8005d96:	4a12      	ldr	r2, [pc, #72]	; (8005de0 <HAL_DMA_IRQHandler+0x208>)
 8005d98:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 8136 	beq.w	8006010 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005dac:	e130      	b.n	8006010 <HAL_DMA_IRQHandler+0x438>
 8005dae:	bf00      	nop
 8005db0:	40020080 	.word	0x40020080
 8005db4:	40020008 	.word	0x40020008
 8005db8:	4002001c 	.word	0x4002001c
 8005dbc:	40020030 	.word	0x40020030
 8005dc0:	40020044 	.word	0x40020044
 8005dc4:	40020058 	.word	0x40020058
 8005dc8:	4002006c 	.word	0x4002006c
 8005dcc:	40020408 	.word	0x40020408
 8005dd0:	4002041c 	.word	0x4002041c
 8005dd4:	40020430 	.word	0x40020430
 8005dd8:	40020444 	.word	0x40020444
 8005ddc:	40020400 	.word	0x40020400
 8005de0:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de8:	2202      	movs	r2, #2
 8005dea:	409a      	lsls	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 80dd 	beq.w	8005fb0 <HAL_DMA_IRQHandler+0x3d8>
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 80d7 	beq.w	8005fb0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0320 	and.w	r3, r3, #32
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10b      	bne.n	8005e28 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 020a 	bic.w	r2, r2, #10
 8005e1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4b7b      	ldr	r3, [pc, #492]	; (800601c <HAL_DMA_IRQHandler+0x444>)
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d958      	bls.n	8005ee6 <HAL_DMA_IRQHandler+0x30e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a79      	ldr	r2, [pc, #484]	; (8006020 <HAL_DMA_IRQHandler+0x448>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d04f      	beq.n	8005ede <HAL_DMA_IRQHandler+0x306>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a78      	ldr	r2, [pc, #480]	; (8006024 <HAL_DMA_IRQHandler+0x44c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d048      	beq.n	8005eda <HAL_DMA_IRQHandler+0x302>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a76      	ldr	r2, [pc, #472]	; (8006028 <HAL_DMA_IRQHandler+0x450>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d040      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x2fc>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a75      	ldr	r2, [pc, #468]	; (800602c <HAL_DMA_IRQHandler+0x454>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d038      	beq.n	8005ece <HAL_DMA_IRQHandler+0x2f6>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a73      	ldr	r2, [pc, #460]	; (8006030 <HAL_DMA_IRQHandler+0x458>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d030      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0x2f0>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a72      	ldr	r2, [pc, #456]	; (8006034 <HAL_DMA_IRQHandler+0x45c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d028      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x2ea>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a69      	ldr	r2, [pc, #420]	; (800601c <HAL_DMA_IRQHandler+0x444>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d020      	beq.n	8005ebc <HAL_DMA_IRQHandler+0x2e4>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a6e      	ldr	r2, [pc, #440]	; (8006038 <HAL_DMA_IRQHandler+0x460>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d019      	beq.n	8005eb8 <HAL_DMA_IRQHandler+0x2e0>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a6c      	ldr	r2, [pc, #432]	; (800603c <HAL_DMA_IRQHandler+0x464>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d012      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x2dc>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a6b      	ldr	r2, [pc, #428]	; (8006040 <HAL_DMA_IRQHandler+0x468>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00a      	beq.n	8005eae <HAL_DMA_IRQHandler+0x2d6>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a69      	ldr	r2, [pc, #420]	; (8006044 <HAL_DMA_IRQHandler+0x46c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d102      	bne.n	8005ea8 <HAL_DMA_IRQHandler+0x2d0>
 8005ea2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ea6:	e01b      	b.n	8005ee0 <HAL_DMA_IRQHandler+0x308>
 8005ea8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005eac:	e018      	b.n	8005ee0 <HAL_DMA_IRQHandler+0x308>
 8005eae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eb2:	e015      	b.n	8005ee0 <HAL_DMA_IRQHandler+0x308>
 8005eb4:	2320      	movs	r3, #32
 8005eb6:	e013      	b.n	8005ee0 <HAL_DMA_IRQHandler+0x308>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e011      	b.n	8005ee0 <HAL_DMA_IRQHandler+0x308>
 8005ebc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ec0:	e00e      	b.n	8005ee0 <HAL_DMA_IRQHandler+0x308>
 8005ec2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ec6:	e00b      	b.n	8005ee0 <HAL_DMA_IRQHandler+0x308>
 8005ec8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ecc:	e008      	b.n	8005ee0 <HAL_DMA_IRQHandler+0x308>
 8005ece:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ed2:	e005      	b.n	8005ee0 <HAL_DMA_IRQHandler+0x308>
 8005ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ed8:	e002      	b.n	8005ee0 <HAL_DMA_IRQHandler+0x308>
 8005eda:	2320      	movs	r3, #32
 8005edc:	e000      	b.n	8005ee0 <HAL_DMA_IRQHandler+0x308>
 8005ede:	2302      	movs	r3, #2
 8005ee0:	4a59      	ldr	r2, [pc, #356]	; (8006048 <HAL_DMA_IRQHandler+0x470>)
 8005ee2:	6053      	str	r3, [r2, #4]
 8005ee4:	e057      	b.n	8005f96 <HAL_DMA_IRQHandler+0x3be>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a4d      	ldr	r2, [pc, #308]	; (8006020 <HAL_DMA_IRQHandler+0x448>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d04f      	beq.n	8005f90 <HAL_DMA_IRQHandler+0x3b8>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a4b      	ldr	r2, [pc, #300]	; (8006024 <HAL_DMA_IRQHandler+0x44c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d048      	beq.n	8005f8c <HAL_DMA_IRQHandler+0x3b4>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a4a      	ldr	r2, [pc, #296]	; (8006028 <HAL_DMA_IRQHandler+0x450>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d040      	beq.n	8005f86 <HAL_DMA_IRQHandler+0x3ae>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a48      	ldr	r2, [pc, #288]	; (800602c <HAL_DMA_IRQHandler+0x454>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d038      	beq.n	8005f80 <HAL_DMA_IRQHandler+0x3a8>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a47      	ldr	r2, [pc, #284]	; (8006030 <HAL_DMA_IRQHandler+0x458>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d030      	beq.n	8005f7a <HAL_DMA_IRQHandler+0x3a2>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a45      	ldr	r2, [pc, #276]	; (8006034 <HAL_DMA_IRQHandler+0x45c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d028      	beq.n	8005f74 <HAL_DMA_IRQHandler+0x39c>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a3d      	ldr	r2, [pc, #244]	; (800601c <HAL_DMA_IRQHandler+0x444>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d020      	beq.n	8005f6e <HAL_DMA_IRQHandler+0x396>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a41      	ldr	r2, [pc, #260]	; (8006038 <HAL_DMA_IRQHandler+0x460>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d019      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x392>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a40      	ldr	r2, [pc, #256]	; (800603c <HAL_DMA_IRQHandler+0x464>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d012      	beq.n	8005f66 <HAL_DMA_IRQHandler+0x38e>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a3e      	ldr	r2, [pc, #248]	; (8006040 <HAL_DMA_IRQHandler+0x468>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d00a      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x388>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a3d      	ldr	r2, [pc, #244]	; (8006044 <HAL_DMA_IRQHandler+0x46c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d102      	bne.n	8005f5a <HAL_DMA_IRQHandler+0x382>
 8005f54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f58:	e01b      	b.n	8005f92 <HAL_DMA_IRQHandler+0x3ba>
 8005f5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f5e:	e018      	b.n	8005f92 <HAL_DMA_IRQHandler+0x3ba>
 8005f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f64:	e015      	b.n	8005f92 <HAL_DMA_IRQHandler+0x3ba>
 8005f66:	2320      	movs	r3, #32
 8005f68:	e013      	b.n	8005f92 <HAL_DMA_IRQHandler+0x3ba>
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	e011      	b.n	8005f92 <HAL_DMA_IRQHandler+0x3ba>
 8005f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f72:	e00e      	b.n	8005f92 <HAL_DMA_IRQHandler+0x3ba>
 8005f74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005f78:	e00b      	b.n	8005f92 <HAL_DMA_IRQHandler+0x3ba>
 8005f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f7e:	e008      	b.n	8005f92 <HAL_DMA_IRQHandler+0x3ba>
 8005f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f84:	e005      	b.n	8005f92 <HAL_DMA_IRQHandler+0x3ba>
 8005f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f8a:	e002      	b.n	8005f92 <HAL_DMA_IRQHandler+0x3ba>
 8005f8c:	2320      	movs	r3, #32
 8005f8e:	e000      	b.n	8005f92 <HAL_DMA_IRQHandler+0x3ba>
 8005f90:	2302      	movs	r3, #2
 8005f92:	4a2e      	ldr	r2, [pc, #184]	; (800604c <HAL_DMA_IRQHandler+0x474>)
 8005f94:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d034      	beq.n	8006010 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005fae:	e02f      	b.n	8006010 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	2208      	movs	r2, #8
 8005fb6:	409a      	lsls	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d028      	beq.n	8006012 <HAL_DMA_IRQHandler+0x43a>
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d023      	beq.n	8006012 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 020e 	bic.w	r2, r2, #14
 8005fd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8005fe8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006004:	2b00      	cmp	r3, #0
 8006006:	d004      	beq.n	8006012 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	4798      	blx	r3
    }
  }
  return;
 8006010:	bf00      	nop
 8006012:	bf00      	nop
}
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40020080 	.word	0x40020080
 8006020:	40020008 	.word	0x40020008
 8006024:	4002001c 	.word	0x4002001c
 8006028:	40020030 	.word	0x40020030
 800602c:	40020044 	.word	0x40020044
 8006030:	40020058 	.word	0x40020058
 8006034:	4002006c 	.word	0x4002006c
 8006038:	40020408 	.word	0x40020408
 800603c:	4002041c 	.word	0x4002041c
 8006040:	40020430 	.word	0x40020430
 8006044:	40020444 	.word	0x40020444
 8006048:	40020400 	.word	0x40020400
 800604c:	40020000 	.word	0x40020000

08006050 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006050:	b480      	push	{r7}
 8006052:	b08b      	sub	sp, #44	; 0x2c
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800605a:	2300      	movs	r3, #0
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800605e:	2300      	movs	r3, #0
 8006060:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006062:	e179      	b.n	8006358 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006064:	2201      	movs	r2, #1
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69fa      	ldr	r2, [r7, #28]
 8006074:	4013      	ands	r3, r2
 8006076:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	429a      	cmp	r2, r3
 800607e:	f040 8168 	bne.w	8006352 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	4a96      	ldr	r2, [pc, #600]	; (80062e0 <HAL_GPIO_Init+0x290>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d05e      	beq.n	800614a <HAL_GPIO_Init+0xfa>
 800608c:	4a94      	ldr	r2, [pc, #592]	; (80062e0 <HAL_GPIO_Init+0x290>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d875      	bhi.n	800617e <HAL_GPIO_Init+0x12e>
 8006092:	4a94      	ldr	r2, [pc, #592]	; (80062e4 <HAL_GPIO_Init+0x294>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d058      	beq.n	800614a <HAL_GPIO_Init+0xfa>
 8006098:	4a92      	ldr	r2, [pc, #584]	; (80062e4 <HAL_GPIO_Init+0x294>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d86f      	bhi.n	800617e <HAL_GPIO_Init+0x12e>
 800609e:	4a92      	ldr	r2, [pc, #584]	; (80062e8 <HAL_GPIO_Init+0x298>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d052      	beq.n	800614a <HAL_GPIO_Init+0xfa>
 80060a4:	4a90      	ldr	r2, [pc, #576]	; (80062e8 <HAL_GPIO_Init+0x298>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d869      	bhi.n	800617e <HAL_GPIO_Init+0x12e>
 80060aa:	4a90      	ldr	r2, [pc, #576]	; (80062ec <HAL_GPIO_Init+0x29c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d04c      	beq.n	800614a <HAL_GPIO_Init+0xfa>
 80060b0:	4a8e      	ldr	r2, [pc, #568]	; (80062ec <HAL_GPIO_Init+0x29c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d863      	bhi.n	800617e <HAL_GPIO_Init+0x12e>
 80060b6:	4a8e      	ldr	r2, [pc, #568]	; (80062f0 <HAL_GPIO_Init+0x2a0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d046      	beq.n	800614a <HAL_GPIO_Init+0xfa>
 80060bc:	4a8c      	ldr	r2, [pc, #560]	; (80062f0 <HAL_GPIO_Init+0x2a0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d85d      	bhi.n	800617e <HAL_GPIO_Init+0x12e>
 80060c2:	2b12      	cmp	r3, #18
 80060c4:	d82a      	bhi.n	800611c <HAL_GPIO_Init+0xcc>
 80060c6:	2b12      	cmp	r3, #18
 80060c8:	d859      	bhi.n	800617e <HAL_GPIO_Init+0x12e>
 80060ca:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <HAL_GPIO_Init+0x80>)
 80060cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d0:	0800614b 	.word	0x0800614b
 80060d4:	08006125 	.word	0x08006125
 80060d8:	08006137 	.word	0x08006137
 80060dc:	08006179 	.word	0x08006179
 80060e0:	0800617f 	.word	0x0800617f
 80060e4:	0800617f 	.word	0x0800617f
 80060e8:	0800617f 	.word	0x0800617f
 80060ec:	0800617f 	.word	0x0800617f
 80060f0:	0800617f 	.word	0x0800617f
 80060f4:	0800617f 	.word	0x0800617f
 80060f8:	0800617f 	.word	0x0800617f
 80060fc:	0800617f 	.word	0x0800617f
 8006100:	0800617f 	.word	0x0800617f
 8006104:	0800617f 	.word	0x0800617f
 8006108:	0800617f 	.word	0x0800617f
 800610c:	0800617f 	.word	0x0800617f
 8006110:	0800617f 	.word	0x0800617f
 8006114:	0800612d 	.word	0x0800612d
 8006118:	08006141 	.word	0x08006141
 800611c:	4a75      	ldr	r2, [pc, #468]	; (80062f4 <HAL_GPIO_Init+0x2a4>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d013      	beq.n	800614a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006122:	e02c      	b.n	800617e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	623b      	str	r3, [r7, #32]
          break;
 800612a:	e029      	b.n	8006180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	3304      	adds	r3, #4
 8006132:	623b      	str	r3, [r7, #32]
          break;
 8006134:	e024      	b.n	8006180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	3308      	adds	r3, #8
 800613c:	623b      	str	r3, [r7, #32]
          break;
 800613e:	e01f      	b.n	8006180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	330c      	adds	r3, #12
 8006146:	623b      	str	r3, [r7, #32]
          break;
 8006148:	e01a      	b.n	8006180 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d102      	bne.n	8006158 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006152:	2304      	movs	r3, #4
 8006154:	623b      	str	r3, [r7, #32]
          break;
 8006156:	e013      	b.n	8006180 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d105      	bne.n	800616c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006160:	2308      	movs	r3, #8
 8006162:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	69fa      	ldr	r2, [r7, #28]
 8006168:	611a      	str	r2, [r3, #16]
          break;
 800616a:	e009      	b.n	8006180 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800616c:	2308      	movs	r3, #8
 800616e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	69fa      	ldr	r2, [r7, #28]
 8006174:	615a      	str	r2, [r3, #20]
          break;
 8006176:	e003      	b.n	8006180 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006178:	2300      	movs	r3, #0
 800617a:	623b      	str	r3, [r7, #32]
          break;
 800617c:	e000      	b.n	8006180 <HAL_GPIO_Init+0x130>
          break;
 800617e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	2bff      	cmp	r3, #255	; 0xff
 8006184:	d801      	bhi.n	800618a <HAL_GPIO_Init+0x13a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	e001      	b.n	800618e <HAL_GPIO_Init+0x13e>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3304      	adds	r3, #4
 800618e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	2bff      	cmp	r3, #255	; 0xff
 8006194:	d802      	bhi.n	800619c <HAL_GPIO_Init+0x14c>
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	e002      	b.n	80061a2 <HAL_GPIO_Init+0x152>
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	3b08      	subs	r3, #8
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	210f      	movs	r1, #15
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	fa01 f303 	lsl.w	r3, r1, r3
 80061b0:	43db      	mvns	r3, r3
 80061b2:	401a      	ands	r2, r3
 80061b4:	6a39      	ldr	r1, [r7, #32]
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	fa01 f303 	lsl.w	r3, r1, r3
 80061bc:	431a      	orrs	r2, r3
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 80c1 	beq.w	8006352 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80061d0:	4b49      	ldr	r3, [pc, #292]	; (80062f8 <HAL_GPIO_Init+0x2a8>)
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	4a48      	ldr	r2, [pc, #288]	; (80062f8 <HAL_GPIO_Init+0x2a8>)
 80061d6:	f043 0301 	orr.w	r3, r3, #1
 80061da:	6193      	str	r3, [r2, #24]
 80061dc:	4b46      	ldr	r3, [pc, #280]	; (80062f8 <HAL_GPIO_Init+0x2a8>)
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	60bb      	str	r3, [r7, #8]
 80061e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80061e8:	4a44      	ldr	r2, [pc, #272]	; (80062fc <HAL_GPIO_Init+0x2ac>)
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	089b      	lsrs	r3, r3, #2
 80061ee:	3302      	adds	r3, #2
 80061f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	f003 0303 	and.w	r3, r3, #3
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	220f      	movs	r2, #15
 8006200:	fa02 f303 	lsl.w	r3, r2, r3
 8006204:	43db      	mvns	r3, r3
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	4013      	ands	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a3c      	ldr	r2, [pc, #240]	; (8006300 <HAL_GPIO_Init+0x2b0>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d01f      	beq.n	8006254 <HAL_GPIO_Init+0x204>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a3b      	ldr	r2, [pc, #236]	; (8006304 <HAL_GPIO_Init+0x2b4>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d019      	beq.n	8006250 <HAL_GPIO_Init+0x200>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a3a      	ldr	r2, [pc, #232]	; (8006308 <HAL_GPIO_Init+0x2b8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d013      	beq.n	800624c <HAL_GPIO_Init+0x1fc>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a39      	ldr	r2, [pc, #228]	; (800630c <HAL_GPIO_Init+0x2bc>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d00d      	beq.n	8006248 <HAL_GPIO_Init+0x1f8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a38      	ldr	r2, [pc, #224]	; (8006310 <HAL_GPIO_Init+0x2c0>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d007      	beq.n	8006244 <HAL_GPIO_Init+0x1f4>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a37      	ldr	r2, [pc, #220]	; (8006314 <HAL_GPIO_Init+0x2c4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d101      	bne.n	8006240 <HAL_GPIO_Init+0x1f0>
 800623c:	2305      	movs	r3, #5
 800623e:	e00a      	b.n	8006256 <HAL_GPIO_Init+0x206>
 8006240:	2306      	movs	r3, #6
 8006242:	e008      	b.n	8006256 <HAL_GPIO_Init+0x206>
 8006244:	2304      	movs	r3, #4
 8006246:	e006      	b.n	8006256 <HAL_GPIO_Init+0x206>
 8006248:	2303      	movs	r3, #3
 800624a:	e004      	b.n	8006256 <HAL_GPIO_Init+0x206>
 800624c:	2302      	movs	r3, #2
 800624e:	e002      	b.n	8006256 <HAL_GPIO_Init+0x206>
 8006250:	2301      	movs	r3, #1
 8006252:	e000      	b.n	8006256 <HAL_GPIO_Init+0x206>
 8006254:	2300      	movs	r3, #0
 8006256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006258:	f002 0203 	and.w	r2, r2, #3
 800625c:	0092      	lsls	r2, r2, #2
 800625e:	4093      	lsls	r3, r2
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006266:	4925      	ldr	r1, [pc, #148]	; (80062fc <HAL_GPIO_Init+0x2ac>)
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	089b      	lsrs	r3, r3, #2
 800626c:	3302      	adds	r3, #2
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d006      	beq.n	800628e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006280:	4b25      	ldr	r3, [pc, #148]	; (8006318 <HAL_GPIO_Init+0x2c8>)
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	4924      	ldr	r1, [pc, #144]	; (8006318 <HAL_GPIO_Init+0x2c8>)
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	4313      	orrs	r3, r2
 800628a:	600b      	str	r3, [r1, #0]
 800628c:	e006      	b.n	800629c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800628e:	4b22      	ldr	r3, [pc, #136]	; (8006318 <HAL_GPIO_Init+0x2c8>)
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	43db      	mvns	r3, r3
 8006296:	4920      	ldr	r1, [pc, #128]	; (8006318 <HAL_GPIO_Init+0x2c8>)
 8006298:	4013      	ands	r3, r2
 800629a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d006      	beq.n	80062b6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80062a8:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <HAL_GPIO_Init+0x2c8>)
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	491a      	ldr	r1, [pc, #104]	; (8006318 <HAL_GPIO_Init+0x2c8>)
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	604b      	str	r3, [r1, #4]
 80062b4:	e006      	b.n	80062c4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80062b6:	4b18      	ldr	r3, [pc, #96]	; (8006318 <HAL_GPIO_Init+0x2c8>)
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	43db      	mvns	r3, r3
 80062be:	4916      	ldr	r1, [pc, #88]	; (8006318 <HAL_GPIO_Init+0x2c8>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d025      	beq.n	800631c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80062d0:	4b11      	ldr	r3, [pc, #68]	; (8006318 <HAL_GPIO_Init+0x2c8>)
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	4910      	ldr	r1, [pc, #64]	; (8006318 <HAL_GPIO_Init+0x2c8>)
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	4313      	orrs	r3, r2
 80062da:	608b      	str	r3, [r1, #8]
 80062dc:	e025      	b.n	800632a <HAL_GPIO_Init+0x2da>
 80062de:	bf00      	nop
 80062e0:	10320000 	.word	0x10320000
 80062e4:	10310000 	.word	0x10310000
 80062e8:	10220000 	.word	0x10220000
 80062ec:	10210000 	.word	0x10210000
 80062f0:	10120000 	.word	0x10120000
 80062f4:	10110000 	.word	0x10110000
 80062f8:	40021000 	.word	0x40021000
 80062fc:	40010000 	.word	0x40010000
 8006300:	40010800 	.word	0x40010800
 8006304:	40010c00 	.word	0x40010c00
 8006308:	40011000 	.word	0x40011000
 800630c:	40011400 	.word	0x40011400
 8006310:	40011800 	.word	0x40011800
 8006314:	40011c00 	.word	0x40011c00
 8006318:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800631c:	4b15      	ldr	r3, [pc, #84]	; (8006374 <HAL_GPIO_Init+0x324>)
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	43db      	mvns	r3, r3
 8006324:	4913      	ldr	r1, [pc, #76]	; (8006374 <HAL_GPIO_Init+0x324>)
 8006326:	4013      	ands	r3, r2
 8006328:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d006      	beq.n	8006344 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006336:	4b0f      	ldr	r3, [pc, #60]	; (8006374 <HAL_GPIO_Init+0x324>)
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	490e      	ldr	r1, [pc, #56]	; (8006374 <HAL_GPIO_Init+0x324>)
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	4313      	orrs	r3, r2
 8006340:	60cb      	str	r3, [r1, #12]
 8006342:	e006      	b.n	8006352 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006344:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <HAL_GPIO_Init+0x324>)
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	43db      	mvns	r3, r3
 800634c:	4909      	ldr	r1, [pc, #36]	; (8006374 <HAL_GPIO_Init+0x324>)
 800634e:	4013      	ands	r3, r2
 8006350:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	3301      	adds	r3, #1
 8006356:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	fa22 f303 	lsr.w	r3, r2, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	f47f ae7e 	bne.w	8006064 <HAL_GPIO_Init+0x14>
  }
}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	372c      	adds	r7, #44	; 0x2c
 800636e:	46bd      	mov	sp, r7
 8006370:	bc80      	pop	{r7}
 8006372:	4770      	bx	lr
 8006374:	40010400 	.word	0x40010400

08006378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	807b      	strh	r3, [r7, #2]
 8006384:	4613      	mov	r3, r2
 8006386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006388:	787b      	ldrb	r3, [r7, #1]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800638e:	887a      	ldrh	r2, [r7, #2]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006394:	e003      	b.n	800639e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006396:	887b      	ldrh	r3, [r7, #2]
 8006398:	041a      	lsls	r2, r3, #16
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	611a      	str	r2, [r3, #16]
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr

080063a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e272      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 8087 	beq.w	80064d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063c8:	4b92      	ldr	r3, [pc, #584]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f003 030c 	and.w	r3, r3, #12
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d00c      	beq.n	80063ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063d4:	4b8f      	ldr	r3, [pc, #572]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f003 030c 	and.w	r3, r3, #12
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d112      	bne.n	8006406 <HAL_RCC_OscConfig+0x5e>
 80063e0:	4b8c      	ldr	r3, [pc, #560]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ec:	d10b      	bne.n	8006406 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063ee:	4b89      	ldr	r3, [pc, #548]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d06c      	beq.n	80064d4 <HAL_RCC_OscConfig+0x12c>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d168      	bne.n	80064d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e24c      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800640e:	d106      	bne.n	800641e <HAL_RCC_OscConfig+0x76>
 8006410:	4b80      	ldr	r3, [pc, #512]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a7f      	ldr	r2, [pc, #508]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	e02e      	b.n	800647c <HAL_RCC_OscConfig+0xd4>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10c      	bne.n	8006440 <HAL_RCC_OscConfig+0x98>
 8006426:	4b7b      	ldr	r3, [pc, #492]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a7a      	ldr	r2, [pc, #488]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800642c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	4b78      	ldr	r3, [pc, #480]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a77      	ldr	r2, [pc, #476]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	e01d      	b.n	800647c <HAL_RCC_OscConfig+0xd4>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006448:	d10c      	bne.n	8006464 <HAL_RCC_OscConfig+0xbc>
 800644a:	4b72      	ldr	r3, [pc, #456]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a71      	ldr	r2, [pc, #452]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006454:	6013      	str	r3, [r2, #0]
 8006456:	4b6f      	ldr	r3, [pc, #444]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a6e      	ldr	r2, [pc, #440]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800645c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	e00b      	b.n	800647c <HAL_RCC_OscConfig+0xd4>
 8006464:	4b6b      	ldr	r3, [pc, #428]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a6a      	ldr	r2, [pc, #424]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800646a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	4b68      	ldr	r3, [pc, #416]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a67      	ldr	r2, [pc, #412]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800647a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d013      	beq.n	80064ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006484:	f7ff f906 	bl	8005694 <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800648c:	f7ff f902 	bl	8005694 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b64      	cmp	r3, #100	; 0x64
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e200      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800649e:	4b5d      	ldr	r3, [pc, #372]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0f0      	beq.n	800648c <HAL_RCC_OscConfig+0xe4>
 80064aa:	e014      	b.n	80064d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ac:	f7ff f8f2 	bl	8005694 <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064b4:	f7ff f8ee 	bl	8005694 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b64      	cmp	r3, #100	; 0x64
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e1ec      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064c6:	4b53      	ldr	r3, [pc, #332]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f0      	bne.n	80064b4 <HAL_RCC_OscConfig+0x10c>
 80064d2:	e000      	b.n	80064d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d063      	beq.n	80065aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064e2:	4b4c      	ldr	r3, [pc, #304]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f003 030c 	and.w	r3, r3, #12
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00b      	beq.n	8006506 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80064ee:	4b49      	ldr	r3, [pc, #292]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f003 030c 	and.w	r3, r3, #12
 80064f6:	2b08      	cmp	r3, #8
 80064f8:	d11c      	bne.n	8006534 <HAL_RCC_OscConfig+0x18c>
 80064fa:	4b46      	ldr	r3, [pc, #280]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d116      	bne.n	8006534 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006506:	4b43      	ldr	r3, [pc, #268]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d005      	beq.n	800651e <HAL_RCC_OscConfig+0x176>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d001      	beq.n	800651e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e1c0      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800651e:	4b3d      	ldr	r3, [pc, #244]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	4939      	ldr	r1, [pc, #228]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800652e:	4313      	orrs	r3, r2
 8006530:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006532:	e03a      	b.n	80065aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d020      	beq.n	800657e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800653c:	4b36      	ldr	r3, [pc, #216]	; (8006618 <HAL_RCC_OscConfig+0x270>)
 800653e:	2201      	movs	r2, #1
 8006540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006542:	f7ff f8a7 	bl	8005694 <HAL_GetTick>
 8006546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006548:	e008      	b.n	800655c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800654a:	f7ff f8a3 	bl	8005694 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	d901      	bls.n	800655c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e1a1      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800655c:	4b2d      	ldr	r3, [pc, #180]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0f0      	beq.n	800654a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006568:	4b2a      	ldr	r3, [pc, #168]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	4927      	ldr	r1, [pc, #156]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006578:	4313      	orrs	r3, r2
 800657a:	600b      	str	r3, [r1, #0]
 800657c:	e015      	b.n	80065aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800657e:	4b26      	ldr	r3, [pc, #152]	; (8006618 <HAL_RCC_OscConfig+0x270>)
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006584:	f7ff f886 	bl	8005694 <HAL_GetTick>
 8006588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800658c:	f7ff f882 	bl	8005694 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e180      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800659e:	4b1d      	ldr	r3, [pc, #116]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1f0      	bne.n	800658c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0308 	and.w	r3, r3, #8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d03a      	beq.n	800662c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d019      	beq.n	80065f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065be:	4b17      	ldr	r3, [pc, #92]	; (800661c <HAL_RCC_OscConfig+0x274>)
 80065c0:	2201      	movs	r2, #1
 80065c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065c4:	f7ff f866 	bl	8005694 <HAL_GetTick>
 80065c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ca:	e008      	b.n	80065de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065cc:	f7ff f862 	bl	8005694 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e160      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065de:	4b0d      	ldr	r3, [pc, #52]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0f0      	beq.n	80065cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80065ea:	2001      	movs	r0, #1
 80065ec:	f000 fb0a 	bl	8006c04 <RCC_Delay>
 80065f0:	e01c      	b.n	800662c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065f2:	4b0a      	ldr	r3, [pc, #40]	; (800661c <HAL_RCC_OscConfig+0x274>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065f8:	f7ff f84c 	bl	8005694 <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065fe:	e00f      	b.n	8006620 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006600:	f7ff f848 	bl	8005694 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d908      	bls.n	8006620 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e146      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
 8006612:	bf00      	nop
 8006614:	40021000 	.word	0x40021000
 8006618:	42420000 	.word	0x42420000
 800661c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006620:	4b92      	ldr	r3, [pc, #584]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e9      	bne.n	8006600 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 80a6 	beq.w	8006786 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800663a:	2300      	movs	r3, #0
 800663c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800663e:	4b8b      	ldr	r3, [pc, #556]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10d      	bne.n	8006666 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800664a:	4b88      	ldr	r3, [pc, #544]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	4a87      	ldr	r2, [pc, #540]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006654:	61d3      	str	r3, [r2, #28]
 8006656:	4b85      	ldr	r3, [pc, #532]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800665e:	60bb      	str	r3, [r7, #8]
 8006660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006662:	2301      	movs	r3, #1
 8006664:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006666:	4b82      	ldr	r3, [pc, #520]	; (8006870 <HAL_RCC_OscConfig+0x4c8>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666e:	2b00      	cmp	r3, #0
 8006670:	d118      	bne.n	80066a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006672:	4b7f      	ldr	r3, [pc, #508]	; (8006870 <HAL_RCC_OscConfig+0x4c8>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a7e      	ldr	r2, [pc, #504]	; (8006870 <HAL_RCC_OscConfig+0x4c8>)
 8006678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800667c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800667e:	f7ff f809 	bl	8005694 <HAL_GetTick>
 8006682:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006684:	e008      	b.n	8006698 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006686:	f7ff f805 	bl	8005694 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b64      	cmp	r3, #100	; 0x64
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e103      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006698:	4b75      	ldr	r3, [pc, #468]	; (8006870 <HAL_RCC_OscConfig+0x4c8>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0f0      	beq.n	8006686 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d106      	bne.n	80066ba <HAL_RCC_OscConfig+0x312>
 80066ac:	4b6f      	ldr	r3, [pc, #444]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	4a6e      	ldr	r2, [pc, #440]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066b2:	f043 0301 	orr.w	r3, r3, #1
 80066b6:	6213      	str	r3, [r2, #32]
 80066b8:	e02d      	b.n	8006716 <HAL_RCC_OscConfig+0x36e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10c      	bne.n	80066dc <HAL_RCC_OscConfig+0x334>
 80066c2:	4b6a      	ldr	r3, [pc, #424]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	4a69      	ldr	r2, [pc, #420]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066c8:	f023 0301 	bic.w	r3, r3, #1
 80066cc:	6213      	str	r3, [r2, #32]
 80066ce:	4b67      	ldr	r3, [pc, #412]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	4a66      	ldr	r2, [pc, #408]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066d4:	f023 0304 	bic.w	r3, r3, #4
 80066d8:	6213      	str	r3, [r2, #32]
 80066da:	e01c      	b.n	8006716 <HAL_RCC_OscConfig+0x36e>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	2b05      	cmp	r3, #5
 80066e2:	d10c      	bne.n	80066fe <HAL_RCC_OscConfig+0x356>
 80066e4:	4b61      	ldr	r3, [pc, #388]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	4a60      	ldr	r2, [pc, #384]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066ea:	f043 0304 	orr.w	r3, r3, #4
 80066ee:	6213      	str	r3, [r2, #32]
 80066f0:	4b5e      	ldr	r3, [pc, #376]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	4a5d      	ldr	r2, [pc, #372]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066f6:	f043 0301 	orr.w	r3, r3, #1
 80066fa:	6213      	str	r3, [r2, #32]
 80066fc:	e00b      	b.n	8006716 <HAL_RCC_OscConfig+0x36e>
 80066fe:	4b5b      	ldr	r3, [pc, #364]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	4a5a      	ldr	r2, [pc, #360]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006704:	f023 0301 	bic.w	r3, r3, #1
 8006708:	6213      	str	r3, [r2, #32]
 800670a:	4b58      	ldr	r3, [pc, #352]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	4a57      	ldr	r2, [pc, #348]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006710:	f023 0304 	bic.w	r3, r3, #4
 8006714:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d015      	beq.n	800674a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800671e:	f7fe ffb9 	bl	8005694 <HAL_GetTick>
 8006722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006724:	e00a      	b.n	800673c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006726:	f7fe ffb5 	bl	8005694 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	f241 3288 	movw	r2, #5000	; 0x1388
 8006734:	4293      	cmp	r3, r2
 8006736:	d901      	bls.n	800673c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e0b1      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800673c:	4b4b      	ldr	r3, [pc, #300]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0ee      	beq.n	8006726 <HAL_RCC_OscConfig+0x37e>
 8006748:	e014      	b.n	8006774 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800674a:	f7fe ffa3 	bl	8005694 <HAL_GetTick>
 800674e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006750:	e00a      	b.n	8006768 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006752:	f7fe ff9f 	bl	8005694 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006760:	4293      	cmp	r3, r2
 8006762:	d901      	bls.n	8006768 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e09b      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006768:	4b40      	ldr	r3, [pc, #256]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1ee      	bne.n	8006752 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006774:	7dfb      	ldrb	r3, [r7, #23]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d105      	bne.n	8006786 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800677a:	4b3c      	ldr	r3, [pc, #240]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	4a3b      	ldr	r2, [pc, #236]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006784:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 8087 	beq.w	800689e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006790:	4b36      	ldr	r3, [pc, #216]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f003 030c 	and.w	r3, r3, #12
 8006798:	2b08      	cmp	r3, #8
 800679a:	d061      	beq.n	8006860 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d146      	bne.n	8006832 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067a4:	4b33      	ldr	r3, [pc, #204]	; (8006874 <HAL_RCC_OscConfig+0x4cc>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067aa:	f7fe ff73 	bl	8005694 <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067b0:	e008      	b.n	80067c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b2:	f7fe ff6f 	bl	8005694 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e06d      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067c4:	4b29      	ldr	r3, [pc, #164]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1f0      	bne.n	80067b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d8:	d108      	bne.n	80067ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80067da:	4b24      	ldr	r3, [pc, #144]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	4921      	ldr	r1, [pc, #132]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067ec:	4b1f      	ldr	r3, [pc, #124]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a19      	ldr	r1, [r3, #32]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	430b      	orrs	r3, r1
 80067fe:	491b      	ldr	r1, [pc, #108]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006800:	4313      	orrs	r3, r2
 8006802:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006804:	4b1b      	ldr	r3, [pc, #108]	; (8006874 <HAL_RCC_OscConfig+0x4cc>)
 8006806:	2201      	movs	r2, #1
 8006808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800680a:	f7fe ff43 	bl	8005694 <HAL_GetTick>
 800680e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006810:	e008      	b.n	8006824 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006812:	f7fe ff3f 	bl	8005694 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d901      	bls.n	8006824 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e03d      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006824:	4b11      	ldr	r3, [pc, #68]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0f0      	beq.n	8006812 <HAL_RCC_OscConfig+0x46a>
 8006830:	e035      	b.n	800689e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006832:	4b10      	ldr	r3, [pc, #64]	; (8006874 <HAL_RCC_OscConfig+0x4cc>)
 8006834:	2200      	movs	r2, #0
 8006836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006838:	f7fe ff2c 	bl	8005694 <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006840:	f7fe ff28 	bl	8005694 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e026      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006852:	4b06      	ldr	r3, [pc, #24]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f0      	bne.n	8006840 <HAL_RCC_OscConfig+0x498>
 800685e:	e01e      	b.n	800689e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d107      	bne.n	8006878 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e019      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
 800686c:	40021000 	.word	0x40021000
 8006870:	40007000 	.word	0x40007000
 8006874:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006878:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <HAL_RCC_OscConfig+0x500>)
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	429a      	cmp	r2, r3
 800688a:	d106      	bne.n	800689a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006896:	429a      	cmp	r2, r3
 8006898:	d001      	beq.n	800689e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40021000 	.word	0x40021000

080068ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e0d0      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068c0:	4b6a      	ldr	r3, [pc, #424]	; (8006a6c <HAL_RCC_ClockConfig+0x1c0>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0307 	and.w	r3, r3, #7
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d910      	bls.n	80068f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ce:	4b67      	ldr	r3, [pc, #412]	; (8006a6c <HAL_RCC_ClockConfig+0x1c0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f023 0207 	bic.w	r2, r3, #7
 80068d6:	4965      	ldr	r1, [pc, #404]	; (8006a6c <HAL_RCC_ClockConfig+0x1c0>)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	4313      	orrs	r3, r2
 80068dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068de:	4b63      	ldr	r3, [pc, #396]	; (8006a6c <HAL_RCC_ClockConfig+0x1c0>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d001      	beq.n	80068f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e0b8      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d020      	beq.n	800693e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006908:	4b59      	ldr	r3, [pc, #356]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	4a58      	ldr	r2, [pc, #352]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 800690e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006912:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0308 	and.w	r3, r3, #8
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006920:	4b53      	ldr	r3, [pc, #332]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	4a52      	ldr	r2, [pc, #328]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 8006926:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800692a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800692c:	4b50      	ldr	r3, [pc, #320]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	494d      	ldr	r1, [pc, #308]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 800693a:	4313      	orrs	r3, r2
 800693c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d040      	beq.n	80069cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d107      	bne.n	8006962 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006952:	4b47      	ldr	r3, [pc, #284]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d115      	bne.n	800698a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e07f      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2b02      	cmp	r3, #2
 8006968:	d107      	bne.n	800697a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800696a:	4b41      	ldr	r3, [pc, #260]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d109      	bne.n	800698a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e073      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800697a:	4b3d      	ldr	r3, [pc, #244]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e06b      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800698a:	4b39      	ldr	r3, [pc, #228]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f023 0203 	bic.w	r2, r3, #3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	4936      	ldr	r1, [pc, #216]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 8006998:	4313      	orrs	r3, r2
 800699a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800699c:	f7fe fe7a 	bl	8005694 <HAL_GetTick>
 80069a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069a2:	e00a      	b.n	80069ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069a4:	f7fe fe76 	bl	8005694 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e053      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ba:	4b2d      	ldr	r3, [pc, #180]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f003 020c 	and.w	r2, r3, #12
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d1eb      	bne.n	80069a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069cc:	4b27      	ldr	r3, [pc, #156]	; (8006a6c <HAL_RCC_ClockConfig+0x1c0>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d210      	bcs.n	80069fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069da:	4b24      	ldr	r3, [pc, #144]	; (8006a6c <HAL_RCC_ClockConfig+0x1c0>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f023 0207 	bic.w	r2, r3, #7
 80069e2:	4922      	ldr	r1, [pc, #136]	; (8006a6c <HAL_RCC_ClockConfig+0x1c0>)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ea:	4b20      	ldr	r3, [pc, #128]	; (8006a6c <HAL_RCC_ClockConfig+0x1c0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0307 	and.w	r3, r3, #7
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d001      	beq.n	80069fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e032      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d008      	beq.n	8006a1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a08:	4b19      	ldr	r3, [pc, #100]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	4916      	ldr	r1, [pc, #88]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0308 	and.w	r3, r3, #8
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d009      	beq.n	8006a3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a26:	4b12      	ldr	r3, [pc, #72]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	490e      	ldr	r1, [pc, #56]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a3a:	f000 f821 	bl	8006a80 <HAL_RCC_GetSysClockFreq>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	4b0b      	ldr	r3, [pc, #44]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	091b      	lsrs	r3, r3, #4
 8006a46:	f003 030f 	and.w	r3, r3, #15
 8006a4a:	490a      	ldr	r1, [pc, #40]	; (8006a74 <HAL_RCC_ClockConfig+0x1c8>)
 8006a4c:	5ccb      	ldrb	r3, [r1, r3]
 8006a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a52:	4a09      	ldr	r2, [pc, #36]	; (8006a78 <HAL_RCC_ClockConfig+0x1cc>)
 8006a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a56:	4b09      	ldr	r3, [pc, #36]	; (8006a7c <HAL_RCC_ClockConfig+0x1d0>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fe fc42 	bl	80052e4 <HAL_InitTick>

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	40022000 	.word	0x40022000
 8006a70:	40021000 	.word	0x40021000
 8006a74:	08014738 	.word	0x08014738
 8006a78:	20000188 	.word	0x20000188
 8006a7c:	2000018c 	.word	0x2000018c

08006a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a80:	b490      	push	{r4, r7}
 8006a82:	b08a      	sub	sp, #40	; 0x28
 8006a84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006a86:	4b29      	ldr	r3, [pc, #164]	; (8006b2c <HAL_RCC_GetSysClockFreq+0xac>)
 8006a88:	1d3c      	adds	r4, r7, #4
 8006a8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006a90:	f240 2301 	movw	r3, #513	; 0x201
 8006a94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	61fb      	str	r3, [r7, #28]
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61bb      	str	r3, [r7, #24]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006aaa:	4b21      	ldr	r3, [pc, #132]	; (8006b30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	f003 030c 	and.w	r3, r3, #12
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d002      	beq.n	8006ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8006aba:	2b08      	cmp	r3, #8
 8006abc:	d003      	beq.n	8006ac6 <HAL_RCC_GetSysClockFreq+0x46>
 8006abe:	e02b      	b.n	8006b18 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ac0:	4b1c      	ldr	r3, [pc, #112]	; (8006b34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006ac2:	623b      	str	r3, [r7, #32]
      break;
 8006ac4:	e02b      	b.n	8006b1e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	0c9b      	lsrs	r3, r3, #18
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	3328      	adds	r3, #40	; 0x28
 8006ad0:	443b      	add	r3, r7
 8006ad2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006ad6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d012      	beq.n	8006b08 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ae2:	4b13      	ldr	r3, [pc, #76]	; (8006b30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	0c5b      	lsrs	r3, r3, #17
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	3328      	adds	r3, #40	; 0x28
 8006aee:	443b      	add	r3, r7
 8006af0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006af4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	4a0e      	ldr	r2, [pc, #56]	; (8006b34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006afa:	fb03 f202 	mul.w	r2, r3, r2
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
 8006b06:	e004      	b.n	8006b12 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	4a0b      	ldr	r2, [pc, #44]	; (8006b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b0c:	fb02 f303 	mul.w	r3, r2, r3
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	623b      	str	r3, [r7, #32]
      break;
 8006b16:	e002      	b.n	8006b1e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b18:	4b08      	ldr	r3, [pc, #32]	; (8006b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b1a:	623b      	str	r3, [r7, #32]
      break;
 8006b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3728      	adds	r7, #40	; 0x28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bc90      	pop	{r4, r7}
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	08014498 	.word	0x08014498
 8006b30:	40021000 	.word	0x40021000
 8006b34:	017d7840 	.word	0x017d7840
 8006b38:	003d0900 	.word	0x003d0900
 8006b3c:	007a1200 	.word	0x007a1200

08006b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b40:	b480      	push	{r7}
 8006b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b44:	4b02      	ldr	r3, [pc, #8]	; (8006b50 <HAL_RCC_GetHCLKFreq+0x10>)
 8006b46:	681b      	ldr	r3, [r3, #0]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bc80      	pop	{r7}
 8006b4e:	4770      	bx	lr
 8006b50:	20000188 	.word	0x20000188

08006b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b58:	f7ff fff2 	bl	8006b40 <HAL_RCC_GetHCLKFreq>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	0a1b      	lsrs	r3, r3, #8
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	4903      	ldr	r1, [pc, #12]	; (8006b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b6a:	5ccb      	ldrb	r3, [r1, r3]
 8006b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	40021000 	.word	0x40021000
 8006b78:	08014748 	.word	0x08014748

08006b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b80:	f7ff ffde 	bl	8006b40 <HAL_RCC_GetHCLKFreq>
 8006b84:	4602      	mov	r2, r0
 8006b86:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	0adb      	lsrs	r3, r3, #11
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	4903      	ldr	r1, [pc, #12]	; (8006ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b92:	5ccb      	ldrb	r3, [r1, r3]
 8006b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	40021000 	.word	0x40021000
 8006ba0:	08014748 	.word	0x08014748

08006ba4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	220f      	movs	r2, #15
 8006bb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006bb4:	4b11      	ldr	r3, [pc, #68]	; (8006bfc <HAL_RCC_GetClockConfig+0x58>)
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f003 0203 	and.w	r2, r3, #3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006bc0:	4b0e      	ldr	r3, [pc, #56]	; (8006bfc <HAL_RCC_GetClockConfig+0x58>)
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006bcc:	4b0b      	ldr	r3, [pc, #44]	; (8006bfc <HAL_RCC_GetClockConfig+0x58>)
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006bd8:	4b08      	ldr	r3, [pc, #32]	; (8006bfc <HAL_RCC_GetClockConfig+0x58>)
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	08db      	lsrs	r3, r3, #3
 8006bde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006be6:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <HAL_RCC_GetClockConfig+0x5c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0207 	and.w	r2, r3, #7
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006bf2:	bf00      	nop
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bc80      	pop	{r7}
 8006bfa:	4770      	bx	lr
 8006bfc:	40021000 	.word	0x40021000
 8006c00:	40022000 	.word	0x40022000

08006c04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006c0c:	4b0a      	ldr	r3, [pc, #40]	; (8006c38 <RCC_Delay+0x34>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a0a      	ldr	r2, [pc, #40]	; (8006c3c <RCC_Delay+0x38>)
 8006c12:	fba2 2303 	umull	r2, r3, r2, r3
 8006c16:	0a5b      	lsrs	r3, r3, #9
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	fb02 f303 	mul.w	r3, r2, r3
 8006c1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006c20:	bf00      	nop
  }
  while (Delay --);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	1e5a      	subs	r2, r3, #1
 8006c26:	60fa      	str	r2, [r7, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1f9      	bne.n	8006c20 <RCC_Delay+0x1c>
}
 8006c2c:	bf00      	nop
 8006c2e:	bf00      	nop
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bc80      	pop	{r7}
 8006c36:	4770      	bx	lr
 8006c38:	20000188 	.word	0x20000188
 8006c3c:	10624dd3 	.word	0x10624dd3

08006c40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e076      	b.n	8006d40 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d108      	bne.n	8006c6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c62:	d009      	beq.n	8006c78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	61da      	str	r2, [r3, #28]
 8006c6a:	e005      	b.n	8006c78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d106      	bne.n	8006c98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7fe f9c6 	bl	8005024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfc:	ea42 0103 	orr.w	r1, r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	0c1a      	lsrs	r2, r3, #16
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f002 0204 	and.w	r2, r2, #4
 8006d1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69da      	ldr	r2, [r3, #28]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08c      	sub	sp, #48	; 0x30
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
 8006d54:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d56:	2301      	movs	r3, #1
 8006d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d101      	bne.n	8006d6e <HAL_SPI_TransmitReceive+0x26>
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	e18a      	b.n	8007084 <HAL_SPI_TransmitReceive+0x33c>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d76:	f7fe fc8d 	bl	8005694 <HAL_GetTick>
 8006d7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006d8c:	887b      	ldrh	r3, [r7, #2]
 8006d8e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d00f      	beq.n	8006db8 <HAL_SPI_TransmitReceive+0x70>
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d9e:	d107      	bne.n	8006db0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d103      	bne.n	8006db0 <HAL_SPI_TransmitReceive+0x68>
 8006da8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dac:	2b04      	cmp	r3, #4
 8006dae:	d003      	beq.n	8006db8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006db0:	2302      	movs	r3, #2
 8006db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006db6:	e15b      	b.n	8007070 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d005      	beq.n	8006dca <HAL_SPI_TransmitReceive+0x82>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <HAL_SPI_TransmitReceive+0x82>
 8006dc4:	887b      	ldrh	r3, [r7, #2]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d103      	bne.n	8006dd2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006dd0:	e14e      	b.n	8007070 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b04      	cmp	r3, #4
 8006ddc:	d003      	beq.n	8006de6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2205      	movs	r2, #5
 8006de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	887a      	ldrh	r2, [r7, #2]
 8006df6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	887a      	ldrh	r2, [r7, #2]
 8006dfc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	887a      	ldrh	r2, [r7, #2]
 8006e08:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	887a      	ldrh	r2, [r7, #2]
 8006e0e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e26:	2b40      	cmp	r3, #64	; 0x40
 8006e28:	d007      	beq.n	8006e3a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e42:	d178      	bne.n	8006f36 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <HAL_SPI_TransmitReceive+0x10a>
 8006e4c:	8b7b      	ldrh	r3, [r7, #26]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d166      	bne.n	8006f20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e56:	881a      	ldrh	r2, [r3, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e62:	1c9a      	adds	r2, r3, #2
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e76:	e053      	b.n	8006f20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f003 0302 	and.w	r3, r3, #2
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d11b      	bne.n	8006ebe <HAL_SPI_TransmitReceive+0x176>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d016      	beq.n	8006ebe <HAL_SPI_TransmitReceive+0x176>
 8006e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d113      	bne.n	8006ebe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9a:	881a      	ldrh	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea6:	1c9a      	adds	r2, r3, #2
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d119      	bne.n	8006f00 <HAL_SPI_TransmitReceive+0x1b8>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d014      	beq.n	8006f00 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee0:	b292      	uxth	r2, r2
 8006ee2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	1c9a      	adds	r2, r3, #2
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006efc:	2301      	movs	r3, #1
 8006efe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f00:	f7fe fbc8 	bl	8005694 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d807      	bhi.n	8006f20 <HAL_SPI_TransmitReceive+0x1d8>
 8006f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f16:	d003      	beq.n	8006f20 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006f1e:	e0a7      	b.n	8007070 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1a6      	bne.n	8006e78 <HAL_SPI_TransmitReceive+0x130>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1a1      	bne.n	8006e78 <HAL_SPI_TransmitReceive+0x130>
 8006f34:	e07c      	b.n	8007030 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <HAL_SPI_TransmitReceive+0x1fc>
 8006f3e:	8b7b      	ldrh	r3, [r7, #26]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d16b      	bne.n	800701c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	330c      	adds	r3, #12
 8006f4e:	7812      	ldrb	r2, [r2, #0]
 8006f50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f56:	1c5a      	adds	r2, r3, #1
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	3b01      	subs	r3, #1
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f6a:	e057      	b.n	800701c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d11c      	bne.n	8006fb4 <HAL_SPI_TransmitReceive+0x26c>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d017      	beq.n	8006fb4 <HAL_SPI_TransmitReceive+0x26c>
 8006f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d114      	bne.n	8006fb4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	330c      	adds	r3, #12
 8006f94:	7812      	ldrb	r2, [r2, #0]
 8006f96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d119      	bne.n	8006ff6 <HAL_SPI_TransmitReceive+0x2ae>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d014      	beq.n	8006ff6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68da      	ldr	r2, [r3, #12]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	3b01      	subs	r3, #1
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ff6:	f7fe fb4d 	bl	8005694 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007002:	429a      	cmp	r2, r3
 8007004:	d803      	bhi.n	800700e <HAL_SPI_TransmitReceive+0x2c6>
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700c:	d102      	bne.n	8007014 <HAL_SPI_TransmitReceive+0x2cc>
 800700e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007010:	2b00      	cmp	r3, #0
 8007012:	d103      	bne.n	800701c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800701a:	e029      	b.n	8007070 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007020:	b29b      	uxth	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1a2      	bne.n	8006f6c <HAL_SPI_TransmitReceive+0x224>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800702a:	b29b      	uxth	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d19d      	bne.n	8006f6c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007032:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 f9b5 	bl	80073a4 <SPI_EndRxTxTransaction>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d006      	beq.n	800704e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2220      	movs	r2, #32
 800704a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800704c:	e010      	b.n	8007070 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10b      	bne.n	800706e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007056:	2300      	movs	r3, #0
 8007058:	617b      	str	r3, [r7, #20]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	617b      	str	r3, [r7, #20]
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	e000      	b.n	8007070 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800706e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007080:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007084:	4618      	mov	r0, r3
 8007086:	3730      	adds	r7, #48	; 0x30
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	099b      	lsrs	r3, r3, #6
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10f      	bne.n	80070d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00a      	beq.n	80070d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	099b      	lsrs	r3, r3, #6
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d004      	beq.n	80070d0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4798      	blx	r3
    return;
 80070ce:	e0be      	b.n	800724e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	085b      	lsrs	r3, r3, #1
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00a      	beq.n	80070f2 <HAL_SPI_IRQHandler+0x66>
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	09db      	lsrs	r3, r3, #7
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d004      	beq.n	80070f2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	4798      	blx	r3
    return;
 80070f0:	e0ad      	b.n	800724e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	095b      	lsrs	r3, r3, #5
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d106      	bne.n	800710c <HAL_SPI_IRQHandler+0x80>
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	099b      	lsrs	r3, r3, #6
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 80a1 	beq.w	800724e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	095b      	lsrs	r3, r3, #5
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 809a 	beq.w	800724e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	099b      	lsrs	r3, r3, #6
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d023      	beq.n	800716e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b03      	cmp	r3, #3
 8007130:	d011      	beq.n	8007156 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007136:	f043 0204 	orr.w	r2, r3, #4
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800713e:	2300      	movs	r3, #0
 8007140:	617b      	str	r3, [r7, #20]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	617b      	str	r3, [r7, #20]
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	e00b      	b.n	800716e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007156:	2300      	movs	r3, #0
 8007158:	613b      	str	r3, [r7, #16]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	613b      	str	r3, [r7, #16]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	613b      	str	r3, [r7, #16]
 800716a:	693b      	ldr	r3, [r7, #16]
        return;
 800716c:	e06f      	b.n	800724e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	095b      	lsrs	r3, r3, #5
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d014      	beq.n	80071a4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717e:	f043 0201 	orr.w	r2, r3, #1
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007186:	2300      	movs	r3, #0
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d04f      	beq.n	800724c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071ba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d104      	bne.n	80071d8 <HAL_SPI_IRQHandler+0x14c>
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d034      	beq.n	8007242 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0203 	bic.w	r2, r2, #3
 80071e6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d011      	beq.n	8007214 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f4:	4a17      	ldr	r2, [pc, #92]	; (8007254 <HAL_SPI_IRQHandler+0x1c8>)
 80071f6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7fe fbe3 	bl	80059c8 <HAL_DMA_Abort_IT>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d005      	beq.n	8007214 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007218:	2b00      	cmp	r3, #0
 800721a:	d016      	beq.n	800724a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007220:	4a0c      	ldr	r2, [pc, #48]	; (8007254 <HAL_SPI_IRQHandler+0x1c8>)
 8007222:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007228:	4618      	mov	r0, r3
 800722a:	f7fe fbcd 	bl	80059c8 <HAL_DMA_Abort_IT>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00a      	beq.n	800724a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007238:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007240:	e003      	b.n	800724a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f808 	bl	8007258 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007248:	e000      	b.n	800724c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800724a:	bf00      	nop
    return;
 800724c:	bf00      	nop
  }
}
 800724e:	3720      	adds	r7, #32
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	0800726b 	.word	0x0800726b

08007258 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	bc80      	pop	{r7}
 8007268:	4770      	bx	lr

0800726a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f7ff ffe7 	bl	8007258 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800728a:	bf00      	nop
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	4613      	mov	r3, r2
 80072a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80072a4:	f7fe f9f6 	bl	8005694 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ac:	1a9b      	subs	r3, r3, r2
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	4413      	add	r3, r2
 80072b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072b4:	f7fe f9ee 	bl	8005694 <HAL_GetTick>
 80072b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80072ba:	4b39      	ldr	r3, [pc, #228]	; (80073a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	015b      	lsls	r3, r3, #5
 80072c0:	0d1b      	lsrs	r3, r3, #20
 80072c2:	69fa      	ldr	r2, [r7, #28]
 80072c4:	fb02 f303 	mul.w	r3, r2, r3
 80072c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072ca:	e054      	b.n	8007376 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d2:	d050      	beq.n	8007376 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072d4:	f7fe f9de 	bl	8005694 <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	69fa      	ldr	r2, [r7, #28]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d902      	bls.n	80072ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d13d      	bne.n	8007366 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80072f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007302:	d111      	bne.n	8007328 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800730c:	d004      	beq.n	8007318 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007316:	d107      	bne.n	8007328 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007326:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007330:	d10f      	bne.n	8007352 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007340:	601a      	str	r2, [r3, #0]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007350:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e017      	b.n	8007396 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	3b01      	subs	r3, #1
 8007374:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689a      	ldr	r2, [r3, #8]
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	4013      	ands	r3, r2
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	429a      	cmp	r2, r3
 8007384:	bf0c      	ite	eq
 8007386:	2301      	moveq	r3, #1
 8007388:	2300      	movne	r3, #0
 800738a:	b2db      	uxtb	r3, r3
 800738c:	461a      	mov	r2, r3
 800738e:	79fb      	ldrb	r3, [r7, #7]
 8007390:	429a      	cmp	r2, r3
 8007392:	d19b      	bne.n	80072cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3720      	adds	r7, #32
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	20000188 	.word	0x20000188

080073a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af02      	add	r7, sp, #8
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2200      	movs	r2, #0
 80073b8:	2180      	movs	r1, #128	; 0x80
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f7ff ff6a 	bl	8007294 <SPI_WaitFlagStateUntilTimeout>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d007      	beq.n	80073d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ca:	f043 0220 	orr.w	r2, r3, #32
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e000      	b.n	80073d8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e041      	b.n	8007476 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d106      	bne.n	800740c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f839 	bl	800747e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3304      	adds	r3, #4
 800741c:	4619      	mov	r1, r3
 800741e:	4610      	mov	r0, r2
 8007420:	f000 f9c2 	bl	80077a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007486:	bf00      	nop
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	bc80      	pop	{r7}
 800748e:	4770      	bx	lr

08007490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d001      	beq.n	80074a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e044      	b.n	8007532 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68da      	ldr	r2, [r3, #12]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f042 0201 	orr.w	r2, r2, #1
 80074be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a1d      	ldr	r2, [pc, #116]	; (800753c <HAL_TIM_Base_Start_IT+0xac>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d018      	beq.n	80074fc <HAL_TIM_Base_Start_IT+0x6c>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a1c      	ldr	r2, [pc, #112]	; (8007540 <HAL_TIM_Base_Start_IT+0xb0>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d013      	beq.n	80074fc <HAL_TIM_Base_Start_IT+0x6c>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074dc:	d00e      	beq.n	80074fc <HAL_TIM_Base_Start_IT+0x6c>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a18      	ldr	r2, [pc, #96]	; (8007544 <HAL_TIM_Base_Start_IT+0xb4>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d009      	beq.n	80074fc <HAL_TIM_Base_Start_IT+0x6c>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a16      	ldr	r2, [pc, #88]	; (8007548 <HAL_TIM_Base_Start_IT+0xb8>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d004      	beq.n	80074fc <HAL_TIM_Base_Start_IT+0x6c>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a15      	ldr	r2, [pc, #84]	; (800754c <HAL_TIM_Base_Start_IT+0xbc>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d111      	bne.n	8007520 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f003 0307 	and.w	r3, r3, #7
 8007506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2b06      	cmp	r3, #6
 800750c:	d010      	beq.n	8007530 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f042 0201 	orr.w	r2, r2, #1
 800751c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800751e:	e007      	b.n	8007530 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f042 0201 	orr.w	r2, r2, #1
 800752e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	bc80      	pop	{r7}
 800753a:	4770      	bx	lr
 800753c:	40012c00 	.word	0x40012c00
 8007540:	40013400 	.word	0x40013400
 8007544:	40000400 	.word	0x40000400
 8007548:	40000800 	.word	0x40000800
 800754c:	40000c00 	.word	0x40000c00

08007550 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b02      	cmp	r3, #2
 8007564:	d122      	bne.n	80075ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b02      	cmp	r3, #2
 8007572:	d11b      	bne.n	80075ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f06f 0202 	mvn.w	r2, #2
 800757c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	f003 0303 	and.w	r3, r3, #3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f8ed 	bl	8007772 <HAL_TIM_IC_CaptureCallback>
 8007598:	e005      	b.n	80075a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f8e0 	bl	8007760 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f8ef 	bl	8007784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	f003 0304 	and.w	r3, r3, #4
 80075b6:	2b04      	cmp	r3, #4
 80075b8:	d122      	bne.n	8007600 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f003 0304 	and.w	r3, r3, #4
 80075c4:	2b04      	cmp	r3, #4
 80075c6:	d11b      	bne.n	8007600 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f06f 0204 	mvn.w	r2, #4
 80075d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2202      	movs	r2, #2
 80075d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f8c3 	bl	8007772 <HAL_TIM_IC_CaptureCallback>
 80075ec:	e005      	b.n	80075fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f8b6 	bl	8007760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f8c5 	bl	8007784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	f003 0308 	and.w	r3, r3, #8
 800760a:	2b08      	cmp	r3, #8
 800760c:	d122      	bne.n	8007654 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f003 0308 	and.w	r3, r3, #8
 8007618:	2b08      	cmp	r3, #8
 800761a:	d11b      	bne.n	8007654 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f06f 0208 	mvn.w	r2, #8
 8007624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2204      	movs	r2, #4
 800762a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	f003 0303 	and.w	r3, r3, #3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f899 	bl	8007772 <HAL_TIM_IC_CaptureCallback>
 8007640:	e005      	b.n	800764e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f88c 	bl	8007760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f89b 	bl	8007784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	f003 0310 	and.w	r3, r3, #16
 800765e:	2b10      	cmp	r3, #16
 8007660:	d122      	bne.n	80076a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f003 0310 	and.w	r3, r3, #16
 800766c:	2b10      	cmp	r3, #16
 800766e:	d11b      	bne.n	80076a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f06f 0210 	mvn.w	r2, #16
 8007678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2208      	movs	r2, #8
 800767e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	69db      	ldr	r3, [r3, #28]
 8007686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f86f 	bl	8007772 <HAL_TIM_IC_CaptureCallback>
 8007694:	e005      	b.n	80076a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f862 	bl	8007760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f871 	bl	8007784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d10e      	bne.n	80076d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d107      	bne.n	80076d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f06f 0201 	mvn.w	r2, #1
 80076cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7fc fd58 	bl	8004184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076de:	2b80      	cmp	r3, #128	; 0x80
 80076e0:	d10e      	bne.n	8007700 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ec:	2b80      	cmp	r3, #128	; 0x80
 80076ee:	d107      	bne.n	8007700 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f8d7 	bl	80078ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770a:	2b40      	cmp	r3, #64	; 0x40
 800770c:	d10e      	bne.n	800772c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007718:	2b40      	cmp	r3, #64	; 0x40
 800771a:	d107      	bne.n	800772c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f835 	bl	8007796 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f003 0320 	and.w	r3, r3, #32
 8007736:	2b20      	cmp	r3, #32
 8007738:	d10e      	bne.n	8007758 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f003 0320 	and.w	r3, r3, #32
 8007744:	2b20      	cmp	r3, #32
 8007746:	d107      	bne.n	8007758 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f06f 0220 	mvn.w	r2, #32
 8007750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f8a2 	bl	800789c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	bc80      	pop	{r7}
 8007770:	4770      	bx	lr

08007772 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007772:	b480      	push	{r7}
 8007774:	b083      	sub	sp, #12
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800777a:	bf00      	nop
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	bc80      	pop	{r7}
 8007782:	4770      	bx	lr

08007784 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	bc80      	pop	{r7}
 8007794:	4770      	bx	lr

08007796 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007796:	b480      	push	{r7}
 8007798:	b083      	sub	sp, #12
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800779e:	bf00      	nop
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bc80      	pop	{r7}
 80077a6:	4770      	bx	lr

080077a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a33      	ldr	r2, [pc, #204]	; (8007888 <TIM_Base_SetConfig+0xe0>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d013      	beq.n	80077e8 <TIM_Base_SetConfig+0x40>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a32      	ldr	r2, [pc, #200]	; (800788c <TIM_Base_SetConfig+0xe4>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d00f      	beq.n	80077e8 <TIM_Base_SetConfig+0x40>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ce:	d00b      	beq.n	80077e8 <TIM_Base_SetConfig+0x40>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a2f      	ldr	r2, [pc, #188]	; (8007890 <TIM_Base_SetConfig+0xe8>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d007      	beq.n	80077e8 <TIM_Base_SetConfig+0x40>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a2e      	ldr	r2, [pc, #184]	; (8007894 <TIM_Base_SetConfig+0xec>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d003      	beq.n	80077e8 <TIM_Base_SetConfig+0x40>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a2d      	ldr	r2, [pc, #180]	; (8007898 <TIM_Base_SetConfig+0xf0>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d108      	bne.n	80077fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a22      	ldr	r2, [pc, #136]	; (8007888 <TIM_Base_SetConfig+0xe0>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d013      	beq.n	800782a <TIM_Base_SetConfig+0x82>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a21      	ldr	r2, [pc, #132]	; (800788c <TIM_Base_SetConfig+0xe4>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00f      	beq.n	800782a <TIM_Base_SetConfig+0x82>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007810:	d00b      	beq.n	800782a <TIM_Base_SetConfig+0x82>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a1e      	ldr	r2, [pc, #120]	; (8007890 <TIM_Base_SetConfig+0xe8>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d007      	beq.n	800782a <TIM_Base_SetConfig+0x82>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a1d      	ldr	r2, [pc, #116]	; (8007894 <TIM_Base_SetConfig+0xec>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d003      	beq.n	800782a <TIM_Base_SetConfig+0x82>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a1c      	ldr	r2, [pc, #112]	; (8007898 <TIM_Base_SetConfig+0xf0>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d108      	bne.n	800783c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	4313      	orrs	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	4313      	orrs	r3, r2
 8007848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	689a      	ldr	r2, [r3, #8]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a09      	ldr	r2, [pc, #36]	; (8007888 <TIM_Base_SetConfig+0xe0>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d003      	beq.n	8007870 <TIM_Base_SetConfig+0xc8>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a08      	ldr	r2, [pc, #32]	; (800788c <TIM_Base_SetConfig+0xe4>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d103      	bne.n	8007878 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	691a      	ldr	r2, [r3, #16]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	615a      	str	r2, [r3, #20]
}
 800787e:	bf00      	nop
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	bc80      	pop	{r7}
 8007886:	4770      	bx	lr
 8007888:	40012c00 	.word	0x40012c00
 800788c:	40013400 	.word	0x40013400
 8007890:	40000400 	.word	0x40000400
 8007894:	40000800 	.word	0x40000800
 8007898:	40000c00 	.word	0x40000c00

0800789c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bc80      	pop	{r7}
 80078ac:	4770      	bx	lr

080078ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bc80      	pop	{r7}
 80078be:	4770      	bx	lr

080078c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e03f      	b.n	8007952 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d106      	bne.n	80078ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7fd fc56 	bl	8005198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2224      	movs	r2, #36	; 0x24
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68da      	ldr	r2, [r3, #12]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fbe5 	bl	80080d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	691a      	ldr	r2, [r3, #16]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	695a      	ldr	r2, [r3, #20]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68da      	ldr	r2, [r3, #12]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2220      	movs	r2, #32
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2220      	movs	r2, #32
 800794c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800795a:	b480      	push	{r7}
 800795c:	b085      	sub	sp, #20
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	4613      	mov	r3, r2
 8007966:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b20      	cmp	r3, #32
 8007972:	d130      	bne.n	80079d6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <HAL_UART_Transmit_IT+0x26>
 800797a:	88fb      	ldrh	r3, [r7, #6]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e029      	b.n	80079d8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800798a:	2b01      	cmp	r3, #1
 800798c:	d101      	bne.n	8007992 <HAL_UART_Transmit_IT+0x38>
 800798e:	2302      	movs	r3, #2
 8007990:	e022      	b.n	80079d8 <HAL_UART_Transmit_IT+0x7e>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	88fa      	ldrh	r2, [r7, #6]
 80079a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	88fa      	ldrh	r2, [r7, #6]
 80079aa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2221      	movs	r2, #33	; 0x21
 80079b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68da      	ldr	r2, [r3, #12]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80079d0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	e000      	b.n	80079d8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80079d6:	2302      	movs	r3, #2
  }
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	bc80      	pop	{r7}
 80079e0:	4770      	bx	lr

080079e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b084      	sub	sp, #16
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	60f8      	str	r0, [r7, #12]
 80079ea:	60b9      	str	r1, [r7, #8]
 80079ec:	4613      	mov	r3, r2
 80079ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	2b20      	cmp	r3, #32
 80079fa:	d11d      	bne.n	8007a38 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d002      	beq.n	8007a08 <HAL_UART_Receive_IT+0x26>
 8007a02:	88fb      	ldrh	r3, [r7, #6]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e016      	b.n	8007a3a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d101      	bne.n	8007a1a <HAL_UART_Receive_IT+0x38>
 8007a16:	2302      	movs	r3, #2
 8007a18:	e00f      	b.n	8007a3a <HAL_UART_Receive_IT+0x58>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007a28:	88fb      	ldrh	r3, [r7, #6]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	68b9      	ldr	r1, [r7, #8]
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 f9c6 	bl	8007dc0 <UART_Start_Receive_IT>
 8007a34:	4603      	mov	r3, r0
 8007a36:	e000      	b.n	8007a3a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007a38:	2302      	movs	r3, #2
  }
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b08a      	sub	sp, #40	; 0x28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	f003 030f 	and.w	r3, r3, #15
 8007a72:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10d      	bne.n	8007a96 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	f003 0320 	and.w	r3, r3, #32
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d008      	beq.n	8007a96 <HAL_UART_IRQHandler+0x52>
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	f003 0320 	and.w	r3, r3, #32
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fa76 	bl	8007f80 <UART_Receive_IT>
      return;
 8007a94:	e17b      	b.n	8007d8e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 80b1 	beq.w	8007c00 <HAL_UART_IRQHandler+0x1bc>
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d105      	bne.n	8007ab4 <HAL_UART_IRQHandler+0x70>
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 80a6 	beq.w	8007c00 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00a      	beq.n	8007ad4 <HAL_UART_IRQHandler+0x90>
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d005      	beq.n	8007ad4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007acc:	f043 0201 	orr.w	r2, r3, #1
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	f003 0304 	and.w	r3, r3, #4
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <HAL_UART_IRQHandler+0xb0>
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d005      	beq.n	8007af4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aec:	f043 0202 	orr.w	r2, r3, #2
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00a      	beq.n	8007b14 <HAL_UART_IRQHandler+0xd0>
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d005      	beq.n	8007b14 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0c:	f043 0204 	orr.w	r2, r3, #4
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	f003 0308 	and.w	r3, r3, #8
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00f      	beq.n	8007b3e <HAL_UART_IRQHandler+0xfa>
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	f003 0320 	and.w	r3, r3, #32
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d104      	bne.n	8007b32 <HAL_UART_IRQHandler+0xee>
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d005      	beq.n	8007b3e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b36:	f043 0208 	orr.w	r2, r3, #8
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 811e 	beq.w	8007d84 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4a:	f003 0320 	and.w	r3, r3, #32
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d007      	beq.n	8007b62 <HAL_UART_IRQHandler+0x11e>
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	f003 0320 	and.w	r3, r3, #32
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d002      	beq.n	8007b62 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fa0f 	bl	8007f80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	bf14      	ite	ne
 8007b70:	2301      	movne	r3, #1
 8007b72:	2300      	moveq	r3, #0
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7c:	f003 0308 	and.w	r3, r3, #8
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d102      	bne.n	8007b8a <HAL_UART_IRQHandler+0x146>
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d031      	beq.n	8007bee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f951 	bl	8007e32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	695b      	ldr	r3, [r3, #20]
 8007b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d023      	beq.n	8007be6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	695a      	ldr	r2, [r3, #20]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d013      	beq.n	8007bde <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bba:	4a76      	ldr	r2, [pc, #472]	; (8007d94 <HAL_UART_IRQHandler+0x350>)
 8007bbc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fd ff00 	bl	80059c8 <HAL_DMA_Abort_IT>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d016      	beq.n	8007bfc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bd8:	4610      	mov	r0, r2
 8007bda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bdc:	e00e      	b.n	8007bfc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f8da 	bl	8007d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be4:	e00a      	b.n	8007bfc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f8d6 	bl	8007d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bec:	e006      	b.n	8007bfc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f8d2 	bl	8007d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007bfa:	e0c3      	b.n	8007d84 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bfc:	bf00      	nop
    return;
 8007bfe:	e0c1      	b.n	8007d84 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	f040 80a1 	bne.w	8007d4c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	f003 0310 	and.w	r3, r3, #16
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 809b 	beq.w	8007d4c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	f003 0310 	and.w	r3, r3, #16
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 8095 	beq.w	8007d4c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c22:	2300      	movs	r3, #0
 8007c24:	60fb      	str	r3, [r7, #12]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	60fb      	str	r3, [r7, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d04e      	beq.n	8007ce4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007c50:	8a3b      	ldrh	r3, [r7, #16]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 8098 	beq.w	8007d88 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c5c:	8a3a      	ldrh	r2, [r7, #16]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	f080 8092 	bcs.w	8007d88 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	8a3a      	ldrh	r2, [r7, #16]
 8007c68:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	2b20      	cmp	r3, #32
 8007c72:	d02b      	beq.n	8007ccc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c82:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	695a      	ldr	r2, [r3, #20]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 0201 	bic.w	r2, r2, #1
 8007c92:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	695a      	ldr	r2, [r3, #20]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ca2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68da      	ldr	r2, [r3, #12]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f022 0210 	bic.w	r2, r2, #16
 8007cc0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fd fe44 	bl	8005954 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f864 	bl	8007daa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007ce2:	e051      	b.n	8007d88 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d047      	beq.n	8007d8c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007cfc:	8a7b      	ldrh	r3, [r7, #18]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d044      	beq.n	8007d8c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68da      	ldr	r2, [r3, #12]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007d10:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	695a      	ldr	r2, [r3, #20]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f022 0201 	bic.w	r2, r2, #1
 8007d20:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2220      	movs	r2, #32
 8007d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68da      	ldr	r2, [r3, #12]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f022 0210 	bic.w	r2, r2, #16
 8007d3e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d40:	8a7b      	ldrh	r3, [r7, #18]
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f830 	bl	8007daa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d4a:	e01f      	b.n	8007d8c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d008      	beq.n	8007d68 <HAL_UART_IRQHandler+0x324>
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f8a6 	bl	8007eb2 <UART_Transmit_IT>
    return;
 8007d66:	e012      	b.n	8007d8e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00d      	beq.n	8007d8e <HAL_UART_IRQHandler+0x34a>
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d008      	beq.n	8007d8e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f8e7 	bl	8007f50 <UART_EndTransmit_IT>
    return;
 8007d82:	e004      	b.n	8007d8e <HAL_UART_IRQHandler+0x34a>
    return;
 8007d84:	bf00      	nop
 8007d86:	e002      	b.n	8007d8e <HAL_UART_IRQHandler+0x34a>
      return;
 8007d88:	bf00      	nop
 8007d8a:	e000      	b.n	8007d8e <HAL_UART_IRQHandler+0x34a>
      return;
 8007d8c:	bf00      	nop
  }
}
 8007d8e:	3728      	adds	r7, #40	; 0x28
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	08007e8b 	.word	0x08007e8b

08007d98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bc80      	pop	{r7}
 8007da8:	4770      	bx	lr

08007daa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b083      	sub	sp, #12
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	460b      	mov	r3, r1
 8007db4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007db6:	bf00      	nop
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bc80      	pop	{r7}
 8007dbe:	4770      	bx	lr

08007dc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	88fa      	ldrh	r2, [r7, #6]
 8007dd8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	88fa      	ldrh	r2, [r7, #6]
 8007dde:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2222      	movs	r2, #34	; 0x22
 8007dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68da      	ldr	r2, [r3, #12]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e04:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	695a      	ldr	r2, [r3, #20]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f042 0201 	orr.w	r2, r2, #1
 8007e14:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68da      	ldr	r2, [r3, #12]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f042 0220 	orr.w	r2, r2, #32
 8007e24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bc80      	pop	{r7}
 8007e30:	4770      	bx	lr

08007e32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e48:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	695a      	ldr	r2, [r3, #20]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f022 0201 	bic.w	r2, r2, #1
 8007e58:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d107      	bne.n	8007e72 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68da      	ldr	r2, [r3, #12]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 0210 	bic.w	r2, r2, #16
 8007e70:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2220      	movs	r2, #32
 8007e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bc80      	pop	{r7}
 8007e88:	4770      	bx	lr

08007e8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f7ff ff77 	bl	8007d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eaa:	bf00      	nop
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b085      	sub	sp, #20
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b21      	cmp	r3, #33	; 0x21
 8007ec4:	d13e      	bne.n	8007f44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ece:	d114      	bne.n	8007efa <UART_Transmit_IT+0x48>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d110      	bne.n	8007efa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	881b      	ldrh	r3, [r3, #0]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	1c9a      	adds	r2, r3, #2
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	621a      	str	r2, [r3, #32]
 8007ef8:	e008      	b.n	8007f0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	1c59      	adds	r1, r3, #1
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	6211      	str	r1, [r2, #32]
 8007f04:	781a      	ldrb	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	3b01      	subs	r3, #1
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10f      	bne.n	8007f40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68da      	ldr	r2, [r3, #12]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68da      	ldr	r2, [r3, #12]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	e000      	b.n	8007f46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f44:	2302      	movs	r3, #2
  }
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bc80      	pop	{r7}
 8007f4e:	4770      	bx	lr

08007f50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7fc f807 	bl	8003f84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b22      	cmp	r3, #34	; 0x22
 8007f92:	f040 8099 	bne.w	80080c8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f9e:	d117      	bne.n	8007fd0 <UART_Receive_IT+0x50>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d113      	bne.n	8007fd0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc8:	1c9a      	adds	r2, r3, #2
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	629a      	str	r2, [r3, #40]	; 0x28
 8007fce:	e026      	b.n	800801e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe2:	d007      	beq.n	8007ff4 <UART_Receive_IT+0x74>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10a      	bne.n	8008002 <UART_Receive_IT+0x82>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d106      	bne.n	8008002 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	701a      	strb	r2, [r3, #0]
 8008000:	e008      	b.n	8008014 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	b2db      	uxtb	r3, r3
 800800a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800800e:	b2da      	uxtb	r2, r3
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008022:	b29b      	uxth	r3, r3
 8008024:	3b01      	subs	r3, #1
 8008026:	b29b      	uxth	r3, r3
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	4619      	mov	r1, r3
 800802c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800802e:	2b00      	cmp	r3, #0
 8008030:	d148      	bne.n	80080c4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68da      	ldr	r2, [r3, #12]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 0220 	bic.w	r2, r2, #32
 8008040:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68da      	ldr	r2, [r3, #12]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008050:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	695a      	ldr	r2, [r3, #20]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0201 	bic.w	r2, r2, #1
 8008060:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2220      	movs	r2, #32
 8008066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806e:	2b01      	cmp	r3, #1
 8008070:	d123      	bne.n	80080ba <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68da      	ldr	r2, [r3, #12]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f022 0210 	bic.w	r2, r2, #16
 8008086:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0310 	and.w	r3, r3, #16
 8008092:	2b10      	cmp	r3, #16
 8008094:	d10a      	bne.n	80080ac <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008096:	2300      	movs	r3, #0
 8008098:	60fb      	str	r3, [r7, #12]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	60fb      	str	r3, [r7, #12]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	60fb      	str	r3, [r7, #12]
 80080aa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff fe79 	bl	8007daa <HAL_UARTEx_RxEventCallback>
 80080b8:	e002      	b.n	80080c0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7fb ff2e 	bl	8003f1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	e002      	b.n	80080ca <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	e000      	b.n	80080ca <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80080c8:	2302      	movs	r3, #2
  }
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3718      	adds	r7, #24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
	...

080080d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68da      	ldr	r2, [r3, #12]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	431a      	orrs	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	695b      	ldr	r3, [r3, #20]
 8008100:	4313      	orrs	r3, r2
 8008102:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800810e:	f023 030c 	bic.w	r3, r3, #12
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	6812      	ldr	r2, [r2, #0]
 8008116:	68b9      	ldr	r1, [r7, #8]
 8008118:	430b      	orrs	r3, r1
 800811a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	699a      	ldr	r2, [r3, #24]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a2c      	ldr	r2, [pc, #176]	; (80081e8 <UART_SetConfig+0x114>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d103      	bne.n	8008144 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800813c:	f7fe fd1e 	bl	8006b7c <HAL_RCC_GetPCLK2Freq>
 8008140:	60f8      	str	r0, [r7, #12]
 8008142:	e002      	b.n	800814a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008144:	f7fe fd06 	bl	8006b54 <HAL_RCC_GetPCLK1Freq>
 8008148:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	4613      	mov	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	009a      	lsls	r2, r3, #2
 8008154:	441a      	add	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008160:	4a22      	ldr	r2, [pc, #136]	; (80081ec <UART_SetConfig+0x118>)
 8008162:	fba2 2303 	umull	r2, r3, r2, r3
 8008166:	095b      	lsrs	r3, r3, #5
 8008168:	0119      	lsls	r1, r3, #4
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	4613      	mov	r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4413      	add	r3, r2
 8008172:	009a      	lsls	r2, r3, #2
 8008174:	441a      	add	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008180:	4b1a      	ldr	r3, [pc, #104]	; (80081ec <UART_SetConfig+0x118>)
 8008182:	fba3 0302 	umull	r0, r3, r3, r2
 8008186:	095b      	lsrs	r3, r3, #5
 8008188:	2064      	movs	r0, #100	; 0x64
 800818a:	fb00 f303 	mul.w	r3, r0, r3
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	011b      	lsls	r3, r3, #4
 8008192:	3332      	adds	r3, #50	; 0x32
 8008194:	4a15      	ldr	r2, [pc, #84]	; (80081ec <UART_SetConfig+0x118>)
 8008196:	fba2 2303 	umull	r2, r3, r2, r3
 800819a:	095b      	lsrs	r3, r3, #5
 800819c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081a0:	4419      	add	r1, r3
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	4613      	mov	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	009a      	lsls	r2, r3, #2
 80081ac:	441a      	add	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80081b8:	4b0c      	ldr	r3, [pc, #48]	; (80081ec <UART_SetConfig+0x118>)
 80081ba:	fba3 0302 	umull	r0, r3, r3, r2
 80081be:	095b      	lsrs	r3, r3, #5
 80081c0:	2064      	movs	r0, #100	; 0x64
 80081c2:	fb00 f303 	mul.w	r3, r0, r3
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	011b      	lsls	r3, r3, #4
 80081ca:	3332      	adds	r3, #50	; 0x32
 80081cc:	4a07      	ldr	r2, [pc, #28]	; (80081ec <UART_SetConfig+0x118>)
 80081ce:	fba2 2303 	umull	r2, r3, r2, r3
 80081d2:	095b      	lsrs	r3, r3, #5
 80081d4:	f003 020f 	and.w	r2, r3, #15
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	440a      	add	r2, r1
 80081de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80081e0:	bf00      	nop
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	40013800 	.word	0x40013800
 80081ec:	51eb851f 	.word	0x51eb851f

080081f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  //retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
	FATFS_LinkDriver(&SD0_Driver, SD0Path);
 80081f4:	4908      	ldr	r1, [pc, #32]	; (8008218 <MX_FATFS_Init+0x28>)
 80081f6:	4809      	ldr	r0, [pc, #36]	; (800821c <MX_FATFS_Init+0x2c>)
 80081f8:	f005 fa36 	bl	800d668 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD1_Driver, SD1Path);
 80081fc:	4908      	ldr	r1, [pc, #32]	; (8008220 <MX_FATFS_Init+0x30>)
 80081fe:	4809      	ldr	r0, [pc, #36]	; (8008224 <MX_FATFS_Init+0x34>)
 8008200:	f005 fa32 	bl	800d668 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD2_Driver, SD2Path);
 8008204:	4908      	ldr	r1, [pc, #32]	; (8008228 <MX_FATFS_Init+0x38>)
 8008206:	4809      	ldr	r0, [pc, #36]	; (800822c <MX_FATFS_Init+0x3c>)
 8008208:	f005 fa2e 	bl	800d668 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD3_Driver, SD3Path);
 800820c:	4908      	ldr	r1, [pc, #32]	; (8008230 <MX_FATFS_Init+0x40>)
 800820e:	4809      	ldr	r0, [pc, #36]	; (8008234 <MX_FATFS_Init+0x44>)
 8008210:	f005 fa2a 	bl	800d668 <FATFS_LinkDriver>


  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008214:	bf00      	nop
 8008216:	bd80      	pop	{r7, pc}
 8008218:	20002ad8 	.word	0x20002ad8
 800821c:	20000194 	.word	0x20000194
 8008220:	20002adc 	.word	0x20002adc
 8008224:	200001a8 	.word	0x200001a8
 8008228:	20002ae0 	.word	0x20002ae0
 800822c:	200001bc 	.word	0x200001bc
 8008230:	20002ae4 	.word	0x20002ae4
 8008234:	200001d0 	.word	0x200001d0

08008238 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008238:	b480      	push	{r7}
 800823a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800823c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800823e:	4618      	mov	r0, r3
 8008240:	46bd      	mov	sp, r7
 8008242:	bc80      	pop	{r7}
 8008244:	4770      	bx	lr

08008246 <SD0_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_initialize (BYTE pdrv)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b082      	sub	sp, #8
 800824a:	af00      	add	r7, sp, #0
 800824c:	4603      	mov	r3, r0
 800824e:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 8008250:	2000      	movs	r0, #0
 8008252:	f7fb ffe5 	bl	8004220 <sd_ss_set_active>
	return USER_initialize(pdrv);
 8008256:	79fb      	ldrb	r3, [r7, #7]
 8008258:	4618      	mov	r0, r3
 800825a:	f000 f839 	bl	80082d0 <USER_initialize>
 800825e:	4603      	mov	r3, r0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <SD1_initialize>:
DSTATUS SD1_initialize (BYTE pdrv)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	4603      	mov	r3, r0
 8008270:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 8008272:	2001      	movs	r0, #1
 8008274:	f7fb ffd4 	bl	8004220 <sd_ss_set_active>
	return USER_initialize(pdrv);
 8008278:	79fb      	ldrb	r3, [r7, #7]
 800827a:	4618      	mov	r0, r3
 800827c:	f000 f828 	bl	80082d0 <USER_initialize>
 8008280:	4603      	mov	r3, r0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <SD2_initialize>:
DSTATUS SD2_initialize (BYTE pdrv)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
 8008290:	4603      	mov	r3, r0
 8008292:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 8008294:	2002      	movs	r0, #2
 8008296:	f7fb ffc3 	bl	8004220 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800829a:	79fb      	ldrb	r3, [r7, #7]
 800829c:	4618      	mov	r0, r3
 800829e:	f000 f817 	bl	80082d0 <USER_initialize>
 80082a2:	4603      	mov	r3, r0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <SD3_initialize>:
DSTATUS SD3_initialize (BYTE pdrv)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	4603      	mov	r3, r0
 80082b4:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 80082b6:	2003      	movs	r0, #3
 80082b8:	f7fb ffb2 	bl	8004220 <sd_ss_set_active>
	return USER_initialize(pdrv);
 80082bc:	79fb      	ldrb	r3, [r7, #7]
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 f806 	bl	80082d0 <USER_initialize>
 80082c4:	4603      	mov	r3, r0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <USER_initialize>:

DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//SD_PowerOn();
	SS_SD_SELECT();
 80082da:	f7fb ffdf 	bl	800429c <sd_ss_active_pin_down>
	if(sd_ini()==0) {*Stat &= ~STA_NOINIT;} // STA_NOINIT
 80082de:	f7fc f857 	bl	8004390 <sd_ini>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d108      	bne.n	80082fa <USER_initialize+0x2a>
 80082e8:	4b08      	ldr	r3, [pc, #32]	; (800830c <USER_initialize+0x3c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	781a      	ldrb	r2, [r3, #0]
 80082ee:	4b07      	ldr	r3, [pc, #28]	; (800830c <USER_initialize+0x3c>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f022 0201 	bic.w	r2, r2, #1
 80082f6:	b2d2      	uxtb	r2, r2
 80082f8:	701a      	strb	r2, [r3, #0]
	SS_SD_DESELECT();
 80082fa:	f7fb ffdf 	bl	80042bc <sd_ss_active_pin_up>
    return *Stat;
 80082fe:	4b03      	ldr	r3, [pc, #12]	; (800830c <USER_initialize+0x3c>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	781b      	ldrb	r3, [r3, #0]
  /* USER CODE END INIT */
}
 8008304:	4618      	mov	r0, r3
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20002ae8 	.word	0x20002ae8

08008310 <SD0_status>:
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_status (BYTE pdrv)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	4603      	mov	r3, r0
 8008318:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 800831a:	2000      	movs	r0, #0
 800831c:	f7fb ff80 	bl	8004220 <sd_ss_set_active>
	return USER_status(pdrv);
 8008320:	79fb      	ldrb	r3, [r7, #7]
 8008322:	4618      	mov	r0, r3
 8008324:	f000 f838 	bl	8008398 <USER_status>
 8008328:	4603      	mov	r3, r0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <SD1_status>:
DSTATUS SD1_status (BYTE pdrv)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b082      	sub	sp, #8
 8008336:	af00      	add	r7, sp, #0
 8008338:	4603      	mov	r3, r0
 800833a:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 800833c:	2001      	movs	r0, #1
 800833e:	f7fb ff6f 	bl	8004220 <sd_ss_set_active>
	return USER_status(pdrv);
 8008342:	79fb      	ldrb	r3, [r7, #7]
 8008344:	4618      	mov	r0, r3
 8008346:	f000 f827 	bl	8008398 <USER_status>
 800834a:	4603      	mov	r3, r0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <SD2_status>:
DSTATUS SD2_status (BYTE pdrv)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	4603      	mov	r3, r0
 800835c:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 800835e:	2002      	movs	r0, #2
 8008360:	f7fb ff5e 	bl	8004220 <sd_ss_set_active>
	return USER_status(pdrv);
 8008364:	79fb      	ldrb	r3, [r7, #7]
 8008366:	4618      	mov	r0, r3
 8008368:	f000 f816 	bl	8008398 <USER_status>
 800836c:	4603      	mov	r3, r0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <SD3_status>:
DSTATUS SD3_status (BYTE pdrv)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b082      	sub	sp, #8
 800837a:	af00      	add	r7, sp, #0
 800837c:	4603      	mov	r3, r0
 800837e:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 8008380:	2003      	movs	r0, #3
 8008382:	f7fb ff4d 	bl	8004220 <sd_ss_set_active>
	return USER_status(pdrv);
 8008386:	79fb      	ldrb	r3, [r7, #7]
 8008388:	4618      	mov	r0, r3
 800838a:	f000 f805 	bl	8008398 <USER_status>
 800838e:	4603      	mov	r3, r0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USER_status>:

DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	4603      	mov	r3, r0
 80083a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SS_SD_SELECT();
 80083a2:	f7fb ff7b 	bl	800429c <sd_ss_active_pin_down>
	//if (pdrv) return STA_NOINIT;
	SS_SD_DESELECT();
 80083a6:	f7fb ff89 	bl	80042bc <sd_ss_active_pin_up>
    return *Stat;
 80083aa:	4b03      	ldr	r3, [pc, #12]	; (80083b8 <USER_status+0x20>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
  /* USER CODE END STATUS */
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	20002ae8 	.word	0x20002ae8

080083bc <SD0_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DSTATUS SD0_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60b9      	str	r1, [r7, #8]
 80083c4:	607a      	str	r2, [r7, #4]
 80083c6:	603b      	str	r3, [r7, #0]
 80083c8:	4603      	mov	r3, r0
 80083ca:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 80083cc:	2000      	movs	r0, #0
 80083ce:	f7fb ff27 	bl	8004220 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 80083d2:	7bf8      	ldrb	r0, [r7, #15]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	f000 f847 	bl	800846c <USER_read>
 80083de:	4603      	mov	r3, r0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <SD1_read>:
DSTATUS SD1_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60b9      	str	r1, [r7, #8]
 80083f0:	607a      	str	r2, [r7, #4]
 80083f2:	603b      	str	r3, [r7, #0]
 80083f4:	4603      	mov	r3, r0
 80083f6:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 80083f8:	2001      	movs	r0, #1
 80083fa:	f7fb ff11 	bl	8004220 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 80083fe:	7bf8      	ldrb	r0, [r7, #15]
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	68b9      	ldr	r1, [r7, #8]
 8008406:	f000 f831 	bl	800846c <USER_read>
 800840a:	4603      	mov	r3, r0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <SD2_read>:
DSTATUS SD2_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	60b9      	str	r1, [r7, #8]
 800841c:	607a      	str	r2, [r7, #4]
 800841e:	603b      	str	r3, [r7, #0]
 8008420:	4603      	mov	r3, r0
 8008422:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 8008424:	2002      	movs	r0, #2
 8008426:	f7fb fefb 	bl	8004220 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800842a:	7bf8      	ldrb	r0, [r7, #15]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	68b9      	ldr	r1, [r7, #8]
 8008432:	f000 f81b 	bl	800846c <USER_read>
 8008436:	4603      	mov	r3, r0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <SD3_read>:
DSTATUS SD3_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	607a      	str	r2, [r7, #4]
 800844a:	603b      	str	r3, [r7, #0]
 800844c:	4603      	mov	r3, r0
 800844e:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 8008450:	2003      	movs	r0, #3
 8008452:	f7fb fee5 	bl	8004220 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8008456:	7bf8      	ldrb	r0, [r7, #15]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	68b9      	ldr	r1, [r7, #8]
 800845e:	f000 f805 	bl	800846c <USER_read>
 8008462:	4603      	mov	r3, r0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	607a      	str	r2, [r7, #4]
 8008476:	603b      	str	r3, [r7, #0]
 8008478:	4603      	mov	r3, r0
 800847a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */

	SS_SD_SELECT();
 800847c:	f7fb ff0e 	bl	800429c <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d102      	bne.n	800848c <USER_read+0x20>
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d101      	bne.n	8008490 <USER_read+0x24>
 800848c:	2304      	movs	r3, #4
 800848e:	e045      	b.n	800851c <USER_read+0xb0>
	if (*Stat & STA_NOINIT) return RES_NOTRDY;
 8008490:	4b24      	ldr	r3, [pc, #144]	; (8008524 <USER_read+0xb8>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <USER_read+0x36>
 800849e:	2303      	movs	r3, #3
 80084a0:	e03c      	b.n	800851c <USER_read+0xb0>
	if (!(sdinfo->type & 4)) sector *= 512; /* Convert to byte address if needed */
 80084a2:	4b21      	ldr	r3, [pc, #132]	; (8008528 <USER_read+0xbc>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	f003 0304 	and.w	r3, r3, #4
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d102      	bne.n	80084b8 <USER_read+0x4c>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	025b      	lsls	r3, r3, #9
 80084b6:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d106      	bne.n	80084cc <USER_read+0x60>
	{
	  SD_Read_Block(buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	68b8      	ldr	r0, [r7, #8]
 80084c2:	f7fc f8aa 	bl	800461a <SD_Read_Block>
	  count = 0;
 80084c6:	2300      	movs	r3, #0
 80084c8:	603b      	str	r3, [r7, #0]
 80084ca:	e01d      	b.n	8008508 <USER_read+0x9c>
	}
	else /* Multiple block read */
	{
		do{
			SD_Read_Block((BYTE*)buff,sector);
 80084cc:	6879      	ldr	r1, [r7, #4]
 80084ce:	68b8      	ldr	r0, [r7, #8]
 80084d0:	f7fc f8a3 	bl	800461a <SD_Read_Block>
			if (!(sdinfo->type & 4)){
 80084d4:	4b14      	ldr	r3, [pc, #80]	; (8008528 <USER_read+0xbc>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	f003 0304 	and.w	r3, r3, #4
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d104      	bne.n	80084ee <USER_read+0x82>
				sector+=512;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80084ea:	607b      	str	r3, [r7, #4]
 80084ec:	e002      	b.n	80084f4 <USER_read+0x88>
			}
			else sector++;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	3301      	adds	r3, #1
 80084f2:	607b      	str	r3, [r7, #4]
			buff+=512;
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80084fa:	60bb      	str	r3, [r7, #8]
			count--;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	3b01      	subs	r3, #1
 8008500:	603b      	str	r3, [r7, #0]
		}while(count>0);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1e1      	bne.n	80084cc <USER_read+0x60>
	}
	SPI_Release();
 8008508:	f7fc f880 	bl	800460c <SPI_Release>
	SS_SD_DESELECT();
 800850c:	f7fb fed6 	bl	80042bc <sd_ss_active_pin_up>
	return count ? RES_ERROR : RES_OK;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	bf14      	ite	ne
 8008516:	2301      	movne	r3, #1
 8008518:	2300      	moveq	r3, #0
 800851a:	b2db      	uxtb	r3, r3
    return RES_OK;
  /* USER CODE END READ */
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	20002ae8 	.word	0x20002ae8
 8008528:	200027e8 	.word	0x200027e8

0800852c <SD0_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DSTATUS SD0_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	607a      	str	r2, [r7, #4]
 8008536:	603b      	str	r3, [r7, #0]
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 800853c:	2000      	movs	r0, #0
 800853e:	f7fb fe6f 	bl	8004220 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8008542:	7bf8      	ldrb	r0, [r7, #15]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	68b9      	ldr	r1, [r7, #8]
 800854a:	f000 f847 	bl	80085dc <USER_write>
 800854e:	4603      	mov	r3, r0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <SD1_write>:
DSTATUS SD1_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	60b9      	str	r1, [r7, #8]
 8008560:	607a      	str	r2, [r7, #4]
 8008562:	603b      	str	r3, [r7, #0]
 8008564:	4603      	mov	r3, r0
 8008566:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 8008568:	2001      	movs	r0, #1
 800856a:	f7fb fe59 	bl	8004220 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800856e:	7bf8      	ldrb	r0, [r7, #15]
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	68b9      	ldr	r1, [r7, #8]
 8008576:	f000 f831 	bl	80085dc <USER_write>
 800857a:	4603      	mov	r3, r0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <SD2_write>:
DSTATUS SD2_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	607a      	str	r2, [r7, #4]
 800858e:	603b      	str	r3, [r7, #0]
 8008590:	4603      	mov	r3, r0
 8008592:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 8008594:	2002      	movs	r0, #2
 8008596:	f7fb fe43 	bl	8004220 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800859a:	7bf8      	ldrb	r0, [r7, #15]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	68b9      	ldr	r1, [r7, #8]
 80085a2:	f000 f81b 	bl	80085dc <USER_write>
 80085a6:	4603      	mov	r3, r0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <SD3_write>:
DSTATUS SD3_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60b9      	str	r1, [r7, #8]
 80085b8:	607a      	str	r2, [r7, #4]
 80085ba:	603b      	str	r3, [r7, #0]
 80085bc:	4603      	mov	r3, r0
 80085be:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 80085c0:	2003      	movs	r0, #3
 80085c2:	f7fb fe2d 	bl	8004220 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 80085c6:	7bf8      	ldrb	r0, [r7, #15]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	68b9      	ldr	r1, [r7, #8]
 80085ce:	f000 f805 	bl	80085dc <USER_write>
 80085d2:	4603      	mov	r3, r0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60b9      	str	r1, [r7, #8]
 80085e4:	607a      	str	r2, [r7, #4]
 80085e6:	603b      	str	r3, [r7, #0]
 80085e8:	4603      	mov	r3, r0
 80085ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */

	uint8_t res;
	SS_SD_SELECT();
 80085ec:	f7fb fe56 	bl	800429c <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d102      	bne.n	80085fc <USER_write+0x20>
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <USER_write+0x24>
 80085fc:	2304      	movs	r3, #4
 80085fe:	e02d      	b.n	800865c <USER_write+0x80>
	if (*Stat & STA_NOINIT) return RES_NOTRDY;
 8008600:	4b18      	ldr	r3, [pc, #96]	; (8008664 <USER_write+0x88>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <USER_write+0x36>
 800860e:	2303      	movs	r3, #3
 8008610:	e024      	b.n	800865c <USER_write+0x80>
	if (*Stat & STA_PROTECT) return RES_WRPRT;
 8008612:	4b14      	ldr	r3, [pc, #80]	; (8008664 <USER_write+0x88>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b00      	cmp	r3, #0
 800861e:	d001      	beq.n	8008624 <USER_write+0x48>
 8008620:	2302      	movs	r3, #2
 8008622:	e01b      	b.n	800865c <USER_write+0x80>
	if (!(sdinfo->type & 4)) sector *= 512; /* Convert to byte address if needed */
 8008624:	4b10      	ldr	r3, [pc, #64]	; (8008668 <USER_write+0x8c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	b2db      	uxtb	r3, r3
 800862c:	f003 0304 	and.w	r3, r3, #4
 8008630:	2b00      	cmp	r3, #0
 8008632:	d102      	bne.n	800863a <USER_write+0x5e>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	025b      	lsls	r3, r3, #9
 8008638:	607b      	str	r3, [r7, #4]
  	res=SD_Write_Blocks((BYTE*)buff,sector,count);
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	b29b      	uxth	r3, r3
 800863e:	461a      	mov	r2, r3
 8008640:	6879      	ldr	r1, [r7, #4]
 8008642:	68b8      	ldr	r0, [r7, #8]
 8008644:	f7fc f82e 	bl	80046a4 <SD_Write_Blocks>
 8008648:	4603      	mov	r3, r0
 800864a:	75fb      	strb	r3, [r7, #23]
	SS_SD_DESELECT();
 800864c:	f7fb fe36 	bl	80042bc <sd_ss_active_pin_up>

	return res ? RES_ERROR : RES_OK;
 8008650:	7dfb      	ldrb	r3, [r7, #23]
 8008652:	2b00      	cmp	r3, #0
 8008654:	bf14      	ite	ne
 8008656:	2301      	movne	r3, #1
 8008658:	2300      	moveq	r3, #0
 800865a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800865c:	4618      	mov	r0, r3
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	20002ae8 	.word	0x20002ae8
 8008668:	200027e8 	.word	0x200027e8

0800866c <SD0_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DSTATUS SD0_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	4603      	mov	r3, r0
 8008674:	603a      	str	r2, [r7, #0]
 8008676:	71fb      	strb	r3, [r7, #7]
 8008678:	460b      	mov	r3, r1
 800867a:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(0);
 800867c:	2000      	movs	r0, #0
 800867e:	f7fb fdcf 	bl	8004220 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8008682:	79b9      	ldrb	r1, [r7, #6]
 8008684:	79fb      	ldrb	r3, [r7, #7]
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	4618      	mov	r0, r3
 800868a:	f000 f847 	bl	800871c <USER_ioctl>
 800868e:	4603      	mov	r3, r0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <SD1_ioctl>:
DSTATUS SD1_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	603a      	str	r2, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
 80086a4:	460b      	mov	r3, r1
 80086a6:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(1);
 80086a8:	2001      	movs	r0, #1
 80086aa:	f7fb fdb9 	bl	8004220 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 80086ae:	79b9      	ldrb	r1, [r7, #6]
 80086b0:	79fb      	ldrb	r3, [r7, #7]
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 f831 	bl	800871c <USER_ioctl>
 80086ba:	4603      	mov	r3, r0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <SD2_ioctl>:
DSTATUS SD2_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	4603      	mov	r3, r0
 80086cc:	603a      	str	r2, [r7, #0]
 80086ce:	71fb      	strb	r3, [r7, #7]
 80086d0:	460b      	mov	r3, r1
 80086d2:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(2);
 80086d4:	2002      	movs	r0, #2
 80086d6:	f7fb fda3 	bl	8004220 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 80086da:	79b9      	ldrb	r1, [r7, #6]
 80086dc:	79fb      	ldrb	r3, [r7, #7]
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f000 f81b 	bl	800871c <USER_ioctl>
 80086e6:	4603      	mov	r3, r0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <SD3_ioctl>:
DSTATUS SD3_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	4603      	mov	r3, r0
 80086f8:	603a      	str	r2, [r7, #0]
 80086fa:	71fb      	strb	r3, [r7, #7]
 80086fc:	460b      	mov	r3, r1
 80086fe:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(3);
 8008700:	2003      	movs	r0, #3
 8008702:	f7fb fd8d 	bl	8004220 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8008706:	79b9      	ldrb	r1, [r7, #6]
 8008708:	79fb      	ldrb	r3, [r7, #7]
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	4618      	mov	r0, r3
 800870e:	f000 f805 	bl	800871c <USER_ioctl>
 8008712:	4603      	mov	r3, r0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	4603      	mov	r3, r0
 8008724:	603a      	str	r2, [r7, #0]
 8008726:	71fb      	strb	r3, [r7, #7]
 8008728:	460b      	mov	r3, r1
 800872a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res;

	SS_SD_SELECT();
 800872c:	f7fb fdb6 	bl	800429c <sd_ss_active_pin_down>
	if (pdrv) return RES_PARERR;
 8008730:	79fb      	ldrb	r3, [r7, #7]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <USER_ioctl+0x1e>
 8008736:	2304      	movs	r3, #4
 8008738:	e028      	b.n	800878c <USER_ioctl+0x70>
	if (*Stat & STA_NOINIT) return RES_NOTRDY;
 800873a:	4b16      	ldr	r3, [pc, #88]	; (8008794 <USER_ioctl+0x78>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	f003 0301 	and.w	r3, r3, #1
 8008744:	2b00      	cmp	r3, #0
 8008746:	d001      	beq.n	800874c <USER_ioctl+0x30>
 8008748:	2303      	movs	r3, #3
 800874a:	e01f      	b.n	800878c <USER_ioctl+0x70>
	res = RES_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	73fb      	strb	r3, [r7, #15]
	switch (cmd)
 8008750:	79bb      	ldrb	r3, [r7, #6]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d002      	beq.n	800875c <USER_ioctl+0x40>
 8008756:	2b02      	cmp	r3, #2
 8008758:	d008      	beq.n	800876c <USER_ioctl+0x50>
 800875a:	e00e      	b.n	800877a <USER_ioctl+0x5e>
	{
	  case CTRL_SYNC : /* Flush dirty buffer if present */
	    //SS_SD_SELECT();
	    if (SPI_wait_ready() == 0xFF)
 800875c:	f7fb fee0 	bl	8004520 <SPI_wait_ready>
 8008760:	4603      	mov	r3, r0
 8008762:	2bff      	cmp	r3, #255	; 0xff
 8008764:	d10c      	bne.n	8008780 <USER_ioctl+0x64>
	    res = RES_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	73fb      	strb	r3, [r7, #15]
	    break;
 800876a:	e009      	b.n	8008780 <USER_ioctl+0x64>
	  case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
	    *(WORD*)buff = 512;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008772:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	73fb      	strb	r3, [r7, #15]
	    break;
 8008778:	e003      	b.n	8008782 <USER_ioctl+0x66>
	  default:
	    res = RES_PARERR;
 800877a:	2304      	movs	r3, #4
 800877c:	73fb      	strb	r3, [r7, #15]
 800877e:	e000      	b.n	8008782 <USER_ioctl+0x66>
	    break;
 8008780:	bf00      	nop
	}
	SPI_Release();
 8008782:	f7fb ff43 	bl	800460c <SPI_Release>
	SS_SD_DESELECT();
 8008786:	f7fb fd99 	bl	80042bc <sd_ss_active_pin_up>
    return res;
 800878a:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800878c:	4618      	mov	r0, r3
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	20002ae8 	.word	0x20002ae8

08008798 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80087a2:	79fb      	ldrb	r3, [r7, #7]
 80087a4:	4a08      	ldr	r2, [pc, #32]	; (80087c8 <disk_status+0x30>)
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	79fa      	ldrb	r2, [r7, #7]
 80087b0:	4905      	ldr	r1, [pc, #20]	; (80087c8 <disk_status+0x30>)
 80087b2:	440a      	add	r2, r1
 80087b4:	7d12      	ldrb	r2, [r2, #20]
 80087b6:	4610      	mov	r0, r2
 80087b8:	4798      	blx	r3
 80087ba:	4603      	mov	r3, r0
 80087bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80087be:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	20002f80 	.word	0x20002f80

080087cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	4603      	mov	r3, r0
 80087d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80087da:	79fb      	ldrb	r3, [r7, #7]
 80087dc:	4a0e      	ldr	r2, [pc, #56]	; (8008818 <disk_initialize+0x4c>)
 80087de:	5cd3      	ldrb	r3, [r2, r3]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d114      	bne.n	800880e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80087e4:	79fb      	ldrb	r3, [r7, #7]
 80087e6:	4a0c      	ldr	r2, [pc, #48]	; (8008818 <disk_initialize+0x4c>)
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4413      	add	r3, r2
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	79fa      	ldrb	r2, [r7, #7]
 80087f2:	4909      	ldr	r1, [pc, #36]	; (8008818 <disk_initialize+0x4c>)
 80087f4:	440a      	add	r2, r1
 80087f6:	7d12      	ldrb	r2, [r2, #20]
 80087f8:	4610      	mov	r0, r2
 80087fa:	4798      	blx	r3
 80087fc:	4603      	mov	r3, r0
 80087fe:	73fb      	strb	r3, [r7, #15]
    if(stat==RES_OK){
 8008800:	7bfb      	ldrb	r3, [r7, #15]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d103      	bne.n	800880e <disk_initialize+0x42>
    	disk.is_initialized[pdrv] = 1;
 8008806:	79fb      	ldrb	r3, [r7, #7]
 8008808:	4a03      	ldr	r2, [pc, #12]	; (8008818 <disk_initialize+0x4c>)
 800880a:	2101      	movs	r1, #1
 800880c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800880e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	20002f80 	.word	0x20002f80

0800881c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800881c:	b590      	push	{r4, r7, lr}
 800881e:	b087      	sub	sp, #28
 8008820:	af00      	add	r7, sp, #0
 8008822:	60b9      	str	r1, [r7, #8]
 8008824:	607a      	str	r2, [r7, #4]
 8008826:	603b      	str	r3, [r7, #0]
 8008828:	4603      	mov	r3, r0
 800882a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800882c:	7bfb      	ldrb	r3, [r7, #15]
 800882e:	4a0a      	ldr	r2, [pc, #40]	; (8008858 <disk_read+0x3c>)
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4413      	add	r3, r2
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	689c      	ldr	r4, [r3, #8]
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	4a07      	ldr	r2, [pc, #28]	; (8008858 <disk_read+0x3c>)
 800883c:	4413      	add	r3, r2
 800883e:	7d18      	ldrb	r0, [r3, #20]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	68b9      	ldr	r1, [r7, #8]
 8008846:	47a0      	blx	r4
 8008848:	4603      	mov	r3, r0
 800884a:	75fb      	strb	r3, [r7, #23]
  return res;
 800884c:	7dfb      	ldrb	r3, [r7, #23]
}
 800884e:	4618      	mov	r0, r3
 8008850:	371c      	adds	r7, #28
 8008852:	46bd      	mov	sp, r7
 8008854:	bd90      	pop	{r4, r7, pc}
 8008856:	bf00      	nop
 8008858:	20002f80 	.word	0x20002f80

0800885c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800885c:	b590      	push	{r4, r7, lr}
 800885e:	b087      	sub	sp, #28
 8008860:	af00      	add	r7, sp, #0
 8008862:	60b9      	str	r1, [r7, #8]
 8008864:	607a      	str	r2, [r7, #4]
 8008866:	603b      	str	r3, [r7, #0]
 8008868:	4603      	mov	r3, r0
 800886a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800886c:	7bfb      	ldrb	r3, [r7, #15]
 800886e:	4a0a      	ldr	r2, [pc, #40]	; (8008898 <disk_write+0x3c>)
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	68dc      	ldr	r4, [r3, #12]
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	4a07      	ldr	r2, [pc, #28]	; (8008898 <disk_write+0x3c>)
 800887c:	4413      	add	r3, r2
 800887e:	7d18      	ldrb	r0, [r3, #20]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	68b9      	ldr	r1, [r7, #8]
 8008886:	47a0      	blx	r4
 8008888:	4603      	mov	r3, r0
 800888a:	75fb      	strb	r3, [r7, #23]
  return res;
 800888c:	7dfb      	ldrb	r3, [r7, #23]
}
 800888e:	4618      	mov	r0, r3
 8008890:	371c      	adds	r7, #28
 8008892:	46bd      	mov	sp, r7
 8008894:	bd90      	pop	{r4, r7, pc}
 8008896:	bf00      	nop
 8008898:	20002f80 	.word	0x20002f80

0800889c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4603      	mov	r3, r0
 80088a4:	603a      	str	r2, [r7, #0]
 80088a6:	71fb      	strb	r3, [r7, #7]
 80088a8:	460b      	mov	r3, r1
 80088aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80088ac:	79fb      	ldrb	r3, [r7, #7]
 80088ae:	4a09      	ldr	r2, [pc, #36]	; (80088d4 <disk_ioctl+0x38>)
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	79fa      	ldrb	r2, [r7, #7]
 80088ba:	4906      	ldr	r1, [pc, #24]	; (80088d4 <disk_ioctl+0x38>)
 80088bc:	440a      	add	r2, r1
 80088be:	7d10      	ldrb	r0, [r2, #20]
 80088c0:	79b9      	ldrb	r1, [r7, #6]
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	4798      	blx	r3
 80088c6:	4603      	mov	r3, r0
 80088c8:	73fb      	strb	r3, [r7, #15]
  return res;
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	20002f80 	.word	0x20002f80

080088d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	3301      	adds	r3, #1
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80088e8:	89fb      	ldrh	r3, [r7, #14]
 80088ea:	021b      	lsls	r3, r3, #8
 80088ec:	b21a      	sxth	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	b21b      	sxth	r3, r3
 80088f4:	4313      	orrs	r3, r2
 80088f6:	b21b      	sxth	r3, r3
 80088f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80088fa:	89fb      	ldrh	r3, [r7, #14]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	bc80      	pop	{r7}
 8008904:	4770      	bx	lr

08008906 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008906:	b480      	push	{r7}
 8008908:	b085      	sub	sp, #20
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	3303      	adds	r3, #3
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	021b      	lsls	r3, r3, #8
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	3202      	adds	r2, #2
 800891e:	7812      	ldrb	r2, [r2, #0]
 8008920:	4313      	orrs	r3, r2
 8008922:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	021b      	lsls	r3, r3, #8
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	3201      	adds	r2, #1
 800892c:	7812      	ldrb	r2, [r2, #0]
 800892e:	4313      	orrs	r3, r2
 8008930:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	021b      	lsls	r3, r3, #8
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	7812      	ldrb	r2, [r2, #0]
 800893a:	4313      	orrs	r3, r2
 800893c:	60fb      	str	r3, [r7, #12]
	return rv;
 800893e:	68fb      	ldr	r3, [r7, #12]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	bc80      	pop	{r7}
 8008948:	4770      	bx	lr

0800894a <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800894a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800894e:	b09d      	sub	sp, #116	; 0x74
 8008950:	af00      	add	r7, sp, #0
 8008952:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 8008954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008956:	3307      	adds	r3, #7
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2200      	movs	r2, #0
 800895e:	469a      	mov	sl, r3
 8008960:	4693      	mov	fp, r2
 8008962:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 8008966:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800896a:	f04f 0000 	mov.w	r0, #0
 800896e:	f04f 0100 	mov.w	r1, #0
 8008972:	0219      	lsls	r1, r3, #8
 8008974:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008978:	0210      	lsls	r0, r2, #8
 800897a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800897c:	3306      	adds	r3, #6
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2200      	movs	r2, #0
 8008984:	461c      	mov	r4, r3
 8008986:	4615      	mov	r5, r2
 8008988:	ea40 0804 	orr.w	r8, r0, r4
 800898c:	ea41 0905 	orr.w	r9, r1, r5
 8008990:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 8008994:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008998:	f04f 0000 	mov.w	r0, #0
 800899c:	f04f 0100 	mov.w	r1, #0
 80089a0:	0219      	lsls	r1, r3, #8
 80089a2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80089a6:	0210      	lsls	r0, r2, #8
 80089a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089aa:	3305      	adds	r3, #5
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2200      	movs	r2, #0
 80089b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80089b4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80089b6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80089ba:	461a      	mov	r2, r3
 80089bc:	4302      	orrs	r2, r0
 80089be:	62ba      	str	r2, [r7, #40]	; 0x28
 80089c0:	4623      	mov	r3, r4
 80089c2:	430b      	orrs	r3, r1
 80089c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089c6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80089ca:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 80089ce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80089d2:	f04f 0000 	mov.w	r0, #0
 80089d6:	f04f 0100 	mov.w	r1, #0
 80089da:	0219      	lsls	r1, r3, #8
 80089dc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80089e0:	0210      	lsls	r0, r2, #8
 80089e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089e4:	3304      	adds	r3, #4
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2200      	movs	r2, #0
 80089ec:	653b      	str	r3, [r7, #80]	; 0x50
 80089ee:	657a      	str	r2, [r7, #84]	; 0x54
 80089f0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80089f4:	461a      	mov	r2, r3
 80089f6:	4302      	orrs	r2, r0
 80089f8:	623a      	str	r2, [r7, #32]
 80089fa:	4623      	mov	r3, r4
 80089fc:	430b      	orrs	r3, r1
 80089fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008a00:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008a04:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 8008a08:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008a0c:	f04f 0000 	mov.w	r0, #0
 8008a10:	f04f 0100 	mov.w	r1, #0
 8008a14:	0219      	lsls	r1, r3, #8
 8008a16:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008a1a:	0210      	lsls	r0, r2, #8
 8008a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a1e:	3303      	adds	r3, #3
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	2200      	movs	r2, #0
 8008a26:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a28:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008a2a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8008a2e:	461a      	mov	r2, r3
 8008a30:	4302      	orrs	r2, r0
 8008a32:	61ba      	str	r2, [r7, #24]
 8008a34:	4623      	mov	r3, r4
 8008a36:	430b      	orrs	r3, r1
 8008a38:	61fb      	str	r3, [r7, #28]
 8008a3a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008a3e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 8008a42:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008a46:	f04f 0000 	mov.w	r0, #0
 8008a4a:	f04f 0100 	mov.w	r1, #0
 8008a4e:	0219      	lsls	r1, r3, #8
 8008a50:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008a54:	0210      	lsls	r0, r2, #8
 8008a56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a58:	3302      	adds	r3, #2
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	2200      	movs	r2, #0
 8008a60:	643b      	str	r3, [r7, #64]	; 0x40
 8008a62:	647a      	str	r2, [r7, #68]	; 0x44
 8008a64:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8008a68:	461a      	mov	r2, r3
 8008a6a:	4302      	orrs	r2, r0
 8008a6c:	613a      	str	r2, [r7, #16]
 8008a6e:	4623      	mov	r3, r4
 8008a70:	430b      	orrs	r3, r1
 8008a72:	617b      	str	r3, [r7, #20]
 8008a74:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008a78:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 8008a7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008a80:	f04f 0200 	mov.w	r2, #0
 8008a84:	f04f 0300 	mov.w	r3, #0
 8008a88:	020b      	lsls	r3, r1, #8
 8008a8a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a8e:	0202      	lsls	r2, r0, #8
 8008a90:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008a92:	3101      	adds	r1, #1
 8008a94:	7809      	ldrb	r1, [r1, #0]
 8008a96:	b2c9      	uxtb	r1, r1
 8008a98:	2000      	movs	r0, #0
 8008a9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008a9c:	63f8      	str	r0, [r7, #60]	; 0x3c
 8008a9e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4314      	orrs	r4, r2
 8008aa6:	60bc      	str	r4, [r7, #8]
 8008aa8:	4319      	orrs	r1, r3
 8008aaa:	60f9      	str	r1, [r7, #12]
 8008aac:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008ab0:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 8008ab4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008ab8:	f04f 0200 	mov.w	r2, #0
 8008abc:	f04f 0300 	mov.w	r3, #0
 8008ac0:	020b      	lsls	r3, r1, #8
 8008ac2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ac6:	0202      	lsls	r2, r0, #8
 8008ac8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008aca:	7809      	ldrb	r1, [r1, #0]
 8008acc:	b2c9      	uxtb	r1, r1
 8008ace:	2000      	movs	r0, #0
 8008ad0:	6339      	str	r1, [r7, #48]	; 0x30
 8008ad2:	6378      	str	r0, [r7, #52]	; 0x34
 8008ad4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008ad8:	4604      	mov	r4, r0
 8008ada:	4314      	orrs	r4, r2
 8008adc:	603c      	str	r4, [r7, #0]
 8008ade:	4319      	orrs	r1, r3
 8008ae0:	6079      	str	r1, [r7, #4]
 8008ae2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008ae6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 8008aea:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 8008aee:	4610      	mov	r0, r2
 8008af0:	4619      	mov	r1, r3
 8008af2:	3774      	adds	r7, #116	; 0x74
 8008af4:	46bd      	mov	sp, r7
 8008af6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008afa:	4770      	bx	lr

08008afc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	1c5a      	adds	r2, r3, #1
 8008b0c:	607a      	str	r2, [r7, #4]
 8008b0e:	887a      	ldrh	r2, [r7, #2]
 8008b10:	b2d2      	uxtb	r2, r2
 8008b12:	701a      	strb	r2, [r3, #0]
 8008b14:	887b      	ldrh	r3, [r7, #2]
 8008b16:	0a1b      	lsrs	r3, r3, #8
 8008b18:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	1c5a      	adds	r2, r3, #1
 8008b1e:	607a      	str	r2, [r7, #4]
 8008b20:	887a      	ldrh	r2, [r7, #2]
 8008b22:	b2d2      	uxtb	r2, r2
 8008b24:	701a      	strb	r2, [r3, #0]
}
 8008b26:	bf00      	nop
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bc80      	pop	{r7}
 8008b2e:	4770      	bx	lr

08008b30 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	607a      	str	r2, [r7, #4]
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	b2d2      	uxtb	r2, r2
 8008b44:	701a      	strb	r2, [r3, #0]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	0a1b      	lsrs	r3, r3, #8
 8008b4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	1c5a      	adds	r2, r3, #1
 8008b50:	607a      	str	r2, [r7, #4]
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	b2d2      	uxtb	r2, r2
 8008b56:	701a      	strb	r2, [r3, #0]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	0a1b      	lsrs	r3, r3, #8
 8008b5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	1c5a      	adds	r2, r3, #1
 8008b62:	607a      	str	r2, [r7, #4]
 8008b64:	683a      	ldr	r2, [r7, #0]
 8008b66:	b2d2      	uxtb	r2, r2
 8008b68:	701a      	strb	r2, [r3, #0]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	0a1b      	lsrs	r3, r3, #8
 8008b6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	1c5a      	adds	r2, r3, #1
 8008b74:	607a      	str	r2, [r7, #4]
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	b2d2      	uxtb	r2, r2
 8008b7a:	701a      	strb	r2, [r3, #0]
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bc80      	pop	{r7}
 8008b84:	4770      	bx	lr

08008b86 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8008b86:	b480      	push	{r7}
 8008b88:	b085      	sub	sp, #20
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	60f8      	str	r0, [r7, #12]
 8008b8e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	1c5a      	adds	r2, r3, #1
 8008b96:	60fa      	str	r2, [r7, #12]
 8008b98:	783a      	ldrb	r2, [r7, #0]
 8008b9a:	701a      	strb	r2, [r3, #0]
 8008b9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ba0:	f04f 0200 	mov.w	r2, #0
 8008ba4:	f04f 0300 	mov.w	r3, #0
 8008ba8:	0a02      	lsrs	r2, r0, #8
 8008baa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008bae:	0a0b      	lsrs	r3, r1, #8
 8008bb0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	1c5a      	adds	r2, r3, #1
 8008bb8:	60fa      	str	r2, [r7, #12]
 8008bba:	783a      	ldrb	r2, [r7, #0]
 8008bbc:	701a      	strb	r2, [r3, #0]
 8008bbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bc2:	f04f 0200 	mov.w	r2, #0
 8008bc6:	f04f 0300 	mov.w	r3, #0
 8008bca:	0a02      	lsrs	r2, r0, #8
 8008bcc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008bd0:	0a0b      	lsrs	r3, r1, #8
 8008bd2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	60fa      	str	r2, [r7, #12]
 8008bdc:	783a      	ldrb	r2, [r7, #0]
 8008bde:	701a      	strb	r2, [r3, #0]
 8008be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008be4:	f04f 0200 	mov.w	r2, #0
 8008be8:	f04f 0300 	mov.w	r3, #0
 8008bec:	0a02      	lsrs	r2, r0, #8
 8008bee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008bf2:	0a0b      	lsrs	r3, r1, #8
 8008bf4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	1c5a      	adds	r2, r3, #1
 8008bfc:	60fa      	str	r2, [r7, #12]
 8008bfe:	783a      	ldrb	r2, [r7, #0]
 8008c00:	701a      	strb	r2, [r3, #0]
 8008c02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c06:	f04f 0200 	mov.w	r2, #0
 8008c0a:	f04f 0300 	mov.w	r3, #0
 8008c0e:	0a02      	lsrs	r2, r0, #8
 8008c10:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008c14:	0a0b      	lsrs	r3, r1, #8
 8008c16:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	1c5a      	adds	r2, r3, #1
 8008c1e:	60fa      	str	r2, [r7, #12]
 8008c20:	783a      	ldrb	r2, [r7, #0]
 8008c22:	701a      	strb	r2, [r3, #0]
 8008c24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c28:	f04f 0200 	mov.w	r2, #0
 8008c2c:	f04f 0300 	mov.w	r3, #0
 8008c30:	0a02      	lsrs	r2, r0, #8
 8008c32:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008c36:	0a0b      	lsrs	r3, r1, #8
 8008c38:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	1c5a      	adds	r2, r3, #1
 8008c40:	60fa      	str	r2, [r7, #12]
 8008c42:	783a      	ldrb	r2, [r7, #0]
 8008c44:	701a      	strb	r2, [r3, #0]
 8008c46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c4a:	f04f 0200 	mov.w	r2, #0
 8008c4e:	f04f 0300 	mov.w	r3, #0
 8008c52:	0a02      	lsrs	r2, r0, #8
 8008c54:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008c58:	0a0b      	lsrs	r3, r1, #8
 8008c5a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	1c5a      	adds	r2, r3, #1
 8008c62:	60fa      	str	r2, [r7, #12]
 8008c64:	783a      	ldrb	r2, [r7, #0]
 8008c66:	701a      	strb	r2, [r3, #0]
 8008c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c6c:	f04f 0200 	mov.w	r2, #0
 8008c70:	f04f 0300 	mov.w	r3, #0
 8008c74:	0a02      	lsrs	r2, r0, #8
 8008c76:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008c7a:	0a0b      	lsrs	r3, r1, #8
 8008c7c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	60fa      	str	r2, [r7, #12]
 8008c86:	783a      	ldrb	r2, [r7, #0]
 8008c88:	701a      	strb	r2, [r3, #0]
}
 8008c8a:	bf00      	nop
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bc80      	pop	{r7}
 8008c92:	4770      	bx	lr

08008c94 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008c94:	b480      	push	{r7}
 8008c96:	b087      	sub	sp, #28
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00d      	beq.n	8008cca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	1c53      	adds	r3, r2, #1
 8008cb2:	613b      	str	r3, [r7, #16]
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	1c59      	adds	r1, r3, #1
 8008cb8:	6179      	str	r1, [r7, #20]
 8008cba:	7812      	ldrb	r2, [r2, #0]
 8008cbc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	607b      	str	r3, [r7, #4]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1f1      	bne.n	8008cae <mem_cpy+0x1a>
	}
}
 8008cca:	bf00      	nop
 8008ccc:	371c      	adds	r7, #28
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bc80      	pop	{r7}
 8008cd2:	4770      	bx	lr

08008cd4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008cd4:	b480      	push	{r7}
 8008cd6:	b087      	sub	sp, #28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	1c5a      	adds	r2, r3, #1
 8008ce8:	617a      	str	r2, [r7, #20]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	b2d2      	uxtb	r2, r2
 8008cee:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	607b      	str	r3, [r7, #4]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1f3      	bne.n	8008ce4 <mem_set+0x10>
}
 8008cfc:	bf00      	nop
 8008cfe:	bf00      	nop
 8008d00:	371c      	adds	r7, #28
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bc80      	pop	{r7}
 8008d06:	4770      	bx	lr

08008d08 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008d08:	b480      	push	{r7}
 8008d0a:	b089      	sub	sp, #36	; 0x24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	61fb      	str	r3, [r7, #28]
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	1c5a      	adds	r2, r3, #1
 8008d24:	61fa      	str	r2, [r7, #28]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	1c5a      	adds	r2, r3, #1
 8008d2e:	61ba      	str	r2, [r7, #24]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	1acb      	subs	r3, r1, r3
 8008d34:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	607b      	str	r3, [r7, #4]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d002      	beq.n	8008d48 <mem_cmp+0x40>
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d0eb      	beq.n	8008d20 <mem_cmp+0x18>

	return r;
 8008d48:	697b      	ldr	r3, [r7, #20]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3724      	adds	r7, #36	; 0x24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bc80      	pop	{r7}
 8008d52:	4770      	bx	lr

08008d54 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008d5e:	e002      	b.n	8008d66 <chk_chr+0x12>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3301      	adds	r3, #1
 8008d64:	607b      	str	r3, [r7, #4]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d005      	beq.n	8008d7a <chk_chr+0x26>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	461a      	mov	r2, r3
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d1f2      	bne.n	8008d60 <chk_chr+0xc>
	return *str;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bc80      	pop	{r7}
 8008d86:	4770      	bx	lr

08008d88 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008d92:	2300      	movs	r3, #0
 8008d94:	60bb      	str	r3, [r7, #8]
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	60fb      	str	r3, [r7, #12]
 8008d9a:	e029      	b.n	8008df0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008d9c:	4a26      	ldr	r2, [pc, #152]	; (8008e38 <chk_lock+0xb0>)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	011b      	lsls	r3, r3, #4
 8008da2:	4413      	add	r3, r2
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d01d      	beq.n	8008de6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008daa:	4a23      	ldr	r2, [pc, #140]	; (8008e38 <chk_lock+0xb0>)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	011b      	lsls	r3, r3, #4
 8008db0:	4413      	add	r3, r2
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d116      	bne.n	8008dea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008dbc:	4a1e      	ldr	r2, [pc, #120]	; (8008e38 <chk_lock+0xb0>)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	011b      	lsls	r3, r3, #4
 8008dc2:	4413      	add	r3, r2
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d10c      	bne.n	8008dea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008dd0:	4a19      	ldr	r2, [pc, #100]	; (8008e38 <chk_lock+0xb0>)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	011b      	lsls	r3, r3, #4
 8008dd6:	4413      	add	r3, r2
 8008dd8:	3308      	adds	r3, #8
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d102      	bne.n	8008dea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008de4:	e007      	b.n	8008df6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008de6:	2301      	movs	r3, #1
 8008de8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	3301      	adds	r3, #1
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d9d2      	bls.n	8008d9c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d109      	bne.n	8008e10 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d102      	bne.n	8008e08 <chk_lock+0x80>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d101      	bne.n	8008e0c <chk_lock+0x84>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	e010      	b.n	8008e2e <chk_lock+0xa6>
 8008e0c:	2312      	movs	r3, #18
 8008e0e:	e00e      	b.n	8008e2e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d108      	bne.n	8008e28 <chk_lock+0xa0>
 8008e16:	4a08      	ldr	r2, [pc, #32]	; (8008e38 <chk_lock+0xb0>)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	011b      	lsls	r3, r3, #4
 8008e1c:	4413      	add	r3, r2
 8008e1e:	330c      	adds	r3, #12
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e26:	d101      	bne.n	8008e2c <chk_lock+0xa4>
 8008e28:	2310      	movs	r3, #16
 8008e2a:	e000      	b.n	8008e2e <chk_lock+0xa6>
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3714      	adds	r7, #20
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bc80      	pop	{r7}
 8008e36:	4770      	bx	lr
 8008e38:	20002b00 	.word	0x20002b00

08008e3c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008e42:	2300      	movs	r3, #0
 8008e44:	607b      	str	r3, [r7, #4]
 8008e46:	e002      	b.n	8008e4e <enq_lock+0x12>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	607b      	str	r3, [r7, #4]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d806      	bhi.n	8008e62 <enq_lock+0x26>
 8008e54:	4a08      	ldr	r2, [pc, #32]	; (8008e78 <enq_lock+0x3c>)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	011b      	lsls	r3, r3, #4
 8008e5a:	4413      	add	r3, r2
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1f2      	bne.n	8008e48 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	bf14      	ite	ne
 8008e68:	2301      	movne	r3, #1
 8008e6a:	2300      	moveq	r3, #0
 8008e6c:	b2db      	uxtb	r3, r3
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	370c      	adds	r7, #12
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bc80      	pop	{r7}
 8008e76:	4770      	bx	lr
 8008e78:	20002b00 	.word	0x20002b00

08008e7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008e86:	2300      	movs	r3, #0
 8008e88:	60fb      	str	r3, [r7, #12]
 8008e8a:	e01f      	b.n	8008ecc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008e8c:	4a41      	ldr	r2, [pc, #260]	; (8008f94 <inc_lock+0x118>)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	011b      	lsls	r3, r3, #4
 8008e92:	4413      	add	r3, r2
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d113      	bne.n	8008ec6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008e9e:	4a3d      	ldr	r2, [pc, #244]	; (8008f94 <inc_lock+0x118>)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	011b      	lsls	r3, r3, #4
 8008ea4:	4413      	add	r3, r2
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d109      	bne.n	8008ec6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008eb2:	4a38      	ldr	r2, [pc, #224]	; (8008f94 <inc_lock+0x118>)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	011b      	lsls	r3, r3, #4
 8008eb8:	4413      	add	r3, r2
 8008eba:	3308      	adds	r3, #8
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d006      	beq.n	8008ed4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d9dc      	bls.n	8008e8c <inc_lock+0x10>
 8008ed2:	e000      	b.n	8008ed6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008ed4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d132      	bne.n	8008f42 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008edc:	2300      	movs	r3, #0
 8008ede:	60fb      	str	r3, [r7, #12]
 8008ee0:	e002      	b.n	8008ee8 <inc_lock+0x6c>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	60fb      	str	r3, [r7, #12]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d806      	bhi.n	8008efc <inc_lock+0x80>
 8008eee:	4a29      	ldr	r2, [pc, #164]	; (8008f94 <inc_lock+0x118>)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	011b      	lsls	r3, r3, #4
 8008ef4:	4413      	add	r3, r2
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1f2      	bne.n	8008ee2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d101      	bne.n	8008f06 <inc_lock+0x8a>
 8008f02:	2300      	movs	r3, #0
 8008f04:	e040      	b.n	8008f88 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	4922      	ldr	r1, [pc, #136]	; (8008f94 <inc_lock+0x118>)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	011b      	lsls	r3, r3, #4
 8008f10:	440b      	add	r3, r1
 8008f12:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	689a      	ldr	r2, [r3, #8]
 8008f18:	491e      	ldr	r1, [pc, #120]	; (8008f94 <inc_lock+0x118>)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	011b      	lsls	r3, r3, #4
 8008f1e:	440b      	add	r3, r1
 8008f20:	3304      	adds	r3, #4
 8008f22:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f28:	491a      	ldr	r1, [pc, #104]	; (8008f94 <inc_lock+0x118>)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	011b      	lsls	r3, r3, #4
 8008f2e:	440b      	add	r3, r1
 8008f30:	3308      	adds	r3, #8
 8008f32:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008f34:	4a17      	ldr	r2, [pc, #92]	; (8008f94 <inc_lock+0x118>)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	011b      	lsls	r3, r3, #4
 8008f3a:	4413      	add	r3, r2
 8008f3c:	330c      	adds	r3, #12
 8008f3e:	2200      	movs	r2, #0
 8008f40:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d009      	beq.n	8008f5c <inc_lock+0xe0>
 8008f48:	4a12      	ldr	r2, [pc, #72]	; (8008f94 <inc_lock+0x118>)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	011b      	lsls	r3, r3, #4
 8008f4e:	4413      	add	r3, r2
 8008f50:	330c      	adds	r3, #12
 8008f52:	881b      	ldrh	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <inc_lock+0xe0>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	e015      	b.n	8008f88 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d108      	bne.n	8008f74 <inc_lock+0xf8>
 8008f62:	4a0c      	ldr	r2, [pc, #48]	; (8008f94 <inc_lock+0x118>)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	011b      	lsls	r3, r3, #4
 8008f68:	4413      	add	r3, r2
 8008f6a:	330c      	adds	r3, #12
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	e001      	b.n	8008f78 <inc_lock+0xfc>
 8008f74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f78:	4906      	ldr	r1, [pc, #24]	; (8008f94 <inc_lock+0x118>)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	011b      	lsls	r3, r3, #4
 8008f7e:	440b      	add	r3, r1
 8008f80:	330c      	adds	r3, #12
 8008f82:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	3301      	adds	r3, #1
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bc80      	pop	{r7}
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	20002b00 	.word	0x20002b00

08008f98 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	607b      	str	r3, [r7, #4]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d825      	bhi.n	8008ff8 <dec_lock+0x60>
		n = Files[i].ctr;
 8008fac:	4a16      	ldr	r2, [pc, #88]	; (8009008 <dec_lock+0x70>)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	011b      	lsls	r3, r3, #4
 8008fb2:	4413      	add	r3, r2
 8008fb4:	330c      	adds	r3, #12
 8008fb6:	881b      	ldrh	r3, [r3, #0]
 8008fb8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008fba:	89fb      	ldrh	r3, [r7, #14]
 8008fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fc0:	d101      	bne.n	8008fc6 <dec_lock+0x2e>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008fc6:	89fb      	ldrh	r3, [r7, #14]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d002      	beq.n	8008fd2 <dec_lock+0x3a>
 8008fcc:	89fb      	ldrh	r3, [r7, #14]
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008fd2:	4a0d      	ldr	r2, [pc, #52]	; (8009008 <dec_lock+0x70>)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	011b      	lsls	r3, r3, #4
 8008fd8:	4413      	add	r3, r2
 8008fda:	330c      	adds	r3, #12
 8008fdc:	89fa      	ldrh	r2, [r7, #14]
 8008fde:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008fe0:	89fb      	ldrh	r3, [r7, #14]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d105      	bne.n	8008ff2 <dec_lock+0x5a>
 8008fe6:	4a08      	ldr	r2, [pc, #32]	; (8009008 <dec_lock+0x70>)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	011b      	lsls	r3, r3, #4
 8008fec:	4413      	add	r3, r2
 8008fee:	2200      	movs	r2, #0
 8008ff0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	737b      	strb	r3, [r7, #13]
 8008ff6:	e001      	b.n	8008ffc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008ffc:	7b7b      	ldrb	r3, [r7, #13]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3714      	adds	r7, #20
 8009002:	46bd      	mov	sp, r7
 8009004:	bc80      	pop	{r7}
 8009006:	4770      	bx	lr
 8009008:	20002b00 	.word	0x20002b00

0800900c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009014:	2300      	movs	r3, #0
 8009016:	60fb      	str	r3, [r7, #12]
 8009018:	e010      	b.n	800903c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800901a:	4a0d      	ldr	r2, [pc, #52]	; (8009050 <clear_lock+0x44>)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	011b      	lsls	r3, r3, #4
 8009020:	4413      	add	r3, r2
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	429a      	cmp	r2, r3
 8009028:	d105      	bne.n	8009036 <clear_lock+0x2a>
 800902a:	4a09      	ldr	r2, [pc, #36]	; (8009050 <clear_lock+0x44>)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	4413      	add	r3, r2
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	3301      	adds	r3, #1
 800903a:	60fb      	str	r3, [r7, #12]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d9eb      	bls.n	800901a <clear_lock+0xe>
	}
}
 8009042:	bf00      	nop
 8009044:	bf00      	nop
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	bc80      	pop	{r7}
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	20002b00 	.word	0x20002b00

08009054 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	78db      	ldrb	r3, [r3, #3]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d034      	beq.n	80090d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800906c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	7858      	ldrb	r0, [r3, #1]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009078:	2301      	movs	r3, #1
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	f7ff fbee 	bl	800885c <disk_write>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d002      	beq.n	800908c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009086:	2301      	movs	r3, #1
 8009088:	73fb      	strb	r3, [r7, #15]
 800908a:	e022      	b.n	80090d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	1ad2      	subs	r2, r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a1b      	ldr	r3, [r3, #32]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d217      	bcs.n	80090d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	789b      	ldrb	r3, [r3, #2]
 80090a6:	613b      	str	r3, [r7, #16]
 80090a8:	e010      	b.n	80090cc <sync_window+0x78>
					wsect += fs->fsize;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	4413      	add	r3, r2
 80090b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	7858      	ldrb	r0, [r3, #1]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80090be:	2301      	movs	r3, #1
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	f7ff fbcb 	bl	800885c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	3b01      	subs	r3, #1
 80090ca:	613b      	str	r3, [r7, #16]
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d8eb      	bhi.n	80090aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3718      	adds	r7, #24
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d01b      	beq.n	800912c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7ff ffad 	bl	8009054 <sync_window>
 80090fa:	4603      	mov	r3, r0
 80090fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d113      	bne.n	800912c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	7858      	ldrb	r0, [r3, #1]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800910e:	2301      	movs	r3, #1
 8009110:	683a      	ldr	r2, [r7, #0]
 8009112:	f7ff fb83 	bl	800881c <disk_read>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d004      	beq.n	8009126 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800911c:	f04f 33ff 	mov.w	r3, #4294967295
 8009120:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009122:	2301      	movs	r3, #1
 8009124:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	683a      	ldr	r2, [r7, #0]
 800912a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800912c:	7bfb      	ldrb	r3, [r7, #15]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
	...

08009138 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7ff ff87 	bl	8009054 <sync_window>
 8009146:	4603      	mov	r3, r0
 8009148:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800914a:	7bfb      	ldrb	r3, [r7, #15]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d158      	bne.n	8009202 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	2b03      	cmp	r3, #3
 8009156:	d148      	bne.n	80091ea <sync_fs+0xb2>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	791b      	ldrb	r3, [r3, #4]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d144      	bne.n	80091ea <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3338      	adds	r3, #56	; 0x38
 8009164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009168:	2100      	movs	r1, #0
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff fdb2 	bl	8008cd4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3338      	adds	r3, #56	; 0x38
 8009174:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009178:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800917c:	4618      	mov	r0, r3
 800917e:	f7ff fcbd 	bl	8008afc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	3338      	adds	r3, #56	; 0x38
 8009186:	4921      	ldr	r1, [pc, #132]	; (800920c <sync_fs+0xd4>)
 8009188:	4618      	mov	r0, r3
 800918a:	f7ff fcd1 	bl	8008b30 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	3338      	adds	r3, #56	; 0x38
 8009192:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009196:	491e      	ldr	r1, [pc, #120]	; (8009210 <sync_fs+0xd8>)
 8009198:	4618      	mov	r0, r3
 800919a:	f7ff fcc9 	bl	8008b30 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	3338      	adds	r3, #56	; 0x38
 80091a2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	4619      	mov	r1, r3
 80091ac:	4610      	mov	r0, r2
 80091ae:	f7ff fcbf 	bl	8008b30 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	3338      	adds	r3, #56	; 0x38
 80091b6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	695b      	ldr	r3, [r3, #20]
 80091be:	4619      	mov	r1, r3
 80091c0:	4610      	mov	r0, r2
 80091c2:	f7ff fcb5 	bl	8008b30 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ca:	1c5a      	adds	r2, r3, #1
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	7858      	ldrb	r0, [r3, #1]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091de:	2301      	movs	r3, #1
 80091e0:	f7ff fb3c 	bl	800885c <disk_write>
			fs->fsi_flag = 0;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	785b      	ldrb	r3, [r3, #1]
 80091ee:	2200      	movs	r2, #0
 80091f0:	2100      	movs	r1, #0
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7ff fb52 	bl	800889c <disk_ioctl>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <sync_fs+0xca>
 80091fe:	2301      	movs	r3, #1
 8009200:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009202:	7bfb      	ldrb	r3, [r7, #15]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	41615252 	.word	0x41615252
 8009210:	61417272 	.word	0x61417272

08009214 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	3b02      	subs	r3, #2
 8009222:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	69db      	ldr	r3, [r3, #28]
 8009228:	3b02      	subs	r3, #2
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	429a      	cmp	r2, r3
 800922e:	d301      	bcc.n	8009234 <clust2sect+0x20>
 8009230:	2300      	movs	r3, #0
 8009232:	e008      	b.n	8009246 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	895b      	ldrh	r3, [r3, #10]
 8009238:	461a      	mov	r2, r3
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	fb03 f202 	mul.w	r2, r3, r2
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009244:	4413      	add	r3, r2
}
 8009246:	4618      	mov	r0, r3
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	bc80      	pop	{r7}
 800924e:	4770      	bx	lr

08009250 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800925a:	6879      	ldr	r1, [r7, #4]
 800925c:	6809      	ldr	r1, [r1, #0]
 800925e:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	2901      	cmp	r1, #1
 8009264:	d904      	bls.n	8009270 <get_fat+0x20>
 8009266:	69b9      	ldr	r1, [r7, #24]
 8009268:	69c9      	ldr	r1, [r1, #28]
 800926a:	6838      	ldr	r0, [r7, #0]
 800926c:	4288      	cmp	r0, r1
 800926e:	d302      	bcc.n	8009276 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009270:	2301      	movs	r3, #1
 8009272:	61fb      	str	r3, [r7, #28]
 8009274:	e101      	b.n	800947a <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009276:	f04f 31ff 	mov.w	r1, #4294967295
 800927a:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800927c:	69b9      	ldr	r1, [r7, #24]
 800927e:	7809      	ldrb	r1, [r1, #0]
 8009280:	3901      	subs	r1, #1
 8009282:	2903      	cmp	r1, #3
 8009284:	f200 80ed 	bhi.w	8009462 <get_fat+0x212>
 8009288:	a001      	add	r0, pc, #4	; (adr r0, 8009290 <get_fat+0x40>)
 800928a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800928e:	bf00      	nop
 8009290:	080092a1 	.word	0x080092a1
 8009294:	08009329 	.word	0x08009329
 8009298:	0800935f 	.word	0x0800935f
 800929c:	08009397 	.word	0x08009397
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	60fb      	str	r3, [r7, #12]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	085b      	lsrs	r3, r3, #1
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	4413      	add	r3, r2
 80092ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	0a5b      	lsrs	r3, r3, #9
 80092b6:	4413      	add	r3, r2
 80092b8:	4619      	mov	r1, r3
 80092ba:	69b8      	ldr	r0, [r7, #24]
 80092bc:	f7ff ff0e 	bl	80090dc <move_window>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f040 80d0 	bne.w	8009468 <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	1c5a      	adds	r2, r3, #1
 80092cc:	60fa      	str	r2, [r7, #12]
 80092ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092d2:	69ba      	ldr	r2, [r7, #24]
 80092d4:	4413      	add	r3, r2
 80092d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80092da:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	0a5b      	lsrs	r3, r3, #9
 80092e4:	4413      	add	r3, r2
 80092e6:	4619      	mov	r1, r3
 80092e8:	69b8      	ldr	r0, [r7, #24]
 80092ea:	f7ff fef7 	bl	80090dc <move_window>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f040 80bb 	bne.w	800946c <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092fc:	69ba      	ldr	r2, [r7, #24]
 80092fe:	4413      	add	r3, r2
 8009300:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009304:	021b      	lsls	r3, r3, #8
 8009306:	461a      	mov	r2, r3
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	4313      	orrs	r3, r2
 800930c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	f003 0301 	and.w	r3, r3, #1
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <get_fat+0xce>
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	091b      	lsrs	r3, r3, #4
 800931c:	e002      	b.n	8009324 <get_fat+0xd4>
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009324:	61fb      	str	r3, [r7, #28]
			break;
 8009326:	e0a8      	b.n	800947a <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	0a1b      	lsrs	r3, r3, #8
 8009330:	4413      	add	r3, r2
 8009332:	4619      	mov	r1, r3
 8009334:	69b8      	ldr	r0, [r7, #24]
 8009336:	f7ff fed1 	bl	80090dc <move_window>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	f040 8097 	bne.w	8009470 <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009350:	4413      	add	r3, r2
 8009352:	4618      	mov	r0, r3
 8009354:	f7ff fac0 	bl	80088d8 <ld_word>
 8009358:	4603      	mov	r3, r0
 800935a:	61fb      	str	r3, [r7, #28]
			break;
 800935c:	e08d      	b.n	800947a <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	09db      	lsrs	r3, r3, #7
 8009366:	4413      	add	r3, r2
 8009368:	4619      	mov	r1, r3
 800936a:	69b8      	ldr	r0, [r7, #24]
 800936c:	f7ff feb6 	bl	80090dc <move_window>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d17e      	bne.n	8009474 <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009384:	4413      	add	r3, r2
 8009386:	4618      	mov	r0, r3
 8009388:	f7ff fabd 	bl	8008906 <ld_dword>
 800938c:	4603      	mov	r3, r0
 800938e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009392:	61fb      	str	r3, [r7, #28]
			break;
 8009394:	e071      	b.n	800947a <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8009396:	6879      	ldr	r1, [r7, #4]
 8009398:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800939c:	4301      	orrs	r1, r0
 800939e:	d060      	beq.n	8009462 <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80093a0:	6879      	ldr	r1, [r7, #4]
 80093a2:	6889      	ldr	r1, [r1, #8]
 80093a4:	6838      	ldr	r0, [r7, #0]
 80093a6:	1a41      	subs	r1, r0, r1
 80093a8:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80093aa:	6879      	ldr	r1, [r7, #4]
 80093ac:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80093b0:	1e42      	subs	r2, r0, #1
 80093b2:	f141 33ff 	adc.w	r3, r1, #4294967295
 80093b6:	f04f 0000 	mov.w	r0, #0
 80093ba:	f04f 0100 	mov.w	r1, #0
 80093be:	0a50      	lsrs	r0, r2, #9
 80093c0:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80093c4:	0a59      	lsrs	r1, r3, #9
 80093c6:	4602      	mov	r2, r0
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	895b      	ldrh	r3, [r3, #10]
 80093cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80093d0:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	79db      	ldrb	r3, [r3, #7]
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d10e      	bne.n	80093f8 <get_fat+0x1a8>
					if (cofs <= clen) {
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d80a      	bhi.n	80093f8 <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d002      	beq.n	80093f0 <get_fat+0x1a0>
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	3301      	adds	r3, #1
 80093ee:	e001      	b.n	80093f4 <get_fat+0x1a4>
 80093f0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80093f4:	61fb      	str	r3, [r7, #28]
						break;
 80093f6:	e040      	b.n	800947a <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	79db      	ldrb	r3, [r3, #7]
 80093fc:	2b03      	cmp	r3, #3
 80093fe:	d108      	bne.n	8009412 <get_fat+0x1c2>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	429a      	cmp	r2, r3
 8009408:	d203      	bcs.n	8009412 <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	3301      	adds	r3, #1
 800940e:	61fb      	str	r3, [r7, #28]
					break;
 8009410:	e033      	b.n	800947a <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	79db      	ldrb	r3, [r3, #7]
 8009416:	2b02      	cmp	r3, #2
 8009418:	d023      	beq.n	8009462 <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d003      	beq.n	800942a <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8009422:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009426:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8009428:	e027      	b.n	800947a <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	09db      	lsrs	r3, r3, #7
 8009432:	4413      	add	r3, r2
 8009434:	4619      	mov	r1, r3
 8009436:	69b8      	ldr	r0, [r7, #24]
 8009438:	f7ff fe50 	bl	80090dc <move_window>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d11a      	bne.n	8009478 <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009450:	4413      	add	r3, r2
 8009452:	4618      	mov	r0, r3
 8009454:	f7ff fa57 	bl	8008906 <ld_dword>
 8009458:	4603      	mov	r3, r0
 800945a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800945e:	61fb      	str	r3, [r7, #28]
					break;
 8009460:	e00b      	b.n	800947a <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009462:	2301      	movs	r3, #1
 8009464:	61fb      	str	r3, [r7, #28]
 8009466:	e008      	b.n	800947a <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009468:	bf00      	nop
 800946a:	e006      	b.n	800947a <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800946c:	bf00      	nop
 800946e:	e004      	b.n	800947a <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009470:	bf00      	nop
 8009472:	e002      	b.n	800947a <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009474:	bf00      	nop
 8009476:	e000      	b.n	800947a <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009478:	bf00      	nop
		}
	}

	return val;
 800947a:	69fb      	ldr	r3, [r7, #28]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3720      	adds	r7, #32
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009484:	b590      	push	{r4, r7, lr}
 8009486:	b089      	sub	sp, #36	; 0x24
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009490:	2302      	movs	r3, #2
 8009492:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2b01      	cmp	r3, #1
 8009498:	f240 80d6 	bls.w	8009648 <put_fat+0x1c4>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	69db      	ldr	r3, [r3, #28]
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	f080 80d0 	bcs.w	8009648 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	2b04      	cmp	r3, #4
 80094ae:	f300 80d4 	bgt.w	800965a <put_fat+0x1d6>
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	f280 8093 	bge.w	80095de <put_fat+0x15a>
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d002      	beq.n	80094c2 <put_fat+0x3e>
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d06e      	beq.n	800959e <put_fat+0x11a>
 80094c0:	e0cb      	b.n	800965a <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	61bb      	str	r3, [r7, #24]
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	085b      	lsrs	r3, r3, #1
 80094ca:	69ba      	ldr	r2, [r7, #24]
 80094cc:	4413      	add	r3, r2
 80094ce:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	0a5b      	lsrs	r3, r3, #9
 80094d8:	4413      	add	r3, r2
 80094da:	4619      	mov	r1, r3
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f7ff fdfd 	bl	80090dc <move_window>
 80094e2:	4603      	mov	r3, r0
 80094e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094e6:	7ffb      	ldrb	r3, [r7, #31]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f040 80af 	bne.w	800964c <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	1c59      	adds	r1, r3, #1
 80094f8:	61b9      	str	r1, [r7, #24]
 80094fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094fe:	4413      	add	r3, r2
 8009500:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	f003 0301 	and.w	r3, r3, #1
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00d      	beq.n	8009528 <put_fat+0xa4>
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	b25b      	sxtb	r3, r3
 8009512:	f003 030f 	and.w	r3, r3, #15
 8009516:	b25a      	sxtb	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	b2db      	uxtb	r3, r3
 800951c:	011b      	lsls	r3, r3, #4
 800951e:	b25b      	sxtb	r3, r3
 8009520:	4313      	orrs	r3, r2
 8009522:	b25b      	sxtb	r3, r3
 8009524:	b2db      	uxtb	r3, r3
 8009526:	e001      	b.n	800952c <put_fat+0xa8>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	b2db      	uxtb	r3, r3
 800952c:	697a      	ldr	r2, [r7, #20]
 800952e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2201      	movs	r2, #1
 8009534:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	0a5b      	lsrs	r3, r3, #9
 800953e:	4413      	add	r3, r2
 8009540:	4619      	mov	r1, r3
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f7ff fdca 	bl	80090dc <move_window>
 8009548:	4603      	mov	r3, r0
 800954a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800954c:	7ffb      	ldrb	r3, [r7, #31]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d17e      	bne.n	8009650 <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800955e:	4413      	add	r3, r2
 8009560:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <put_fat+0xf0>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	091b      	lsrs	r3, r3, #4
 8009570:	b2db      	uxtb	r3, r3
 8009572:	e00e      	b.n	8009592 <put_fat+0x10e>
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	b25b      	sxtb	r3, r3
 800957a:	f023 030f 	bic.w	r3, r3, #15
 800957e:	b25a      	sxtb	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	0a1b      	lsrs	r3, r3, #8
 8009584:	b25b      	sxtb	r3, r3
 8009586:	f003 030f 	and.w	r3, r3, #15
 800958a:	b25b      	sxtb	r3, r3
 800958c:	4313      	orrs	r3, r2
 800958e:	b25b      	sxtb	r3, r3
 8009590:	b2db      	uxtb	r3, r3
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2201      	movs	r2, #1
 800959a:	70da      	strb	r2, [r3, #3]
			break;
 800959c:	e05d      	b.n	800965a <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	0a1b      	lsrs	r3, r3, #8
 80095a6:	4413      	add	r3, r2
 80095a8:	4619      	mov	r1, r3
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f7ff fd96 	bl	80090dc <move_window>
 80095b0:	4603      	mov	r3, r0
 80095b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80095b4:	7ffb      	ldrb	r3, [r7, #31]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d14c      	bne.n	8009654 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	005b      	lsls	r3, r3, #1
 80095c4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80095c8:	4413      	add	r3, r2
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	b292      	uxth	r2, r2
 80095ce:	4611      	mov	r1, r2
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7ff fa93 	bl	8008afc <st_word>
			fs->wflag = 1;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2201      	movs	r2, #1
 80095da:	70da      	strb	r2, [r3, #3]
			break;
 80095dc:	e03d      	b.n	800965a <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	09db      	lsrs	r3, r3, #7
 80095e6:	4413      	add	r3, r2
 80095e8:	4619      	mov	r1, r3
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f7ff fd76 	bl	80090dc <move_window>
 80095f0:	4603      	mov	r3, r0
 80095f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80095f4:	7ffb      	ldrb	r3, [r7, #31]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d12e      	bne.n	8009658 <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	2b04      	cmp	r3, #4
 8009600:	d012      	beq.n	8009628 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009616:	4413      	add	r3, r2
 8009618:	4618      	mov	r0, r3
 800961a:	f7ff f974 	bl	8008906 <ld_dword>
 800961e:	4603      	mov	r3, r0
 8009620:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009624:	4323      	orrs	r3, r4
 8009626:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009636:	4413      	add	r3, r2
 8009638:	6879      	ldr	r1, [r7, #4]
 800963a:	4618      	mov	r0, r3
 800963c:	f7ff fa78 	bl	8008b30 <st_dword>
			fs->wflag = 1;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2201      	movs	r2, #1
 8009644:	70da      	strb	r2, [r3, #3]
			break;
 8009646:	e008      	b.n	800965a <put_fat+0x1d6>
		}
	}
 8009648:	bf00      	nop
 800964a:	e006      	b.n	800965a <put_fat+0x1d6>
			if (res != FR_OK) break;
 800964c:	bf00      	nop
 800964e:	e004      	b.n	800965a <put_fat+0x1d6>
			if (res != FR_OK) break;
 8009650:	bf00      	nop
 8009652:	e002      	b.n	800965a <put_fat+0x1d6>
			if (res != FR_OK) break;
 8009654:	bf00      	nop
 8009656:	e000      	b.n	800965a <put_fat+0x1d6>
			if (res != FR_OK) break;
 8009658:	bf00      	nop
	return res;
 800965a:	7ffb      	ldrb	r3, [r7, #31]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3724      	adds	r7, #36	; 0x24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd90      	pop	{r4, r7, pc}

08009664 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b08a      	sub	sp, #40	; 0x28
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	3b02      	subs	r3, #2
 8009674:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	3b02      	subs	r3, #2
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	429a      	cmp	r2, r3
 8009680:	d301      	bcc.n	8009686 <find_bitmap+0x22>
 8009682:	2300      	movs	r3, #0
 8009684:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	61fb      	str	r3, [r7, #28]
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	61bb      	str	r3, [r7, #24]
 800968e:	2300      	movs	r3, #0
 8009690:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	0b1b      	lsrs	r3, r3, #12
 800969a:	4413      	add	r3, r2
 800969c:	4619      	mov	r1, r3
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f7ff fd1c 	bl	80090dc <move_window>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d002      	beq.n	80096b0 <find_bitmap+0x4c>
 80096aa:	f04f 33ff 	mov.w	r3, #4294967295
 80096ae:	e051      	b.n	8009754 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	08db      	lsrs	r3, r3, #3
 80096b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b8:	623b      	str	r3, [r7, #32]
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	f003 0307 	and.w	r3, r3, #7
 80096c0:	2201      	movs	r2, #1
 80096c2:	fa02 f303 	lsl.w	r3, r2, r3
 80096c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	4413      	add	r3, r2
 80096d0:	3338      	adds	r3, #56	; 0x38
 80096d2:	781a      	ldrb	r2, [r3, #0]
 80096d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096d8:	4013      	ands	r3, r2
 80096da:	74fb      	strb	r3, [r7, #19]
 80096dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096e0:	005b      	lsls	r3, r3, #1
 80096e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	3301      	adds	r3, #1
 80096ea:	61fb      	str	r3, [r7, #28]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	69db      	ldr	r3, [r3, #28]
 80096f0:	3b02      	subs	r3, #2
 80096f2:	69fa      	ldr	r2, [r7, #28]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d307      	bcc.n	8009708 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 80096f8:	2300      	movs	r3, #0
 80096fa:	61fb      	str	r3, [r7, #28]
 80096fc:	2300      	movs	r3, #0
 80096fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009702:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009706:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8009708:	7cfb      	ldrb	r3, [r7, #19]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d109      	bne.n	8009722 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	3301      	adds	r3, #1
 8009712:	617b      	str	r3, [r7, #20]
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	429a      	cmp	r2, r3
 800971a:	d106      	bne.n	800972a <find_bitmap+0xc6>
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	3302      	adds	r3, #2
 8009720:	e018      	b.n	8009754 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	61bb      	str	r3, [r7, #24]
 8009726:	2300      	movs	r3, #0
 8009728:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800972a:	69fa      	ldr	r2, [r7, #28]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	429a      	cmp	r2, r3
 8009730:	d101      	bne.n	8009736 <find_bitmap+0xd2>
 8009732:	2300      	movs	r3, #0
 8009734:	e00e      	b.n	8009754 <find_bitmap+0xf0>
			} while (bm);
 8009736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1c5      	bne.n	80096ca <find_bitmap+0x66>
			bm = 1;
 800973e:	2301      	movs	r3, #1
 8009740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8009744:	6a3b      	ldr	r3, [r7, #32]
 8009746:	3301      	adds	r3, #1
 8009748:	623b      	str	r3, [r7, #32]
 800974a:	6a3b      	ldr	r3, [r7, #32]
 800974c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009750:	d3bb      	bcc.n	80096ca <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8009752:	e79e      	b.n	8009692 <find_bitmap+0x2e>
	}
}
 8009754:	4618      	mov	r0, r3
 8009756:	3728      	adds	r7, #40	; 0x28
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b088      	sub	sp, #32
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	607a      	str	r2, [r7, #4]
 8009768:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	3b02      	subs	r3, #2
 800976e:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	0b1b      	lsrs	r3, r3, #12
 8009778:	4413      	add	r3, r2
 800977a:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	08db      	lsrs	r3, r3, #3
 8009780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009784:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	f003 0307 	and.w	r3, r3, #7
 800978c:	2201      	movs	r2, #1
 800978e:	fa02 f303 	lsl.w	r3, r2, r3
 8009792:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	1c5a      	adds	r2, r3, #1
 8009798:	617a      	str	r2, [r7, #20]
 800979a:	4619      	mov	r1, r3
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f7ff fc9d 	bl	80090dc <move_window>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d001      	beq.n	80097ac <change_bitmap+0x50>
 80097a8:	2301      	movs	r3, #1
 80097aa:	e03d      	b.n	8009828 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	4413      	add	r3, r2
 80097b2:	3338      	adds	r3, #56	; 0x38
 80097b4:	781a      	ldrb	r2, [r3, #0]
 80097b6:	7ffb      	ldrb	r3, [r7, #31]
 80097b8:	4013      	ands	r3, r2
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	2b00      	cmp	r3, #0
 80097be:	bf14      	ite	ne
 80097c0:	2301      	movne	r3, #1
 80097c2:	2300      	moveq	r3, #0
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	461a      	mov	r2, r3
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d101      	bne.n	80097d2 <change_bitmap+0x76>
 80097ce:	2302      	movs	r3, #2
 80097d0:	e02a      	b.n	8009828 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	4413      	add	r3, r2
 80097d8:	3338      	adds	r3, #56	; 0x38
 80097da:	781a      	ldrb	r2, [r3, #0]
 80097dc:	7ffb      	ldrb	r3, [r7, #31]
 80097de:	4053      	eors	r3, r2
 80097e0:	b2d9      	uxtb	r1, r3
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	4413      	add	r3, r2
 80097e8:	3338      	adds	r3, #56	; 0x38
 80097ea:	460a      	mov	r2, r1
 80097ec:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2201      	movs	r2, #1
 80097f2:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	3b01      	subs	r3, #1
 80097f8:	607b      	str	r3, [r7, #4]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d101      	bne.n	8009804 <change_bitmap+0xa8>
 8009800:	2300      	movs	r3, #0
 8009802:	e011      	b.n	8009828 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 8009804:	7ffb      	ldrb	r3, [r7, #31]
 8009806:	005b      	lsls	r3, r3, #1
 8009808:	77fb      	strb	r3, [r7, #31]
 800980a:	7ffb      	ldrb	r3, [r7, #31]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1cd      	bne.n	80097ac <change_bitmap+0x50>
			bm = 1;
 8009810:	2301      	movs	r3, #1
 8009812:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	3301      	adds	r3, #1
 8009818:	61bb      	str	r3, [r7, #24]
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009820:	d3c4      	bcc.n	80097ac <change_bitmap+0x50>
		i = 0;
 8009822:	2300      	movs	r3, #0
 8009824:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8009826:	e7b5      	b.n	8009794 <change_bitmap+0x38>
	}
}
 8009828:	4618      	mov	r0, r3
 800982a:	3720      	adds	r7, #32
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	79db      	ldrb	r3, [r3, #7]
 800983c:	2b03      	cmp	r3, #3
 800983e:	d121      	bne.n	8009884 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	617b      	str	r3, [r7, #20]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	613b      	str	r3, [r7, #16]
 800984c:	e014      	b.n	8009878 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6818      	ldr	r0, [r3, #0]
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	3301      	adds	r3, #1
 8009856:	461a      	mov	r2, r3
 8009858:	6979      	ldr	r1, [r7, #20]
 800985a:	f7ff fe13 	bl	8009484 <put_fat>
 800985e:	4603      	mov	r3, r0
 8009860:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8009862:	7bfb      	ldrb	r3, [r7, #15]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d001      	beq.n	800986c <fill_first_frag+0x3c>
 8009868:	7bfb      	ldrb	r3, [r7, #15]
 800986a:	e00c      	b.n	8009886 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	3301      	adds	r3, #1
 8009870:	617b      	str	r3, [r7, #20]
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	3b01      	subs	r3, #1
 8009876:	613b      	str	r3, [r7, #16]
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1e7      	bne.n	800984e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3718      	adds	r7, #24
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b086      	sub	sp, #24
 8009892:	af00      	add	r7, sp, #0
 8009894:	60f8      	str	r0, [r7, #12]
 8009896:	60b9      	str	r1, [r7, #8]
 8009898:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800989a:	e020      	b.n	80098de <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6818      	ldr	r0, [r3, #0]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	69db      	ldr	r3, [r3, #28]
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	1c59      	adds	r1, r3, #1
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	69db      	ldr	r3, [r3, #28]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d905      	bls.n	80098be <fill_last_frag+0x30>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	69db      	ldr	r3, [r3, #28]
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	3302      	adds	r3, #2
 80098bc:	e000      	b.n	80098c0 <fill_last_frag+0x32>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	461a      	mov	r2, r3
 80098c2:	f7ff fddf 	bl	8009484 <put_fat>
 80098c6:	4603      	mov	r3, r0
 80098c8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80098ca:	7dfb      	ldrb	r3, [r7, #23]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <fill_last_frag+0x46>
 80098d0:	7dfb      	ldrb	r3, [r7, #23]
 80098d2:	e009      	b.n	80098e8 <fill_last_frag+0x5a>
		obj->n_frag--;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	69db      	ldr	r3, [r3, #28]
 80098d8:	1e5a      	subs	r2, r3, #1
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	69db      	ldr	r3, [r3, #28]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1da      	bne.n	800989c <fill_last_frag+0xe>
	}
	return FR_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3718      	adds	r7, #24
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b08a      	sub	sp, #40	; 0x28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	627b      	str	r3, [r7, #36]	; 0x24
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d904      	bls.n	800991e <remove_chain+0x2e>
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	69db      	ldr	r3, [r3, #28]
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	429a      	cmp	r2, r3
 800991c:	d301      	bcc.n	8009922 <remove_chain+0x32>
 800991e:	2302      	movs	r3, #2
 8009920:	e096      	b.n	8009a50 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d014      	beq.n	8009952 <remove_chain+0x62>
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	2b04      	cmp	r3, #4
 800992e:	d103      	bne.n	8009938 <remove_chain+0x48>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	79db      	ldrb	r3, [r3, #7]
 8009934:	2b02      	cmp	r3, #2
 8009936:	d00c      	beq.n	8009952 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009938:	f04f 32ff 	mov.w	r2, #4294967295
 800993c:	6879      	ldr	r1, [r7, #4]
 800993e:	69b8      	ldr	r0, [r7, #24]
 8009940:	f7ff fda0 	bl	8009484 <put_fat>
 8009944:	4603      	mov	r3, r0
 8009946:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009948:	7ffb      	ldrb	r3, [r7, #31]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d001      	beq.n	8009952 <remove_chain+0x62>
 800994e:	7ffb      	ldrb	r3, [r7, #31]
 8009950:	e07e      	b.n	8009a50 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009952:	68b9      	ldr	r1, [r7, #8]
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f7ff fc7b 	bl	8009250 <get_fat>
 800995a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d055      	beq.n	8009a0e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d101      	bne.n	800996c <remove_chain+0x7c>
 8009968:	2302      	movs	r3, #2
 800996a:	e071      	b.n	8009a50 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009972:	d101      	bne.n	8009978 <remove_chain+0x88>
 8009974:	2301      	movs	r3, #1
 8009976:	e06b      	b.n	8009a50 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	2b04      	cmp	r3, #4
 800997e:	d00b      	beq.n	8009998 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009980:	2200      	movs	r2, #0
 8009982:	68b9      	ldr	r1, [r7, #8]
 8009984:	69b8      	ldr	r0, [r7, #24]
 8009986:	f7ff fd7d 	bl	8009484 <put_fat>
 800998a:	4603      	mov	r3, r0
 800998c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800998e:	7ffb      	ldrb	r3, [r7, #31]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <remove_chain+0xa8>
 8009994:	7ffb      	ldrb	r3, [r7, #31]
 8009996:	e05b      	b.n	8009a50 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	699a      	ldr	r2, [r3, #24]
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	3b02      	subs	r3, #2
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d20b      	bcs.n	80099be <remove_chain+0xce>
			fs->free_clst++;
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	699b      	ldr	r3, [r3, #24]
 80099aa:	1c5a      	adds	r2, r3, #1
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	791b      	ldrb	r3, [r3, #4]
 80099b4:	f043 0301 	orr.w	r3, r3, #1
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80099be:	6a3b      	ldr	r3, [r7, #32]
 80099c0:	3301      	adds	r3, #1
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d102      	bne.n	80099ce <remove_chain+0xde>
			ecl = nxt;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	623b      	str	r3, [r7, #32]
 80099cc:	e017      	b.n	80099fe <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	2b04      	cmp	r3, #4
 80099d4:	d10f      	bne.n	80099f6 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80099d6:	6a3a      	ldr	r2, [r7, #32]
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	1c5a      	adds	r2, r3, #1
 80099de:	2300      	movs	r3, #0
 80099e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099e2:	69b8      	ldr	r0, [r7, #24]
 80099e4:	f7ff feba 	bl	800975c <change_bitmap>
 80099e8:	4603      	mov	r3, r0
 80099ea:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 80099ec:	7ffb      	ldrb	r3, [r7, #31]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d001      	beq.n	80099f6 <remove_chain+0x106>
 80099f2:	7ffb      	ldrb	r3, [r7, #31]
 80099f4:	e02c      	b.n	8009a50 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	623b      	str	r3, [r7, #32]
 80099fa:	6a3b      	ldr	r3, [r7, #32]
 80099fc:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	69db      	ldr	r3, [r3, #28]
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d3a2      	bcc.n	8009952 <remove_chain+0x62>
 8009a0c:	e000      	b.n	8009a10 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8009a0e:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	2b04      	cmp	r3, #4
 8009a16:	d11a      	bne.n	8009a4e <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d103      	bne.n	8009a26 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	71da      	strb	r2, [r3, #7]
 8009a24:	e013      	b.n	8009a4e <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	79db      	ldrb	r3, [r3, #7]
 8009a2a:	2b03      	cmp	r3, #3
 8009a2c:	d10f      	bne.n	8009a4e <remove_chain+0x15e>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d30a      	bcc.n	8009a4e <remove_chain+0x15e>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	689a      	ldr	r2, [r3, #8]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	4413      	add	r3, r2
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d802      	bhi.n	8009a4e <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8009a4e:	2300      	movs	r3, #0
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3728      	adds	r7, #40	; 0x28
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b088      	sub	sp, #32
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d10d      	bne.n	8009a8a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d004      	beq.n	8009a84 <create_chain+0x2c>
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	69db      	ldr	r3, [r3, #28]
 8009a7e:	69ba      	ldr	r2, [r7, #24]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d31b      	bcc.n	8009abc <create_chain+0x64>
 8009a84:	2301      	movs	r3, #1
 8009a86:	61bb      	str	r3, [r7, #24]
 8009a88:	e018      	b.n	8009abc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7ff fbdf 	bl	8009250 <get_fat>
 8009a92:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d801      	bhi.n	8009a9e <create_chain+0x46>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e0d9      	b.n	8009c52 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa4:	d101      	bne.n	8009aaa <create_chain+0x52>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	e0d3      	b.n	8009c52 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	69db      	ldr	r3, [r3, #28]
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d201      	bcs.n	8009ab8 <create_chain+0x60>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	e0cc      	b.n	8009c52 <create_chain+0x1fa>
		scl = clst;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	2b04      	cmp	r3, #4
 8009ac2:	d164      	bne.n	8009b8e <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	69b9      	ldr	r1, [r7, #24]
 8009ac8:	6938      	ldr	r0, [r7, #16]
 8009aca:	f7ff fdcb 	bl	8009664 <find_bitmap>
 8009ace:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d003      	beq.n	8009ade <create_chain+0x86>
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009adc:	d101      	bne.n	8009ae2 <create_chain+0x8a>
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	e0b7      	b.n	8009c52 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	69f9      	ldr	r1, [r7, #28]
 8009ae8:	6938      	ldr	r0, [r7, #16]
 8009aea:	f7ff fe37 	bl	800975c <change_bitmap>
 8009aee:	4603      	mov	r3, r0
 8009af0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8009af2:	7dfb      	ldrb	r3, [r7, #23]
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	d101      	bne.n	8009afc <create_chain+0xa4>
 8009af8:	2301      	movs	r3, #1
 8009afa:	e0aa      	b.n	8009c52 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8009afc:	7dfb      	ldrb	r3, [r7, #23]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d102      	bne.n	8009b08 <create_chain+0xb0>
 8009b02:	f04f 33ff 	mov.w	r3, #4294967295
 8009b06:	e0a4      	b.n	8009c52 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d103      	bne.n	8009b16 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2202      	movs	r2, #2
 8009b12:	71da      	strb	r2, [r3, #7]
 8009b14:	e011      	b.n	8009b3a <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	79db      	ldrb	r3, [r3, #7]
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d10d      	bne.n	8009b3a <create_chain+0xe2>
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	3301      	adds	r3, #1
 8009b22:	69fa      	ldr	r2, [r7, #28]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d008      	beq.n	8009b3a <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	69ba      	ldr	r2, [r7, #24]
 8009b2e:	1ad2      	subs	r2, r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2203      	movs	r2, #3
 8009b38:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	79db      	ldrb	r3, [r3, #7]
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d064      	beq.n	8009c0c <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	3301      	adds	r3, #1
 8009b46:	69fa      	ldr	r2, [r7, #28]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d10b      	bne.n	8009b64 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	69db      	ldr	r3, [r3, #28]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d003      	beq.n	8009b5c <create_chain+0x104>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	69db      	ldr	r3, [r3, #28]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	e000      	b.n	8009b5e <create_chain+0x106>
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	61d3      	str	r3, [r2, #28]
 8009b62:	e053      	b.n	8009c0c <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d102      	bne.n	8009b72 <create_chain+0x11a>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8009b72:	69fa      	ldr	r2, [r7, #28]
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7ff fe89 	bl	800988e <fill_last_frag>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8009b80:	7dfb      	ldrb	r3, [r7, #23]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d142      	bne.n	8009c0c <create_chain+0x1b4>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	61da      	str	r2, [r3, #28]
 8009b8c:	e03e      	b.n	8009c0c <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	3301      	adds	r3, #1
 8009b96:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	69db      	ldr	r3, [r3, #28]
 8009b9c:	69fa      	ldr	r2, [r7, #28]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d307      	bcc.n	8009bb2 <create_chain+0x15a>
				ncl = 2;
 8009ba2:	2302      	movs	r3, #2
 8009ba4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009ba6:	69fa      	ldr	r2, [r7, #28]
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d901      	bls.n	8009bb2 <create_chain+0x15a>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	e04f      	b.n	8009c52 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009bb2:	69f9      	ldr	r1, [r7, #28]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7ff fb4b 	bl	8009250 <get_fat>
 8009bba:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00e      	beq.n	8009be0 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d003      	beq.n	8009bd0 <create_chain+0x178>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bce:	d101      	bne.n	8009bd4 <create_chain+0x17c>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	e03e      	b.n	8009c52 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8009bd4:	69fa      	ldr	r2, [r7, #28]
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d1da      	bne.n	8009b92 <create_chain+0x13a>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	e038      	b.n	8009c52 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8009be0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009be2:	f04f 32ff 	mov.w	r2, #4294967295
 8009be6:	69f9      	ldr	r1, [r7, #28]
 8009be8:	6938      	ldr	r0, [r7, #16]
 8009bea:	f7ff fc4b 	bl	8009484 <put_fat>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009bf2:	7dfb      	ldrb	r3, [r7, #23]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d109      	bne.n	8009c0c <create_chain+0x1b4>
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d006      	beq.n	8009c0c <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009bfe:	69fa      	ldr	r2, [r7, #28]
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	6938      	ldr	r0, [r7, #16]
 8009c04:	f7ff fc3e 	bl	8009484 <put_fat>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009c0c:	7dfb      	ldrb	r3, [r7, #23]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d116      	bne.n	8009c40 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	69fa      	ldr	r2, [r7, #28]
 8009c16:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	699a      	ldr	r2, [r3, #24]
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	69db      	ldr	r3, [r3, #28]
 8009c20:	3b02      	subs	r3, #2
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d804      	bhi.n	8009c30 <create_chain+0x1d8>
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	1e5a      	subs	r2, r3, #1
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	791b      	ldrb	r3, [r3, #4]
 8009c34:	f043 0301 	orr.w	r3, r3, #1
 8009c38:	b2da      	uxtb	r2, r3
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	711a      	strb	r2, [r3, #4]
 8009c3e:	e007      	b.n	8009c50 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009c40:	7dfb      	ldrb	r3, [r7, #23]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d102      	bne.n	8009c4c <create_chain+0x1f4>
 8009c46:	f04f 33ff 	mov.w	r3, #4294967295
 8009c4a:	e000      	b.n	8009c4e <create_chain+0x1f6>
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009c50:	69fb      	ldr	r3, [r7, #28]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3720      	adds	r7, #32
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009c5a:	b5b0      	push	{r4, r5, r7, lr}
 8009c5c:	b088      	sub	sp, #32
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c70:	3304      	adds	r3, #4
 8009c72:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c78:	f04f 0000 	mov.w	r0, #0
 8009c7c:	f04f 0100 	mov.w	r1, #0
 8009c80:	0a50      	lsrs	r0, r2, #9
 8009c82:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8009c86:	0a59      	lsrs	r1, r3, #9
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	895b      	ldrh	r3, [r3, #10]
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	2200      	movs	r2, #0
 8009c90:	461c      	mov	r4, r3
 8009c92:	4615      	mov	r5, r2
 8009c94:	4622      	mov	r2, r4
 8009c96:	462b      	mov	r3, r5
 8009c98:	f7f7 f83a 	bl	8000d10 <__aeabi_uldivmod>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	1d1a      	adds	r2, r3, #4
 8009ca8:	61ba      	str	r2, [r7, #24]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d101      	bne.n	8009cb8 <clmt_clust+0x5e>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	e010      	b.n	8009cda <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 8009cb8:	69fa      	ldr	r2, [r7, #28]
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d307      	bcc.n	8009cd0 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 8009cc0:	69fa      	ldr	r2, [r7, #28]
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	61fb      	str	r3, [r7, #28]
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	3304      	adds	r3, #4
 8009ccc:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009cce:	e7e9      	b.n	8009ca4 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 8009cd0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	4413      	add	r3, r2
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3720      	adds	r7, #32
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bdb0      	pop	{r4, r5, r7, pc}

08009ce2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b086      	sub	sp, #24
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	2b04      	cmp	r3, #4
 8009cf8:	d102      	bne.n	8009d00 <dir_sdi+0x1e>
 8009cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cfe:	e001      	b.n	8009d04 <dir_sdi+0x22>
 8009d00:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d904      	bls.n	8009d14 <dir_sdi+0x32>
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	f003 031f 	and.w	r3, r3, #31
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <dir_sdi+0x36>
		return FR_INT_ERR;
 8009d14:	2302      	movs	r3, #2
 8009d16:	e066      	b.n	8009de6 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	683a      	ldr	r2, [r7, #0]
 8009d1c:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d109      	bne.n	8009d3e <dir_sdi+0x5c>
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d905      	bls.n	8009d3e <dir_sdi+0x5c>
		clst = fs->dirbase;
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d36:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d10c      	bne.n	8009d5e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	095b      	lsrs	r3, r3, #5
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	8912      	ldrh	r2, [r2, #8]
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d301      	bcc.n	8009d54 <dir_sdi+0x72>
 8009d50:	2302      	movs	r3, #2
 8009d52:	e048      	b.n	8009de6 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	639a      	str	r2, [r3, #56]	; 0x38
 8009d5c:	e029      	b.n	8009db2 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	895b      	ldrh	r3, [r3, #10]
 8009d62:	025b      	lsls	r3, r3, #9
 8009d64:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009d66:	e019      	b.n	8009d9c <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6979      	ldr	r1, [r7, #20]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7ff fa6f 	bl	8009250 <get_fat>
 8009d72:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d7a:	d101      	bne.n	8009d80 <dir_sdi+0x9e>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e032      	b.n	8009de6 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d904      	bls.n	8009d90 <dir_sdi+0xae>
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	69db      	ldr	r3, [r3, #28]
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d301      	bcc.n	8009d94 <dir_sdi+0xb2>
 8009d90:	2302      	movs	r3, #2
 8009d92:	e028      	b.n	8009de6 <dir_sdi+0x104>
			ofs -= csz;
 8009d94:	683a      	ldr	r2, [r7, #0]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009d9c:	683a      	ldr	r2, [r7, #0]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d2e1      	bcs.n	8009d68 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 8009da4:	6979      	ldr	r1, [r7, #20]
 8009da6:	6938      	ldr	r0, [r7, #16]
 8009da8:	f7ff fa34 	bl	8009214 <clust2sect>
 8009dac:	4602      	mov	r2, r0
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d101      	bne.n	8009dc4 <dir_sdi+0xe2>
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	e010      	b.n	8009de6 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	0a5b      	lsrs	r3, r3, #9
 8009dcc:	441a      	add	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dde:	441a      	add	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3718      	adds	r7, #24
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b086      	sub	sp, #24
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e02:	3320      	adds	r3, #32
 8009e04:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00b      	beq.n	8009e26 <dir_next+0x38>
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	2b04      	cmp	r3, #4
 8009e14:	d102      	bne.n	8009e1c <dir_next+0x2e>
 8009e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e1a:	e001      	b.n	8009e20 <dir_next+0x32>
 8009e1c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d801      	bhi.n	8009e2a <dir_next+0x3c>
 8009e26:	2304      	movs	r3, #4
 8009e28:	e0b2      	b.n	8009f90 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f040 80a0 	bne.w	8009f76 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e3a:	1c5a      	adds	r2, r3, #1
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10b      	bne.n	8009e60 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	095b      	lsrs	r3, r3, #5
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	8912      	ldrh	r2, [r2, #8]
 8009e50:	4293      	cmp	r3, r2
 8009e52:	f0c0 8090 	bcc.w	8009f76 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	639a      	str	r2, [r3, #56]	; 0x38
 8009e5c:	2304      	movs	r3, #4
 8009e5e:	e097      	b.n	8009f90 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	0a5b      	lsrs	r3, r3, #9
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	8952      	ldrh	r2, [r2, #10]
 8009e68:	3a01      	subs	r2, #1
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f040 8082 	bne.w	8009f76 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e78:	4619      	mov	r1, r3
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	f7ff f9e8 	bl	8009250 <get_fat>
 8009e80:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d801      	bhi.n	8009e8c <dir_next+0x9e>
 8009e88:	2302      	movs	r3, #2
 8009e8a:	e081      	b.n	8009f90 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e92:	d101      	bne.n	8009e98 <dir_next+0xaa>
 8009e94:	2301      	movs	r3, #1
 8009e96:	e07b      	b.n	8009f90 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	69db      	ldr	r3, [r3, #28]
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d35f      	bcc.n	8009f62 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d104      	bne.n	8009eb2 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	639a      	str	r2, [r3, #56]	; 0x38
 8009eae:	2304      	movs	r3, #4
 8009eb0:	e06e      	b.n	8009f90 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb8:	4619      	mov	r1, r3
 8009eba:	4610      	mov	r0, r2
 8009ebc:	f7ff fdcc 	bl	8009a58 <create_chain>
 8009ec0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d101      	bne.n	8009ecc <dir_next+0xde>
 8009ec8:	2307      	movs	r3, #7
 8009eca:	e061      	b.n	8009f90 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d101      	bne.n	8009ed6 <dir_next+0xe8>
 8009ed2:	2302      	movs	r3, #2
 8009ed4:	e05c      	b.n	8009f90 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009edc:	d101      	bne.n	8009ee2 <dir_next+0xf4>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e056      	b.n	8009f90 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	79db      	ldrb	r3, [r3, #7]
 8009ee6:	f043 0304 	orr.w	r3, r3, #4
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f7ff f8af 	bl	8009054 <sync_window>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <dir_next+0x112>
 8009efc:	2301      	movs	r3, #1
 8009efe:	e047      	b.n	8009f90 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	3338      	adds	r3, #56	; 0x38
 8009f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f08:	2100      	movs	r1, #0
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe fee2 	bl	8008cd4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009f10:	2300      	movs	r3, #0
 8009f12:	613b      	str	r3, [r7, #16]
 8009f14:	6979      	ldr	r1, [r7, #20]
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f7ff f97c 	bl	8009214 <clust2sect>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	635a      	str	r2, [r3, #52]	; 0x34
 8009f22:	e012      	b.n	8009f4a <dir_next+0x15c>
						fs->wflag = 1;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2201      	movs	r2, #1
 8009f28:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f7ff f892 	bl	8009054 <sync_window>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <dir_next+0x14c>
 8009f36:	2301      	movs	r3, #1
 8009f38:	e02a      	b.n	8009f90 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	613b      	str	r3, [r7, #16]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f44:	1c5a      	adds	r2, r3, #1
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	635a      	str	r2, [r3, #52]	; 0x34
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	895b      	ldrh	r3, [r3, #10]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d3e6      	bcc.n	8009f24 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	1ad2      	subs	r2, r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8009f68:	6979      	ldr	r1, [r7, #20]
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f7ff f952 	bl	8009214 <clust2sect>
 8009f70:	4602      	mov	r2, r0
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f88:	441a      	add	r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3718      	adds	r7, #24
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b086      	sub	sp, #24
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009fa8:	2100      	movs	r1, #0
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f7ff fe99 	bl	8009ce2 <dir_sdi>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009fb4:	7dfb      	ldrb	r3, [r7, #23]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d140      	bne.n	800a03c <dir_alloc+0xa4>
		n = 0;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f7ff f889 	bl	80090dc <move_window>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009fce:	7dfb      	ldrb	r3, [r7, #23]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d132      	bne.n	800a03a <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	2b04      	cmp	r3, #4
 8009fda:	d108      	bne.n	8009fee <dir_alloc+0x56>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	b25b      	sxtb	r3, r3
 8009fe4:	43db      	mvns	r3, r3
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	09db      	lsrs	r3, r3, #7
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	e00f      	b.n	800a00e <dir_alloc+0x76>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	2be5      	cmp	r3, #229	; 0xe5
 8009ff6:	d004      	beq.n	800a002 <dir_alloc+0x6a>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <dir_alloc+0x6e>
 800a002:	2301      	movs	r3, #1
 800a004:	e000      	b.n	800a008 <dir_alloc+0x70>
 800a006:	2300      	movs	r3, #0
 800a008:	f003 0301 	and.w	r3, r3, #1
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d007      	beq.n	800a022 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	3301      	adds	r3, #1
 800a016:	613b      	str	r3, [r7, #16]
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d102      	bne.n	800a026 <dir_alloc+0x8e>
 800a020:	e00c      	b.n	800a03c <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a022:	2300      	movs	r3, #0
 800a024:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a026:	2101      	movs	r1, #1
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f7ff fee0 	bl	8009dee <dir_next>
 800a02e:	4603      	mov	r3, r0
 800a030:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a032:	7dfb      	ldrb	r3, [r7, #23]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d0c2      	beq.n	8009fbe <dir_alloc+0x26>
 800a038:	e000      	b.n	800a03c <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800a03a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a03c:	7dfb      	ldrb	r3, [r7, #23]
 800a03e:	2b04      	cmp	r3, #4
 800a040:	d101      	bne.n	800a046 <dir_alloc+0xae>
 800a042:	2307      	movs	r3, #7
 800a044:	75fb      	strb	r3, [r7, #23]
	return res;
 800a046:	7dfb      	ldrb	r3, [r7, #23]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3718      	adds	r7, #24
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	331a      	adds	r3, #26
 800a05e:	4618      	mov	r0, r3
 800a060:	f7fe fc3a 	bl	80088d8 <ld_word>
 800a064:	4603      	mov	r3, r0
 800a066:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	2b03      	cmp	r3, #3
 800a06e:	d109      	bne.n	800a084 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	3314      	adds	r3, #20
 800a074:	4618      	mov	r0, r3
 800a076:	f7fe fc2f 	bl	80088d8 <ld_word>
 800a07a:	4603      	mov	r3, r0
 800a07c:	041b      	lsls	r3, r3, #16
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	4313      	orrs	r3, r2
 800a082:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a084:	68fb      	ldr	r3, [r7, #12]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	60f8      	str	r0, [r7, #12]
 800a096:	60b9      	str	r1, [r7, #8]
 800a098:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	331a      	adds	r3, #26
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	b292      	uxth	r2, r2
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fe fd29 	bl	8008afc <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	2b03      	cmp	r3, #3
 800a0b0:	d109      	bne.n	800a0c6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	f103 0214 	add.w	r2, r3, #20
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	0c1b      	lsrs	r3, r3, #16
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	4619      	mov	r1, r3
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	f7fe fd1b 	bl	8008afc <st_word>
	}
}
 800a0c6:	bf00      	nop
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
	...

0800a0d0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a0d0:	b590      	push	{r4, r7, lr}
 800a0d2:	b087      	sub	sp, #28
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	331a      	adds	r3, #26
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fe fbfa 	bl	80088d8 <ld_word>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d001      	beq.n	800a0ee <cmp_lfn+0x1e>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	e059      	b.n	800a1a2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0f6:	1e5a      	subs	r2, r3, #1
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	005b      	lsls	r3, r3, #1
 800a0fc:	4413      	add	r3, r2
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	4413      	add	r3, r2
 800a102:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a104:	2301      	movs	r3, #1
 800a106:	81fb      	strh	r3, [r7, #14]
 800a108:	2300      	movs	r3, #0
 800a10a:	613b      	str	r3, [r7, #16]
 800a10c:	e033      	b.n	800a176 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a10e:	4a27      	ldr	r2, [pc, #156]	; (800a1ac <cmp_lfn+0xdc>)
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	4413      	add	r3, r2
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	4413      	add	r3, r2
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7fe fbdb 	bl	80088d8 <ld_word>
 800a122:	4603      	mov	r3, r0
 800a124:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a126:	89fb      	ldrh	r3, [r7, #14]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d01a      	beq.n	800a162 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	2bfe      	cmp	r3, #254	; 0xfe
 800a130:	d812      	bhi.n	800a158 <cmp_lfn+0x88>
 800a132:	89bb      	ldrh	r3, [r7, #12]
 800a134:	4618      	mov	r0, r3
 800a136:	f003 fae1 	bl	800d6fc <ff_wtoupper>
 800a13a:	4603      	mov	r3, r0
 800a13c:	461c      	mov	r4, r3
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	1c5a      	adds	r2, r3, #1
 800a142:	617a      	str	r2, [r7, #20]
 800a144:	005b      	lsls	r3, r3, #1
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	4413      	add	r3, r2
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f003 fad5 	bl	800d6fc <ff_wtoupper>
 800a152:	4603      	mov	r3, r0
 800a154:	429c      	cmp	r4, r3
 800a156:	d001      	beq.n	800a15c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a158:	2300      	movs	r3, #0
 800a15a:	e022      	b.n	800a1a2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800a15c:	89bb      	ldrh	r3, [r7, #12]
 800a15e:	81fb      	strh	r3, [r7, #14]
 800a160:	e006      	b.n	800a170 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a162:	89bb      	ldrh	r3, [r7, #12]
 800a164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a168:	4293      	cmp	r3, r2
 800a16a:	d001      	beq.n	800a170 <cmp_lfn+0xa0>
 800a16c:	2300      	movs	r3, #0
 800a16e:	e018      	b.n	800a1a2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	3301      	adds	r3, #1
 800a174:	613b      	str	r3, [r7, #16]
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	2b0c      	cmp	r3, #12
 800a17a:	d9c8      	bls.n	800a10e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00b      	beq.n	800a1a0 <cmp_lfn+0xd0>
 800a188:	89fb      	ldrh	r3, [r7, #14]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d008      	beq.n	800a1a0 <cmp_lfn+0xd0>
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	005b      	lsls	r3, r3, #1
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	4413      	add	r3, r2
 800a196:	881b      	ldrh	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <cmp_lfn+0xd0>
 800a19c:	2300      	movs	r3, #0
 800a19e:	e000      	b.n	800a1a2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a1a0:	2301      	movs	r3, #1
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	371c      	adds	r7, #28
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd90      	pop	{r4, r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	080147d0 	.word	0x080147d0

0800a1b0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	331a      	adds	r3, #26
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7fe fb8a 	bl	80088d8 <ld_word>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d001      	beq.n	800a1ce <pick_lfn+0x1e>
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	e04d      	b.n	800a26a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1d6:	1e5a      	subs	r2, r3, #1
 800a1d8:	4613      	mov	r3, r2
 800a1da:	005b      	lsls	r3, r3, #1
 800a1dc:	4413      	add	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	4413      	add	r3, r2
 800a1e2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	81fb      	strh	r3, [r7, #14]
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	613b      	str	r3, [r7, #16]
 800a1ec:	e028      	b.n	800a240 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a1ee:	4a21      	ldr	r2, [pc, #132]	; (800a274 <pick_lfn+0xc4>)
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7fe fb6b 	bl	80088d8 <ld_word>
 800a202:	4603      	mov	r3, r0
 800a204:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a206:	89fb      	ldrh	r3, [r7, #14]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00f      	beq.n	800a22c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	2bfe      	cmp	r3, #254	; 0xfe
 800a210:	d901      	bls.n	800a216 <pick_lfn+0x66>
 800a212:	2300      	movs	r3, #0
 800a214:	e029      	b.n	800a26a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a216:	89bb      	ldrh	r3, [r7, #12]
 800a218:	81fb      	strh	r3, [r7, #14]
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	1c5a      	adds	r2, r3, #1
 800a21e:	617a      	str	r2, [r7, #20]
 800a220:	005b      	lsls	r3, r3, #1
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	4413      	add	r3, r2
 800a226:	89fa      	ldrh	r2, [r7, #14]
 800a228:	801a      	strh	r2, [r3, #0]
 800a22a:	e006      	b.n	800a23a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a22c:	89bb      	ldrh	r3, [r7, #12]
 800a22e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a232:	4293      	cmp	r3, r2
 800a234:	d001      	beq.n	800a23a <pick_lfn+0x8a>
 800a236:	2300      	movs	r3, #0
 800a238:	e017      	b.n	800a26a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	3301      	adds	r3, #1
 800a23e:	613b      	str	r3, [r7, #16]
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	2b0c      	cmp	r3, #12
 800a244:	d9d3      	bls.n	800a1ee <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00a      	beq.n	800a268 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	2bfe      	cmp	r3, #254	; 0xfe
 800a256:	d901      	bls.n	800a25c <pick_lfn+0xac>
 800a258:	2300      	movs	r3, #0
 800a25a:	e006      	b.n	800a26a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	005b      	lsls	r3, r3, #1
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	4413      	add	r3, r2
 800a264:	2200      	movs	r2, #0
 800a266:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800a268:	2301      	movs	r3, #1
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3718      	adds	r7, #24
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	080147d0 	.word	0x080147d0

0800a278 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b088      	sub	sp, #32
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	4611      	mov	r1, r2
 800a284:	461a      	mov	r2, r3
 800a286:	460b      	mov	r3, r1
 800a288:	71fb      	strb	r3, [r7, #7]
 800a28a:	4613      	mov	r3, r2
 800a28c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	330d      	adds	r3, #13
 800a292:	79ba      	ldrb	r2, [r7, #6]
 800a294:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	330b      	adds	r3, #11
 800a29a:	220f      	movs	r2, #15
 800a29c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	330c      	adds	r3, #12
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	331a      	adds	r3, #26
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fe fc25 	bl	8008afc <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a2b2:	79fb      	ldrb	r3, [r7, #7]
 800a2b4:	1e5a      	subs	r2, r3, #1
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	005b      	lsls	r3, r3, #1
 800a2ba:	4413      	add	r3, r2
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	4413      	add	r3, r2
 800a2c0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	82fb      	strh	r3, [r7, #22]
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a2ca:	8afb      	ldrh	r3, [r7, #22]
 800a2cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d007      	beq.n	800a2e4 <put_lfn+0x6c>
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	1c5a      	adds	r2, r3, #1
 800a2d8:	61fa      	str	r2, [r7, #28]
 800a2da:	005b      	lsls	r3, r3, #1
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	4413      	add	r3, r2
 800a2e0:	881b      	ldrh	r3, [r3, #0]
 800a2e2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a2e4:	4a17      	ldr	r2, [pc, #92]	; (800a344 <put_lfn+0xcc>)
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	8afa      	ldrh	r2, [r7, #22]
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7fe fc00 	bl	8008afc <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a2fc:	8afb      	ldrh	r3, [r7, #22]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d102      	bne.n	800a308 <put_lfn+0x90>
 800a302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a306:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	3301      	adds	r3, #1
 800a30c:	61bb      	str	r3, [r7, #24]
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	2b0c      	cmp	r3, #12
 800a312:	d9da      	bls.n	800a2ca <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a314:	8afb      	ldrh	r3, [r7, #22]
 800a316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d006      	beq.n	800a32c <put_lfn+0xb4>
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	005b      	lsls	r3, r3, #1
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	4413      	add	r3, r2
 800a326:	881b      	ldrh	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d103      	bne.n	800a334 <put_lfn+0xbc>
 800a32c:	79fb      	ldrb	r3, [r7, #7]
 800a32e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a332:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	79fa      	ldrb	r2, [r7, #7]
 800a338:	701a      	strb	r2, [r3, #0]
}
 800a33a:	bf00      	nop
 800a33c:	3720      	adds	r7, #32
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	080147d0 	.word	0x080147d0

0800a348 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b08c      	sub	sp, #48	; 0x30
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
 800a354:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a356:	220b      	movs	r2, #11
 800a358:	68b9      	ldr	r1, [r7, #8]
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f7fe fc9a 	bl	8008c94 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	2b05      	cmp	r3, #5
 800a364:	d92b      	bls.n	800a3be <gen_numname+0x76>
		sr = seq;
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a36a:	e022      	b.n	800a3b2 <gen_numname+0x6a>
			wc = *lfn++;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	1c9a      	adds	r2, r3, #2
 800a370:	607a      	str	r2, [r7, #4]
 800a372:	881b      	ldrh	r3, [r3, #0]
 800a374:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a376:	2300      	movs	r3, #0
 800a378:	62bb      	str	r3, [r7, #40]	; 0x28
 800a37a:	e017      	b.n	800a3ac <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	005a      	lsls	r2, r3, #1
 800a380:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a382:	f003 0301 	and.w	r3, r3, #1
 800a386:	4413      	add	r3, r2
 800a388:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a38a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a38c:	085b      	lsrs	r3, r3, #1
 800a38e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a396:	2b00      	cmp	r3, #0
 800a398:	d005      	beq.n	800a3a6 <gen_numname+0x5e>
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a3a0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a3a4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ae:	2b0f      	cmp	r3, #15
 800a3b0:	d9e4      	bls.n	800a37c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	881b      	ldrh	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1d8      	bne.n	800a36c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a3be:	2307      	movs	r3, #7
 800a3c0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	f003 030f 	and.w	r3, r3, #15
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	3330      	adds	r3, #48	; 0x30
 800a3ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a3d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3d6:	2b39      	cmp	r3, #57	; 0x39
 800a3d8:	d904      	bls.n	800a3e4 <gen_numname+0x9c>
 800a3da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3de:	3307      	adds	r3, #7
 800a3e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e6:	1e5a      	subs	r2, r3, #1
 800a3e8:	62ba      	str	r2, [r7, #40]	; 0x28
 800a3ea:	3330      	adds	r3, #48	; 0x30
 800a3ec:	443b      	add	r3, r7
 800a3ee:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a3f2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	091b      	lsrs	r3, r3, #4
 800a3fa:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1df      	bne.n	800a3c2 <gen_numname+0x7a>
	ns[i] = '~';
 800a402:	f107 0214 	add.w	r2, r7, #20
 800a406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a408:	4413      	add	r3, r2
 800a40a:	227e      	movs	r2, #126	; 0x7e
 800a40c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a40e:	2300      	movs	r3, #0
 800a410:	627b      	str	r3, [r7, #36]	; 0x24
 800a412:	e002      	b.n	800a41a <gen_numname+0xd2>
 800a414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a416:	3301      	adds	r3, #1
 800a418:	627b      	str	r3, [r7, #36]	; 0x24
 800a41a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	429a      	cmp	r2, r3
 800a420:	d205      	bcs.n	800a42e <gen_numname+0xe6>
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	4413      	add	r3, r2
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	2b20      	cmp	r3, #32
 800a42c:	d1f2      	bne.n	800a414 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a430:	2b07      	cmp	r3, #7
 800a432:	d807      	bhi.n	800a444 <gen_numname+0xfc>
 800a434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a436:	1c5a      	adds	r2, r3, #1
 800a438:	62ba      	str	r2, [r7, #40]	; 0x28
 800a43a:	3330      	adds	r3, #48	; 0x30
 800a43c:	443b      	add	r3, r7
 800a43e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a442:	e000      	b.n	800a446 <gen_numname+0xfe>
 800a444:	2120      	movs	r1, #32
 800a446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a448:	1c5a      	adds	r2, r3, #1
 800a44a:	627a      	str	r2, [r7, #36]	; 0x24
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	4413      	add	r3, r2
 800a450:	460a      	mov	r2, r1
 800a452:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a456:	2b07      	cmp	r3, #7
 800a458:	d9e9      	bls.n	800a42e <gen_numname+0xe6>
}
 800a45a:	bf00      	nop
 800a45c:	bf00      	nop
 800a45e:	3730      	adds	r7, #48	; 0x30
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a46c:	2300      	movs	r3, #0
 800a46e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a470:	230b      	movs	r3, #11
 800a472:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a474:	7bfb      	ldrb	r3, [r7, #15]
 800a476:	b2da      	uxtb	r2, r3
 800a478:	0852      	lsrs	r2, r2, #1
 800a47a:	01db      	lsls	r3, r3, #7
 800a47c:	4313      	orrs	r3, r2
 800a47e:	b2da      	uxtb	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	1c59      	adds	r1, r3, #1
 800a484:	6079      	str	r1, [r7, #4]
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	4413      	add	r3, r2
 800a48a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	3b01      	subs	r3, #1
 800a490:	60bb      	str	r3, [r7, #8]
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1ed      	bne.n	800a474 <sum_sfn+0x10>
	return sum;
 800a498:	7bfb      	ldrb	r3, [r7, #15]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3714      	adds	r7, #20
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bc80      	pop	{r7}
 800a4a2:	4770      	bx	lr

0800a4a4 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b087      	sub	sp, #28
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	015b      	lsls	r3, r3, #5
 800a4b6:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	827b      	strh	r3, [r7, #18]
 800a4bc:	2300      	movs	r3, #0
 800a4be:	617b      	str	r3, [r7, #20]
 800a4c0:	e018      	b.n	800a4f4 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d103      	bne.n	800a4d0 <xdir_sum+0x2c>
			i++;
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	617b      	str	r3, [r7, #20]
 800a4ce:	e00e      	b.n	800a4ee <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800a4d0:	8a7b      	ldrh	r3, [r7, #18]
 800a4d2:	03db      	lsls	r3, r3, #15
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	8a7b      	ldrh	r3, [r7, #18]
 800a4d8:	085b      	lsrs	r3, r3, #1
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	4413      	add	r3, r2
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	6879      	ldr	r1, [r7, #4]
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	440b      	add	r3, r1
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	4413      	add	r3, r2
 800a4ec:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	617b      	str	r3, [r7, #20]
 800a4f4:	697a      	ldr	r2, [r7, #20]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d3e2      	bcc.n	800a4c2 <xdir_sum+0x1e>
		}
	}
	return sum;
 800a4fc:	8a7b      	ldrh	r3, [r7, #18]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	371c      	adds	r7, #28
 800a502:	46bd      	mov	sp, r7
 800a504:	bc80      	pop	{r7}
 800a506:	4770      	bx	lr

0800a508 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800a510:	2300      	movs	r3, #0
 800a512:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800a514:	e01f      	b.n	800a556 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800a516:	89bb      	ldrh	r3, [r7, #12]
 800a518:	4618      	mov	r0, r3
 800a51a:	f003 f8ef 	bl	800d6fc <ff_wtoupper>
 800a51e:	4603      	mov	r3, r0
 800a520:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800a522:	89fb      	ldrh	r3, [r7, #14]
 800a524:	03db      	lsls	r3, r3, #15
 800a526:	b29a      	uxth	r2, r3
 800a528:	89fb      	ldrh	r3, [r7, #14]
 800a52a:	085b      	lsrs	r3, r3, #1
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	4413      	add	r3, r2
 800a530:	b29a      	uxth	r2, r3
 800a532:	89bb      	ldrh	r3, [r7, #12]
 800a534:	b2db      	uxtb	r3, r3
 800a536:	b29b      	uxth	r3, r3
 800a538:	4413      	add	r3, r2
 800a53a:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800a53c:	89fb      	ldrh	r3, [r7, #14]
 800a53e:	03db      	lsls	r3, r3, #15
 800a540:	b29a      	uxth	r2, r3
 800a542:	89fb      	ldrh	r3, [r7, #14]
 800a544:	085b      	lsrs	r3, r3, #1
 800a546:	b29b      	uxth	r3, r3
 800a548:	4413      	add	r3, r2
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	89bb      	ldrh	r3, [r7, #12]
 800a54e:	0a1b      	lsrs	r3, r3, #8
 800a550:	b29b      	uxth	r3, r3
 800a552:	4413      	add	r3, r2
 800a554:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	1c9a      	adds	r2, r3, #2
 800a55a:	607a      	str	r2, [r7, #4]
 800a55c:	881b      	ldrh	r3, [r3, #0]
 800a55e:	81bb      	strh	r3, [r7, #12]
 800a560:	89bb      	ldrh	r3, [r7, #12]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1d7      	bne.n	800a516 <xname_sum+0xe>
	}
	return sum;
 800a566:	89fb      	ldrh	r3, [r7, #14]
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800a570:	b590      	push	{r4, r7, lr}
 800a572:	b087      	sub	sp, #28
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a588:	4619      	mov	r1, r3
 800a58a:	4610      	mov	r0, r2
 800a58c:	f7fe fda6 	bl	80090dc <move_window>
 800a590:	4603      	mov	r3, r0
 800a592:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a594:	7bfb      	ldrb	r3, [r7, #15]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d001      	beq.n	800a59e <load_xdir+0x2e>
 800a59a:	7bfb      	ldrb	r3, [r7, #15]
 800a59c:	e09f      	b.n	800a6de <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	2b85      	cmp	r3, #133	; 0x85
 800a5a6:	d001      	beq.n	800a5ac <load_xdir+0x3c>
 800a5a8:	2302      	movs	r3, #2
 800a5aa:	e098      	b.n	800a6de <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5b0:	2220      	movs	r2, #32
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	6938      	ldr	r0, [r7, #16]
 800a5b6:	f7fe fb6d 	bl	8008c94 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	015b      	lsls	r3, r3, #5
 800a5c4:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2b5f      	cmp	r3, #95	; 0x5f
 800a5ca:	d903      	bls.n	800a5d4 <load_xdir+0x64>
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800a5d2:	d901      	bls.n	800a5d8 <load_xdir+0x68>
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	e082      	b.n	800a6de <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800a5d8:	2100      	movs	r1, #0
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7ff fc07 	bl	8009dee <dir_next>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a5e4:	7bfb      	ldrb	r3, [r7, #15]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d001      	beq.n	800a5ee <load_xdir+0x7e>
 800a5ea:	7bfb      	ldrb	r3, [r7, #15]
 800a5ec:	e077      	b.n	800a6de <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	4610      	mov	r0, r2
 800a5fa:	f7fe fd6f 	bl	80090dc <move_window>
 800a5fe:	4603      	mov	r3, r0
 800a600:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a602:	7bfb      	ldrb	r3, [r7, #15]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <load_xdir+0x9c>
 800a608:	7bfb      	ldrb	r3, [r7, #15]
 800a60a:	e068      	b.n	800a6de <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	2bc0      	cmp	r3, #192	; 0xc0
 800a614:	d001      	beq.n	800a61a <load_xdir+0xaa>
 800a616:	2302      	movs	r3, #2
 800a618:	e061      	b.n	800a6de <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	f103 0020 	add.w	r0, r3, #32
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a624:	2220      	movs	r2, #32
 800a626:	4619      	mov	r1, r3
 800a628:	f7fe fb34 	bl	8008c94 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	3323      	adds	r3, #35	; 0x23
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	332c      	adds	r3, #44	; 0x2c
 800a634:	4a2c      	ldr	r2, [pc, #176]	; (800a6e8 <load_xdir+0x178>)
 800a636:	fba2 2303 	umull	r2, r3, r2, r3
 800a63a:	08db      	lsrs	r3, r3, #3
 800a63c:	015b      	lsls	r3, r3, #5
 800a63e:	68ba      	ldr	r2, [r7, #8]
 800a640:	429a      	cmp	r2, r3
 800a642:	d201      	bcs.n	800a648 <load_xdir+0xd8>
 800a644:	2302      	movs	r3, #2
 800a646:	e04a      	b.n	800a6de <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800a648:	2340      	movs	r3, #64	; 0x40
 800a64a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800a64c:	2100      	movs	r1, #0
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f7ff fbcd 	bl	8009dee <dir_next>
 800a654:	4603      	mov	r3, r0
 800a656:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800a658:	7bfb      	ldrb	r3, [r7, #15]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d001      	beq.n	800a662 <load_xdir+0xf2>
 800a65e:	7bfb      	ldrb	r3, [r7, #15]
 800a660:	e03d      	b.n	800a6de <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66a:	4619      	mov	r1, r3
 800a66c:	4610      	mov	r0, r2
 800a66e:	f7fe fd35 	bl	80090dc <move_window>
 800a672:	4603      	mov	r3, r0
 800a674:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800a676:	7bfb      	ldrb	r3, [r7, #15]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <load_xdir+0x110>
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
 800a67e:	e02e      	b.n	800a6de <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	2bc1      	cmp	r3, #193	; 0xc1
 800a688:	d001      	beq.n	800a68e <load_xdir+0x11e>
 800a68a:	2302      	movs	r3, #2
 800a68c:	e027      	b.n	800a6de <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800a694:	d208      	bcs.n	800a6a8 <load_xdir+0x138>
 800a696:	693a      	ldr	r2, [r7, #16]
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	18d0      	adds	r0, r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6a0:	2220      	movs	r2, #32
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	f7fe faf6 	bl	8008c94 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	3320      	adds	r3, #32
 800a6ac:	617b      	str	r3, [r7, #20]
 800a6ae:	697a      	ldr	r2, [r7, #20]
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d3ca      	bcc.n	800a64c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800a6bc:	d80e      	bhi.n	800a6dc <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800a6be:	6938      	ldr	r0, [r7, #16]
 800a6c0:	f7ff fef0 	bl	800a4a4 <xdir_sum>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	461c      	mov	r4, r3
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	3302      	adds	r3, #2
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7fe f903 	bl	80088d8 <ld_word>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	429c      	cmp	r4, r3
 800a6d6:	d001      	beq.n	800a6dc <load_xdir+0x16c>
 800a6d8:	2302      	movs	r3, #2
 800a6da:	e000      	b.n	800a6de <load_xdir+0x16e>
	}
	return FR_OK;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	371c      	adds	r7, #28
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd90      	pop	{r4, r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	88888889 	.word	0x88888889

0800a6ec <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800a6ec:	b5b0      	push	{r4, r5, r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	6808      	ldr	r0, [r1, #0]
 800a6fa:	6879      	ldr	r1, [r7, #4]
 800a6fc:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800a6fe:	6839      	ldr	r1, [r7, #0]
 800a700:	6a08      	ldr	r0, [r1, #32]
 800a702:	6879      	ldr	r1, [r7, #4]
 800a704:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800a706:	6839      	ldr	r1, [r7, #0]
 800a708:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800a70a:	b2c8      	uxtb	r0, r1
 800a70c:	6879      	ldr	r1, [r7, #4]
 800a70e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800a710:	6839      	ldr	r1, [r7, #0]
 800a712:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800a714:	2000      	movs	r0, #0
 800a716:	460c      	mov	r4, r1
 800a718:	4605      	mov	r5, r0
 800a71a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800a71e:	2300      	movs	r3, #0
 800a720:	6879      	ldr	r1, [r7, #4]
 800a722:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a732:	4619      	mov	r1, r3
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f7ff fad4 	bl	8009ce2 <dir_sdi>
 800a73a:	4603      	mov	r3, r0
 800a73c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d104      	bne.n	800a74e <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7ff ff13 	bl	800a570 <load_xdir>
 800a74a:	4603      	mov	r3, r0
 800a74c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bdb0      	pop	{r4, r5, r7, pc}

0800a758 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800a758:	b590      	push	{r4, r7, lr}
 800a75a:	b087      	sub	sp, #28
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	1c9c      	adds	r4, r3, #2
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f7ff fe99 	bl	800a4a4 <xdir_sum>
 800a772:	4603      	mov	r3, r0
 800a774:	4619      	mov	r1, r3
 800a776:	4620      	mov	r0, r4
 800a778:	f7fe f9c0 	bl	8008afc <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	3301      	adds	r3, #1
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	3301      	adds	r3, #1
 800a784:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a78a:	4619      	mov	r1, r3
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f7ff faa8 	bl	8009ce2 <dir_sdi>
 800a792:	4603      	mov	r3, r0
 800a794:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800a796:	e026      	b.n	800a7e6 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	4610      	mov	r0, r2
 800a7a4:	f7fe fc9a 	bl	80090dc <move_window>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a7ac:	7dfb      	ldrb	r3, [r7, #23]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d11d      	bne.n	800a7ee <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7b6:	2220      	movs	r2, #32
 800a7b8:	68f9      	ldr	r1, [r7, #12]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fe fa6a 	bl	8008c94 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	613b      	str	r3, [r7, #16]
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d00e      	beq.n	800a7f2 <store_xdir+0x9a>
		dirb += SZDIRE;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	3320      	adds	r3, #32
 800a7d8:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800a7da:	2100      	movs	r1, #0
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7ff fb06 	bl	8009dee <dir_next>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800a7e6:	7dfb      	ldrb	r3, [r7, #23]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d0d5      	beq.n	800a798 <store_xdir+0x40>
 800a7ec:	e002      	b.n	800a7f4 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800a7ee:	bf00      	nop
 800a7f0:	e000      	b.n	800a7f4 <store_xdir+0x9c>
		if (--nent == 0) break;
 800a7f2:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800a7f4:	7dfb      	ldrb	r3, [r7, #23]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d002      	beq.n	800a800 <store_xdir+0xa8>
 800a7fa:	7dfb      	ldrb	r3, [r7, #23]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d101      	bne.n	800a804 <store_xdir+0xac>
 800a800:	7dfb      	ldrb	r3, [r7, #23]
 800a802:	e000      	b.n	800a806 <store_xdir+0xae>
 800a804:	2302      	movs	r3, #2
}
 800a806:	4618      	mov	r0, r3
 800a808:	371c      	adds	r7, #28
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd90      	pop	{r4, r7, pc}

0800a80e <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800a80e:	b590      	push	{r4, r7, lr}
 800a810:	b085      	sub	sp, #20
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
 800a816:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800a818:	2240      	movs	r2, #64	; 0x40
 800a81a:	2100      	movs	r1, #0
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f7fe fa59 	bl	8008cd4 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2285      	movs	r2, #133	; 0x85
 800a826:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	3320      	adds	r3, #32
 800a82c:	22c0      	movs	r2, #192	; 0xc0
 800a82e:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800a830:	2300      	movs	r3, #0
 800a832:	72bb      	strb	r3, [r7, #10]
 800a834:	2301      	movs	r3, #1
 800a836:	72fb      	strb	r3, [r7, #11]
 800a838:	2301      	movs	r3, #1
 800a83a:	813b      	strh	r3, [r7, #8]
 800a83c:	2340      	movs	r3, #64	; 0x40
 800a83e:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	1c5a      	adds	r2, r3, #1
 800a844:	60fa      	str	r2, [r7, #12]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	4413      	add	r3, r2
 800a84a:	22c1      	movs	r2, #193	; 0xc1
 800a84c:	701a      	strb	r2, [r3, #0]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	1c5a      	adds	r2, r3, #1
 800a852:	60fa      	str	r2, [r7, #12]
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	4413      	add	r3, r2
 800a858:	2200      	movs	r2, #0
 800a85a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800a85c:	893b      	ldrh	r3, [r7, #8]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d00b      	beq.n	800a87a <create_xdir+0x6c>
 800a862:	7abb      	ldrb	r3, [r7, #10]
 800a864:	005b      	lsls	r3, r3, #1
 800a866:	683a      	ldr	r2, [r7, #0]
 800a868:	4413      	add	r3, r2
 800a86a:	881b      	ldrh	r3, [r3, #0]
 800a86c:	813b      	strh	r3, [r7, #8]
 800a86e:	893b      	ldrh	r3, [r7, #8]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d002      	beq.n	800a87a <create_xdir+0x6c>
 800a874:	7abb      	ldrb	r3, [r7, #10]
 800a876:	3301      	adds	r3, #1
 800a878:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	4413      	add	r3, r2
 800a880:	893a      	ldrh	r2, [r7, #8]
 800a882:	4611      	mov	r1, r2
 800a884:	4618      	mov	r0, r3
 800a886:	f7fe f939 	bl	8008afc <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3302      	adds	r3, #2
 800a88e:	60fb      	str	r3, [r7, #12]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f003 031f 	and.w	r3, r3, #31
 800a896:	2b00      	cmp	r3, #0
 800a898:	d1e0      	bne.n	800a85c <create_xdir+0x4e>
		nb++;
 800a89a:	7afb      	ldrb	r3, [r7, #11]
 800a89c:	3301      	adds	r3, #1
 800a89e:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800a8a0:	7abb      	ldrb	r3, [r7, #10]
 800a8a2:	005b      	lsls	r3, r3, #1
 800a8a4:	683a      	ldr	r2, [r7, #0]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	881b      	ldrh	r3, [r3, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d1c8      	bne.n	800a840 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	3323      	adds	r3, #35	; 0x23
 800a8b2:	7aba      	ldrb	r2, [r7, #10]
 800a8b4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	7afa      	ldrb	r2, [r7, #11]
 800a8bc:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800a8c4:	6838      	ldr	r0, [r7, #0]
 800a8c6:	f7ff fe1f 	bl	800a508 <xname_sum>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f7fe f914 	bl	8008afc <st_word>
}
 800a8d4:	bf00      	nop
 800a8d6:	3714      	adds	r7, #20
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd90      	pop	{r4, r7, pc}

0800a8dc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800a8e6:	2304      	movs	r3, #4
 800a8e8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800a8f0:	23ff      	movs	r3, #255	; 0xff
 800a8f2:	757b      	strb	r3, [r7, #21]
 800a8f4:	23ff      	movs	r3, #255	; 0xff
 800a8f6:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800a8f8:	e09f      	b.n	800aa3a <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fe:	4619      	mov	r1, r3
 800a900:	6938      	ldr	r0, [r7, #16]
 800a902:	f7fe fbeb 	bl	80090dc <move_window>
 800a906:	4603      	mov	r3, r0
 800a908:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a90a:	7dfb      	ldrb	r3, [r7, #23]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f040 809a 	bne.w	800aa46 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800a91a:	7dbb      	ldrb	r3, [r7, #22]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d102      	bne.n	800a926 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800a920:	2304      	movs	r3, #4
 800a922:	75fb      	strb	r3, [r7, #23]
 800a924:	e096      	b.n	800aa54 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	d118      	bne.n	800a960 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800a92e:	7dbb      	ldrb	r3, [r7, #22]
 800a930:	2b85      	cmp	r3, #133	; 0x85
 800a932:	d179      	bne.n	800aa28 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7ff fe17 	bl	800a570 <load_xdir>
 800a942:	4603      	mov	r3, r0
 800a944:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800a946:	7dfb      	ldrb	r3, [r7, #23]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d17e      	bne.n	800aa4a <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	3304      	adds	r3, #4
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	719a      	strb	r2, [r3, #6]
					}
					break;
 800a95e:	e074      	b.n	800aa4a <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a964:	330b      	adds	r3, #11
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a96c:	73fb      	strb	r3, [r7, #15]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	7bfa      	ldrb	r2, [r7, #15]
 800a972:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800a974:	7dbb      	ldrb	r3, [r7, #22]
 800a976:	2be5      	cmp	r3, #229	; 0xe5
 800a978:	d00e      	beq.n	800a998 <dir_read+0xbc>
 800a97a:	7dbb      	ldrb	r3, [r7, #22]
 800a97c:	2b2e      	cmp	r3, #46	; 0x2e
 800a97e:	d00b      	beq.n	800a998 <dir_read+0xbc>
 800a980:	7bfb      	ldrb	r3, [r7, #15]
 800a982:	f023 0320 	bic.w	r3, r3, #32
 800a986:	2b08      	cmp	r3, #8
 800a988:	bf0c      	ite	eq
 800a98a:	2301      	moveq	r3, #1
 800a98c:	2300      	movne	r3, #0
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	461a      	mov	r2, r3
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	4293      	cmp	r3, r2
 800a996:	d002      	beq.n	800a99e <dir_read+0xc2>
				ord = 0xFF;
 800a998:	23ff      	movs	r3, #255	; 0xff
 800a99a:	757b      	strb	r3, [r7, #21]
 800a99c:	e044      	b.n	800aa28 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800a99e:	7bfb      	ldrb	r3, [r7, #15]
 800a9a0:	2b0f      	cmp	r3, #15
 800a9a2:	d12f      	bne.n	800aa04 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800a9a4:	7dbb      	ldrb	r3, [r7, #22]
 800a9a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00d      	beq.n	800a9ca <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9b2:	7b5b      	ldrb	r3, [r3, #13]
 800a9b4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800a9b6:	7dbb      	ldrb	r3, [r7, #22]
 800a9b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9bc:	75bb      	strb	r3, [r7, #22]
 800a9be:	7dbb      	ldrb	r3, [r7, #22]
 800a9c0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a9ca:	7dba      	ldrb	r2, [r7, #22]
 800a9cc:	7d7b      	ldrb	r3, [r7, #21]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d115      	bne.n	800a9fe <dir_read+0x122>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9d6:	330d      	adds	r3, #13
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	7d3a      	ldrb	r2, [r7, #20]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d10e      	bne.n	800a9fe <dir_read+0x122>
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	68da      	ldr	r2, [r3, #12]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	f7ff fbe0 	bl	800a1b0 <pick_lfn>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d003      	beq.n	800a9fe <dir_read+0x122>
 800a9f6:	7d7b      	ldrb	r3, [r7, #21]
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	e000      	b.n	800aa00 <dir_read+0x124>
 800a9fe:	23ff      	movs	r3, #255	; 0xff
 800aa00:	757b      	strb	r3, [r7, #21]
 800aa02:	e011      	b.n	800aa28 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800aa04:	7d7b      	ldrb	r3, [r7, #21]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d109      	bne.n	800aa1e <dir_read+0x142>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7ff fd28 	bl	800a464 <sum_sfn>
 800aa14:	4603      	mov	r3, r0
 800aa16:	461a      	mov	r2, r3
 800aa18:	7d3b      	ldrb	r3, [r7, #20]
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d017      	beq.n	800aa4e <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f04f 32ff 	mov.w	r2, #4294967295
 800aa24:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800aa26:	e012      	b.n	800aa4e <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800aa28:	2100      	movs	r1, #0
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f7ff f9df 	bl	8009dee <dir_next>
 800aa30:	4603      	mov	r3, r0
 800aa32:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aa34:	7dfb      	ldrb	r3, [r7, #23]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10b      	bne.n	800aa52 <dir_read+0x176>
	while (dp->sect) {
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f47f af5b 	bne.w	800a8fa <dir_read+0x1e>
 800aa44:	e006      	b.n	800aa54 <dir_read+0x178>
		if (res != FR_OK) break;
 800aa46:	bf00      	nop
 800aa48:	e004      	b.n	800aa54 <dir_read+0x178>
					break;
 800aa4a:	bf00      	nop
 800aa4c:	e002      	b.n	800aa54 <dir_read+0x178>
					break;
 800aa4e:	bf00      	nop
 800aa50:	e000      	b.n	800aa54 <dir_read+0x178>
		if (res != FR_OK) break;
 800aa52:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800aa54:	7dfb      	ldrb	r3, [r7, #23]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d002      	beq.n	800aa60 <dir_read+0x184>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800aa60:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3718      	adds	r7, #24
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800aa6a:	b590      	push	{r4, r7, lr}
 800aa6c:	b089      	sub	sp, #36	; 0x24
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aa78:	2100      	movs	r1, #0
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f7ff f931 	bl	8009ce2 <dir_sdi>
 800aa80:	4603      	mov	r3, r0
 800aa82:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800aa84:	7ffb      	ldrb	r3, [r7, #31]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d001      	beq.n	800aa8e <dir_find+0x24>
 800aa8a:	7ffb      	ldrb	r3, [r7, #31]
 800aa8c:	e112      	b.n	800acb4 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	2b04      	cmp	r3, #4
 800aa94:	d164      	bne.n	800ab60 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	68db      	ldr	r3, [r3, #12]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7ff fd34 	bl	800a508 <xname_sum>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800aaa4:	e04f      	b.n	800ab46 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	3324      	adds	r3, #36	; 0x24
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7fd ff13 	bl	80088d8 <ld_word>
 800aab2:	4603      	mov	r3, r0
 800aab4:	461a      	mov	r2, r3
 800aab6:	893b      	ldrh	r3, [r7, #8]
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d000      	beq.n	800aabe <dir_find+0x54>
 800aabc:	e043      	b.n	800ab46 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800aac6:	76fb      	strb	r3, [r7, #27]
 800aac8:	2340      	movs	r3, #64	; 0x40
 800aaca:	617b      	str	r3, [r7, #20]
 800aacc:	2300      	movs	r3, #0
 800aace:	613b      	str	r3, [r7, #16]
 800aad0:	e029      	b.n	800ab26 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	f003 031f 	and.w	r3, r3, #31
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d102      	bne.n	800aae2 <dir_find+0x78>
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	3302      	adds	r3, #2
 800aae0:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	691a      	ldr	r2, [r3, #16]
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	4413      	add	r3, r2
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fd fef4 	bl	80088d8 <ld_word>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f002 fe02 	bl	800d6fc <ff_wtoupper>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	461c      	mov	r4, r3
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	68da      	ldr	r2, [r3, #12]
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	005b      	lsls	r3, r3, #1
 800ab04:	4413      	add	r3, r2
 800ab06:	881b      	ldrh	r3, [r3, #0]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f002 fdf7 	bl	800d6fc <ff_wtoupper>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	429c      	cmp	r4, r3
 800ab12:	d10c      	bne.n	800ab2e <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800ab14:	7efb      	ldrb	r3, [r7, #27]
 800ab16:	3b01      	subs	r3, #1
 800ab18:	76fb      	strb	r3, [r7, #27]
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	3302      	adds	r3, #2
 800ab1e:	617b      	str	r3, [r7, #20]
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	3301      	adds	r3, #1
 800ab24:	613b      	str	r3, [r7, #16]
 800ab26:	7efb      	ldrb	r3, [r7, #27]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1d2      	bne.n	800aad2 <dir_find+0x68>
 800ab2c:	e000      	b.n	800ab30 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800ab2e:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800ab30:	7efb      	ldrb	r3, [r7, #27]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d107      	bne.n	800ab46 <dir_find+0xdc>
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	68da      	ldr	r2, [r3, #12]
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	005b      	lsls	r3, r3, #1
 800ab3e:	4413      	add	r3, r2
 800ab40:	881b      	ldrh	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d009      	beq.n	800ab5a <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800ab46:	2100      	movs	r1, #0
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f7ff fec7 	bl	800a8dc <dir_read>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	77fb      	strb	r3, [r7, #31]
 800ab52:	7ffb      	ldrb	r3, [r7, #31]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d0a6      	beq.n	800aaa6 <dir_find+0x3c>
 800ab58:	e000      	b.n	800ab5c <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800ab5a:	bf00      	nop
		}
		return res;
 800ab5c:	7ffb      	ldrb	r3, [r7, #31]
 800ab5e:	e0a9      	b.n	800acb4 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ab60:	23ff      	movs	r3, #255	; 0xff
 800ab62:	773b      	strb	r3, [r7, #28]
 800ab64:	7f3b      	ldrb	r3, [r7, #28]
 800ab66:	777b      	strb	r3, [r7, #29]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab6e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab74:	4619      	mov	r1, r3
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f7fe fab0 	bl	80090dc <move_window>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800ab80:	7ffb      	ldrb	r3, [r7, #31]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f040 8090 	bne.w	800aca8 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ab90:	7fbb      	ldrb	r3, [r7, #30]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d102      	bne.n	800ab9c <dir_find+0x132>
 800ab96:	2304      	movs	r3, #4
 800ab98:	77fb      	strb	r3, [r7, #31]
 800ab9a:	e08a      	b.n	800acb2 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aba0:	330b      	adds	r3, #11
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aba8:	72fb      	strb	r3, [r7, #11]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	7afa      	ldrb	r2, [r7, #11]
 800abae:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800abb0:	7fbb      	ldrb	r3, [r7, #30]
 800abb2:	2be5      	cmp	r3, #229	; 0xe5
 800abb4:	d007      	beq.n	800abc6 <dir_find+0x15c>
 800abb6:	7afb      	ldrb	r3, [r7, #11]
 800abb8:	f003 0308 	and.w	r3, r3, #8
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d009      	beq.n	800abd4 <dir_find+0x16a>
 800abc0:	7afb      	ldrb	r3, [r7, #11]
 800abc2:	2b0f      	cmp	r3, #15
 800abc4:	d006      	beq.n	800abd4 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800abc6:	23ff      	movs	r3, #255	; 0xff
 800abc8:	777b      	strb	r3, [r7, #29]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f04f 32ff 	mov.w	r2, #4294967295
 800abd0:	64da      	str	r2, [r3, #76]	; 0x4c
 800abd2:	e05e      	b.n	800ac92 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800abd4:	7afb      	ldrb	r3, [r7, #11]
 800abd6:	2b0f      	cmp	r3, #15
 800abd8:	d136      	bne.n	800ac48 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800abe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d154      	bne.n	800ac92 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800abe8:	7fbb      	ldrb	r3, [r7, #30]
 800abea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00d      	beq.n	800ac0e <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abf6:	7b5b      	ldrb	r3, [r3, #13]
 800abf8:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800abfa:	7fbb      	ldrb	r3, [r7, #30]
 800abfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac00:	77bb      	strb	r3, [r7, #30]
 800ac02:	7fbb      	ldrb	r3, [r7, #30]
 800ac04:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ac0e:	7fba      	ldrb	r2, [r7, #30]
 800ac10:	7f7b      	ldrb	r3, [r7, #29]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d115      	bne.n	800ac42 <dir_find+0x1d8>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac1a:	330d      	adds	r3, #13
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	7f3a      	ldrb	r2, [r7, #28]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d10e      	bne.n	800ac42 <dir_find+0x1d8>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	68da      	ldr	r2, [r3, #12]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	4610      	mov	r0, r2
 800ac30:	f7ff fa4e 	bl	800a0d0 <cmp_lfn>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d003      	beq.n	800ac42 <dir_find+0x1d8>
 800ac3a:	7f7b      	ldrb	r3, [r7, #29]
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	e000      	b.n	800ac44 <dir_find+0x1da>
 800ac42:	23ff      	movs	r3, #255	; 0xff
 800ac44:	777b      	strb	r3, [r7, #29]
 800ac46:	e024      	b.n	800ac92 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ac48:	7f7b      	ldrb	r3, [r7, #29]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d109      	bne.n	800ac62 <dir_find+0x1f8>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7ff fc06 	bl	800a464 <sum_sfn>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	7f3b      	ldrb	r3, [r7, #28]
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d024      	beq.n	800acac <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ac68:	f003 0301 	and.w	r3, r3, #1
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10a      	bne.n	800ac86 <dir_find+0x21c>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	3340      	adds	r3, #64	; 0x40
 800ac78:	220b      	movs	r2, #11
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	f7fe f844 	bl	8008d08 <mem_cmp>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d014      	beq.n	800acb0 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ac86:	23ff      	movs	r3, #255	; 0xff
 800ac88:	777b      	strb	r3, [r7, #29]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac90:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ac92:	2100      	movs	r1, #0
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f7ff f8aa 	bl	8009dee <dir_next>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800ac9e:	7ffb      	ldrb	r3, [r7, #31]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f43f af65 	beq.w	800ab70 <dir_find+0x106>
 800aca6:	e004      	b.n	800acb2 <dir_find+0x248>
		if (res != FR_OK) break;
 800aca8:	bf00      	nop
 800acaa:	e002      	b.n	800acb2 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800acac:	bf00      	nop
 800acae:	e000      	b.n	800acb2 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800acb0:	bf00      	nop

	return res;
 800acb2:	7ffb      	ldrb	r3, [r7, #31]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3724      	adds	r7, #36	; 0x24
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd90      	pop	{r4, r7, pc}

0800acbc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800acbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800acc0:	b0a0      	sub	sp, #128	; 0x80
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800acd2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d001      	beq.n	800acde <dir_register+0x22>
 800acda:	2306      	movs	r3, #6
 800acdc:	e18e      	b.n	800affc <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800acde:	2300      	movs	r3, #0
 800ace0:	677b      	str	r3, [r7, #116]	; 0x74
 800ace2:	e002      	b.n	800acea <dir_register+0x2e>
 800ace4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ace6:	3301      	adds	r3, #1
 800ace8:	677b      	str	r3, [r7, #116]	; 0x74
 800acea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acec:	68da      	ldr	r2, [r3, #12]
 800acee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acf0:	005b      	lsls	r3, r3, #1
 800acf2:	4413      	add	r3, r2
 800acf4:	881b      	ldrh	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1f4      	bne.n	800ace4 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800acfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	2b04      	cmp	r3, #4
 800ad00:	f040 809f 	bne.w	800ae42 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800ad04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad06:	330e      	adds	r3, #14
 800ad08:	4aa2      	ldr	r2, [pc, #648]	; (800af94 <dir_register+0x2d8>)
 800ad0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad0e:	08db      	lsrs	r3, r3, #3
 800ad10:	3302      	adds	r3, #2
 800ad12:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800ad14:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f7ff f93e 	bl	8009f98 <dir_alloc>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800ad22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <dir_register+0x74>
 800ad2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ad2e:	e165      	b.n	800affc <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad36:	3b01      	subs	r3, #1
 800ad38:	015b      	lsls	r3, r3, #5
 800ad3a:	1ad2      	subs	r2, r2, r3
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d072      	beq.n	800ae2e <dir_register+0x172>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	79db      	ldrb	r3, [r3, #7]
 800ad4c:	f003 0304 	and.w	r3, r3, #4
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d06c      	beq.n	800ae2e <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ad5a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ad5c:	8949      	ldrh	r1, [r1, #10]
 800ad5e:	0249      	lsls	r1, r1, #9
 800ad60:	2000      	movs	r0, #0
 800ad62:	460c      	mov	r4, r1
 800ad64:	4605      	mov	r5, r0
 800ad66:	eb12 0804 	adds.w	r8, r2, r4
 800ad6a:	eb43 0905 	adc.w	r9, r3, r5
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7fe fd5a 	bl	8009830 <fill_first_frag>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ad82:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d002      	beq.n	800ad90 <dir_register+0xd4>
 800ad8a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ad8e:	e135      	b.n	800affc <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad96:	f04f 32ff 	mov.w	r2, #4294967295
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	f7fe fd77 	bl	800988e <fill_last_frag>
 800ada0:	4603      	mov	r3, r0
 800ada2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ada6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d002      	beq.n	800adb4 <dir_register+0xf8>
 800adae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800adb2:	e123      	b.n	800affc <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	f107 0308 	add.w	r3, r7, #8
 800adba:	4611      	mov	r1, r2
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7ff fc95 	bl	800a6ec <load_obj_dir>
 800adc2:	4603      	mov	r3, r0
 800adc4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800adc8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d002      	beq.n	800add6 <dir_register+0x11a>
 800add0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800add4:	e112      	b.n	800affc <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800add6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800add8:	691b      	ldr	r3, [r3, #16]
 800adda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ade4:	4608      	mov	r0, r1
 800ade6:	f7fd fece 	bl	8008b86 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800adea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800adf8:	4608      	mov	r0, r1
 800adfa:	f7fd fec4 	bl	8008b86 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	79da      	ldrb	r2, [r3, #7]
 800ae02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	3321      	adds	r3, #33	; 0x21
 800ae08:	f042 0201 	orr.w	r2, r2, #1
 800ae0c:	b2d2      	uxtb	r2, r2
 800ae0e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800ae10:	f107 0308 	add.w	r3, r7, #8
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7ff fc9f 	bl	800a758 <store_xdir>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ae20:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d002      	beq.n	800ae2e <dir_register+0x172>
 800ae28:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ae2c:	e0e6      	b.n	800affc <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800ae2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae30:	691a      	ldr	r2, [r3, #16]
 800ae32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	4619      	mov	r1, r3
 800ae38:	4610      	mov	r0, r2
 800ae3a:	f7ff fce8 	bl	800a80e <create_xdir>
		return FR_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	e0dc      	b.n	800affc <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ae48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ae4c:	220c      	movs	r2, #12
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fd ff20 	bl	8008c94 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ae54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ae58:	f003 0301 	and.w	r3, r3, #1
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d033      	beq.n	800aec8 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2240      	movs	r2, #64	; 0x40
 800ae64:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800ae68:	2301      	movs	r3, #1
 800ae6a:	67bb      	str	r3, [r7, #120]	; 0x78
 800ae6c:	e016      	b.n	800ae9c <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800ae74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae76:	68da      	ldr	r2, [r3, #12]
 800ae78:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800ae7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae7e:	f7ff fa63 	bl	800a348 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f7ff fdf1 	bl	800aa6a <dir_find>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800ae8e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d106      	bne.n	800aea4 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800ae96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae98:	3301      	adds	r3, #1
 800ae9a:	67bb      	str	r3, [r7, #120]	; 0x78
 800ae9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae9e:	2b63      	cmp	r3, #99	; 0x63
 800aea0:	d9e5      	bls.n	800ae6e <dir_register+0x1b2>
 800aea2:	e000      	b.n	800aea6 <dir_register+0x1ea>
			if (res != FR_OK) break;
 800aea4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800aea6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aea8:	2b64      	cmp	r3, #100	; 0x64
 800aeaa:	d101      	bne.n	800aeb0 <dir_register+0x1f4>
 800aeac:	2307      	movs	r3, #7
 800aeae:	e0a5      	b.n	800affc <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800aeb0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aeb4:	2b04      	cmp	r3, #4
 800aeb6:	d002      	beq.n	800aebe <dir_register+0x202>
 800aeb8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aebc:	e09e      	b.n	800affc <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800aebe:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800aec8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aecc:	f003 0302 	and.w	r3, r3, #2
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d007      	beq.n	800aee4 <dir_register+0x228>
 800aed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aed6:	330c      	adds	r3, #12
 800aed8:	4a2f      	ldr	r2, [pc, #188]	; (800af98 <dir_register+0x2dc>)
 800aeda:	fba2 2303 	umull	r2, r3, r2, r3
 800aede:	089b      	lsrs	r3, r3, #2
 800aee0:	3301      	adds	r3, #1
 800aee2:	e000      	b.n	800aee6 <dir_register+0x22a>
 800aee4:	2301      	movs	r3, #1
 800aee6:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800aee8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f7ff f854 	bl	8009f98 <dir_alloc>
 800aef0:	4603      	mov	r3, r0
 800aef2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800aef6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d14f      	bne.n	800af9e <dir_register+0x2e2>
 800aefe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af00:	3b01      	subs	r3, #1
 800af02:	673b      	str	r3, [r7, #112]	; 0x70
 800af04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af06:	2b00      	cmp	r3, #0
 800af08:	d049      	beq.n	800af9e <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af10:	015b      	lsls	r3, r3, #5
 800af12:	1ad3      	subs	r3, r2, r3
 800af14:	4619      	mov	r1, r3
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f7fe fee3 	bl	8009ce2 <dir_sdi>
 800af1c:	4603      	mov	r3, r0
 800af1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800af22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800af26:	2b00      	cmp	r3, #0
 800af28:	d139      	bne.n	800af9e <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	3340      	adds	r3, #64	; 0x40
 800af2e:	4618      	mov	r0, r3
 800af30:	f7ff fa98 	bl	800a464 <sum_sfn>
 800af34:	4603      	mov	r3, r0
 800af36:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af3e:	4619      	mov	r1, r3
 800af40:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800af42:	f7fe f8cb 	bl	80090dc <move_window>
 800af46:	4603      	mov	r3, r0
 800af48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800af4c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800af50:	2b00      	cmp	r3, #0
 800af52:	d123      	bne.n	800af9c <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800af54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af56:	68d8      	ldr	r0, [r3, #12]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800af5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af5e:	b2da      	uxtb	r2, r3
 800af60:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800af64:	f7ff f988 	bl	800a278 <put_lfn>
				fs->wflag = 1;
 800af68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af6a:	2201      	movs	r2, #1
 800af6c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800af6e:	2100      	movs	r1, #0
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f7fe ff3c 	bl	8009dee <dir_next>
 800af76:	4603      	mov	r3, r0
 800af78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800af7c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800af80:	2b00      	cmp	r3, #0
 800af82:	d10c      	bne.n	800af9e <dir_register+0x2e2>
 800af84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af86:	3b01      	subs	r3, #1
 800af88:	673b      	str	r3, [r7, #112]	; 0x70
 800af8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1d4      	bne.n	800af3a <dir_register+0x27e>
 800af90:	e005      	b.n	800af9e <dir_register+0x2e2>
 800af92:	bf00      	nop
 800af94:	88888889 	.word	0x88888889
 800af98:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800af9c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800af9e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d128      	bne.n	800aff8 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afaa:	4619      	mov	r1, r3
 800afac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800afae:	f7fe f895 	bl	80090dc <move_window>
 800afb2:	4603      	mov	r3, r0
 800afb4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800afb8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d11b      	bne.n	800aff8 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afc4:	2220      	movs	r2, #32
 800afc6:	2100      	movs	r1, #0
 800afc8:	4618      	mov	r0, r3
 800afca:	f7fd fe83 	bl	8008cd4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	3340      	adds	r3, #64	; 0x40
 800afd6:	220b      	movs	r2, #11
 800afd8:	4619      	mov	r1, r3
 800afda:	f7fd fe5b 	bl	8008c94 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afe8:	330c      	adds	r3, #12
 800afea:	f002 0218 	and.w	r2, r2, #24
 800afee:	b2d2      	uxtb	r2, r2
 800aff0:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800aff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aff4:	2201      	movs	r2, #1
 800aff6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800aff8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800affc:	4618      	mov	r0, r3
 800affe:	3780      	adds	r7, #128	; 0x80
 800b000:	46bd      	mov	sp, r7
 800b002:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b006:	bf00      	nop

0800b008 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b08a      	sub	sp, #40	; 0x28
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	613b      	str	r3, [r7, #16]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	60fb      	str	r3, [r7, #12]
 800b020:	2300      	movs	r3, #0
 800b022:	617b      	str	r3, [r7, #20]
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b028:	69bb      	ldr	r3, [r7, #24]
 800b02a:	1c5a      	adds	r2, r3, #1
 800b02c:	61ba      	str	r2, [r7, #24]
 800b02e:	693a      	ldr	r2, [r7, #16]
 800b030:	4413      	add	r3, r2
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b038:	2b1f      	cmp	r3, #31
 800b03a:	d940      	bls.n	800b0be <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b03c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b03e:	2b2f      	cmp	r3, #47	; 0x2f
 800b040:	d006      	beq.n	800b050 <create_name+0x48>
 800b042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b044:	2b5c      	cmp	r3, #92	; 0x5c
 800b046:	d110      	bne.n	800b06a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b048:	e002      	b.n	800b050 <create_name+0x48>
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	3301      	adds	r3, #1
 800b04e:	61bb      	str	r3, [r7, #24]
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	4413      	add	r3, r2
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	2b2f      	cmp	r3, #47	; 0x2f
 800b05a:	d0f6      	beq.n	800b04a <create_name+0x42>
 800b05c:	693a      	ldr	r2, [r7, #16]
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	4413      	add	r3, r2
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	2b5c      	cmp	r3, #92	; 0x5c
 800b066:	d0f0      	beq.n	800b04a <create_name+0x42>
			break;
 800b068:	e02a      	b.n	800b0c0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	2bfe      	cmp	r3, #254	; 0xfe
 800b06e:	d901      	bls.n	800b074 <create_name+0x6c>
 800b070:	2306      	movs	r3, #6
 800b072:	e17d      	b.n	800b370 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b074:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b076:	b2db      	uxtb	r3, r3
 800b078:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b07a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b07c:	2101      	movs	r1, #1
 800b07e:	4618      	mov	r0, r3
 800b080:	f002 fb02 	bl	800d688 <ff_convert>
 800b084:	4603      	mov	r3, r0
 800b086:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b088:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <create_name+0x8a>
 800b08e:	2306      	movs	r3, #6
 800b090:	e16e      	b.n	800b370 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b092:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b094:	2b7f      	cmp	r3, #127	; 0x7f
 800b096:	d809      	bhi.n	800b0ac <create_name+0xa4>
 800b098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b09a:	4619      	mov	r1, r3
 800b09c:	488d      	ldr	r0, [pc, #564]	; (800b2d4 <create_name+0x2cc>)
 800b09e:	f7fd fe59 	bl	8008d54 <chk_chr>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d001      	beq.n	800b0ac <create_name+0xa4>
 800b0a8:	2306      	movs	r3, #6
 800b0aa:	e161      	b.n	800b370 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	1c5a      	adds	r2, r3, #1
 800b0b0:	617a      	str	r2, [r7, #20]
 800b0b2:	005b      	lsls	r3, r3, #1
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b0ba:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b0bc:	e7b4      	b.n	800b028 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b0be:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	441a      	add	r2, r3
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b0ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0cc:	2b1f      	cmp	r3, #31
 800b0ce:	d801      	bhi.n	800b0d4 <create_name+0xcc>
 800b0d0:	2304      	movs	r3, #4
 800b0d2:	e000      	b.n	800b0d6 <create_name+0xce>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b0da:	e011      	b.n	800b100 <create_name+0xf8>
		w = lfn[di - 1];
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	005b      	lsls	r3, r3, #1
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	881b      	ldrh	r3, [r3, #0]
 800b0ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b0ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0f0:	2b20      	cmp	r3, #32
 800b0f2:	d002      	beq.n	800b0fa <create_name+0xf2>
 800b0f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0f6:	2b2e      	cmp	r3, #46	; 0x2e
 800b0f8:	d106      	bne.n	800b108 <create_name+0x100>
		di--;
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1ea      	bne.n	800b0dc <create_name+0xd4>
 800b106:	e000      	b.n	800b10a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b108:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	005b      	lsls	r3, r3, #1
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	4413      	add	r3, r2
 800b112:	2200      	movs	r2, #0
 800b114:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d101      	bne.n	800b120 <create_name+0x118>
 800b11c:	2306      	movs	r3, #6
 800b11e:	e127      	b.n	800b370 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	3340      	adds	r3, #64	; 0x40
 800b124:	220b      	movs	r2, #11
 800b126:	2120      	movs	r1, #32
 800b128:	4618      	mov	r0, r3
 800b12a:	f7fd fdd3 	bl	8008cd4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b12e:	2300      	movs	r3, #0
 800b130:	61bb      	str	r3, [r7, #24]
 800b132:	e002      	b.n	800b13a <create_name+0x132>
 800b134:	69bb      	ldr	r3, [r7, #24]
 800b136:	3301      	adds	r3, #1
 800b138:	61bb      	str	r3, [r7, #24]
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	005b      	lsls	r3, r3, #1
 800b13e:	68fa      	ldr	r2, [r7, #12]
 800b140:	4413      	add	r3, r2
 800b142:	881b      	ldrh	r3, [r3, #0]
 800b144:	2b20      	cmp	r3, #32
 800b146:	d0f5      	beq.n	800b134 <create_name+0x12c>
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	005b      	lsls	r3, r3, #1
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	4413      	add	r3, r2
 800b150:	881b      	ldrh	r3, [r3, #0]
 800b152:	2b2e      	cmp	r3, #46	; 0x2e
 800b154:	d0ee      	beq.n	800b134 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d009      	beq.n	800b170 <create_name+0x168>
 800b15c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b160:	f043 0303 	orr.w	r3, r3, #3
 800b164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b168:	e002      	b.n	800b170 <create_name+0x168>
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	3b01      	subs	r3, #1
 800b16e:	617b      	str	r3, [r7, #20]
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d009      	beq.n	800b18a <create_name+0x182>
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b17c:	3b01      	subs	r3, #1
 800b17e:	005b      	lsls	r3, r3, #1
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	4413      	add	r3, r2
 800b184:	881b      	ldrh	r3, [r3, #0]
 800b186:	2b2e      	cmp	r3, #46	; 0x2e
 800b188:	d1ef      	bne.n	800b16a <create_name+0x162>

	i = b = 0; ni = 8;
 800b18a:	2300      	movs	r3, #0
 800b18c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b190:	2300      	movs	r3, #0
 800b192:	623b      	str	r3, [r7, #32]
 800b194:	2308      	movs	r3, #8
 800b196:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	1c5a      	adds	r2, r3, #1
 800b19c:	61ba      	str	r2, [r7, #24]
 800b19e:	005b      	lsls	r3, r3, #1
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	881b      	ldrh	r3, [r3, #0]
 800b1a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b1a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	f000 8090 	beq.w	800b2d0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b1b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1b2:	2b20      	cmp	r3, #32
 800b1b4:	d006      	beq.n	800b1c4 <create_name+0x1bc>
 800b1b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1b8:	2b2e      	cmp	r3, #46	; 0x2e
 800b1ba:	d10a      	bne.n	800b1d2 <create_name+0x1ca>
 800b1bc:	69ba      	ldr	r2, [r7, #24]
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d006      	beq.n	800b1d2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b1c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1c8:	f043 0303 	orr.w	r3, r3, #3
 800b1cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b1d0:	e07d      	b.n	800b2ce <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b1d2:	6a3a      	ldr	r2, [r7, #32]
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d203      	bcs.n	800b1e2 <create_name+0x1da>
 800b1da:	69ba      	ldr	r2, [r7, #24]
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d123      	bne.n	800b22a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	2b0b      	cmp	r3, #11
 800b1e6:	d106      	bne.n	800b1f6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b1e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1ec:	f043 0303 	orr.w	r3, r3, #3
 800b1f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b1f4:	e075      	b.n	800b2e2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b1f6:	69ba      	ldr	r2, [r7, #24]
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d005      	beq.n	800b20a <create_name+0x202>
 800b1fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b202:	f043 0303 	orr.w	r3, r3, #3
 800b206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b20a:	69ba      	ldr	r2, [r7, #24]
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d866      	bhi.n	800b2e0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	61bb      	str	r3, [r7, #24]
 800b216:	2308      	movs	r3, #8
 800b218:	623b      	str	r3, [r7, #32]
 800b21a:	230b      	movs	r3, #11
 800b21c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b21e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b228:	e051      	b.n	800b2ce <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b22a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b22c:	2b7f      	cmp	r3, #127	; 0x7f
 800b22e:	d914      	bls.n	800b25a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b230:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b232:	2100      	movs	r1, #0
 800b234:	4618      	mov	r0, r3
 800b236:	f002 fa27 	bl	800d688 <ff_convert>
 800b23a:	4603      	mov	r3, r0
 800b23c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b23e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b240:	2b00      	cmp	r3, #0
 800b242:	d004      	beq.n	800b24e <create_name+0x246>
 800b244:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b246:	3b80      	subs	r3, #128	; 0x80
 800b248:	4a23      	ldr	r2, [pc, #140]	; (800b2d8 <create_name+0x2d0>)
 800b24a:	5cd3      	ldrb	r3, [r2, r3]
 800b24c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b24e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b252:	f043 0302 	orr.w	r3, r3, #2
 800b256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b25a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d007      	beq.n	800b270 <create_name+0x268>
 800b260:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b262:	4619      	mov	r1, r3
 800b264:	481d      	ldr	r0, [pc, #116]	; (800b2dc <create_name+0x2d4>)
 800b266:	f7fd fd75 	bl	8008d54 <chk_chr>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d008      	beq.n	800b282 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b270:	235f      	movs	r3, #95	; 0x5f
 800b272:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b278:	f043 0303 	orr.w	r3, r3, #3
 800b27c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b280:	e01b      	b.n	800b2ba <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b282:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b284:	2b40      	cmp	r3, #64	; 0x40
 800b286:	d909      	bls.n	800b29c <create_name+0x294>
 800b288:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b28a:	2b5a      	cmp	r3, #90	; 0x5a
 800b28c:	d806      	bhi.n	800b29c <create_name+0x294>
					b |= 2;
 800b28e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b292:	f043 0302 	orr.w	r3, r3, #2
 800b296:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b29a:	e00e      	b.n	800b2ba <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b29c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b29e:	2b60      	cmp	r3, #96	; 0x60
 800b2a0:	d90b      	bls.n	800b2ba <create_name+0x2b2>
 800b2a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2a4:	2b7a      	cmp	r3, #122	; 0x7a
 800b2a6:	d808      	bhi.n	800b2ba <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b2a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b2ac:	f043 0301 	orr.w	r3, r3, #1
 800b2b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b2b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2b6:	3b20      	subs	r3, #32
 800b2b8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b2ba:	6a3b      	ldr	r3, [r7, #32]
 800b2bc:	1c5a      	adds	r2, r3, #1
 800b2be:	623a      	str	r2, [r7, #32]
 800b2c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b2c2:	b2d1      	uxtb	r1, r2
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	460a      	mov	r2, r1
 800b2ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800b2ce:	e763      	b.n	800b198 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b2d0:	bf00      	nop
 800b2d2:	e006      	b.n	800b2e2 <create_name+0x2da>
 800b2d4:	080144a8 	.word	0x080144a8
 800b2d8:	08014750 	.word	0x08014750
 800b2dc:	080144b4 	.word	0x080144b4
			if (si > di) break;			/* No extension */
 800b2e0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b2e8:	2be5      	cmp	r3, #229	; 0xe5
 800b2ea:	d103      	bne.n	800b2f4 <create_name+0x2ec>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2205      	movs	r2, #5
 800b2f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	2b08      	cmp	r3, #8
 800b2f8:	d104      	bne.n	800b304 <create_name+0x2fc>
 800b2fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b304:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b308:	f003 030c 	and.w	r3, r3, #12
 800b30c:	2b0c      	cmp	r3, #12
 800b30e:	d005      	beq.n	800b31c <create_name+0x314>
 800b310:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b314:	f003 0303 	and.w	r3, r3, #3
 800b318:	2b03      	cmp	r3, #3
 800b31a:	d105      	bne.n	800b328 <create_name+0x320>
 800b31c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b320:	f043 0302 	orr.w	r3, r3, #2
 800b324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b32c:	f003 0302 	and.w	r3, r3, #2
 800b330:	2b00      	cmp	r3, #0
 800b332:	d117      	bne.n	800b364 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b334:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b338:	f003 0303 	and.w	r3, r3, #3
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d105      	bne.n	800b34c <create_name+0x344>
 800b340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b344:	f043 0310 	orr.w	r3, r3, #16
 800b348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b34c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b350:	f003 030c 	and.w	r3, r3, #12
 800b354:	2b04      	cmp	r3, #4
 800b356:	d105      	bne.n	800b364 <create_name+0x35c>
 800b358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b35c:	f043 0308 	orr.w	r3, r3, #8
 800b360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b36a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800b36e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b370:	4618      	mov	r0, r3
 800b372:	3728      	adds	r7, #40	; 0x28
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b086      	sub	sp, #24
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b38c:	e002      	b.n	800b394 <follow_path+0x1c>
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	3301      	adds	r3, #1
 800b392:	603b      	str	r3, [r7, #0]
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	2b2f      	cmp	r3, #47	; 0x2f
 800b39a:	d0f8      	beq.n	800b38e <follow_path+0x16>
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	2b5c      	cmp	r3, #92	; 0x5c
 800b3a2:	d0f4      	beq.n	800b38e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	2b1f      	cmp	r3, #31
 800b3b6:	d80a      	bhi.n	800b3ce <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2280      	movs	r2, #128	; 0x80
 800b3bc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f7fe fc8d 	bl	8009ce2 <dir_sdi>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	75fb      	strb	r3, [r7, #23]
 800b3cc:	e078      	b.n	800b4c0 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b3ce:	463b      	mov	r3, r7
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f7ff fe18 	bl	800b008 <create_name>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d169      	bne.n	800b4b6 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7ff fb41 	bl	800aa6a <dir_find>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b3f2:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b3f4:	7dfb      	ldrb	r3, [r7, #23]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00a      	beq.n	800b410 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b3fa:	7dfb      	ldrb	r3, [r7, #23]
 800b3fc:	2b04      	cmp	r3, #4
 800b3fe:	d15c      	bne.n	800b4ba <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b400:	7afb      	ldrb	r3, [r7, #11]
 800b402:	f003 0304 	and.w	r3, r3, #4
 800b406:	2b00      	cmp	r3, #0
 800b408:	d157      	bne.n	800b4ba <follow_path+0x142>
 800b40a:	2305      	movs	r3, #5
 800b40c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b40e:	e054      	b.n	800b4ba <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b410:	7afb      	ldrb	r3, [r7, #11]
 800b412:	f003 0304 	and.w	r3, r3, #4
 800b416:	2b00      	cmp	r3, #0
 800b418:	d151      	bne.n	800b4be <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	799b      	ldrb	r3, [r3, #6]
 800b41e:	f003 0310 	and.w	r3, r3, #16
 800b422:	2b00      	cmp	r3, #0
 800b424:	d102      	bne.n	800b42c <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800b426:	2305      	movs	r3, #5
 800b428:	75fb      	strb	r3, [r7, #23]
 800b42a:	e049      	b.n	800b4c0 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	2b04      	cmp	r3, #4
 800b432:	d130      	bne.n	800b496 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	689a      	ldr	r2, [r3, #8]
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b442:	4613      	mov	r3, r2
 800b444:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b448:	693a      	ldr	r2, [r7, #16]
 800b44a:	79d2      	ldrb	r2, [r2, #7]
 800b44c:	431a      	orrs	r2, r3
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	3334      	adds	r3, #52	; 0x34
 800b460:	4618      	mov	r0, r3
 800b462:	f7fd fa50 	bl	8008906 <ld_dword>
 800b466:	4602      	mov	r2, r0
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	691b      	ldr	r3, [r3, #16]
 800b470:	3321      	adds	r3, #33	; 0x21
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	f003 0302 	and.w	r3, r3, #2
 800b478:	b2da      	uxtb	r2, r3
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	691b      	ldr	r3, [r3, #16]
 800b482:	3338      	adds	r3, #56	; 0x38
 800b484:	4618      	mov	r0, r3
 800b486:	f7fd fa60 	bl	800894a <ld_qword>
 800b48a:	4602      	mov	r2, r0
 800b48c:	460b      	mov	r3, r1
 800b48e:	6939      	ldr	r1, [r7, #16]
 800b490:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800b494:	e79b      	b.n	800b3ce <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4a4:	4413      	add	r3, r2
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f7fe fdd1 	bl	800a050 <ld_clust>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b4b4:	e78b      	b.n	800b3ce <follow_path+0x56>
			if (res != FR_OK) break;
 800b4b6:	bf00      	nop
 800b4b8:	e002      	b.n	800b4c0 <follow_path+0x148>
				break;
 800b4ba:	bf00      	nop
 800b4bc:	e000      	b.n	800b4c0 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b4be:	bf00      	nop
			}
		}
	}

	return res;
 800b4c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3718      	adds	r7, #24
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b4ca:	b480      	push	{r7}
 800b4cc:	b087      	sub	sp, #28
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b4d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d031      	beq.n	800b544 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	617b      	str	r3, [r7, #20]
 800b4e6:	e002      	b.n	800b4ee <get_ldnumber+0x24>
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	617b      	str	r3, [r7, #20]
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	2b1f      	cmp	r3, #31
 800b4f4:	d903      	bls.n	800b4fe <get_ldnumber+0x34>
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	2b3a      	cmp	r3, #58	; 0x3a
 800b4fc:	d1f4      	bne.n	800b4e8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	2b3a      	cmp	r3, #58	; 0x3a
 800b504:	d11c      	bne.n	800b540 <get_ldnumber+0x76>
			tp = *path;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	1c5a      	adds	r2, r3, #1
 800b510:	60fa      	str	r2, [r7, #12]
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	3b30      	subs	r3, #48	; 0x30
 800b516:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	2b09      	cmp	r3, #9
 800b51c:	d80e      	bhi.n	800b53c <get_ldnumber+0x72>
 800b51e:	68fa      	ldr	r2, [r7, #12]
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	429a      	cmp	r2, r3
 800b524:	d10a      	bne.n	800b53c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	2b03      	cmp	r3, #3
 800b52a:	d807      	bhi.n	800b53c <get_ldnumber+0x72>
					vol = (int)i;
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	3301      	adds	r3, #1
 800b534:	617b      	str	r3, [r7, #20]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	697a      	ldr	r2, [r7, #20]
 800b53a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	e002      	b.n	800b546 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b540:	2300      	movs	r3, #0
 800b542:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b544:	693b      	ldr	r3, [r7, #16]
}
 800b546:	4618      	mov	r0, r3
 800b548:	371c      	adds	r7, #28
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bc80      	pop	{r7}
 800b54e:	4770      	bx	lr

0800b550 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	70da      	strb	r2, [r3, #3]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f04f 32ff 	mov.w	r2, #4294967295
 800b566:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f7fd fdb6 	bl	80090dc <move_window>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d001      	beq.n	800b57a <check_fs+0x2a>
 800b576:	2304      	movs	r3, #4
 800b578:	e044      	b.n	800b604 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	3338      	adds	r3, #56	; 0x38
 800b57e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b582:	4618      	mov	r0, r3
 800b584:	f7fd f9a8 	bl	80088d8 <ld_word>
 800b588:	4603      	mov	r3, r0
 800b58a:	461a      	mov	r2, r3
 800b58c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b590:	429a      	cmp	r2, r3
 800b592:	d001      	beq.n	800b598 <check_fs+0x48>
 800b594:	2303      	movs	r3, #3
 800b596:	e035      	b.n	800b604 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b59e:	2be9      	cmp	r3, #233	; 0xe9
 800b5a0:	d009      	beq.n	800b5b6 <check_fs+0x66>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b5a8:	2beb      	cmp	r3, #235	; 0xeb
 800b5aa:	d11e      	bne.n	800b5ea <check_fs+0x9a>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b5b2:	2b90      	cmp	r3, #144	; 0x90
 800b5b4:	d119      	bne.n	800b5ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	3338      	adds	r3, #56	; 0x38
 800b5ba:	3336      	adds	r3, #54	; 0x36
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7fd f9a2 	bl	8008906 <ld_dword>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b5c8:	4a10      	ldr	r2, [pc, #64]	; (800b60c <check_fs+0xbc>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d101      	bne.n	800b5d2 <check_fs+0x82>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	e018      	b.n	800b604 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	3338      	adds	r3, #56	; 0x38
 800b5d6:	3352      	adds	r3, #82	; 0x52
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7fd f994 	bl	8008906 <ld_dword>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	4a0b      	ldr	r2, [pc, #44]	; (800b610 <check_fs+0xc0>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d101      	bne.n	800b5ea <check_fs+0x9a>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	e00c      	b.n	800b604 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	3338      	adds	r3, #56	; 0x38
 800b5ee:	220b      	movs	r2, #11
 800b5f0:	4908      	ldr	r1, [pc, #32]	; (800b614 <check_fs+0xc4>)
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7fd fb88 	bl	8008d08 <mem_cmp>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d101      	bne.n	800b602 <check_fs+0xb2>
 800b5fe:	2301      	movs	r3, #1
 800b600:	e000      	b.n	800b604 <check_fs+0xb4>
#endif
	return 2;
 800b602:	2302      	movs	r3, #2
}
 800b604:	4618      	mov	r0, r3
 800b606:	3708      	adds	r7, #8
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	00544146 	.word	0x00544146
 800b610:	33544146 	.word	0x33544146
 800b614:	080144bc 	.word	0x080144bc

0800b618 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b61c:	b09c      	sub	sp, #112	; 0x70
 800b61e:	af00      	add	r7, sp, #0
 800b620:	61f8      	str	r0, [r7, #28]
 800b622:	61b9      	str	r1, [r7, #24]
 800b624:	4613      	mov	r3, r2
 800b626:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	2200      	movs	r2, #0
 800b62c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b62e:	69f8      	ldr	r0, [r7, #28]
 800b630:	f7ff ff4b 	bl	800b4ca <get_ldnumber>
 800b634:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800b636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b638:	2b00      	cmp	r3, #0
 800b63a:	da01      	bge.n	800b640 <find_volume+0x28>
 800b63c:	230b      	movs	r3, #11
 800b63e:	e337      	b.n	800bcb0 <find_volume+0x698>


	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b640:	4a99      	ldr	r2, [pc, #612]	; (800b8a8 <find_volume+0x290>)
 800b642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b648:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b64a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d101      	bne.n	800b654 <find_volume+0x3c>
 800b650:	230c      	movs	r3, #12
 800b652:	e32d      	b.n	800bcb0 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b654:	69bb      	ldr	r3, [r7, #24]
 800b656:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b658:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b65a:	7dfb      	ldrb	r3, [r7, #23]
 800b65c:	f023 0301 	bic.w	r3, r3, #1
 800b660:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d01a      	beq.n	800b6a0 <find_volume+0x88>

		stat = disk_status(fs->drv);
 800b66a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b66c:	785b      	ldrb	r3, [r3, #1]
 800b66e:	4618      	mov	r0, r3
 800b670:	f7fd f892 	bl	8008798 <disk_status>
 800b674:	4603      	mov	r3, r0
 800b676:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b67a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b67e:	f003 0301 	and.w	r3, r3, #1
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10c      	bne.n	800b6a0 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b686:	7dfb      	ldrb	r3, [r7, #23]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d007      	beq.n	800b69c <find_volume+0x84>
 800b68c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b690:	f003 0304 	and.w	r3, r3, #4
 800b694:	2b00      	cmp	r3, #0
 800b696:	d001      	beq.n	800b69c <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800b698:	230a      	movs	r3, #10
 800b69a:	e309      	b.n	800bcb0 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 800b69c:	2300      	movs	r3, #0
 800b69e:	e307      	b.n	800bcb0 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b6a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b6a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6a8:	b2da      	uxtb	r2, r3
 800b6aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6ac:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b6ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6b0:	785b      	ldrb	r3, [r3, #1]
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7fd f88a 	bl	80087cc <disk_initialize>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b6be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b6c2:	f003 0301 	and.w	r3, r3, #1
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d001      	beq.n	800b6ce <find_volume+0xb6>
	  return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b6ca:	2303      	movs	r3, #3
 800b6cc:	e2f0      	b.n	800bcb0 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b6ce:	7dfb      	ldrb	r3, [r7, #23]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d007      	beq.n	800b6e4 <find_volume+0xcc>
 800b6d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b6d8:	f003 0304 	and.w	r3, r3, #4
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d001      	beq.n	800b6e4 <find_volume+0xcc>
	  return FR_WRITE_PROTECTED;
 800b6e0:	230a      	movs	r3, #10
 800b6e2:	e2e5      	b.n	800bcb0 <find_volume+0x698>
	  return FR_DISK_ERR;
	}
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b6e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b6ea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b6ec:	f7ff ff30 	bl	800b550 <check_fs>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b6f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	d14d      	bne.n	800b79a <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b6fe:	2300      	movs	r3, #0
 800b700:	65bb      	str	r3, [r7, #88]	; 0x58
 800b702:	e020      	b.n	800b746 <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b706:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b70a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b70c:	011b      	lsls	r3, r3, #4
 800b70e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b712:	4413      	add	r3, r2
 800b714:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b718:	3304      	adds	r3, #4
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d006      	beq.n	800b72e <find_volume+0x116>
 800b720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b722:	3308      	adds	r3, #8
 800b724:	4618      	mov	r0, r3
 800b726:	f7fd f8ee 	bl	8008906 <ld_dword>
 800b72a:	4602      	mov	r2, r0
 800b72c:	e000      	b.n	800b730 <find_volume+0x118>
 800b72e:	2200      	movs	r2, #0
 800b730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	3360      	adds	r3, #96	; 0x60
 800b736:	f107 0110 	add.w	r1, r7, #16
 800b73a:	440b      	add	r3, r1
 800b73c:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b742:	3301      	adds	r3, #1
 800b744:	65bb      	str	r3, [r7, #88]	; 0x58
 800b746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b748:	2b03      	cmp	r3, #3
 800b74a:	d9db      	bls.n	800b704 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b74c:	2300      	movs	r3, #0
 800b74e:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800b750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b752:	2b00      	cmp	r3, #0
 800b754:	d002      	beq.n	800b75c <find_volume+0x144>
 800b756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b758:	3b01      	subs	r3, #1
 800b75a:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b75c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	3360      	adds	r3, #96	; 0x60
 800b762:	f107 0210 	add.w	r2, r7, #16
 800b766:	4413      	add	r3, r2
 800b768:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800b76c:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b76e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b770:	2b00      	cmp	r3, #0
 800b772:	d005      	beq.n	800b780 <find_volume+0x168>
 800b774:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b776:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b778:	f7ff feea 	bl	800b550 <check_fs>
 800b77c:	4603      	mov	r3, r0
 800b77e:	e000      	b.n	800b782 <find_volume+0x16a>
 800b780:	2303      	movs	r3, #3
 800b782:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b786:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d905      	bls.n	800b79a <find_volume+0x182>
 800b78e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b790:	3301      	adds	r3, #1
 800b792:	65bb      	str	r3, [r7, #88]	; 0x58
 800b794:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b796:	2b03      	cmp	r3, #3
 800b798:	d9e0      	bls.n	800b75c <find_volume+0x144>
	}
	if (fmt == 4) {
 800b79a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b79e:	2b04      	cmp	r3, #4
 800b7a0:	d101      	bne.n	800b7a6 <find_volume+0x18e>
		return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e284      	b.n	800bcb0 <find_volume+0x698>
	}
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b7a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d901      	bls.n	800b7b2 <find_volume+0x19a>
 800b7ae:	230d      	movs	r3, #13
 800b7b0:	e27e      	b.n	800bcb0 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800b7b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	f040 80fa 	bne.w	800b9b0 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800b7bc:	230b      	movs	r3, #11
 800b7be:	65bb      	str	r3, [r7, #88]	; 0x58
 800b7c0:	e002      	b.n	800b7c8 <find_volume+0x1b0>
 800b7c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b7c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b7ca:	2b3f      	cmp	r3, #63	; 0x3f
 800b7cc:	d806      	bhi.n	800b7dc <find_volume+0x1c4>
 800b7ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b7d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b7d2:	4413      	add	r3, r2
 800b7d4:	3338      	adds	r3, #56	; 0x38
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d0f2      	beq.n	800b7c2 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800b7dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b7de:	2b3f      	cmp	r3, #63	; 0x3f
 800b7e0:	d801      	bhi.n	800b7e6 <find_volume+0x1ce>
 800b7e2:	230d      	movs	r3, #13
 800b7e4:	e264      	b.n	800bcb0 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800b7e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7e8:	3338      	adds	r3, #56	; 0x38
 800b7ea:	3368      	adds	r3, #104	; 0x68
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7fd f873 	bl	80088d8 <ld_word>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7f8:	d001      	beq.n	800b7fe <find_volume+0x1e6>
 800b7fa:	230d      	movs	r3, #13
 800b7fc:	e258      	b.n	800bcb0 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800b7fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b800:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800b804:	2b09      	cmp	r3, #9
 800b806:	d001      	beq.n	800b80c <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800b808:	230d      	movs	r3, #13
 800b80a:	e251      	b.n	800bcb0 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800b80c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b80e:	3338      	adds	r3, #56	; 0x38
 800b810:	3348      	adds	r3, #72	; 0x48
 800b812:	4618      	mov	r0, r3
 800b814:	f7fd f899 	bl	800894a <ld_qword>
 800b818:	4602      	mov	r2, r0
 800b81a:	460b      	mov	r3, r1
 800b81c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b81e:	2000      	movs	r0, #0
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	68b9      	ldr	r1, [r7, #8]
 800b826:	1851      	adds	r1, r2, r1
 800b828:	6039      	str	r1, [r7, #0]
 800b82a:	68f9      	ldr	r1, [r7, #12]
 800b82c:	eb43 0101 	adc.w	r1, r3, r1
 800b830:	6079      	str	r1, [r7, #4]
 800b832:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b836:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800b83a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d301      	bcc.n	800b846 <find_volume+0x22e>
 800b842:	230d      	movs	r3, #13
 800b844:	e234      	b.n	800bcb0 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800b846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b848:	3338      	adds	r3, #56	; 0x38
 800b84a:	3354      	adds	r3, #84	; 0x54
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7fd f85a 	bl	8008906 <ld_dword>
 800b852:	4602      	mov	r2, r0
 800b854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b856:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800b858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b85a:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 800b85e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b860:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800b862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b864:	789b      	ldrb	r3, [r3, #2]
 800b866:	2b01      	cmp	r3, #1
 800b868:	d001      	beq.n	800b86e <find_volume+0x256>
 800b86a:	230d      	movs	r3, #13
 800b86c:	e220      	b.n	800bcb0 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800b86e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b870:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b874:	461a      	mov	r2, r3
 800b876:	2301      	movs	r3, #1
 800b878:	4093      	lsls	r3, r2
 800b87a:	b29a      	uxth	r2, r3
 800b87c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b87e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800b880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b882:	895b      	ldrh	r3, [r3, #10]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d101      	bne.n	800b88c <find_volume+0x274>
 800b888:	230d      	movs	r3, #13
 800b88a:	e211      	b.n	800bcb0 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800b88c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b88e:	3338      	adds	r3, #56	; 0x38
 800b890:	335c      	adds	r3, #92	; 0x5c
 800b892:	4618      	mov	r0, r3
 800b894:	f7fd f837 	bl	8008906 <ld_dword>
 800b898:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800b89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b89c:	4a03      	ldr	r2, [pc, #12]	; (800b8ac <find_volume+0x294>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d906      	bls.n	800b8b0 <find_volume+0x298>
 800b8a2:	230d      	movs	r3, #13
 800b8a4:	e204      	b.n	800bcb0 <find_volume+0x698>
 800b8a6:	bf00      	nop
 800b8a8:	20002aec 	.word	0x20002aec
 800b8ac:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800b8b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8b2:	1c9a      	adds	r2, r3, #2
 800b8b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8b6:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800b8b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b8bc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800b8be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8c0:	3338      	adds	r3, #56	; 0x38
 800b8c2:	3358      	adds	r3, #88	; 0x58
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fd f81e 	bl	8008906 <ld_dword>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8ce:	441a      	add	r2, r3
 800b8d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8d2:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800b8d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8d6:	3338      	adds	r3, #56	; 0x38
 800b8d8:	3350      	adds	r3, #80	; 0x50
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fd f813 	bl	8008906 <ld_dword>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8e4:	441a      	add	r2, r3
 800b8e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8e8:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800b8ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	469a      	mov	sl, r3
 800b8f2:	4693      	mov	fp, r2
 800b8f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8f6:	895b      	ldrh	r3, [r3, #10]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8fc:	fb02 f303 	mul.w	r3, r2, r3
 800b900:	2200      	movs	r2, #0
 800b902:	4698      	mov	r8, r3
 800b904:	4691      	mov	r9, r2
 800b906:	eb1a 0408 	adds.w	r4, sl, r8
 800b90a:	eb4b 0509 	adc.w	r5, fp, r9
 800b90e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b912:	42a2      	cmp	r2, r4
 800b914:	41ab      	sbcs	r3, r5
 800b916:	d201      	bcs.n	800b91c <find_volume+0x304>
 800b918:	230d      	movs	r3, #13
 800b91a:	e1c9      	b.n	800bcb0 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800b91c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b91e:	3338      	adds	r3, #56	; 0x38
 800b920:	3360      	adds	r3, #96	; 0x60
 800b922:	4618      	mov	r0, r3
 800b924:	f7fc ffef 	bl	8008906 <ld_dword>
 800b928:	4602      	mov	r2, r0
 800b92a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b92c:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800b92e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b932:	4619      	mov	r1, r3
 800b934:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b936:	f7fd fc6d 	bl	8009214 <clust2sect>
 800b93a:	4603      	mov	r3, r0
 800b93c:	4619      	mov	r1, r3
 800b93e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b940:	f7fd fbcc 	bl	80090dc <move_window>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <find_volume+0x336>
 800b94a:	2301      	movs	r3, #1
 800b94c:	e1b0      	b.n	800bcb0 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800b94e:	2300      	movs	r3, #0
 800b950:	65bb      	str	r3, [r7, #88]	; 0x58
 800b952:	e015      	b.n	800b980 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800b954:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b956:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b958:	4413      	add	r3, r2
 800b95a:	3338      	adds	r3, #56	; 0x38
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	2b81      	cmp	r3, #129	; 0x81
 800b960:	d10b      	bne.n	800b97a <find_volume+0x362>
 800b962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b964:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b968:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b96a:	3314      	adds	r3, #20
 800b96c:	4413      	add	r3, r2
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fc ffc9 	bl	8008906 <ld_dword>
 800b974:	4603      	mov	r3, r0
 800b976:	2b02      	cmp	r3, #2
 800b978:	d007      	beq.n	800b98a <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800b97a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b97c:	3320      	adds	r3, #32
 800b97e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b986:	d3e5      	bcc.n	800b954 <find_volume+0x33c>
 800b988:	e000      	b.n	800b98c <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800b98a:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800b98c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b98e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b992:	d101      	bne.n	800b998 <find_volume+0x380>
 800b994:	230d      	movs	r3, #13
 800b996:	e18b      	b.n	800bcb0 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b99a:	f04f 32ff 	mov.w	r2, #4294967295
 800b99e:	619a      	str	r2, [r3, #24]
 800b9a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9a2:	699a      	ldr	r2, [r3, #24]
 800b9a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9a6:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800b9a8:	2304      	movs	r3, #4
 800b9aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b9ae:	e167      	b.n	800bc80 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b9b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9b2:	3338      	adds	r3, #56	; 0x38
 800b9b4:	330b      	adds	r3, #11
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7fc ff8e 	bl	80088d8 <ld_word>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9c2:	d001      	beq.n	800b9c8 <find_volume+0x3b0>
 800b9c4:	230d      	movs	r3, #13
 800b9c6:	e173      	b.n	800bcb0 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b9c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ca:	3338      	adds	r3, #56	; 0x38
 800b9cc:	3316      	adds	r3, #22
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7fc ff82 	bl	80088d8 <ld_word>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b9d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d106      	bne.n	800b9ec <find_volume+0x3d4>
 800b9de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9e0:	3338      	adds	r3, #56	; 0x38
 800b9e2:	3324      	adds	r3, #36	; 0x24
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7fc ff8e 	bl	8008906 <ld_dword>
 800b9ea:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800b9ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b9f0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b9f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9f4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800b9f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9fa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b9fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9fe:	789b      	ldrb	r3, [r3, #2]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d005      	beq.n	800ba10 <find_volume+0x3f8>
 800ba04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba06:	789b      	ldrb	r3, [r3, #2]
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	d001      	beq.n	800ba10 <find_volume+0x3f8>
 800ba0c:	230d      	movs	r3, #13
 800ba0e:	e14f      	b.n	800bcb0 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ba10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba12:	789b      	ldrb	r3, [r3, #2]
 800ba14:	461a      	mov	r2, r3
 800ba16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba18:	fb02 f303 	mul.w	r3, r2, r3
 800ba1c:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ba1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba24:	b29a      	uxth	r2, r3
 800ba26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba28:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ba2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba2c:	895b      	ldrh	r3, [r3, #10]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d008      	beq.n	800ba44 <find_volume+0x42c>
 800ba32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba34:	895b      	ldrh	r3, [r3, #10]
 800ba36:	461a      	mov	r2, r3
 800ba38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba3a:	895b      	ldrh	r3, [r3, #10]
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	4013      	ands	r3, r2
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d001      	beq.n	800ba48 <find_volume+0x430>
 800ba44:	230d      	movs	r3, #13
 800ba46:	e133      	b.n	800bcb0 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ba48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba4a:	3338      	adds	r3, #56	; 0x38
 800ba4c:	3311      	adds	r3, #17
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fc ff42 	bl	80088d8 <ld_word>
 800ba54:	4603      	mov	r3, r0
 800ba56:	461a      	mov	r2, r3
 800ba58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba5a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ba5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba5e:	891b      	ldrh	r3, [r3, #8]
 800ba60:	f003 030f 	and.w	r3, r3, #15
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d001      	beq.n	800ba6e <find_volume+0x456>
 800ba6a:	230d      	movs	r3, #13
 800ba6c:	e120      	b.n	800bcb0 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ba6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba70:	3338      	adds	r3, #56	; 0x38
 800ba72:	3313      	adds	r3, #19
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fc ff2f 	bl	80088d8 <ld_word>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ba7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d106      	bne.n	800ba92 <find_volume+0x47a>
 800ba84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba86:	3338      	adds	r3, #56	; 0x38
 800ba88:	3320      	adds	r3, #32
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7fc ff3b 	bl	8008906 <ld_dword>
 800ba90:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ba92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba94:	3338      	adds	r3, #56	; 0x38
 800ba96:	330e      	adds	r3, #14
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7fc ff1d 	bl	80088d8 <ld_word>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800baa4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d101      	bne.n	800bab0 <find_volume+0x498>
 800baac:	230d      	movs	r3, #13
 800baae:	e0ff      	b.n	800bcb0 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bab0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800bab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bab6:	4413      	add	r3, r2
 800bab8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800baba:	8912      	ldrh	r2, [r2, #8]
 800babc:	0912      	lsrs	r2, r2, #4
 800babe:	b292      	uxth	r2, r2
 800bac0:	4413      	add	r3, r2
 800bac2:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bac4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bac8:	429a      	cmp	r2, r3
 800baca:	d201      	bcs.n	800bad0 <find_volume+0x4b8>
 800bacc:	230d      	movs	r3, #13
 800bace:	e0ef      	b.n	800bcb0 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bad0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bad8:	8952      	ldrh	r2, [r2, #10]
 800bada:	fbb3 f3f2 	udiv	r3, r3, r2
 800bade:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d101      	bne.n	800baea <find_volume+0x4d2>
 800bae6:	230d      	movs	r3, #13
 800bae8:	e0e2      	b.n	800bcb0 <find_volume+0x698>
		fmt = FS_FAT32;
 800baea:	2303      	movs	r3, #3
 800baec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800baf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baf2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d802      	bhi.n	800bb00 <find_volume+0x4e8>
 800bafa:	2302      	movs	r3, #2
 800bafc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bb00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb02:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d802      	bhi.n	800bb10 <find_volume+0x4f8>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bb10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb12:	1c9a      	adds	r2, r3, #2
 800bb14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb16:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800bb18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bb1c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bb1e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800bb22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb24:	441a      	add	r2, r3
 800bb26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb28:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800bb2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bb2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb2e:	441a      	add	r2, r3
 800bb30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb32:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800bb34:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bb38:	2b03      	cmp	r3, #3
 800bb3a:	d11e      	bne.n	800bb7a <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bb3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb3e:	3338      	adds	r3, #56	; 0x38
 800bb40:	332a      	adds	r3, #42	; 0x2a
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fc fec8 	bl	80088d8 <ld_word>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d001      	beq.n	800bb52 <find_volume+0x53a>
 800bb4e:	230d      	movs	r3, #13
 800bb50:	e0ae      	b.n	800bcb0 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bb52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb54:	891b      	ldrh	r3, [r3, #8]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <find_volume+0x546>
 800bb5a:	230d      	movs	r3, #13
 800bb5c:	e0a8      	b.n	800bcb0 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bb5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb60:	3338      	adds	r3, #56	; 0x38
 800bb62:	332c      	adds	r3, #44	; 0x2c
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7fc fece 	bl	8008906 <ld_dword>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb6e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bb70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb72:	69db      	ldr	r3, [r3, #28]
 800bb74:	009b      	lsls	r3, r3, #2
 800bb76:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb78:	e01f      	b.n	800bbba <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bb7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb7c:	891b      	ldrh	r3, [r3, #8]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d101      	bne.n	800bb86 <find_volume+0x56e>
 800bb82:	230d      	movs	r3, #13
 800bb84:	e094      	b.n	800bcb0 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bb86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb8c:	441a      	add	r2, r3
 800bb8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb90:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bb92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	d103      	bne.n	800bba2 <find_volume+0x58a>
 800bb9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb9c:	69db      	ldr	r3, [r3, #28]
 800bb9e:	005b      	lsls	r3, r3, #1
 800bba0:	e00a      	b.n	800bbb8 <find_volume+0x5a0>
 800bba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bba4:	69da      	ldr	r2, [r3, #28]
 800bba6:	4613      	mov	r3, r2
 800bba8:	005b      	lsls	r3, r3, #1
 800bbaa:	4413      	add	r3, r2
 800bbac:	085a      	lsrs	r2, r3, #1
 800bbae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbb0:	69db      	ldr	r3, [r3, #28]
 800bbb2:	f003 0301 	and.w	r3, r3, #1
 800bbb6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bbb8:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bbba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbbc:	6a1a      	ldr	r2, [r3, #32]
 800bbbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbc0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bbc4:	0a5b      	lsrs	r3, r3, #9
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d201      	bcs.n	800bbce <find_volume+0x5b6>
 800bbca:	230d      	movs	r3, #13
 800bbcc:	e070      	b.n	800bcb0 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bbce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbd0:	f04f 32ff 	mov.w	r2, #4294967295
 800bbd4:	619a      	str	r2, [r3, #24]
 800bbd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbd8:	699a      	ldr	r2, [r3, #24]
 800bbda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbdc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800bbde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbe0:	2280      	movs	r2, #128	; 0x80
 800bbe2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bbe4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bbe8:	2b03      	cmp	r3, #3
 800bbea:	d149      	bne.n	800bc80 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bbec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbee:	3338      	adds	r3, #56	; 0x38
 800bbf0:	3330      	adds	r3, #48	; 0x30
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7fc fe70 	bl	80088d8 <ld_word>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d140      	bne.n	800bc80 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bbfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc00:	3301      	adds	r3, #1
 800bc02:	4619      	mov	r1, r3
 800bc04:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bc06:	f7fd fa69 	bl	80090dc <move_window>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d137      	bne.n	800bc80 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800bc10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc12:	2200      	movs	r2, #0
 800bc14:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bc16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc18:	3338      	adds	r3, #56	; 0x38
 800bc1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fc fe5a 	bl	80088d8 <ld_word>
 800bc24:	4603      	mov	r3, r0
 800bc26:	461a      	mov	r2, r3
 800bc28:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d127      	bne.n	800bc80 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bc30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc32:	3338      	adds	r3, #56	; 0x38
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fc fe66 	bl	8008906 <ld_dword>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	4a1f      	ldr	r2, [pc, #124]	; (800bcbc <find_volume+0x6a4>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d11e      	bne.n	800bc80 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bc42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc44:	3338      	adds	r3, #56	; 0x38
 800bc46:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7fc fe5b 	bl	8008906 <ld_dword>
 800bc50:	4603      	mov	r3, r0
 800bc52:	4a1b      	ldr	r2, [pc, #108]	; (800bcc0 <find_volume+0x6a8>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d113      	bne.n	800bc80 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bc58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc5a:	3338      	adds	r3, #56	; 0x38
 800bc5c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fc fe50 	bl	8008906 <ld_dword>
 800bc66:	4602      	mov	r2, r0
 800bc68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc6a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bc6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc6e:	3338      	adds	r3, #56	; 0x38
 800bc70:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7fc fe46 	bl	8008906 <ld_dword>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc7e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bc80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc82:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800bc86:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bc88:	4b0e      	ldr	r3, [pc, #56]	; (800bcc4 <find_volume+0x6ac>)
 800bc8a:	881b      	ldrh	r3, [r3, #0]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	4b0c      	ldr	r3, [pc, #48]	; (800bcc4 <find_volume+0x6ac>)
 800bc92:	801a      	strh	r2, [r3, #0]
 800bc94:	4b0b      	ldr	r3, [pc, #44]	; (800bcc4 <find_volume+0x6ac>)
 800bc96:	881a      	ldrh	r2, [r3, #0]
 800bc98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc9a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bc9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc9e:	4a0a      	ldr	r2, [pc, #40]	; (800bcc8 <find_volume+0x6b0>)
 800bca0:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800bca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bca4:	4a09      	ldr	r2, [pc, #36]	; (800bccc <find_volume+0x6b4>)
 800bca6:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bca8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bcaa:	f7fd f9af 	bl	800900c <clear_lock>
#endif
	return FR_OK;
 800bcae:	2300      	movs	r3, #0
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3770      	adds	r7, #112	; 0x70
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcba:	bf00      	nop
 800bcbc:	41615252 	.word	0x41615252
 800bcc0:	61417272 	.word	0x61417272
 800bcc4:	20002afc 	.word	0x20002afc
 800bcc8:	20002d80 	.word	0x20002d80
 800bccc:	20002b20 	.word	0x20002b20

0800bcd0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bcda:	2309      	movs	r3, #9
 800bcdc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d01c      	beq.n	800bd1e <validate+0x4e>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d018      	beq.n	800bd1e <validate+0x4e>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d013      	beq.n	800bd1e <validate+0x4e>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	889a      	ldrh	r2, [r3, #4]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	88db      	ldrh	r3, [r3, #6]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d10c      	bne.n	800bd1e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	785b      	ldrb	r3, [r3, #1]
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fc fd44 	bl	8008798 <disk_status>
 800bd10:	4603      	mov	r3, r0
 800bd12:	f003 0301 	and.w	r3, r3, #1
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d101      	bne.n	800bd1e <validate+0x4e>
			res = FR_OK;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d102      	bne.n	800bd2a <validate+0x5a>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	e000      	b.n	800bd2c <validate+0x5c>
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	683a      	ldr	r2, [r7, #0]
 800bd2e:	6013      	str	r3, [r2, #0]
	return res;
 800bd30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3710      	adds	r7, #16
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
	...

0800bd3c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b088      	sub	sp, #32
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	4613      	mov	r3, r2
 800bd48:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bd4e:	f107 0310 	add.w	r3, r7, #16
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7ff fbb9 	bl	800b4ca <get_ldnumber>
 800bd58:	61f8      	str	r0, [r7, #28]

	if (vol < 0) return FR_INVALID_DRIVE;
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	da01      	bge.n	800bd64 <f_mount+0x28>
 800bd60:	230b      	movs	r3, #11
 800bd62:	e02b      	b.n	800bdbc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bd64:	4a17      	ldr	r2, [pc, #92]	; (800bdc4 <f_mount+0x88>)
 800bd66:	69fb      	ldr	r3, [r7, #28]
 800bd68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd6c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d005      	beq.n	800bd80 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bd74:	69b8      	ldr	r0, [r7, #24]
 800bd76:	f7fd f949 	bl	800900c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d002      	beq.n	800bd8c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	490d      	ldr	r1, [pc, #52]	; (800bdc4 <f_mount+0x88>)
 800bd90:	69fb      	ldr	r3, [r7, #28]
 800bd92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d002      	beq.n	800bda2 <f_mount+0x66>
 800bd9c:	79fb      	ldrb	r3, [r7, #7]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d001      	beq.n	800bda6 <f_mount+0x6a>
 800bda2:	2300      	movs	r3, #0
 800bda4:	e00a      	b.n	800bdbc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bda6:	f107 010c 	add.w	r1, r7, #12
 800bdaa:	f107 0308 	add.w	r3, r7, #8
 800bdae:	2200      	movs	r2, #0
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7ff fc31 	bl	800b618 <find_volume>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	75fb      	strb	r3, [r7, #23]

	LEAVE_FF(fs, res);
 800bdba:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3720      	adds	r7, #32
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	20002aec 	.word	0x20002aec

0800bdc8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bdc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bdcc:	b0a6      	sub	sp, #152	; 0x98
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	61f8      	str	r0, [r7, #28]
 800bdd2:	61b9      	str	r1, [r7, #24]
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d101      	bne.n	800bde2 <f_open+0x1a>
 800bdde:	2309      	movs	r3, #9
 800bde0:	e2ae      	b.n	800c340 <f_open+0x578>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bde2:	7dfb      	ldrb	r3, [r7, #23]
 800bde4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bde8:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800bdea:	7dfa      	ldrb	r2, [r7, #23]
 800bdec:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800bdf0:	f107 0318 	add.w	r3, r7, #24
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7ff fc0f 	bl	800b618 <find_volume>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 800be00:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800be04:	2b00      	cmp	r3, #0
 800be06:	f040 8292 	bne.w	800c32e <f_open+0x566>
		dj.obj.fs = fs;
 800be0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0c:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800be0e:	69ba      	ldr	r2, [r7, #24]
 800be10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be14:	4611      	mov	r1, r2
 800be16:	4618      	mov	r0, r3
 800be18:	f7ff faae 	bl	800b378 <follow_path>
 800be1c:	4603      	mov	r3, r0
 800be1e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800be22:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800be26:	2b00      	cmp	r3, #0
 800be28:	d11a      	bne.n	800be60 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800be2a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800be2e:	b25b      	sxtb	r3, r3
 800be30:	2b00      	cmp	r3, #0
 800be32:	da03      	bge.n	800be3c <f_open+0x74>
				res = FR_INVALID_NAME;
 800be34:	2306      	movs	r3, #6
 800be36:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800be3a:	e011      	b.n	800be60 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800be3c:	7dfb      	ldrb	r3, [r7, #23]
 800be3e:	f023 0301 	bic.w	r3, r3, #1
 800be42:	2b00      	cmp	r3, #0
 800be44:	bf14      	ite	ne
 800be46:	2301      	movne	r3, #1
 800be48:	2300      	moveq	r3, #0
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	461a      	mov	r2, r3
 800be4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be52:	4611      	mov	r1, r2
 800be54:	4618      	mov	r0, r3
 800be56:	f7fc ff97 	bl	8008d88 <chk_lock>
 800be5a:	4603      	mov	r3, r0
 800be5c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800be60:	7dfb      	ldrb	r3, [r7, #23]
 800be62:	f003 031c 	and.w	r3, r3, #28
 800be66:	2b00      	cmp	r3, #0
 800be68:	f000 8115 	beq.w	800c096 <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 800be6c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800be70:	2b00      	cmp	r3, #0
 800be72:	d017      	beq.n	800bea4 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800be74:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800be78:	2b04      	cmp	r3, #4
 800be7a:	d10e      	bne.n	800be9a <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800be7c:	f7fc ffde 	bl	8008e3c <enq_lock>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d006      	beq.n	800be94 <f_open+0xcc>
 800be86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fe ff16 	bl	800acbc <dir_register>
 800be90:	4603      	mov	r3, r0
 800be92:	e000      	b.n	800be96 <f_open+0xce>
 800be94:	2312      	movs	r3, #18
 800be96:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800be9a:	7dfb      	ldrb	r3, [r7, #23]
 800be9c:	f043 0308 	orr.w	r3, r3, #8
 800bea0:	75fb      	strb	r3, [r7, #23]
 800bea2:	e011      	b.n	800bec8 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bea4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bea8:	f003 0311 	and.w	r3, r3, #17
 800beac:	2b00      	cmp	r3, #0
 800beae:	d003      	beq.n	800beb8 <f_open+0xf0>
					res = FR_DENIED;
 800beb0:	2307      	movs	r3, #7
 800beb2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800beb6:	e007      	b.n	800bec8 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800beb8:	7dfb      	ldrb	r3, [r7, #23]
 800beba:	f003 0304 	and.w	r3, r3, #4
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d002      	beq.n	800bec8 <f_open+0x100>
 800bec2:	2308      	movs	r3, #8
 800bec4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bec8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800becc:	2b00      	cmp	r3, #0
 800bece:	f040 80fe 	bne.w	800c0ce <f_open+0x306>
 800bed2:	7dfb      	ldrb	r3, [r7, #23]
 800bed4:	f003 0308 	and.w	r3, r3, #8
 800bed8:	2b00      	cmp	r3, #0
 800beda:	f000 80f8 	beq.w	800c0ce <f_open+0x306>
				dw = GET_FATTIME();
 800bede:	f7fc f9ab 	bl	8008238 <get_fattime>
 800bee2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800bee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	2b04      	cmp	r3, #4
 800beec:	f040 8084 	bne.w	800bff8 <f_open+0x230>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800bef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bef2:	69fb      	ldr	r3, [r7, #28]
 800bef4:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800bef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef8:	691b      	ldr	r3, [r3, #16]
 800befa:	3334      	adds	r3, #52	; 0x34
 800befc:	4618      	mov	r0, r3
 800befe:	f7fc fd02 	bl	8008906 <ld_dword>
 800bf02:	4602      	mov	r2, r0
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800bf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0a:	691b      	ldr	r3, [r3, #16]
 800bf0c:	3338      	adds	r3, #56	; 0x38
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7fc fd1b 	bl	800894a <ld_qword>
 800bf14:	4602      	mov	r2, r0
 800bf16:	460b      	mov	r3, r1
 800bf18:	69f9      	ldr	r1, [r7, #28]
 800bf1a:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800bf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	3321      	adds	r3, #33	; 0x21
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	f003 0302 	and.w	r3, r3, #2
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	2200      	movs	r2, #0
 800bf34:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800bf36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf38:	691b      	ldr	r3, [r3, #16]
 800bf3a:	3308      	adds	r3, #8
 800bf3c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7fc fdf5 	bl	8008b30 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800bf46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf48:	691b      	ldr	r3, [r3, #16]
 800bf4a:	3314      	adds	r3, #20
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800bf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf52:	691b      	ldr	r3, [r3, #16]
 800bf54:	330c      	adds	r3, #12
 800bf56:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7fc fde8 	bl	8008b30 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800bf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf62:	691b      	ldr	r3, [r3, #16]
 800bf64:	3315      	adds	r3, #21
 800bf66:	2200      	movs	r2, #0
 800bf68:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	3304      	adds	r3, #4
 800bf70:	2220      	movs	r2, #32
 800bf72:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800bf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf76:	691b      	ldr	r3, [r3, #16]
 800bf78:	3334      	adds	r3, #52	; 0x34
 800bf7a:	2100      	movs	r1, #0
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7fc fdd7 	bl	8008b30 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800bf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf84:	691b      	ldr	r3, [r3, #16]
 800bf86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bf8a:	f04f 0200 	mov.w	r2, #0
 800bf8e:	f04f 0300 	mov.w	r3, #0
 800bf92:	4608      	mov	r0, r1
 800bf94:	f7fc fdf7 	bl	8008b86 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800bf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9a:	691b      	ldr	r3, [r3, #16]
 800bf9c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800bfa0:	f04f 0200 	mov.w	r2, #0
 800bfa4:	f04f 0300 	mov.w	r3, #0
 800bfa8:	4608      	mov	r0, r1
 800bfaa:	f7fc fdec 	bl	8008b86 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800bfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb0:	691b      	ldr	r3, [r3, #16]
 800bfb2:	3321      	adds	r3, #33	; 0x21
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800bfb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7fe fbcb 	bl	800a758 <store_xdir>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800bfc8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d17e      	bne.n	800c0ce <f_open+0x306>
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d07a      	beq.n	800c0ce <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800bfd8:	69f8      	ldr	r0, [r7, #28]
 800bfda:	69fb      	ldr	r3, [r7, #28]
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	f7fd fc85 	bl	80098f0 <remove_chain>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800bfec:	69fb      	ldr	r3, [r7, #28]
 800bfee:	689a      	ldr	r2, [r3, #8]
 800bff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff2:	3a01      	subs	r2, #1
 800bff4:	615a      	str	r2, [r3, #20]
 800bff6:	e06a      	b.n	800c0ce <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bffa:	330e      	adds	r3, #14
 800bffc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c000:	4618      	mov	r0, r3
 800c002:	f7fc fd95 	bl	8008b30 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c006:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c008:	3316      	adds	r3, #22
 800c00a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fc fd8e 	bl	8008b30 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c014:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c016:	330b      	adds	r3, #11
 800c018:	2220      	movs	r2, #32
 800c01a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c020:	4611      	mov	r1, r2
 800c022:	4618      	mov	r0, r3
 800c024:	f7fe f814 	bl	800a050 <ld_clust>
 800c028:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c030:	2200      	movs	r2, #0
 800c032:	4618      	mov	r0, r3
 800c034:	f7fe f82b 	bl	800a08e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c03a:	331c      	adds	r3, #28
 800c03c:	2100      	movs	r1, #0
 800c03e:	4618      	mov	r0, r3
 800c040:	f7fc fd76 	bl	8008b30 <st_dword>
					fs->wflag = 1;
 800c044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c046:	2201      	movs	r2, #1
 800c048:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c04a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d03d      	beq.n	800c0ce <f_open+0x306>
						dw = fs->winsect;
 800c052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c056:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						res = remove_chain(&dj.obj, cl, 0);
 800c05a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c05e:	2200      	movs	r2, #0
 800c060:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c064:	4618      	mov	r0, r3
 800c066:	f7fd fc43 	bl	80098f0 <remove_chain>
 800c06a:	4603      	mov	r3, r0
 800c06c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if (res == FR_OK) {
 800c070:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c074:	2b00      	cmp	r3, #0
 800c076:	d12a      	bne.n	800c0ce <f_open+0x306>
							res = move_window(fs, dw);
 800c078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c07e:	4618      	mov	r0, r3
 800c080:	f7fd f82c 	bl	80090dc <move_window>
 800c084:	4603      	mov	r3, r0
 800c086:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c090:	3a01      	subs	r2, #1
 800c092:	615a      	str	r2, [r3, #20]
 800c094:	e01b      	b.n	800c0ce <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c096:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d117      	bne.n	800c0ce <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c09e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c0a2:	f003 0310 	and.w	r3, r3, #16
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d003      	beq.n	800c0b2 <f_open+0x2ea>
					res = FR_NO_FILE;
 800c0aa:	2304      	movs	r3, #4
 800c0ac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800c0b0:	e00d      	b.n	800c0ce <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c0b2:	7dfb      	ldrb	r3, [r7, #23]
 800c0b4:	f003 0302 	and.w	r3, r3, #2
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d008      	beq.n	800c0ce <f_open+0x306>
 800c0bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c0c0:	f003 0301 	and.w	r3, r3, #1
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d002      	beq.n	800c0ce <f_open+0x306>
						res = FR_DENIED;
 800c0c8:	2307      	movs	r3, #7
 800c0ca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 800c0ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d128      	bne.n	800c128 <f_open+0x360>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c0d6:	7dfb      	ldrb	r3, [r7, #23]
 800c0d8:	f003 0308 	and.w	r3, r3, #8
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d003      	beq.n	800c0e8 <f_open+0x320>
				mode |= FA_MODIFIED;
 800c0e0:	7dfb      	ldrb	r3, [r7, #23]
 800c0e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0e6:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800c0f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c0f6:	7dfb      	ldrb	r3, [r7, #23]
 800c0f8:	f023 0301 	bic.w	r3, r3, #1
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	bf14      	ite	ne
 800c100:	2301      	movne	r3, #1
 800c102:	2300      	moveq	r3, #0
 800c104:	b2db      	uxtb	r3, r3
 800c106:	461a      	mov	r2, r3
 800c108:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c10c:	4611      	mov	r1, r2
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fc feb4 	bl	8008e7c <inc_lock>
 800c114:	4602      	mov	r2, r0
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d102      	bne.n	800c128 <f_open+0x360>
 800c122:	2302      	movs	r3, #2
 800c124:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c128:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f040 80fe 	bne.w	800c32e <f_open+0x566>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800c132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	2b04      	cmp	r3, #4
 800c138:	d12d      	bne.n	800c196 <f_open+0x3ce>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800c13a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800c140:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c144:	4613      	mov	r3, r2
 800c146:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c14a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c14e:	431a      	orrs	r2, r3
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800c154:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c156:	69fb      	ldr	r3, [r7, #28]
 800c158:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15c:	691b      	ldr	r3, [r3, #16]
 800c15e:	3334      	adds	r3, #52	; 0x34
 800c160:	4618      	mov	r0, r3
 800c162:	f7fc fbd0 	bl	8008906 <ld_dword>
 800c166:	4602      	mov	r2, r0
 800c168:	69fb      	ldr	r3, [r7, #28]
 800c16a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	691b      	ldr	r3, [r3, #16]
 800c170:	3338      	adds	r3, #56	; 0x38
 800c172:	4618      	mov	r0, r3
 800c174:	f7fc fbe9 	bl	800894a <ld_qword>
 800c178:	4602      	mov	r2, r0
 800c17a:	460b      	mov	r3, r1
 800c17c:	69f9      	ldr	r1, [r7, #28]
 800c17e:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	3321      	adds	r3, #33	; 0x21
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	f003 0302 	and.w	r3, r3, #2
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	71da      	strb	r2, [r3, #7]
 800c194:	e016      	b.n	800c1c4 <f_open+0x3fc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c198:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c19a:	4611      	mov	r1, r2
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7fd ff57 	bl	800a050 <ld_clust>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c1a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1aa:	331c      	adds	r3, #28
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fc fbaa 	bl	8008906 <ld_dword>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	60bb      	str	r3, [r7, #8]
 800c1b8:	60fa      	str	r2, [r7, #12]
 800c1ba:	69fb      	ldr	r3, [r7, #28]
 800c1bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c1c0:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c1ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d2:	88da      	ldrh	r2, [r3, #6]
 800c1d4:	69fb      	ldr	r3, [r7, #28]
 800c1d6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c1d8:	69fb      	ldr	r3, [r7, #28]
 800c1da:	7dfa      	ldrb	r2, [r7, #23]
 800c1dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800c1e0:	69fb      	ldr	r3, [r7, #28]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800c1e8:	69fb      	ldr	r3, [r7, #28]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c1ee:	69f9      	ldr	r1, [r7, #28]
 800c1f0:	f04f 0200 	mov.w	r2, #0
 800c1f4:	f04f 0300 	mov.w	r3, #0
 800c1f8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	3354      	adds	r3, #84	; 0x54
 800c200:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c204:	2100      	movs	r1, #0
 800c206:	4618      	mov	r0, r3
 800c208:	f7fc fd64 	bl	8008cd4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c20c:	7dfb      	ldrb	r3, [r7, #23]
 800c20e:	f003 0320 	and.w	r3, r3, #32
 800c212:	2b00      	cmp	r3, #0
 800c214:	f000 808b 	beq.w	800c32e <f_open+0x566>
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c21e:	4313      	orrs	r3, r2
 800c220:	f000 8085 	beq.w	800c32e <f_open+0x566>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c22a:	69f9      	ldr	r1, [r7, #28]
 800c22c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c232:	895b      	ldrh	r3, [r3, #10]
 800c234:	025b      	lsls	r3, r3, #9
 800c236:	67fb      	str	r3, [r7, #124]	; 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c246:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800c24a:	e026      	b.n	800c29a <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c252:	4618      	mov	r0, r3
 800c254:	f7fc fffc 	bl	8009250 <get_fat>
 800c258:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					if (clst <= 1) res = FR_INT_ERR;
 800c25c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c260:	2b01      	cmp	r3, #1
 800c262:	d802      	bhi.n	800c26a <f_open+0x4a2>
 800c264:	2302      	movs	r3, #2
 800c266:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c26a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c272:	d102      	bne.n	800c27a <f_open+0x4b2>
 800c274:	2301      	movs	r3, #1
 800c276:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c27a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c27c:	2200      	movs	r2, #0
 800c27e:	469a      	mov	sl, r3
 800c280:	4693      	mov	fp, r2
 800c282:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c286:	ebb2 010a 	subs.w	r1, r2, sl
 800c28a:	6039      	str	r1, [r7, #0]
 800c28c:	eb63 030b 	sbc.w	r3, r3, fp
 800c290:	607b      	str	r3, [r7, #4]
 800c292:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c296:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800c29a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d109      	bne.n	800c2b6 <f_open+0x4ee>
 800c2a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	4698      	mov	r8, r3
 800c2a8:	4691      	mov	r9, r2
 800c2aa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c2ae:	4590      	cmp	r8, r2
 800c2b0:	eb79 0303 	sbcs.w	r3, r9, r3
 800c2b4:	d3ca      	bcc.n	800c24c <f_open+0x484>
				}
				fp->clust = clst;
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c2bc:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c2be:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d133      	bne.n	800c32e <f_open+0x566>
 800c2c6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c2ca:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800c2ce:	2500      	movs	r5, #0
 800c2d0:	ea54 0305 	orrs.w	r3, r4, r5
 800c2d4:	d02b      	beq.n	800c32e <f_open+0x566>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7fc ff99 	bl	8009214 <clust2sect>
 800c2e2:	67b8      	str	r0, [r7, #120]	; 0x78
 800c2e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d103      	bne.n	800c2f2 <f_open+0x52a>
						res = FR_INT_ERR;
 800c2ea:	2302      	movs	r3, #2
 800c2ec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800c2f0:	e01d      	b.n	800c32e <f_open+0x566>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c2f2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800c2f6:	f04f 0200 	mov.w	r2, #0
 800c2fa:	f04f 0300 	mov.w	r3, #0
 800c2fe:	0a42      	lsrs	r2, r0, #9
 800c300:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800c304:	0a4b      	lsrs	r3, r1, #9
 800c306:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c308:	441a      	add	r2, r3
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c310:	7858      	ldrb	r0, [r3, #1]
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c31c:	2301      	movs	r3, #1
 800c31e:	f7fc fa7d 	bl	800881c <disk_read>
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d002      	beq.n	800c32e <f_open+0x566>
 800c328:	2301      	movs	r3, #1
 800c32a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c32e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c332:	2b00      	cmp	r3, #0
 800c334:	d002      	beq.n	800c33c <f_open+0x574>
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	2200      	movs	r2, #0
 800c33a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c33c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800c340:	4618      	mov	r0, r3
 800c342:	3798      	adds	r7, #152	; 0x98
 800c344:	46bd      	mov	sp, r7
 800c346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c34a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c34a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c34e:	b094      	sub	sp, #80	; 0x50
 800c350:	af00      	add	r7, sp, #0
 800c352:	61f8      	str	r0, [r7, #28]
 800c354:	61b9      	str	r1, [r7, #24]
 800c356:	617a      	str	r2, [r7, #20]
 800c358:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	63fb      	str	r3, [r7, #60]	; 0x3c


	*br = 0;	/* Clear read byte counter */
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	2200      	movs	r2, #0
 800c362:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c36a:	4611      	mov	r1, r2
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7ff fcaf 	bl	800bcd0 <validate>
 800c372:	4603      	mov	r3, r0
 800c374:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c378:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d108      	bne.n	800c392 <f_read+0x48>
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c386:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c38a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d002      	beq.n	800c398 <f_read+0x4e>
 800c392:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c396:	e14d      	b.n	800c634 <f_read+0x2ea>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c39e:	f003 0301 	and.w	r3, r3, #1
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d101      	bne.n	800c3aa <f_read+0x60>
 800c3a6:	2307      	movs	r3, #7
 800c3a8:	e144      	b.n	800c634 <f_read+0x2ea>
	remain = fp->obj.objsize - fp->fptr;
 800c3aa:	69fb      	ldr	r3, [r7, #28]
 800c3ac:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c3b6:	ebb0 0c02 	subs.w	ip, r0, r2
 800c3ba:	f8c7 c000 	str.w	ip, [r7]
 800c3be:	eb61 0303 	sbc.w	r3, r1, r3
 800c3c2:	607b      	str	r3, [r7, #4]
 800c3c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3c8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	469a      	mov	sl, r3
 800c3d2:	4693      	mov	fp, r2
 800c3d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c3d8:	4552      	cmp	r2, sl
 800c3da:	eb73 030b 	sbcs.w	r3, r3, fp
 800c3de:	f080 8124 	bcs.w	800c62a <f_read+0x2e0>
 800c3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e4:	617b      	str	r3, [r7, #20]

	for ( ;  btr;								/* Repeat until all data read */
 800c3e6:	e120      	b.n	800c62a <f_read+0x2e0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c3e8:	69fb      	ldr	r3, [r7, #28]
 800c3ea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c3ee:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800c3f2:	2500      	movs	r5, #0
 800c3f4:	ea54 0305 	orrs.w	r3, r4, r5
 800c3f8:	f040 80d9 	bne.w	800c5ae <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800c402:	f04f 0200 	mov.w	r2, #0
 800c406:	f04f 0300 	mov.w	r3, #0
 800c40a:	0a42      	lsrs	r2, r0, #9
 800c40c:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800c410:	0a4b      	lsrs	r3, r1, #9
 800c412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c414:	895b      	ldrh	r3, [r3, #10]
 800c416:	3b01      	subs	r3, #1
 800c418:	4013      	ands	r3, r2
 800c41a:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 800c41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d132      	bne.n	800c488 <f_read+0x13e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c422:	69fb      	ldr	r3, [r7, #28]
 800c424:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c428:	4313      	orrs	r3, r2
 800c42a:	d103      	bne.n	800c434 <f_read+0xea>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	64bb      	str	r3, [r7, #72]	; 0x48
 800c432:	e013      	b.n	800c45c <f_read+0x112>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d007      	beq.n	800c44c <f_read+0x102>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c442:	69f8      	ldr	r0, [r7, #28]
 800c444:	f7fd fc09 	bl	8009c5a <clmt_clust>
 800c448:	64b8      	str	r0, [r7, #72]	; 0x48
 800c44a:	e007      	b.n	800c45c <f_read+0x112>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c44c:	69fa      	ldr	r2, [r7, #28]
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c452:	4619      	mov	r1, r3
 800c454:	4610      	mov	r0, r2
 800c456:	f7fc fefb 	bl	8009250 <get_fat>
 800c45a:	64b8      	str	r0, [r7, #72]	; 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c45c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d805      	bhi.n	800c46e <f_read+0x124>
 800c462:	69fb      	ldr	r3, [r7, #28]
 800c464:	2202      	movs	r2, #2
 800c466:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c46a:	2302      	movs	r3, #2
 800c46c:	e0e2      	b.n	800c634 <f_read+0x2ea>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c46e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c470:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c474:	d105      	bne.n	800c482 <f_read+0x138>
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	2201      	movs	r2, #1
 800c47a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c47e:	2301      	movs	r3, #1
 800c480:	e0d8      	b.n	800c634 <f_read+0x2ea>
				fp->clust = clst;				/* Update current cluster */
 800c482:	69fb      	ldr	r3, [r7, #28]
 800c484:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c486:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c48e:	4619      	mov	r1, r3
 800c490:	4610      	mov	r0, r2
 800c492:	f7fc febf 	bl	8009214 <clust2sect>
 800c496:	62b8      	str	r0, [r7, #40]	; 0x28
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d105      	bne.n	800c4aa <f_read+0x160>
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	2202      	movs	r2, #2
 800c4a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c4a6:	2302      	movs	r3, #2
 800c4a8:	e0c4      	b.n	800c634 <f_read+0x2ea>
			sect += csect;
 800c4aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ae:	4413      	add	r3, r2
 800c4b0:	62bb      	str	r3, [r7, #40]	; 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	0a5b      	lsrs	r3, r3, #9
 800c4b6:	643b      	str	r3, [r7, #64]	; 0x40
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c4b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d03b      	beq.n	800c536 <f_read+0x1ec>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c4be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4c2:	4413      	add	r3, r2
 800c4c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4c6:	8952      	ldrh	r2, [r2, #10]
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d905      	bls.n	800c4d8 <f_read+0x18e>
					cc = fs->csize - csect;
 800c4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ce:	895b      	ldrh	r3, [r3, #10]
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d4:	1ad3      	subs	r3, r2, r3
 800c4d6:	643b      	str	r3, [r7, #64]	; 0x40
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4da:	7858      	ldrb	r0, [r3, #1]
 800c4dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c4e2:	f7fc f99b 	bl	800881c <disk_read>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d005      	beq.n	800c4f8 <f_read+0x1ae>
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	e09d      	b.n	800c634 <f_read+0x2ea>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c4fe:	b25b      	sxtb	r3, r3
 800c500:	2b00      	cmp	r3, #0
 800c502:	da14      	bge.n	800c52e <f_read+0x1e4>
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50a:	1ad3      	subs	r3, r2, r3
 800c50c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c50e:	429a      	cmp	r2, r3
 800c510:	d90d      	bls.n	800c52e <f_read+0x1e4>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c518:	1ad3      	subs	r3, r2, r3
 800c51a:	025b      	lsls	r3, r3, #9
 800c51c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c51e:	18d0      	adds	r0, r2, r3
 800c520:	69fb      	ldr	r3, [r7, #28]
 800c522:	3354      	adds	r3, #84	; 0x54
 800c524:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c528:	4619      	mov	r1, r3
 800c52a:	f7fc fbb3 	bl	8008c94 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c52e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c530:	025b      	lsls	r3, r3, #9
 800c532:	647b      	str	r3, [r7, #68]	; 0x44
				continue;
 800c534:	e059      	b.n	800c5ea <f_read+0x2a0>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c53a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d033      	beq.n	800c5a8 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c546:	b25b      	sxtb	r3, r3
 800c548:	2b00      	cmp	r3, #0
 800c54a:	da1b      	bge.n	800c584 <f_read+0x23a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54e:	7858      	ldrb	r0, [r3, #1]
 800c550:	69fb      	ldr	r3, [r7, #28]
 800c552:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c556:	69fb      	ldr	r3, [r7, #28]
 800c558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c55a:	2301      	movs	r3, #1
 800c55c:	f7fc f97e 	bl	800885c <disk_write>
 800c560:	4603      	mov	r3, r0
 800c562:	2b00      	cmp	r3, #0
 800c564:	d005      	beq.n	800c572 <f_read+0x228>
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	2201      	movs	r2, #1
 800c56a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c56e:	2301      	movs	r3, #1
 800c570:	e060      	b.n	800c634 <f_read+0x2ea>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c572:	69fb      	ldr	r3, [r7, #28]
 800c574:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c57c:	b2da      	uxtb	r2, r3
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c586:	7858      	ldrb	r0, [r3, #1]
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c58e:	2301      	movs	r3, #1
 800c590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c592:	f7fc f943 	bl	800881c <disk_read>
 800c596:	4603      	mov	r3, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d005      	beq.n	800c5a8 <f_read+0x25e>
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	2201      	movs	r2, #1
 800c5a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e045      	b.n	800c634 <f_read+0x2ea>
			}
#endif
			fp->sect = sect;
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5ac:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c5b4:	4613      	mov	r3, r2
 800c5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5ba:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c5be:	647b      	str	r3, [r7, #68]	; 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c5c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d901      	bls.n	800c5cc <f_read+0x282>
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	647b      	str	r3, [r7, #68]	; 0x44
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c5d2:	69fb      	ldr	r3, [r7, #28]
 800c5d4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c5d8:	4613      	mov	r3, r2
 800c5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5de:	440b      	add	r3, r1
 800c5e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c5e6:	f7fc fb55 	bl	8008c94 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c5ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c5ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5ee:	4413      	add	r3, r2
 800c5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c5f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c5fa:	2000      	movs	r0, #0
 800c5fc:	4688      	mov	r8, r1
 800c5fe:	4681      	mov	r9, r0
 800c600:	eb12 0108 	adds.w	r1, r2, r8
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	eb43 0309 	adc.w	r3, r3, r9
 800c60a:	60fb      	str	r3, [r7, #12]
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c612:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c61c:	441a      	add	r2, r3
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	601a      	str	r2, [r3, #0]
 800c622:	697a      	ldr	r2, [r7, #20]
 800c624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	617b      	str	r3, [r7, #20]
	for ( ;  btr;								/* Repeat until all data read */
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	f47f aedb 	bne.w	800c3e8 <f_read+0x9e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3750      	adds	r7, #80	; 0x50
 800c638:	46bd      	mov	sp, r7
 800c63a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c63e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c63e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c642:	b08c      	sub	sp, #48	; 0x30
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
 800c64c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	2200      	movs	r2, #0
 800c656:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f107 0210 	add.w	r2, r7, #16
 800c65e:	4611      	mov	r1, r2
 800c660:	4618      	mov	r0, r3
 800c662:	f7ff fb35 	bl	800bcd0 <validate>
 800c666:	4603      	mov	r3, r0
 800c668:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c66c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c670:	2b00      	cmp	r3, #0
 800c672:	d108      	bne.n	800c686 <f_write+0x48>
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c67a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c67e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c682:	2b00      	cmp	r3, #0
 800c684:	d002      	beq.n	800c68c <f_write+0x4e>
 800c686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c68a:	e187      	b.n	800c99c <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c692:	f003 0302 	and.w	r3, r3, #2
 800c696:	2b00      	cmp	r3, #0
 800c698:	d101      	bne.n	800c69e <f_write+0x60>
 800c69a:	2307      	movs	r3, #7
 800c69c:	e17e      	b.n	800c99c <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	2b04      	cmp	r3, #4
 800c6a4:	f000 816a 	beq.w	800c97c <f_write+0x33e>
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	18d1      	adds	r1, r2, r3
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c6b8:	4613      	mov	r3, r2
 800c6ba:	4299      	cmp	r1, r3
 800c6bc:	f080 815e 	bcs.w	800c97c <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	43db      	mvns	r3, r3
 800c6ca:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c6cc:	e156      	b.n	800c97c <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c6d4:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800c6d8:	2500      	movs	r5, #0
 800c6da:	ea54 0305 	orrs.w	r3, r4, r5
 800c6de:	f040 80fb 	bne.w	800c8d8 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800c6e8:	f04f 0200 	mov.w	r2, #0
 800c6ec:	f04f 0300 	mov.w	r3, #0
 800c6f0:	0a42      	lsrs	r2, r0, #9
 800c6f2:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800c6f6:	0a4b      	lsrs	r3, r1, #9
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	895b      	ldrh	r3, [r3, #10]
 800c6fc:	3b01      	subs	r3, #1
 800c6fe:	4013      	ands	r3, r2
 800c700:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d146      	bne.n	800c796 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c70e:	4313      	orrs	r3, r2
 800c710:	d10c      	bne.n	800c72c <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	689b      	ldr	r3, [r3, #8]
 800c716:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d11a      	bne.n	800c754 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2100      	movs	r1, #0
 800c722:	4618      	mov	r0, r3
 800c724:	f7fd f998 	bl	8009a58 <create_chain>
 800c728:	62b8      	str	r0, [r7, #40]	; 0x28
 800c72a:	e013      	b.n	800c754 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c730:	2b00      	cmp	r3, #0
 800c732:	d007      	beq.n	800c744 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c73a:	68f8      	ldr	r0, [r7, #12]
 800c73c:	f7fd fa8d 	bl	8009c5a <clmt_clust>
 800c740:	62b8      	str	r0, [r7, #40]	; 0x28
 800c742:	e007      	b.n	800c754 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c74a:	4619      	mov	r1, r3
 800c74c:	4610      	mov	r0, r2
 800c74e:	f7fd f983 	bl	8009a58 <create_chain>
 800c752:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c756:	2b00      	cmp	r3, #0
 800c758:	f000 8115 	beq.w	800c986 <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d105      	bne.n	800c76e <f_write+0x130>
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2202      	movs	r2, #2
 800c766:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c76a:	2302      	movs	r3, #2
 800c76c:	e116      	b.n	800c99c <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c774:	d105      	bne.n	800c782 <f_write+0x144>
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2201      	movs	r2, #1
 800c77a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c77e:	2301      	movs	r3, #1
 800c780:	e10c      	b.n	800c99c <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c786:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	689b      	ldr	r3, [r3, #8]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d102      	bne.n	800c796 <f_write+0x158>
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c794:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c79c:	b25b      	sxtb	r3, r3
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	da1b      	bge.n	800c7da <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	7858      	ldrb	r0, [r3, #1]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	f7fc f853 	bl	800885c <disk_write>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d005      	beq.n	800c7c8 <f_write+0x18a>
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	e0e9      	b.n	800c99c <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c7ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7d2:	b2da      	uxtb	r2, r3
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c7da:	693a      	ldr	r2, [r7, #16]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	4610      	mov	r0, r2
 800c7e4:	f7fc fd16 	bl	8009214 <clust2sect>
 800c7e8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d105      	bne.n	800c7fc <f_write+0x1be>
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2202      	movs	r2, #2
 800c7f4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c7f8:	2302      	movs	r3, #2
 800c7fa:	e0cf      	b.n	800c99c <f_write+0x35e>
			sect += csect;
 800c7fc:	697a      	ldr	r2, [r7, #20]
 800c7fe:	69bb      	ldr	r3, [r7, #24]
 800c800:	4413      	add	r3, r2
 800c802:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	0a5b      	lsrs	r3, r3, #9
 800c808:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c80a:	6a3b      	ldr	r3, [r7, #32]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d03f      	beq.n	800c890 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c810:	69ba      	ldr	r2, [r7, #24]
 800c812:	6a3b      	ldr	r3, [r7, #32]
 800c814:	4413      	add	r3, r2
 800c816:	693a      	ldr	r2, [r7, #16]
 800c818:	8952      	ldrh	r2, [r2, #10]
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d905      	bls.n	800c82a <f_write+0x1ec>
					cc = fs->csize - csect;
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	895b      	ldrh	r3, [r3, #10]
 800c822:	461a      	mov	r2, r3
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	1ad3      	subs	r3, r2, r3
 800c828:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	7858      	ldrb	r0, [r3, #1]
 800c82e:	6a3b      	ldr	r3, [r7, #32]
 800c830:	697a      	ldr	r2, [r7, #20]
 800c832:	69f9      	ldr	r1, [r7, #28]
 800c834:	f7fc f812 	bl	800885c <disk_write>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d005      	beq.n	800c84a <f_write+0x20c>
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2201      	movs	r2, #1
 800c842:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c846:	2301      	movs	r3, #1
 800c848:	e0a8      	b.n	800c99c <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	1ad3      	subs	r3, r2, r3
 800c852:	6a3a      	ldr	r2, [r7, #32]
 800c854:	429a      	cmp	r2, r3
 800c856:	d917      	bls.n	800c888 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	1ad3      	subs	r3, r2, r3
 800c866:	025b      	lsls	r3, r3, #9
 800c868:	69fa      	ldr	r2, [r7, #28]
 800c86a:	4413      	add	r3, r2
 800c86c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c870:	4619      	mov	r1, r3
 800c872:	f7fc fa0f 	bl	8008c94 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c87c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c880:	b2da      	uxtb	r2, r3
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c888:	6a3b      	ldr	r3, [r7, #32]
 800c88a:	025b      	lsls	r3, r3, #9
 800c88c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c88e:	e04a      	b.n	800c926 <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c894:	697a      	ldr	r2, [r7, #20]
 800c896:	429a      	cmp	r2, r3
 800c898:	d01b      	beq.n	800c8d2 <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c8a6:	4290      	cmp	r0, r2
 800c8a8:	eb71 0303 	sbcs.w	r3, r1, r3
 800c8ac:	d211      	bcs.n	800c8d2 <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	7858      	ldrb	r0, [r3, #1]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	697a      	ldr	r2, [r7, #20]
 800c8bc:	f7fb ffae 	bl	800881c <disk_read>
 800c8c0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d005      	beq.n	800c8d2 <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e064      	b.n	800c99c <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	697a      	ldr	r2, [r7, #20]
 800c8d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c8de:	4613      	mov	r3, r2
 800c8e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8e4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c8e8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c8ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d901      	bls.n	800c8f6 <f_write+0x2b8>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c902:	4613      	mov	r3, r2
 800c904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c908:	440b      	add	r3, r1
 800c90a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c90c:	69f9      	ldr	r1, [r7, #28]
 800c90e:	4618      	mov	r0, r3
 800c910:	f7fc f9c0 	bl	8008c94 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c91a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c91e:	b2da      	uxtb	r2, r3
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c926:	69fa      	ldr	r2, [r7, #28]
 800c928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92a:	4413      	add	r3, r2
 800c92c:	61fb      	str	r3, [r7, #28]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c936:	2000      	movs	r0, #0
 800c938:	4688      	mov	r8, r1
 800c93a:	4681      	mov	r9, r0
 800c93c:	eb12 0a08 	adds.w	sl, r2, r8
 800c940:	eb43 0b09 	adc.w	fp, r3, r9
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c950:	68f9      	ldr	r1, [r7, #12]
 800c952:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800c956:	4282      	cmp	r2, r0
 800c958:	eb73 0c01 	sbcs.w	ip, r3, r1
 800c95c:	d201      	bcs.n	800c962 <f_write+0x324>
 800c95e:	4602      	mov	r2, r0
 800c960:	460b      	mov	r3, r1
 800c962:	68f9      	ldr	r1, [r7, #12]
 800c964:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96e:	441a      	add	r2, r3
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	601a      	str	r2, [r3, #0]
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c978:	1ad3      	subs	r3, r2, r3
 800c97a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	f47f aea5 	bne.w	800c6ce <f_write+0x90>
 800c984:	e000      	b.n	800c988 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c986:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c98e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c992:	b2da      	uxtb	r2, r3
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800c99a:	2300      	movs	r3, #0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3730      	adds	r7, #48	; 0x30
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c9a6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b09a      	sub	sp, #104	; 0x68
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c9b4:	4611      	mov	r1, r2
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7ff f98a 	bl	800bcd0 <validate>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800c9c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	f040 8105 	bne.w	800cbd6 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f000 80fd 	beq.w	800cbd6 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9e2:	b25b      	sxtb	r3, r3
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	da17      	bge.n	800ca18 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c9e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9ea:	7858      	ldrb	r0, [r3, #1]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	f7fb ff30 	bl	800885c <disk_write>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d001      	beq.n	800ca06 <f_sync+0x60>
 800ca02:	2301      	movs	r3, #1
 800ca04:	e0e9      	b.n	800cbda <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca10:	b2da      	uxtb	r2, r3
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ca18:	f7fb fc0e 	bl	8008238 <get_fattime>
 800ca1c:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800ca1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	2b04      	cmp	r3, #4
 800ca24:	f040 808c 	bne.w	800cb40 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7fc ff00 	bl	8009830 <fill_first_frag>
 800ca30:	4603      	mov	r3, r0
 800ca32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800ca36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d10a      	bne.n	800ca54 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca44:	f04f 32ff 	mov.w	r2, #4294967295
 800ca48:	4619      	mov	r1, r3
 800ca4a:	f7fc ff20 	bl	800988e <fill_last_frag>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800ca54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f040 80bc 	bne.w	800cbd6 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	f107 0308 	add.w	r3, r7, #8
 800ca64:	4611      	mov	r1, r2
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7fd fe40 	bl	800a6ec <load_obj_dir>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800ca72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	f040 80ad 	bne.w	800cbd6 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800ca7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca7e:	691b      	ldr	r3, [r3, #16]
 800ca80:	3304      	adds	r3, #4
 800ca82:	781a      	ldrb	r2, [r3, #0]
 800ca84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca86:	691b      	ldr	r3, [r3, #16]
 800ca88:	3304      	adds	r3, #4
 800ca8a:	f042 0220 	orr.w	r2, r2, #32
 800ca8e:	b2d2      	uxtb	r2, r2
 800ca90:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	79da      	ldrb	r2, [r3, #7]
 800ca96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca98:	691b      	ldr	r3, [r3, #16]
 800ca9a:	3321      	adds	r3, #33	; 0x21
 800ca9c:	f042 0201 	orr.w	r2, r2, #1
 800caa0:	b2d2      	uxtb	r2, r2
 800caa2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800caa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800caa6:	691b      	ldr	r3, [r3, #16]
 800caa8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	4619      	mov	r1, r3
 800cab2:	4610      	mov	r0, r2
 800cab4:	f7fc f83c 	bl	8008b30 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800cab8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800caba:	691b      	ldr	r3, [r3, #16]
 800cabc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cac6:	4608      	mov	r0, r1
 800cac8:	f7fc f85d 	bl	8008b86 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800cacc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cace:	691b      	ldr	r3, [r3, #16]
 800cad0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cada:	4608      	mov	r0, r1
 800cadc:	f7fc f853 	bl	8008b86 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800cae0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cae2:	691b      	ldr	r3, [r3, #16]
 800cae4:	330c      	adds	r3, #12
 800cae6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cae8:	4618      	mov	r0, r3
 800caea:	f7fc f821 	bl	8008b30 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800caee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800caf0:	691b      	ldr	r3, [r3, #16]
 800caf2:	3315      	adds	r3, #21
 800caf4:	2200      	movs	r2, #0
 800caf6:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800caf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	3310      	adds	r3, #16
 800cafe:	2100      	movs	r1, #0
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7fc f815 	bl	8008b30 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800cb06:	f107 0308 	add.w	r3, r7, #8
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fd fe24 	bl	800a758 <store_xdir>
 800cb10:	4603      	mov	r3, r0
 800cb12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800cb16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d15b      	bne.n	800cbd6 <f_sync+0x230>
							res = sync_fs(fs);
 800cb1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7fc fb09 	bl	8009138 <sync_fs>
 800cb26:	4603      	mov	r3, r0
 800cb28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb36:	b2da      	uxtb	r2, r3
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800cb3e:	e04a      	b.n	800cbd6 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cb40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb46:	4619      	mov	r1, r3
 800cb48:	4610      	mov	r0, r2
 800cb4a:	f7fc fac7 	bl	80090dc <move_window>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800cb54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d13c      	bne.n	800cbd6 <f_sync+0x230>
					dir = fp->dir_ptr;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb60:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cb62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb64:	330b      	adds	r3, #11
 800cb66:	781a      	ldrb	r2, [r3, #0]
 800cb68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb6a:	330b      	adds	r3, #11
 800cb6c:	f042 0220 	orr.w	r2, r2, #32
 800cb70:	b2d2      	uxtb	r2, r2
 800cb72:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6818      	ldr	r0, [r3, #0]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	689b      	ldr	r3, [r3, #8]
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cb80:	f7fd fa85 	bl	800a08e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cb84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb86:	f103 001c 	add.w	r0, r3, #28
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cb90:	4613      	mov	r3, r2
 800cb92:	4619      	mov	r1, r3
 800cb94:	f7fb ffcc 	bl	8008b30 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cb98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb9a:	3316      	adds	r3, #22
 800cb9c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fb ffc6 	bl	8008b30 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cba6:	3312      	adds	r3, #18
 800cba8:	2100      	movs	r1, #0
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7fb ffa6 	bl	8008afc <st_word>
					fs->wflag = 1;
 800cbb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cbb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f7fc fabd 	bl	8009138 <sync_fs>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cbca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbce:	b2da      	uxtb	r2, r3
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cbd6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3768      	adds	r7, #104	; 0x68
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b084      	sub	sp, #16
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f7ff fedb 	bl	800c9a6 <f_sync>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cbf4:	7bfb      	ldrb	r3, [r7, #15]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d118      	bne.n	800cc2c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f107 0208 	add.w	r2, r7, #8
 800cc00:	4611      	mov	r1, r2
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7ff f864 	bl	800bcd0 <validate>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cc0c:	7bfb      	ldrb	r3, [r7, #15]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d10c      	bne.n	800cc2c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7fc f9be 	bl	8008f98 <dec_lock>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cc20:	7bfb      	ldrb	r3, [r7, #15]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d102      	bne.n	800cc2c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cc2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3710      	adds	r7, #16
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cc36:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc3a:	b0b6      	sub	sp, #216	; 0xd8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800cc42:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cc46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cc4a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800cc4e:	4619      	mov	r1, r3
 800cc50:	4610      	mov	r0, r2
 800cc52:	f7ff f83d 	bl	800bcd0 <validate>
 800cc56:	4603      	mov	r3, r0
 800cc58:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cc5c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d105      	bne.n	800cc70 <f_lseek+0x3a>
 800cc64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cc68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cc6c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800cc70:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d111      	bne.n	800cc9c <f_lseek+0x66>
 800cc78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	2b04      	cmp	r3, #4
 800cc80:	d10c      	bne.n	800cc9c <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800cc82:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800cc86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cc8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc8c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc90:	4619      	mov	r1, r3
 800cc92:	f7fc fdfc 	bl	800988e <fill_last_frag>
 800cc96:	4603      	mov	r3, r0
 800cc98:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cc9c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d002      	beq.n	800ccaa <f_lseek+0x74>
 800cca4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800cca8:	e38b      	b.n	800d3c2 <f_lseek+0x78c>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ccaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ccae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	f000 8141 	beq.w	800cf38 <f_lseek+0x302>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ccb6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800ccba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccbe:	bf08      	it	eq
 800ccc0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800ccc4:	f040 8087 	bne.w	800cdd6 <f_lseek+0x1a0>
			tbl = fp->cltbl;
 800ccc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ccd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ccd6:	1d1a      	adds	r2, r3, #4
 800ccd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cce2:	2302      	movs	r3, #2
 800cce4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cce8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ccec:	689b      	ldr	r3, [r3, #8]
 800ccee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			if (cl) {
 800ccf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d058      	beq.n	800cdac <f_lseek+0x176>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ccfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ccfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cd02:	2300      	movs	r3, #0
 800cd04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cd08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cd0c:	3302      	adds	r3, #2
 800cd0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					do {
						pcl = cl; ncl++;
 800cd12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cd16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cd1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cd1e:	3301      	adds	r3, #1
 800cd20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
						cl = get_fat(&fp->obj, cl);
 800cd24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cd28:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7fc fa8f 	bl	8009250 <get_fat>
 800cd32:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800cd36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d806      	bhi.n	800cd4c <f_lseek+0x116>
 800cd3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cd42:	2202      	movs	r2, #2
 800cd44:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cd48:	2302      	movs	r3, #2
 800cd4a:	e33a      	b.n	800d3c2 <f_lseek+0x78c>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cd4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cd50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd54:	d106      	bne.n	800cd64 <f_lseek+0x12e>
 800cd56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cd60:	2301      	movs	r3, #1
 800cd62:	e32e      	b.n	800d3c2 <f_lseek+0x78c>
					} while (cl == pcl + 1);
 800cd64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd68:	3301      	adds	r3, #1
 800cd6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d0cf      	beq.n	800cd12 <f_lseek+0xdc>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800cd72:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cd76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d80f      	bhi.n	800cd9e <f_lseek+0x168>
						*tbl++ = ncl; *tbl++ = tcl;
 800cd7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cd82:	1d1a      	adds	r2, r3, #4
 800cd84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cd88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cd8c:	601a      	str	r2, [r3, #0]
 800cd8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cd92:	1d1a      	adds	r2, r3, #4
 800cd94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cd98:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800cd9c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800cd9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cda2:	69db      	ldr	r3, [r3, #28]
 800cda4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d3a6      	bcc.n	800ccfa <f_lseek+0xc4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800cdac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cdb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdb2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cdb6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800cdb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cdbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d804      	bhi.n	800cdce <f_lseek+0x198>
				*tbl = 0;		/* Terminate table */
 800cdc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cdc8:	2200      	movs	r2, #0
 800cdca:	601a      	str	r2, [r3, #0]
 800cdcc:	e2f7      	b.n	800d3be <f_lseek+0x788>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800cdce:	2311      	movs	r3, #17
 800cdd0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800cdd4:	e2f3      	b.n	800d3be <f_lseek+0x788>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800cdd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cdda:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800cdde:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800cde2:	4290      	cmp	r0, r2
 800cde4:	eb71 0303 	sbcs.w	r3, r1, r3
 800cde8:	d205      	bcs.n	800cdf6 <f_lseek+0x1c0>
 800cdea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cdee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cdf2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			fp->fptr = ofs;				/* Set file pointer */
 800cdf6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800cdfa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800cdfe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			if (ofs) {
 800ce02:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800ce06:	4313      	orrs	r3, r2
 800ce08:	f000 82d9 	beq.w	800d3be <f_lseek+0x788>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ce0c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800ce10:	f112 3aff 	adds.w	sl, r2, #4294967295
 800ce14:	f143 3bff 	adc.w	fp, r3, #4294967295
 800ce18:	4652      	mov	r2, sl
 800ce1a:	465b      	mov	r3, fp
 800ce1c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800ce20:	f7fc ff1b 	bl	8009c5a <clmt_clust>
 800ce24:	4602      	mov	r2, r0
 800ce26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ce2a:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 800ce2c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ce30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ce34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce36:	4619      	mov	r1, r3
 800ce38:	4610      	mov	r0, r2
 800ce3a:	f7fc f9eb 	bl	8009214 <clust2sect>
 800ce3e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ce42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d106      	bne.n	800ce58 <f_lseek+0x222>
 800ce4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ce4e:	2202      	movs	r2, #2
 800ce50:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ce54:	2302      	movs	r3, #2
 800ce56:	e2b4      	b.n	800d3c2 <f_lseek+0x78c>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ce58:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800ce5c:	1e54      	subs	r4, r2, #1
 800ce5e:	f143 35ff 	adc.w	r5, r3, #4294967295
 800ce62:	f04f 0200 	mov.w	r2, #0
 800ce66:	f04f 0300 	mov.w	r3, #0
 800ce6a:	0a62      	lsrs	r2, r4, #9
 800ce6c:	ea42 52c5 	orr.w	r2, r2, r5, lsl #23
 800ce70:	0a6b      	lsrs	r3, r5, #9
 800ce72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ce76:	895b      	ldrh	r3, [r3, #10]
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	4013      	ands	r3, r2
 800ce7c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ce80:	4413      	add	r3, r2
 800ce82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ce86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ce8a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ce8e:	f3c2 0808 	ubfx	r8, r2, #0, #9
 800ce92:	f04f 0900 	mov.w	r9, #0
 800ce96:	ea58 0309 	orrs.w	r3, r8, r9
 800ce9a:	f000 8290 	beq.w	800d3be <f_lseek+0x788>
 800ce9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cea4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	f000 8288 	beq.w	800d3be <f_lseek+0x788>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ceae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ceb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ceb6:	b25b      	sxtb	r3, r3
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	da21      	bge.n	800cf00 <f_lseek+0x2ca>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cebc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cec0:	7858      	ldrb	r0, [r3, #1]
 800cec2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cec6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ceca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cece:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ced0:	2301      	movs	r3, #1
 800ced2:	f7fb fcc3 	bl	800885c <disk_write>
 800ced6:	4603      	mov	r3, r0
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d006      	beq.n	800ceea <f_lseek+0x2b4>
 800cedc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cee0:	2201      	movs	r2, #1
 800cee2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cee6:	2301      	movs	r3, #1
 800cee8:	e26b      	b.n	800d3c2 <f_lseek+0x78c>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ceea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ceee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cef6:	b2da      	uxtb	r2, r3
 800cef8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cefc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cf00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf04:	7858      	ldrb	r0, [r3, #1]
 800cf06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf0a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800cf0e:	2301      	movs	r3, #1
 800cf10:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cf14:	f7fb fc82 	bl	800881c <disk_read>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d006      	beq.n	800cf2c <f_lseek+0x2f6>
 800cf1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf22:	2201      	movs	r2, #1
 800cf24:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cf28:	2301      	movs	r3, #1
 800cf2a:	e24a      	b.n	800d3c2 <f_lseek+0x78c>
#endif
					fp->sect = dsc;
 800cf2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf30:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cf34:	645a      	str	r2, [r3, #68]	; 0x44
 800cf36:	e242      	b.n	800d3be <f_lseek+0x788>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 800cf38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	2b04      	cmp	r3, #4
 800cf40:	d009      	beq.n	800cf56 <f_lseek+0x320>
 800cf42:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d305      	bcc.n	800cf56 <f_lseek+0x320>
 800cf4a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf4e:	f04f 0300 	mov.w	r3, #0
 800cf52:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cf56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf5a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800cf5e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800cf62:	4290      	cmp	r0, r2
 800cf64:	eb71 0303 	sbcs.w	r3, r1, r3
 800cf68:	d20d      	bcs.n	800cf86 <f_lseek+0x350>
 800cf6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf72:	f003 0302 	and.w	r3, r3, #2
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d105      	bne.n	800cf86 <f_lseek+0x350>
			ofs = fp->obj.objsize;
 800cf7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf7e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cf82:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		}
		ifptr = fp->fptr;
 800cf86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf8a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cf8e:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		fp->fptr = nsect = 0;
 800cf92:	2300      	movs	r3, #0
 800cf94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cf98:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800cf9c:	f04f 0200 	mov.w	r2, #0
 800cfa0:	f04f 0300 	mov.w	r3, #0
 800cfa4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if (ofs) {
 800cfa8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800cfac:	4313      	orrs	r3, r2
 800cfae:	f000 818d 	beq.w	800d2cc <f_lseek+0x696>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cfb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cfb6:	895b      	ldrh	r3, [r3, #10]
 800cfb8:	025b      	lsls	r3, r3, #9
 800cfba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			if (ifptr > 0 &&
 800cfbe:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	d06a      	beq.n	800d09c <f_lseek+0x466>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cfc6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800cfca:	1e51      	subs	r1, r2, #1
 800cfcc:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800cfd0:	f143 33ff 	adc.w	r3, r3, #4294967295
 800cfd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cfd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cfdc:	2200      	movs	r2, #0
 800cfde:	67bb      	str	r3, [r7, #120]	; 0x78
 800cfe0:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cfe2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800cfe6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cfea:	f7f3 fe91 	bl	8000d10 <__aeabi_uldivmod>
 800cfee:	4602      	mov	r2, r0
 800cff0:	460b      	mov	r3, r1
 800cff2:	4614      	mov	r4, r2
 800cff4:	461d      	mov	r5, r3
 800cff6:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800cffa:	1e51      	subs	r1, r2, #1
 800cffc:	6739      	str	r1, [r7, #112]	; 0x70
 800cffe:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d002:	677b      	str	r3, [r7, #116]	; 0x74
 800d004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d008:	2200      	movs	r2, #0
 800d00a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d00c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d00e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d012:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800d016:	f7f3 fe7b 	bl	8000d10 <__aeabi_uldivmod>
 800d01a:	4602      	mov	r2, r0
 800d01c:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 800d01e:	4294      	cmp	r4, r2
 800d020:	eb75 0303 	sbcs.w	r3, r5, r3
 800d024:	d33a      	bcc.n	800d09c <f_lseek+0x466>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d026:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800d02a:	1e51      	subs	r1, r2, #1
 800d02c:	6639      	str	r1, [r7, #96]	; 0x60
 800d02e:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d032:	667b      	str	r3, [r7, #100]	; 0x64
 800d034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d038:	3b01      	subs	r3, #1
 800d03a:	2200      	movs	r2, #0
 800d03c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d03e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d040:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800d044:	460b      	mov	r3, r1
 800d046:	43db      	mvns	r3, r3
 800d048:	653b      	str	r3, [r7, #80]	; 0x50
 800d04a:	4613      	mov	r3, r2
 800d04c:	43db      	mvns	r3, r3
 800d04e:	657b      	str	r3, [r7, #84]	; 0x54
 800d050:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800d054:	4618      	mov	r0, r3
 800d056:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d05a:	460d      	mov	r5, r1
 800d05c:	4028      	ands	r0, r5
 800d05e:	64b8      	str	r0, [r7, #72]	; 0x48
 800d060:	4623      	mov	r3, r4
 800d062:	4013      	ands	r3, r2
 800d064:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d066:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d06a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800d06e:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				ofs -= fp->fptr;
 800d072:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d076:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800d07a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d07e:	1a14      	subs	r4, r2, r0
 800d080:	60bc      	str	r4, [r7, #8]
 800d082:	eb63 0301 	sbc.w	r3, r3, r1
 800d086:	60fb      	str	r3, [r7, #12]
 800d088:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d08c:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				clst = fp->clust;
 800d090:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d096:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d09a:	e031      	b.n	800d100 <f_lseek+0x4ca>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d09c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d0a0:	689b      	ldr	r3, [r3, #8]
 800d0a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d0a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d123      	bne.n	800d0f6 <f_lseek+0x4c0>
					clst = create_chain(&fp->obj, 0);
 800d0ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7fc fccf 	bl	8009a58 <create_chain>
 800d0ba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d0be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d106      	bne.n	800d0d4 <f_lseek+0x49e>
 800d0c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d0ca:	2202      	movs	r2, #2
 800d0cc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d0d0:	2302      	movs	r3, #2
 800d0d2:	e176      	b.n	800d3c2 <f_lseek+0x78c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d0d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0dc:	d106      	bne.n	800d0ec <f_lseek+0x4b6>
 800d0de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	e16a      	b.n	800d3c2 <f_lseek+0x78c>
					fp->obj.sclust = clst;
 800d0ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d0f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d0f4:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 800d0f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d0fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d0fe:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (clst != 0) {
 800d100:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d104:	2b00      	cmp	r3, #0
 800d106:	f000 80e1 	beq.w	800d2cc <f_lseek+0x696>
				while (ofs > bcs) {						/* Cluster following loop */
 800d10a:	e08f      	b.n	800d22c <f_lseek+0x5f6>
					ofs -= bcs; fp->fptr += bcs;
 800d10c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d110:	2200      	movs	r2, #0
 800d112:	643b      	str	r3, [r7, #64]	; 0x40
 800d114:	647a      	str	r2, [r7, #68]	; 0x44
 800d116:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d11a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d11e:	4604      	mov	r4, r0
 800d120:	1b14      	subs	r4, r2, r4
 800d122:	603c      	str	r4, [r7, #0]
 800d124:	eb63 0301 	sbc.w	r3, r3, r1
 800d128:	607b      	str	r3, [r7, #4]
 800d12a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d12e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
 800d132:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d136:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d13a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800d13e:	2000      	movs	r0, #0
 800d140:	63b9      	str	r1, [r7, #56]	; 0x38
 800d142:	63f8      	str	r0, [r7, #60]	; 0x3c
 800d144:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800d148:	4621      	mov	r1, r4
 800d14a:	1851      	adds	r1, r2, r1
 800d14c:	6339      	str	r1, [r7, #48]	; 0x30
 800d14e:	4629      	mov	r1, r5
 800d150:	414b      	adcs	r3, r1
 800d152:	637b      	str	r3, [r7, #52]	; 0x34
 800d154:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d158:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d15c:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d160:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d164:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d168:	f003 0302 	and.w	r3, r3, #2
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d031      	beq.n	800d1d4 <f_lseek+0x59e>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 800d170:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d174:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800d178:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d17c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d180:	4282      	cmp	r2, r0
 800d182:	418b      	sbcs	r3, r1
 800d184:	d212      	bcs.n	800d1ac <f_lseek+0x576>
							fp->obj.objsize = fp->fptr;
 800d186:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d18a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800d18e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d192:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 800d196:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d19a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d19e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d1a8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d1ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d1b0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7fc fc4f 	bl	8009a58 <create_chain>
 800d1ba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d1be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d10f      	bne.n	800d1e6 <f_lseek+0x5b0>
							ofs = 0; break;
 800d1c6:	f04f 0200 	mov.w	r2, #0
 800d1ca:	f04f 0300 	mov.w	r3, #0
 800d1ce:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800d1d2:	e03a      	b.n	800d24a <f_lseek+0x614>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d1d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d1d8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7fc f837 	bl	8009250 <get_fat>
 800d1e2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d1e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ee:	d106      	bne.n	800d1fe <f_lseek+0x5c8>
 800d1f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e0e1      	b.n	800d3c2 <f_lseek+0x78c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d1fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d202:	2b01      	cmp	r3, #1
 800d204:	d906      	bls.n	800d214 <f_lseek+0x5de>
 800d206:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d20a:	69da      	ldr	r2, [r3, #28]
 800d20c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d210:	4293      	cmp	r3, r2
 800d212:	d306      	bcc.n	800d222 <f_lseek+0x5ec>
 800d214:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d218:	2202      	movs	r2, #2
 800d21a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d21e:	2302      	movs	r3, #2
 800d220:	e0cf      	b.n	800d3c2 <f_lseek+0x78c>
					fp->clust = clst;
 800d222:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d226:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d22a:	6413      	str	r3, [r2, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800d22c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d230:	2200      	movs	r2, #0
 800d232:	62bb      	str	r3, [r7, #40]	; 0x28
 800d234:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d236:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d23a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d23e:	4604      	mov	r4, r0
 800d240:	4294      	cmp	r4, r2
 800d242:	eb71 0303 	sbcs.w	r3, r1, r3
 800d246:	f4ff af61 	bcc.w	800d10c <f_lseek+0x4d6>
				}
				fp->fptr += ofs;
 800d24a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d24e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800d252:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d256:	1884      	adds	r4, r0, r2
 800d258:	623c      	str	r4, [r7, #32]
 800d25a:	eb41 0303 	adc.w	r3, r1, r3
 800d25e:	627b      	str	r3, [r7, #36]	; 0x24
 800d260:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d264:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d268:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				if (ofs % SS(fs)) {
 800d26c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d270:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800d274:	61bb      	str	r3, [r7, #24]
 800d276:	2300      	movs	r3, #0
 800d278:	61fb      	str	r3, [r7, #28]
 800d27a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d27e:	461a      	mov	r2, r3
 800d280:	4623      	mov	r3, r4
 800d282:	4313      	orrs	r3, r2
 800d284:	d022      	beq.n	800d2cc <f_lseek+0x696>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d286:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d28a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fb ffc0 	bl	8009214 <clust2sect>
 800d294:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d298:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d106      	bne.n	800d2ae <f_lseek+0x678>
 800d2a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2a4:	2202      	movs	r2, #2
 800d2a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d2aa:	2302      	movs	r3, #2
 800d2ac:	e089      	b.n	800d3c2 <f_lseek+0x78c>
					nsect += (DWORD)(ofs / SS(fs));
 800d2ae:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800d2b2:	f04f 0200 	mov.w	r2, #0
 800d2b6:	f04f 0300 	mov.w	r3, #0
 800d2ba:	0a42      	lsrs	r2, r0, #9
 800d2bc:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800d2c0:	0a4b      	lsrs	r3, r1, #9
 800d2c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d2c6:	4413      	add	r3, r2
 800d2c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d2cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d2d4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800d2d8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800d2dc:	4290      	cmp	r0, r2
 800d2de:	eb71 0303 	sbcs.w	r3, r1, r3
 800d2e2:	d212      	bcs.n	800d30a <f_lseek+0x6d4>
			fp->obj.objsize = fp->fptr;
 800d2e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d2ec:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800d2f0:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 800d2f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d300:	b2da      	uxtb	r2, r3
 800d302:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d306:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d30a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d30e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d312:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800d316:	613b      	str	r3, [r7, #16]
 800d318:	2300      	movs	r3, #0
 800d31a:	617b      	str	r3, [r7, #20]
 800d31c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d320:	461a      	mov	r2, r3
 800d322:	4623      	mov	r3, r4
 800d324:	4313      	orrs	r3, r2
 800d326:	d04a      	beq.n	800d3be <f_lseek+0x788>
 800d328:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d32e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800d332:	429a      	cmp	r2, r3
 800d334:	d043      	beq.n	800d3be <f_lseek+0x788>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d336:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d33a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d33e:	b25b      	sxtb	r3, r3
 800d340:	2b00      	cmp	r3, #0
 800d342:	da21      	bge.n	800d388 <f_lseek+0x752>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d344:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d348:	7858      	ldrb	r0, [r3, #1]
 800d34a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d34e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d352:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d356:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d358:	2301      	movs	r3, #1
 800d35a:	f7fb fa7f 	bl	800885c <disk_write>
 800d35e:	4603      	mov	r3, r0
 800d360:	2b00      	cmp	r3, #0
 800d362:	d006      	beq.n	800d372 <f_lseek+0x73c>
 800d364:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d368:	2201      	movs	r2, #1
 800d36a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d36e:	2301      	movs	r3, #1
 800d370:	e027      	b.n	800d3c2 <f_lseek+0x78c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d372:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d376:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d37a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d37e:	b2da      	uxtb	r2, r3
 800d380:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d384:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d388:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d38c:	7858      	ldrb	r0, [r3, #1]
 800d38e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d392:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d396:	2301      	movs	r3, #1
 800d398:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800d39c:	f7fb fa3e 	bl	800881c <disk_read>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d006      	beq.n	800d3b4 <f_lseek+0x77e>
 800d3a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e006      	b.n	800d3c2 <f_lseek+0x78c>
#endif
			fp->sect = nsect;
 800d3b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d3b8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800d3bc:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 800d3be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	37d8      	adds	r7, #216	; 0xd8
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d3cc <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b09a      	sub	sp, #104	; 0x68
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	60f8      	str	r0, [r7, #12]
 800d3d4:	60b9      	str	r1, [r7, #8]
 800d3d6:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d3d8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800d3dc:	f107 030c 	add.w	r3, r7, #12
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7fe f918 	bl	800b618 <find_volume>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d3ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f040 80e6 	bne.w	800d5c4 <f_getfree+0x1f8>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d3f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d3fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d400:	699a      	ldr	r2, [r3, #24]
 800d402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d404:	69db      	ldr	r3, [r3, #28]
 800d406:	3b02      	subs	r3, #2
 800d408:	429a      	cmp	r2, r3
 800d40a:	d804      	bhi.n	800d416 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d40c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d40e:	699a      	ldr	r2, [r3, #24]
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	601a      	str	r2, [r3, #0]
 800d414:	e0d6      	b.n	800d5c4 <f_getfree+0x1f8>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d416:	2300      	movs	r3, #0
 800d418:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d41a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d128      	bne.n	800d474 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d422:	2302      	movs	r3, #2
 800d424:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d428:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800d42a:	f107 0310 	add.w	r3, r7, #16
 800d42e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d430:	4618      	mov	r0, r3
 800d432:	f7fb ff0d 	bl	8009250 <get_fat>
 800d436:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d43e:	d103      	bne.n	800d448 <f_getfree+0x7c>
 800d440:	2301      	movs	r3, #1
 800d442:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d446:	e0b0      	b.n	800d5aa <f_getfree+0x1de>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	d103      	bne.n	800d456 <f_getfree+0x8a>
 800d44e:	2302      	movs	r3, #2
 800d450:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d454:	e0a9      	b.n	800d5aa <f_getfree+0x1de>
					if (stat == 0) nfree++;
 800d456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d102      	bne.n	800d462 <f_getfree+0x96>
 800d45c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d45e:	3301      	adds	r3, #1
 800d460:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 800d462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d464:	3301      	adds	r3, #1
 800d466:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d46a:	69db      	ldr	r3, [r3, #28]
 800d46c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d46e:	429a      	cmp	r2, r3
 800d470:	d3db      	bcc.n	800d42a <f_getfree+0x5e>
 800d472:	e09a      	b.n	800d5aa <f_getfree+0x1de>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800d474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	2b04      	cmp	r3, #4
 800d47a:	d146      	bne.n	800d50a <f_getfree+0x13e>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800d47c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d47e:	69db      	ldr	r3, [r3, #28]
 800d480:	3b02      	subs	r3, #2
 800d482:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 800d484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d488:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 800d48a:	2300      	movs	r3, #0
 800d48c:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800d48e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d490:	2b00      	cmp	r3, #0
 800d492:	d10d      	bne.n	800d4b0 <f_getfree+0xe4>
 800d494:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d496:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d498:	1c5a      	adds	r2, r3, #1
 800d49a:	65ba      	str	r2, [r7, #88]	; 0x58
 800d49c:	4619      	mov	r1, r3
 800d49e:	f7fb fe1d 	bl	80090dc <move_window>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d4a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d179      	bne.n	800d5a4 <f_getfree+0x1d8>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800d4b0:	2308      	movs	r3, #8
 800d4b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d4b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4b8:	4413      	add	r3, r2
 800d4ba:	3338      	adds	r3, #56	; 0x38
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d4c2:	e013      	b.n	800d4ec <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800d4c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d4c8:	f003 0301 	and.w	r3, r3, #1
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d102      	bne.n	800d4d6 <f_getfree+0x10a>
 800d4d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 800d4d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d4da:	085b      	lsrs	r3, r3, #1
 800d4dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800d4e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4e2:	3b01      	subs	r3, #1
 800d4e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d4e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4e8:	3b01      	subs	r3, #1
 800d4ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d002      	beq.n	800d4f8 <f_getfree+0x12c>
 800d4f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d1e5      	bne.n	800d4c4 <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800d4f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d500:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 800d502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d504:	2b00      	cmp	r3, #0
 800d506:	d1c2      	bne.n	800d48e <f_getfree+0xc2>
 800d508:	e04f      	b.n	800d5aa <f_getfree+0x1de>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d50a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d50c:	69db      	ldr	r3, [r3, #28]
 800d50e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d514:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 800d516:	2300      	movs	r3, #0
 800d518:	657b      	str	r3, [r7, #84]	; 0x54
 800d51a:	2300      	movs	r3, #0
 800d51c:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 800d51e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d520:	2b00      	cmp	r3, #0
 800d522:	d113      	bne.n	800d54c <f_getfree+0x180>
							res = move_window(fs, sect++);
 800d524:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d526:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d528:	1c5a      	adds	r2, r3, #1
 800d52a:	65ba      	str	r2, [r7, #88]	; 0x58
 800d52c:	4619      	mov	r1, r3
 800d52e:	f7fb fdd5 	bl	80090dc <move_window>
 800d532:	4603      	mov	r3, r0
 800d534:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 800d538:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d133      	bne.n	800d5a8 <f_getfree+0x1dc>
							p = fs->win;
 800d540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d542:	3338      	adds	r3, #56	; 0x38
 800d544:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 800d546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d54a:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800d54c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	2b02      	cmp	r3, #2
 800d552:	d10f      	bne.n	800d574 <f_getfree+0x1a8>
							if (ld_word(p) == 0) nfree++;
 800d554:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d556:	f7fb f9bf 	bl	80088d8 <ld_word>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d102      	bne.n	800d566 <f_getfree+0x19a>
 800d560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d562:	3301      	adds	r3, #1
 800d564:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 800d566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d568:	3302      	adds	r3, #2
 800d56a:	653b      	str	r3, [r7, #80]	; 0x50
 800d56c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d56e:	3b02      	subs	r3, #2
 800d570:	657b      	str	r3, [r7, #84]	; 0x54
 800d572:	e010      	b.n	800d596 <f_getfree+0x1ca>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d574:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d576:	f7fb f9c6 	bl	8008906 <ld_dword>
 800d57a:	4603      	mov	r3, r0
 800d57c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d580:	2b00      	cmp	r3, #0
 800d582:	d102      	bne.n	800d58a <f_getfree+0x1be>
 800d584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d586:	3301      	adds	r3, #1
 800d588:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 800d58a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d58c:	3304      	adds	r3, #4
 800d58e:	653b      	str	r3, [r7, #80]	; 0x50
 800d590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d592:	3b04      	subs	r3, #4
 800d594:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 800d596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d598:	3b01      	subs	r3, #1
 800d59a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d59c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d1bd      	bne.n	800d51e <f_getfree+0x152>
 800d5a2:	e002      	b.n	800d5aa <f_getfree+0x1de>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800d5a4:	bf00      	nop
 800d5a6:	e000      	b.n	800d5aa <f_getfree+0x1de>
							if (res != FR_OK) break;
 800d5a8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d5ae:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d5b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d5b4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d5b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5b8:	791a      	ldrb	r2, [r3, #4]
 800d5ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5bc:	f042 0201 	orr.w	r2, r2, #1
 800d5c0:	b2d2      	uxtb	r2, r2
 800d5c2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d5c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3768      	adds	r7, #104	; 0x68
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b087      	sub	sp, #28
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	4613      	mov	r3, r2
 800d5dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d5e6:	4b1f      	ldr	r3, [pc, #124]	; (800d664 <FATFS_LinkDriverEx+0x94>)
 800d5e8:	7e1b      	ldrb	r3, [r3, #24]
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	2b03      	cmp	r3, #3
 800d5ee:	d833      	bhi.n	800d658 <FATFS_LinkDriverEx+0x88>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d5f0:	4b1c      	ldr	r3, [pc, #112]	; (800d664 <FATFS_LinkDriverEx+0x94>)
 800d5f2:	7e1b      	ldrb	r3, [r3, #24]
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	4b1a      	ldr	r3, [pc, #104]	; (800d664 <FATFS_LinkDriverEx+0x94>)
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d5fe:	4b19      	ldr	r3, [pc, #100]	; (800d664 <FATFS_LinkDriverEx+0x94>)
 800d600:	7e1b      	ldrb	r3, [r3, #24]
 800d602:	b2db      	uxtb	r3, r3
 800d604:	4a17      	ldr	r2, [pc, #92]	; (800d664 <FATFS_LinkDriverEx+0x94>)
 800d606:	009b      	lsls	r3, r3, #2
 800d608:	4413      	add	r3, r2
 800d60a:	68fa      	ldr	r2, [r7, #12]
 800d60c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d60e:	4b15      	ldr	r3, [pc, #84]	; (800d664 <FATFS_LinkDriverEx+0x94>)
 800d610:	7e1b      	ldrb	r3, [r3, #24]
 800d612:	b2db      	uxtb	r3, r3
 800d614:	461a      	mov	r2, r3
 800d616:	4b13      	ldr	r3, [pc, #76]	; (800d664 <FATFS_LinkDriverEx+0x94>)
 800d618:	4413      	add	r3, r2
 800d61a:	79fa      	ldrb	r2, [r7, #7]
 800d61c:	751a      	strb	r2, [r3, #20]
    DiskNum = disk.nbr;
 800d61e:	4b11      	ldr	r3, [pc, #68]	; (800d664 <FATFS_LinkDriverEx+0x94>)
 800d620:	7e1b      	ldrb	r3, [r3, #24]
 800d622:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d624:	7dbb      	ldrb	r3, [r7, #22]
 800d626:	3330      	adds	r3, #48	; 0x30
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	3301      	adds	r3, #1
 800d632:	223a      	movs	r2, #58	; 0x3a
 800d634:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	3302      	adds	r3, #2
 800d63a:	222f      	movs	r2, #47	; 0x2f
 800d63c:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	3303      	adds	r3, #3
 800d642:	2200      	movs	r2, #0
 800d644:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d646:	2300      	movs	r3, #0
 800d648:	75fb      	strb	r3, [r7, #23]
    disk.nbr++;
 800d64a:	4b06      	ldr	r3, [pc, #24]	; (800d664 <FATFS_LinkDriverEx+0x94>)
 800d64c:	7e1b      	ldrb	r3, [r3, #24]
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	3301      	adds	r3, #1
 800d652:	b2da      	uxtb	r2, r3
 800d654:	4b03      	ldr	r3, [pc, #12]	; (800d664 <FATFS_LinkDriverEx+0x94>)
 800d656:	761a      	strb	r2, [r3, #24]

  }

  return ret;
 800d658:	7dfb      	ldrb	r3, [r7, #23]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	371c      	adds	r7, #28
 800d65e:	46bd      	mov	sp, r7
 800d660:	bc80      	pop	{r7}
 800d662:	4770      	bx	lr
 800d664:	20002f80 	.word	0x20002f80

0800d668 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d672:	2200      	movs	r2, #0
 800d674:	6839      	ldr	r1, [r7, #0]
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f7ff ffaa 	bl	800d5d0 <FATFS_LinkDriverEx>
 800d67c:	4603      	mov	r3, r0
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3708      	adds	r7, #8
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
	...

0800d688 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d688:	b480      	push	{r7}
 800d68a:	b085      	sub	sp, #20
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	4603      	mov	r3, r0
 800d690:	6039      	str	r1, [r7, #0]
 800d692:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d694:	88fb      	ldrh	r3, [r7, #6]
 800d696:	2b7f      	cmp	r3, #127	; 0x7f
 800d698:	d802      	bhi.n	800d6a0 <ff_convert+0x18>
		c = chr;
 800d69a:	88fb      	ldrh	r3, [r7, #6]
 800d69c:	81fb      	strh	r3, [r7, #14]
 800d69e:	e025      	b.n	800d6ec <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00b      	beq.n	800d6be <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d6a6:	88fb      	ldrh	r3, [r7, #6]
 800d6a8:	2bff      	cmp	r3, #255	; 0xff
 800d6aa:	d805      	bhi.n	800d6b8 <ff_convert+0x30>
 800d6ac:	88fb      	ldrh	r3, [r7, #6]
 800d6ae:	3b80      	subs	r3, #128	; 0x80
 800d6b0:	4a11      	ldr	r2, [pc, #68]	; (800d6f8 <ff_convert+0x70>)
 800d6b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6b6:	e000      	b.n	800d6ba <ff_convert+0x32>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	81fb      	strh	r3, [r7, #14]
 800d6bc:	e016      	b.n	800d6ec <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d6be:	2300      	movs	r3, #0
 800d6c0:	81fb      	strh	r3, [r7, #14]
 800d6c2:	e009      	b.n	800d6d8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d6c4:	89fb      	ldrh	r3, [r7, #14]
 800d6c6:	4a0c      	ldr	r2, [pc, #48]	; (800d6f8 <ff_convert+0x70>)
 800d6c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6cc:	88fa      	ldrh	r2, [r7, #6]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d006      	beq.n	800d6e0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d6d2:	89fb      	ldrh	r3, [r7, #14]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	81fb      	strh	r3, [r7, #14]
 800d6d8:	89fb      	ldrh	r3, [r7, #14]
 800d6da:	2b7f      	cmp	r3, #127	; 0x7f
 800d6dc:	d9f2      	bls.n	800d6c4 <ff_convert+0x3c>
 800d6de:	e000      	b.n	800d6e2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d6e0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d6e2:	89fb      	ldrh	r3, [r7, #14]
 800d6e4:	3380      	adds	r3, #128	; 0x80
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d6ec:	89fb      	ldrh	r3, [r7, #14]
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3714      	adds	r7, #20
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bc80      	pop	{r7}
 800d6f6:	4770      	bx	lr
 800d6f8:	080147e0 	.word	0x080147e0

0800d6fc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b087      	sub	sp, #28
 800d700:	af00      	add	r7, sp, #0
 800d702:	4603      	mov	r3, r0
 800d704:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d706:	88fb      	ldrh	r3, [r7, #6]
 800d708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d70c:	d201      	bcs.n	800d712 <ff_wtoupper+0x16>
 800d70e:	4b3d      	ldr	r3, [pc, #244]	; (800d804 <ff_wtoupper+0x108>)
 800d710:	e000      	b.n	800d714 <ff_wtoupper+0x18>
 800d712:	4b3d      	ldr	r3, [pc, #244]	; (800d808 <ff_wtoupper+0x10c>)
 800d714:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	1c9a      	adds	r2, r3, #2
 800d71a:	617a      	str	r2, [r7, #20]
 800d71c:	881b      	ldrh	r3, [r3, #0]
 800d71e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d720:	8a7b      	ldrh	r3, [r7, #18]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d068      	beq.n	800d7f8 <ff_wtoupper+0xfc>
 800d726:	88fa      	ldrh	r2, [r7, #6]
 800d728:	8a7b      	ldrh	r3, [r7, #18]
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d364      	bcc.n	800d7f8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	1c9a      	adds	r2, r3, #2
 800d732:	617a      	str	r2, [r7, #20]
 800d734:	881b      	ldrh	r3, [r3, #0]
 800d736:	823b      	strh	r3, [r7, #16]
 800d738:	8a3b      	ldrh	r3, [r7, #16]
 800d73a:	0a1b      	lsrs	r3, r3, #8
 800d73c:	81fb      	strh	r3, [r7, #14]
 800d73e:	8a3b      	ldrh	r3, [r7, #16]
 800d740:	b2db      	uxtb	r3, r3
 800d742:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d744:	88fa      	ldrh	r2, [r7, #6]
 800d746:	8a79      	ldrh	r1, [r7, #18]
 800d748:	8a3b      	ldrh	r3, [r7, #16]
 800d74a:	440b      	add	r3, r1
 800d74c:	429a      	cmp	r2, r3
 800d74e:	da49      	bge.n	800d7e4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d750:	89fb      	ldrh	r3, [r7, #14]
 800d752:	2b08      	cmp	r3, #8
 800d754:	d84f      	bhi.n	800d7f6 <ff_wtoupper+0xfa>
 800d756:	a201      	add	r2, pc, #4	; (adr r2, 800d75c <ff_wtoupper+0x60>)
 800d758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d75c:	0800d781 	.word	0x0800d781
 800d760:	0800d793 	.word	0x0800d793
 800d764:	0800d7a9 	.word	0x0800d7a9
 800d768:	0800d7b1 	.word	0x0800d7b1
 800d76c:	0800d7b9 	.word	0x0800d7b9
 800d770:	0800d7c1 	.word	0x0800d7c1
 800d774:	0800d7c9 	.word	0x0800d7c9
 800d778:	0800d7d1 	.word	0x0800d7d1
 800d77c:	0800d7d9 	.word	0x0800d7d9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d780:	88fa      	ldrh	r2, [r7, #6]
 800d782:	8a7b      	ldrh	r3, [r7, #18]
 800d784:	1ad3      	subs	r3, r2, r3
 800d786:	005b      	lsls	r3, r3, #1
 800d788:	697a      	ldr	r2, [r7, #20]
 800d78a:	4413      	add	r3, r2
 800d78c:	881b      	ldrh	r3, [r3, #0]
 800d78e:	80fb      	strh	r3, [r7, #6]
 800d790:	e027      	b.n	800d7e2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d792:	88fa      	ldrh	r2, [r7, #6]
 800d794:	8a7b      	ldrh	r3, [r7, #18]
 800d796:	1ad3      	subs	r3, r2, r3
 800d798:	b29b      	uxth	r3, r3
 800d79a:	f003 0301 	and.w	r3, r3, #1
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	88fa      	ldrh	r2, [r7, #6]
 800d7a2:	1ad3      	subs	r3, r2, r3
 800d7a4:	80fb      	strh	r3, [r7, #6]
 800d7a6:	e01c      	b.n	800d7e2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d7a8:	88fb      	ldrh	r3, [r7, #6]
 800d7aa:	3b10      	subs	r3, #16
 800d7ac:	80fb      	strh	r3, [r7, #6]
 800d7ae:	e018      	b.n	800d7e2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d7b0:	88fb      	ldrh	r3, [r7, #6]
 800d7b2:	3b20      	subs	r3, #32
 800d7b4:	80fb      	strh	r3, [r7, #6]
 800d7b6:	e014      	b.n	800d7e2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d7b8:	88fb      	ldrh	r3, [r7, #6]
 800d7ba:	3b30      	subs	r3, #48	; 0x30
 800d7bc:	80fb      	strh	r3, [r7, #6]
 800d7be:	e010      	b.n	800d7e2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d7c0:	88fb      	ldrh	r3, [r7, #6]
 800d7c2:	3b1a      	subs	r3, #26
 800d7c4:	80fb      	strh	r3, [r7, #6]
 800d7c6:	e00c      	b.n	800d7e2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d7c8:	88fb      	ldrh	r3, [r7, #6]
 800d7ca:	3308      	adds	r3, #8
 800d7cc:	80fb      	strh	r3, [r7, #6]
 800d7ce:	e008      	b.n	800d7e2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d7d0:	88fb      	ldrh	r3, [r7, #6]
 800d7d2:	3b50      	subs	r3, #80	; 0x50
 800d7d4:	80fb      	strh	r3, [r7, #6]
 800d7d6:	e004      	b.n	800d7e2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d7d8:	88fb      	ldrh	r3, [r7, #6]
 800d7da:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d7de:	80fb      	strh	r3, [r7, #6]
 800d7e0:	bf00      	nop
			}
			break;
 800d7e2:	e008      	b.n	800d7f6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d7e4:	89fb      	ldrh	r3, [r7, #14]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d195      	bne.n	800d716 <ff_wtoupper+0x1a>
 800d7ea:	8a3b      	ldrh	r3, [r7, #16]
 800d7ec:	005b      	lsls	r3, r3, #1
 800d7ee:	697a      	ldr	r2, [r7, #20]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d7f4:	e78f      	b.n	800d716 <ff_wtoupper+0x1a>
			break;
 800d7f6:	bf00      	nop
	}

	return chr;
 800d7f8:	88fb      	ldrh	r3, [r7, #6]
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	371c      	adds	r7, #28
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bc80      	pop	{r7}
 800d802:	4770      	bx	lr
 800d804:	080148e0 	.word	0x080148e0
 800d808:	08014ad4 	.word	0x08014ad4

0800d80c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b085      	sub	sp, #20
 800d810:	af00      	add	r7, sp, #0
 800d812:	4603      	mov	r3, r0
 800d814:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d816:	2300      	movs	r3, #0
 800d818:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d81a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d81e:	2b84      	cmp	r3, #132	; 0x84
 800d820:	d005      	beq.n	800d82e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d822:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	4413      	add	r3, r2
 800d82a:	3303      	adds	r3, #3
 800d82c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d82e:	68fb      	ldr	r3, [r7, #12]
}
 800d830:	4618      	mov	r0, r3
 800d832:	3714      	adds	r7, #20
 800d834:	46bd      	mov	sp, r7
 800d836:	bc80      	pop	{r7}
 800d838:	4770      	bx	lr

0800d83a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d83a:	b480      	push	{r7}
 800d83c:	b083      	sub	sp, #12
 800d83e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d840:	f3ef 8305 	mrs	r3, IPSR
 800d844:	607b      	str	r3, [r7, #4]
  return(result);
 800d846:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d848:	2b00      	cmp	r3, #0
 800d84a:	bf14      	ite	ne
 800d84c:	2301      	movne	r3, #1
 800d84e:	2300      	moveq	r3, #0
 800d850:	b2db      	uxtb	r3, r3
}
 800d852:	4618      	mov	r0, r3
 800d854:	370c      	adds	r7, #12
 800d856:	46bd      	mov	sp, r7
 800d858:	bc80      	pop	{r7}
 800d85a:	4770      	bx	lr

0800d85c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d860:	f001 fbcc 	bl	800effc <vTaskStartScheduler>
  
  return osOK;
 800d864:	2300      	movs	r3, #0
}
 800d866:	4618      	mov	r0, r3
 800d868:	bd80      	pop	{r7, pc}

0800d86a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d86a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d86c:	b089      	sub	sp, #36	; 0x24
 800d86e:	af04      	add	r7, sp, #16
 800d870:	6078      	str	r0, [r7, #4]
 800d872:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	695b      	ldr	r3, [r3, #20]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d020      	beq.n	800d8be <osThreadCreate+0x54>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	699b      	ldr	r3, [r3, #24]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d01c      	beq.n	800d8be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	685c      	ldr	r4, [r3, #4]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681d      	ldr	r5, [r3, #0]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	691e      	ldr	r6, [r3, #16]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d896:	4618      	mov	r0, r3
 800d898:	f7ff ffb8 	bl	800d80c <makeFreeRtosPriority>
 800d89c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	695b      	ldr	r3, [r3, #20]
 800d8a2:	687a      	ldr	r2, [r7, #4]
 800d8a4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d8a6:	9202      	str	r2, [sp, #8]
 800d8a8:	9301      	str	r3, [sp, #4]
 800d8aa:	9100      	str	r1, [sp, #0]
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	4632      	mov	r2, r6
 800d8b0:	4629      	mov	r1, r5
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	f001 f9cc 	bl	800ec50 <xTaskCreateStatic>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	60fb      	str	r3, [r7, #12]
 800d8bc:	e01c      	b.n	800d8f8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	685c      	ldr	r4, [r3, #4]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d8ca:	b29e      	uxth	r6, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7ff ff9a 	bl	800d80c <makeFreeRtosPriority>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	f107 030c 	add.w	r3, r7, #12
 800d8de:	9301      	str	r3, [sp, #4]
 800d8e0:	9200      	str	r2, [sp, #0]
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	4632      	mov	r2, r6
 800d8e6:	4629      	mov	r1, r5
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	f001 fa0d 	bl	800ed08 <xTaskCreate>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d001      	beq.n	800d8f8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	e000      	b.n	800d8fa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3714      	adds	r7, #20
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d902 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d902:	b580      	push	{r7, lr}
 800d904:	b084      	sub	sp, #16
 800d906:	af00      	add	r7, sp, #0
 800d908:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d001      	beq.n	800d918 <osDelay+0x16>
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	e000      	b.n	800d91a <osDelay+0x18>
 800d918:	2301      	movs	r3, #1
 800d91a:	4618      	mov	r0, r3
 800d91c:	f001 fb3a 	bl	800ef94 <vTaskDelay>
  
  return osOK;
 800d920:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d922:	4618      	mov	r0, r3
 800d924:	3710      	adds	r7, #16
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}

0800d92a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b086      	sub	sp, #24
 800d92e:	af02      	add	r7, sp, #8
 800d930:	6078      	str	r0, [r7, #4]
 800d932:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	685b      	ldr	r3, [r3, #4]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d00f      	beq.n	800d95c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d10a      	bne.n	800d958 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	2203      	movs	r2, #3
 800d948:	9200      	str	r2, [sp, #0]
 800d94a:	2200      	movs	r2, #0
 800d94c:	2100      	movs	r1, #0
 800d94e:	2001      	movs	r0, #1
 800d950:	f000 fa96 	bl	800de80 <xQueueGenericCreateStatic>
 800d954:	4603      	mov	r3, r0
 800d956:	e016      	b.n	800d986 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800d958:	2300      	movs	r3, #0
 800d95a:	e014      	b.n	800d986 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	2b01      	cmp	r3, #1
 800d960:	d110      	bne.n	800d984 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800d962:	2203      	movs	r2, #3
 800d964:	2100      	movs	r1, #0
 800d966:	2001      	movs	r0, #1
 800d968:	f000 fb01 	bl	800df6e <xQueueGenericCreate>
 800d96c:	60f8      	str	r0, [r7, #12]
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d005      	beq.n	800d980 <osSemaphoreCreate+0x56>
 800d974:	2300      	movs	r3, #0
 800d976:	2200      	movs	r2, #0
 800d978:	2100      	movs	r1, #0
 800d97a:	68f8      	ldr	r0, [r7, #12]
 800d97c:	f000 fb54 	bl	800e028 <xQueueGenericSend>
      return sema;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	e000      	b.n	800d986 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800d984:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800d986:	4618      	mov	r0, r3
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
	...

0800d990 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d99a:	2300      	movs	r3, #0
 800d99c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d101      	bne.n	800d9a8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800d9a4:	2380      	movs	r3, #128	; 0x80
 800d9a6:	e03a      	b.n	800da1e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9b2:	d103      	bne.n	800d9bc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800d9b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d9b8:	60fb      	str	r3, [r7, #12]
 800d9ba:	e009      	b.n	800d9d0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d006      	beq.n	800d9d0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d101      	bne.n	800d9d0 <osSemaphoreWait+0x40>
      ticks = 1;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d9d0:	f7ff ff33 	bl	800d83a <inHandlerMode>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d017      	beq.n	800da0a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d9da:	f107 0308 	add.w	r3, r7, #8
 800d9de:	461a      	mov	r2, r3
 800d9e0:	2100      	movs	r1, #0
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f000 ff30 	bl	800e848 <xQueueReceiveFromISR>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	d001      	beq.n	800d9f2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800d9ee:	23ff      	movs	r3, #255	; 0xff
 800d9f0:	e015      	b.n	800da1e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d011      	beq.n	800da1c <osSemaphoreWait+0x8c>
 800d9f8:	4b0b      	ldr	r3, [pc, #44]	; (800da28 <osSemaphoreWait+0x98>)
 800d9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9fe:	601a      	str	r2, [r3, #0]
 800da00:	f3bf 8f4f 	dsb	sy
 800da04:	f3bf 8f6f 	isb	sy
 800da08:	e008      	b.n	800da1c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800da0a:	68f9      	ldr	r1, [r7, #12]
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 fe0f 	bl	800e630 <xQueueSemaphoreTake>
 800da12:	4603      	mov	r3, r0
 800da14:	2b01      	cmp	r3, #1
 800da16:	d001      	beq.n	800da1c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800da18:	23ff      	movs	r3, #255	; 0xff
 800da1a:	e000      	b.n	800da1e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800da1c:	2300      	movs	r3, #0
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3710      	adds	r7, #16
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop
 800da28:	e000ed04 	.word	0xe000ed04

0800da2c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800da34:	2300      	movs	r3, #0
 800da36:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800da38:	2300      	movs	r3, #0
 800da3a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800da3c:	f7ff fefd 	bl	800d83a <inHandlerMode>
 800da40:	4603      	mov	r3, r0
 800da42:	2b00      	cmp	r3, #0
 800da44:	d016      	beq.n	800da74 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800da46:	f107 0308 	add.w	r3, r7, #8
 800da4a:	4619      	mov	r1, r3
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 fc81 	bl	800e354 <xQueueGiveFromISR>
 800da52:	4603      	mov	r3, r0
 800da54:	2b01      	cmp	r3, #1
 800da56:	d001      	beq.n	800da5c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800da58:	23ff      	movs	r3, #255	; 0xff
 800da5a:	e017      	b.n	800da8c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d013      	beq.n	800da8a <osSemaphoreRelease+0x5e>
 800da62:	4b0c      	ldr	r3, [pc, #48]	; (800da94 <osSemaphoreRelease+0x68>)
 800da64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da68:	601a      	str	r2, [r3, #0]
 800da6a:	f3bf 8f4f 	dsb	sy
 800da6e:	f3bf 8f6f 	isb	sy
 800da72:	e00a      	b.n	800da8a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800da74:	2300      	movs	r3, #0
 800da76:	2200      	movs	r2, #0
 800da78:	2100      	movs	r1, #0
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f000 fad4 	bl	800e028 <xQueueGenericSend>
 800da80:	4603      	mov	r3, r0
 800da82:	2b01      	cmp	r3, #1
 800da84:	d001      	beq.n	800da8a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800da86:	23ff      	movs	r3, #255	; 0xff
 800da88:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800da8a:	68fb      	ldr	r3, [r7, #12]
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3710      	adds	r7, #16
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	e000ed04 	.word	0xe000ed04

0800da98 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800da98:	b590      	push	{r4, r7, lr}
 800da9a:	b085      	sub	sp, #20
 800da9c:	af02      	add	r7, sp, #8
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	689b      	ldr	r3, [r3, #8]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d011      	beq.n	800dace <osMessageCreate+0x36>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d00d      	beq.n	800dace <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6818      	ldr	r0, [r3, #0]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6859      	ldr	r1, [r3, #4]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	689a      	ldr	r2, [r3, #8]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	68db      	ldr	r3, [r3, #12]
 800dac2:	2400      	movs	r4, #0
 800dac4:	9400      	str	r4, [sp, #0]
 800dac6:	f000 f9db 	bl	800de80 <xQueueGenericCreateStatic>
 800daca:	4603      	mov	r3, r0
 800dacc:	e008      	b.n	800dae0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6818      	ldr	r0, [r3, #0]
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	2200      	movs	r2, #0
 800dad8:	4619      	mov	r1, r3
 800dada:	f000 fa48 	bl	800df6e <xQueueGenericCreate>
 800dade:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	370c      	adds	r7, #12
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd90      	pop	{r4, r7, pc}

0800dae8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b086      	sub	sp, #24
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800daf4:	2300      	movs	r3, #0
 800daf6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d101      	bne.n	800db06 <osMessagePut+0x1e>
    ticks = 1;
 800db02:	2301      	movs	r3, #1
 800db04:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800db06:	f7ff fe98 	bl	800d83a <inHandlerMode>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d018      	beq.n	800db42 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800db10:	f107 0210 	add.w	r2, r7, #16
 800db14:	f107 0108 	add.w	r1, r7, #8
 800db18:	2300      	movs	r3, #0
 800db1a:	68f8      	ldr	r0, [r7, #12]
 800db1c:	f000 fb82 	bl	800e224 <xQueueGenericSendFromISR>
 800db20:	4603      	mov	r3, r0
 800db22:	2b01      	cmp	r3, #1
 800db24:	d001      	beq.n	800db2a <osMessagePut+0x42>
      return osErrorOS;
 800db26:	23ff      	movs	r3, #255	; 0xff
 800db28:	e018      	b.n	800db5c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d014      	beq.n	800db5a <osMessagePut+0x72>
 800db30:	4b0c      	ldr	r3, [pc, #48]	; (800db64 <osMessagePut+0x7c>)
 800db32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db36:	601a      	str	r2, [r3, #0]
 800db38:	f3bf 8f4f 	dsb	sy
 800db3c:	f3bf 8f6f 	isb	sy
 800db40:	e00b      	b.n	800db5a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800db42:	f107 0108 	add.w	r1, r7, #8
 800db46:	2300      	movs	r3, #0
 800db48:	697a      	ldr	r2, [r7, #20]
 800db4a:	68f8      	ldr	r0, [r7, #12]
 800db4c:	f000 fa6c 	bl	800e028 <xQueueGenericSend>
 800db50:	4603      	mov	r3, r0
 800db52:	2b01      	cmp	r3, #1
 800db54:	d001      	beq.n	800db5a <osMessagePut+0x72>
      return osErrorOS;
 800db56:	23ff      	movs	r3, #255	; 0xff
 800db58:	e000      	b.n	800db5c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800db5a:	2300      	movs	r3, #0
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3718      	adds	r7, #24
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	e000ed04 	.word	0xe000ed04

0800db68 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800db68:	b590      	push	{r4, r7, lr}
 800db6a:	b08b      	sub	sp, #44	; 0x2c
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800db78:	2300      	movs	r3, #0
 800db7a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d10a      	bne.n	800db98 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800db82:	2380      	movs	r3, #128	; 0x80
 800db84:	617b      	str	r3, [r7, #20]
    return event;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	461c      	mov	r4, r3
 800db8a:	f107 0314 	add.w	r3, r7, #20
 800db8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800db92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800db96:	e054      	b.n	800dc42 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800db98:	2300      	movs	r3, #0
 800db9a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800db9c:	2300      	movs	r3, #0
 800db9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dba6:	d103      	bne.n	800dbb0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800dba8:	f04f 33ff 	mov.w	r3, #4294967295
 800dbac:	627b      	str	r3, [r7, #36]	; 0x24
 800dbae:	e009      	b.n	800dbc4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d006      	beq.n	800dbc4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800dbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d101      	bne.n	800dbc4 <osMessageGet+0x5c>
      ticks = 1;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800dbc4:	f7ff fe39 	bl	800d83a <inHandlerMode>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d01c      	beq.n	800dc08 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800dbce:	f107 0220 	add.w	r2, r7, #32
 800dbd2:	f107 0314 	add.w	r3, r7, #20
 800dbd6:	3304      	adds	r3, #4
 800dbd8:	4619      	mov	r1, r3
 800dbda:	68b8      	ldr	r0, [r7, #8]
 800dbdc:	f000 fe34 	bl	800e848 <xQueueReceiveFromISR>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	d102      	bne.n	800dbec <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800dbe6:	2310      	movs	r3, #16
 800dbe8:	617b      	str	r3, [r7, #20]
 800dbea:	e001      	b.n	800dbf0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800dbec:	2300      	movs	r3, #0
 800dbee:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800dbf0:	6a3b      	ldr	r3, [r7, #32]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d01d      	beq.n	800dc32 <osMessageGet+0xca>
 800dbf6:	4b15      	ldr	r3, [pc, #84]	; (800dc4c <osMessageGet+0xe4>)
 800dbf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbfc:	601a      	str	r2, [r3, #0]
 800dbfe:	f3bf 8f4f 	dsb	sy
 800dc02:	f3bf 8f6f 	isb	sy
 800dc06:	e014      	b.n	800dc32 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800dc08:	f107 0314 	add.w	r3, r7, #20
 800dc0c:	3304      	adds	r3, #4
 800dc0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc10:	4619      	mov	r1, r3
 800dc12:	68b8      	ldr	r0, [r7, #8]
 800dc14:	f000 fc2c 	bl	800e470 <xQueueReceive>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d102      	bne.n	800dc24 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800dc1e:	2310      	movs	r3, #16
 800dc20:	617b      	str	r3, [r7, #20]
 800dc22:	e006      	b.n	800dc32 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800dc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d101      	bne.n	800dc2e <osMessageGet+0xc6>
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	e000      	b.n	800dc30 <osMessageGet+0xc8>
 800dc2e:	2340      	movs	r3, #64	; 0x40
 800dc30:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	461c      	mov	r4, r3
 800dc36:	f107 0314 	add.w	r3, r7, #20
 800dc3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dc3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800dc42:	68f8      	ldr	r0, [r7, #12]
 800dc44:	372c      	adds	r7, #44	; 0x2c
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd90      	pop	{r4, r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	e000ed04 	.word	0xe000ed04

0800dc50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dc50:	b480      	push	{r7}
 800dc52:	b083      	sub	sp, #12
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f103 0208 	add.w	r2, r3, #8
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f04f 32ff 	mov.w	r2, #4294967295
 800dc68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f103 0208 	add.w	r2, r3, #8
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f103 0208 	add.w	r2, r3, #8
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2200      	movs	r2, #0
 800dc82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dc84:	bf00      	nop
 800dc86:	370c      	adds	r7, #12
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bc80      	pop	{r7}
 800dc8c:	4770      	bx	lr

0800dc8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dc8e:	b480      	push	{r7}
 800dc90:	b083      	sub	sp, #12
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dc9c:	bf00      	nop
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bc80      	pop	{r7}
 800dca4:	4770      	bx	lr

0800dca6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dca6:	b480      	push	{r7}
 800dca8:	b085      	sub	sp, #20
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
 800dcae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	689a      	ldr	r2, [r3, #8]
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	689b      	ldr	r3, [r3, #8]
 800dcc8:	683a      	ldr	r2, [r7, #0]
 800dcca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	683a      	ldr	r2, [r7, #0]
 800dcd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	687a      	ldr	r2, [r7, #4]
 800dcd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	1c5a      	adds	r2, r3, #1
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	601a      	str	r2, [r3, #0]
}
 800dce2:	bf00      	nop
 800dce4:	3714      	adds	r7, #20
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bc80      	pop	{r7}
 800dcea:	4770      	bx	lr

0800dcec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dcec:	b480      	push	{r7}
 800dcee:	b085      	sub	sp, #20
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd02:	d103      	bne.n	800dd0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	691b      	ldr	r3, [r3, #16]
 800dd08:	60fb      	str	r3, [r7, #12]
 800dd0a:	e00c      	b.n	800dd26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	3308      	adds	r3, #8
 800dd10:	60fb      	str	r3, [r7, #12]
 800dd12:	e002      	b.n	800dd1a <vListInsert+0x2e>
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	60fb      	str	r3, [r7, #12]
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	68ba      	ldr	r2, [r7, #8]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d2f6      	bcs.n	800dd14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	685a      	ldr	r2, [r3, #4]
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	683a      	ldr	r2, [r7, #0]
 800dd34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	68fa      	ldr	r2, [r7, #12]
 800dd3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	683a      	ldr	r2, [r7, #0]
 800dd40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	1c5a      	adds	r2, r3, #1
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	601a      	str	r2, [r3, #0]
}
 800dd52:	bf00      	nop
 800dd54:	3714      	adds	r7, #20
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bc80      	pop	{r7}
 800dd5a:	4770      	bx	lr

0800dd5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b085      	sub	sp, #20
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	691b      	ldr	r3, [r3, #16]
 800dd68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	6892      	ldr	r2, [r2, #8]
 800dd72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	687a      	ldr	r2, [r7, #4]
 800dd7a:	6852      	ldr	r2, [r2, #4]
 800dd7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	685b      	ldr	r3, [r3, #4]
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d103      	bne.n	800dd90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	689a      	ldr	r2, [r3, #8]
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2200      	movs	r2, #0
 800dd94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	1e5a      	subs	r2, r3, #1
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3714      	adds	r7, #20
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bc80      	pop	{r7}
 800ddac:	4770      	bx	lr
	...

0800ddb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d10a      	bne.n	800ddda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ddc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc8:	f383 8811 	msr	BASEPRI, r3
 800ddcc:	f3bf 8f6f 	isb	sy
 800ddd0:	f3bf 8f4f 	dsb	sy
 800ddd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ddd6:	bf00      	nop
 800ddd8:	e7fe      	b.n	800ddd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ddda:	f002 fb97 	bl	801050c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dde6:	68f9      	ldr	r1, [r7, #12]
 800dde8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ddea:	fb01 f303 	mul.w	r3, r1, r3
 800ddee:	441a      	add	r2, r3
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681a      	ldr	r2, [r3, #0]
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de0a:	3b01      	subs	r3, #1
 800de0c:	68f9      	ldr	r1, [r7, #12]
 800de0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800de10:	fb01 f303 	mul.w	r3, r1, r3
 800de14:	441a      	add	r2, r3
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	22ff      	movs	r2, #255	; 0xff
 800de1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	22ff      	movs	r2, #255	; 0xff
 800de26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d114      	bne.n	800de5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	691b      	ldr	r3, [r3, #16]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d01a      	beq.n	800de6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	3310      	adds	r3, #16
 800de3c:	4618      	mov	r0, r3
 800de3e:	f001 fb75 	bl	800f52c <xTaskRemoveFromEventList>
 800de42:	4603      	mov	r3, r0
 800de44:	2b00      	cmp	r3, #0
 800de46:	d012      	beq.n	800de6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800de48:	4b0c      	ldr	r3, [pc, #48]	; (800de7c <xQueueGenericReset+0xcc>)
 800de4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de4e:	601a      	str	r2, [r3, #0]
 800de50:	f3bf 8f4f 	dsb	sy
 800de54:	f3bf 8f6f 	isb	sy
 800de58:	e009      	b.n	800de6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	3310      	adds	r3, #16
 800de5e:	4618      	mov	r0, r3
 800de60:	f7ff fef6 	bl	800dc50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	3324      	adds	r3, #36	; 0x24
 800de68:	4618      	mov	r0, r3
 800de6a:	f7ff fef1 	bl	800dc50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800de6e:	f002 fb7d 	bl	801056c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800de72:	2301      	movs	r3, #1
}
 800de74:	4618      	mov	r0, r3
 800de76:	3710      	adds	r7, #16
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	e000ed04 	.word	0xe000ed04

0800de80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800de80:	b580      	push	{r7, lr}
 800de82:	b08e      	sub	sp, #56	; 0x38
 800de84:	af02      	add	r7, sp, #8
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	607a      	str	r2, [r7, #4]
 800de8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d10a      	bne.n	800deaa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800de94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de98:	f383 8811 	msr	BASEPRI, r3
 800de9c:	f3bf 8f6f 	isb	sy
 800dea0:	f3bf 8f4f 	dsb	sy
 800dea4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dea6:	bf00      	nop
 800dea8:	e7fe      	b.n	800dea8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d10a      	bne.n	800dec6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800deb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deb4:	f383 8811 	msr	BASEPRI, r3
 800deb8:	f3bf 8f6f 	isb	sy
 800debc:	f3bf 8f4f 	dsb	sy
 800dec0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dec2:	bf00      	nop
 800dec4:	e7fe      	b.n	800dec4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d002      	beq.n	800ded2 <xQueueGenericCreateStatic+0x52>
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d001      	beq.n	800ded6 <xQueueGenericCreateStatic+0x56>
 800ded2:	2301      	movs	r3, #1
 800ded4:	e000      	b.n	800ded8 <xQueueGenericCreateStatic+0x58>
 800ded6:	2300      	movs	r3, #0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d10a      	bne.n	800def2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800dedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee0:	f383 8811 	msr	BASEPRI, r3
 800dee4:	f3bf 8f6f 	isb	sy
 800dee8:	f3bf 8f4f 	dsb	sy
 800deec:	623b      	str	r3, [r7, #32]
}
 800deee:	bf00      	nop
 800def0:	e7fe      	b.n	800def0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d102      	bne.n	800defe <xQueueGenericCreateStatic+0x7e>
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d101      	bne.n	800df02 <xQueueGenericCreateStatic+0x82>
 800defe:	2301      	movs	r3, #1
 800df00:	e000      	b.n	800df04 <xQueueGenericCreateStatic+0x84>
 800df02:	2300      	movs	r3, #0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d10a      	bne.n	800df1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800df08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0c:	f383 8811 	msr	BASEPRI, r3
 800df10:	f3bf 8f6f 	isb	sy
 800df14:	f3bf 8f4f 	dsb	sy
 800df18:	61fb      	str	r3, [r7, #28]
}
 800df1a:	bf00      	nop
 800df1c:	e7fe      	b.n	800df1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800df1e:	2348      	movs	r3, #72	; 0x48
 800df20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	2b48      	cmp	r3, #72	; 0x48
 800df26:	d00a      	beq.n	800df3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800df28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df2c:	f383 8811 	msr	BASEPRI, r3
 800df30:	f3bf 8f6f 	isb	sy
 800df34:	f3bf 8f4f 	dsb	sy
 800df38:	61bb      	str	r3, [r7, #24]
}
 800df3a:	bf00      	nop
 800df3c:	e7fe      	b.n	800df3c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800df42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df44:	2b00      	cmp	r3, #0
 800df46:	d00d      	beq.n	800df64 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800df48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4a:	2201      	movs	r2, #1
 800df4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800df50:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800df54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df56:	9300      	str	r3, [sp, #0]
 800df58:	4613      	mov	r3, r2
 800df5a:	687a      	ldr	r2, [r7, #4]
 800df5c:	68b9      	ldr	r1, [r7, #8]
 800df5e:	68f8      	ldr	r0, [r7, #12]
 800df60:	f000 f843 	bl	800dfea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800df64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800df66:	4618      	mov	r0, r3
 800df68:	3730      	adds	r7, #48	; 0x30
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}

0800df6e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800df6e:	b580      	push	{r7, lr}
 800df70:	b08a      	sub	sp, #40	; 0x28
 800df72:	af02      	add	r7, sp, #8
 800df74:	60f8      	str	r0, [r7, #12]
 800df76:	60b9      	str	r1, [r7, #8]
 800df78:	4613      	mov	r3, r2
 800df7a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d10a      	bne.n	800df98 <xQueueGenericCreate+0x2a>
	__asm volatile
 800df82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df86:	f383 8811 	msr	BASEPRI, r3
 800df8a:	f3bf 8f6f 	isb	sy
 800df8e:	f3bf 8f4f 	dsb	sy
 800df92:	613b      	str	r3, [r7, #16]
}
 800df94:	bf00      	nop
 800df96:	e7fe      	b.n	800df96 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d102      	bne.n	800dfa4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	61fb      	str	r3, [r7, #28]
 800dfa2:	e004      	b.n	800dfae <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	68ba      	ldr	r2, [r7, #8]
 800dfa8:	fb02 f303 	mul.w	r3, r2, r3
 800dfac:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dfae:	69fb      	ldr	r3, [r7, #28]
 800dfb0:	3348      	adds	r3, #72	; 0x48
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f002 fbaa 	bl	801070c <pvPortMalloc>
 800dfb8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dfba:	69bb      	ldr	r3, [r7, #24]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d00f      	beq.n	800dfe0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800dfc0:	69bb      	ldr	r3, [r7, #24]
 800dfc2:	3348      	adds	r3, #72	; 0x48
 800dfc4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dfc6:	69bb      	ldr	r3, [r7, #24]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dfce:	79fa      	ldrb	r2, [r7, #7]
 800dfd0:	69bb      	ldr	r3, [r7, #24]
 800dfd2:	9300      	str	r3, [sp, #0]
 800dfd4:	4613      	mov	r3, r2
 800dfd6:	697a      	ldr	r2, [r7, #20]
 800dfd8:	68b9      	ldr	r1, [r7, #8]
 800dfda:	68f8      	ldr	r0, [r7, #12]
 800dfdc:	f000 f805 	bl	800dfea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800dfe0:	69bb      	ldr	r3, [r7, #24]
	}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3720      	adds	r7, #32
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}

0800dfea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dfea:	b580      	push	{r7, lr}
 800dfec:	b084      	sub	sp, #16
 800dfee:	af00      	add	r7, sp, #0
 800dff0:	60f8      	str	r0, [r7, #12]
 800dff2:	60b9      	str	r1, [r7, #8]
 800dff4:	607a      	str	r2, [r7, #4]
 800dff6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d103      	bne.n	800e006 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dffe:	69bb      	ldr	r3, [r7, #24]
 800e000:	69ba      	ldr	r2, [r7, #24]
 800e002:	601a      	str	r2, [r3, #0]
 800e004:	e002      	b.n	800e00c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e006:	69bb      	ldr	r3, [r7, #24]
 800e008:	687a      	ldr	r2, [r7, #4]
 800e00a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e00c:	69bb      	ldr	r3, [r7, #24]
 800e00e:	68fa      	ldr	r2, [r7, #12]
 800e010:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e012:	69bb      	ldr	r3, [r7, #24]
 800e014:	68ba      	ldr	r2, [r7, #8]
 800e016:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e018:	2101      	movs	r1, #1
 800e01a:	69b8      	ldr	r0, [r7, #24]
 800e01c:	f7ff fec8 	bl	800ddb0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e020:	bf00      	nop
 800e022:	3710      	adds	r7, #16
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b08e      	sub	sp, #56	; 0x38
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	60f8      	str	r0, [r7, #12]
 800e030:	60b9      	str	r1, [r7, #8]
 800e032:	607a      	str	r2, [r7, #4]
 800e034:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e036:	2300      	movs	r3, #0
 800e038:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e040:	2b00      	cmp	r3, #0
 800e042:	d10a      	bne.n	800e05a <xQueueGenericSend+0x32>
	__asm volatile
 800e044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e048:	f383 8811 	msr	BASEPRI, r3
 800e04c:	f3bf 8f6f 	isb	sy
 800e050:	f3bf 8f4f 	dsb	sy
 800e054:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e056:	bf00      	nop
 800e058:	e7fe      	b.n	800e058 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d103      	bne.n	800e068 <xQueueGenericSend+0x40>
 800e060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e064:	2b00      	cmp	r3, #0
 800e066:	d101      	bne.n	800e06c <xQueueGenericSend+0x44>
 800e068:	2301      	movs	r3, #1
 800e06a:	e000      	b.n	800e06e <xQueueGenericSend+0x46>
 800e06c:	2300      	movs	r3, #0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d10a      	bne.n	800e088 <xQueueGenericSend+0x60>
	__asm volatile
 800e072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e076:	f383 8811 	msr	BASEPRI, r3
 800e07a:	f3bf 8f6f 	isb	sy
 800e07e:	f3bf 8f4f 	dsb	sy
 800e082:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e084:	bf00      	nop
 800e086:	e7fe      	b.n	800e086 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	2b02      	cmp	r3, #2
 800e08c:	d103      	bne.n	800e096 <xQueueGenericSend+0x6e>
 800e08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e092:	2b01      	cmp	r3, #1
 800e094:	d101      	bne.n	800e09a <xQueueGenericSend+0x72>
 800e096:	2301      	movs	r3, #1
 800e098:	e000      	b.n	800e09c <xQueueGenericSend+0x74>
 800e09a:	2300      	movs	r3, #0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d10a      	bne.n	800e0b6 <xQueueGenericSend+0x8e>
	__asm volatile
 800e0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a4:	f383 8811 	msr	BASEPRI, r3
 800e0a8:	f3bf 8f6f 	isb	sy
 800e0ac:	f3bf 8f4f 	dsb	sy
 800e0b0:	623b      	str	r3, [r7, #32]
}
 800e0b2:	bf00      	nop
 800e0b4:	e7fe      	b.n	800e0b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e0b6:	f001 fbfd 	bl	800f8b4 <xTaskGetSchedulerState>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d102      	bne.n	800e0c6 <xQueueGenericSend+0x9e>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d101      	bne.n	800e0ca <xQueueGenericSend+0xa2>
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	e000      	b.n	800e0cc <xQueueGenericSend+0xa4>
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d10a      	bne.n	800e0e6 <xQueueGenericSend+0xbe>
	__asm volatile
 800e0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d4:	f383 8811 	msr	BASEPRI, r3
 800e0d8:	f3bf 8f6f 	isb	sy
 800e0dc:	f3bf 8f4f 	dsb	sy
 800e0e0:	61fb      	str	r3, [r7, #28]
}
 800e0e2:	bf00      	nop
 800e0e4:	e7fe      	b.n	800e0e4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e0e6:	f002 fa11 	bl	801050c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d302      	bcc.n	800e0fc <xQueueGenericSend+0xd4>
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	2b02      	cmp	r3, #2
 800e0fa:	d129      	bne.n	800e150 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e0fc:	683a      	ldr	r2, [r7, #0]
 800e0fe:	68b9      	ldr	r1, [r7, #8]
 800e100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e102:	f000 fc38 	bl	800e976 <prvCopyDataToQueue>
 800e106:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d010      	beq.n	800e132 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e112:	3324      	adds	r3, #36	; 0x24
 800e114:	4618      	mov	r0, r3
 800e116:	f001 fa09 	bl	800f52c <xTaskRemoveFromEventList>
 800e11a:	4603      	mov	r3, r0
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d013      	beq.n	800e148 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e120:	4b3f      	ldr	r3, [pc, #252]	; (800e220 <xQueueGenericSend+0x1f8>)
 800e122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e126:	601a      	str	r2, [r3, #0]
 800e128:	f3bf 8f4f 	dsb	sy
 800e12c:	f3bf 8f6f 	isb	sy
 800e130:	e00a      	b.n	800e148 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e134:	2b00      	cmp	r3, #0
 800e136:	d007      	beq.n	800e148 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e138:	4b39      	ldr	r3, [pc, #228]	; (800e220 <xQueueGenericSend+0x1f8>)
 800e13a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e13e:	601a      	str	r2, [r3, #0]
 800e140:	f3bf 8f4f 	dsb	sy
 800e144:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e148:	f002 fa10 	bl	801056c <vPortExitCritical>
				return pdPASS;
 800e14c:	2301      	movs	r3, #1
 800e14e:	e063      	b.n	800e218 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d103      	bne.n	800e15e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e156:	f002 fa09 	bl	801056c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e15a:	2300      	movs	r3, #0
 800e15c:	e05c      	b.n	800e218 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e160:	2b00      	cmp	r3, #0
 800e162:	d106      	bne.n	800e172 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e164:	f107 0314 	add.w	r3, r7, #20
 800e168:	4618      	mov	r0, r3
 800e16a:	f001 fa41 	bl	800f5f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e16e:	2301      	movs	r3, #1
 800e170:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e172:	f002 f9fb 	bl	801056c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e176:	f000 ffb1 	bl	800f0dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e17a:	f002 f9c7 	bl	801050c <vPortEnterCritical>
 800e17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e180:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e184:	b25b      	sxtb	r3, r3
 800e186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e18a:	d103      	bne.n	800e194 <xQueueGenericSend+0x16c>
 800e18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e18e:	2200      	movs	r2, #0
 800e190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e19a:	b25b      	sxtb	r3, r3
 800e19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1a0:	d103      	bne.n	800e1aa <xQueueGenericSend+0x182>
 800e1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e1aa:	f002 f9df 	bl	801056c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e1ae:	1d3a      	adds	r2, r7, #4
 800e1b0:	f107 0314 	add.w	r3, r7, #20
 800e1b4:	4611      	mov	r1, r2
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f001 fa30 	bl	800f61c <xTaskCheckForTimeOut>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d124      	bne.n	800e20c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e1c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1c4:	f000 fccf 	bl	800eb66 <prvIsQueueFull>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d018      	beq.n	800e200 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d0:	3310      	adds	r3, #16
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	4611      	mov	r1, r2
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f001 f958 	bl	800f48c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e1dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1de:	f000 fc5a 	bl	800ea96 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e1e2:	f000 ff89 	bl	800f0f8 <xTaskResumeAll>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	f47f af7c 	bne.w	800e0e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e1ee:	4b0c      	ldr	r3, [pc, #48]	; (800e220 <xQueueGenericSend+0x1f8>)
 800e1f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1f4:	601a      	str	r2, [r3, #0]
 800e1f6:	f3bf 8f4f 	dsb	sy
 800e1fa:	f3bf 8f6f 	isb	sy
 800e1fe:	e772      	b.n	800e0e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e202:	f000 fc48 	bl	800ea96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e206:	f000 ff77 	bl	800f0f8 <xTaskResumeAll>
 800e20a:	e76c      	b.n	800e0e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e20c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e20e:	f000 fc42 	bl	800ea96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e212:	f000 ff71 	bl	800f0f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e216:	2300      	movs	r3, #0
		}
	}
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3738      	adds	r7, #56	; 0x38
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}
 800e220:	e000ed04 	.word	0xe000ed04

0800e224 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b08e      	sub	sp, #56	; 0x38
 800e228:	af00      	add	r7, sp, #0
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	607a      	str	r2, [r7, #4]
 800e230:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d10a      	bne.n	800e252 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e240:	f383 8811 	msr	BASEPRI, r3
 800e244:	f3bf 8f6f 	isb	sy
 800e248:	f3bf 8f4f 	dsb	sy
 800e24c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e24e:	bf00      	nop
 800e250:	e7fe      	b.n	800e250 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d103      	bne.n	800e260 <xQueueGenericSendFromISR+0x3c>
 800e258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d101      	bne.n	800e264 <xQueueGenericSendFromISR+0x40>
 800e260:	2301      	movs	r3, #1
 800e262:	e000      	b.n	800e266 <xQueueGenericSendFromISR+0x42>
 800e264:	2300      	movs	r3, #0
 800e266:	2b00      	cmp	r3, #0
 800e268:	d10a      	bne.n	800e280 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26e:	f383 8811 	msr	BASEPRI, r3
 800e272:	f3bf 8f6f 	isb	sy
 800e276:	f3bf 8f4f 	dsb	sy
 800e27a:	623b      	str	r3, [r7, #32]
}
 800e27c:	bf00      	nop
 800e27e:	e7fe      	b.n	800e27e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	2b02      	cmp	r3, #2
 800e284:	d103      	bne.n	800e28e <xQueueGenericSendFromISR+0x6a>
 800e286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d101      	bne.n	800e292 <xQueueGenericSendFromISR+0x6e>
 800e28e:	2301      	movs	r3, #1
 800e290:	e000      	b.n	800e294 <xQueueGenericSendFromISR+0x70>
 800e292:	2300      	movs	r3, #0
 800e294:	2b00      	cmp	r3, #0
 800e296:	d10a      	bne.n	800e2ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29c:	f383 8811 	msr	BASEPRI, r3
 800e2a0:	f3bf 8f6f 	isb	sy
 800e2a4:	f3bf 8f4f 	dsb	sy
 800e2a8:	61fb      	str	r3, [r7, #28]
}
 800e2aa:	bf00      	nop
 800e2ac:	e7fe      	b.n	800e2ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e2ae:	f002 f9ef 	bl	8010690 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e2b2:	f3ef 8211 	mrs	r2, BASEPRI
 800e2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ba:	f383 8811 	msr	BASEPRI, r3
 800e2be:	f3bf 8f6f 	isb	sy
 800e2c2:	f3bf 8f4f 	dsb	sy
 800e2c6:	61ba      	str	r2, [r7, #24]
 800e2c8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e2ca:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d302      	bcc.n	800e2e0 <xQueueGenericSendFromISR+0xbc>
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	2b02      	cmp	r3, #2
 800e2de:	d12c      	bne.n	800e33a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e2ea:	683a      	ldr	r2, [r7, #0]
 800e2ec:	68b9      	ldr	r1, [r7, #8]
 800e2ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2f0:	f000 fb41 	bl	800e976 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e2f4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2fc:	d112      	bne.n	800e324 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e302:	2b00      	cmp	r3, #0
 800e304:	d016      	beq.n	800e334 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e308:	3324      	adds	r3, #36	; 0x24
 800e30a:	4618      	mov	r0, r3
 800e30c:	f001 f90e 	bl	800f52c <xTaskRemoveFromEventList>
 800e310:	4603      	mov	r3, r0
 800e312:	2b00      	cmp	r3, #0
 800e314:	d00e      	beq.n	800e334 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d00b      	beq.n	800e334 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2201      	movs	r2, #1
 800e320:	601a      	str	r2, [r3, #0]
 800e322:	e007      	b.n	800e334 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e324:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e328:	3301      	adds	r3, #1
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	b25a      	sxtb	r2, r3
 800e32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e334:	2301      	movs	r3, #1
 800e336:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e338:	e001      	b.n	800e33e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e33a:	2300      	movs	r3, #0
 800e33c:	637b      	str	r3, [r7, #52]	; 0x34
 800e33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e340:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e348:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3738      	adds	r7, #56	; 0x38
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}

0800e354 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b08e      	sub	sp, #56	; 0x38
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e364:	2b00      	cmp	r3, #0
 800e366:	d10a      	bne.n	800e37e <xQueueGiveFromISR+0x2a>
	__asm volatile
 800e368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e36c:	f383 8811 	msr	BASEPRI, r3
 800e370:	f3bf 8f6f 	isb	sy
 800e374:	f3bf 8f4f 	dsb	sy
 800e378:	623b      	str	r3, [r7, #32]
}
 800e37a:	bf00      	nop
 800e37c:	e7fe      	b.n	800e37c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00a      	beq.n	800e39c <xQueueGiveFromISR+0x48>
	__asm volatile
 800e386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e38a:	f383 8811 	msr	BASEPRI, r3
 800e38e:	f3bf 8f6f 	isb	sy
 800e392:	f3bf 8f4f 	dsb	sy
 800e396:	61fb      	str	r3, [r7, #28]
}
 800e398:	bf00      	nop
 800e39a:	e7fe      	b.n	800e39a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800e39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d103      	bne.n	800e3ac <xQueueGiveFromISR+0x58>
 800e3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d101      	bne.n	800e3b0 <xQueueGiveFromISR+0x5c>
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	e000      	b.n	800e3b2 <xQueueGiveFromISR+0x5e>
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d10a      	bne.n	800e3cc <xQueueGiveFromISR+0x78>
	__asm volatile
 800e3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ba:	f383 8811 	msr	BASEPRI, r3
 800e3be:	f3bf 8f6f 	isb	sy
 800e3c2:	f3bf 8f4f 	dsb	sy
 800e3c6:	61bb      	str	r3, [r7, #24]
}
 800e3c8:	bf00      	nop
 800e3ca:	e7fe      	b.n	800e3ca <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e3cc:	f002 f960 	bl	8010690 <vPortValidateInterruptPriority>
	__asm volatile
 800e3d0:	f3ef 8211 	mrs	r2, BASEPRI
 800e3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d8:	f383 8811 	msr	BASEPRI, r3
 800e3dc:	f3bf 8f6f 	isb	sy
 800e3e0:	f3bf 8f4f 	dsb	sy
 800e3e4:	617a      	str	r2, [r7, #20]
 800e3e6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e3e8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e3ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3f0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d22b      	bcs.n	800e454 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e408:	1c5a      	adds	r2, r3, #1
 800e40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e40c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e40e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e416:	d112      	bne.n	800e43e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d016      	beq.n	800e44e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e422:	3324      	adds	r3, #36	; 0x24
 800e424:	4618      	mov	r0, r3
 800e426:	f001 f881 	bl	800f52c <xTaskRemoveFromEventList>
 800e42a:	4603      	mov	r3, r0
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d00e      	beq.n	800e44e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d00b      	beq.n	800e44e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	2201      	movs	r2, #1
 800e43a:	601a      	str	r2, [r3, #0]
 800e43c:	e007      	b.n	800e44e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e43e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e442:	3301      	adds	r3, #1
 800e444:	b2db      	uxtb	r3, r3
 800e446:	b25a      	sxtb	r2, r3
 800e448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e44e:	2301      	movs	r3, #1
 800e450:	637b      	str	r3, [r7, #52]	; 0x34
 800e452:	e001      	b.n	800e458 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e454:	2300      	movs	r3, #0
 800e456:	637b      	str	r3, [r7, #52]	; 0x34
 800e458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f383 8811 	msr	BASEPRI, r3
}
 800e462:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e466:	4618      	mov	r0, r3
 800e468:	3738      	adds	r7, #56	; 0x38
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
	...

0800e470 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b08c      	sub	sp, #48	; 0x30
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	60b9      	str	r1, [r7, #8]
 800e47a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e47c:	2300      	movs	r3, #0
 800e47e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e486:	2b00      	cmp	r3, #0
 800e488:	d10a      	bne.n	800e4a0 <xQueueReceive+0x30>
	__asm volatile
 800e48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e48e:	f383 8811 	msr	BASEPRI, r3
 800e492:	f3bf 8f6f 	isb	sy
 800e496:	f3bf 8f4f 	dsb	sy
 800e49a:	623b      	str	r3, [r7, #32]
}
 800e49c:	bf00      	nop
 800e49e:	e7fe      	b.n	800e49e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d103      	bne.n	800e4ae <xQueueReceive+0x3e>
 800e4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d101      	bne.n	800e4b2 <xQueueReceive+0x42>
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	e000      	b.n	800e4b4 <xQueueReceive+0x44>
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d10a      	bne.n	800e4ce <xQueueReceive+0x5e>
	__asm volatile
 800e4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4bc:	f383 8811 	msr	BASEPRI, r3
 800e4c0:	f3bf 8f6f 	isb	sy
 800e4c4:	f3bf 8f4f 	dsb	sy
 800e4c8:	61fb      	str	r3, [r7, #28]
}
 800e4ca:	bf00      	nop
 800e4cc:	e7fe      	b.n	800e4cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e4ce:	f001 f9f1 	bl	800f8b4 <xTaskGetSchedulerState>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d102      	bne.n	800e4de <xQueueReceive+0x6e>
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d101      	bne.n	800e4e2 <xQueueReceive+0x72>
 800e4de:	2301      	movs	r3, #1
 800e4e0:	e000      	b.n	800e4e4 <xQueueReceive+0x74>
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d10a      	bne.n	800e4fe <xQueueReceive+0x8e>
	__asm volatile
 800e4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ec:	f383 8811 	msr	BASEPRI, r3
 800e4f0:	f3bf 8f6f 	isb	sy
 800e4f4:	f3bf 8f4f 	dsb	sy
 800e4f8:	61bb      	str	r3, [r7, #24]
}
 800e4fa:	bf00      	nop
 800e4fc:	e7fe      	b.n	800e4fc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800e4fe:	f002 f805 	bl	801050c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e506:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d01f      	beq.n	800e54e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e50e:	68b9      	ldr	r1, [r7, #8]
 800e510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e512:	f000 fa9a 	bl	800ea4a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e518:	1e5a      	subs	r2, r3, #1
 800e51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e51c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e520:	691b      	ldr	r3, [r3, #16]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d00f      	beq.n	800e546 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e528:	3310      	adds	r3, #16
 800e52a:	4618      	mov	r0, r3
 800e52c:	f000 fffe 	bl	800f52c <xTaskRemoveFromEventList>
 800e530:	4603      	mov	r3, r0
 800e532:	2b00      	cmp	r3, #0
 800e534:	d007      	beq.n	800e546 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e536:	4b3d      	ldr	r3, [pc, #244]	; (800e62c <xQueueReceive+0x1bc>)
 800e538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e53c:	601a      	str	r2, [r3, #0]
 800e53e:	f3bf 8f4f 	dsb	sy
 800e542:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e546:	f002 f811 	bl	801056c <vPortExitCritical>
				return pdPASS;
 800e54a:	2301      	movs	r3, #1
 800e54c:	e069      	b.n	800e622 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d103      	bne.n	800e55c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e554:	f002 f80a 	bl	801056c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e558:	2300      	movs	r3, #0
 800e55a:	e062      	b.n	800e622 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d106      	bne.n	800e570 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e562:	f107 0310 	add.w	r3, r7, #16
 800e566:	4618      	mov	r0, r3
 800e568:	f001 f842 	bl	800f5f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e56c:	2301      	movs	r3, #1
 800e56e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e570:	f001 fffc 	bl	801056c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e574:	f000 fdb2 	bl	800f0dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e578:	f001 ffc8 	bl	801050c <vPortEnterCritical>
 800e57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e57e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e582:	b25b      	sxtb	r3, r3
 800e584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e588:	d103      	bne.n	800e592 <xQueueReceive+0x122>
 800e58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e58c:	2200      	movs	r2, #0
 800e58e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e598:	b25b      	sxtb	r3, r3
 800e59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e59e:	d103      	bne.n	800e5a8 <xQueueReceive+0x138>
 800e5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5a8:	f001 ffe0 	bl	801056c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e5ac:	1d3a      	adds	r2, r7, #4
 800e5ae:	f107 0310 	add.w	r3, r7, #16
 800e5b2:	4611      	mov	r1, r2
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f001 f831 	bl	800f61c <xTaskCheckForTimeOut>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d123      	bne.n	800e608 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e5c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5c2:	f000 faba 	bl	800eb3a <prvIsQueueEmpty>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d017      	beq.n	800e5fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ce:	3324      	adds	r3, #36	; 0x24
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	4611      	mov	r1, r2
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f000 ff59 	bl	800f48c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e5da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5dc:	f000 fa5b 	bl	800ea96 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e5e0:	f000 fd8a 	bl	800f0f8 <xTaskResumeAll>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d189      	bne.n	800e4fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e5ea:	4b10      	ldr	r3, [pc, #64]	; (800e62c <xQueueReceive+0x1bc>)
 800e5ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5f0:	601a      	str	r2, [r3, #0]
 800e5f2:	f3bf 8f4f 	dsb	sy
 800e5f6:	f3bf 8f6f 	isb	sy
 800e5fa:	e780      	b.n	800e4fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e5fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5fe:	f000 fa4a 	bl	800ea96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e602:	f000 fd79 	bl	800f0f8 <xTaskResumeAll>
 800e606:	e77a      	b.n	800e4fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e608:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e60a:	f000 fa44 	bl	800ea96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e60e:	f000 fd73 	bl	800f0f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e614:	f000 fa91 	bl	800eb3a <prvIsQueueEmpty>
 800e618:	4603      	mov	r3, r0
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	f43f af6f 	beq.w	800e4fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e620:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800e622:	4618      	mov	r0, r3
 800e624:	3730      	adds	r7, #48	; 0x30
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	e000ed04 	.word	0xe000ed04

0800e630 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b08e      	sub	sp, #56	; 0x38
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
 800e638:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e63a:	2300      	movs	r3, #0
 800e63c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e642:	2300      	movs	r3, #0
 800e644:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d10a      	bne.n	800e662 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e650:	f383 8811 	msr	BASEPRI, r3
 800e654:	f3bf 8f6f 	isb	sy
 800e658:	f3bf 8f4f 	dsb	sy
 800e65c:	623b      	str	r3, [r7, #32]
}
 800e65e:	bf00      	nop
 800e660:	e7fe      	b.n	800e660 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e666:	2b00      	cmp	r3, #0
 800e668:	d00a      	beq.n	800e680 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e66e:	f383 8811 	msr	BASEPRI, r3
 800e672:	f3bf 8f6f 	isb	sy
 800e676:	f3bf 8f4f 	dsb	sy
 800e67a:	61fb      	str	r3, [r7, #28]
}
 800e67c:	bf00      	nop
 800e67e:	e7fe      	b.n	800e67e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e680:	f001 f918 	bl	800f8b4 <xTaskGetSchedulerState>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d102      	bne.n	800e690 <xQueueSemaphoreTake+0x60>
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d101      	bne.n	800e694 <xQueueSemaphoreTake+0x64>
 800e690:	2301      	movs	r3, #1
 800e692:	e000      	b.n	800e696 <xQueueSemaphoreTake+0x66>
 800e694:	2300      	movs	r3, #0
 800e696:	2b00      	cmp	r3, #0
 800e698:	d10a      	bne.n	800e6b0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e69e:	f383 8811 	msr	BASEPRI, r3
 800e6a2:	f3bf 8f6f 	isb	sy
 800e6a6:	f3bf 8f4f 	dsb	sy
 800e6aa:	61bb      	str	r3, [r7, #24]
}
 800e6ac:	bf00      	nop
 800e6ae:	e7fe      	b.n	800e6ae <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800e6b0:	f001 ff2c 	bl	801050c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6b8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d024      	beq.n	800e70a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c2:	1e5a      	subs	r2, r3, #1
 800e6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d104      	bne.n	800e6da <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e6d0:	f001 faba 	bl	800fc48 <pvTaskIncrementMutexHeldCount>
 800e6d4:	4602      	mov	r2, r0
 800e6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6dc:	691b      	ldr	r3, [r3, #16]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d00f      	beq.n	800e702 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e4:	3310      	adds	r3, #16
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f000 ff20 	bl	800f52c <xTaskRemoveFromEventList>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d007      	beq.n	800e702 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e6f2:	4b54      	ldr	r3, [pc, #336]	; (800e844 <xQueueSemaphoreTake+0x214>)
 800e6f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6f8:	601a      	str	r2, [r3, #0]
 800e6fa:	f3bf 8f4f 	dsb	sy
 800e6fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e702:	f001 ff33 	bl	801056c <vPortExitCritical>
				return pdPASS;
 800e706:	2301      	movs	r3, #1
 800e708:	e097      	b.n	800e83a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d111      	bne.n	800e734 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e712:	2b00      	cmp	r3, #0
 800e714:	d00a      	beq.n	800e72c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e71a:	f383 8811 	msr	BASEPRI, r3
 800e71e:	f3bf 8f6f 	isb	sy
 800e722:	f3bf 8f4f 	dsb	sy
 800e726:	617b      	str	r3, [r7, #20]
}
 800e728:	bf00      	nop
 800e72a:	e7fe      	b.n	800e72a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e72c:	f001 ff1e 	bl	801056c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e730:	2300      	movs	r3, #0
 800e732:	e082      	b.n	800e83a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e736:	2b00      	cmp	r3, #0
 800e738:	d106      	bne.n	800e748 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e73a:	f107 030c 	add.w	r3, r7, #12
 800e73e:	4618      	mov	r0, r3
 800e740:	f000 ff56 	bl	800f5f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e744:	2301      	movs	r3, #1
 800e746:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e748:	f001 ff10 	bl	801056c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e74c:	f000 fcc6 	bl	800f0dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e750:	f001 fedc 	bl	801050c <vPortEnterCritical>
 800e754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e756:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e75a:	b25b      	sxtb	r3, r3
 800e75c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e760:	d103      	bne.n	800e76a <xQueueSemaphoreTake+0x13a>
 800e762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e764:	2200      	movs	r2, #0
 800e766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e76c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e770:	b25b      	sxtb	r3, r3
 800e772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e776:	d103      	bne.n	800e780 <xQueueSemaphoreTake+0x150>
 800e778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77a:	2200      	movs	r2, #0
 800e77c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e780:	f001 fef4 	bl	801056c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e784:	463a      	mov	r2, r7
 800e786:	f107 030c 	add.w	r3, r7, #12
 800e78a:	4611      	mov	r1, r2
 800e78c:	4618      	mov	r0, r3
 800e78e:	f000 ff45 	bl	800f61c <xTaskCheckForTimeOut>
 800e792:	4603      	mov	r3, r0
 800e794:	2b00      	cmp	r3, #0
 800e796:	d132      	bne.n	800e7fe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e798:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e79a:	f000 f9ce 	bl	800eb3a <prvIsQueueEmpty>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d026      	beq.n	800e7f2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d109      	bne.n	800e7c0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e7ac:	f001 feae 	bl	801050c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f001 f89b 	bl	800f8f0 <xTaskPriorityInherit>
 800e7ba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e7bc:	f001 fed6 	bl	801056c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c2:	3324      	adds	r3, #36	; 0x24
 800e7c4:	683a      	ldr	r2, [r7, #0]
 800e7c6:	4611      	mov	r1, r2
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f000 fe5f 	bl	800f48c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e7ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7d0:	f000 f961 	bl	800ea96 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e7d4:	f000 fc90 	bl	800f0f8 <xTaskResumeAll>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	f47f af68 	bne.w	800e6b0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e7e0:	4b18      	ldr	r3, [pc, #96]	; (800e844 <xQueueSemaphoreTake+0x214>)
 800e7e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7e6:	601a      	str	r2, [r3, #0]
 800e7e8:	f3bf 8f4f 	dsb	sy
 800e7ec:	f3bf 8f6f 	isb	sy
 800e7f0:	e75e      	b.n	800e6b0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e7f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7f4:	f000 f94f 	bl	800ea96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e7f8:	f000 fc7e 	bl	800f0f8 <xTaskResumeAll>
 800e7fc:	e758      	b.n	800e6b0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e7fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e800:	f000 f949 	bl	800ea96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e804:	f000 fc78 	bl	800f0f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e808:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e80a:	f000 f996 	bl	800eb3a <prvIsQueueEmpty>
 800e80e:	4603      	mov	r3, r0
 800e810:	2b00      	cmp	r3, #0
 800e812:	f43f af4d 	beq.w	800e6b0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d00d      	beq.n	800e838 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e81c:	f001 fe76 	bl	801050c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e820:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e822:	f000 f891 	bl	800e948 <prvGetDisinheritPriorityAfterTimeout>
 800e826:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800e828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e82e:	4618      	mov	r0, r3
 800e830:	f001 f96a 	bl	800fb08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e834:	f001 fe9a 	bl	801056c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e838:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3738      	adds	r7, #56	; 0x38
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
 800e842:	bf00      	nop
 800e844:	e000ed04 	.word	0xe000ed04

0800e848 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b08e      	sub	sp, #56	; 0x38
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	60b9      	str	r1, [r7, #8]
 800e852:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d10a      	bne.n	800e874 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e862:	f383 8811 	msr	BASEPRI, r3
 800e866:	f3bf 8f6f 	isb	sy
 800e86a:	f3bf 8f4f 	dsb	sy
 800e86e:	623b      	str	r3, [r7, #32]
}
 800e870:	bf00      	nop
 800e872:	e7fe      	b.n	800e872 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d103      	bne.n	800e882 <xQueueReceiveFromISR+0x3a>
 800e87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d101      	bne.n	800e886 <xQueueReceiveFromISR+0x3e>
 800e882:	2301      	movs	r3, #1
 800e884:	e000      	b.n	800e888 <xQueueReceiveFromISR+0x40>
 800e886:	2300      	movs	r3, #0
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d10a      	bne.n	800e8a2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e890:	f383 8811 	msr	BASEPRI, r3
 800e894:	f3bf 8f6f 	isb	sy
 800e898:	f3bf 8f4f 	dsb	sy
 800e89c:	61fb      	str	r3, [r7, #28]
}
 800e89e:	bf00      	nop
 800e8a0:	e7fe      	b.n	800e8a0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e8a2:	f001 fef5 	bl	8010690 <vPortValidateInterruptPriority>
	__asm volatile
 800e8a6:	f3ef 8211 	mrs	r2, BASEPRI
 800e8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ae:	f383 8811 	msr	BASEPRI, r3
 800e8b2:	f3bf 8f6f 	isb	sy
 800e8b6:	f3bf 8f4f 	dsb	sy
 800e8ba:	61ba      	str	r2, [r7, #24]
 800e8bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e8be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d02f      	beq.n	800e92e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e8d8:	68b9      	ldr	r1, [r7, #8]
 800e8da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8dc:	f000 f8b5 	bl	800ea4a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e2:	1e5a      	subs	r2, r3, #1
 800e8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e8e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8f0:	d112      	bne.n	800e918 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f4:	691b      	ldr	r3, [r3, #16]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d016      	beq.n	800e928 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8fc:	3310      	adds	r3, #16
 800e8fe:	4618      	mov	r0, r3
 800e900:	f000 fe14 	bl	800f52c <xTaskRemoveFromEventList>
 800e904:	4603      	mov	r3, r0
 800e906:	2b00      	cmp	r3, #0
 800e908:	d00e      	beq.n	800e928 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d00b      	beq.n	800e928 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2201      	movs	r2, #1
 800e914:	601a      	str	r2, [r3, #0]
 800e916:	e007      	b.n	800e928 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e91c:	3301      	adds	r3, #1
 800e91e:	b2db      	uxtb	r3, r3
 800e920:	b25a      	sxtb	r2, r3
 800e922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e928:	2301      	movs	r3, #1
 800e92a:	637b      	str	r3, [r7, #52]	; 0x34
 800e92c:	e001      	b.n	800e932 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e92e:	2300      	movs	r3, #0
 800e930:	637b      	str	r3, [r7, #52]	; 0x34
 800e932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e934:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	f383 8811 	msr	BASEPRI, r3
}
 800e93c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e940:	4618      	mov	r0, r3
 800e942:	3738      	adds	r7, #56	; 0x38
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e948:	b480      	push	{r7}
 800e94a:	b085      	sub	sp, #20
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e954:	2b00      	cmp	r3, #0
 800e956:	d006      	beq.n	800e966 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f1c3 0307 	rsb	r3, r3, #7
 800e962:	60fb      	str	r3, [r7, #12]
 800e964:	e001      	b.n	800e96a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e966:	2300      	movs	r3, #0
 800e968:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e96a:	68fb      	ldr	r3, [r7, #12]
	}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3714      	adds	r7, #20
 800e970:	46bd      	mov	sp, r7
 800e972:	bc80      	pop	{r7}
 800e974:	4770      	bx	lr

0800e976 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e976:	b580      	push	{r7, lr}
 800e978:	b086      	sub	sp, #24
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	60f8      	str	r0, [r7, #12]
 800e97e:	60b9      	str	r1, [r7, #8]
 800e980:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e982:	2300      	movs	r3, #0
 800e984:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e98a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e990:	2b00      	cmp	r3, #0
 800e992:	d10d      	bne.n	800e9b0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d14d      	bne.n	800ea38 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	685b      	ldr	r3, [r3, #4]
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f001 f82b 	bl	800f9fc <xTaskPriorityDisinherit>
 800e9a6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	605a      	str	r2, [r3, #4]
 800e9ae:	e043      	b.n	800ea38 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d119      	bne.n	800e9ea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	6898      	ldr	r0, [r3, #8]
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9be:	461a      	mov	r2, r3
 800e9c0:	68b9      	ldr	r1, [r7, #8]
 800e9c2:	f002 f9af 	bl	8010d24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	689a      	ldr	r2, [r3, #8]
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9ce:	441a      	add	r2, r3
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	689a      	ldr	r2, [r3, #8]
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d32b      	bcc.n	800ea38 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	609a      	str	r2, [r3, #8]
 800e9e8:	e026      	b.n	800ea38 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	68d8      	ldr	r0, [r3, #12]
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9f2:	461a      	mov	r2, r3
 800e9f4:	68b9      	ldr	r1, [r7, #8]
 800e9f6:	f002 f995 	bl	8010d24 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	68da      	ldr	r2, [r3, #12]
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea02:	425b      	negs	r3, r3
 800ea04:	441a      	add	r2, r3
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	68da      	ldr	r2, [r3, #12]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d207      	bcs.n	800ea26 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	685a      	ldr	r2, [r3, #4]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea1e:	425b      	negs	r3, r3
 800ea20:	441a      	add	r2, r3
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2b02      	cmp	r3, #2
 800ea2a:	d105      	bne.n	800ea38 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d002      	beq.n	800ea38 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	3b01      	subs	r3, #1
 800ea36:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	1c5a      	adds	r2, r3, #1
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ea40:	697b      	ldr	r3, [r7, #20]
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3718      	adds	r7, #24
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}

0800ea4a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ea4a:	b580      	push	{r7, lr}
 800ea4c:	b082      	sub	sp, #8
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	6078      	str	r0, [r7, #4]
 800ea52:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d018      	beq.n	800ea8e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	68da      	ldr	r2, [r3, #12]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea64:	441a      	add	r2, r3
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	68da      	ldr	r2, [r3, #12]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	685b      	ldr	r3, [r3, #4]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d303      	bcc.n	800ea7e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	68d9      	ldr	r1, [r3, #12]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea86:	461a      	mov	r2, r3
 800ea88:	6838      	ldr	r0, [r7, #0]
 800ea8a:	f002 f94b 	bl	8010d24 <memcpy>
	}
}
 800ea8e:	bf00      	nop
 800ea90:	3708      	adds	r7, #8
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}

0800ea96 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ea96:	b580      	push	{r7, lr}
 800ea98:	b084      	sub	sp, #16
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ea9e:	f001 fd35 	bl	801050c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eaa8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eaaa:	e011      	b.n	800ead0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d012      	beq.n	800eada <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	3324      	adds	r3, #36	; 0x24
 800eab8:	4618      	mov	r0, r3
 800eaba:	f000 fd37 	bl	800f52c <xTaskRemoveFromEventList>
 800eabe:	4603      	mov	r3, r0
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d001      	beq.n	800eac8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800eac4:	f000 fe0c 	bl	800f6e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800eac8:	7bfb      	ldrb	r3, [r7, #15]
 800eaca:	3b01      	subs	r3, #1
 800eacc:	b2db      	uxtb	r3, r3
 800eace:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ead0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	dce9      	bgt.n	800eaac <prvUnlockQueue+0x16>
 800ead8:	e000      	b.n	800eadc <prvUnlockQueue+0x46>
					break;
 800eada:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	22ff      	movs	r2, #255	; 0xff
 800eae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800eae4:	f001 fd42 	bl	801056c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eae8:	f001 fd10 	bl	801050c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eaf2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eaf4:	e011      	b.n	800eb1a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	691b      	ldr	r3, [r3, #16]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d012      	beq.n	800eb24 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	3310      	adds	r3, #16
 800eb02:	4618      	mov	r0, r3
 800eb04:	f000 fd12 	bl	800f52c <xTaskRemoveFromEventList>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d001      	beq.n	800eb12 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800eb0e:	f000 fde7 	bl	800f6e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800eb12:	7bbb      	ldrb	r3, [r7, #14]
 800eb14:	3b01      	subs	r3, #1
 800eb16:	b2db      	uxtb	r3, r3
 800eb18:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eb1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	dce9      	bgt.n	800eaf6 <prvUnlockQueue+0x60>
 800eb22:	e000      	b.n	800eb26 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800eb24:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	22ff      	movs	r2, #255	; 0xff
 800eb2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800eb2e:	f001 fd1d 	bl	801056c <vPortExitCritical>
}
 800eb32:	bf00      	nop
 800eb34:	3710      	adds	r7, #16
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	b084      	sub	sp, #16
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eb42:	f001 fce3 	bl	801050c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d102      	bne.n	800eb54 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	60fb      	str	r3, [r7, #12]
 800eb52:	e001      	b.n	800eb58 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800eb54:	2300      	movs	r3, #0
 800eb56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eb58:	f001 fd08 	bl	801056c <vPortExitCritical>

	return xReturn;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3710      	adds	r7, #16
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}

0800eb66 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800eb66:	b580      	push	{r7, lr}
 800eb68:	b084      	sub	sp, #16
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eb6e:	f001 fccd 	bl	801050c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d102      	bne.n	800eb84 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800eb7e:	2301      	movs	r3, #1
 800eb80:	60fb      	str	r3, [r7, #12]
 800eb82:	e001      	b.n	800eb88 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eb84:	2300      	movs	r3, #0
 800eb86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eb88:	f001 fcf0 	bl	801056c <vPortExitCritical>

	return xReturn;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3710      	adds	r7, #16
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}
	...

0800eb98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eb98:	b480      	push	{r7}
 800eb9a:	b085      	sub	sp, #20
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eba2:	2300      	movs	r3, #0
 800eba4:	60fb      	str	r3, [r7, #12]
 800eba6:	e014      	b.n	800ebd2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eba8:	4a0e      	ldr	r2, [pc, #56]	; (800ebe4 <vQueueAddToRegistry+0x4c>)
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d10b      	bne.n	800ebcc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ebb4:	490b      	ldr	r1, [pc, #44]	; (800ebe4 <vQueueAddToRegistry+0x4c>)
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	683a      	ldr	r2, [r7, #0]
 800ebba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ebbe:	4a09      	ldr	r2, [pc, #36]	; (800ebe4 <vQueueAddToRegistry+0x4c>)
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	00db      	lsls	r3, r3, #3
 800ebc4:	4413      	add	r3, r2
 800ebc6:	687a      	ldr	r2, [r7, #4]
 800ebc8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ebca:	e006      	b.n	800ebda <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	60fb      	str	r3, [r7, #12]
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	2b07      	cmp	r3, #7
 800ebd6:	d9e7      	bls.n	800eba8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ebd8:	bf00      	nop
 800ebda:	bf00      	nop
 800ebdc:	3714      	adds	r7, #20
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bc80      	pop	{r7}
 800ebe2:	4770      	bx	lr
 800ebe4:	20002f9c 	.word	0x20002f9c

0800ebe8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b086      	sub	sp, #24
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	60f8      	str	r0, [r7, #12]
 800ebf0:	60b9      	str	r1, [r7, #8]
 800ebf2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ebf8:	f001 fc88 	bl	801050c <vPortEnterCritical>
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec02:	b25b      	sxtb	r3, r3
 800ec04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec08:	d103      	bne.n	800ec12 <vQueueWaitForMessageRestricted+0x2a>
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec18:	b25b      	sxtb	r3, r3
 800ec1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec1e:	d103      	bne.n	800ec28 <vQueueWaitForMessageRestricted+0x40>
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	2200      	movs	r2, #0
 800ec24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec28:	f001 fca0 	bl	801056c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d106      	bne.n	800ec42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	3324      	adds	r3, #36	; 0x24
 800ec38:	687a      	ldr	r2, [r7, #4]
 800ec3a:	68b9      	ldr	r1, [r7, #8]
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f000 fc49 	bl	800f4d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ec42:	6978      	ldr	r0, [r7, #20]
 800ec44:	f7ff ff27 	bl	800ea96 <prvUnlockQueue>
	}
 800ec48:	bf00      	nop
 800ec4a:	3718      	adds	r7, #24
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b08e      	sub	sp, #56	; 0x38
 800ec54:	af04      	add	r7, sp, #16
 800ec56:	60f8      	str	r0, [r7, #12]
 800ec58:	60b9      	str	r1, [r7, #8]
 800ec5a:	607a      	str	r2, [r7, #4]
 800ec5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ec5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d10a      	bne.n	800ec7a <xTaskCreateStatic+0x2a>
	__asm volatile
 800ec64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec68:	f383 8811 	msr	BASEPRI, r3
 800ec6c:	f3bf 8f6f 	isb	sy
 800ec70:	f3bf 8f4f 	dsb	sy
 800ec74:	623b      	str	r3, [r7, #32]
}
 800ec76:	bf00      	nop
 800ec78:	e7fe      	b.n	800ec78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ec7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d10a      	bne.n	800ec96 <xTaskCreateStatic+0x46>
	__asm volatile
 800ec80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec84:	f383 8811 	msr	BASEPRI, r3
 800ec88:	f3bf 8f6f 	isb	sy
 800ec8c:	f3bf 8f4f 	dsb	sy
 800ec90:	61fb      	str	r3, [r7, #28]
}
 800ec92:	bf00      	nop
 800ec94:	e7fe      	b.n	800ec94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ec96:	23b4      	movs	r3, #180	; 0xb4
 800ec98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	2bb4      	cmp	r3, #180	; 0xb4
 800ec9e:	d00a      	beq.n	800ecb6 <xTaskCreateStatic+0x66>
	__asm volatile
 800eca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca4:	f383 8811 	msr	BASEPRI, r3
 800eca8:	f3bf 8f6f 	isb	sy
 800ecac:	f3bf 8f4f 	dsb	sy
 800ecb0:	61bb      	str	r3, [r7, #24]
}
 800ecb2:	bf00      	nop
 800ecb4:	e7fe      	b.n	800ecb4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ecb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d01e      	beq.n	800ecfa <xTaskCreateStatic+0xaa>
 800ecbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d01b      	beq.n	800ecfa <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ecc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ecc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ecca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800eccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecce:	2202      	movs	r2, #2
 800ecd0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	9303      	str	r3, [sp, #12]
 800ecd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecda:	9302      	str	r3, [sp, #8]
 800ecdc:	f107 0314 	add.w	r3, r7, #20
 800ece0:	9301      	str	r3, [sp, #4]
 800ece2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece4:	9300      	str	r3, [sp, #0]
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	687a      	ldr	r2, [r7, #4]
 800ecea:	68b9      	ldr	r1, [r7, #8]
 800ecec:	68f8      	ldr	r0, [r7, #12]
 800ecee:	f000 f851 	bl	800ed94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ecf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ecf4:	f000 f8e4 	bl	800eec0 <prvAddNewTaskToReadyList>
 800ecf8:	e001      	b.n	800ecfe <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ecfe:	697b      	ldr	r3, [r7, #20]
	}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3728      	adds	r7, #40	; 0x28
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b08c      	sub	sp, #48	; 0x30
 800ed0c:	af04      	add	r7, sp, #16
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	603b      	str	r3, [r7, #0]
 800ed14:	4613      	mov	r3, r2
 800ed16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed18:	88fb      	ldrh	r3, [r7, #6]
 800ed1a:	009b      	lsls	r3, r3, #2
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f001 fcf5 	bl	801070c <pvPortMalloc>
 800ed22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d00e      	beq.n	800ed48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ed2a:	20b4      	movs	r0, #180	; 0xb4
 800ed2c:	f001 fcee 	bl	801070c <pvPortMalloc>
 800ed30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d003      	beq.n	800ed40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	697a      	ldr	r2, [r7, #20]
 800ed3c:	631a      	str	r2, [r3, #48]	; 0x30
 800ed3e:	e005      	b.n	800ed4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ed40:	6978      	ldr	r0, [r7, #20]
 800ed42:	f001 fda7 	bl	8010894 <vPortFree>
 800ed46:	e001      	b.n	800ed4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ed4c:	69fb      	ldr	r3, [r7, #28]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d017      	beq.n	800ed82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ed52:	69fb      	ldr	r3, [r7, #28]
 800ed54:	2200      	movs	r2, #0
 800ed56:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ed5a:	88fa      	ldrh	r2, [r7, #6]
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	9303      	str	r3, [sp, #12]
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	9302      	str	r3, [sp, #8]
 800ed64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed66:	9301      	str	r3, [sp, #4]
 800ed68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed6a:	9300      	str	r3, [sp, #0]
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	68b9      	ldr	r1, [r7, #8]
 800ed70:	68f8      	ldr	r0, [r7, #12]
 800ed72:	f000 f80f 	bl	800ed94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ed76:	69f8      	ldr	r0, [r7, #28]
 800ed78:	f000 f8a2 	bl	800eec0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	61bb      	str	r3, [r7, #24]
 800ed80:	e002      	b.n	800ed88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ed82:	f04f 33ff 	mov.w	r3, #4294967295
 800ed86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ed88:	69bb      	ldr	r3, [r7, #24]
	}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3720      	adds	r7, #32
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
	...

0800ed94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b088      	sub	sp, #32
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	60b9      	str	r1, [r7, #8]
 800ed9e:	607a      	str	r2, [r7, #4]
 800eda0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800eda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800edac:	3b01      	subs	r3, #1
 800edae:	009b      	lsls	r3, r3, #2
 800edb0:	4413      	add	r3, r2
 800edb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800edb4:	69bb      	ldr	r3, [r7, #24]
 800edb6:	f023 0307 	bic.w	r3, r3, #7
 800edba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800edbc:	69bb      	ldr	r3, [r7, #24]
 800edbe:	f003 0307 	and.w	r3, r3, #7
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d00a      	beq.n	800eddc <prvInitialiseNewTask+0x48>
	__asm volatile
 800edc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edca:	f383 8811 	msr	BASEPRI, r3
 800edce:	f3bf 8f6f 	isb	sy
 800edd2:	f3bf 8f4f 	dsb	sy
 800edd6:	617b      	str	r3, [r7, #20]
}
 800edd8:	bf00      	nop
 800edda:	e7fe      	b.n	800edda <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eddc:	2300      	movs	r3, #0
 800edde:	61fb      	str	r3, [r7, #28]
 800ede0:	e012      	b.n	800ee08 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ede2:	68ba      	ldr	r2, [r7, #8]
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	4413      	add	r3, r2
 800ede8:	7819      	ldrb	r1, [r3, #0]
 800edea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	4413      	add	r3, r2
 800edf0:	3334      	adds	r3, #52	; 0x34
 800edf2:	460a      	mov	r2, r1
 800edf4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800edf6:	68ba      	ldr	r2, [r7, #8]
 800edf8:	69fb      	ldr	r3, [r7, #28]
 800edfa:	4413      	add	r3, r2
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d006      	beq.n	800ee10 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	3301      	adds	r3, #1
 800ee06:	61fb      	str	r3, [r7, #28]
 800ee08:	69fb      	ldr	r3, [r7, #28]
 800ee0a:	2b0f      	cmp	r3, #15
 800ee0c:	d9e9      	bls.n	800ede2 <prvInitialiseNewTask+0x4e>
 800ee0e:	e000      	b.n	800ee12 <prvInitialiseNewTask+0x7e>
		{
			break;
 800ee10:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ee12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee14:	2200      	movs	r2, #0
 800ee16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ee1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1c:	2b06      	cmp	r3, #6
 800ee1e:	d901      	bls.n	800ee24 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ee20:	2306      	movs	r3, #6
 800ee22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ee24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ee2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee2e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ee30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee32:	2200      	movs	r2, #0
 800ee34:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ee36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee38:	3304      	adds	r3, #4
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7fe ff27 	bl	800dc8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ee40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee42:	3318      	adds	r3, #24
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7fe ff22 	bl	800dc8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ee4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee52:	f1c3 0207 	rsb	r2, r3, #7
 800ee56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ee5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ee60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee62:	2200      	movs	r2, #0
 800ee64:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ee68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ee70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee72:	334c      	adds	r3, #76	; 0x4c
 800ee74:	2260      	movs	r2, #96	; 0x60
 800ee76:	2100      	movs	r1, #0
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f001 ff61 	bl	8010d40 <memset>
 800ee7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee80:	4a0c      	ldr	r2, [pc, #48]	; (800eeb4 <prvInitialiseNewTask+0x120>)
 800ee82:	651a      	str	r2, [r3, #80]	; 0x50
 800ee84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee86:	4a0c      	ldr	r2, [pc, #48]	; (800eeb8 <prvInitialiseNewTask+0x124>)
 800ee88:	655a      	str	r2, [r3, #84]	; 0x54
 800ee8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee8c:	4a0b      	ldr	r2, [pc, #44]	; (800eebc <prvInitialiseNewTask+0x128>)
 800ee8e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ee90:	683a      	ldr	r2, [r7, #0]
 800ee92:	68f9      	ldr	r1, [r7, #12]
 800ee94:	69b8      	ldr	r0, [r7, #24]
 800ee96:	f001 fa49 	bl	801032c <pxPortInitialiseStack>
 800ee9a:	4602      	mov	r2, r0
 800ee9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee9e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800eea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d002      	beq.n	800eeac <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eeaa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eeac:	bf00      	nop
 800eeae:	3720      	adds	r7, #32
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	08014bb0 	.word	0x08014bb0
 800eeb8:	08014bd0 	.word	0x08014bd0
 800eebc:	08014b90 	.word	0x08014b90

0800eec0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b082      	sub	sp, #8
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800eec8:	f001 fb20 	bl	801050c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800eecc:	4b2a      	ldr	r3, [pc, #168]	; (800ef78 <prvAddNewTaskToReadyList+0xb8>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	3301      	adds	r3, #1
 800eed2:	4a29      	ldr	r2, [pc, #164]	; (800ef78 <prvAddNewTaskToReadyList+0xb8>)
 800eed4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800eed6:	4b29      	ldr	r3, [pc, #164]	; (800ef7c <prvAddNewTaskToReadyList+0xbc>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d109      	bne.n	800eef2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800eede:	4a27      	ldr	r2, [pc, #156]	; (800ef7c <prvAddNewTaskToReadyList+0xbc>)
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eee4:	4b24      	ldr	r3, [pc, #144]	; (800ef78 <prvAddNewTaskToReadyList+0xb8>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d110      	bne.n	800ef0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eeec:	f000 fc1c 	bl	800f728 <prvInitialiseTaskLists>
 800eef0:	e00d      	b.n	800ef0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800eef2:	4b23      	ldr	r3, [pc, #140]	; (800ef80 <prvAddNewTaskToReadyList+0xc0>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d109      	bne.n	800ef0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800eefa:	4b20      	ldr	r3, [pc, #128]	; (800ef7c <prvAddNewTaskToReadyList+0xbc>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d802      	bhi.n	800ef0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ef08:	4a1c      	ldr	r2, [pc, #112]	; (800ef7c <prvAddNewTaskToReadyList+0xbc>)
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ef0e:	4b1d      	ldr	r3, [pc, #116]	; (800ef84 <prvAddNewTaskToReadyList+0xc4>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	3301      	adds	r3, #1
 800ef14:	4a1b      	ldr	r2, [pc, #108]	; (800ef84 <prvAddNewTaskToReadyList+0xc4>)
 800ef16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	409a      	lsls	r2, r3
 800ef20:	4b19      	ldr	r3, [pc, #100]	; (800ef88 <prvAddNewTaskToReadyList+0xc8>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4313      	orrs	r3, r2
 800ef26:	4a18      	ldr	r2, [pc, #96]	; (800ef88 <prvAddNewTaskToReadyList+0xc8>)
 800ef28:	6013      	str	r3, [r2, #0]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef2e:	4613      	mov	r3, r2
 800ef30:	009b      	lsls	r3, r3, #2
 800ef32:	4413      	add	r3, r2
 800ef34:	009b      	lsls	r3, r3, #2
 800ef36:	4a15      	ldr	r2, [pc, #84]	; (800ef8c <prvAddNewTaskToReadyList+0xcc>)
 800ef38:	441a      	add	r2, r3
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	3304      	adds	r3, #4
 800ef3e:	4619      	mov	r1, r3
 800ef40:	4610      	mov	r0, r2
 800ef42:	f7fe feb0 	bl	800dca6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ef46:	f001 fb11 	bl	801056c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ef4a:	4b0d      	ldr	r3, [pc, #52]	; (800ef80 <prvAddNewTaskToReadyList+0xc0>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d00e      	beq.n	800ef70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ef52:	4b0a      	ldr	r3, [pc, #40]	; (800ef7c <prvAddNewTaskToReadyList+0xbc>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d207      	bcs.n	800ef70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ef60:	4b0b      	ldr	r3, [pc, #44]	; (800ef90 <prvAddNewTaskToReadyList+0xd0>)
 800ef62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef66:	601a      	str	r2, [r3, #0]
 800ef68:	f3bf 8f4f 	dsb	sy
 800ef6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef70:	bf00      	nop
 800ef72:	3708      	adds	r7, #8
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	200030dc 	.word	0x200030dc
 800ef7c:	20002fdc 	.word	0x20002fdc
 800ef80:	200030e8 	.word	0x200030e8
 800ef84:	200030f8 	.word	0x200030f8
 800ef88:	200030e4 	.word	0x200030e4
 800ef8c:	20002fe0 	.word	0x20002fe0
 800ef90:	e000ed04 	.word	0xe000ed04

0800ef94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b084      	sub	sp, #16
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d017      	beq.n	800efd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800efa6:	4b13      	ldr	r3, [pc, #76]	; (800eff4 <vTaskDelay+0x60>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d00a      	beq.n	800efc4 <vTaskDelay+0x30>
	__asm volatile
 800efae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb2:	f383 8811 	msr	BASEPRI, r3
 800efb6:	f3bf 8f6f 	isb	sy
 800efba:	f3bf 8f4f 	dsb	sy
 800efbe:	60bb      	str	r3, [r7, #8]
}
 800efc0:	bf00      	nop
 800efc2:	e7fe      	b.n	800efc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800efc4:	f000 f88a 	bl	800f0dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800efc8:	2100      	movs	r1, #0
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f000 fe50 	bl	800fc70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800efd0:	f000 f892 	bl	800f0f8 <xTaskResumeAll>
 800efd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d107      	bne.n	800efec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800efdc:	4b06      	ldr	r3, [pc, #24]	; (800eff8 <vTaskDelay+0x64>)
 800efde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efe2:	601a      	str	r2, [r3, #0]
 800efe4:	f3bf 8f4f 	dsb	sy
 800efe8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800efec:	bf00      	nop
 800efee:	3710      	adds	r7, #16
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	20003104 	.word	0x20003104
 800eff8:	e000ed04 	.word	0xe000ed04

0800effc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b08a      	sub	sp, #40	; 0x28
 800f000:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f002:	2300      	movs	r3, #0
 800f004:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f006:	2300      	movs	r3, #0
 800f008:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f00a:	463a      	mov	r2, r7
 800f00c:	1d39      	adds	r1, r7, #4
 800f00e:	f107 0308 	add.w	r3, r7, #8
 800f012:	4618      	mov	r0, r3
 800f014:	f7f3 fb8e 	bl	8002734 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f018:	6839      	ldr	r1, [r7, #0]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	68ba      	ldr	r2, [r7, #8]
 800f01e:	9202      	str	r2, [sp, #8]
 800f020:	9301      	str	r3, [sp, #4]
 800f022:	2300      	movs	r3, #0
 800f024:	9300      	str	r3, [sp, #0]
 800f026:	2300      	movs	r3, #0
 800f028:	460a      	mov	r2, r1
 800f02a:	4924      	ldr	r1, [pc, #144]	; (800f0bc <vTaskStartScheduler+0xc0>)
 800f02c:	4824      	ldr	r0, [pc, #144]	; (800f0c0 <vTaskStartScheduler+0xc4>)
 800f02e:	f7ff fe0f 	bl	800ec50 <xTaskCreateStatic>
 800f032:	4603      	mov	r3, r0
 800f034:	4a23      	ldr	r2, [pc, #140]	; (800f0c4 <vTaskStartScheduler+0xc8>)
 800f036:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f038:	4b22      	ldr	r3, [pc, #136]	; (800f0c4 <vTaskStartScheduler+0xc8>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d002      	beq.n	800f046 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f040:	2301      	movs	r3, #1
 800f042:	617b      	str	r3, [r7, #20]
 800f044:	e001      	b.n	800f04a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f046:	2300      	movs	r3, #0
 800f048:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	d102      	bne.n	800f056 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f050:	f000 fe74 	bl	800fd3c <xTimerCreateTimerTask>
 800f054:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	2b01      	cmp	r3, #1
 800f05a:	d11b      	bne.n	800f094 <vTaskStartScheduler+0x98>
	__asm volatile
 800f05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f060:	f383 8811 	msr	BASEPRI, r3
 800f064:	f3bf 8f6f 	isb	sy
 800f068:	f3bf 8f4f 	dsb	sy
 800f06c:	613b      	str	r3, [r7, #16]
}
 800f06e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f070:	4b15      	ldr	r3, [pc, #84]	; (800f0c8 <vTaskStartScheduler+0xcc>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	334c      	adds	r3, #76	; 0x4c
 800f076:	4a15      	ldr	r2, [pc, #84]	; (800f0cc <vTaskStartScheduler+0xd0>)
 800f078:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f07a:	4b15      	ldr	r3, [pc, #84]	; (800f0d0 <vTaskStartScheduler+0xd4>)
 800f07c:	f04f 32ff 	mov.w	r2, #4294967295
 800f080:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f082:	4b14      	ldr	r3, [pc, #80]	; (800f0d4 <vTaskStartScheduler+0xd8>)
 800f084:	2201      	movs	r2, #1
 800f086:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f088:	4b13      	ldr	r3, [pc, #76]	; (800f0d8 <vTaskStartScheduler+0xdc>)
 800f08a:	2200      	movs	r2, #0
 800f08c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f08e:	f001 f9cb 	bl	8010428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f092:	e00e      	b.n	800f0b2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f09a:	d10a      	bne.n	800f0b2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800f09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a0:	f383 8811 	msr	BASEPRI, r3
 800f0a4:	f3bf 8f6f 	isb	sy
 800f0a8:	f3bf 8f4f 	dsb	sy
 800f0ac:	60fb      	str	r3, [r7, #12]
}
 800f0ae:	bf00      	nop
 800f0b0:	e7fe      	b.n	800f0b0 <vTaskStartScheduler+0xb4>
}
 800f0b2:	bf00      	nop
 800f0b4:	3718      	adds	r7, #24
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}
 800f0ba:	bf00      	nop
 800f0bc:	080144fc 	.word	0x080144fc
 800f0c0:	0800f6f9 	.word	0x0800f6f9
 800f0c4:	20003100 	.word	0x20003100
 800f0c8:	20002fdc 	.word	0x20002fdc
 800f0cc:	200001e8 	.word	0x200001e8
 800f0d0:	200030fc 	.word	0x200030fc
 800f0d4:	200030e8 	.word	0x200030e8
 800f0d8:	200030e0 	.word	0x200030e0

0800f0dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f0dc:	b480      	push	{r7}
 800f0de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f0e0:	4b04      	ldr	r3, [pc, #16]	; (800f0f4 <vTaskSuspendAll+0x18>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	4a03      	ldr	r2, [pc, #12]	; (800f0f4 <vTaskSuspendAll+0x18>)
 800f0e8:	6013      	str	r3, [r2, #0]
}
 800f0ea:	bf00      	nop
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bc80      	pop	{r7}
 800f0f0:	4770      	bx	lr
 800f0f2:	bf00      	nop
 800f0f4:	20003104 	.word	0x20003104

0800f0f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f0fe:	2300      	movs	r3, #0
 800f100:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f102:	2300      	movs	r3, #0
 800f104:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f106:	4b41      	ldr	r3, [pc, #260]	; (800f20c <xTaskResumeAll+0x114>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d10a      	bne.n	800f124 <xTaskResumeAll+0x2c>
	__asm volatile
 800f10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f112:	f383 8811 	msr	BASEPRI, r3
 800f116:	f3bf 8f6f 	isb	sy
 800f11a:	f3bf 8f4f 	dsb	sy
 800f11e:	603b      	str	r3, [r7, #0]
}
 800f120:	bf00      	nop
 800f122:	e7fe      	b.n	800f122 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f124:	f001 f9f2 	bl	801050c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f128:	4b38      	ldr	r3, [pc, #224]	; (800f20c <xTaskResumeAll+0x114>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	3b01      	subs	r3, #1
 800f12e:	4a37      	ldr	r2, [pc, #220]	; (800f20c <xTaskResumeAll+0x114>)
 800f130:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f132:	4b36      	ldr	r3, [pc, #216]	; (800f20c <xTaskResumeAll+0x114>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d161      	bne.n	800f1fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f13a:	4b35      	ldr	r3, [pc, #212]	; (800f210 <xTaskResumeAll+0x118>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d05d      	beq.n	800f1fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f142:	e02e      	b.n	800f1a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f144:	4b33      	ldr	r3, [pc, #204]	; (800f214 <xTaskResumeAll+0x11c>)
 800f146:	68db      	ldr	r3, [r3, #12]
 800f148:	68db      	ldr	r3, [r3, #12]
 800f14a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	3318      	adds	r3, #24
 800f150:	4618      	mov	r0, r3
 800f152:	f7fe fe03 	bl	800dd5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	3304      	adds	r3, #4
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7fe fdfe 	bl	800dd5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f164:	2201      	movs	r2, #1
 800f166:	409a      	lsls	r2, r3
 800f168:	4b2b      	ldr	r3, [pc, #172]	; (800f218 <xTaskResumeAll+0x120>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	4313      	orrs	r3, r2
 800f16e:	4a2a      	ldr	r2, [pc, #168]	; (800f218 <xTaskResumeAll+0x120>)
 800f170:	6013      	str	r3, [r2, #0]
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f176:	4613      	mov	r3, r2
 800f178:	009b      	lsls	r3, r3, #2
 800f17a:	4413      	add	r3, r2
 800f17c:	009b      	lsls	r3, r3, #2
 800f17e:	4a27      	ldr	r2, [pc, #156]	; (800f21c <xTaskResumeAll+0x124>)
 800f180:	441a      	add	r2, r3
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	3304      	adds	r3, #4
 800f186:	4619      	mov	r1, r3
 800f188:	4610      	mov	r0, r2
 800f18a:	f7fe fd8c 	bl	800dca6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f192:	4b23      	ldr	r3, [pc, #140]	; (800f220 <xTaskResumeAll+0x128>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f198:	429a      	cmp	r2, r3
 800f19a:	d302      	bcc.n	800f1a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f19c:	4b21      	ldr	r3, [pc, #132]	; (800f224 <xTaskResumeAll+0x12c>)
 800f19e:	2201      	movs	r2, #1
 800f1a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f1a2:	4b1c      	ldr	r3, [pc, #112]	; (800f214 <xTaskResumeAll+0x11c>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d1cc      	bne.n	800f144 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d001      	beq.n	800f1b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f1b0:	f000 fb5c 	bl	800f86c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f1b4:	4b1c      	ldr	r3, [pc, #112]	; (800f228 <xTaskResumeAll+0x130>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d010      	beq.n	800f1e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f1c0:	f000 f844 	bl	800f24c <xTaskIncrementTick>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d002      	beq.n	800f1d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f1ca:	4b16      	ldr	r3, [pc, #88]	; (800f224 <xTaskResumeAll+0x12c>)
 800f1cc:	2201      	movs	r2, #1
 800f1ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	3b01      	subs	r3, #1
 800f1d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d1f1      	bne.n	800f1c0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800f1dc:	4b12      	ldr	r3, [pc, #72]	; (800f228 <xTaskResumeAll+0x130>)
 800f1de:	2200      	movs	r2, #0
 800f1e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f1e2:	4b10      	ldr	r3, [pc, #64]	; (800f224 <xTaskResumeAll+0x12c>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d009      	beq.n	800f1fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f1ee:	4b0f      	ldr	r3, [pc, #60]	; (800f22c <xTaskResumeAll+0x134>)
 800f1f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1f4:	601a      	str	r2, [r3, #0]
 800f1f6:	f3bf 8f4f 	dsb	sy
 800f1fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f1fe:	f001 f9b5 	bl	801056c <vPortExitCritical>

	return xAlreadyYielded;
 800f202:	68bb      	ldr	r3, [r7, #8]
}
 800f204:	4618      	mov	r0, r3
 800f206:	3710      	adds	r7, #16
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	20003104 	.word	0x20003104
 800f210:	200030dc 	.word	0x200030dc
 800f214:	2000309c 	.word	0x2000309c
 800f218:	200030e4 	.word	0x200030e4
 800f21c:	20002fe0 	.word	0x20002fe0
 800f220:	20002fdc 	.word	0x20002fdc
 800f224:	200030f0 	.word	0x200030f0
 800f228:	200030ec 	.word	0x200030ec
 800f22c:	e000ed04 	.word	0xe000ed04

0800f230 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f236:	4b04      	ldr	r3, [pc, #16]	; (800f248 <xTaskGetTickCount+0x18>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f23c:	687b      	ldr	r3, [r7, #4]
}
 800f23e:	4618      	mov	r0, r3
 800f240:	370c      	adds	r7, #12
 800f242:	46bd      	mov	sp, r7
 800f244:	bc80      	pop	{r7}
 800f246:	4770      	bx	lr
 800f248:	200030e0 	.word	0x200030e0

0800f24c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b086      	sub	sp, #24
 800f250:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f252:	2300      	movs	r3, #0
 800f254:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f256:	4b51      	ldr	r3, [pc, #324]	; (800f39c <xTaskIncrementTick+0x150>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	f040 808d 	bne.w	800f37a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f260:	4b4f      	ldr	r3, [pc, #316]	; (800f3a0 <xTaskIncrementTick+0x154>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	3301      	adds	r3, #1
 800f266:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f268:	4a4d      	ldr	r2, [pc, #308]	; (800f3a0 <xTaskIncrementTick+0x154>)
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d120      	bne.n	800f2b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f274:	4b4b      	ldr	r3, [pc, #300]	; (800f3a4 <xTaskIncrementTick+0x158>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d00a      	beq.n	800f294 <xTaskIncrementTick+0x48>
	__asm volatile
 800f27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f282:	f383 8811 	msr	BASEPRI, r3
 800f286:	f3bf 8f6f 	isb	sy
 800f28a:	f3bf 8f4f 	dsb	sy
 800f28e:	603b      	str	r3, [r7, #0]
}
 800f290:	bf00      	nop
 800f292:	e7fe      	b.n	800f292 <xTaskIncrementTick+0x46>
 800f294:	4b43      	ldr	r3, [pc, #268]	; (800f3a4 <xTaskIncrementTick+0x158>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	60fb      	str	r3, [r7, #12]
 800f29a:	4b43      	ldr	r3, [pc, #268]	; (800f3a8 <xTaskIncrementTick+0x15c>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	4a41      	ldr	r2, [pc, #260]	; (800f3a4 <xTaskIncrementTick+0x158>)
 800f2a0:	6013      	str	r3, [r2, #0]
 800f2a2:	4a41      	ldr	r2, [pc, #260]	; (800f3a8 <xTaskIncrementTick+0x15c>)
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	6013      	str	r3, [r2, #0]
 800f2a8:	4b40      	ldr	r3, [pc, #256]	; (800f3ac <xTaskIncrementTick+0x160>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	4a3f      	ldr	r2, [pc, #252]	; (800f3ac <xTaskIncrementTick+0x160>)
 800f2b0:	6013      	str	r3, [r2, #0]
 800f2b2:	f000 fadb 	bl	800f86c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f2b6:	4b3e      	ldr	r3, [pc, #248]	; (800f3b0 <xTaskIncrementTick+0x164>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	693a      	ldr	r2, [r7, #16]
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d34d      	bcc.n	800f35c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f2c0:	4b38      	ldr	r3, [pc, #224]	; (800f3a4 <xTaskIncrementTick+0x158>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d101      	bne.n	800f2ce <xTaskIncrementTick+0x82>
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e000      	b.n	800f2d0 <xTaskIncrementTick+0x84>
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d004      	beq.n	800f2de <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2d4:	4b36      	ldr	r3, [pc, #216]	; (800f3b0 <xTaskIncrementTick+0x164>)
 800f2d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f2da:	601a      	str	r2, [r3, #0]
					break;
 800f2dc:	e03e      	b.n	800f35c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f2de:	4b31      	ldr	r3, [pc, #196]	; (800f3a4 <xTaskIncrementTick+0x158>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	68db      	ldr	r3, [r3, #12]
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	685b      	ldr	r3, [r3, #4]
 800f2ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f2ee:	693a      	ldr	r2, [r7, #16]
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d203      	bcs.n	800f2fe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f2f6:	4a2e      	ldr	r2, [pc, #184]	; (800f3b0 <xTaskIncrementTick+0x164>)
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6013      	str	r3, [r2, #0]
						break;
 800f2fc:	e02e      	b.n	800f35c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	3304      	adds	r3, #4
 800f302:	4618      	mov	r0, r3
 800f304:	f7fe fd2a 	bl	800dd5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d004      	beq.n	800f31a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	3318      	adds	r3, #24
 800f314:	4618      	mov	r0, r3
 800f316:	f7fe fd21 	bl	800dd5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f31e:	2201      	movs	r2, #1
 800f320:	409a      	lsls	r2, r3
 800f322:	4b24      	ldr	r3, [pc, #144]	; (800f3b4 <xTaskIncrementTick+0x168>)
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	4313      	orrs	r3, r2
 800f328:	4a22      	ldr	r2, [pc, #136]	; (800f3b4 <xTaskIncrementTick+0x168>)
 800f32a:	6013      	str	r3, [r2, #0]
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f330:	4613      	mov	r3, r2
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	4413      	add	r3, r2
 800f336:	009b      	lsls	r3, r3, #2
 800f338:	4a1f      	ldr	r2, [pc, #124]	; (800f3b8 <xTaskIncrementTick+0x16c>)
 800f33a:	441a      	add	r2, r3
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	3304      	adds	r3, #4
 800f340:	4619      	mov	r1, r3
 800f342:	4610      	mov	r0, r2
 800f344:	f7fe fcaf 	bl	800dca6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f34c:	4b1b      	ldr	r3, [pc, #108]	; (800f3bc <xTaskIncrementTick+0x170>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f352:	429a      	cmp	r2, r3
 800f354:	d3b4      	bcc.n	800f2c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f356:	2301      	movs	r3, #1
 800f358:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f35a:	e7b1      	b.n	800f2c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f35c:	4b17      	ldr	r3, [pc, #92]	; (800f3bc <xTaskIncrementTick+0x170>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f362:	4915      	ldr	r1, [pc, #84]	; (800f3b8 <xTaskIncrementTick+0x16c>)
 800f364:	4613      	mov	r3, r2
 800f366:	009b      	lsls	r3, r3, #2
 800f368:	4413      	add	r3, r2
 800f36a:	009b      	lsls	r3, r3, #2
 800f36c:	440b      	add	r3, r1
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	2b01      	cmp	r3, #1
 800f372:	d907      	bls.n	800f384 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800f374:	2301      	movs	r3, #1
 800f376:	617b      	str	r3, [r7, #20]
 800f378:	e004      	b.n	800f384 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f37a:	4b11      	ldr	r3, [pc, #68]	; (800f3c0 <xTaskIncrementTick+0x174>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	3301      	adds	r3, #1
 800f380:	4a0f      	ldr	r2, [pc, #60]	; (800f3c0 <xTaskIncrementTick+0x174>)
 800f382:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f384:	4b0f      	ldr	r3, [pc, #60]	; (800f3c4 <xTaskIncrementTick+0x178>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d001      	beq.n	800f390 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800f38c:	2301      	movs	r3, #1
 800f38e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f390:	697b      	ldr	r3, [r7, #20]
}
 800f392:	4618      	mov	r0, r3
 800f394:	3718      	adds	r7, #24
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
 800f39a:	bf00      	nop
 800f39c:	20003104 	.word	0x20003104
 800f3a0:	200030e0 	.word	0x200030e0
 800f3a4:	20003094 	.word	0x20003094
 800f3a8:	20003098 	.word	0x20003098
 800f3ac:	200030f4 	.word	0x200030f4
 800f3b0:	200030fc 	.word	0x200030fc
 800f3b4:	200030e4 	.word	0x200030e4
 800f3b8:	20002fe0 	.word	0x20002fe0
 800f3bc:	20002fdc 	.word	0x20002fdc
 800f3c0:	200030ec 	.word	0x200030ec
 800f3c4:	200030f0 	.word	0x200030f0

0800f3c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b087      	sub	sp, #28
 800f3cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f3ce:	4b29      	ldr	r3, [pc, #164]	; (800f474 <vTaskSwitchContext+0xac>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d003      	beq.n	800f3de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f3d6:	4b28      	ldr	r3, [pc, #160]	; (800f478 <vTaskSwitchContext+0xb0>)
 800f3d8:	2201      	movs	r2, #1
 800f3da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f3dc:	e044      	b.n	800f468 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800f3de:	4b26      	ldr	r3, [pc, #152]	; (800f478 <vTaskSwitchContext+0xb0>)
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f3e4:	4b25      	ldr	r3, [pc, #148]	; (800f47c <vTaskSwitchContext+0xb4>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	fab3 f383 	clz	r3, r3
 800f3f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f3f2:	7afb      	ldrb	r3, [r7, #11]
 800f3f4:	f1c3 031f 	rsb	r3, r3, #31
 800f3f8:	617b      	str	r3, [r7, #20]
 800f3fa:	4921      	ldr	r1, [pc, #132]	; (800f480 <vTaskSwitchContext+0xb8>)
 800f3fc:	697a      	ldr	r2, [r7, #20]
 800f3fe:	4613      	mov	r3, r2
 800f400:	009b      	lsls	r3, r3, #2
 800f402:	4413      	add	r3, r2
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	440b      	add	r3, r1
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d10a      	bne.n	800f424 <vTaskSwitchContext+0x5c>
	__asm volatile
 800f40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f412:	f383 8811 	msr	BASEPRI, r3
 800f416:	f3bf 8f6f 	isb	sy
 800f41a:	f3bf 8f4f 	dsb	sy
 800f41e:	607b      	str	r3, [r7, #4]
}
 800f420:	bf00      	nop
 800f422:	e7fe      	b.n	800f422 <vTaskSwitchContext+0x5a>
 800f424:	697a      	ldr	r2, [r7, #20]
 800f426:	4613      	mov	r3, r2
 800f428:	009b      	lsls	r3, r3, #2
 800f42a:	4413      	add	r3, r2
 800f42c:	009b      	lsls	r3, r3, #2
 800f42e:	4a14      	ldr	r2, [pc, #80]	; (800f480 <vTaskSwitchContext+0xb8>)
 800f430:	4413      	add	r3, r2
 800f432:	613b      	str	r3, [r7, #16]
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	685a      	ldr	r2, [r3, #4]
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	605a      	str	r2, [r3, #4]
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	685a      	ldr	r2, [r3, #4]
 800f442:	693b      	ldr	r3, [r7, #16]
 800f444:	3308      	adds	r3, #8
 800f446:	429a      	cmp	r2, r3
 800f448:	d104      	bne.n	800f454 <vTaskSwitchContext+0x8c>
 800f44a:	693b      	ldr	r3, [r7, #16]
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	685a      	ldr	r2, [r3, #4]
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	605a      	str	r2, [r3, #4]
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	68db      	ldr	r3, [r3, #12]
 800f45a:	4a0a      	ldr	r2, [pc, #40]	; (800f484 <vTaskSwitchContext+0xbc>)
 800f45c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f45e:	4b09      	ldr	r3, [pc, #36]	; (800f484 <vTaskSwitchContext+0xbc>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	334c      	adds	r3, #76	; 0x4c
 800f464:	4a08      	ldr	r2, [pc, #32]	; (800f488 <vTaskSwitchContext+0xc0>)
 800f466:	6013      	str	r3, [r2, #0]
}
 800f468:	bf00      	nop
 800f46a:	371c      	adds	r7, #28
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bc80      	pop	{r7}
 800f470:	4770      	bx	lr
 800f472:	bf00      	nop
 800f474:	20003104 	.word	0x20003104
 800f478:	200030f0 	.word	0x200030f0
 800f47c:	200030e4 	.word	0x200030e4
 800f480:	20002fe0 	.word	0x20002fe0
 800f484:	20002fdc 	.word	0x20002fdc
 800f488:	200001e8 	.word	0x200001e8

0800f48c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d10a      	bne.n	800f4b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a0:	f383 8811 	msr	BASEPRI, r3
 800f4a4:	f3bf 8f6f 	isb	sy
 800f4a8:	f3bf 8f4f 	dsb	sy
 800f4ac:	60fb      	str	r3, [r7, #12]
}
 800f4ae:	bf00      	nop
 800f4b0:	e7fe      	b.n	800f4b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f4b2:	4b07      	ldr	r3, [pc, #28]	; (800f4d0 <vTaskPlaceOnEventList+0x44>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	3318      	adds	r3, #24
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f7fe fc16 	bl	800dcec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f4c0:	2101      	movs	r1, #1
 800f4c2:	6838      	ldr	r0, [r7, #0]
 800f4c4:	f000 fbd4 	bl	800fc70 <prvAddCurrentTaskToDelayedList>
}
 800f4c8:	bf00      	nop
 800f4ca:	3710      	adds	r7, #16
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	20002fdc 	.word	0x20002fdc

0800f4d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b086      	sub	sp, #24
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	60f8      	str	r0, [r7, #12]
 800f4dc:	60b9      	str	r1, [r7, #8]
 800f4de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d10a      	bne.n	800f4fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ea:	f383 8811 	msr	BASEPRI, r3
 800f4ee:	f3bf 8f6f 	isb	sy
 800f4f2:	f3bf 8f4f 	dsb	sy
 800f4f6:	617b      	str	r3, [r7, #20]
}
 800f4f8:	bf00      	nop
 800f4fa:	e7fe      	b.n	800f4fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f4fc:	4b0a      	ldr	r3, [pc, #40]	; (800f528 <vTaskPlaceOnEventListRestricted+0x54>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	3318      	adds	r3, #24
 800f502:	4619      	mov	r1, r3
 800f504:	68f8      	ldr	r0, [r7, #12]
 800f506:	f7fe fbce 	bl	800dca6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d002      	beq.n	800f516 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f510:	f04f 33ff 	mov.w	r3, #4294967295
 800f514:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f516:	6879      	ldr	r1, [r7, #4]
 800f518:	68b8      	ldr	r0, [r7, #8]
 800f51a:	f000 fba9 	bl	800fc70 <prvAddCurrentTaskToDelayedList>
	}
 800f51e:	bf00      	nop
 800f520:	3718      	adds	r7, #24
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}
 800f526:	bf00      	nop
 800f528:	20002fdc 	.word	0x20002fdc

0800f52c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b086      	sub	sp, #24
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	68db      	ldr	r3, [r3, #12]
 800f538:	68db      	ldr	r3, [r3, #12]
 800f53a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f53c:	693b      	ldr	r3, [r7, #16]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d10a      	bne.n	800f558 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f546:	f383 8811 	msr	BASEPRI, r3
 800f54a:	f3bf 8f6f 	isb	sy
 800f54e:	f3bf 8f4f 	dsb	sy
 800f552:	60fb      	str	r3, [r7, #12]
}
 800f554:	bf00      	nop
 800f556:	e7fe      	b.n	800f556 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	3318      	adds	r3, #24
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7fe fbfd 	bl	800dd5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f562:	4b1d      	ldr	r3, [pc, #116]	; (800f5d8 <xTaskRemoveFromEventList+0xac>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d11c      	bne.n	800f5a4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	3304      	adds	r3, #4
 800f56e:	4618      	mov	r0, r3
 800f570:	f7fe fbf4 	bl	800dd5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f578:	2201      	movs	r2, #1
 800f57a:	409a      	lsls	r2, r3
 800f57c:	4b17      	ldr	r3, [pc, #92]	; (800f5dc <xTaskRemoveFromEventList+0xb0>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	4313      	orrs	r3, r2
 800f582:	4a16      	ldr	r2, [pc, #88]	; (800f5dc <xTaskRemoveFromEventList+0xb0>)
 800f584:	6013      	str	r3, [r2, #0]
 800f586:	693b      	ldr	r3, [r7, #16]
 800f588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f58a:	4613      	mov	r3, r2
 800f58c:	009b      	lsls	r3, r3, #2
 800f58e:	4413      	add	r3, r2
 800f590:	009b      	lsls	r3, r3, #2
 800f592:	4a13      	ldr	r2, [pc, #76]	; (800f5e0 <xTaskRemoveFromEventList+0xb4>)
 800f594:	441a      	add	r2, r3
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	3304      	adds	r3, #4
 800f59a:	4619      	mov	r1, r3
 800f59c:	4610      	mov	r0, r2
 800f59e:	f7fe fb82 	bl	800dca6 <vListInsertEnd>
 800f5a2:	e005      	b.n	800f5b0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	3318      	adds	r3, #24
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	480e      	ldr	r0, [pc, #56]	; (800f5e4 <xTaskRemoveFromEventList+0xb8>)
 800f5ac:	f7fe fb7b 	bl	800dca6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f5b0:	693b      	ldr	r3, [r7, #16]
 800f5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5b4:	4b0c      	ldr	r3, [pc, #48]	; (800f5e8 <xTaskRemoveFromEventList+0xbc>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d905      	bls.n	800f5ca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f5be:	2301      	movs	r3, #1
 800f5c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f5c2:	4b0a      	ldr	r3, [pc, #40]	; (800f5ec <xTaskRemoveFromEventList+0xc0>)
 800f5c4:	2201      	movs	r2, #1
 800f5c6:	601a      	str	r2, [r3, #0]
 800f5c8:	e001      	b.n	800f5ce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800f5ce:	697b      	ldr	r3, [r7, #20]
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3718      	adds	r7, #24
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	20003104 	.word	0x20003104
 800f5dc:	200030e4 	.word	0x200030e4
 800f5e0:	20002fe0 	.word	0x20002fe0
 800f5e4:	2000309c 	.word	0x2000309c
 800f5e8:	20002fdc 	.word	0x20002fdc
 800f5ec:	200030f0 	.word	0x200030f0

0800f5f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b083      	sub	sp, #12
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f5f8:	4b06      	ldr	r3, [pc, #24]	; (800f614 <vTaskInternalSetTimeOutState+0x24>)
 800f5fa:	681a      	ldr	r2, [r3, #0]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f600:	4b05      	ldr	r3, [pc, #20]	; (800f618 <vTaskInternalSetTimeOutState+0x28>)
 800f602:	681a      	ldr	r2, [r3, #0]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	605a      	str	r2, [r3, #4]
}
 800f608:	bf00      	nop
 800f60a:	370c      	adds	r7, #12
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bc80      	pop	{r7}
 800f610:	4770      	bx	lr
 800f612:	bf00      	nop
 800f614:	200030f4 	.word	0x200030f4
 800f618:	200030e0 	.word	0x200030e0

0800f61c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b088      	sub	sp, #32
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d10a      	bne.n	800f642 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f630:	f383 8811 	msr	BASEPRI, r3
 800f634:	f3bf 8f6f 	isb	sy
 800f638:	f3bf 8f4f 	dsb	sy
 800f63c:	613b      	str	r3, [r7, #16]
}
 800f63e:	bf00      	nop
 800f640:	e7fe      	b.n	800f640 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d10a      	bne.n	800f65e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f64c:	f383 8811 	msr	BASEPRI, r3
 800f650:	f3bf 8f6f 	isb	sy
 800f654:	f3bf 8f4f 	dsb	sy
 800f658:	60fb      	str	r3, [r7, #12]
}
 800f65a:	bf00      	nop
 800f65c:	e7fe      	b.n	800f65c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f65e:	f000 ff55 	bl	801050c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f662:	4b1d      	ldr	r3, [pc, #116]	; (800f6d8 <xTaskCheckForTimeOut+0xbc>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	69ba      	ldr	r2, [r7, #24]
 800f66e:	1ad3      	subs	r3, r2, r3
 800f670:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f67a:	d102      	bne.n	800f682 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f67c:	2300      	movs	r3, #0
 800f67e:	61fb      	str	r3, [r7, #28]
 800f680:	e023      	b.n	800f6ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	4b15      	ldr	r3, [pc, #84]	; (800f6dc <xTaskCheckForTimeOut+0xc0>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d007      	beq.n	800f69e <xTaskCheckForTimeOut+0x82>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	685b      	ldr	r3, [r3, #4]
 800f692:	69ba      	ldr	r2, [r7, #24]
 800f694:	429a      	cmp	r2, r3
 800f696:	d302      	bcc.n	800f69e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f698:	2301      	movs	r3, #1
 800f69a:	61fb      	str	r3, [r7, #28]
 800f69c:	e015      	b.n	800f6ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	697a      	ldr	r2, [r7, #20]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d20b      	bcs.n	800f6c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	681a      	ldr	r2, [r3, #0]
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	1ad2      	subs	r2, r2, r3
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f7ff ff9b 	bl	800f5f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	61fb      	str	r3, [r7, #28]
 800f6be:	e004      	b.n	800f6ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f6ca:	f000 ff4f 	bl	801056c <vPortExitCritical>

	return xReturn;
 800f6ce:	69fb      	ldr	r3, [r7, #28]
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	3720      	adds	r7, #32
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}
 800f6d8:	200030e0 	.word	0x200030e0
 800f6dc:	200030f4 	.word	0x200030f4

0800f6e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f6e4:	4b03      	ldr	r3, [pc, #12]	; (800f6f4 <vTaskMissedYield+0x14>)
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	601a      	str	r2, [r3, #0]
}
 800f6ea:	bf00      	nop
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bc80      	pop	{r7}
 800f6f0:	4770      	bx	lr
 800f6f2:	bf00      	nop
 800f6f4:	200030f0 	.word	0x200030f0

0800f6f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f700:	f000 f852 	bl	800f7a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f704:	4b06      	ldr	r3, [pc, #24]	; (800f720 <prvIdleTask+0x28>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	2b01      	cmp	r3, #1
 800f70a:	d9f9      	bls.n	800f700 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f70c:	4b05      	ldr	r3, [pc, #20]	; (800f724 <prvIdleTask+0x2c>)
 800f70e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f712:	601a      	str	r2, [r3, #0]
 800f714:	f3bf 8f4f 	dsb	sy
 800f718:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f71c:	e7f0      	b.n	800f700 <prvIdleTask+0x8>
 800f71e:	bf00      	nop
 800f720:	20002fe0 	.word	0x20002fe0
 800f724:	e000ed04 	.word	0xe000ed04

0800f728 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b082      	sub	sp, #8
 800f72c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f72e:	2300      	movs	r3, #0
 800f730:	607b      	str	r3, [r7, #4]
 800f732:	e00c      	b.n	800f74e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f734:	687a      	ldr	r2, [r7, #4]
 800f736:	4613      	mov	r3, r2
 800f738:	009b      	lsls	r3, r3, #2
 800f73a:	4413      	add	r3, r2
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	4a12      	ldr	r2, [pc, #72]	; (800f788 <prvInitialiseTaskLists+0x60>)
 800f740:	4413      	add	r3, r2
 800f742:	4618      	mov	r0, r3
 800f744:	f7fe fa84 	bl	800dc50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	3301      	adds	r3, #1
 800f74c:	607b      	str	r3, [r7, #4]
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2b06      	cmp	r3, #6
 800f752:	d9ef      	bls.n	800f734 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f754:	480d      	ldr	r0, [pc, #52]	; (800f78c <prvInitialiseTaskLists+0x64>)
 800f756:	f7fe fa7b 	bl	800dc50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f75a:	480d      	ldr	r0, [pc, #52]	; (800f790 <prvInitialiseTaskLists+0x68>)
 800f75c:	f7fe fa78 	bl	800dc50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f760:	480c      	ldr	r0, [pc, #48]	; (800f794 <prvInitialiseTaskLists+0x6c>)
 800f762:	f7fe fa75 	bl	800dc50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f766:	480c      	ldr	r0, [pc, #48]	; (800f798 <prvInitialiseTaskLists+0x70>)
 800f768:	f7fe fa72 	bl	800dc50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f76c:	480b      	ldr	r0, [pc, #44]	; (800f79c <prvInitialiseTaskLists+0x74>)
 800f76e:	f7fe fa6f 	bl	800dc50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f772:	4b0b      	ldr	r3, [pc, #44]	; (800f7a0 <prvInitialiseTaskLists+0x78>)
 800f774:	4a05      	ldr	r2, [pc, #20]	; (800f78c <prvInitialiseTaskLists+0x64>)
 800f776:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f778:	4b0a      	ldr	r3, [pc, #40]	; (800f7a4 <prvInitialiseTaskLists+0x7c>)
 800f77a:	4a05      	ldr	r2, [pc, #20]	; (800f790 <prvInitialiseTaskLists+0x68>)
 800f77c:	601a      	str	r2, [r3, #0]
}
 800f77e:	bf00      	nop
 800f780:	3708      	adds	r7, #8
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	20002fe0 	.word	0x20002fe0
 800f78c:	2000306c 	.word	0x2000306c
 800f790:	20003080 	.word	0x20003080
 800f794:	2000309c 	.word	0x2000309c
 800f798:	200030b0 	.word	0x200030b0
 800f79c:	200030c8 	.word	0x200030c8
 800f7a0:	20003094 	.word	0x20003094
 800f7a4:	20003098 	.word	0x20003098

0800f7a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b082      	sub	sp, #8
 800f7ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f7ae:	e019      	b.n	800f7e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f7b0:	f000 feac 	bl	801050c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800f7b4:	4b10      	ldr	r3, [pc, #64]	; (800f7f8 <prvCheckTasksWaitingTermination+0x50>)
 800f7b6:	68db      	ldr	r3, [r3, #12]
 800f7b8:	68db      	ldr	r3, [r3, #12]
 800f7ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	3304      	adds	r3, #4
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f7fe facb 	bl	800dd5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f7c6:	4b0d      	ldr	r3, [pc, #52]	; (800f7fc <prvCheckTasksWaitingTermination+0x54>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	3b01      	subs	r3, #1
 800f7cc:	4a0b      	ldr	r2, [pc, #44]	; (800f7fc <prvCheckTasksWaitingTermination+0x54>)
 800f7ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f7d0:	4b0b      	ldr	r3, [pc, #44]	; (800f800 <prvCheckTasksWaitingTermination+0x58>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	3b01      	subs	r3, #1
 800f7d6:	4a0a      	ldr	r2, [pc, #40]	; (800f800 <prvCheckTasksWaitingTermination+0x58>)
 800f7d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f7da:	f000 fec7 	bl	801056c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f000 f810 	bl	800f804 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f7e4:	4b06      	ldr	r3, [pc, #24]	; (800f800 <prvCheckTasksWaitingTermination+0x58>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d1e1      	bne.n	800f7b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f7ec:	bf00      	nop
 800f7ee:	bf00      	nop
 800f7f0:	3708      	adds	r7, #8
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
 800f7f6:	bf00      	nop
 800f7f8:	200030b0 	.word	0x200030b0
 800f7fc:	200030dc 	.word	0x200030dc
 800f800:	200030c4 	.word	0x200030c4

0800f804 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f804:	b580      	push	{r7, lr}
 800f806:	b084      	sub	sp, #16
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	334c      	adds	r3, #76	; 0x4c
 800f810:	4618      	mov	r0, r3
 800f812:	f001 fb87 	bl	8010f24 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d108      	bne.n	800f832 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f824:	4618      	mov	r0, r3
 800f826:	f001 f835 	bl	8010894 <vPortFree>
				vPortFree( pxTCB );
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f001 f832 	bl	8010894 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f830:	e018      	b.n	800f864 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800f838:	2b01      	cmp	r3, #1
 800f83a:	d103      	bne.n	800f844 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f001 f829 	bl	8010894 <vPortFree>
	}
 800f842:	e00f      	b.n	800f864 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800f84a:	2b02      	cmp	r3, #2
 800f84c:	d00a      	beq.n	800f864 <prvDeleteTCB+0x60>
	__asm volatile
 800f84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f852:	f383 8811 	msr	BASEPRI, r3
 800f856:	f3bf 8f6f 	isb	sy
 800f85a:	f3bf 8f4f 	dsb	sy
 800f85e:	60fb      	str	r3, [r7, #12]
}
 800f860:	bf00      	nop
 800f862:	e7fe      	b.n	800f862 <prvDeleteTCB+0x5e>
	}
 800f864:	bf00      	nop
 800f866:	3710      	adds	r7, #16
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f86c:	b480      	push	{r7}
 800f86e:	b083      	sub	sp, #12
 800f870:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f872:	4b0e      	ldr	r3, [pc, #56]	; (800f8ac <prvResetNextTaskUnblockTime+0x40>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d101      	bne.n	800f880 <prvResetNextTaskUnblockTime+0x14>
 800f87c:	2301      	movs	r3, #1
 800f87e:	e000      	b.n	800f882 <prvResetNextTaskUnblockTime+0x16>
 800f880:	2300      	movs	r3, #0
 800f882:	2b00      	cmp	r3, #0
 800f884:	d004      	beq.n	800f890 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f886:	4b0a      	ldr	r3, [pc, #40]	; (800f8b0 <prvResetNextTaskUnblockTime+0x44>)
 800f888:	f04f 32ff 	mov.w	r2, #4294967295
 800f88c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f88e:	e008      	b.n	800f8a2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f890:	4b06      	ldr	r3, [pc, #24]	; (800f8ac <prvResetNextTaskUnblockTime+0x40>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	68db      	ldr	r3, [r3, #12]
 800f896:	68db      	ldr	r3, [r3, #12]
 800f898:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	4a04      	ldr	r2, [pc, #16]	; (800f8b0 <prvResetNextTaskUnblockTime+0x44>)
 800f8a0:	6013      	str	r3, [r2, #0]
}
 800f8a2:	bf00      	nop
 800f8a4:	370c      	adds	r7, #12
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bc80      	pop	{r7}
 800f8aa:	4770      	bx	lr
 800f8ac:	20003094 	.word	0x20003094
 800f8b0:	200030fc 	.word	0x200030fc

0800f8b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b083      	sub	sp, #12
 800f8b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f8ba:	4b0b      	ldr	r3, [pc, #44]	; (800f8e8 <xTaskGetSchedulerState+0x34>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d102      	bne.n	800f8c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	607b      	str	r3, [r7, #4]
 800f8c6:	e008      	b.n	800f8da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f8c8:	4b08      	ldr	r3, [pc, #32]	; (800f8ec <xTaskGetSchedulerState+0x38>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d102      	bne.n	800f8d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f8d0:	2302      	movs	r3, #2
 800f8d2:	607b      	str	r3, [r7, #4]
 800f8d4:	e001      	b.n	800f8da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f8da:	687b      	ldr	r3, [r7, #4]
	}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	370c      	adds	r7, #12
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bc80      	pop	{r7}
 800f8e4:	4770      	bx	lr
 800f8e6:	bf00      	nop
 800f8e8:	200030e8 	.word	0x200030e8
 800f8ec:	20003104 	.word	0x20003104

0800f8f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b084      	sub	sp, #16
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d06e      	beq.n	800f9e4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f90a:	4b39      	ldr	r3, [pc, #228]	; (800f9f0 <xTaskPriorityInherit+0x100>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f910:	429a      	cmp	r2, r3
 800f912:	d25e      	bcs.n	800f9d2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	699b      	ldr	r3, [r3, #24]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	db06      	blt.n	800f92a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f91c:	4b34      	ldr	r3, [pc, #208]	; (800f9f0 <xTaskPriorityInherit+0x100>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f922:	f1c3 0207 	rsb	r2, r3, #7
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	6959      	ldr	r1, [r3, #20]
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f932:	4613      	mov	r3, r2
 800f934:	009b      	lsls	r3, r3, #2
 800f936:	4413      	add	r3, r2
 800f938:	009b      	lsls	r3, r3, #2
 800f93a:	4a2e      	ldr	r2, [pc, #184]	; (800f9f4 <xTaskPriorityInherit+0x104>)
 800f93c:	4413      	add	r3, r2
 800f93e:	4299      	cmp	r1, r3
 800f940:	d101      	bne.n	800f946 <xTaskPriorityInherit+0x56>
 800f942:	2301      	movs	r3, #1
 800f944:	e000      	b.n	800f948 <xTaskPriorityInherit+0x58>
 800f946:	2300      	movs	r3, #0
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d03a      	beq.n	800f9c2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	3304      	adds	r3, #4
 800f950:	4618      	mov	r0, r3
 800f952:	f7fe fa03 	bl	800dd5c <uxListRemove>
 800f956:	4603      	mov	r3, r0
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d115      	bne.n	800f988 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f960:	4924      	ldr	r1, [pc, #144]	; (800f9f4 <xTaskPriorityInherit+0x104>)
 800f962:	4613      	mov	r3, r2
 800f964:	009b      	lsls	r3, r3, #2
 800f966:	4413      	add	r3, r2
 800f968:	009b      	lsls	r3, r3, #2
 800f96a:	440b      	add	r3, r1
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d10a      	bne.n	800f988 <xTaskPriorityInherit+0x98>
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f976:	2201      	movs	r2, #1
 800f978:	fa02 f303 	lsl.w	r3, r2, r3
 800f97c:	43da      	mvns	r2, r3
 800f97e:	4b1e      	ldr	r3, [pc, #120]	; (800f9f8 <xTaskPriorityInherit+0x108>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	4013      	ands	r3, r2
 800f984:	4a1c      	ldr	r2, [pc, #112]	; (800f9f8 <xTaskPriorityInherit+0x108>)
 800f986:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f988:	4b19      	ldr	r3, [pc, #100]	; (800f9f0 <xTaskPriorityInherit+0x100>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f996:	2201      	movs	r2, #1
 800f998:	409a      	lsls	r2, r3
 800f99a:	4b17      	ldr	r3, [pc, #92]	; (800f9f8 <xTaskPriorityInherit+0x108>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	4313      	orrs	r3, r2
 800f9a0:	4a15      	ldr	r2, [pc, #84]	; (800f9f8 <xTaskPriorityInherit+0x108>)
 800f9a2:	6013      	str	r3, [r2, #0]
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9a8:	4613      	mov	r3, r2
 800f9aa:	009b      	lsls	r3, r3, #2
 800f9ac:	4413      	add	r3, r2
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	4a10      	ldr	r2, [pc, #64]	; (800f9f4 <xTaskPriorityInherit+0x104>)
 800f9b2:	441a      	add	r2, r3
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	3304      	adds	r3, #4
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	4610      	mov	r0, r2
 800f9bc:	f7fe f973 	bl	800dca6 <vListInsertEnd>
 800f9c0:	e004      	b.n	800f9cc <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f9c2:	4b0b      	ldr	r3, [pc, #44]	; (800f9f0 <xTaskPriorityInherit+0x100>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	60fb      	str	r3, [r7, #12]
 800f9d0:	e008      	b.n	800f9e4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f9d6:	4b06      	ldr	r3, [pc, #24]	; (800f9f0 <xTaskPriorityInherit+0x100>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d201      	bcs.n	800f9e4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
	}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3710      	adds	r7, #16
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}
 800f9ee:	bf00      	nop
 800f9f0:	20002fdc 	.word	0x20002fdc
 800f9f4:	20002fe0 	.word	0x20002fe0
 800f9f8:	200030e4 	.word	0x200030e4

0800f9fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b086      	sub	sp, #24
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d06e      	beq.n	800faf0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fa12:	4b3a      	ldr	r3, [pc, #232]	; (800fafc <xTaskPriorityDisinherit+0x100>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	693a      	ldr	r2, [r7, #16]
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d00a      	beq.n	800fa32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800fa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa20:	f383 8811 	msr	BASEPRI, r3
 800fa24:	f3bf 8f6f 	isb	sy
 800fa28:	f3bf 8f4f 	dsb	sy
 800fa2c:	60fb      	str	r3, [r7, #12]
}
 800fa2e:	bf00      	nop
 800fa30:	e7fe      	b.n	800fa30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d10a      	bne.n	800fa50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800fa3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa3e:	f383 8811 	msr	BASEPRI, r3
 800fa42:	f3bf 8f6f 	isb	sy
 800fa46:	f3bf 8f4f 	dsb	sy
 800fa4a:	60bb      	str	r3, [r7, #8]
}
 800fa4c:	bf00      	nop
 800fa4e:	e7fe      	b.n	800fa4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800fa50:	693b      	ldr	r3, [r7, #16]
 800fa52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa54:	1e5a      	subs	r2, r3, #1
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fa5a:	693b      	ldr	r3, [r7, #16]
 800fa5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa5e:	693b      	ldr	r3, [r7, #16]
 800fa60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d044      	beq.n	800faf0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d140      	bne.n	800faf0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa6e:	693b      	ldr	r3, [r7, #16]
 800fa70:	3304      	adds	r3, #4
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7fe f972 	bl	800dd5c <uxListRemove>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d115      	bne.n	800faaa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fa7e:	693b      	ldr	r3, [r7, #16]
 800fa80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa82:	491f      	ldr	r1, [pc, #124]	; (800fb00 <xTaskPriorityDisinherit+0x104>)
 800fa84:	4613      	mov	r3, r2
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	4413      	add	r3, r2
 800fa8a:	009b      	lsls	r3, r3, #2
 800fa8c:	440b      	add	r3, r1
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d10a      	bne.n	800faaa <xTaskPriorityDisinherit+0xae>
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa98:	2201      	movs	r2, #1
 800fa9a:	fa02 f303 	lsl.w	r3, r2, r3
 800fa9e:	43da      	mvns	r2, r3
 800faa0:	4b18      	ldr	r3, [pc, #96]	; (800fb04 <xTaskPriorityDisinherit+0x108>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	4013      	ands	r3, r2
 800faa6:	4a17      	ldr	r2, [pc, #92]	; (800fb04 <xTaskPriorityDisinherit+0x108>)
 800faa8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800faaa:	693b      	ldr	r3, [r7, #16]
 800faac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fab6:	f1c3 0207 	rsb	r2, r3, #7
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fabe:	693b      	ldr	r3, [r7, #16]
 800fac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fac2:	2201      	movs	r2, #1
 800fac4:	409a      	lsls	r2, r3
 800fac6:	4b0f      	ldr	r3, [pc, #60]	; (800fb04 <xTaskPriorityDisinherit+0x108>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	4313      	orrs	r3, r2
 800facc:	4a0d      	ldr	r2, [pc, #52]	; (800fb04 <xTaskPriorityDisinherit+0x108>)
 800face:	6013      	str	r3, [r2, #0]
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fad4:	4613      	mov	r3, r2
 800fad6:	009b      	lsls	r3, r3, #2
 800fad8:	4413      	add	r3, r2
 800fada:	009b      	lsls	r3, r3, #2
 800fadc:	4a08      	ldr	r2, [pc, #32]	; (800fb00 <xTaskPriorityDisinherit+0x104>)
 800fade:	441a      	add	r2, r3
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	3304      	adds	r3, #4
 800fae4:	4619      	mov	r1, r3
 800fae6:	4610      	mov	r0, r2
 800fae8:	f7fe f8dd 	bl	800dca6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800faec:	2301      	movs	r3, #1
 800faee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800faf0:	697b      	ldr	r3, [r7, #20]
	}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3718      	adds	r7, #24
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	20002fdc 	.word	0x20002fdc
 800fb00:	20002fe0 	.word	0x20002fe0
 800fb04:	200030e4 	.word	0x200030e4

0800fb08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b088      	sub	sp, #32
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fb16:	2301      	movs	r3, #1
 800fb18:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	f000 8088 	beq.w	800fc32 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fb22:	69bb      	ldr	r3, [r7, #24]
 800fb24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d10a      	bne.n	800fb40 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800fb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb2e:	f383 8811 	msr	BASEPRI, r3
 800fb32:	f3bf 8f6f 	isb	sy
 800fb36:	f3bf 8f4f 	dsb	sy
 800fb3a:	60fb      	str	r3, [r7, #12]
}
 800fb3c:	bf00      	nop
 800fb3e:	e7fe      	b.n	800fb3e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fb40:	69bb      	ldr	r3, [r7, #24]
 800fb42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb44:	683a      	ldr	r2, [r7, #0]
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d902      	bls.n	800fb50 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	61fb      	str	r3, [r7, #28]
 800fb4e:	e002      	b.n	800fb56 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fb50:	69bb      	ldr	r3, [r7, #24]
 800fb52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb54:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fb56:	69bb      	ldr	r3, [r7, #24]
 800fb58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb5a:	69fa      	ldr	r2, [r7, #28]
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d068      	beq.n	800fc32 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fb60:	69bb      	ldr	r3, [r7, #24]
 800fb62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb64:	697a      	ldr	r2, [r7, #20]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d163      	bne.n	800fc32 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fb6a:	4b34      	ldr	r3, [pc, #208]	; (800fc3c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	69ba      	ldr	r2, [r7, #24]
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d10a      	bne.n	800fb8a <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800fb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb78:	f383 8811 	msr	BASEPRI, r3
 800fb7c:	f3bf 8f6f 	isb	sy
 800fb80:	f3bf 8f4f 	dsb	sy
 800fb84:	60bb      	str	r3, [r7, #8]
}
 800fb86:	bf00      	nop
 800fb88:	e7fe      	b.n	800fb88 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fb8a:	69bb      	ldr	r3, [r7, #24]
 800fb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb8e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fb90:	69bb      	ldr	r3, [r7, #24]
 800fb92:	69fa      	ldr	r2, [r7, #28]
 800fb94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fb96:	69bb      	ldr	r3, [r7, #24]
 800fb98:	699b      	ldr	r3, [r3, #24]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	db04      	blt.n	800fba8 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb9e:	69fb      	ldr	r3, [r7, #28]
 800fba0:	f1c3 0207 	rsb	r2, r3, #7
 800fba4:	69bb      	ldr	r3, [r7, #24]
 800fba6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fba8:	69bb      	ldr	r3, [r7, #24]
 800fbaa:	6959      	ldr	r1, [r3, #20]
 800fbac:	693a      	ldr	r2, [r7, #16]
 800fbae:	4613      	mov	r3, r2
 800fbb0:	009b      	lsls	r3, r3, #2
 800fbb2:	4413      	add	r3, r2
 800fbb4:	009b      	lsls	r3, r3, #2
 800fbb6:	4a22      	ldr	r2, [pc, #136]	; (800fc40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800fbb8:	4413      	add	r3, r2
 800fbba:	4299      	cmp	r1, r3
 800fbbc:	d101      	bne.n	800fbc2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	e000      	b.n	800fbc4 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d034      	beq.n	800fc32 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fbc8:	69bb      	ldr	r3, [r7, #24]
 800fbca:	3304      	adds	r3, #4
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7fe f8c5 	bl	800dd5c <uxListRemove>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d115      	bne.n	800fc04 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fbd8:	69bb      	ldr	r3, [r7, #24]
 800fbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbdc:	4918      	ldr	r1, [pc, #96]	; (800fc40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800fbde:	4613      	mov	r3, r2
 800fbe0:	009b      	lsls	r3, r3, #2
 800fbe2:	4413      	add	r3, r2
 800fbe4:	009b      	lsls	r3, r3, #2
 800fbe6:	440b      	add	r3, r1
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d10a      	bne.n	800fc04 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800fbee:	69bb      	ldr	r3, [r7, #24]
 800fbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	fa02 f303 	lsl.w	r3, r2, r3
 800fbf8:	43da      	mvns	r2, r3
 800fbfa:	4b12      	ldr	r3, [pc, #72]	; (800fc44 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	4013      	ands	r3, r2
 800fc00:	4a10      	ldr	r2, [pc, #64]	; (800fc44 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800fc02:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fc04:	69bb      	ldr	r3, [r7, #24]
 800fc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc08:	2201      	movs	r2, #1
 800fc0a:	409a      	lsls	r2, r3
 800fc0c:	4b0d      	ldr	r3, [pc, #52]	; (800fc44 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	4313      	orrs	r3, r2
 800fc12:	4a0c      	ldr	r2, [pc, #48]	; (800fc44 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800fc14:	6013      	str	r3, [r2, #0]
 800fc16:	69bb      	ldr	r3, [r7, #24]
 800fc18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc1a:	4613      	mov	r3, r2
 800fc1c:	009b      	lsls	r3, r3, #2
 800fc1e:	4413      	add	r3, r2
 800fc20:	009b      	lsls	r3, r3, #2
 800fc22:	4a07      	ldr	r2, [pc, #28]	; (800fc40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800fc24:	441a      	add	r2, r3
 800fc26:	69bb      	ldr	r3, [r7, #24]
 800fc28:	3304      	adds	r3, #4
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	4610      	mov	r0, r2
 800fc2e:	f7fe f83a 	bl	800dca6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fc32:	bf00      	nop
 800fc34:	3720      	adds	r7, #32
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
 800fc3a:	bf00      	nop
 800fc3c:	20002fdc 	.word	0x20002fdc
 800fc40:	20002fe0 	.word	0x20002fe0
 800fc44:	200030e4 	.word	0x200030e4

0800fc48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800fc48:	b480      	push	{r7}
 800fc4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fc4c:	4b07      	ldr	r3, [pc, #28]	; (800fc6c <pvTaskIncrementMutexHeldCount+0x24>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d004      	beq.n	800fc5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fc54:	4b05      	ldr	r3, [pc, #20]	; (800fc6c <pvTaskIncrementMutexHeldCount+0x24>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fc5a:	3201      	adds	r2, #1
 800fc5c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800fc5e:	4b03      	ldr	r3, [pc, #12]	; (800fc6c <pvTaskIncrementMutexHeldCount+0x24>)
 800fc60:	681b      	ldr	r3, [r3, #0]
	}
 800fc62:	4618      	mov	r0, r3
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bc80      	pop	{r7}
 800fc68:	4770      	bx	lr
 800fc6a:	bf00      	nop
 800fc6c:	20002fdc 	.word	0x20002fdc

0800fc70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b084      	sub	sp, #16
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fc7a:	4b29      	ldr	r3, [pc, #164]	; (800fd20 <prvAddCurrentTaskToDelayedList+0xb0>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc80:	4b28      	ldr	r3, [pc, #160]	; (800fd24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	3304      	adds	r3, #4
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7fe f868 	bl	800dd5c <uxListRemove>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d10b      	bne.n	800fcaa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800fc92:	4b24      	ldr	r3, [pc, #144]	; (800fd24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc98:	2201      	movs	r2, #1
 800fc9a:	fa02 f303 	lsl.w	r3, r2, r3
 800fc9e:	43da      	mvns	r2, r3
 800fca0:	4b21      	ldr	r3, [pc, #132]	; (800fd28 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	4013      	ands	r3, r2
 800fca6:	4a20      	ldr	r2, [pc, #128]	; (800fd28 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fca8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcb0:	d10a      	bne.n	800fcc8 <prvAddCurrentTaskToDelayedList+0x58>
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d007      	beq.n	800fcc8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fcb8:	4b1a      	ldr	r3, [pc, #104]	; (800fd24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	3304      	adds	r3, #4
 800fcbe:	4619      	mov	r1, r3
 800fcc0:	481a      	ldr	r0, [pc, #104]	; (800fd2c <prvAddCurrentTaskToDelayedList+0xbc>)
 800fcc2:	f7fd fff0 	bl	800dca6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fcc6:	e026      	b.n	800fd16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fcc8:	68fa      	ldr	r2, [r7, #12]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	4413      	add	r3, r2
 800fcce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fcd0:	4b14      	ldr	r3, [pc, #80]	; (800fd24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	68ba      	ldr	r2, [r7, #8]
 800fcd6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fcd8:	68ba      	ldr	r2, [r7, #8]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d209      	bcs.n	800fcf4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fce0:	4b13      	ldr	r3, [pc, #76]	; (800fd30 <prvAddCurrentTaskToDelayedList+0xc0>)
 800fce2:	681a      	ldr	r2, [r3, #0]
 800fce4:	4b0f      	ldr	r3, [pc, #60]	; (800fd24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	3304      	adds	r3, #4
 800fcea:	4619      	mov	r1, r3
 800fcec:	4610      	mov	r0, r2
 800fcee:	f7fd fffd 	bl	800dcec <vListInsert>
}
 800fcf2:	e010      	b.n	800fd16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fcf4:	4b0f      	ldr	r3, [pc, #60]	; (800fd34 <prvAddCurrentTaskToDelayedList+0xc4>)
 800fcf6:	681a      	ldr	r2, [r3, #0]
 800fcf8:	4b0a      	ldr	r3, [pc, #40]	; (800fd24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	3304      	adds	r3, #4
 800fcfe:	4619      	mov	r1, r3
 800fd00:	4610      	mov	r0, r2
 800fd02:	f7fd fff3 	bl	800dcec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fd06:	4b0c      	ldr	r3, [pc, #48]	; (800fd38 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	68ba      	ldr	r2, [r7, #8]
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d202      	bcs.n	800fd16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800fd10:	4a09      	ldr	r2, [pc, #36]	; (800fd38 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	6013      	str	r3, [r2, #0]
}
 800fd16:	bf00      	nop
 800fd18:	3710      	adds	r7, #16
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}
 800fd1e:	bf00      	nop
 800fd20:	200030e0 	.word	0x200030e0
 800fd24:	20002fdc 	.word	0x20002fdc
 800fd28:	200030e4 	.word	0x200030e4
 800fd2c:	200030c8 	.word	0x200030c8
 800fd30:	20003098 	.word	0x20003098
 800fd34:	20003094 	.word	0x20003094
 800fd38:	200030fc 	.word	0x200030fc

0800fd3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b08a      	sub	sp, #40	; 0x28
 800fd40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fd42:	2300      	movs	r3, #0
 800fd44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fd46:	f000 fab1 	bl	80102ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fd4a:	4b1c      	ldr	r3, [pc, #112]	; (800fdbc <xTimerCreateTimerTask+0x80>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d021      	beq.n	800fd96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fd52:	2300      	movs	r3, #0
 800fd54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fd56:	2300      	movs	r3, #0
 800fd58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fd5a:	1d3a      	adds	r2, r7, #4
 800fd5c:	f107 0108 	add.w	r1, r7, #8
 800fd60:	f107 030c 	add.w	r3, r7, #12
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7f2 fcfd 	bl	8002764 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fd6a:	6879      	ldr	r1, [r7, #4]
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	68fa      	ldr	r2, [r7, #12]
 800fd70:	9202      	str	r2, [sp, #8]
 800fd72:	9301      	str	r3, [sp, #4]
 800fd74:	2302      	movs	r3, #2
 800fd76:	9300      	str	r3, [sp, #0]
 800fd78:	2300      	movs	r3, #0
 800fd7a:	460a      	mov	r2, r1
 800fd7c:	4910      	ldr	r1, [pc, #64]	; (800fdc0 <xTimerCreateTimerTask+0x84>)
 800fd7e:	4811      	ldr	r0, [pc, #68]	; (800fdc4 <xTimerCreateTimerTask+0x88>)
 800fd80:	f7fe ff66 	bl	800ec50 <xTaskCreateStatic>
 800fd84:	4603      	mov	r3, r0
 800fd86:	4a10      	ldr	r2, [pc, #64]	; (800fdc8 <xTimerCreateTimerTask+0x8c>)
 800fd88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fd8a:	4b0f      	ldr	r3, [pc, #60]	; (800fdc8 <xTimerCreateTimerTask+0x8c>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d001      	beq.n	800fd96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fd92:	2301      	movs	r3, #1
 800fd94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d10a      	bne.n	800fdb2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800fd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda0:	f383 8811 	msr	BASEPRI, r3
 800fda4:	f3bf 8f6f 	isb	sy
 800fda8:	f3bf 8f4f 	dsb	sy
 800fdac:	613b      	str	r3, [r7, #16]
}
 800fdae:	bf00      	nop
 800fdb0:	e7fe      	b.n	800fdb0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fdb2:	697b      	ldr	r3, [r7, #20]
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3718      	adds	r7, #24
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	20003138 	.word	0x20003138
 800fdc0:	08014504 	.word	0x08014504
 800fdc4:	0800fee9 	.word	0x0800fee9
 800fdc8:	2000313c 	.word	0x2000313c

0800fdcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b08a      	sub	sp, #40	; 0x28
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	60f8      	str	r0, [r7, #12]
 800fdd4:	60b9      	str	r1, [r7, #8]
 800fdd6:	607a      	str	r2, [r7, #4]
 800fdd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fdda:	2300      	movs	r3, #0
 800fddc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d10a      	bne.n	800fdfa <xTimerGenericCommand+0x2e>
	__asm volatile
 800fde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde8:	f383 8811 	msr	BASEPRI, r3
 800fdec:	f3bf 8f6f 	isb	sy
 800fdf0:	f3bf 8f4f 	dsb	sy
 800fdf4:	623b      	str	r3, [r7, #32]
}
 800fdf6:	bf00      	nop
 800fdf8:	e7fe      	b.n	800fdf8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fdfa:	4b1a      	ldr	r3, [pc, #104]	; (800fe64 <xTimerGenericCommand+0x98>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d02a      	beq.n	800fe58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	2b05      	cmp	r3, #5
 800fe12:	dc18      	bgt.n	800fe46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fe14:	f7ff fd4e 	bl	800f8b4 <xTaskGetSchedulerState>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	2b02      	cmp	r3, #2
 800fe1c:	d109      	bne.n	800fe32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fe1e:	4b11      	ldr	r3, [pc, #68]	; (800fe64 <xTimerGenericCommand+0x98>)
 800fe20:	6818      	ldr	r0, [r3, #0]
 800fe22:	f107 0114 	add.w	r1, r7, #20
 800fe26:	2300      	movs	r3, #0
 800fe28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe2a:	f7fe f8fd 	bl	800e028 <xQueueGenericSend>
 800fe2e:	6278      	str	r0, [r7, #36]	; 0x24
 800fe30:	e012      	b.n	800fe58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fe32:	4b0c      	ldr	r3, [pc, #48]	; (800fe64 <xTimerGenericCommand+0x98>)
 800fe34:	6818      	ldr	r0, [r3, #0]
 800fe36:	f107 0114 	add.w	r1, r7, #20
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	f7fe f8f3 	bl	800e028 <xQueueGenericSend>
 800fe42:	6278      	str	r0, [r7, #36]	; 0x24
 800fe44:	e008      	b.n	800fe58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fe46:	4b07      	ldr	r3, [pc, #28]	; (800fe64 <xTimerGenericCommand+0x98>)
 800fe48:	6818      	ldr	r0, [r3, #0]
 800fe4a:	f107 0114 	add.w	r1, r7, #20
 800fe4e:	2300      	movs	r3, #0
 800fe50:	683a      	ldr	r2, [r7, #0]
 800fe52:	f7fe f9e7 	bl	800e224 <xQueueGenericSendFromISR>
 800fe56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fe58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3728      	adds	r7, #40	; 0x28
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	20003138 	.word	0x20003138

0800fe68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b088      	sub	sp, #32
 800fe6c:	af02      	add	r7, sp, #8
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fe72:	4b1c      	ldr	r3, [pc, #112]	; (800fee4 <prvProcessExpiredTimer+0x7c>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	68db      	ldr	r3, [r3, #12]
 800fe78:	68db      	ldr	r3, [r3, #12]
 800fe7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	3304      	adds	r3, #4
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7fd ff6b 	bl	800dd5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	69db      	ldr	r3, [r3, #28]
 800fe8a:	2b01      	cmp	r3, #1
 800fe8c:	d122      	bne.n	800fed4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	699a      	ldr	r2, [r3, #24]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	18d1      	adds	r1, r2, r3
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	683a      	ldr	r2, [r7, #0]
 800fe9a:	6978      	ldr	r0, [r7, #20]
 800fe9c:	f000 f8c8 	bl	8010030 <prvInsertTimerInActiveList>
 800fea0:	4603      	mov	r3, r0
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d016      	beq.n	800fed4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fea6:	2300      	movs	r3, #0
 800fea8:	9300      	str	r3, [sp, #0]
 800feaa:	2300      	movs	r3, #0
 800feac:	687a      	ldr	r2, [r7, #4]
 800feae:	2100      	movs	r1, #0
 800feb0:	6978      	ldr	r0, [r7, #20]
 800feb2:	f7ff ff8b 	bl	800fdcc <xTimerGenericCommand>
 800feb6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d10a      	bne.n	800fed4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800febe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec2:	f383 8811 	msr	BASEPRI, r3
 800fec6:	f3bf 8f6f 	isb	sy
 800feca:	f3bf 8f4f 	dsb	sy
 800fece:	60fb      	str	r3, [r7, #12]
}
 800fed0:	bf00      	nop
 800fed2:	e7fe      	b.n	800fed2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fed8:	6978      	ldr	r0, [r7, #20]
 800feda:	4798      	blx	r3
}
 800fedc:	bf00      	nop
 800fede:	3718      	adds	r7, #24
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}
 800fee4:	20003130 	.word	0x20003130

0800fee8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b084      	sub	sp, #16
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fef0:	f107 0308 	add.w	r3, r7, #8
 800fef4:	4618      	mov	r0, r3
 800fef6:	f000 f857 	bl	800ffa8 <prvGetNextExpireTime>
 800fefa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	4619      	mov	r1, r3
 800ff00:	68f8      	ldr	r0, [r7, #12]
 800ff02:	f000 f803 	bl	800ff0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ff06:	f000 f8d5 	bl	80100b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ff0a:	e7f1      	b.n	800fef0 <prvTimerTask+0x8>

0800ff0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b084      	sub	sp, #16
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ff16:	f7ff f8e1 	bl	800f0dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ff1a:	f107 0308 	add.w	r3, r7, #8
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f000 f866 	bl	800fff0 <prvSampleTimeNow>
 800ff24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d130      	bne.n	800ff8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d10a      	bne.n	800ff48 <prvProcessTimerOrBlockTask+0x3c>
 800ff32:	687a      	ldr	r2, [r7, #4]
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	429a      	cmp	r2, r3
 800ff38:	d806      	bhi.n	800ff48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ff3a:	f7ff f8dd 	bl	800f0f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ff3e:	68f9      	ldr	r1, [r7, #12]
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f7ff ff91 	bl	800fe68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ff46:	e024      	b.n	800ff92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d008      	beq.n	800ff60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ff4e:	4b13      	ldr	r3, [pc, #76]	; (800ff9c <prvProcessTimerOrBlockTask+0x90>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	bf0c      	ite	eq
 800ff58:	2301      	moveq	r3, #1
 800ff5a:	2300      	movne	r3, #0
 800ff5c:	b2db      	uxtb	r3, r3
 800ff5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ff60:	4b0f      	ldr	r3, [pc, #60]	; (800ffa0 <prvProcessTimerOrBlockTask+0x94>)
 800ff62:	6818      	ldr	r0, [r3, #0]
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	1ad3      	subs	r3, r2, r3
 800ff6a:	683a      	ldr	r2, [r7, #0]
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	f7fe fe3b 	bl	800ebe8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ff72:	f7ff f8c1 	bl	800f0f8 <xTaskResumeAll>
 800ff76:	4603      	mov	r3, r0
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d10a      	bne.n	800ff92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ff7c:	4b09      	ldr	r3, [pc, #36]	; (800ffa4 <prvProcessTimerOrBlockTask+0x98>)
 800ff7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff82:	601a      	str	r2, [r3, #0]
 800ff84:	f3bf 8f4f 	dsb	sy
 800ff88:	f3bf 8f6f 	isb	sy
}
 800ff8c:	e001      	b.n	800ff92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ff8e:	f7ff f8b3 	bl	800f0f8 <xTaskResumeAll>
}
 800ff92:	bf00      	nop
 800ff94:	3710      	adds	r7, #16
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}
 800ff9a:	bf00      	nop
 800ff9c:	20003134 	.word	0x20003134
 800ffa0:	20003138 	.word	0x20003138
 800ffa4:	e000ed04 	.word	0xe000ed04

0800ffa8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ffa8:	b480      	push	{r7}
 800ffaa:	b085      	sub	sp, #20
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ffb0:	4b0e      	ldr	r3, [pc, #56]	; (800ffec <prvGetNextExpireTime+0x44>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	bf0c      	ite	eq
 800ffba:	2301      	moveq	r3, #1
 800ffbc:	2300      	movne	r3, #0
 800ffbe:	b2db      	uxtb	r3, r3
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d105      	bne.n	800ffda <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ffce:	4b07      	ldr	r3, [pc, #28]	; (800ffec <prvGetNextExpireTime+0x44>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	68db      	ldr	r3, [r3, #12]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	60fb      	str	r3, [r7, #12]
 800ffd8:	e001      	b.n	800ffde <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ffde:	68fb      	ldr	r3, [r7, #12]
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	3714      	adds	r7, #20
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bc80      	pop	{r7}
 800ffe8:	4770      	bx	lr
 800ffea:	bf00      	nop
 800ffec:	20003130 	.word	0x20003130

0800fff0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b084      	sub	sp, #16
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fff8:	f7ff f91a 	bl	800f230 <xTaskGetTickCount>
 800fffc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fffe:	4b0b      	ldr	r3, [pc, #44]	; (801002c <prvSampleTimeNow+0x3c>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	68fa      	ldr	r2, [r7, #12]
 8010004:	429a      	cmp	r2, r3
 8010006:	d205      	bcs.n	8010014 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010008:	f000 f8ee 	bl	80101e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2201      	movs	r2, #1
 8010010:	601a      	str	r2, [r3, #0]
 8010012:	e002      	b.n	801001a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2200      	movs	r2, #0
 8010018:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801001a:	4a04      	ldr	r2, [pc, #16]	; (801002c <prvSampleTimeNow+0x3c>)
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010020:	68fb      	ldr	r3, [r7, #12]
}
 8010022:	4618      	mov	r0, r3
 8010024:	3710      	adds	r7, #16
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	20003140 	.word	0x20003140

08010030 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b086      	sub	sp, #24
 8010034:	af00      	add	r7, sp, #0
 8010036:	60f8      	str	r0, [r7, #12]
 8010038:	60b9      	str	r1, [r7, #8]
 801003a:	607a      	str	r2, [r7, #4]
 801003c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801003e:	2300      	movs	r3, #0
 8010040:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	68ba      	ldr	r2, [r7, #8]
 8010046:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	68fa      	ldr	r2, [r7, #12]
 801004c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801004e:	68ba      	ldr	r2, [r7, #8]
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	429a      	cmp	r2, r3
 8010054:	d812      	bhi.n	801007c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010056:	687a      	ldr	r2, [r7, #4]
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	1ad2      	subs	r2, r2, r3
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	699b      	ldr	r3, [r3, #24]
 8010060:	429a      	cmp	r2, r3
 8010062:	d302      	bcc.n	801006a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010064:	2301      	movs	r3, #1
 8010066:	617b      	str	r3, [r7, #20]
 8010068:	e01b      	b.n	80100a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801006a:	4b10      	ldr	r3, [pc, #64]	; (80100ac <prvInsertTimerInActiveList+0x7c>)
 801006c:	681a      	ldr	r2, [r3, #0]
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	3304      	adds	r3, #4
 8010072:	4619      	mov	r1, r3
 8010074:	4610      	mov	r0, r2
 8010076:	f7fd fe39 	bl	800dcec <vListInsert>
 801007a:	e012      	b.n	80100a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801007c:	687a      	ldr	r2, [r7, #4]
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	429a      	cmp	r2, r3
 8010082:	d206      	bcs.n	8010092 <prvInsertTimerInActiveList+0x62>
 8010084:	68ba      	ldr	r2, [r7, #8]
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	429a      	cmp	r2, r3
 801008a:	d302      	bcc.n	8010092 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801008c:	2301      	movs	r3, #1
 801008e:	617b      	str	r3, [r7, #20]
 8010090:	e007      	b.n	80100a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010092:	4b07      	ldr	r3, [pc, #28]	; (80100b0 <prvInsertTimerInActiveList+0x80>)
 8010094:	681a      	ldr	r2, [r3, #0]
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	3304      	adds	r3, #4
 801009a:	4619      	mov	r1, r3
 801009c:	4610      	mov	r0, r2
 801009e:	f7fd fe25 	bl	800dcec <vListInsert>
		}
	}

	return xProcessTimerNow;
 80100a2:	697b      	ldr	r3, [r7, #20]
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3718      	adds	r7, #24
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}
 80100ac:	20003134 	.word	0x20003134
 80100b0:	20003130 	.word	0x20003130

080100b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b08c      	sub	sp, #48	; 0x30
 80100b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80100ba:	e081      	b.n	80101c0 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80100bc:	68bb      	ldr	r3, [r7, #8]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	db7d      	blt.n	80101be <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80100c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c8:	695b      	ldr	r3, [r3, #20]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d004      	beq.n	80100d8 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80100ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d0:	3304      	adds	r3, #4
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7fd fe42 	bl	800dd5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80100d8:	1d3b      	adds	r3, r7, #4
 80100da:	4618      	mov	r0, r3
 80100dc:	f7ff ff88 	bl	800fff0 <prvSampleTimeNow>
 80100e0:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	2b09      	cmp	r3, #9
 80100e6:	d86b      	bhi.n	80101c0 <prvProcessReceivedCommands+0x10c>
 80100e8:	a201      	add	r2, pc, #4	; (adr r2, 80100f0 <prvProcessReceivedCommands+0x3c>)
 80100ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100ee:	bf00      	nop
 80100f0:	08010119 	.word	0x08010119
 80100f4:	08010119 	.word	0x08010119
 80100f8:	08010119 	.word	0x08010119
 80100fc:	080101c1 	.word	0x080101c1
 8010100:	08010175 	.word	0x08010175
 8010104:	080101ad 	.word	0x080101ad
 8010108:	08010119 	.word	0x08010119
 801010c:	08010119 	.word	0x08010119
 8010110:	080101c1 	.word	0x080101c1
 8010114:	08010175 	.word	0x08010175
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010118:	68fa      	ldr	r2, [r7, #12]
 801011a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801011c:	699b      	ldr	r3, [r3, #24]
 801011e:	18d1      	adds	r1, r2, r3
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	6a3a      	ldr	r2, [r7, #32]
 8010124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010126:	f7ff ff83 	bl	8010030 <prvInsertTimerInActiveList>
 801012a:	4603      	mov	r3, r0
 801012c:	2b00      	cmp	r3, #0
 801012e:	d047      	beq.n	80101c0 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010134:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010136:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013a:	69db      	ldr	r3, [r3, #28]
 801013c:	2b01      	cmp	r3, #1
 801013e:	d13f      	bne.n	80101c0 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010140:	68fa      	ldr	r2, [r7, #12]
 8010142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010144:	699b      	ldr	r3, [r3, #24]
 8010146:	441a      	add	r2, r3
 8010148:	2300      	movs	r3, #0
 801014a:	9300      	str	r3, [sp, #0]
 801014c:	2300      	movs	r3, #0
 801014e:	2100      	movs	r1, #0
 8010150:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010152:	f7ff fe3b 	bl	800fdcc <xTimerGenericCommand>
 8010156:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8010158:	69fb      	ldr	r3, [r7, #28]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d130      	bne.n	80101c0 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 801015e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010162:	f383 8811 	msr	BASEPRI, r3
 8010166:	f3bf 8f6f 	isb	sy
 801016a:	f3bf 8f4f 	dsb	sy
 801016e:	61bb      	str	r3, [r7, #24]
}
 8010170:	bf00      	nop
 8010172:	e7fe      	b.n	8010172 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010174:	68fa      	ldr	r2, [r7, #12]
 8010176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010178:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801017a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017c:	699b      	ldr	r3, [r3, #24]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d10a      	bne.n	8010198 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 8010182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010186:	f383 8811 	msr	BASEPRI, r3
 801018a:	f3bf 8f6f 	isb	sy
 801018e:	f3bf 8f4f 	dsb	sy
 8010192:	617b      	str	r3, [r7, #20]
}
 8010194:	bf00      	nop
 8010196:	e7fe      	b.n	8010196 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019a:	699a      	ldr	r2, [r3, #24]
 801019c:	6a3b      	ldr	r3, [r7, #32]
 801019e:	18d1      	adds	r1, r2, r3
 80101a0:	6a3b      	ldr	r3, [r7, #32]
 80101a2:	6a3a      	ldr	r2, [r7, #32]
 80101a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101a6:	f7ff ff43 	bl	8010030 <prvInsertTimerInActiveList>
					break;
 80101aa:	e009      	b.n	80101c0 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80101ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d104      	bne.n	80101c0 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 80101b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101b8:	f000 fb6c 	bl	8010894 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80101bc:	e000      	b.n	80101c0 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80101be:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80101c0:	4b08      	ldr	r3, [pc, #32]	; (80101e4 <prvProcessReceivedCommands+0x130>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	f107 0108 	add.w	r1, r7, #8
 80101c8:	2200      	movs	r2, #0
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7fe f950 	bl	800e470 <xQueueReceive>
 80101d0:	4603      	mov	r3, r0
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	f47f af72 	bne.w	80100bc <prvProcessReceivedCommands+0x8>
	}
}
 80101d8:	bf00      	nop
 80101da:	bf00      	nop
 80101dc:	3728      	adds	r7, #40	; 0x28
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}
 80101e2:	bf00      	nop
 80101e4:	20003138 	.word	0x20003138

080101e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b088      	sub	sp, #32
 80101ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80101ee:	e045      	b.n	801027c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80101f0:	4b2c      	ldr	r3, [pc, #176]	; (80102a4 <prvSwitchTimerLists+0xbc>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	68db      	ldr	r3, [r3, #12]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80101fa:	4b2a      	ldr	r3, [pc, #168]	; (80102a4 <prvSwitchTimerLists+0xbc>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	68db      	ldr	r3, [r3, #12]
 8010200:	68db      	ldr	r3, [r3, #12]
 8010202:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	3304      	adds	r3, #4
 8010208:	4618      	mov	r0, r3
 801020a:	f7fd fda7 	bl	800dd5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010212:	68f8      	ldr	r0, [r7, #12]
 8010214:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	69db      	ldr	r3, [r3, #28]
 801021a:	2b01      	cmp	r3, #1
 801021c:	d12e      	bne.n	801027c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	699b      	ldr	r3, [r3, #24]
 8010222:	693a      	ldr	r2, [r7, #16]
 8010224:	4413      	add	r3, r2
 8010226:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010228:	68ba      	ldr	r2, [r7, #8]
 801022a:	693b      	ldr	r3, [r7, #16]
 801022c:	429a      	cmp	r2, r3
 801022e:	d90e      	bls.n	801024e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	68ba      	ldr	r2, [r7, #8]
 8010234:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	68fa      	ldr	r2, [r7, #12]
 801023a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801023c:	4b19      	ldr	r3, [pc, #100]	; (80102a4 <prvSwitchTimerLists+0xbc>)
 801023e:	681a      	ldr	r2, [r3, #0]
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	3304      	adds	r3, #4
 8010244:	4619      	mov	r1, r3
 8010246:	4610      	mov	r0, r2
 8010248:	f7fd fd50 	bl	800dcec <vListInsert>
 801024c:	e016      	b.n	801027c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801024e:	2300      	movs	r3, #0
 8010250:	9300      	str	r3, [sp, #0]
 8010252:	2300      	movs	r3, #0
 8010254:	693a      	ldr	r2, [r7, #16]
 8010256:	2100      	movs	r1, #0
 8010258:	68f8      	ldr	r0, [r7, #12]
 801025a:	f7ff fdb7 	bl	800fdcc <xTimerGenericCommand>
 801025e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d10a      	bne.n	801027c <prvSwitchTimerLists+0x94>
	__asm volatile
 8010266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801026a:	f383 8811 	msr	BASEPRI, r3
 801026e:	f3bf 8f6f 	isb	sy
 8010272:	f3bf 8f4f 	dsb	sy
 8010276:	603b      	str	r3, [r7, #0]
}
 8010278:	bf00      	nop
 801027a:	e7fe      	b.n	801027a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801027c:	4b09      	ldr	r3, [pc, #36]	; (80102a4 <prvSwitchTimerLists+0xbc>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d1b4      	bne.n	80101f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010286:	4b07      	ldr	r3, [pc, #28]	; (80102a4 <prvSwitchTimerLists+0xbc>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801028c:	4b06      	ldr	r3, [pc, #24]	; (80102a8 <prvSwitchTimerLists+0xc0>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	4a04      	ldr	r2, [pc, #16]	; (80102a4 <prvSwitchTimerLists+0xbc>)
 8010292:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010294:	4a04      	ldr	r2, [pc, #16]	; (80102a8 <prvSwitchTimerLists+0xc0>)
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	6013      	str	r3, [r2, #0]
}
 801029a:	bf00      	nop
 801029c:	3718      	adds	r7, #24
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	20003130 	.word	0x20003130
 80102a8:	20003134 	.word	0x20003134

080102ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b082      	sub	sp, #8
 80102b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80102b2:	f000 f92b 	bl	801050c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80102b6:	4b15      	ldr	r3, [pc, #84]	; (801030c <prvCheckForValidListAndQueue+0x60>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d120      	bne.n	8010300 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80102be:	4814      	ldr	r0, [pc, #80]	; (8010310 <prvCheckForValidListAndQueue+0x64>)
 80102c0:	f7fd fcc6 	bl	800dc50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80102c4:	4813      	ldr	r0, [pc, #76]	; (8010314 <prvCheckForValidListAndQueue+0x68>)
 80102c6:	f7fd fcc3 	bl	800dc50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80102ca:	4b13      	ldr	r3, [pc, #76]	; (8010318 <prvCheckForValidListAndQueue+0x6c>)
 80102cc:	4a10      	ldr	r2, [pc, #64]	; (8010310 <prvCheckForValidListAndQueue+0x64>)
 80102ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80102d0:	4b12      	ldr	r3, [pc, #72]	; (801031c <prvCheckForValidListAndQueue+0x70>)
 80102d2:	4a10      	ldr	r2, [pc, #64]	; (8010314 <prvCheckForValidListAndQueue+0x68>)
 80102d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80102d6:	2300      	movs	r3, #0
 80102d8:	9300      	str	r3, [sp, #0]
 80102da:	4b11      	ldr	r3, [pc, #68]	; (8010320 <prvCheckForValidListAndQueue+0x74>)
 80102dc:	4a11      	ldr	r2, [pc, #68]	; (8010324 <prvCheckForValidListAndQueue+0x78>)
 80102de:	210c      	movs	r1, #12
 80102e0:	200a      	movs	r0, #10
 80102e2:	f7fd fdcd 	bl	800de80 <xQueueGenericCreateStatic>
 80102e6:	4603      	mov	r3, r0
 80102e8:	4a08      	ldr	r2, [pc, #32]	; (801030c <prvCheckForValidListAndQueue+0x60>)
 80102ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80102ec:	4b07      	ldr	r3, [pc, #28]	; (801030c <prvCheckForValidListAndQueue+0x60>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d005      	beq.n	8010300 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80102f4:	4b05      	ldr	r3, [pc, #20]	; (801030c <prvCheckForValidListAndQueue+0x60>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	490b      	ldr	r1, [pc, #44]	; (8010328 <prvCheckForValidListAndQueue+0x7c>)
 80102fa:	4618      	mov	r0, r3
 80102fc:	f7fe fc4c 	bl	800eb98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010300:	f000 f934 	bl	801056c <vPortExitCritical>
}
 8010304:	bf00      	nop
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	20003138 	.word	0x20003138
 8010310:	20003108 	.word	0x20003108
 8010314:	2000311c 	.word	0x2000311c
 8010318:	20003130 	.word	0x20003130
 801031c:	20003134 	.word	0x20003134
 8010320:	200031bc 	.word	0x200031bc
 8010324:	20003144 	.word	0x20003144
 8010328:	0801450c 	.word	0x0801450c

0801032c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801032c:	b480      	push	{r7}
 801032e:	b085      	sub	sp, #20
 8010330:	af00      	add	r7, sp, #0
 8010332:	60f8      	str	r0, [r7, #12]
 8010334:	60b9      	str	r1, [r7, #8]
 8010336:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	3b04      	subs	r3, #4
 801033c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	3b04      	subs	r3, #4
 801034a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	f023 0201 	bic.w	r2, r3, #1
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	3b04      	subs	r3, #4
 801035a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801035c:	4a08      	ldr	r2, [pc, #32]	; (8010380 <pxPortInitialiseStack+0x54>)
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	3b14      	subs	r3, #20
 8010366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010368:	687a      	ldr	r2, [r7, #4]
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	3b20      	subs	r3, #32
 8010372:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010374:	68fb      	ldr	r3, [r7, #12]
}
 8010376:	4618      	mov	r0, r3
 8010378:	3714      	adds	r7, #20
 801037a:	46bd      	mov	sp, r7
 801037c:	bc80      	pop	{r7}
 801037e:	4770      	bx	lr
 8010380:	08010385 	.word	0x08010385

08010384 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010384:	b480      	push	{r7}
 8010386:	b085      	sub	sp, #20
 8010388:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801038a:	2300      	movs	r3, #0
 801038c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801038e:	4b12      	ldr	r3, [pc, #72]	; (80103d8 <prvTaskExitError+0x54>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010396:	d00a      	beq.n	80103ae <prvTaskExitError+0x2a>
	__asm volatile
 8010398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801039c:	f383 8811 	msr	BASEPRI, r3
 80103a0:	f3bf 8f6f 	isb	sy
 80103a4:	f3bf 8f4f 	dsb	sy
 80103a8:	60fb      	str	r3, [r7, #12]
}
 80103aa:	bf00      	nop
 80103ac:	e7fe      	b.n	80103ac <prvTaskExitError+0x28>
	__asm volatile
 80103ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103b2:	f383 8811 	msr	BASEPRI, r3
 80103b6:	f3bf 8f6f 	isb	sy
 80103ba:	f3bf 8f4f 	dsb	sy
 80103be:	60bb      	str	r3, [r7, #8]
}
 80103c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80103c2:	bf00      	nop
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d0fc      	beq.n	80103c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80103ca:	bf00      	nop
 80103cc:	bf00      	nop
 80103ce:	3714      	adds	r7, #20
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bc80      	pop	{r7}
 80103d4:	4770      	bx	lr
 80103d6:	bf00      	nop
 80103d8:	200001e4 	.word	0x200001e4
 80103dc:	00000000 	.word	0x00000000

080103e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80103e0:	4b07      	ldr	r3, [pc, #28]	; (8010400 <pxCurrentTCBConst2>)
 80103e2:	6819      	ldr	r1, [r3, #0]
 80103e4:	6808      	ldr	r0, [r1, #0]
 80103e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80103ea:	f380 8809 	msr	PSP, r0
 80103ee:	f3bf 8f6f 	isb	sy
 80103f2:	f04f 0000 	mov.w	r0, #0
 80103f6:	f380 8811 	msr	BASEPRI, r0
 80103fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80103fe:	4770      	bx	lr

08010400 <pxCurrentTCBConst2>:
 8010400:	20002fdc 	.word	0x20002fdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010404:	bf00      	nop
 8010406:	bf00      	nop

08010408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8010408:	4806      	ldr	r0, [pc, #24]	; (8010424 <prvPortStartFirstTask+0x1c>)
 801040a:	6800      	ldr	r0, [r0, #0]
 801040c:	6800      	ldr	r0, [r0, #0]
 801040e:	f380 8808 	msr	MSP, r0
 8010412:	b662      	cpsie	i
 8010414:	b661      	cpsie	f
 8010416:	f3bf 8f4f 	dsb	sy
 801041a:	f3bf 8f6f 	isb	sy
 801041e:	df00      	svc	0
 8010420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010422:	bf00      	nop
 8010424:	e000ed08 	.word	0xe000ed08

08010428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b084      	sub	sp, #16
 801042c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801042e:	4b32      	ldr	r3, [pc, #200]	; (80104f8 <xPortStartScheduler+0xd0>)
 8010430:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	781b      	ldrb	r3, [r3, #0]
 8010436:	b2db      	uxtb	r3, r3
 8010438:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	22ff      	movs	r2, #255	; 0xff
 801043e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	b2db      	uxtb	r3, r3
 8010446:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010448:	78fb      	ldrb	r3, [r7, #3]
 801044a:	b2db      	uxtb	r3, r3
 801044c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010450:	b2da      	uxtb	r2, r3
 8010452:	4b2a      	ldr	r3, [pc, #168]	; (80104fc <xPortStartScheduler+0xd4>)
 8010454:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010456:	4b2a      	ldr	r3, [pc, #168]	; (8010500 <xPortStartScheduler+0xd8>)
 8010458:	2207      	movs	r2, #7
 801045a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801045c:	e009      	b.n	8010472 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801045e:	4b28      	ldr	r3, [pc, #160]	; (8010500 <xPortStartScheduler+0xd8>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	3b01      	subs	r3, #1
 8010464:	4a26      	ldr	r2, [pc, #152]	; (8010500 <xPortStartScheduler+0xd8>)
 8010466:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010468:	78fb      	ldrb	r3, [r7, #3]
 801046a:	b2db      	uxtb	r3, r3
 801046c:	005b      	lsls	r3, r3, #1
 801046e:	b2db      	uxtb	r3, r3
 8010470:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010472:	78fb      	ldrb	r3, [r7, #3]
 8010474:	b2db      	uxtb	r3, r3
 8010476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801047a:	2b80      	cmp	r3, #128	; 0x80
 801047c:	d0ef      	beq.n	801045e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801047e:	4b20      	ldr	r3, [pc, #128]	; (8010500 <xPortStartScheduler+0xd8>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	f1c3 0307 	rsb	r3, r3, #7
 8010486:	2b04      	cmp	r3, #4
 8010488:	d00a      	beq.n	80104a0 <xPortStartScheduler+0x78>
	__asm volatile
 801048a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801048e:	f383 8811 	msr	BASEPRI, r3
 8010492:	f3bf 8f6f 	isb	sy
 8010496:	f3bf 8f4f 	dsb	sy
 801049a:	60bb      	str	r3, [r7, #8]
}
 801049c:	bf00      	nop
 801049e:	e7fe      	b.n	801049e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80104a0:	4b17      	ldr	r3, [pc, #92]	; (8010500 <xPortStartScheduler+0xd8>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	021b      	lsls	r3, r3, #8
 80104a6:	4a16      	ldr	r2, [pc, #88]	; (8010500 <xPortStartScheduler+0xd8>)
 80104a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80104aa:	4b15      	ldr	r3, [pc, #84]	; (8010500 <xPortStartScheduler+0xd8>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80104b2:	4a13      	ldr	r2, [pc, #76]	; (8010500 <xPortStartScheduler+0xd8>)
 80104b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	b2da      	uxtb	r2, r3
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80104be:	4b11      	ldr	r3, [pc, #68]	; (8010504 <xPortStartScheduler+0xdc>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	4a10      	ldr	r2, [pc, #64]	; (8010504 <xPortStartScheduler+0xdc>)
 80104c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80104c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80104ca:	4b0e      	ldr	r3, [pc, #56]	; (8010504 <xPortStartScheduler+0xdc>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	4a0d      	ldr	r2, [pc, #52]	; (8010504 <xPortStartScheduler+0xdc>)
 80104d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80104d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80104d6:	f000 f8b9 	bl	801064c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80104da:	4b0b      	ldr	r3, [pc, #44]	; (8010508 <xPortStartScheduler+0xe0>)
 80104dc:	2200      	movs	r2, #0
 80104de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80104e0:	f7ff ff92 	bl	8010408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80104e4:	f7fe ff70 	bl	800f3c8 <vTaskSwitchContext>
	prvTaskExitError();
 80104e8:	f7ff ff4c 	bl	8010384 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80104ec:	2300      	movs	r3, #0
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3710      	adds	r7, #16
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
 80104f6:	bf00      	nop
 80104f8:	e000e400 	.word	0xe000e400
 80104fc:	20003204 	.word	0x20003204
 8010500:	20003208 	.word	0x20003208
 8010504:	e000ed20 	.word	0xe000ed20
 8010508:	200001e4 	.word	0x200001e4

0801050c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801050c:	b480      	push	{r7}
 801050e:	b083      	sub	sp, #12
 8010510:	af00      	add	r7, sp, #0
	__asm volatile
 8010512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010516:	f383 8811 	msr	BASEPRI, r3
 801051a:	f3bf 8f6f 	isb	sy
 801051e:	f3bf 8f4f 	dsb	sy
 8010522:	607b      	str	r3, [r7, #4]
}
 8010524:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010526:	4b0f      	ldr	r3, [pc, #60]	; (8010564 <vPortEnterCritical+0x58>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	3301      	adds	r3, #1
 801052c:	4a0d      	ldr	r2, [pc, #52]	; (8010564 <vPortEnterCritical+0x58>)
 801052e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010530:	4b0c      	ldr	r3, [pc, #48]	; (8010564 <vPortEnterCritical+0x58>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	2b01      	cmp	r3, #1
 8010536:	d10f      	bne.n	8010558 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010538:	4b0b      	ldr	r3, [pc, #44]	; (8010568 <vPortEnterCritical+0x5c>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	b2db      	uxtb	r3, r3
 801053e:	2b00      	cmp	r3, #0
 8010540:	d00a      	beq.n	8010558 <vPortEnterCritical+0x4c>
	__asm volatile
 8010542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010546:	f383 8811 	msr	BASEPRI, r3
 801054a:	f3bf 8f6f 	isb	sy
 801054e:	f3bf 8f4f 	dsb	sy
 8010552:	603b      	str	r3, [r7, #0]
}
 8010554:	bf00      	nop
 8010556:	e7fe      	b.n	8010556 <vPortEnterCritical+0x4a>
	}
}
 8010558:	bf00      	nop
 801055a:	370c      	adds	r7, #12
 801055c:	46bd      	mov	sp, r7
 801055e:	bc80      	pop	{r7}
 8010560:	4770      	bx	lr
 8010562:	bf00      	nop
 8010564:	200001e4 	.word	0x200001e4
 8010568:	e000ed04 	.word	0xe000ed04

0801056c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801056c:	b480      	push	{r7}
 801056e:	b083      	sub	sp, #12
 8010570:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010572:	4b11      	ldr	r3, [pc, #68]	; (80105b8 <vPortExitCritical+0x4c>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d10a      	bne.n	8010590 <vPortExitCritical+0x24>
	__asm volatile
 801057a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801057e:	f383 8811 	msr	BASEPRI, r3
 8010582:	f3bf 8f6f 	isb	sy
 8010586:	f3bf 8f4f 	dsb	sy
 801058a:	607b      	str	r3, [r7, #4]
}
 801058c:	bf00      	nop
 801058e:	e7fe      	b.n	801058e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010590:	4b09      	ldr	r3, [pc, #36]	; (80105b8 <vPortExitCritical+0x4c>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	3b01      	subs	r3, #1
 8010596:	4a08      	ldr	r2, [pc, #32]	; (80105b8 <vPortExitCritical+0x4c>)
 8010598:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801059a:	4b07      	ldr	r3, [pc, #28]	; (80105b8 <vPortExitCritical+0x4c>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d105      	bne.n	80105ae <vPortExitCritical+0x42>
 80105a2:	2300      	movs	r3, #0
 80105a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	f383 8811 	msr	BASEPRI, r3
}
 80105ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80105ae:	bf00      	nop
 80105b0:	370c      	adds	r7, #12
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bc80      	pop	{r7}
 80105b6:	4770      	bx	lr
 80105b8:	200001e4 	.word	0x200001e4
 80105bc:	00000000 	.word	0x00000000

080105c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80105c0:	f3ef 8009 	mrs	r0, PSP
 80105c4:	f3bf 8f6f 	isb	sy
 80105c8:	4b0d      	ldr	r3, [pc, #52]	; (8010600 <pxCurrentTCBConst>)
 80105ca:	681a      	ldr	r2, [r3, #0]
 80105cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80105d0:	6010      	str	r0, [r2, #0]
 80105d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80105d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80105da:	f380 8811 	msr	BASEPRI, r0
 80105de:	f7fe fef3 	bl	800f3c8 <vTaskSwitchContext>
 80105e2:	f04f 0000 	mov.w	r0, #0
 80105e6:	f380 8811 	msr	BASEPRI, r0
 80105ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80105ee:	6819      	ldr	r1, [r3, #0]
 80105f0:	6808      	ldr	r0, [r1, #0]
 80105f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80105f6:	f380 8809 	msr	PSP, r0
 80105fa:	f3bf 8f6f 	isb	sy
 80105fe:	4770      	bx	lr

08010600 <pxCurrentTCBConst>:
 8010600:	20002fdc 	.word	0x20002fdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010604:	bf00      	nop
 8010606:	bf00      	nop

08010608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b082      	sub	sp, #8
 801060c:	af00      	add	r7, sp, #0
	__asm volatile
 801060e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010612:	f383 8811 	msr	BASEPRI, r3
 8010616:	f3bf 8f6f 	isb	sy
 801061a:	f3bf 8f4f 	dsb	sy
 801061e:	607b      	str	r3, [r7, #4]
}
 8010620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010622:	f7fe fe13 	bl	800f24c <xTaskIncrementTick>
 8010626:	4603      	mov	r3, r0
 8010628:	2b00      	cmp	r3, #0
 801062a:	d003      	beq.n	8010634 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801062c:	4b06      	ldr	r3, [pc, #24]	; (8010648 <SysTick_Handler+0x40>)
 801062e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010632:	601a      	str	r2, [r3, #0]
 8010634:	2300      	movs	r3, #0
 8010636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	f383 8811 	msr	BASEPRI, r3
}
 801063e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010640:	bf00      	nop
 8010642:	3708      	adds	r7, #8
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}
 8010648:	e000ed04 	.word	0xe000ed04

0801064c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801064c:	b480      	push	{r7}
 801064e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010650:	4b0a      	ldr	r3, [pc, #40]	; (801067c <vPortSetupTimerInterrupt+0x30>)
 8010652:	2200      	movs	r2, #0
 8010654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010656:	4b0a      	ldr	r3, [pc, #40]	; (8010680 <vPortSetupTimerInterrupt+0x34>)
 8010658:	2200      	movs	r2, #0
 801065a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801065c:	4b09      	ldr	r3, [pc, #36]	; (8010684 <vPortSetupTimerInterrupt+0x38>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4a09      	ldr	r2, [pc, #36]	; (8010688 <vPortSetupTimerInterrupt+0x3c>)
 8010662:	fba2 2303 	umull	r2, r3, r2, r3
 8010666:	099b      	lsrs	r3, r3, #6
 8010668:	4a08      	ldr	r2, [pc, #32]	; (801068c <vPortSetupTimerInterrupt+0x40>)
 801066a:	3b01      	subs	r3, #1
 801066c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801066e:	4b03      	ldr	r3, [pc, #12]	; (801067c <vPortSetupTimerInterrupt+0x30>)
 8010670:	2207      	movs	r2, #7
 8010672:	601a      	str	r2, [r3, #0]
}
 8010674:	bf00      	nop
 8010676:	46bd      	mov	sp, r7
 8010678:	bc80      	pop	{r7}
 801067a:	4770      	bx	lr
 801067c:	e000e010 	.word	0xe000e010
 8010680:	e000e018 	.word	0xe000e018
 8010684:	20000188 	.word	0x20000188
 8010688:	10624dd3 	.word	0x10624dd3
 801068c:	e000e014 	.word	0xe000e014

08010690 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010690:	b480      	push	{r7}
 8010692:	b085      	sub	sp, #20
 8010694:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010696:	f3ef 8305 	mrs	r3, IPSR
 801069a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	2b0f      	cmp	r3, #15
 80106a0:	d914      	bls.n	80106cc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80106a2:	4a16      	ldr	r2, [pc, #88]	; (80106fc <vPortValidateInterruptPriority+0x6c>)
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	4413      	add	r3, r2
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80106ac:	4b14      	ldr	r3, [pc, #80]	; (8010700 <vPortValidateInterruptPriority+0x70>)
 80106ae:	781b      	ldrb	r3, [r3, #0]
 80106b0:	7afa      	ldrb	r2, [r7, #11]
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d20a      	bcs.n	80106cc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80106b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ba:	f383 8811 	msr	BASEPRI, r3
 80106be:	f3bf 8f6f 	isb	sy
 80106c2:	f3bf 8f4f 	dsb	sy
 80106c6:	607b      	str	r3, [r7, #4]
}
 80106c8:	bf00      	nop
 80106ca:	e7fe      	b.n	80106ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80106cc:	4b0d      	ldr	r3, [pc, #52]	; (8010704 <vPortValidateInterruptPriority+0x74>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80106d4:	4b0c      	ldr	r3, [pc, #48]	; (8010708 <vPortValidateInterruptPriority+0x78>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	429a      	cmp	r2, r3
 80106da:	d90a      	bls.n	80106f2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80106dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e0:	f383 8811 	msr	BASEPRI, r3
 80106e4:	f3bf 8f6f 	isb	sy
 80106e8:	f3bf 8f4f 	dsb	sy
 80106ec:	603b      	str	r3, [r7, #0]
}
 80106ee:	bf00      	nop
 80106f0:	e7fe      	b.n	80106f0 <vPortValidateInterruptPriority+0x60>
	}
 80106f2:	bf00      	nop
 80106f4:	3714      	adds	r7, #20
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bc80      	pop	{r7}
 80106fa:	4770      	bx	lr
 80106fc:	e000e3f0 	.word	0xe000e3f0
 8010700:	20003204 	.word	0x20003204
 8010704:	e000ed0c 	.word	0xe000ed0c
 8010708:	20003208 	.word	0x20003208

0801070c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b08a      	sub	sp, #40	; 0x28
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010714:	2300      	movs	r3, #0
 8010716:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010718:	f7fe fce0 	bl	800f0dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801071c:	4b58      	ldr	r3, [pc, #352]	; (8010880 <pvPortMalloc+0x174>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d101      	bne.n	8010728 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010724:	f000 f910 	bl	8010948 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010728:	4b56      	ldr	r3, [pc, #344]	; (8010884 <pvPortMalloc+0x178>)
 801072a:	681a      	ldr	r2, [r3, #0]
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	4013      	ands	r3, r2
 8010730:	2b00      	cmp	r3, #0
 8010732:	f040 808e 	bne.w	8010852 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d01d      	beq.n	8010778 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801073c:	2208      	movs	r2, #8
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	4413      	add	r3, r2
 8010742:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f003 0307 	and.w	r3, r3, #7
 801074a:	2b00      	cmp	r3, #0
 801074c:	d014      	beq.n	8010778 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f023 0307 	bic.w	r3, r3, #7
 8010754:	3308      	adds	r3, #8
 8010756:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f003 0307 	and.w	r3, r3, #7
 801075e:	2b00      	cmp	r3, #0
 8010760:	d00a      	beq.n	8010778 <pvPortMalloc+0x6c>
	__asm volatile
 8010762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010766:	f383 8811 	msr	BASEPRI, r3
 801076a:	f3bf 8f6f 	isb	sy
 801076e:	f3bf 8f4f 	dsb	sy
 8010772:	617b      	str	r3, [r7, #20]
}
 8010774:	bf00      	nop
 8010776:	e7fe      	b.n	8010776 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d069      	beq.n	8010852 <pvPortMalloc+0x146>
 801077e:	4b42      	ldr	r3, [pc, #264]	; (8010888 <pvPortMalloc+0x17c>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	687a      	ldr	r2, [r7, #4]
 8010784:	429a      	cmp	r2, r3
 8010786:	d864      	bhi.n	8010852 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010788:	4b40      	ldr	r3, [pc, #256]	; (801088c <pvPortMalloc+0x180>)
 801078a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801078c:	4b3f      	ldr	r3, [pc, #252]	; (801088c <pvPortMalloc+0x180>)
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010792:	e004      	b.n	801079e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010796:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a0:	685b      	ldr	r3, [r3, #4]
 80107a2:	687a      	ldr	r2, [r7, #4]
 80107a4:	429a      	cmp	r2, r3
 80107a6:	d903      	bls.n	80107b0 <pvPortMalloc+0xa4>
 80107a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d1f1      	bne.n	8010794 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80107b0:	4b33      	ldr	r3, [pc, #204]	; (8010880 <pvPortMalloc+0x174>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d04b      	beq.n	8010852 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80107ba:	6a3b      	ldr	r3, [r7, #32]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	2208      	movs	r2, #8
 80107c0:	4413      	add	r3, r2
 80107c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80107c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c6:	681a      	ldr	r2, [r3, #0]
 80107c8:	6a3b      	ldr	r3, [r7, #32]
 80107ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80107cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ce:	685a      	ldr	r2, [r3, #4]
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	1ad2      	subs	r2, r2, r3
 80107d4:	2308      	movs	r3, #8
 80107d6:	005b      	lsls	r3, r3, #1
 80107d8:	429a      	cmp	r2, r3
 80107da:	d91f      	bls.n	801081c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80107dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	4413      	add	r3, r2
 80107e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80107e4:	69bb      	ldr	r3, [r7, #24]
 80107e6:	f003 0307 	and.w	r3, r3, #7
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d00a      	beq.n	8010804 <pvPortMalloc+0xf8>
	__asm volatile
 80107ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107f2:	f383 8811 	msr	BASEPRI, r3
 80107f6:	f3bf 8f6f 	isb	sy
 80107fa:	f3bf 8f4f 	dsb	sy
 80107fe:	613b      	str	r3, [r7, #16]
}
 8010800:	bf00      	nop
 8010802:	e7fe      	b.n	8010802 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010806:	685a      	ldr	r2, [r3, #4]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	1ad2      	subs	r2, r2, r3
 801080c:	69bb      	ldr	r3, [r7, #24]
 801080e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010812:	687a      	ldr	r2, [r7, #4]
 8010814:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010816:	69b8      	ldr	r0, [r7, #24]
 8010818:	f000 f8f8 	bl	8010a0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801081c:	4b1a      	ldr	r3, [pc, #104]	; (8010888 <pvPortMalloc+0x17c>)
 801081e:	681a      	ldr	r2, [r3, #0]
 8010820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010822:	685b      	ldr	r3, [r3, #4]
 8010824:	1ad3      	subs	r3, r2, r3
 8010826:	4a18      	ldr	r2, [pc, #96]	; (8010888 <pvPortMalloc+0x17c>)
 8010828:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801082a:	4b17      	ldr	r3, [pc, #92]	; (8010888 <pvPortMalloc+0x17c>)
 801082c:	681a      	ldr	r2, [r3, #0]
 801082e:	4b18      	ldr	r3, [pc, #96]	; (8010890 <pvPortMalloc+0x184>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	429a      	cmp	r2, r3
 8010834:	d203      	bcs.n	801083e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010836:	4b14      	ldr	r3, [pc, #80]	; (8010888 <pvPortMalloc+0x17c>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	4a15      	ldr	r2, [pc, #84]	; (8010890 <pvPortMalloc+0x184>)
 801083c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801083e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010840:	685a      	ldr	r2, [r3, #4]
 8010842:	4b10      	ldr	r3, [pc, #64]	; (8010884 <pvPortMalloc+0x178>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	431a      	orrs	r2, r3
 8010848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084e:	2200      	movs	r2, #0
 8010850:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010852:	f7fe fc51 	bl	800f0f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010856:	69fb      	ldr	r3, [r7, #28]
 8010858:	f003 0307 	and.w	r3, r3, #7
 801085c:	2b00      	cmp	r3, #0
 801085e:	d00a      	beq.n	8010876 <pvPortMalloc+0x16a>
	__asm volatile
 8010860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010864:	f383 8811 	msr	BASEPRI, r3
 8010868:	f3bf 8f6f 	isb	sy
 801086c:	f3bf 8f4f 	dsb	sy
 8010870:	60fb      	str	r3, [r7, #12]
}
 8010872:	bf00      	nop
 8010874:	e7fe      	b.n	8010874 <pvPortMalloc+0x168>
	return pvReturn;
 8010876:	69fb      	ldr	r3, [r7, #28]
}
 8010878:	4618      	mov	r0, r3
 801087a:	3728      	adds	r7, #40	; 0x28
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}
 8010880:	2000a744 	.word	0x2000a744
 8010884:	2000a750 	.word	0x2000a750
 8010888:	2000a748 	.word	0x2000a748
 801088c:	2000a73c 	.word	0x2000a73c
 8010890:	2000a74c 	.word	0x2000a74c

08010894 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b086      	sub	sp, #24
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d048      	beq.n	8010938 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80108a6:	2308      	movs	r3, #8
 80108a8:	425b      	negs	r3, r3
 80108aa:	697a      	ldr	r2, [r7, #20]
 80108ac:	4413      	add	r3, r2
 80108ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	685a      	ldr	r2, [r3, #4]
 80108b8:	4b21      	ldr	r3, [pc, #132]	; (8010940 <vPortFree+0xac>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	4013      	ands	r3, r2
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d10a      	bne.n	80108d8 <vPortFree+0x44>
	__asm volatile
 80108c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c6:	f383 8811 	msr	BASEPRI, r3
 80108ca:	f3bf 8f6f 	isb	sy
 80108ce:	f3bf 8f4f 	dsb	sy
 80108d2:	60fb      	str	r3, [r7, #12]
}
 80108d4:	bf00      	nop
 80108d6:	e7fe      	b.n	80108d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d00a      	beq.n	80108f6 <vPortFree+0x62>
	__asm volatile
 80108e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e4:	f383 8811 	msr	BASEPRI, r3
 80108e8:	f3bf 8f6f 	isb	sy
 80108ec:	f3bf 8f4f 	dsb	sy
 80108f0:	60bb      	str	r3, [r7, #8]
}
 80108f2:	bf00      	nop
 80108f4:	e7fe      	b.n	80108f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	685a      	ldr	r2, [r3, #4]
 80108fa:	4b11      	ldr	r3, [pc, #68]	; (8010940 <vPortFree+0xac>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	4013      	ands	r3, r2
 8010900:	2b00      	cmp	r3, #0
 8010902:	d019      	beq.n	8010938 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010904:	693b      	ldr	r3, [r7, #16]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d115      	bne.n	8010938 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	685a      	ldr	r2, [r3, #4]
 8010910:	4b0b      	ldr	r3, [pc, #44]	; (8010940 <vPortFree+0xac>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	43db      	mvns	r3, r3
 8010916:	401a      	ands	r2, r3
 8010918:	693b      	ldr	r3, [r7, #16]
 801091a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801091c:	f7fe fbde 	bl	800f0dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010920:	693b      	ldr	r3, [r7, #16]
 8010922:	685a      	ldr	r2, [r3, #4]
 8010924:	4b07      	ldr	r3, [pc, #28]	; (8010944 <vPortFree+0xb0>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	4413      	add	r3, r2
 801092a:	4a06      	ldr	r2, [pc, #24]	; (8010944 <vPortFree+0xb0>)
 801092c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801092e:	6938      	ldr	r0, [r7, #16]
 8010930:	f000 f86c 	bl	8010a0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010934:	f7fe fbe0 	bl	800f0f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010938:	bf00      	nop
 801093a:	3718      	adds	r7, #24
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}
 8010940:	2000a750 	.word	0x2000a750
 8010944:	2000a748 	.word	0x2000a748

08010948 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010948:	b480      	push	{r7}
 801094a:	b085      	sub	sp, #20
 801094c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801094e:	f247 5330 	movw	r3, #30000	; 0x7530
 8010952:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010954:	4b27      	ldr	r3, [pc, #156]	; (80109f4 <prvHeapInit+0xac>)
 8010956:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	f003 0307 	and.w	r3, r3, #7
 801095e:	2b00      	cmp	r3, #0
 8010960:	d00c      	beq.n	801097c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	3307      	adds	r3, #7
 8010966:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	f023 0307 	bic.w	r3, r3, #7
 801096e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010970:	68ba      	ldr	r2, [r7, #8]
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	1ad3      	subs	r3, r2, r3
 8010976:	4a1f      	ldr	r2, [pc, #124]	; (80109f4 <prvHeapInit+0xac>)
 8010978:	4413      	add	r3, r2
 801097a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010980:	4a1d      	ldr	r2, [pc, #116]	; (80109f8 <prvHeapInit+0xb0>)
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010986:	4b1c      	ldr	r3, [pc, #112]	; (80109f8 <prvHeapInit+0xb0>)
 8010988:	2200      	movs	r2, #0
 801098a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	68ba      	ldr	r2, [r7, #8]
 8010990:	4413      	add	r3, r2
 8010992:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010994:	2208      	movs	r2, #8
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	1a9b      	subs	r3, r3, r2
 801099a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	f023 0307 	bic.w	r3, r3, #7
 80109a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	4a15      	ldr	r2, [pc, #84]	; (80109fc <prvHeapInit+0xb4>)
 80109a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80109aa:	4b14      	ldr	r3, [pc, #80]	; (80109fc <prvHeapInit+0xb4>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	2200      	movs	r2, #0
 80109b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80109b2:	4b12      	ldr	r3, [pc, #72]	; (80109fc <prvHeapInit+0xb4>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	2200      	movs	r2, #0
 80109b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	68fa      	ldr	r2, [r7, #12]
 80109c2:	1ad2      	subs	r2, r2, r3
 80109c4:	683b      	ldr	r3, [r7, #0]
 80109c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80109c8:	4b0c      	ldr	r3, [pc, #48]	; (80109fc <prvHeapInit+0xb4>)
 80109ca:	681a      	ldr	r2, [r3, #0]
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80109d0:	683b      	ldr	r3, [r7, #0]
 80109d2:	685b      	ldr	r3, [r3, #4]
 80109d4:	4a0a      	ldr	r2, [pc, #40]	; (8010a00 <prvHeapInit+0xb8>)
 80109d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	685b      	ldr	r3, [r3, #4]
 80109dc:	4a09      	ldr	r2, [pc, #36]	; (8010a04 <prvHeapInit+0xbc>)
 80109de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80109e0:	4b09      	ldr	r3, [pc, #36]	; (8010a08 <prvHeapInit+0xc0>)
 80109e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80109e6:	601a      	str	r2, [r3, #0]
}
 80109e8:	bf00      	nop
 80109ea:	3714      	adds	r7, #20
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bc80      	pop	{r7}
 80109f0:	4770      	bx	lr
 80109f2:	bf00      	nop
 80109f4:	2000320c 	.word	0x2000320c
 80109f8:	2000a73c 	.word	0x2000a73c
 80109fc:	2000a744 	.word	0x2000a744
 8010a00:	2000a74c 	.word	0x2000a74c
 8010a04:	2000a748 	.word	0x2000a748
 8010a08:	2000a750 	.word	0x2000a750

08010a0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010a0c:	b480      	push	{r7}
 8010a0e:	b085      	sub	sp, #20
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010a14:	4b27      	ldr	r3, [pc, #156]	; (8010ab4 <prvInsertBlockIntoFreeList+0xa8>)
 8010a16:	60fb      	str	r3, [r7, #12]
 8010a18:	e002      	b.n	8010a20 <prvInsertBlockIntoFreeList+0x14>
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	60fb      	str	r3, [r7, #12]
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	687a      	ldr	r2, [r7, #4]
 8010a26:	429a      	cmp	r2, r3
 8010a28:	d8f7      	bhi.n	8010a1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	68ba      	ldr	r2, [r7, #8]
 8010a34:	4413      	add	r3, r2
 8010a36:	687a      	ldr	r2, [r7, #4]
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d108      	bne.n	8010a4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	685a      	ldr	r2, [r3, #4]
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	441a      	add	r2, r3
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	685b      	ldr	r3, [r3, #4]
 8010a56:	68ba      	ldr	r2, [r7, #8]
 8010a58:	441a      	add	r2, r3
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	d118      	bne.n	8010a94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	681a      	ldr	r2, [r3, #0]
 8010a66:	4b14      	ldr	r3, [pc, #80]	; (8010ab8 <prvInsertBlockIntoFreeList+0xac>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d00d      	beq.n	8010a8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	685a      	ldr	r2, [r3, #4]
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	685b      	ldr	r3, [r3, #4]
 8010a78:	441a      	add	r2, r3
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	681a      	ldr	r2, [r3, #0]
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	601a      	str	r2, [r3, #0]
 8010a88:	e008      	b.n	8010a9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010a8a:	4b0b      	ldr	r3, [pc, #44]	; (8010ab8 <prvInsertBlockIntoFreeList+0xac>)
 8010a8c:	681a      	ldr	r2, [r3, #0]
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	601a      	str	r2, [r3, #0]
 8010a92:	e003      	b.n	8010a9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	681a      	ldr	r2, [r3, #0]
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010a9c:	68fa      	ldr	r2, [r7, #12]
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	d002      	beq.n	8010aaa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	687a      	ldr	r2, [r7, #4]
 8010aa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010aaa:	bf00      	nop
 8010aac:	3714      	adds	r7, #20
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bc80      	pop	{r7}
 8010ab2:	4770      	bx	lr
 8010ab4:	2000a73c 	.word	0x2000a73c
 8010ab8:	2000a744 	.word	0x2000a744

08010abc <__errno>:
 8010abc:	4b01      	ldr	r3, [pc, #4]	; (8010ac4 <__errno+0x8>)
 8010abe:	6818      	ldr	r0, [r3, #0]
 8010ac0:	4770      	bx	lr
 8010ac2:	bf00      	nop
 8010ac4:	200001e8 	.word	0x200001e8

08010ac8 <std>:
 8010ac8:	2300      	movs	r3, #0
 8010aca:	b510      	push	{r4, lr}
 8010acc:	4604      	mov	r4, r0
 8010ace:	e9c0 3300 	strd	r3, r3, [r0]
 8010ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010ad6:	6083      	str	r3, [r0, #8]
 8010ad8:	8181      	strh	r1, [r0, #12]
 8010ada:	6643      	str	r3, [r0, #100]	; 0x64
 8010adc:	81c2      	strh	r2, [r0, #14]
 8010ade:	6183      	str	r3, [r0, #24]
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	2208      	movs	r2, #8
 8010ae4:	305c      	adds	r0, #92	; 0x5c
 8010ae6:	f000 f92b 	bl	8010d40 <memset>
 8010aea:	4b05      	ldr	r3, [pc, #20]	; (8010b00 <std+0x38>)
 8010aec:	6224      	str	r4, [r4, #32]
 8010aee:	6263      	str	r3, [r4, #36]	; 0x24
 8010af0:	4b04      	ldr	r3, [pc, #16]	; (8010b04 <std+0x3c>)
 8010af2:	62a3      	str	r3, [r4, #40]	; 0x28
 8010af4:	4b04      	ldr	r3, [pc, #16]	; (8010b08 <std+0x40>)
 8010af6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010af8:	4b04      	ldr	r3, [pc, #16]	; (8010b0c <std+0x44>)
 8010afa:	6323      	str	r3, [r4, #48]	; 0x30
 8010afc:	bd10      	pop	{r4, pc}
 8010afe:	bf00      	nop
 8010b00:	0801103d 	.word	0x0801103d
 8010b04:	0801105f 	.word	0x0801105f
 8010b08:	08011097 	.word	0x08011097
 8010b0c:	080110bb 	.word	0x080110bb

08010b10 <_cleanup_r>:
 8010b10:	4901      	ldr	r1, [pc, #4]	; (8010b18 <_cleanup_r+0x8>)
 8010b12:	f000 b8af 	b.w	8010c74 <_fwalk_reent>
 8010b16:	bf00      	nop
 8010b18:	0801211d 	.word	0x0801211d

08010b1c <__sfmoreglue>:
 8010b1c:	2268      	movs	r2, #104	; 0x68
 8010b1e:	b570      	push	{r4, r5, r6, lr}
 8010b20:	1e4d      	subs	r5, r1, #1
 8010b22:	4355      	muls	r5, r2
 8010b24:	460e      	mov	r6, r1
 8010b26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010b2a:	f000 f979 	bl	8010e20 <_malloc_r>
 8010b2e:	4604      	mov	r4, r0
 8010b30:	b140      	cbz	r0, 8010b44 <__sfmoreglue+0x28>
 8010b32:	2100      	movs	r1, #0
 8010b34:	e9c0 1600 	strd	r1, r6, [r0]
 8010b38:	300c      	adds	r0, #12
 8010b3a:	60a0      	str	r0, [r4, #8]
 8010b3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010b40:	f000 f8fe 	bl	8010d40 <memset>
 8010b44:	4620      	mov	r0, r4
 8010b46:	bd70      	pop	{r4, r5, r6, pc}

08010b48 <__sfp_lock_acquire>:
 8010b48:	4801      	ldr	r0, [pc, #4]	; (8010b50 <__sfp_lock_acquire+0x8>)
 8010b4a:	f000 b8d8 	b.w	8010cfe <__retarget_lock_acquire_recursive>
 8010b4e:	bf00      	nop
 8010b50:	2000a755 	.word	0x2000a755

08010b54 <__sfp_lock_release>:
 8010b54:	4801      	ldr	r0, [pc, #4]	; (8010b5c <__sfp_lock_release+0x8>)
 8010b56:	f000 b8d3 	b.w	8010d00 <__retarget_lock_release_recursive>
 8010b5a:	bf00      	nop
 8010b5c:	2000a755 	.word	0x2000a755

08010b60 <__sinit_lock_acquire>:
 8010b60:	4801      	ldr	r0, [pc, #4]	; (8010b68 <__sinit_lock_acquire+0x8>)
 8010b62:	f000 b8cc 	b.w	8010cfe <__retarget_lock_acquire_recursive>
 8010b66:	bf00      	nop
 8010b68:	2000a756 	.word	0x2000a756

08010b6c <__sinit_lock_release>:
 8010b6c:	4801      	ldr	r0, [pc, #4]	; (8010b74 <__sinit_lock_release+0x8>)
 8010b6e:	f000 b8c7 	b.w	8010d00 <__retarget_lock_release_recursive>
 8010b72:	bf00      	nop
 8010b74:	2000a756 	.word	0x2000a756

08010b78 <__sinit>:
 8010b78:	b510      	push	{r4, lr}
 8010b7a:	4604      	mov	r4, r0
 8010b7c:	f7ff fff0 	bl	8010b60 <__sinit_lock_acquire>
 8010b80:	69a3      	ldr	r3, [r4, #24]
 8010b82:	b11b      	cbz	r3, 8010b8c <__sinit+0x14>
 8010b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b88:	f7ff bff0 	b.w	8010b6c <__sinit_lock_release>
 8010b8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010b90:	6523      	str	r3, [r4, #80]	; 0x50
 8010b92:	4b13      	ldr	r3, [pc, #76]	; (8010be0 <__sinit+0x68>)
 8010b94:	4a13      	ldr	r2, [pc, #76]	; (8010be4 <__sinit+0x6c>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	62a2      	str	r2, [r4, #40]	; 0x28
 8010b9a:	42a3      	cmp	r3, r4
 8010b9c:	bf08      	it	eq
 8010b9e:	2301      	moveq	r3, #1
 8010ba0:	4620      	mov	r0, r4
 8010ba2:	bf08      	it	eq
 8010ba4:	61a3      	streq	r3, [r4, #24]
 8010ba6:	f000 f81f 	bl	8010be8 <__sfp>
 8010baa:	6060      	str	r0, [r4, #4]
 8010bac:	4620      	mov	r0, r4
 8010bae:	f000 f81b 	bl	8010be8 <__sfp>
 8010bb2:	60a0      	str	r0, [r4, #8]
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	f000 f817 	bl	8010be8 <__sfp>
 8010bba:	2200      	movs	r2, #0
 8010bbc:	2104      	movs	r1, #4
 8010bbe:	60e0      	str	r0, [r4, #12]
 8010bc0:	6860      	ldr	r0, [r4, #4]
 8010bc2:	f7ff ff81 	bl	8010ac8 <std>
 8010bc6:	2201      	movs	r2, #1
 8010bc8:	2109      	movs	r1, #9
 8010bca:	68a0      	ldr	r0, [r4, #8]
 8010bcc:	f7ff ff7c 	bl	8010ac8 <std>
 8010bd0:	2202      	movs	r2, #2
 8010bd2:	2112      	movs	r1, #18
 8010bd4:	68e0      	ldr	r0, [r4, #12]
 8010bd6:	f7ff ff77 	bl	8010ac8 <std>
 8010bda:	2301      	movs	r3, #1
 8010bdc:	61a3      	str	r3, [r4, #24]
 8010bde:	e7d1      	b.n	8010b84 <__sinit+0xc>
 8010be0:	08014bf0 	.word	0x08014bf0
 8010be4:	08010b11 	.word	0x08010b11

08010be8 <__sfp>:
 8010be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bea:	4607      	mov	r7, r0
 8010bec:	f7ff ffac 	bl	8010b48 <__sfp_lock_acquire>
 8010bf0:	4b1e      	ldr	r3, [pc, #120]	; (8010c6c <__sfp+0x84>)
 8010bf2:	681e      	ldr	r6, [r3, #0]
 8010bf4:	69b3      	ldr	r3, [r6, #24]
 8010bf6:	b913      	cbnz	r3, 8010bfe <__sfp+0x16>
 8010bf8:	4630      	mov	r0, r6
 8010bfa:	f7ff ffbd 	bl	8010b78 <__sinit>
 8010bfe:	3648      	adds	r6, #72	; 0x48
 8010c00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010c04:	3b01      	subs	r3, #1
 8010c06:	d503      	bpl.n	8010c10 <__sfp+0x28>
 8010c08:	6833      	ldr	r3, [r6, #0]
 8010c0a:	b30b      	cbz	r3, 8010c50 <__sfp+0x68>
 8010c0c:	6836      	ldr	r6, [r6, #0]
 8010c0e:	e7f7      	b.n	8010c00 <__sfp+0x18>
 8010c10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010c14:	b9d5      	cbnz	r5, 8010c4c <__sfp+0x64>
 8010c16:	4b16      	ldr	r3, [pc, #88]	; (8010c70 <__sfp+0x88>)
 8010c18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010c1c:	60e3      	str	r3, [r4, #12]
 8010c1e:	6665      	str	r5, [r4, #100]	; 0x64
 8010c20:	f000 f86c 	bl	8010cfc <__retarget_lock_init_recursive>
 8010c24:	f7ff ff96 	bl	8010b54 <__sfp_lock_release>
 8010c28:	2208      	movs	r2, #8
 8010c2a:	4629      	mov	r1, r5
 8010c2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010c30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010c34:	6025      	str	r5, [r4, #0]
 8010c36:	61a5      	str	r5, [r4, #24]
 8010c38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010c3c:	f000 f880 	bl	8010d40 <memset>
 8010c40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010c44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010c48:	4620      	mov	r0, r4
 8010c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c4c:	3468      	adds	r4, #104	; 0x68
 8010c4e:	e7d9      	b.n	8010c04 <__sfp+0x1c>
 8010c50:	2104      	movs	r1, #4
 8010c52:	4638      	mov	r0, r7
 8010c54:	f7ff ff62 	bl	8010b1c <__sfmoreglue>
 8010c58:	4604      	mov	r4, r0
 8010c5a:	6030      	str	r0, [r6, #0]
 8010c5c:	2800      	cmp	r0, #0
 8010c5e:	d1d5      	bne.n	8010c0c <__sfp+0x24>
 8010c60:	f7ff ff78 	bl	8010b54 <__sfp_lock_release>
 8010c64:	230c      	movs	r3, #12
 8010c66:	603b      	str	r3, [r7, #0]
 8010c68:	e7ee      	b.n	8010c48 <__sfp+0x60>
 8010c6a:	bf00      	nop
 8010c6c:	08014bf0 	.word	0x08014bf0
 8010c70:	ffff0001 	.word	0xffff0001

08010c74 <_fwalk_reent>:
 8010c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c78:	4606      	mov	r6, r0
 8010c7a:	4688      	mov	r8, r1
 8010c7c:	2700      	movs	r7, #0
 8010c7e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010c82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010c86:	f1b9 0901 	subs.w	r9, r9, #1
 8010c8a:	d505      	bpl.n	8010c98 <_fwalk_reent+0x24>
 8010c8c:	6824      	ldr	r4, [r4, #0]
 8010c8e:	2c00      	cmp	r4, #0
 8010c90:	d1f7      	bne.n	8010c82 <_fwalk_reent+0xe>
 8010c92:	4638      	mov	r0, r7
 8010c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c98:	89ab      	ldrh	r3, [r5, #12]
 8010c9a:	2b01      	cmp	r3, #1
 8010c9c:	d907      	bls.n	8010cae <_fwalk_reent+0x3a>
 8010c9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	d003      	beq.n	8010cae <_fwalk_reent+0x3a>
 8010ca6:	4629      	mov	r1, r5
 8010ca8:	4630      	mov	r0, r6
 8010caa:	47c0      	blx	r8
 8010cac:	4307      	orrs	r7, r0
 8010cae:	3568      	adds	r5, #104	; 0x68
 8010cb0:	e7e9      	b.n	8010c86 <_fwalk_reent+0x12>
	...

08010cb4 <__libc_init_array>:
 8010cb4:	b570      	push	{r4, r5, r6, lr}
 8010cb6:	2600      	movs	r6, #0
 8010cb8:	4d0c      	ldr	r5, [pc, #48]	; (8010cec <__libc_init_array+0x38>)
 8010cba:	4c0d      	ldr	r4, [pc, #52]	; (8010cf0 <__libc_init_array+0x3c>)
 8010cbc:	1b64      	subs	r4, r4, r5
 8010cbe:	10a4      	asrs	r4, r4, #2
 8010cc0:	42a6      	cmp	r6, r4
 8010cc2:	d109      	bne.n	8010cd8 <__libc_init_array+0x24>
 8010cc4:	f003 f954 	bl	8013f70 <_init>
 8010cc8:	2600      	movs	r6, #0
 8010cca:	4d0a      	ldr	r5, [pc, #40]	; (8010cf4 <__libc_init_array+0x40>)
 8010ccc:	4c0a      	ldr	r4, [pc, #40]	; (8010cf8 <__libc_init_array+0x44>)
 8010cce:	1b64      	subs	r4, r4, r5
 8010cd0:	10a4      	asrs	r4, r4, #2
 8010cd2:	42a6      	cmp	r6, r4
 8010cd4:	d105      	bne.n	8010ce2 <__libc_init_array+0x2e>
 8010cd6:	bd70      	pop	{r4, r5, r6, pc}
 8010cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cdc:	4798      	blx	r3
 8010cde:	3601      	adds	r6, #1
 8010ce0:	e7ee      	b.n	8010cc0 <__libc_init_array+0xc>
 8010ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ce6:	4798      	blx	r3
 8010ce8:	3601      	adds	r6, #1
 8010cea:	e7f2      	b.n	8010cd2 <__libc_init_array+0x1e>
 8010cec:	08015020 	.word	0x08015020
 8010cf0:	08015020 	.word	0x08015020
 8010cf4:	08015020 	.word	0x08015020
 8010cf8:	08015024 	.word	0x08015024

08010cfc <__retarget_lock_init_recursive>:
 8010cfc:	4770      	bx	lr

08010cfe <__retarget_lock_acquire_recursive>:
 8010cfe:	4770      	bx	lr

08010d00 <__retarget_lock_release_recursive>:
 8010d00:	4770      	bx	lr
	...

08010d04 <malloc>:
 8010d04:	4b02      	ldr	r3, [pc, #8]	; (8010d10 <malloc+0xc>)
 8010d06:	4601      	mov	r1, r0
 8010d08:	6818      	ldr	r0, [r3, #0]
 8010d0a:	f000 b889 	b.w	8010e20 <_malloc_r>
 8010d0e:	bf00      	nop
 8010d10:	200001e8 	.word	0x200001e8

08010d14 <free>:
 8010d14:	4b02      	ldr	r3, [pc, #8]	; (8010d20 <free+0xc>)
 8010d16:	4601      	mov	r1, r0
 8010d18:	6818      	ldr	r0, [r3, #0]
 8010d1a:	f000 b819 	b.w	8010d50 <_free_r>
 8010d1e:	bf00      	nop
 8010d20:	200001e8 	.word	0x200001e8

08010d24 <memcpy>:
 8010d24:	440a      	add	r2, r1
 8010d26:	4291      	cmp	r1, r2
 8010d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8010d2c:	d100      	bne.n	8010d30 <memcpy+0xc>
 8010d2e:	4770      	bx	lr
 8010d30:	b510      	push	{r4, lr}
 8010d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d36:	4291      	cmp	r1, r2
 8010d38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d3c:	d1f9      	bne.n	8010d32 <memcpy+0xe>
 8010d3e:	bd10      	pop	{r4, pc}

08010d40 <memset>:
 8010d40:	4603      	mov	r3, r0
 8010d42:	4402      	add	r2, r0
 8010d44:	4293      	cmp	r3, r2
 8010d46:	d100      	bne.n	8010d4a <memset+0xa>
 8010d48:	4770      	bx	lr
 8010d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8010d4e:	e7f9      	b.n	8010d44 <memset+0x4>

08010d50 <_free_r>:
 8010d50:	b538      	push	{r3, r4, r5, lr}
 8010d52:	4605      	mov	r5, r0
 8010d54:	2900      	cmp	r1, #0
 8010d56:	d040      	beq.n	8010dda <_free_r+0x8a>
 8010d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d5c:	1f0c      	subs	r4, r1, #4
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	bfb8      	it	lt
 8010d62:	18e4      	addlt	r4, r4, r3
 8010d64:	f001 fdb2 	bl	80128cc <__malloc_lock>
 8010d68:	4a1c      	ldr	r2, [pc, #112]	; (8010ddc <_free_r+0x8c>)
 8010d6a:	6813      	ldr	r3, [r2, #0]
 8010d6c:	b933      	cbnz	r3, 8010d7c <_free_r+0x2c>
 8010d6e:	6063      	str	r3, [r4, #4]
 8010d70:	6014      	str	r4, [r2, #0]
 8010d72:	4628      	mov	r0, r5
 8010d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d78:	f001 bdae 	b.w	80128d8 <__malloc_unlock>
 8010d7c:	42a3      	cmp	r3, r4
 8010d7e:	d908      	bls.n	8010d92 <_free_r+0x42>
 8010d80:	6820      	ldr	r0, [r4, #0]
 8010d82:	1821      	adds	r1, r4, r0
 8010d84:	428b      	cmp	r3, r1
 8010d86:	bf01      	itttt	eq
 8010d88:	6819      	ldreq	r1, [r3, #0]
 8010d8a:	685b      	ldreq	r3, [r3, #4]
 8010d8c:	1809      	addeq	r1, r1, r0
 8010d8e:	6021      	streq	r1, [r4, #0]
 8010d90:	e7ed      	b.n	8010d6e <_free_r+0x1e>
 8010d92:	461a      	mov	r2, r3
 8010d94:	685b      	ldr	r3, [r3, #4]
 8010d96:	b10b      	cbz	r3, 8010d9c <_free_r+0x4c>
 8010d98:	42a3      	cmp	r3, r4
 8010d9a:	d9fa      	bls.n	8010d92 <_free_r+0x42>
 8010d9c:	6811      	ldr	r1, [r2, #0]
 8010d9e:	1850      	adds	r0, r2, r1
 8010da0:	42a0      	cmp	r0, r4
 8010da2:	d10b      	bne.n	8010dbc <_free_r+0x6c>
 8010da4:	6820      	ldr	r0, [r4, #0]
 8010da6:	4401      	add	r1, r0
 8010da8:	1850      	adds	r0, r2, r1
 8010daa:	4283      	cmp	r3, r0
 8010dac:	6011      	str	r1, [r2, #0]
 8010dae:	d1e0      	bne.n	8010d72 <_free_r+0x22>
 8010db0:	6818      	ldr	r0, [r3, #0]
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	4401      	add	r1, r0
 8010db6:	6011      	str	r1, [r2, #0]
 8010db8:	6053      	str	r3, [r2, #4]
 8010dba:	e7da      	b.n	8010d72 <_free_r+0x22>
 8010dbc:	d902      	bls.n	8010dc4 <_free_r+0x74>
 8010dbe:	230c      	movs	r3, #12
 8010dc0:	602b      	str	r3, [r5, #0]
 8010dc2:	e7d6      	b.n	8010d72 <_free_r+0x22>
 8010dc4:	6820      	ldr	r0, [r4, #0]
 8010dc6:	1821      	adds	r1, r4, r0
 8010dc8:	428b      	cmp	r3, r1
 8010dca:	bf01      	itttt	eq
 8010dcc:	6819      	ldreq	r1, [r3, #0]
 8010dce:	685b      	ldreq	r3, [r3, #4]
 8010dd0:	1809      	addeq	r1, r1, r0
 8010dd2:	6021      	streq	r1, [r4, #0]
 8010dd4:	6063      	str	r3, [r4, #4]
 8010dd6:	6054      	str	r4, [r2, #4]
 8010dd8:	e7cb      	b.n	8010d72 <_free_r+0x22>
 8010dda:	bd38      	pop	{r3, r4, r5, pc}
 8010ddc:	2000a758 	.word	0x2000a758

08010de0 <sbrk_aligned>:
 8010de0:	b570      	push	{r4, r5, r6, lr}
 8010de2:	4e0e      	ldr	r6, [pc, #56]	; (8010e1c <sbrk_aligned+0x3c>)
 8010de4:	460c      	mov	r4, r1
 8010de6:	6831      	ldr	r1, [r6, #0]
 8010de8:	4605      	mov	r5, r0
 8010dea:	b911      	cbnz	r1, 8010df2 <sbrk_aligned+0x12>
 8010dec:	f000 f8f6 	bl	8010fdc <_sbrk_r>
 8010df0:	6030      	str	r0, [r6, #0]
 8010df2:	4621      	mov	r1, r4
 8010df4:	4628      	mov	r0, r5
 8010df6:	f000 f8f1 	bl	8010fdc <_sbrk_r>
 8010dfa:	1c43      	adds	r3, r0, #1
 8010dfc:	d00a      	beq.n	8010e14 <sbrk_aligned+0x34>
 8010dfe:	1cc4      	adds	r4, r0, #3
 8010e00:	f024 0403 	bic.w	r4, r4, #3
 8010e04:	42a0      	cmp	r0, r4
 8010e06:	d007      	beq.n	8010e18 <sbrk_aligned+0x38>
 8010e08:	1a21      	subs	r1, r4, r0
 8010e0a:	4628      	mov	r0, r5
 8010e0c:	f000 f8e6 	bl	8010fdc <_sbrk_r>
 8010e10:	3001      	adds	r0, #1
 8010e12:	d101      	bne.n	8010e18 <sbrk_aligned+0x38>
 8010e14:	f04f 34ff 	mov.w	r4, #4294967295
 8010e18:	4620      	mov	r0, r4
 8010e1a:	bd70      	pop	{r4, r5, r6, pc}
 8010e1c:	2000a75c 	.word	0x2000a75c

08010e20 <_malloc_r>:
 8010e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e24:	1ccd      	adds	r5, r1, #3
 8010e26:	f025 0503 	bic.w	r5, r5, #3
 8010e2a:	3508      	adds	r5, #8
 8010e2c:	2d0c      	cmp	r5, #12
 8010e2e:	bf38      	it	cc
 8010e30:	250c      	movcc	r5, #12
 8010e32:	2d00      	cmp	r5, #0
 8010e34:	4607      	mov	r7, r0
 8010e36:	db01      	blt.n	8010e3c <_malloc_r+0x1c>
 8010e38:	42a9      	cmp	r1, r5
 8010e3a:	d905      	bls.n	8010e48 <_malloc_r+0x28>
 8010e3c:	230c      	movs	r3, #12
 8010e3e:	2600      	movs	r6, #0
 8010e40:	603b      	str	r3, [r7, #0]
 8010e42:	4630      	mov	r0, r6
 8010e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e48:	4e2e      	ldr	r6, [pc, #184]	; (8010f04 <_malloc_r+0xe4>)
 8010e4a:	f001 fd3f 	bl	80128cc <__malloc_lock>
 8010e4e:	6833      	ldr	r3, [r6, #0]
 8010e50:	461c      	mov	r4, r3
 8010e52:	bb34      	cbnz	r4, 8010ea2 <_malloc_r+0x82>
 8010e54:	4629      	mov	r1, r5
 8010e56:	4638      	mov	r0, r7
 8010e58:	f7ff ffc2 	bl	8010de0 <sbrk_aligned>
 8010e5c:	1c43      	adds	r3, r0, #1
 8010e5e:	4604      	mov	r4, r0
 8010e60:	d14d      	bne.n	8010efe <_malloc_r+0xde>
 8010e62:	6834      	ldr	r4, [r6, #0]
 8010e64:	4626      	mov	r6, r4
 8010e66:	2e00      	cmp	r6, #0
 8010e68:	d140      	bne.n	8010eec <_malloc_r+0xcc>
 8010e6a:	6823      	ldr	r3, [r4, #0]
 8010e6c:	4631      	mov	r1, r6
 8010e6e:	4638      	mov	r0, r7
 8010e70:	eb04 0803 	add.w	r8, r4, r3
 8010e74:	f000 f8b2 	bl	8010fdc <_sbrk_r>
 8010e78:	4580      	cmp	r8, r0
 8010e7a:	d13a      	bne.n	8010ef2 <_malloc_r+0xd2>
 8010e7c:	6821      	ldr	r1, [r4, #0]
 8010e7e:	3503      	adds	r5, #3
 8010e80:	1a6d      	subs	r5, r5, r1
 8010e82:	f025 0503 	bic.w	r5, r5, #3
 8010e86:	3508      	adds	r5, #8
 8010e88:	2d0c      	cmp	r5, #12
 8010e8a:	bf38      	it	cc
 8010e8c:	250c      	movcc	r5, #12
 8010e8e:	4638      	mov	r0, r7
 8010e90:	4629      	mov	r1, r5
 8010e92:	f7ff ffa5 	bl	8010de0 <sbrk_aligned>
 8010e96:	3001      	adds	r0, #1
 8010e98:	d02b      	beq.n	8010ef2 <_malloc_r+0xd2>
 8010e9a:	6823      	ldr	r3, [r4, #0]
 8010e9c:	442b      	add	r3, r5
 8010e9e:	6023      	str	r3, [r4, #0]
 8010ea0:	e00e      	b.n	8010ec0 <_malloc_r+0xa0>
 8010ea2:	6822      	ldr	r2, [r4, #0]
 8010ea4:	1b52      	subs	r2, r2, r5
 8010ea6:	d41e      	bmi.n	8010ee6 <_malloc_r+0xc6>
 8010ea8:	2a0b      	cmp	r2, #11
 8010eaa:	d916      	bls.n	8010eda <_malloc_r+0xba>
 8010eac:	1961      	adds	r1, r4, r5
 8010eae:	42a3      	cmp	r3, r4
 8010eb0:	6025      	str	r5, [r4, #0]
 8010eb2:	bf18      	it	ne
 8010eb4:	6059      	strne	r1, [r3, #4]
 8010eb6:	6863      	ldr	r3, [r4, #4]
 8010eb8:	bf08      	it	eq
 8010eba:	6031      	streq	r1, [r6, #0]
 8010ebc:	5162      	str	r2, [r4, r5]
 8010ebe:	604b      	str	r3, [r1, #4]
 8010ec0:	4638      	mov	r0, r7
 8010ec2:	f104 060b 	add.w	r6, r4, #11
 8010ec6:	f001 fd07 	bl	80128d8 <__malloc_unlock>
 8010eca:	f026 0607 	bic.w	r6, r6, #7
 8010ece:	1d23      	adds	r3, r4, #4
 8010ed0:	1af2      	subs	r2, r6, r3
 8010ed2:	d0b6      	beq.n	8010e42 <_malloc_r+0x22>
 8010ed4:	1b9b      	subs	r3, r3, r6
 8010ed6:	50a3      	str	r3, [r4, r2]
 8010ed8:	e7b3      	b.n	8010e42 <_malloc_r+0x22>
 8010eda:	6862      	ldr	r2, [r4, #4]
 8010edc:	42a3      	cmp	r3, r4
 8010ede:	bf0c      	ite	eq
 8010ee0:	6032      	streq	r2, [r6, #0]
 8010ee2:	605a      	strne	r2, [r3, #4]
 8010ee4:	e7ec      	b.n	8010ec0 <_malloc_r+0xa0>
 8010ee6:	4623      	mov	r3, r4
 8010ee8:	6864      	ldr	r4, [r4, #4]
 8010eea:	e7b2      	b.n	8010e52 <_malloc_r+0x32>
 8010eec:	4634      	mov	r4, r6
 8010eee:	6876      	ldr	r6, [r6, #4]
 8010ef0:	e7b9      	b.n	8010e66 <_malloc_r+0x46>
 8010ef2:	230c      	movs	r3, #12
 8010ef4:	4638      	mov	r0, r7
 8010ef6:	603b      	str	r3, [r7, #0]
 8010ef8:	f001 fcee 	bl	80128d8 <__malloc_unlock>
 8010efc:	e7a1      	b.n	8010e42 <_malloc_r+0x22>
 8010efe:	6025      	str	r5, [r4, #0]
 8010f00:	e7de      	b.n	8010ec0 <_malloc_r+0xa0>
 8010f02:	bf00      	nop
 8010f04:	2000a758 	.word	0x2000a758

08010f08 <cleanup_glue>:
 8010f08:	b538      	push	{r3, r4, r5, lr}
 8010f0a:	460c      	mov	r4, r1
 8010f0c:	6809      	ldr	r1, [r1, #0]
 8010f0e:	4605      	mov	r5, r0
 8010f10:	b109      	cbz	r1, 8010f16 <cleanup_glue+0xe>
 8010f12:	f7ff fff9 	bl	8010f08 <cleanup_glue>
 8010f16:	4621      	mov	r1, r4
 8010f18:	4628      	mov	r0, r5
 8010f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f1e:	f7ff bf17 	b.w	8010d50 <_free_r>
	...

08010f24 <_reclaim_reent>:
 8010f24:	4b2c      	ldr	r3, [pc, #176]	; (8010fd8 <_reclaim_reent+0xb4>)
 8010f26:	b570      	push	{r4, r5, r6, lr}
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	4604      	mov	r4, r0
 8010f2c:	4283      	cmp	r3, r0
 8010f2e:	d051      	beq.n	8010fd4 <_reclaim_reent+0xb0>
 8010f30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010f32:	b143      	cbz	r3, 8010f46 <_reclaim_reent+0x22>
 8010f34:	68db      	ldr	r3, [r3, #12]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d14a      	bne.n	8010fd0 <_reclaim_reent+0xac>
 8010f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f3c:	6819      	ldr	r1, [r3, #0]
 8010f3e:	b111      	cbz	r1, 8010f46 <_reclaim_reent+0x22>
 8010f40:	4620      	mov	r0, r4
 8010f42:	f7ff ff05 	bl	8010d50 <_free_r>
 8010f46:	6961      	ldr	r1, [r4, #20]
 8010f48:	b111      	cbz	r1, 8010f50 <_reclaim_reent+0x2c>
 8010f4a:	4620      	mov	r0, r4
 8010f4c:	f7ff ff00 	bl	8010d50 <_free_r>
 8010f50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010f52:	b111      	cbz	r1, 8010f5a <_reclaim_reent+0x36>
 8010f54:	4620      	mov	r0, r4
 8010f56:	f7ff fefb 	bl	8010d50 <_free_r>
 8010f5a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010f5c:	b111      	cbz	r1, 8010f64 <_reclaim_reent+0x40>
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f7ff fef6 	bl	8010d50 <_free_r>
 8010f64:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010f66:	b111      	cbz	r1, 8010f6e <_reclaim_reent+0x4a>
 8010f68:	4620      	mov	r0, r4
 8010f6a:	f7ff fef1 	bl	8010d50 <_free_r>
 8010f6e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010f70:	b111      	cbz	r1, 8010f78 <_reclaim_reent+0x54>
 8010f72:	4620      	mov	r0, r4
 8010f74:	f7ff feec 	bl	8010d50 <_free_r>
 8010f78:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010f7a:	b111      	cbz	r1, 8010f82 <_reclaim_reent+0x5e>
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	f7ff fee7 	bl	8010d50 <_free_r>
 8010f82:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010f84:	b111      	cbz	r1, 8010f8c <_reclaim_reent+0x68>
 8010f86:	4620      	mov	r0, r4
 8010f88:	f7ff fee2 	bl	8010d50 <_free_r>
 8010f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f8e:	b111      	cbz	r1, 8010f96 <_reclaim_reent+0x72>
 8010f90:	4620      	mov	r0, r4
 8010f92:	f7ff fedd 	bl	8010d50 <_free_r>
 8010f96:	69a3      	ldr	r3, [r4, #24]
 8010f98:	b1e3      	cbz	r3, 8010fd4 <_reclaim_reent+0xb0>
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010f9e:	4798      	blx	r3
 8010fa0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010fa2:	b1b9      	cbz	r1, 8010fd4 <_reclaim_reent+0xb0>
 8010fa4:	4620      	mov	r0, r4
 8010fa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010faa:	f7ff bfad 	b.w	8010f08 <cleanup_glue>
 8010fae:	5949      	ldr	r1, [r1, r5]
 8010fb0:	b941      	cbnz	r1, 8010fc4 <_reclaim_reent+0xa0>
 8010fb2:	3504      	adds	r5, #4
 8010fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010fb6:	2d80      	cmp	r5, #128	; 0x80
 8010fb8:	68d9      	ldr	r1, [r3, #12]
 8010fba:	d1f8      	bne.n	8010fae <_reclaim_reent+0x8a>
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	f7ff fec7 	bl	8010d50 <_free_r>
 8010fc2:	e7ba      	b.n	8010f3a <_reclaim_reent+0x16>
 8010fc4:	680e      	ldr	r6, [r1, #0]
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f7ff fec2 	bl	8010d50 <_free_r>
 8010fcc:	4631      	mov	r1, r6
 8010fce:	e7ef      	b.n	8010fb0 <_reclaim_reent+0x8c>
 8010fd0:	2500      	movs	r5, #0
 8010fd2:	e7ef      	b.n	8010fb4 <_reclaim_reent+0x90>
 8010fd4:	bd70      	pop	{r4, r5, r6, pc}
 8010fd6:	bf00      	nop
 8010fd8:	200001e8 	.word	0x200001e8

08010fdc <_sbrk_r>:
 8010fdc:	b538      	push	{r3, r4, r5, lr}
 8010fde:	2300      	movs	r3, #0
 8010fe0:	4d05      	ldr	r5, [pc, #20]	; (8010ff8 <_sbrk_r+0x1c>)
 8010fe2:	4604      	mov	r4, r0
 8010fe4:	4608      	mov	r0, r1
 8010fe6:	602b      	str	r3, [r5, #0]
 8010fe8:	f7f4 faca 	bl	8005580 <_sbrk>
 8010fec:	1c43      	adds	r3, r0, #1
 8010fee:	d102      	bne.n	8010ff6 <_sbrk_r+0x1a>
 8010ff0:	682b      	ldr	r3, [r5, #0]
 8010ff2:	b103      	cbz	r3, 8010ff6 <_sbrk_r+0x1a>
 8010ff4:	6023      	str	r3, [r4, #0]
 8010ff6:	bd38      	pop	{r3, r4, r5, pc}
 8010ff8:	2000a760 	.word	0x2000a760

08010ffc <siprintf>:
 8010ffc:	b40e      	push	{r1, r2, r3}
 8010ffe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011002:	b500      	push	{lr}
 8011004:	b09c      	sub	sp, #112	; 0x70
 8011006:	ab1d      	add	r3, sp, #116	; 0x74
 8011008:	9002      	str	r0, [sp, #8]
 801100a:	9006      	str	r0, [sp, #24]
 801100c:	9107      	str	r1, [sp, #28]
 801100e:	9104      	str	r1, [sp, #16]
 8011010:	4808      	ldr	r0, [pc, #32]	; (8011034 <siprintf+0x38>)
 8011012:	4909      	ldr	r1, [pc, #36]	; (8011038 <siprintf+0x3c>)
 8011014:	f853 2b04 	ldr.w	r2, [r3], #4
 8011018:	9105      	str	r1, [sp, #20]
 801101a:	6800      	ldr	r0, [r0, #0]
 801101c:	a902      	add	r1, sp, #8
 801101e:	9301      	str	r3, [sp, #4]
 8011020:	f002 f988 	bl	8013334 <_svfiprintf_r>
 8011024:	2200      	movs	r2, #0
 8011026:	9b02      	ldr	r3, [sp, #8]
 8011028:	701a      	strb	r2, [r3, #0]
 801102a:	b01c      	add	sp, #112	; 0x70
 801102c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011030:	b003      	add	sp, #12
 8011032:	4770      	bx	lr
 8011034:	200001e8 	.word	0x200001e8
 8011038:	ffff0208 	.word	0xffff0208

0801103c <__sread>:
 801103c:	b510      	push	{r4, lr}
 801103e:	460c      	mov	r4, r1
 8011040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011044:	f002 fd64 	bl	8013b10 <_read_r>
 8011048:	2800      	cmp	r0, #0
 801104a:	bfab      	itete	ge
 801104c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801104e:	89a3      	ldrhlt	r3, [r4, #12]
 8011050:	181b      	addge	r3, r3, r0
 8011052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011056:	bfac      	ite	ge
 8011058:	6563      	strge	r3, [r4, #84]	; 0x54
 801105a:	81a3      	strhlt	r3, [r4, #12]
 801105c:	bd10      	pop	{r4, pc}

0801105e <__swrite>:
 801105e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011062:	461f      	mov	r7, r3
 8011064:	898b      	ldrh	r3, [r1, #12]
 8011066:	4605      	mov	r5, r0
 8011068:	05db      	lsls	r3, r3, #23
 801106a:	460c      	mov	r4, r1
 801106c:	4616      	mov	r6, r2
 801106e:	d505      	bpl.n	801107c <__swrite+0x1e>
 8011070:	2302      	movs	r3, #2
 8011072:	2200      	movs	r2, #0
 8011074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011078:	f001 fc04 	bl	8012884 <_lseek_r>
 801107c:	89a3      	ldrh	r3, [r4, #12]
 801107e:	4632      	mov	r2, r6
 8011080:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011084:	81a3      	strh	r3, [r4, #12]
 8011086:	4628      	mov	r0, r5
 8011088:	463b      	mov	r3, r7
 801108a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801108e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011092:	f000 bf81 	b.w	8011f98 <_write_r>

08011096 <__sseek>:
 8011096:	b510      	push	{r4, lr}
 8011098:	460c      	mov	r4, r1
 801109a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801109e:	f001 fbf1 	bl	8012884 <_lseek_r>
 80110a2:	1c43      	adds	r3, r0, #1
 80110a4:	89a3      	ldrh	r3, [r4, #12]
 80110a6:	bf15      	itete	ne
 80110a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80110aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80110ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80110b2:	81a3      	strheq	r3, [r4, #12]
 80110b4:	bf18      	it	ne
 80110b6:	81a3      	strhne	r3, [r4, #12]
 80110b8:	bd10      	pop	{r4, pc}

080110ba <__sclose>:
 80110ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110be:	f000 bf9b 	b.w	8011ff8 <_close_r>

080110c2 <strcat>:
 80110c2:	4602      	mov	r2, r0
 80110c4:	b510      	push	{r4, lr}
 80110c6:	7814      	ldrb	r4, [r2, #0]
 80110c8:	4613      	mov	r3, r2
 80110ca:	3201      	adds	r2, #1
 80110cc:	2c00      	cmp	r4, #0
 80110ce:	d1fa      	bne.n	80110c6 <strcat+0x4>
 80110d0:	3b01      	subs	r3, #1
 80110d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80110da:	2a00      	cmp	r2, #0
 80110dc:	d1f9      	bne.n	80110d2 <strcat+0x10>
 80110de:	bd10      	pop	{r4, pc}

080110e0 <strcpy>:
 80110e0:	4603      	mov	r3, r0
 80110e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110e6:	f803 2b01 	strb.w	r2, [r3], #1
 80110ea:	2a00      	cmp	r2, #0
 80110ec:	d1f9      	bne.n	80110e2 <strcpy+0x2>
 80110ee:	4770      	bx	lr

080110f0 <strstr>:
 80110f0:	780a      	ldrb	r2, [r1, #0]
 80110f2:	b570      	push	{r4, r5, r6, lr}
 80110f4:	b96a      	cbnz	r2, 8011112 <strstr+0x22>
 80110f6:	bd70      	pop	{r4, r5, r6, pc}
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d109      	bne.n	8011110 <strstr+0x20>
 80110fc:	460c      	mov	r4, r1
 80110fe:	4605      	mov	r5, r0
 8011100:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011104:	2b00      	cmp	r3, #0
 8011106:	d0f6      	beq.n	80110f6 <strstr+0x6>
 8011108:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801110c:	429e      	cmp	r6, r3
 801110e:	d0f7      	beq.n	8011100 <strstr+0x10>
 8011110:	3001      	adds	r0, #1
 8011112:	7803      	ldrb	r3, [r0, #0]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d1ef      	bne.n	80110f8 <strstr+0x8>
 8011118:	4618      	mov	r0, r3
 801111a:	e7ec      	b.n	80110f6 <strstr+0x6>

0801111c <sulp>:
 801111c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011120:	460f      	mov	r7, r1
 8011122:	4690      	mov	r8, r2
 8011124:	f001 ff4e 	bl	8012fc4 <__ulp>
 8011128:	4604      	mov	r4, r0
 801112a:	460d      	mov	r5, r1
 801112c:	f1b8 0f00 	cmp.w	r8, #0
 8011130:	d011      	beq.n	8011156 <sulp+0x3a>
 8011132:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8011136:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801113a:	2b00      	cmp	r3, #0
 801113c:	dd0b      	ble.n	8011156 <sulp+0x3a>
 801113e:	2400      	movs	r4, #0
 8011140:	051b      	lsls	r3, r3, #20
 8011142:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011146:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801114a:	4622      	mov	r2, r4
 801114c:	462b      	mov	r3, r5
 801114e:	f7ef fa33 	bl	80005b8 <__aeabi_dmul>
 8011152:	4604      	mov	r4, r0
 8011154:	460d      	mov	r5, r1
 8011156:	4620      	mov	r0, r4
 8011158:	4629      	mov	r1, r5
 801115a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08011160 <_strtod_l>:
 8011160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011164:	469b      	mov	fp, r3
 8011166:	2300      	movs	r3, #0
 8011168:	b09f      	sub	sp, #124	; 0x7c
 801116a:	931a      	str	r3, [sp, #104]	; 0x68
 801116c:	4b9e      	ldr	r3, [pc, #632]	; (80113e8 <_strtod_l+0x288>)
 801116e:	4682      	mov	sl, r0
 8011170:	681f      	ldr	r7, [r3, #0]
 8011172:	460e      	mov	r6, r1
 8011174:	4638      	mov	r0, r7
 8011176:	9215      	str	r2, [sp, #84]	; 0x54
 8011178:	f7ef f85a 	bl	8000230 <strlen>
 801117c:	f04f 0800 	mov.w	r8, #0
 8011180:	4604      	mov	r4, r0
 8011182:	f04f 0900 	mov.w	r9, #0
 8011186:	9619      	str	r6, [sp, #100]	; 0x64
 8011188:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801118a:	781a      	ldrb	r2, [r3, #0]
 801118c:	2a2b      	cmp	r2, #43	; 0x2b
 801118e:	d04c      	beq.n	801122a <_strtod_l+0xca>
 8011190:	d83a      	bhi.n	8011208 <_strtod_l+0xa8>
 8011192:	2a0d      	cmp	r2, #13
 8011194:	d833      	bhi.n	80111fe <_strtod_l+0x9e>
 8011196:	2a08      	cmp	r2, #8
 8011198:	d833      	bhi.n	8011202 <_strtod_l+0xa2>
 801119a:	2a00      	cmp	r2, #0
 801119c:	d03d      	beq.n	801121a <_strtod_l+0xba>
 801119e:	2300      	movs	r3, #0
 80111a0:	930a      	str	r3, [sp, #40]	; 0x28
 80111a2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80111a4:	782b      	ldrb	r3, [r5, #0]
 80111a6:	2b30      	cmp	r3, #48	; 0x30
 80111a8:	f040 80aa 	bne.w	8011300 <_strtod_l+0x1a0>
 80111ac:	786b      	ldrb	r3, [r5, #1]
 80111ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80111b2:	2b58      	cmp	r3, #88	; 0x58
 80111b4:	d166      	bne.n	8011284 <_strtod_l+0x124>
 80111b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111b8:	4650      	mov	r0, sl
 80111ba:	9301      	str	r3, [sp, #4]
 80111bc:	ab1a      	add	r3, sp, #104	; 0x68
 80111be:	9300      	str	r3, [sp, #0]
 80111c0:	4a8a      	ldr	r2, [pc, #552]	; (80113ec <_strtod_l+0x28c>)
 80111c2:	f8cd b008 	str.w	fp, [sp, #8]
 80111c6:	ab1b      	add	r3, sp, #108	; 0x6c
 80111c8:	a919      	add	r1, sp, #100	; 0x64
 80111ca:	f001 f85d 	bl	8012288 <__gethex>
 80111ce:	f010 0607 	ands.w	r6, r0, #7
 80111d2:	4604      	mov	r4, r0
 80111d4:	d005      	beq.n	80111e2 <_strtod_l+0x82>
 80111d6:	2e06      	cmp	r6, #6
 80111d8:	d129      	bne.n	801122e <_strtod_l+0xce>
 80111da:	2300      	movs	r3, #0
 80111dc:	3501      	adds	r5, #1
 80111de:	9519      	str	r5, [sp, #100]	; 0x64
 80111e0:	930a      	str	r3, [sp, #40]	; 0x28
 80111e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	f040 858a 	bne.w	8011cfe <_strtod_l+0xb9e>
 80111ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111ec:	b1d3      	cbz	r3, 8011224 <_strtod_l+0xc4>
 80111ee:	4642      	mov	r2, r8
 80111f0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80111f4:	4610      	mov	r0, r2
 80111f6:	4619      	mov	r1, r3
 80111f8:	b01f      	add	sp, #124	; 0x7c
 80111fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111fe:	2a20      	cmp	r2, #32
 8011200:	d1cd      	bne.n	801119e <_strtod_l+0x3e>
 8011202:	3301      	adds	r3, #1
 8011204:	9319      	str	r3, [sp, #100]	; 0x64
 8011206:	e7bf      	b.n	8011188 <_strtod_l+0x28>
 8011208:	2a2d      	cmp	r2, #45	; 0x2d
 801120a:	d1c8      	bne.n	801119e <_strtod_l+0x3e>
 801120c:	2201      	movs	r2, #1
 801120e:	920a      	str	r2, [sp, #40]	; 0x28
 8011210:	1c5a      	adds	r2, r3, #1
 8011212:	9219      	str	r2, [sp, #100]	; 0x64
 8011214:	785b      	ldrb	r3, [r3, #1]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d1c3      	bne.n	80111a2 <_strtod_l+0x42>
 801121a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801121c:	9619      	str	r6, [sp, #100]	; 0x64
 801121e:	2b00      	cmp	r3, #0
 8011220:	f040 856b 	bne.w	8011cfa <_strtod_l+0xb9a>
 8011224:	4642      	mov	r2, r8
 8011226:	464b      	mov	r3, r9
 8011228:	e7e4      	b.n	80111f4 <_strtod_l+0x94>
 801122a:	2200      	movs	r2, #0
 801122c:	e7ef      	b.n	801120e <_strtod_l+0xae>
 801122e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011230:	b13a      	cbz	r2, 8011242 <_strtod_l+0xe2>
 8011232:	2135      	movs	r1, #53	; 0x35
 8011234:	a81c      	add	r0, sp, #112	; 0x70
 8011236:	f001 ffc9 	bl	80131cc <__copybits>
 801123a:	4650      	mov	r0, sl
 801123c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801123e:	f001 fb91 	bl	8012964 <_Bfree>
 8011242:	3e01      	subs	r6, #1
 8011244:	2e04      	cmp	r6, #4
 8011246:	d806      	bhi.n	8011256 <_strtod_l+0xf6>
 8011248:	e8df f006 	tbb	[pc, r6]
 801124c:	1714030a 	.word	0x1714030a
 8011250:	0a          	.byte	0x0a
 8011251:	00          	.byte	0x00
 8011252:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8011256:	0721      	lsls	r1, r4, #28
 8011258:	d5c3      	bpl.n	80111e2 <_strtod_l+0x82>
 801125a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801125e:	e7c0      	b.n	80111e2 <_strtod_l+0x82>
 8011260:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011262:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8011266:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801126a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801126e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8011272:	e7f0      	b.n	8011256 <_strtod_l+0xf6>
 8011274:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80113f0 <_strtod_l+0x290>
 8011278:	e7ed      	b.n	8011256 <_strtod_l+0xf6>
 801127a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801127e:	f04f 38ff 	mov.w	r8, #4294967295
 8011282:	e7e8      	b.n	8011256 <_strtod_l+0xf6>
 8011284:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011286:	1c5a      	adds	r2, r3, #1
 8011288:	9219      	str	r2, [sp, #100]	; 0x64
 801128a:	785b      	ldrb	r3, [r3, #1]
 801128c:	2b30      	cmp	r3, #48	; 0x30
 801128e:	d0f9      	beq.n	8011284 <_strtod_l+0x124>
 8011290:	2b00      	cmp	r3, #0
 8011292:	d0a6      	beq.n	80111e2 <_strtod_l+0x82>
 8011294:	2301      	movs	r3, #1
 8011296:	9307      	str	r3, [sp, #28]
 8011298:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801129a:	220a      	movs	r2, #10
 801129c:	9308      	str	r3, [sp, #32]
 801129e:	2300      	movs	r3, #0
 80112a0:	469b      	mov	fp, r3
 80112a2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80112a6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80112a8:	7805      	ldrb	r5, [r0, #0]
 80112aa:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80112ae:	b2d9      	uxtb	r1, r3
 80112b0:	2909      	cmp	r1, #9
 80112b2:	d927      	bls.n	8011304 <_strtod_l+0x1a4>
 80112b4:	4622      	mov	r2, r4
 80112b6:	4639      	mov	r1, r7
 80112b8:	f002 fc46 	bl	8013b48 <strncmp>
 80112bc:	2800      	cmp	r0, #0
 80112be:	d033      	beq.n	8011328 <_strtod_l+0x1c8>
 80112c0:	2000      	movs	r0, #0
 80112c2:	462a      	mov	r2, r5
 80112c4:	465c      	mov	r4, fp
 80112c6:	4603      	mov	r3, r0
 80112c8:	9004      	str	r0, [sp, #16]
 80112ca:	2a65      	cmp	r2, #101	; 0x65
 80112cc:	d001      	beq.n	80112d2 <_strtod_l+0x172>
 80112ce:	2a45      	cmp	r2, #69	; 0x45
 80112d0:	d114      	bne.n	80112fc <_strtod_l+0x19c>
 80112d2:	b91c      	cbnz	r4, 80112dc <_strtod_l+0x17c>
 80112d4:	9a07      	ldr	r2, [sp, #28]
 80112d6:	4302      	orrs	r2, r0
 80112d8:	d09f      	beq.n	801121a <_strtod_l+0xba>
 80112da:	2400      	movs	r4, #0
 80112dc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80112de:	1c72      	adds	r2, r6, #1
 80112e0:	9219      	str	r2, [sp, #100]	; 0x64
 80112e2:	7872      	ldrb	r2, [r6, #1]
 80112e4:	2a2b      	cmp	r2, #43	; 0x2b
 80112e6:	d079      	beq.n	80113dc <_strtod_l+0x27c>
 80112e8:	2a2d      	cmp	r2, #45	; 0x2d
 80112ea:	f000 8083 	beq.w	80113f4 <_strtod_l+0x294>
 80112ee:	2700      	movs	r7, #0
 80112f0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80112f4:	2909      	cmp	r1, #9
 80112f6:	f240 8083 	bls.w	8011400 <_strtod_l+0x2a0>
 80112fa:	9619      	str	r6, [sp, #100]	; 0x64
 80112fc:	2500      	movs	r5, #0
 80112fe:	e09f      	b.n	8011440 <_strtod_l+0x2e0>
 8011300:	2300      	movs	r3, #0
 8011302:	e7c8      	b.n	8011296 <_strtod_l+0x136>
 8011304:	f1bb 0f08 	cmp.w	fp, #8
 8011308:	bfd5      	itete	le
 801130a:	9906      	ldrle	r1, [sp, #24]
 801130c:	9905      	ldrgt	r1, [sp, #20]
 801130e:	fb02 3301 	mlale	r3, r2, r1, r3
 8011312:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011316:	f100 0001 	add.w	r0, r0, #1
 801131a:	bfd4      	ite	le
 801131c:	9306      	strle	r3, [sp, #24]
 801131e:	9305      	strgt	r3, [sp, #20]
 8011320:	f10b 0b01 	add.w	fp, fp, #1
 8011324:	9019      	str	r0, [sp, #100]	; 0x64
 8011326:	e7be      	b.n	80112a6 <_strtod_l+0x146>
 8011328:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801132a:	191a      	adds	r2, r3, r4
 801132c:	9219      	str	r2, [sp, #100]	; 0x64
 801132e:	5d1a      	ldrb	r2, [r3, r4]
 8011330:	f1bb 0f00 	cmp.w	fp, #0
 8011334:	d036      	beq.n	80113a4 <_strtod_l+0x244>
 8011336:	465c      	mov	r4, fp
 8011338:	9004      	str	r0, [sp, #16]
 801133a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801133e:	2b09      	cmp	r3, #9
 8011340:	d912      	bls.n	8011368 <_strtod_l+0x208>
 8011342:	2301      	movs	r3, #1
 8011344:	e7c1      	b.n	80112ca <_strtod_l+0x16a>
 8011346:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011348:	3001      	adds	r0, #1
 801134a:	1c5a      	adds	r2, r3, #1
 801134c:	9219      	str	r2, [sp, #100]	; 0x64
 801134e:	785a      	ldrb	r2, [r3, #1]
 8011350:	2a30      	cmp	r2, #48	; 0x30
 8011352:	d0f8      	beq.n	8011346 <_strtod_l+0x1e6>
 8011354:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011358:	2b08      	cmp	r3, #8
 801135a:	f200 84d5 	bhi.w	8011d08 <_strtod_l+0xba8>
 801135e:	9004      	str	r0, [sp, #16]
 8011360:	2000      	movs	r0, #0
 8011362:	4604      	mov	r4, r0
 8011364:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011366:	9308      	str	r3, [sp, #32]
 8011368:	3a30      	subs	r2, #48	; 0x30
 801136a:	f100 0301 	add.w	r3, r0, #1
 801136e:	d013      	beq.n	8011398 <_strtod_l+0x238>
 8011370:	9904      	ldr	r1, [sp, #16]
 8011372:	1905      	adds	r5, r0, r4
 8011374:	4419      	add	r1, r3
 8011376:	9104      	str	r1, [sp, #16]
 8011378:	4623      	mov	r3, r4
 801137a:	210a      	movs	r1, #10
 801137c:	42ab      	cmp	r3, r5
 801137e:	d113      	bne.n	80113a8 <_strtod_l+0x248>
 8011380:	1823      	adds	r3, r4, r0
 8011382:	2b08      	cmp	r3, #8
 8011384:	f104 0401 	add.w	r4, r4, #1
 8011388:	4404      	add	r4, r0
 801138a:	dc1b      	bgt.n	80113c4 <_strtod_l+0x264>
 801138c:	230a      	movs	r3, #10
 801138e:	9906      	ldr	r1, [sp, #24]
 8011390:	fb03 2301 	mla	r3, r3, r1, r2
 8011394:	9306      	str	r3, [sp, #24]
 8011396:	2300      	movs	r3, #0
 8011398:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801139a:	4618      	mov	r0, r3
 801139c:	1c51      	adds	r1, r2, #1
 801139e:	9119      	str	r1, [sp, #100]	; 0x64
 80113a0:	7852      	ldrb	r2, [r2, #1]
 80113a2:	e7ca      	b.n	801133a <_strtod_l+0x1da>
 80113a4:	4658      	mov	r0, fp
 80113a6:	e7d3      	b.n	8011350 <_strtod_l+0x1f0>
 80113a8:	2b08      	cmp	r3, #8
 80113aa:	dc04      	bgt.n	80113b6 <_strtod_l+0x256>
 80113ac:	9f06      	ldr	r7, [sp, #24]
 80113ae:	434f      	muls	r7, r1
 80113b0:	9706      	str	r7, [sp, #24]
 80113b2:	3301      	adds	r3, #1
 80113b4:	e7e2      	b.n	801137c <_strtod_l+0x21c>
 80113b6:	1c5f      	adds	r7, r3, #1
 80113b8:	2f10      	cmp	r7, #16
 80113ba:	bfde      	ittt	le
 80113bc:	9f05      	ldrle	r7, [sp, #20]
 80113be:	434f      	mulle	r7, r1
 80113c0:	9705      	strle	r7, [sp, #20]
 80113c2:	e7f6      	b.n	80113b2 <_strtod_l+0x252>
 80113c4:	2c10      	cmp	r4, #16
 80113c6:	bfdf      	itttt	le
 80113c8:	230a      	movle	r3, #10
 80113ca:	9905      	ldrle	r1, [sp, #20]
 80113cc:	fb03 2301 	mlale	r3, r3, r1, r2
 80113d0:	9305      	strle	r3, [sp, #20]
 80113d2:	e7e0      	b.n	8011396 <_strtod_l+0x236>
 80113d4:	2300      	movs	r3, #0
 80113d6:	9304      	str	r3, [sp, #16]
 80113d8:	2301      	movs	r3, #1
 80113da:	e77b      	b.n	80112d4 <_strtod_l+0x174>
 80113dc:	2700      	movs	r7, #0
 80113de:	1cb2      	adds	r2, r6, #2
 80113e0:	9219      	str	r2, [sp, #100]	; 0x64
 80113e2:	78b2      	ldrb	r2, [r6, #2]
 80113e4:	e784      	b.n	80112f0 <_strtod_l+0x190>
 80113e6:	bf00      	nop
 80113e8:	08014e78 	.word	0x08014e78
 80113ec:	08014c00 	.word	0x08014c00
 80113f0:	7ff00000 	.word	0x7ff00000
 80113f4:	2701      	movs	r7, #1
 80113f6:	e7f2      	b.n	80113de <_strtod_l+0x27e>
 80113f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80113fa:	1c51      	adds	r1, r2, #1
 80113fc:	9119      	str	r1, [sp, #100]	; 0x64
 80113fe:	7852      	ldrb	r2, [r2, #1]
 8011400:	2a30      	cmp	r2, #48	; 0x30
 8011402:	d0f9      	beq.n	80113f8 <_strtod_l+0x298>
 8011404:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011408:	2908      	cmp	r1, #8
 801140a:	f63f af77 	bhi.w	80112fc <_strtod_l+0x19c>
 801140e:	f04f 0e0a 	mov.w	lr, #10
 8011412:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8011416:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011418:	9209      	str	r2, [sp, #36]	; 0x24
 801141a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801141c:	1c51      	adds	r1, r2, #1
 801141e:	9119      	str	r1, [sp, #100]	; 0x64
 8011420:	7852      	ldrb	r2, [r2, #1]
 8011422:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8011426:	2d09      	cmp	r5, #9
 8011428:	d935      	bls.n	8011496 <_strtod_l+0x336>
 801142a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801142c:	1b49      	subs	r1, r1, r5
 801142e:	2908      	cmp	r1, #8
 8011430:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8011434:	dc02      	bgt.n	801143c <_strtod_l+0x2dc>
 8011436:	4565      	cmp	r5, ip
 8011438:	bfa8      	it	ge
 801143a:	4665      	movge	r5, ip
 801143c:	b107      	cbz	r7, 8011440 <_strtod_l+0x2e0>
 801143e:	426d      	negs	r5, r5
 8011440:	2c00      	cmp	r4, #0
 8011442:	d14c      	bne.n	80114de <_strtod_l+0x37e>
 8011444:	9907      	ldr	r1, [sp, #28]
 8011446:	4301      	orrs	r1, r0
 8011448:	f47f aecb 	bne.w	80111e2 <_strtod_l+0x82>
 801144c:	2b00      	cmp	r3, #0
 801144e:	f47f aee4 	bne.w	801121a <_strtod_l+0xba>
 8011452:	2a69      	cmp	r2, #105	; 0x69
 8011454:	d026      	beq.n	80114a4 <_strtod_l+0x344>
 8011456:	dc23      	bgt.n	80114a0 <_strtod_l+0x340>
 8011458:	2a49      	cmp	r2, #73	; 0x49
 801145a:	d023      	beq.n	80114a4 <_strtod_l+0x344>
 801145c:	2a4e      	cmp	r2, #78	; 0x4e
 801145e:	f47f aedc 	bne.w	801121a <_strtod_l+0xba>
 8011462:	499d      	ldr	r1, [pc, #628]	; (80116d8 <_strtod_l+0x578>)
 8011464:	a819      	add	r0, sp, #100	; 0x64
 8011466:	f001 f95d 	bl	8012724 <__match>
 801146a:	2800      	cmp	r0, #0
 801146c:	f43f aed5 	beq.w	801121a <_strtod_l+0xba>
 8011470:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011472:	781b      	ldrb	r3, [r3, #0]
 8011474:	2b28      	cmp	r3, #40	; 0x28
 8011476:	d12c      	bne.n	80114d2 <_strtod_l+0x372>
 8011478:	4998      	ldr	r1, [pc, #608]	; (80116dc <_strtod_l+0x57c>)
 801147a:	aa1c      	add	r2, sp, #112	; 0x70
 801147c:	a819      	add	r0, sp, #100	; 0x64
 801147e:	f001 f965 	bl	801274c <__hexnan>
 8011482:	2805      	cmp	r0, #5
 8011484:	d125      	bne.n	80114d2 <_strtod_l+0x372>
 8011486:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011488:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 801148c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011490:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8011494:	e6a5      	b.n	80111e2 <_strtod_l+0x82>
 8011496:	fb0e 2c0c 	mla	ip, lr, ip, r2
 801149a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 801149e:	e7bc      	b.n	801141a <_strtod_l+0x2ba>
 80114a0:	2a6e      	cmp	r2, #110	; 0x6e
 80114a2:	e7dc      	b.n	801145e <_strtod_l+0x2fe>
 80114a4:	498e      	ldr	r1, [pc, #568]	; (80116e0 <_strtod_l+0x580>)
 80114a6:	a819      	add	r0, sp, #100	; 0x64
 80114a8:	f001 f93c 	bl	8012724 <__match>
 80114ac:	2800      	cmp	r0, #0
 80114ae:	f43f aeb4 	beq.w	801121a <_strtod_l+0xba>
 80114b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80114b4:	498b      	ldr	r1, [pc, #556]	; (80116e4 <_strtod_l+0x584>)
 80114b6:	3b01      	subs	r3, #1
 80114b8:	a819      	add	r0, sp, #100	; 0x64
 80114ba:	9319      	str	r3, [sp, #100]	; 0x64
 80114bc:	f001 f932 	bl	8012724 <__match>
 80114c0:	b910      	cbnz	r0, 80114c8 <_strtod_l+0x368>
 80114c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80114c4:	3301      	adds	r3, #1
 80114c6:	9319      	str	r3, [sp, #100]	; 0x64
 80114c8:	f04f 0800 	mov.w	r8, #0
 80114cc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80116e8 <_strtod_l+0x588>
 80114d0:	e687      	b.n	80111e2 <_strtod_l+0x82>
 80114d2:	4886      	ldr	r0, [pc, #536]	; (80116ec <_strtod_l+0x58c>)
 80114d4:	f002 fb2e 	bl	8013b34 <nan>
 80114d8:	4680      	mov	r8, r0
 80114da:	4689      	mov	r9, r1
 80114dc:	e681      	b.n	80111e2 <_strtod_l+0x82>
 80114de:	9b04      	ldr	r3, [sp, #16]
 80114e0:	f1bb 0f00 	cmp.w	fp, #0
 80114e4:	bf08      	it	eq
 80114e6:	46a3      	moveq	fp, r4
 80114e8:	1aeb      	subs	r3, r5, r3
 80114ea:	2c10      	cmp	r4, #16
 80114ec:	9806      	ldr	r0, [sp, #24]
 80114ee:	4626      	mov	r6, r4
 80114f0:	9307      	str	r3, [sp, #28]
 80114f2:	bfa8      	it	ge
 80114f4:	2610      	movge	r6, #16
 80114f6:	f7ee ffe5 	bl	80004c4 <__aeabi_ui2d>
 80114fa:	2c09      	cmp	r4, #9
 80114fc:	4680      	mov	r8, r0
 80114fe:	4689      	mov	r9, r1
 8011500:	dd13      	ble.n	801152a <_strtod_l+0x3ca>
 8011502:	4b7b      	ldr	r3, [pc, #492]	; (80116f0 <_strtod_l+0x590>)
 8011504:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011508:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801150c:	f7ef f854 	bl	80005b8 <__aeabi_dmul>
 8011510:	4680      	mov	r8, r0
 8011512:	9805      	ldr	r0, [sp, #20]
 8011514:	4689      	mov	r9, r1
 8011516:	f7ee ffd5 	bl	80004c4 <__aeabi_ui2d>
 801151a:	4602      	mov	r2, r0
 801151c:	460b      	mov	r3, r1
 801151e:	4640      	mov	r0, r8
 8011520:	4649      	mov	r1, r9
 8011522:	f7ee fe93 	bl	800024c <__adddf3>
 8011526:	4680      	mov	r8, r0
 8011528:	4689      	mov	r9, r1
 801152a:	2c0f      	cmp	r4, #15
 801152c:	dc36      	bgt.n	801159c <_strtod_l+0x43c>
 801152e:	9b07      	ldr	r3, [sp, #28]
 8011530:	2b00      	cmp	r3, #0
 8011532:	f43f ae56 	beq.w	80111e2 <_strtod_l+0x82>
 8011536:	dd22      	ble.n	801157e <_strtod_l+0x41e>
 8011538:	2b16      	cmp	r3, #22
 801153a:	dc09      	bgt.n	8011550 <_strtod_l+0x3f0>
 801153c:	496c      	ldr	r1, [pc, #432]	; (80116f0 <_strtod_l+0x590>)
 801153e:	4642      	mov	r2, r8
 8011540:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011544:	464b      	mov	r3, r9
 8011546:	e9d1 0100 	ldrd	r0, r1, [r1]
 801154a:	f7ef f835 	bl	80005b8 <__aeabi_dmul>
 801154e:	e7c3      	b.n	80114d8 <_strtod_l+0x378>
 8011550:	9a07      	ldr	r2, [sp, #28]
 8011552:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8011556:	4293      	cmp	r3, r2
 8011558:	db20      	blt.n	801159c <_strtod_l+0x43c>
 801155a:	4d65      	ldr	r5, [pc, #404]	; (80116f0 <_strtod_l+0x590>)
 801155c:	f1c4 040f 	rsb	r4, r4, #15
 8011560:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8011564:	4642      	mov	r2, r8
 8011566:	e9d1 0100 	ldrd	r0, r1, [r1]
 801156a:	464b      	mov	r3, r9
 801156c:	f7ef f824 	bl	80005b8 <__aeabi_dmul>
 8011570:	9b07      	ldr	r3, [sp, #28]
 8011572:	1b1c      	subs	r4, r3, r4
 8011574:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8011578:	e9d5 2300 	ldrd	r2, r3, [r5]
 801157c:	e7e5      	b.n	801154a <_strtod_l+0x3ea>
 801157e:	9b07      	ldr	r3, [sp, #28]
 8011580:	3316      	adds	r3, #22
 8011582:	db0b      	blt.n	801159c <_strtod_l+0x43c>
 8011584:	9b04      	ldr	r3, [sp, #16]
 8011586:	4640      	mov	r0, r8
 8011588:	1b5d      	subs	r5, r3, r5
 801158a:	4b59      	ldr	r3, [pc, #356]	; (80116f0 <_strtod_l+0x590>)
 801158c:	4649      	mov	r1, r9
 801158e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011592:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011596:	f7ef f939 	bl	800080c <__aeabi_ddiv>
 801159a:	e79d      	b.n	80114d8 <_strtod_l+0x378>
 801159c:	9b07      	ldr	r3, [sp, #28]
 801159e:	1ba6      	subs	r6, r4, r6
 80115a0:	441e      	add	r6, r3
 80115a2:	2e00      	cmp	r6, #0
 80115a4:	dd74      	ble.n	8011690 <_strtod_l+0x530>
 80115a6:	f016 030f 	ands.w	r3, r6, #15
 80115aa:	d00a      	beq.n	80115c2 <_strtod_l+0x462>
 80115ac:	4950      	ldr	r1, [pc, #320]	; (80116f0 <_strtod_l+0x590>)
 80115ae:	4642      	mov	r2, r8
 80115b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80115b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115b8:	464b      	mov	r3, r9
 80115ba:	f7ee fffd 	bl	80005b8 <__aeabi_dmul>
 80115be:	4680      	mov	r8, r0
 80115c0:	4689      	mov	r9, r1
 80115c2:	f036 060f 	bics.w	r6, r6, #15
 80115c6:	d052      	beq.n	801166e <_strtod_l+0x50e>
 80115c8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80115cc:	dd27      	ble.n	801161e <_strtod_l+0x4be>
 80115ce:	f04f 0b00 	mov.w	fp, #0
 80115d2:	f8cd b010 	str.w	fp, [sp, #16]
 80115d6:	f8cd b020 	str.w	fp, [sp, #32]
 80115da:	f8cd b018 	str.w	fp, [sp, #24]
 80115de:	2322      	movs	r3, #34	; 0x22
 80115e0:	f04f 0800 	mov.w	r8, #0
 80115e4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80116e8 <_strtod_l+0x588>
 80115e8:	f8ca 3000 	str.w	r3, [sl]
 80115ec:	9b08      	ldr	r3, [sp, #32]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	f43f adf7 	beq.w	80111e2 <_strtod_l+0x82>
 80115f4:	4650      	mov	r0, sl
 80115f6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80115f8:	f001 f9b4 	bl	8012964 <_Bfree>
 80115fc:	4650      	mov	r0, sl
 80115fe:	9906      	ldr	r1, [sp, #24]
 8011600:	f001 f9b0 	bl	8012964 <_Bfree>
 8011604:	4650      	mov	r0, sl
 8011606:	9904      	ldr	r1, [sp, #16]
 8011608:	f001 f9ac 	bl	8012964 <_Bfree>
 801160c:	4650      	mov	r0, sl
 801160e:	9908      	ldr	r1, [sp, #32]
 8011610:	f001 f9a8 	bl	8012964 <_Bfree>
 8011614:	4659      	mov	r1, fp
 8011616:	4650      	mov	r0, sl
 8011618:	f001 f9a4 	bl	8012964 <_Bfree>
 801161c:	e5e1      	b.n	80111e2 <_strtod_l+0x82>
 801161e:	4b35      	ldr	r3, [pc, #212]	; (80116f4 <_strtod_l+0x594>)
 8011620:	4640      	mov	r0, r8
 8011622:	9305      	str	r3, [sp, #20]
 8011624:	2300      	movs	r3, #0
 8011626:	4649      	mov	r1, r9
 8011628:	461f      	mov	r7, r3
 801162a:	1136      	asrs	r6, r6, #4
 801162c:	2e01      	cmp	r6, #1
 801162e:	dc21      	bgt.n	8011674 <_strtod_l+0x514>
 8011630:	b10b      	cbz	r3, 8011636 <_strtod_l+0x4d6>
 8011632:	4680      	mov	r8, r0
 8011634:	4689      	mov	r9, r1
 8011636:	4b2f      	ldr	r3, [pc, #188]	; (80116f4 <_strtod_l+0x594>)
 8011638:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801163c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011640:	4642      	mov	r2, r8
 8011642:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011646:	464b      	mov	r3, r9
 8011648:	f7ee ffb6 	bl	80005b8 <__aeabi_dmul>
 801164c:	4b26      	ldr	r3, [pc, #152]	; (80116e8 <_strtod_l+0x588>)
 801164e:	460a      	mov	r2, r1
 8011650:	400b      	ands	r3, r1
 8011652:	4929      	ldr	r1, [pc, #164]	; (80116f8 <_strtod_l+0x598>)
 8011654:	4680      	mov	r8, r0
 8011656:	428b      	cmp	r3, r1
 8011658:	d8b9      	bhi.n	80115ce <_strtod_l+0x46e>
 801165a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801165e:	428b      	cmp	r3, r1
 8011660:	bf86      	itte	hi
 8011662:	f04f 38ff 	movhi.w	r8, #4294967295
 8011666:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80116fc <_strtod_l+0x59c>
 801166a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801166e:	2300      	movs	r3, #0
 8011670:	9305      	str	r3, [sp, #20]
 8011672:	e07f      	b.n	8011774 <_strtod_l+0x614>
 8011674:	07f2      	lsls	r2, r6, #31
 8011676:	d505      	bpl.n	8011684 <_strtod_l+0x524>
 8011678:	9b05      	ldr	r3, [sp, #20]
 801167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801167e:	f7ee ff9b 	bl	80005b8 <__aeabi_dmul>
 8011682:	2301      	movs	r3, #1
 8011684:	9a05      	ldr	r2, [sp, #20]
 8011686:	3701      	adds	r7, #1
 8011688:	3208      	adds	r2, #8
 801168a:	1076      	asrs	r6, r6, #1
 801168c:	9205      	str	r2, [sp, #20]
 801168e:	e7cd      	b.n	801162c <_strtod_l+0x4cc>
 8011690:	d0ed      	beq.n	801166e <_strtod_l+0x50e>
 8011692:	4276      	negs	r6, r6
 8011694:	f016 020f 	ands.w	r2, r6, #15
 8011698:	d00a      	beq.n	80116b0 <_strtod_l+0x550>
 801169a:	4b15      	ldr	r3, [pc, #84]	; (80116f0 <_strtod_l+0x590>)
 801169c:	4640      	mov	r0, r8
 801169e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116a2:	4649      	mov	r1, r9
 80116a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a8:	f7ef f8b0 	bl	800080c <__aeabi_ddiv>
 80116ac:	4680      	mov	r8, r0
 80116ae:	4689      	mov	r9, r1
 80116b0:	1136      	asrs	r6, r6, #4
 80116b2:	d0dc      	beq.n	801166e <_strtod_l+0x50e>
 80116b4:	2e1f      	cmp	r6, #31
 80116b6:	dd23      	ble.n	8011700 <_strtod_l+0x5a0>
 80116b8:	f04f 0b00 	mov.w	fp, #0
 80116bc:	f8cd b010 	str.w	fp, [sp, #16]
 80116c0:	f8cd b020 	str.w	fp, [sp, #32]
 80116c4:	f8cd b018 	str.w	fp, [sp, #24]
 80116c8:	2322      	movs	r3, #34	; 0x22
 80116ca:	f04f 0800 	mov.w	r8, #0
 80116ce:	f04f 0900 	mov.w	r9, #0
 80116d2:	f8ca 3000 	str.w	r3, [sl]
 80116d6:	e789      	b.n	80115ec <_strtod_l+0x48c>
 80116d8:	08014bfd 	.word	0x08014bfd
 80116dc:	08014c14 	.word	0x08014c14
 80116e0:	08014bf4 	.word	0x08014bf4
 80116e4:	08014bf7 	.word	0x08014bf7
 80116e8:	7ff00000 	.word	0x7ff00000
 80116ec:	08014cff 	.word	0x08014cff
 80116f0:	08014f10 	.word	0x08014f10
 80116f4:	08014ee8 	.word	0x08014ee8
 80116f8:	7ca00000 	.word	0x7ca00000
 80116fc:	7fefffff 	.word	0x7fefffff
 8011700:	f016 0310 	ands.w	r3, r6, #16
 8011704:	bf18      	it	ne
 8011706:	236a      	movne	r3, #106	; 0x6a
 8011708:	4640      	mov	r0, r8
 801170a:	9305      	str	r3, [sp, #20]
 801170c:	4649      	mov	r1, r9
 801170e:	2300      	movs	r3, #0
 8011710:	4fb0      	ldr	r7, [pc, #704]	; (80119d4 <_strtod_l+0x874>)
 8011712:	07f2      	lsls	r2, r6, #31
 8011714:	d504      	bpl.n	8011720 <_strtod_l+0x5c0>
 8011716:	e9d7 2300 	ldrd	r2, r3, [r7]
 801171a:	f7ee ff4d 	bl	80005b8 <__aeabi_dmul>
 801171e:	2301      	movs	r3, #1
 8011720:	1076      	asrs	r6, r6, #1
 8011722:	f107 0708 	add.w	r7, r7, #8
 8011726:	d1f4      	bne.n	8011712 <_strtod_l+0x5b2>
 8011728:	b10b      	cbz	r3, 801172e <_strtod_l+0x5ce>
 801172a:	4680      	mov	r8, r0
 801172c:	4689      	mov	r9, r1
 801172e:	9b05      	ldr	r3, [sp, #20]
 8011730:	b1c3      	cbz	r3, 8011764 <_strtod_l+0x604>
 8011732:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8011736:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801173a:	2b00      	cmp	r3, #0
 801173c:	4649      	mov	r1, r9
 801173e:	dd11      	ble.n	8011764 <_strtod_l+0x604>
 8011740:	2b1f      	cmp	r3, #31
 8011742:	f340 8127 	ble.w	8011994 <_strtod_l+0x834>
 8011746:	2b34      	cmp	r3, #52	; 0x34
 8011748:	bfd8      	it	le
 801174a:	f04f 33ff 	movle.w	r3, #4294967295
 801174e:	f04f 0800 	mov.w	r8, #0
 8011752:	bfcf      	iteee	gt
 8011754:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8011758:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801175c:	fa03 f202 	lslle.w	r2, r3, r2
 8011760:	ea02 0901 	andle.w	r9, r2, r1
 8011764:	2200      	movs	r2, #0
 8011766:	2300      	movs	r3, #0
 8011768:	4640      	mov	r0, r8
 801176a:	4649      	mov	r1, r9
 801176c:	f7ef f98c 	bl	8000a88 <__aeabi_dcmpeq>
 8011770:	2800      	cmp	r0, #0
 8011772:	d1a1      	bne.n	80116b8 <_strtod_l+0x558>
 8011774:	9b06      	ldr	r3, [sp, #24]
 8011776:	465a      	mov	r2, fp
 8011778:	9300      	str	r3, [sp, #0]
 801177a:	4650      	mov	r0, sl
 801177c:	4623      	mov	r3, r4
 801177e:	9908      	ldr	r1, [sp, #32]
 8011780:	f001 f958 	bl	8012a34 <__s2b>
 8011784:	9008      	str	r0, [sp, #32]
 8011786:	2800      	cmp	r0, #0
 8011788:	f43f af21 	beq.w	80115ce <_strtod_l+0x46e>
 801178c:	9b04      	ldr	r3, [sp, #16]
 801178e:	f04f 0b00 	mov.w	fp, #0
 8011792:	1b5d      	subs	r5, r3, r5
 8011794:	9b07      	ldr	r3, [sp, #28]
 8011796:	f8cd b010 	str.w	fp, [sp, #16]
 801179a:	2b00      	cmp	r3, #0
 801179c:	bfb4      	ite	lt
 801179e:	462b      	movlt	r3, r5
 80117a0:	2300      	movge	r3, #0
 80117a2:	930e      	str	r3, [sp, #56]	; 0x38
 80117a4:	9b07      	ldr	r3, [sp, #28]
 80117a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80117aa:	9314      	str	r3, [sp, #80]	; 0x50
 80117ac:	9b08      	ldr	r3, [sp, #32]
 80117ae:	4650      	mov	r0, sl
 80117b0:	6859      	ldr	r1, [r3, #4]
 80117b2:	f001 f897 	bl	80128e4 <_Balloc>
 80117b6:	9006      	str	r0, [sp, #24]
 80117b8:	2800      	cmp	r0, #0
 80117ba:	f43f af10 	beq.w	80115de <_strtod_l+0x47e>
 80117be:	9b08      	ldr	r3, [sp, #32]
 80117c0:	300c      	adds	r0, #12
 80117c2:	691a      	ldr	r2, [r3, #16]
 80117c4:	f103 010c 	add.w	r1, r3, #12
 80117c8:	3202      	adds	r2, #2
 80117ca:	0092      	lsls	r2, r2, #2
 80117cc:	f7ff faaa 	bl	8010d24 <memcpy>
 80117d0:	ab1c      	add	r3, sp, #112	; 0x70
 80117d2:	9301      	str	r3, [sp, #4]
 80117d4:	ab1b      	add	r3, sp, #108	; 0x6c
 80117d6:	9300      	str	r3, [sp, #0]
 80117d8:	4642      	mov	r2, r8
 80117da:	464b      	mov	r3, r9
 80117dc:	4650      	mov	r0, sl
 80117de:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80117e2:	f001 fc69 	bl	80130b8 <__d2b>
 80117e6:	901a      	str	r0, [sp, #104]	; 0x68
 80117e8:	2800      	cmp	r0, #0
 80117ea:	f43f aef8 	beq.w	80115de <_strtod_l+0x47e>
 80117ee:	2101      	movs	r1, #1
 80117f0:	4650      	mov	r0, sl
 80117f2:	f001 f9b7 	bl	8012b64 <__i2b>
 80117f6:	4603      	mov	r3, r0
 80117f8:	9004      	str	r0, [sp, #16]
 80117fa:	2800      	cmp	r0, #0
 80117fc:	f43f aeef 	beq.w	80115de <_strtod_l+0x47e>
 8011800:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8011802:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011804:	2d00      	cmp	r5, #0
 8011806:	bfab      	itete	ge
 8011808:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801180a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 801180c:	18ee      	addge	r6, r5, r3
 801180e:	1b5c      	sublt	r4, r3, r5
 8011810:	9b05      	ldr	r3, [sp, #20]
 8011812:	bfa8      	it	ge
 8011814:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8011816:	eba5 0503 	sub.w	r5, r5, r3
 801181a:	4415      	add	r5, r2
 801181c:	4b6e      	ldr	r3, [pc, #440]	; (80119d8 <_strtod_l+0x878>)
 801181e:	f105 35ff 	add.w	r5, r5, #4294967295
 8011822:	bfb8      	it	lt
 8011824:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8011826:	429d      	cmp	r5, r3
 8011828:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801182c:	f280 80c4 	bge.w	80119b8 <_strtod_l+0x858>
 8011830:	1b5b      	subs	r3, r3, r5
 8011832:	2b1f      	cmp	r3, #31
 8011834:	f04f 0701 	mov.w	r7, #1
 8011838:	eba2 0203 	sub.w	r2, r2, r3
 801183c:	f300 80b1 	bgt.w	80119a2 <_strtod_l+0x842>
 8011840:	2500      	movs	r5, #0
 8011842:	fa07 f303 	lsl.w	r3, r7, r3
 8011846:	930f      	str	r3, [sp, #60]	; 0x3c
 8011848:	18b7      	adds	r7, r6, r2
 801184a:	9b05      	ldr	r3, [sp, #20]
 801184c:	42be      	cmp	r6, r7
 801184e:	4414      	add	r4, r2
 8011850:	441c      	add	r4, r3
 8011852:	4633      	mov	r3, r6
 8011854:	bfa8      	it	ge
 8011856:	463b      	movge	r3, r7
 8011858:	42a3      	cmp	r3, r4
 801185a:	bfa8      	it	ge
 801185c:	4623      	movge	r3, r4
 801185e:	2b00      	cmp	r3, #0
 8011860:	bfc2      	ittt	gt
 8011862:	1aff      	subgt	r7, r7, r3
 8011864:	1ae4      	subgt	r4, r4, r3
 8011866:	1af6      	subgt	r6, r6, r3
 8011868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801186a:	2b00      	cmp	r3, #0
 801186c:	dd17      	ble.n	801189e <_strtod_l+0x73e>
 801186e:	461a      	mov	r2, r3
 8011870:	4650      	mov	r0, sl
 8011872:	9904      	ldr	r1, [sp, #16]
 8011874:	f001 fa34 	bl	8012ce0 <__pow5mult>
 8011878:	9004      	str	r0, [sp, #16]
 801187a:	2800      	cmp	r0, #0
 801187c:	f43f aeaf 	beq.w	80115de <_strtod_l+0x47e>
 8011880:	4601      	mov	r1, r0
 8011882:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011884:	4650      	mov	r0, sl
 8011886:	f001 f983 	bl	8012b90 <__multiply>
 801188a:	9009      	str	r0, [sp, #36]	; 0x24
 801188c:	2800      	cmp	r0, #0
 801188e:	f43f aea6 	beq.w	80115de <_strtod_l+0x47e>
 8011892:	4650      	mov	r0, sl
 8011894:	991a      	ldr	r1, [sp, #104]	; 0x68
 8011896:	f001 f865 	bl	8012964 <_Bfree>
 801189a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801189c:	931a      	str	r3, [sp, #104]	; 0x68
 801189e:	2f00      	cmp	r7, #0
 80118a0:	f300 808e 	bgt.w	80119c0 <_strtod_l+0x860>
 80118a4:	9b07      	ldr	r3, [sp, #28]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	dd08      	ble.n	80118bc <_strtod_l+0x75c>
 80118aa:	4650      	mov	r0, sl
 80118ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80118ae:	9906      	ldr	r1, [sp, #24]
 80118b0:	f001 fa16 	bl	8012ce0 <__pow5mult>
 80118b4:	9006      	str	r0, [sp, #24]
 80118b6:	2800      	cmp	r0, #0
 80118b8:	f43f ae91 	beq.w	80115de <_strtod_l+0x47e>
 80118bc:	2c00      	cmp	r4, #0
 80118be:	dd08      	ble.n	80118d2 <_strtod_l+0x772>
 80118c0:	4622      	mov	r2, r4
 80118c2:	4650      	mov	r0, sl
 80118c4:	9906      	ldr	r1, [sp, #24]
 80118c6:	f001 fa65 	bl	8012d94 <__lshift>
 80118ca:	9006      	str	r0, [sp, #24]
 80118cc:	2800      	cmp	r0, #0
 80118ce:	f43f ae86 	beq.w	80115de <_strtod_l+0x47e>
 80118d2:	2e00      	cmp	r6, #0
 80118d4:	dd08      	ble.n	80118e8 <_strtod_l+0x788>
 80118d6:	4632      	mov	r2, r6
 80118d8:	4650      	mov	r0, sl
 80118da:	9904      	ldr	r1, [sp, #16]
 80118dc:	f001 fa5a 	bl	8012d94 <__lshift>
 80118e0:	9004      	str	r0, [sp, #16]
 80118e2:	2800      	cmp	r0, #0
 80118e4:	f43f ae7b 	beq.w	80115de <_strtod_l+0x47e>
 80118e8:	4650      	mov	r0, sl
 80118ea:	9a06      	ldr	r2, [sp, #24]
 80118ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 80118ee:	f001 fadd 	bl	8012eac <__mdiff>
 80118f2:	4683      	mov	fp, r0
 80118f4:	2800      	cmp	r0, #0
 80118f6:	f43f ae72 	beq.w	80115de <_strtod_l+0x47e>
 80118fa:	2400      	movs	r4, #0
 80118fc:	68c3      	ldr	r3, [r0, #12]
 80118fe:	9904      	ldr	r1, [sp, #16]
 8011900:	60c4      	str	r4, [r0, #12]
 8011902:	930b      	str	r3, [sp, #44]	; 0x2c
 8011904:	f001 fab6 	bl	8012e74 <__mcmp>
 8011908:	42a0      	cmp	r0, r4
 801190a:	da6b      	bge.n	80119e4 <_strtod_l+0x884>
 801190c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801190e:	ea53 0308 	orrs.w	r3, r3, r8
 8011912:	f040 8091 	bne.w	8011a38 <_strtod_l+0x8d8>
 8011916:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801191a:	2b00      	cmp	r3, #0
 801191c:	f040 808c 	bne.w	8011a38 <_strtod_l+0x8d8>
 8011920:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011924:	0d1b      	lsrs	r3, r3, #20
 8011926:	051b      	lsls	r3, r3, #20
 8011928:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801192c:	f240 8084 	bls.w	8011a38 <_strtod_l+0x8d8>
 8011930:	f8db 3014 	ldr.w	r3, [fp, #20]
 8011934:	b91b      	cbnz	r3, 801193e <_strtod_l+0x7de>
 8011936:	f8db 3010 	ldr.w	r3, [fp, #16]
 801193a:	2b01      	cmp	r3, #1
 801193c:	dd7c      	ble.n	8011a38 <_strtod_l+0x8d8>
 801193e:	4659      	mov	r1, fp
 8011940:	2201      	movs	r2, #1
 8011942:	4650      	mov	r0, sl
 8011944:	f001 fa26 	bl	8012d94 <__lshift>
 8011948:	9904      	ldr	r1, [sp, #16]
 801194a:	4683      	mov	fp, r0
 801194c:	f001 fa92 	bl	8012e74 <__mcmp>
 8011950:	2800      	cmp	r0, #0
 8011952:	dd71      	ble.n	8011a38 <_strtod_l+0x8d8>
 8011954:	9905      	ldr	r1, [sp, #20]
 8011956:	464b      	mov	r3, r9
 8011958:	4a20      	ldr	r2, [pc, #128]	; (80119dc <_strtod_l+0x87c>)
 801195a:	2900      	cmp	r1, #0
 801195c:	f000 808c 	beq.w	8011a78 <_strtod_l+0x918>
 8011960:	ea02 0109 	and.w	r1, r2, r9
 8011964:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011968:	f300 8086 	bgt.w	8011a78 <_strtod_l+0x918>
 801196c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011970:	f77f aeaa 	ble.w	80116c8 <_strtod_l+0x568>
 8011974:	4640      	mov	r0, r8
 8011976:	4649      	mov	r1, r9
 8011978:	4b19      	ldr	r3, [pc, #100]	; (80119e0 <_strtod_l+0x880>)
 801197a:	2200      	movs	r2, #0
 801197c:	f7ee fe1c 	bl	80005b8 <__aeabi_dmul>
 8011980:	460b      	mov	r3, r1
 8011982:	4303      	orrs	r3, r0
 8011984:	bf08      	it	eq
 8011986:	2322      	moveq	r3, #34	; 0x22
 8011988:	4680      	mov	r8, r0
 801198a:	4689      	mov	r9, r1
 801198c:	bf08      	it	eq
 801198e:	f8ca 3000 	streq.w	r3, [sl]
 8011992:	e62f      	b.n	80115f4 <_strtod_l+0x494>
 8011994:	f04f 32ff 	mov.w	r2, #4294967295
 8011998:	fa02 f303 	lsl.w	r3, r2, r3
 801199c:	ea03 0808 	and.w	r8, r3, r8
 80119a0:	e6e0      	b.n	8011764 <_strtod_l+0x604>
 80119a2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80119a6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80119aa:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80119ae:	35e2      	adds	r5, #226	; 0xe2
 80119b0:	fa07 f505 	lsl.w	r5, r7, r5
 80119b4:	970f      	str	r7, [sp, #60]	; 0x3c
 80119b6:	e747      	b.n	8011848 <_strtod_l+0x6e8>
 80119b8:	2301      	movs	r3, #1
 80119ba:	2500      	movs	r5, #0
 80119bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80119be:	e743      	b.n	8011848 <_strtod_l+0x6e8>
 80119c0:	463a      	mov	r2, r7
 80119c2:	4650      	mov	r0, sl
 80119c4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80119c6:	f001 f9e5 	bl	8012d94 <__lshift>
 80119ca:	901a      	str	r0, [sp, #104]	; 0x68
 80119cc:	2800      	cmp	r0, #0
 80119ce:	f47f af69 	bne.w	80118a4 <_strtod_l+0x744>
 80119d2:	e604      	b.n	80115de <_strtod_l+0x47e>
 80119d4:	08014c28 	.word	0x08014c28
 80119d8:	fffffc02 	.word	0xfffffc02
 80119dc:	7ff00000 	.word	0x7ff00000
 80119e0:	39500000 	.word	0x39500000
 80119e4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80119e8:	d165      	bne.n	8011ab6 <_strtod_l+0x956>
 80119ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80119ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80119f0:	b35a      	cbz	r2, 8011a4a <_strtod_l+0x8ea>
 80119f2:	4a99      	ldr	r2, [pc, #612]	; (8011c58 <_strtod_l+0xaf8>)
 80119f4:	4293      	cmp	r3, r2
 80119f6:	d12b      	bne.n	8011a50 <_strtod_l+0x8f0>
 80119f8:	9b05      	ldr	r3, [sp, #20]
 80119fa:	4641      	mov	r1, r8
 80119fc:	b303      	cbz	r3, 8011a40 <_strtod_l+0x8e0>
 80119fe:	464a      	mov	r2, r9
 8011a00:	4b96      	ldr	r3, [pc, #600]	; (8011c5c <_strtod_l+0xafc>)
 8011a02:	4013      	ands	r3, r2
 8011a04:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011a08:	f04f 32ff 	mov.w	r2, #4294967295
 8011a0c:	d81b      	bhi.n	8011a46 <_strtod_l+0x8e6>
 8011a0e:	0d1b      	lsrs	r3, r3, #20
 8011a10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011a14:	fa02 f303 	lsl.w	r3, r2, r3
 8011a18:	4299      	cmp	r1, r3
 8011a1a:	d119      	bne.n	8011a50 <_strtod_l+0x8f0>
 8011a1c:	4b90      	ldr	r3, [pc, #576]	; (8011c60 <_strtod_l+0xb00>)
 8011a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a20:	429a      	cmp	r2, r3
 8011a22:	d102      	bne.n	8011a2a <_strtod_l+0x8ca>
 8011a24:	3101      	adds	r1, #1
 8011a26:	f43f adda 	beq.w	80115de <_strtod_l+0x47e>
 8011a2a:	f04f 0800 	mov.w	r8, #0
 8011a2e:	4b8b      	ldr	r3, [pc, #556]	; (8011c5c <_strtod_l+0xafc>)
 8011a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a32:	401a      	ands	r2, r3
 8011a34:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8011a38:	9b05      	ldr	r3, [sp, #20]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d19a      	bne.n	8011974 <_strtod_l+0x814>
 8011a3e:	e5d9      	b.n	80115f4 <_strtod_l+0x494>
 8011a40:	f04f 33ff 	mov.w	r3, #4294967295
 8011a44:	e7e8      	b.n	8011a18 <_strtod_l+0x8b8>
 8011a46:	4613      	mov	r3, r2
 8011a48:	e7e6      	b.n	8011a18 <_strtod_l+0x8b8>
 8011a4a:	ea53 0308 	orrs.w	r3, r3, r8
 8011a4e:	d081      	beq.n	8011954 <_strtod_l+0x7f4>
 8011a50:	b1e5      	cbz	r5, 8011a8c <_strtod_l+0x92c>
 8011a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a54:	421d      	tst	r5, r3
 8011a56:	d0ef      	beq.n	8011a38 <_strtod_l+0x8d8>
 8011a58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a5a:	4640      	mov	r0, r8
 8011a5c:	4649      	mov	r1, r9
 8011a5e:	9a05      	ldr	r2, [sp, #20]
 8011a60:	b1c3      	cbz	r3, 8011a94 <_strtod_l+0x934>
 8011a62:	f7ff fb5b 	bl	801111c <sulp>
 8011a66:	4602      	mov	r2, r0
 8011a68:	460b      	mov	r3, r1
 8011a6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011a6e:	f7ee fbed 	bl	800024c <__adddf3>
 8011a72:	4680      	mov	r8, r0
 8011a74:	4689      	mov	r9, r1
 8011a76:	e7df      	b.n	8011a38 <_strtod_l+0x8d8>
 8011a78:	4013      	ands	r3, r2
 8011a7a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011a7e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011a82:	f04f 38ff 	mov.w	r8, #4294967295
 8011a86:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011a8a:	e7d5      	b.n	8011a38 <_strtod_l+0x8d8>
 8011a8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a8e:	ea13 0f08 	tst.w	r3, r8
 8011a92:	e7e0      	b.n	8011a56 <_strtod_l+0x8f6>
 8011a94:	f7ff fb42 	bl	801111c <sulp>
 8011a98:	4602      	mov	r2, r0
 8011a9a:	460b      	mov	r3, r1
 8011a9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011aa0:	f7ee fbd2 	bl	8000248 <__aeabi_dsub>
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	4680      	mov	r8, r0
 8011aaa:	4689      	mov	r9, r1
 8011aac:	f7ee ffec 	bl	8000a88 <__aeabi_dcmpeq>
 8011ab0:	2800      	cmp	r0, #0
 8011ab2:	d0c1      	beq.n	8011a38 <_strtod_l+0x8d8>
 8011ab4:	e608      	b.n	80116c8 <_strtod_l+0x568>
 8011ab6:	4658      	mov	r0, fp
 8011ab8:	9904      	ldr	r1, [sp, #16]
 8011aba:	f001 fb59 	bl	8013170 <__ratio>
 8011abe:	2200      	movs	r2, #0
 8011ac0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011ac4:	4606      	mov	r6, r0
 8011ac6:	460f      	mov	r7, r1
 8011ac8:	f7ee fff2 	bl	8000ab0 <__aeabi_dcmple>
 8011acc:	2800      	cmp	r0, #0
 8011ace:	d070      	beq.n	8011bb2 <_strtod_l+0xa52>
 8011ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d042      	beq.n	8011b5c <_strtod_l+0x9fc>
 8011ad6:	2600      	movs	r6, #0
 8011ad8:	4f62      	ldr	r7, [pc, #392]	; (8011c64 <_strtod_l+0xb04>)
 8011ada:	4d62      	ldr	r5, [pc, #392]	; (8011c64 <_strtod_l+0xb04>)
 8011adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ade:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011ae2:	0d1b      	lsrs	r3, r3, #20
 8011ae4:	051b      	lsls	r3, r3, #20
 8011ae6:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ae8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011aea:	4b5f      	ldr	r3, [pc, #380]	; (8011c68 <_strtod_l+0xb08>)
 8011aec:	429a      	cmp	r2, r3
 8011aee:	f040 80c3 	bne.w	8011c78 <_strtod_l+0xb18>
 8011af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011af4:	4640      	mov	r0, r8
 8011af6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8011afa:	4649      	mov	r1, r9
 8011afc:	f001 fa62 	bl	8012fc4 <__ulp>
 8011b00:	4602      	mov	r2, r0
 8011b02:	460b      	mov	r3, r1
 8011b04:	4630      	mov	r0, r6
 8011b06:	4639      	mov	r1, r7
 8011b08:	f7ee fd56 	bl	80005b8 <__aeabi_dmul>
 8011b0c:	4642      	mov	r2, r8
 8011b0e:	464b      	mov	r3, r9
 8011b10:	f7ee fb9c 	bl	800024c <__adddf3>
 8011b14:	460b      	mov	r3, r1
 8011b16:	4951      	ldr	r1, [pc, #324]	; (8011c5c <_strtod_l+0xafc>)
 8011b18:	4a54      	ldr	r2, [pc, #336]	; (8011c6c <_strtod_l+0xb0c>)
 8011b1a:	4019      	ands	r1, r3
 8011b1c:	4291      	cmp	r1, r2
 8011b1e:	4680      	mov	r8, r0
 8011b20:	d95d      	bls.n	8011bde <_strtod_l+0xa7e>
 8011b22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011b24:	4b4e      	ldr	r3, [pc, #312]	; (8011c60 <_strtod_l+0xb00>)
 8011b26:	429a      	cmp	r2, r3
 8011b28:	d103      	bne.n	8011b32 <_strtod_l+0x9d2>
 8011b2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b2c:	3301      	adds	r3, #1
 8011b2e:	f43f ad56 	beq.w	80115de <_strtod_l+0x47e>
 8011b32:	f04f 38ff 	mov.w	r8, #4294967295
 8011b36:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8011c60 <_strtod_l+0xb00>
 8011b3a:	4650      	mov	r0, sl
 8011b3c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8011b3e:	f000 ff11 	bl	8012964 <_Bfree>
 8011b42:	4650      	mov	r0, sl
 8011b44:	9906      	ldr	r1, [sp, #24]
 8011b46:	f000 ff0d 	bl	8012964 <_Bfree>
 8011b4a:	4650      	mov	r0, sl
 8011b4c:	9904      	ldr	r1, [sp, #16]
 8011b4e:	f000 ff09 	bl	8012964 <_Bfree>
 8011b52:	4659      	mov	r1, fp
 8011b54:	4650      	mov	r0, sl
 8011b56:	f000 ff05 	bl	8012964 <_Bfree>
 8011b5a:	e627      	b.n	80117ac <_strtod_l+0x64c>
 8011b5c:	f1b8 0f00 	cmp.w	r8, #0
 8011b60:	d119      	bne.n	8011b96 <_strtod_l+0xa36>
 8011b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b68:	b9e3      	cbnz	r3, 8011ba4 <_strtod_l+0xa44>
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	4630      	mov	r0, r6
 8011b6e:	4639      	mov	r1, r7
 8011b70:	4b3c      	ldr	r3, [pc, #240]	; (8011c64 <_strtod_l+0xb04>)
 8011b72:	f7ee ff93 	bl	8000a9c <__aeabi_dcmplt>
 8011b76:	b9c8      	cbnz	r0, 8011bac <_strtod_l+0xa4c>
 8011b78:	2200      	movs	r2, #0
 8011b7a:	4630      	mov	r0, r6
 8011b7c:	4639      	mov	r1, r7
 8011b7e:	4b3c      	ldr	r3, [pc, #240]	; (8011c70 <_strtod_l+0xb10>)
 8011b80:	f7ee fd1a 	bl	80005b8 <__aeabi_dmul>
 8011b84:	4604      	mov	r4, r0
 8011b86:	460d      	mov	r5, r1
 8011b88:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8011b8c:	9416      	str	r4, [sp, #88]	; 0x58
 8011b8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8011b90:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8011b94:	e7a2      	b.n	8011adc <_strtod_l+0x97c>
 8011b96:	f1b8 0f01 	cmp.w	r8, #1
 8011b9a:	d103      	bne.n	8011ba4 <_strtod_l+0xa44>
 8011b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	f43f ad92 	beq.w	80116c8 <_strtod_l+0x568>
 8011ba4:	2600      	movs	r6, #0
 8011ba6:	2400      	movs	r4, #0
 8011ba8:	4f32      	ldr	r7, [pc, #200]	; (8011c74 <_strtod_l+0xb14>)
 8011baa:	e796      	b.n	8011ada <_strtod_l+0x97a>
 8011bac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011bae:	4d30      	ldr	r5, [pc, #192]	; (8011c70 <_strtod_l+0xb10>)
 8011bb0:	e7ea      	b.n	8011b88 <_strtod_l+0xa28>
 8011bb2:	4b2f      	ldr	r3, [pc, #188]	; (8011c70 <_strtod_l+0xb10>)
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	4630      	mov	r0, r6
 8011bb8:	4639      	mov	r1, r7
 8011bba:	f7ee fcfd 	bl	80005b8 <__aeabi_dmul>
 8011bbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011bc0:	4604      	mov	r4, r0
 8011bc2:	460d      	mov	r5, r1
 8011bc4:	b933      	cbnz	r3, 8011bd4 <_strtod_l+0xa74>
 8011bc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011bca:	9010      	str	r0, [sp, #64]	; 0x40
 8011bcc:	9311      	str	r3, [sp, #68]	; 0x44
 8011bce:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8011bd2:	e783      	b.n	8011adc <_strtod_l+0x97c>
 8011bd4:	4602      	mov	r2, r0
 8011bd6:	460b      	mov	r3, r1
 8011bd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8011bdc:	e7f7      	b.n	8011bce <_strtod_l+0xa6e>
 8011bde:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8011be2:	9b05      	ldr	r3, [sp, #20]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d1a8      	bne.n	8011b3a <_strtod_l+0x9da>
 8011be8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011bec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011bee:	0d1b      	lsrs	r3, r3, #20
 8011bf0:	051b      	lsls	r3, r3, #20
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	d1a1      	bne.n	8011b3a <_strtod_l+0x9da>
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	4629      	mov	r1, r5
 8011bfa:	f7ef f8a1 	bl	8000d40 <__aeabi_d2lz>
 8011bfe:	f7ee fcad 	bl	800055c <__aeabi_l2d>
 8011c02:	4602      	mov	r2, r0
 8011c04:	460b      	mov	r3, r1
 8011c06:	4620      	mov	r0, r4
 8011c08:	4629      	mov	r1, r5
 8011c0a:	f7ee fb1d 	bl	8000248 <__aeabi_dsub>
 8011c0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011c10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011c14:	ea43 0308 	orr.w	r3, r3, r8
 8011c18:	4313      	orrs	r3, r2
 8011c1a:	4604      	mov	r4, r0
 8011c1c:	460d      	mov	r5, r1
 8011c1e:	d066      	beq.n	8011cee <_strtod_l+0xb8e>
 8011c20:	a309      	add	r3, pc, #36	; (adr r3, 8011c48 <_strtod_l+0xae8>)
 8011c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c26:	f7ee ff39 	bl	8000a9c <__aeabi_dcmplt>
 8011c2a:	2800      	cmp	r0, #0
 8011c2c:	f47f ace2 	bne.w	80115f4 <_strtod_l+0x494>
 8011c30:	a307      	add	r3, pc, #28	; (adr r3, 8011c50 <_strtod_l+0xaf0>)
 8011c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c36:	4620      	mov	r0, r4
 8011c38:	4629      	mov	r1, r5
 8011c3a:	f7ee ff4d 	bl	8000ad8 <__aeabi_dcmpgt>
 8011c3e:	2800      	cmp	r0, #0
 8011c40:	f43f af7b 	beq.w	8011b3a <_strtod_l+0x9da>
 8011c44:	e4d6      	b.n	80115f4 <_strtod_l+0x494>
 8011c46:	bf00      	nop
 8011c48:	94a03595 	.word	0x94a03595
 8011c4c:	3fdfffff 	.word	0x3fdfffff
 8011c50:	35afe535 	.word	0x35afe535
 8011c54:	3fe00000 	.word	0x3fe00000
 8011c58:	000fffff 	.word	0x000fffff
 8011c5c:	7ff00000 	.word	0x7ff00000
 8011c60:	7fefffff 	.word	0x7fefffff
 8011c64:	3ff00000 	.word	0x3ff00000
 8011c68:	7fe00000 	.word	0x7fe00000
 8011c6c:	7c9fffff 	.word	0x7c9fffff
 8011c70:	3fe00000 	.word	0x3fe00000
 8011c74:	bff00000 	.word	0xbff00000
 8011c78:	9b05      	ldr	r3, [sp, #20]
 8011c7a:	b313      	cbz	r3, 8011cc2 <_strtod_l+0xb62>
 8011c7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011c7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011c82:	d81e      	bhi.n	8011cc2 <_strtod_l+0xb62>
 8011c84:	a326      	add	r3, pc, #152	; (adr r3, 8011d20 <_strtod_l+0xbc0>)
 8011c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c8a:	4620      	mov	r0, r4
 8011c8c:	4629      	mov	r1, r5
 8011c8e:	f7ee ff0f 	bl	8000ab0 <__aeabi_dcmple>
 8011c92:	b190      	cbz	r0, 8011cba <_strtod_l+0xb5a>
 8011c94:	4629      	mov	r1, r5
 8011c96:	4620      	mov	r0, r4
 8011c98:	f7ee ff3e 	bl	8000b18 <__aeabi_d2uiz>
 8011c9c:	2801      	cmp	r0, #1
 8011c9e:	bf38      	it	cc
 8011ca0:	2001      	movcc	r0, #1
 8011ca2:	f7ee fc0f 	bl	80004c4 <__aeabi_ui2d>
 8011ca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ca8:	4604      	mov	r4, r0
 8011caa:	460d      	mov	r5, r1
 8011cac:	b9d3      	cbnz	r3, 8011ce4 <_strtod_l+0xb84>
 8011cae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011cb2:	9012      	str	r0, [sp, #72]	; 0x48
 8011cb4:	9313      	str	r3, [sp, #76]	; 0x4c
 8011cb6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8011cba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011cbc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8011cc0:	1a9f      	subs	r7, r3, r2
 8011cc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011cc6:	f001 f97d 	bl	8012fc4 <__ulp>
 8011cca:	4602      	mov	r2, r0
 8011ccc:	460b      	mov	r3, r1
 8011cce:	4630      	mov	r0, r6
 8011cd0:	4639      	mov	r1, r7
 8011cd2:	f7ee fc71 	bl	80005b8 <__aeabi_dmul>
 8011cd6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011cda:	f7ee fab7 	bl	800024c <__adddf3>
 8011cde:	4680      	mov	r8, r0
 8011ce0:	4689      	mov	r9, r1
 8011ce2:	e77e      	b.n	8011be2 <_strtod_l+0xa82>
 8011ce4:	4602      	mov	r2, r0
 8011ce6:	460b      	mov	r3, r1
 8011ce8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8011cec:	e7e3      	b.n	8011cb6 <_strtod_l+0xb56>
 8011cee:	a30e      	add	r3, pc, #56	; (adr r3, 8011d28 <_strtod_l+0xbc8>)
 8011cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf4:	f7ee fed2 	bl	8000a9c <__aeabi_dcmplt>
 8011cf8:	e7a1      	b.n	8011c3e <_strtod_l+0xade>
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	930a      	str	r3, [sp, #40]	; 0x28
 8011cfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011d00:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011d02:	6013      	str	r3, [r2, #0]
 8011d04:	f7ff ba71 	b.w	80111ea <_strtod_l+0x8a>
 8011d08:	2a65      	cmp	r2, #101	; 0x65
 8011d0a:	f43f ab63 	beq.w	80113d4 <_strtod_l+0x274>
 8011d0e:	2a45      	cmp	r2, #69	; 0x45
 8011d10:	f43f ab60 	beq.w	80113d4 <_strtod_l+0x274>
 8011d14:	2301      	movs	r3, #1
 8011d16:	f7ff bb95 	b.w	8011444 <_strtod_l+0x2e4>
 8011d1a:	bf00      	nop
 8011d1c:	f3af 8000 	nop.w
 8011d20:	ffc00000 	.word	0xffc00000
 8011d24:	41dfffff 	.word	0x41dfffff
 8011d28:	94a03595 	.word	0x94a03595
 8011d2c:	3fcfffff 	.word	0x3fcfffff

08011d30 <strtof>:
 8011d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d34:	4f22      	ldr	r7, [pc, #136]	; (8011dc0 <strtof+0x90>)
 8011d36:	460a      	mov	r2, r1
 8011d38:	4b22      	ldr	r3, [pc, #136]	; (8011dc4 <strtof+0x94>)
 8011d3a:	4601      	mov	r1, r0
 8011d3c:	6838      	ldr	r0, [r7, #0]
 8011d3e:	f7ff fa0f 	bl	8011160 <_strtod_l>
 8011d42:	4602      	mov	r2, r0
 8011d44:	460b      	mov	r3, r1
 8011d46:	4606      	mov	r6, r0
 8011d48:	460c      	mov	r4, r1
 8011d4a:	f7ee fecf 	bl	8000aec <__aeabi_dcmpun>
 8011d4e:	b168      	cbz	r0, 8011d6c <strtof+0x3c>
 8011d50:	2c00      	cmp	r4, #0
 8011d52:	481d      	ldr	r0, [pc, #116]	; (8011dc8 <strtof+0x98>)
 8011d54:	da06      	bge.n	8011d64 <strtof+0x34>
 8011d56:	f001 fef3 	bl	8013b40 <nanf>
 8011d5a:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8011d5e:	4628      	mov	r0, r5
 8011d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d68:	f001 beea 	b.w	8013b40 <nanf>
 8011d6c:	4621      	mov	r1, r4
 8011d6e:	4630      	mov	r0, r6
 8011d70:	f7ee fef2 	bl	8000b58 <__aeabi_d2f>
 8011d74:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8011d78:	4605      	mov	r5, r0
 8011d7a:	4914      	ldr	r1, [pc, #80]	; (8011dcc <strtof+0x9c>)
 8011d7c:	4640      	mov	r0, r8
 8011d7e:	f7ee ffb1 	bl	8000ce4 <__aeabi_fcmpun>
 8011d82:	2800      	cmp	r0, #0
 8011d84:	d1eb      	bne.n	8011d5e <strtof+0x2e>
 8011d86:	4640      	mov	r0, r8
 8011d88:	4910      	ldr	r1, [pc, #64]	; (8011dcc <strtof+0x9c>)
 8011d8a:	f7ee ff8d 	bl	8000ca8 <__aeabi_fcmple>
 8011d8e:	2800      	cmp	r0, #0
 8011d90:	d1e5      	bne.n	8011d5e <strtof+0x2e>
 8011d92:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011d96:	f04f 32ff 	mov.w	r2, #4294967295
 8011d9a:	4630      	mov	r0, r6
 8011d9c:	4621      	mov	r1, r4
 8011d9e:	4b0c      	ldr	r3, [pc, #48]	; (8011dd0 <strtof+0xa0>)
 8011da0:	f7ee fea4 	bl	8000aec <__aeabi_dcmpun>
 8011da4:	b940      	cbnz	r0, 8011db8 <strtof+0x88>
 8011da6:	f04f 32ff 	mov.w	r2, #4294967295
 8011daa:	4630      	mov	r0, r6
 8011dac:	4621      	mov	r1, r4
 8011dae:	4b08      	ldr	r3, [pc, #32]	; (8011dd0 <strtof+0xa0>)
 8011db0:	f7ee fe7e 	bl	8000ab0 <__aeabi_dcmple>
 8011db4:	2800      	cmp	r0, #0
 8011db6:	d0d2      	beq.n	8011d5e <strtof+0x2e>
 8011db8:	2222      	movs	r2, #34	; 0x22
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	601a      	str	r2, [r3, #0]
 8011dbe:	e7ce      	b.n	8011d5e <strtof+0x2e>
 8011dc0:	200001e8 	.word	0x200001e8
 8011dc4:	20000250 	.word	0x20000250
 8011dc8:	08014cff 	.word	0x08014cff
 8011dcc:	7f7fffff 	.word	0x7f7fffff
 8011dd0:	7fefffff 	.word	0x7fefffff

08011dd4 <strtok>:
 8011dd4:	4b16      	ldr	r3, [pc, #88]	; (8011e30 <strtok+0x5c>)
 8011dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dda:	681f      	ldr	r7, [r3, #0]
 8011ddc:	4605      	mov	r5, r0
 8011dde:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8011de0:	460e      	mov	r6, r1
 8011de2:	b9ec      	cbnz	r4, 8011e20 <strtok+0x4c>
 8011de4:	2050      	movs	r0, #80	; 0x50
 8011de6:	f7fe ff8d 	bl	8010d04 <malloc>
 8011dea:	4602      	mov	r2, r0
 8011dec:	65b8      	str	r0, [r7, #88]	; 0x58
 8011dee:	b920      	cbnz	r0, 8011dfa <strtok+0x26>
 8011df0:	2157      	movs	r1, #87	; 0x57
 8011df2:	4b10      	ldr	r3, [pc, #64]	; (8011e34 <strtok+0x60>)
 8011df4:	4810      	ldr	r0, [pc, #64]	; (8011e38 <strtok+0x64>)
 8011df6:	f000 f8e1 	bl	8011fbc <__assert_func>
 8011dfa:	e9c0 4400 	strd	r4, r4, [r0]
 8011dfe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011e02:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011e06:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011e0a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011e0e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8011e12:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011e16:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011e1a:	6184      	str	r4, [r0, #24]
 8011e1c:	7704      	strb	r4, [r0, #28]
 8011e1e:	6244      	str	r4, [r0, #36]	; 0x24
 8011e20:	4631      	mov	r1, r6
 8011e22:	4628      	mov	r0, r5
 8011e24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011e26:	2301      	movs	r3, #1
 8011e28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e2c:	f000 b806 	b.w	8011e3c <__strtok_r>
 8011e30:	200001e8 	.word	0x200001e8
 8011e34:	08014c50 	.word	0x08014c50
 8011e38:	08014c67 	.word	0x08014c67

08011e3c <__strtok_r>:
 8011e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e3e:	b908      	cbnz	r0, 8011e44 <__strtok_r+0x8>
 8011e40:	6810      	ldr	r0, [r2, #0]
 8011e42:	b188      	cbz	r0, 8011e68 <__strtok_r+0x2c>
 8011e44:	4604      	mov	r4, r0
 8011e46:	460f      	mov	r7, r1
 8011e48:	4620      	mov	r0, r4
 8011e4a:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011e4e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011e52:	b91e      	cbnz	r6, 8011e5c <__strtok_r+0x20>
 8011e54:	b965      	cbnz	r5, 8011e70 <__strtok_r+0x34>
 8011e56:	4628      	mov	r0, r5
 8011e58:	6015      	str	r5, [r2, #0]
 8011e5a:	e005      	b.n	8011e68 <__strtok_r+0x2c>
 8011e5c:	42b5      	cmp	r5, r6
 8011e5e:	d1f6      	bne.n	8011e4e <__strtok_r+0x12>
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d1f0      	bne.n	8011e46 <__strtok_r+0xa>
 8011e64:	6014      	str	r4, [r2, #0]
 8011e66:	7003      	strb	r3, [r0, #0]
 8011e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e6a:	461c      	mov	r4, r3
 8011e6c:	e00c      	b.n	8011e88 <__strtok_r+0x4c>
 8011e6e:	b915      	cbnz	r5, 8011e76 <__strtok_r+0x3a>
 8011e70:	460e      	mov	r6, r1
 8011e72:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011e76:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011e7a:	42ab      	cmp	r3, r5
 8011e7c:	d1f7      	bne.n	8011e6e <__strtok_r+0x32>
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d0f3      	beq.n	8011e6a <__strtok_r+0x2e>
 8011e82:	2300      	movs	r3, #0
 8011e84:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011e88:	6014      	str	r4, [r2, #0]
 8011e8a:	e7ed      	b.n	8011e68 <__strtok_r+0x2c>

08011e8c <_strtol_l.constprop.0>:
 8011e8c:	2b01      	cmp	r3, #1
 8011e8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e92:	4680      	mov	r8, r0
 8011e94:	d001      	beq.n	8011e9a <_strtol_l.constprop.0+0xe>
 8011e96:	2b24      	cmp	r3, #36	; 0x24
 8011e98:	d906      	bls.n	8011ea8 <_strtol_l.constprop.0+0x1c>
 8011e9a:	f7fe fe0f 	bl	8010abc <__errno>
 8011e9e:	2316      	movs	r3, #22
 8011ea0:	6003      	str	r3, [r0, #0]
 8011ea2:	2000      	movs	r0, #0
 8011ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ea8:	460d      	mov	r5, r1
 8011eaa:	4f35      	ldr	r7, [pc, #212]	; (8011f80 <_strtol_l.constprop.0+0xf4>)
 8011eac:	4628      	mov	r0, r5
 8011eae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011eb2:	5de6      	ldrb	r6, [r4, r7]
 8011eb4:	f016 0608 	ands.w	r6, r6, #8
 8011eb8:	d1f8      	bne.n	8011eac <_strtol_l.constprop.0+0x20>
 8011eba:	2c2d      	cmp	r4, #45	; 0x2d
 8011ebc:	d12f      	bne.n	8011f1e <_strtol_l.constprop.0+0x92>
 8011ebe:	2601      	movs	r6, #1
 8011ec0:	782c      	ldrb	r4, [r5, #0]
 8011ec2:	1c85      	adds	r5, r0, #2
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d057      	beq.n	8011f78 <_strtol_l.constprop.0+0xec>
 8011ec8:	2b10      	cmp	r3, #16
 8011eca:	d109      	bne.n	8011ee0 <_strtol_l.constprop.0+0x54>
 8011ecc:	2c30      	cmp	r4, #48	; 0x30
 8011ece:	d107      	bne.n	8011ee0 <_strtol_l.constprop.0+0x54>
 8011ed0:	7828      	ldrb	r0, [r5, #0]
 8011ed2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011ed6:	2858      	cmp	r0, #88	; 0x58
 8011ed8:	d149      	bne.n	8011f6e <_strtol_l.constprop.0+0xe2>
 8011eda:	2310      	movs	r3, #16
 8011edc:	786c      	ldrb	r4, [r5, #1]
 8011ede:	3502      	adds	r5, #2
 8011ee0:	2700      	movs	r7, #0
 8011ee2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8011ee6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011eea:	fbbe f9f3 	udiv	r9, lr, r3
 8011eee:	4638      	mov	r0, r7
 8011ef0:	fb03 ea19 	mls	sl, r3, r9, lr
 8011ef4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011ef8:	f1bc 0f09 	cmp.w	ip, #9
 8011efc:	d814      	bhi.n	8011f28 <_strtol_l.constprop.0+0x9c>
 8011efe:	4664      	mov	r4, ip
 8011f00:	42a3      	cmp	r3, r4
 8011f02:	dd22      	ble.n	8011f4a <_strtol_l.constprop.0+0xbe>
 8011f04:	2f00      	cmp	r7, #0
 8011f06:	db1d      	blt.n	8011f44 <_strtol_l.constprop.0+0xb8>
 8011f08:	4581      	cmp	r9, r0
 8011f0a:	d31b      	bcc.n	8011f44 <_strtol_l.constprop.0+0xb8>
 8011f0c:	d101      	bne.n	8011f12 <_strtol_l.constprop.0+0x86>
 8011f0e:	45a2      	cmp	sl, r4
 8011f10:	db18      	blt.n	8011f44 <_strtol_l.constprop.0+0xb8>
 8011f12:	2701      	movs	r7, #1
 8011f14:	fb00 4003 	mla	r0, r0, r3, r4
 8011f18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011f1c:	e7ea      	b.n	8011ef4 <_strtol_l.constprop.0+0x68>
 8011f1e:	2c2b      	cmp	r4, #43	; 0x2b
 8011f20:	bf04      	itt	eq
 8011f22:	782c      	ldrbeq	r4, [r5, #0]
 8011f24:	1c85      	addeq	r5, r0, #2
 8011f26:	e7cd      	b.n	8011ec4 <_strtol_l.constprop.0+0x38>
 8011f28:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011f2c:	f1bc 0f19 	cmp.w	ip, #25
 8011f30:	d801      	bhi.n	8011f36 <_strtol_l.constprop.0+0xaa>
 8011f32:	3c37      	subs	r4, #55	; 0x37
 8011f34:	e7e4      	b.n	8011f00 <_strtol_l.constprop.0+0x74>
 8011f36:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011f3a:	f1bc 0f19 	cmp.w	ip, #25
 8011f3e:	d804      	bhi.n	8011f4a <_strtol_l.constprop.0+0xbe>
 8011f40:	3c57      	subs	r4, #87	; 0x57
 8011f42:	e7dd      	b.n	8011f00 <_strtol_l.constprop.0+0x74>
 8011f44:	f04f 37ff 	mov.w	r7, #4294967295
 8011f48:	e7e6      	b.n	8011f18 <_strtol_l.constprop.0+0x8c>
 8011f4a:	2f00      	cmp	r7, #0
 8011f4c:	da07      	bge.n	8011f5e <_strtol_l.constprop.0+0xd2>
 8011f4e:	2322      	movs	r3, #34	; 0x22
 8011f50:	4670      	mov	r0, lr
 8011f52:	f8c8 3000 	str.w	r3, [r8]
 8011f56:	2a00      	cmp	r2, #0
 8011f58:	d0a4      	beq.n	8011ea4 <_strtol_l.constprop.0+0x18>
 8011f5a:	1e69      	subs	r1, r5, #1
 8011f5c:	e005      	b.n	8011f6a <_strtol_l.constprop.0+0xde>
 8011f5e:	b106      	cbz	r6, 8011f62 <_strtol_l.constprop.0+0xd6>
 8011f60:	4240      	negs	r0, r0
 8011f62:	2a00      	cmp	r2, #0
 8011f64:	d09e      	beq.n	8011ea4 <_strtol_l.constprop.0+0x18>
 8011f66:	2f00      	cmp	r7, #0
 8011f68:	d1f7      	bne.n	8011f5a <_strtol_l.constprop.0+0xce>
 8011f6a:	6011      	str	r1, [r2, #0]
 8011f6c:	e79a      	b.n	8011ea4 <_strtol_l.constprop.0+0x18>
 8011f6e:	2430      	movs	r4, #48	; 0x30
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d1b5      	bne.n	8011ee0 <_strtol_l.constprop.0+0x54>
 8011f74:	2308      	movs	r3, #8
 8011f76:	e7b3      	b.n	8011ee0 <_strtol_l.constprop.0+0x54>
 8011f78:	2c30      	cmp	r4, #48	; 0x30
 8011f7a:	d0a9      	beq.n	8011ed0 <_strtol_l.constprop.0+0x44>
 8011f7c:	230a      	movs	r3, #10
 8011f7e:	e7af      	b.n	8011ee0 <_strtol_l.constprop.0+0x54>
 8011f80:	08014d01 	.word	0x08014d01

08011f84 <strtol>:
 8011f84:	4613      	mov	r3, r2
 8011f86:	460a      	mov	r2, r1
 8011f88:	4601      	mov	r1, r0
 8011f8a:	4802      	ldr	r0, [pc, #8]	; (8011f94 <strtol+0x10>)
 8011f8c:	6800      	ldr	r0, [r0, #0]
 8011f8e:	f7ff bf7d 	b.w	8011e8c <_strtol_l.constprop.0>
 8011f92:	bf00      	nop
 8011f94:	200001e8 	.word	0x200001e8

08011f98 <_write_r>:
 8011f98:	b538      	push	{r3, r4, r5, lr}
 8011f9a:	4604      	mov	r4, r0
 8011f9c:	4608      	mov	r0, r1
 8011f9e:	4611      	mov	r1, r2
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	4d05      	ldr	r5, [pc, #20]	; (8011fb8 <_write_r+0x20>)
 8011fa4:	602a      	str	r2, [r5, #0]
 8011fa6:	461a      	mov	r2, r3
 8011fa8:	f7f3 fa9e 	bl	80054e8 <_write>
 8011fac:	1c43      	adds	r3, r0, #1
 8011fae:	d102      	bne.n	8011fb6 <_write_r+0x1e>
 8011fb0:	682b      	ldr	r3, [r5, #0]
 8011fb2:	b103      	cbz	r3, 8011fb6 <_write_r+0x1e>
 8011fb4:	6023      	str	r3, [r4, #0]
 8011fb6:	bd38      	pop	{r3, r4, r5, pc}
 8011fb8:	2000a760 	.word	0x2000a760

08011fbc <__assert_func>:
 8011fbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011fbe:	4614      	mov	r4, r2
 8011fc0:	461a      	mov	r2, r3
 8011fc2:	4b09      	ldr	r3, [pc, #36]	; (8011fe8 <__assert_func+0x2c>)
 8011fc4:	4605      	mov	r5, r0
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	68d8      	ldr	r0, [r3, #12]
 8011fca:	b14c      	cbz	r4, 8011fe0 <__assert_func+0x24>
 8011fcc:	4b07      	ldr	r3, [pc, #28]	; (8011fec <__assert_func+0x30>)
 8011fce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011fd2:	9100      	str	r1, [sp, #0]
 8011fd4:	462b      	mov	r3, r5
 8011fd6:	4906      	ldr	r1, [pc, #24]	; (8011ff0 <__assert_func+0x34>)
 8011fd8:	f000 f8dc 	bl	8012194 <fiprintf>
 8011fdc:	f001 fe96 	bl	8013d0c <abort>
 8011fe0:	4b04      	ldr	r3, [pc, #16]	; (8011ff4 <__assert_func+0x38>)
 8011fe2:	461c      	mov	r4, r3
 8011fe4:	e7f3      	b.n	8011fce <__assert_func+0x12>
 8011fe6:	bf00      	nop
 8011fe8:	200001e8 	.word	0x200001e8
 8011fec:	08014cc4 	.word	0x08014cc4
 8011ff0:	08014cd1 	.word	0x08014cd1
 8011ff4:	08014cff 	.word	0x08014cff

08011ff8 <_close_r>:
 8011ff8:	b538      	push	{r3, r4, r5, lr}
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	4d05      	ldr	r5, [pc, #20]	; (8012014 <_close_r+0x1c>)
 8011ffe:	4604      	mov	r4, r0
 8012000:	4608      	mov	r0, r1
 8012002:	602b      	str	r3, [r5, #0]
 8012004:	f7f3 fa8c 	bl	8005520 <_close>
 8012008:	1c43      	adds	r3, r0, #1
 801200a:	d102      	bne.n	8012012 <_close_r+0x1a>
 801200c:	682b      	ldr	r3, [r5, #0]
 801200e:	b103      	cbz	r3, 8012012 <_close_r+0x1a>
 8012010:	6023      	str	r3, [r4, #0]
 8012012:	bd38      	pop	{r3, r4, r5, pc}
 8012014:	2000a760 	.word	0x2000a760

08012018 <__sflush_r>:
 8012018:	898a      	ldrh	r2, [r1, #12]
 801201a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801201c:	4605      	mov	r5, r0
 801201e:	0710      	lsls	r0, r2, #28
 8012020:	460c      	mov	r4, r1
 8012022:	d457      	bmi.n	80120d4 <__sflush_r+0xbc>
 8012024:	684b      	ldr	r3, [r1, #4]
 8012026:	2b00      	cmp	r3, #0
 8012028:	dc04      	bgt.n	8012034 <__sflush_r+0x1c>
 801202a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801202c:	2b00      	cmp	r3, #0
 801202e:	dc01      	bgt.n	8012034 <__sflush_r+0x1c>
 8012030:	2000      	movs	r0, #0
 8012032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012036:	2e00      	cmp	r6, #0
 8012038:	d0fa      	beq.n	8012030 <__sflush_r+0x18>
 801203a:	2300      	movs	r3, #0
 801203c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012040:	682f      	ldr	r7, [r5, #0]
 8012042:	602b      	str	r3, [r5, #0]
 8012044:	d032      	beq.n	80120ac <__sflush_r+0x94>
 8012046:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012048:	89a3      	ldrh	r3, [r4, #12]
 801204a:	075a      	lsls	r2, r3, #29
 801204c:	d505      	bpl.n	801205a <__sflush_r+0x42>
 801204e:	6863      	ldr	r3, [r4, #4]
 8012050:	1ac0      	subs	r0, r0, r3
 8012052:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012054:	b10b      	cbz	r3, 801205a <__sflush_r+0x42>
 8012056:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012058:	1ac0      	subs	r0, r0, r3
 801205a:	2300      	movs	r3, #0
 801205c:	4602      	mov	r2, r0
 801205e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012060:	4628      	mov	r0, r5
 8012062:	6a21      	ldr	r1, [r4, #32]
 8012064:	47b0      	blx	r6
 8012066:	1c43      	adds	r3, r0, #1
 8012068:	89a3      	ldrh	r3, [r4, #12]
 801206a:	d106      	bne.n	801207a <__sflush_r+0x62>
 801206c:	6829      	ldr	r1, [r5, #0]
 801206e:	291d      	cmp	r1, #29
 8012070:	d82c      	bhi.n	80120cc <__sflush_r+0xb4>
 8012072:	4a29      	ldr	r2, [pc, #164]	; (8012118 <__sflush_r+0x100>)
 8012074:	40ca      	lsrs	r2, r1
 8012076:	07d6      	lsls	r6, r2, #31
 8012078:	d528      	bpl.n	80120cc <__sflush_r+0xb4>
 801207a:	2200      	movs	r2, #0
 801207c:	6062      	str	r2, [r4, #4]
 801207e:	6922      	ldr	r2, [r4, #16]
 8012080:	04d9      	lsls	r1, r3, #19
 8012082:	6022      	str	r2, [r4, #0]
 8012084:	d504      	bpl.n	8012090 <__sflush_r+0x78>
 8012086:	1c42      	adds	r2, r0, #1
 8012088:	d101      	bne.n	801208e <__sflush_r+0x76>
 801208a:	682b      	ldr	r3, [r5, #0]
 801208c:	b903      	cbnz	r3, 8012090 <__sflush_r+0x78>
 801208e:	6560      	str	r0, [r4, #84]	; 0x54
 8012090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012092:	602f      	str	r7, [r5, #0]
 8012094:	2900      	cmp	r1, #0
 8012096:	d0cb      	beq.n	8012030 <__sflush_r+0x18>
 8012098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801209c:	4299      	cmp	r1, r3
 801209e:	d002      	beq.n	80120a6 <__sflush_r+0x8e>
 80120a0:	4628      	mov	r0, r5
 80120a2:	f7fe fe55 	bl	8010d50 <_free_r>
 80120a6:	2000      	movs	r0, #0
 80120a8:	6360      	str	r0, [r4, #52]	; 0x34
 80120aa:	e7c2      	b.n	8012032 <__sflush_r+0x1a>
 80120ac:	6a21      	ldr	r1, [r4, #32]
 80120ae:	2301      	movs	r3, #1
 80120b0:	4628      	mov	r0, r5
 80120b2:	47b0      	blx	r6
 80120b4:	1c41      	adds	r1, r0, #1
 80120b6:	d1c7      	bne.n	8012048 <__sflush_r+0x30>
 80120b8:	682b      	ldr	r3, [r5, #0]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d0c4      	beq.n	8012048 <__sflush_r+0x30>
 80120be:	2b1d      	cmp	r3, #29
 80120c0:	d001      	beq.n	80120c6 <__sflush_r+0xae>
 80120c2:	2b16      	cmp	r3, #22
 80120c4:	d101      	bne.n	80120ca <__sflush_r+0xb2>
 80120c6:	602f      	str	r7, [r5, #0]
 80120c8:	e7b2      	b.n	8012030 <__sflush_r+0x18>
 80120ca:	89a3      	ldrh	r3, [r4, #12]
 80120cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120d0:	81a3      	strh	r3, [r4, #12]
 80120d2:	e7ae      	b.n	8012032 <__sflush_r+0x1a>
 80120d4:	690f      	ldr	r7, [r1, #16]
 80120d6:	2f00      	cmp	r7, #0
 80120d8:	d0aa      	beq.n	8012030 <__sflush_r+0x18>
 80120da:	0793      	lsls	r3, r2, #30
 80120dc:	bf18      	it	ne
 80120de:	2300      	movne	r3, #0
 80120e0:	680e      	ldr	r6, [r1, #0]
 80120e2:	bf08      	it	eq
 80120e4:	694b      	ldreq	r3, [r1, #20]
 80120e6:	1bf6      	subs	r6, r6, r7
 80120e8:	600f      	str	r7, [r1, #0]
 80120ea:	608b      	str	r3, [r1, #8]
 80120ec:	2e00      	cmp	r6, #0
 80120ee:	dd9f      	ble.n	8012030 <__sflush_r+0x18>
 80120f0:	4633      	mov	r3, r6
 80120f2:	463a      	mov	r2, r7
 80120f4:	4628      	mov	r0, r5
 80120f6:	6a21      	ldr	r1, [r4, #32]
 80120f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80120fc:	47e0      	blx	ip
 80120fe:	2800      	cmp	r0, #0
 8012100:	dc06      	bgt.n	8012110 <__sflush_r+0xf8>
 8012102:	89a3      	ldrh	r3, [r4, #12]
 8012104:	f04f 30ff 	mov.w	r0, #4294967295
 8012108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801210c:	81a3      	strh	r3, [r4, #12]
 801210e:	e790      	b.n	8012032 <__sflush_r+0x1a>
 8012110:	4407      	add	r7, r0
 8012112:	1a36      	subs	r6, r6, r0
 8012114:	e7ea      	b.n	80120ec <__sflush_r+0xd4>
 8012116:	bf00      	nop
 8012118:	20400001 	.word	0x20400001

0801211c <_fflush_r>:
 801211c:	b538      	push	{r3, r4, r5, lr}
 801211e:	690b      	ldr	r3, [r1, #16]
 8012120:	4605      	mov	r5, r0
 8012122:	460c      	mov	r4, r1
 8012124:	b913      	cbnz	r3, 801212c <_fflush_r+0x10>
 8012126:	2500      	movs	r5, #0
 8012128:	4628      	mov	r0, r5
 801212a:	bd38      	pop	{r3, r4, r5, pc}
 801212c:	b118      	cbz	r0, 8012136 <_fflush_r+0x1a>
 801212e:	6983      	ldr	r3, [r0, #24]
 8012130:	b90b      	cbnz	r3, 8012136 <_fflush_r+0x1a>
 8012132:	f7fe fd21 	bl	8010b78 <__sinit>
 8012136:	4b14      	ldr	r3, [pc, #80]	; (8012188 <_fflush_r+0x6c>)
 8012138:	429c      	cmp	r4, r3
 801213a:	d11b      	bne.n	8012174 <_fflush_r+0x58>
 801213c:	686c      	ldr	r4, [r5, #4]
 801213e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d0ef      	beq.n	8012126 <_fflush_r+0xa>
 8012146:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012148:	07d0      	lsls	r0, r2, #31
 801214a:	d404      	bmi.n	8012156 <_fflush_r+0x3a>
 801214c:	0599      	lsls	r1, r3, #22
 801214e:	d402      	bmi.n	8012156 <_fflush_r+0x3a>
 8012150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012152:	f7fe fdd4 	bl	8010cfe <__retarget_lock_acquire_recursive>
 8012156:	4628      	mov	r0, r5
 8012158:	4621      	mov	r1, r4
 801215a:	f7ff ff5d 	bl	8012018 <__sflush_r>
 801215e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012160:	4605      	mov	r5, r0
 8012162:	07da      	lsls	r2, r3, #31
 8012164:	d4e0      	bmi.n	8012128 <_fflush_r+0xc>
 8012166:	89a3      	ldrh	r3, [r4, #12]
 8012168:	059b      	lsls	r3, r3, #22
 801216a:	d4dd      	bmi.n	8012128 <_fflush_r+0xc>
 801216c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801216e:	f7fe fdc7 	bl	8010d00 <__retarget_lock_release_recursive>
 8012172:	e7d9      	b.n	8012128 <_fflush_r+0xc>
 8012174:	4b05      	ldr	r3, [pc, #20]	; (801218c <_fflush_r+0x70>)
 8012176:	429c      	cmp	r4, r3
 8012178:	d101      	bne.n	801217e <_fflush_r+0x62>
 801217a:	68ac      	ldr	r4, [r5, #8]
 801217c:	e7df      	b.n	801213e <_fflush_r+0x22>
 801217e:	4b04      	ldr	r3, [pc, #16]	; (8012190 <_fflush_r+0x74>)
 8012180:	429c      	cmp	r4, r3
 8012182:	bf08      	it	eq
 8012184:	68ec      	ldreq	r4, [r5, #12]
 8012186:	e7da      	b.n	801213e <_fflush_r+0x22>
 8012188:	08014bb0 	.word	0x08014bb0
 801218c:	08014bd0 	.word	0x08014bd0
 8012190:	08014b90 	.word	0x08014b90

08012194 <fiprintf>:
 8012194:	b40e      	push	{r1, r2, r3}
 8012196:	b503      	push	{r0, r1, lr}
 8012198:	4601      	mov	r1, r0
 801219a:	ab03      	add	r3, sp, #12
 801219c:	4805      	ldr	r0, [pc, #20]	; (80121b4 <fiprintf+0x20>)
 801219e:	f853 2b04 	ldr.w	r2, [r3], #4
 80121a2:	6800      	ldr	r0, [r0, #0]
 80121a4:	9301      	str	r3, [sp, #4]
 80121a6:	f001 f9ed 	bl	8013584 <_vfiprintf_r>
 80121aa:	b002      	add	sp, #8
 80121ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80121b0:	b003      	add	sp, #12
 80121b2:	4770      	bx	lr
 80121b4:	200001e8 	.word	0x200001e8

080121b8 <rshift>:
 80121b8:	6903      	ldr	r3, [r0, #16]
 80121ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80121c2:	f100 0414 	add.w	r4, r0, #20
 80121c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80121ca:	dd46      	ble.n	801225a <rshift+0xa2>
 80121cc:	f011 011f 	ands.w	r1, r1, #31
 80121d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80121d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80121d8:	d10c      	bne.n	80121f4 <rshift+0x3c>
 80121da:	4629      	mov	r1, r5
 80121dc:	f100 0710 	add.w	r7, r0, #16
 80121e0:	42b1      	cmp	r1, r6
 80121e2:	d335      	bcc.n	8012250 <rshift+0x98>
 80121e4:	1a9b      	subs	r3, r3, r2
 80121e6:	009b      	lsls	r3, r3, #2
 80121e8:	1eea      	subs	r2, r5, #3
 80121ea:	4296      	cmp	r6, r2
 80121ec:	bf38      	it	cc
 80121ee:	2300      	movcc	r3, #0
 80121f0:	4423      	add	r3, r4
 80121f2:	e015      	b.n	8012220 <rshift+0x68>
 80121f4:	46a1      	mov	r9, r4
 80121f6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80121fa:	f1c1 0820 	rsb	r8, r1, #32
 80121fe:	40cf      	lsrs	r7, r1
 8012200:	f105 0e04 	add.w	lr, r5, #4
 8012204:	4576      	cmp	r6, lr
 8012206:	46f4      	mov	ip, lr
 8012208:	d816      	bhi.n	8012238 <rshift+0x80>
 801220a:	1a9a      	subs	r2, r3, r2
 801220c:	0092      	lsls	r2, r2, #2
 801220e:	3a04      	subs	r2, #4
 8012210:	3501      	adds	r5, #1
 8012212:	42ae      	cmp	r6, r5
 8012214:	bf38      	it	cc
 8012216:	2200      	movcc	r2, #0
 8012218:	18a3      	adds	r3, r4, r2
 801221a:	50a7      	str	r7, [r4, r2]
 801221c:	b107      	cbz	r7, 8012220 <rshift+0x68>
 801221e:	3304      	adds	r3, #4
 8012220:	42a3      	cmp	r3, r4
 8012222:	eba3 0204 	sub.w	r2, r3, r4
 8012226:	bf08      	it	eq
 8012228:	2300      	moveq	r3, #0
 801222a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801222e:	6102      	str	r2, [r0, #16]
 8012230:	bf08      	it	eq
 8012232:	6143      	streq	r3, [r0, #20]
 8012234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012238:	f8dc c000 	ldr.w	ip, [ip]
 801223c:	fa0c fc08 	lsl.w	ip, ip, r8
 8012240:	ea4c 0707 	orr.w	r7, ip, r7
 8012244:	f849 7b04 	str.w	r7, [r9], #4
 8012248:	f85e 7b04 	ldr.w	r7, [lr], #4
 801224c:	40cf      	lsrs	r7, r1
 801224e:	e7d9      	b.n	8012204 <rshift+0x4c>
 8012250:	f851 cb04 	ldr.w	ip, [r1], #4
 8012254:	f847 cf04 	str.w	ip, [r7, #4]!
 8012258:	e7c2      	b.n	80121e0 <rshift+0x28>
 801225a:	4623      	mov	r3, r4
 801225c:	e7e0      	b.n	8012220 <rshift+0x68>

0801225e <__hexdig_fun>:
 801225e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012262:	2b09      	cmp	r3, #9
 8012264:	d802      	bhi.n	801226c <__hexdig_fun+0xe>
 8012266:	3820      	subs	r0, #32
 8012268:	b2c0      	uxtb	r0, r0
 801226a:	4770      	bx	lr
 801226c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012270:	2b05      	cmp	r3, #5
 8012272:	d801      	bhi.n	8012278 <__hexdig_fun+0x1a>
 8012274:	3847      	subs	r0, #71	; 0x47
 8012276:	e7f7      	b.n	8012268 <__hexdig_fun+0xa>
 8012278:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801227c:	2b05      	cmp	r3, #5
 801227e:	d801      	bhi.n	8012284 <__hexdig_fun+0x26>
 8012280:	3827      	subs	r0, #39	; 0x27
 8012282:	e7f1      	b.n	8012268 <__hexdig_fun+0xa>
 8012284:	2000      	movs	r0, #0
 8012286:	4770      	bx	lr

08012288 <__gethex>:
 8012288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801228c:	b08b      	sub	sp, #44	; 0x2c
 801228e:	9305      	str	r3, [sp, #20]
 8012290:	4bb2      	ldr	r3, [pc, #712]	; (801255c <__gethex+0x2d4>)
 8012292:	9002      	str	r0, [sp, #8]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	468b      	mov	fp, r1
 8012298:	4618      	mov	r0, r3
 801229a:	4690      	mov	r8, r2
 801229c:	9303      	str	r3, [sp, #12]
 801229e:	f7ed ffc7 	bl	8000230 <strlen>
 80122a2:	4682      	mov	sl, r0
 80122a4:	9b03      	ldr	r3, [sp, #12]
 80122a6:	f8db 2000 	ldr.w	r2, [fp]
 80122aa:	4403      	add	r3, r0
 80122ac:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80122b0:	9306      	str	r3, [sp, #24]
 80122b2:	1c93      	adds	r3, r2, #2
 80122b4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80122b8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80122bc:	32fe      	adds	r2, #254	; 0xfe
 80122be:	18d1      	adds	r1, r2, r3
 80122c0:	461f      	mov	r7, r3
 80122c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80122c6:	9101      	str	r1, [sp, #4]
 80122c8:	2830      	cmp	r0, #48	; 0x30
 80122ca:	d0f8      	beq.n	80122be <__gethex+0x36>
 80122cc:	f7ff ffc7 	bl	801225e <__hexdig_fun>
 80122d0:	4604      	mov	r4, r0
 80122d2:	2800      	cmp	r0, #0
 80122d4:	d13a      	bne.n	801234c <__gethex+0xc4>
 80122d6:	4652      	mov	r2, sl
 80122d8:	4638      	mov	r0, r7
 80122da:	9903      	ldr	r1, [sp, #12]
 80122dc:	f001 fc34 	bl	8013b48 <strncmp>
 80122e0:	4605      	mov	r5, r0
 80122e2:	2800      	cmp	r0, #0
 80122e4:	d166      	bne.n	80123b4 <__gethex+0x12c>
 80122e6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80122ea:	eb07 060a 	add.w	r6, r7, sl
 80122ee:	f7ff ffb6 	bl	801225e <__hexdig_fun>
 80122f2:	2800      	cmp	r0, #0
 80122f4:	d060      	beq.n	80123b8 <__gethex+0x130>
 80122f6:	4633      	mov	r3, r6
 80122f8:	7818      	ldrb	r0, [r3, #0]
 80122fa:	461f      	mov	r7, r3
 80122fc:	2830      	cmp	r0, #48	; 0x30
 80122fe:	f103 0301 	add.w	r3, r3, #1
 8012302:	d0f9      	beq.n	80122f8 <__gethex+0x70>
 8012304:	f7ff ffab 	bl	801225e <__hexdig_fun>
 8012308:	2301      	movs	r3, #1
 801230a:	fab0 f480 	clz	r4, r0
 801230e:	4635      	mov	r5, r6
 8012310:	0964      	lsrs	r4, r4, #5
 8012312:	9301      	str	r3, [sp, #4]
 8012314:	463a      	mov	r2, r7
 8012316:	4616      	mov	r6, r2
 8012318:	7830      	ldrb	r0, [r6, #0]
 801231a:	3201      	adds	r2, #1
 801231c:	f7ff ff9f 	bl	801225e <__hexdig_fun>
 8012320:	2800      	cmp	r0, #0
 8012322:	d1f8      	bne.n	8012316 <__gethex+0x8e>
 8012324:	4652      	mov	r2, sl
 8012326:	4630      	mov	r0, r6
 8012328:	9903      	ldr	r1, [sp, #12]
 801232a:	f001 fc0d 	bl	8013b48 <strncmp>
 801232e:	b980      	cbnz	r0, 8012352 <__gethex+0xca>
 8012330:	b94d      	cbnz	r5, 8012346 <__gethex+0xbe>
 8012332:	eb06 050a 	add.w	r5, r6, sl
 8012336:	462a      	mov	r2, r5
 8012338:	4616      	mov	r6, r2
 801233a:	7830      	ldrb	r0, [r6, #0]
 801233c:	3201      	adds	r2, #1
 801233e:	f7ff ff8e 	bl	801225e <__hexdig_fun>
 8012342:	2800      	cmp	r0, #0
 8012344:	d1f8      	bne.n	8012338 <__gethex+0xb0>
 8012346:	1bad      	subs	r5, r5, r6
 8012348:	00ad      	lsls	r5, r5, #2
 801234a:	e004      	b.n	8012356 <__gethex+0xce>
 801234c:	2400      	movs	r4, #0
 801234e:	4625      	mov	r5, r4
 8012350:	e7e0      	b.n	8012314 <__gethex+0x8c>
 8012352:	2d00      	cmp	r5, #0
 8012354:	d1f7      	bne.n	8012346 <__gethex+0xbe>
 8012356:	7833      	ldrb	r3, [r6, #0]
 8012358:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801235c:	2b50      	cmp	r3, #80	; 0x50
 801235e:	d139      	bne.n	80123d4 <__gethex+0x14c>
 8012360:	7873      	ldrb	r3, [r6, #1]
 8012362:	2b2b      	cmp	r3, #43	; 0x2b
 8012364:	d02a      	beq.n	80123bc <__gethex+0x134>
 8012366:	2b2d      	cmp	r3, #45	; 0x2d
 8012368:	d02c      	beq.n	80123c4 <__gethex+0x13c>
 801236a:	f04f 0900 	mov.w	r9, #0
 801236e:	1c71      	adds	r1, r6, #1
 8012370:	7808      	ldrb	r0, [r1, #0]
 8012372:	f7ff ff74 	bl	801225e <__hexdig_fun>
 8012376:	1e43      	subs	r3, r0, #1
 8012378:	b2db      	uxtb	r3, r3
 801237a:	2b18      	cmp	r3, #24
 801237c:	d82a      	bhi.n	80123d4 <__gethex+0x14c>
 801237e:	f1a0 0210 	sub.w	r2, r0, #16
 8012382:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012386:	f7ff ff6a 	bl	801225e <__hexdig_fun>
 801238a:	1e43      	subs	r3, r0, #1
 801238c:	b2db      	uxtb	r3, r3
 801238e:	2b18      	cmp	r3, #24
 8012390:	d91b      	bls.n	80123ca <__gethex+0x142>
 8012392:	f1b9 0f00 	cmp.w	r9, #0
 8012396:	d000      	beq.n	801239a <__gethex+0x112>
 8012398:	4252      	negs	r2, r2
 801239a:	4415      	add	r5, r2
 801239c:	f8cb 1000 	str.w	r1, [fp]
 80123a0:	b1d4      	cbz	r4, 80123d8 <__gethex+0x150>
 80123a2:	9b01      	ldr	r3, [sp, #4]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	bf14      	ite	ne
 80123a8:	2700      	movne	r7, #0
 80123aa:	2706      	moveq	r7, #6
 80123ac:	4638      	mov	r0, r7
 80123ae:	b00b      	add	sp, #44	; 0x2c
 80123b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b4:	463e      	mov	r6, r7
 80123b6:	4625      	mov	r5, r4
 80123b8:	2401      	movs	r4, #1
 80123ba:	e7cc      	b.n	8012356 <__gethex+0xce>
 80123bc:	f04f 0900 	mov.w	r9, #0
 80123c0:	1cb1      	adds	r1, r6, #2
 80123c2:	e7d5      	b.n	8012370 <__gethex+0xe8>
 80123c4:	f04f 0901 	mov.w	r9, #1
 80123c8:	e7fa      	b.n	80123c0 <__gethex+0x138>
 80123ca:	230a      	movs	r3, #10
 80123cc:	fb03 0202 	mla	r2, r3, r2, r0
 80123d0:	3a10      	subs	r2, #16
 80123d2:	e7d6      	b.n	8012382 <__gethex+0xfa>
 80123d4:	4631      	mov	r1, r6
 80123d6:	e7e1      	b.n	801239c <__gethex+0x114>
 80123d8:	4621      	mov	r1, r4
 80123da:	1bf3      	subs	r3, r6, r7
 80123dc:	3b01      	subs	r3, #1
 80123de:	2b07      	cmp	r3, #7
 80123e0:	dc0a      	bgt.n	80123f8 <__gethex+0x170>
 80123e2:	9802      	ldr	r0, [sp, #8]
 80123e4:	f000 fa7e 	bl	80128e4 <_Balloc>
 80123e8:	4604      	mov	r4, r0
 80123ea:	b940      	cbnz	r0, 80123fe <__gethex+0x176>
 80123ec:	4602      	mov	r2, r0
 80123ee:	21de      	movs	r1, #222	; 0xde
 80123f0:	4b5b      	ldr	r3, [pc, #364]	; (8012560 <__gethex+0x2d8>)
 80123f2:	485c      	ldr	r0, [pc, #368]	; (8012564 <__gethex+0x2dc>)
 80123f4:	f7ff fde2 	bl	8011fbc <__assert_func>
 80123f8:	3101      	adds	r1, #1
 80123fa:	105b      	asrs	r3, r3, #1
 80123fc:	e7ef      	b.n	80123de <__gethex+0x156>
 80123fe:	f04f 0b00 	mov.w	fp, #0
 8012402:	f100 0914 	add.w	r9, r0, #20
 8012406:	f1ca 0301 	rsb	r3, sl, #1
 801240a:	f8cd 9010 	str.w	r9, [sp, #16]
 801240e:	f8cd b004 	str.w	fp, [sp, #4]
 8012412:	9308      	str	r3, [sp, #32]
 8012414:	42b7      	cmp	r7, r6
 8012416:	d33f      	bcc.n	8012498 <__gethex+0x210>
 8012418:	9f04      	ldr	r7, [sp, #16]
 801241a:	9b01      	ldr	r3, [sp, #4]
 801241c:	f847 3b04 	str.w	r3, [r7], #4
 8012420:	eba7 0709 	sub.w	r7, r7, r9
 8012424:	10bf      	asrs	r7, r7, #2
 8012426:	6127      	str	r7, [r4, #16]
 8012428:	4618      	mov	r0, r3
 801242a:	f000 fb4d 	bl	8012ac8 <__hi0bits>
 801242e:	017f      	lsls	r7, r7, #5
 8012430:	f8d8 6000 	ldr.w	r6, [r8]
 8012434:	1a3f      	subs	r7, r7, r0
 8012436:	42b7      	cmp	r7, r6
 8012438:	dd62      	ble.n	8012500 <__gethex+0x278>
 801243a:	1bbf      	subs	r7, r7, r6
 801243c:	4639      	mov	r1, r7
 801243e:	4620      	mov	r0, r4
 8012440:	f000 fee7 	bl	8013212 <__any_on>
 8012444:	4682      	mov	sl, r0
 8012446:	b1a8      	cbz	r0, 8012474 <__gethex+0x1ec>
 8012448:	f04f 0a01 	mov.w	sl, #1
 801244c:	1e7b      	subs	r3, r7, #1
 801244e:	1159      	asrs	r1, r3, #5
 8012450:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012454:	f003 021f 	and.w	r2, r3, #31
 8012458:	fa0a f202 	lsl.w	r2, sl, r2
 801245c:	420a      	tst	r2, r1
 801245e:	d009      	beq.n	8012474 <__gethex+0x1ec>
 8012460:	4553      	cmp	r3, sl
 8012462:	dd05      	ble.n	8012470 <__gethex+0x1e8>
 8012464:	4620      	mov	r0, r4
 8012466:	1eb9      	subs	r1, r7, #2
 8012468:	f000 fed3 	bl	8013212 <__any_on>
 801246c:	2800      	cmp	r0, #0
 801246e:	d144      	bne.n	80124fa <__gethex+0x272>
 8012470:	f04f 0a02 	mov.w	sl, #2
 8012474:	4639      	mov	r1, r7
 8012476:	4620      	mov	r0, r4
 8012478:	f7ff fe9e 	bl	80121b8 <rshift>
 801247c:	443d      	add	r5, r7
 801247e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012482:	42ab      	cmp	r3, r5
 8012484:	da4a      	bge.n	801251c <__gethex+0x294>
 8012486:	4621      	mov	r1, r4
 8012488:	9802      	ldr	r0, [sp, #8]
 801248a:	f000 fa6b 	bl	8012964 <_Bfree>
 801248e:	2300      	movs	r3, #0
 8012490:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012492:	27a3      	movs	r7, #163	; 0xa3
 8012494:	6013      	str	r3, [r2, #0]
 8012496:	e789      	b.n	80123ac <__gethex+0x124>
 8012498:	1e73      	subs	r3, r6, #1
 801249a:	9a06      	ldr	r2, [sp, #24]
 801249c:	9307      	str	r3, [sp, #28]
 801249e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80124a2:	4293      	cmp	r3, r2
 80124a4:	d019      	beq.n	80124da <__gethex+0x252>
 80124a6:	f1bb 0f20 	cmp.w	fp, #32
 80124aa:	d107      	bne.n	80124bc <__gethex+0x234>
 80124ac:	9b04      	ldr	r3, [sp, #16]
 80124ae:	9a01      	ldr	r2, [sp, #4]
 80124b0:	f843 2b04 	str.w	r2, [r3], #4
 80124b4:	9304      	str	r3, [sp, #16]
 80124b6:	2300      	movs	r3, #0
 80124b8:	469b      	mov	fp, r3
 80124ba:	9301      	str	r3, [sp, #4]
 80124bc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80124c0:	f7ff fecd 	bl	801225e <__hexdig_fun>
 80124c4:	9b01      	ldr	r3, [sp, #4]
 80124c6:	f000 000f 	and.w	r0, r0, #15
 80124ca:	fa00 f00b 	lsl.w	r0, r0, fp
 80124ce:	4303      	orrs	r3, r0
 80124d0:	9301      	str	r3, [sp, #4]
 80124d2:	f10b 0b04 	add.w	fp, fp, #4
 80124d6:	9b07      	ldr	r3, [sp, #28]
 80124d8:	e00d      	b.n	80124f6 <__gethex+0x26e>
 80124da:	9a08      	ldr	r2, [sp, #32]
 80124dc:	1e73      	subs	r3, r6, #1
 80124de:	4413      	add	r3, r2
 80124e0:	42bb      	cmp	r3, r7
 80124e2:	d3e0      	bcc.n	80124a6 <__gethex+0x21e>
 80124e4:	4618      	mov	r0, r3
 80124e6:	4652      	mov	r2, sl
 80124e8:	9903      	ldr	r1, [sp, #12]
 80124ea:	9309      	str	r3, [sp, #36]	; 0x24
 80124ec:	f001 fb2c 	bl	8013b48 <strncmp>
 80124f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124f2:	2800      	cmp	r0, #0
 80124f4:	d1d7      	bne.n	80124a6 <__gethex+0x21e>
 80124f6:	461e      	mov	r6, r3
 80124f8:	e78c      	b.n	8012414 <__gethex+0x18c>
 80124fa:	f04f 0a03 	mov.w	sl, #3
 80124fe:	e7b9      	b.n	8012474 <__gethex+0x1ec>
 8012500:	da09      	bge.n	8012516 <__gethex+0x28e>
 8012502:	1bf7      	subs	r7, r6, r7
 8012504:	4621      	mov	r1, r4
 8012506:	463a      	mov	r2, r7
 8012508:	9802      	ldr	r0, [sp, #8]
 801250a:	f000 fc43 	bl	8012d94 <__lshift>
 801250e:	4604      	mov	r4, r0
 8012510:	1bed      	subs	r5, r5, r7
 8012512:	f100 0914 	add.w	r9, r0, #20
 8012516:	f04f 0a00 	mov.w	sl, #0
 801251a:	e7b0      	b.n	801247e <__gethex+0x1f6>
 801251c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012520:	42a8      	cmp	r0, r5
 8012522:	dd72      	ble.n	801260a <__gethex+0x382>
 8012524:	1b45      	subs	r5, r0, r5
 8012526:	42ae      	cmp	r6, r5
 8012528:	dc35      	bgt.n	8012596 <__gethex+0x30e>
 801252a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801252e:	2b02      	cmp	r3, #2
 8012530:	d029      	beq.n	8012586 <__gethex+0x2fe>
 8012532:	2b03      	cmp	r3, #3
 8012534:	d02b      	beq.n	801258e <__gethex+0x306>
 8012536:	2b01      	cmp	r3, #1
 8012538:	d11c      	bne.n	8012574 <__gethex+0x2ec>
 801253a:	42ae      	cmp	r6, r5
 801253c:	d11a      	bne.n	8012574 <__gethex+0x2ec>
 801253e:	2e01      	cmp	r6, #1
 8012540:	d112      	bne.n	8012568 <__gethex+0x2e0>
 8012542:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012546:	9a05      	ldr	r2, [sp, #20]
 8012548:	2762      	movs	r7, #98	; 0x62
 801254a:	6013      	str	r3, [r2, #0]
 801254c:	2301      	movs	r3, #1
 801254e:	6123      	str	r3, [r4, #16]
 8012550:	f8c9 3000 	str.w	r3, [r9]
 8012554:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012556:	601c      	str	r4, [r3, #0]
 8012558:	e728      	b.n	80123ac <__gethex+0x124>
 801255a:	bf00      	nop
 801255c:	08014e78 	.word	0x08014e78
 8012560:	08014e01 	.word	0x08014e01
 8012564:	08014e12 	.word	0x08014e12
 8012568:	4620      	mov	r0, r4
 801256a:	1e71      	subs	r1, r6, #1
 801256c:	f000 fe51 	bl	8013212 <__any_on>
 8012570:	2800      	cmp	r0, #0
 8012572:	d1e6      	bne.n	8012542 <__gethex+0x2ba>
 8012574:	4621      	mov	r1, r4
 8012576:	9802      	ldr	r0, [sp, #8]
 8012578:	f000 f9f4 	bl	8012964 <_Bfree>
 801257c:	2300      	movs	r3, #0
 801257e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012580:	2750      	movs	r7, #80	; 0x50
 8012582:	6013      	str	r3, [r2, #0]
 8012584:	e712      	b.n	80123ac <__gethex+0x124>
 8012586:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012588:	2b00      	cmp	r3, #0
 801258a:	d1f3      	bne.n	8012574 <__gethex+0x2ec>
 801258c:	e7d9      	b.n	8012542 <__gethex+0x2ba>
 801258e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012590:	2b00      	cmp	r3, #0
 8012592:	d1d6      	bne.n	8012542 <__gethex+0x2ba>
 8012594:	e7ee      	b.n	8012574 <__gethex+0x2ec>
 8012596:	1e6f      	subs	r7, r5, #1
 8012598:	f1ba 0f00 	cmp.w	sl, #0
 801259c:	d132      	bne.n	8012604 <__gethex+0x37c>
 801259e:	b127      	cbz	r7, 80125aa <__gethex+0x322>
 80125a0:	4639      	mov	r1, r7
 80125a2:	4620      	mov	r0, r4
 80125a4:	f000 fe35 	bl	8013212 <__any_on>
 80125a8:	4682      	mov	sl, r0
 80125aa:	2101      	movs	r1, #1
 80125ac:	117b      	asrs	r3, r7, #5
 80125ae:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80125b2:	f007 071f 	and.w	r7, r7, #31
 80125b6:	fa01 f707 	lsl.w	r7, r1, r7
 80125ba:	421f      	tst	r7, r3
 80125bc:	f04f 0702 	mov.w	r7, #2
 80125c0:	4629      	mov	r1, r5
 80125c2:	4620      	mov	r0, r4
 80125c4:	bf18      	it	ne
 80125c6:	f04a 0a02 	orrne.w	sl, sl, #2
 80125ca:	1b76      	subs	r6, r6, r5
 80125cc:	f7ff fdf4 	bl	80121b8 <rshift>
 80125d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80125d4:	f1ba 0f00 	cmp.w	sl, #0
 80125d8:	d048      	beq.n	801266c <__gethex+0x3e4>
 80125da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80125de:	2b02      	cmp	r3, #2
 80125e0:	d015      	beq.n	801260e <__gethex+0x386>
 80125e2:	2b03      	cmp	r3, #3
 80125e4:	d017      	beq.n	8012616 <__gethex+0x38e>
 80125e6:	2b01      	cmp	r3, #1
 80125e8:	d109      	bne.n	80125fe <__gethex+0x376>
 80125ea:	f01a 0f02 	tst.w	sl, #2
 80125ee:	d006      	beq.n	80125fe <__gethex+0x376>
 80125f0:	f8d9 0000 	ldr.w	r0, [r9]
 80125f4:	ea4a 0a00 	orr.w	sl, sl, r0
 80125f8:	f01a 0f01 	tst.w	sl, #1
 80125fc:	d10e      	bne.n	801261c <__gethex+0x394>
 80125fe:	f047 0710 	orr.w	r7, r7, #16
 8012602:	e033      	b.n	801266c <__gethex+0x3e4>
 8012604:	f04f 0a01 	mov.w	sl, #1
 8012608:	e7cf      	b.n	80125aa <__gethex+0x322>
 801260a:	2701      	movs	r7, #1
 801260c:	e7e2      	b.n	80125d4 <__gethex+0x34c>
 801260e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012610:	f1c3 0301 	rsb	r3, r3, #1
 8012614:	9315      	str	r3, [sp, #84]	; 0x54
 8012616:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012618:	2b00      	cmp	r3, #0
 801261a:	d0f0      	beq.n	80125fe <__gethex+0x376>
 801261c:	f04f 0c00 	mov.w	ip, #0
 8012620:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012624:	f104 0314 	add.w	r3, r4, #20
 8012628:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801262c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012630:	4618      	mov	r0, r3
 8012632:	f853 2b04 	ldr.w	r2, [r3], #4
 8012636:	f1b2 3fff 	cmp.w	r2, #4294967295
 801263a:	d01c      	beq.n	8012676 <__gethex+0x3ee>
 801263c:	3201      	adds	r2, #1
 801263e:	6002      	str	r2, [r0, #0]
 8012640:	2f02      	cmp	r7, #2
 8012642:	f104 0314 	add.w	r3, r4, #20
 8012646:	d13d      	bne.n	80126c4 <__gethex+0x43c>
 8012648:	f8d8 2000 	ldr.w	r2, [r8]
 801264c:	3a01      	subs	r2, #1
 801264e:	42b2      	cmp	r2, r6
 8012650:	d10a      	bne.n	8012668 <__gethex+0x3e0>
 8012652:	2201      	movs	r2, #1
 8012654:	1171      	asrs	r1, r6, #5
 8012656:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801265a:	f006 061f 	and.w	r6, r6, #31
 801265e:	fa02 f606 	lsl.w	r6, r2, r6
 8012662:	421e      	tst	r6, r3
 8012664:	bf18      	it	ne
 8012666:	4617      	movne	r7, r2
 8012668:	f047 0720 	orr.w	r7, r7, #32
 801266c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801266e:	601c      	str	r4, [r3, #0]
 8012670:	9b05      	ldr	r3, [sp, #20]
 8012672:	601d      	str	r5, [r3, #0]
 8012674:	e69a      	b.n	80123ac <__gethex+0x124>
 8012676:	4299      	cmp	r1, r3
 8012678:	f843 cc04 	str.w	ip, [r3, #-4]
 801267c:	d8d8      	bhi.n	8012630 <__gethex+0x3a8>
 801267e:	68a3      	ldr	r3, [r4, #8]
 8012680:	459b      	cmp	fp, r3
 8012682:	db17      	blt.n	80126b4 <__gethex+0x42c>
 8012684:	6861      	ldr	r1, [r4, #4]
 8012686:	9802      	ldr	r0, [sp, #8]
 8012688:	3101      	adds	r1, #1
 801268a:	f000 f92b 	bl	80128e4 <_Balloc>
 801268e:	4681      	mov	r9, r0
 8012690:	b918      	cbnz	r0, 801269a <__gethex+0x412>
 8012692:	4602      	mov	r2, r0
 8012694:	2184      	movs	r1, #132	; 0x84
 8012696:	4b19      	ldr	r3, [pc, #100]	; (80126fc <__gethex+0x474>)
 8012698:	e6ab      	b.n	80123f2 <__gethex+0x16a>
 801269a:	6922      	ldr	r2, [r4, #16]
 801269c:	f104 010c 	add.w	r1, r4, #12
 80126a0:	3202      	adds	r2, #2
 80126a2:	0092      	lsls	r2, r2, #2
 80126a4:	300c      	adds	r0, #12
 80126a6:	f7fe fb3d 	bl	8010d24 <memcpy>
 80126aa:	4621      	mov	r1, r4
 80126ac:	9802      	ldr	r0, [sp, #8]
 80126ae:	f000 f959 	bl	8012964 <_Bfree>
 80126b2:	464c      	mov	r4, r9
 80126b4:	6923      	ldr	r3, [r4, #16]
 80126b6:	1c5a      	adds	r2, r3, #1
 80126b8:	6122      	str	r2, [r4, #16]
 80126ba:	2201      	movs	r2, #1
 80126bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80126c0:	615a      	str	r2, [r3, #20]
 80126c2:	e7bd      	b.n	8012640 <__gethex+0x3b8>
 80126c4:	6922      	ldr	r2, [r4, #16]
 80126c6:	455a      	cmp	r2, fp
 80126c8:	dd0b      	ble.n	80126e2 <__gethex+0x45a>
 80126ca:	2101      	movs	r1, #1
 80126cc:	4620      	mov	r0, r4
 80126ce:	f7ff fd73 	bl	80121b8 <rshift>
 80126d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80126d6:	3501      	adds	r5, #1
 80126d8:	42ab      	cmp	r3, r5
 80126da:	f6ff aed4 	blt.w	8012486 <__gethex+0x1fe>
 80126de:	2701      	movs	r7, #1
 80126e0:	e7c2      	b.n	8012668 <__gethex+0x3e0>
 80126e2:	f016 061f 	ands.w	r6, r6, #31
 80126e6:	d0fa      	beq.n	80126de <__gethex+0x456>
 80126e8:	4453      	add	r3, sl
 80126ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80126ee:	f000 f9eb 	bl	8012ac8 <__hi0bits>
 80126f2:	f1c6 0620 	rsb	r6, r6, #32
 80126f6:	42b0      	cmp	r0, r6
 80126f8:	dbe7      	blt.n	80126ca <__gethex+0x442>
 80126fa:	e7f0      	b.n	80126de <__gethex+0x456>
 80126fc:	08014e01 	.word	0x08014e01

08012700 <L_shift>:
 8012700:	f1c2 0208 	rsb	r2, r2, #8
 8012704:	0092      	lsls	r2, r2, #2
 8012706:	b570      	push	{r4, r5, r6, lr}
 8012708:	f1c2 0620 	rsb	r6, r2, #32
 801270c:	6843      	ldr	r3, [r0, #4]
 801270e:	6804      	ldr	r4, [r0, #0]
 8012710:	fa03 f506 	lsl.w	r5, r3, r6
 8012714:	432c      	orrs	r4, r5
 8012716:	40d3      	lsrs	r3, r2
 8012718:	6004      	str	r4, [r0, #0]
 801271a:	f840 3f04 	str.w	r3, [r0, #4]!
 801271e:	4288      	cmp	r0, r1
 8012720:	d3f4      	bcc.n	801270c <L_shift+0xc>
 8012722:	bd70      	pop	{r4, r5, r6, pc}

08012724 <__match>:
 8012724:	b530      	push	{r4, r5, lr}
 8012726:	6803      	ldr	r3, [r0, #0]
 8012728:	3301      	adds	r3, #1
 801272a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801272e:	b914      	cbnz	r4, 8012736 <__match+0x12>
 8012730:	6003      	str	r3, [r0, #0]
 8012732:	2001      	movs	r0, #1
 8012734:	bd30      	pop	{r4, r5, pc}
 8012736:	f813 2b01 	ldrb.w	r2, [r3], #1
 801273a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801273e:	2d19      	cmp	r5, #25
 8012740:	bf98      	it	ls
 8012742:	3220      	addls	r2, #32
 8012744:	42a2      	cmp	r2, r4
 8012746:	d0f0      	beq.n	801272a <__match+0x6>
 8012748:	2000      	movs	r0, #0
 801274a:	e7f3      	b.n	8012734 <__match+0x10>

0801274c <__hexnan>:
 801274c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012750:	2500      	movs	r5, #0
 8012752:	680b      	ldr	r3, [r1, #0]
 8012754:	4682      	mov	sl, r0
 8012756:	115e      	asrs	r6, r3, #5
 8012758:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801275c:	f013 031f 	ands.w	r3, r3, #31
 8012760:	bf18      	it	ne
 8012762:	3604      	addne	r6, #4
 8012764:	1f37      	subs	r7, r6, #4
 8012766:	46b9      	mov	r9, r7
 8012768:	463c      	mov	r4, r7
 801276a:	46ab      	mov	fp, r5
 801276c:	b087      	sub	sp, #28
 801276e:	4690      	mov	r8, r2
 8012770:	6802      	ldr	r2, [r0, #0]
 8012772:	9301      	str	r3, [sp, #4]
 8012774:	f846 5c04 	str.w	r5, [r6, #-4]
 8012778:	9502      	str	r5, [sp, #8]
 801277a:	7851      	ldrb	r1, [r2, #1]
 801277c:	1c53      	adds	r3, r2, #1
 801277e:	9303      	str	r3, [sp, #12]
 8012780:	b341      	cbz	r1, 80127d4 <__hexnan+0x88>
 8012782:	4608      	mov	r0, r1
 8012784:	9205      	str	r2, [sp, #20]
 8012786:	9104      	str	r1, [sp, #16]
 8012788:	f7ff fd69 	bl	801225e <__hexdig_fun>
 801278c:	2800      	cmp	r0, #0
 801278e:	d14f      	bne.n	8012830 <__hexnan+0xe4>
 8012790:	9904      	ldr	r1, [sp, #16]
 8012792:	9a05      	ldr	r2, [sp, #20]
 8012794:	2920      	cmp	r1, #32
 8012796:	d818      	bhi.n	80127ca <__hexnan+0x7e>
 8012798:	9b02      	ldr	r3, [sp, #8]
 801279a:	459b      	cmp	fp, r3
 801279c:	dd13      	ble.n	80127c6 <__hexnan+0x7a>
 801279e:	454c      	cmp	r4, r9
 80127a0:	d206      	bcs.n	80127b0 <__hexnan+0x64>
 80127a2:	2d07      	cmp	r5, #7
 80127a4:	dc04      	bgt.n	80127b0 <__hexnan+0x64>
 80127a6:	462a      	mov	r2, r5
 80127a8:	4649      	mov	r1, r9
 80127aa:	4620      	mov	r0, r4
 80127ac:	f7ff ffa8 	bl	8012700 <L_shift>
 80127b0:	4544      	cmp	r4, r8
 80127b2:	d950      	bls.n	8012856 <__hexnan+0x10a>
 80127b4:	2300      	movs	r3, #0
 80127b6:	f1a4 0904 	sub.w	r9, r4, #4
 80127ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80127be:	461d      	mov	r5, r3
 80127c0:	464c      	mov	r4, r9
 80127c2:	f8cd b008 	str.w	fp, [sp, #8]
 80127c6:	9a03      	ldr	r2, [sp, #12]
 80127c8:	e7d7      	b.n	801277a <__hexnan+0x2e>
 80127ca:	2929      	cmp	r1, #41	; 0x29
 80127cc:	d156      	bne.n	801287c <__hexnan+0x130>
 80127ce:	3202      	adds	r2, #2
 80127d0:	f8ca 2000 	str.w	r2, [sl]
 80127d4:	f1bb 0f00 	cmp.w	fp, #0
 80127d8:	d050      	beq.n	801287c <__hexnan+0x130>
 80127da:	454c      	cmp	r4, r9
 80127dc:	d206      	bcs.n	80127ec <__hexnan+0xa0>
 80127de:	2d07      	cmp	r5, #7
 80127e0:	dc04      	bgt.n	80127ec <__hexnan+0xa0>
 80127e2:	462a      	mov	r2, r5
 80127e4:	4649      	mov	r1, r9
 80127e6:	4620      	mov	r0, r4
 80127e8:	f7ff ff8a 	bl	8012700 <L_shift>
 80127ec:	4544      	cmp	r4, r8
 80127ee:	d934      	bls.n	801285a <__hexnan+0x10e>
 80127f0:	4623      	mov	r3, r4
 80127f2:	f1a8 0204 	sub.w	r2, r8, #4
 80127f6:	f853 1b04 	ldr.w	r1, [r3], #4
 80127fa:	429f      	cmp	r7, r3
 80127fc:	f842 1f04 	str.w	r1, [r2, #4]!
 8012800:	d2f9      	bcs.n	80127f6 <__hexnan+0xaa>
 8012802:	1b3b      	subs	r3, r7, r4
 8012804:	f023 0303 	bic.w	r3, r3, #3
 8012808:	3304      	adds	r3, #4
 801280a:	3401      	adds	r4, #1
 801280c:	3e03      	subs	r6, #3
 801280e:	42b4      	cmp	r4, r6
 8012810:	bf88      	it	hi
 8012812:	2304      	movhi	r3, #4
 8012814:	2200      	movs	r2, #0
 8012816:	4443      	add	r3, r8
 8012818:	f843 2b04 	str.w	r2, [r3], #4
 801281c:	429f      	cmp	r7, r3
 801281e:	d2fb      	bcs.n	8012818 <__hexnan+0xcc>
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	b91b      	cbnz	r3, 801282c <__hexnan+0xe0>
 8012824:	4547      	cmp	r7, r8
 8012826:	d127      	bne.n	8012878 <__hexnan+0x12c>
 8012828:	2301      	movs	r3, #1
 801282a:	603b      	str	r3, [r7, #0]
 801282c:	2005      	movs	r0, #5
 801282e:	e026      	b.n	801287e <__hexnan+0x132>
 8012830:	3501      	adds	r5, #1
 8012832:	2d08      	cmp	r5, #8
 8012834:	f10b 0b01 	add.w	fp, fp, #1
 8012838:	dd06      	ble.n	8012848 <__hexnan+0xfc>
 801283a:	4544      	cmp	r4, r8
 801283c:	d9c3      	bls.n	80127c6 <__hexnan+0x7a>
 801283e:	2300      	movs	r3, #0
 8012840:	2501      	movs	r5, #1
 8012842:	f844 3c04 	str.w	r3, [r4, #-4]
 8012846:	3c04      	subs	r4, #4
 8012848:	6822      	ldr	r2, [r4, #0]
 801284a:	f000 000f 	and.w	r0, r0, #15
 801284e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012852:	6022      	str	r2, [r4, #0]
 8012854:	e7b7      	b.n	80127c6 <__hexnan+0x7a>
 8012856:	2508      	movs	r5, #8
 8012858:	e7b5      	b.n	80127c6 <__hexnan+0x7a>
 801285a:	9b01      	ldr	r3, [sp, #4]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d0df      	beq.n	8012820 <__hexnan+0xd4>
 8012860:	f04f 32ff 	mov.w	r2, #4294967295
 8012864:	f1c3 0320 	rsb	r3, r3, #32
 8012868:	fa22 f303 	lsr.w	r3, r2, r3
 801286c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012870:	401a      	ands	r2, r3
 8012872:	f846 2c04 	str.w	r2, [r6, #-4]
 8012876:	e7d3      	b.n	8012820 <__hexnan+0xd4>
 8012878:	3f04      	subs	r7, #4
 801287a:	e7d1      	b.n	8012820 <__hexnan+0xd4>
 801287c:	2004      	movs	r0, #4
 801287e:	b007      	add	sp, #28
 8012880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012884 <_lseek_r>:
 8012884:	b538      	push	{r3, r4, r5, lr}
 8012886:	4604      	mov	r4, r0
 8012888:	4608      	mov	r0, r1
 801288a:	4611      	mov	r1, r2
 801288c:	2200      	movs	r2, #0
 801288e:	4d05      	ldr	r5, [pc, #20]	; (80128a4 <_lseek_r+0x20>)
 8012890:	602a      	str	r2, [r5, #0]
 8012892:	461a      	mov	r2, r3
 8012894:	f7f2 fe68 	bl	8005568 <_lseek>
 8012898:	1c43      	adds	r3, r0, #1
 801289a:	d102      	bne.n	80128a2 <_lseek_r+0x1e>
 801289c:	682b      	ldr	r3, [r5, #0]
 801289e:	b103      	cbz	r3, 80128a2 <_lseek_r+0x1e>
 80128a0:	6023      	str	r3, [r4, #0]
 80128a2:	bd38      	pop	{r3, r4, r5, pc}
 80128a4:	2000a760 	.word	0x2000a760

080128a8 <__ascii_mbtowc>:
 80128a8:	b082      	sub	sp, #8
 80128aa:	b901      	cbnz	r1, 80128ae <__ascii_mbtowc+0x6>
 80128ac:	a901      	add	r1, sp, #4
 80128ae:	b142      	cbz	r2, 80128c2 <__ascii_mbtowc+0x1a>
 80128b0:	b14b      	cbz	r3, 80128c6 <__ascii_mbtowc+0x1e>
 80128b2:	7813      	ldrb	r3, [r2, #0]
 80128b4:	600b      	str	r3, [r1, #0]
 80128b6:	7812      	ldrb	r2, [r2, #0]
 80128b8:	1e10      	subs	r0, r2, #0
 80128ba:	bf18      	it	ne
 80128bc:	2001      	movne	r0, #1
 80128be:	b002      	add	sp, #8
 80128c0:	4770      	bx	lr
 80128c2:	4610      	mov	r0, r2
 80128c4:	e7fb      	b.n	80128be <__ascii_mbtowc+0x16>
 80128c6:	f06f 0001 	mvn.w	r0, #1
 80128ca:	e7f8      	b.n	80128be <__ascii_mbtowc+0x16>

080128cc <__malloc_lock>:
 80128cc:	4801      	ldr	r0, [pc, #4]	; (80128d4 <__malloc_lock+0x8>)
 80128ce:	f7fe ba16 	b.w	8010cfe <__retarget_lock_acquire_recursive>
 80128d2:	bf00      	nop
 80128d4:	2000a754 	.word	0x2000a754

080128d8 <__malloc_unlock>:
 80128d8:	4801      	ldr	r0, [pc, #4]	; (80128e0 <__malloc_unlock+0x8>)
 80128da:	f7fe ba11 	b.w	8010d00 <__retarget_lock_release_recursive>
 80128de:	bf00      	nop
 80128e0:	2000a754 	.word	0x2000a754

080128e4 <_Balloc>:
 80128e4:	b570      	push	{r4, r5, r6, lr}
 80128e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80128e8:	4604      	mov	r4, r0
 80128ea:	460d      	mov	r5, r1
 80128ec:	b976      	cbnz	r6, 801290c <_Balloc+0x28>
 80128ee:	2010      	movs	r0, #16
 80128f0:	f7fe fa08 	bl	8010d04 <malloc>
 80128f4:	4602      	mov	r2, r0
 80128f6:	6260      	str	r0, [r4, #36]	; 0x24
 80128f8:	b920      	cbnz	r0, 8012904 <_Balloc+0x20>
 80128fa:	2166      	movs	r1, #102	; 0x66
 80128fc:	4b17      	ldr	r3, [pc, #92]	; (801295c <_Balloc+0x78>)
 80128fe:	4818      	ldr	r0, [pc, #96]	; (8012960 <_Balloc+0x7c>)
 8012900:	f7ff fb5c 	bl	8011fbc <__assert_func>
 8012904:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012908:	6006      	str	r6, [r0, #0]
 801290a:	60c6      	str	r6, [r0, #12]
 801290c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801290e:	68f3      	ldr	r3, [r6, #12]
 8012910:	b183      	cbz	r3, 8012934 <_Balloc+0x50>
 8012912:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012914:	68db      	ldr	r3, [r3, #12]
 8012916:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801291a:	b9b8      	cbnz	r0, 801294c <_Balloc+0x68>
 801291c:	2101      	movs	r1, #1
 801291e:	fa01 f605 	lsl.w	r6, r1, r5
 8012922:	1d72      	adds	r2, r6, #5
 8012924:	4620      	mov	r0, r4
 8012926:	0092      	lsls	r2, r2, #2
 8012928:	f000 fc94 	bl	8013254 <_calloc_r>
 801292c:	b160      	cbz	r0, 8012948 <_Balloc+0x64>
 801292e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012932:	e00e      	b.n	8012952 <_Balloc+0x6e>
 8012934:	2221      	movs	r2, #33	; 0x21
 8012936:	2104      	movs	r1, #4
 8012938:	4620      	mov	r0, r4
 801293a:	f000 fc8b 	bl	8013254 <_calloc_r>
 801293e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012940:	60f0      	str	r0, [r6, #12]
 8012942:	68db      	ldr	r3, [r3, #12]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d1e4      	bne.n	8012912 <_Balloc+0x2e>
 8012948:	2000      	movs	r0, #0
 801294a:	bd70      	pop	{r4, r5, r6, pc}
 801294c:	6802      	ldr	r2, [r0, #0]
 801294e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012952:	2300      	movs	r3, #0
 8012954:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012958:	e7f7      	b.n	801294a <_Balloc+0x66>
 801295a:	bf00      	nop
 801295c:	08014c50 	.word	0x08014c50
 8012960:	08014e8c 	.word	0x08014e8c

08012964 <_Bfree>:
 8012964:	b570      	push	{r4, r5, r6, lr}
 8012966:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012968:	4605      	mov	r5, r0
 801296a:	460c      	mov	r4, r1
 801296c:	b976      	cbnz	r6, 801298c <_Bfree+0x28>
 801296e:	2010      	movs	r0, #16
 8012970:	f7fe f9c8 	bl	8010d04 <malloc>
 8012974:	4602      	mov	r2, r0
 8012976:	6268      	str	r0, [r5, #36]	; 0x24
 8012978:	b920      	cbnz	r0, 8012984 <_Bfree+0x20>
 801297a:	218a      	movs	r1, #138	; 0x8a
 801297c:	4b08      	ldr	r3, [pc, #32]	; (80129a0 <_Bfree+0x3c>)
 801297e:	4809      	ldr	r0, [pc, #36]	; (80129a4 <_Bfree+0x40>)
 8012980:	f7ff fb1c 	bl	8011fbc <__assert_func>
 8012984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012988:	6006      	str	r6, [r0, #0]
 801298a:	60c6      	str	r6, [r0, #12]
 801298c:	b13c      	cbz	r4, 801299e <_Bfree+0x3a>
 801298e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012990:	6862      	ldr	r2, [r4, #4]
 8012992:	68db      	ldr	r3, [r3, #12]
 8012994:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012998:	6021      	str	r1, [r4, #0]
 801299a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801299e:	bd70      	pop	{r4, r5, r6, pc}
 80129a0:	08014c50 	.word	0x08014c50
 80129a4:	08014e8c 	.word	0x08014e8c

080129a8 <__multadd>:
 80129a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129ac:	4607      	mov	r7, r0
 80129ae:	460c      	mov	r4, r1
 80129b0:	461e      	mov	r6, r3
 80129b2:	2000      	movs	r0, #0
 80129b4:	690d      	ldr	r5, [r1, #16]
 80129b6:	f101 0c14 	add.w	ip, r1, #20
 80129ba:	f8dc 3000 	ldr.w	r3, [ip]
 80129be:	3001      	adds	r0, #1
 80129c0:	b299      	uxth	r1, r3
 80129c2:	fb02 6101 	mla	r1, r2, r1, r6
 80129c6:	0c1e      	lsrs	r6, r3, #16
 80129c8:	0c0b      	lsrs	r3, r1, #16
 80129ca:	fb02 3306 	mla	r3, r2, r6, r3
 80129ce:	b289      	uxth	r1, r1
 80129d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80129d4:	4285      	cmp	r5, r0
 80129d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80129da:	f84c 1b04 	str.w	r1, [ip], #4
 80129de:	dcec      	bgt.n	80129ba <__multadd+0x12>
 80129e0:	b30e      	cbz	r6, 8012a26 <__multadd+0x7e>
 80129e2:	68a3      	ldr	r3, [r4, #8]
 80129e4:	42ab      	cmp	r3, r5
 80129e6:	dc19      	bgt.n	8012a1c <__multadd+0x74>
 80129e8:	6861      	ldr	r1, [r4, #4]
 80129ea:	4638      	mov	r0, r7
 80129ec:	3101      	adds	r1, #1
 80129ee:	f7ff ff79 	bl	80128e4 <_Balloc>
 80129f2:	4680      	mov	r8, r0
 80129f4:	b928      	cbnz	r0, 8012a02 <__multadd+0x5a>
 80129f6:	4602      	mov	r2, r0
 80129f8:	21b5      	movs	r1, #181	; 0xb5
 80129fa:	4b0c      	ldr	r3, [pc, #48]	; (8012a2c <__multadd+0x84>)
 80129fc:	480c      	ldr	r0, [pc, #48]	; (8012a30 <__multadd+0x88>)
 80129fe:	f7ff fadd 	bl	8011fbc <__assert_func>
 8012a02:	6922      	ldr	r2, [r4, #16]
 8012a04:	f104 010c 	add.w	r1, r4, #12
 8012a08:	3202      	adds	r2, #2
 8012a0a:	0092      	lsls	r2, r2, #2
 8012a0c:	300c      	adds	r0, #12
 8012a0e:	f7fe f989 	bl	8010d24 <memcpy>
 8012a12:	4621      	mov	r1, r4
 8012a14:	4638      	mov	r0, r7
 8012a16:	f7ff ffa5 	bl	8012964 <_Bfree>
 8012a1a:	4644      	mov	r4, r8
 8012a1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012a20:	3501      	adds	r5, #1
 8012a22:	615e      	str	r6, [r3, #20]
 8012a24:	6125      	str	r5, [r4, #16]
 8012a26:	4620      	mov	r0, r4
 8012a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a2c:	08014e01 	.word	0x08014e01
 8012a30:	08014e8c 	.word	0x08014e8c

08012a34 <__s2b>:
 8012a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a38:	4615      	mov	r5, r2
 8012a3a:	2209      	movs	r2, #9
 8012a3c:	461f      	mov	r7, r3
 8012a3e:	3308      	adds	r3, #8
 8012a40:	460c      	mov	r4, r1
 8012a42:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a46:	4606      	mov	r6, r0
 8012a48:	2201      	movs	r2, #1
 8012a4a:	2100      	movs	r1, #0
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	db09      	blt.n	8012a64 <__s2b+0x30>
 8012a50:	4630      	mov	r0, r6
 8012a52:	f7ff ff47 	bl	80128e4 <_Balloc>
 8012a56:	b940      	cbnz	r0, 8012a6a <__s2b+0x36>
 8012a58:	4602      	mov	r2, r0
 8012a5a:	21ce      	movs	r1, #206	; 0xce
 8012a5c:	4b18      	ldr	r3, [pc, #96]	; (8012ac0 <__s2b+0x8c>)
 8012a5e:	4819      	ldr	r0, [pc, #100]	; (8012ac4 <__s2b+0x90>)
 8012a60:	f7ff faac 	bl	8011fbc <__assert_func>
 8012a64:	0052      	lsls	r2, r2, #1
 8012a66:	3101      	adds	r1, #1
 8012a68:	e7f0      	b.n	8012a4c <__s2b+0x18>
 8012a6a:	9b08      	ldr	r3, [sp, #32]
 8012a6c:	2d09      	cmp	r5, #9
 8012a6e:	6143      	str	r3, [r0, #20]
 8012a70:	f04f 0301 	mov.w	r3, #1
 8012a74:	6103      	str	r3, [r0, #16]
 8012a76:	dd16      	ble.n	8012aa6 <__s2b+0x72>
 8012a78:	f104 0909 	add.w	r9, r4, #9
 8012a7c:	46c8      	mov	r8, r9
 8012a7e:	442c      	add	r4, r5
 8012a80:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012a84:	4601      	mov	r1, r0
 8012a86:	220a      	movs	r2, #10
 8012a88:	4630      	mov	r0, r6
 8012a8a:	3b30      	subs	r3, #48	; 0x30
 8012a8c:	f7ff ff8c 	bl	80129a8 <__multadd>
 8012a90:	45a0      	cmp	r8, r4
 8012a92:	d1f5      	bne.n	8012a80 <__s2b+0x4c>
 8012a94:	f1a5 0408 	sub.w	r4, r5, #8
 8012a98:	444c      	add	r4, r9
 8012a9a:	1b2d      	subs	r5, r5, r4
 8012a9c:	1963      	adds	r3, r4, r5
 8012a9e:	42bb      	cmp	r3, r7
 8012aa0:	db04      	blt.n	8012aac <__s2b+0x78>
 8012aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012aa6:	2509      	movs	r5, #9
 8012aa8:	340a      	adds	r4, #10
 8012aaa:	e7f6      	b.n	8012a9a <__s2b+0x66>
 8012aac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012ab0:	4601      	mov	r1, r0
 8012ab2:	220a      	movs	r2, #10
 8012ab4:	4630      	mov	r0, r6
 8012ab6:	3b30      	subs	r3, #48	; 0x30
 8012ab8:	f7ff ff76 	bl	80129a8 <__multadd>
 8012abc:	e7ee      	b.n	8012a9c <__s2b+0x68>
 8012abe:	bf00      	nop
 8012ac0:	08014e01 	.word	0x08014e01
 8012ac4:	08014e8c 	.word	0x08014e8c

08012ac8 <__hi0bits>:
 8012ac8:	0c02      	lsrs	r2, r0, #16
 8012aca:	0412      	lsls	r2, r2, #16
 8012acc:	4603      	mov	r3, r0
 8012ace:	b9ca      	cbnz	r2, 8012b04 <__hi0bits+0x3c>
 8012ad0:	0403      	lsls	r3, r0, #16
 8012ad2:	2010      	movs	r0, #16
 8012ad4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012ad8:	bf04      	itt	eq
 8012ada:	021b      	lsleq	r3, r3, #8
 8012adc:	3008      	addeq	r0, #8
 8012ade:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012ae2:	bf04      	itt	eq
 8012ae4:	011b      	lsleq	r3, r3, #4
 8012ae6:	3004      	addeq	r0, #4
 8012ae8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012aec:	bf04      	itt	eq
 8012aee:	009b      	lsleq	r3, r3, #2
 8012af0:	3002      	addeq	r0, #2
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	db05      	blt.n	8012b02 <__hi0bits+0x3a>
 8012af6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8012afa:	f100 0001 	add.w	r0, r0, #1
 8012afe:	bf08      	it	eq
 8012b00:	2020      	moveq	r0, #32
 8012b02:	4770      	bx	lr
 8012b04:	2000      	movs	r0, #0
 8012b06:	e7e5      	b.n	8012ad4 <__hi0bits+0xc>

08012b08 <__lo0bits>:
 8012b08:	6803      	ldr	r3, [r0, #0]
 8012b0a:	4602      	mov	r2, r0
 8012b0c:	f013 0007 	ands.w	r0, r3, #7
 8012b10:	d00b      	beq.n	8012b2a <__lo0bits+0x22>
 8012b12:	07d9      	lsls	r1, r3, #31
 8012b14:	d421      	bmi.n	8012b5a <__lo0bits+0x52>
 8012b16:	0798      	lsls	r0, r3, #30
 8012b18:	bf49      	itett	mi
 8012b1a:	085b      	lsrmi	r3, r3, #1
 8012b1c:	089b      	lsrpl	r3, r3, #2
 8012b1e:	2001      	movmi	r0, #1
 8012b20:	6013      	strmi	r3, [r2, #0]
 8012b22:	bf5c      	itt	pl
 8012b24:	2002      	movpl	r0, #2
 8012b26:	6013      	strpl	r3, [r2, #0]
 8012b28:	4770      	bx	lr
 8012b2a:	b299      	uxth	r1, r3
 8012b2c:	b909      	cbnz	r1, 8012b32 <__lo0bits+0x2a>
 8012b2e:	2010      	movs	r0, #16
 8012b30:	0c1b      	lsrs	r3, r3, #16
 8012b32:	b2d9      	uxtb	r1, r3
 8012b34:	b909      	cbnz	r1, 8012b3a <__lo0bits+0x32>
 8012b36:	3008      	adds	r0, #8
 8012b38:	0a1b      	lsrs	r3, r3, #8
 8012b3a:	0719      	lsls	r1, r3, #28
 8012b3c:	bf04      	itt	eq
 8012b3e:	091b      	lsreq	r3, r3, #4
 8012b40:	3004      	addeq	r0, #4
 8012b42:	0799      	lsls	r1, r3, #30
 8012b44:	bf04      	itt	eq
 8012b46:	089b      	lsreq	r3, r3, #2
 8012b48:	3002      	addeq	r0, #2
 8012b4a:	07d9      	lsls	r1, r3, #31
 8012b4c:	d403      	bmi.n	8012b56 <__lo0bits+0x4e>
 8012b4e:	085b      	lsrs	r3, r3, #1
 8012b50:	f100 0001 	add.w	r0, r0, #1
 8012b54:	d003      	beq.n	8012b5e <__lo0bits+0x56>
 8012b56:	6013      	str	r3, [r2, #0]
 8012b58:	4770      	bx	lr
 8012b5a:	2000      	movs	r0, #0
 8012b5c:	4770      	bx	lr
 8012b5e:	2020      	movs	r0, #32
 8012b60:	4770      	bx	lr
	...

08012b64 <__i2b>:
 8012b64:	b510      	push	{r4, lr}
 8012b66:	460c      	mov	r4, r1
 8012b68:	2101      	movs	r1, #1
 8012b6a:	f7ff febb 	bl	80128e4 <_Balloc>
 8012b6e:	4602      	mov	r2, r0
 8012b70:	b928      	cbnz	r0, 8012b7e <__i2b+0x1a>
 8012b72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012b76:	4b04      	ldr	r3, [pc, #16]	; (8012b88 <__i2b+0x24>)
 8012b78:	4804      	ldr	r0, [pc, #16]	; (8012b8c <__i2b+0x28>)
 8012b7a:	f7ff fa1f 	bl	8011fbc <__assert_func>
 8012b7e:	2301      	movs	r3, #1
 8012b80:	6144      	str	r4, [r0, #20]
 8012b82:	6103      	str	r3, [r0, #16]
 8012b84:	bd10      	pop	{r4, pc}
 8012b86:	bf00      	nop
 8012b88:	08014e01 	.word	0x08014e01
 8012b8c:	08014e8c 	.word	0x08014e8c

08012b90 <__multiply>:
 8012b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b94:	4691      	mov	r9, r2
 8012b96:	690a      	ldr	r2, [r1, #16]
 8012b98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012b9c:	460c      	mov	r4, r1
 8012b9e:	429a      	cmp	r2, r3
 8012ba0:	bfbe      	ittt	lt
 8012ba2:	460b      	movlt	r3, r1
 8012ba4:	464c      	movlt	r4, r9
 8012ba6:	4699      	movlt	r9, r3
 8012ba8:	6927      	ldr	r7, [r4, #16]
 8012baa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012bae:	68a3      	ldr	r3, [r4, #8]
 8012bb0:	6861      	ldr	r1, [r4, #4]
 8012bb2:	eb07 060a 	add.w	r6, r7, sl
 8012bb6:	42b3      	cmp	r3, r6
 8012bb8:	b085      	sub	sp, #20
 8012bba:	bfb8      	it	lt
 8012bbc:	3101      	addlt	r1, #1
 8012bbe:	f7ff fe91 	bl	80128e4 <_Balloc>
 8012bc2:	b930      	cbnz	r0, 8012bd2 <__multiply+0x42>
 8012bc4:	4602      	mov	r2, r0
 8012bc6:	f240 115d 	movw	r1, #349	; 0x15d
 8012bca:	4b43      	ldr	r3, [pc, #268]	; (8012cd8 <__multiply+0x148>)
 8012bcc:	4843      	ldr	r0, [pc, #268]	; (8012cdc <__multiply+0x14c>)
 8012bce:	f7ff f9f5 	bl	8011fbc <__assert_func>
 8012bd2:	f100 0514 	add.w	r5, r0, #20
 8012bd6:	462b      	mov	r3, r5
 8012bd8:	2200      	movs	r2, #0
 8012bda:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012bde:	4543      	cmp	r3, r8
 8012be0:	d321      	bcc.n	8012c26 <__multiply+0x96>
 8012be2:	f104 0314 	add.w	r3, r4, #20
 8012be6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012bea:	f109 0314 	add.w	r3, r9, #20
 8012bee:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012bf2:	9202      	str	r2, [sp, #8]
 8012bf4:	1b3a      	subs	r2, r7, r4
 8012bf6:	3a15      	subs	r2, #21
 8012bf8:	f022 0203 	bic.w	r2, r2, #3
 8012bfc:	3204      	adds	r2, #4
 8012bfe:	f104 0115 	add.w	r1, r4, #21
 8012c02:	428f      	cmp	r7, r1
 8012c04:	bf38      	it	cc
 8012c06:	2204      	movcc	r2, #4
 8012c08:	9201      	str	r2, [sp, #4]
 8012c0a:	9a02      	ldr	r2, [sp, #8]
 8012c0c:	9303      	str	r3, [sp, #12]
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	d80c      	bhi.n	8012c2c <__multiply+0x9c>
 8012c12:	2e00      	cmp	r6, #0
 8012c14:	dd03      	ble.n	8012c1e <__multiply+0x8e>
 8012c16:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d059      	beq.n	8012cd2 <__multiply+0x142>
 8012c1e:	6106      	str	r6, [r0, #16]
 8012c20:	b005      	add	sp, #20
 8012c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c26:	f843 2b04 	str.w	r2, [r3], #4
 8012c2a:	e7d8      	b.n	8012bde <__multiply+0x4e>
 8012c2c:	f8b3 a000 	ldrh.w	sl, [r3]
 8012c30:	f1ba 0f00 	cmp.w	sl, #0
 8012c34:	d023      	beq.n	8012c7e <__multiply+0xee>
 8012c36:	46a9      	mov	r9, r5
 8012c38:	f04f 0c00 	mov.w	ip, #0
 8012c3c:	f104 0e14 	add.w	lr, r4, #20
 8012c40:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012c44:	f8d9 1000 	ldr.w	r1, [r9]
 8012c48:	fa1f fb82 	uxth.w	fp, r2
 8012c4c:	b289      	uxth	r1, r1
 8012c4e:	fb0a 110b 	mla	r1, sl, fp, r1
 8012c52:	4461      	add	r1, ip
 8012c54:	f8d9 c000 	ldr.w	ip, [r9]
 8012c58:	0c12      	lsrs	r2, r2, #16
 8012c5a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8012c5e:	fb0a c202 	mla	r2, sl, r2, ip
 8012c62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012c66:	b289      	uxth	r1, r1
 8012c68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012c6c:	4577      	cmp	r7, lr
 8012c6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012c72:	f849 1b04 	str.w	r1, [r9], #4
 8012c76:	d8e3      	bhi.n	8012c40 <__multiply+0xb0>
 8012c78:	9a01      	ldr	r2, [sp, #4]
 8012c7a:	f845 c002 	str.w	ip, [r5, r2]
 8012c7e:	9a03      	ldr	r2, [sp, #12]
 8012c80:	3304      	adds	r3, #4
 8012c82:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012c86:	f1b9 0f00 	cmp.w	r9, #0
 8012c8a:	d020      	beq.n	8012cce <__multiply+0x13e>
 8012c8c:	46ae      	mov	lr, r5
 8012c8e:	f04f 0a00 	mov.w	sl, #0
 8012c92:	6829      	ldr	r1, [r5, #0]
 8012c94:	f104 0c14 	add.w	ip, r4, #20
 8012c98:	f8bc b000 	ldrh.w	fp, [ip]
 8012c9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012ca0:	b289      	uxth	r1, r1
 8012ca2:	fb09 220b 	mla	r2, r9, fp, r2
 8012ca6:	4492      	add	sl, r2
 8012ca8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012cac:	f84e 1b04 	str.w	r1, [lr], #4
 8012cb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012cb4:	f8be 1000 	ldrh.w	r1, [lr]
 8012cb8:	0c12      	lsrs	r2, r2, #16
 8012cba:	fb09 1102 	mla	r1, r9, r2, r1
 8012cbe:	4567      	cmp	r7, ip
 8012cc0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012cc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012cc8:	d8e6      	bhi.n	8012c98 <__multiply+0x108>
 8012cca:	9a01      	ldr	r2, [sp, #4]
 8012ccc:	50a9      	str	r1, [r5, r2]
 8012cce:	3504      	adds	r5, #4
 8012cd0:	e79b      	b.n	8012c0a <__multiply+0x7a>
 8012cd2:	3e01      	subs	r6, #1
 8012cd4:	e79d      	b.n	8012c12 <__multiply+0x82>
 8012cd6:	bf00      	nop
 8012cd8:	08014e01 	.word	0x08014e01
 8012cdc:	08014e8c 	.word	0x08014e8c

08012ce0 <__pow5mult>:
 8012ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ce4:	4615      	mov	r5, r2
 8012ce6:	f012 0203 	ands.w	r2, r2, #3
 8012cea:	4606      	mov	r6, r0
 8012cec:	460f      	mov	r7, r1
 8012cee:	d007      	beq.n	8012d00 <__pow5mult+0x20>
 8012cf0:	4c25      	ldr	r4, [pc, #148]	; (8012d88 <__pow5mult+0xa8>)
 8012cf2:	3a01      	subs	r2, #1
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012cfa:	f7ff fe55 	bl	80129a8 <__multadd>
 8012cfe:	4607      	mov	r7, r0
 8012d00:	10ad      	asrs	r5, r5, #2
 8012d02:	d03d      	beq.n	8012d80 <__pow5mult+0xa0>
 8012d04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012d06:	b97c      	cbnz	r4, 8012d28 <__pow5mult+0x48>
 8012d08:	2010      	movs	r0, #16
 8012d0a:	f7fd fffb 	bl	8010d04 <malloc>
 8012d0e:	4602      	mov	r2, r0
 8012d10:	6270      	str	r0, [r6, #36]	; 0x24
 8012d12:	b928      	cbnz	r0, 8012d20 <__pow5mult+0x40>
 8012d14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012d18:	4b1c      	ldr	r3, [pc, #112]	; (8012d8c <__pow5mult+0xac>)
 8012d1a:	481d      	ldr	r0, [pc, #116]	; (8012d90 <__pow5mult+0xb0>)
 8012d1c:	f7ff f94e 	bl	8011fbc <__assert_func>
 8012d20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012d24:	6004      	str	r4, [r0, #0]
 8012d26:	60c4      	str	r4, [r0, #12]
 8012d28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012d2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012d30:	b94c      	cbnz	r4, 8012d46 <__pow5mult+0x66>
 8012d32:	f240 2171 	movw	r1, #625	; 0x271
 8012d36:	4630      	mov	r0, r6
 8012d38:	f7ff ff14 	bl	8012b64 <__i2b>
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	4604      	mov	r4, r0
 8012d40:	f8c8 0008 	str.w	r0, [r8, #8]
 8012d44:	6003      	str	r3, [r0, #0]
 8012d46:	f04f 0900 	mov.w	r9, #0
 8012d4a:	07eb      	lsls	r3, r5, #31
 8012d4c:	d50a      	bpl.n	8012d64 <__pow5mult+0x84>
 8012d4e:	4639      	mov	r1, r7
 8012d50:	4622      	mov	r2, r4
 8012d52:	4630      	mov	r0, r6
 8012d54:	f7ff ff1c 	bl	8012b90 <__multiply>
 8012d58:	4680      	mov	r8, r0
 8012d5a:	4639      	mov	r1, r7
 8012d5c:	4630      	mov	r0, r6
 8012d5e:	f7ff fe01 	bl	8012964 <_Bfree>
 8012d62:	4647      	mov	r7, r8
 8012d64:	106d      	asrs	r5, r5, #1
 8012d66:	d00b      	beq.n	8012d80 <__pow5mult+0xa0>
 8012d68:	6820      	ldr	r0, [r4, #0]
 8012d6a:	b938      	cbnz	r0, 8012d7c <__pow5mult+0x9c>
 8012d6c:	4622      	mov	r2, r4
 8012d6e:	4621      	mov	r1, r4
 8012d70:	4630      	mov	r0, r6
 8012d72:	f7ff ff0d 	bl	8012b90 <__multiply>
 8012d76:	6020      	str	r0, [r4, #0]
 8012d78:	f8c0 9000 	str.w	r9, [r0]
 8012d7c:	4604      	mov	r4, r0
 8012d7e:	e7e4      	b.n	8012d4a <__pow5mult+0x6a>
 8012d80:	4638      	mov	r0, r7
 8012d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d86:	bf00      	nop
 8012d88:	08014fd8 	.word	0x08014fd8
 8012d8c:	08014c50 	.word	0x08014c50
 8012d90:	08014e8c 	.word	0x08014e8c

08012d94 <__lshift>:
 8012d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d98:	460c      	mov	r4, r1
 8012d9a:	4607      	mov	r7, r0
 8012d9c:	4691      	mov	r9, r2
 8012d9e:	6923      	ldr	r3, [r4, #16]
 8012da0:	6849      	ldr	r1, [r1, #4]
 8012da2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012da6:	68a3      	ldr	r3, [r4, #8]
 8012da8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012dac:	f108 0601 	add.w	r6, r8, #1
 8012db0:	42b3      	cmp	r3, r6
 8012db2:	db0b      	blt.n	8012dcc <__lshift+0x38>
 8012db4:	4638      	mov	r0, r7
 8012db6:	f7ff fd95 	bl	80128e4 <_Balloc>
 8012dba:	4605      	mov	r5, r0
 8012dbc:	b948      	cbnz	r0, 8012dd2 <__lshift+0x3e>
 8012dbe:	4602      	mov	r2, r0
 8012dc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012dc4:	4b29      	ldr	r3, [pc, #164]	; (8012e6c <__lshift+0xd8>)
 8012dc6:	482a      	ldr	r0, [pc, #168]	; (8012e70 <__lshift+0xdc>)
 8012dc8:	f7ff f8f8 	bl	8011fbc <__assert_func>
 8012dcc:	3101      	adds	r1, #1
 8012dce:	005b      	lsls	r3, r3, #1
 8012dd0:	e7ee      	b.n	8012db0 <__lshift+0x1c>
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	f100 0114 	add.w	r1, r0, #20
 8012dd8:	f100 0210 	add.w	r2, r0, #16
 8012ddc:	4618      	mov	r0, r3
 8012dde:	4553      	cmp	r3, sl
 8012de0:	db37      	blt.n	8012e52 <__lshift+0xbe>
 8012de2:	6920      	ldr	r0, [r4, #16]
 8012de4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012de8:	f104 0314 	add.w	r3, r4, #20
 8012dec:	f019 091f 	ands.w	r9, r9, #31
 8012df0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012df4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012df8:	d02f      	beq.n	8012e5a <__lshift+0xc6>
 8012dfa:	468a      	mov	sl, r1
 8012dfc:	f04f 0c00 	mov.w	ip, #0
 8012e00:	f1c9 0e20 	rsb	lr, r9, #32
 8012e04:	681a      	ldr	r2, [r3, #0]
 8012e06:	fa02 f209 	lsl.w	r2, r2, r9
 8012e0a:	ea42 020c 	orr.w	r2, r2, ip
 8012e0e:	f84a 2b04 	str.w	r2, [sl], #4
 8012e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e16:	4298      	cmp	r0, r3
 8012e18:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012e1c:	d8f2      	bhi.n	8012e04 <__lshift+0x70>
 8012e1e:	1b03      	subs	r3, r0, r4
 8012e20:	3b15      	subs	r3, #21
 8012e22:	f023 0303 	bic.w	r3, r3, #3
 8012e26:	3304      	adds	r3, #4
 8012e28:	f104 0215 	add.w	r2, r4, #21
 8012e2c:	4290      	cmp	r0, r2
 8012e2e:	bf38      	it	cc
 8012e30:	2304      	movcc	r3, #4
 8012e32:	f841 c003 	str.w	ip, [r1, r3]
 8012e36:	f1bc 0f00 	cmp.w	ip, #0
 8012e3a:	d001      	beq.n	8012e40 <__lshift+0xac>
 8012e3c:	f108 0602 	add.w	r6, r8, #2
 8012e40:	3e01      	subs	r6, #1
 8012e42:	4638      	mov	r0, r7
 8012e44:	4621      	mov	r1, r4
 8012e46:	612e      	str	r6, [r5, #16]
 8012e48:	f7ff fd8c 	bl	8012964 <_Bfree>
 8012e4c:	4628      	mov	r0, r5
 8012e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e52:	f842 0f04 	str.w	r0, [r2, #4]!
 8012e56:	3301      	adds	r3, #1
 8012e58:	e7c1      	b.n	8012dde <__lshift+0x4a>
 8012e5a:	3904      	subs	r1, #4
 8012e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e60:	4298      	cmp	r0, r3
 8012e62:	f841 2f04 	str.w	r2, [r1, #4]!
 8012e66:	d8f9      	bhi.n	8012e5c <__lshift+0xc8>
 8012e68:	e7ea      	b.n	8012e40 <__lshift+0xac>
 8012e6a:	bf00      	nop
 8012e6c:	08014e01 	.word	0x08014e01
 8012e70:	08014e8c 	.word	0x08014e8c

08012e74 <__mcmp>:
 8012e74:	4603      	mov	r3, r0
 8012e76:	690a      	ldr	r2, [r1, #16]
 8012e78:	6900      	ldr	r0, [r0, #16]
 8012e7a:	b530      	push	{r4, r5, lr}
 8012e7c:	1a80      	subs	r0, r0, r2
 8012e7e:	d10d      	bne.n	8012e9c <__mcmp+0x28>
 8012e80:	3314      	adds	r3, #20
 8012e82:	3114      	adds	r1, #20
 8012e84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012e88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012e8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012e90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012e94:	4295      	cmp	r5, r2
 8012e96:	d002      	beq.n	8012e9e <__mcmp+0x2a>
 8012e98:	d304      	bcc.n	8012ea4 <__mcmp+0x30>
 8012e9a:	2001      	movs	r0, #1
 8012e9c:	bd30      	pop	{r4, r5, pc}
 8012e9e:	42a3      	cmp	r3, r4
 8012ea0:	d3f4      	bcc.n	8012e8c <__mcmp+0x18>
 8012ea2:	e7fb      	b.n	8012e9c <__mcmp+0x28>
 8012ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ea8:	e7f8      	b.n	8012e9c <__mcmp+0x28>
	...

08012eac <__mdiff>:
 8012eac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eb0:	460d      	mov	r5, r1
 8012eb2:	4607      	mov	r7, r0
 8012eb4:	4611      	mov	r1, r2
 8012eb6:	4628      	mov	r0, r5
 8012eb8:	4614      	mov	r4, r2
 8012eba:	f7ff ffdb 	bl	8012e74 <__mcmp>
 8012ebe:	1e06      	subs	r6, r0, #0
 8012ec0:	d111      	bne.n	8012ee6 <__mdiff+0x3a>
 8012ec2:	4631      	mov	r1, r6
 8012ec4:	4638      	mov	r0, r7
 8012ec6:	f7ff fd0d 	bl	80128e4 <_Balloc>
 8012eca:	4602      	mov	r2, r0
 8012ecc:	b928      	cbnz	r0, 8012eda <__mdiff+0x2e>
 8012ece:	f240 2132 	movw	r1, #562	; 0x232
 8012ed2:	4b3a      	ldr	r3, [pc, #232]	; (8012fbc <__mdiff+0x110>)
 8012ed4:	483a      	ldr	r0, [pc, #232]	; (8012fc0 <__mdiff+0x114>)
 8012ed6:	f7ff f871 	bl	8011fbc <__assert_func>
 8012eda:	2301      	movs	r3, #1
 8012edc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012ee0:	4610      	mov	r0, r2
 8012ee2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ee6:	bfa4      	itt	ge
 8012ee8:	4623      	movge	r3, r4
 8012eea:	462c      	movge	r4, r5
 8012eec:	4638      	mov	r0, r7
 8012eee:	6861      	ldr	r1, [r4, #4]
 8012ef0:	bfa6      	itte	ge
 8012ef2:	461d      	movge	r5, r3
 8012ef4:	2600      	movge	r6, #0
 8012ef6:	2601      	movlt	r6, #1
 8012ef8:	f7ff fcf4 	bl	80128e4 <_Balloc>
 8012efc:	4602      	mov	r2, r0
 8012efe:	b918      	cbnz	r0, 8012f08 <__mdiff+0x5c>
 8012f00:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012f04:	4b2d      	ldr	r3, [pc, #180]	; (8012fbc <__mdiff+0x110>)
 8012f06:	e7e5      	b.n	8012ed4 <__mdiff+0x28>
 8012f08:	f102 0814 	add.w	r8, r2, #20
 8012f0c:	46c2      	mov	sl, r8
 8012f0e:	f04f 0c00 	mov.w	ip, #0
 8012f12:	6927      	ldr	r7, [r4, #16]
 8012f14:	60c6      	str	r6, [r0, #12]
 8012f16:	692e      	ldr	r6, [r5, #16]
 8012f18:	f104 0014 	add.w	r0, r4, #20
 8012f1c:	f105 0914 	add.w	r9, r5, #20
 8012f20:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8012f24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012f28:	3410      	adds	r4, #16
 8012f2a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8012f2e:	f859 3b04 	ldr.w	r3, [r9], #4
 8012f32:	fa1f f18b 	uxth.w	r1, fp
 8012f36:	448c      	add	ip, r1
 8012f38:	b299      	uxth	r1, r3
 8012f3a:	0c1b      	lsrs	r3, r3, #16
 8012f3c:	ebac 0101 	sub.w	r1, ip, r1
 8012f40:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012f44:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8012f48:	b289      	uxth	r1, r1
 8012f4a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8012f4e:	454e      	cmp	r6, r9
 8012f50:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8012f54:	f84a 3b04 	str.w	r3, [sl], #4
 8012f58:	d8e7      	bhi.n	8012f2a <__mdiff+0x7e>
 8012f5a:	1b73      	subs	r3, r6, r5
 8012f5c:	3b15      	subs	r3, #21
 8012f5e:	f023 0303 	bic.w	r3, r3, #3
 8012f62:	3515      	adds	r5, #21
 8012f64:	3304      	adds	r3, #4
 8012f66:	42ae      	cmp	r6, r5
 8012f68:	bf38      	it	cc
 8012f6a:	2304      	movcc	r3, #4
 8012f6c:	4418      	add	r0, r3
 8012f6e:	4443      	add	r3, r8
 8012f70:	461e      	mov	r6, r3
 8012f72:	4605      	mov	r5, r0
 8012f74:	4575      	cmp	r5, lr
 8012f76:	d30e      	bcc.n	8012f96 <__mdiff+0xea>
 8012f78:	f10e 0103 	add.w	r1, lr, #3
 8012f7c:	1a09      	subs	r1, r1, r0
 8012f7e:	f021 0103 	bic.w	r1, r1, #3
 8012f82:	3803      	subs	r0, #3
 8012f84:	4586      	cmp	lr, r0
 8012f86:	bf38      	it	cc
 8012f88:	2100      	movcc	r1, #0
 8012f8a:	4419      	add	r1, r3
 8012f8c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8012f90:	b18b      	cbz	r3, 8012fb6 <__mdiff+0x10a>
 8012f92:	6117      	str	r7, [r2, #16]
 8012f94:	e7a4      	b.n	8012ee0 <__mdiff+0x34>
 8012f96:	f855 8b04 	ldr.w	r8, [r5], #4
 8012f9a:	fa1f f188 	uxth.w	r1, r8
 8012f9e:	4461      	add	r1, ip
 8012fa0:	140c      	asrs	r4, r1, #16
 8012fa2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012fa6:	b289      	uxth	r1, r1
 8012fa8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012fac:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8012fb0:	f846 1b04 	str.w	r1, [r6], #4
 8012fb4:	e7de      	b.n	8012f74 <__mdiff+0xc8>
 8012fb6:	3f01      	subs	r7, #1
 8012fb8:	e7e8      	b.n	8012f8c <__mdiff+0xe0>
 8012fba:	bf00      	nop
 8012fbc:	08014e01 	.word	0x08014e01
 8012fc0:	08014e8c 	.word	0x08014e8c

08012fc4 <__ulp>:
 8012fc4:	4b11      	ldr	r3, [pc, #68]	; (801300c <__ulp+0x48>)
 8012fc6:	400b      	ands	r3, r1
 8012fc8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	dd02      	ble.n	8012fd6 <__ulp+0x12>
 8012fd0:	2000      	movs	r0, #0
 8012fd2:	4619      	mov	r1, r3
 8012fd4:	4770      	bx	lr
 8012fd6:	425b      	negs	r3, r3
 8012fd8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8012fdc:	f04f 0000 	mov.w	r0, #0
 8012fe0:	f04f 0100 	mov.w	r1, #0
 8012fe4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012fe8:	da04      	bge.n	8012ff4 <__ulp+0x30>
 8012fea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012fee:	fa43 f102 	asr.w	r1, r3, r2
 8012ff2:	4770      	bx	lr
 8012ff4:	f1a2 0314 	sub.w	r3, r2, #20
 8012ff8:	2b1e      	cmp	r3, #30
 8012ffa:	bfd6      	itet	le
 8012ffc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8013000:	2301      	movgt	r3, #1
 8013002:	fa22 f303 	lsrle.w	r3, r2, r3
 8013006:	4618      	mov	r0, r3
 8013008:	4770      	bx	lr
 801300a:	bf00      	nop
 801300c:	7ff00000 	.word	0x7ff00000

08013010 <__b2d>:
 8013010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013014:	6907      	ldr	r7, [r0, #16]
 8013016:	f100 0914 	add.w	r9, r0, #20
 801301a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 801301e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8013022:	f1a7 0804 	sub.w	r8, r7, #4
 8013026:	4630      	mov	r0, r6
 8013028:	f7ff fd4e 	bl	8012ac8 <__hi0bits>
 801302c:	f1c0 0320 	rsb	r3, r0, #32
 8013030:	280a      	cmp	r0, #10
 8013032:	600b      	str	r3, [r1, #0]
 8013034:	491f      	ldr	r1, [pc, #124]	; (80130b4 <__b2d+0xa4>)
 8013036:	dc17      	bgt.n	8013068 <__b2d+0x58>
 8013038:	45c1      	cmp	r9, r8
 801303a:	bf28      	it	cs
 801303c:	2200      	movcs	r2, #0
 801303e:	f1c0 0c0b 	rsb	ip, r0, #11
 8013042:	fa26 f30c 	lsr.w	r3, r6, ip
 8013046:	bf38      	it	cc
 8013048:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801304c:	ea43 0501 	orr.w	r5, r3, r1
 8013050:	f100 0315 	add.w	r3, r0, #21
 8013054:	fa06 f303 	lsl.w	r3, r6, r3
 8013058:	fa22 f20c 	lsr.w	r2, r2, ip
 801305c:	ea43 0402 	orr.w	r4, r3, r2
 8013060:	4620      	mov	r0, r4
 8013062:	4629      	mov	r1, r5
 8013064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013068:	45c1      	cmp	r9, r8
 801306a:	bf2e      	itee	cs
 801306c:	2200      	movcs	r2, #0
 801306e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8013072:	f1a7 0808 	subcc.w	r8, r7, #8
 8013076:	f1b0 030b 	subs.w	r3, r0, #11
 801307a:	d016      	beq.n	80130aa <__b2d+0x9a>
 801307c:	f1c3 0720 	rsb	r7, r3, #32
 8013080:	fa22 f107 	lsr.w	r1, r2, r7
 8013084:	45c8      	cmp	r8, r9
 8013086:	fa06 f603 	lsl.w	r6, r6, r3
 801308a:	ea46 0601 	orr.w	r6, r6, r1
 801308e:	bf94      	ite	ls
 8013090:	2100      	movls	r1, #0
 8013092:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8013096:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 801309a:	fa02 f003 	lsl.w	r0, r2, r3
 801309e:	40f9      	lsrs	r1, r7
 80130a0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80130a4:	ea40 0401 	orr.w	r4, r0, r1
 80130a8:	e7da      	b.n	8013060 <__b2d+0x50>
 80130aa:	4614      	mov	r4, r2
 80130ac:	ea46 0501 	orr.w	r5, r6, r1
 80130b0:	e7d6      	b.n	8013060 <__b2d+0x50>
 80130b2:	bf00      	nop
 80130b4:	3ff00000 	.word	0x3ff00000

080130b8 <__d2b>:
 80130b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80130bc:	2101      	movs	r1, #1
 80130be:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80130c2:	4690      	mov	r8, r2
 80130c4:	461d      	mov	r5, r3
 80130c6:	f7ff fc0d 	bl	80128e4 <_Balloc>
 80130ca:	4604      	mov	r4, r0
 80130cc:	b930      	cbnz	r0, 80130dc <__d2b+0x24>
 80130ce:	4602      	mov	r2, r0
 80130d0:	f240 310a 	movw	r1, #778	; 0x30a
 80130d4:	4b24      	ldr	r3, [pc, #144]	; (8013168 <__d2b+0xb0>)
 80130d6:	4825      	ldr	r0, [pc, #148]	; (801316c <__d2b+0xb4>)
 80130d8:	f7fe ff70 	bl	8011fbc <__assert_func>
 80130dc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80130e0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80130e4:	bb2d      	cbnz	r5, 8013132 <__d2b+0x7a>
 80130e6:	9301      	str	r3, [sp, #4]
 80130e8:	f1b8 0300 	subs.w	r3, r8, #0
 80130ec:	d026      	beq.n	801313c <__d2b+0x84>
 80130ee:	4668      	mov	r0, sp
 80130f0:	9300      	str	r3, [sp, #0]
 80130f2:	f7ff fd09 	bl	8012b08 <__lo0bits>
 80130f6:	9900      	ldr	r1, [sp, #0]
 80130f8:	b1f0      	cbz	r0, 8013138 <__d2b+0x80>
 80130fa:	9a01      	ldr	r2, [sp, #4]
 80130fc:	f1c0 0320 	rsb	r3, r0, #32
 8013100:	fa02 f303 	lsl.w	r3, r2, r3
 8013104:	430b      	orrs	r3, r1
 8013106:	40c2      	lsrs	r2, r0
 8013108:	6163      	str	r3, [r4, #20]
 801310a:	9201      	str	r2, [sp, #4]
 801310c:	9b01      	ldr	r3, [sp, #4]
 801310e:	2b00      	cmp	r3, #0
 8013110:	bf14      	ite	ne
 8013112:	2102      	movne	r1, #2
 8013114:	2101      	moveq	r1, #1
 8013116:	61a3      	str	r3, [r4, #24]
 8013118:	6121      	str	r1, [r4, #16]
 801311a:	b1c5      	cbz	r5, 801314e <__d2b+0x96>
 801311c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013120:	4405      	add	r5, r0
 8013122:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013126:	603d      	str	r5, [r7, #0]
 8013128:	6030      	str	r0, [r6, #0]
 801312a:	4620      	mov	r0, r4
 801312c:	b002      	add	sp, #8
 801312e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013136:	e7d6      	b.n	80130e6 <__d2b+0x2e>
 8013138:	6161      	str	r1, [r4, #20]
 801313a:	e7e7      	b.n	801310c <__d2b+0x54>
 801313c:	a801      	add	r0, sp, #4
 801313e:	f7ff fce3 	bl	8012b08 <__lo0bits>
 8013142:	2101      	movs	r1, #1
 8013144:	9b01      	ldr	r3, [sp, #4]
 8013146:	6121      	str	r1, [r4, #16]
 8013148:	6163      	str	r3, [r4, #20]
 801314a:	3020      	adds	r0, #32
 801314c:	e7e5      	b.n	801311a <__d2b+0x62>
 801314e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8013152:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013156:	6038      	str	r0, [r7, #0]
 8013158:	6918      	ldr	r0, [r3, #16]
 801315a:	f7ff fcb5 	bl	8012ac8 <__hi0bits>
 801315e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8013162:	6031      	str	r1, [r6, #0]
 8013164:	e7e1      	b.n	801312a <__d2b+0x72>
 8013166:	bf00      	nop
 8013168:	08014e01 	.word	0x08014e01
 801316c:	08014e8c 	.word	0x08014e8c

08013170 <__ratio>:
 8013170:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013174:	4688      	mov	r8, r1
 8013176:	4669      	mov	r1, sp
 8013178:	4681      	mov	r9, r0
 801317a:	f7ff ff49 	bl	8013010 <__b2d>
 801317e:	460f      	mov	r7, r1
 8013180:	4604      	mov	r4, r0
 8013182:	460d      	mov	r5, r1
 8013184:	4640      	mov	r0, r8
 8013186:	a901      	add	r1, sp, #4
 8013188:	f7ff ff42 	bl	8013010 <__b2d>
 801318c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013190:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013194:	468b      	mov	fp, r1
 8013196:	eba3 0c02 	sub.w	ip, r3, r2
 801319a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801319e:	1a9b      	subs	r3, r3, r2
 80131a0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	bfd5      	itete	le
 80131a8:	460a      	movle	r2, r1
 80131aa:	462a      	movgt	r2, r5
 80131ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80131b0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80131b4:	bfd8      	it	le
 80131b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80131ba:	465b      	mov	r3, fp
 80131bc:	4602      	mov	r2, r0
 80131be:	4639      	mov	r1, r7
 80131c0:	4620      	mov	r0, r4
 80131c2:	f7ed fb23 	bl	800080c <__aeabi_ddiv>
 80131c6:	b003      	add	sp, #12
 80131c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080131cc <__copybits>:
 80131cc:	3901      	subs	r1, #1
 80131ce:	b570      	push	{r4, r5, r6, lr}
 80131d0:	1149      	asrs	r1, r1, #5
 80131d2:	6914      	ldr	r4, [r2, #16]
 80131d4:	3101      	adds	r1, #1
 80131d6:	f102 0314 	add.w	r3, r2, #20
 80131da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80131de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80131e2:	1f05      	subs	r5, r0, #4
 80131e4:	42a3      	cmp	r3, r4
 80131e6:	d30c      	bcc.n	8013202 <__copybits+0x36>
 80131e8:	1aa3      	subs	r3, r4, r2
 80131ea:	3b11      	subs	r3, #17
 80131ec:	f023 0303 	bic.w	r3, r3, #3
 80131f0:	3211      	adds	r2, #17
 80131f2:	42a2      	cmp	r2, r4
 80131f4:	bf88      	it	hi
 80131f6:	2300      	movhi	r3, #0
 80131f8:	4418      	add	r0, r3
 80131fa:	2300      	movs	r3, #0
 80131fc:	4288      	cmp	r0, r1
 80131fe:	d305      	bcc.n	801320c <__copybits+0x40>
 8013200:	bd70      	pop	{r4, r5, r6, pc}
 8013202:	f853 6b04 	ldr.w	r6, [r3], #4
 8013206:	f845 6f04 	str.w	r6, [r5, #4]!
 801320a:	e7eb      	b.n	80131e4 <__copybits+0x18>
 801320c:	f840 3b04 	str.w	r3, [r0], #4
 8013210:	e7f4      	b.n	80131fc <__copybits+0x30>

08013212 <__any_on>:
 8013212:	f100 0214 	add.w	r2, r0, #20
 8013216:	6900      	ldr	r0, [r0, #16]
 8013218:	114b      	asrs	r3, r1, #5
 801321a:	4298      	cmp	r0, r3
 801321c:	b510      	push	{r4, lr}
 801321e:	db11      	blt.n	8013244 <__any_on+0x32>
 8013220:	dd0a      	ble.n	8013238 <__any_on+0x26>
 8013222:	f011 011f 	ands.w	r1, r1, #31
 8013226:	d007      	beq.n	8013238 <__any_on+0x26>
 8013228:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801322c:	fa24 f001 	lsr.w	r0, r4, r1
 8013230:	fa00 f101 	lsl.w	r1, r0, r1
 8013234:	428c      	cmp	r4, r1
 8013236:	d10b      	bne.n	8013250 <__any_on+0x3e>
 8013238:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801323c:	4293      	cmp	r3, r2
 801323e:	d803      	bhi.n	8013248 <__any_on+0x36>
 8013240:	2000      	movs	r0, #0
 8013242:	bd10      	pop	{r4, pc}
 8013244:	4603      	mov	r3, r0
 8013246:	e7f7      	b.n	8013238 <__any_on+0x26>
 8013248:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801324c:	2900      	cmp	r1, #0
 801324e:	d0f5      	beq.n	801323c <__any_on+0x2a>
 8013250:	2001      	movs	r0, #1
 8013252:	e7f6      	b.n	8013242 <__any_on+0x30>

08013254 <_calloc_r>:
 8013254:	b570      	push	{r4, r5, r6, lr}
 8013256:	fba1 5402 	umull	r5, r4, r1, r2
 801325a:	b934      	cbnz	r4, 801326a <_calloc_r+0x16>
 801325c:	4629      	mov	r1, r5
 801325e:	f7fd fddf 	bl	8010e20 <_malloc_r>
 8013262:	4606      	mov	r6, r0
 8013264:	b928      	cbnz	r0, 8013272 <_calloc_r+0x1e>
 8013266:	4630      	mov	r0, r6
 8013268:	bd70      	pop	{r4, r5, r6, pc}
 801326a:	220c      	movs	r2, #12
 801326c:	2600      	movs	r6, #0
 801326e:	6002      	str	r2, [r0, #0]
 8013270:	e7f9      	b.n	8013266 <_calloc_r+0x12>
 8013272:	462a      	mov	r2, r5
 8013274:	4621      	mov	r1, r4
 8013276:	f7fd fd63 	bl	8010d40 <memset>
 801327a:	e7f4      	b.n	8013266 <_calloc_r+0x12>

0801327c <__ssputs_r>:
 801327c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013280:	688e      	ldr	r6, [r1, #8]
 8013282:	4682      	mov	sl, r0
 8013284:	429e      	cmp	r6, r3
 8013286:	460c      	mov	r4, r1
 8013288:	4690      	mov	r8, r2
 801328a:	461f      	mov	r7, r3
 801328c:	d838      	bhi.n	8013300 <__ssputs_r+0x84>
 801328e:	898a      	ldrh	r2, [r1, #12]
 8013290:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013294:	d032      	beq.n	80132fc <__ssputs_r+0x80>
 8013296:	6825      	ldr	r5, [r4, #0]
 8013298:	6909      	ldr	r1, [r1, #16]
 801329a:	3301      	adds	r3, #1
 801329c:	eba5 0901 	sub.w	r9, r5, r1
 80132a0:	6965      	ldr	r5, [r4, #20]
 80132a2:	444b      	add	r3, r9
 80132a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80132a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80132ac:	106d      	asrs	r5, r5, #1
 80132ae:	429d      	cmp	r5, r3
 80132b0:	bf38      	it	cc
 80132b2:	461d      	movcc	r5, r3
 80132b4:	0553      	lsls	r3, r2, #21
 80132b6:	d531      	bpl.n	801331c <__ssputs_r+0xa0>
 80132b8:	4629      	mov	r1, r5
 80132ba:	f7fd fdb1 	bl	8010e20 <_malloc_r>
 80132be:	4606      	mov	r6, r0
 80132c0:	b950      	cbnz	r0, 80132d8 <__ssputs_r+0x5c>
 80132c2:	230c      	movs	r3, #12
 80132c4:	f04f 30ff 	mov.w	r0, #4294967295
 80132c8:	f8ca 3000 	str.w	r3, [sl]
 80132cc:	89a3      	ldrh	r3, [r4, #12]
 80132ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132d2:	81a3      	strh	r3, [r4, #12]
 80132d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132d8:	464a      	mov	r2, r9
 80132da:	6921      	ldr	r1, [r4, #16]
 80132dc:	f7fd fd22 	bl	8010d24 <memcpy>
 80132e0:	89a3      	ldrh	r3, [r4, #12]
 80132e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80132e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132ea:	81a3      	strh	r3, [r4, #12]
 80132ec:	6126      	str	r6, [r4, #16]
 80132ee:	444e      	add	r6, r9
 80132f0:	6026      	str	r6, [r4, #0]
 80132f2:	463e      	mov	r6, r7
 80132f4:	6165      	str	r5, [r4, #20]
 80132f6:	eba5 0509 	sub.w	r5, r5, r9
 80132fa:	60a5      	str	r5, [r4, #8]
 80132fc:	42be      	cmp	r6, r7
 80132fe:	d900      	bls.n	8013302 <__ssputs_r+0x86>
 8013300:	463e      	mov	r6, r7
 8013302:	4632      	mov	r2, r6
 8013304:	4641      	mov	r1, r8
 8013306:	6820      	ldr	r0, [r4, #0]
 8013308:	f000 fd7a 	bl	8013e00 <memmove>
 801330c:	68a3      	ldr	r3, [r4, #8]
 801330e:	2000      	movs	r0, #0
 8013310:	1b9b      	subs	r3, r3, r6
 8013312:	60a3      	str	r3, [r4, #8]
 8013314:	6823      	ldr	r3, [r4, #0]
 8013316:	4433      	add	r3, r6
 8013318:	6023      	str	r3, [r4, #0]
 801331a:	e7db      	b.n	80132d4 <__ssputs_r+0x58>
 801331c:	462a      	mov	r2, r5
 801331e:	f000 fd89 	bl	8013e34 <_realloc_r>
 8013322:	4606      	mov	r6, r0
 8013324:	2800      	cmp	r0, #0
 8013326:	d1e1      	bne.n	80132ec <__ssputs_r+0x70>
 8013328:	4650      	mov	r0, sl
 801332a:	6921      	ldr	r1, [r4, #16]
 801332c:	f7fd fd10 	bl	8010d50 <_free_r>
 8013330:	e7c7      	b.n	80132c2 <__ssputs_r+0x46>
	...

08013334 <_svfiprintf_r>:
 8013334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013338:	4698      	mov	r8, r3
 801333a:	898b      	ldrh	r3, [r1, #12]
 801333c:	4607      	mov	r7, r0
 801333e:	061b      	lsls	r3, r3, #24
 8013340:	460d      	mov	r5, r1
 8013342:	4614      	mov	r4, r2
 8013344:	b09d      	sub	sp, #116	; 0x74
 8013346:	d50e      	bpl.n	8013366 <_svfiprintf_r+0x32>
 8013348:	690b      	ldr	r3, [r1, #16]
 801334a:	b963      	cbnz	r3, 8013366 <_svfiprintf_r+0x32>
 801334c:	2140      	movs	r1, #64	; 0x40
 801334e:	f7fd fd67 	bl	8010e20 <_malloc_r>
 8013352:	6028      	str	r0, [r5, #0]
 8013354:	6128      	str	r0, [r5, #16]
 8013356:	b920      	cbnz	r0, 8013362 <_svfiprintf_r+0x2e>
 8013358:	230c      	movs	r3, #12
 801335a:	603b      	str	r3, [r7, #0]
 801335c:	f04f 30ff 	mov.w	r0, #4294967295
 8013360:	e0d1      	b.n	8013506 <_svfiprintf_r+0x1d2>
 8013362:	2340      	movs	r3, #64	; 0x40
 8013364:	616b      	str	r3, [r5, #20]
 8013366:	2300      	movs	r3, #0
 8013368:	9309      	str	r3, [sp, #36]	; 0x24
 801336a:	2320      	movs	r3, #32
 801336c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013370:	2330      	movs	r3, #48	; 0x30
 8013372:	f04f 0901 	mov.w	r9, #1
 8013376:	f8cd 800c 	str.w	r8, [sp, #12]
 801337a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013520 <_svfiprintf_r+0x1ec>
 801337e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013382:	4623      	mov	r3, r4
 8013384:	469a      	mov	sl, r3
 8013386:	f813 2b01 	ldrb.w	r2, [r3], #1
 801338a:	b10a      	cbz	r2, 8013390 <_svfiprintf_r+0x5c>
 801338c:	2a25      	cmp	r2, #37	; 0x25
 801338e:	d1f9      	bne.n	8013384 <_svfiprintf_r+0x50>
 8013390:	ebba 0b04 	subs.w	fp, sl, r4
 8013394:	d00b      	beq.n	80133ae <_svfiprintf_r+0x7a>
 8013396:	465b      	mov	r3, fp
 8013398:	4622      	mov	r2, r4
 801339a:	4629      	mov	r1, r5
 801339c:	4638      	mov	r0, r7
 801339e:	f7ff ff6d 	bl	801327c <__ssputs_r>
 80133a2:	3001      	adds	r0, #1
 80133a4:	f000 80aa 	beq.w	80134fc <_svfiprintf_r+0x1c8>
 80133a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80133aa:	445a      	add	r2, fp
 80133ac:	9209      	str	r2, [sp, #36]	; 0x24
 80133ae:	f89a 3000 	ldrb.w	r3, [sl]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	f000 80a2 	beq.w	80134fc <_svfiprintf_r+0x1c8>
 80133b8:	2300      	movs	r3, #0
 80133ba:	f04f 32ff 	mov.w	r2, #4294967295
 80133be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80133c2:	f10a 0a01 	add.w	sl, sl, #1
 80133c6:	9304      	str	r3, [sp, #16]
 80133c8:	9307      	str	r3, [sp, #28]
 80133ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80133ce:	931a      	str	r3, [sp, #104]	; 0x68
 80133d0:	4654      	mov	r4, sl
 80133d2:	2205      	movs	r2, #5
 80133d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133d8:	4851      	ldr	r0, [pc, #324]	; (8013520 <_svfiprintf_r+0x1ec>)
 80133da:	f000 fd03 	bl	8013de4 <memchr>
 80133de:	9a04      	ldr	r2, [sp, #16]
 80133e0:	b9d8      	cbnz	r0, 801341a <_svfiprintf_r+0xe6>
 80133e2:	06d0      	lsls	r0, r2, #27
 80133e4:	bf44      	itt	mi
 80133e6:	2320      	movmi	r3, #32
 80133e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133ec:	0711      	lsls	r1, r2, #28
 80133ee:	bf44      	itt	mi
 80133f0:	232b      	movmi	r3, #43	; 0x2b
 80133f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133f6:	f89a 3000 	ldrb.w	r3, [sl]
 80133fa:	2b2a      	cmp	r3, #42	; 0x2a
 80133fc:	d015      	beq.n	801342a <_svfiprintf_r+0xf6>
 80133fe:	4654      	mov	r4, sl
 8013400:	2000      	movs	r0, #0
 8013402:	f04f 0c0a 	mov.w	ip, #10
 8013406:	9a07      	ldr	r2, [sp, #28]
 8013408:	4621      	mov	r1, r4
 801340a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801340e:	3b30      	subs	r3, #48	; 0x30
 8013410:	2b09      	cmp	r3, #9
 8013412:	d94e      	bls.n	80134b2 <_svfiprintf_r+0x17e>
 8013414:	b1b0      	cbz	r0, 8013444 <_svfiprintf_r+0x110>
 8013416:	9207      	str	r2, [sp, #28]
 8013418:	e014      	b.n	8013444 <_svfiprintf_r+0x110>
 801341a:	eba0 0308 	sub.w	r3, r0, r8
 801341e:	fa09 f303 	lsl.w	r3, r9, r3
 8013422:	4313      	orrs	r3, r2
 8013424:	46a2      	mov	sl, r4
 8013426:	9304      	str	r3, [sp, #16]
 8013428:	e7d2      	b.n	80133d0 <_svfiprintf_r+0x9c>
 801342a:	9b03      	ldr	r3, [sp, #12]
 801342c:	1d19      	adds	r1, r3, #4
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	9103      	str	r1, [sp, #12]
 8013432:	2b00      	cmp	r3, #0
 8013434:	bfbb      	ittet	lt
 8013436:	425b      	neglt	r3, r3
 8013438:	f042 0202 	orrlt.w	r2, r2, #2
 801343c:	9307      	strge	r3, [sp, #28]
 801343e:	9307      	strlt	r3, [sp, #28]
 8013440:	bfb8      	it	lt
 8013442:	9204      	strlt	r2, [sp, #16]
 8013444:	7823      	ldrb	r3, [r4, #0]
 8013446:	2b2e      	cmp	r3, #46	; 0x2e
 8013448:	d10c      	bne.n	8013464 <_svfiprintf_r+0x130>
 801344a:	7863      	ldrb	r3, [r4, #1]
 801344c:	2b2a      	cmp	r3, #42	; 0x2a
 801344e:	d135      	bne.n	80134bc <_svfiprintf_r+0x188>
 8013450:	9b03      	ldr	r3, [sp, #12]
 8013452:	3402      	adds	r4, #2
 8013454:	1d1a      	adds	r2, r3, #4
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	9203      	str	r2, [sp, #12]
 801345a:	2b00      	cmp	r3, #0
 801345c:	bfb8      	it	lt
 801345e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013462:	9305      	str	r3, [sp, #20]
 8013464:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8013524 <_svfiprintf_r+0x1f0>
 8013468:	2203      	movs	r2, #3
 801346a:	4650      	mov	r0, sl
 801346c:	7821      	ldrb	r1, [r4, #0]
 801346e:	f000 fcb9 	bl	8013de4 <memchr>
 8013472:	b140      	cbz	r0, 8013486 <_svfiprintf_r+0x152>
 8013474:	2340      	movs	r3, #64	; 0x40
 8013476:	eba0 000a 	sub.w	r0, r0, sl
 801347a:	fa03 f000 	lsl.w	r0, r3, r0
 801347e:	9b04      	ldr	r3, [sp, #16]
 8013480:	3401      	adds	r4, #1
 8013482:	4303      	orrs	r3, r0
 8013484:	9304      	str	r3, [sp, #16]
 8013486:	f814 1b01 	ldrb.w	r1, [r4], #1
 801348a:	2206      	movs	r2, #6
 801348c:	4826      	ldr	r0, [pc, #152]	; (8013528 <_svfiprintf_r+0x1f4>)
 801348e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013492:	f000 fca7 	bl	8013de4 <memchr>
 8013496:	2800      	cmp	r0, #0
 8013498:	d038      	beq.n	801350c <_svfiprintf_r+0x1d8>
 801349a:	4b24      	ldr	r3, [pc, #144]	; (801352c <_svfiprintf_r+0x1f8>)
 801349c:	bb1b      	cbnz	r3, 80134e6 <_svfiprintf_r+0x1b2>
 801349e:	9b03      	ldr	r3, [sp, #12]
 80134a0:	3307      	adds	r3, #7
 80134a2:	f023 0307 	bic.w	r3, r3, #7
 80134a6:	3308      	adds	r3, #8
 80134a8:	9303      	str	r3, [sp, #12]
 80134aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134ac:	4433      	add	r3, r6
 80134ae:	9309      	str	r3, [sp, #36]	; 0x24
 80134b0:	e767      	b.n	8013382 <_svfiprintf_r+0x4e>
 80134b2:	460c      	mov	r4, r1
 80134b4:	2001      	movs	r0, #1
 80134b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80134ba:	e7a5      	b.n	8013408 <_svfiprintf_r+0xd4>
 80134bc:	2300      	movs	r3, #0
 80134be:	f04f 0c0a 	mov.w	ip, #10
 80134c2:	4619      	mov	r1, r3
 80134c4:	3401      	adds	r4, #1
 80134c6:	9305      	str	r3, [sp, #20]
 80134c8:	4620      	mov	r0, r4
 80134ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134ce:	3a30      	subs	r2, #48	; 0x30
 80134d0:	2a09      	cmp	r2, #9
 80134d2:	d903      	bls.n	80134dc <_svfiprintf_r+0x1a8>
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d0c5      	beq.n	8013464 <_svfiprintf_r+0x130>
 80134d8:	9105      	str	r1, [sp, #20]
 80134da:	e7c3      	b.n	8013464 <_svfiprintf_r+0x130>
 80134dc:	4604      	mov	r4, r0
 80134de:	2301      	movs	r3, #1
 80134e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80134e4:	e7f0      	b.n	80134c8 <_svfiprintf_r+0x194>
 80134e6:	ab03      	add	r3, sp, #12
 80134e8:	9300      	str	r3, [sp, #0]
 80134ea:	462a      	mov	r2, r5
 80134ec:	4638      	mov	r0, r7
 80134ee:	4b10      	ldr	r3, [pc, #64]	; (8013530 <_svfiprintf_r+0x1fc>)
 80134f0:	a904      	add	r1, sp, #16
 80134f2:	f3af 8000 	nop.w
 80134f6:	1c42      	adds	r2, r0, #1
 80134f8:	4606      	mov	r6, r0
 80134fa:	d1d6      	bne.n	80134aa <_svfiprintf_r+0x176>
 80134fc:	89ab      	ldrh	r3, [r5, #12]
 80134fe:	065b      	lsls	r3, r3, #25
 8013500:	f53f af2c 	bmi.w	801335c <_svfiprintf_r+0x28>
 8013504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013506:	b01d      	add	sp, #116	; 0x74
 8013508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801350c:	ab03      	add	r3, sp, #12
 801350e:	9300      	str	r3, [sp, #0]
 8013510:	462a      	mov	r2, r5
 8013512:	4638      	mov	r0, r7
 8013514:	4b06      	ldr	r3, [pc, #24]	; (8013530 <_svfiprintf_r+0x1fc>)
 8013516:	a904      	add	r1, sp, #16
 8013518:	f000 f9d4 	bl	80138c4 <_printf_i>
 801351c:	e7eb      	b.n	80134f6 <_svfiprintf_r+0x1c2>
 801351e:	bf00      	nop
 8013520:	08014fe4 	.word	0x08014fe4
 8013524:	08014fea 	.word	0x08014fea
 8013528:	08014fee 	.word	0x08014fee
 801352c:	00000000 	.word	0x00000000
 8013530:	0801327d 	.word	0x0801327d

08013534 <__sfputc_r>:
 8013534:	6893      	ldr	r3, [r2, #8]
 8013536:	b410      	push	{r4}
 8013538:	3b01      	subs	r3, #1
 801353a:	2b00      	cmp	r3, #0
 801353c:	6093      	str	r3, [r2, #8]
 801353e:	da07      	bge.n	8013550 <__sfputc_r+0x1c>
 8013540:	6994      	ldr	r4, [r2, #24]
 8013542:	42a3      	cmp	r3, r4
 8013544:	db01      	blt.n	801354a <__sfputc_r+0x16>
 8013546:	290a      	cmp	r1, #10
 8013548:	d102      	bne.n	8013550 <__sfputc_r+0x1c>
 801354a:	bc10      	pop	{r4}
 801354c:	f000 bb10 	b.w	8013b70 <__swbuf_r>
 8013550:	6813      	ldr	r3, [r2, #0]
 8013552:	1c58      	adds	r0, r3, #1
 8013554:	6010      	str	r0, [r2, #0]
 8013556:	7019      	strb	r1, [r3, #0]
 8013558:	4608      	mov	r0, r1
 801355a:	bc10      	pop	{r4}
 801355c:	4770      	bx	lr

0801355e <__sfputs_r>:
 801355e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013560:	4606      	mov	r6, r0
 8013562:	460f      	mov	r7, r1
 8013564:	4614      	mov	r4, r2
 8013566:	18d5      	adds	r5, r2, r3
 8013568:	42ac      	cmp	r4, r5
 801356a:	d101      	bne.n	8013570 <__sfputs_r+0x12>
 801356c:	2000      	movs	r0, #0
 801356e:	e007      	b.n	8013580 <__sfputs_r+0x22>
 8013570:	463a      	mov	r2, r7
 8013572:	4630      	mov	r0, r6
 8013574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013578:	f7ff ffdc 	bl	8013534 <__sfputc_r>
 801357c:	1c43      	adds	r3, r0, #1
 801357e:	d1f3      	bne.n	8013568 <__sfputs_r+0xa>
 8013580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013584 <_vfiprintf_r>:
 8013584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013588:	460d      	mov	r5, r1
 801358a:	4614      	mov	r4, r2
 801358c:	4698      	mov	r8, r3
 801358e:	4606      	mov	r6, r0
 8013590:	b09d      	sub	sp, #116	; 0x74
 8013592:	b118      	cbz	r0, 801359c <_vfiprintf_r+0x18>
 8013594:	6983      	ldr	r3, [r0, #24]
 8013596:	b90b      	cbnz	r3, 801359c <_vfiprintf_r+0x18>
 8013598:	f7fd faee 	bl	8010b78 <__sinit>
 801359c:	4b89      	ldr	r3, [pc, #548]	; (80137c4 <_vfiprintf_r+0x240>)
 801359e:	429d      	cmp	r5, r3
 80135a0:	d11b      	bne.n	80135da <_vfiprintf_r+0x56>
 80135a2:	6875      	ldr	r5, [r6, #4]
 80135a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80135a6:	07d9      	lsls	r1, r3, #31
 80135a8:	d405      	bmi.n	80135b6 <_vfiprintf_r+0x32>
 80135aa:	89ab      	ldrh	r3, [r5, #12]
 80135ac:	059a      	lsls	r2, r3, #22
 80135ae:	d402      	bmi.n	80135b6 <_vfiprintf_r+0x32>
 80135b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80135b2:	f7fd fba4 	bl	8010cfe <__retarget_lock_acquire_recursive>
 80135b6:	89ab      	ldrh	r3, [r5, #12]
 80135b8:	071b      	lsls	r3, r3, #28
 80135ba:	d501      	bpl.n	80135c0 <_vfiprintf_r+0x3c>
 80135bc:	692b      	ldr	r3, [r5, #16]
 80135be:	b9eb      	cbnz	r3, 80135fc <_vfiprintf_r+0x78>
 80135c0:	4629      	mov	r1, r5
 80135c2:	4630      	mov	r0, r6
 80135c4:	f000 fb34 	bl	8013c30 <__swsetup_r>
 80135c8:	b1c0      	cbz	r0, 80135fc <_vfiprintf_r+0x78>
 80135ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80135cc:	07dc      	lsls	r4, r3, #31
 80135ce:	d50e      	bpl.n	80135ee <_vfiprintf_r+0x6a>
 80135d0:	f04f 30ff 	mov.w	r0, #4294967295
 80135d4:	b01d      	add	sp, #116	; 0x74
 80135d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135da:	4b7b      	ldr	r3, [pc, #492]	; (80137c8 <_vfiprintf_r+0x244>)
 80135dc:	429d      	cmp	r5, r3
 80135de:	d101      	bne.n	80135e4 <_vfiprintf_r+0x60>
 80135e0:	68b5      	ldr	r5, [r6, #8]
 80135e2:	e7df      	b.n	80135a4 <_vfiprintf_r+0x20>
 80135e4:	4b79      	ldr	r3, [pc, #484]	; (80137cc <_vfiprintf_r+0x248>)
 80135e6:	429d      	cmp	r5, r3
 80135e8:	bf08      	it	eq
 80135ea:	68f5      	ldreq	r5, [r6, #12]
 80135ec:	e7da      	b.n	80135a4 <_vfiprintf_r+0x20>
 80135ee:	89ab      	ldrh	r3, [r5, #12]
 80135f0:	0598      	lsls	r0, r3, #22
 80135f2:	d4ed      	bmi.n	80135d0 <_vfiprintf_r+0x4c>
 80135f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80135f6:	f7fd fb83 	bl	8010d00 <__retarget_lock_release_recursive>
 80135fa:	e7e9      	b.n	80135d0 <_vfiprintf_r+0x4c>
 80135fc:	2300      	movs	r3, #0
 80135fe:	9309      	str	r3, [sp, #36]	; 0x24
 8013600:	2320      	movs	r3, #32
 8013602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013606:	2330      	movs	r3, #48	; 0x30
 8013608:	f04f 0901 	mov.w	r9, #1
 801360c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013610:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80137d0 <_vfiprintf_r+0x24c>
 8013614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013618:	4623      	mov	r3, r4
 801361a:	469a      	mov	sl, r3
 801361c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013620:	b10a      	cbz	r2, 8013626 <_vfiprintf_r+0xa2>
 8013622:	2a25      	cmp	r2, #37	; 0x25
 8013624:	d1f9      	bne.n	801361a <_vfiprintf_r+0x96>
 8013626:	ebba 0b04 	subs.w	fp, sl, r4
 801362a:	d00b      	beq.n	8013644 <_vfiprintf_r+0xc0>
 801362c:	465b      	mov	r3, fp
 801362e:	4622      	mov	r2, r4
 8013630:	4629      	mov	r1, r5
 8013632:	4630      	mov	r0, r6
 8013634:	f7ff ff93 	bl	801355e <__sfputs_r>
 8013638:	3001      	adds	r0, #1
 801363a:	f000 80aa 	beq.w	8013792 <_vfiprintf_r+0x20e>
 801363e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013640:	445a      	add	r2, fp
 8013642:	9209      	str	r2, [sp, #36]	; 0x24
 8013644:	f89a 3000 	ldrb.w	r3, [sl]
 8013648:	2b00      	cmp	r3, #0
 801364a:	f000 80a2 	beq.w	8013792 <_vfiprintf_r+0x20e>
 801364e:	2300      	movs	r3, #0
 8013650:	f04f 32ff 	mov.w	r2, #4294967295
 8013654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013658:	f10a 0a01 	add.w	sl, sl, #1
 801365c:	9304      	str	r3, [sp, #16]
 801365e:	9307      	str	r3, [sp, #28]
 8013660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013664:	931a      	str	r3, [sp, #104]	; 0x68
 8013666:	4654      	mov	r4, sl
 8013668:	2205      	movs	r2, #5
 801366a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801366e:	4858      	ldr	r0, [pc, #352]	; (80137d0 <_vfiprintf_r+0x24c>)
 8013670:	f000 fbb8 	bl	8013de4 <memchr>
 8013674:	9a04      	ldr	r2, [sp, #16]
 8013676:	b9d8      	cbnz	r0, 80136b0 <_vfiprintf_r+0x12c>
 8013678:	06d1      	lsls	r1, r2, #27
 801367a:	bf44      	itt	mi
 801367c:	2320      	movmi	r3, #32
 801367e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013682:	0713      	lsls	r3, r2, #28
 8013684:	bf44      	itt	mi
 8013686:	232b      	movmi	r3, #43	; 0x2b
 8013688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801368c:	f89a 3000 	ldrb.w	r3, [sl]
 8013690:	2b2a      	cmp	r3, #42	; 0x2a
 8013692:	d015      	beq.n	80136c0 <_vfiprintf_r+0x13c>
 8013694:	4654      	mov	r4, sl
 8013696:	2000      	movs	r0, #0
 8013698:	f04f 0c0a 	mov.w	ip, #10
 801369c:	9a07      	ldr	r2, [sp, #28]
 801369e:	4621      	mov	r1, r4
 80136a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136a4:	3b30      	subs	r3, #48	; 0x30
 80136a6:	2b09      	cmp	r3, #9
 80136a8:	d94e      	bls.n	8013748 <_vfiprintf_r+0x1c4>
 80136aa:	b1b0      	cbz	r0, 80136da <_vfiprintf_r+0x156>
 80136ac:	9207      	str	r2, [sp, #28]
 80136ae:	e014      	b.n	80136da <_vfiprintf_r+0x156>
 80136b0:	eba0 0308 	sub.w	r3, r0, r8
 80136b4:	fa09 f303 	lsl.w	r3, r9, r3
 80136b8:	4313      	orrs	r3, r2
 80136ba:	46a2      	mov	sl, r4
 80136bc:	9304      	str	r3, [sp, #16]
 80136be:	e7d2      	b.n	8013666 <_vfiprintf_r+0xe2>
 80136c0:	9b03      	ldr	r3, [sp, #12]
 80136c2:	1d19      	adds	r1, r3, #4
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	9103      	str	r1, [sp, #12]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	bfbb      	ittet	lt
 80136cc:	425b      	neglt	r3, r3
 80136ce:	f042 0202 	orrlt.w	r2, r2, #2
 80136d2:	9307      	strge	r3, [sp, #28]
 80136d4:	9307      	strlt	r3, [sp, #28]
 80136d6:	bfb8      	it	lt
 80136d8:	9204      	strlt	r2, [sp, #16]
 80136da:	7823      	ldrb	r3, [r4, #0]
 80136dc:	2b2e      	cmp	r3, #46	; 0x2e
 80136de:	d10c      	bne.n	80136fa <_vfiprintf_r+0x176>
 80136e0:	7863      	ldrb	r3, [r4, #1]
 80136e2:	2b2a      	cmp	r3, #42	; 0x2a
 80136e4:	d135      	bne.n	8013752 <_vfiprintf_r+0x1ce>
 80136e6:	9b03      	ldr	r3, [sp, #12]
 80136e8:	3402      	adds	r4, #2
 80136ea:	1d1a      	adds	r2, r3, #4
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	9203      	str	r2, [sp, #12]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	bfb8      	it	lt
 80136f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80136f8:	9305      	str	r3, [sp, #20]
 80136fa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80137d4 <_vfiprintf_r+0x250>
 80136fe:	2203      	movs	r2, #3
 8013700:	4650      	mov	r0, sl
 8013702:	7821      	ldrb	r1, [r4, #0]
 8013704:	f000 fb6e 	bl	8013de4 <memchr>
 8013708:	b140      	cbz	r0, 801371c <_vfiprintf_r+0x198>
 801370a:	2340      	movs	r3, #64	; 0x40
 801370c:	eba0 000a 	sub.w	r0, r0, sl
 8013710:	fa03 f000 	lsl.w	r0, r3, r0
 8013714:	9b04      	ldr	r3, [sp, #16]
 8013716:	3401      	adds	r4, #1
 8013718:	4303      	orrs	r3, r0
 801371a:	9304      	str	r3, [sp, #16]
 801371c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013720:	2206      	movs	r2, #6
 8013722:	482d      	ldr	r0, [pc, #180]	; (80137d8 <_vfiprintf_r+0x254>)
 8013724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013728:	f000 fb5c 	bl	8013de4 <memchr>
 801372c:	2800      	cmp	r0, #0
 801372e:	d03f      	beq.n	80137b0 <_vfiprintf_r+0x22c>
 8013730:	4b2a      	ldr	r3, [pc, #168]	; (80137dc <_vfiprintf_r+0x258>)
 8013732:	bb1b      	cbnz	r3, 801377c <_vfiprintf_r+0x1f8>
 8013734:	9b03      	ldr	r3, [sp, #12]
 8013736:	3307      	adds	r3, #7
 8013738:	f023 0307 	bic.w	r3, r3, #7
 801373c:	3308      	adds	r3, #8
 801373e:	9303      	str	r3, [sp, #12]
 8013740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013742:	443b      	add	r3, r7
 8013744:	9309      	str	r3, [sp, #36]	; 0x24
 8013746:	e767      	b.n	8013618 <_vfiprintf_r+0x94>
 8013748:	460c      	mov	r4, r1
 801374a:	2001      	movs	r0, #1
 801374c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013750:	e7a5      	b.n	801369e <_vfiprintf_r+0x11a>
 8013752:	2300      	movs	r3, #0
 8013754:	f04f 0c0a 	mov.w	ip, #10
 8013758:	4619      	mov	r1, r3
 801375a:	3401      	adds	r4, #1
 801375c:	9305      	str	r3, [sp, #20]
 801375e:	4620      	mov	r0, r4
 8013760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013764:	3a30      	subs	r2, #48	; 0x30
 8013766:	2a09      	cmp	r2, #9
 8013768:	d903      	bls.n	8013772 <_vfiprintf_r+0x1ee>
 801376a:	2b00      	cmp	r3, #0
 801376c:	d0c5      	beq.n	80136fa <_vfiprintf_r+0x176>
 801376e:	9105      	str	r1, [sp, #20]
 8013770:	e7c3      	b.n	80136fa <_vfiprintf_r+0x176>
 8013772:	4604      	mov	r4, r0
 8013774:	2301      	movs	r3, #1
 8013776:	fb0c 2101 	mla	r1, ip, r1, r2
 801377a:	e7f0      	b.n	801375e <_vfiprintf_r+0x1da>
 801377c:	ab03      	add	r3, sp, #12
 801377e:	9300      	str	r3, [sp, #0]
 8013780:	462a      	mov	r2, r5
 8013782:	4630      	mov	r0, r6
 8013784:	4b16      	ldr	r3, [pc, #88]	; (80137e0 <_vfiprintf_r+0x25c>)
 8013786:	a904      	add	r1, sp, #16
 8013788:	f3af 8000 	nop.w
 801378c:	4607      	mov	r7, r0
 801378e:	1c78      	adds	r0, r7, #1
 8013790:	d1d6      	bne.n	8013740 <_vfiprintf_r+0x1bc>
 8013792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013794:	07d9      	lsls	r1, r3, #31
 8013796:	d405      	bmi.n	80137a4 <_vfiprintf_r+0x220>
 8013798:	89ab      	ldrh	r3, [r5, #12]
 801379a:	059a      	lsls	r2, r3, #22
 801379c:	d402      	bmi.n	80137a4 <_vfiprintf_r+0x220>
 801379e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137a0:	f7fd faae 	bl	8010d00 <__retarget_lock_release_recursive>
 80137a4:	89ab      	ldrh	r3, [r5, #12]
 80137a6:	065b      	lsls	r3, r3, #25
 80137a8:	f53f af12 	bmi.w	80135d0 <_vfiprintf_r+0x4c>
 80137ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80137ae:	e711      	b.n	80135d4 <_vfiprintf_r+0x50>
 80137b0:	ab03      	add	r3, sp, #12
 80137b2:	9300      	str	r3, [sp, #0]
 80137b4:	462a      	mov	r2, r5
 80137b6:	4630      	mov	r0, r6
 80137b8:	4b09      	ldr	r3, [pc, #36]	; (80137e0 <_vfiprintf_r+0x25c>)
 80137ba:	a904      	add	r1, sp, #16
 80137bc:	f000 f882 	bl	80138c4 <_printf_i>
 80137c0:	e7e4      	b.n	801378c <_vfiprintf_r+0x208>
 80137c2:	bf00      	nop
 80137c4:	08014bb0 	.word	0x08014bb0
 80137c8:	08014bd0 	.word	0x08014bd0
 80137cc:	08014b90 	.word	0x08014b90
 80137d0:	08014fe4 	.word	0x08014fe4
 80137d4:	08014fea 	.word	0x08014fea
 80137d8:	08014fee 	.word	0x08014fee
 80137dc:	00000000 	.word	0x00000000
 80137e0:	0801355f 	.word	0x0801355f

080137e4 <_printf_common>:
 80137e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137e8:	4616      	mov	r6, r2
 80137ea:	4699      	mov	r9, r3
 80137ec:	688a      	ldr	r2, [r1, #8]
 80137ee:	690b      	ldr	r3, [r1, #16]
 80137f0:	4607      	mov	r7, r0
 80137f2:	4293      	cmp	r3, r2
 80137f4:	bfb8      	it	lt
 80137f6:	4613      	movlt	r3, r2
 80137f8:	6033      	str	r3, [r6, #0]
 80137fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80137fe:	460c      	mov	r4, r1
 8013800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013804:	b10a      	cbz	r2, 801380a <_printf_common+0x26>
 8013806:	3301      	adds	r3, #1
 8013808:	6033      	str	r3, [r6, #0]
 801380a:	6823      	ldr	r3, [r4, #0]
 801380c:	0699      	lsls	r1, r3, #26
 801380e:	bf42      	ittt	mi
 8013810:	6833      	ldrmi	r3, [r6, #0]
 8013812:	3302      	addmi	r3, #2
 8013814:	6033      	strmi	r3, [r6, #0]
 8013816:	6825      	ldr	r5, [r4, #0]
 8013818:	f015 0506 	ands.w	r5, r5, #6
 801381c:	d106      	bne.n	801382c <_printf_common+0x48>
 801381e:	f104 0a19 	add.w	sl, r4, #25
 8013822:	68e3      	ldr	r3, [r4, #12]
 8013824:	6832      	ldr	r2, [r6, #0]
 8013826:	1a9b      	subs	r3, r3, r2
 8013828:	42ab      	cmp	r3, r5
 801382a:	dc28      	bgt.n	801387e <_printf_common+0x9a>
 801382c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013830:	1e13      	subs	r3, r2, #0
 8013832:	6822      	ldr	r2, [r4, #0]
 8013834:	bf18      	it	ne
 8013836:	2301      	movne	r3, #1
 8013838:	0692      	lsls	r2, r2, #26
 801383a:	d42d      	bmi.n	8013898 <_printf_common+0xb4>
 801383c:	4649      	mov	r1, r9
 801383e:	4638      	mov	r0, r7
 8013840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013844:	47c0      	blx	r8
 8013846:	3001      	adds	r0, #1
 8013848:	d020      	beq.n	801388c <_printf_common+0xa8>
 801384a:	6823      	ldr	r3, [r4, #0]
 801384c:	68e5      	ldr	r5, [r4, #12]
 801384e:	f003 0306 	and.w	r3, r3, #6
 8013852:	2b04      	cmp	r3, #4
 8013854:	bf18      	it	ne
 8013856:	2500      	movne	r5, #0
 8013858:	6832      	ldr	r2, [r6, #0]
 801385a:	f04f 0600 	mov.w	r6, #0
 801385e:	68a3      	ldr	r3, [r4, #8]
 8013860:	bf08      	it	eq
 8013862:	1aad      	subeq	r5, r5, r2
 8013864:	6922      	ldr	r2, [r4, #16]
 8013866:	bf08      	it	eq
 8013868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801386c:	4293      	cmp	r3, r2
 801386e:	bfc4      	itt	gt
 8013870:	1a9b      	subgt	r3, r3, r2
 8013872:	18ed      	addgt	r5, r5, r3
 8013874:	341a      	adds	r4, #26
 8013876:	42b5      	cmp	r5, r6
 8013878:	d11a      	bne.n	80138b0 <_printf_common+0xcc>
 801387a:	2000      	movs	r0, #0
 801387c:	e008      	b.n	8013890 <_printf_common+0xac>
 801387e:	2301      	movs	r3, #1
 8013880:	4652      	mov	r2, sl
 8013882:	4649      	mov	r1, r9
 8013884:	4638      	mov	r0, r7
 8013886:	47c0      	blx	r8
 8013888:	3001      	adds	r0, #1
 801388a:	d103      	bne.n	8013894 <_printf_common+0xb0>
 801388c:	f04f 30ff 	mov.w	r0, #4294967295
 8013890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013894:	3501      	adds	r5, #1
 8013896:	e7c4      	b.n	8013822 <_printf_common+0x3e>
 8013898:	2030      	movs	r0, #48	; 0x30
 801389a:	18e1      	adds	r1, r4, r3
 801389c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80138a0:	1c5a      	adds	r2, r3, #1
 80138a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80138a6:	4422      	add	r2, r4
 80138a8:	3302      	adds	r3, #2
 80138aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80138ae:	e7c5      	b.n	801383c <_printf_common+0x58>
 80138b0:	2301      	movs	r3, #1
 80138b2:	4622      	mov	r2, r4
 80138b4:	4649      	mov	r1, r9
 80138b6:	4638      	mov	r0, r7
 80138b8:	47c0      	blx	r8
 80138ba:	3001      	adds	r0, #1
 80138bc:	d0e6      	beq.n	801388c <_printf_common+0xa8>
 80138be:	3601      	adds	r6, #1
 80138c0:	e7d9      	b.n	8013876 <_printf_common+0x92>
	...

080138c4 <_printf_i>:
 80138c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80138c8:	7e0f      	ldrb	r7, [r1, #24]
 80138ca:	4691      	mov	r9, r2
 80138cc:	2f78      	cmp	r7, #120	; 0x78
 80138ce:	4680      	mov	r8, r0
 80138d0:	460c      	mov	r4, r1
 80138d2:	469a      	mov	sl, r3
 80138d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80138d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80138da:	d807      	bhi.n	80138ec <_printf_i+0x28>
 80138dc:	2f62      	cmp	r7, #98	; 0x62
 80138de:	d80a      	bhi.n	80138f6 <_printf_i+0x32>
 80138e0:	2f00      	cmp	r7, #0
 80138e2:	f000 80d9 	beq.w	8013a98 <_printf_i+0x1d4>
 80138e6:	2f58      	cmp	r7, #88	; 0x58
 80138e8:	f000 80a4 	beq.w	8013a34 <_printf_i+0x170>
 80138ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80138f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80138f4:	e03a      	b.n	801396c <_printf_i+0xa8>
 80138f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80138fa:	2b15      	cmp	r3, #21
 80138fc:	d8f6      	bhi.n	80138ec <_printf_i+0x28>
 80138fe:	a101      	add	r1, pc, #4	; (adr r1, 8013904 <_printf_i+0x40>)
 8013900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013904:	0801395d 	.word	0x0801395d
 8013908:	08013971 	.word	0x08013971
 801390c:	080138ed 	.word	0x080138ed
 8013910:	080138ed 	.word	0x080138ed
 8013914:	080138ed 	.word	0x080138ed
 8013918:	080138ed 	.word	0x080138ed
 801391c:	08013971 	.word	0x08013971
 8013920:	080138ed 	.word	0x080138ed
 8013924:	080138ed 	.word	0x080138ed
 8013928:	080138ed 	.word	0x080138ed
 801392c:	080138ed 	.word	0x080138ed
 8013930:	08013a7f 	.word	0x08013a7f
 8013934:	080139a1 	.word	0x080139a1
 8013938:	08013a61 	.word	0x08013a61
 801393c:	080138ed 	.word	0x080138ed
 8013940:	080138ed 	.word	0x080138ed
 8013944:	08013aa1 	.word	0x08013aa1
 8013948:	080138ed 	.word	0x080138ed
 801394c:	080139a1 	.word	0x080139a1
 8013950:	080138ed 	.word	0x080138ed
 8013954:	080138ed 	.word	0x080138ed
 8013958:	08013a69 	.word	0x08013a69
 801395c:	682b      	ldr	r3, [r5, #0]
 801395e:	1d1a      	adds	r2, r3, #4
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	602a      	str	r2, [r5, #0]
 8013964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801396c:	2301      	movs	r3, #1
 801396e:	e0a4      	b.n	8013aba <_printf_i+0x1f6>
 8013970:	6820      	ldr	r0, [r4, #0]
 8013972:	6829      	ldr	r1, [r5, #0]
 8013974:	0606      	lsls	r6, r0, #24
 8013976:	f101 0304 	add.w	r3, r1, #4
 801397a:	d50a      	bpl.n	8013992 <_printf_i+0xce>
 801397c:	680e      	ldr	r6, [r1, #0]
 801397e:	602b      	str	r3, [r5, #0]
 8013980:	2e00      	cmp	r6, #0
 8013982:	da03      	bge.n	801398c <_printf_i+0xc8>
 8013984:	232d      	movs	r3, #45	; 0x2d
 8013986:	4276      	negs	r6, r6
 8013988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801398c:	230a      	movs	r3, #10
 801398e:	485e      	ldr	r0, [pc, #376]	; (8013b08 <_printf_i+0x244>)
 8013990:	e019      	b.n	80139c6 <_printf_i+0x102>
 8013992:	680e      	ldr	r6, [r1, #0]
 8013994:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013998:	602b      	str	r3, [r5, #0]
 801399a:	bf18      	it	ne
 801399c:	b236      	sxthne	r6, r6
 801399e:	e7ef      	b.n	8013980 <_printf_i+0xbc>
 80139a0:	682b      	ldr	r3, [r5, #0]
 80139a2:	6820      	ldr	r0, [r4, #0]
 80139a4:	1d19      	adds	r1, r3, #4
 80139a6:	6029      	str	r1, [r5, #0]
 80139a8:	0601      	lsls	r1, r0, #24
 80139aa:	d501      	bpl.n	80139b0 <_printf_i+0xec>
 80139ac:	681e      	ldr	r6, [r3, #0]
 80139ae:	e002      	b.n	80139b6 <_printf_i+0xf2>
 80139b0:	0646      	lsls	r6, r0, #25
 80139b2:	d5fb      	bpl.n	80139ac <_printf_i+0xe8>
 80139b4:	881e      	ldrh	r6, [r3, #0]
 80139b6:	2f6f      	cmp	r7, #111	; 0x6f
 80139b8:	bf0c      	ite	eq
 80139ba:	2308      	moveq	r3, #8
 80139bc:	230a      	movne	r3, #10
 80139be:	4852      	ldr	r0, [pc, #328]	; (8013b08 <_printf_i+0x244>)
 80139c0:	2100      	movs	r1, #0
 80139c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80139c6:	6865      	ldr	r5, [r4, #4]
 80139c8:	2d00      	cmp	r5, #0
 80139ca:	bfa8      	it	ge
 80139cc:	6821      	ldrge	r1, [r4, #0]
 80139ce:	60a5      	str	r5, [r4, #8]
 80139d0:	bfa4      	itt	ge
 80139d2:	f021 0104 	bicge.w	r1, r1, #4
 80139d6:	6021      	strge	r1, [r4, #0]
 80139d8:	b90e      	cbnz	r6, 80139de <_printf_i+0x11a>
 80139da:	2d00      	cmp	r5, #0
 80139dc:	d04d      	beq.n	8013a7a <_printf_i+0x1b6>
 80139de:	4615      	mov	r5, r2
 80139e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80139e4:	fb03 6711 	mls	r7, r3, r1, r6
 80139e8:	5dc7      	ldrb	r7, [r0, r7]
 80139ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80139ee:	4637      	mov	r7, r6
 80139f0:	42bb      	cmp	r3, r7
 80139f2:	460e      	mov	r6, r1
 80139f4:	d9f4      	bls.n	80139e0 <_printf_i+0x11c>
 80139f6:	2b08      	cmp	r3, #8
 80139f8:	d10b      	bne.n	8013a12 <_printf_i+0x14e>
 80139fa:	6823      	ldr	r3, [r4, #0]
 80139fc:	07de      	lsls	r6, r3, #31
 80139fe:	d508      	bpl.n	8013a12 <_printf_i+0x14e>
 8013a00:	6923      	ldr	r3, [r4, #16]
 8013a02:	6861      	ldr	r1, [r4, #4]
 8013a04:	4299      	cmp	r1, r3
 8013a06:	bfde      	ittt	le
 8013a08:	2330      	movle	r3, #48	; 0x30
 8013a0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013a0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013a12:	1b52      	subs	r2, r2, r5
 8013a14:	6122      	str	r2, [r4, #16]
 8013a16:	464b      	mov	r3, r9
 8013a18:	4621      	mov	r1, r4
 8013a1a:	4640      	mov	r0, r8
 8013a1c:	f8cd a000 	str.w	sl, [sp]
 8013a20:	aa03      	add	r2, sp, #12
 8013a22:	f7ff fedf 	bl	80137e4 <_printf_common>
 8013a26:	3001      	adds	r0, #1
 8013a28:	d14c      	bne.n	8013ac4 <_printf_i+0x200>
 8013a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8013a2e:	b004      	add	sp, #16
 8013a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a34:	4834      	ldr	r0, [pc, #208]	; (8013b08 <_printf_i+0x244>)
 8013a36:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013a3a:	6829      	ldr	r1, [r5, #0]
 8013a3c:	6823      	ldr	r3, [r4, #0]
 8013a3e:	f851 6b04 	ldr.w	r6, [r1], #4
 8013a42:	6029      	str	r1, [r5, #0]
 8013a44:	061d      	lsls	r5, r3, #24
 8013a46:	d514      	bpl.n	8013a72 <_printf_i+0x1ae>
 8013a48:	07df      	lsls	r7, r3, #31
 8013a4a:	bf44      	itt	mi
 8013a4c:	f043 0320 	orrmi.w	r3, r3, #32
 8013a50:	6023      	strmi	r3, [r4, #0]
 8013a52:	b91e      	cbnz	r6, 8013a5c <_printf_i+0x198>
 8013a54:	6823      	ldr	r3, [r4, #0]
 8013a56:	f023 0320 	bic.w	r3, r3, #32
 8013a5a:	6023      	str	r3, [r4, #0]
 8013a5c:	2310      	movs	r3, #16
 8013a5e:	e7af      	b.n	80139c0 <_printf_i+0xfc>
 8013a60:	6823      	ldr	r3, [r4, #0]
 8013a62:	f043 0320 	orr.w	r3, r3, #32
 8013a66:	6023      	str	r3, [r4, #0]
 8013a68:	2378      	movs	r3, #120	; 0x78
 8013a6a:	4828      	ldr	r0, [pc, #160]	; (8013b0c <_printf_i+0x248>)
 8013a6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013a70:	e7e3      	b.n	8013a3a <_printf_i+0x176>
 8013a72:	0659      	lsls	r1, r3, #25
 8013a74:	bf48      	it	mi
 8013a76:	b2b6      	uxthmi	r6, r6
 8013a78:	e7e6      	b.n	8013a48 <_printf_i+0x184>
 8013a7a:	4615      	mov	r5, r2
 8013a7c:	e7bb      	b.n	80139f6 <_printf_i+0x132>
 8013a7e:	682b      	ldr	r3, [r5, #0]
 8013a80:	6826      	ldr	r6, [r4, #0]
 8013a82:	1d18      	adds	r0, r3, #4
 8013a84:	6961      	ldr	r1, [r4, #20]
 8013a86:	6028      	str	r0, [r5, #0]
 8013a88:	0635      	lsls	r5, r6, #24
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	d501      	bpl.n	8013a92 <_printf_i+0x1ce>
 8013a8e:	6019      	str	r1, [r3, #0]
 8013a90:	e002      	b.n	8013a98 <_printf_i+0x1d4>
 8013a92:	0670      	lsls	r0, r6, #25
 8013a94:	d5fb      	bpl.n	8013a8e <_printf_i+0x1ca>
 8013a96:	8019      	strh	r1, [r3, #0]
 8013a98:	2300      	movs	r3, #0
 8013a9a:	4615      	mov	r5, r2
 8013a9c:	6123      	str	r3, [r4, #16]
 8013a9e:	e7ba      	b.n	8013a16 <_printf_i+0x152>
 8013aa0:	682b      	ldr	r3, [r5, #0]
 8013aa2:	2100      	movs	r1, #0
 8013aa4:	1d1a      	adds	r2, r3, #4
 8013aa6:	602a      	str	r2, [r5, #0]
 8013aa8:	681d      	ldr	r5, [r3, #0]
 8013aaa:	6862      	ldr	r2, [r4, #4]
 8013aac:	4628      	mov	r0, r5
 8013aae:	f000 f999 	bl	8013de4 <memchr>
 8013ab2:	b108      	cbz	r0, 8013ab8 <_printf_i+0x1f4>
 8013ab4:	1b40      	subs	r0, r0, r5
 8013ab6:	6060      	str	r0, [r4, #4]
 8013ab8:	6863      	ldr	r3, [r4, #4]
 8013aba:	6123      	str	r3, [r4, #16]
 8013abc:	2300      	movs	r3, #0
 8013abe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ac2:	e7a8      	b.n	8013a16 <_printf_i+0x152>
 8013ac4:	462a      	mov	r2, r5
 8013ac6:	4649      	mov	r1, r9
 8013ac8:	4640      	mov	r0, r8
 8013aca:	6923      	ldr	r3, [r4, #16]
 8013acc:	47d0      	blx	sl
 8013ace:	3001      	adds	r0, #1
 8013ad0:	d0ab      	beq.n	8013a2a <_printf_i+0x166>
 8013ad2:	6823      	ldr	r3, [r4, #0]
 8013ad4:	079b      	lsls	r3, r3, #30
 8013ad6:	d413      	bmi.n	8013b00 <_printf_i+0x23c>
 8013ad8:	68e0      	ldr	r0, [r4, #12]
 8013ada:	9b03      	ldr	r3, [sp, #12]
 8013adc:	4298      	cmp	r0, r3
 8013ade:	bfb8      	it	lt
 8013ae0:	4618      	movlt	r0, r3
 8013ae2:	e7a4      	b.n	8013a2e <_printf_i+0x16a>
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	4632      	mov	r2, r6
 8013ae8:	4649      	mov	r1, r9
 8013aea:	4640      	mov	r0, r8
 8013aec:	47d0      	blx	sl
 8013aee:	3001      	adds	r0, #1
 8013af0:	d09b      	beq.n	8013a2a <_printf_i+0x166>
 8013af2:	3501      	adds	r5, #1
 8013af4:	68e3      	ldr	r3, [r4, #12]
 8013af6:	9903      	ldr	r1, [sp, #12]
 8013af8:	1a5b      	subs	r3, r3, r1
 8013afa:	42ab      	cmp	r3, r5
 8013afc:	dcf2      	bgt.n	8013ae4 <_printf_i+0x220>
 8013afe:	e7eb      	b.n	8013ad8 <_printf_i+0x214>
 8013b00:	2500      	movs	r5, #0
 8013b02:	f104 0619 	add.w	r6, r4, #25
 8013b06:	e7f5      	b.n	8013af4 <_printf_i+0x230>
 8013b08:	08014ff5 	.word	0x08014ff5
 8013b0c:	08015006 	.word	0x08015006

08013b10 <_read_r>:
 8013b10:	b538      	push	{r3, r4, r5, lr}
 8013b12:	4604      	mov	r4, r0
 8013b14:	4608      	mov	r0, r1
 8013b16:	4611      	mov	r1, r2
 8013b18:	2200      	movs	r2, #0
 8013b1a:	4d05      	ldr	r5, [pc, #20]	; (8013b30 <_read_r+0x20>)
 8013b1c:	602a      	str	r2, [r5, #0]
 8013b1e:	461a      	mov	r2, r3
 8013b20:	f7f1 fcc5 	bl	80054ae <_read>
 8013b24:	1c43      	adds	r3, r0, #1
 8013b26:	d102      	bne.n	8013b2e <_read_r+0x1e>
 8013b28:	682b      	ldr	r3, [r5, #0]
 8013b2a:	b103      	cbz	r3, 8013b2e <_read_r+0x1e>
 8013b2c:	6023      	str	r3, [r4, #0]
 8013b2e:	bd38      	pop	{r3, r4, r5, pc}
 8013b30:	2000a760 	.word	0x2000a760

08013b34 <nan>:
 8013b34:	2000      	movs	r0, #0
 8013b36:	4901      	ldr	r1, [pc, #4]	; (8013b3c <nan+0x8>)
 8013b38:	4770      	bx	lr
 8013b3a:	bf00      	nop
 8013b3c:	7ff80000 	.word	0x7ff80000

08013b40 <nanf>:
 8013b40:	4800      	ldr	r0, [pc, #0]	; (8013b44 <nanf+0x4>)
 8013b42:	4770      	bx	lr
 8013b44:	7fc00000 	.word	0x7fc00000

08013b48 <strncmp>:
 8013b48:	4603      	mov	r3, r0
 8013b4a:	b510      	push	{r4, lr}
 8013b4c:	b172      	cbz	r2, 8013b6c <strncmp+0x24>
 8013b4e:	3901      	subs	r1, #1
 8013b50:	1884      	adds	r4, r0, r2
 8013b52:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013b56:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013b5a:	4290      	cmp	r0, r2
 8013b5c:	d101      	bne.n	8013b62 <strncmp+0x1a>
 8013b5e:	42a3      	cmp	r3, r4
 8013b60:	d101      	bne.n	8013b66 <strncmp+0x1e>
 8013b62:	1a80      	subs	r0, r0, r2
 8013b64:	bd10      	pop	{r4, pc}
 8013b66:	2800      	cmp	r0, #0
 8013b68:	d1f3      	bne.n	8013b52 <strncmp+0xa>
 8013b6a:	e7fa      	b.n	8013b62 <strncmp+0x1a>
 8013b6c:	4610      	mov	r0, r2
 8013b6e:	e7f9      	b.n	8013b64 <strncmp+0x1c>

08013b70 <__swbuf_r>:
 8013b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b72:	460e      	mov	r6, r1
 8013b74:	4614      	mov	r4, r2
 8013b76:	4605      	mov	r5, r0
 8013b78:	b118      	cbz	r0, 8013b82 <__swbuf_r+0x12>
 8013b7a:	6983      	ldr	r3, [r0, #24]
 8013b7c:	b90b      	cbnz	r3, 8013b82 <__swbuf_r+0x12>
 8013b7e:	f7fc fffb 	bl	8010b78 <__sinit>
 8013b82:	4b21      	ldr	r3, [pc, #132]	; (8013c08 <__swbuf_r+0x98>)
 8013b84:	429c      	cmp	r4, r3
 8013b86:	d12b      	bne.n	8013be0 <__swbuf_r+0x70>
 8013b88:	686c      	ldr	r4, [r5, #4]
 8013b8a:	69a3      	ldr	r3, [r4, #24]
 8013b8c:	60a3      	str	r3, [r4, #8]
 8013b8e:	89a3      	ldrh	r3, [r4, #12]
 8013b90:	071a      	lsls	r2, r3, #28
 8013b92:	d52f      	bpl.n	8013bf4 <__swbuf_r+0x84>
 8013b94:	6923      	ldr	r3, [r4, #16]
 8013b96:	b36b      	cbz	r3, 8013bf4 <__swbuf_r+0x84>
 8013b98:	6923      	ldr	r3, [r4, #16]
 8013b9a:	6820      	ldr	r0, [r4, #0]
 8013b9c:	b2f6      	uxtb	r6, r6
 8013b9e:	1ac0      	subs	r0, r0, r3
 8013ba0:	6963      	ldr	r3, [r4, #20]
 8013ba2:	4637      	mov	r7, r6
 8013ba4:	4283      	cmp	r3, r0
 8013ba6:	dc04      	bgt.n	8013bb2 <__swbuf_r+0x42>
 8013ba8:	4621      	mov	r1, r4
 8013baa:	4628      	mov	r0, r5
 8013bac:	f7fe fab6 	bl	801211c <_fflush_r>
 8013bb0:	bb30      	cbnz	r0, 8013c00 <__swbuf_r+0x90>
 8013bb2:	68a3      	ldr	r3, [r4, #8]
 8013bb4:	3001      	adds	r0, #1
 8013bb6:	3b01      	subs	r3, #1
 8013bb8:	60a3      	str	r3, [r4, #8]
 8013bba:	6823      	ldr	r3, [r4, #0]
 8013bbc:	1c5a      	adds	r2, r3, #1
 8013bbe:	6022      	str	r2, [r4, #0]
 8013bc0:	701e      	strb	r6, [r3, #0]
 8013bc2:	6963      	ldr	r3, [r4, #20]
 8013bc4:	4283      	cmp	r3, r0
 8013bc6:	d004      	beq.n	8013bd2 <__swbuf_r+0x62>
 8013bc8:	89a3      	ldrh	r3, [r4, #12]
 8013bca:	07db      	lsls	r3, r3, #31
 8013bcc:	d506      	bpl.n	8013bdc <__swbuf_r+0x6c>
 8013bce:	2e0a      	cmp	r6, #10
 8013bd0:	d104      	bne.n	8013bdc <__swbuf_r+0x6c>
 8013bd2:	4621      	mov	r1, r4
 8013bd4:	4628      	mov	r0, r5
 8013bd6:	f7fe faa1 	bl	801211c <_fflush_r>
 8013bda:	b988      	cbnz	r0, 8013c00 <__swbuf_r+0x90>
 8013bdc:	4638      	mov	r0, r7
 8013bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013be0:	4b0a      	ldr	r3, [pc, #40]	; (8013c0c <__swbuf_r+0x9c>)
 8013be2:	429c      	cmp	r4, r3
 8013be4:	d101      	bne.n	8013bea <__swbuf_r+0x7a>
 8013be6:	68ac      	ldr	r4, [r5, #8]
 8013be8:	e7cf      	b.n	8013b8a <__swbuf_r+0x1a>
 8013bea:	4b09      	ldr	r3, [pc, #36]	; (8013c10 <__swbuf_r+0xa0>)
 8013bec:	429c      	cmp	r4, r3
 8013bee:	bf08      	it	eq
 8013bf0:	68ec      	ldreq	r4, [r5, #12]
 8013bf2:	e7ca      	b.n	8013b8a <__swbuf_r+0x1a>
 8013bf4:	4621      	mov	r1, r4
 8013bf6:	4628      	mov	r0, r5
 8013bf8:	f000 f81a 	bl	8013c30 <__swsetup_r>
 8013bfc:	2800      	cmp	r0, #0
 8013bfe:	d0cb      	beq.n	8013b98 <__swbuf_r+0x28>
 8013c00:	f04f 37ff 	mov.w	r7, #4294967295
 8013c04:	e7ea      	b.n	8013bdc <__swbuf_r+0x6c>
 8013c06:	bf00      	nop
 8013c08:	08014bb0 	.word	0x08014bb0
 8013c0c:	08014bd0 	.word	0x08014bd0
 8013c10:	08014b90 	.word	0x08014b90

08013c14 <__ascii_wctomb>:
 8013c14:	4603      	mov	r3, r0
 8013c16:	4608      	mov	r0, r1
 8013c18:	b141      	cbz	r1, 8013c2c <__ascii_wctomb+0x18>
 8013c1a:	2aff      	cmp	r2, #255	; 0xff
 8013c1c:	d904      	bls.n	8013c28 <__ascii_wctomb+0x14>
 8013c1e:	228a      	movs	r2, #138	; 0x8a
 8013c20:	f04f 30ff 	mov.w	r0, #4294967295
 8013c24:	601a      	str	r2, [r3, #0]
 8013c26:	4770      	bx	lr
 8013c28:	2001      	movs	r0, #1
 8013c2a:	700a      	strb	r2, [r1, #0]
 8013c2c:	4770      	bx	lr
	...

08013c30 <__swsetup_r>:
 8013c30:	4b32      	ldr	r3, [pc, #200]	; (8013cfc <__swsetup_r+0xcc>)
 8013c32:	b570      	push	{r4, r5, r6, lr}
 8013c34:	681d      	ldr	r5, [r3, #0]
 8013c36:	4606      	mov	r6, r0
 8013c38:	460c      	mov	r4, r1
 8013c3a:	b125      	cbz	r5, 8013c46 <__swsetup_r+0x16>
 8013c3c:	69ab      	ldr	r3, [r5, #24]
 8013c3e:	b913      	cbnz	r3, 8013c46 <__swsetup_r+0x16>
 8013c40:	4628      	mov	r0, r5
 8013c42:	f7fc ff99 	bl	8010b78 <__sinit>
 8013c46:	4b2e      	ldr	r3, [pc, #184]	; (8013d00 <__swsetup_r+0xd0>)
 8013c48:	429c      	cmp	r4, r3
 8013c4a:	d10f      	bne.n	8013c6c <__swsetup_r+0x3c>
 8013c4c:	686c      	ldr	r4, [r5, #4]
 8013c4e:	89a3      	ldrh	r3, [r4, #12]
 8013c50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c54:	0719      	lsls	r1, r3, #28
 8013c56:	d42c      	bmi.n	8013cb2 <__swsetup_r+0x82>
 8013c58:	06dd      	lsls	r5, r3, #27
 8013c5a:	d411      	bmi.n	8013c80 <__swsetup_r+0x50>
 8013c5c:	2309      	movs	r3, #9
 8013c5e:	6033      	str	r3, [r6, #0]
 8013c60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013c64:	f04f 30ff 	mov.w	r0, #4294967295
 8013c68:	81a3      	strh	r3, [r4, #12]
 8013c6a:	e03e      	b.n	8013cea <__swsetup_r+0xba>
 8013c6c:	4b25      	ldr	r3, [pc, #148]	; (8013d04 <__swsetup_r+0xd4>)
 8013c6e:	429c      	cmp	r4, r3
 8013c70:	d101      	bne.n	8013c76 <__swsetup_r+0x46>
 8013c72:	68ac      	ldr	r4, [r5, #8]
 8013c74:	e7eb      	b.n	8013c4e <__swsetup_r+0x1e>
 8013c76:	4b24      	ldr	r3, [pc, #144]	; (8013d08 <__swsetup_r+0xd8>)
 8013c78:	429c      	cmp	r4, r3
 8013c7a:	bf08      	it	eq
 8013c7c:	68ec      	ldreq	r4, [r5, #12]
 8013c7e:	e7e6      	b.n	8013c4e <__swsetup_r+0x1e>
 8013c80:	0758      	lsls	r0, r3, #29
 8013c82:	d512      	bpl.n	8013caa <__swsetup_r+0x7a>
 8013c84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c86:	b141      	cbz	r1, 8013c9a <__swsetup_r+0x6a>
 8013c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c8c:	4299      	cmp	r1, r3
 8013c8e:	d002      	beq.n	8013c96 <__swsetup_r+0x66>
 8013c90:	4630      	mov	r0, r6
 8013c92:	f7fd f85d 	bl	8010d50 <_free_r>
 8013c96:	2300      	movs	r3, #0
 8013c98:	6363      	str	r3, [r4, #52]	; 0x34
 8013c9a:	89a3      	ldrh	r3, [r4, #12]
 8013c9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013ca0:	81a3      	strh	r3, [r4, #12]
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	6063      	str	r3, [r4, #4]
 8013ca6:	6923      	ldr	r3, [r4, #16]
 8013ca8:	6023      	str	r3, [r4, #0]
 8013caa:	89a3      	ldrh	r3, [r4, #12]
 8013cac:	f043 0308 	orr.w	r3, r3, #8
 8013cb0:	81a3      	strh	r3, [r4, #12]
 8013cb2:	6923      	ldr	r3, [r4, #16]
 8013cb4:	b94b      	cbnz	r3, 8013cca <__swsetup_r+0x9a>
 8013cb6:	89a3      	ldrh	r3, [r4, #12]
 8013cb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013cc0:	d003      	beq.n	8013cca <__swsetup_r+0x9a>
 8013cc2:	4621      	mov	r1, r4
 8013cc4:	4630      	mov	r0, r6
 8013cc6:	f000 f84d 	bl	8013d64 <__smakebuf_r>
 8013cca:	89a0      	ldrh	r0, [r4, #12]
 8013ccc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013cd0:	f010 0301 	ands.w	r3, r0, #1
 8013cd4:	d00a      	beq.n	8013cec <__swsetup_r+0xbc>
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	60a3      	str	r3, [r4, #8]
 8013cda:	6963      	ldr	r3, [r4, #20]
 8013cdc:	425b      	negs	r3, r3
 8013cde:	61a3      	str	r3, [r4, #24]
 8013ce0:	6923      	ldr	r3, [r4, #16]
 8013ce2:	b943      	cbnz	r3, 8013cf6 <__swsetup_r+0xc6>
 8013ce4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013ce8:	d1ba      	bne.n	8013c60 <__swsetup_r+0x30>
 8013cea:	bd70      	pop	{r4, r5, r6, pc}
 8013cec:	0781      	lsls	r1, r0, #30
 8013cee:	bf58      	it	pl
 8013cf0:	6963      	ldrpl	r3, [r4, #20]
 8013cf2:	60a3      	str	r3, [r4, #8]
 8013cf4:	e7f4      	b.n	8013ce0 <__swsetup_r+0xb0>
 8013cf6:	2000      	movs	r0, #0
 8013cf8:	e7f7      	b.n	8013cea <__swsetup_r+0xba>
 8013cfa:	bf00      	nop
 8013cfc:	200001e8 	.word	0x200001e8
 8013d00:	08014bb0 	.word	0x08014bb0
 8013d04:	08014bd0 	.word	0x08014bd0
 8013d08:	08014b90 	.word	0x08014b90

08013d0c <abort>:
 8013d0c:	2006      	movs	r0, #6
 8013d0e:	b508      	push	{r3, lr}
 8013d10:	f000 f8e8 	bl	8013ee4 <raise>
 8013d14:	2001      	movs	r0, #1
 8013d16:	f7f1 fbc0 	bl	800549a <_exit>

08013d1a <__swhatbuf_r>:
 8013d1a:	b570      	push	{r4, r5, r6, lr}
 8013d1c:	460e      	mov	r6, r1
 8013d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d22:	4614      	mov	r4, r2
 8013d24:	2900      	cmp	r1, #0
 8013d26:	461d      	mov	r5, r3
 8013d28:	b096      	sub	sp, #88	; 0x58
 8013d2a:	da08      	bge.n	8013d3e <__swhatbuf_r+0x24>
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013d32:	602a      	str	r2, [r5, #0]
 8013d34:	061a      	lsls	r2, r3, #24
 8013d36:	d410      	bmi.n	8013d5a <__swhatbuf_r+0x40>
 8013d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d3c:	e00e      	b.n	8013d5c <__swhatbuf_r+0x42>
 8013d3e:	466a      	mov	r2, sp
 8013d40:	f000 f8ec 	bl	8013f1c <_fstat_r>
 8013d44:	2800      	cmp	r0, #0
 8013d46:	dbf1      	blt.n	8013d2c <__swhatbuf_r+0x12>
 8013d48:	9a01      	ldr	r2, [sp, #4]
 8013d4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013d4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013d52:	425a      	negs	r2, r3
 8013d54:	415a      	adcs	r2, r3
 8013d56:	602a      	str	r2, [r5, #0]
 8013d58:	e7ee      	b.n	8013d38 <__swhatbuf_r+0x1e>
 8013d5a:	2340      	movs	r3, #64	; 0x40
 8013d5c:	2000      	movs	r0, #0
 8013d5e:	6023      	str	r3, [r4, #0]
 8013d60:	b016      	add	sp, #88	; 0x58
 8013d62:	bd70      	pop	{r4, r5, r6, pc}

08013d64 <__smakebuf_r>:
 8013d64:	898b      	ldrh	r3, [r1, #12]
 8013d66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013d68:	079d      	lsls	r5, r3, #30
 8013d6a:	4606      	mov	r6, r0
 8013d6c:	460c      	mov	r4, r1
 8013d6e:	d507      	bpl.n	8013d80 <__smakebuf_r+0x1c>
 8013d70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013d74:	6023      	str	r3, [r4, #0]
 8013d76:	6123      	str	r3, [r4, #16]
 8013d78:	2301      	movs	r3, #1
 8013d7a:	6163      	str	r3, [r4, #20]
 8013d7c:	b002      	add	sp, #8
 8013d7e:	bd70      	pop	{r4, r5, r6, pc}
 8013d80:	466a      	mov	r2, sp
 8013d82:	ab01      	add	r3, sp, #4
 8013d84:	f7ff ffc9 	bl	8013d1a <__swhatbuf_r>
 8013d88:	9900      	ldr	r1, [sp, #0]
 8013d8a:	4605      	mov	r5, r0
 8013d8c:	4630      	mov	r0, r6
 8013d8e:	f7fd f847 	bl	8010e20 <_malloc_r>
 8013d92:	b948      	cbnz	r0, 8013da8 <__smakebuf_r+0x44>
 8013d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d98:	059a      	lsls	r2, r3, #22
 8013d9a:	d4ef      	bmi.n	8013d7c <__smakebuf_r+0x18>
 8013d9c:	f023 0303 	bic.w	r3, r3, #3
 8013da0:	f043 0302 	orr.w	r3, r3, #2
 8013da4:	81a3      	strh	r3, [r4, #12]
 8013da6:	e7e3      	b.n	8013d70 <__smakebuf_r+0xc>
 8013da8:	4b0d      	ldr	r3, [pc, #52]	; (8013de0 <__smakebuf_r+0x7c>)
 8013daa:	62b3      	str	r3, [r6, #40]	; 0x28
 8013dac:	89a3      	ldrh	r3, [r4, #12]
 8013dae:	6020      	str	r0, [r4, #0]
 8013db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013db4:	81a3      	strh	r3, [r4, #12]
 8013db6:	9b00      	ldr	r3, [sp, #0]
 8013db8:	6120      	str	r0, [r4, #16]
 8013dba:	6163      	str	r3, [r4, #20]
 8013dbc:	9b01      	ldr	r3, [sp, #4]
 8013dbe:	b15b      	cbz	r3, 8013dd8 <__smakebuf_r+0x74>
 8013dc0:	4630      	mov	r0, r6
 8013dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013dc6:	f000 f8bb 	bl	8013f40 <_isatty_r>
 8013dca:	b128      	cbz	r0, 8013dd8 <__smakebuf_r+0x74>
 8013dcc:	89a3      	ldrh	r3, [r4, #12]
 8013dce:	f023 0303 	bic.w	r3, r3, #3
 8013dd2:	f043 0301 	orr.w	r3, r3, #1
 8013dd6:	81a3      	strh	r3, [r4, #12]
 8013dd8:	89a0      	ldrh	r0, [r4, #12]
 8013dda:	4305      	orrs	r5, r0
 8013ddc:	81a5      	strh	r5, [r4, #12]
 8013dde:	e7cd      	b.n	8013d7c <__smakebuf_r+0x18>
 8013de0:	08010b11 	.word	0x08010b11

08013de4 <memchr>:
 8013de4:	4603      	mov	r3, r0
 8013de6:	b510      	push	{r4, lr}
 8013de8:	b2c9      	uxtb	r1, r1
 8013dea:	4402      	add	r2, r0
 8013dec:	4293      	cmp	r3, r2
 8013dee:	4618      	mov	r0, r3
 8013df0:	d101      	bne.n	8013df6 <memchr+0x12>
 8013df2:	2000      	movs	r0, #0
 8013df4:	e003      	b.n	8013dfe <memchr+0x1a>
 8013df6:	7804      	ldrb	r4, [r0, #0]
 8013df8:	3301      	adds	r3, #1
 8013dfa:	428c      	cmp	r4, r1
 8013dfc:	d1f6      	bne.n	8013dec <memchr+0x8>
 8013dfe:	bd10      	pop	{r4, pc}

08013e00 <memmove>:
 8013e00:	4288      	cmp	r0, r1
 8013e02:	b510      	push	{r4, lr}
 8013e04:	eb01 0402 	add.w	r4, r1, r2
 8013e08:	d902      	bls.n	8013e10 <memmove+0x10>
 8013e0a:	4284      	cmp	r4, r0
 8013e0c:	4623      	mov	r3, r4
 8013e0e:	d807      	bhi.n	8013e20 <memmove+0x20>
 8013e10:	1e43      	subs	r3, r0, #1
 8013e12:	42a1      	cmp	r1, r4
 8013e14:	d008      	beq.n	8013e28 <memmove+0x28>
 8013e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013e1e:	e7f8      	b.n	8013e12 <memmove+0x12>
 8013e20:	4601      	mov	r1, r0
 8013e22:	4402      	add	r2, r0
 8013e24:	428a      	cmp	r2, r1
 8013e26:	d100      	bne.n	8013e2a <memmove+0x2a>
 8013e28:	bd10      	pop	{r4, pc}
 8013e2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013e2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013e32:	e7f7      	b.n	8013e24 <memmove+0x24>

08013e34 <_realloc_r>:
 8013e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e38:	4680      	mov	r8, r0
 8013e3a:	4614      	mov	r4, r2
 8013e3c:	460e      	mov	r6, r1
 8013e3e:	b921      	cbnz	r1, 8013e4a <_realloc_r+0x16>
 8013e40:	4611      	mov	r1, r2
 8013e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e46:	f7fc bfeb 	b.w	8010e20 <_malloc_r>
 8013e4a:	b92a      	cbnz	r2, 8013e58 <_realloc_r+0x24>
 8013e4c:	f7fc ff80 	bl	8010d50 <_free_r>
 8013e50:	4625      	mov	r5, r4
 8013e52:	4628      	mov	r0, r5
 8013e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e58:	f000 f882 	bl	8013f60 <_malloc_usable_size_r>
 8013e5c:	4284      	cmp	r4, r0
 8013e5e:	4607      	mov	r7, r0
 8013e60:	d802      	bhi.n	8013e68 <_realloc_r+0x34>
 8013e62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013e66:	d812      	bhi.n	8013e8e <_realloc_r+0x5a>
 8013e68:	4621      	mov	r1, r4
 8013e6a:	4640      	mov	r0, r8
 8013e6c:	f7fc ffd8 	bl	8010e20 <_malloc_r>
 8013e70:	4605      	mov	r5, r0
 8013e72:	2800      	cmp	r0, #0
 8013e74:	d0ed      	beq.n	8013e52 <_realloc_r+0x1e>
 8013e76:	42bc      	cmp	r4, r7
 8013e78:	4622      	mov	r2, r4
 8013e7a:	4631      	mov	r1, r6
 8013e7c:	bf28      	it	cs
 8013e7e:	463a      	movcs	r2, r7
 8013e80:	f7fc ff50 	bl	8010d24 <memcpy>
 8013e84:	4631      	mov	r1, r6
 8013e86:	4640      	mov	r0, r8
 8013e88:	f7fc ff62 	bl	8010d50 <_free_r>
 8013e8c:	e7e1      	b.n	8013e52 <_realloc_r+0x1e>
 8013e8e:	4635      	mov	r5, r6
 8013e90:	e7df      	b.n	8013e52 <_realloc_r+0x1e>

08013e92 <_raise_r>:
 8013e92:	291f      	cmp	r1, #31
 8013e94:	b538      	push	{r3, r4, r5, lr}
 8013e96:	4604      	mov	r4, r0
 8013e98:	460d      	mov	r5, r1
 8013e9a:	d904      	bls.n	8013ea6 <_raise_r+0x14>
 8013e9c:	2316      	movs	r3, #22
 8013e9e:	6003      	str	r3, [r0, #0]
 8013ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ea4:	bd38      	pop	{r3, r4, r5, pc}
 8013ea6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013ea8:	b112      	cbz	r2, 8013eb0 <_raise_r+0x1e>
 8013eaa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013eae:	b94b      	cbnz	r3, 8013ec4 <_raise_r+0x32>
 8013eb0:	4620      	mov	r0, r4
 8013eb2:	f000 f831 	bl	8013f18 <_getpid_r>
 8013eb6:	462a      	mov	r2, r5
 8013eb8:	4601      	mov	r1, r0
 8013eba:	4620      	mov	r0, r4
 8013ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ec0:	f000 b818 	b.w	8013ef4 <_kill_r>
 8013ec4:	2b01      	cmp	r3, #1
 8013ec6:	d00a      	beq.n	8013ede <_raise_r+0x4c>
 8013ec8:	1c59      	adds	r1, r3, #1
 8013eca:	d103      	bne.n	8013ed4 <_raise_r+0x42>
 8013ecc:	2316      	movs	r3, #22
 8013ece:	6003      	str	r3, [r0, #0]
 8013ed0:	2001      	movs	r0, #1
 8013ed2:	e7e7      	b.n	8013ea4 <_raise_r+0x12>
 8013ed4:	2400      	movs	r4, #0
 8013ed6:	4628      	mov	r0, r5
 8013ed8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013edc:	4798      	blx	r3
 8013ede:	2000      	movs	r0, #0
 8013ee0:	e7e0      	b.n	8013ea4 <_raise_r+0x12>
	...

08013ee4 <raise>:
 8013ee4:	4b02      	ldr	r3, [pc, #8]	; (8013ef0 <raise+0xc>)
 8013ee6:	4601      	mov	r1, r0
 8013ee8:	6818      	ldr	r0, [r3, #0]
 8013eea:	f7ff bfd2 	b.w	8013e92 <_raise_r>
 8013eee:	bf00      	nop
 8013ef0:	200001e8 	.word	0x200001e8

08013ef4 <_kill_r>:
 8013ef4:	b538      	push	{r3, r4, r5, lr}
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	4d06      	ldr	r5, [pc, #24]	; (8013f14 <_kill_r+0x20>)
 8013efa:	4604      	mov	r4, r0
 8013efc:	4608      	mov	r0, r1
 8013efe:	4611      	mov	r1, r2
 8013f00:	602b      	str	r3, [r5, #0]
 8013f02:	f7f1 faba 	bl	800547a <_kill>
 8013f06:	1c43      	adds	r3, r0, #1
 8013f08:	d102      	bne.n	8013f10 <_kill_r+0x1c>
 8013f0a:	682b      	ldr	r3, [r5, #0]
 8013f0c:	b103      	cbz	r3, 8013f10 <_kill_r+0x1c>
 8013f0e:	6023      	str	r3, [r4, #0]
 8013f10:	bd38      	pop	{r3, r4, r5, pc}
 8013f12:	bf00      	nop
 8013f14:	2000a760 	.word	0x2000a760

08013f18 <_getpid_r>:
 8013f18:	f7f1 baa8 	b.w	800546c <_getpid>

08013f1c <_fstat_r>:
 8013f1c:	b538      	push	{r3, r4, r5, lr}
 8013f1e:	2300      	movs	r3, #0
 8013f20:	4d06      	ldr	r5, [pc, #24]	; (8013f3c <_fstat_r+0x20>)
 8013f22:	4604      	mov	r4, r0
 8013f24:	4608      	mov	r0, r1
 8013f26:	4611      	mov	r1, r2
 8013f28:	602b      	str	r3, [r5, #0]
 8013f2a:	f7f1 fb04 	bl	8005536 <_fstat>
 8013f2e:	1c43      	adds	r3, r0, #1
 8013f30:	d102      	bne.n	8013f38 <_fstat_r+0x1c>
 8013f32:	682b      	ldr	r3, [r5, #0]
 8013f34:	b103      	cbz	r3, 8013f38 <_fstat_r+0x1c>
 8013f36:	6023      	str	r3, [r4, #0]
 8013f38:	bd38      	pop	{r3, r4, r5, pc}
 8013f3a:	bf00      	nop
 8013f3c:	2000a760 	.word	0x2000a760

08013f40 <_isatty_r>:
 8013f40:	b538      	push	{r3, r4, r5, lr}
 8013f42:	2300      	movs	r3, #0
 8013f44:	4d05      	ldr	r5, [pc, #20]	; (8013f5c <_isatty_r+0x1c>)
 8013f46:	4604      	mov	r4, r0
 8013f48:	4608      	mov	r0, r1
 8013f4a:	602b      	str	r3, [r5, #0]
 8013f4c:	f7f1 fb02 	bl	8005554 <_isatty>
 8013f50:	1c43      	adds	r3, r0, #1
 8013f52:	d102      	bne.n	8013f5a <_isatty_r+0x1a>
 8013f54:	682b      	ldr	r3, [r5, #0]
 8013f56:	b103      	cbz	r3, 8013f5a <_isatty_r+0x1a>
 8013f58:	6023      	str	r3, [r4, #0]
 8013f5a:	bd38      	pop	{r3, r4, r5, pc}
 8013f5c:	2000a760 	.word	0x2000a760

08013f60 <_malloc_usable_size_r>:
 8013f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f64:	1f18      	subs	r0, r3, #4
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	bfbc      	itt	lt
 8013f6a:	580b      	ldrlt	r3, [r1, r0]
 8013f6c:	18c0      	addlt	r0, r0, r3
 8013f6e:	4770      	bx	lr

08013f70 <_init>:
 8013f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f72:	bf00      	nop
 8013f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f76:	bc08      	pop	{r3}
 8013f78:	469e      	mov	lr, r3
 8013f7a:	4770      	bx	lr

08013f7c <_fini>:
 8013f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f7e:	bf00      	nop
 8013f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f82:	bc08      	pop	{r3}
 8013f84:	469e      	mov	lr, r3
 8013f86:	4770      	bx	lr
