
HydroC_CO2_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a78  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed8  08012c68  08012c68  00022c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013b40  08013b40  00030270  2**0
                  CONTENTS
  4 .ARM          00000008  08013b40  08013b40  00023b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013b48  08013b48  00030270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013b48  08013b48  00023b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013b4c  08013b4c  00023b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  08013b50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000097b4  20000270  08013dc0  00030270  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009a24  08013dc0  00039a24  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030270  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002544d  00000000  00000000  00030299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005693  00000000  00000000  000556e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f20  00000000  00000000  0005ad80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d20  00000000  00000000  0005cca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d35  00000000  00000000  0005e9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027213  00000000  00000000  000856f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb92f  00000000  00000000  000ac908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00178237  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009798  00000000  00000000  00178288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000270 	.word	0x20000270
 800020c:	00000000 	.word	0x00000000
 8000210:	08012c50 	.word	0x08012c50

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000274 	.word	0x20000274
 800022c:	08012c50 	.word	0x08012c50

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__gesf2>:
 8000bf8:	f04f 3cff 	mov.w	ip, #4294967295
 8000bfc:	e006      	b.n	8000c0c <__cmpsf2+0x4>
 8000bfe:	bf00      	nop

08000c00 <__lesf2>:
 8000c00:	f04f 0c01 	mov.w	ip, #1
 8000c04:	e002      	b.n	8000c0c <__cmpsf2+0x4>
 8000c06:	bf00      	nop

08000c08 <__cmpsf2>:
 8000c08:	f04f 0c01 	mov.w	ip, #1
 8000c0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c1c:	bf18      	it	ne
 8000c1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c22:	d011      	beq.n	8000c48 <__cmpsf2+0x40>
 8000c24:	b001      	add	sp, #4
 8000c26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c2a:	bf18      	it	ne
 8000c2c:	ea90 0f01 	teqne	r0, r1
 8000c30:	bf58      	it	pl
 8000c32:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c36:	bf88      	it	hi
 8000c38:	17c8      	asrhi	r0, r1, #31
 8000c3a:	bf38      	it	cc
 8000c3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c40:	bf18      	it	ne
 8000c42:	f040 0001 	orrne.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c4c:	d102      	bne.n	8000c54 <__cmpsf2+0x4c>
 8000c4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c52:	d105      	bne.n	8000c60 <__cmpsf2+0x58>
 8000c54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c58:	d1e4      	bne.n	8000c24 <__cmpsf2+0x1c>
 8000c5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c5e:	d0e1      	beq.n	8000c24 <__cmpsf2+0x1c>
 8000c60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_cfrcmple>:
 8000c68:	4684      	mov	ip, r0
 8000c6a:	4608      	mov	r0, r1
 8000c6c:	4661      	mov	r1, ip
 8000c6e:	e7ff      	b.n	8000c70 <__aeabi_cfcmpeq>

08000c70 <__aeabi_cfcmpeq>:
 8000c70:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c72:	f7ff ffc9 	bl	8000c08 <__cmpsf2>
 8000c76:	2800      	cmp	r0, #0
 8000c78:	bf48      	it	mi
 8000c7a:	f110 0f00 	cmnmi.w	r0, #0
 8000c7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c80 <__aeabi_fcmpeq>:
 8000c80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c84:	f7ff fff4 	bl	8000c70 <__aeabi_cfcmpeq>
 8000c88:	bf0c      	ite	eq
 8000c8a:	2001      	moveq	r0, #1
 8000c8c:	2000      	movne	r0, #0
 8000c8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c92:	bf00      	nop

08000c94 <__aeabi_fcmplt>:
 8000c94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c98:	f7ff ffea 	bl	8000c70 <__aeabi_cfcmpeq>
 8000c9c:	bf34      	ite	cc
 8000c9e:	2001      	movcc	r0, #1
 8000ca0:	2000      	movcs	r0, #0
 8000ca2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_fcmple>:
 8000ca8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cac:	f7ff ffe0 	bl	8000c70 <__aeabi_cfcmpeq>
 8000cb0:	bf94      	ite	ls
 8000cb2:	2001      	movls	r0, #1
 8000cb4:	2000      	movhi	r0, #0
 8000cb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cba:	bf00      	nop

08000cbc <__aeabi_fcmpge>:
 8000cbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cc0:	f7ff ffd2 	bl	8000c68 <__aeabi_cfrcmple>
 8000cc4:	bf94      	ite	ls
 8000cc6:	2001      	movls	r0, #1
 8000cc8:	2000      	movhi	r0, #0
 8000cca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fcmpgt>:
 8000cd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cd4:	f7ff ffc8 	bl	8000c68 <__aeabi_cfrcmple>
 8000cd8:	bf34      	ite	cc
 8000cda:	2001      	movcc	r0, #1
 8000cdc:	2000      	movcs	r0, #0
 8000cde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_fcmpun>:
 8000ce4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	d102      	bne.n	8000cf8 <__aeabi_fcmpun+0x14>
 8000cf2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cf6:	d108      	bne.n	8000d0a <__aeabi_fcmpun+0x26>
 8000cf8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cfc:	d102      	bne.n	8000d04 <__aeabi_fcmpun+0x20>
 8000cfe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d02:	d102      	bne.n	8000d0a <__aeabi_fcmpun+0x26>
 8000d04:	f04f 0000 	mov.w	r0, #0
 8000d08:	4770      	bx	lr
 8000d0a:	f04f 0001 	mov.w	r0, #1
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_uldivmod>:
 8000d10:	b953      	cbnz	r3, 8000d28 <__aeabi_uldivmod+0x18>
 8000d12:	b94a      	cbnz	r2, 8000d28 <__aeabi_uldivmod+0x18>
 8000d14:	2900      	cmp	r1, #0
 8000d16:	bf08      	it	eq
 8000d18:	2800      	cmpeq	r0, #0
 8000d1a:	bf1c      	itt	ne
 8000d1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d20:	f04f 30ff 	movne.w	r0, #4294967295
 8000d24:	f000 b9ae 	b.w	8001084 <__aeabi_idiv0>
 8000d28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d30:	f000 f83e 	bl	8000db0 <__udivmoddi4>
 8000d34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3c:	b004      	add	sp, #16
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_d2lz>:
 8000d40:	b538      	push	{r3, r4, r5, lr}
 8000d42:	4605      	mov	r5, r0
 8000d44:	460c      	mov	r4, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	2300      	movs	r3, #0
 8000d4a:	4628      	mov	r0, r5
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	f7ff fea5 	bl	8000a9c <__aeabi_dcmplt>
 8000d52:	b928      	cbnz	r0, 8000d60 <__aeabi_d2lz+0x20>
 8000d54:	4628      	mov	r0, r5
 8000d56:	4621      	mov	r1, r4
 8000d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d5c:	f000 b80a 	b.w	8000d74 <__aeabi_d2ulz>
 8000d60:	4628      	mov	r0, r5
 8000d62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000d66:	f000 f805 	bl	8000d74 <__aeabi_d2ulz>
 8000d6a:	4240      	negs	r0, r0
 8000d6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d70:	bd38      	pop	{r3, r4, r5, pc}
 8000d72:	bf00      	nop

08000d74 <__aeabi_d2ulz>:
 8000d74:	b5d0      	push	{r4, r6, r7, lr}
 8000d76:	2200      	movs	r2, #0
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <__aeabi_d2ulz+0x34>)
 8000d7a:	4606      	mov	r6, r0
 8000d7c:	460f      	mov	r7, r1
 8000d7e:	f7ff fc1b 	bl	80005b8 <__aeabi_dmul>
 8000d82:	f7ff fec9 	bl	8000b18 <__aeabi_d2uiz>
 8000d86:	4604      	mov	r4, r0
 8000d88:	f7ff fb9c 	bl	80004c4 <__aeabi_ui2d>
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <__aeabi_d2ulz+0x38>)
 8000d90:	f7ff fc12 	bl	80005b8 <__aeabi_dmul>
 8000d94:	4602      	mov	r2, r0
 8000d96:	460b      	mov	r3, r1
 8000d98:	4630      	mov	r0, r6
 8000d9a:	4639      	mov	r1, r7
 8000d9c:	f7ff fa54 	bl	8000248 <__aeabi_dsub>
 8000da0:	f7ff feba 	bl	8000b18 <__aeabi_d2uiz>
 8000da4:	4621      	mov	r1, r4
 8000da6:	bdd0      	pop	{r4, r6, r7, pc}
 8000da8:	3df00000 	.word	0x3df00000
 8000dac:	41f00000 	.word	0x41f00000

08000db0 <__udivmoddi4>:
 8000db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db4:	9e08      	ldr	r6, [sp, #32]
 8000db6:	460d      	mov	r5, r1
 8000db8:	4604      	mov	r4, r0
 8000dba:	4688      	mov	r8, r1
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d14d      	bne.n	8000e5c <__udivmoddi4+0xac>
 8000dc0:	428a      	cmp	r2, r1
 8000dc2:	4694      	mov	ip, r2
 8000dc4:	d968      	bls.n	8000e98 <__udivmoddi4+0xe8>
 8000dc6:	fab2 f282 	clz	r2, r2
 8000dca:	b152      	cbz	r2, 8000de2 <__udivmoddi4+0x32>
 8000dcc:	fa01 f302 	lsl.w	r3, r1, r2
 8000dd0:	f1c2 0120 	rsb	r1, r2, #32
 8000dd4:	fa20 f101 	lsr.w	r1, r0, r1
 8000dd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ddc:	ea41 0803 	orr.w	r8, r1, r3
 8000de0:	4094      	lsls	r4, r2
 8000de2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000de6:	fbb8 f7f1 	udiv	r7, r8, r1
 8000dea:	fa1f fe8c 	uxth.w	lr, ip
 8000dee:	fb01 8817 	mls	r8, r1, r7, r8
 8000df2:	fb07 f00e 	mul.w	r0, r7, lr
 8000df6:	0c23      	lsrs	r3, r4, #16
 8000df8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x66>
 8000e00:	eb1c 0303 	adds.w	r3, ip, r3
 8000e04:	f107 35ff 	add.w	r5, r7, #4294967295
 8000e08:	f080 811e 	bcs.w	8001048 <__udivmoddi4+0x298>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f240 811b 	bls.w	8001048 <__udivmoddi4+0x298>
 8000e12:	3f02      	subs	r7, #2
 8000e14:	4463      	add	r3, ip
 8000e16:	1a1b      	subs	r3, r3, r0
 8000e18:	fbb3 f0f1 	udiv	r0, r3, r1
 8000e1c:	fb01 3310 	mls	r3, r1, r0, r3
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	b2a4      	uxth	r4, r4
 8000e26:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	d90a      	bls.n	8000e44 <__udivmoddi4+0x94>
 8000e2e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	f080 8109 	bcs.w	800104c <__udivmoddi4+0x29c>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	f240 8106 	bls.w	800104c <__udivmoddi4+0x29c>
 8000e40:	4464      	add	r4, ip
 8000e42:	3802      	subs	r0, #2
 8000e44:	2100      	movs	r1, #0
 8000e46:	eba4 040e 	sub.w	r4, r4, lr
 8000e4a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e4e:	b11e      	cbz	r6, 8000e58 <__udivmoddi4+0xa8>
 8000e50:	2300      	movs	r3, #0
 8000e52:	40d4      	lsrs	r4, r2
 8000e54:	e9c6 4300 	strd	r4, r3, [r6]
 8000e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0xc2>
 8000e60:	2e00      	cmp	r6, #0
 8000e62:	f000 80ee 	beq.w	8001042 <__udivmoddi4+0x292>
 8000e66:	2100      	movs	r1, #0
 8000e68:	e9c6 0500 	strd	r0, r5, [r6]
 8000e6c:	4608      	mov	r0, r1
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f183 	clz	r1, r3
 8000e76:	2900      	cmp	r1, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x160>
 8000e7a:	42ab      	cmp	r3, r5
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0xd4>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80fc 	bhi.w	800107c <__udivmoddi4+0x2cc>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb65 0303 	sbc.w	r3, r5, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	4698      	mov	r8, r3
 8000e8e:	2e00      	cmp	r6, #0
 8000e90:	d0e2      	beq.n	8000e58 <__udivmoddi4+0xa8>
 8000e92:	e9c6 4800 	strd	r4, r8, [r6]
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0xa8>
 8000e98:	b902      	cbnz	r2, 8000e9c <__udivmoddi4+0xec>
 8000e9a:	deff      	udf	#255	; 0xff
 8000e9c:	fab2 f282 	clz	r2, r2
 8000ea0:	2a00      	cmp	r2, #0
 8000ea2:	f040 8091 	bne.w	8000fc8 <__udivmoddi4+0x218>
 8000ea6:	eba1 000c 	sub.w	r0, r1, ip
 8000eaa:	2101      	movs	r1, #1
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb0 f3f7 	udiv	r3, r0, r7
 8000eb8:	fb07 0013 	mls	r0, r7, r3, r0
 8000ebc:	0c25      	lsrs	r5, r4, #16
 8000ebe:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ec2:	fb0e f003 	mul.w	r0, lr, r3
 8000ec6:	42a8      	cmp	r0, r5
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x12c>
 8000eca:	eb1c 0505 	adds.w	r5, ip, r5
 8000ece:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x12a>
 8000ed4:	42a8      	cmp	r0, r5
 8000ed6:	f200 80ce 	bhi.w	8001076 <__udivmoddi4+0x2c6>
 8000eda:	4643      	mov	r3, r8
 8000edc:	1a2d      	subs	r5, r5, r0
 8000ede:	fbb5 f0f7 	udiv	r0, r5, r7
 8000ee2:	fb07 5510 	mls	r5, r7, r0, r5
 8000ee6:	fb0e fe00 	mul.w	lr, lr, r0
 8000eea:	b2a4      	uxth	r4, r4
 8000eec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ef0:	45a6      	cmp	lr, r4
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x156>
 8000ef4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000efc:	d202      	bcs.n	8000f04 <__udivmoddi4+0x154>
 8000efe:	45a6      	cmp	lr, r4
 8000f00:	f200 80b6 	bhi.w	8001070 <__udivmoddi4+0x2c0>
 8000f04:	4628      	mov	r0, r5
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f0e:	e79e      	b.n	8000e4e <__udivmoddi4+0x9e>
 8000f10:	f1c1 0720 	rsb	r7, r1, #32
 8000f14:	408b      	lsls	r3, r1
 8000f16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f1e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000f22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f26:	fbba f8f9 	udiv	r8, sl, r9
 8000f2a:	fa20 f307 	lsr.w	r3, r0, r7
 8000f2e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000f32:	408d      	lsls	r5, r1
 8000f34:	fa1f fe8c 	uxth.w	lr, ip
 8000f38:	431d      	orrs	r5, r3
 8000f3a:	fa00 f301 	lsl.w	r3, r0, r1
 8000f3e:	fb08 f00e 	mul.w	r0, r8, lr
 8000f42:	0c2c      	lsrs	r4, r5, #16
 8000f44:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000f48:	42a0      	cmp	r0, r4
 8000f4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f4e:	d90b      	bls.n	8000f68 <__udivmoddi4+0x1b8>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f58:	f080 8088 	bcs.w	800106c <__udivmoddi4+0x2bc>
 8000f5c:	42a0      	cmp	r0, r4
 8000f5e:	f240 8085 	bls.w	800106c <__udivmoddi4+0x2bc>
 8000f62:	f1a8 0802 	sub.w	r8, r8, #2
 8000f66:	4464      	add	r4, ip
 8000f68:	1a24      	subs	r4, r4, r0
 8000f6a:	fbb4 f0f9 	udiv	r0, r4, r9
 8000f6e:	fb09 4410 	mls	r4, r9, r0, r4
 8000f72:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f76:	b2ad      	uxth	r5, r5
 8000f78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f7c:	45a6      	cmp	lr, r4
 8000f7e:	d908      	bls.n	8000f92 <__udivmoddi4+0x1e2>
 8000f80:	eb1c 0404 	adds.w	r4, ip, r4
 8000f84:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f88:	d26c      	bcs.n	8001064 <__udivmoddi4+0x2b4>
 8000f8a:	45a6      	cmp	lr, r4
 8000f8c:	d96a      	bls.n	8001064 <__udivmoddi4+0x2b4>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	4464      	add	r4, ip
 8000f92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f96:	fba0 9502 	umull	r9, r5, r0, r2
 8000f9a:	eba4 040e 	sub.w	r4, r4, lr
 8000f9e:	42ac      	cmp	r4, r5
 8000fa0:	46c8      	mov	r8, r9
 8000fa2:	46ae      	mov	lr, r5
 8000fa4:	d356      	bcc.n	8001054 <__udivmoddi4+0x2a4>
 8000fa6:	d053      	beq.n	8001050 <__udivmoddi4+0x2a0>
 8000fa8:	2e00      	cmp	r6, #0
 8000faa:	d069      	beq.n	8001080 <__udivmoddi4+0x2d0>
 8000fac:	ebb3 0208 	subs.w	r2, r3, r8
 8000fb0:	eb64 040e 	sbc.w	r4, r4, lr
 8000fb4:	fa22 f301 	lsr.w	r3, r2, r1
 8000fb8:	fa04 f707 	lsl.w	r7, r4, r7
 8000fbc:	431f      	orrs	r7, r3
 8000fbe:	40cc      	lsrs	r4, r1
 8000fc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e747      	b.n	8000e58 <__udivmoddi4+0xa8>
 8000fc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fcc:	f1c2 0120 	rsb	r1, r2, #32
 8000fd0:	fa25 f301 	lsr.w	r3, r5, r1
 8000fd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fd8:	fa20 f101 	lsr.w	r1, r0, r1
 8000fdc:	4095      	lsls	r5, r2
 8000fde:	430d      	orrs	r5, r1
 8000fe0:	fbb3 f1f7 	udiv	r1, r3, r7
 8000fe4:	fb07 3311 	mls	r3, r7, r1, r3
 8000fe8:	fa1f fe8c 	uxth.w	lr, ip
 8000fec:	0c28      	lsrs	r0, r5, #16
 8000fee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ff2:	fb01 f30e 	mul.w	r3, r1, lr
 8000ff6:	4283      	cmp	r3, r0
 8000ff8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ffc:	d908      	bls.n	8001010 <__udivmoddi4+0x260>
 8000ffe:	eb1c 0000 	adds.w	r0, ip, r0
 8001002:	f101 38ff 	add.w	r8, r1, #4294967295
 8001006:	d22f      	bcs.n	8001068 <__udivmoddi4+0x2b8>
 8001008:	4283      	cmp	r3, r0
 800100a:	d92d      	bls.n	8001068 <__udivmoddi4+0x2b8>
 800100c:	3902      	subs	r1, #2
 800100e:	4460      	add	r0, ip
 8001010:	1ac0      	subs	r0, r0, r3
 8001012:	fbb0 f3f7 	udiv	r3, r0, r7
 8001016:	fb07 0013 	mls	r0, r7, r3, r0
 800101a:	b2ad      	uxth	r5, r5
 800101c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001020:	fb03 f00e 	mul.w	r0, r3, lr
 8001024:	42a8      	cmp	r0, r5
 8001026:	d908      	bls.n	800103a <__udivmoddi4+0x28a>
 8001028:	eb1c 0505 	adds.w	r5, ip, r5
 800102c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001030:	d216      	bcs.n	8001060 <__udivmoddi4+0x2b0>
 8001032:	42a8      	cmp	r0, r5
 8001034:	d914      	bls.n	8001060 <__udivmoddi4+0x2b0>
 8001036:	3b02      	subs	r3, #2
 8001038:	4465      	add	r5, ip
 800103a:	1a28      	subs	r0, r5, r0
 800103c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001040:	e738      	b.n	8000eb4 <__udivmoddi4+0x104>
 8001042:	4631      	mov	r1, r6
 8001044:	4630      	mov	r0, r6
 8001046:	e707      	b.n	8000e58 <__udivmoddi4+0xa8>
 8001048:	462f      	mov	r7, r5
 800104a:	e6e4      	b.n	8000e16 <__udivmoddi4+0x66>
 800104c:	4618      	mov	r0, r3
 800104e:	e6f9      	b.n	8000e44 <__udivmoddi4+0x94>
 8001050:	454b      	cmp	r3, r9
 8001052:	d2a9      	bcs.n	8000fa8 <__udivmoddi4+0x1f8>
 8001054:	ebb9 0802 	subs.w	r8, r9, r2
 8001058:	eb65 0e0c 	sbc.w	lr, r5, ip
 800105c:	3801      	subs	r0, #1
 800105e:	e7a3      	b.n	8000fa8 <__udivmoddi4+0x1f8>
 8001060:	4643      	mov	r3, r8
 8001062:	e7ea      	b.n	800103a <__udivmoddi4+0x28a>
 8001064:	4628      	mov	r0, r5
 8001066:	e794      	b.n	8000f92 <__udivmoddi4+0x1e2>
 8001068:	4641      	mov	r1, r8
 800106a:	e7d1      	b.n	8001010 <__udivmoddi4+0x260>
 800106c:	46d0      	mov	r8, sl
 800106e:	e77b      	b.n	8000f68 <__udivmoddi4+0x1b8>
 8001070:	4464      	add	r4, ip
 8001072:	3802      	subs	r0, #2
 8001074:	e747      	b.n	8000f06 <__udivmoddi4+0x156>
 8001076:	3b02      	subs	r3, #2
 8001078:	4465      	add	r5, ip
 800107a:	e72f      	b.n	8000edc <__udivmoddi4+0x12c>
 800107c:	4608      	mov	r0, r1
 800107e:	e706      	b.n	8000e8e <__udivmoddi4+0xde>
 8001080:	4631      	mov	r1, r6
 8001082:	e6e9      	b.n	8000e58 <__udivmoddi4+0xa8>

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <hydroc_init>:
int (*hydroc_functions[HYDROC_MSG_NUM_OF_FUNCTIONS])(hydroc* hydroc_obj,uint8_t* msg);
char*  hydroc_messages_strings[HYDROC_MSG_NUM_OF_FUNCTIONS];
const char* hydroc_commands_strings[]={"$COCFG,0,0,W,1\r\n","$COCFG,0,0,W,0\r\n","$CORTS,0,0,W,1000,","$COPEX,0,0,W,1,0\r\n","$COPEX,0,0,W,0,0\r\n","$COMDI,0,0,W,","$","$","$CODBC,0,0,W,1\r\n","TEST\r\n"};

void hydroc_init(hydroc* hydroc_obj)
{
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b096      	sub	sp, #88	; 0x58
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	hydroc_messages_init(hydroc_obj);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 fb6f 	bl	8001774 <hydroc_messages_init>

	osMessageQDef(hydroc_events_q, 20, uint8_t);
 8001096:	4b3e      	ldr	r3, [pc, #248]	; (8001190 <hydroc_init+0x108>)
 8001098:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800109c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800109e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	hydroc_obj->events_q= osMessageCreate(osMessageQ(hydroc_events_q), NULL);
 80010a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00b fb69 	bl	800c780 <osMessageCreate>
 80010ae:	4602      	mov	r2, r0
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	609a      	str	r2, [r3, #8]

	osMessageQDef(hydroc_media_rx_q, 20, uint16_t);
 80010b4:	4b37      	ldr	r3, [pc, #220]	; (8001194 <hydroc_init+0x10c>)
 80010b6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80010ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	hydroc_obj->media_rx_messages_q= osMessageCreate(osMessageQ(hydroc_media_rx_q), NULL);
 80010c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f00b fb5a 	bl	800c780 <osMessageCreate>
 80010cc:	4602      	mov	r2, r0
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	601a      	str	r2, [r3, #0]

	osMessageQDef(hydroc_media_tx_q, 400, uint8_t);
 80010d2:	4b31      	ldr	r3, [pc, #196]	; (8001198 <hydroc_init+0x110>)
 80010d4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80010d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	hydroc_obj->media_tx_q = osMessageCreate(osMessageQ(hydroc_media_tx_q), NULL);
 80010de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f00b fb4b 	bl	800c780 <osMessageCreate>
 80010ea:	4602      	mov	r2, r0
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	605a      	str	r2, [r3, #4]

	osThreadDef(hydroc_task, hydroc_loop, osPriorityNormal, 0, 256);
 80010f0:	4b2a      	ldr	r3, [pc, #168]	; (800119c <hydroc_init+0x114>)
 80010f2:	f107 040c 	add.w	r4, r7, #12
 80010f6:	461d      	mov	r5, r3
 80010f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001100:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(hydroc_task), hydroc_obj);
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	4618      	mov	r0, r3
 800110c:	f00b fa71 	bl	800c5f2 <osThreadCreate>

	hydroc_obj->rx_buffer_indx=0;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

	hydroc_obj->errors.P_in=0;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 256d 	strb.w	r2, [r3, #1389]	; 0x56d
 8001126:	2200      	movs	r2, #0
 8001128:	f883 256e 	strb.w	r2, [r3, #1390]	; 0x56e
 800112c:	2200      	movs	r2, #0
 800112e:	f883 256f 	strb.w	r2, [r3, #1391]	; 0x56f
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2570 	strb.w	r2, [r3, #1392]	; 0x570
	hydroc_obj->errors.P_pump=0;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
 8001140:	2200      	movs	r2, #0
 8001142:	f883 257a 	strb.w	r2, [r3, #1402]	; 0x57a
 8001146:	2200      	movs	r2, #0
 8001148:	f883 257b 	strb.w	r2, [r3, #1403]	; 0x57b
 800114c:	2200      	movs	r2, #0
 800114e:	f883 257c 	strb.w	r2, [r3, #1404]	; 0x57c
	hydroc_obj->errors.T_control=0;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2575 	strb.w	r2, [r3, #1397]	; 0x575
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2576 	strb.w	r2, [r3, #1398]	; 0x576
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2577 	strb.w	r2, [r3, #1399]	; 0x577
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
	hydroc_obj->errors.rH_gas=0;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2571 	strb.w	r2, [r3, #1393]	; 0x571
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2572 	strb.w	r2, [r3, #1394]	; 0x572
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2573 	strb.w	r2, [r3, #1395]	; 0x573
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2574 	strb.w	r2, [r3, #1396]	; 0x574
}
 8001186:	bf00      	nop
 8001188:	3758      	adds	r7, #88	; 0x58
 800118a:	46bd      	mov	sp, r7
 800118c:	bdb0      	pop	{r4, r5, r7, pc}
 800118e:	bf00      	nop
 8001190:	08012d08 	.word	0x08012d08
 8001194:	08012d18 	.word	0x08012d18
 8001198:	08012d28 	.word	0x08012d28
 800119c:	08012d38 	.word	0x08012d38

080011a0 <hydroc_media_process_byte>:

void hydroc_media_process_byte(hydroc* hydroc_obj,uint8_t rx_byte)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]

	if(hydroc_obj->media_status==HYDROC_MEDIA_READY)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7bdb      	ldrb	r3, [r3, #15]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d160      	bne.n	8001276 <hydroc_media_process_byte+0xd6>
	{
		hydroc_obj->rx_buffer[hydroc_obj->rx_buffer_indx]=rx_byte;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	461a      	mov	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	78fa      	ldrb	r2, [r7, #3]
 80011c4:	741a      	strb	r2, [r3, #16]
		if(rx_byte=='\r'|| rx_byte=='\n')
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	2b0d      	cmp	r3, #13
 80011ca:	d002      	beq.n	80011d2 <hydroc_media_process_byte+0x32>
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	2b0a      	cmp	r3, #10
 80011d0:	d132      	bne.n	8001238 <hydroc_media_process_byte+0x98>
		{
			hydroc_obj->rx_buffer[hydroc_obj->rx_buffer_indx]=0x00;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
 80011d8:	b29b      	uxth	r3, r3
 80011da:	461a      	mov	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4413      	add	r3, r2
 80011e0:	2200      	movs	r2, #0
 80011e2:	741a      	strb	r2, [r3, #16]
			osMessagePut(hydroc_obj->media_rx_messages_q,hydroc_obj->rx_buffer_new_string_indx,1);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	2201      	movs	r2, #1
 80011f2:	4619      	mov	r1, r3
 80011f4:	f00b faec 	bl	800c7d0 <osMessagePut>
			if(hydroc_obj->rx_buffer_indx>HYDROC_RX_BUFFER_THR) hydroc_obj->rx_buffer_indx=0;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
 80011fe:	b29b      	uxth	r3, r3
 8001200:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001204:	d907      	bls.n	8001216 <hydroc_media_process_byte+0x76>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
 8001214:	e008      	b.n	8001228 <hydroc_media_process_byte+0x88>
			else  hydroc_obj->rx_buffer_indx++;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
 800121c:	b29b      	uxth	r3, r3
 800121e:	3301      	adds	r3, #1
 8001220:	b29a      	uxth	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
			hydroc_obj->rx_buffer_new_string_indx=hydroc_obj->rx_buffer_indx;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
 800122e:	b29a      	uxth	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
 8001236:	e008      	b.n	800124a <hydroc_media_process_byte+0xaa>
		}
		else hydroc_obj->rx_buffer_indx++;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
 800123e:	b29b      	uxth	r3, r3
 8001240:	3301      	adds	r3, #1
 8001242:	b29a      	uxth	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
		if(hydroc_obj->rx_buffer_indx==HYDROC_RX_BUFFER_SIZE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
 8001250:	b29b      	uxth	r3, r3
 8001252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001256:	d11c      	bne.n	8001292 <hydroc_media_process_byte+0xf2>
		{
			hydroc_obj->rx_buffer_indx=0;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
			hydroc_obj->rx_buffer_new_string_indx=hydroc_obj->rx_buffer_indx;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
 800126c:	b29a      	uxth	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
	{
		hydroc_obj->rx_buffer_indx=0;
		hydroc_obj->rx_buffer_new_string_indx=hydroc_obj->rx_buffer_indx;
	}

}
 8001274:	e00d      	b.n	8001292 <hydroc_media_process_byte+0xf2>
		hydroc_obj->rx_buffer_indx=0;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
		hydroc_obj->rx_buffer_new_string_indx=hydroc_obj->rx_buffer_indx;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <hydroc_loop>:

void hydroc_loop(hydroc* hydroc_obj)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 uint16_t msg_indx;
 for(;;)
 {
	if(xQueueReceive(hydroc_obj->media_rx_messages_q,&msg_indx,1))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f107 010a 	add.w	r1, r7, #10
 80012aa:	2201      	movs	r2, #1
 80012ac:	4618      	mov	r0, r3
 80012ae:	f00b fec5 	bl	800d03c <xQueueReceive>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d008      	beq.n	80012ca <hydroc_loop+0x30>
	{
		uint8_t* msg=hydroc_obj->rx_buffer+msg_indx;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3310      	adds	r3, #16
 80012bc:	897a      	ldrh	r2, [r7, #10]
 80012be:	4413      	add	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
		hydroc_parse_message(hydroc_obj,msg);
 80012c2:	68f9      	ldr	r1, [r7, #12]
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 fa05 	bl	80016d4 <hydroc_parse_message>
	}
	osDelay(1);
 80012ca:	2001      	movs	r0, #1
 80012cc:	f00b f9dd 	bl	800c68a <osDelay>
	if(xQueueReceive(hydroc_obj->media_rx_messages_q,&msg_indx,1))
 80012d0:	e7e7      	b.n	80012a2 <hydroc_loop+0x8>

080012d2 <hydroc_media_get_byte>:

}


uint8_t hydroc_media_get_byte(hydroc* hydroc_obj,uint8_t* tx_byte)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(hydroc_obj->media_tx_q,1);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6859      	ldr	r1, [r3, #4]
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	2201      	movs	r2, #1
 80012e6:	4618      	mov	r0, r3
 80012e8:	f00b fab2 	bl	800c850 <osMessageGet>
	if(res.status==osEventMessage)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b10      	cmp	r3, #16
 80012f0:	d105      	bne.n	80012fe <hydroc_media_get_byte+0x2c>
     {
		*tx_byte=res.value.v;
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	701a      	strb	r2, [r3, #0]
		return HYDROC_F_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <hydroc_media_get_byte+0x2e>
     }
   return HYDROC_F_ERR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <hydroc_send_cmd>:


void hydroc_send_cmd(hydroc* hydroc_obj,uint8_t cmd_id,void* arg)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b09b      	sub	sp, #108	; 0x6c
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	460b      	mov	r3, r1
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	72fb      	strb	r3, [r7, #11]

 char tmp_cmd[50];
 osDelay(20);
 8001316:	2014      	movs	r0, #20
 8001318:	f00b f9b7 	bl	800c68a <osDelay>
 switch(cmd_id)
 800131c:	7afb      	ldrb	r3, [r7, #11]
 800131e:	2b09      	cmp	r3, #9
 8001320:	f200 81be 	bhi.w	80016a0 <hydroc_send_cmd+0x398>
 8001324:	a201      	add	r2, pc, #4	; (adr r2, 800132c <hydroc_send_cmd+0x24>)
 8001326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132a:	bf00      	nop
 800132c:	0800139f 	.word	0x0800139f
 8001330:	080013e9 	.word	0x080013e9
 8001334:	08001433 	.word	0x08001433
 8001338:	080014a7 	.word	0x080014a7
 800133c:	08001647 	.word	0x08001647
 8001340:	080016a1 	.word	0x080016a1
 8001344:	080014f1 	.word	0x080014f1
 8001348:	08001561 	.word	0x08001561
 800134c:	080015fd 	.word	0x080015fd
 8001350:	08001355 	.word	0x08001355
 {
     case HYDROC_CMD_TEST:
      tmp_cmd[0]=0x00;
 8001354:	2300      	movs	r3, #0
 8001356:	743b      	strb	r3, [r7, #16]
      strcat(tmp_cmd,hydroc_commands_strings[HYDROC_CMD_TEST_STRING]);
 8001358:	4bc1      	ldr	r3, [pc, #772]	; (8001660 <hydroc_send_cmd+0x358>)
 800135a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f00e fccd 	bl	800fd02 <strcat>
	  for(int i=0;i<strlen(tmp_cmd);i++)
 8001368:	2300      	movs	r3, #0
 800136a:	667b      	str	r3, [r7, #100]	; 0x64
 800136c:	e00d      	b.n	800138a <hydroc_send_cmd+0x82>
	  {
		   osMessagePut(hydroc_obj->media_tx_q,tmp_cmd[i],0);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6858      	ldr	r0, [r3, #4]
 8001372:	f107 0210 	add.w	r2, r7, #16
 8001376:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	f00b fa26 	bl	800c7d0 <osMessagePut>
	  for(int i=0;i<strlen(tmp_cmd);i++)
 8001384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001386:	3301      	adds	r3, #1
 8001388:	667b      	str	r3, [r7, #100]	; 0x64
 800138a:	f107 0310 	add.w	r3, r7, #16
 800138e:	4618      	mov	r0, r3
 8001390:	f7fe ff4e 	bl	8000230 <strlen>
 8001394:	4602      	mov	r2, r0
 8001396:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001398:	429a      	cmp	r2, r3
 800139a:	d8e8      	bhi.n	800136e <hydroc_send_cmd+0x66>
	  }
	 break;
 800139c:	e180      	b.n	80016a0 <hydroc_send_cmd+0x398>
     case HYDROC_CMD_ENTER_CFG:
       tmp_cmd[0]=0x00;
 800139e:	2300      	movs	r3, #0
 80013a0:	743b      	strb	r3, [r7, #16]
       strcat(tmp_cmd,hydroc_commands_strings[HYDROC_CMD_ENTER_CFG]);
 80013a2:	4baf      	ldr	r3, [pc, #700]	; (8001660 <hydroc_send_cmd+0x358>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f00e fca8 	bl	800fd02 <strcat>
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	663b      	str	r3, [r7, #96]	; 0x60
 80013b6:	e00d      	b.n	80013d4 <hydroc_send_cmd+0xcc>
  	   {
  		   osMessagePut(hydroc_obj->media_tx_q,tmp_cmd[i],0);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6858      	ldr	r0, [r3, #4]
 80013bc:	f107 0210 	add.w	r2, r7, #16
 80013c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013c2:	4413      	add	r3, r2
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2200      	movs	r2, #0
 80013c8:	4619      	mov	r1, r3
 80013ca:	f00b fa01 	bl	800c7d0 <osMessagePut>
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 80013ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013d0:	3301      	adds	r3, #1
 80013d2:	663b      	str	r3, [r7, #96]	; 0x60
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4618      	mov	r0, r3
 80013da:	f7fe ff29 	bl	8000230 <strlen>
 80013de:	4602      	mov	r2, r0
 80013e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d8e8      	bhi.n	80013b8 <hydroc_send_cmd+0xb0>
  	   }
	 break;
 80013e6:	e15b      	b.n	80016a0 <hydroc_send_cmd+0x398>
     case HYDROC_CMD_EXIT_CFG:
       tmp_cmd[0]=0x00;
 80013e8:	2300      	movs	r3, #0
 80013ea:	743b      	strb	r3, [r7, #16]
       strcat(tmp_cmd,hydroc_commands_strings[HYDROC_CMD_EXIT_CFG]);
 80013ec:	4b9c      	ldr	r3, [pc, #624]	; (8001660 <hydroc_send_cmd+0x358>)
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f00e fc83 	bl	800fd02 <strcat>
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001400:	e00d      	b.n	800141e <hydroc_send_cmd+0x116>
  	   {
  		   osMessagePut(hydroc_obj->media_tx_q,tmp_cmd[i],0);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6858      	ldr	r0, [r3, #4]
 8001406:	f107 0210 	add.w	r2, r7, #16
 800140a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800140c:	4413      	add	r3, r2
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	4619      	mov	r1, r3
 8001414:	f00b f9dc 	bl	800c7d0 <osMessagePut>
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 8001418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800141a:	3301      	adds	r3, #1
 800141c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	4618      	mov	r0, r3
 8001424:	f7fe ff04 	bl	8000230 <strlen>
 8001428:	4602      	mov	r2, r0
 800142a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800142c:	429a      	cmp	r2, r3
 800142e:	d8e8      	bhi.n	8001402 <hydroc_send_cmd+0xfa>
  	   }
	 break;
 8001430:	e136      	b.n	80016a0 <hydroc_send_cmd+0x398>
     case HYDROC_CMD_SET_REAL_TIME:
       tmp_cmd[0]=0x00;
 8001432:	2300      	movs	r3, #0
 8001434:	743b      	strb	r3, [r7, #16]
       strcat(tmp_cmd,hydroc_commands_strings[HYDROC_CMD_SET_REAL_TIME]);
 8001436:	4b8a      	ldr	r3, [pc, #552]	; (8001660 <hydroc_send_cmd+0x358>)
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f00e fc5e 	bl	800fd02 <strcat>
       strcat(tmp_cmd,(char*)arg);
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4618      	mov	r0, r3
 800144e:	f00e fc58 	bl	800fd02 <strcat>
       strcat(tmp_cmd,"\r\n");
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	4618      	mov	r0, r3
 8001458:	f7fe feea 	bl	8000230 <strlen>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	4413      	add	r3, r2
 8001466:	4a7f      	ldr	r2, [pc, #508]	; (8001664 <hydroc_send_cmd+0x35c>)
 8001468:	8811      	ldrh	r1, [r2, #0]
 800146a:	7892      	ldrb	r2, [r2, #2]
 800146c:	8019      	strh	r1, [r3, #0]
 800146e:	709a      	strb	r2, [r3, #2]
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 8001470:	2300      	movs	r3, #0
 8001472:	65bb      	str	r3, [r7, #88]	; 0x58
 8001474:	e00d      	b.n	8001492 <hydroc_send_cmd+0x18a>
  	   {
  		   osMessagePut(hydroc_obj->media_tx_q,tmp_cmd[i],0);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6858      	ldr	r0, [r3, #4]
 800147a:	f107 0210 	add.w	r2, r7, #16
 800147e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001480:	4413      	add	r3, r2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2200      	movs	r2, #0
 8001486:	4619      	mov	r1, r3
 8001488:	f00b f9a2 	bl	800c7d0 <osMessagePut>
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 800148c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800148e:	3301      	adds	r3, #1
 8001490:	65bb      	str	r3, [r7, #88]	; 0x58
 8001492:	f107 0310 	add.w	r3, r7, #16
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe feca 	bl	8000230 <strlen>
 800149c:	4602      	mov	r2, r0
 800149e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d8e8      	bhi.n	8001476 <hydroc_send_cmd+0x16e>
  	   }
	 break;
 80014a4:	e0fc      	b.n	80016a0 <hydroc_send_cmd+0x398>
     case HYDROC_CMD_ENABLE_PUMP:
       tmp_cmd[0]=0x00;
 80014a6:	2300      	movs	r3, #0
 80014a8:	743b      	strb	r3, [r7, #16]
       strcat(tmp_cmd,hydroc_commands_strings[HYDROC_CMD_ENABLE_PUMP]);
 80014aa:	4b6d      	ldr	r3, [pc, #436]	; (8001660 <hydroc_send_cmd+0x358>)
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f00e fc24 	bl	800fd02 <strcat>
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	657b      	str	r3, [r7, #84]	; 0x54
 80014be:	e00d      	b.n	80014dc <hydroc_send_cmd+0x1d4>
  	   {
  		   osMessagePut(hydroc_obj->media_tx_q,tmp_cmd[i],0);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6858      	ldr	r0, [r3, #4]
 80014c4:	f107 0210 	add.w	r2, r7, #16
 80014c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ca:	4413      	add	r3, r2
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2200      	movs	r2, #0
 80014d0:	4619      	mov	r1, r3
 80014d2:	f00b f97d 	bl	800c7d0 <osMessagePut>
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 80014d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014d8:	3301      	adds	r3, #1
 80014da:	657b      	str	r3, [r7, #84]	; 0x54
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7fe fea5 	bl	8000230 <strlen>
 80014e6:	4602      	mov	r2, r0
 80014e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d8e8      	bhi.n	80014c0 <hydroc_send_cmd+0x1b8>
  	   }
	 break;
 80014ee:	e0d7      	b.n	80016a0 <hydroc_send_cmd+0x398>
     case HYDROC_CMD_SET_ZERO_MODE:
       tmp_cmd[0]=0x00;
 80014f0:	2300      	movs	r3, #0
 80014f2:	743b      	strb	r3, [r7, #16]
       strcat(tmp_cmd,hydroc_commands_strings[HYDROC_CMD_SET_MODE]);
 80014f4:	4b5a      	ldr	r3, [pc, #360]	; (8001660 <hydroc_send_cmd+0x358>)
 80014f6:	695a      	ldr	r2, [r3, #20]
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f00e fbff 	bl	800fd02 <strcat>
       strcat(tmp_cmd,"1,120,2,2,2\r\n");
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	4618      	mov	r0, r3
 800150a:	f7fe fe91 	bl	8000230 <strlen>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	4413      	add	r3, r2
 8001518:	4a53      	ldr	r2, [pc, #332]	; (8001668 <hydroc_send_cmd+0x360>)
 800151a:	461c      	mov	r4, r3
 800151c:	4613      	mov	r3, r2
 800151e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001520:	6020      	str	r0, [r4, #0]
 8001522:	6061      	str	r1, [r4, #4]
 8001524:	60a2      	str	r2, [r4, #8]
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	81a3      	strh	r3, [r4, #12]
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 800152a:	2300      	movs	r3, #0
 800152c:	653b      	str	r3, [r7, #80]	; 0x50
 800152e:	e00d      	b.n	800154c <hydroc_send_cmd+0x244>
  	   {
  		   osMessagePut(hydroc_obj->media_tx_q,tmp_cmd[i],0);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6858      	ldr	r0, [r3, #4]
 8001534:	f107 0210 	add.w	r2, r7, #16
 8001538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800153a:	4413      	add	r3, r2
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2200      	movs	r2, #0
 8001540:	4619      	mov	r1, r3
 8001542:	f00b f945 	bl	800c7d0 <osMessagePut>
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 8001546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001548:	3301      	adds	r3, #1
 800154a:	653b      	str	r3, [r7, #80]	; 0x50
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe fe6d 	bl	8000230 <strlen>
 8001556:	4602      	mov	r2, r0
 8001558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800155a:	429a      	cmp	r2, r3
 800155c:	d8e8      	bhi.n	8001530 <hydroc_send_cmd+0x228>
  	   }
	 break;
 800155e:	e09f      	b.n	80016a0 <hydroc_send_cmd+0x398>
     case HYDROC_CMD_SET_MEASURE_MODE:
       tmp_cmd[0]=0x00;
 8001560:	2300      	movs	r3, #0
 8001562:	743b      	strb	r3, [r7, #16]
       strcat(tmp_cmd,hydroc_commands_strings[HYDROC_CMD_SET_MODE]);
 8001564:	4b3e      	ldr	r3, [pc, #248]	; (8001660 <hydroc_send_cmd+0x358>)
 8001566:	695a      	ldr	r2, [r3, #20]
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f00e fbc7 	bl	800fd02 <strcat>
       strcat(tmp_cmd,"3,3500000,");
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe fe59 	bl	8000230 <strlen>
 800157e:	4603      	mov	r3, r0
 8001580:	461a      	mov	r2, r3
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	4413      	add	r3, r2
 8001588:	4938      	ldr	r1, [pc, #224]	; (800166c <hydroc_send_cmd+0x364>)
 800158a:	461a      	mov	r2, r3
 800158c:	460b      	mov	r3, r1
 800158e:	cb03      	ldmia	r3!, {r0, r1}
 8001590:	6010      	str	r0, [r2, #0]
 8001592:	6051      	str	r1, [r2, #4]
 8001594:	8819      	ldrh	r1, [r3, #0]
 8001596:	789b      	ldrb	r3, [r3, #2]
 8001598:	8111      	strh	r1, [r2, #8]
 800159a:	7293      	strb	r3, [r2, #10]
       strcat(tmp_cmd,(char*)arg);
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f00e fbad 	bl	800fd02 <strcat>
       strcat(tmp_cmd,"\r\n");
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe fe3f 	bl	8000230 <strlen>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	f107 0310 	add.w	r3, r7, #16
 80015ba:	4413      	add	r3, r2
 80015bc:	4a29      	ldr	r2, [pc, #164]	; (8001664 <hydroc_send_cmd+0x35c>)
 80015be:	8811      	ldrh	r1, [r2, #0]
 80015c0:	7892      	ldrb	r2, [r2, #2]
 80015c2:	8019      	strh	r1, [r3, #0]
 80015c4:	709a      	strb	r2, [r3, #2]
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015ca:	e00d      	b.n	80015e8 <hydroc_send_cmd+0x2e0>
  	   {
  		   osMessagePut(hydroc_obj->media_tx_q,tmp_cmd[i],0);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6858      	ldr	r0, [r3, #4]
 80015d0:	f107 0210 	add.w	r2, r7, #16
 80015d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015d6:	4413      	add	r3, r2
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2200      	movs	r2, #0
 80015dc:	4619      	mov	r1, r3
 80015de:	f00b f8f7 	bl	800c7d0 <osMessagePut>
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 80015e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015e4:	3301      	adds	r3, #1
 80015e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe fe1f 	bl	8000230 <strlen>
 80015f2:	4602      	mov	r2, r0
 80015f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d8e8      	bhi.n	80015cc <hydroc_send_cmd+0x2c4>
  	   }
	 break;
 80015fa:	e051      	b.n	80016a0 <hydroc_send_cmd+0x398>
     case HYDROC_CMD_CLEAR:
       tmp_cmd[0]=0x00;
 80015fc:	2300      	movs	r3, #0
 80015fe:	743b      	strb	r3, [r7, #16]
       strcat(tmp_cmd,hydroc_commands_strings[HYDROC_CMD_CLEAR]);
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <hydroc_send_cmd+0x358>)
 8001602:	6a1a      	ldr	r2, [r3, #32]
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	4611      	mov	r1, r2
 800160a:	4618      	mov	r0, r3
 800160c:	f00e fb79 	bl	800fd02 <strcat>
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 8001610:	2300      	movs	r3, #0
 8001612:	64bb      	str	r3, [r7, #72]	; 0x48
 8001614:	e00d      	b.n	8001632 <hydroc_send_cmd+0x32a>
  	   {
  		   osMessagePut(hydroc_obj->media_tx_q,tmp_cmd[i],0);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6858      	ldr	r0, [r3, #4]
 800161a:	f107 0210 	add.w	r2, r7, #16
 800161e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001620:	4413      	add	r3, r2
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2200      	movs	r2, #0
 8001626:	4619      	mov	r1, r3
 8001628:	f00b f8d2 	bl	800c7d0 <osMessagePut>
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 800162c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800162e:	3301      	adds	r3, #1
 8001630:	64bb      	str	r3, [r7, #72]	; 0x48
 8001632:	f107 0310 	add.w	r3, r7, #16
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe fdfa 	bl	8000230 <strlen>
 800163c:	4602      	mov	r2, r0
 800163e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001640:	429a      	cmp	r2, r3
 8001642:	d8e8      	bhi.n	8001616 <hydroc_send_cmd+0x30e>
  	   }
  	 break;
 8001644:	e02c      	b.n	80016a0 <hydroc_send_cmd+0x398>
     case HYDROC_CMD_DISABLE_PUMP:
       tmp_cmd[0]=0x00;
 8001646:	2300      	movs	r3, #0
 8001648:	743b      	strb	r3, [r7, #16]
       strcat(tmp_cmd,hydroc_commands_strings[HYDROC_CMD_DISABLE_PUMP]);
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <hydroc_send_cmd+0x358>)
 800164c:	691a      	ldr	r2, [r3, #16]
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f00e fb54 	bl	800fd02 <strcat>
       for(int i=0;i<strlen(tmp_cmd);i++)
 800165a:	2300      	movs	r3, #0
 800165c:	647b      	str	r3, [r7, #68]	; 0x44
 800165e:	e015      	b.n	800168c <hydroc_send_cmd+0x384>
 8001660:	20000000 	.word	0x20000000
 8001664:	08012d54 	.word	0x08012d54
 8001668:	08012d58 	.word	0x08012d58
 800166c:	08012d68 	.word	0x08012d68
       {
         osMessagePut(hydroc_obj->media_tx_q,tmp_cmd[i],0);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6858      	ldr	r0, [r3, #4]
 8001674:	f107 0210 	add.w	r2, r7, #16
 8001678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800167a:	4413      	add	r3, r2
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2200      	movs	r2, #0
 8001680:	4619      	mov	r1, r3
 8001682:	f00b f8a5 	bl	800c7d0 <osMessagePut>
       for(int i=0;i<strlen(tmp_cmd);i++)
 8001686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001688:	3301      	adds	r3, #1
 800168a:	647b      	str	r3, [r7, #68]	; 0x44
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe fdcd 	bl	8000230 <strlen>
 8001696:	4602      	mov	r2, r0
 8001698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800169a:	429a      	cmp	r2, r3
 800169c:	d8e8      	bhi.n	8001670 <hydroc_send_cmd+0x368>
       }
     break;
 800169e:	bf00      	nop
 }

}
 80016a0:	bf00      	nop
 80016a2:	376c      	adds	r7, #108	; 0x6c
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd90      	pop	{r4, r7, pc}

080016a8 <hydroc_get_event>:


uint8_t hydroc_get_event(hydroc* hydroc_obj,uint8_t* event)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
	if(xQueueReceive(hydroc_obj->events_q,event,1))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2201      	movs	r2, #1
 80016b8:	6839      	ldr	r1, [r7, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f00b fcbe 	bl	800d03c <xQueueReceive>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <hydroc_get_event+0x22>
	{
     return HYDROC_F_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e000      	b.n	80016cc <hydroc_get_event+0x24>
	}
	return HYDROC_F_ERR;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <hydroc_parse_message>:



int hydroc_parse_message(hydroc* hydroc_obj,uint8_t* msg)
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,",");//header
 80016de:	4922      	ldr	r1, [pc, #136]	; (8001768 <hydroc_parse_message+0x94>)
 80016e0:	6838      	ldr	r0, [r7, #0]
 80016e2:	f00f f997 	bl	8010a14 <strtok>
 80016e6:	6138      	str	r0, [r7, #16]
	uint8_t* tmp_ptr;
	for(int i=0;i<HYDROC_MSG_NUM_OF_FUNCTIONS;i++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e033      	b.n	8001756 <hydroc_parse_message+0x82>
	{
	   if(strlen(pch)==strlen(hydroc_messages_strings[i]))
 80016ee:	6938      	ldr	r0, [r7, #16]
 80016f0:	f7fe fd9e 	bl	8000230 <strlen>
 80016f4:	4604      	mov	r4, r0
 80016f6:	4a1d      	ldr	r2, [pc, #116]	; (800176c <hydroc_parse_message+0x98>)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe fd96 	bl	8000230 <strlen>
 8001704:	4603      	mov	r3, r0
 8001706:	429c      	cmp	r4, r3
 8001708:	d122      	bne.n	8001750 <hydroc_parse_message+0x7c>
	   {
		  tmp_ptr=0;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
		  tmp_ptr=strstr(pch,hydroc_messages_strings[i]);
 800170e:	4a17      	ldr	r2, [pc, #92]	; (800176c <hydroc_parse_message+0x98>)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001716:	4619      	mov	r1, r3
 8001718:	6938      	ldr	r0, [r7, #16]
 800171a:	f00e fb09 	bl	800fd30 <strstr>
 800171e:	60f8      	str	r0, [r7, #12]
		  if(tmp_ptr)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d014      	beq.n	8001750 <hydroc_parse_message+0x7c>
		   {
			 if(hydroc_functions[i](hydroc_obj,msg+strlen(tmp_ptr)+1)==HYDROC_F_OK) return HYDROC_F_OK;
 8001726:	4a12      	ldr	r2, [pc, #72]	; (8001770 <hydroc_parse_message+0x9c>)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f7fe fd7e 	bl	8000230 <strlen>
 8001734:	4603      	mov	r3, r0
 8001736:	3301      	adds	r3, #1
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4619      	mov	r1, r3
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	47a0      	blx	r4
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <hydroc_parse_message+0x78>
 8001748:	2300      	movs	r3, #0
 800174a:	e008      	b.n	800175e <hydroc_parse_message+0x8a>
	         else return HYDROC_F_ERR;
 800174c:	2301      	movs	r3, #1
 800174e:	e006      	b.n	800175e <hydroc_parse_message+0x8a>
	for(int i=0;i<HYDROC_MSG_NUM_OF_FUNCTIONS;i++)
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	3301      	adds	r3, #1
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	2b02      	cmp	r3, #2
 800175a:	ddc8      	ble.n	80016ee <hydroc_parse_message+0x1a>
		   }
		}
	 }
	 return HYDROC_F_ERR;
 800175c:	2301      	movs	r3, #1

}
 800175e:	4618      	mov	r0, r3
 8001760:	371c      	adds	r7, #28
 8001762:	46bd      	mov	sp, r7
 8001764:	bd90      	pop	{r4, r7, pc}
 8001766:	bf00      	nop
 8001768:	08012d74 	.word	0x08012d74
 800176c:	20000298 	.word	0x20000298
 8001770:	2000028c 	.word	0x2000028c

08001774 <hydroc_messages_init>:

void hydroc_messages_init(hydroc* hydroc_obj)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	hydroc_functions[HYDROC_MSG_COSIM] = HYDROC_MSG_COSIM_f;
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <hydroc_messages_init+0x38>)
 800177e:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <hydroc_messages_init+0x3c>)
 8001780:	601a      	str	r2, [r3, #0]
	hydroc_functions[HYDROC_MSG_CODS4] = HYDROC_MSG_CODS4_f;
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <hydroc_messages_init+0x38>)
 8001784:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <hydroc_messages_init+0x40>)
 8001786:	605a      	str	r2, [r3, #4]
	hydroc_functions[HYDROC_MSG_COTS1] = HYDROC_MSG_COTS1_f;
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <hydroc_messages_init+0x38>)
 800178a:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <hydroc_messages_init+0x44>)
 800178c:	609a      	str	r2, [r3, #8]

	hydroc_messages_strings[HYDROC_MSG_COSIM] = "$COSIM";
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <hydroc_messages_init+0x48>)
 8001790:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <hydroc_messages_init+0x4c>)
 8001792:	601a      	str	r2, [r3, #0]
	hydroc_messages_strings[HYDROC_MSG_CODS4] = "$CODS4";
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <hydroc_messages_init+0x48>)
 8001796:	4a0b      	ldr	r2, [pc, #44]	; (80017c4 <hydroc_messages_init+0x50>)
 8001798:	605a      	str	r2, [r3, #4]
	hydroc_messages_strings[HYDROC_MSG_COTS1] = "$COTS1";
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <hydroc_messages_init+0x48>)
 800179c:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <hydroc_messages_init+0x54>)
 800179e:	609a      	str	r2, [r3, #8]


}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	2000028c 	.word	0x2000028c
 80017b0:	080017cd 	.word	0x080017cd
 80017b4:	08001915 	.word	0x08001915
 80017b8:	080017e9 	.word	0x080017e9
 80017bc:	20000298 	.word	0x20000298
 80017c0:	08012d78 	.word	0x08012d78
 80017c4:	08012d80 	.word	0x08012d80
 80017c8:	08012d88 	.word	0x08012d88

080017cc <HYDROC_MSG_COSIM_f>:


int HYDROC_MSG_COSIM_f(hydroc* hydroc_obj,uint8_t* msg)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
   //osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_BOOTED,1);
   hydroc_obj->status=HYDROC_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	735a      	strb	r2, [r3, #13]
   return HYDROC_F_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <HYDROC_MSG_COTS1_f>:

int HYDROC_MSG_COTS1_f(hydroc* hydroc_obj,uint8_t* msg)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
   char * pch;
   if(hydroc_obj->status==HYDROC_WAIT_DATA)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7b5b      	ldrb	r3, [r3, #13]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	f040 8084 	bne.w	8001904 <HYDROC_MSG_COTS1_f+0x11c>
   {
	 pch = strtok ((char*)msg,",");//destination
 80017fc:	4944      	ldr	r1, [pc, #272]	; (8001910 <HYDROC_MSG_COTS1_f+0x128>)
 80017fe:	6838      	ldr	r0, [r7, #0]
 8001800:	f00f f908 	bl	8010a14 <strtok>
 8001804:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//source
 8001806:	4942      	ldr	r1, [pc, #264]	; (8001910 <HYDROC_MSG_COTS1_f+0x128>)
 8001808:	2000      	movs	r0, #0
 800180a:	f00f f903 	bl	8010a14 <strtok>
 800180e:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//data
 8001810:	493f      	ldr	r1, [pc, #252]	; (8001910 <HYDROC_MSG_COTS1_f+0x128>)
 8001812:	2000      	movs	r0, #0
 8001814:	f00f f8fe 	bl	8010a14 <strtok>
 8001818:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//format
 800181a:	493d      	ldr	r1, [pc, #244]	; (8001910 <HYDROC_MSG_COTS1_f+0x128>)
 800181c:	2000      	movs	r0, #0
 800181e:	f00f f8f9 	bl	8010a14 <strtok>
 8001822:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//LDN
 8001824:	493a      	ldr	r1, [pc, #232]	; (8001910 <HYDROC_MSG_COTS1_f+0x128>)
 8001826:	2000      	movs	r0, #0
 8001828:	f00f f8f4 	bl	8010a14 <strtok>
 800182c:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//date
 800182e:	4938      	ldr	r1, [pc, #224]	; (8001910 <HYDROC_MSG_COTS1_f+0x128>)
 8001830:	2000      	movs	r0, #0
 8001832:	f00f f8ef 	bl	8010a14 <strtok>
 8001836:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ts1.date[0]=0x00;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
	 strcpy(hydroc_obj->ts1.date,pch);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f203 5313 	addw	r3, r3, #1299	; 0x513
 8001846:	68f9      	ldr	r1, [r7, #12]
 8001848:	4618      	mov	r0, r3
 800184a:	f00e fa69 	bl	800fd20 <strcpy>
	 pch = strtok (NULL,",");//time
 800184e:	4930      	ldr	r1, [pc, #192]	; (8001910 <HYDROC_MSG_COTS1_f+0x128>)
 8001850:	2000      	movs	r0, #0
 8001852:	f00f f8df 	bl	8010a14 <strtok>
 8001856:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ts1.time[0]=0x00;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
	 strcpy(hydroc_obj->ts1.time,pch);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f203 5322 	addw	r3, r3, #1314	; 0x522
 8001866:	68f9      	ldr	r1, [r7, #12]
 8001868:	4618      	mov	r0, r3
 800186a:	f00e fa59 	bl	800fd20 <strcpy>
	 pch = strtok (NULL,",");//weekday
 800186e:	4928      	ldr	r1, [pc, #160]	; (8001910 <HYDROC_MSG_COTS1_f+0x128>)
 8001870:	2000      	movs	r0, #0
 8001872:	f00f f8cf 	bl	8010a14 <strtok>
 8001876:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//T_control
 8001878:	4925      	ldr	r1, [pc, #148]	; (8001910 <HYDROC_MSG_COTS1_f+0x128>)
 800187a:	2000      	movs	r0, #0
 800187c:	f00f f8ca 	bl	8010a14 <strtok>
 8001880:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ts1.T_control[0]=0x00;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2540 	strb.w	r2, [r3, #1344]	; 0x540
	 strcpy(hydroc_obj->ts1.T_control,pch);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 8001890:	68f9      	ldr	r1, [r7, #12]
 8001892:	4618      	mov	r0, r3
 8001894:	f00e fa44 	bl	800fd20 <strcpy>
	 pch = strtok (NULL,",");//xz
 8001898:	491d      	ldr	r1, [pc, #116]	; (8001910 <HYDROC_MSG_COTS1_f+0x128>)
 800189a:	2000      	movs	r0, #0
 800189c:	f00f f8ba 	bl	8010a14 <strtok>
 80018a0:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//T_gas
 80018a2:	491b      	ldr	r1, [pc, #108]	; (8001910 <HYDROC_MSG_COTS1_f+0x128>)
 80018a4:	2000      	movs	r0, #0
 80018a6:	f00f f8b5 	bl	8010a14 <strtok>
 80018aa:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ts1.T_gas[0]=0x00;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 254f 	strb.w	r2, [r3, #1359]	; 0x54f
	 strcpy(hydroc_obj->ts1.T_gas,pch);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f203 534f 	addw	r3, r3, #1359	; 0x54f
 80018ba:	68f9      	ldr	r1, [r7, #12]
 80018bc:	4618      	mov	r0, r3
 80018be:	f00e fa2f 	bl	800fd20 <strcpy>
	 pch = strtok (NULL,",");//xz
 80018c2:	4913      	ldr	r1, [pc, #76]	; (8001910 <HYDROC_MSG_COTS1_f+0x128>)
 80018c4:	2000      	movs	r0, #0
 80018c6:	f00f f8a5 	bl	8010a14 <strtok>
 80018ca:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//xz
 80018cc:	4910      	ldr	r1, [pc, #64]	; (8001910 <HYDROC_MSG_COTS1_f+0x128>)
 80018ce:	2000      	movs	r0, #0
 80018d0:	f00f f8a0 	bl	8010a14 <strtok>
 80018d4:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//rH_gas
 80018d6:	490e      	ldr	r1, [pc, #56]	; (8001910 <HYDROC_MSG_COTS1_f+0x128>)
 80018d8:	2000      	movs	r0, #0
 80018da:	f00f f89b 	bl	8010a14 <strtok>
 80018de:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ts1.rH_gas[0]=0x00;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 255e 	strb.w	r2, [r3, #1374]	; 0x55e
	 strcpy(hydroc_obj->ts1.rH_gas,pch);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f203 535e 	addw	r3, r3, #1374	; 0x55e
 80018ee:	68f9      	ldr	r1, [r7, #12]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f00e fa15 	bl	800fd20 <strcpy>
	 osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_COTS1,1);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2201      	movs	r2, #1
 80018fc:	2102      	movs	r1, #2
 80018fe:	4618      	mov	r0, r3
 8001900:	f00a ff66 	bl	800c7d0 <osMessagePut>
   }
   return HYDROC_F_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	08012d74 	.word	0x08012d74

08001914 <HYDROC_MSG_CODS4_f>:

int HYDROC_MSG_CODS4_f(hydroc* hydroc_obj,uint8_t* msg)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
   char * pch;
   if(hydroc_obj->status==HYDROC_WAIT_DATA)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7b5b      	ldrb	r3, [r3, #13]
 8001922:	2b02      	cmp	r3, #2
 8001924:	f040 8150 	bne.w	8001bc8 <HYDROC_MSG_CODS4_f+0x2b4>
   {
	 pch = strtok ((char*)msg,",");//destination
 8001928:	49aa      	ldr	r1, [pc, #680]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 800192a:	6838      	ldr	r0, [r7, #0]
 800192c:	f00f f872 	bl	8010a14 <strtok>
 8001930:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//source
 8001932:	49a8      	ldr	r1, [pc, #672]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 8001934:	2000      	movs	r0, #0
 8001936:	f00f f86d 	bl	8010a14 <strtok>
 800193a:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//data
 800193c:	49a5      	ldr	r1, [pc, #660]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 800193e:	2000      	movs	r0, #0
 8001940:	f00f f868 	bl	8010a14 <strtok>
 8001944:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//format
 8001946:	49a3      	ldr	r1, [pc, #652]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 8001948:	2000      	movs	r0, #0
 800194a:	f00f f863 	bl	8010a14 <strtok>
 800194e:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//LDN
 8001950:	49a0      	ldr	r1, [pc, #640]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 8001952:	2000      	movs	r0, #0
 8001954:	f00f f85e 	bl	8010a14 <strtok>
 8001958:	60f8      	str	r0, [r7, #12]
	 pch = strtok (NULL,",");//date
 800195a:	499e      	ldr	r1, [pc, #632]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 800195c:	2000      	movs	r0, #0
 800195e:	f00f f859 	bl	8010a14 <strtok>
 8001962:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.date[0]=0x00;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
	 strcpy(hydroc_obj->ds4.date,pch);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8001972:	68f9      	ldr	r1, [r7, #12]
 8001974:	4618      	mov	r0, r3
 8001976:	f00e f9d3 	bl	800fd20 <strcpy>
	 pch = strtok (NULL,",");//time
 800197a:	4996      	ldr	r1, [pc, #600]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 800197c:	2000      	movs	r0, #0
 800197e:	f00f f849 	bl	8010a14 <strtok>
 8001982:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.time[0]=0x00;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
	 strcpy(hydroc_obj->ds4.time,pch);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f203 4323 	addw	r3, r3, #1059	; 0x423
 8001992:	68f9      	ldr	r1, [r7, #12]
 8001994:	4618      	mov	r0, r3
 8001996:	f00e f9c3 	bl	800fd20 <strcpy>
	 //pch = strtok (NULL,",");//msec
	 pch = strtok (NULL,",");//weekday
 800199a:	498e      	ldr	r1, [pc, #568]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 800199c:	2000      	movs	r0, #0
 800199e:	f00f f839 	bl	8010a14 <strtok>
 80019a2:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.weekday[0]=0x00;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
	 strcpy(hydroc_obj->ds4.weekday,pch);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f203 4332 	addw	r3, r3, #1074	; 0x432
 80019b2:	68f9      	ldr	r1, [r7, #12]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f00e f9b3 	bl	800fd20 <strcpy>
	 pch = strtok (NULL,",");//power_pump
 80019ba:	4986      	ldr	r1, [pc, #536]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 80019bc:	2000      	movs	r0, #0
 80019be:	f00f f829 	bl	8010a14 <strtok>
 80019c2:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.pump_pwr[0]=0x00;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
	 strcpy(hydroc_obj->ds4.pump_pwr,pch);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f203 4341 	addw	r3, r3, #1089	; 0x441
 80019d2:	68f9      	ldr	r1, [r7, #12]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f00e f9a3 	bl	800fd20 <strcpy>
	 //pch = strtok (NULL,",");//analog_1
	 pch = strtok (NULL,",");//p_ndir
 80019da:	497e      	ldr	r1, [pc, #504]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 80019dc:	2000      	movs	r0, #0
 80019de:	f00f f819 	bl	8010a14 <strtok>
 80019e2:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.P_NDIR[0]=0x00;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
	 strcpy(hydroc_obj->ds4.P_NDIR,pch);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80019f2:	68f9      	ldr	r1, [r7, #12]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f00e f993 	bl	800fd20 <strcpy>
	 pch = strtok (NULL,",");//p_in
 80019fa:	4976      	ldr	r1, [pc, #472]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 80019fc:	2000      	movs	r0, #0
 80019fe:	f00f f809 	bl	8010a14 <strtok>
 8001a02:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.P_IN[0]=0x00;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 245f 	strb.w	r2, [r3, #1119]	; 0x45f
	 strcpy(hydroc_obj->ds4.P_IN,pch);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f203 435f 	addw	r3, r3, #1119	; 0x45f
 8001a12:	68f9      	ldr	r1, [r7, #12]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f00e f983 	bl	800fd20 <strcpy>
	 //pch = strtok (NULL,",");//analog_4
	 //pch = strtok (NULL,",");//analog_5
	 pch = strtok (NULL,",");//I_total
 8001a1a:	496e      	ldr	r1, [pc, #440]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f00e fff9 	bl	8010a14 <strtok>
 8001a22:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.I_total[0]=0x00;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
	 strcpy(hydroc_obj->ds4.I_total,pch);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f203 436e 	addw	r3, r3, #1134	; 0x46e
 8001a32:	68f9      	ldr	r1, [r7, #12]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00e f973 	bl	800fd20 <strcpy>
	 pch = strtok (NULL,",");//U_total
 8001a3a:	4966      	ldr	r1, [pc, #408]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f00e ffe9 	bl	8010a14 <strtok>
 8001a42:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.U_total[0]=0x00;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
	 strcpy(hydroc_obj->ds4.U_total,pch);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f203 437d 	addw	r3, r3, #1149	; 0x47d
 8001a52:	68f9      	ldr	r1, [r7, #12]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f00e f963 	bl	800fd20 <strcpy>
	 pch = strtok (NULL,",");//state 1
 8001a5a:	495e      	ldr	r1, [pc, #376]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f00e ffd9 	bl	8010a14 <strtok>
 8001a62:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.status_zeroing[0]=0x00;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 248c 	strb.w	r2, [r3, #1164]	; 0x48c
	 strcpy(hydroc_obj->ds4.status_zeroing,pch);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8001a72:	68f9      	ldr	r1, [r7, #12]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f00e f953 	bl	800fd20 <strcpy>
	 pch = strtok (NULL,",");//state 2
 8001a7a:	4956      	ldr	r1, [pc, #344]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f00e ffc9 	bl	8010a14 <strtok>
 8001a82:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.status_flush[0]=0x00;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
	 strcpy(hydroc_obj->ds4.status_flush,pch);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f203 4391 	addw	r3, r3, #1169	; 0x491
 8001a92:	68f9      	ldr	r1, [r7, #12]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f00e f943 	bl	800fd20 <strcpy>
	 pch = strtok (NULL,",");//state 3
 8001a9a:	494e      	ldr	r1, [pc, #312]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f00e ffb9 	bl	8010a14 <strtok>
 8001aa2:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.status_pump[0]=0x00;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2496 	strb.w	r2, [r3, #1174]	; 0x496
	 strcpy(hydroc_obj->ds4.status_pump,pch);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f203 4396 	addw	r3, r3, #1174	; 0x496
 8001ab2:	68f9      	ldr	r1, [r7, #12]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f00e f933 	bl	800fd20 <strcpy>
	 //pch = strtok (NULL,",");//xz
	 //pch = strtok (NULL,",");//xz
	 //pch = strtok (NULL,",");//xz
	 //pch = strtok (NULL,",");//xz
	 pch = strtok (NULL,",");//runtime
 8001aba:	4946      	ldr	r1, [pc, #280]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 8001abc:	2000      	movs	r0, #0
 8001abe:	f00e ffa9 	bl	8010a14 <strtok>
 8001ac2:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.runtime[0]=0x00;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 249b 	strb.w	r2, [r3, #1179]	; 0x49b
	 strcpy(hydroc_obj->ds4.runtime,pch);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f203 439b 	addw	r3, r3, #1179	; 0x49b
 8001ad2:	68f9      	ldr	r1, [r7, #12]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f00e f923 	bl	800fd20 <strcpy>
	 pch = strtok (NULL,",");//signal raw
 8001ada:	493e      	ldr	r1, [pc, #248]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 8001adc:	2000      	movs	r0, #0
 8001ade:	f00e ff99 	bl	8010a14 <strtok>
 8001ae2:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.signal_raw[0]=0x00;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 24aa 	strb.w	r2, [r3, #1194]	; 0x4aa
	 strcpy(hydroc_obj->ds4.signal_raw,pch);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f203 43aa 	addw	r3, r3, #1194	; 0x4aa
 8001af2:	68f9      	ldr	r1, [r7, #12]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f00e f913 	bl	800fd20 <strcpy>
	 pch = strtok (NULL,",");//signal ref
 8001afa:	4936      	ldr	r1, [pc, #216]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 8001afc:	2000      	movs	r0, #0
 8001afe:	f00e ff89 	bl	8010a14 <strtok>
 8001b02:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.signal_ref[0]=0x00;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 24b9 	strb.w	r2, [r3, #1209]	; 0x4b9
	 strcpy(hydroc_obj->ds4.signal_ref,pch);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f203 43b9 	addw	r3, r3, #1209	; 0x4b9
 8001b12:	68f9      	ldr	r1, [r7, #12]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f00e f903 	bl	800fd20 <strcpy>
	 pch = strtok (NULL,",");//t sensor
 8001b1a:	492e      	ldr	r1, [pc, #184]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f00e ff79 	bl	8010a14 <strtok>
 8001b22:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.T_sensor[0]=0x00;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 24c8 	strb.w	r2, [r3, #1224]	; 0x4c8
	 strcpy(hydroc_obj->ds4.T_sensor,pch);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8001b32:	68f9      	ldr	r1, [r7, #12]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f00e f8f3 	bl	800fd20 <strcpy>
	 pch = strtok (NULL,",");//signal proc
 8001b3a:	4926      	ldr	r1, [pc, #152]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f00e ff69 	bl	8010a14 <strtok>
 8001b42:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.signal_proc[0]=0x00;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
	 strcpy(hydroc_obj->ds4.signal_proc,pch);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f203 43d7 	addw	r3, r3, #1239	; 0x4d7
 8001b52:	68f9      	ldr	r1, [r7, #12]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f00e f8e3 	bl	800fd20 <strcpy>
	 pch = strtok (NULL,",");//conc_estimate
 8001b5a:	491e      	ldr	r1, [pc, #120]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f00e ff59 	bl	8010a14 <strtok>
 8001b62:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.conc_estimate[0]=0x00;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 24e6 	strb.w	r2, [r3, #1254]	; 0x4e6
	 strcpy(hydroc_obj->ds4.conc_estimate,pch);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f203 43e6 	addw	r3, r3, #1254	; 0x4e6
 8001b72:	68f9      	ldr	r1, [r7, #12]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f00e f8d3 	bl	800fd20 <strcpy>
	 pch = strtok (NULL,",");//pCO2_corr
 8001b7a:	4916      	ldr	r1, [pc, #88]	; (8001bd4 <HYDROC_MSG_CODS4_f+0x2c0>)
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f00e ff49 	bl	8010a14 <strtok>
 8001b82:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.pCO2_corr[0]=0x00;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 24f5 	strb.w	r2, [r3, #1269]	; 0x4f5
	 strcpy(hydroc_obj->ds4.pCO2_corr,pch);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f203 43f5 	addw	r3, r3, #1269	; 0x4f5
 8001b92:	68f9      	ldr	r1, [r7, #12]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f00e f8c3 	bl	800fd20 <strcpy>
	 pch = strtok (NULL,"*");//xCO2_corr
 8001b9a:	490f      	ldr	r1, [pc, #60]	; (8001bd8 <HYDROC_MSG_CODS4_f+0x2c4>)
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f00e ff39 	bl	8010a14 <strtok>
 8001ba2:	60f8      	str	r0, [r7, #12]
	 hydroc_obj->ds4.xCO2_corr[0]=0x00;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
	 strcpy(hydroc_obj->ds4.xCO2_corr,pch);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8001bb2:	68f9      	ldr	r1, [r7, #12]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f00e f8b3 	bl	800fd20 <strcpy>

     osMessagePut(hydroc_obj->events_q,HYDROC_EVNT_CODS4,1);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f00a fe04 	bl	800c7d0 <osMessagePut>
     //strcpy(hydroc_obj->ds4_data,msg);
   }
   return HYDROC_F_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	08012d74 	.word	0x08012d74
 8001bd8:	08012d90 	.word	0x08012d90

08001bdc <sd_storage_disk_init>:

extern ss_pp sd_cards_ss[4];
extern UART_HandleTypeDef huart1;

F_RES sd_storage_disk_init(FATFS* fs,char* path)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
	if(f_mount(fs,path,1)==FR_OK) return F_OK;
 8001be6:	2201      	movs	r2, #1
 8001be8:	6839      	ldr	r1, [r7, #0]
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f009 fb36 	bl	800b25c <f_mount>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <sd_storage_disk_init+0x1e>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <sd_storage_disk_init+0x20>
	else return F_ERR;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <sd_storage_init>:
F_RES sd_storage_init(sd_storage_t* self_object)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08c      	sub	sp, #48	; 0x30
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  char tt[10];
  FRESULT res;
  DWORD fre_clust, fre_sect, tot_sect;
  FATFS*  fs;
  self_object->active_disk_indx=0;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
  self_object->num_of_discs=0;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
  self_object->status=STORAGE_NOT_INITTIALIZED;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d

  MX_FATFS_Init();
 8001c24:	f005 fd6e 	bl	8007704 <MX_FATFS_Init>

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c2c:	e080      	b.n	8001d30 <sd_storage_init+0x12c>
  {
   sprintf(tt,"%d:",i);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c34:	4953      	ldr	r1, [pc, #332]	; (8001d84 <sd_storage_init+0x180>)
 8001c36:	4618      	mov	r0, r3
 8001c38:	f00e f800 	bl	800fc3c <siprintf>
   if(sd_storage_disk_init(&self_object->disks[i].fs,tt)==F_OK){
 8001c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3e:	f44f 7211 	mov.w	r2, #580	; 0x244
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	f107 0214 	add.w	r2, r7, #20
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ffc3 	bl	8001bdc <sd_storage_disk_init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d15b      	bne.n	8001d14 <sd_storage_init+0x110>
		  self_object->disks[i].status=DISK_PRESENT;
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c60:	f44f 7111 	mov.w	r1, #580	; 0x244
 8001c64:	fb01 f303 	mul.w	r3, r1, r3
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
		  self_object->num_of_discs++;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 324c 	ldrb.w	r3, [r3, #588]	; 0x24c
 8001c78:	3301      	adds	r3, #1
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
  		  if(f_getfree(tt, &fre_clust, &fs)==FR_OK){
 8001c82:	f107 020c 	add.w	r2, r7, #12
 8001c86:	f107 0110 	add.w	r1, r7, #16
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f00a fa61 	bl	800c156 <f_getfree>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d147      	bne.n	8001d2a <sd_storage_init+0x126>
		    tot_sect = (self_object->disks[i].fs.n_fatent - 2) * self_object->disks[i].fs.csize;
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9e:	f44f 7111 	mov.w	r1, #580	; 0x244
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	331c      	adds	r3, #28
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3b02      	subs	r3, #2
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cb2:	f44f 7011 	mov.w	r0, #580	; 0x244
 8001cb6:	fb00 f202 	mul.w	r2, r0, r2
 8001cba:	440a      	add	r2, r1
 8001cbc:	320a      	adds	r2, #10
 8001cbe:	8812      	ldrh	r2, [r2, #0]
 8001cc0:	fb02 f303 	mul.w	r3, r2, r3
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
			fre_sect = fre_clust * self_object->disks[i].fs.csize;
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cca:	f44f 7111 	mov.w	r1, #580	; 0x244
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	330a      	adds	r3, #10
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	fb02 f303 	mul.w	r3, r2, r3
 8001ce0:	623b      	str	r3, [r7, #32]
			self_object->disks[i].size=tot_sect/2;
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	085a      	lsrs	r2, r3, #1
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cea:	f44f 7011 	mov.w	r0, #580	; 0x244
 8001cee:	fb00 f303 	mul.w	r3, r0, r3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8001cf8:	601a      	str	r2, [r3, #0]
			self_object->disks[i].free_space=fre_sect/2;
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	085a      	lsrs	r2, r3, #1
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d02:	f44f 7011 	mov.w	r0, #580	; 0x244
 8001d06:	fb00 f303 	mul.w	r3, r0, r3
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e00a      	b.n	8001d2a <sd_storage_init+0x126>
		  }
   }
   else{
		 self_object->disks[i].status=DISK_ABSENT;
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d18:	f44f 7111 	mov.w	r1, #580	; 0x244
 8001d1c:	fb01 f303 	mul.w	r3, r1, r3
 8001d20:	4413      	add	r3, r2
 8001d22:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8001d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f77f af7b 	ble.w	8001c2e <sd_storage_init+0x2a>
   }
  }

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d3c:	e019      	b.n	8001d72 <sd_storage_init+0x16e>
  {
   if(self_object->disks[i].status==DISK_PRESENT){
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d42:	f44f 7111 	mov.w	r1, #580	; 0x244
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10a      	bne.n	8001d6c <sd_storage_init+0x168>
	   self_object->active_disk_indx=i;
 8001d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	   self_object->status=STORAGE_INITTIALIZED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d
	   return F_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	e006      	b.n	8001d7a <sd_storage_init+0x176>
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8001d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6e:	3301      	adds	r3, #1
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	dde2      	ble.n	8001d3e <sd_storage_init+0x13a>
   }
  }
  return F_ERR;
 8001d78:	2301      	movs	r3, #1
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3730      	adds	r7, #48	; 0x30
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	08012d94 	.word	0x08012d94

08001d88 <sd_storage_link_ss>:

F_RES sd_storage_link_ss(sd_storage_t* self_object,uint8_t disk_num, uint16_t sd_ss_pin,GPIO_TypeDef* sd_ss_port)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	72fb      	strb	r3, [r7, #11]
 8001d96:	4613      	mov	r3, r2
 8001d98:	813b      	strh	r3, [r7, #8]
	  sd_cards_ss[disk_num].sd_ss_pin=sd_ss_pin;
 8001d9a:	7afb      	ldrb	r3, [r7, #11]
 8001d9c:	490a      	ldr	r1, [pc, #40]	; (8001dc8 <sd_storage_link_ss+0x40>)
 8001d9e:	893a      	ldrh	r2, [r7, #8]
 8001da0:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
	  sd_cards_ss[disk_num].sd_ss_port=sd_ss_port;
 8001da4:	7afb      	ldrb	r3, [r7, #11]
 8001da6:	4a08      	ldr	r2, [pc, #32]	; (8001dc8 <sd_storage_link_ss+0x40>)
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	605a      	str	r2, [r3, #4]
	  HAL_GPIO_WritePin(sd_ss_port, sd_ss_pin, GPIO_PIN_SET);
 8001db0:	893b      	ldrh	r3, [r7, #8]
 8001db2:	2201      	movs	r2, #1
 8001db4:	4619      	mov	r1, r3
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f003 f882 	bl	8004ec0 <HAL_GPIO_WritePin>
	  return F_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20001ab0 	.word	0x20001ab0

08001dcc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4a06      	ldr	r2, [pc, #24]	; (8001df4 <vApplicationGetIdleTaskMemory+0x28>)
 8001ddc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001de2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2280      	movs	r2, #128	; 0x80
 8001de8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr
 8001df4:	200002a4 	.word	0x200002a4
 8001df8:	20000358 	.word	0x20000358

08001dfc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <vApplicationGetTimerTaskMemory+0x2c>)
 8001e0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	4a06      	ldr	r2, [pc, #24]	; (8001e2c <vApplicationGetTimerTaskMemory+0x30>)
 8001e12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e1a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000558 	.word	0x20000558
 8001e2c:	2000060c 	.word	0x2000060c

08001e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e30:	b5b0      	push	{r4, r5, r7, lr}
 8001e32:	b094      	sub	sp, #80	; 0x50
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e36:	f002 f995 	bl	8004164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e3a:	f000 f891 	bl	8001f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e3e:	f000 f9c7 	bl	80021d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e42:	f000 f99f 	bl	8002184 <MX_DMA_Init>
  MX_USB_OTG_FS_HCD_Init();
 8001e46:	f000 f97f 	bl	8002148 <MX_USB_OTG_FS_HCD_Init>
  MX_UART5_Init();
 8001e4a:	f000 f929 	bl	80020a0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001e4e:	f000 f951 	bl	80020f4 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001e52:	f000 f8ef 	bl	8002034 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  fsm_status=FSM_IDLE;
 8001e56:	4b32      	ldr	r3, [pc, #200]	; (8001f20 <main+0xf0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
  clock_sync_status=CLK_UNSYNC;
 8001e5c:	4b31      	ldr	r3, [pc, #196]	; (8001f24 <main+0xf4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
  seaglider_init(&glider1);
 8001e62:	4831      	ldr	r0, [pc, #196]	; (8001f28 <main+0xf8>)
 8001e64:	f001 f9c2 	bl	80031ec <seaglider_init>
  hydroc_init(&hydroc_sensor1);
 8001e68:	4830      	ldr	r0, [pc, #192]	; (8001f2c <main+0xfc>)
 8001e6a:	f7ff f90d 	bl	8001088 <hydroc_init>


  HAL_UART_Receive_IT(&SENSOR_UART,&(hydroc_sensor1.media_rx_byte),1);
 8001e6e:	2201      	movs	r2, #1
 8001e70:	492f      	ldr	r1, [pc, #188]	; (8001f30 <main+0x100>)
 8001e72:	4830      	ldr	r0, [pc, #192]	; (8001f34 <main+0x104>)
 8001e74:	f004 fe7d 	bl	8006b72 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&GLIDER_UART,&(glider1.media_rx_byte),1);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	492f      	ldr	r1, [pc, #188]	; (8001f38 <main+0x108>)
 8001e7c:	482f      	ldr	r0, [pc, #188]	; (8001f3c <main+0x10c>)
 8001e7e:	f004 fe78 	bl	8006b72 <HAL_UART_Receive_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of glider_uart_sem */
  osSemaphoreDef(glider_uart_sem);
 8001e82:	2300      	movs	r3, #0
 8001e84:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e86:	2300      	movs	r3, #0
 8001e88:	64fb      	str	r3, [r7, #76]	; 0x4c
  glider_uart_semHandle = osSemaphoreCreate(osSemaphore(glider_uart_sem), 1);
 8001e8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e8e:	2101      	movs	r1, #1
 8001e90:	4618      	mov	r0, r3
 8001e92:	f00a fc43 	bl	800c71c <osSemaphoreCreate>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4a29      	ldr	r2, [pc, #164]	; (8001f40 <main+0x110>)
 8001e9a:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensor_uart_sem */
  osSemaphoreDef(sensor_uart_sem);
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	643b      	str	r3, [r7, #64]	; 0x40
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	647b      	str	r3, [r7, #68]	; 0x44
  sensor_uart_semHandle = osSemaphoreCreate(osSemaphore(sensor_uart_sem), 1);
 8001ea4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f00a fc36 	bl	800c71c <osSemaphoreCreate>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4a24      	ldr	r2, [pc, #144]	; (8001f44 <main+0x114>)
 8001eb4:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of timer1 */
  osTimerDef(timer1, timer1_cb);
 8001eb6:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <main+0x118>)
 8001eb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001eba:	2300      	movs	r3, #0
 8001ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
  timer1Handle = osTimerCreate(osTimer(timer1), osTimerOnce, NULL);
 8001ebe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f00a fbf4 	bl	800c6b4 <osTimerCreate>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4a1f      	ldr	r2, [pc, #124]	; (8001f4c <main+0x11c>)
 8001ed0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <main+0x120>)
 8001ed4:	f107 041c 	add.w	r4, r7, #28
 8001ed8:	461d      	mov	r5, r3
 8001eda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ede:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ee2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f00a fb80 	bl	800c5f2 <osThreadCreate>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4a17      	ldr	r2, [pc, #92]	; (8001f54 <main+0x124>)
 8001ef6:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart_tx_t */
  osThreadDef(uart_tx_t, uart_tx_f, osPriorityNormal, 0, 256);
 8001ef8:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <main+0x128>)
 8001efa:	463c      	mov	r4, r7
 8001efc:	461d      	mov	r5, r3
 8001efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart_tx_tHandle = osThreadCreate(osThread(uart_tx_t), NULL);
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f00a fb6f 	bl	800c5f2 <osThreadCreate>
 8001f14:	4603      	mov	r3, r0
 8001f16:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <main+0x12c>)
 8001f18:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001f1a:	f00a fb63 	bl	800c5e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f1e:	e7fe      	b.n	8001f1e <main+0xee>
 8001f20:	20001aa4 	.word	0x20001aa4
 8001f24:	20001aa5 	.word	0x20001aa5
 8001f28:	20000e8c 	.word	0x20000e8c
 8001f2c:	200012c8 	.word	0x200012c8
 8001f30:	200012d4 	.word	0x200012d4
 8001f34:	20000b30 	.word	0x20000b30
 8001f38:	20000e98 	.word	0x20000e98
 8001f3c:	20000aec 	.word	0x20000aec
 8001f40:	20000e84 	.word	0x20000e84
 8001f44:	20000e88 	.word	0x20000e88
 8001f48:	08002c01 	.word	0x08002c01
 8001f4c:	20000e80 	.word	0x20000e80
 8001f50:	08012db0 	.word	0x08012db0
 8001f54:	20000e78 	.word	0x20000e78
 8001f58:	08012dcc 	.word	0x08012dcc
 8001f5c:	20000e7c 	.word	0x20000e7c

08001f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b09c      	sub	sp, #112	; 0x70
 8001f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f6a:	2238      	movs	r2, #56	; 0x38
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f00d fd4d 	bl	800fa0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2220      	movs	r2, #32
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f00d fd3f 	bl	800fa0e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f90:	2301      	movs	r3, #1
 8001f92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f98:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8001fa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001fb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fb6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8001fbc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fc0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV2;
 8001fc2:	2310      	movs	r3, #16
 8001fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f002 fff2 	bl	8004fb4 <HAL_RCC_OscConfig>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001fd6:	f000 fe2f 	bl	8002c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fda:	230f      	movs	r3, #15
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fec:	2300      	movs	r3, #0
 8001fee:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f003 faf2 	bl	80055e0 <HAL_RCC_ClockConfig>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002002:	f000 fe19 	bl	8002c38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002006:	2310      	movs	r3, #16
 8002008:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV2;
 800200a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800200e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	4618      	mov	r0, r3
 8002014:	f003 fd2c 	bl	8005a70 <HAL_RCCEx_PeriphCLKConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800201e:	f000 fe0b 	bl	8002c38 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8002022:	4b03      	ldr	r3, [pc, #12]	; (8002030 <SystemClock_Config+0xd0>)
 8002024:	2201      	movs	r2, #1
 8002026:	601a      	str	r2, [r3, #0]
}
 8002028:	bf00      	nop
 800202a:	3770      	adds	r7, #112	; 0x70
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	42420070 	.word	0x42420070

08002034 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002038:	4b17      	ldr	r3, [pc, #92]	; (8002098 <MX_SPI1_Init+0x64>)
 800203a:	4a18      	ldr	r2, [pc, #96]	; (800209c <MX_SPI1_Init+0x68>)
 800203c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800203e:	4b16      	ldr	r3, [pc, #88]	; (8002098 <MX_SPI1_Init+0x64>)
 8002040:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002044:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002046:	4b14      	ldr	r3, [pc, #80]	; (8002098 <MX_SPI1_Init+0x64>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <MX_SPI1_Init+0x64>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002052:	4b11      	ldr	r3, [pc, #68]	; (8002098 <MX_SPI1_Init+0x64>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <MX_SPI1_Init+0x64>)
 800205a:	2200      	movs	r2, #0
 800205c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <MX_SPI1_Init+0x64>)
 8002060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002064:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002066:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <MX_SPI1_Init+0x64>)
 8002068:	2208      	movs	r2, #8
 800206a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800206c:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <MX_SPI1_Init+0x64>)
 800206e:	2200      	movs	r2, #0
 8002070:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <MX_SPI1_Init+0x64>)
 8002074:	2200      	movs	r2, #0
 8002076:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002078:	4b07      	ldr	r3, [pc, #28]	; (8002098 <MX_SPI1_Init+0x64>)
 800207a:	2200      	movs	r2, #0
 800207c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <MX_SPI1_Init+0x64>)
 8002080:	220a      	movs	r2, #10
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002084:	4804      	ldr	r0, [pc, #16]	; (8002098 <MX_SPI1_Init+0x64>)
 8002086:	f003 fe25 	bl	8005cd4 <HAL_SPI_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002090:	f000 fdd2 	bl	8002c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000a0c 	.word	0x20000a0c
 800209c:	40013000 	.word	0x40013000

080020a0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <MX_UART5_Init+0x4c>)
 80020a6:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <MX_UART5_Init+0x50>)
 80020a8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <MX_UART5_Init+0x4c>)
 80020ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020b0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <MX_UART5_Init+0x4c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <MX_UART5_Init+0x4c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <MX_UART5_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <MX_UART5_Init+0x4c>)
 80020c6:	220c      	movs	r2, #12
 80020c8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <MX_UART5_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <MX_UART5_Init+0x4c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80020d6:	4805      	ldr	r0, [pc, #20]	; (80020ec <MX_UART5_Init+0x4c>)
 80020d8:	f004 fc28 	bl	800692c <HAL_UART_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80020e2:	f000 fda9 	bl	8002c38 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000aec 	.word	0x20000aec
 80020f0:	40005000 	.word	0x40005000

080020f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <MX_USART1_UART_Init+0x4c>)
 80020fa:	4a12      	ldr	r2, [pc, #72]	; (8002144 <MX_USART1_UART_Init+0x50>)
 80020fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <MX_USART1_UART_Init+0x4c>)
 8002100:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002104:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <MX_USART1_UART_Init+0x4c>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <MX_USART1_UART_Init+0x4c>)
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <MX_USART1_UART_Init+0x4c>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <MX_USART1_UART_Init+0x4c>)
 800211a:	220c      	movs	r2, #12
 800211c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <MX_USART1_UART_Init+0x4c>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <MX_USART1_UART_Init+0x4c>)
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800212a:	4805      	ldr	r0, [pc, #20]	; (8002140 <MX_USART1_UART_Init+0x4c>)
 800212c:	f004 fbfe 	bl	800692c <HAL_UART_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002136:	f000 fd7f 	bl	8002c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000b30 	.word	0x20000b30
 8002144:	40013800 	.word	0x40013800

08002148 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <MX_USB_OTG_FS_HCD_Init+0x38>)
 800214e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002152:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <MX_USB_OTG_FS_HCD_Init+0x38>)
 8002156:	2208      	movs	r2, #8
 8002158:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <MX_USB_OTG_FS_HCD_Init+0x38>)
 800215c:	2201      	movs	r2, #1
 800215e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <MX_USB_OTG_FS_HCD_Init+0x38>)
 8002162:	2202      	movs	r2, #2
 8002164:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <MX_USB_OTG_FS_HCD_Init+0x38>)
 8002168:	2200      	movs	r2, #0
 800216a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800216c:	4804      	ldr	r0, [pc, #16]	; (8002180 <MX_USB_OTG_FS_HCD_Init+0x38>)
 800216e:	f002 febf 	bl	8004ef0 <HAL_HCD_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_USB_OTG_FS_HCD_Init+0x34>
  {
    Error_Handler();
 8002178:	f000 fd5e 	bl	8002c38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000b74 	.word	0x20000b74

08002184 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <MX_DMA_Init+0x48>)
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	4a0f      	ldr	r2, [pc, #60]	; (80021cc <MX_DMA_Init+0x48>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6153      	str	r3, [r2, #20]
 8002196:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <MX_DMA_Init+0x48>)
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2105      	movs	r1, #5
 80021a6:	200c      	movs	r0, #12
 80021a8:	f002 f8e7 	bl	800437a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80021ac:	200c      	movs	r0, #12
 80021ae:	f002 f900 	bl	80043b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2105      	movs	r1, #5
 80021b6:	200d      	movs	r0, #13
 80021b8:	f002 f8df 	bl	800437a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80021bc:	200d      	movs	r0, #13
 80021be:	f002 f8f8 	bl	80043b2 <HAL_NVIC_EnableIRQ>

}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000

080021d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d6:	f107 0310 	add.w	r3, r7, #16
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e4:	4b23      	ldr	r3, [pc, #140]	; (8002274 <MX_GPIO_Init+0xa4>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	4a22      	ldr	r2, [pc, #136]	; (8002274 <MX_GPIO_Init+0xa4>)
 80021ea:	f043 0320 	orr.w	r3, r3, #32
 80021ee:	6193      	str	r3, [r2, #24]
 80021f0:	4b20      	ldr	r3, [pc, #128]	; (8002274 <MX_GPIO_Init+0xa4>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f003 0320 	and.w	r3, r3, #32
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fc:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <MX_GPIO_Init+0xa4>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	4a1c      	ldr	r2, [pc, #112]	; (8002274 <MX_GPIO_Init+0xa4>)
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	6193      	str	r3, [r2, #24]
 8002208:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <MX_GPIO_Init+0xa4>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002214:	4b17      	ldr	r3, [pc, #92]	; (8002274 <MX_GPIO_Init+0xa4>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	4a16      	ldr	r2, [pc, #88]	; (8002274 <MX_GPIO_Init+0xa4>)
 800221a:	f043 0310 	orr.w	r3, r3, #16
 800221e:	6193      	str	r3, [r2, #24]
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <MX_GPIO_Init+0xa4>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <MX_GPIO_Init+0xa4>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	4a10      	ldr	r2, [pc, #64]	; (8002274 <MX_GPIO_Init+0xa4>)
 8002232:	f043 0308 	orr.w	r3, r3, #8
 8002236:	6193      	str	r3, [r2, #24]
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <MX_GPIO_Init+0xa4>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_SD1_GPIO_Port, SS_SD1_Pin, GPIO_PIN_SET);
 8002244:	2201      	movs	r2, #1
 8002246:	2102      	movs	r1, #2
 8002248:	480b      	ldr	r0, [pc, #44]	; (8002278 <MX_GPIO_Init+0xa8>)
 800224a:	f002 fe39 	bl	8004ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_SD1_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin;
 800224e:	2302      	movs	r3, #2
 8002250:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002252:	2301      	movs	r3, #1
 8002254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SS_SD1_GPIO_Port, &GPIO_InitStruct);
 800225e:	f107 0310 	add.w	r3, r7, #16
 8002262:	4619      	mov	r1, r3
 8002264:	4804      	ldr	r0, [pc, #16]	; (8002278 <MX_GPIO_Init+0xa8>)
 8002266:	f002 fca7 	bl	8004bb8 <HAL_GPIO_Init>

}
 800226a:	bf00      	nop
 800226c:	3720      	adds	r7, #32
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	40010800 	.word	0x40010800

0800227c <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */
uint8_t tmp1;
uint8_t tmp2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 if(huart==&SENSOR_UART)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a11      	ldr	r2, [pc, #68]	; (80022cc <HAL_UART_RxCpltCallback+0x50>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d10b      	bne.n	80022a4 <HAL_UART_RxCpltCallback+0x28>
 {
	 hydroc_media_process_byte(&hydroc_sensor1,hydroc_sensor1.media_rx_byte);
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_UART_RxCpltCallback+0x54>)
 800228e:	7b1b      	ldrb	r3, [r3, #12]
 8002290:	4619      	mov	r1, r3
 8002292:	480f      	ldr	r0, [pc, #60]	; (80022d0 <HAL_UART_RxCpltCallback+0x54>)
 8002294:	f7fe ff84 	bl	80011a0 <hydroc_media_process_byte>
	 HAL_UART_Receive_IT(&SENSOR_UART,&(hydroc_sensor1.media_rx_byte),1);
 8002298:	2201      	movs	r2, #1
 800229a:	490e      	ldr	r1, [pc, #56]	; (80022d4 <HAL_UART_RxCpltCallback+0x58>)
 800229c:	480b      	ldr	r0, [pc, #44]	; (80022cc <HAL_UART_RxCpltCallback+0x50>)
 800229e:	f004 fc68 	bl	8006b72 <HAL_UART_Receive_IT>
 else if(huart==&GLIDER_UART)
 {
	 seaglider_media_process_byte(&glider1,glider1.media_rx_byte);
	 HAL_UART_Receive_IT(&GLIDER_UART,&(glider1.media_rx_byte),1);
 }
}
 80022a2:	e00e      	b.n	80022c2 <HAL_UART_RxCpltCallback+0x46>
 else if(huart==&GLIDER_UART)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a0c      	ldr	r2, [pc, #48]	; (80022d8 <HAL_UART_RxCpltCallback+0x5c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d10a      	bne.n	80022c2 <HAL_UART_RxCpltCallback+0x46>
	 seaglider_media_process_byte(&glider1,glider1.media_rx_byte);
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_UART_RxCpltCallback+0x60>)
 80022ae:	7b1b      	ldrb	r3, [r3, #12]
 80022b0:	4619      	mov	r1, r3
 80022b2:	480a      	ldr	r0, [pc, #40]	; (80022dc <HAL_UART_RxCpltCallback+0x60>)
 80022b4:	f001 f817 	bl	80032e6 <seaglider_media_process_byte>
	 HAL_UART_Receive_IT(&GLIDER_UART,&(glider1.media_rx_byte),1);
 80022b8:	2201      	movs	r2, #1
 80022ba:	4909      	ldr	r1, [pc, #36]	; (80022e0 <HAL_UART_RxCpltCallback+0x64>)
 80022bc:	4806      	ldr	r0, [pc, #24]	; (80022d8 <HAL_UART_RxCpltCallback+0x5c>)
 80022be:	f004 fc58 	bl	8006b72 <HAL_UART_Receive_IT>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000b30 	.word	0x20000b30
 80022d0:	200012c8 	.word	0x200012c8
 80022d4:	200012d4 	.word	0x200012d4
 80022d8:	20000aec 	.word	0x20000aec
 80022dc:	20000e8c 	.word	0x20000e8c
 80022e0:	20000e98 	.word	0x20000e98

080022e4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

 if(huart==&SENSOR_UART)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <HAL_UART_TxCpltCallback+0x54>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d10c      	bne.n	800230e <HAL_UART_TxCpltCallback+0x2a>
 {
	 if(hydroc_media_get_byte(&hydroc_sensor1,&tmp2)==HYDROC_F_OK)
 80022f4:	4911      	ldr	r1, [pc, #68]	; (800233c <HAL_UART_TxCpltCallback+0x58>)
 80022f6:	4812      	ldr	r0, [pc, #72]	; (8002340 <HAL_UART_TxCpltCallback+0x5c>)
 80022f8:	f7fe ffeb 	bl	80012d2 <hydroc_media_get_byte>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d115      	bne.n	800232e <HAL_UART_TxCpltCallback+0x4a>
	 {
	    HAL_UART_Transmit_IT(&SENSOR_UART,&tmp2,1);
 8002302:	2201      	movs	r2, #1
 8002304:	490d      	ldr	r1, [pc, #52]	; (800233c <HAL_UART_TxCpltCallback+0x58>)
 8002306:	480c      	ldr	r0, [pc, #48]	; (8002338 <HAL_UART_TxCpltCallback+0x54>)
 8002308:	f004 fbef 	bl	8006aea <HAL_UART_Transmit_IT>
	 if(seaglider_media_get_byte(&glider1,&tmp1)==SEAGLIDER_F_OK)
	 {
	    HAL_UART_Transmit_IT(&GLIDER_UART,&tmp1,1);
	 }
 }
}
 800230c:	e00f      	b.n	800232e <HAL_UART_TxCpltCallback+0x4a>
 else if(huart==&GLIDER_UART)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a0c      	ldr	r2, [pc, #48]	; (8002344 <HAL_UART_TxCpltCallback+0x60>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d10b      	bne.n	800232e <HAL_UART_TxCpltCallback+0x4a>
	 if(seaglider_media_get_byte(&glider1,&tmp1)==SEAGLIDER_F_OK)
 8002316:	490c      	ldr	r1, [pc, #48]	; (8002348 <HAL_UART_TxCpltCallback+0x64>)
 8002318:	480c      	ldr	r0, [pc, #48]	; (800234c <HAL_UART_TxCpltCallback+0x68>)
 800231a:	f001 f864 	bl	80033e6 <seaglider_media_get_byte>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d104      	bne.n	800232e <HAL_UART_TxCpltCallback+0x4a>
	    HAL_UART_Transmit_IT(&GLIDER_UART,&tmp1,1);
 8002324:	2201      	movs	r2, #1
 8002326:	4908      	ldr	r1, [pc, #32]	; (8002348 <HAL_UART_TxCpltCallback+0x64>)
 8002328:	4806      	ldr	r0, [pc, #24]	; (8002344 <HAL_UART_TxCpltCallback+0x60>)
 800232a:	f004 fbde 	bl	8006aea <HAL_UART_Transmit_IT>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000b30 	.word	0x20000b30
 800233c:	20001aa7 	.word	0x20001aa7
 8002340:	200012c8 	.word	0x200012c8
 8002344:	20000aec 	.word	0x20000aec
 8002348:	20001aa6 	.word	0x20001aa6
 800234c:	20000e8c 	.word	0x20000e8c

08002350 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	f2ad 7dd4 	subw	sp, sp, #2004	; 0x7d4
 8002356:	af08      	add	r7, sp, #32
 8002358:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800235c:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8002360:	6018      	str	r0, [r3, #0]
  FIL  data_file;
  FIL  err_file;
  char tmp_filename[FILENAME_LEN+2];
  char log_msg[512];

  osDelay(200);
 8002362:	20c8      	movs	r0, #200	; 0xc8
 8002364:	f00a f991 	bl	800c68a <osDelay>
  #ifdef DEBUG_MSG
   HAL_UART_Transmit(&GLIDER_UART,"Glider port start\r",18,100);
 8002368:	2364      	movs	r3, #100	; 0x64
 800236a:	2212      	movs	r2, #18
 800236c:	49b2      	ldr	r1, [pc, #712]	; (8002638 <StartDefaultTask+0x2e8>)
 800236e:	48b3      	ldr	r0, [pc, #716]	; (800263c <StartDefaultTask+0x2ec>)
 8002370:	f004 fb29 	bl	80069c6 <HAL_UART_Transmit>
   HAL_UART_Transmit(&SENSOR_UART,"Sensor port start\r",18,100);
 8002374:	2364      	movs	r3, #100	; 0x64
 8002376:	2212      	movs	r2, #18
 8002378:	49b1      	ldr	r1, [pc, #708]	; (8002640 <StartDefaultTask+0x2f0>)
 800237a:	48b2      	ldr	r0, [pc, #712]	; (8002644 <StartDefaultTask+0x2f4>)
 800237c:	f004 fb23 	bl	80069c6 <HAL_UART_Transmit>
  #endif
  sd_storage_link_ss(&microsd_storage,0,SS_SD1_Pin,GPIOA);
 8002380:	4bb1      	ldr	r3, [pc, #708]	; (8002648 <StartDefaultTask+0x2f8>)
 8002382:	2202      	movs	r2, #2
 8002384:	2100      	movs	r1, #0
 8002386:	48b1      	ldr	r0, [pc, #708]	; (800264c <StartDefaultTask+0x2fc>)
 8002388:	f7ff fcfe 	bl	8001d88 <sd_storage_link_ss>
  while(sd_storage_init(&microsd_storage)!=F_OK){
 800238c:	e009      	b.n	80023a2 <StartDefaultTask+0x52>
		osDelay(1000);
 800238e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002392:	f00a f97a 	bl	800c68a <osDelay>
        #ifdef DEBUG_MSG
			HAL_UART_Transmit(&SENSOR_UART,"SD init error\r",14,100);
 8002396:	2364      	movs	r3, #100	; 0x64
 8002398:	220e      	movs	r2, #14
 800239a:	49ad      	ldr	r1, [pc, #692]	; (8002650 <StartDefaultTask+0x300>)
 800239c:	48a9      	ldr	r0, [pc, #676]	; (8002644 <StartDefaultTask+0x2f4>)
 800239e:	f004 fb12 	bl	80069c6 <HAL_UART_Transmit>
  while(sd_storage_init(&microsd_storage)!=F_OK){
 80023a2:	48aa      	ldr	r0, [pc, #680]	; (800264c <StartDefaultTask+0x2fc>)
 80023a4:	f7ff fc2e 	bl	8001c04 <sd_storage_init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1ef      	bne.n	800238e <StartDefaultTask+0x3e>
        #endif
  }
  run_cfg.disk_id=microsd_storage.active_disk_indx;
 80023ae:	4ba7      	ldr	r3, [pc, #668]	; (800264c <StartDefaultTask+0x2fc>)
 80023b0:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80023b4:	461a      	mov	r2, r3
 80023b6:	4ba7      	ldr	r3, [pc, #668]	; (8002654 <StartDefaultTask+0x304>)
 80023b8:	601a      	str	r2, [r3, #0]
  if(read_settings()==F_ERR){
 80023ba:	f001 fadf 	bl	800397c <read_settings>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <StartDefaultTask+0x78>
	  set_default_settings();
 80023c4:	f001 fac0 	bl	8003948 <set_default_settings>
  }
  #ifdef DEBUG_MSG
	HAL_UART_Transmit(&SENSOR_UART,"Init finished\r",14,100);
 80023c8:	2364      	movs	r3, #100	; 0x64
 80023ca:	220e      	movs	r2, #14
 80023cc:	49a2      	ldr	r1, [pc, #648]	; (8002658 <StartDefaultTask+0x308>)
 80023ce:	489d      	ldr	r0, [pc, #628]	; (8002644 <StartDefaultTask+0x2f4>)
 80023d0:	f004 faf9 	bl	80069c6 <HAL_UART_Transmit>
  #endif

  hydroc_sensor1.errors.P_in=run_cfg.sensor_errors.P_in;
 80023d4:	4b9f      	ldr	r3, [pc, #636]	; (8002654 <StartDefaultTask+0x304>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4aa0      	ldr	r2, [pc, #640]	; (800265c <StartDefaultTask+0x30c>)
 80023da:	f8c2 356d 	str.w	r3, [r2, #1389]	; 0x56d
  hydroc_sensor1.errors.rH_gas=run_cfg.sensor_errors.rH_gas;
 80023de:	4b9d      	ldr	r3, [pc, #628]	; (8002654 <StartDefaultTask+0x304>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	4a9e      	ldr	r2, [pc, #632]	; (800265c <StartDefaultTask+0x30c>)
 80023e4:	f8c2 3571 	str.w	r3, [r2, #1393]	; 0x571
  hydroc_sensor1.errors.T_control=run_cfg.sensor_errors.T_control;
 80023e8:	4b9a      	ldr	r3, [pc, #616]	; (8002654 <StartDefaultTask+0x304>)
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	4a9b      	ldr	r2, [pc, #620]	; (800265c <StartDefaultTask+0x30c>)
 80023ee:	f8c2 3575 	str.w	r3, [r2, #1397]	; 0x575
  hydroc_sensor1.errors.P_pump=run_cfg.sensor_errors.P_pump;
 80023f2:	4b98      	ldr	r3, [pc, #608]	; (8002654 <StartDefaultTask+0x304>)
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	4a99      	ldr	r2, [pc, #612]	; (800265c <StartDefaultTask+0x30c>)
 80023f8:	f8c2 3579 	str.w	r3, [r2, #1401]	; 0x579

  fsm_status=FSM_MAIN_ALG;
 80023fc:	4b98      	ldr	r3, [pc, #608]	; (8002660 <StartDefaultTask+0x310>)
 80023fe:	2202      	movs	r2, #2
 8002400:	701a      	strb	r2, [r3, #0]

  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	4897      	ldr	r0, [pc, #604]	; (8002664 <StartDefaultTask+0x314>)
 8002408:	f001 f808 	bl	800341c <seaglider_send_cmd>
  for(;;)
  {
		 //glider task
		 if(seaglider_get_event(&glider1,&event_id)==SEAGLIDER_F_OK)
 800240c:	f207 739f 	addw	r3, r7, #1951	; 0x79f
 8002410:	4619      	mov	r1, r3
 8002412:	4894      	ldr	r0, [pc, #592]	; (8002664 <StartDefaultTask+0x314>)
 8002414:	f001 f84c 	bl	80034b0 <seaglider_get_event>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	f040 824f 	bne.w	80028be <StartDefaultTask+0x56e>
		 {
			switch(event_id)
 8002420:	f897 379f 	ldrb.w	r3, [r7, #1951]	; 0x79f
 8002424:	2b09      	cmp	r3, #9
 8002426:	f200 824d 	bhi.w	80028c4 <StartDefaultTask+0x574>
 800242a:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <StartDefaultTask+0xe0>)
 800242c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002430:	08002587 	.word	0x08002587
 8002434:	080024d9 	.word	0x080024d9
 8002438:	080027bd 	.word	0x080027bd
 800243c:	080027c9 	.word	0x080027c9
 8002440:	080026f5 	.word	0x080026f5
 8002444:	080027b1 	.word	0x080027b1
 8002448:	080024cd 	.word	0x080024cd
 800244c:	08002459 	.word	0x08002459
 8002450:	08002493 	.word	0x08002493
 8002454:	08002863 	.word	0x08002863
			{
			 case SEAGLIDER_EVNT_CLEAR_RCVD:
				  hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_ENTER_CFG,NULL);
 8002458:	2200      	movs	r2, #0
 800245a:	2100      	movs	r1, #0
 800245c:	487f      	ldr	r0, [pc, #508]	; (800265c <StartDefaultTask+0x30c>)
 800245e:	f7fe ff53 	bl	8001308 <hydroc_send_cmd>
				  osDelay(1000);
 8002462:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002466:	f00a f910 	bl	800c68a <osDelay>
				  hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_CLEAR,NULL);
 800246a:	2200      	movs	r2, #0
 800246c:	2108      	movs	r1, #8
 800246e:	487b      	ldr	r0, [pc, #492]	; (800265c <StartDefaultTask+0x30c>)
 8002470:	f7fe ff4a 	bl	8001308 <hydroc_send_cmd>
				  osDelay(1000);
 8002474:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002478:	f00a f907 	bl	800c68a <osDelay>
				  hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_EXIT_CFG,NULL);
 800247c:	2200      	movs	r2, #0
 800247e:	2101      	movs	r1, #1
 8002480:	4876      	ldr	r0, [pc, #472]	; (800265c <StartDefaultTask+0x30c>)
 8002482:	f7fe ff41 	bl	8001308 <hydroc_send_cmd>
				  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 8002486:	2200      	movs	r2, #0
 8002488:	2100      	movs	r1, #0
 800248a:	4876      	ldr	r0, [pc, #472]	; (8002664 <StartDefaultTask+0x314>)
 800248c:	f000 ffc6 	bl	800341c <seaglider_send_cmd>
			 break;
 8002490:	e218      	b.n	80028c4 <StartDefaultTask+0x574>
			 case SEAGLIDER_EVNT_POFF_RCVD:
				  hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_ENTER_CFG,NULL);
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	4871      	ldr	r0, [pc, #452]	; (800265c <StartDefaultTask+0x30c>)
 8002498:	f7fe ff36 	bl	8001308 <hydroc_send_cmd>
				  osDelay(1000);
 800249c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024a0:	f00a f8f3 	bl	800c68a <osDelay>
				  hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_DISABLE_PUMP,NULL);
 80024a4:	2200      	movs	r2, #0
 80024a6:	2104      	movs	r1, #4
 80024a8:	486c      	ldr	r0, [pc, #432]	; (800265c <StartDefaultTask+0x30c>)
 80024aa:	f7fe ff2d 	bl	8001308 <hydroc_send_cmd>
				  osDelay(1000);
 80024ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024b2:	f00a f8ea 	bl	800c68a <osDelay>
				  hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_EXIT_CFG,NULL);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2101      	movs	r1, #1
 80024ba:	4868      	ldr	r0, [pc, #416]	; (800265c <StartDefaultTask+0x30c>)
 80024bc:	f7fe ff24 	bl	8001308 <hydroc_send_cmd>
				  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2100      	movs	r1, #0
 80024c4:	4867      	ldr	r0, [pc, #412]	; (8002664 <StartDefaultTask+0x314>)
 80024c6:	f000 ffa9 	bl	800341c <seaglider_send_cmd>
			 break;
 80024ca:	e1fb      	b.n	80028c4 <StartDefaultTask+0x574>
			 case SEAGLIDER_EVNT_DEPTH_RCVD:
				  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2100      	movs	r1, #0
 80024d0:	4864      	ldr	r0, [pc, #400]	; (8002664 <StartDefaultTask+0x314>)
 80024d2:	f000 ffa3 	bl	800341c <seaglider_send_cmd>
	         break;
 80024d6:	e1f5      	b.n	80028c4 <StartDefaultTask+0x574>
			 case SEAGLIDER_EVNT_STOP_RCVD:

				  if(glider1.dive_status==glider1.param_y){
 80024d8:	4b62      	ldr	r3, [pc, #392]	; (8002664 <StartDefaultTask+0x314>)
 80024da:	7bdb      	ldrb	r3, [r3, #15]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b61      	ldr	r3, [pc, #388]	; (8002664 <StartDefaultTask+0x314>)
 80024e0:	f8d3 3432 	ldr.w	r3, [r3, #1074]	; 0x432
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d12a      	bne.n	800253e <StartDefaultTask+0x1ee>
					hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_ENTER_CFG,NULL);
 80024e8:	2200      	movs	r2, #0
 80024ea:	2100      	movs	r1, #0
 80024ec:	485b      	ldr	r0, [pc, #364]	; (800265c <StartDefaultTask+0x30c>)
 80024ee:	f7fe ff0b 	bl	8001308 <hydroc_send_cmd>
					osDelay(1000);
 80024f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024f6:	f00a f8c8 	bl	800c68a <osDelay>
					hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_SET_ZERO_MODE,NULL);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2106      	movs	r1, #6
 80024fe:	4857      	ldr	r0, [pc, #348]	; (800265c <StartDefaultTask+0x30c>)
 8002500:	f7fe ff02 	bl	8001308 <hydroc_send_cmd>
					osDelay(1000);
 8002504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002508:	f00a f8bf 	bl	800c68a <osDelay>
				    if(glider1.stop_trigger==SEAGLIDER_STOP_WAIT){
 800250c:	4b55      	ldr	r3, [pc, #340]	; (8002664 <StartDefaultTask+0x314>)
 800250e:	7c5b      	ldrb	r3, [r3, #17]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d108      	bne.n	8002526 <StartDefaultTask+0x1d6>
					  hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_DISABLE_PUMP,NULL);
 8002514:	2200      	movs	r2, #0
 8002516:	2104      	movs	r1, #4
 8002518:	4850      	ldr	r0, [pc, #320]	; (800265c <StartDefaultTask+0x30c>)
 800251a:	f7fe fef5 	bl	8001308 <hydroc_send_cmd>
					  osDelay(1000);
 800251e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002522:	f00a f8b2 	bl	800c68a <osDelay>
				    }
					hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_EXIT_CFG,NULL);
 8002526:	2200      	movs	r2, #0
 8002528:	2101      	movs	r1, #1
 800252a:	484c      	ldr	r0, [pc, #304]	; (800265c <StartDefaultTask+0x30c>)
 800252c:	f7fe feec 	bl	8001308 <hydroc_send_cmd>
					osDelay(1000);
 8002530:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002534:	f00a f8a9 	bl	800c68a <osDelay>
					glider1.stop_trigger=SEAGLIDER_STOP_TRIGGERED;
 8002538:	4b4a      	ldr	r3, [pc, #296]	; (8002664 <StartDefaultTask+0x314>)
 800253a:	2200      	movs	r2, #0
 800253c:	745a      	strb	r2, [r3, #17]
				  }

				  f_close(&data_file);
 800253e:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8002542:	4618      	mov	r0, r3
 8002544:	f009 fddd 	bl	800c102 <f_close>
				  run_cfg.sensor_errors.P_in=hydroc_sensor1.errors.P_in;
 8002548:	4b44      	ldr	r3, [pc, #272]	; (800265c <StartDefaultTask+0x30c>)
 800254a:	f8d3 356d 	ldr.w	r3, [r3, #1389]	; 0x56d
 800254e:	4a41      	ldr	r2, [pc, #260]	; (8002654 <StartDefaultTask+0x304>)
 8002550:	6093      	str	r3, [r2, #8]
				  run_cfg.sensor_errors.rH_gas=hydroc_sensor1.errors.rH_gas;
 8002552:	4b42      	ldr	r3, [pc, #264]	; (800265c <StartDefaultTask+0x30c>)
 8002554:	f8d3 3571 	ldr.w	r3, [r3, #1393]	; 0x571
 8002558:	4a3e      	ldr	r2, [pc, #248]	; (8002654 <StartDefaultTask+0x304>)
 800255a:	60d3      	str	r3, [r2, #12]
				  run_cfg.sensor_errors.T_control=hydroc_sensor1.errors.T_control;
 800255c:	4b3f      	ldr	r3, [pc, #252]	; (800265c <StartDefaultTask+0x30c>)
 800255e:	f8d3 3575 	ldr.w	r3, [r3, #1397]	; 0x575
 8002562:	4a3c      	ldr	r2, [pc, #240]	; (8002654 <StartDefaultTask+0x304>)
 8002564:	6113      	str	r3, [r2, #16]
				  run_cfg.sensor_errors.P_pump=hydroc_sensor1.errors.P_pump;
 8002566:	4b3d      	ldr	r3, [pc, #244]	; (800265c <StartDefaultTask+0x30c>)
 8002568:	f8d3 3579 	ldr.w	r3, [r3, #1401]	; 0x579
 800256c:	4a39      	ldr	r2, [pc, #228]	; (8002654 <StartDefaultTask+0x304>)
 800256e:	6153      	str	r3, [r2, #20]
				  //f_close(&err_file);
				  save_settings();
 8002570:	f001 fa50 	bl	8003a14 <save_settings>

				  //hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_TEST,NULL);
				  hydroc_sensor1.status=HYDROC_IDLE;
 8002574:	4b39      	ldr	r3, [pc, #228]	; (800265c <StartDefaultTask+0x30c>)
 8002576:	2203      	movs	r2, #3
 8002578:	735a      	strb	r2, [r3, #13]
				  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	4839      	ldr	r0, [pc, #228]	; (8002664 <StartDefaultTask+0x314>)
 8002580:	f000 ff4c 	bl	800341c <seaglider_send_cmd>
			 break;
 8002584:	e19e      	b.n	80028c4 <StartDefaultTask+0x574>
			 case SEAGLIDER_EVNT_START_RCVD:
				  hydroc_sensor1.data_profile_id=glider1.param_z;
 8002586:	4b37      	ldr	r3, [pc, #220]	; (8002664 <StartDefaultTask+0x314>)
 8002588:	f8d3 3436 	ldr.w	r3, [r3, #1078]	; 0x436
 800258c:	4a33      	ldr	r2, [pc, #204]	; (800265c <StartDefaultTask+0x30c>)
 800258e:	f8c2 357d 	str.w	r3, [r2, #1405]	; 0x57d

				  if(glider1.dive_status==SEAGLIDER_STATUS_DIVE){
 8002592:	4b34      	ldr	r3, [pc, #208]	; (8002664 <StartDefaultTask+0x314>)
 8002594:	7bdb      	ldrb	r3, [r3, #15]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d16c      	bne.n	8002674 <StartDefaultTask+0x324>
					  run_cfg.last_file_index++;
 800259a:	4b2e      	ldr	r3, [pc, #184]	; (8002654 <StartDefaultTask+0x304>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	3301      	adds	r3, #1
 80025a0:	4a2c      	ldr	r2, [pc, #176]	; (8002654 <StartDefaultTask+0x304>)
 80025a2:	6053      	str	r3, [r2, #4]
					  sprintf(tmp_filename,"%u:%s%u%s",run_cfg.disk_id,DATA_FILE_PREFIX,run_cfg.last_file_index,DATA_FILE_EXTENSION);
 80025a4:	4b2b      	ldr	r3, [pc, #172]	; (8002654 <StartDefaultTask+0x304>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <StartDefaultTask+0x304>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f507 7002 	add.w	r0, r7, #520	; 0x208
 80025b0:	492d      	ldr	r1, [pc, #180]	; (8002668 <StartDefaultTask+0x318>)
 80025b2:	9101      	str	r1, [sp, #4]
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	4b2d      	ldr	r3, [pc, #180]	; (800266c <StartDefaultTask+0x31c>)
 80025b8:	492d      	ldr	r1, [pc, #180]	; (8002670 <StartDefaultTask+0x320>)
 80025ba:	f00d fb3f 	bl	800fc3c <siprintf>
					  f_open(&data_file,tmp_filename,FA_CREATE_ALWAYS|FA_WRITE);
 80025be:	f507 7102 	add.w	r1, r7, #520	; 0x208
 80025c2:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80025c6:	220a      	movs	r2, #10
 80025c8:	4618      	mov	r0, r3
 80025ca:	f008 fe8d 	bl	800b2e8 <f_open>
					  //sprintf(tmp_filename,"%u:%s%u%s",run_cfg.disk_id,ERR_FILE_PREFIX,run_cfg.last_file_index,ERR_FILE_EXTENSION);
					  //f_open(&err_file,tmp_filename,FA_CREATE_ALWAYS|FA_WRITE);

					  hydroc_sensor1.errors.P_in=0;
 80025ce:	4b23      	ldr	r3, [pc, #140]	; (800265c <StartDefaultTask+0x30c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 256d 	strb.w	r2, [r3, #1389]	; 0x56d
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 256e 	strb.w	r2, [r3, #1390]	; 0x56e
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 256f 	strb.w	r2, [r3, #1391]	; 0x56f
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2570 	strb.w	r2, [r3, #1392]	; 0x570
					  hydroc_sensor1.errors.rH_gas=0;
 80025e8:	4b1c      	ldr	r3, [pc, #112]	; (800265c <StartDefaultTask+0x30c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2571 	strb.w	r2, [r3, #1393]	; 0x571
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2572 	strb.w	r2, [r3, #1394]	; 0x572
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2573 	strb.w	r2, [r3, #1395]	; 0x573
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2574 	strb.w	r2, [r3, #1396]	; 0x574
					  hydroc_sensor1.errors.T_control=0;
 8002602:	4b16      	ldr	r3, [pc, #88]	; (800265c <StartDefaultTask+0x30c>)
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2575 	strb.w	r2, [r3, #1397]	; 0x575
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2576 	strb.w	r2, [r3, #1398]	; 0x576
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2577 	strb.w	r2, [r3, #1399]	; 0x577
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
					  hydroc_sensor1.errors.P_pump=0;
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <StartDefaultTask+0x30c>)
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
 8002624:	2200      	movs	r2, #0
 8002626:	f883 257a 	strb.w	r2, [r3, #1402]	; 0x57a
 800262a:	2200      	movs	r2, #0
 800262c:	f883 257b 	strb.w	r2, [r3, #1403]	; 0x57b
 8002630:	2200      	movs	r2, #0
 8002632:	f883 257c 	strb.w	r2, [r3, #1404]	; 0x57c
 8002636:	e036      	b.n	80026a6 <StartDefaultTask+0x356>
 8002638:	08012de8 	.word	0x08012de8
 800263c:	20000aec 	.word	0x20000aec
 8002640:	08012dfc 	.word	0x08012dfc
 8002644:	20000b30 	.word	0x20000b30
 8002648:	40010800 	.word	0x40010800
 800264c:	2000184c 	.word	0x2000184c
 8002650:	08012e10 	.word	0x08012e10
 8002654:	20001d30 	.word	0x20001d30
 8002658:	08012e20 	.word	0x08012e20
 800265c:	200012c8 	.word	0x200012c8
 8002660:	20001aa4 	.word	0x20001aa4
 8002664:	20000e8c 	.word	0x20000e8c
 8002668:	08012e48 	.word	0x08012e48
 800266c:	08012e30 	.word	0x08012e30
 8002670:	08012e3c 	.word	0x08012e3c
				  }
				  else if(glider1.dive_status==SEAGLIDER_STATUS_CLIMB){
 8002674:	4bb3      	ldr	r3, [pc, #716]	; (8002944 <StartDefaultTask+0x5f4>)
 8002676:	7bdb      	ldrb	r3, [r3, #15]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d114      	bne.n	80026a6 <StartDefaultTask+0x356>

					  sprintf(tmp_filename,"%u:%s%u%s",run_cfg.disk_id,DATA_FILE_PREFIX,run_cfg.last_file_index,DATA_FILE_EXTENSION);
 800267c:	4bb2      	ldr	r3, [pc, #712]	; (8002948 <StartDefaultTask+0x5f8>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4bb1      	ldr	r3, [pc, #708]	; (8002948 <StartDefaultTask+0x5f8>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f507 7002 	add.w	r0, r7, #520	; 0x208
 8002688:	49b0      	ldr	r1, [pc, #704]	; (800294c <StartDefaultTask+0x5fc>)
 800268a:	9101      	str	r1, [sp, #4]
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	4bb0      	ldr	r3, [pc, #704]	; (8002950 <StartDefaultTask+0x600>)
 8002690:	49b0      	ldr	r1, [pc, #704]	; (8002954 <StartDefaultTask+0x604>)
 8002692:	f00d fad3 	bl	800fc3c <siprintf>
					  f_open(&data_file,tmp_filename,FA_OPEN_APPEND|FA_WRITE);
 8002696:	f507 7102 	add.w	r1, r7, #520	; 0x208
 800269a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800269e:	2232      	movs	r2, #50	; 0x32
 80026a0:	4618      	mov	r0, r3
 80026a2:	f008 fe21 	bl	800b2e8 <f_open>
					  //sprintf(tmp_filename,"%u:%s%u%s",run_cfg.disk_id,ERR_FILE_PREFIX,run_cfg.last_file_index,ERR_FILE_EXTENSION);
					  //f_open(&err_file,tmp_filename,FA_OPEN_APPEND|FA_WRITE);
				  }

				  hydroc_sensor1.status=HYDROC_WAIT_DATA;
 80026a6:	4bac      	ldr	r3, [pc, #688]	; (8002958 <StartDefaultTask+0x608>)
 80026a8:	2202      	movs	r2, #2
 80026aa:	735a      	strb	r2, [r3, #13]

				  if(glider1.start_trigger==SEAGLIDER_START_WAIT){
 80026ac:	4ba5      	ldr	r3, [pc, #660]	; (8002944 <StartDefaultTask+0x5f4>)
 80026ae:	7c1b      	ldrb	r3, [r3, #16]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d119      	bne.n	80026e8 <StartDefaultTask+0x398>
					hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_ENTER_CFG,NULL);
 80026b4:	2200      	movs	r2, #0
 80026b6:	2100      	movs	r1, #0
 80026b8:	48a7      	ldr	r0, [pc, #668]	; (8002958 <StartDefaultTask+0x608>)
 80026ba:	f7fe fe25 	bl	8001308 <hydroc_send_cmd>
					osDelay(1000);
 80026be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026c2:	f009 ffe2 	bl	800c68a <osDelay>
					hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_ENABLE_PUMP,NULL);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2103      	movs	r1, #3
 80026ca:	48a3      	ldr	r0, [pc, #652]	; (8002958 <StartDefaultTask+0x608>)
 80026cc:	f7fe fe1c 	bl	8001308 <hydroc_send_cmd>
					osDelay(1000);
 80026d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026d4:	f009 ffd9 	bl	800c68a <osDelay>
					hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_EXIT_CFG,NULL);
 80026d8:	2200      	movs	r2, #0
 80026da:	2101      	movs	r1, #1
 80026dc:	489e      	ldr	r0, [pc, #632]	; (8002958 <StartDefaultTask+0x608>)
 80026de:	f7fe fe13 	bl	8001308 <hydroc_send_cmd>
					glider1.start_trigger=SEAGLIDER_START_TRIGGERED;
 80026e2:	4b98      	ldr	r3, [pc, #608]	; (8002944 <StartDefaultTask+0x5f4>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	741a      	strb	r2, [r3, #16]
				  }
				  //hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_TEST,NULL);
				  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 80026e8:	2200      	movs	r2, #0
 80026ea:	2100      	movs	r1, #0
 80026ec:	4895      	ldr	r0, [pc, #596]	; (8002944 <StartDefaultTask+0x5f4>)
 80026ee:	f000 fe95 	bl	800341c <seaglider_send_cmd>
			 break;
 80026f2:	e0e7      	b.n	80028c4 <StartDefaultTask+0x574>
			 case SEAGLIDER_EVNT_CLOCK_RCVD:
				  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 80026f4:	2200      	movs	r2, #0
 80026f6:	2100      	movs	r1, #0
 80026f8:	4892      	ldr	r0, [pc, #584]	; (8002944 <StartDefaultTask+0x5f4>)
 80026fa:	f000 fe8f 	bl	800341c <seaglider_send_cmd>
                  if(clock_sync_status==CLK_UNSYNC){
 80026fe:	4b97      	ldr	r3, [pc, #604]	; (800295c <StartDefaultTask+0x60c>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 80dd 	bne.w	80028c2 <StartDefaultTask+0x572>
					  xSemaphoreTake(sensor_uart_semHandle,portMAX_DELAY);
 8002708:	4b95      	ldr	r3, [pc, #596]	; (8002960 <StartDefaultTask+0x610>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	4618      	mov	r0, r3
 8002712:	f00a fd73 	bl	800d1fc <xQueueSemaphoreTake>
					  clock_sync_status=CLK_SYNCED;
 8002716:	4b91      	ldr	r3, [pc, #580]	; (800295c <StartDefaultTask+0x60c>)
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
					  hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_ENTER_CFG,tmp_str);
 800271c:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8002720:	461a      	mov	r2, r3
 8002722:	2100      	movs	r1, #0
 8002724:	488c      	ldr	r0, [pc, #560]	; (8002958 <StartDefaultTask+0x608>)
 8002726:	f7fe fdef 	bl	8001308 <hydroc_send_cmd>
					  osDelay(1000);
 800272a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800272e:	f009 ffac 	bl	800c68a <osDelay>
					  memcpy(tmp_str,glider1.date,8);
 8002732:	4a84      	ldr	r2, [pc, #528]	; (8002944 <StartDefaultTask+0x5f4>)
 8002734:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8002738:	321a      	adds	r2, #26
 800273a:	6810      	ldr	r0, [r2, #0]
 800273c:	6851      	ldr	r1, [r2, #4]
 800273e:	c303      	stmia	r3!, {r0, r1}
					  memcpy(tmp_str+8,",0,",3);
 8002740:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8002744:	3308      	adds	r3, #8
 8002746:	2203      	movs	r2, #3
 8002748:	4986      	ldr	r1, [pc, #536]	; (8002964 <StartDefaultTask+0x614>)
 800274a:	4618      	mov	r0, r3
 800274c:	f00d f951 	bl	800f9f2 <memcpy>
					  memcpy(tmp_str+11,glider1.time,8);
 8002750:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8002754:	330b      	adds	r3, #11
 8002756:	497b      	ldr	r1, [pc, #492]	; (8002944 <StartDefaultTask+0x5f4>)
 8002758:	461a      	mov	r2, r3
 800275a:	f101 0322 	add.w	r3, r1, #34	; 0x22
 800275e:	6819      	ldr	r1, [r3, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	6011      	str	r1, [r2, #0]
 8002764:	6053      	str	r3, [r2, #4]
					  memcpy(tmp_str+19,",0",2);
 8002766:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800276a:	3313      	adds	r3, #19
 800276c:	2202      	movs	r2, #2
 800276e:	497e      	ldr	r1, [pc, #504]	; (8002968 <StartDefaultTask+0x618>)
 8002770:	4618      	mov	r0, r3
 8002772:	f00d f93e 	bl	800f9f2 <memcpy>
					  tmp_str[21]=0x00;
 8002776:	2300      	movs	r3, #0
 8002778:	f887 3795 	strb.w	r3, [r7, #1941]	; 0x795
					  hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_SET_REAL_TIME,tmp_str);
 800277c:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8002780:	461a      	mov	r2, r3
 8002782:	2102      	movs	r1, #2
 8002784:	4874      	ldr	r0, [pc, #464]	; (8002958 <StartDefaultTask+0x608>)
 8002786:	f7fe fdbf 	bl	8001308 <hydroc_send_cmd>
					  osDelay(1000);
 800278a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800278e:	f009 ff7c 	bl	800c68a <osDelay>
					  hydroc_send_cmd(&hydroc_sensor1,HYDROC_CMD_EXIT_CFG,tmp_str);
 8002792:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8002796:	461a      	mov	r2, r3
 8002798:	2101      	movs	r1, #1
 800279a:	486f      	ldr	r0, [pc, #444]	; (8002958 <StartDefaultTask+0x608>)
 800279c:	f7fe fdb4 	bl	8001308 <hydroc_send_cmd>
					  xSemaphoreGive(sensor_uart_semHandle);
 80027a0:	4b6f      	ldr	r3, [pc, #444]	; (8002960 <StartDefaultTask+0x610>)
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	2300      	movs	r3, #0
 80027a6:	2200      	movs	r2, #0
 80027a8:	2100      	movs	r1, #0
 80027aa:	f00a fab1 	bl	800cd10 <xQueueGenericSend>
                  }

			 break;
 80027ae:	e088      	b.n	80028c2 <StartDefaultTask+0x572>
			 case SEAGLIDER_EVNT_WAKEUP_RCVD:
				  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 80027b0:	2200      	movs	r2, #0
 80027b2:	2100      	movs	r1, #0
 80027b4:	4863      	ldr	r0, [pc, #396]	; (8002944 <StartDefaultTask+0x5f4>)
 80027b6:	f000 fe31 	bl	800341c <seaglider_send_cmd>
			 break;
 80027ba:	e083      	b.n	80028c4 <StartDefaultTask+0x574>

			 case SEAGLIDER_EVNT_TEST_RCVD:
				  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 80027bc:	2200      	movs	r2, #0
 80027be:	2100      	movs	r1, #0
 80027c0:	4860      	ldr	r0, [pc, #384]	; (8002944 <StartDefaultTask+0x5f4>)
 80027c2:	f000 fe2b 	bl	800341c <seaglider_send_cmd>
			 break;
 80027c6:	e07d      	b.n	80028c4 <StartDefaultTask+0x574>
			 case SEAGLIDER_EVNT_SEND_TXT_FILE_RCVD:
				  sprintf(tmp_filename,"%s%u%s",DATA_FILE_PREFIX,run_cfg.last_file_index,DATA_FILE_EXTENSION);
 80027c8:	4b5f      	ldr	r3, [pc, #380]	; (8002948 <StartDefaultTask+0x5f8>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f507 7002 	add.w	r0, r7, #520	; 0x208
 80027d0:	4a5e      	ldr	r2, [pc, #376]	; (800294c <StartDefaultTask+0x5fc>)
 80027d2:	9200      	str	r2, [sp, #0]
 80027d4:	4a5e      	ldr	r2, [pc, #376]	; (8002950 <StartDefaultTask+0x600>)
 80027d6:	4965      	ldr	r1, [pc, #404]	; (800296c <StartDefaultTask+0x61c>)
 80027d8:	f00d fa30 	bl	800fc3c <siprintf>
				  if(f_open(&data_file,tmp_filename,FA_READ)==FR_OK){
 80027dc:	f507 7102 	add.w	r1, r7, #520	; 0x208
 80027e0:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80027e4:	2201      	movs	r2, #1
 80027e6:	4618      	mov	r0, r3
 80027e8:	f008 fd7e 	bl	800b2e8 <f_open>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d131      	bne.n	8002856 <StartDefaultTask+0x506>
					ptr1.start_addr=tmp_filename;
 80027f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027f6:	f8c7 3778 	str.w	r3, [r7, #1912]	; 0x778
					ptr1.size=strlen(tmp_filename);
 80027fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd fd16 	bl	8000230 <strlen>
 8002804:	4603      	mov	r3, r0
 8002806:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
					seaglider_send_cmd(&glider1,SEAGLIDER_CMD_SEND_DATA,&ptr1);
 800280a:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800280e:	461a      	mov	r2, r3
 8002810:	2101      	movs	r1, #1
 8002812:	484c      	ldr	r0, [pc, #304]	; (8002944 <StartDefaultTask+0x5f4>)
 8002814:	f000 fe02 	bl	800341c <seaglider_send_cmd>
					do{
					   if(f_read(&data_file,tx_buff,50,&bytesreaded)==FR_OK){
 8002818:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800281c:	f507 61dc 	add.w	r1, r7, #1760	; 0x6e0
 8002820:	f507 6090 	add.w	r0, r7, #1152	; 0x480
 8002824:	2232      	movs	r2, #50	; 0x32
 8002826:	f009 f820 	bl	800b86a <f_read>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10e      	bne.n	800284e <StartDefaultTask+0x4fe>
					    ptr1.start_addr=tx_buff;
 8002830:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8002834:	f8c7 3778 	str.w	r3, [r7, #1912]	; 0x778
					    ptr1.size=bytesreaded;
 8002838:	f8d7 36d8 	ldr.w	r3, [r7, #1752]	; 0x6d8
 800283c:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
					    seaglider_send_cmd(&glider1,SEAGLIDER_CMD_SEND_DATA,&ptr1);
 8002840:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 8002844:	461a      	mov	r2, r3
 8002846:	2101      	movs	r1, #1
 8002848:	483e      	ldr	r0, [pc, #248]	; (8002944 <StartDefaultTask+0x5f4>)
 800284a:	f000 fde7 	bl	800341c <seaglider_send_cmd>
					   }
					}while(bytesreaded==50);
 800284e:	f8d7 36d8 	ldr.w	r3, [r7, #1752]	; 0x6d8
 8002852:	2b32      	cmp	r3, #50	; 0x32
 8002854:	d0e0      	beq.n	8002818 <StartDefaultTask+0x4c8>
					    seaglider_send_cmd(&glider1,SEAGLIDER_CMD_SEND_DATA,&ptr1);
					   }
					}while(bytesreaded==TX_BUFF_SIZE);
				  }
				  */
				  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	483a      	ldr	r0, [pc, #232]	; (8002944 <StartDefaultTask+0x5f4>)
 800285c:	f000 fdde 	bl	800341c <seaglider_send_cmd>
			 break;
 8002860:	e030      	b.n	80028c4 <StartDefaultTask+0x574>
			 case SEAGLIDER_EVNT_ERRORS_RCVD:
				  sprintf(tx_buff,"P_in:%u,rH_gas:%u,T_control:%u,P_pump:%u\r",
 8002862:	4b3d      	ldr	r3, [pc, #244]	; (8002958 <StartDefaultTask+0x608>)
 8002864:	f8d3 156d 	ldr.w	r1, [r3, #1389]	; 0x56d
 8002868:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <StartDefaultTask+0x608>)
 800286a:	f8d3 4571 	ldr.w	r4, [r3, #1393]	; 0x571
 800286e:	4b3a      	ldr	r3, [pc, #232]	; (8002958 <StartDefaultTask+0x608>)
 8002870:	f8d3 3575 	ldr.w	r3, [r3, #1397]	; 0x575
 8002874:	4a38      	ldr	r2, [pc, #224]	; (8002958 <StartDefaultTask+0x608>)
 8002876:	f8d2 2579 	ldr.w	r2, [r2, #1401]	; 0x579
 800287a:	f507 60dc 	add.w	r0, r7, #1760	; 0x6e0
 800287e:	9201      	str	r2, [sp, #4]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	4623      	mov	r3, r4
 8002884:	460a      	mov	r2, r1
 8002886:	493a      	ldr	r1, [pc, #232]	; (8002970 <StartDefaultTask+0x620>)
 8002888:	f00d f9d8 	bl	800fc3c <siprintf>
						   hydroc_sensor1.errors.P_in,
						   hydroc_sensor1.errors.rH_gas,
						   hydroc_sensor1.errors.T_control,
						   hydroc_sensor1.errors.P_pump
						   );
  			      ptr1.start_addr=tx_buff;
 800288c:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8002890:	f8c7 3778 	str.w	r3, [r7, #1912]	; 0x778
				  ptr1.size=strlen(tx_buff);
 8002894:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8002898:	4618      	mov	r0, r3
 800289a:	f7fd fcc9 	bl	8000230 <strlen>
 800289e:	4603      	mov	r3, r0
 80028a0:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
				  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_SEND_DATA,&ptr1);
 80028a4:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 80028a8:	461a      	mov	r2, r3
 80028aa:	2101      	movs	r1, #1
 80028ac:	4825      	ldr	r0, [pc, #148]	; (8002944 <StartDefaultTask+0x5f4>)
 80028ae:	f000 fdb5 	bl	800341c <seaglider_send_cmd>
				  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	4823      	ldr	r0, [pc, #140]	; (8002944 <StartDefaultTask+0x5f4>)
 80028b8:	f000 fdb0 	bl	800341c <seaglider_send_cmd>
			 break;
 80028bc:	e002      	b.n	80028c4 <StartDefaultTask+0x574>

			}
		 }
 80028be:	bf00      	nop
 80028c0:	e000      	b.n	80028c4 <StartDefaultTask+0x574>
			 break;
 80028c2:	bf00      	nop

		 //sensor tasks

		 if(hydroc_get_event(&hydroc_sensor1,&event_id)==HYDROC_F_OK)
 80028c4:	f207 739f 	addw	r3, r7, #1951	; 0x79f
 80028c8:	4619      	mov	r1, r3
 80028ca:	4823      	ldr	r0, [pc, #140]	; (8002958 <StartDefaultTask+0x608>)
 80028cc:	f7fe feec 	bl	80016a8 <hydroc_get_event>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 811c 	bne.w	8002b10 <StartDefaultTask+0x7c0>
		 {
	        switch(event_id)
 80028d8:	f897 379f 	ldrb.w	r3, [r7, #1951]	; 0x79f
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d003      	beq.n	80028e8 <StartDefaultTask+0x598>
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	f000 80a7 	beq.w	8002a34 <StartDefaultTask+0x6e4>
 80028e6:	e118      	b.n	8002b1a <StartDefaultTask+0x7ca>
	        {
	         case HYDROC_EVNT_CODS4:
	             log_msg[0]=0x00;
 80028e8:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 80028ec:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
	             switch(hydroc_sensor1.data_profile_id){
 80028f4:	4b18      	ldr	r3, [pc, #96]	; (8002958 <StartDefaultTask+0x608>)
 80028f6:	f8d3 357d 	ldr.w	r3, [r3, #1405]	; 0x57d
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d85e      	bhi.n	80029bc <StartDefaultTask+0x66c>
 80028fe:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <StartDefaultTask+0x5b4>)
 8002900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002904:	080029bd 	.word	0x080029bd
 8002908:	08002915 	.word	0x08002915
 800290c:	08002929 	.word	0x08002929
 8002910:	08002991 	.word	0x08002991
	              case HYDROC_PROFILE_0:

                  break;
	              case HYDROC_PROFILE_1:
                   sprintf(log_msg,"DS4:%s,%s,%s\r"
 8002914:	f107 0008 	add.w	r0, r7, #8
 8002918:	4b16      	ldr	r3, [pc, #88]	; (8002974 <StartDefaultTask+0x624>)
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	4b16      	ldr	r3, [pc, #88]	; (8002978 <StartDefaultTask+0x628>)
 800291e:	4a17      	ldr	r2, [pc, #92]	; (800297c <StartDefaultTask+0x62c>)
 8002920:	4917      	ldr	r1, [pc, #92]	; (8002980 <StartDefaultTask+0x630>)
 8002922:	f00d f98b 	bl	800fc3c <siprintf>
						 ,hydroc_sensor1.ds4.pCO2_corr
						 ,hydroc_sensor1.ds4.P_IN
						 ,hydroc_sensor1.ds4.runtime);
                  break;
 8002926:	e049      	b.n	80029bc <StartDefaultTask+0x66c>
	              case HYDROC_PROFILE_2:
                   sprintf(log_msg,"DS4:%s,%s,%s,%s,%s\r"
 8002928:	f107 0008 	add.w	r0, r7, #8
 800292c:	4b15      	ldr	r3, [pc, #84]	; (8002984 <StartDefaultTask+0x634>)
 800292e:	9302      	str	r3, [sp, #8]
 8002930:	4b15      	ldr	r3, [pc, #84]	; (8002988 <StartDefaultTask+0x638>)
 8002932:	9301      	str	r3, [sp, #4]
 8002934:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <StartDefaultTask+0x624>)
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	4b0f      	ldr	r3, [pc, #60]	; (8002978 <StartDefaultTask+0x628>)
 800293a:	4a10      	ldr	r2, [pc, #64]	; (800297c <StartDefaultTask+0x62c>)
 800293c:	4913      	ldr	r1, [pc, #76]	; (800298c <StartDefaultTask+0x63c>)
 800293e:	f00d f97d 	bl	800fc3c <siprintf>
						 ,hydroc_sensor1.ds4.pCO2_corr
						 ,hydroc_sensor1.ds4.P_IN
						 ,hydroc_sensor1.ds4.runtime
						 ,hydroc_sensor1.ds4.signal_raw
						 ,hydroc_sensor1.ds4.signal_ref);
                  break;
 8002942:	e03b      	b.n	80029bc <StartDefaultTask+0x66c>
 8002944:	20000e8c 	.word	0x20000e8c
 8002948:	20001d30 	.word	0x20001d30
 800294c:	08012e48 	.word	0x08012e48
 8002950:	08012e30 	.word	0x08012e30
 8002954:	08012e3c 	.word	0x08012e3c
 8002958:	200012c8 	.word	0x200012c8
 800295c:	20001aa5 	.word	0x20001aa5
 8002960:	20000e88 	.word	0x20000e88
 8002964:	08012e50 	.word	0x08012e50
 8002968:	08012e54 	.word	0x08012e54
 800296c:	08012e58 	.word	0x08012e58
 8002970:	08012e60 	.word	0x08012e60
 8002974:	20001763 	.word	0x20001763
 8002978:	20001727 	.word	0x20001727
 800297c:	200017bd 	.word	0x200017bd
 8002980:	08012e8c 	.word	0x08012e8c
 8002984:	20001781 	.word	0x20001781
 8002988:	20001772 	.word	0x20001772
 800298c:	08012e9c 	.word	0x08012e9c
	              case HYDROC_PROFILE_3:
                   sprintf(log_msg,"DS4:%s,%s,%s,%s,%s,%s,%s,%s,%s\r"
 8002990:	f107 0008 	add.w	r0, r7, #8
 8002994:	4b63      	ldr	r3, [pc, #396]	; (8002b24 <StartDefaultTask+0x7d4>)
 8002996:	9306      	str	r3, [sp, #24]
 8002998:	4b63      	ldr	r3, [pc, #396]	; (8002b28 <StartDefaultTask+0x7d8>)
 800299a:	9305      	str	r3, [sp, #20]
 800299c:	4b63      	ldr	r3, [pc, #396]	; (8002b2c <StartDefaultTask+0x7dc>)
 800299e:	9304      	str	r3, [sp, #16]
 80029a0:	4b63      	ldr	r3, [pc, #396]	; (8002b30 <StartDefaultTask+0x7e0>)
 80029a2:	9303      	str	r3, [sp, #12]
 80029a4:	4b63      	ldr	r3, [pc, #396]	; (8002b34 <StartDefaultTask+0x7e4>)
 80029a6:	9302      	str	r3, [sp, #8]
 80029a8:	4b63      	ldr	r3, [pc, #396]	; (8002b38 <StartDefaultTask+0x7e8>)
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	4b63      	ldr	r3, [pc, #396]	; (8002b3c <StartDefaultTask+0x7ec>)
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	4b63      	ldr	r3, [pc, #396]	; (8002b40 <StartDefaultTask+0x7f0>)
 80029b2:	4a64      	ldr	r2, [pc, #400]	; (8002b44 <StartDefaultTask+0x7f4>)
 80029b4:	4964      	ldr	r1, [pc, #400]	; (8002b48 <StartDefaultTask+0x7f8>)
 80029b6:	f00d f941 	bl	800fc3c <siprintf>
						 ,hydroc_sensor1.ds4.runtime
                		 ,hydroc_sensor1.ds4.date
                		 ,hydroc_sensor1.ds4.time
						 ,hydroc_sensor1.ds4.signal_raw
						 ,hydroc_sensor1.ds4.signal_ref);
                  break;
 80029ba:	bf00      	nop
	        	 };
	        	 f_write(&data_file,log_msg,strlen(log_msg),(UINT*)&byteswritten);
 80029bc:	f107 0308 	add.w	r3, r7, #8
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fc35 	bl	8000230 <strlen>
 80029c6:	4602      	mov	r2, r0
 80029c8:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 80029cc:	f107 0108 	add.w	r1, r7, #8
 80029d0:	f507 6090 	add.w	r0, r7, #1152	; 0x480
 80029d4:	f009 f8c3 	bl	800bb5e <f_write>

	        	 uint32_t P_IN=strtol(hydroc_sensor1.ds4.P_IN,NULL,10);
 80029d8:	220a      	movs	r2, #10
 80029da:	2100      	movs	r1, #0
 80029dc:	4859      	ldr	r0, [pc, #356]	; (8002b44 <StartDefaultTask+0x7f4>)
 80029de:	f00e f8f1 	bl	8010bc4 <strtol>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
	        	 uint32_t pump_pwr=strtol(hydroc_sensor1.ds4.pump_pwr,NULL,10);
 80029e8:	220a      	movs	r2, #10
 80029ea:	2100      	movs	r1, #0
 80029ec:	4857      	ldr	r0, [pc, #348]	; (8002b4c <StartDefaultTask+0x7fc>)
 80029ee:	f00e f8e9 	bl	8010bc4 <strtol>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f8c7 37a0 	str.w	r3, [r7, #1952]	; 0x7a0

	        	 if(P_IN>110000) hydroc_sensor1.errors.P_in++;
 80029f8:	f8d7 37a4 	ldr.w	r3, [r7, #1956]	; 0x7a4
 80029fc:	4a54      	ldr	r2, [pc, #336]	; (8002b50 <StartDefaultTask+0x800>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d906      	bls.n	8002a10 <StartDefaultTask+0x6c0>
 8002a02:	4b54      	ldr	r3, [pc, #336]	; (8002b54 <StartDefaultTask+0x804>)
 8002a04:	f8d3 356d 	ldr.w	r3, [r3, #1389]	; 0x56d
 8002a08:	3301      	adds	r3, #1
 8002a0a:	4a52      	ldr	r2, [pc, #328]	; (8002b54 <StartDefaultTask+0x804>)
 8002a0c:	f8c2 356d 	str.w	r3, [r2, #1389]	; 0x56d
	       		 if(pump_pwr>1600 || pump_pwr<300)hydroc_sensor1.errors.P_pump++;
 8002a10:	f8d7 37a0 	ldr.w	r3, [r7, #1952]	; 0x7a0
 8002a14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002a18:	d804      	bhi.n	8002a24 <StartDefaultTask+0x6d4>
 8002a1a:	f8d7 37a0 	ldr.w	r3, [r7, #1952]	; 0x7a0
 8002a1e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002a22:	d277      	bcs.n	8002b14 <StartDefaultTask+0x7c4>
 8002a24:	4b4b      	ldr	r3, [pc, #300]	; (8002b54 <StartDefaultTask+0x804>)
 8002a26:	f8d3 3579 	ldr.w	r3, [r3, #1401]	; 0x579
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	4a49      	ldr	r2, [pc, #292]	; (8002b54 <StartDefaultTask+0x804>)
 8002a2e:	f8c2 3579 	str.w	r3, [r2, #1401]	; 0x579
	        	  f_write(&err_file,log_msg,strlen(log_msg),&byteswritten);
	        	 }
	        	 */

	        	 //seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
	         break;
 8002a32:	e06f      	b.n	8002b14 <StartDefaultTask+0x7c4>
	         case HYDROC_EVNT_COTS1:
	        	 log_msg[0]=0x00;
 8002a34:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8002a38:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
	             switch(hydroc_sensor1.data_profile_id){
 8002a40:	4b44      	ldr	r3, [pc, #272]	; (8002b54 <StartDefaultTask+0x804>)
 8002a42:	f8d3 357d 	ldr.w	r3, [r3, #1405]	; 0x57d
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d824      	bhi.n	8002a94 <StartDefaultTask+0x744>
 8002a4a:	a201      	add	r2, pc, #4	; (adr r2, 8002a50 <StartDefaultTask+0x700>)
 8002a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a50:	08002a95 	.word	0x08002a95
 8002a54:	08002a61 	.word	0x08002a61
 8002a58:	08002a71 	.word	0x08002a71
 8002a5c:	08002a81 	.word	0x08002a81
	              case HYDROC_PROFILE_0:

                 break;
	              case HYDROC_PROFILE_1:
                  sprintf(log_msg,"TS1:%s,%s\r"
 8002a60:	f107 0008 	add.w	r0, r7, #8
 8002a64:	4b3c      	ldr	r3, [pc, #240]	; (8002b58 <StartDefaultTask+0x808>)
 8002a66:	4a3d      	ldr	r2, [pc, #244]	; (8002b5c <StartDefaultTask+0x80c>)
 8002a68:	493d      	ldr	r1, [pc, #244]	; (8002b60 <StartDefaultTask+0x810>)
 8002a6a:	f00d f8e7 	bl	800fc3c <siprintf>
					 ,hydroc_sensor1.ts1.T_gas
					 ,hydroc_sensor1.ts1.rH_gas
                      );
                 break;
 8002a6e:	e011      	b.n	8002a94 <StartDefaultTask+0x744>
	              case HYDROC_PROFILE_2:
                  sprintf(log_msg,"TS1:%s,%s\r"
 8002a70:	f107 0008 	add.w	r0, r7, #8
 8002a74:	4b38      	ldr	r3, [pc, #224]	; (8002b58 <StartDefaultTask+0x808>)
 8002a76:	4a39      	ldr	r2, [pc, #228]	; (8002b5c <StartDefaultTask+0x80c>)
 8002a78:	4939      	ldr	r1, [pc, #228]	; (8002b60 <StartDefaultTask+0x810>)
 8002a7a:	f00d f8df 	bl	800fc3c <siprintf>
					 ,hydroc_sensor1.ts1.T_gas
					 ,hydroc_sensor1.ts1.rH_gas
                      );
                 break;
 8002a7e:	e009      	b.n	8002a94 <StartDefaultTask+0x744>
	              case HYDROC_PROFILE_3:
                  sprintf(log_msg,"TS1:%s,%s,%s\r"
 8002a80:	f107 0008 	add.w	r0, r7, #8
 8002a84:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <StartDefaultTask+0x814>)
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	4b34      	ldr	r3, [pc, #208]	; (8002b5c <StartDefaultTask+0x80c>)
 8002a8a:	4a33      	ldr	r2, [pc, #204]	; (8002b58 <StartDefaultTask+0x808>)
 8002a8c:	4936      	ldr	r1, [pc, #216]	; (8002b68 <StartDefaultTask+0x818>)
 8002a8e:	f00d f8d5 	bl	800fc3c <siprintf>
					 ,hydroc_sensor1.ts1.rH_gas
					 ,hydroc_sensor1.ts1.T_gas
					 ,hydroc_sensor1.ts1.T_control
                     );
                 break;
 8002a92:	bf00      	nop
	             };
	        	 f_write(&data_file,log_msg,strlen(log_msg),(UINT*)&byteswritten);
 8002a94:	f107 0308 	add.w	r3, r7, #8
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fd fbc9 	bl	8000230 <strlen>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8002aa4:	f107 0108 	add.w	r1, r7, #8
 8002aa8:	f507 6090 	add.w	r0, r7, #1152	; 0x480
 8002aac:	f009 f857 	bl	800bb5e <f_write>

	        	 uint32_t rH_gas=strtol(hydroc_sensor1.ts1.rH_gas,NULL,10);
 8002ab0:	220a      	movs	r2, #10
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4828      	ldr	r0, [pc, #160]	; (8002b58 <StartDefaultTask+0x808>)
 8002ab6:	f00e f885 	bl	8010bc4 <strtol>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
	        	 uint32_t T_control=strtol(hydroc_sensor1.ts1.T_control,NULL,10);
 8002ac0:	220a      	movs	r2, #10
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4827      	ldr	r0, [pc, #156]	; (8002b64 <StartDefaultTask+0x814>)
 8002ac6:	f00e f87d 	bl	8010bc4 <strtol>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f8c7 37a8 	str.w	r3, [r7, #1960]	; 0x7a8

	        	 if(rH_gas>85000) hydroc_sensor1.errors.rH_gas++;
 8002ad0:	f8d7 37ac 	ldr.w	r3, [r7, #1964]	; 0x7ac
 8002ad4:	4a25      	ldr	r2, [pc, #148]	; (8002b6c <StartDefaultTask+0x81c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d906      	bls.n	8002ae8 <StartDefaultTask+0x798>
 8002ada:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <StartDefaultTask+0x804>)
 8002adc:	f8d3 3571 	ldr.w	r3, [r3, #1393]	; 0x571
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	4a1c      	ldr	r2, [pc, #112]	; (8002b54 <StartDefaultTask+0x804>)
 8002ae4:	f8c2 3571 	str.w	r3, [r2, #1393]	; 0x571
	       		 if(T_control>29000 || T_control<27000)hydroc_sensor1.errors.T_control++;
 8002ae8:	f8d7 37a8 	ldr.w	r3, [r7, #1960]	; 0x7a8
 8002aec:	f247 1248 	movw	r2, #29000	; 0x7148
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d805      	bhi.n	8002b00 <StartDefaultTask+0x7b0>
 8002af4:	f8d7 37a8 	ldr.w	r3, [r7, #1960]	; 0x7a8
 8002af8:	f646 1277 	movw	r2, #26999	; 0x6977
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d80b      	bhi.n	8002b18 <StartDefaultTask+0x7c8>
 8002b00:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <StartDefaultTask+0x804>)
 8002b02:	f8d3 3575 	ldr.w	r3, [r3, #1397]	; 0x575
 8002b06:	3301      	adds	r3, #1
 8002b08:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <StartDefaultTask+0x804>)
 8002b0a:	f8c2 3575 	str.w	r3, [r2, #1397]	; 0x575
	        	  f_write(&err_file,log_msg,strlen(log_msg),&byteswritten);
	        	 }
	        	 */

	        	 //seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
	         break;
 8002b0e:	e003      	b.n	8002b18 <StartDefaultTask+0x7c8>
	        }
		 }
 8002b10:	bf00      	nop
 8002b12:	e002      	b.n	8002b1a <StartDefaultTask+0x7ca>
	         break;
 8002b14:	bf00      	nop
 8002b16:	e000      	b.n	8002b1a <StartDefaultTask+0x7ca>
	         break;
 8002b18:	bf00      	nop

         osDelay(1);
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	f009 fdb5 	bl	800c68a <osDelay>
		 if(seaglider_get_event(&glider1,&event_id)==SEAGLIDER_F_OK)
 8002b20:	e474      	b.n	800240c <StartDefaultTask+0xbc>
 8002b22:	bf00      	nop
 8002b24:	20001781 	.word	0x20001781
 8002b28:	20001772 	.word	0x20001772
 8002b2c:	200016eb 	.word	0x200016eb
 8002b30:	200016dc 	.word	0x200016dc
 8002b34:	20001763 	.word	0x20001763
 8002b38:	200017cc 	.word	0x200017cc
 8002b3c:	20001790 	.word	0x20001790
 8002b40:	200017bd 	.word	0x200017bd
 8002b44:	20001727 	.word	0x20001727
 8002b48:	08012eb0 	.word	0x08012eb0
 8002b4c:	20001709 	.word	0x20001709
 8002b50:	0001adb0 	.word	0x0001adb0
 8002b54:	200012c8 	.word	0x200012c8
 8002b58:	20001826 	.word	0x20001826
 8002b5c:	20001817 	.word	0x20001817
 8002b60:	08012ed0 	.word	0x08012ed0
 8002b64:	20001808 	.word	0x20001808
 8002b68:	08012edc 	.word	0x08012edc
 8002b6c:	00014c08 	.word	0x00014c08

08002b70 <uart_tx_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_tx_f */
void uart_tx_f(void const * argument)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_tx_f */
  /* Infinite loop */
  uint8_t tmp1;
  uint8_t tmp2;
  glider1.media_status=SEAGLIDER_MEDIA_READY;
 8002b78:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <uart_tx_f+0x7c>)
 8002b7a:	220a      	movs	r2, #10
 8002b7c:	735a      	strb	r2, [r3, #13]
  hydroc_sensor1.media_status=HYDROC_MEDIA_READY;
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <uart_tx_f+0x80>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	73da      	strb	r2, [r3, #15]

  for(;;)
  {
   if(fsm_status==FSM_MAIN_ALG){
 8002b84:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <uart_tx_f+0x84>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d12b      	bne.n	8002be4 <uart_tx_f+0x74>
	   if(GLIDER_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8002b8c:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <uart_tx_f+0x88>)
 8002b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b21      	cmp	r3, #33	; 0x21
 8002b96:	d00f      	beq.n	8002bb8 <uart_tx_f+0x48>
	   {
		if(seaglider_media_get_byte(&glider1,&tmp1)==SEAGLIDER_F_OK)
 8002b98:	f107 030f 	add.w	r3, r7, #15
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4813      	ldr	r0, [pc, #76]	; (8002bec <uart_tx_f+0x7c>)
 8002ba0:	f000 fc21 	bl	80033e6 <seaglider_media_get_byte>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <uart_tx_f+0x48>
		{
		   HAL_UART_Transmit_IT(&GLIDER_UART,&tmp1,1);
 8002baa:	f107 030f 	add.w	r3, r7, #15
 8002bae:	2201      	movs	r2, #1
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4811      	ldr	r0, [pc, #68]	; (8002bf8 <uart_tx_f+0x88>)
 8002bb4:	f003 ff99 	bl	8006aea <HAL_UART_Transmit_IT>
		}
	   }
	   if(SENSOR_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8002bb8:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <uart_tx_f+0x8c>)
 8002bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b21      	cmp	r3, #33	; 0x21
 8002bc2:	d00f      	beq.n	8002be4 <uart_tx_f+0x74>
	   {

		if(hydroc_media_get_byte(&hydroc_sensor1,&tmp2)==HYDROC_F_OK)
 8002bc4:	f107 030e 	add.w	r3, r7, #14
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4809      	ldr	r0, [pc, #36]	; (8002bf0 <uart_tx_f+0x80>)
 8002bcc:	f7fe fb81 	bl	80012d2 <hydroc_media_get_byte>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <uart_tx_f+0x74>
		{
		   HAL_UART_Transmit_IT(&SENSOR_UART,&tmp2,1);
 8002bd6:	f107 030e 	add.w	r3, r7, #14
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4807      	ldr	r0, [pc, #28]	; (8002bfc <uart_tx_f+0x8c>)
 8002be0:	f003 ff83 	bl	8006aea <HAL_UART_Transmit_IT>
		}

	   }
   }
   osDelay(1);
 8002be4:	2001      	movs	r0, #1
 8002be6:	f009 fd50 	bl	800c68a <osDelay>
   if(fsm_status==FSM_MAIN_ALG){
 8002bea:	e7cb      	b.n	8002b84 <uart_tx_f+0x14>
 8002bec:	20000e8c 	.word	0x20000e8c
 8002bf0:	200012c8 	.word	0x200012c8
 8002bf4:	20001aa4 	.word	0x20001aa4
 8002bf8:	20000aec 	.word	0x20000aec
 8002bfc:	20000b30 	.word	0x20000b30

08002c00 <timer1_cb>:
  /* USER CODE END uart_tx_f */
}

/* timer1_cb function */
void timer1_cb(void const * argument)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN timer1_cb */
  /* USER CODE END timer1_cb */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr
	...

08002c14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a04      	ldr	r2, [pc, #16]	; (8002c34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d101      	bne.n	8002c2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c26:	f001 fab3 	bl	8004190 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40012c00 	.word	0x40012c00

08002c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c3c:	b672      	cpsid	i
}
 8002c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c40:	e7fe      	b.n	8002c40 <Error_Handler+0x8>
	...

08002c44 <usMBCRC16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
    0x41, 0x81, 0x80, 0x40
};

int16_t usMBCRC16( uint8_t * pucFrame, uint32_t usLen )
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
    int8_t           ucCRCHi = 0xFF;
 8002c4e:	23ff      	movs	r3, #255	; 0xff
 8002c50:	73fb      	strb	r3, [r7, #15]
    int8_t           ucCRCLo = 0xFF;
 8002c52:	23ff      	movs	r3, #255	; 0xff
 8002c54:	73bb      	strb	r3, [r7, #14]
    int              iIndex;

    while( usLen-- )
 8002c56:	e014      	b.n	8002c82 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8002c58:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	1c59      	adds	r1, r3, #1
 8002c60:	6079      	str	r1, [r7, #4]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4053      	eors	r3, r2
 8002c66:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( int8_t )( ucCRCHi ^ aucCRCHi[iIndex] );
 8002c68:	4a0f      	ldr	r2, [pc, #60]	; (8002ca8 <usMBCRC16+0x64>)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f993 2000 	ldrsb.w	r2, [r3]
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	4053      	eors	r3, r2
 8002c76:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8002c78:	4a0c      	ldr	r2, [pc, #48]	; (8002cac <usMBCRC16+0x68>)
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	1e5a      	subs	r2, r3, #1
 8002c86:	603a      	str	r2, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1e5      	bne.n	8002c58 <usMBCRC16+0x14>
    }
    return ( int16_t )( ucCRCHi << 8 | ucCRCLo );
 8002c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c90:	021b      	lsls	r3, r3, #8
 8002c92:	b21a      	sxth	r2, r3
 8002c94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c98:	b21b      	sxth	r3, r3
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	b21b      	sxth	r3, r3
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr
 8002ca8:	0801305c 	.word	0x0801305c
 8002cac:	0801315c 	.word	0x0801315c

08002cb0 <sd_ss_set_active>:
extern volatile uint16_t htim2;

uint8_t spi_rx_buffer[512];

void sd_ss_set_active(uint8_t drv)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	71fb      	strb	r3, [r7, #7]
  active_sd_ss_pin=sd_cards_ss[drv].sd_ss_pin;
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	4a08      	ldr	r2, [pc, #32]	; (8002ce0 <sd_ss_set_active+0x30>)
 8002cbe:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8002cc2:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <sd_ss_set_active+0x34>)
 8002cc4:	801a      	strh	r2, [r3, #0]
  active_sd_ss_port=sd_cards_ss[drv].sd_ss_port;
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	4a05      	ldr	r2, [pc, #20]	; (8002ce0 <sd_ss_set_active+0x30>)
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4a05      	ldr	r2, [pc, #20]	; (8002ce8 <sd_ss_set_active+0x38>)
 8002cd2:	6013      	str	r3, [r2, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20001ab0 	.word	0x20001ab0
 8002ce4:	20001aaa 	.word	0x20001aaa
 8002ce8:	20001aac 	.word	0x20001aac

08002cec <sd_ss_active_pin_down>:

void sd_ss_active_pin_down()
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_RESET);
 8002cf0:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <sd_ss_active_pin_down+0x18>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <sd_ss_active_pin_down+0x1c>)
 8002cf6:	8811      	ldrh	r1, [r2, #0]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f002 f8e0 	bl	8004ec0 <HAL_GPIO_WritePin>
}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20001aac 	.word	0x20001aac
 8002d08:	20001aaa 	.word	0x20001aaa

08002d0c <sd_ss_active_pin_up>:
void sd_ss_active_pin_up()
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_SET);
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <sd_ss_active_pin_up+0x18>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <sd_ss_active_pin_up+0x1c>)
 8002d16:	8811      	ldrh	r1, [r2, #0]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f002 f8d0 	bl	8004ec0 <HAL_GPIO_WritePin>
}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20001aac 	.word	0x20001aac
 8002d28:	20001aaa 	.word	0x20001aaa

08002d2c <SD_cmd>:



//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	6039      	str	r1, [r7, #0]
 8002d36:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
  // ACMD<n> is the command sequense of CMD55-CMD<n>
  if (cmd & 0x80)
 8002d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	da0e      	bge.n	8002d5e <SD_cmd+0x32>
  {
    cmd &= 0x7F;
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d46:	71fb      	strb	r3, [r7, #7]
    res = SD_cmd(CMD55, 0);
 8002d48:	2100      	movs	r1, #0
 8002d4a:	2077      	movs	r0, #119	; 0x77
 8002d4c:	f7ff ffee 	bl	8002d2c <SD_cmd>
 8002d50:	4603      	mov	r3, r0
 8002d52:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 8002d54:	7bbb      	ldrb	r3, [r7, #14]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d901      	bls.n	8002d5e <SD_cmd+0x32>
 8002d5a:	7bbb      	ldrb	r3, [r7, #14]
 8002d5c:	e043      	b.n	8002de6 <SD_cmd+0xba>
  }
  // Select the card
  SS_SD_DESELECT();
 8002d5e:	f7ff ffd5 	bl	8002d0c <sd_ss_active_pin_up>
  SPI_ReceiveByte();
 8002d62:	f000 f968 	bl	8003036 <SPI_ReceiveByte>

  SS_SD_SELECT();
 8002d66:	f7ff ffc1 	bl	8002cec <sd_ss_active_pin_down>
  SPI_ReceiveByte();
 8002d6a:	f000 f964 	bl	8003036 <SPI_ReceiveByte>
  // Send a command packet
  SPI_SendByte(cmd); // Start + Command index
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 f953 	bl	800301c <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	0e1b      	lsrs	r3, r3, #24
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 f94d 	bl	800301c <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	0c1b      	lsrs	r3, r3, #16
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f947 	bl	800301c <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 f941 	bl	800301c <SPI_SendByte>
  SPI_SendByte((uint8_t)arg); // Argument[7..0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f93c 	bl	800301c <SPI_SendByte>

  n = 0x01; // Dummy CRC + Stop
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d101      	bne.n	8002db2 <SD_cmd+0x86>
 8002dae:	2395      	movs	r3, #149	; 0x95
 8002db0:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	2b48      	cmp	r3, #72	; 0x48
 8002db6:	d101      	bne.n	8002dbc <SD_cmd+0x90>
 8002db8:	2387      	movs	r3, #135	; 0x87
 8002dba:	73fb      	strb	r3, [r7, #15]
  SPI_SendByte(n);
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 f92c 	bl	800301c <SPI_SendByte>
  // Receive a command response
  n = 10; // Wait for a valid response in timeout of 10 attempts
 8002dc4:	230a      	movs	r3, #10
 8002dc6:	73fb      	strb	r3, [r7, #15]
  do {
    res = SPI_ReceiveByte();
 8002dc8:	f000 f935 	bl	8003036 <SPI_ReceiveByte>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 8002dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	da05      	bge.n	8002de4 <SD_cmd+0xb8>
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f1      	bne.n	8002dc8 <SD_cmd+0x9c>
  return res;
 8002de4:	7bbb      	ldrb	r3, [r7, #14]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <sd_ini>:

uint8_t sd_ini(void)
{
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
	  uint8_t i, cmd;;
	  uint8_t ocr[4];
	  int16_t tmr;
	  uint32_t temp;
	  //LD_OFF;
	  sdinfo.type = 0;
 8002df6:	4b57      	ldr	r3, [pc, #348]	; (8002f54 <sd_ini+0x164>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]

	  hspi1.Init.BaudRatePrescaler = temp;
	  HAL_SPI_Init(&hspi1);
	  */

	  SS_SD_SELECT();
 8002dfc:	f7ff ff76 	bl	8002cec <sd_ss_active_pin_down>
	  if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8002e00:	2100      	movs	r1, #0
 8002e02:	2040      	movs	r0, #64	; 0x40
 8002e04:	f7ff ff92 	bl	8002d2c <SD_cmd>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	f040 809a 	bne.w	8002f44 <sd_ini+0x154>
	  {
		  SPI_Release();
 8002e10:	f000 f91e 	bl	8003050 <SPI_Release>
		  if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8002e14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002e18:	2048      	movs	r0, #72	; 0x48
 8002e1a:	f7ff ff87 	bl	8002d2c <SD_cmd>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d157      	bne.n	8002ed4 <sd_ini+0xe4>
		  {
			  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8002e24:	2300      	movs	r3, #0
 8002e26:	71fb      	strb	r3, [r7, #7]
 8002e28:	e00c      	b.n	8002e44 <sd_ini+0x54>
 8002e2a:	79fc      	ldrb	r4, [r7, #7]
 8002e2c:	f000 f903 	bl	8003036 <SPI_ReceiveByte>
 8002e30:	4603      	mov	r3, r0
 8002e32:	461a      	mov	r2, r3
 8002e34:	f104 0308 	add.w	r3, r4, #8
 8002e38:	443b      	add	r3, r7
 8002e3a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	3301      	adds	r3, #1
 8002e42:	71fb      	strb	r3, [r7, #7]
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d9ef      	bls.n	8002e2a <sd_ini+0x3a>

			    // Get trailing return value of R7 resp
			    if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8002e4a:	78bb      	ldrb	r3, [r7, #2]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d17b      	bne.n	8002f48 <sd_ini+0x158>
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	2baa      	cmp	r3, #170	; 0xaa
 8002e54:	d178      	bne.n	8002f48 <sd_ini+0x158>
			    {
			    	for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 8002e56:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8002e5a:	80bb      	strh	r3, [r7, #4]
 8002e5c:	e005      	b.n	8002e6a <sd_ini+0x7a>
 8002e5e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	80bb      	strh	r3, [r7, #4]
 8002e6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <sd_ini+0x92>
 8002e72:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002e76:	20e9      	movs	r0, #233	; 0xe9
 8002e78:	f7ff ff58 	bl	8002d2c <SD_cmd>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1ed      	bne.n	8002e5e <sd_ini+0x6e>
			    	    ; // Wait for leaving idle state (ACMD41 with HCS bit)
			    	if (tmr && SD_cmd(CMD58, 0) == 0)
 8002e82:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d05e      	beq.n	8002f48 <sd_ini+0x158>
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	207a      	movs	r0, #122	; 0x7a
 8002e8e:	f7ff ff4d 	bl	8002d2c <SD_cmd>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d157      	bne.n	8002f48 <sd_ini+0x158>
			    	 { // Check CCS bit in the OCR
			    	  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8002e98:	2300      	movs	r3, #0
 8002e9a:	71fb      	strb	r3, [r7, #7]
 8002e9c:	e00c      	b.n	8002eb8 <sd_ini+0xc8>
 8002e9e:	79fc      	ldrb	r4, [r7, #7]
 8002ea0:	f000 f8c9 	bl	8003036 <SPI_ReceiveByte>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f104 0308 	add.w	r3, r4, #8
 8002eac:	443b      	add	r3, r7
 8002eae:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	71fb      	strb	r3, [r7, #7]
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d9ef      	bls.n	8002e9e <sd_ini+0xae>
			     	   sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8002ebe:	783b      	ldrb	r3, [r7, #0]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <sd_ini+0xdc>
 8002ec8:	220c      	movs	r2, #12
 8002eca:	e000      	b.n	8002ece <sd_ini+0xde>
 8002ecc:	2204      	movs	r2, #4
 8002ece:	4b21      	ldr	r3, [pc, #132]	; (8002f54 <sd_ini+0x164>)
 8002ed0:	701a      	strb	r2, [r3, #0]
 8002ed2:	e039      	b.n	8002f48 <sd_ini+0x158>
			    	}
			    }
		  }
		  else //SDv1 or MMCv3
		  {
			  if (SD_cmd(ACMD41, 0) <= 1)
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	20e9      	movs	r0, #233	; 0xe9
 8002ed8:	f7ff ff28 	bl	8002d2c <SD_cmd>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d805      	bhi.n	8002eee <sd_ini+0xfe>
			    {
			      sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 8002ee2:	4b1c      	ldr	r3, [pc, #112]	; (8002f54 <sd_ini+0x164>)
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	23e9      	movs	r3, #233	; 0xe9
 8002eea:	71bb      	strb	r3, [r7, #6]
 8002eec:	e004      	b.n	8002ef8 <sd_ini+0x108>
			    }
			    else
			    {
			      sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 8002eee:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <sd_ini+0x164>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	2341      	movs	r3, #65	; 0x41
 8002ef6:	71bb      	strb	r3, [r7, #6]
			    }
			    for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 8002ef8:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8002efc:	80bb      	strh	r3, [r7, #4]
 8002efe:	e005      	b.n	8002f0c <sd_ini+0x11c>
 8002f00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	80bb      	strh	r3, [r7, #4]
 8002f0c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d007      	beq.n	8002f24 <sd_ini+0x134>
 8002f14:	79bb      	ldrb	r3, [r7, #6]
 8002f16:	2100      	movs	r1, #0
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff07 	bl	8002d2c <SD_cmd>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1ed      	bne.n	8002f00 <sd_ini+0x110>
			    if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8002f24:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <sd_ini+0x14c>
 8002f2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f30:	2050      	movs	r0, #80	; 0x50
 8002f32:	f7ff fefb 	bl	8002d2c <SD_cmd>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <sd_ini+0x158>
			    sdinfo.type = 0;
 8002f3c:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <sd_ini+0x164>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	e001      	b.n	8002f48 <sd_ini+0x158>

	  }
	  else
	  {

	    return 1;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <sd_ini+0x15a>
	  }




  return 0;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd90      	pop	{r4, r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20001aa8 	.word	0x20001aa8

08002f58 <Error>:

static void Error (void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  //LD_ON;
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <SPI_wait_ready>:

uint8_t SPI_wait_ready(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	80fb      	strh	r3, [r7, #6]
  do {
    res=SPI_ReceiveByte();
 8002f6e:	f000 f862 	bl	8003036 <SPI_ReceiveByte>
 8002f72:	4603      	mov	r3, r0
 8002f74:	717b      	strb	r3, [r7, #5]
    cnt++;
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 8002f7c:	797b      	ldrb	r3, [r7, #5]
 8002f7e:	2bff      	cmp	r3, #255	; 0xff
 8002f80:	d004      	beq.n	8002f8c <SPI_wait_ready+0x28>
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d1f0      	bne.n	8002f6e <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d101      	bne.n	8002f9a <SPI_wait_ready+0x36>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <SPI_wait_ready+0x38>
  return res;
 8002f9a:	797b      	ldrb	r3, [r7, #5]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <SPIx_Write_Multi>:
{
	if(HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_READY) return F_OK;
	else return F_ERR;
}
F_RES SPIx_Write_Multi(uint8_t* tx_buf,uint32_t size)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
	if(HAL_SPI_TransmitReceive(&hspi1, tx_buf, spi_rx_buffer, size,HAL_MAX_DELAY)==HAL_OK) return F_OK;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb6:	9200      	str	r2, [sp, #0]
 8002fb8:	4a07      	ldr	r2, [pc, #28]	; (8002fd8 <SPIx_Write_Multi+0x34>)
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4807      	ldr	r0, [pc, #28]	; (8002fdc <SPIx_Write_Multi+0x38>)
 8002fbe:	f002 ff0d 	bl	8005ddc <HAL_SPI_TransmitReceive>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <SPIx_Write_Multi+0x28>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e000      	b.n	8002fce <SPIx_Write_Multi+0x2a>
		else return F_ERR;
 8002fcc:	2301      	movs	r3, #1
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20001ad0 	.word	0x20001ad0
 8002fdc:	20000a0c 	.word	0x20000a0c

08002fe0 <SPIx_WriteRead>:
	if(HAL_SPI_Transmit_DMA(&hspi1, tx_buf, size)==HAL_OK) return F_OK;
	else return F_ERR;
}

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8002fee:	f107 020f 	add.w	r2, r7, #15
 8002ff2:	1df9      	adds	r1, r7, #7
 8002ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	4806      	ldr	r0, [pc, #24]	; (8003018 <SPIx_WriteRead+0x38>)
 8002ffe:	f002 feed 	bl	8005ddc <HAL_SPI_TransmitReceive>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <SPIx_WriteRead+0x2c>
  {
    Error();
 8003008:	f7ff ffa6 	bl	8002f58 <Error>
  }
  return receivedbyte;
 800300c:	7bfb      	ldrb	r3, [r7, #15]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000a0c 	.word	0x20000a0c

0800301c <SPI_SendByte>:

void SPI_SendByte(uint8_t bt)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff ffd9 	bl	8002fe0 <SPIx_WriteRead>
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <SPI_ReceiveByte>:

uint8_t SPI_ReceiveByte(void)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 800303c:	20ff      	movs	r0, #255	; 0xff
 800303e:	f7ff ffcf 	bl	8002fe0 <SPIx_WriteRead>
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
  return bt;
 8003046:	79fb      	ldrb	r3, [r7, #7]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <SPI_Release>:
void SPI_Release(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8003054:	20ff      	movs	r0, #255	; 0xff
 8003056:	f7ff ffc3 	bl	8002fe0 <SPIx_WriteRead>
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}

0800305e <SD_Read_Block>:

uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 800305e:	b590      	push	{r4, r7, lr}
 8003060:	b085      	sub	sp, #20
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;

  result=SD_cmd (CMD17, lba);
 8003068:	6839      	ldr	r1, [r7, #0]
 800306a:	2051      	movs	r0, #81	; 0x51
 800306c:	f7ff fe5e 	bl	8002d2c <SD_cmd>
 8003070:	4603      	mov	r3, r0
 8003072:	737b      	strb	r3, [r7, #13]
  if (result!=0x00){
 8003074:	7b7b      	ldrb	r3, [r7, #13]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <SD_Read_Block+0x20>
	  return 5;
 800307a:	2305      	movs	r3, #5
 800307c:	e02f      	b.n	80030de <SD_Read_Block+0x80>
  }

  SPI_Release();
 800307e:	f7ff ffe7 	bl	8003050 <SPI_Release>
   cnt=0;
 8003082:	2300      	movs	r3, #0
 8003084:	81fb      	strh	r3, [r7, #14]
   do{
     result=SPI_ReceiveByte();
 8003086:	f7ff ffd6 	bl	8003036 <SPI_ReceiveByte>
 800308a:	4603      	mov	r3, r0
 800308c:	737b      	strb	r3, [r7, #13]
     cnt++;
 800308e:	89fb      	ldrh	r3, [r7, #14]
 8003090:	3301      	adds	r3, #1
 8003092:	81fb      	strh	r3, [r7, #14]
   } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 8003094:	7b7b      	ldrb	r3, [r7, #13]
 8003096:	2bfe      	cmp	r3, #254	; 0xfe
 8003098:	d004      	beq.n	80030a4 <SD_Read_Block+0x46>
 800309a:	89fb      	ldrh	r3, [r7, #14]
 800309c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d1f0      	bne.n	8003086 <SD_Read_Block+0x28>
   if (cnt>=0xFFFF) {
 80030a4:	89fb      	ldrh	r3, [r7, #14]
 80030a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d101      	bne.n	80030b2 <SD_Read_Block+0x54>
	   return 5;
 80030ae:	2305      	movs	r3, #5
 80030b0:	e015      	b.n	80030de <SD_Read_Block+0x80>
   }
   for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte();
 80030b2:	2300      	movs	r3, #0
 80030b4:	81fb      	strh	r3, [r7, #14]
 80030b6:	e009      	b.n	80030cc <SD_Read_Block+0x6e>
 80030b8:	89fb      	ldrh	r3, [r7, #14]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	18d4      	adds	r4, r2, r3
 80030be:	f7ff ffba 	bl	8003036 <SPI_ReceiveByte>
 80030c2:	4603      	mov	r3, r0
 80030c4:	7023      	strb	r3, [r4, #0]
 80030c6:	89fb      	ldrh	r3, [r7, #14]
 80030c8:	3301      	adds	r3, #1
 80030ca:	81fb      	strh	r3, [r7, #14]
 80030cc:	89fb      	ldrh	r3, [r7, #14]
 80030ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030d2:	d3f1      	bcc.n	80030b8 <SD_Read_Block+0x5a>
   SPI_Release();
 80030d4:	f7ff ffbc 	bl	8003050 <SPI_Release>
   SPI_Release();
 80030d8:	f7ff ffba 	bl	8003050 <SPI_Release>



  return 0;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd90      	pop	{r4, r7, pc}
	...

080030e8 <SD_Write_Blocks>:

uint8_t SD_Write_Blocks (uint8_t *buff, uint32_t lba,uint16_t count)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	4613      	mov	r3, r2
 80030f4:	80fb      	strh	r3, [r7, #6]
  tick1=xTaskGetTickCount();
 80030f6:	f00a fe81 	bl	800ddfc <xTaskGetTickCount>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4a39      	ldr	r2, [pc, #228]	; (80031e4 <SD_Write_Blocks+0xfc>)
 80030fe:	6013      	str	r3, [r2, #0]
  uint8_t result;
  uint16_t cnt;


  result=SD_cmd(CMD25,lba);//CMD25
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	2059      	movs	r0, #89	; 0x59
 8003104:	f7ff fe12 	bl	8002d2c <SD_cmd>
 8003108:	4603      	mov	r3, r0
 800310a:	75fb      	strb	r3, [r7, #23]
  if (result!=0x00){
 800310c:	7dfb      	ldrb	r3, [r7, #23]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <SD_Write_Blocks+0x2e>
	  return 6;
 8003112:	2306      	movs	r3, #6
 8003114:	e061      	b.n	80031da <SD_Write_Blocks+0xf2>
  }
  SPI_Release();  //1byte gap
 8003116:	f7ff ff9b 	bl	8003050 <SPI_Release>

  for(int i=0;i<count;i++){
 800311a:	2300      	movs	r3, #0
 800311c:	61bb      	str	r3, [r7, #24]
 800311e:	e035      	b.n	800318c <SD_Write_Blocks+0xa4>
   SPI_SendByte (0xFC);//token CMD25
 8003120:	20fc      	movs	r0, #252	; 0xfc
 8003122:	f7ff ff7b 	bl	800301c <SPI_SendByte>

   SPIx_Write_Multi(buff,512);
 8003126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff ff3a 	bl	8002fa4 <SPIx_Write_Multi>
   buff+=512;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003136:	60fb      	str	r3, [r7, #12]
   SPI_Release();   //CRC
 8003138:	f7ff ff8a 	bl	8003050 <SPI_Release>
   SPI_Release();   //CRC
 800313c:	f7ff ff88 	bl	8003050 <SPI_Release>


   result=SPI_ReceiveByte();
 8003140:	f7ff ff79 	bl	8003036 <SPI_ReceiveByte>
 8003144:	4603      	mov	r3, r0
 8003146:	75fb      	strb	r3, [r7, #23]
   if ((result&0x1F)!=0x05) {
 8003148:	7dfb      	ldrb	r3, [r7, #23]
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	2b05      	cmp	r3, #5
 8003150:	d001      	beq.n	8003156 <SD_Write_Blocks+0x6e>
	  return 6;
 8003152:	2306      	movs	r3, #6
 8003154:	e041      	b.n	80031da <SD_Write_Blocks+0xf2>
   }
   cnt=0;
 8003156:	2300      	movs	r3, #0
 8003158:	83fb      	strh	r3, [r7, #30]
   do {
    result=SPI_ReceiveByte();
 800315a:	f7ff ff6c 	bl	8003036 <SPI_ReceiveByte>
 800315e:	4603      	mov	r3, r0
 8003160:	75fb      	strb	r3, [r7, #23]
    cnt++;
 8003162:	8bfb      	ldrh	r3, [r7, #30]
 8003164:	3301      	adds	r3, #1
 8003166:	83fb      	strh	r3, [r7, #30]
   } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8003168:	7dfb      	ldrb	r3, [r7, #23]
 800316a:	2bff      	cmp	r3, #255	; 0xff
 800316c:	d004      	beq.n	8003178 <SD_Write_Blocks+0x90>
 800316e:	8bfb      	ldrh	r3, [r7, #30]
 8003170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003174:	4293      	cmp	r3, r2
 8003176:	d1f0      	bne.n	800315a <SD_Write_Blocks+0x72>
   if (cnt>=0xFFFF) {
 8003178:	8bfb      	ldrh	r3, [r7, #30]
 800317a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800317e:	4293      	cmp	r3, r2
 8003180:	d101      	bne.n	8003186 <SD_Write_Blocks+0x9e>
	  return 6;
 8003182:	2306      	movs	r3, #6
 8003184:	e029      	b.n	80031da <SD_Write_Blocks+0xf2>
  for(int i=0;i<count;i++){
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	3301      	adds	r3, #1
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	429a      	cmp	r2, r3
 8003192:	dbc5      	blt.n	8003120 <SD_Write_Blocks+0x38>
   }
  }

  SPI_SendByte (0xFD); //stop transaction token for CMD25
 8003194:	20fd      	movs	r0, #253	; 0xfd
 8003196:	f7ff ff41 	bl	800301c <SPI_SendByte>
  SPI_Release();       //1byte gap
 800319a:	f7ff ff59 	bl	8003050 <SPI_Release>
  cnt=0;
 800319e:	2300      	movs	r3, #0
 80031a0:	83fb      	strh	r3, [r7, #30]
  do {
	result=SPI_ReceiveByte();
 80031a2:	f7ff ff48 	bl	8003036 <SPI_ReceiveByte>
 80031a6:	4603      	mov	r3, r0
 80031a8:	75fb      	strb	r3, [r7, #23]
	cnt++;
 80031aa:	8bfb      	ldrh	r3, [r7, #30]
 80031ac:	3301      	adds	r3, #1
 80031ae:	83fb      	strh	r3, [r7, #30]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
 80031b2:	2bff      	cmp	r3, #255	; 0xff
 80031b4:	d004      	beq.n	80031c0 <SD_Write_Blocks+0xd8>
 80031b6:	8bfb      	ldrh	r3, [r7, #30]
 80031b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031bc:	4293      	cmp	r3, r2
 80031be:	d1f0      	bne.n	80031a2 <SD_Write_Blocks+0xba>
  if (cnt>=0xFFFF) return 6;
 80031c0:	8bfb      	ldrh	r3, [r7, #30]
 80031c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d101      	bne.n	80031ce <SD_Write_Blocks+0xe6>
 80031ca:	2306      	movs	r3, #6
 80031cc:	e005      	b.n	80031da <SD_Write_Blocks+0xf2>
  tick2=xTaskGetTickCount();
 80031ce:	f00a fe15 	bl	800ddfc <xTaskGetTickCount>
 80031d2:	4603      	mov	r3, r0
 80031d4:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <SD_Write_Blocks+0x100>)
 80031d6:	6013      	str	r3, [r2, #0]
  return 0;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3720      	adds	r7, #32
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20001a9c 	.word	0x20001a9c
 80031e8:	20001aa0 	.word	0x20001aa0

080031ec <seaglider_init>:

const char* seaglider_commands_strings[]={"CD>\r"};


void seaglider_init(seaglider* seaglider_obj)
{
 80031ec:	b5b0      	push	{r4, r5, r7, lr}
 80031ee:	b096      	sub	sp, #88	; 0x58
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
	seaglider_obj->last_depth=0.0;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f8c3 2012 	str.w	r2, [r3, #18]
	seaglider_obj->prev_depth=0.0;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f8c3 2016 	str.w	r2, [r3, #22]
	seaglider_obj->dive_status=SEAGLIDER_STATUS_UNKNOWN;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	73da      	strb	r2, [r3, #15]
	seaglider_obj->start_trigger=SEAGLIDER_START_WAIT;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	741a      	strb	r2, [r3, #16]
	seaglider_obj->stop_trigger=SEAGLIDER_STOP_WAIT;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	745a      	strb	r2, [r3, #17]
	seaglider_messages_init(seaglider_obj);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f992 	bl	8003544 <seaglider_messages_init>


	osMessageQDef(seaglider_events_q, 20, uint8_t);
 8003220:	4b20      	ldr	r3, [pc, #128]	; (80032a4 <seaglider_init+0xb8>)
 8003222:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8003226:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003228:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	seaglider_obj->events_q= osMessageCreate(osMessageQ(seaglider_events_q), NULL);
 800322c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003230:	2100      	movs	r1, #0
 8003232:	4618      	mov	r0, r3
 8003234:	f009 faa4 	bl	800c780 <osMessageCreate>
 8003238:	4602      	mov	r2, r0
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	609a      	str	r2, [r3, #8]

	osMessageQDef(seaglider_media_rx_q, 20, uint16_t);
 800323e:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <seaglider_init+0xbc>)
 8003240:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003246:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	seaglider_obj->media_rx_messages_q= osMessageCreate(osMessageQ(seaglider_media_rx_q), NULL);
 800324a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f009 fa95 	bl	800c780 <osMessageCreate>
 8003256:	4602      	mov	r2, r0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	601a      	str	r2, [r3, #0]

	osMessageQDef(seaglider_media_tx_q, 200, uint8_t);
 800325c:	4b13      	ldr	r3, [pc, #76]	; (80032ac <seaglider_init+0xc0>)
 800325e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003264:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	seaglider_obj->media_tx_q = osMessageCreate(osMessageQ(seaglider_media_tx_q), NULL);
 8003268:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800326c:	2100      	movs	r1, #0
 800326e:	4618      	mov	r0, r3
 8003270:	f009 fa86 	bl	800c780 <osMessageCreate>
 8003274:	4602      	mov	r2, r0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	605a      	str	r2, [r3, #4]

	osThreadDef(seaglider_task, seaglider_loop, osPriorityNormal, 0, 256);
 800327a:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <seaglider_init+0xc4>)
 800327c:	f107 040c 	add.w	r4, r7, #12
 8003280:	461d      	mov	r5, r3
 8003282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003286:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800328a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(seaglider_task), seaglider_obj);
 800328e:	f107 030c 	add.w	r3, r7, #12
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4618      	mov	r0, r3
 8003296:	f009 f9ac 	bl	800c5f2 <osThreadCreate>


}
 800329a:	bf00      	nop
 800329c:	3758      	adds	r7, #88	; 0x58
 800329e:	46bd      	mov	sp, r7
 80032a0:	bdb0      	pop	{r4, r5, r7, pc}
 80032a2:	bf00      	nop
 80032a4:	08012f04 	.word	0x08012f04
 80032a8:	08012f14 	.word	0x08012f14
 80032ac:	08012f24 	.word	0x08012f24
 80032b0:	08012f34 	.word	0x08012f34

080032b4 <seaglider_loop>:


void seaglider_loop(seaglider* seaglider_obj)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	 uint16_t msg_indx;
	 for(;;)
	 {
		if(xQueueReceive(seaglider_obj->media_rx_messages_q,&msg_indx,0))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f107 010a 	add.w	r1, r7, #10
 80032c4:	2200      	movs	r2, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f009 feb8 	bl	800d03c <xQueueReceive>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f4      	beq.n	80032bc <seaglider_loop+0x8>
		{   uint8_t* msg=seaglider_obj->rx_buffer+msg_indx;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	332a      	adds	r3, #42	; 0x2a
 80032d6:	897a      	ldrh	r2, [r7, #10]
 80032d8:	4413      	add	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
			seaglider_parse_message(seaglider_obj,msg);
 80032dc:	68f9      	ldr	r1, [r7, #12]
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f8fc 	bl	80034dc <seaglider_parse_message>
		if(xQueueReceive(seaglider_obj->media_rx_messages_q,&msg_indx,0))
 80032e4:	e7ea      	b.n	80032bc <seaglider_loop+0x8>

080032e6 <seaglider_media_process_byte>:

}


void seaglider_media_process_byte(seaglider* seaglider_obj,uint8_t rx_byte)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	70fb      	strb	r3, [r7, #3]
	if(seaglider_obj->media_status==SEAGLIDER_MEDIA_READY && rx_byte!=0x00)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	7b5b      	ldrb	r3, [r3, #13]
 80032f6:	2b0a      	cmp	r3, #10
 80032f8:	d162      	bne.n	80033c0 <seaglider_media_process_byte+0xda>
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d05f      	beq.n	80033c0 <seaglider_media_process_byte+0xda>
	{
		seaglider_obj->rx_buffer[seaglider_obj->rx_buffer_indx]=rx_byte;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	; 0x42a
 8003306:	b29b      	uxth	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		if(rx_byte=='\r')
 8003314:	78fb      	ldrb	r3, [r7, #3]
 8003316:	2b0d      	cmp	r3, #13
 8003318:	d133      	bne.n	8003382 <seaglider_media_process_byte+0x9c>
		{
			seaglider_obj->rx_buffer[seaglider_obj->rx_buffer_indx]=0x00;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	; 0x42a
 8003320:	b29b      	uxth	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4413      	add	r3, r2
 8003328:	2200      	movs	r2, #0
 800332a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			osMessagePut(seaglider_obj->media_rx_messages_q,seaglider_obj->rx_buffer_new_string_indx,1);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8003338:	b29b      	uxth	r3, r3
 800333a:	2201      	movs	r2, #1
 800333c:	4619      	mov	r1, r3
 800333e:	f009 fa47 	bl	800c7d0 <osMessagePut>
			if(seaglider_obj->rx_buffer_indx>SEAGLIDER_RX_BUFFER_THR) seaglider_obj->rx_buffer_indx=0;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	; 0x42a
 8003348:	b29b      	uxth	r3, r3
 800334a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800334e:	d907      	bls.n	8003360 <seaglider_media_process_byte+0x7a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 8003358:	2200      	movs	r2, #0
 800335a:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 800335e:	e008      	b.n	8003372 <seaglider_media_process_byte+0x8c>
			else  seaglider_obj->rx_buffer_indx++;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	; 0x42a
 8003366:	b29b      	uxth	r3, r3
 8003368:	3301      	adds	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8a3 242a 	strh.w	r2, [r3, #1066]	; 0x42a
			seaglider_obj->rx_buffer_new_string_indx=seaglider_obj->rx_buffer_indx;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	; 0x42a
 8003378:	b29a      	uxth	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
 8003380:	e008      	b.n	8003394 <seaglider_media_process_byte+0xae>
		}
		else seaglider_obj->rx_buffer_indx++;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	; 0x42a
 8003388:	b29b      	uxth	r3, r3
 800338a:	3301      	adds	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8a3 242a 	strh.w	r2, [r3, #1066]	; 0x42a
		if(seaglider_obj->rx_buffer_indx==SEAGLIDER_RX_BUFFER_SIZE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	; 0x42a
 800339a:	b29b      	uxth	r3, r3
 800339c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a0:	d11d      	bne.n	80033de <seaglider_media_process_byte+0xf8>
		{
			seaglider_obj->rx_buffer_indx=0;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
			seaglider_obj->rx_buffer_new_string_indx=seaglider_obj->rx_buffer_indx;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	; 0x42a
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
		if(seaglider_obj->rx_buffer_indx==SEAGLIDER_RX_BUFFER_SIZE)
 80033be:	e00e      	b.n	80033de <seaglider_media_process_byte+0xf8>
		}
	}
	else
	{
		seaglider_obj->rx_buffer_indx=0;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
		seaglider_obj->rx_buffer_new_string_indx=seaglider_obj->rx_buffer_indx;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	; 0x42a
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
	}
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <seaglider_media_get_byte>:

uint8_t seaglider_media_get_byte(seaglider* seaglider_obj,uint8_t* tx_byte)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b086      	sub	sp, #24
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(seaglider_obj->media_tx_q,0);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	f107 030c 	add.w	r3, r7, #12
 80033f8:	2200      	movs	r2, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f009 fa28 	bl	800c850 <osMessageGet>
	if(res.status==osEventMessage)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b10      	cmp	r3, #16
 8003404:	d105      	bne.n	8003412 <seaglider_media_get_byte+0x2c>
    {
		*tx_byte=res.value.v;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	701a      	strb	r2, [r3, #0]
		return SEAGLIDER_F_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	e000      	b.n	8003414 <seaglider_media_get_byte+0x2e>
    }
  return SEAGLIDER_F_ERR;
 8003412:	2301      	movs	r3, #1
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <seaglider_send_cmd>:


void seaglider_send_cmd(seaglider* seaglider_obj,uint8_t cmd_id,void* arg)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	460b      	mov	r3, r1
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	72fb      	strb	r3, [r7, #11]
 memory_region_pointer* ptr1;
 switch(cmd_id)
 800342a:	7afb      	ldrb	r3, [r7, #11]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <seaglider_send_cmd+0x1a>
 8003430:	2b01      	cmp	r3, #1
 8003432:	d01c      	beq.n	800346e <seaglider_send_cmd+0x52>
		   osMessagePut(seaglider_obj->media_tx_q,*((uint8_t*)(ptr1->start_addr)+i),osWaitForever);
	   }
     break;
 }

}
 8003434:	e035      	b.n	80034a2 <seaglider_send_cmd+0x86>
  	   for(int i=0;i<strlen(seaglider_commands_strings[SEAGLIDER_CMD_PROMPT]);i++)
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
 800343a:	e00e      	b.n	800345a <seaglider_send_cmd+0x3e>
  		   osMessagePut(seaglider_obj->media_tx_q,*(seaglider_commands_strings[SEAGLIDER_CMD_PROMPT]+i),osWaitForever);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6858      	ldr	r0, [r3, #4]
 8003440:	4b1a      	ldr	r3, [pc, #104]	; (80034ac <seaglider_send_cmd+0x90>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	4413      	add	r3, r2
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	f04f 32ff 	mov.w	r2, #4294967295
 800344e:	4619      	mov	r1, r3
 8003450:	f009 f9be 	bl	800c7d0 <osMessagePut>
  	   for(int i=0;i<strlen(seaglider_commands_strings[SEAGLIDER_CMD_PROMPT]);i++)
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	3301      	adds	r3, #1
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	4b14      	ldr	r3, [pc, #80]	; (80034ac <seaglider_send_cmd+0x90>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7fc fee6 	bl	8000230 <strlen>
 8003464:	4602      	mov	r2, r0
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	429a      	cmp	r2, r3
 800346a:	d8e7      	bhi.n	800343c <seaglider_send_cmd+0x20>
	 break;
 800346c:	e019      	b.n	80034a2 <seaglider_send_cmd+0x86>
       ptr1=arg;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	617b      	str	r3, [r7, #20]
       for(int i=0;i<ptr1->size;i++)
 8003472:	2300      	movs	r3, #0
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	e00e      	b.n	8003496 <seaglider_send_cmd+0x7a>
		   osMessagePut(seaglider_obj->media_tx_q,*((uint8_t*)(ptr1->start_addr)+i),osWaitForever);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6858      	ldr	r0, [r3, #4]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	4413      	add	r3, r2
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	f04f 32ff 	mov.w	r2, #4294967295
 800348a:	4619      	mov	r1, r3
 800348c:	f009 f9a0 	bl	800c7d0 <osMessagePut>
       for(int i=0;i<ptr1->size;i++)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	3301      	adds	r3, #1
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	429a      	cmp	r2, r3
 800349e:	d8eb      	bhi.n	8003478 <seaglider_send_cmd+0x5c>
     break;
 80034a0:	bf00      	nop
}
 80034a2:	bf00      	nop
 80034a4:	3720      	adds	r7, #32
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000028 	.word	0x20000028

080034b0 <seaglider_get_event>:

uint8_t seaglider_get_event(seaglider* seaglider_obj,uint8_t* event)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
	if(xQueueReceive(seaglider_obj->events_q,event,1))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2201      	movs	r2, #1
 80034c0:	6839      	ldr	r1, [r7, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f009 fdba 	bl	800d03c <xQueueReceive>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <seaglider_get_event+0x22>
	{
     return SEAGLIDER_F_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	e000      	b.n	80034d4 <seaglider_get_event+0x24>
	}
	return SEAGLIDER_F_ERR;
 80034d2:	2301      	movs	r3, #1
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <seaglider_parse_message>:


int seaglider_parse_message(seaglider* seaglider_obj,uint8_t* msg)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
 uint8_t* tmp_ptr;
 for(int i=0;i<SEAGLIDER_MSG_NUM_OF_FUNCTIONS;i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	e01e      	b.n	800352a <seaglider_parse_message+0x4e>
 {
	  tmp_ptr=0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60bb      	str	r3, [r7, #8]
	  tmp_ptr=strstr(msg,seaglider_messages_strings[i]);
 80034f0:	4a12      	ldr	r2, [pc, #72]	; (800353c <seaglider_parse_message+0x60>)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f8:	4619      	mov	r1, r3
 80034fa:	6838      	ldr	r0, [r7, #0]
 80034fc:	f00c fc18 	bl	800fd30 <strstr>
 8003500:	60b8      	str	r0, [r7, #8]
	  if(tmp_ptr)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00d      	beq.n	8003524 <seaglider_parse_message+0x48>
		{
			if(seaglider_functions[i](seaglider_obj,msg)==SEAGLIDER_F_OK) return SEAGLIDER_F_OK;
 8003508:	4a0d      	ldr	r2, [pc, #52]	; (8003540 <seaglider_parse_message+0x64>)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003510:	6839      	ldr	r1, [r7, #0]
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	4798      	blx	r3
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <seaglider_parse_message+0x44>
 800351c:	2300      	movs	r3, #0
 800351e:	e008      	b.n	8003532 <seaglider_parse_message+0x56>
      else return SEAGLIDER_F_ERR;
 8003520:	2301      	movs	r3, #1
 8003522:	e006      	b.n	8003532 <seaglider_parse_message+0x56>
 for(int i=0;i<SEAGLIDER_MSG_NUM_OF_FUNCTIONS;i++)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3301      	adds	r3, #1
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b0b      	cmp	r3, #11
 800352e:	dddd      	ble.n	80034ec <seaglider_parse_message+0x10>
		}

 }
 return SEAGLIDER_F_ERR;
 8003530:	2301      	movs	r3, #1
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20001d00 	.word	0x20001d00
 8003540:	20001cd0 	.word	0x20001cd0

08003544 <seaglider_messages_init>:

void seaglider_messages_init(seaglider* seaglider_obj)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	seaglider_functions[SEAGLIDER_MSG_DEPTH] = SEAGLIDER_MSG_DEPTH_f;
 800354c:	4b26      	ldr	r3, [pc, #152]	; (80035e8 <seaglider_messages_init+0xa4>)
 800354e:	4a27      	ldr	r2, [pc, #156]	; (80035ec <seaglider_messages_init+0xa8>)
 8003550:	601a      	str	r2, [r3, #0]
	seaglider_functions[SEAGLIDER_MSG_STOP] = SEAGLIDER_MSG_STOP_f;
 8003552:	4b25      	ldr	r3, [pc, #148]	; (80035e8 <seaglider_messages_init+0xa4>)
 8003554:	4a26      	ldr	r2, [pc, #152]	; (80035f0 <seaglider_messages_init+0xac>)
 8003556:	605a      	str	r2, [r3, #4]
	seaglider_functions[SEAGLIDER_MSG_SEND_TXT_FILE] = SEAGLIDER_MSG_SEND_TXT_FILE_f;
 8003558:	4b23      	ldr	r3, [pc, #140]	; (80035e8 <seaglider_messages_init+0xa4>)
 800355a:	4a26      	ldr	r2, [pc, #152]	; (80035f4 <seaglider_messages_init+0xb0>)
 800355c:	609a      	str	r2, [r3, #8]
	seaglider_functions[SEAGLIDER_MSG_START] = SEAGLIDER_MSG_START_f;
 800355e:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <seaglider_messages_init+0xa4>)
 8003560:	4a25      	ldr	r2, [pc, #148]	; (80035f8 <seaglider_messages_init+0xb4>)
 8003562:	60da      	str	r2, [r3, #12]
	seaglider_functions[SEAGLIDER_MSG_SEND_INFO] =SEAGLIDER_MSG_SEND_INFO_f;
 8003564:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <seaglider_messages_init+0xa4>)
 8003566:	4a25      	ldr	r2, [pc, #148]	; (80035fc <seaglider_messages_init+0xb8>)
 8003568:	611a      	str	r2, [r3, #16]
	seaglider_functions[SEAGLIDER_MSG_RESET] =SEAGLIDER_MSG_RESET_f;
 800356a:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <seaglider_messages_init+0xa4>)
 800356c:	4a24      	ldr	r2, [pc, #144]	; (8003600 <seaglider_messages_init+0xbc>)
 800356e:	615a      	str	r2, [r3, #20]
	seaglider_functions[SEAGLIDER_MSG_TEST] =SEAGLIDER_MSG_TEST_f;
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <seaglider_messages_init+0xa4>)
 8003572:	4a24      	ldr	r2, [pc, #144]	; (8003604 <seaglider_messages_init+0xc0>)
 8003574:	619a      	str	r2, [r3, #24]
	seaglider_functions[SEAGLIDER_MSG_CLOCK] =SEAGLIDER_MSG_CLOCK_f;
 8003576:	4b1c      	ldr	r3, [pc, #112]	; (80035e8 <seaglider_messages_init+0xa4>)
 8003578:	4a23      	ldr	r2, [pc, #140]	; (8003608 <seaglider_messages_init+0xc4>)
 800357a:	61da      	str	r2, [r3, #28]
	seaglider_functions[SEAGLIDER_MSG_WAKEUP] =SEAGLIDER_MSG_WAKEUP_f;
 800357c:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <seaglider_messages_init+0xa4>)
 800357e:	4a23      	ldr	r2, [pc, #140]	; (800360c <seaglider_messages_init+0xc8>)
 8003580:	621a      	str	r2, [r3, #32]
	seaglider_functions[SEAGLIDER_MSG_CLEAR] =SEAGLIDER_MSG_CLEAR_f;
 8003582:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <seaglider_messages_init+0xa4>)
 8003584:	4a22      	ldr	r2, [pc, #136]	; (8003610 <seaglider_messages_init+0xcc>)
 8003586:	625a      	str	r2, [r3, #36]	; 0x24
	seaglider_functions[SEAGLIDER_MSG_POFF] =SEAGLIDER_MSG_POFF_f;
 8003588:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <seaglider_messages_init+0xa4>)
 800358a:	4a22      	ldr	r2, [pc, #136]	; (8003614 <seaglider_messages_init+0xd0>)
 800358c:	629a      	str	r2, [r3, #40]	; 0x28
	seaglider_functions[SEAGLIDER_MSG_ERRORS] =SEAGLIDER_MSG_ERRORS_f;
 800358e:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <seaglider_messages_init+0xa4>)
 8003590:	4a21      	ldr	r2, [pc, #132]	; (8003618 <seaglider_messages_init+0xd4>)
 8003592:	62da      	str	r2, [r3, #44]	; 0x2c

	seaglider_messages_strings[SEAGLIDER_MSG_DEPTH] = "DEPTH";
 8003594:	4b21      	ldr	r3, [pc, #132]	; (800361c <seaglider_messages_init+0xd8>)
 8003596:	4a22      	ldr	r2, [pc, #136]	; (8003620 <seaglider_messages_init+0xdc>)
 8003598:	601a      	str	r2, [r3, #0]
	seaglider_messages_strings[SEAGLIDER_MSG_STOP] = "STOP";
 800359a:	4b20      	ldr	r3, [pc, #128]	; (800361c <seaglider_messages_init+0xd8>)
 800359c:	4a21      	ldr	r2, [pc, #132]	; (8003624 <seaglider_messages_init+0xe0>)
 800359e:	605a      	str	r2, [r3, #4]
	seaglider_messages_strings[SEAGLIDER_MSG_SEND_TXT_FILE] = "SEND_TXT_FILE";
 80035a0:	4b1e      	ldr	r3, [pc, #120]	; (800361c <seaglider_messages_init+0xd8>)
 80035a2:	4a21      	ldr	r2, [pc, #132]	; (8003628 <seaglider_messages_init+0xe4>)
 80035a4:	609a      	str	r2, [r3, #8]
	seaglider_messages_strings[SEAGLIDER_MSG_START] = "START";
 80035a6:	4b1d      	ldr	r3, [pc, #116]	; (800361c <seaglider_messages_init+0xd8>)
 80035a8:	4a20      	ldr	r2, [pc, #128]	; (800362c <seaglider_messages_init+0xe8>)
 80035aa:	60da      	str	r2, [r3, #12]
	seaglider_messages_strings[SEAGLIDER_MSG_SEND_INFO] ="SEND_INFO";
 80035ac:	4b1b      	ldr	r3, [pc, #108]	; (800361c <seaglider_messages_init+0xd8>)
 80035ae:	4a20      	ldr	r2, [pc, #128]	; (8003630 <seaglider_messages_init+0xec>)
 80035b0:	611a      	str	r2, [r3, #16]
	seaglider_messages_strings[SEAGLIDER_MSG_RESET] ="RESET";
 80035b2:	4b1a      	ldr	r3, [pc, #104]	; (800361c <seaglider_messages_init+0xd8>)
 80035b4:	4a1f      	ldr	r2, [pc, #124]	; (8003634 <seaglider_messages_init+0xf0>)
 80035b6:	615a      	str	r2, [r3, #20]
	seaglider_messages_strings[SEAGLIDER_MSG_TEST] ="TEST";
 80035b8:	4b18      	ldr	r3, [pc, #96]	; (800361c <seaglider_messages_init+0xd8>)
 80035ba:	4a1f      	ldr	r2, [pc, #124]	; (8003638 <seaglider_messages_init+0xf4>)
 80035bc:	619a      	str	r2, [r3, #24]
	seaglider_messages_strings[SEAGLIDER_MSG_CLOCK] ="CLOCK";
 80035be:	4b17      	ldr	r3, [pc, #92]	; (800361c <seaglider_messages_init+0xd8>)
 80035c0:	4a1e      	ldr	r2, [pc, #120]	; (800363c <seaglider_messages_init+0xf8>)
 80035c2:	61da      	str	r2, [r3, #28]
	seaglider_messages_strings[SEAGLIDER_MSG_WAKEUP] ="WAKEUP";
 80035c4:	4b15      	ldr	r3, [pc, #84]	; (800361c <seaglider_messages_init+0xd8>)
 80035c6:	4a1e      	ldr	r2, [pc, #120]	; (8003640 <seaglider_messages_init+0xfc>)
 80035c8:	621a      	str	r2, [r3, #32]
	seaglider_messages_strings[SEAGLIDER_MSG_CLEAR] ="CLEAR";
 80035ca:	4b14      	ldr	r3, [pc, #80]	; (800361c <seaglider_messages_init+0xd8>)
 80035cc:	4a1d      	ldr	r2, [pc, #116]	; (8003644 <seaglider_messages_init+0x100>)
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24
	seaglider_messages_strings[SEAGLIDER_MSG_POFF] ="POFF";
 80035d0:	4b12      	ldr	r3, [pc, #72]	; (800361c <seaglider_messages_init+0xd8>)
 80035d2:	4a1d      	ldr	r2, [pc, #116]	; (8003648 <seaglider_messages_init+0x104>)
 80035d4:	629a      	str	r2, [r3, #40]	; 0x28
	seaglider_messages_strings[SEAGLIDER_MSG_ERRORS] ="ERRORS";
 80035d6:	4b11      	ldr	r3, [pc, #68]	; (800361c <seaglider_messages_init+0xd8>)
 80035d8:	4a1c      	ldr	r2, [pc, #112]	; (800364c <seaglider_messages_init+0x108>)
 80035da:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	20001cd0 	.word	0x20001cd0
 80035ec:	08003651 	.word	0x08003651
 80035f0:	080036e1 	.word	0x080036e1
 80035f4:	080037f1 	.word	0x080037f1
 80035f8:	0800373d 	.word	0x0800373d
 80035fc:	08003813 	.word	0x08003813
 8003600:	08003829 	.word	0x08003829
 8003604:	0800383f 	.word	0x0800383f
 8003608:	08003861 	.word	0x08003861
 800360c:	080038c1 	.word	0x080038c1
 8003610:	080038e3 	.word	0x080038e3
 8003614:	08003905 	.word	0x08003905
 8003618:	08003927 	.word	0x08003927
 800361c:	20001d00 	.word	0x20001d00
 8003620:	08012f50 	.word	0x08012f50
 8003624:	08012f58 	.word	0x08012f58
 8003628:	08012f60 	.word	0x08012f60
 800362c:	08012f70 	.word	0x08012f70
 8003630:	08012f78 	.word	0x08012f78
 8003634:	08012f84 	.word	0x08012f84
 8003638:	08012f8c 	.word	0x08012f8c
 800363c:	08012f94 	.word	0x08012f94
 8003640:	08012f9c 	.word	0x08012f9c
 8003644:	08012fa4 	.word	0x08012fa4
 8003648:	08012fac 	.word	0x08012fac
 800364c:	08012fb4 	.word	0x08012fb4

08003650 <SEAGLIDER_MSG_DEPTH_f>:


int SEAGLIDER_MSG_DEPTH_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]

	char * pch;
	pch = strtok (msg,":");//header
 800365a:	491f      	ldr	r1, [pc, #124]	; (80036d8 <SEAGLIDER_MSG_DEPTH_f+0x88>)
 800365c:	6838      	ldr	r0, [r7, #0]
 800365e:	f00d f9d9 	bl	8010a14 <strtok>
 8003662:	60f8      	str	r0, [r7, #12]
	pch = strtok (NULL,",");//depth
 8003664:	491d      	ldr	r1, [pc, #116]	; (80036dc <SEAGLIDER_MSG_DEPTH_f+0x8c>)
 8003666:	2000      	movs	r0, #0
 8003668:	f00d f9d4 	bl	8010a14 <strtok>
 800366c:	60f8      	str	r0, [r7, #12]
	seaglider_obj->prev_depth=seaglider_obj->last_depth;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8d3 2012 	ldr.w	r2, [r3, #18]
 8003674:	4613      	mov	r3, r2
 8003676:	461a      	mov	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8c3 2016 	str.w	r2, [r3, #22]
	seaglider_obj->last_depth=strtof(pch,NULL);
 800367e:	2100      	movs	r1, #0
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f00d f975 	bl	8010970 <strtof>
 8003686:	4602      	mov	r2, r0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8c3 2012 	str.w	r2, [r3, #18]
	pch = strtok (NULL,",");//date
 800368e:	4913      	ldr	r1, [pc, #76]	; (80036dc <SEAGLIDER_MSG_DEPTH_f+0x8c>)
 8003690:	2000      	movs	r0, #0
 8003692:	f00d f9bf 	bl	8010a14 <strtok>
 8003696:	60f8      	str	r0, [r7, #12]
	memcpy(seaglider_obj->date,pch,8);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	331a      	adds	r3, #26
 800369c:	2208      	movs	r2, #8
 800369e:	68f9      	ldr	r1, [r7, #12]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f00c f9a6 	bl	800f9f2 <memcpy>
	pch = strtok (NULL,",");//time
 80036a6:	490d      	ldr	r1, [pc, #52]	; (80036dc <SEAGLIDER_MSG_DEPTH_f+0x8c>)
 80036a8:	2000      	movs	r0, #0
 80036aa:	f00d f9b3 	bl	8010a14 <strtok>
 80036ae:	60f8      	str	r0, [r7, #12]
	memcpy(seaglider_obj->time,pch,6);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3322      	adds	r3, #34	; 0x22
 80036b4:	2206      	movs	r2, #6
 80036b6:	68f9      	ldr	r1, [r7, #12]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f00c f99a 	bl	800f9f2 <memcpy>

	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_DEPTH_RCVD,1);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2201      	movs	r2, #1
 80036c4:	2106      	movs	r1, #6
 80036c6:	4618      	mov	r0, r3
 80036c8:	f009 f882 	bl	800c7d0 <osMessagePut>
	return SEAGLIDER_F_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	08012fbc 	.word	0x08012fbc
 80036dc:	08012fc0 	.word	0x08012fc0

080036e0 <SEAGLIDER_MSG_STOP_f>:
int SEAGLIDER_MSG_STOP_f(seaglider* seaglider_obj,uint8_t* msg)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,":");//header
 80036ea:	4912      	ldr	r1, [pc, #72]	; (8003734 <SEAGLIDER_MSG_STOP_f+0x54>)
 80036ec:	6838      	ldr	r0, [r7, #0]
 80036ee:	f00d f991 	bl	8010a14 <strtok>
 80036f2:	60f8      	str	r0, [r7, #12]
	pch = strtok (NULL,",");//dive-climb
 80036f4:	4910      	ldr	r1, [pc, #64]	; (8003738 <SEAGLIDER_MSG_STOP_f+0x58>)
 80036f6:	2000      	movs	r0, #0
 80036f8:	f00d f98c 	bl	8010a14 <strtok>
 80036fc:	60f8      	str	r0, [r7, #12]
	if(*pch=='a'){
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b61      	cmp	r3, #97	; 0x61
 8003704:	d103      	bne.n	800370e <SEAGLIDER_MSG_STOP_f+0x2e>
	  seaglider_obj->dive_status=SEAGLIDER_STATUS_DIVE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	73da      	strb	r2, [r3, #15]
 800370c:	e006      	b.n	800371c <SEAGLIDER_MSG_STOP_f+0x3c>
	}
	else if(*pch=='b'){
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b62      	cmp	r3, #98	; 0x62
 8003714:	d102      	bne.n	800371c <SEAGLIDER_MSG_STOP_f+0x3c>
	  seaglider_obj->dive_status=SEAGLIDER_STATUS_CLIMB;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	73da      	strb	r2, [r3, #15]
	}
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_STOP_RCVD,1);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2201      	movs	r2, #1
 8003722:	2101      	movs	r1, #1
 8003724:	4618      	mov	r0, r3
 8003726:	f009 f853 	bl	800c7d0 <osMessagePut>
	return SEAGLIDER_F_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	08012fbc 	.word	0x08012fbc
 8003738:	08012fc0 	.word	0x08012fc0

0800373c <SEAGLIDER_MSG_START_f>:
int SEAGLIDER_MSG_START_f(seaglider* seaglider_obj,uint8_t* msg)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,":");//header
 8003746:	4928      	ldr	r1, [pc, #160]	; (80037e8 <SEAGLIDER_MSG_START_f+0xac>)
 8003748:	6838      	ldr	r0, [r7, #0]
 800374a:	f00d f963 	bl	8010a14 <strtok>
 800374e:	60f8      	str	r0, [r7, #12]
	pch = strtok (NULL,",");//param_x  data save after stop
 8003750:	4926      	ldr	r1, [pc, #152]	; (80037ec <SEAGLIDER_MSG_START_f+0xb0>)
 8003752:	2000      	movs	r0, #0
 8003754:	f00d f95e 	bl	8010a14 <strtok>
 8003758:	60f8      	str	r0, [r7, #12]
	seaglider_obj->stop_trigger=strtol(pch,NULL,10);
 800375a:	220a      	movs	r2, #10
 800375c:	2100      	movs	r1, #0
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f00d fa30 	bl	8010bc4 <strtol>
 8003764:	4603      	mov	r3, r0
 8003766:	b2da      	uxtb	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	745a      	strb	r2, [r3, #17]
	pch = strtok (NULL,",");//param_y  dive/climb
 800376c:	491f      	ldr	r1, [pc, #124]	; (80037ec <SEAGLIDER_MSG_START_f+0xb0>)
 800376e:	2000      	movs	r0, #0
 8003770:	f00d f950 	bl	8010a14 <strtok>
 8003774:	60f8      	str	r0, [r7, #12]
	seaglider_obj->param_y=strtol(pch,NULL,10);
 8003776:	220a      	movs	r2, #10
 8003778:	2100      	movs	r1, #0
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f00d fa22 	bl	8010bc4 <strtol>
 8003780:	4603      	mov	r3, r0
 8003782:	461a      	mov	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8c3 2432 	str.w	r2, [r3, #1074]	; 0x432
	pch = strtok (NULL,",");//param_z  profile id
 800378a:	4918      	ldr	r1, [pc, #96]	; (80037ec <SEAGLIDER_MSG_START_f+0xb0>)
 800378c:	2000      	movs	r0, #0
 800378e:	f00d f941 	bl	8010a14 <strtok>
 8003792:	60f8      	str	r0, [r7, #12]
	seaglider_obj->param_z=strtol(pch,NULL,10);
 8003794:	220a      	movs	r2, #10
 8003796:	2100      	movs	r1, #0
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f00d fa13 	bl	8010bc4 <strtol>
 800379e:	4603      	mov	r3, r0
 80037a0:	461a      	mov	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8c3 2436 	str.w	r2, [r3, #1078]	; 0x436
	pch = strtok (NULL,",");//dive-climb
 80037a8:	4910      	ldr	r1, [pc, #64]	; (80037ec <SEAGLIDER_MSG_START_f+0xb0>)
 80037aa:	2000      	movs	r0, #0
 80037ac:	f00d f932 	bl	8010a14 <strtok>
 80037b0:	60f8      	str	r0, [r7, #12]
	if(*pch=='a'){
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b61      	cmp	r3, #97	; 0x61
 80037b8:	d103      	bne.n	80037c2 <SEAGLIDER_MSG_START_f+0x86>
	  seaglider_obj->dive_status=SEAGLIDER_STATUS_DIVE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	73da      	strb	r2, [r3, #15]
 80037c0:	e006      	b.n	80037d0 <SEAGLIDER_MSG_START_f+0x94>
	}
	else if(*pch=='b'){
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b62      	cmp	r3, #98	; 0x62
 80037c8:	d102      	bne.n	80037d0 <SEAGLIDER_MSG_START_f+0x94>
	  seaglider_obj->dive_status=SEAGLIDER_STATUS_CLIMB;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2202      	movs	r2, #2
 80037ce:	73da      	strb	r2, [r3, #15]
	}

	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_START_RCVD,1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2201      	movs	r2, #1
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f008 fff9 	bl	800c7d0 <osMessagePut>
	return SEAGLIDER_F_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	08012fbc 	.word	0x08012fbc
 80037ec:	08012fc0 	.word	0x08012fc0

080037f0 <SEAGLIDER_MSG_SEND_TXT_FILE_f>:
int SEAGLIDER_MSG_SEND_TXT_FILE_f(seaglider* seaglider_obj,uint8_t* msg)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_SEND_TXT_FILE_RCVD,1);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2201      	movs	r2, #1
 8003800:	2103      	movs	r1, #3
 8003802:	4618      	mov	r0, r3
 8003804:	f008 ffe4 	bl	800c7d0 <osMessagePut>
	return SEAGLIDER_F_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <SEAGLIDER_MSG_SEND_INFO_f>:
int SEAGLIDER_MSG_SEND_INFO_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	6039      	str	r1, [r7, #0]
	return SEAGLIDER_F_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr

08003828 <SEAGLIDER_MSG_RESET_f>:
int SEAGLIDER_MSG_RESET_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
	return SEAGLIDER_F_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr

0800383e <SEAGLIDER_MSG_TEST_f>:
int SEAGLIDER_MSG_TEST_f(seaglider* seaglider_obj,uint8_t* msg)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_TEST_RCVD,1);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2201      	movs	r2, #1
 800384e:	2102      	movs	r1, #2
 8003850:	4618      	mov	r0, r3
 8003852:	f008 ffbd 	bl	800c7d0 <osMessagePut>
	return SEAGLIDER_F_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <SEAGLIDER_MSG_CLOCK_f>:
int SEAGLIDER_MSG_CLOCK_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,":");//header
 800386a:	4914      	ldr	r1, [pc, #80]	; (80038bc <SEAGLIDER_MSG_CLOCK_f+0x5c>)
 800386c:	6838      	ldr	r0, [r7, #0]
 800386e:	f00d f8d1 	bl	8010a14 <strtok>
 8003872:	60f8      	str	r0, [r7, #12]
	pch = strtok (NULL,":");//date
 8003874:	4911      	ldr	r1, [pc, #68]	; (80038bc <SEAGLIDER_MSG_CLOCK_f+0x5c>)
 8003876:	2000      	movs	r0, #0
 8003878:	f00d f8cc 	bl	8010a14 <strtok>
 800387c:	60f8      	str	r0, [r7, #12]
	memcpy(seaglider_obj->date,pch,8);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	331a      	adds	r3, #26
 8003882:	2208      	movs	r2, #8
 8003884:	68f9      	ldr	r1, [r7, #12]
 8003886:	4618      	mov	r0, r3
 8003888:	f00c f8b3 	bl	800f9f2 <memcpy>
	pch = strtok (NULL,":");//time
 800388c:	490b      	ldr	r1, [pc, #44]	; (80038bc <SEAGLIDER_MSG_CLOCK_f+0x5c>)
 800388e:	2000      	movs	r0, #0
 8003890:	f00d f8c0 	bl	8010a14 <strtok>
 8003894:	60f8      	str	r0, [r7, #12]
	memcpy(seaglider_obj->time,pch,8);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3322      	adds	r3, #34	; 0x22
 800389a:	2208      	movs	r2, #8
 800389c:	68f9      	ldr	r1, [r7, #12]
 800389e:	4618      	mov	r0, r3
 80038a0:	f00c f8a7 	bl	800f9f2 <memcpy>

	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_CLOCK_RCVD,1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2201      	movs	r2, #1
 80038aa:	2104      	movs	r1, #4
 80038ac:	4618      	mov	r0, r3
 80038ae:	f008 ff8f 	bl	800c7d0 <osMessagePut>
	return SEAGLIDER_F_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	08012fbc 	.word	0x08012fbc

080038c0 <SEAGLIDER_MSG_WAKEUP_f>:

int SEAGLIDER_MSG_WAKEUP_f(seaglider* seaglider_obj,uint8_t* msg)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_WAKEUP_RCVD,1);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2201      	movs	r2, #1
 80038d0:	2105      	movs	r1, #5
 80038d2:	4618      	mov	r0, r3
 80038d4:	f008 ff7c 	bl	800c7d0 <osMessagePut>
	return SEAGLIDER_F_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <SEAGLIDER_MSG_CLEAR_f>:

int SEAGLIDER_MSG_CLEAR_f(seaglider* seaglider_obj,uint8_t* msg)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_CLEAR_RCVD,1);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2201      	movs	r2, #1
 80038f2:	2107      	movs	r1, #7
 80038f4:	4618      	mov	r0, r3
 80038f6:	f008 ff6b 	bl	800c7d0 <osMessagePut>
	return SEAGLIDER_F_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <SEAGLIDER_MSG_POFF_f>:

int SEAGLIDER_MSG_POFF_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_POFF_RCVD,1);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2201      	movs	r2, #1
 8003914:	2108      	movs	r1, #8
 8003916:	4618      	mov	r0, r3
 8003918:	f008 ff5a 	bl	800c7d0 <osMessagePut>
	return SEAGLIDER_F_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <SEAGLIDER_MSG_ERRORS_f>:
int SEAGLIDER_MSG_ERRORS_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_ERRORS_RCVD,1);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2201      	movs	r2, #1
 8003936:	2109      	movs	r1, #9
 8003938:	4618      	mov	r0, r3
 800393a:	f008 ff49 	bl	800c7d0 <osMessagePut>
	return SEAGLIDER_F_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <set_default_settings>:
char settings_filename[]= SETTINGS_FILE;
extern UART_HandleTypeDef huart5;
settings_str run_cfg;

void set_default_settings()
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
	run_cfg.last_file_index=0;
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <set_default_settings+0x30>)
 800394e:	2200      	movs	r2, #0
 8003950:	605a      	str	r2, [r3, #4]
	run_cfg.crc=0;
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <set_default_settings+0x30>)
 8003954:	2200      	movs	r2, #0
 8003956:	831a      	strh	r2, [r3, #24]
	run_cfg.sensor_errors.P_in=0;
 8003958:	4b07      	ldr	r3, [pc, #28]	; (8003978 <set_default_settings+0x30>)
 800395a:	2200      	movs	r2, #0
 800395c:	609a      	str	r2, [r3, #8]
	run_cfg.sensor_errors.rH_gas=0;
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <set_default_settings+0x30>)
 8003960:	2200      	movs	r2, #0
 8003962:	60da      	str	r2, [r3, #12]
	run_cfg.sensor_errors.T_control=0;
 8003964:	4b04      	ldr	r3, [pc, #16]	; (8003978 <set_default_settings+0x30>)
 8003966:	2200      	movs	r2, #0
 8003968:	611a      	str	r2, [r3, #16]
	run_cfg.sensor_errors.P_pump=0;
 800396a:	4b03      	ldr	r3, [pc, #12]	; (8003978 <set_default_settings+0x30>)
 800396c:	2200      	movs	r2, #0
 800396e:	615a      	str	r2, [r3, #20]
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	20001d30 	.word	0x20001d30

0800397c <read_settings>:

F_RES read_settings()
{
 800397c:	b580      	push	{r7, lr}
 800397e:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 8003982:	af00      	add	r7, sp, #0
	uint32_t bytesreaded;
	FIL settings_file;
	char tmp_str[FILENAME_LEN+2];
	sprintf(tmp_str,"%u:%s",run_cfg.disk_id,settings_filename);
 8003984:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <read_settings+0x8c>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4638      	mov	r0, r7
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <read_settings+0x90>)
 800398c:	4920      	ldr	r1, [pc, #128]	; (8003a10 <read_settings+0x94>)
 800398e:	f00c f955 	bl	800fc3c <siprintf>
	if(f_open(&settings_file,tmp_str,FA_READ)==FR_OK){
 8003992:	4639      	mov	r1, r7
 8003994:	f107 0320 	add.w	r3, r7, #32
 8003998:	2201      	movs	r2, #1
 800399a:	4618      	mov	r0, r3
 800399c:	f007 fca4 	bl	800b2e8 <f_open>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d129      	bne.n	80039fa <read_settings+0x7e>
	  if(f_read(&settings_file,(uint8_t*)&run_cfg,sizeof(run_cfg),(UINT*)&bytesreaded)==FR_OK){
 80039a6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80039aa:	f107 0020 	add.w	r0, r7, #32
 80039ae:	221a      	movs	r2, #26
 80039b0:	4915      	ldr	r1, [pc, #84]	; (8003a08 <read_settings+0x8c>)
 80039b2:	f007 ff5a 	bl	800b86a <f_read>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d11c      	bne.n	80039f6 <read_settings+0x7a>
	   f_close(&settings_file);
 80039bc:	f107 0320 	add.w	r3, r7, #32
 80039c0:	4618      	mov	r0, r3
 80039c2:	f008 fb9e 	bl	800c102 <f_close>
	   if(bytesreaded!=sizeof(run_cfg))return F_ERR;
 80039c6:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80039ca:	2b1a      	cmp	r3, #26
 80039cc:	d001      	beq.n	80039d2 <read_settings+0x56>
 80039ce:	2301      	movs	r3, #1
 80039d0:	e014      	b.n	80039fc <read_settings+0x80>
	   int16_t CRC16_calculated=usMBCRC16((uint8_t*)&run_cfg,sizeof(run_cfg)-2);
 80039d2:	2118      	movs	r1, #24
 80039d4:	480c      	ldr	r0, [pc, #48]	; (8003a08 <read_settings+0x8c>)
 80039d6:	f7ff f935 	bl	8002c44 <usMBCRC16>
 80039da:	4603      	mov	r3, r0
 80039dc:	f8a7 327e 	strh.w	r3, [r7, #638]	; 0x27e
	   if(CRC16_calculated==run_cfg.crc) {
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <read_settings+0x8c>)
 80039e2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80039e6:	f9b7 227e 	ldrsh.w	r2, [r7, #638]	; 0x27e
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d101      	bne.n	80039f2 <read_settings+0x76>
		  return F_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e004      	b.n	80039fc <read_settings+0x80>
	   }
	   return F_ERR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e002      	b.n	80039fc <read_settings+0x80>
	  }
	  return F_ERR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <read_settings+0x80>
	}
	return F_ERR;
 80039fa:	2301      	movs	r3, #1
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	f507 7720 	add.w	r7, r7, #640	; 0x280
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20001d30 	.word	0x20001d30
 8003a0c:	2000002c 	.word	0x2000002c
 8003a10:	08012fc4 	.word	0x08012fc4

08003a14 <save_settings>:



F_RES save_settings()
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 8003a1a:	af00      	add	r7, sp, #0
	uint32_t byteswritten;
	FIL settings_file;
	char tmp_str[FILENAME_LEN+2];
	sprintf(tmp_str,"%u:%s",run_cfg.disk_id,settings_filename);
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <save_settings+0x80>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4638      	mov	r0, r7
 8003a22:	4b1d      	ldr	r3, [pc, #116]	; (8003a98 <save_settings+0x84>)
 8003a24:	491d      	ldr	r1, [pc, #116]	; (8003a9c <save_settings+0x88>)
 8003a26:	f00c f909 	bl	800fc3c <siprintf>

	if(f_open(&settings_file,tmp_str,FA_CREATE_ALWAYS|FA_WRITE)==FR_OK){
 8003a2a:	4639      	mov	r1, r7
 8003a2c:	f107 0320 	add.w	r3, r7, #32
 8003a30:	220a      	movs	r2, #10
 8003a32:	4618      	mov	r0, r3
 8003a34:	f007 fc58 	bl	800b2e8 <f_open>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d124      	bne.n	8003a88 <save_settings+0x74>
	  int16_t CRC16_calculated=usMBCRC16((uint8_t*)&run_cfg,sizeof(run_cfg)-2);
 8003a3e:	2118      	movs	r1, #24
 8003a40:	4814      	ldr	r0, [pc, #80]	; (8003a94 <save_settings+0x80>)
 8003a42:	f7ff f8ff 	bl	8002c44 <usMBCRC16>
 8003a46:	4603      	mov	r3, r0
 8003a48:	f8a7 327e 	strh.w	r3, [r7, #638]	; 0x27e
	  run_cfg.crc=CRC16_calculated;
 8003a4c:	4a11      	ldr	r2, [pc, #68]	; (8003a94 <save_settings+0x80>)
 8003a4e:	f8b7 327e 	ldrh.w	r3, [r7, #638]	; 0x27e
 8003a52:	8313      	strh	r3, [r2, #24]
	  if(f_write(&settings_file,(uint8_t*)&run_cfg,sizeof(run_cfg),(UINT*)&byteswritten)==FR_OK){
 8003a54:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003a58:	f107 0020 	add.w	r0, r7, #32
 8003a5c:	221a      	movs	r2, #26
 8003a5e:	490d      	ldr	r1, [pc, #52]	; (8003a94 <save_settings+0x80>)
 8003a60:	f008 f87d 	bl	800bb5e <f_write>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10c      	bne.n	8003a84 <save_settings+0x70>
		  if(byteswritten==sizeof(run_cfg)){
 8003a6a:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8003a6e:	2b1a      	cmp	r3, #26
 8003a70:	d106      	bne.n	8003a80 <save_settings+0x6c>
			f_close(&settings_file);
 8003a72:	f107 0320 	add.w	r3, r7, #32
 8003a76:	4618      	mov	r0, r3
 8003a78:	f008 fb43 	bl	800c102 <f_close>
			return F_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e004      	b.n	8003a8a <save_settings+0x76>
		  }
		  return F_ERR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e002      	b.n	8003a8a <save_settings+0x76>
	  }
	  return F_ERR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <save_settings+0x76>
	}
	return F_ERR;
 8003a88:	2301      	movs	r3, #1
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f507 7720 	add.w	r7, r7, #640	; 0x280
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	20001d30 	.word	0x20001d30
 8003a98:	2000002c 	.word	0x2000002c
 8003a9c:	08012fc4 	.word	0x08012fc4

08003aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003aa6:	4b18      	ldr	r3, [pc, #96]	; (8003b08 <HAL_MspInit+0x68>)
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	4a17      	ldr	r2, [pc, #92]	; (8003b08 <HAL_MspInit+0x68>)
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	6193      	str	r3, [r2, #24]
 8003ab2:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <HAL_MspInit+0x68>)
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003abe:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_MspInit+0x68>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	4a11      	ldr	r2, [pc, #68]	; (8003b08 <HAL_MspInit+0x68>)
 8003ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	61d3      	str	r3, [r2, #28]
 8003aca:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <HAL_MspInit+0x68>)
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	607b      	str	r3, [r7, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	210f      	movs	r1, #15
 8003ada:	f06f 0001 	mvn.w	r0, #1
 8003ade:	f000 fc4c 	bl	800437a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <HAL_MspInit+0x6c>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <HAL_MspInit+0x6c>)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003afe:	bf00      	nop
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40010000 	.word	0x40010000

08003b10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	; 0x28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b18:	f107 0314 	add.w	r3, r7, #20
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a4d      	ldr	r2, [pc, #308]	; (8003c60 <HAL_SPI_MspInit+0x150>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	f040 8092 	bne.w	8003c56 <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b32:	4b4c      	ldr	r3, [pc, #304]	; (8003c64 <HAL_SPI_MspInit+0x154>)
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	4a4b      	ldr	r2, [pc, #300]	; (8003c64 <HAL_SPI_MspInit+0x154>)
 8003b38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b3c:	6193      	str	r3, [r2, #24]
 8003b3e:	4b49      	ldr	r3, [pc, #292]	; (8003c64 <HAL_SPI_MspInit+0x154>)
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b4a:	4b46      	ldr	r3, [pc, #280]	; (8003c64 <HAL_SPI_MspInit+0x154>)
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	4a45      	ldr	r2, [pc, #276]	; (8003c64 <HAL_SPI_MspInit+0x154>)
 8003b50:	f043 0308 	orr.w	r3, r3, #8
 8003b54:	6193      	str	r3, [r2, #24]
 8003b56:	4b43      	ldr	r3, [pc, #268]	; (8003c64 <HAL_SPI_MspInit+0x154>)
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003b62:	2328      	movs	r3, #40	; 0x28
 8003b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b66:	2302      	movs	r3, #2
 8003b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b6e:	f107 0314 	add.w	r3, r7, #20
 8003b72:	4619      	mov	r1, r3
 8003b74:	483c      	ldr	r0, [pc, #240]	; (8003c68 <HAL_SPI_MspInit+0x158>)
 8003b76:	f001 f81f 	bl	8004bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b7a:	2310      	movs	r3, #16
 8003b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b86:	f107 0314 	add.w	r3, r7, #20
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4836      	ldr	r0, [pc, #216]	; (8003c68 <HAL_SPI_MspInit+0x158>)
 8003b8e:	f001 f813 	bl	8004bb8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003b92:	4b36      	ldr	r3, [pc, #216]	; (8003c6c <HAL_SPI_MspInit+0x15c>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba8:	4a30      	ldr	r2, [pc, #192]	; (8003c6c <HAL_SPI_MspInit+0x15c>)
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	6053      	str	r3, [r2, #4]

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8003bae:	4b30      	ldr	r3, [pc, #192]	; (8003c70 <HAL_SPI_MspInit+0x160>)
 8003bb0:	4a30      	ldr	r2, [pc, #192]	; (8003c74 <HAL_SPI_MspInit+0x164>)
 8003bb2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bb4:	4b2e      	ldr	r3, [pc, #184]	; (8003c70 <HAL_SPI_MspInit+0x160>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bba:	4b2d      	ldr	r3, [pc, #180]	; (8003c70 <HAL_SPI_MspInit+0x160>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	; (8003c70 <HAL_SPI_MspInit+0x160>)
 8003bc2:	2280      	movs	r2, #128	; 0x80
 8003bc4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bc6:	4b2a      	ldr	r3, [pc, #168]	; (8003c70 <HAL_SPI_MspInit+0x160>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bcc:	4b28      	ldr	r3, [pc, #160]	; (8003c70 <HAL_SPI_MspInit+0x160>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003bd2:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <HAL_SPI_MspInit+0x160>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003bd8:	4b25      	ldr	r3, [pc, #148]	; (8003c70 <HAL_SPI_MspInit+0x160>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003bde:	4824      	ldr	r0, [pc, #144]	; (8003c70 <HAL_SPI_MspInit+0x160>)
 8003be0:	f000 fbf6 	bl	80043d0 <HAL_DMA_Init>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8003bea:	f7ff f825 	bl	8002c38 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a1f      	ldr	r2, [pc, #124]	; (8003c70 <HAL_SPI_MspInit+0x160>)
 8003bf2:	64da      	str	r2, [r3, #76]	; 0x4c
 8003bf4:	4a1e      	ldr	r2, [pc, #120]	; (8003c70 <HAL_SPI_MspInit+0x160>)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003bfa:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <HAL_SPI_MspInit+0x168>)
 8003bfc:	4a1f      	ldr	r2, [pc, #124]	; (8003c7c <HAL_SPI_MspInit+0x16c>)
 8003bfe:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c00:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <HAL_SPI_MspInit+0x168>)
 8003c02:	2210      	movs	r2, #16
 8003c04:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c06:	4b1c      	ldr	r3, [pc, #112]	; (8003c78 <HAL_SPI_MspInit+0x168>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c0c:	4b1a      	ldr	r3, [pc, #104]	; (8003c78 <HAL_SPI_MspInit+0x168>)
 8003c0e:	2280      	movs	r2, #128	; 0x80
 8003c10:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c12:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <HAL_SPI_MspInit+0x168>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c18:	4b17      	ldr	r3, [pc, #92]	; (8003c78 <HAL_SPI_MspInit+0x168>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003c1e:	4b16      	ldr	r3, [pc, #88]	; (8003c78 <HAL_SPI_MspInit+0x168>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c24:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <HAL_SPI_MspInit+0x168>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003c2a:	4813      	ldr	r0, [pc, #76]	; (8003c78 <HAL_SPI_MspInit+0x168>)
 8003c2c:	f000 fbd0 	bl	80043d0 <HAL_DMA_Init>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8003c36:	f7fe ffff 	bl	8002c38 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a0e      	ldr	r2, [pc, #56]	; (8003c78 <HAL_SPI_MspInit+0x168>)
 8003c3e:	649a      	str	r2, [r3, #72]	; 0x48
 8003c40:	4a0d      	ldr	r2, [pc, #52]	; (8003c78 <HAL_SPI_MspInit+0x168>)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003c46:	2200      	movs	r2, #0
 8003c48:	2105      	movs	r1, #5
 8003c4a:	2023      	movs	r0, #35	; 0x23
 8003c4c:	f000 fb95 	bl	800437a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003c50:	2023      	movs	r0, #35	; 0x23
 8003c52:	f000 fbae 	bl	80043b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003c56:	bf00      	nop
 8003c58:	3728      	adds	r7, #40	; 0x28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40013000 	.word	0x40013000
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40010c00 	.word	0x40010c00
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	20000a64 	.word	0x20000a64
 8003c74:	4002001c 	.word	0x4002001c
 8003c78:	20000aa8 	.word	0x20000aa8
 8003c7c:	40020030 	.word	0x40020030

08003c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08c      	sub	sp, #48	; 0x30
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c88:	f107 0320 	add.w	r3, r7, #32
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	605a      	str	r2, [r3, #4]
 8003c92:	609a      	str	r2, [r3, #8]
 8003c94:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART5)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a46      	ldr	r2, [pc, #280]	; (8003db4 <HAL_UART_MspInit+0x134>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d145      	bne.n	8003d2c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003ca0:	4b45      	ldr	r3, [pc, #276]	; (8003db8 <HAL_UART_MspInit+0x138>)
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	4a44      	ldr	r2, [pc, #272]	; (8003db8 <HAL_UART_MspInit+0x138>)
 8003ca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003caa:	61d3      	str	r3, [r2, #28]
 8003cac:	4b42      	ldr	r3, [pc, #264]	; (8003db8 <HAL_UART_MspInit+0x138>)
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cb8:	4b3f      	ldr	r3, [pc, #252]	; (8003db8 <HAL_UART_MspInit+0x138>)
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	4a3e      	ldr	r2, [pc, #248]	; (8003db8 <HAL_UART_MspInit+0x138>)
 8003cbe:	f043 0310 	orr.w	r3, r3, #16
 8003cc2:	6193      	str	r3, [r2, #24]
 8003cc4:	4b3c      	ldr	r3, [pc, #240]	; (8003db8 <HAL_UART_MspInit+0x138>)
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cd0:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <HAL_UART_MspInit+0x138>)
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	4a38      	ldr	r2, [pc, #224]	; (8003db8 <HAL_UART_MspInit+0x138>)
 8003cd6:	f043 0320 	orr.w	r3, r3, #32
 8003cda:	6193      	str	r3, [r2, #24]
 8003cdc:	4b36      	ldr	r3, [pc, #216]	; (8003db8 <HAL_UART_MspInit+0x138>)
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cf6:	f107 0320 	add.w	r3, r7, #32
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	482f      	ldr	r0, [pc, #188]	; (8003dbc <HAL_UART_MspInit+0x13c>)
 8003cfe:	f000 ff5b 	bl	8004bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d02:	2304      	movs	r3, #4
 8003d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d06:	2300      	movs	r3, #0
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d0e:	f107 0320 	add.w	r3, r7, #32
 8003d12:	4619      	mov	r1, r3
 8003d14:	482a      	ldr	r0, [pc, #168]	; (8003dc0 <HAL_UART_MspInit+0x140>)
 8003d16:	f000 ff4f 	bl	8004bb8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2105      	movs	r1, #5
 8003d1e:	2035      	movs	r0, #53	; 0x35
 8003d20:	f000 fb2b 	bl	800437a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003d24:	2035      	movs	r0, #53	; 0x35
 8003d26:	f000 fb44 	bl	80043b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003d2a:	e03e      	b.n	8003daa <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a24      	ldr	r2, [pc, #144]	; (8003dc4 <HAL_UART_MspInit+0x144>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d139      	bne.n	8003daa <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d36:	4b20      	ldr	r3, [pc, #128]	; (8003db8 <HAL_UART_MspInit+0x138>)
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	4a1f      	ldr	r2, [pc, #124]	; (8003db8 <HAL_UART_MspInit+0x138>)
 8003d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d40:	6193      	str	r3, [r2, #24]
 8003d42:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <HAL_UART_MspInit+0x138>)
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d4e:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <HAL_UART_MspInit+0x138>)
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	4a19      	ldr	r2, [pc, #100]	; (8003db8 <HAL_UART_MspInit+0x138>)
 8003d54:	f043 0304 	orr.w	r3, r3, #4
 8003d58:	6193      	str	r3, [r2, #24]
 8003d5a:	4b17      	ldr	r3, [pc, #92]	; (8003db8 <HAL_UART_MspInit+0x138>)
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d70:	2303      	movs	r3, #3
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d74:	f107 0320 	add.w	r3, r7, #32
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4813      	ldr	r0, [pc, #76]	; (8003dc8 <HAL_UART_MspInit+0x148>)
 8003d7c:	f000 ff1c 	bl	8004bb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d8e:	f107 0320 	add.w	r3, r7, #32
 8003d92:	4619      	mov	r1, r3
 8003d94:	480c      	ldr	r0, [pc, #48]	; (8003dc8 <HAL_UART_MspInit+0x148>)
 8003d96:	f000 ff0f 	bl	8004bb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2105      	movs	r1, #5
 8003d9e:	2025      	movs	r0, #37	; 0x25
 8003da0:	f000 faeb 	bl	800437a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003da4:	2025      	movs	r0, #37	; 0x25
 8003da6:	f000 fb04 	bl	80043b2 <HAL_NVIC_EnableIRQ>
}
 8003daa:	bf00      	nop
 8003dac:	3730      	adds	r7, #48	; 0x30
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40005000 	.word	0x40005000
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	40011000 	.word	0x40011000
 8003dc0:	40011400 	.word	0x40011400
 8003dc4:	40013800 	.word	0x40013800
 8003dc8:	40010800 	.word	0x40010800

08003dcc <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  if(hhcd->Instance==USB_OTG_FS)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ddc:	d10b      	bne.n	8003df6 <HAL_HCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <HAL_HCD_MspInit+0x34>)
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	4a07      	ldr	r2, [pc, #28]	; (8003e00 <HAL_HCD_MspInit+0x34>)
 8003de4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003de8:	6153      	str	r3, [r2, #20]
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <HAL_HCD_MspInit+0x34>)
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	40021000 	.word	0x40021000

08003e04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08c      	sub	sp, #48	; 0x30
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003e1a:	4b2e      	ldr	r3, [pc, #184]	; (8003ed4 <HAL_InitTick+0xd0>)
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	4a2d      	ldr	r2, [pc, #180]	; (8003ed4 <HAL_InitTick+0xd0>)
 8003e20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e24:	6193      	str	r3, [r2, #24]
 8003e26:	4b2b      	ldr	r3, [pc, #172]	; (8003ed4 <HAL_InitTick+0xd0>)
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003e32:	f107 020c 	add.w	r2, r7, #12
 8003e36:	f107 0310 	add.w	r3, r7, #16
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f001 fdc9 	bl	80059d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003e42:	f001 fdb3 	bl	80059ac <HAL_RCC_GetPCLK2Freq>
 8003e46:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	4a23      	ldr	r2, [pc, #140]	; (8003ed8 <HAL_InitTick+0xd4>)
 8003e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e50:	0c9b      	lsrs	r3, r3, #18
 8003e52:	3b01      	subs	r3, #1
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003e56:	4b21      	ldr	r3, [pc, #132]	; (8003edc <HAL_InitTick+0xd8>)
 8003e58:	4a21      	ldr	r2, [pc, #132]	; (8003ee0 <HAL_InitTick+0xdc>)
 8003e5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003e5c:	4b1f      	ldr	r3, [pc, #124]	; (8003edc <HAL_InitTick+0xd8>)
 8003e5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e62:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003e64:	4a1d      	ldr	r2, [pc, #116]	; (8003edc <HAL_InitTick+0xd8>)
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003e6a:	4b1c      	ldr	r3, [pc, #112]	; (8003edc <HAL_InitTick+0xd8>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e70:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <HAL_InitTick+0xd8>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e76:	4b19      	ldr	r3, [pc, #100]	; (8003edc <HAL_InitTick+0xd8>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003e7c:	4817      	ldr	r0, [pc, #92]	; (8003edc <HAL_InitTick+0xd8>)
 8003e7e:	f002 faf9 	bl	8006474 <HAL_TIM_Base_Init>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003e88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d11b      	bne.n	8003ec8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003e90:	4812      	ldr	r0, [pc, #72]	; (8003edc <HAL_InitTick+0xd8>)
 8003e92:	f002 fb47 	bl	8006524 <HAL_TIM_Base_Start_IT>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d111      	bne.n	8003ec8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003ea4:	2019      	movs	r0, #25
 8003ea6:	f000 fa84 	bl	80043b2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b0f      	cmp	r3, #15
 8003eae:	d808      	bhi.n	8003ec2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	2019      	movs	r0, #25
 8003eb6:	f000 fa60 	bl	800437a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003eba:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <HAL_InitTick+0xe0>)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	e002      	b.n	8003ec8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003ec8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3730      	adds	r7, #48	; 0x30
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	431bde83 	.word	0x431bde83
 8003edc:	20001d4c 	.word	0x20001d4c
 8003ee0:	40012c00 	.word	0x40012c00
 8003ee4:	20000040 	.word	0x20000040

08003ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003eec:	e7fe      	b.n	8003eec <NMI_Handler+0x4>

08003eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ef2:	e7fe      	b.n	8003ef2 <HardFault_Handler+0x4>

08003ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ef8:	e7fe      	b.n	8003ef8 <MemManage_Handler+0x4>

08003efa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003efa:	b480      	push	{r7}
 8003efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003efe:	e7fe      	b.n	8003efe <BusFault_Handler+0x4>

08003f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f04:	e7fe      	b.n	8003f04 <UsageFault_Handler+0x4>

08003f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f06:	b480      	push	{r7}
 8003f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr
	...

08003f14 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003f18:	4802      	ldr	r0, [pc, #8]	; (8003f24 <DMA1_Channel2_IRQHandler+0x10>)
 8003f1a:	f000 fc11 	bl	8004740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000a64 	.word	0x20000a64

08003f28 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003f2c:	4802      	ldr	r0, [pc, #8]	; (8003f38 <DMA1_Channel3_IRQHandler+0x10>)
 8003f2e:	f000 fc07 	bl	8004740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003f32:	bf00      	nop
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000aa8 	.word	0x20000aa8

08003f3c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f40:	4802      	ldr	r0, [pc, #8]	; (8003f4c <TIM1_UP_IRQHandler+0x10>)
 8003f42:	f002 fb49 	bl	80065d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20001d4c 	.word	0x20001d4c

08003f50 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003f54:	4802      	ldr	r0, [pc, #8]	; (8003f60 <SPI1_IRQHandler+0x10>)
 8003f56:	f002 f8e3 	bl	8006120 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000a0c 	.word	0x20000a0c

08003f64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f68:	4802      	ldr	r0, [pc, #8]	; (8003f74 <USART1_IRQHandler+0x10>)
 8003f6a:	f002 fe33 	bl	8006bd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f6e:	bf00      	nop
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000b30 	.word	0x20000b30

08003f78 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003f7c:	4802      	ldr	r0, [pc, #8]	; (8003f88 <UART5_IRQHandler+0x10>)
 8003f7e:	f002 fe29 	bl	8006bd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003f82:	bf00      	nop
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000aec 	.word	0x20000aec

08003f8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
	return 1;
 8003f90:	2301      	movs	r3, #1
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr

08003f9a <_kill>:

int _kill(int pid, int sig)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b082      	sub	sp, #8
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003fa4:	f00b fc02 	bl	800f7ac <__errno>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2216      	movs	r2, #22
 8003fac:	601a      	str	r2, [r3, #0]
	return -1;
 8003fae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <_exit>:

void _exit (int status)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003fc2:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff ffe7 	bl	8003f9a <_kill>
	while (1) {}		/* Make sure we hang here */
 8003fcc:	e7fe      	b.n	8003fcc <_exit+0x12>

08003fce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b086      	sub	sp, #24
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	e00a      	b.n	8003ff6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003fe0:	f3af 8000 	nop.w
 8003fe4:	4601      	mov	r1, r0
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	60ba      	str	r2, [r7, #8]
 8003fec:	b2ca      	uxtb	r2, r1
 8003fee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	dbf0      	blt.n	8003fe0 <_read+0x12>
	}

return len;
 8003ffe:	687b      	ldr	r3, [r7, #4]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	e009      	b.n	800402e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	60ba      	str	r2, [r7, #8]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	3301      	adds	r3, #1
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	429a      	cmp	r2, r3
 8004034:	dbf1      	blt.n	800401a <_write+0x12>
	}
	return len;
 8004036:	687b      	ldr	r3, [r7, #4]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <_close>:

int _close(int file)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
	return -1;
 8004048:	f04f 33ff 	mov.w	r3, #4294967295
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr

08004056 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004066:	605a      	str	r2, [r3, #4]
	return 0;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr

08004074 <_isatty>:

int _isatty(int file)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
	return 1;
 800407c:	2301      	movs	r3, #1
}
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr

08004088 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
	return 0;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040a8:	4a14      	ldr	r2, [pc, #80]	; (80040fc <_sbrk+0x5c>)
 80040aa:	4b15      	ldr	r3, [pc, #84]	; (8004100 <_sbrk+0x60>)
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040b4:	4b13      	ldr	r3, [pc, #76]	; (8004104 <_sbrk+0x64>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d102      	bne.n	80040c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040bc:	4b11      	ldr	r3, [pc, #68]	; (8004104 <_sbrk+0x64>)
 80040be:	4a12      	ldr	r2, [pc, #72]	; (8004108 <_sbrk+0x68>)
 80040c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040c2:	4b10      	ldr	r3, [pc, #64]	; (8004104 <_sbrk+0x64>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4413      	add	r3, r2
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d207      	bcs.n	80040e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040d0:	f00b fb6c 	bl	800f7ac <__errno>
 80040d4:	4603      	mov	r3, r0
 80040d6:	220c      	movs	r2, #12
 80040d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040da:	f04f 33ff 	mov.w	r3, #4294967295
 80040de:	e009      	b.n	80040f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040e0:	4b08      	ldr	r3, [pc, #32]	; (8004104 <_sbrk+0x64>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040e6:	4b07      	ldr	r3, [pc, #28]	; (8004104 <_sbrk+0x64>)
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4413      	add	r3, r2
 80040ee:	4a05      	ldr	r2, [pc, #20]	; (8004104 <_sbrk+0x64>)
 80040f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040f2:	68fb      	ldr	r3, [r7, #12]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20010000 	.word	0x20010000
 8004100:	00000400 	.word	0x00000400
 8004104:	20001d94 	.word	0x20001d94
 8004108:	20009a28 	.word	0x20009a28

0800410c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004110:	bf00      	nop
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004118:	480c      	ldr	r0, [pc, #48]	; (800414c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800411a:	490d      	ldr	r1, [pc, #52]	; (8004150 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800411c:	4a0d      	ldr	r2, [pc, #52]	; (8004154 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800411e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004120:	e002      	b.n	8004128 <LoopCopyDataInit>

08004122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004126:	3304      	adds	r3, #4

08004128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800412a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800412c:	d3f9      	bcc.n	8004122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800412e:	4a0a      	ldr	r2, [pc, #40]	; (8004158 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004130:	4c0a      	ldr	r4, [pc, #40]	; (800415c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004134:	e001      	b.n	800413a <LoopFillZerobss>

08004136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004138:	3204      	adds	r2, #4

0800413a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800413a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800413c:	d3fb      	bcc.n	8004136 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800413e:	f7ff ffe5 	bl	800410c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004142:	f00b fc2f 	bl	800f9a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004146:	f7fd fe73 	bl	8001e30 <main>
  bx lr
 800414a:	4770      	bx	lr
  ldr r0, =_sdata
 800414c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004150:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8004154:	08013b50 	.word	0x08013b50
  ldr r2, =_sbss
 8004158:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 800415c:	20009a24 	.word	0x20009a24

08004160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004160:	e7fe      	b.n	8004160 <ADC1_2_IRQHandler>
	...

08004164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004168:	4b08      	ldr	r3, [pc, #32]	; (800418c <HAL_Init+0x28>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a07      	ldr	r2, [pc, #28]	; (800418c <HAL_Init+0x28>)
 800416e:	f043 0310 	orr.w	r3, r3, #16
 8004172:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004174:	2003      	movs	r0, #3
 8004176:	f000 f8f5 	bl	8004364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800417a:	200f      	movs	r0, #15
 800417c:	f7ff fe42 	bl	8003e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004180:	f7ff fc8e 	bl	8003aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40022000 	.word	0x40022000

08004190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <HAL_IncTick+0x1c>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <HAL_IncTick+0x20>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4413      	add	r3, r2
 80041a0:	4a03      	ldr	r2, [pc, #12]	; (80041b0 <HAL_IncTick+0x20>)
 80041a2:	6013      	str	r3, [r2, #0]
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr
 80041ac:	20000044 	.word	0x20000044
 80041b0:	20001d98 	.word	0x20001d98

080041b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return uwTick;
 80041b8:	4b02      	ldr	r3, [pc, #8]	; (80041c4 <HAL_GetTick+0x10>)
 80041ba:	681b      	ldr	r3, [r3, #0]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr
 80041c4:	20001d98 	.word	0x20001d98

080041c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041d0:	f7ff fff0 	bl	80041b4 <HAL_GetTick>
 80041d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e0:	d005      	beq.n	80041ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041e2:	4b0a      	ldr	r3, [pc, #40]	; (800420c <HAL_Delay+0x44>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4413      	add	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041ee:	bf00      	nop
 80041f0:	f7ff ffe0 	bl	80041b4 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d8f7      	bhi.n	80041f0 <HAL_Delay+0x28>
  {
  }
}
 8004200:	bf00      	nop
 8004202:	bf00      	nop
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000044 	.word	0x20000044

08004210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004220:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <__NVIC_SetPriorityGrouping+0x44>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800422c:	4013      	ands	r3, r2
 800422e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800423c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004242:	4a04      	ldr	r2, [pc, #16]	; (8004254 <__NVIC_SetPriorityGrouping+0x44>)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	60d3      	str	r3, [r2, #12]
}
 8004248:	bf00      	nop
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	e000ed00 	.word	0xe000ed00

08004258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800425c:	4b04      	ldr	r3, [pc, #16]	; (8004270 <__NVIC_GetPriorityGrouping+0x18>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	0a1b      	lsrs	r3, r3, #8
 8004262:	f003 0307 	and.w	r3, r3, #7
}
 8004266:	4618      	mov	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	e000ed00 	.word	0xe000ed00

08004274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800427e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004282:	2b00      	cmp	r3, #0
 8004284:	db0b      	blt.n	800429e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004286:	79fb      	ldrb	r3, [r7, #7]
 8004288:	f003 021f 	and.w	r2, r3, #31
 800428c:	4906      	ldr	r1, [pc, #24]	; (80042a8 <__NVIC_EnableIRQ+0x34>)
 800428e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	2001      	movs	r0, #1
 8004296:	fa00 f202 	lsl.w	r2, r0, r2
 800429a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr
 80042a8:	e000e100 	.word	0xe000e100

080042ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	6039      	str	r1, [r7, #0]
 80042b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	db0a      	blt.n	80042d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	490c      	ldr	r1, [pc, #48]	; (80042f8 <__NVIC_SetPriority+0x4c>)
 80042c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ca:	0112      	lsls	r2, r2, #4
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	440b      	add	r3, r1
 80042d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042d4:	e00a      	b.n	80042ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	4908      	ldr	r1, [pc, #32]	; (80042fc <__NVIC_SetPriority+0x50>)
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	3b04      	subs	r3, #4
 80042e4:	0112      	lsls	r2, r2, #4
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	440b      	add	r3, r1
 80042ea:	761a      	strb	r2, [r3, #24]
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	e000e100 	.word	0xe000e100
 80042fc:	e000ed00 	.word	0xe000ed00

08004300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004300:	b480      	push	{r7}
 8004302:	b089      	sub	sp, #36	; 0x24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f1c3 0307 	rsb	r3, r3, #7
 800431a:	2b04      	cmp	r3, #4
 800431c:	bf28      	it	cs
 800431e:	2304      	movcs	r3, #4
 8004320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	3304      	adds	r3, #4
 8004326:	2b06      	cmp	r3, #6
 8004328:	d902      	bls.n	8004330 <NVIC_EncodePriority+0x30>
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	3b03      	subs	r3, #3
 800432e:	e000      	b.n	8004332 <NVIC_EncodePriority+0x32>
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004334:	f04f 32ff 	mov.w	r2, #4294967295
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43da      	mvns	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	401a      	ands	r2, r3
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004348:	f04f 31ff 	mov.w	r1, #4294967295
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	fa01 f303 	lsl.w	r3, r1, r3
 8004352:	43d9      	mvns	r1, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004358:	4313      	orrs	r3, r2
         );
}
 800435a:	4618      	mov	r0, r3
 800435c:	3724      	adds	r7, #36	; 0x24
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr

08004364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff ff4f 	bl	8004210 <__NVIC_SetPriorityGrouping>
}
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800437a:	b580      	push	{r7, lr}
 800437c:	b086      	sub	sp, #24
 800437e:	af00      	add	r7, sp, #0
 8004380:	4603      	mov	r3, r0
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	607a      	str	r2, [r7, #4]
 8004386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800438c:	f7ff ff64 	bl	8004258 <__NVIC_GetPriorityGrouping>
 8004390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	68b9      	ldr	r1, [r7, #8]
 8004396:	6978      	ldr	r0, [r7, #20]
 8004398:	f7ff ffb2 	bl	8004300 <NVIC_EncodePriority>
 800439c:	4602      	mov	r2, r0
 800439e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043a2:	4611      	mov	r1, r2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff ff81 	bl	80042ac <__NVIC_SetPriority>
}
 80043aa:	bf00      	nop
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	4603      	mov	r3, r0
 80043ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff ff57 	bl	8004274 <__NVIC_EnableIRQ>
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e059      	b.n	800449a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	4b2d      	ldr	r3, [pc, #180]	; (80044a4 <HAL_DMA_Init+0xd4>)
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d80f      	bhi.n	8004412 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	4b2b      	ldr	r3, [pc, #172]	; (80044a8 <HAL_DMA_Init+0xd8>)
 80043fa:	4413      	add	r3, r2
 80043fc:	4a2b      	ldr	r2, [pc, #172]	; (80044ac <HAL_DMA_Init+0xdc>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	091b      	lsrs	r3, r3, #4
 8004404:	009a      	lsls	r2, r3, #2
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a28      	ldr	r2, [pc, #160]	; (80044b0 <HAL_DMA_Init+0xe0>)
 800440e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004410:	e00e      	b.n	8004430 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	4b26      	ldr	r3, [pc, #152]	; (80044b4 <HAL_DMA_Init+0xe4>)
 800441a:	4413      	add	r3, r2
 800441c:	4a23      	ldr	r2, [pc, #140]	; (80044ac <HAL_DMA_Init+0xdc>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	091b      	lsrs	r3, r3, #4
 8004424:	009a      	lsls	r2, r3, #2
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a22      	ldr	r2, [pc, #136]	; (80044b8 <HAL_DMA_Init+0xe8>)
 800442e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004446:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800444a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004454:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004460:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800446c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr
 80044a4:	40020407 	.word	0x40020407
 80044a8:	bffdfff8 	.word	0xbffdfff8
 80044ac:	cccccccd 	.word	0xcccccccd
 80044b0:	40020000 	.word	0x40020000
 80044b4:	bffdfbf8 	.word	0xbffdfbf8
 80044b8:	40020400 	.word	0x40020400

080044bc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d008      	beq.n	80044e4 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2204      	movs	r2, #4
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e020      	b.n	8004526 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 020e 	bic.w	r2, r2, #14
 80044f2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450c:	2101      	movs	r1, #1
 800450e:	fa01 f202 	lsl.w	r2, r1, r2
 8004512:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004524:	7bfb      	ldrb	r3, [r7, #15]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004542:	2b02      	cmp	r3, #2
 8004544:	d005      	beq.n	8004552 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2204      	movs	r2, #4
 800454a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
 8004550:	e0d6      	b.n	8004700 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 020e 	bic.w	r2, r2, #14
 8004560:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0201 	bic.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	4b64      	ldr	r3, [pc, #400]	; (800470c <HAL_DMA_Abort_IT+0x1dc>)
 800457a:	429a      	cmp	r2, r3
 800457c:	d958      	bls.n	8004630 <HAL_DMA_Abort_IT+0x100>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a63      	ldr	r2, [pc, #396]	; (8004710 <HAL_DMA_Abort_IT+0x1e0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d04f      	beq.n	8004628 <HAL_DMA_Abort_IT+0xf8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a61      	ldr	r2, [pc, #388]	; (8004714 <HAL_DMA_Abort_IT+0x1e4>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d048      	beq.n	8004624 <HAL_DMA_Abort_IT+0xf4>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a60      	ldr	r2, [pc, #384]	; (8004718 <HAL_DMA_Abort_IT+0x1e8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d040      	beq.n	800461e <HAL_DMA_Abort_IT+0xee>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a5e      	ldr	r2, [pc, #376]	; (800471c <HAL_DMA_Abort_IT+0x1ec>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d038      	beq.n	8004618 <HAL_DMA_Abort_IT+0xe8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a5d      	ldr	r2, [pc, #372]	; (8004720 <HAL_DMA_Abort_IT+0x1f0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d030      	beq.n	8004612 <HAL_DMA_Abort_IT+0xe2>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a5b      	ldr	r2, [pc, #364]	; (8004724 <HAL_DMA_Abort_IT+0x1f4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d028      	beq.n	800460c <HAL_DMA_Abort_IT+0xdc>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a53      	ldr	r2, [pc, #332]	; (800470c <HAL_DMA_Abort_IT+0x1dc>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d020      	beq.n	8004606 <HAL_DMA_Abort_IT+0xd6>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a57      	ldr	r2, [pc, #348]	; (8004728 <HAL_DMA_Abort_IT+0x1f8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d019      	beq.n	8004602 <HAL_DMA_Abort_IT+0xd2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a56      	ldr	r2, [pc, #344]	; (800472c <HAL_DMA_Abort_IT+0x1fc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d012      	beq.n	80045fe <HAL_DMA_Abort_IT+0xce>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a54      	ldr	r2, [pc, #336]	; (8004730 <HAL_DMA_Abort_IT+0x200>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00a      	beq.n	80045f8 <HAL_DMA_Abort_IT+0xc8>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a53      	ldr	r2, [pc, #332]	; (8004734 <HAL_DMA_Abort_IT+0x204>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d102      	bne.n	80045f2 <HAL_DMA_Abort_IT+0xc2>
 80045ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045f0:	e01b      	b.n	800462a <HAL_DMA_Abort_IT+0xfa>
 80045f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045f6:	e018      	b.n	800462a <HAL_DMA_Abort_IT+0xfa>
 80045f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045fc:	e015      	b.n	800462a <HAL_DMA_Abort_IT+0xfa>
 80045fe:	2310      	movs	r3, #16
 8004600:	e013      	b.n	800462a <HAL_DMA_Abort_IT+0xfa>
 8004602:	2301      	movs	r3, #1
 8004604:	e011      	b.n	800462a <HAL_DMA_Abort_IT+0xfa>
 8004606:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800460a:	e00e      	b.n	800462a <HAL_DMA_Abort_IT+0xfa>
 800460c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004610:	e00b      	b.n	800462a <HAL_DMA_Abort_IT+0xfa>
 8004612:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004616:	e008      	b.n	800462a <HAL_DMA_Abort_IT+0xfa>
 8004618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800461c:	e005      	b.n	800462a <HAL_DMA_Abort_IT+0xfa>
 800461e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004622:	e002      	b.n	800462a <HAL_DMA_Abort_IT+0xfa>
 8004624:	2310      	movs	r3, #16
 8004626:	e000      	b.n	800462a <HAL_DMA_Abort_IT+0xfa>
 8004628:	2301      	movs	r3, #1
 800462a:	4a43      	ldr	r2, [pc, #268]	; (8004738 <HAL_DMA_Abort_IT+0x208>)
 800462c:	6053      	str	r3, [r2, #4]
 800462e:	e057      	b.n	80046e0 <HAL_DMA_Abort_IT+0x1b0>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a36      	ldr	r2, [pc, #216]	; (8004710 <HAL_DMA_Abort_IT+0x1e0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d04f      	beq.n	80046da <HAL_DMA_Abort_IT+0x1aa>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a35      	ldr	r2, [pc, #212]	; (8004714 <HAL_DMA_Abort_IT+0x1e4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d048      	beq.n	80046d6 <HAL_DMA_Abort_IT+0x1a6>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a33      	ldr	r2, [pc, #204]	; (8004718 <HAL_DMA_Abort_IT+0x1e8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d040      	beq.n	80046d0 <HAL_DMA_Abort_IT+0x1a0>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a32      	ldr	r2, [pc, #200]	; (800471c <HAL_DMA_Abort_IT+0x1ec>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d038      	beq.n	80046ca <HAL_DMA_Abort_IT+0x19a>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a30      	ldr	r2, [pc, #192]	; (8004720 <HAL_DMA_Abort_IT+0x1f0>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d030      	beq.n	80046c4 <HAL_DMA_Abort_IT+0x194>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a2f      	ldr	r2, [pc, #188]	; (8004724 <HAL_DMA_Abort_IT+0x1f4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d028      	beq.n	80046be <HAL_DMA_Abort_IT+0x18e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a26      	ldr	r2, [pc, #152]	; (800470c <HAL_DMA_Abort_IT+0x1dc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d020      	beq.n	80046b8 <HAL_DMA_Abort_IT+0x188>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a2b      	ldr	r2, [pc, #172]	; (8004728 <HAL_DMA_Abort_IT+0x1f8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d019      	beq.n	80046b4 <HAL_DMA_Abort_IT+0x184>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a29      	ldr	r2, [pc, #164]	; (800472c <HAL_DMA_Abort_IT+0x1fc>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d012      	beq.n	80046b0 <HAL_DMA_Abort_IT+0x180>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a28      	ldr	r2, [pc, #160]	; (8004730 <HAL_DMA_Abort_IT+0x200>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00a      	beq.n	80046aa <HAL_DMA_Abort_IT+0x17a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a26      	ldr	r2, [pc, #152]	; (8004734 <HAL_DMA_Abort_IT+0x204>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d102      	bne.n	80046a4 <HAL_DMA_Abort_IT+0x174>
 800469e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046a2:	e01b      	b.n	80046dc <HAL_DMA_Abort_IT+0x1ac>
 80046a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046a8:	e018      	b.n	80046dc <HAL_DMA_Abort_IT+0x1ac>
 80046aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046ae:	e015      	b.n	80046dc <HAL_DMA_Abort_IT+0x1ac>
 80046b0:	2310      	movs	r3, #16
 80046b2:	e013      	b.n	80046dc <HAL_DMA_Abort_IT+0x1ac>
 80046b4:	2301      	movs	r3, #1
 80046b6:	e011      	b.n	80046dc <HAL_DMA_Abort_IT+0x1ac>
 80046b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046bc:	e00e      	b.n	80046dc <HAL_DMA_Abort_IT+0x1ac>
 80046be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046c2:	e00b      	b.n	80046dc <HAL_DMA_Abort_IT+0x1ac>
 80046c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046c8:	e008      	b.n	80046dc <HAL_DMA_Abort_IT+0x1ac>
 80046ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046ce:	e005      	b.n	80046dc <HAL_DMA_Abort_IT+0x1ac>
 80046d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046d4:	e002      	b.n	80046dc <HAL_DMA_Abort_IT+0x1ac>
 80046d6:	2310      	movs	r3, #16
 80046d8:	e000      	b.n	80046dc <HAL_DMA_Abort_IT+0x1ac>
 80046da:	2301      	movs	r3, #1
 80046dc:	4a17      	ldr	r2, [pc, #92]	; (800473c <HAL_DMA_Abort_IT+0x20c>)
 80046de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4798      	blx	r3
    } 
  }
  return status;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	40020080 	.word	0x40020080
 8004710:	40020008 	.word	0x40020008
 8004714:	4002001c 	.word	0x4002001c
 8004718:	40020030 	.word	0x40020030
 800471c:	40020044 	.word	0x40020044
 8004720:	40020058 	.word	0x40020058
 8004724:	4002006c 	.word	0x4002006c
 8004728:	40020408 	.word	0x40020408
 800472c:	4002041c 	.word	0x4002041c
 8004730:	40020430 	.word	0x40020430
 8004734:	40020444 	.word	0x40020444
 8004738:	40020400 	.word	0x40020400
 800473c:	40020000 	.word	0x40020000

08004740 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475c:	2204      	movs	r2, #4
 800475e:	409a      	lsls	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4013      	ands	r3, r2
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 80f1 	beq.w	800494c <HAL_DMA_IRQHandler+0x20c>
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 80eb 	beq.w	800494c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0320 	and.w	r3, r3, #32
 8004780:	2b00      	cmp	r3, #0
 8004782:	d107      	bne.n	8004794 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0204 	bic.w	r2, r2, #4
 8004792:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	4b5f      	ldr	r3, [pc, #380]	; (8004918 <HAL_DMA_IRQHandler+0x1d8>)
 800479c:	429a      	cmp	r2, r3
 800479e:	d958      	bls.n	8004852 <HAL_DMA_IRQHandler+0x112>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a5d      	ldr	r2, [pc, #372]	; (800491c <HAL_DMA_IRQHandler+0x1dc>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d04f      	beq.n	800484a <HAL_DMA_IRQHandler+0x10a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a5c      	ldr	r2, [pc, #368]	; (8004920 <HAL_DMA_IRQHandler+0x1e0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d048      	beq.n	8004846 <HAL_DMA_IRQHandler+0x106>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a5a      	ldr	r2, [pc, #360]	; (8004924 <HAL_DMA_IRQHandler+0x1e4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d040      	beq.n	8004840 <HAL_DMA_IRQHandler+0x100>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a59      	ldr	r2, [pc, #356]	; (8004928 <HAL_DMA_IRQHandler+0x1e8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d038      	beq.n	800483a <HAL_DMA_IRQHandler+0xfa>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a57      	ldr	r2, [pc, #348]	; (800492c <HAL_DMA_IRQHandler+0x1ec>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d030      	beq.n	8004834 <HAL_DMA_IRQHandler+0xf4>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a56      	ldr	r2, [pc, #344]	; (8004930 <HAL_DMA_IRQHandler+0x1f0>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d028      	beq.n	800482e <HAL_DMA_IRQHandler+0xee>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a4d      	ldr	r2, [pc, #308]	; (8004918 <HAL_DMA_IRQHandler+0x1d8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d020      	beq.n	8004828 <HAL_DMA_IRQHandler+0xe8>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a52      	ldr	r2, [pc, #328]	; (8004934 <HAL_DMA_IRQHandler+0x1f4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d019      	beq.n	8004824 <HAL_DMA_IRQHandler+0xe4>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a50      	ldr	r2, [pc, #320]	; (8004938 <HAL_DMA_IRQHandler+0x1f8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d012      	beq.n	8004820 <HAL_DMA_IRQHandler+0xe0>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a4f      	ldr	r2, [pc, #316]	; (800493c <HAL_DMA_IRQHandler+0x1fc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00a      	beq.n	800481a <HAL_DMA_IRQHandler+0xda>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a4d      	ldr	r2, [pc, #308]	; (8004940 <HAL_DMA_IRQHandler+0x200>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d102      	bne.n	8004814 <HAL_DMA_IRQHandler+0xd4>
 800480e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004812:	e01b      	b.n	800484c <HAL_DMA_IRQHandler+0x10c>
 8004814:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004818:	e018      	b.n	800484c <HAL_DMA_IRQHandler+0x10c>
 800481a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800481e:	e015      	b.n	800484c <HAL_DMA_IRQHandler+0x10c>
 8004820:	2340      	movs	r3, #64	; 0x40
 8004822:	e013      	b.n	800484c <HAL_DMA_IRQHandler+0x10c>
 8004824:	2304      	movs	r3, #4
 8004826:	e011      	b.n	800484c <HAL_DMA_IRQHandler+0x10c>
 8004828:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800482c:	e00e      	b.n	800484c <HAL_DMA_IRQHandler+0x10c>
 800482e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004832:	e00b      	b.n	800484c <HAL_DMA_IRQHandler+0x10c>
 8004834:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004838:	e008      	b.n	800484c <HAL_DMA_IRQHandler+0x10c>
 800483a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800483e:	e005      	b.n	800484c <HAL_DMA_IRQHandler+0x10c>
 8004840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004844:	e002      	b.n	800484c <HAL_DMA_IRQHandler+0x10c>
 8004846:	2340      	movs	r3, #64	; 0x40
 8004848:	e000      	b.n	800484c <HAL_DMA_IRQHandler+0x10c>
 800484a:	2304      	movs	r3, #4
 800484c:	4a3d      	ldr	r2, [pc, #244]	; (8004944 <HAL_DMA_IRQHandler+0x204>)
 800484e:	6053      	str	r3, [r2, #4]
 8004850:	e057      	b.n	8004902 <HAL_DMA_IRQHandler+0x1c2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a31      	ldr	r2, [pc, #196]	; (800491c <HAL_DMA_IRQHandler+0x1dc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d04f      	beq.n	80048fc <HAL_DMA_IRQHandler+0x1bc>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a2f      	ldr	r2, [pc, #188]	; (8004920 <HAL_DMA_IRQHandler+0x1e0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d048      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x1b8>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a2e      	ldr	r2, [pc, #184]	; (8004924 <HAL_DMA_IRQHandler+0x1e4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d040      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x1b2>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a2c      	ldr	r2, [pc, #176]	; (8004928 <HAL_DMA_IRQHandler+0x1e8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d038      	beq.n	80048ec <HAL_DMA_IRQHandler+0x1ac>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a2b      	ldr	r2, [pc, #172]	; (800492c <HAL_DMA_IRQHandler+0x1ec>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d030      	beq.n	80048e6 <HAL_DMA_IRQHandler+0x1a6>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a29      	ldr	r2, [pc, #164]	; (8004930 <HAL_DMA_IRQHandler+0x1f0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d028      	beq.n	80048e0 <HAL_DMA_IRQHandler+0x1a0>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a21      	ldr	r2, [pc, #132]	; (8004918 <HAL_DMA_IRQHandler+0x1d8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d020      	beq.n	80048da <HAL_DMA_IRQHandler+0x19a>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a25      	ldr	r2, [pc, #148]	; (8004934 <HAL_DMA_IRQHandler+0x1f4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d019      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x196>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a24      	ldr	r2, [pc, #144]	; (8004938 <HAL_DMA_IRQHandler+0x1f8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d012      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x192>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a22      	ldr	r2, [pc, #136]	; (800493c <HAL_DMA_IRQHandler+0x1fc>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00a      	beq.n	80048cc <HAL_DMA_IRQHandler+0x18c>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a21      	ldr	r2, [pc, #132]	; (8004940 <HAL_DMA_IRQHandler+0x200>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d102      	bne.n	80048c6 <HAL_DMA_IRQHandler+0x186>
 80048c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048c4:	e01b      	b.n	80048fe <HAL_DMA_IRQHandler+0x1be>
 80048c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80048ca:	e018      	b.n	80048fe <HAL_DMA_IRQHandler+0x1be>
 80048cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048d0:	e015      	b.n	80048fe <HAL_DMA_IRQHandler+0x1be>
 80048d2:	2340      	movs	r3, #64	; 0x40
 80048d4:	e013      	b.n	80048fe <HAL_DMA_IRQHandler+0x1be>
 80048d6:	2304      	movs	r3, #4
 80048d8:	e011      	b.n	80048fe <HAL_DMA_IRQHandler+0x1be>
 80048da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80048de:	e00e      	b.n	80048fe <HAL_DMA_IRQHandler+0x1be>
 80048e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048e4:	e00b      	b.n	80048fe <HAL_DMA_IRQHandler+0x1be>
 80048e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80048ea:	e008      	b.n	80048fe <HAL_DMA_IRQHandler+0x1be>
 80048ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048f0:	e005      	b.n	80048fe <HAL_DMA_IRQHandler+0x1be>
 80048f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048f6:	e002      	b.n	80048fe <HAL_DMA_IRQHandler+0x1be>
 80048f8:	2340      	movs	r3, #64	; 0x40
 80048fa:	e000      	b.n	80048fe <HAL_DMA_IRQHandler+0x1be>
 80048fc:	2304      	movs	r3, #4
 80048fe:	4a12      	ldr	r2, [pc, #72]	; (8004948 <HAL_DMA_IRQHandler+0x208>)
 8004900:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 8136 	beq.w	8004b78 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004914:	e130      	b.n	8004b78 <HAL_DMA_IRQHandler+0x438>
 8004916:	bf00      	nop
 8004918:	40020080 	.word	0x40020080
 800491c:	40020008 	.word	0x40020008
 8004920:	4002001c 	.word	0x4002001c
 8004924:	40020030 	.word	0x40020030
 8004928:	40020044 	.word	0x40020044
 800492c:	40020058 	.word	0x40020058
 8004930:	4002006c 	.word	0x4002006c
 8004934:	40020408 	.word	0x40020408
 8004938:	4002041c 	.word	0x4002041c
 800493c:	40020430 	.word	0x40020430
 8004940:	40020444 	.word	0x40020444
 8004944:	40020400 	.word	0x40020400
 8004948:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	2202      	movs	r2, #2
 8004952:	409a      	lsls	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4013      	ands	r3, r2
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80dd 	beq.w	8004b18 <HAL_DMA_IRQHandler+0x3d8>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 80d7 	beq.w	8004b18 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10b      	bne.n	8004990 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 020a 	bic.w	r2, r2, #10
 8004986:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	461a      	mov	r2, r3
 8004996:	4b7b      	ldr	r3, [pc, #492]	; (8004b84 <HAL_DMA_IRQHandler+0x444>)
 8004998:	429a      	cmp	r2, r3
 800499a:	d958      	bls.n	8004a4e <HAL_DMA_IRQHandler+0x30e>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a79      	ldr	r2, [pc, #484]	; (8004b88 <HAL_DMA_IRQHandler+0x448>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d04f      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x306>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a78      	ldr	r2, [pc, #480]	; (8004b8c <HAL_DMA_IRQHandler+0x44c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d048      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x302>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a76      	ldr	r2, [pc, #472]	; (8004b90 <HAL_DMA_IRQHandler+0x450>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d040      	beq.n	8004a3c <HAL_DMA_IRQHandler+0x2fc>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a75      	ldr	r2, [pc, #468]	; (8004b94 <HAL_DMA_IRQHandler+0x454>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d038      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x2f6>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a73      	ldr	r2, [pc, #460]	; (8004b98 <HAL_DMA_IRQHandler+0x458>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d030      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x2f0>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a72      	ldr	r2, [pc, #456]	; (8004b9c <HAL_DMA_IRQHandler+0x45c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d028      	beq.n	8004a2a <HAL_DMA_IRQHandler+0x2ea>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a69      	ldr	r2, [pc, #420]	; (8004b84 <HAL_DMA_IRQHandler+0x444>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d020      	beq.n	8004a24 <HAL_DMA_IRQHandler+0x2e4>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a6e      	ldr	r2, [pc, #440]	; (8004ba0 <HAL_DMA_IRQHandler+0x460>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d019      	beq.n	8004a20 <HAL_DMA_IRQHandler+0x2e0>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a6c      	ldr	r2, [pc, #432]	; (8004ba4 <HAL_DMA_IRQHandler+0x464>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d012      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x2dc>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a6b      	ldr	r2, [pc, #428]	; (8004ba8 <HAL_DMA_IRQHandler+0x468>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00a      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x2d6>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a69      	ldr	r2, [pc, #420]	; (8004bac <HAL_DMA_IRQHandler+0x46c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d102      	bne.n	8004a10 <HAL_DMA_IRQHandler+0x2d0>
 8004a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a0e:	e01b      	b.n	8004a48 <HAL_DMA_IRQHandler+0x308>
 8004a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a14:	e018      	b.n	8004a48 <HAL_DMA_IRQHandler+0x308>
 8004a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a1a:	e015      	b.n	8004a48 <HAL_DMA_IRQHandler+0x308>
 8004a1c:	2320      	movs	r3, #32
 8004a1e:	e013      	b.n	8004a48 <HAL_DMA_IRQHandler+0x308>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e011      	b.n	8004a48 <HAL_DMA_IRQHandler+0x308>
 8004a24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a28:	e00e      	b.n	8004a48 <HAL_DMA_IRQHandler+0x308>
 8004a2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a2e:	e00b      	b.n	8004a48 <HAL_DMA_IRQHandler+0x308>
 8004a30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a34:	e008      	b.n	8004a48 <HAL_DMA_IRQHandler+0x308>
 8004a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a3a:	e005      	b.n	8004a48 <HAL_DMA_IRQHandler+0x308>
 8004a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a40:	e002      	b.n	8004a48 <HAL_DMA_IRQHandler+0x308>
 8004a42:	2320      	movs	r3, #32
 8004a44:	e000      	b.n	8004a48 <HAL_DMA_IRQHandler+0x308>
 8004a46:	2302      	movs	r3, #2
 8004a48:	4a59      	ldr	r2, [pc, #356]	; (8004bb0 <HAL_DMA_IRQHandler+0x470>)
 8004a4a:	6053      	str	r3, [r2, #4]
 8004a4c:	e057      	b.n	8004afe <HAL_DMA_IRQHandler+0x3be>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a4d      	ldr	r2, [pc, #308]	; (8004b88 <HAL_DMA_IRQHandler+0x448>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d04f      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x3b8>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a4b      	ldr	r2, [pc, #300]	; (8004b8c <HAL_DMA_IRQHandler+0x44c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d048      	beq.n	8004af4 <HAL_DMA_IRQHandler+0x3b4>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a4a      	ldr	r2, [pc, #296]	; (8004b90 <HAL_DMA_IRQHandler+0x450>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d040      	beq.n	8004aee <HAL_DMA_IRQHandler+0x3ae>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a48      	ldr	r2, [pc, #288]	; (8004b94 <HAL_DMA_IRQHandler+0x454>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d038      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x3a8>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a47      	ldr	r2, [pc, #284]	; (8004b98 <HAL_DMA_IRQHandler+0x458>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d030      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0x3a2>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a45      	ldr	r2, [pc, #276]	; (8004b9c <HAL_DMA_IRQHandler+0x45c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d028      	beq.n	8004adc <HAL_DMA_IRQHandler+0x39c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a3d      	ldr	r2, [pc, #244]	; (8004b84 <HAL_DMA_IRQHandler+0x444>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d020      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x396>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a41      	ldr	r2, [pc, #260]	; (8004ba0 <HAL_DMA_IRQHandler+0x460>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d019      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0x392>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a40      	ldr	r2, [pc, #256]	; (8004ba4 <HAL_DMA_IRQHandler+0x464>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d012      	beq.n	8004ace <HAL_DMA_IRQHandler+0x38e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a3e      	ldr	r2, [pc, #248]	; (8004ba8 <HAL_DMA_IRQHandler+0x468>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00a      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0x388>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a3d      	ldr	r2, [pc, #244]	; (8004bac <HAL_DMA_IRQHandler+0x46c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d102      	bne.n	8004ac2 <HAL_DMA_IRQHandler+0x382>
 8004abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ac0:	e01b      	b.n	8004afa <HAL_DMA_IRQHandler+0x3ba>
 8004ac2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ac6:	e018      	b.n	8004afa <HAL_DMA_IRQHandler+0x3ba>
 8004ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004acc:	e015      	b.n	8004afa <HAL_DMA_IRQHandler+0x3ba>
 8004ace:	2320      	movs	r3, #32
 8004ad0:	e013      	b.n	8004afa <HAL_DMA_IRQHandler+0x3ba>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e011      	b.n	8004afa <HAL_DMA_IRQHandler+0x3ba>
 8004ad6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ada:	e00e      	b.n	8004afa <HAL_DMA_IRQHandler+0x3ba>
 8004adc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ae0:	e00b      	b.n	8004afa <HAL_DMA_IRQHandler+0x3ba>
 8004ae2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ae6:	e008      	b.n	8004afa <HAL_DMA_IRQHandler+0x3ba>
 8004ae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004aec:	e005      	b.n	8004afa <HAL_DMA_IRQHandler+0x3ba>
 8004aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004af2:	e002      	b.n	8004afa <HAL_DMA_IRQHandler+0x3ba>
 8004af4:	2320      	movs	r3, #32
 8004af6:	e000      	b.n	8004afa <HAL_DMA_IRQHandler+0x3ba>
 8004af8:	2302      	movs	r3, #2
 8004afa:	4a2e      	ldr	r2, [pc, #184]	; (8004bb4 <HAL_DMA_IRQHandler+0x474>)
 8004afc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d034      	beq.n	8004b78 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004b16:	e02f      	b.n	8004b78 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d028      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x43a>
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d023      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 020e 	bic.w	r2, r2, #14
 8004b40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d004      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	4798      	blx	r3
    }
  }
  return;
 8004b78:	bf00      	nop
 8004b7a:	bf00      	nop
}
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40020080 	.word	0x40020080
 8004b88:	40020008 	.word	0x40020008
 8004b8c:	4002001c 	.word	0x4002001c
 8004b90:	40020030 	.word	0x40020030
 8004b94:	40020044 	.word	0x40020044
 8004b98:	40020058 	.word	0x40020058
 8004b9c:	4002006c 	.word	0x4002006c
 8004ba0:	40020408 	.word	0x40020408
 8004ba4:	4002041c 	.word	0x4002041c
 8004ba8:	40020430 	.word	0x40020430
 8004bac:	40020444 	.word	0x40020444
 8004bb0:	40020400 	.word	0x40020400
 8004bb4:	40020000 	.word	0x40020000

08004bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b08b      	sub	sp, #44	; 0x2c
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bca:	e169      	b.n	8004ea0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004bcc:	2201      	movs	r2, #1
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	f040 8158 	bne.w	8004e9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	4a9a      	ldr	r2, [pc, #616]	; (8004e58 <HAL_GPIO_Init+0x2a0>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d05e      	beq.n	8004cb2 <HAL_GPIO_Init+0xfa>
 8004bf4:	4a98      	ldr	r2, [pc, #608]	; (8004e58 <HAL_GPIO_Init+0x2a0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d875      	bhi.n	8004ce6 <HAL_GPIO_Init+0x12e>
 8004bfa:	4a98      	ldr	r2, [pc, #608]	; (8004e5c <HAL_GPIO_Init+0x2a4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d058      	beq.n	8004cb2 <HAL_GPIO_Init+0xfa>
 8004c00:	4a96      	ldr	r2, [pc, #600]	; (8004e5c <HAL_GPIO_Init+0x2a4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d86f      	bhi.n	8004ce6 <HAL_GPIO_Init+0x12e>
 8004c06:	4a96      	ldr	r2, [pc, #600]	; (8004e60 <HAL_GPIO_Init+0x2a8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d052      	beq.n	8004cb2 <HAL_GPIO_Init+0xfa>
 8004c0c:	4a94      	ldr	r2, [pc, #592]	; (8004e60 <HAL_GPIO_Init+0x2a8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d869      	bhi.n	8004ce6 <HAL_GPIO_Init+0x12e>
 8004c12:	4a94      	ldr	r2, [pc, #592]	; (8004e64 <HAL_GPIO_Init+0x2ac>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d04c      	beq.n	8004cb2 <HAL_GPIO_Init+0xfa>
 8004c18:	4a92      	ldr	r2, [pc, #584]	; (8004e64 <HAL_GPIO_Init+0x2ac>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d863      	bhi.n	8004ce6 <HAL_GPIO_Init+0x12e>
 8004c1e:	4a92      	ldr	r2, [pc, #584]	; (8004e68 <HAL_GPIO_Init+0x2b0>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d046      	beq.n	8004cb2 <HAL_GPIO_Init+0xfa>
 8004c24:	4a90      	ldr	r2, [pc, #576]	; (8004e68 <HAL_GPIO_Init+0x2b0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d85d      	bhi.n	8004ce6 <HAL_GPIO_Init+0x12e>
 8004c2a:	2b12      	cmp	r3, #18
 8004c2c:	d82a      	bhi.n	8004c84 <HAL_GPIO_Init+0xcc>
 8004c2e:	2b12      	cmp	r3, #18
 8004c30:	d859      	bhi.n	8004ce6 <HAL_GPIO_Init+0x12e>
 8004c32:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <HAL_GPIO_Init+0x80>)
 8004c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c38:	08004cb3 	.word	0x08004cb3
 8004c3c:	08004c8d 	.word	0x08004c8d
 8004c40:	08004c9f 	.word	0x08004c9f
 8004c44:	08004ce1 	.word	0x08004ce1
 8004c48:	08004ce7 	.word	0x08004ce7
 8004c4c:	08004ce7 	.word	0x08004ce7
 8004c50:	08004ce7 	.word	0x08004ce7
 8004c54:	08004ce7 	.word	0x08004ce7
 8004c58:	08004ce7 	.word	0x08004ce7
 8004c5c:	08004ce7 	.word	0x08004ce7
 8004c60:	08004ce7 	.word	0x08004ce7
 8004c64:	08004ce7 	.word	0x08004ce7
 8004c68:	08004ce7 	.word	0x08004ce7
 8004c6c:	08004ce7 	.word	0x08004ce7
 8004c70:	08004ce7 	.word	0x08004ce7
 8004c74:	08004ce7 	.word	0x08004ce7
 8004c78:	08004ce7 	.word	0x08004ce7
 8004c7c:	08004c95 	.word	0x08004c95
 8004c80:	08004ca9 	.word	0x08004ca9
 8004c84:	4a79      	ldr	r2, [pc, #484]	; (8004e6c <HAL_GPIO_Init+0x2b4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004c8a:	e02c      	b.n	8004ce6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	623b      	str	r3, [r7, #32]
          break;
 8004c92:	e029      	b.n	8004ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	3304      	adds	r3, #4
 8004c9a:	623b      	str	r3, [r7, #32]
          break;
 8004c9c:	e024      	b.n	8004ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	3308      	adds	r3, #8
 8004ca4:	623b      	str	r3, [r7, #32]
          break;
 8004ca6:	e01f      	b.n	8004ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	330c      	adds	r3, #12
 8004cae:	623b      	str	r3, [r7, #32]
          break;
 8004cb0:	e01a      	b.n	8004ce8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d102      	bne.n	8004cc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004cba:	2304      	movs	r3, #4
 8004cbc:	623b      	str	r3, [r7, #32]
          break;
 8004cbe:	e013      	b.n	8004ce8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d105      	bne.n	8004cd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004cc8:	2308      	movs	r3, #8
 8004cca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69fa      	ldr	r2, [r7, #28]
 8004cd0:	611a      	str	r2, [r3, #16]
          break;
 8004cd2:	e009      	b.n	8004ce8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004cd4:	2308      	movs	r3, #8
 8004cd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	615a      	str	r2, [r3, #20]
          break;
 8004cde:	e003      	b.n	8004ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	623b      	str	r3, [r7, #32]
          break;
 8004ce4:	e000      	b.n	8004ce8 <HAL_GPIO_Init+0x130>
          break;
 8004ce6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2bff      	cmp	r3, #255	; 0xff
 8004cec:	d801      	bhi.n	8004cf2 <HAL_GPIO_Init+0x13a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	e001      	b.n	8004cf6 <HAL_GPIO_Init+0x13e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	2bff      	cmp	r3, #255	; 0xff
 8004cfc:	d802      	bhi.n	8004d04 <HAL_GPIO_Init+0x14c>
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	e002      	b.n	8004d0a <HAL_GPIO_Init+0x152>
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	3b08      	subs	r3, #8
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	210f      	movs	r1, #15
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	fa01 f303 	lsl.w	r3, r1, r3
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	401a      	ands	r2, r3
 8004d1c:	6a39      	ldr	r1, [r7, #32]
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	fa01 f303 	lsl.w	r3, r1, r3
 8004d24:	431a      	orrs	r2, r3
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 80b1 	beq.w	8004e9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004d38:	4b4d      	ldr	r3, [pc, #308]	; (8004e70 <HAL_GPIO_Init+0x2b8>)
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	4a4c      	ldr	r2, [pc, #304]	; (8004e70 <HAL_GPIO_Init+0x2b8>)
 8004d3e:	f043 0301 	orr.w	r3, r3, #1
 8004d42:	6193      	str	r3, [r2, #24]
 8004d44:	4b4a      	ldr	r3, [pc, #296]	; (8004e70 <HAL_GPIO_Init+0x2b8>)
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004d50:	4a48      	ldr	r2, [pc, #288]	; (8004e74 <HAL_GPIO_Init+0x2bc>)
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	089b      	lsrs	r3, r3, #2
 8004d56:	3302      	adds	r3, #2
 8004d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	220f      	movs	r2, #15
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4013      	ands	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a40      	ldr	r2, [pc, #256]	; (8004e78 <HAL_GPIO_Init+0x2c0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d013      	beq.n	8004da4 <HAL_GPIO_Init+0x1ec>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a3f      	ldr	r2, [pc, #252]	; (8004e7c <HAL_GPIO_Init+0x2c4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00d      	beq.n	8004da0 <HAL_GPIO_Init+0x1e8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a3e      	ldr	r2, [pc, #248]	; (8004e80 <HAL_GPIO_Init+0x2c8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d007      	beq.n	8004d9c <HAL_GPIO_Init+0x1e4>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a3d      	ldr	r2, [pc, #244]	; (8004e84 <HAL_GPIO_Init+0x2cc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d101      	bne.n	8004d98 <HAL_GPIO_Init+0x1e0>
 8004d94:	2303      	movs	r3, #3
 8004d96:	e006      	b.n	8004da6 <HAL_GPIO_Init+0x1ee>
 8004d98:	2304      	movs	r3, #4
 8004d9a:	e004      	b.n	8004da6 <HAL_GPIO_Init+0x1ee>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e002      	b.n	8004da6 <HAL_GPIO_Init+0x1ee>
 8004da0:	2301      	movs	r3, #1
 8004da2:	e000      	b.n	8004da6 <HAL_GPIO_Init+0x1ee>
 8004da4:	2300      	movs	r3, #0
 8004da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da8:	f002 0203 	and.w	r2, r2, #3
 8004dac:	0092      	lsls	r2, r2, #2
 8004dae:	4093      	lsls	r3, r2
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004db6:	492f      	ldr	r1, [pc, #188]	; (8004e74 <HAL_GPIO_Init+0x2bc>)
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	089b      	lsrs	r3, r3, #2
 8004dbc:	3302      	adds	r3, #2
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d006      	beq.n	8004dde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004dd0:	4b2d      	ldr	r3, [pc, #180]	; (8004e88 <HAL_GPIO_Init+0x2d0>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	492c      	ldr	r1, [pc, #176]	; (8004e88 <HAL_GPIO_Init+0x2d0>)
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	600b      	str	r3, [r1, #0]
 8004ddc:	e006      	b.n	8004dec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004dde:	4b2a      	ldr	r3, [pc, #168]	; (8004e88 <HAL_GPIO_Init+0x2d0>)
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	43db      	mvns	r3, r3
 8004de6:	4928      	ldr	r1, [pc, #160]	; (8004e88 <HAL_GPIO_Init+0x2d0>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d006      	beq.n	8004e06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004df8:	4b23      	ldr	r3, [pc, #140]	; (8004e88 <HAL_GPIO_Init+0x2d0>)
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	4922      	ldr	r1, [pc, #136]	; (8004e88 <HAL_GPIO_Init+0x2d0>)
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	604b      	str	r3, [r1, #4]
 8004e04:	e006      	b.n	8004e14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004e06:	4b20      	ldr	r3, [pc, #128]	; (8004e88 <HAL_GPIO_Init+0x2d0>)
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	491e      	ldr	r1, [pc, #120]	; (8004e88 <HAL_GPIO_Init+0x2d0>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d006      	beq.n	8004e2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004e20:	4b19      	ldr	r3, [pc, #100]	; (8004e88 <HAL_GPIO_Init+0x2d0>)
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	4918      	ldr	r1, [pc, #96]	; (8004e88 <HAL_GPIO_Init+0x2d0>)
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	608b      	str	r3, [r1, #8]
 8004e2c:	e006      	b.n	8004e3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004e2e:	4b16      	ldr	r3, [pc, #88]	; (8004e88 <HAL_GPIO_Init+0x2d0>)
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	43db      	mvns	r3, r3
 8004e36:	4914      	ldr	r1, [pc, #80]	; (8004e88 <HAL_GPIO_Init+0x2d0>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d021      	beq.n	8004e8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004e48:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <HAL_GPIO_Init+0x2d0>)
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	490e      	ldr	r1, [pc, #56]	; (8004e88 <HAL_GPIO_Init+0x2d0>)
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60cb      	str	r3, [r1, #12]
 8004e54:	e021      	b.n	8004e9a <HAL_GPIO_Init+0x2e2>
 8004e56:	bf00      	nop
 8004e58:	10320000 	.word	0x10320000
 8004e5c:	10310000 	.word	0x10310000
 8004e60:	10220000 	.word	0x10220000
 8004e64:	10210000 	.word	0x10210000
 8004e68:	10120000 	.word	0x10120000
 8004e6c:	10110000 	.word	0x10110000
 8004e70:	40021000 	.word	0x40021000
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40010800 	.word	0x40010800
 8004e7c:	40010c00 	.word	0x40010c00
 8004e80:	40011000 	.word	0x40011000
 8004e84:	40011400 	.word	0x40011400
 8004e88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <HAL_GPIO_Init+0x304>)
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	43db      	mvns	r3, r3
 8004e94:	4909      	ldr	r1, [pc, #36]	; (8004ebc <HAL_GPIO_Init+0x304>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f47f ae8e 	bne.w	8004bcc <HAL_GPIO_Init+0x14>
  }
}
 8004eb0:	bf00      	nop
 8004eb2:	bf00      	nop
 8004eb4:	372c      	adds	r7, #44	; 0x2c
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	40010400 	.word	0x40010400

08004ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	807b      	strh	r3, [r7, #2]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ed0:	787b      	ldrb	r3, [r7, #1]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ed6:	887a      	ldrh	r2, [r7, #2]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004edc:	e003      	b.n	8004ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ede:	887b      	ldrh	r3, [r7, #2]
 8004ee0:	041a      	lsls	r2, r3, #16
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	611a      	str	r2, [r3, #16]
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr

08004ef0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ef2:	b08f      	sub	sp, #60	; 0x3c
 8004ef4:	af0a      	add	r7, sp, #40	; 0x28
 8004ef6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e054      	b.n	8004fac <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d106      	bne.n	8004f22 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7fe ff55 	bl	8003dcc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2203      	movs	r2, #3
 8004f26:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d102      	bne.n	8004f3c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f002 fa89 	bl	8007458 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	687e      	ldr	r6, [r7, #4]
 8004f4e:	466d      	mov	r5, sp
 8004f50:	f106 0410 	add.w	r4, r6, #16
 8004f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f60:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f64:	1d33      	adds	r3, r6, #4
 8004f66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f68:	6838      	ldr	r0, [r7, #0]
 8004f6a:	f002 fa53 	bl	8007414 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2101      	movs	r1, #1
 8004f74:	4618      	mov	r0, r3
 8004f76:	f002 fa7f 	bl	8007478 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	603b      	str	r3, [r7, #0]
 8004f80:	687e      	ldr	r6, [r7, #4]
 8004f82:	466d      	mov	r5, sp
 8004f84:	f106 0410 	add.w	r4, r6, #16
 8004f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f94:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f98:	1d33      	adds	r3, r6, #4
 8004f9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f9c:	6838      	ldr	r0, [r7, #0]
 8004f9e:	f002 fb3b 	bl	8007618 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e304      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 8087 	beq.w	80050e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fd4:	4b92      	ldr	r3, [pc, #584]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f003 030c 	and.w	r3, r3, #12
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d00c      	beq.n	8004ffa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fe0:	4b8f      	ldr	r3, [pc, #572]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f003 030c 	and.w	r3, r3, #12
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d112      	bne.n	8005012 <HAL_RCC_OscConfig+0x5e>
 8004fec:	4b8c      	ldr	r3, [pc, #560]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff8:	d10b      	bne.n	8005012 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ffa:	4b89      	ldr	r3, [pc, #548]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d06c      	beq.n	80050e0 <HAL_RCC_OscConfig+0x12c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d168      	bne.n	80050e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e2de      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800501a:	d106      	bne.n	800502a <HAL_RCC_OscConfig+0x76>
 800501c:	4b80      	ldr	r3, [pc, #512]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a7f      	ldr	r2, [pc, #508]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005026:	6013      	str	r3, [r2, #0]
 8005028:	e02e      	b.n	8005088 <HAL_RCC_OscConfig+0xd4>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10c      	bne.n	800504c <HAL_RCC_OscConfig+0x98>
 8005032:	4b7b      	ldr	r3, [pc, #492]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a7a      	ldr	r2, [pc, #488]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	4b78      	ldr	r3, [pc, #480]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a77      	ldr	r2, [pc, #476]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005044:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	e01d      	b.n	8005088 <HAL_RCC_OscConfig+0xd4>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005054:	d10c      	bne.n	8005070 <HAL_RCC_OscConfig+0xbc>
 8005056:	4b72      	ldr	r3, [pc, #456]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a71      	ldr	r2, [pc, #452]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 800505c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	4b6f      	ldr	r3, [pc, #444]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a6e      	ldr	r2, [pc, #440]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	e00b      	b.n	8005088 <HAL_RCC_OscConfig+0xd4>
 8005070:	4b6b      	ldr	r3, [pc, #428]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a6a      	ldr	r2, [pc, #424]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	4b68      	ldr	r3, [pc, #416]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a67      	ldr	r2, [pc, #412]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005086:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d013      	beq.n	80050b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005090:	f7ff f890 	bl	80041b4 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005098:	f7ff f88c 	bl	80041b4 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b64      	cmp	r3, #100	; 0x64
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e292      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050aa:	4b5d      	ldr	r3, [pc, #372]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0f0      	beq.n	8005098 <HAL_RCC_OscConfig+0xe4>
 80050b6:	e014      	b.n	80050e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b8:	f7ff f87c 	bl	80041b4 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050c0:	f7ff f878 	bl	80041b4 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b64      	cmp	r3, #100	; 0x64
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e27e      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050d2:	4b53      	ldr	r3, [pc, #332]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f0      	bne.n	80050c0 <HAL_RCC_OscConfig+0x10c>
 80050de:	e000      	b.n	80050e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d063      	beq.n	80051b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050ee:	4b4c      	ldr	r3, [pc, #304]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f003 030c 	and.w	r3, r3, #12
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00b      	beq.n	8005112 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050fa:	4b49      	ldr	r3, [pc, #292]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f003 030c 	and.w	r3, r3, #12
 8005102:	2b08      	cmp	r3, #8
 8005104:	d11c      	bne.n	8005140 <HAL_RCC_OscConfig+0x18c>
 8005106:	4b46      	ldr	r3, [pc, #280]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d116      	bne.n	8005140 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005112:	4b43      	ldr	r3, [pc, #268]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d005      	beq.n	800512a <HAL_RCC_OscConfig+0x176>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d001      	beq.n	800512a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e252      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800512a:	4b3d      	ldr	r3, [pc, #244]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4939      	ldr	r1, [pc, #228]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 800513a:	4313      	orrs	r3, r2
 800513c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800513e:	e03a      	b.n	80051b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d020      	beq.n	800518a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005148:	4b36      	ldr	r3, [pc, #216]	; (8005224 <HAL_RCC_OscConfig+0x270>)
 800514a:	2201      	movs	r2, #1
 800514c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514e:	f7ff f831 	bl	80041b4 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005156:	f7ff f82d 	bl	80041b4 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e233      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005168:	4b2d      	ldr	r3, [pc, #180]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005174:	4b2a      	ldr	r3, [pc, #168]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	4927      	ldr	r1, [pc, #156]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005184:	4313      	orrs	r3, r2
 8005186:	600b      	str	r3, [r1, #0]
 8005188:	e015      	b.n	80051b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800518a:	4b26      	ldr	r3, [pc, #152]	; (8005224 <HAL_RCC_OscConfig+0x270>)
 800518c:	2200      	movs	r2, #0
 800518e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005190:	f7ff f810 	bl	80041b4 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005198:	f7ff f80c 	bl	80041b4 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e212      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051aa:	4b1d      	ldr	r3, [pc, #116]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f0      	bne.n	8005198 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d03a      	beq.n	8005238 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d019      	beq.n	80051fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ca:	4b17      	ldr	r3, [pc, #92]	; (8005228 <HAL_RCC_OscConfig+0x274>)
 80051cc:	2201      	movs	r2, #1
 80051ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d0:	f7fe fff0 	bl	80041b4 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051d8:	f7fe ffec 	bl	80041b4 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e1f2      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ea:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <HAL_RCC_OscConfig+0x26c>)
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0f0      	beq.n	80051d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80051f6:	2001      	movs	r0, #1
 80051f8:	f000 fc1c 	bl	8005a34 <RCC_Delay>
 80051fc:	e01c      	b.n	8005238 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051fe:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <HAL_RCC_OscConfig+0x274>)
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005204:	f7fe ffd6 	bl	80041b4 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800520a:	e00f      	b.n	800522c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800520c:	f7fe ffd2 	bl	80041b4 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d908      	bls.n	800522c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e1d8      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
 800521e:	bf00      	nop
 8005220:	40021000 	.word	0x40021000
 8005224:	42420000 	.word	0x42420000
 8005228:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800522c:	4b9b      	ldr	r3, [pc, #620]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e9      	bne.n	800520c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 80a6 	beq.w	8005392 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005246:	2300      	movs	r3, #0
 8005248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800524a:	4b94      	ldr	r3, [pc, #592]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10d      	bne.n	8005272 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005256:	4b91      	ldr	r3, [pc, #580]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	4a90      	ldr	r2, [pc, #576]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 800525c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005260:	61d3      	str	r3, [r2, #28]
 8005262:	4b8e      	ldr	r3, [pc, #568]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526a:	60bb      	str	r3, [r7, #8]
 800526c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800526e:	2301      	movs	r3, #1
 8005270:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005272:	4b8b      	ldr	r3, [pc, #556]	; (80054a0 <HAL_RCC_OscConfig+0x4ec>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527a:	2b00      	cmp	r3, #0
 800527c:	d118      	bne.n	80052b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800527e:	4b88      	ldr	r3, [pc, #544]	; (80054a0 <HAL_RCC_OscConfig+0x4ec>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a87      	ldr	r2, [pc, #540]	; (80054a0 <HAL_RCC_OscConfig+0x4ec>)
 8005284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800528a:	f7fe ff93 	bl	80041b4 <HAL_GetTick>
 800528e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005290:	e008      	b.n	80052a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005292:	f7fe ff8f 	bl	80041b4 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b64      	cmp	r3, #100	; 0x64
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e195      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a4:	4b7e      	ldr	r3, [pc, #504]	; (80054a0 <HAL_RCC_OscConfig+0x4ec>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0f0      	beq.n	8005292 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d106      	bne.n	80052c6 <HAL_RCC_OscConfig+0x312>
 80052b8:	4b78      	ldr	r3, [pc, #480]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	4a77      	ldr	r2, [pc, #476]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 80052be:	f043 0301 	orr.w	r3, r3, #1
 80052c2:	6213      	str	r3, [r2, #32]
 80052c4:	e02d      	b.n	8005322 <HAL_RCC_OscConfig+0x36e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10c      	bne.n	80052e8 <HAL_RCC_OscConfig+0x334>
 80052ce:	4b73      	ldr	r3, [pc, #460]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	4a72      	ldr	r2, [pc, #456]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 80052d4:	f023 0301 	bic.w	r3, r3, #1
 80052d8:	6213      	str	r3, [r2, #32]
 80052da:	4b70      	ldr	r3, [pc, #448]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	4a6f      	ldr	r2, [pc, #444]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 80052e0:	f023 0304 	bic.w	r3, r3, #4
 80052e4:	6213      	str	r3, [r2, #32]
 80052e6:	e01c      	b.n	8005322 <HAL_RCC_OscConfig+0x36e>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b05      	cmp	r3, #5
 80052ee:	d10c      	bne.n	800530a <HAL_RCC_OscConfig+0x356>
 80052f0:	4b6a      	ldr	r3, [pc, #424]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	4a69      	ldr	r2, [pc, #420]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 80052f6:	f043 0304 	orr.w	r3, r3, #4
 80052fa:	6213      	str	r3, [r2, #32]
 80052fc:	4b67      	ldr	r3, [pc, #412]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	4a66      	ldr	r2, [pc, #408]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 8005302:	f043 0301 	orr.w	r3, r3, #1
 8005306:	6213      	str	r3, [r2, #32]
 8005308:	e00b      	b.n	8005322 <HAL_RCC_OscConfig+0x36e>
 800530a:	4b64      	ldr	r3, [pc, #400]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	4a63      	ldr	r2, [pc, #396]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 8005310:	f023 0301 	bic.w	r3, r3, #1
 8005314:	6213      	str	r3, [r2, #32]
 8005316:	4b61      	ldr	r3, [pc, #388]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	4a60      	ldr	r2, [pc, #384]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 800531c:	f023 0304 	bic.w	r3, r3, #4
 8005320:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d015      	beq.n	8005356 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800532a:	f7fe ff43 	bl	80041b4 <HAL_GetTick>
 800532e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005330:	e00a      	b.n	8005348 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005332:	f7fe ff3f 	bl	80041b4 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005340:	4293      	cmp	r3, r2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e143      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005348:	4b54      	ldr	r3, [pc, #336]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0ee      	beq.n	8005332 <HAL_RCC_OscConfig+0x37e>
 8005354:	e014      	b.n	8005380 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005356:	f7fe ff2d 	bl	80041b4 <HAL_GetTick>
 800535a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800535c:	e00a      	b.n	8005374 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800535e:	f7fe ff29 	bl	80041b4 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	f241 3288 	movw	r2, #5000	; 0x1388
 800536c:	4293      	cmp	r3, r2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e12d      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005374:	4b49      	ldr	r3, [pc, #292]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1ee      	bne.n	800535e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005380:	7dfb      	ldrb	r3, [r7, #23]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d105      	bne.n	8005392 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005386:	4b45      	ldr	r3, [pc, #276]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	4a44      	ldr	r2, [pc, #272]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 800538c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005390:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 808c 	beq.w	80054b4 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800539c:	4b3f      	ldr	r3, [pc, #252]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a8:	d10e      	bne.n	80053c8 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80053aa:	4b3c      	ldr	r3, [pc, #240]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d108      	bne.n	80053c8 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80053b6:	4b39      	ldr	r3, [pc, #228]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80053be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c2:	d101      	bne.n	80053c8 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e103      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d14e      	bne.n	800546e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80053d0:	4b32      	ldr	r3, [pc, #200]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d009      	beq.n	80053f0 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80053dc:	4b2f      	ldr	r3, [pc, #188]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d001      	beq.n	80053f0 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e0ef      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80053f0:	4b2c      	ldr	r3, [pc, #176]	; (80054a4 <HAL_RCC_OscConfig+0x4f0>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f6:	f7fe fedd 	bl	80041b4 <HAL_GetTick>
 80053fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80053fc:	e008      	b.n	8005410 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053fe:	f7fe fed9 	bl	80041b4 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b64      	cmp	r3, #100	; 0x64
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e0df      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005410:	4b22      	ldr	r3, [pc, #136]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1f0      	bne.n	80053fe <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 800541c:	4b1f      	ldr	r3, [pc, #124]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005428:	491c      	ldr	r1, [pc, #112]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 800542a:	4313      	orrs	r3, r2
 800542c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800542e:	4b1b      	ldr	r3, [pc, #108]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 8005430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005432:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	4918      	ldr	r1, [pc, #96]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 800543c:	4313      	orrs	r3, r2
 800543e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8005440:	4b18      	ldr	r3, [pc, #96]	; (80054a4 <HAL_RCC_OscConfig+0x4f0>)
 8005442:	2201      	movs	r2, #1
 8005444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005446:	f7fe feb5 	bl	80041b4 <HAL_GetTick>
 800544a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800544e:	f7fe feb1 	bl	80041b4 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b64      	cmp	r3, #100	; 0x64
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e0b7      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005460:	4b0e      	ldr	r3, [pc, #56]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0f0      	beq.n	800544e <HAL_RCC_OscConfig+0x49a>
 800546c:	e022      	b.n	80054b4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800546e:	4b0b      	ldr	r3, [pc, #44]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 8005470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005472:	4a0a      	ldr	r2, [pc, #40]	; (800549c <HAL_RCC_OscConfig+0x4e8>)
 8005474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005478:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800547a:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <HAL_RCC_OscConfig+0x4f0>)
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005480:	f7fe fe98 	bl	80041b4 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005486:	e00f      	b.n	80054a8 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005488:	f7fe fe94 	bl	80041b4 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b64      	cmp	r3, #100	; 0x64
 8005494:	d908      	bls.n	80054a8 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e09a      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
 800549a:	bf00      	nop
 800549c:	40021000 	.word	0x40021000
 80054a0:	40007000 	.word	0x40007000
 80054a4:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80054a8:	4b4b      	ldr	r3, [pc, #300]	; (80055d8 <HAL_RCC_OscConfig+0x624>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e9      	bne.n	8005488 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 8088 	beq.w	80055ce <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054be:	4b46      	ldr	r3, [pc, #280]	; (80055d8 <HAL_RCC_OscConfig+0x624>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f003 030c 	and.w	r3, r3, #12
 80054c6:	2b08      	cmp	r3, #8
 80054c8:	d068      	beq.n	800559c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d14d      	bne.n	800556e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d2:	4b42      	ldr	r3, [pc, #264]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d8:	f7fe fe6c 	bl	80041b4 <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e0:	f7fe fe68 	bl	80041b4 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e06e      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054f2:	4b39      	ldr	r3, [pc, #228]	; (80055d8 <HAL_RCC_OscConfig+0x624>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1f0      	bne.n	80054e0 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005506:	d10f      	bne.n	8005528 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8005508:	4b33      	ldr	r3, [pc, #204]	; (80055d8 <HAL_RCC_OscConfig+0x624>)
 800550a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	4931      	ldr	r1, [pc, #196]	; (80055d8 <HAL_RCC_OscConfig+0x624>)
 8005512:	4313      	orrs	r3, r2
 8005514:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005516:	4b30      	ldr	r3, [pc, #192]	; (80055d8 <HAL_RCC_OscConfig+0x624>)
 8005518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551a:	f023 020f 	bic.w	r2, r3, #15
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	492d      	ldr	r1, [pc, #180]	; (80055d8 <HAL_RCC_OscConfig+0x624>)
 8005524:	4313      	orrs	r3, r2
 8005526:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005528:	4b2b      	ldr	r3, [pc, #172]	; (80055d8 <HAL_RCC_OscConfig+0x624>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005538:	430b      	orrs	r3, r1
 800553a:	4927      	ldr	r1, [pc, #156]	; (80055d8 <HAL_RCC_OscConfig+0x624>)
 800553c:	4313      	orrs	r3, r2
 800553e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005540:	4b26      	ldr	r3, [pc, #152]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 8005542:	2201      	movs	r2, #1
 8005544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005546:	f7fe fe35 	bl	80041b4 <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800554c:	e008      	b.n	8005560 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800554e:	f7fe fe31 	bl	80041b4 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e037      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005560:	4b1d      	ldr	r3, [pc, #116]	; (80055d8 <HAL_RCC_OscConfig+0x624>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0f0      	beq.n	800554e <HAL_RCC_OscConfig+0x59a>
 800556c:	e02f      	b.n	80055ce <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800556e:	4b1b      	ldr	r3, [pc, #108]	; (80055dc <HAL_RCC_OscConfig+0x628>)
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005574:	f7fe fe1e 	bl	80041b4 <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800557c:	f7fe fe1a 	bl	80041b4 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e020      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800558e:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <HAL_RCC_OscConfig+0x624>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f0      	bne.n	800557c <HAL_RCC_OscConfig+0x5c8>
 800559a:	e018      	b.n	80055ce <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e013      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80055a8:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <HAL_RCC_OscConfig+0x624>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d106      	bne.n	80055ca <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d001      	beq.n	80055ce <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40021000 	.word	0x40021000
 80055dc:	42420060 	.word	0x42420060

080055e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0d0      	b.n	8005796 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055f4:	4b6a      	ldr	r3, [pc, #424]	; (80057a0 <HAL_RCC_ClockConfig+0x1c0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d910      	bls.n	8005624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005602:	4b67      	ldr	r3, [pc, #412]	; (80057a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f023 0207 	bic.w	r2, r3, #7
 800560a:	4965      	ldr	r1, [pc, #404]	; (80057a0 <HAL_RCC_ClockConfig+0x1c0>)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	4313      	orrs	r3, r2
 8005610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005612:	4b63      	ldr	r3, [pc, #396]	; (80057a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d001      	beq.n	8005624 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e0b8      	b.n	8005796 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d020      	beq.n	8005672 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800563c:	4b59      	ldr	r3, [pc, #356]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	4a58      	ldr	r2, [pc, #352]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005642:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005646:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005654:	4b53      	ldr	r3, [pc, #332]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	4a52      	ldr	r2, [pc, #328]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 800565a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800565e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005660:	4b50      	ldr	r3, [pc, #320]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	494d      	ldr	r1, [pc, #308]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 800566e:	4313      	orrs	r3, r2
 8005670:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d040      	beq.n	8005700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d107      	bne.n	8005696 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005686:	4b47      	ldr	r3, [pc, #284]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d115      	bne.n	80056be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e07f      	b.n	8005796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d107      	bne.n	80056ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800569e:	4b41      	ldr	r3, [pc, #260]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d109      	bne.n	80056be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e073      	b.n	8005796 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ae:	4b3d      	ldr	r3, [pc, #244]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e06b      	b.n	8005796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056be:	4b39      	ldr	r3, [pc, #228]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f023 0203 	bic.w	r2, r3, #3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	4936      	ldr	r1, [pc, #216]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056d0:	f7fe fd70 	bl	80041b4 <HAL_GetTick>
 80056d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d6:	e00a      	b.n	80056ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d8:	f7fe fd6c 	bl	80041b4 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e053      	b.n	8005796 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ee:	4b2d      	ldr	r3, [pc, #180]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f003 020c 	and.w	r2, r3, #12
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d1eb      	bne.n	80056d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005700:	4b27      	ldr	r3, [pc, #156]	; (80057a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d210      	bcs.n	8005730 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570e:	4b24      	ldr	r3, [pc, #144]	; (80057a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f023 0207 	bic.w	r2, r3, #7
 8005716:	4922      	ldr	r1, [pc, #136]	; (80057a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	4313      	orrs	r3, r2
 800571c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800571e:	4b20      	ldr	r3, [pc, #128]	; (80057a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d001      	beq.n	8005730 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e032      	b.n	8005796 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b00      	cmp	r3, #0
 800573a:	d008      	beq.n	800574e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800573c:	4b19      	ldr	r3, [pc, #100]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	4916      	ldr	r1, [pc, #88]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 800574a:	4313      	orrs	r3, r2
 800574c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	d009      	beq.n	800576e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800575a:	4b12      	ldr	r3, [pc, #72]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	490e      	ldr	r1, [pc, #56]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 800576a:	4313      	orrs	r3, r2
 800576c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800576e:	f000 f821 	bl	80057b4 <HAL_RCC_GetSysClockFreq>
 8005772:	4602      	mov	r2, r0
 8005774:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	091b      	lsrs	r3, r3, #4
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	490a      	ldr	r1, [pc, #40]	; (80057a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005780:	5ccb      	ldrb	r3, [r1, r3]
 8005782:	fa22 f303 	lsr.w	r3, r2, r3
 8005786:	4a09      	ldr	r2, [pc, #36]	; (80057ac <HAL_RCC_ClockConfig+0x1cc>)
 8005788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800578a:	4b09      	ldr	r3, [pc, #36]	; (80057b0 <HAL_RCC_ClockConfig+0x1d0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4618      	mov	r0, r3
 8005790:	f7fe fb38 	bl	8003e04 <HAL_InitTick>

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	40022000 	.word	0x40022000
 80057a4:	40021000 	.word	0x40021000
 80057a8:	0801325c 	.word	0x0801325c
 80057ac:	2000003c 	.word	0x2000003c
 80057b0:	20000040 	.word	0x20000040

080057b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b8:	b099      	sub	sp, #100	; 0x64
 80057ba:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80057bc:	4b66      	ldr	r3, [pc, #408]	; (8005958 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057be:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80057c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057c4:	c407      	stmia	r4!, {r0, r1, r2}
 80057c6:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80057c8:	4b64      	ldr	r3, [pc, #400]	; (800595c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80057ca:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80057ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	657b      	str	r3, [r7, #84]	; 0x54
 80057d8:	2300      	movs	r3, #0
 80057da:	653b      	str	r3, [r7, #80]	; 0x50
 80057dc:	2300      	movs	r3, #0
 80057de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057e0:	2300      	movs	r3, #0
 80057e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t sysclockfreq = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80057ec:	2300      	movs	r3, #0
 80057ee:	647b      	str	r3, [r7, #68]	; 0x44
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80057f0:	4b5b      	ldr	r3, [pc, #364]	; (8005960 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057f8:	f003 030c 	and.w	r3, r3, #12
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d002      	beq.n	8005806 <HAL_RCC_GetSysClockFreq+0x52>
 8005800:	2b08      	cmp	r3, #8
 8005802:	d003      	beq.n	800580c <HAL_RCC_GetSysClockFreq+0x58>
 8005804:	e09f      	b.n	8005946 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005806:	4b57      	ldr	r3, [pc, #348]	; (8005964 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8005808:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 800580a:	e09f      	b.n	800594c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800580c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800580e:	0c9b      	lsrs	r3, r3, #18
 8005810:	f003 030f 	and.w	r3, r3, #15
 8005814:	3340      	adds	r3, #64	; 0x40
 8005816:	f107 0220 	add.w	r2, r7, #32
 800581a:	4413      	add	r3, r2
 800581c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8005820:	64fb      	str	r3, [r7, #76]	; 0x4c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8084 	beq.w	8005936 <HAL_RCC_GetSysClockFreq+0x182>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800582e:	4b4c      	ldr	r3, [pc, #304]	; (8005960 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	3340      	adds	r3, #64	; 0x40
 8005838:	f107 0220 	add.w	r2, r7, #32
 800583c:	4413      	add	r3, r2
 800583e:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8005842:	653b      	str	r3, [r7, #80]	; 0x50
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8005844:	4b46      	ldr	r3, [pc, #280]	; (8005960 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d060      	beq.n	8005912 <HAL_RCC_GetSysClockFreq+0x15e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005850:	4b43      	ldr	r3, [pc, #268]	; (8005960 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	091b      	lsrs	r3, r3, #4
 8005856:	f003 030f 	and.w	r3, r3, #15
 800585a:	3301      	adds	r3, #1
 800585c:	64bb      	str	r3, [r7, #72]	; 0x48
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800585e:	4b40      	ldr	r3, [pc, #256]	; (8005960 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	0a1b      	lsrs	r3, r3, #8
 8005864:	f003 030f 	and.w	r3, r3, #15
 8005868:	3302      	adds	r3, #2
 800586a:	647b      	str	r3, [r7, #68]	; 0x44
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800586c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800586e:	2200      	movs	r2, #0
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	617a      	str	r2, [r7, #20]
 8005874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005876:	2200      	movs	r2, #0
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	61fa      	str	r2, [r7, #28]
 800587c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005880:	4622      	mov	r2, r4
 8005882:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005886:	4684      	mov	ip, r0
 8005888:	fb0c f202 	mul.w	r2, ip, r2
 800588c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8005890:	468c      	mov	ip, r1
 8005892:	4618      	mov	r0, r3
 8005894:	4621      	mov	r1, r4
 8005896:	4603      	mov	r3, r0
 8005898:	fb03 f30c 	mul.w	r3, r3, ip
 800589c:	4413      	add	r3, r2
 800589e:	4602      	mov	r2, r0
 80058a0:	69b9      	ldr	r1, [r7, #24]
 80058a2:	fba2 8901 	umull	r8, r9, r2, r1
 80058a6:	444b      	add	r3, r9
 80058a8:	4699      	mov	r9, r3
 80058aa:	4b2e      	ldr	r3, [pc, #184]	; (8005964 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80058ac:	fb03 f209 	mul.w	r2, r3, r9
 80058b0:	2300      	movs	r3, #0
 80058b2:	fb03 f308 	mul.w	r3, r3, r8
 80058b6:	4413      	add	r3, r2
 80058b8:	4a2a      	ldr	r2, [pc, #168]	; (8005964 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80058ba:	fba8 ab02 	umull	sl, fp, r8, r2
 80058be:	445b      	add	r3, fp
 80058c0:	469b      	mov	fp, r3
 80058c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058c4:	2200      	movs	r2, #0
 80058c6:	60bb      	str	r3, [r7, #8]
 80058c8:	60fa      	str	r2, [r7, #12]
 80058ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058cc:	2200      	movs	r2, #0
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	607a      	str	r2, [r7, #4]
 80058d2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80058d6:	4622      	mov	r2, r4
 80058d8:	e9d7 8900 	ldrd	r8, r9, [r7]
 80058dc:	4641      	mov	r1, r8
 80058de:	fb01 f202 	mul.w	r2, r1, r2
 80058e2:	46cc      	mov	ip, r9
 80058e4:	4618      	mov	r0, r3
 80058e6:	4621      	mov	r1, r4
 80058e8:	4603      	mov	r3, r0
 80058ea:	fb03 f30c 	mul.w	r3, r3, ip
 80058ee:	4413      	add	r3, r2
 80058f0:	4602      	mov	r2, r0
 80058f2:	4641      	mov	r1, r8
 80058f4:	fba2 5601 	umull	r5, r6, r2, r1
 80058f8:	4433      	add	r3, r6
 80058fa:	461e      	mov	r6, r3
 80058fc:	462a      	mov	r2, r5
 80058fe:	4633      	mov	r3, r6
 8005900:	4650      	mov	r0, sl
 8005902:	4659      	mov	r1, fp
 8005904:	f7fb fa04 	bl	8000d10 <__aeabi_uldivmod>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4613      	mov	r3, r2
 800590e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005910:	e007      	b.n	8005922 <HAL_RCC_GetSysClockFreq+0x16e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8005912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005914:	4a13      	ldr	r2, [pc, #76]	; (8005964 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8005916:	fb03 f202 	mul.w	r2, r3, r2
 800591a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800591c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005920:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8005922:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005926:	461a      	mov	r2, r3
 8005928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800592a:	4293      	cmp	r3, r2
 800592c:	d108      	bne.n	8005940 <HAL_RCC_GetSysClockFreq+0x18c>
        {
          pllclk = pllclk / 2;
 800592e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005930:	085b      	lsrs	r3, r3, #1
 8005932:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005934:	e004      	b.n	8005940 <HAL_RCC_GetSysClockFreq+0x18c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005938:	4a0b      	ldr	r2, [pc, #44]	; (8005968 <HAL_RCC_GetSysClockFreq+0x1b4>)
 800593a:	fb02 f303 	mul.w	r3, r2, r3
 800593e:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      sysclockfreq = pllclk;
 8005940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005942:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8005944:	e002      	b.n	800594c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005946:	4b09      	ldr	r3, [pc, #36]	; (800596c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005948:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 800594a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800594c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800594e:	4618      	mov	r0, r3
 8005950:	3764      	adds	r7, #100	; 0x64
 8005952:	46bd      	mov	sp, r7
 8005954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005958:	08012fcc 	.word	0x08012fcc
 800595c:	08012fdc 	.word	0x08012fdc
 8005960:	40021000 	.word	0x40021000
 8005964:	00989680 	.word	0x00989680
 8005968:	003d0900 	.word	0x003d0900
 800596c:	007a1200 	.word	0x007a1200

08005970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005974:	4b02      	ldr	r3, [pc, #8]	; (8005980 <HAL_RCC_GetHCLKFreq+0x10>)
 8005976:	681b      	ldr	r3, [r3, #0]
}
 8005978:	4618      	mov	r0, r3
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr
 8005980:	2000003c 	.word	0x2000003c

08005984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005988:	f7ff fff2 	bl	8005970 <HAL_RCC_GetHCLKFreq>
 800598c:	4602      	mov	r2, r0
 800598e:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	0a1b      	lsrs	r3, r3, #8
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	4903      	ldr	r1, [pc, #12]	; (80059a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800599a:	5ccb      	ldrb	r3, [r1, r3]
 800599c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	40021000 	.word	0x40021000
 80059a8:	0801326c 	.word	0x0801326c

080059ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059b0:	f7ff ffde 	bl	8005970 <HAL_RCC_GetHCLKFreq>
 80059b4:	4602      	mov	r2, r0
 80059b6:	4b05      	ldr	r3, [pc, #20]	; (80059cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	0adb      	lsrs	r3, r3, #11
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	4903      	ldr	r1, [pc, #12]	; (80059d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059c2:	5ccb      	ldrb	r3, [r1, r3]
 80059c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	40021000 	.word	0x40021000
 80059d0:	0801326c 	.word	0x0801326c

080059d4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	220f      	movs	r2, #15
 80059e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80059e4:	4b11      	ldr	r3, [pc, #68]	; (8005a2c <HAL_RCC_GetClockConfig+0x58>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f003 0203 	and.w	r2, r3, #3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80059f0:	4b0e      	ldr	r3, [pc, #56]	; (8005a2c <HAL_RCC_GetClockConfig+0x58>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80059fc:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <HAL_RCC_GetClockConfig+0x58>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005a08:	4b08      	ldr	r3, [pc, #32]	; (8005a2c <HAL_RCC_GetClockConfig+0x58>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	08db      	lsrs	r3, r3, #3
 8005a0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005a16:	4b06      	ldr	r3, [pc, #24]	; (8005a30 <HAL_RCC_GetClockConfig+0x5c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0207 	and.w	r2, r3, #7
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	40022000 	.word	0x40022000

08005a34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <RCC_Delay+0x34>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a0a      	ldr	r2, [pc, #40]	; (8005a6c <RCC_Delay+0x38>)
 8005a42:	fba2 2303 	umull	r2, r3, r2, r3
 8005a46:	0a5b      	lsrs	r3, r3, #9
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	fb02 f303 	mul.w	r3, r2, r3
 8005a4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005a50:	bf00      	nop
  }
  while (Delay --);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1e5a      	subs	r2, r3, #1
 8005a56:	60fa      	str	r2, [r7, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f9      	bne.n	8005a50 <RCC_Delay+0x1c>
}
 8005a5c:	bf00      	nop
 8005a5e:	bf00      	nop
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr
 8005a68:	2000003c 	.word	0x2000003c
 8005a6c:	10624dd3 	.word	0x10624dd3

08005a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b088      	sub	sp, #32
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d07d      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8005a90:	2300      	movs	r3, #0
 8005a92:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a94:	4b8b      	ldr	r3, [pc, #556]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10d      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aa0:	4b88      	ldr	r3, [pc, #544]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	4a87      	ldr	r2, [pc, #540]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aaa:	61d3      	str	r3, [r2, #28]
 8005aac:	4b85      	ldr	r3, [pc, #532]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005abc:	4b82      	ldr	r3, [pc, #520]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d118      	bne.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ac8:	4b7f      	ldr	r3, [pc, #508]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a7e      	ldr	r2, [pc, #504]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ad4:	f7fe fb6e 	bl	80041b4 <HAL_GetTick>
 8005ad8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ada:	e008      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005adc:	f7fe fb6a 	bl	80041b4 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b64      	cmp	r3, #100	; 0x64
 8005ae8:	d901      	bls.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e0e5      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aee:	4b76      	ldr	r3, [pc, #472]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0f0      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005afa:	4b72      	ldr	r3, [pc, #456]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b02:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d02e      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d027      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b18:	4b6a      	ldr	r3, [pc, #424]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b20:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b22:	4b6a      	ldr	r3, [pc, #424]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005b24:	2201      	movs	r2, #1
 8005b26:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b28:	4b68      	ldr	r3, [pc, #416]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b2e:	4a65      	ldr	r2, [pc, #404]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d014      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b3e:	f7fe fb39 	bl	80041b4 <HAL_GetTick>
 8005b42:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b44:	e00a      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b46:	f7fe fb35 	bl	80041b4 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e0ae      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b5c:	4b59      	ldr	r3, [pc, #356]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0ee      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b68:	4b56      	ldr	r3, [pc, #344]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	4953      	ldr	r1, [pc, #332]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b7a:	7efb      	ldrb	r3, [r7, #27]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d105      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b80:	4b50      	ldr	r3, [pc, #320]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	4a4f      	ldr	r2, [pc, #316]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d008      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b98:	4b4a      	ldr	r3, [pc, #296]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	4947      	ldr	r1, [pc, #284]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0304 	and.w	r3, r3, #4
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d008      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005bb6:	4b43      	ldr	r3, [pc, #268]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	4940      	ldr	r1, [pc, #256]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0308 	and.w	r3, r3, #8
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d008      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8005bd4:	4b3b      	ldr	r3, [pc, #236]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	4938      	ldr	r1, [pc, #224]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8005be6:	4b37      	ldr	r3, [pc, #220]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d105      	bne.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8005bf2:	4b34      	ldr	r3, [pc, #208]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d148      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005c08:	4b2e      	ldr	r3, [pc, #184]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d138      	bne.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005c14:	4b2b      	ldr	r3, [pc, #172]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d009      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8005c20:	4b28      	ldr	r3, [pc, #160]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d001      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e042      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8005c34:	4b23      	ldr	r3, [pc, #140]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	4920      	ldr	r1, [pc, #128]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8005c46:	4b1f      	ldr	r3, [pc, #124]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4a:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	491c      	ldr	r1, [pc, #112]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8005c58:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c5e:	f7fe faa9 	bl	80041b4 <HAL_GetTick>
 8005c62:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c64:	e008      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c66:	f7fe faa5 	bl	80041b4 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b64      	cmp	r3, #100	; 0x64
 8005c72:	d901      	bls.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e020      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c78:	4b12      	ldr	r3, [pc, #72]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d0f0      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005c84:	e009      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8005c86:	4b0f      	ldr	r3, [pc, #60]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d001      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e00f      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0310 	and.w	r3, r3, #16
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d008      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ca6:	4b07      	ldr	r3, [pc, #28]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	4904      	ldr	r1, [pc, #16]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3720      	adds	r7, #32
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	40007000 	.word	0x40007000
 8005ccc:	42420440 	.word	0x42420440
 8005cd0:	42420070 	.word	0x42420070

08005cd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e076      	b.n	8005dd4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d108      	bne.n	8005d00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cf6:	d009      	beq.n	8005d0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	61da      	str	r2, [r3, #28]
 8005cfe:	e005      	b.n	8005d0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fd fef2 	bl	8003b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d90:	ea42 0103 	orr.w	r1, r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	0c1a      	lsrs	r2, r3, #16
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f002 0204 	and.w	r2, r2, #4
 8005db2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	69da      	ldr	r2, [r3, #28]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dc2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08c      	sub	sp, #48	; 0x30
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005dea:	2301      	movs	r3, #1
 8005dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d101      	bne.n	8005e02 <HAL_SPI_TransmitReceive+0x26>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e18a      	b.n	8006118 <HAL_SPI_TransmitReceive+0x33c>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e0a:	f7fe f9d3 	bl	80041b4 <HAL_GetTick>
 8005e0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e20:	887b      	ldrh	r3, [r7, #2]
 8005e22:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d00f      	beq.n	8005e4c <HAL_SPI_TransmitReceive+0x70>
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e32:	d107      	bne.n	8005e44 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d103      	bne.n	8005e44 <HAL_SPI_TransmitReceive+0x68>
 8005e3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d003      	beq.n	8005e4c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e44:	2302      	movs	r3, #2
 8005e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e4a:	e15b      	b.n	8006104 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <HAL_SPI_TransmitReceive+0x82>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <HAL_SPI_TransmitReceive+0x82>
 8005e58:	887b      	ldrh	r3, [r7, #2]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d103      	bne.n	8005e66 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e64:	e14e      	b.n	8006104 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d003      	beq.n	8005e7a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2205      	movs	r2, #5
 8005e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	887a      	ldrh	r2, [r7, #2]
 8005e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	887a      	ldrh	r2, [r7, #2]
 8005e90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	887a      	ldrh	r2, [r7, #2]
 8005e9c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	887a      	ldrh	r2, [r7, #2]
 8005ea2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eba:	2b40      	cmp	r3, #64	; 0x40
 8005ebc:	d007      	beq.n	8005ece <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ecc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ed6:	d178      	bne.n	8005fca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <HAL_SPI_TransmitReceive+0x10a>
 8005ee0:	8b7b      	ldrh	r3, [r7, #26]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d166      	bne.n	8005fb4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eea:	881a      	ldrh	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef6:	1c9a      	adds	r2, r3, #2
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f0a:	e053      	b.n	8005fb4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d11b      	bne.n	8005f52 <HAL_SPI_TransmitReceive+0x176>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d016      	beq.n	8005f52 <HAL_SPI_TransmitReceive+0x176>
 8005f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d113      	bne.n	8005f52 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	881a      	ldrh	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	1c9a      	adds	r2, r3, #2
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d119      	bne.n	8005f94 <HAL_SPI_TransmitReceive+0x1b8>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d014      	beq.n	8005f94 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	b292      	uxth	r2, r2
 8005f76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7c:	1c9a      	adds	r2, r3, #2
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f90:	2301      	movs	r3, #1
 8005f92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f94:	f7fe f90e 	bl	80041b4 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d807      	bhi.n	8005fb4 <HAL_SPI_TransmitReceive+0x1d8>
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005faa:	d003      	beq.n	8005fb4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005fb2:	e0a7      	b.n	8006104 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1a6      	bne.n	8005f0c <HAL_SPI_TransmitReceive+0x130>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1a1      	bne.n	8005f0c <HAL_SPI_TransmitReceive+0x130>
 8005fc8:	e07c      	b.n	80060c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <HAL_SPI_TransmitReceive+0x1fc>
 8005fd2:	8b7b      	ldrh	r3, [r7, #26]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d16b      	bne.n	80060b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	330c      	adds	r3, #12
 8005fe2:	7812      	ldrb	r2, [r2, #0]
 8005fe4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ffe:	e057      	b.n	80060b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b02      	cmp	r3, #2
 800600c:	d11c      	bne.n	8006048 <HAL_SPI_TransmitReceive+0x26c>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006012:	b29b      	uxth	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d017      	beq.n	8006048 <HAL_SPI_TransmitReceive+0x26c>
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	2b01      	cmp	r3, #1
 800601c:	d114      	bne.n	8006048 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	330c      	adds	r3, #12
 8006028:	7812      	ldrb	r2, [r2, #0]
 800602a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800603a:	b29b      	uxth	r3, r3
 800603c:	3b01      	subs	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b01      	cmp	r3, #1
 8006054:	d119      	bne.n	800608a <HAL_SPI_TransmitReceive+0x2ae>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800605a:	b29b      	uxth	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d014      	beq.n	800608a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800607c:	b29b      	uxth	r3, r3
 800607e:	3b01      	subs	r3, #1
 8006080:	b29a      	uxth	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006086:	2301      	movs	r3, #1
 8006088:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800608a:	f7fe f893 	bl	80041b4 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006096:	429a      	cmp	r2, r3
 8006098:	d803      	bhi.n	80060a2 <HAL_SPI_TransmitReceive+0x2c6>
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a0:	d102      	bne.n	80060a8 <HAL_SPI_TransmitReceive+0x2cc>
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d103      	bne.n	80060b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80060ae:	e029      	b.n	8006104 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1a2      	bne.n	8006000 <HAL_SPI_TransmitReceive+0x224>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d19d      	bne.n	8006000 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 f9b5 	bl	8006438 <SPI_EndRxTxTransaction>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d006      	beq.n	80060e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2220      	movs	r2, #32
 80060de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80060e0:	e010      	b.n	8006104 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10b      	bne.n	8006102 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	617b      	str	r3, [r7, #20]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	e000      	b.n	8006104 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006102:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006114:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006118:	4618      	mov	r0, r3
 800611a:	3730      	adds	r7, #48	; 0x30
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b088      	sub	sp, #32
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	099b      	lsrs	r3, r3, #6
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10f      	bne.n	8006164 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	099b      	lsrs	r3, r3, #6
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d004      	beq.n	8006164 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	4798      	blx	r3
    return;
 8006162:	e0be      	b.n	80062e2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	085b      	lsrs	r3, r3, #1
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00a      	beq.n	8006186 <HAL_SPI_IRQHandler+0x66>
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	09db      	lsrs	r3, r3, #7
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d004      	beq.n	8006186 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	4798      	blx	r3
    return;
 8006184:	e0ad      	b.n	80062e2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	095b      	lsrs	r3, r3, #5
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <HAL_SPI_IRQHandler+0x80>
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	099b      	lsrs	r3, r3, #6
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 80a1 	beq.w	80062e2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 809a 	beq.w	80062e2 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	099b      	lsrs	r3, r3, #6
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d023      	beq.n	8006202 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d011      	beq.n	80061ea <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ca:	f043 0204 	orr.w	r2, r3, #4
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061d2:	2300      	movs	r3, #0
 80061d4:	617b      	str	r3, [r7, #20]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	617b      	str	r3, [r7, #20]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	e00b      	b.n	8006202 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061ea:	2300      	movs	r3, #0
 80061ec:	613b      	str	r3, [r7, #16]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	613b      	str	r3, [r7, #16]
 80061fe:	693b      	ldr	r3, [r7, #16]
        return;
 8006200:	e06f      	b.n	80062e2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	095b      	lsrs	r3, r3, #5
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d014      	beq.n	8006238 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006212:	f043 0201 	orr.w	r2, r3, #1
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623c:	2b00      	cmp	r3, #0
 800623e:	d04f      	beq.n	80062e0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800624e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d104      	bne.n	800626c <HAL_SPI_IRQHandler+0x14c>
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	d034      	beq.n	80062d6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0203 	bic.w	r2, r2, #3
 800627a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006280:	2b00      	cmp	r3, #0
 8006282:	d011      	beq.n	80062a8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006288:	4a17      	ldr	r2, [pc, #92]	; (80062e8 <HAL_SPI_IRQHandler+0x1c8>)
 800628a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006290:	4618      	mov	r0, r3
 8006292:	f7fe f94d 	bl	8004530 <HAL_DMA_Abort_IT>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d005      	beq.n	80062a8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d016      	beq.n	80062de <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062b4:	4a0c      	ldr	r2, [pc, #48]	; (80062e8 <HAL_SPI_IRQHandler+0x1c8>)
 80062b6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fe f937 	bl	8004530 <HAL_DMA_Abort_IT>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00a      	beq.n	80062de <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80062d4:	e003      	b.n	80062de <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f808 	bl	80062ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80062dc:	e000      	b.n	80062e0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80062de:	bf00      	nop
    return;
 80062e0:	bf00      	nop
  }
}
 80062e2:	3720      	adds	r7, #32
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	080062ff 	.word	0x080062ff

080062ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bc80      	pop	{r7}
 80062fc:	4770      	bx	lr

080062fe <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f7ff ffe7 	bl	80062ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800631e:	bf00      	nop
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b088      	sub	sp, #32
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	603b      	str	r3, [r7, #0]
 8006334:	4613      	mov	r3, r2
 8006336:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006338:	f7fd ff3c 	bl	80041b4 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	1a9b      	subs	r3, r3, r2
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	4413      	add	r3, r2
 8006346:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006348:	f7fd ff34 	bl	80041b4 <HAL_GetTick>
 800634c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800634e:	4b39      	ldr	r3, [pc, #228]	; (8006434 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	015b      	lsls	r3, r3, #5
 8006354:	0d1b      	lsrs	r3, r3, #20
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	fb02 f303 	mul.w	r3, r2, r3
 800635c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800635e:	e054      	b.n	800640a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006366:	d050      	beq.n	800640a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006368:	f7fd ff24 	bl	80041b4 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	69fa      	ldr	r2, [r7, #28]
 8006374:	429a      	cmp	r2, r3
 8006376:	d902      	bls.n	800637e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d13d      	bne.n	80063fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800638c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006396:	d111      	bne.n	80063bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a0:	d004      	beq.n	80063ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063aa:	d107      	bne.n	80063bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c4:	d10f      	bne.n	80063e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e017      	b.n	800642a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	3b01      	subs	r3, #1
 8006408:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4013      	ands	r3, r2
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	429a      	cmp	r2, r3
 8006418:	bf0c      	ite	eq
 800641a:	2301      	moveq	r3, #1
 800641c:	2300      	movne	r3, #0
 800641e:	b2db      	uxtb	r3, r3
 8006420:	461a      	mov	r2, r3
 8006422:	79fb      	ldrb	r3, [r7, #7]
 8006424:	429a      	cmp	r2, r3
 8006426:	d19b      	bne.n	8006360 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3720      	adds	r7, #32
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	2000003c 	.word	0x2000003c

08006438 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af02      	add	r7, sp, #8
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2200      	movs	r2, #0
 800644c:	2180      	movs	r1, #128	; 0x80
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f7ff ff6a 	bl	8006328 <SPI_WaitFlagStateUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d007      	beq.n	800646a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645e:	f043 0220 	orr.w	r2, r3, #32
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e000      	b.n	800646c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e041      	b.n	800650a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d106      	bne.n	80064a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f839 	bl	8006512 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3304      	adds	r3, #4
 80064b0:	4619      	mov	r1, r3
 80064b2:	4610      	mov	r0, r2
 80064b4:	f000 f9bc 	bl	8006830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	bc80      	pop	{r7}
 8006522:	4770      	bx	lr

08006524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b01      	cmp	r3, #1
 8006536:	d001      	beq.n	800653c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e03f      	b.n	80065bc <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0201 	orr.w	r2, r2, #1
 8006552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a1b      	ldr	r2, [pc, #108]	; (80065c8 <HAL_TIM_Base_Start_IT+0xa4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d013      	beq.n	8006586 <HAL_TIM_Base_Start_IT+0x62>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006566:	d00e      	beq.n	8006586 <HAL_TIM_Base_Start_IT+0x62>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a17      	ldr	r2, [pc, #92]	; (80065cc <HAL_TIM_Base_Start_IT+0xa8>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d009      	beq.n	8006586 <HAL_TIM_Base_Start_IT+0x62>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a16      	ldr	r2, [pc, #88]	; (80065d0 <HAL_TIM_Base_Start_IT+0xac>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d004      	beq.n	8006586 <HAL_TIM_Base_Start_IT+0x62>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a14      	ldr	r2, [pc, #80]	; (80065d4 <HAL_TIM_Base_Start_IT+0xb0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d111      	bne.n	80065aa <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f003 0307 	and.w	r3, r3, #7
 8006590:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b06      	cmp	r3, #6
 8006596:	d010      	beq.n	80065ba <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0201 	orr.w	r2, r2, #1
 80065a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a8:	e007      	b.n	80065ba <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f042 0201 	orr.w	r2, r2, #1
 80065b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bc80      	pop	{r7}
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40012c00 	.word	0x40012c00
 80065cc:	40000400 	.word	0x40000400
 80065d0:	40000800 	.word	0x40000800
 80065d4:	40000c00 	.word	0x40000c00

080065d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d122      	bne.n	8006634 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d11b      	bne.n	8006634 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0202 	mvn.w	r2, #2
 8006604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f8ed 	bl	80067fa <HAL_TIM_IC_CaptureCallback>
 8006620:	e005      	b.n	800662e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f8e0 	bl	80067e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f8ef 	bl	800680c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f003 0304 	and.w	r3, r3, #4
 800663e:	2b04      	cmp	r3, #4
 8006640:	d122      	bne.n	8006688 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f003 0304 	and.w	r3, r3, #4
 800664c:	2b04      	cmp	r3, #4
 800664e:	d11b      	bne.n	8006688 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f06f 0204 	mvn.w	r2, #4
 8006658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2202      	movs	r2, #2
 800665e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f8c3 	bl	80067fa <HAL_TIM_IC_CaptureCallback>
 8006674:	e005      	b.n	8006682 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f8b6 	bl	80067e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f8c5 	bl	800680c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f003 0308 	and.w	r3, r3, #8
 8006692:	2b08      	cmp	r3, #8
 8006694:	d122      	bne.n	80066dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d11b      	bne.n	80066dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f06f 0208 	mvn.w	r2, #8
 80066ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2204      	movs	r2, #4
 80066b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f899 	bl	80067fa <HAL_TIM_IC_CaptureCallback>
 80066c8:	e005      	b.n	80066d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f88c 	bl	80067e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f89b 	bl	800680c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0310 	and.w	r3, r3, #16
 80066e6:	2b10      	cmp	r3, #16
 80066e8:	d122      	bne.n	8006730 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f003 0310 	and.w	r3, r3, #16
 80066f4:	2b10      	cmp	r3, #16
 80066f6:	d11b      	bne.n	8006730 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0210 	mvn.w	r2, #16
 8006700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2208      	movs	r2, #8
 8006706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f86f 	bl	80067fa <HAL_TIM_IC_CaptureCallback>
 800671c:	e005      	b.n	800672a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f862 	bl	80067e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f871 	bl	800680c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b01      	cmp	r3, #1
 800673c:	d10e      	bne.n	800675c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b01      	cmp	r3, #1
 800674a:	d107      	bne.n	800675c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f06f 0201 	mvn.w	r2, #1
 8006754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7fc fa5c 	bl	8002c14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006766:	2b80      	cmp	r3, #128	; 0x80
 8006768:	d10e      	bne.n	8006788 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006774:	2b80      	cmp	r3, #128	; 0x80
 8006776:	d107      	bne.n	8006788 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f8c9 	bl	800691a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006792:	2b40      	cmp	r3, #64	; 0x40
 8006794:	d10e      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a0:	2b40      	cmp	r3, #64	; 0x40
 80067a2:	d107      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f835 	bl	800681e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	2b20      	cmp	r3, #32
 80067c0:	d10e      	bne.n	80067e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f003 0320 	and.w	r3, r3, #32
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d107      	bne.n	80067e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f06f 0220 	mvn.w	r2, #32
 80067d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f894 	bl	8006908 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bc80      	pop	{r7}
 80067f8:	4770      	bx	lr

080067fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006802:	bf00      	nop
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr

0800680c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	bc80      	pop	{r7}
 800681c:	4770      	bx	lr

0800681e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800681e:	b480      	push	{r7}
 8006820:	b083      	sub	sp, #12
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	bc80      	pop	{r7}
 800682e:	4770      	bx	lr

08006830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a2d      	ldr	r2, [pc, #180]	; (80068f8 <TIM_Base_SetConfig+0xc8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00f      	beq.n	8006868 <TIM_Base_SetConfig+0x38>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800684e:	d00b      	beq.n	8006868 <TIM_Base_SetConfig+0x38>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a2a      	ldr	r2, [pc, #168]	; (80068fc <TIM_Base_SetConfig+0xcc>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d007      	beq.n	8006868 <TIM_Base_SetConfig+0x38>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a29      	ldr	r2, [pc, #164]	; (8006900 <TIM_Base_SetConfig+0xd0>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d003      	beq.n	8006868 <TIM_Base_SetConfig+0x38>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a28      	ldr	r2, [pc, #160]	; (8006904 <TIM_Base_SetConfig+0xd4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d108      	bne.n	800687a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a1e      	ldr	r2, [pc, #120]	; (80068f8 <TIM_Base_SetConfig+0xc8>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d00f      	beq.n	80068a2 <TIM_Base_SetConfig+0x72>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006888:	d00b      	beq.n	80068a2 <TIM_Base_SetConfig+0x72>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a1b      	ldr	r2, [pc, #108]	; (80068fc <TIM_Base_SetConfig+0xcc>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d007      	beq.n	80068a2 <TIM_Base_SetConfig+0x72>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a1a      	ldr	r2, [pc, #104]	; (8006900 <TIM_Base_SetConfig+0xd0>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d003      	beq.n	80068a2 <TIM_Base_SetConfig+0x72>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a19      	ldr	r2, [pc, #100]	; (8006904 <TIM_Base_SetConfig+0xd4>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d108      	bne.n	80068b4 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	4313      	orrs	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a07      	ldr	r2, [pc, #28]	; (80068f8 <TIM_Base_SetConfig+0xc8>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d103      	bne.n	80068e8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	691a      	ldr	r2, [r3, #16]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	615a      	str	r2, [r3, #20]
}
 80068ee:	bf00      	nop
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc80      	pop	{r7}
 80068f6:	4770      	bx	lr
 80068f8:	40012c00 	.word	0x40012c00
 80068fc:	40000400 	.word	0x40000400
 8006900:	40000800 	.word	0x40000800
 8006904:	40000c00 	.word	0x40000c00

08006908 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	bc80      	pop	{r7}
 8006918:	4770      	bx	lr

0800691a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800691a:	b480      	push	{r7}
 800691c:	b083      	sub	sp, #12
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006922:	bf00      	nop
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	bc80      	pop	{r7}
 800692a:	4770      	bx	lr

0800692c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e03f      	b.n	80069be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d106      	bne.n	8006958 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7fd f994 	bl	8003c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2224      	movs	r2, #36	; 0x24
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800696e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fcc1 	bl	80072f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	691a      	ldr	r2, [r3, #16]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006984:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695a      	ldr	r2, [r3, #20]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006994:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68da      	ldr	r2, [r3, #12]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b08a      	sub	sp, #40	; 0x28
 80069ca:	af02      	add	r7, sp, #8
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	603b      	str	r3, [r7, #0]
 80069d2:	4613      	mov	r3, r2
 80069d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	d17c      	bne.n	8006ae0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d002      	beq.n	80069f2 <HAL_UART_Transmit+0x2c>
 80069ec:	88fb      	ldrh	r3, [r7, #6]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e075      	b.n	8006ae2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d101      	bne.n	8006a04 <HAL_UART_Transmit+0x3e>
 8006a00:	2302      	movs	r3, #2
 8006a02:	e06e      	b.n	8006ae2 <HAL_UART_Transmit+0x11c>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2221      	movs	r2, #33	; 0x21
 8006a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a1a:	f7fd fbcb 	bl	80041b4 <HAL_GetTick>
 8006a1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	88fa      	ldrh	r2, [r7, #6]
 8006a24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	88fa      	ldrh	r2, [r7, #6]
 8006a2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a34:	d108      	bne.n	8006a48 <HAL_UART_Transmit+0x82>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d104      	bne.n	8006a48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	61bb      	str	r3, [r7, #24]
 8006a46:	e003      	b.n	8006a50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006a58:	e02a      	b.n	8006ab0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	2200      	movs	r2, #0
 8006a62:	2180      	movs	r1, #128	; 0x80
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 fa73 	bl	8006f50 <UART_WaitOnFlagUntilTimeout>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e036      	b.n	8006ae2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10b      	bne.n	8006a92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	3302      	adds	r3, #2
 8006a8e:	61bb      	str	r3, [r7, #24]
 8006a90:	e007      	b.n	8006aa2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	781a      	ldrb	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1cf      	bne.n	8006a5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2140      	movs	r1, #64	; 0x40
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 fa43 	bl	8006f50 <UART_WaitOnFlagUntilTimeout>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e006      	b.n	8006ae2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	e000      	b.n	8006ae2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006ae0:	2302      	movs	r3, #2
  }
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3720      	adds	r7, #32
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b085      	sub	sp, #20
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	4613      	mov	r3, r2
 8006af6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b20      	cmp	r3, #32
 8006b02:	d130      	bne.n	8006b66 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <HAL_UART_Transmit_IT+0x26>
 8006b0a:	88fb      	ldrh	r3, [r7, #6]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e029      	b.n	8006b68 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d101      	bne.n	8006b22 <HAL_UART_Transmit_IT+0x38>
 8006b1e:	2302      	movs	r3, #2
 8006b20:	e022      	b.n	8006b68 <HAL_UART_Transmit_IT+0x7e>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	88fa      	ldrh	r2, [r7, #6]
 8006b34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	88fa      	ldrh	r2, [r7, #6]
 8006b3a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2221      	movs	r2, #33	; 0x21
 8006b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68da      	ldr	r2, [r3, #12]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b60:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	e000      	b.n	8006b68 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006b66:	2302      	movs	r3, #2
  }
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr

08006b72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b20      	cmp	r3, #32
 8006b8a:	d11d      	bne.n	8006bc8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <HAL_UART_Receive_IT+0x26>
 8006b92:	88fb      	ldrh	r3, [r7, #6]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e016      	b.n	8006bca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d101      	bne.n	8006baa <HAL_UART_Receive_IT+0x38>
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	e00f      	b.n	8006bca <HAL_UART_Receive_IT+0x58>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006bb8:	88fb      	ldrh	r3, [r7, #6]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 fa10 	bl	8006fe4 <UART_Start_Receive_IT>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	e000      	b.n	8006bca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006bc8:	2302      	movs	r3, #2
  }
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b08a      	sub	sp, #40	; 0x28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	f003 030f 	and.w	r3, r3, #15
 8006c02:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10d      	bne.n	8006c26 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	f003 0320 	and.w	r3, r3, #32
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d008      	beq.n	8006c26 <HAL_UART_IRQHandler+0x52>
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	f003 0320 	and.w	r3, r3, #32
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fac0 	bl	80071a4 <UART_Receive_IT>
      return;
 8006c24:	e17b      	b.n	8006f1e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 80b1 	beq.w	8006d90 <HAL_UART_IRQHandler+0x1bc>
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d105      	bne.n	8006c44 <HAL_UART_IRQHandler+0x70>
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 80a6 	beq.w	8006d90 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <HAL_UART_IRQHandler+0x90>
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d005      	beq.n	8006c64 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5c:	f043 0201 	orr.w	r2, r3, #1
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	f003 0304 	and.w	r3, r3, #4
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <HAL_UART_IRQHandler+0xb0>
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7c:	f043 0202 	orr.w	r2, r3, #2
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <HAL_UART_IRQHandler+0xd0>
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d005      	beq.n	8006ca4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9c:	f043 0204 	orr.w	r2, r3, #4
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	f003 0308 	and.w	r3, r3, #8
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00f      	beq.n	8006cce <HAL_UART_IRQHandler+0xfa>
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	f003 0320 	and.w	r3, r3, #32
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d104      	bne.n	8006cc2 <HAL_UART_IRQHandler+0xee>
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d005      	beq.n	8006cce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	f043 0208 	orr.w	r2, r3, #8
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 811e 	beq.w	8006f14 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d007      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x11e>
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	f003 0320 	and.w	r3, r3, #32
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fa59 	bl	80071a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	bf14      	ite	ne
 8006d00:	2301      	movne	r3, #1
 8006d02:	2300      	moveq	r3, #0
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	f003 0308 	and.w	r3, r3, #8
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d102      	bne.n	8006d1a <HAL_UART_IRQHandler+0x146>
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d031      	beq.n	8006d7e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f99b 	bl	8007056 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d023      	beq.n	8006d76 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	695a      	ldr	r2, [r3, #20]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d3c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d013      	beq.n	8006d6e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4a:	4a76      	ldr	r2, [pc, #472]	; (8006f24 <HAL_UART_IRQHandler+0x350>)
 8006d4c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fd fbec 	bl	8004530 <HAL_DMA_Abort_IT>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d016      	beq.n	8006d8c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d68:	4610      	mov	r0, r2
 8006d6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d6c:	e00e      	b.n	8006d8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f8da 	bl	8006f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d74:	e00a      	b.n	8006d8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f8d6 	bl	8006f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d7c:	e006      	b.n	8006d8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f8d2 	bl	8006f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006d8a:	e0c3      	b.n	8006f14 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d8c:	bf00      	nop
    return;
 8006d8e:	e0c1      	b.n	8006f14 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	f040 80a1 	bne.w	8006edc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	f003 0310 	and.w	r3, r3, #16
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 809b 	beq.w	8006edc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	f003 0310 	and.w	r3, r3, #16
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 8095 	beq.w	8006edc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006db2:	2300      	movs	r3, #0
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	60fb      	str	r3, [r7, #12]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d04e      	beq.n	8006e74 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006de0:	8a3b      	ldrh	r3, [r7, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 8098 	beq.w	8006f18 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006dec:	8a3a      	ldrh	r2, [r7, #16]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	f080 8092 	bcs.w	8006f18 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	8a3a      	ldrh	r2, [r7, #16]
 8006df8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	2b20      	cmp	r3, #32
 8006e02:	d02b      	beq.n	8006e5c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e12:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	695a      	ldr	r2, [r3, #20]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 0201 	bic.w	r2, r2, #1
 8006e22:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	695a      	ldr	r2, [r3, #20]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e32:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2220      	movs	r2, #32
 8006e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68da      	ldr	r2, [r3, #12]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 0210 	bic.w	r2, r2, #16
 8006e50:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fd fb30 	bl	80044bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f864 	bl	8006f3a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006e72:	e051      	b.n	8006f18 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d047      	beq.n	8006f1c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006e8c:	8a7b      	ldrh	r3, [r7, #18]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d044      	beq.n	8006f1c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ea0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	695a      	ldr	r2, [r3, #20]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0201 	bic.w	r2, r2, #1
 8006eb0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 0210 	bic.w	r2, r2, #16
 8006ece:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ed0:	8a7b      	ldrh	r3, [r7, #18]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f830 	bl	8006f3a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006eda:	e01f      	b.n	8006f1c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d008      	beq.n	8006ef8 <HAL_UART_IRQHandler+0x324>
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f8f0 	bl	80070d6 <UART_Transmit_IT>
    return;
 8006ef6:	e012      	b.n	8006f1e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00d      	beq.n	8006f1e <HAL_UART_IRQHandler+0x34a>
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d008      	beq.n	8006f1e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f931 	bl	8007174 <UART_EndTransmit_IT>
    return;
 8006f12:	e004      	b.n	8006f1e <HAL_UART_IRQHandler+0x34a>
    return;
 8006f14:	bf00      	nop
 8006f16:	e002      	b.n	8006f1e <HAL_UART_IRQHandler+0x34a>
      return;
 8006f18:	bf00      	nop
 8006f1a:	e000      	b.n	8006f1e <HAL_UART_IRQHandler+0x34a>
      return;
 8006f1c:	bf00      	nop
  }
}
 8006f1e:	3728      	adds	r7, #40	; 0x28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	080070af 	.word	0x080070af

08006f28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bc80      	pop	{r7}
 8006f38:	4770      	bx	lr

08006f3a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	460b      	mov	r3, r1
 8006f44:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f46:	bf00      	nop
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bc80      	pop	{r7}
 8006f4e:	4770      	bx	lr

08006f50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	603b      	str	r3, [r7, #0]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f60:	e02c      	b.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f68:	d028      	beq.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d007      	beq.n	8006f80 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f70:	f7fd f920 	bl	80041b4 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d21d      	bcs.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f8e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	695a      	ldr	r2, [r3, #20]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0201 	bic.w	r2, r2, #1
 8006f9e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e00f      	b.n	8006fdc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	bf0c      	ite	eq
 8006fcc:	2301      	moveq	r3, #1
 8006fce:	2300      	movne	r3, #0
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	79fb      	ldrb	r3, [r7, #7]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d0c3      	beq.n	8006f62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	88fa      	ldrh	r2, [r7, #6]
 8006ffc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	88fa      	ldrh	r2, [r7, #6]
 8007002:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2222      	movs	r2, #34	; 0x22
 800700e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007028:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	695a      	ldr	r2, [r3, #20]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 0201 	orr.w	r2, r2, #1
 8007038:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f042 0220 	orr.w	r2, r2, #32
 8007048:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	bc80      	pop	{r7}
 8007054:	4770      	bx	lr

08007056 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800706c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	695a      	ldr	r2, [r3, #20]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 0201 	bic.w	r2, r2, #1
 800707c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007082:	2b01      	cmp	r3, #1
 8007084:	d107      	bne.n	8007096 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68da      	ldr	r2, [r3, #12]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0210 	bic.w	r2, r2, #16
 8007094:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2220      	movs	r2, #32
 800709a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bc80      	pop	{r7}
 80070ac:	4770      	bx	lr

080070ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b084      	sub	sp, #16
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f7ff ff2d 	bl	8006f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ce:	bf00      	nop
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b085      	sub	sp, #20
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b21      	cmp	r3, #33	; 0x21
 80070e8:	d13e      	bne.n	8007168 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f2:	d114      	bne.n	800711e <UART_Transmit_IT+0x48>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d110      	bne.n	800711e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007110:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	1c9a      	adds	r2, r3, #2
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	621a      	str	r2, [r3, #32]
 800711c:	e008      	b.n	8007130 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	1c59      	adds	r1, r3, #1
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	6211      	str	r1, [r2, #32]
 8007128:	781a      	ldrb	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007134:	b29b      	uxth	r3, r3
 8007136:	3b01      	subs	r3, #1
 8007138:	b29b      	uxth	r3, r3
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	4619      	mov	r1, r3
 800713e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10f      	bne.n	8007164 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007152:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007162:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007164:	2300      	movs	r3, #0
 8007166:	e000      	b.n	800716a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007168:	2302      	movs	r3, #2
  }
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	bc80      	pop	{r7}
 8007172:	4770      	bx	lr

08007174 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68da      	ldr	r2, [r3, #12]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800718a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2220      	movs	r2, #32
 8007190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7fb f8a5 	bl	80022e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b22      	cmp	r3, #34	; 0x22
 80071b6:	f040 8099 	bne.w	80072ec <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c2:	d117      	bne.n	80071f4 <UART_Receive_IT+0x50>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d113      	bne.n	80071f4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071cc:	2300      	movs	r3, #0
 80071ce:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	1c9a      	adds	r2, r3, #2
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	629a      	str	r2, [r3, #40]	; 0x28
 80071f2:	e026      	b.n	8007242 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80071fa:	2300      	movs	r3, #0
 80071fc:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007206:	d007      	beq.n	8007218 <UART_Receive_IT+0x74>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10a      	bne.n	8007226 <UART_Receive_IT+0x82>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d106      	bne.n	8007226 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	b2da      	uxtb	r2, r3
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	701a      	strb	r2, [r3, #0]
 8007224:	e008      	b.n	8007238 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	b2db      	uxtb	r3, r3
 800722e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007232:	b2da      	uxtb	r2, r3
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007246:	b29b      	uxth	r3, r3
 8007248:	3b01      	subs	r3, #1
 800724a:	b29b      	uxth	r3, r3
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	4619      	mov	r1, r3
 8007250:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007252:	2b00      	cmp	r3, #0
 8007254:	d148      	bne.n	80072e8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68da      	ldr	r2, [r3, #12]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f022 0220 	bic.w	r2, r2, #32
 8007264:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007274:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	695a      	ldr	r2, [r3, #20]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 0201 	bic.w	r2, r2, #1
 8007284:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2220      	movs	r2, #32
 800728a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007292:	2b01      	cmp	r3, #1
 8007294:	d123      	bne.n	80072de <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0210 	bic.w	r2, r2, #16
 80072aa:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0310 	and.w	r3, r3, #16
 80072b6:	2b10      	cmp	r3, #16
 80072b8:	d10a      	bne.n	80072d0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	60fb      	str	r3, [r7, #12]
 80072ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff fe2f 	bl	8006f3a <HAL_UARTEx_RxEventCallback>
 80072dc:	e002      	b.n	80072e4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fa ffcc 	bl	800227c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072e4:	2300      	movs	r3, #0
 80072e6:	e002      	b.n	80072ee <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80072e8:	2300      	movs	r3, #0
 80072ea:	e000      	b.n	80072ee <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80072ec:	2302      	movs	r3, #2
  }
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	431a      	orrs	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	4313      	orrs	r3, r2
 8007326:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007332:	f023 030c 	bic.w	r3, r3, #12
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	6812      	ldr	r2, [r2, #0]
 800733a:	68b9      	ldr	r1, [r7, #8]
 800733c:	430b      	orrs	r3, r1
 800733e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699a      	ldr	r2, [r3, #24]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a2c      	ldr	r2, [pc, #176]	; (800740c <UART_SetConfig+0x114>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d103      	bne.n	8007368 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007360:	f7fe fb24 	bl	80059ac <HAL_RCC_GetPCLK2Freq>
 8007364:	60f8      	str	r0, [r7, #12]
 8007366:	e002      	b.n	800736e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007368:	f7fe fb0c 	bl	8005984 <HAL_RCC_GetPCLK1Freq>
 800736c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	4613      	mov	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	009a      	lsls	r2, r3, #2
 8007378:	441a      	add	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	fbb2 f3f3 	udiv	r3, r2, r3
 8007384:	4a22      	ldr	r2, [pc, #136]	; (8007410 <UART_SetConfig+0x118>)
 8007386:	fba2 2303 	umull	r2, r3, r2, r3
 800738a:	095b      	lsrs	r3, r3, #5
 800738c:	0119      	lsls	r1, r3, #4
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	009a      	lsls	r2, r3, #2
 8007398:	441a      	add	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80073a4:	4b1a      	ldr	r3, [pc, #104]	; (8007410 <UART_SetConfig+0x118>)
 80073a6:	fba3 0302 	umull	r0, r3, r3, r2
 80073aa:	095b      	lsrs	r3, r3, #5
 80073ac:	2064      	movs	r0, #100	; 0x64
 80073ae:	fb00 f303 	mul.w	r3, r0, r3
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	011b      	lsls	r3, r3, #4
 80073b6:	3332      	adds	r3, #50	; 0x32
 80073b8:	4a15      	ldr	r2, [pc, #84]	; (8007410 <UART_SetConfig+0x118>)
 80073ba:	fba2 2303 	umull	r2, r3, r2, r3
 80073be:	095b      	lsrs	r3, r3, #5
 80073c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073c4:	4419      	add	r1, r3
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	4613      	mov	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	009a      	lsls	r2, r3, #2
 80073d0:	441a      	add	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80073dc:	4b0c      	ldr	r3, [pc, #48]	; (8007410 <UART_SetConfig+0x118>)
 80073de:	fba3 0302 	umull	r0, r3, r3, r2
 80073e2:	095b      	lsrs	r3, r3, #5
 80073e4:	2064      	movs	r0, #100	; 0x64
 80073e6:	fb00 f303 	mul.w	r3, r0, r3
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	011b      	lsls	r3, r3, #4
 80073ee:	3332      	adds	r3, #50	; 0x32
 80073f0:	4a07      	ldr	r2, [pc, #28]	; (8007410 <UART_SetConfig+0x118>)
 80073f2:	fba2 2303 	umull	r2, r3, r2, r3
 80073f6:	095b      	lsrs	r3, r3, #5
 80073f8:	f003 020f 	and.w	r2, r3, #15
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	440a      	add	r2, r1
 8007402:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007404:	bf00      	nop
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	40013800 	.word	0x40013800
 8007410:	51eb851f 	.word	0x51eb851f

08007414 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007414:	b084      	sub	sp, #16
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	f107 001c 	add.w	r0, r7, #28
 8007422:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f8be 	bl	80075b4 <USB_CoreReset>
 8007438:	4603      	mov	r3, r0
 800743a:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007440:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8007448:	7bfb      	ldrb	r3, [r7, #15]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007454:	b004      	add	sp, #16
 8007456:	4770      	bx	lr

08007458 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f023 0201 	bic.w	r2, r3, #1
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	bc80      	pop	{r7}
 8007476:	4770      	bx	lr

08007478 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007494:	78fb      	ldrb	r3, [r7, #3]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d115      	bne.n	80074c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074a6:	2001      	movs	r0, #1
 80074a8:	f7fc fe8e 	bl	80041c8 <HAL_Delay>
      ms++;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3301      	adds	r3, #1
 80074b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f870 	bl	8007598 <USB_GetMode>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d01e      	beq.n	80074fc <USB_SetCurrentMode+0x84>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b31      	cmp	r3, #49	; 0x31
 80074c2:	d9f0      	bls.n	80074a6 <USB_SetCurrentMode+0x2e>
 80074c4:	e01a      	b.n	80074fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074c6:	78fb      	ldrb	r3, [r7, #3]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d115      	bne.n	80074f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074d8:	2001      	movs	r0, #1
 80074da:	f7fc fe75 	bl	80041c8 <HAL_Delay>
      ms++;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3301      	adds	r3, #1
 80074e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f857 	bl	8007598 <USB_GetMode>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <USB_SetCurrentMode+0x84>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b31      	cmp	r3, #49	; 0x31
 80074f4:	d9f0      	bls.n	80074d8 <USB_SetCurrentMode+0x60>
 80074f6:	e001      	b.n	80074fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e005      	b.n	8007508 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2b32      	cmp	r3, #50	; 0x32
 8007500:	d101      	bne.n	8007506 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e000      	b.n	8007508 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800751a:	2300      	movs	r3, #0
 800751c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	019b      	lsls	r3, r3, #6
 8007522:	f043 0220 	orr.w	r2, r3, #32
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	3301      	adds	r3, #1
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4a08      	ldr	r2, [pc, #32]	; (8007554 <USB_FlushTxFifo+0x44>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d901      	bls.n	800753c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e006      	b.n	800754a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b20      	cmp	r3, #32
 8007546:	d0f0      	beq.n	800752a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	bc80      	pop	{r7}
 8007552:	4770      	bx	lr
 8007554:	00030d40 	.word	0x00030d40

08007558 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007560:	2300      	movs	r3, #0
 8007562:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2210      	movs	r2, #16
 8007568:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3301      	adds	r3, #1
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4a08      	ldr	r2, [pc, #32]	; (8007594 <USB_FlushRxFifo+0x3c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d901      	bls.n	800757c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e006      	b.n	800758a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	f003 0310 	and.w	r3, r3, #16
 8007584:	2b10      	cmp	r3, #16
 8007586:	d0f0      	beq.n	800756a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	bc80      	pop	{r7}
 8007592:	4770      	bx	lr
 8007594:	00030d40 	.word	0x00030d40

08007598 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	f003 0301 	and.w	r3, r3, #1
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bc80      	pop	{r7}
 80075b0:	4770      	bx	lr
	...

080075b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3301      	adds	r3, #1
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	4a12      	ldr	r2, [pc, #72]	; (8007614 <USB_CoreReset+0x60>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d901      	bls.n	80075d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e01b      	b.n	800760a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	daf2      	bge.n	80075c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075da:	2300      	movs	r3, #0
 80075dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	f043 0201 	orr.w	r2, r3, #1
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3301      	adds	r3, #1
 80075ee:	60fb      	str	r3, [r7, #12]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4a08      	ldr	r2, [pc, #32]	; (8007614 <USB_CoreReset+0x60>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d901      	bls.n	80075fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e006      	b.n	800760a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b01      	cmp	r3, #1
 8007606:	d0f0      	beq.n	80075ea <USB_CoreReset+0x36>

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	bc80      	pop	{r7}
 8007612:	4770      	bx	lr
 8007614:	00030d40 	.word	0x00030d40

08007618 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007618:	b084      	sub	sp, #16
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	f107 001c 	add.w	r0, r7, #28
 8007626:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007634:	461a      	mov	r2, r3
 8007636:	2300      	movs	r3, #0
 8007638:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	639a      	str	r2, [r3, #56]	; 0x38
  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007660:	f023 0304 	bic.w	r3, r3, #4
 8007664:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007666:	2110      	movs	r1, #16
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff ff51 	bl	8007510 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7ff ff72 	bl	8007558 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007674:	2300      	movs	r3, #0
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	e015      	b.n	80076a6 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	4413      	add	r3, r2
 8007682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007686:	461a      	mov	r2, r3
 8007688:	f04f 33ff 	mov.w	r3, #4294967295
 800768c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	4413      	add	r3, r2
 8007696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800769a:	461a      	mov	r2, r3
 800769c:	2300      	movs	r3, #0
 800769e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3301      	adds	r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d3e5      	bcc.n	800767a <USB_HostInit+0x62>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ba:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2280      	movs	r2, #128	; 0x80
 80076c0:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a0c      	ldr	r2, [pc, #48]	; (80076f8 <USB_HostInit+0xe0>)
 80076c6:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a0c      	ldr	r2, [pc, #48]	; (80076fc <USB_HostInit+0xe4>)
 80076cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	f043 0210 	orr.w	r2, r3, #16
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	699a      	ldr	r2, [r3, #24]
 80076e0:	4b07      	ldr	r3, [pc, #28]	; (8007700 <USB_HostInit+0xe8>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076f4:	b004      	add	sp, #16
 80076f6:	4770      	bx	lr
 80076f8:	00600080 	.word	0x00600080
 80076fc:	004000e0 	.word	0x004000e0
 8007700:	a3200008 	.word	0xa3200008

08007704 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  //retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
	FATFS_LinkDriver(&SD0_Driver, SD0Path);
 8007708:	4908      	ldr	r1, [pc, #32]	; (800772c <MX_FATFS_Init+0x28>)
 800770a:	4809      	ldr	r0, [pc, #36]	; (8007730 <MX_FATFS_Init+0x2c>)
 800770c:	f004 fe70 	bl	800c3f0 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD1_Driver, SD1Path);
 8007710:	4908      	ldr	r1, [pc, #32]	; (8007734 <MX_FATFS_Init+0x30>)
 8007712:	4809      	ldr	r0, [pc, #36]	; (8007738 <MX_FATFS_Init+0x34>)
 8007714:	f004 fe6c 	bl	800c3f0 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD2_Driver, SD2Path);
 8007718:	4908      	ldr	r1, [pc, #32]	; (800773c <MX_FATFS_Init+0x38>)
 800771a:	4809      	ldr	r0, [pc, #36]	; (8007740 <MX_FATFS_Init+0x3c>)
 800771c:	f004 fe68 	bl	800c3f0 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD3_Driver, SD3Path);
 8007720:	4908      	ldr	r1, [pc, #32]	; (8007744 <MX_FATFS_Init+0x40>)
 8007722:	4809      	ldr	r0, [pc, #36]	; (8007748 <MX_FATFS_Init+0x44>)
 8007724:	f004 fe64 	bl	800c3f0 <FATFS_LinkDriver>


  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007728:	bf00      	nop
 800772a:	bd80      	pop	{r7, pc}
 800772c:	20001d9c 	.word	0x20001d9c
 8007730:	20000048 	.word	0x20000048
 8007734:	20001da0 	.word	0x20001da0
 8007738:	2000005c 	.word	0x2000005c
 800773c:	20001da4 	.word	0x20001da4
 8007740:	20000070 	.word	0x20000070
 8007744:	20001da8 	.word	0x20001da8
 8007748:	20000084 	.word	0x20000084

0800774c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800774c:	b480      	push	{r7}
 800774e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007750:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007752:	4618      	mov	r0, r3
 8007754:	46bd      	mov	sp, r7
 8007756:	bc80      	pop	{r7}
 8007758:	4770      	bx	lr

0800775a <SD0_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_initialize (BYTE pdrv)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b082      	sub	sp, #8
 800775e:	af00      	add	r7, sp, #0
 8007760:	4603      	mov	r3, r0
 8007762:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 8007764:	2000      	movs	r0, #0
 8007766:	f7fb faa3 	bl	8002cb0 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800776a:	79fb      	ldrb	r3, [r7, #7]
 800776c:	4618      	mov	r0, r3
 800776e:	f000 f839 	bl	80077e4 <USER_initialize>
 8007772:	4603      	mov	r3, r0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <SD1_initialize>:
DSTATUS SD1_initialize (BYTE pdrv)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	4603      	mov	r3, r0
 8007784:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 8007786:	2001      	movs	r0, #1
 8007788:	f7fb fa92 	bl	8002cb0 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800778c:	79fb      	ldrb	r3, [r7, #7]
 800778e:	4618      	mov	r0, r3
 8007790:	f000 f828 	bl	80077e4 <USER_initialize>
 8007794:	4603      	mov	r3, r0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <SD2_initialize>:
DSTATUS SD2_initialize (BYTE pdrv)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b082      	sub	sp, #8
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	4603      	mov	r3, r0
 80077a6:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 80077a8:	2002      	movs	r0, #2
 80077aa:	f7fb fa81 	bl	8002cb0 <sd_ss_set_active>
	return USER_initialize(pdrv);
 80077ae:	79fb      	ldrb	r3, [r7, #7]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 f817 	bl	80077e4 <USER_initialize>
 80077b6:	4603      	mov	r3, r0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <SD3_initialize>:
DSTATUS SD3_initialize (BYTE pdrv)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4603      	mov	r3, r0
 80077c8:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 80077ca:	2003      	movs	r0, #3
 80077cc:	f7fb fa70 	bl	8002cb0 <sd_ss_set_active>
	return USER_initialize(pdrv);
 80077d0:	79fb      	ldrb	r3, [r7, #7]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 f806 	bl	80077e4 <USER_initialize>
 80077d8:	4603      	mov	r3, r0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
	...

080077e4 <USER_initialize>:

DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	4603      	mov	r3, r0
 80077ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//SD_PowerOn();
	SS_SD_SELECT();
 80077ee:	f7fb fa7d 	bl	8002cec <sd_ss_active_pin_down>
	if(sd_ini()==0) {Stat &= ~STA_NOINIT;} // STA_NOINIT
 80077f2:	f7fb fafd 	bl	8002df0 <sd_ini>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d107      	bne.n	800780c <USER_initialize+0x28>
 80077fc:	4b08      	ldr	r3, [pc, #32]	; (8007820 <USER_initialize+0x3c>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	f023 0301 	bic.w	r3, r3, #1
 8007806:	b2da      	uxtb	r2, r3
 8007808:	4b05      	ldr	r3, [pc, #20]	; (8007820 <USER_initialize+0x3c>)
 800780a:	701a      	strb	r2, [r3, #0]
	SS_SD_DESELECT();
 800780c:	f7fb fa7e 	bl	8002d0c <sd_ss_active_pin_up>
    return Stat;
 8007810:	4b03      	ldr	r3, [pc, #12]	; (8007820 <USER_initialize+0x3c>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	20000045 	.word	0x20000045

08007824 <SD0_status>:
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_status (BYTE pdrv)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	4603      	mov	r3, r0
 800782c:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 800782e:	2000      	movs	r0, #0
 8007830:	f7fb fa3e 	bl	8002cb0 <sd_ss_set_active>
	return USER_status(pdrv);
 8007834:	79fb      	ldrb	r3, [r7, #7]
 8007836:	4618      	mov	r0, r3
 8007838:	f000 f838 	bl	80078ac <USER_status>
 800783c:	4603      	mov	r3, r0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <SD1_status>:
DSTATUS SD1_status (BYTE pdrv)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b082      	sub	sp, #8
 800784a:	af00      	add	r7, sp, #0
 800784c:	4603      	mov	r3, r0
 800784e:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 8007850:	2001      	movs	r0, #1
 8007852:	f7fb fa2d 	bl	8002cb0 <sd_ss_set_active>
	return USER_status(pdrv);
 8007856:	79fb      	ldrb	r3, [r7, #7]
 8007858:	4618      	mov	r0, r3
 800785a:	f000 f827 	bl	80078ac <USER_status>
 800785e:	4603      	mov	r3, r0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <SD2_status>:
DSTATUS SD2_status (BYTE pdrv)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 8007872:	2002      	movs	r0, #2
 8007874:	f7fb fa1c 	bl	8002cb0 <sd_ss_set_active>
	return USER_status(pdrv);
 8007878:	79fb      	ldrb	r3, [r7, #7]
 800787a:	4618      	mov	r0, r3
 800787c:	f000 f816 	bl	80078ac <USER_status>
 8007880:	4603      	mov	r3, r0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <SD3_status>:
DSTATUS SD3_status (BYTE pdrv)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b082      	sub	sp, #8
 800788e:	af00      	add	r7, sp, #0
 8007890:	4603      	mov	r3, r0
 8007892:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 8007894:	2003      	movs	r0, #3
 8007896:	f7fb fa0b 	bl	8002cb0 <sd_ss_set_active>
	return USER_status(pdrv);
 800789a:	79fb      	ldrb	r3, [r7, #7]
 800789c:	4618      	mov	r0, r3
 800789e:	f000 f805 	bl	80078ac <USER_status>
 80078a2:	4603      	mov	r3, r0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USER_status>:

DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	4603      	mov	r3, r0
 80078b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SS_SD_SELECT();
 80078b6:	f7fb fa19 	bl	8002cec <sd_ss_active_pin_down>
	if (pdrv) return STA_NOINIT;
 80078ba:	79fb      	ldrb	r3, [r7, #7]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <USER_status+0x18>
 80078c0:	2301      	movs	r3, #1
 80078c2:	e004      	b.n	80078ce <USER_status+0x22>
	SS_SD_DESELECT();
 80078c4:	f7fb fa22 	bl	8002d0c <sd_ss_active_pin_up>
    return Stat;
 80078c8:	4b03      	ldr	r3, [pc, #12]	; (80078d8 <USER_status+0x2c>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	20000045 	.word	0x20000045

080078dc <SD0_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DSTATUS SD0_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60b9      	str	r1, [r7, #8]
 80078e4:	607a      	str	r2, [r7, #4]
 80078e6:	603b      	str	r3, [r7, #0]
 80078e8:	4603      	mov	r3, r0
 80078ea:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 80078ec:	2000      	movs	r0, #0
 80078ee:	f7fb f9df 	bl	8002cb0 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 80078f2:	7bf8      	ldrb	r0, [r7, #15]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	68b9      	ldr	r1, [r7, #8]
 80078fa:	f000 f847 	bl	800798c <USER_read>
 80078fe:	4603      	mov	r3, r0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <SD1_read>:
DSTATUS SD1_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	60b9      	str	r1, [r7, #8]
 8007910:	607a      	str	r2, [r7, #4]
 8007912:	603b      	str	r3, [r7, #0]
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 8007918:	2001      	movs	r0, #1
 800791a:	f7fb f9c9 	bl	8002cb0 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800791e:	7bf8      	ldrb	r0, [r7, #15]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	68b9      	ldr	r1, [r7, #8]
 8007926:	f000 f831 	bl	800798c <USER_read>
 800792a:	4603      	mov	r3, r0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <SD2_read>:
DSTATUS SD2_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	607a      	str	r2, [r7, #4]
 800793e:	603b      	str	r3, [r7, #0]
 8007940:	4603      	mov	r3, r0
 8007942:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 8007944:	2002      	movs	r0, #2
 8007946:	f7fb f9b3 	bl	8002cb0 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800794a:	7bf8      	ldrb	r0, [r7, #15]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	68b9      	ldr	r1, [r7, #8]
 8007952:	f000 f81b 	bl	800798c <USER_read>
 8007956:	4603      	mov	r3, r0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <SD3_read>:
DSTATUS SD3_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	60b9      	str	r1, [r7, #8]
 8007968:	607a      	str	r2, [r7, #4]
 800796a:	603b      	str	r3, [r7, #0]
 800796c:	4603      	mov	r3, r0
 800796e:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 8007970:	2003      	movs	r0, #3
 8007972:	f7fb f99d 	bl	8002cb0 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8007976:	7bf8      	ldrb	r0, [r7, #15]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	68b9      	ldr	r1, [r7, #8]
 800797e:	f000 f805 	bl	800798c <USER_read>
 8007982:	4603      	mov	r3, r0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	607a      	str	r2, [r7, #4]
 8007996:	603b      	str	r3, [r7, #0]
 8007998:	4603      	mov	r3, r0
 800799a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SS_SD_SELECT();
 800799c:	f7fb f9a6 	bl	8002cec <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d102      	bne.n	80079ac <USER_read+0x20>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <USER_read+0x24>
 80079ac:	2304      	movs	r3, #4
 80079ae:	e043      	b.n	8007a38 <USER_read+0xac>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80079b0:	4b23      	ldr	r3, [pc, #140]	; (8007a40 <USER_read+0xb4>)
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <USER_read+0x36>
 80079be:	2303      	movs	r3, #3
 80079c0:	e03a      	b.n	8007a38 <USER_read+0xac>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 80079c2:	4b20      	ldr	r3, [pc, #128]	; (8007a44 <USER_read+0xb8>)
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d102      	bne.n	80079d6 <USER_read+0x4a>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	025b      	lsls	r3, r3, #9
 80079d4:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d106      	bne.n	80079ea <USER_read+0x5e>
	{
	  SD_Read_Block(buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	68b8      	ldr	r0, [r7, #8]
 80079e0:	f7fb fb3d 	bl	800305e <SD_Read_Block>
	  count = 0;
 80079e4:	2300      	movs	r3, #0
 80079e6:	603b      	str	r3, [r7, #0]
 80079e8:	e01c      	b.n	8007a24 <USER_read+0x98>
	}
	else /* Multiple block read */
	{
		do{
			SD_Read_Block((BYTE*)buff,sector);
 80079ea:	6879      	ldr	r1, [r7, #4]
 80079ec:	68b8      	ldr	r0, [r7, #8]
 80079ee:	f7fb fb36 	bl	800305e <SD_Read_Block>
			if (!(sdinfo.type & 4)){
 80079f2:	4b14      	ldr	r3, [pc, #80]	; (8007a44 <USER_read+0xb8>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d104      	bne.n	8007a0a <USER_read+0x7e>
				sector+=512;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007a06:	607b      	str	r3, [r7, #4]
 8007a08:	e002      	b.n	8007a10 <USER_read+0x84>
			}
			else sector++;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	607b      	str	r3, [r7, #4]
			buff+=512;
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007a16:	60bb      	str	r3, [r7, #8]
			count--;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	603b      	str	r3, [r7, #0]
		}while(count>0);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e2      	bne.n	80079ea <USER_read+0x5e>
	}
	SPI_Release();
 8007a24:	f7fb fb14 	bl	8003050 <SPI_Release>
	SS_SD_DESELECT();
 8007a28:	f7fb f970 	bl	8002d0c <sd_ss_active_pin_up>
	return count ? RES_ERROR : RES_OK;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	bf14      	ite	ne
 8007a32:	2301      	movne	r3, #1
 8007a34:	2300      	moveq	r3, #0
 8007a36:	b2db      	uxtb	r3, r3
    return RES_OK;
  /* USER CODE END READ */
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	20000045 	.word	0x20000045
 8007a44:	20001aa8 	.word	0x20001aa8

08007a48 <SD0_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DSTATUS SD0_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	607a      	str	r2, [r7, #4]
 8007a52:	603b      	str	r3, [r7, #0]
 8007a54:	4603      	mov	r3, r0
 8007a56:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 8007a58:	2000      	movs	r0, #0
 8007a5a:	f7fb f929 	bl	8002cb0 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8007a5e:	7bf8      	ldrb	r0, [r7, #15]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	68b9      	ldr	r1, [r7, #8]
 8007a66:	f000 f847 	bl	8007af8 <USER_write>
 8007a6a:	4603      	mov	r3, r0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <SD1_write>:
DSTATUS SD1_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60b9      	str	r1, [r7, #8]
 8007a7c:	607a      	str	r2, [r7, #4]
 8007a7e:	603b      	str	r3, [r7, #0]
 8007a80:	4603      	mov	r3, r0
 8007a82:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 8007a84:	2001      	movs	r0, #1
 8007a86:	f7fb f913 	bl	8002cb0 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8007a8a:	7bf8      	ldrb	r0, [r7, #15]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	68b9      	ldr	r1, [r7, #8]
 8007a92:	f000 f831 	bl	8007af8 <USER_write>
 8007a96:	4603      	mov	r3, r0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <SD2_write>:
DSTATUS SD2_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	607a      	str	r2, [r7, #4]
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	4603      	mov	r3, r0
 8007aae:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 8007ab0:	2002      	movs	r0, #2
 8007ab2:	f7fb f8fd 	bl	8002cb0 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8007ab6:	7bf8      	ldrb	r0, [r7, #15]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	68b9      	ldr	r1, [r7, #8]
 8007abe:	f000 f81b 	bl	8007af8 <USER_write>
 8007ac2:	4603      	mov	r3, r0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <SD3_write>:
DSTATUS SD3_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60b9      	str	r1, [r7, #8]
 8007ad4:	607a      	str	r2, [r7, #4]
 8007ad6:	603b      	str	r3, [r7, #0]
 8007ad8:	4603      	mov	r3, r0
 8007ada:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 8007adc:	2003      	movs	r0, #3
 8007ade:	f7fb f8e7 	bl	8002cb0 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8007ae2:	7bf8      	ldrb	r0, [r7, #15]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	68b9      	ldr	r1, [r7, #8]
 8007aea:	f000 f805 	bl	8007af8 <USER_write>
 8007aee:	4603      	mov	r3, r0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60b9      	str	r1, [r7, #8]
 8007b00:	607a      	str	r2, [r7, #4]
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	4603      	mov	r3, r0
 8007b06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	uint8_t res;
	SS_SD_SELECT();
 8007b08:	f7fb f8f0 	bl	8002cec <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <USER_write+0x20>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d101      	bne.n	8007b1c <USER_write+0x24>
 8007b18:	2304      	movs	r3, #4
 8007b1a:	e02c      	b.n	8007b76 <USER_write+0x7e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007b1c:	4b18      	ldr	r3, [pc, #96]	; (8007b80 <USER_write+0x88>)
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <USER_write+0x36>
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e023      	b.n	8007b76 <USER_write+0x7e>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8007b2e:	4b14      	ldr	r3, [pc, #80]	; (8007b80 <USER_write+0x88>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	f003 0304 	and.w	r3, r3, #4
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <USER_write+0x48>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e01a      	b.n	8007b76 <USER_write+0x7e>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 8007b40:	4b10      	ldr	r3, [pc, #64]	; (8007b84 <USER_write+0x8c>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	f003 0304 	and.w	r3, r3, #4
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d102      	bne.n	8007b54 <USER_write+0x5c>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	025b      	lsls	r3, r3, #9
 8007b52:	607b      	str	r3, [r7, #4]
  	res=SD_Write_Blocks((BYTE*)buff,sector,count);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	461a      	mov	r2, r3
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	68b8      	ldr	r0, [r7, #8]
 8007b5e:	f7fb fac3 	bl	80030e8 <SD_Write_Blocks>
 8007b62:	4603      	mov	r3, r0
 8007b64:	75fb      	strb	r3, [r7, #23]
	SS_SD_DESELECT();
 8007b66:	f7fb f8d1 	bl	8002d0c <sd_ss_active_pin_up>

	return res ? RES_ERROR : RES_OK;
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	bf14      	ite	ne
 8007b70:	2301      	movne	r3, #1
 8007b72:	2300      	moveq	r3, #0
 8007b74:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	20000045 	.word	0x20000045
 8007b84:	20001aa8 	.word	0x20001aa8

08007b88 <SD0_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DSTATUS SD0_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	603a      	str	r2, [r7, #0]
 8007b92:	71fb      	strb	r3, [r7, #7]
 8007b94:	460b      	mov	r3, r1
 8007b96:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(0);
 8007b98:	2000      	movs	r0, #0
 8007b9a:	f7fb f889 	bl	8002cb0 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8007b9e:	79b9      	ldrb	r1, [r7, #6]
 8007ba0:	79fb      	ldrb	r3, [r7, #7]
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 f847 	bl	8007c38 <USER_ioctl>
 8007baa:	4603      	mov	r3, r0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <SD1_ioctl>:
DSTATUS SD1_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	603a      	str	r2, [r7, #0]
 8007bbe:	71fb      	strb	r3, [r7, #7]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(1);
 8007bc4:	2001      	movs	r0, #1
 8007bc6:	f7fb f873 	bl	8002cb0 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8007bca:	79b9      	ldrb	r1, [r7, #6]
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 f831 	bl	8007c38 <USER_ioctl>
 8007bd6:	4603      	mov	r3, r0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <SD2_ioctl>:
DSTATUS SD2_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	4603      	mov	r3, r0
 8007be8:	603a      	str	r2, [r7, #0]
 8007bea:	71fb      	strb	r3, [r7, #7]
 8007bec:	460b      	mov	r3, r1
 8007bee:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(2);
 8007bf0:	2002      	movs	r0, #2
 8007bf2:	f7fb f85d 	bl	8002cb0 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8007bf6:	79b9      	ldrb	r1, [r7, #6]
 8007bf8:	79fb      	ldrb	r3, [r7, #7]
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 f81b 	bl	8007c38 <USER_ioctl>
 8007c02:	4603      	mov	r3, r0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <SD3_ioctl>:
DSTATUS SD3_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	4603      	mov	r3, r0
 8007c14:	603a      	str	r2, [r7, #0]
 8007c16:	71fb      	strb	r3, [r7, #7]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(3);
 8007c1c:	2003      	movs	r0, #3
 8007c1e:	f7fb f847 	bl	8002cb0 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8007c22:	79b9      	ldrb	r1, [r7, #6]
 8007c24:	79fb      	ldrb	r3, [r7, #7]
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 f805 	bl	8007c38 <USER_ioctl>
 8007c2e:	4603      	mov	r3, r0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	603a      	str	r2, [r7, #0]
 8007c42:	71fb      	strb	r3, [r7, #7]
 8007c44:	460b      	mov	r3, r1
 8007c46:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res;
	sd_ss_set_active(pdrv);
 8007c48:	79fb      	ldrb	r3, [r7, #7]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fb f830 	bl	8002cb0 <sd_ss_set_active>
	SS_SD_SELECT();
 8007c50:	f7fb f84c 	bl	8002cec <sd_ss_active_pin_down>
	if (pdrv) return RES_PARERR;
 8007c54:	79fb      	ldrb	r3, [r7, #7]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <USER_ioctl+0x26>
 8007c5a:	2304      	movs	r3, #4
 8007c5c:	e028      	b.n	8007cb0 <USER_ioctl+0x78>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007c5e:	4b16      	ldr	r3, [pc, #88]	; (8007cb8 <USER_ioctl+0x80>)
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <USER_ioctl+0x38>
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e01f      	b.n	8007cb0 <USER_ioctl+0x78>
	res = RES_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	73fb      	strb	r3, [r7, #15]
	switch (cmd)
 8007c74:	79bb      	ldrb	r3, [r7, #6]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <USER_ioctl+0x48>
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d008      	beq.n	8007c90 <USER_ioctl+0x58>
 8007c7e:	e00e      	b.n	8007c9e <USER_ioctl+0x66>
	{
	  case CTRL_SYNC : /* Flush dirty buffer if present */
	    //SS_SD_SELECT();
	    if (SPI_wait_ready() == 0xFF)
 8007c80:	f7fb f970 	bl	8002f64 <SPI_wait_ready>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2bff      	cmp	r3, #255	; 0xff
 8007c88:	d10c      	bne.n	8007ca4 <USER_ioctl+0x6c>
	    res = RES_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	73fb      	strb	r3, [r7, #15]
	    break;
 8007c8e:	e009      	b.n	8007ca4 <USER_ioctl+0x6c>
	  case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
	    *(WORD*)buff = 512;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c96:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73fb      	strb	r3, [r7, #15]
	    break;
 8007c9c:	e003      	b.n	8007ca6 <USER_ioctl+0x6e>
	  default:
	    res = RES_PARERR;
 8007c9e:	2304      	movs	r3, #4
 8007ca0:	73fb      	strb	r3, [r7, #15]
 8007ca2:	e000      	b.n	8007ca6 <USER_ioctl+0x6e>
	    break;
 8007ca4:	bf00      	nop
	}
	SPI_Release();
 8007ca6:	f7fb f9d3 	bl	8003050 <SPI_Release>
	SS_SD_DESELECT();
 8007caa:	f7fb f82f 	bl	8002d0c <sd_ss_active_pin_up>
    return res;
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	20000045 	.word	0x20000045

08007cbc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007cc6:	79fb      	ldrb	r3, [r7, #7]
 8007cc8:	4a08      	ldr	r2, [pc, #32]	; (8007cec <disk_status+0x30>)
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	79fa      	ldrb	r2, [r7, #7]
 8007cd4:	4905      	ldr	r1, [pc, #20]	; (8007cec <disk_status+0x30>)
 8007cd6:	440a      	add	r2, r1
 8007cd8:	7d12      	ldrb	r2, [r2, #20]
 8007cda:	4610      	mov	r0, r2
 8007cdc:	4798      	blx	r3
 8007cde:	4603      	mov	r3, r0
 8007ce0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	20002240 	.word	0x20002240

08007cf0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007cfe:	79fb      	ldrb	r3, [r7, #7]
 8007d00:	4a0d      	ldr	r2, [pc, #52]	; (8007d38 <disk_initialize+0x48>)
 8007d02:	5cd3      	ldrb	r3, [r2, r3]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d111      	bne.n	8007d2c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007d08:	79fb      	ldrb	r3, [r7, #7]
 8007d0a:	4a0b      	ldr	r2, [pc, #44]	; (8007d38 <disk_initialize+0x48>)
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007d10:	79fb      	ldrb	r3, [r7, #7]
 8007d12:	4a09      	ldr	r2, [pc, #36]	; (8007d38 <disk_initialize+0x48>)
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	79fa      	ldrb	r2, [r7, #7]
 8007d1e:	4906      	ldr	r1, [pc, #24]	; (8007d38 <disk_initialize+0x48>)
 8007d20:	440a      	add	r2, r1
 8007d22:	7d12      	ldrb	r2, [r2, #20]
 8007d24:	4610      	mov	r0, r2
 8007d26:	4798      	blx	r3
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	20002240 	.word	0x20002240

08007d3c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007d3c:	b590      	push	{r4, r7, lr}
 8007d3e:	b087      	sub	sp, #28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60b9      	str	r1, [r7, #8]
 8007d44:	607a      	str	r2, [r7, #4]
 8007d46:	603b      	str	r3, [r7, #0]
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
 8007d4e:	4a0a      	ldr	r2, [pc, #40]	; (8007d78 <disk_read+0x3c>)
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	689c      	ldr	r4, [r3, #8]
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	4a07      	ldr	r2, [pc, #28]	; (8007d78 <disk_read+0x3c>)
 8007d5c:	4413      	add	r3, r2
 8007d5e:	7d18      	ldrb	r0, [r3, #20]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	68b9      	ldr	r1, [r7, #8]
 8007d66:	47a0      	blx	r4
 8007d68:	4603      	mov	r3, r0
 8007d6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8007d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	371c      	adds	r7, #28
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd90      	pop	{r4, r7, pc}
 8007d76:	bf00      	nop
 8007d78:	20002240 	.word	0x20002240

08007d7c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007d7c:	b590      	push	{r4, r7, lr}
 8007d7e:	b087      	sub	sp, #28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60b9      	str	r1, [r7, #8]
 8007d84:	607a      	str	r2, [r7, #4]
 8007d86:	603b      	str	r3, [r7, #0]
 8007d88:	4603      	mov	r3, r0
 8007d8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
 8007d8e:	4a0a      	ldr	r2, [pc, #40]	; (8007db8 <disk_write+0x3c>)
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	68dc      	ldr	r4, [r3, #12]
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
 8007d9a:	4a07      	ldr	r2, [pc, #28]	; (8007db8 <disk_write+0x3c>)
 8007d9c:	4413      	add	r3, r2
 8007d9e:	7d18      	ldrb	r0, [r3, #20]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	68b9      	ldr	r1, [r7, #8]
 8007da6:	47a0      	blx	r4
 8007da8:	4603      	mov	r3, r0
 8007daa:	75fb      	strb	r3, [r7, #23]
  return res;
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd90      	pop	{r4, r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20002240 	.word	0x20002240

08007dbc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	603a      	str	r2, [r7, #0]
 8007dc6:	71fb      	strb	r3, [r7, #7]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007dcc:	79fb      	ldrb	r3, [r7, #7]
 8007dce:	4a09      	ldr	r2, [pc, #36]	; (8007df4 <disk_ioctl+0x38>)
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	79fa      	ldrb	r2, [r7, #7]
 8007dda:	4906      	ldr	r1, [pc, #24]	; (8007df4 <disk_ioctl+0x38>)
 8007ddc:	440a      	add	r2, r1
 8007dde:	7d10      	ldrb	r0, [r2, #20]
 8007de0:	79b9      	ldrb	r1, [r7, #6]
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	4798      	blx	r3
 8007de6:	4603      	mov	r3, r0
 8007de8:	73fb      	strb	r3, [r7, #15]
  return res;
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	20002240 	.word	0x20002240

08007df8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3301      	adds	r3, #1
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007e08:	89fb      	ldrh	r3, [r7, #14]
 8007e0a:	021b      	lsls	r3, r3, #8
 8007e0c:	b21a      	sxth	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	b21b      	sxth	r3, r3
 8007e14:	4313      	orrs	r3, r2
 8007e16:	b21b      	sxth	r3, r3
 8007e18:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007e1a:	89fb      	ldrh	r3, [r7, #14]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bc80      	pop	{r7}
 8007e24:	4770      	bx	lr

08007e26 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007e26:	b480      	push	{r7}
 8007e28:	b085      	sub	sp, #20
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	3303      	adds	r3, #3
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	021b      	lsls	r3, r3, #8
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	3202      	adds	r2, #2
 8007e3e:	7812      	ldrb	r2, [r2, #0]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	021b      	lsls	r3, r3, #8
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	3201      	adds	r2, #1
 8007e4c:	7812      	ldrb	r2, [r2, #0]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	021b      	lsls	r3, r3, #8
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	7812      	ldrb	r2, [r2, #0]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60fb      	str	r3, [r7, #12]
	return rv;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3714      	adds	r7, #20
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bc80      	pop	{r7}
 8007e68:	4770      	bx	lr

08007e6a <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8007e6a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007e6e:	b09d      	sub	sp, #116	; 0x74
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 8007e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e76:	3307      	adds	r3, #7
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	469a      	mov	sl, r3
 8007e80:	4693      	mov	fp, r2
 8007e82:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 8007e86:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007e8a:	f04f 0000 	mov.w	r0, #0
 8007e8e:	f04f 0100 	mov.w	r1, #0
 8007e92:	0219      	lsls	r1, r3, #8
 8007e94:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8007e98:	0210      	lsls	r0, r2, #8
 8007e9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e9c:	3306      	adds	r3, #6
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	461c      	mov	r4, r3
 8007ea6:	4615      	mov	r5, r2
 8007ea8:	ea40 0804 	orr.w	r8, r0, r4
 8007eac:	ea41 0905 	orr.w	r9, r1, r5
 8007eb0:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 8007eb4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007eb8:	f04f 0000 	mov.w	r0, #0
 8007ebc:	f04f 0100 	mov.w	r1, #0
 8007ec0:	0219      	lsls	r1, r3, #8
 8007ec2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8007ec6:	0210      	lsls	r0, r2, #8
 8007ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eca:	3305      	adds	r3, #5
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ed4:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007ed6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8007eda:	461a      	mov	r2, r3
 8007edc:	4302      	orrs	r2, r0
 8007ede:	62ba      	str	r2, [r7, #40]	; 0x28
 8007ee0:	4623      	mov	r3, r4
 8007ee2:	430b      	orrs	r3, r1
 8007ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ee6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8007eea:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 8007eee:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007ef2:	f04f 0000 	mov.w	r0, #0
 8007ef6:	f04f 0100 	mov.w	r1, #0
 8007efa:	0219      	lsls	r1, r3, #8
 8007efc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8007f00:	0210      	lsls	r0, r2, #8
 8007f02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f04:	3304      	adds	r3, #4
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	653b      	str	r3, [r7, #80]	; 0x50
 8007f0e:	657a      	str	r2, [r7, #84]	; 0x54
 8007f10:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007f14:	461a      	mov	r2, r3
 8007f16:	4302      	orrs	r2, r0
 8007f18:	623a      	str	r2, [r7, #32]
 8007f1a:	4623      	mov	r3, r4
 8007f1c:	430b      	orrs	r3, r1
 8007f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f20:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007f24:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 8007f28:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007f2c:	f04f 0000 	mov.w	r0, #0
 8007f30:	f04f 0100 	mov.w	r1, #0
 8007f34:	0219      	lsls	r1, r3, #8
 8007f36:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8007f3a:	0210      	lsls	r0, r2, #8
 8007f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f3e:	3303      	adds	r3, #3
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2200      	movs	r2, #0
 8007f46:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f48:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007f4a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8007f4e:	461a      	mov	r2, r3
 8007f50:	4302      	orrs	r2, r0
 8007f52:	61ba      	str	r2, [r7, #24]
 8007f54:	4623      	mov	r3, r4
 8007f56:	430b      	orrs	r3, r1
 8007f58:	61fb      	str	r3, [r7, #28]
 8007f5a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007f5e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 8007f62:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007f66:	f04f 0000 	mov.w	r0, #0
 8007f6a:	f04f 0100 	mov.w	r1, #0
 8007f6e:	0219      	lsls	r1, r3, #8
 8007f70:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8007f74:	0210      	lsls	r0, r2, #8
 8007f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f78:	3302      	adds	r3, #2
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2200      	movs	r2, #0
 8007f80:	643b      	str	r3, [r7, #64]	; 0x40
 8007f82:	647a      	str	r2, [r7, #68]	; 0x44
 8007f84:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8007f88:	461a      	mov	r2, r3
 8007f8a:	4302      	orrs	r2, r0
 8007f8c:	613a      	str	r2, [r7, #16]
 8007f8e:	4623      	mov	r3, r4
 8007f90:	430b      	orrs	r3, r1
 8007f92:	617b      	str	r3, [r7, #20]
 8007f94:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007f98:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 8007f9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007fa0:	f04f 0200 	mov.w	r2, #0
 8007fa4:	f04f 0300 	mov.w	r3, #0
 8007fa8:	020b      	lsls	r3, r1, #8
 8007faa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fae:	0202      	lsls	r2, r0, #8
 8007fb0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007fb2:	3101      	adds	r1, #1
 8007fb4:	7809      	ldrb	r1, [r1, #0]
 8007fb6:	b2c9      	uxtb	r1, r1
 8007fb8:	2000      	movs	r0, #0
 8007fba:	63b9      	str	r1, [r7, #56]	; 0x38
 8007fbc:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007fbe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	4314      	orrs	r4, r2
 8007fc6:	60bc      	str	r4, [r7, #8]
 8007fc8:	4319      	orrs	r1, r3
 8007fca:	60f9      	str	r1, [r7, #12]
 8007fcc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007fd0:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 8007fd4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007fd8:	f04f 0200 	mov.w	r2, #0
 8007fdc:	f04f 0300 	mov.w	r3, #0
 8007fe0:	020b      	lsls	r3, r1, #8
 8007fe2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fe6:	0202      	lsls	r2, r0, #8
 8007fe8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007fea:	7809      	ldrb	r1, [r1, #0]
 8007fec:	b2c9      	uxtb	r1, r1
 8007fee:	2000      	movs	r0, #0
 8007ff0:	6339      	str	r1, [r7, #48]	; 0x30
 8007ff2:	6378      	str	r0, [r7, #52]	; 0x34
 8007ff4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	4314      	orrs	r4, r2
 8007ffc:	603c      	str	r4, [r7, #0]
 8007ffe:	4319      	orrs	r1, r3
 8008000:	6079      	str	r1, [r7, #4]
 8008002:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008006:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800800a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800800e:	4610      	mov	r0, r2
 8008010:	4619      	mov	r1, r3
 8008012:	3774      	adds	r7, #116	; 0x74
 8008014:	46bd      	mov	sp, r7
 8008016:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800801a:	4770      	bx	lr

0800801c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	1c5a      	adds	r2, r3, #1
 800802c:	607a      	str	r2, [r7, #4]
 800802e:	887a      	ldrh	r2, [r7, #2]
 8008030:	b2d2      	uxtb	r2, r2
 8008032:	701a      	strb	r2, [r3, #0]
 8008034:	887b      	ldrh	r3, [r7, #2]
 8008036:	0a1b      	lsrs	r3, r3, #8
 8008038:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	1c5a      	adds	r2, r3, #1
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	887a      	ldrh	r2, [r7, #2]
 8008042:	b2d2      	uxtb	r2, r2
 8008044:	701a      	strb	r2, [r3, #0]
}
 8008046:	bf00      	nop
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	bc80      	pop	{r7}
 800804e:	4770      	bx	lr

08008050 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	1c5a      	adds	r2, r3, #1
 800805e:	607a      	str	r2, [r7, #4]
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	b2d2      	uxtb	r2, r2
 8008064:	701a      	strb	r2, [r3, #0]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	0a1b      	lsrs	r3, r3, #8
 800806a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	1c5a      	adds	r2, r3, #1
 8008070:	607a      	str	r2, [r7, #4]
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	b2d2      	uxtb	r2, r2
 8008076:	701a      	strb	r2, [r3, #0]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	0a1b      	lsrs	r3, r3, #8
 800807c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	607a      	str	r2, [r7, #4]
 8008084:	683a      	ldr	r2, [r7, #0]
 8008086:	b2d2      	uxtb	r2, r2
 8008088:	701a      	strb	r2, [r3, #0]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	0a1b      	lsrs	r3, r3, #8
 800808e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	1c5a      	adds	r2, r3, #1
 8008094:	607a      	str	r2, [r7, #4]
 8008096:	683a      	ldr	r2, [r7, #0]
 8008098:	b2d2      	uxtb	r2, r2
 800809a:	701a      	strb	r2, [r3, #0]
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bc80      	pop	{r7}
 80080a4:	4770      	bx	lr

080080a6 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80080a6:	b480      	push	{r7}
 80080a8:	b085      	sub	sp, #20
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	1c5a      	adds	r2, r3, #1
 80080b6:	60fa      	str	r2, [r7, #12]
 80080b8:	783a      	ldrb	r2, [r7, #0]
 80080ba:	701a      	strb	r2, [r3, #0]
 80080bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080c0:	f04f 0200 	mov.w	r2, #0
 80080c4:	f04f 0300 	mov.w	r3, #0
 80080c8:	0a02      	lsrs	r2, r0, #8
 80080ca:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80080ce:	0a0b      	lsrs	r3, r1, #8
 80080d0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	1c5a      	adds	r2, r3, #1
 80080d8:	60fa      	str	r2, [r7, #12]
 80080da:	783a      	ldrb	r2, [r7, #0]
 80080dc:	701a      	strb	r2, [r3, #0]
 80080de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080e2:	f04f 0200 	mov.w	r2, #0
 80080e6:	f04f 0300 	mov.w	r3, #0
 80080ea:	0a02      	lsrs	r2, r0, #8
 80080ec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80080f0:	0a0b      	lsrs	r3, r1, #8
 80080f2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	1c5a      	adds	r2, r3, #1
 80080fa:	60fa      	str	r2, [r7, #12]
 80080fc:	783a      	ldrb	r2, [r7, #0]
 80080fe:	701a      	strb	r2, [r3, #0]
 8008100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008104:	f04f 0200 	mov.w	r2, #0
 8008108:	f04f 0300 	mov.w	r3, #0
 800810c:	0a02      	lsrs	r2, r0, #8
 800810e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008112:	0a0b      	lsrs	r3, r1, #8
 8008114:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	1c5a      	adds	r2, r3, #1
 800811c:	60fa      	str	r2, [r7, #12]
 800811e:	783a      	ldrb	r2, [r7, #0]
 8008120:	701a      	strb	r2, [r3, #0]
 8008122:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008126:	f04f 0200 	mov.w	r2, #0
 800812a:	f04f 0300 	mov.w	r3, #0
 800812e:	0a02      	lsrs	r2, r0, #8
 8008130:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008134:	0a0b      	lsrs	r3, r1, #8
 8008136:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	60fa      	str	r2, [r7, #12]
 8008140:	783a      	ldrb	r2, [r7, #0]
 8008142:	701a      	strb	r2, [r3, #0]
 8008144:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008148:	f04f 0200 	mov.w	r2, #0
 800814c:	f04f 0300 	mov.w	r3, #0
 8008150:	0a02      	lsrs	r2, r0, #8
 8008152:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008156:	0a0b      	lsrs	r3, r1, #8
 8008158:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	1c5a      	adds	r2, r3, #1
 8008160:	60fa      	str	r2, [r7, #12]
 8008162:	783a      	ldrb	r2, [r7, #0]
 8008164:	701a      	strb	r2, [r3, #0]
 8008166:	e9d7 0100 	ldrd	r0, r1, [r7]
 800816a:	f04f 0200 	mov.w	r2, #0
 800816e:	f04f 0300 	mov.w	r3, #0
 8008172:	0a02      	lsrs	r2, r0, #8
 8008174:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008178:	0a0b      	lsrs	r3, r1, #8
 800817a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	1c5a      	adds	r2, r3, #1
 8008182:	60fa      	str	r2, [r7, #12]
 8008184:	783a      	ldrb	r2, [r7, #0]
 8008186:	701a      	strb	r2, [r3, #0]
 8008188:	e9d7 0100 	ldrd	r0, r1, [r7]
 800818c:	f04f 0200 	mov.w	r2, #0
 8008190:	f04f 0300 	mov.w	r3, #0
 8008194:	0a02      	lsrs	r2, r0, #8
 8008196:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800819a:	0a0b      	lsrs	r3, r1, #8
 800819c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	1c5a      	adds	r2, r3, #1
 80081a4:	60fa      	str	r2, [r7, #12]
 80081a6:	783a      	ldrb	r2, [r7, #0]
 80081a8:	701a      	strb	r2, [r3, #0]
}
 80081aa:	bf00      	nop
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bc80      	pop	{r7}
 80081b2:	4770      	bx	lr

080081b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80081b4:	b480      	push	{r7}
 80081b6:	b087      	sub	sp, #28
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00d      	beq.n	80081ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80081ce:	693a      	ldr	r2, [r7, #16]
 80081d0:	1c53      	adds	r3, r2, #1
 80081d2:	613b      	str	r3, [r7, #16]
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	1c59      	adds	r1, r3, #1
 80081d8:	6179      	str	r1, [r7, #20]
 80081da:	7812      	ldrb	r2, [r2, #0]
 80081dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	607b      	str	r3, [r7, #4]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1f1      	bne.n	80081ce <mem_cpy+0x1a>
	}
}
 80081ea:	bf00      	nop
 80081ec:	371c      	adds	r7, #28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bc80      	pop	{r7}
 80081f2:	4770      	bx	lr

080081f4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	617a      	str	r2, [r7, #20]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	b2d2      	uxtb	r2, r2
 800820e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	3b01      	subs	r3, #1
 8008214:	607b      	str	r3, [r7, #4]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1f3      	bne.n	8008204 <mem_set+0x10>
}
 800821c:	bf00      	nop
 800821e:	bf00      	nop
 8008220:	371c      	adds	r7, #28
 8008222:	46bd      	mov	sp, r7
 8008224:	bc80      	pop	{r7}
 8008226:	4770      	bx	lr

08008228 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008228:	b480      	push	{r7}
 800822a:	b089      	sub	sp, #36	; 0x24
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	61fb      	str	r3, [r7, #28]
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	1c5a      	adds	r2, r3, #1
 8008244:	61fa      	str	r2, [r7, #28]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	4619      	mov	r1, r3
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	1c5a      	adds	r2, r3, #1
 800824e:	61ba      	str	r2, [r7, #24]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	1acb      	subs	r3, r1, r3
 8008254:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	3b01      	subs	r3, #1
 800825a:	607b      	str	r3, [r7, #4]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <mem_cmp+0x40>
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d0eb      	beq.n	8008240 <mem_cmp+0x18>

	return r;
 8008268:	697b      	ldr	r3, [r7, #20]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3724      	adds	r7, #36	; 0x24
 800826e:	46bd      	mov	sp, r7
 8008270:	bc80      	pop	{r7}
 8008272:	4770      	bx	lr

08008274 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800827e:	e002      	b.n	8008286 <chk_chr+0x12>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3301      	adds	r3, #1
 8008284:	607b      	str	r3, [r7, #4]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d005      	beq.n	800829a <chk_chr+0x26>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	4293      	cmp	r3, r2
 8008298:	d1f2      	bne.n	8008280 <chk_chr+0xc>
	return *str;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	781b      	ldrb	r3, [r3, #0]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bc80      	pop	{r7}
 80082a6:	4770      	bx	lr

080082a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80082b2:	2300      	movs	r3, #0
 80082b4:	60bb      	str	r3, [r7, #8]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	60fb      	str	r3, [r7, #12]
 80082ba:	e029      	b.n	8008310 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80082bc:	4a26      	ldr	r2, [pc, #152]	; (8008358 <chk_lock+0xb0>)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	011b      	lsls	r3, r3, #4
 80082c2:	4413      	add	r3, r2
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d01d      	beq.n	8008306 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80082ca:	4a23      	ldr	r2, [pc, #140]	; (8008358 <chk_lock+0xb0>)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	011b      	lsls	r3, r3, #4
 80082d0:	4413      	add	r3, r2
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d116      	bne.n	800830a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80082dc:	4a1e      	ldr	r2, [pc, #120]	; (8008358 <chk_lock+0xb0>)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	011b      	lsls	r3, r3, #4
 80082e2:	4413      	add	r3, r2
 80082e4:	3304      	adds	r3, #4
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d10c      	bne.n	800830a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80082f0:	4a19      	ldr	r2, [pc, #100]	; (8008358 <chk_lock+0xb0>)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	011b      	lsls	r3, r3, #4
 80082f6:	4413      	add	r3, r2
 80082f8:	3308      	adds	r3, #8
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8008300:	429a      	cmp	r2, r3
 8008302:	d102      	bne.n	800830a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008304:	e007      	b.n	8008316 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008306:	2301      	movs	r3, #1
 8008308:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3301      	adds	r3, #1
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d9d2      	bls.n	80082bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2b02      	cmp	r3, #2
 800831a:	d109      	bne.n	8008330 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d102      	bne.n	8008328 <chk_lock+0x80>
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	2b02      	cmp	r3, #2
 8008326:	d101      	bne.n	800832c <chk_lock+0x84>
 8008328:	2300      	movs	r3, #0
 800832a:	e010      	b.n	800834e <chk_lock+0xa6>
 800832c:	2312      	movs	r3, #18
 800832e:	e00e      	b.n	800834e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d108      	bne.n	8008348 <chk_lock+0xa0>
 8008336:	4a08      	ldr	r2, [pc, #32]	; (8008358 <chk_lock+0xb0>)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	011b      	lsls	r3, r3, #4
 800833c:	4413      	add	r3, r2
 800833e:	330c      	adds	r3, #12
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008346:	d101      	bne.n	800834c <chk_lock+0xa4>
 8008348:	2310      	movs	r3, #16
 800834a:	e000      	b.n	800834e <chk_lock+0xa6>
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	bc80      	pop	{r7}
 8008356:	4770      	bx	lr
 8008358:	20001dc0 	.word	0x20001dc0

0800835c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008362:	2300      	movs	r3, #0
 8008364:	607b      	str	r3, [r7, #4]
 8008366:	e002      	b.n	800836e <enq_lock+0x12>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	3301      	adds	r3, #1
 800836c:	607b      	str	r3, [r7, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d806      	bhi.n	8008382 <enq_lock+0x26>
 8008374:	4a08      	ldr	r2, [pc, #32]	; (8008398 <enq_lock+0x3c>)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	011b      	lsls	r3, r3, #4
 800837a:	4413      	add	r3, r2
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1f2      	bne.n	8008368 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2b02      	cmp	r3, #2
 8008386:	bf14      	ite	ne
 8008388:	2301      	movne	r3, #1
 800838a:	2300      	moveq	r3, #0
 800838c:	b2db      	uxtb	r3, r3
}
 800838e:	4618      	mov	r0, r3
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	bc80      	pop	{r7}
 8008396:	4770      	bx	lr
 8008398:	20001dc0 	.word	0x20001dc0

0800839c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80083a6:	2300      	movs	r3, #0
 80083a8:	60fb      	str	r3, [r7, #12]
 80083aa:	e01f      	b.n	80083ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80083ac:	4a41      	ldr	r2, [pc, #260]	; (80084b4 <inc_lock+0x118>)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	011b      	lsls	r3, r3, #4
 80083b2:	4413      	add	r3, r2
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d113      	bne.n	80083e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80083be:	4a3d      	ldr	r2, [pc, #244]	; (80084b4 <inc_lock+0x118>)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	011b      	lsls	r3, r3, #4
 80083c4:	4413      	add	r3, r2
 80083c6:	3304      	adds	r3, #4
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d109      	bne.n	80083e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80083d2:	4a38      	ldr	r2, [pc, #224]	; (80084b4 <inc_lock+0x118>)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	4413      	add	r3, r2
 80083da:	3308      	adds	r3, #8
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d006      	beq.n	80083f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3301      	adds	r3, #1
 80083ea:	60fb      	str	r3, [r7, #12]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d9dc      	bls.n	80083ac <inc_lock+0x10>
 80083f2:	e000      	b.n	80083f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80083f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d132      	bne.n	8008462 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80083fc:	2300      	movs	r3, #0
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	e002      	b.n	8008408 <inc_lock+0x6c>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	3301      	adds	r3, #1
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d806      	bhi.n	800841c <inc_lock+0x80>
 800840e:	4a29      	ldr	r2, [pc, #164]	; (80084b4 <inc_lock+0x118>)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	011b      	lsls	r3, r3, #4
 8008414:	4413      	add	r3, r2
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1f2      	bne.n	8008402 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2b02      	cmp	r3, #2
 8008420:	d101      	bne.n	8008426 <inc_lock+0x8a>
 8008422:	2300      	movs	r3, #0
 8008424:	e040      	b.n	80084a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	4922      	ldr	r1, [pc, #136]	; (80084b4 <inc_lock+0x118>)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	011b      	lsls	r3, r3, #4
 8008430:	440b      	add	r3, r1
 8008432:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	689a      	ldr	r2, [r3, #8]
 8008438:	491e      	ldr	r1, [pc, #120]	; (80084b4 <inc_lock+0x118>)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	011b      	lsls	r3, r3, #4
 800843e:	440b      	add	r3, r1
 8008440:	3304      	adds	r3, #4
 8008442:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008448:	491a      	ldr	r1, [pc, #104]	; (80084b4 <inc_lock+0x118>)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	011b      	lsls	r3, r3, #4
 800844e:	440b      	add	r3, r1
 8008450:	3308      	adds	r3, #8
 8008452:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008454:	4a17      	ldr	r2, [pc, #92]	; (80084b4 <inc_lock+0x118>)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	011b      	lsls	r3, r3, #4
 800845a:	4413      	add	r3, r2
 800845c:	330c      	adds	r3, #12
 800845e:	2200      	movs	r2, #0
 8008460:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d009      	beq.n	800847c <inc_lock+0xe0>
 8008468:	4a12      	ldr	r2, [pc, #72]	; (80084b4 <inc_lock+0x118>)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	011b      	lsls	r3, r3, #4
 800846e:	4413      	add	r3, r2
 8008470:	330c      	adds	r3, #12
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <inc_lock+0xe0>
 8008478:	2300      	movs	r3, #0
 800847a:	e015      	b.n	80084a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d108      	bne.n	8008494 <inc_lock+0xf8>
 8008482:	4a0c      	ldr	r2, [pc, #48]	; (80084b4 <inc_lock+0x118>)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	011b      	lsls	r3, r3, #4
 8008488:	4413      	add	r3, r2
 800848a:	330c      	adds	r3, #12
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	3301      	adds	r3, #1
 8008490:	b29a      	uxth	r2, r3
 8008492:	e001      	b.n	8008498 <inc_lock+0xfc>
 8008494:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008498:	4906      	ldr	r1, [pc, #24]	; (80084b4 <inc_lock+0x118>)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	011b      	lsls	r3, r3, #4
 800849e:	440b      	add	r3, r1
 80084a0:	330c      	adds	r3, #12
 80084a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	3301      	adds	r3, #1
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bc80      	pop	{r7}
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	20001dc0 	.word	0x20001dc0

080084b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	3b01      	subs	r3, #1
 80084c4:	607b      	str	r3, [r7, #4]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d825      	bhi.n	8008518 <dec_lock+0x60>
		n = Files[i].ctr;
 80084cc:	4a16      	ldr	r2, [pc, #88]	; (8008528 <dec_lock+0x70>)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	011b      	lsls	r3, r3, #4
 80084d2:	4413      	add	r3, r2
 80084d4:	330c      	adds	r3, #12
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80084da:	89fb      	ldrh	r3, [r7, #14]
 80084dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084e0:	d101      	bne.n	80084e6 <dec_lock+0x2e>
 80084e2:	2300      	movs	r3, #0
 80084e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80084e6:	89fb      	ldrh	r3, [r7, #14]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <dec_lock+0x3a>
 80084ec:	89fb      	ldrh	r3, [r7, #14]
 80084ee:	3b01      	subs	r3, #1
 80084f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80084f2:	4a0d      	ldr	r2, [pc, #52]	; (8008528 <dec_lock+0x70>)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	011b      	lsls	r3, r3, #4
 80084f8:	4413      	add	r3, r2
 80084fa:	330c      	adds	r3, #12
 80084fc:	89fa      	ldrh	r2, [r7, #14]
 80084fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008500:	89fb      	ldrh	r3, [r7, #14]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d105      	bne.n	8008512 <dec_lock+0x5a>
 8008506:	4a08      	ldr	r2, [pc, #32]	; (8008528 <dec_lock+0x70>)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	011b      	lsls	r3, r3, #4
 800850c:	4413      	add	r3, r2
 800850e:	2200      	movs	r2, #0
 8008510:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	737b      	strb	r3, [r7, #13]
 8008516:	e001      	b.n	800851c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008518:	2302      	movs	r3, #2
 800851a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800851c:	7b7b      	ldrb	r3, [r7, #13]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	bc80      	pop	{r7}
 8008526:	4770      	bx	lr
 8008528:	20001dc0 	.word	0x20001dc0

0800852c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008534:	2300      	movs	r3, #0
 8008536:	60fb      	str	r3, [r7, #12]
 8008538:	e010      	b.n	800855c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800853a:	4a0d      	ldr	r2, [pc, #52]	; (8008570 <clear_lock+0x44>)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	011b      	lsls	r3, r3, #4
 8008540:	4413      	add	r3, r2
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	429a      	cmp	r2, r3
 8008548:	d105      	bne.n	8008556 <clear_lock+0x2a>
 800854a:	4a09      	ldr	r2, [pc, #36]	; (8008570 <clear_lock+0x44>)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	011b      	lsls	r3, r3, #4
 8008550:	4413      	add	r3, r2
 8008552:	2200      	movs	r2, #0
 8008554:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3301      	adds	r3, #1
 800855a:	60fb      	str	r3, [r7, #12]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d9eb      	bls.n	800853a <clear_lock+0xe>
	}
}
 8008562:	bf00      	nop
 8008564:	bf00      	nop
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	bc80      	pop	{r7}
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	20001dc0 	.word	0x20001dc0

08008574 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	78db      	ldrb	r3, [r3, #3]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d034      	beq.n	80085f2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800858c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	7858      	ldrb	r0, [r3, #1]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008598:	2301      	movs	r3, #1
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	f7ff fbee 	bl	8007d7c <disk_write>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d002      	beq.n	80085ac <sync_window+0x38>
			res = FR_DISK_ERR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	73fb      	strb	r3, [r7, #15]
 80085aa:	e022      	b.n	80085f2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	1ad2      	subs	r2, r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d217      	bcs.n	80085f2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	789b      	ldrb	r3, [r3, #2]
 80085c6:	613b      	str	r3, [r7, #16]
 80085c8:	e010      	b.n	80085ec <sync_window+0x78>
					wsect += fs->fsize;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	4413      	add	r3, r2
 80085d2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	7858      	ldrb	r0, [r3, #1]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80085de:	2301      	movs	r3, #1
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	f7ff fbcb 	bl	8007d7c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	3b01      	subs	r3, #1
 80085ea:	613b      	str	r3, [r7, #16]
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d8eb      	bhi.n	80085ca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	429a      	cmp	r2, r3
 8008612:	d01b      	beq.n	800864c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7ff ffad 	bl	8008574 <sync_window>
 800861a:	4603      	mov	r3, r0
 800861c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800861e:	7bfb      	ldrb	r3, [r7, #15]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d113      	bne.n	800864c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	7858      	ldrb	r0, [r3, #1]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800862e:	2301      	movs	r3, #1
 8008630:	683a      	ldr	r2, [r7, #0]
 8008632:	f7ff fb83 	bl	8007d3c <disk_read>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d004      	beq.n	8008646 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800863c:	f04f 33ff 	mov.w	r3, #4294967295
 8008640:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008642:	2301      	movs	r3, #1
 8008644:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	683a      	ldr	r2, [r7, #0]
 800864a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800864c:	7bfb      	ldrb	r3, [r7, #15]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
	...

08008658 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7ff ff87 	bl	8008574 <sync_window>
 8008666:	4603      	mov	r3, r0
 8008668:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800866a:	7bfb      	ldrb	r3, [r7, #15]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d158      	bne.n	8008722 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2b03      	cmp	r3, #3
 8008676:	d148      	bne.n	800870a <sync_fs+0xb2>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	791b      	ldrb	r3, [r3, #4]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d144      	bne.n	800870a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3338      	adds	r3, #56	; 0x38
 8008684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008688:	2100      	movs	r1, #0
 800868a:	4618      	mov	r0, r3
 800868c:	f7ff fdb2 	bl	80081f4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	3338      	adds	r3, #56	; 0x38
 8008694:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008698:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800869c:	4618      	mov	r0, r3
 800869e:	f7ff fcbd 	bl	800801c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	3338      	adds	r3, #56	; 0x38
 80086a6:	4921      	ldr	r1, [pc, #132]	; (800872c <sync_fs+0xd4>)
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7ff fcd1 	bl	8008050 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	3338      	adds	r3, #56	; 0x38
 80086b2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80086b6:	491e      	ldr	r1, [pc, #120]	; (8008730 <sync_fs+0xd8>)
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7ff fcc9 	bl	8008050 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	3338      	adds	r3, #56	; 0x38
 80086c2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	4619      	mov	r1, r3
 80086cc:	4610      	mov	r0, r2
 80086ce:	f7ff fcbf 	bl	8008050 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	3338      	adds	r3, #56	; 0x38
 80086d6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	4619      	mov	r1, r3
 80086e0:	4610      	mov	r0, r2
 80086e2:	f7ff fcb5 	bl	8008050 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ea:	1c5a      	adds	r2, r3, #1
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	7858      	ldrb	r0, [r3, #1]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086fe:	2301      	movs	r3, #1
 8008700:	f7ff fb3c 	bl	8007d7c <disk_write>
			fs->fsi_flag = 0;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	785b      	ldrb	r3, [r3, #1]
 800870e:	2200      	movs	r2, #0
 8008710:	2100      	movs	r1, #0
 8008712:	4618      	mov	r0, r3
 8008714:	f7ff fb52 	bl	8007dbc <disk_ioctl>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d001      	beq.n	8008722 <sync_fs+0xca>
 800871e:	2301      	movs	r3, #1
 8008720:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008722:	7bfb      	ldrb	r3, [r7, #15]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	41615252 	.word	0x41615252
 8008730:	61417272 	.word	0x61417272

08008734 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	3b02      	subs	r3, #2
 8008742:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	69db      	ldr	r3, [r3, #28]
 8008748:	3b02      	subs	r3, #2
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	429a      	cmp	r2, r3
 800874e:	d301      	bcc.n	8008754 <clust2sect+0x20>
 8008750:	2300      	movs	r3, #0
 8008752:	e008      	b.n	8008766 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	895b      	ldrh	r3, [r3, #10]
 8008758:	461a      	mov	r2, r3
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	fb03 f202 	mul.w	r2, r3, r2
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008764:	4413      	add	r3, r2
}
 8008766:	4618      	mov	r0, r3
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	bc80      	pop	{r7}
 800876e:	4770      	bx	lr

08008770 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b088      	sub	sp, #32
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800877a:	6879      	ldr	r1, [r7, #4]
 800877c:	6809      	ldr	r1, [r1, #0]
 800877e:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	2901      	cmp	r1, #1
 8008784:	d904      	bls.n	8008790 <get_fat+0x20>
 8008786:	69b9      	ldr	r1, [r7, #24]
 8008788:	69c9      	ldr	r1, [r1, #28]
 800878a:	6838      	ldr	r0, [r7, #0]
 800878c:	4288      	cmp	r0, r1
 800878e:	d302      	bcc.n	8008796 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008790:	2301      	movs	r3, #1
 8008792:	61fb      	str	r3, [r7, #28]
 8008794:	e101      	b.n	800899a <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008796:	f04f 31ff 	mov.w	r1, #4294967295
 800879a:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800879c:	69b9      	ldr	r1, [r7, #24]
 800879e:	7809      	ldrb	r1, [r1, #0]
 80087a0:	3901      	subs	r1, #1
 80087a2:	2903      	cmp	r1, #3
 80087a4:	f200 80ed 	bhi.w	8008982 <get_fat+0x212>
 80087a8:	a001      	add	r0, pc, #4	; (adr r0, 80087b0 <get_fat+0x40>)
 80087aa:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80087ae:	bf00      	nop
 80087b0:	080087c1 	.word	0x080087c1
 80087b4:	08008849 	.word	0x08008849
 80087b8:	0800887f 	.word	0x0800887f
 80087bc:	080088b7 	.word	0x080088b7
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	085b      	lsrs	r3, r3, #1
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	4413      	add	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	0a5b      	lsrs	r3, r3, #9
 80087d6:	4413      	add	r3, r2
 80087d8:	4619      	mov	r1, r3
 80087da:	69b8      	ldr	r0, [r7, #24]
 80087dc:	f7ff ff0e 	bl	80085fc <move_window>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f040 80d0 	bne.w	8008988 <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	60fa      	str	r2, [r7, #12]
 80087ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	4413      	add	r3, r2
 80087f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80087fa:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	0a5b      	lsrs	r3, r3, #9
 8008804:	4413      	add	r3, r2
 8008806:	4619      	mov	r1, r3
 8008808:	69b8      	ldr	r0, [r7, #24]
 800880a:	f7ff fef7 	bl	80085fc <move_window>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	f040 80bb 	bne.w	800898c <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800881c:	69ba      	ldr	r2, [r7, #24]
 800881e:	4413      	add	r3, r2
 8008820:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008824:	021b      	lsls	r3, r3, #8
 8008826:	461a      	mov	r2, r3
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	4313      	orrs	r3, r2
 800882c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <get_fat+0xce>
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	091b      	lsrs	r3, r3, #4
 800883c:	e002      	b.n	8008844 <get_fat+0xd4>
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008844:	61fb      	str	r3, [r7, #28]
			break;
 8008846:	e0a8      	b.n	800899a <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	0a1b      	lsrs	r3, r3, #8
 8008850:	4413      	add	r3, r2
 8008852:	4619      	mov	r1, r3
 8008854:	69b8      	ldr	r0, [r7, #24]
 8008856:	f7ff fed1 	bl	80085fc <move_window>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	f040 8097 	bne.w	8008990 <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	005b      	lsls	r3, r3, #1
 800886c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008870:	4413      	add	r3, r2
 8008872:	4618      	mov	r0, r3
 8008874:	f7ff fac0 	bl	8007df8 <ld_word>
 8008878:	4603      	mov	r3, r0
 800887a:	61fb      	str	r3, [r7, #28]
			break;
 800887c:	e08d      	b.n	800899a <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	09db      	lsrs	r3, r3, #7
 8008886:	4413      	add	r3, r2
 8008888:	4619      	mov	r1, r3
 800888a:	69b8      	ldr	r0, [r7, #24]
 800888c:	f7ff feb6 	bl	80085fc <move_window>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d17e      	bne.n	8008994 <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80088a4:	4413      	add	r3, r2
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7ff fabd 	bl	8007e26 <ld_dword>
 80088ac:	4603      	mov	r3, r0
 80088ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80088b2:	61fb      	str	r3, [r7, #28]
			break;
 80088b4:	e071      	b.n	800899a <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80088b6:	6879      	ldr	r1, [r7, #4]
 80088b8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80088bc:	4301      	orrs	r1, r0
 80088be:	d060      	beq.n	8008982 <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80088c0:	6879      	ldr	r1, [r7, #4]
 80088c2:	6889      	ldr	r1, [r1, #8]
 80088c4:	6838      	ldr	r0, [r7, #0]
 80088c6:	1a41      	subs	r1, r0, r1
 80088c8:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80088d0:	1e42      	subs	r2, r0, #1
 80088d2:	f141 33ff 	adc.w	r3, r1, #4294967295
 80088d6:	f04f 0000 	mov.w	r0, #0
 80088da:	f04f 0100 	mov.w	r1, #0
 80088de:	0a50      	lsrs	r0, r2, #9
 80088e0:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80088e4:	0a59      	lsrs	r1, r3, #9
 80088e6:	4602      	mov	r2, r0
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	895b      	ldrh	r3, [r3, #10]
 80088ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f0:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	79db      	ldrb	r3, [r3, #7]
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d10e      	bne.n	8008918 <get_fat+0x1a8>
					if (cofs <= clen) {
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d80a      	bhi.n	8008918 <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	429a      	cmp	r2, r3
 8008908:	d002      	beq.n	8008910 <get_fat+0x1a0>
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	3301      	adds	r3, #1
 800890e:	e001      	b.n	8008914 <get_fat+0x1a4>
 8008910:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008914:	61fb      	str	r3, [r7, #28]
						break;
 8008916:	e040      	b.n	800899a <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	79db      	ldrb	r3, [r3, #7]
 800891c:	2b03      	cmp	r3, #3
 800891e:	d108      	bne.n	8008932 <get_fat+0x1c2>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	697a      	ldr	r2, [r7, #20]
 8008926:	429a      	cmp	r2, r3
 8008928:	d203      	bcs.n	8008932 <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	3301      	adds	r3, #1
 800892e:	61fb      	str	r3, [r7, #28]
					break;
 8008930:	e033      	b.n	800899a <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	79db      	ldrb	r3, [r3, #7]
 8008936:	2b02      	cmp	r3, #2
 8008938:	d023      	beq.n	8008982 <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8008942:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008946:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8008948:	e027      	b.n	800899a <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	09db      	lsrs	r3, r3, #7
 8008952:	4413      	add	r3, r2
 8008954:	4619      	mov	r1, r3
 8008956:	69b8      	ldr	r0, [r7, #24]
 8008958:	f7ff fe50 	bl	80085fc <move_window>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d11a      	bne.n	8008998 <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008970:	4413      	add	r3, r2
 8008972:	4618      	mov	r0, r3
 8008974:	f7ff fa57 	bl	8007e26 <ld_dword>
 8008978:	4603      	mov	r3, r0
 800897a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800897e:	61fb      	str	r3, [r7, #28]
					break;
 8008980:	e00b      	b.n	800899a <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008982:	2301      	movs	r3, #1
 8008984:	61fb      	str	r3, [r7, #28]
 8008986:	e008      	b.n	800899a <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008988:	bf00      	nop
 800898a:	e006      	b.n	800899a <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800898c:	bf00      	nop
 800898e:	e004      	b.n	800899a <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008990:	bf00      	nop
 8008992:	e002      	b.n	800899a <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008994:	bf00      	nop
 8008996:	e000      	b.n	800899a <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008998:	bf00      	nop
		}
	}

	return val;
 800899a:	69fb      	ldr	r3, [r7, #28]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3720      	adds	r7, #32
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80089a4:	b590      	push	{r4, r7, lr}
 80089a6:	b089      	sub	sp, #36	; 0x24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80089b0:	2302      	movs	r3, #2
 80089b2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	f240 80d6 	bls.w	8008b68 <put_fat+0x1c4>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	f080 80d0 	bcs.w	8008b68 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2b04      	cmp	r3, #4
 80089ce:	f300 80d4 	bgt.w	8008b7a <put_fat+0x1d6>
 80089d2:	2b03      	cmp	r3, #3
 80089d4:	f280 8093 	bge.w	8008afe <put_fat+0x15a>
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d002      	beq.n	80089e2 <put_fat+0x3e>
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d06e      	beq.n	8008abe <put_fat+0x11a>
 80089e0:	e0cb      	b.n	8008b7a <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	61bb      	str	r3, [r7, #24]
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	085b      	lsrs	r3, r3, #1
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	4413      	add	r3, r2
 80089ee:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	0a5b      	lsrs	r3, r3, #9
 80089f8:	4413      	add	r3, r2
 80089fa:	4619      	mov	r1, r3
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f7ff fdfd 	bl	80085fc <move_window>
 8008a02:	4603      	mov	r3, r0
 8008a04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a06:	7ffb      	ldrb	r3, [r7, #31]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f040 80af 	bne.w	8008b6c <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	1c59      	adds	r1, r3, #1
 8008a18:	61b9      	str	r1, [r7, #24]
 8008a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a1e:	4413      	add	r3, r2
 8008a20:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	f003 0301 	and.w	r3, r3, #1
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00d      	beq.n	8008a48 <put_fat+0xa4>
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	b25b      	sxtb	r3, r3
 8008a32:	f003 030f 	and.w	r3, r3, #15
 8008a36:	b25a      	sxtb	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	011b      	lsls	r3, r3, #4
 8008a3e:	b25b      	sxtb	r3, r3
 8008a40:	4313      	orrs	r3, r2
 8008a42:	b25b      	sxtb	r3, r3
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	e001      	b.n	8008a4c <put_fat+0xa8>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2201      	movs	r2, #1
 8008a54:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	0a5b      	lsrs	r3, r3, #9
 8008a5e:	4413      	add	r3, r2
 8008a60:	4619      	mov	r1, r3
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f7ff fdca 	bl	80085fc <move_window>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a6c:	7ffb      	ldrb	r3, [r7, #31]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d17e      	bne.n	8008b70 <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7e:	4413      	add	r3, r2
 8008a80:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	f003 0301 	and.w	r3, r3, #1
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d003      	beq.n	8008a94 <put_fat+0xf0>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	091b      	lsrs	r3, r3, #4
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	e00e      	b.n	8008ab2 <put_fat+0x10e>
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	b25b      	sxtb	r3, r3
 8008a9a:	f023 030f 	bic.w	r3, r3, #15
 8008a9e:	b25a      	sxtb	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	0a1b      	lsrs	r3, r3, #8
 8008aa4:	b25b      	sxtb	r3, r3
 8008aa6:	f003 030f 	and.w	r3, r3, #15
 8008aaa:	b25b      	sxtb	r3, r3
 8008aac:	4313      	orrs	r3, r2
 8008aae:	b25b      	sxtb	r3, r3
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	70da      	strb	r2, [r3, #3]
			break;
 8008abc:	e05d      	b.n	8008b7a <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	0a1b      	lsrs	r3, r3, #8
 8008ac6:	4413      	add	r3, r2
 8008ac8:	4619      	mov	r1, r3
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f7ff fd96 	bl	80085fc <move_window>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ad4:	7ffb      	ldrb	r3, [r7, #31]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d14c      	bne.n	8008b74 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	005b      	lsls	r3, r3, #1
 8008ae4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008ae8:	4413      	add	r3, r2
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	b292      	uxth	r2, r2
 8008aee:	4611      	mov	r1, r2
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7ff fa93 	bl	800801c <st_word>
			fs->wflag = 1;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2201      	movs	r2, #1
 8008afa:	70da      	strb	r2, [r3, #3]
			break;
 8008afc:	e03d      	b.n	8008b7a <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	09db      	lsrs	r3, r3, #7
 8008b06:	4413      	add	r3, r2
 8008b08:	4619      	mov	r1, r3
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f7ff fd76 	bl	80085fc <move_window>
 8008b10:	4603      	mov	r3, r0
 8008b12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b14:	7ffb      	ldrb	r3, [r7, #31]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d12e      	bne.n	8008b78 <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d012      	beq.n	8008b48 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008b36:	4413      	add	r3, r2
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7ff f974 	bl	8007e26 <ld_dword>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b44:	4323      	orrs	r3, r4
 8008b46:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008b56:	4413      	add	r3, r2
 8008b58:	6879      	ldr	r1, [r7, #4]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7ff fa78 	bl	8008050 <st_dword>
			fs->wflag = 1;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2201      	movs	r2, #1
 8008b64:	70da      	strb	r2, [r3, #3]
			break;
 8008b66:	e008      	b.n	8008b7a <put_fat+0x1d6>
		}
	}
 8008b68:	bf00      	nop
 8008b6a:	e006      	b.n	8008b7a <put_fat+0x1d6>
			if (res != FR_OK) break;
 8008b6c:	bf00      	nop
 8008b6e:	e004      	b.n	8008b7a <put_fat+0x1d6>
			if (res != FR_OK) break;
 8008b70:	bf00      	nop
 8008b72:	e002      	b.n	8008b7a <put_fat+0x1d6>
			if (res != FR_OK) break;
 8008b74:	bf00      	nop
 8008b76:	e000      	b.n	8008b7a <put_fat+0x1d6>
			if (res != FR_OK) break;
 8008b78:	bf00      	nop
	return res;
 8008b7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3724      	adds	r7, #36	; 0x24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd90      	pop	{r4, r7, pc}

08008b84 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b08a      	sub	sp, #40	; 0x28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	3b02      	subs	r3, #2
 8008b94:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	3b02      	subs	r3, #2
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d301      	bcc.n	8008ba6 <find_bitmap+0x22>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	61fb      	str	r3, [r7, #28]
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	61bb      	str	r3, [r7, #24]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	0b1b      	lsrs	r3, r3, #12
 8008bba:	4413      	add	r3, r2
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f7ff fd1c 	bl	80085fc <move_window>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d002      	beq.n	8008bd0 <find_bitmap+0x4c>
 8008bca:	f04f 33ff 	mov.w	r3, #4294967295
 8008bce:	e051      	b.n	8008c74 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	08db      	lsrs	r3, r3, #3
 8008bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bd8:	623b      	str	r3, [r7, #32]
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	f003 0307 	and.w	r3, r3, #7
 8008be0:	2201      	movs	r2, #1
 8008be2:	fa02 f303 	lsl.w	r3, r2, r3
 8008be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	6a3b      	ldr	r3, [r7, #32]
 8008bee:	4413      	add	r3, r2
 8008bf0:	3338      	adds	r3, #56	; 0x38
 8008bf2:	781a      	ldrb	r2, [r3, #0]
 8008bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	74fb      	strb	r3, [r7, #19]
 8008bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	61fb      	str	r3, [r7, #28]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	69db      	ldr	r3, [r3, #28]
 8008c10:	3b02      	subs	r3, #2
 8008c12:	69fa      	ldr	r2, [r7, #28]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d307      	bcc.n	8008c28 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 8008c18:	2300      	movs	r3, #0
 8008c1a:	61fb      	str	r3, [r7, #28]
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c26:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8008c28:	7cfb      	ldrb	r3, [r7, #19]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d109      	bne.n	8008c42 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	3301      	adds	r3, #1
 8008c32:	617b      	str	r3, [r7, #20]
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d106      	bne.n	8008c4a <find_bitmap+0xc6>
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	3302      	adds	r3, #2
 8008c40:	e018      	b.n	8008c74 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	61bb      	str	r3, [r7, #24]
 8008c46:	2300      	movs	r3, #0
 8008c48:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8008c4a:	69fa      	ldr	r2, [r7, #28]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d101      	bne.n	8008c56 <find_bitmap+0xd2>
 8008c52:	2300      	movs	r3, #0
 8008c54:	e00e      	b.n	8008c74 <find_bitmap+0xf0>
			} while (bm);
 8008c56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1c5      	bne.n	8008bea <find_bitmap+0x66>
			bm = 1;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8008c64:	6a3b      	ldr	r3, [r7, #32]
 8008c66:	3301      	adds	r3, #1
 8008c68:	623b      	str	r3, [r7, #32]
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c70:	d3bb      	bcc.n	8008bea <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8008c72:	e79e      	b.n	8008bb2 <find_bitmap+0x2e>
	}
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3728      	adds	r7, #40	; 0x28
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b088      	sub	sp, #32
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
 8008c88:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	3b02      	subs	r3, #2
 8008c8e:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	0b1b      	lsrs	r3, r3, #12
 8008c98:	4413      	add	r3, r2
 8008c9a:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	08db      	lsrs	r3, r3, #3
 8008ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca4:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f003 0307 	and.w	r3, r3, #7
 8008cac:	2201      	movs	r2, #1
 8008cae:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb2:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	1c5a      	adds	r2, r3, #1
 8008cb8:	617a      	str	r2, [r7, #20]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f7ff fc9d 	bl	80085fc <move_window>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <change_bitmap+0x50>
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e03d      	b.n	8008d48 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	3338      	adds	r3, #56	; 0x38
 8008cd4:	781a      	ldrb	r2, [r3, #0]
 8008cd6:	7ffb      	ldrb	r3, [r7, #31]
 8008cd8:	4013      	ands	r3, r2
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	bf14      	ite	ne
 8008ce0:	2301      	movne	r3, #1
 8008ce2:	2300      	moveq	r3, #0
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d101      	bne.n	8008cf2 <change_bitmap+0x76>
 8008cee:	2302      	movs	r3, #2
 8008cf0:	e02a      	b.n	8008d48 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	3338      	adds	r3, #56	; 0x38
 8008cfa:	781a      	ldrb	r2, [r3, #0]
 8008cfc:	7ffb      	ldrb	r3, [r7, #31]
 8008cfe:	4053      	eors	r3, r2
 8008d00:	b2d9      	uxtb	r1, r3
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	4413      	add	r3, r2
 8008d08:	3338      	adds	r3, #56	; 0x38
 8008d0a:	460a      	mov	r2, r1
 8008d0c:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2201      	movs	r2, #1
 8008d12:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	607b      	str	r3, [r7, #4]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <change_bitmap+0xa8>
 8008d20:	2300      	movs	r3, #0
 8008d22:	e011      	b.n	8008d48 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 8008d24:	7ffb      	ldrb	r3, [r7, #31]
 8008d26:	005b      	lsls	r3, r3, #1
 8008d28:	77fb      	strb	r3, [r7, #31]
 8008d2a:	7ffb      	ldrb	r3, [r7, #31]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1cd      	bne.n	8008ccc <change_bitmap+0x50>
			bm = 1;
 8008d30:	2301      	movs	r3, #1
 8008d32:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	3301      	adds	r3, #1
 8008d38:	61bb      	str	r3, [r7, #24]
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d40:	d3c4      	bcc.n	8008ccc <change_bitmap+0x50>
		i = 0;
 8008d42:	2300      	movs	r3, #0
 8008d44:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8008d46:	e7b5      	b.n	8008cb4 <change_bitmap+0x38>
	}
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3720      	adds	r7, #32
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	79db      	ldrb	r3, [r3, #7]
 8008d5c:	2b03      	cmp	r3, #3
 8008d5e:	d121      	bne.n	8008da4 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	617b      	str	r3, [r7, #20]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	613b      	str	r3, [r7, #16]
 8008d6c:	e014      	b.n	8008d98 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6818      	ldr	r0, [r3, #0]
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	3301      	adds	r3, #1
 8008d76:	461a      	mov	r2, r3
 8008d78:	6979      	ldr	r1, [r7, #20]
 8008d7a:	f7ff fe13 	bl	80089a4 <put_fat>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8008d82:	7bfb      	ldrb	r3, [r7, #15]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <fill_first_frag+0x3c>
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
 8008d8a:	e00c      	b.n	8008da6 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	617b      	str	r3, [r7, #20]
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	3b01      	subs	r3, #1
 8008d96:	613b      	str	r3, [r7, #16]
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1e7      	bne.n	8008d6e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3718      	adds	r7, #24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b086      	sub	sp, #24
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	60f8      	str	r0, [r7, #12]
 8008db6:	60b9      	str	r1, [r7, #8]
 8008db8:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8008dba:	e020      	b.n	8008dfe <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6818      	ldr	r0, [r3, #0]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	69db      	ldr	r3, [r3, #28]
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	1c59      	adds	r1, r3, #1
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d905      	bls.n	8008dde <fill_last_frag+0x30>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	3302      	adds	r3, #2
 8008ddc:	e000      	b.n	8008de0 <fill_last_frag+0x32>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	461a      	mov	r2, r3
 8008de2:	f7ff fddf 	bl	80089a4 <put_fat>
 8008de6:	4603      	mov	r3, r0
 8008de8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d001      	beq.n	8008df4 <fill_last_frag+0x46>
 8008df0:	7dfb      	ldrb	r3, [r7, #23]
 8008df2:	e009      	b.n	8008e08 <fill_last_frag+0x5a>
		obj->n_frag--;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	69db      	ldr	r3, [r3, #28]
 8008df8:	1e5a      	subs	r2, r3, #1
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1da      	bne.n	8008dbc <fill_last_frag+0xe>
	}
	return FR_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3718      	adds	r7, #24
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b08a      	sub	sp, #40	; 0x28
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	627b      	str	r3, [r7, #36]	; 0x24
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d904      	bls.n	8008e3e <remove_chain+0x2e>
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d301      	bcc.n	8008e42 <remove_chain+0x32>
 8008e3e:	2302      	movs	r3, #2
 8008e40:	e096      	b.n	8008f70 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d014      	beq.n	8008e72 <remove_chain+0x62>
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	2b04      	cmp	r3, #4
 8008e4e:	d103      	bne.n	8008e58 <remove_chain+0x48>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	79db      	ldrb	r3, [r3, #7]
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d00c      	beq.n	8008e72 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008e58:	f04f 32ff 	mov.w	r2, #4294967295
 8008e5c:	6879      	ldr	r1, [r7, #4]
 8008e5e:	69b8      	ldr	r0, [r7, #24]
 8008e60:	f7ff fda0 	bl	80089a4 <put_fat>
 8008e64:	4603      	mov	r3, r0
 8008e66:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008e68:	7ffb      	ldrb	r3, [r7, #31]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <remove_chain+0x62>
 8008e6e:	7ffb      	ldrb	r3, [r7, #31]
 8008e70:	e07e      	b.n	8008f70 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008e72:	68b9      	ldr	r1, [r7, #8]
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f7ff fc7b 	bl	8008770 <get_fat>
 8008e7a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d055      	beq.n	8008f2e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d101      	bne.n	8008e8c <remove_chain+0x7c>
 8008e88:	2302      	movs	r3, #2
 8008e8a:	e071      	b.n	8008f70 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e92:	d101      	bne.n	8008e98 <remove_chain+0x88>
 8008e94:	2301      	movs	r3, #1
 8008e96:	e06b      	b.n	8008f70 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	2b04      	cmp	r3, #4
 8008e9e:	d00b      	beq.n	8008eb8 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	68b9      	ldr	r1, [r7, #8]
 8008ea4:	69b8      	ldr	r0, [r7, #24]
 8008ea6:	f7ff fd7d 	bl	80089a4 <put_fat>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008eae:	7ffb      	ldrb	r3, [r7, #31]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <remove_chain+0xa8>
 8008eb4:	7ffb      	ldrb	r3, [r7, #31]
 8008eb6:	e05b      	b.n	8008f70 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	699a      	ldr	r2, [r3, #24]
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	69db      	ldr	r3, [r3, #28]
 8008ec0:	3b02      	subs	r3, #2
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d20b      	bcs.n	8008ede <remove_chain+0xce>
			fs->free_clst++;
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	699b      	ldr	r3, [r3, #24]
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	791b      	ldrb	r3, [r3, #4]
 8008ed4:	f043 0301 	orr.w	r3, r3, #1
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8008ede:	6a3b      	ldr	r3, [r7, #32]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d102      	bne.n	8008eee <remove_chain+0xde>
			ecl = nxt;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	623b      	str	r3, [r7, #32]
 8008eec:	e017      	b.n	8008f1e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	d10f      	bne.n	8008f16 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8008ef6:	6a3a      	ldr	r2, [r7, #32]
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	1c5a      	adds	r2, r3, #1
 8008efe:	2300      	movs	r3, #0
 8008f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f02:	69b8      	ldr	r0, [r7, #24]
 8008f04:	f7ff feba 	bl	8008c7c <change_bitmap>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8008f0c:	7ffb      	ldrb	r3, [r7, #31]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <remove_chain+0x106>
 8008f12:	7ffb      	ldrb	r3, [r7, #31]
 8008f14:	e02c      	b.n	8008f70 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	623b      	str	r3, [r7, #32]
 8008f1a:	6a3b      	ldr	r3, [r7, #32]
 8008f1c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d3a2      	bcc.n	8008e72 <remove_chain+0x62>
 8008f2c:	e000      	b.n	8008f30 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8008f2e:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	2b04      	cmp	r3, #4
 8008f36:	d11a      	bne.n	8008f6e <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d103      	bne.n	8008f46 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	71da      	strb	r2, [r3, #7]
 8008f44:	e013      	b.n	8008f6e <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	79db      	ldrb	r3, [r3, #7]
 8008f4a:	2b03      	cmp	r3, #3
 8008f4c:	d10f      	bne.n	8008f6e <remove_chain+0x15e>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d30a      	bcc.n	8008f6e <remove_chain+0x15e>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	689a      	ldr	r2, [r3, #8]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	4413      	add	r3, r2
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d802      	bhi.n	8008f6e <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3728      	adds	r7, #40	; 0x28
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b088      	sub	sp, #32
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10d      	bne.n	8008faa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d004      	beq.n	8008fa4 <create_chain+0x2c>
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	69ba      	ldr	r2, [r7, #24]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d31b      	bcc.n	8008fdc <create_chain+0x64>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	61bb      	str	r3, [r7, #24]
 8008fa8:	e018      	b.n	8008fdc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008faa:	6839      	ldr	r1, [r7, #0]
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f7ff fbdf 	bl	8008770 <get_fat>
 8008fb2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d801      	bhi.n	8008fbe <create_chain+0x46>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e0d9      	b.n	8009172 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc4:	d101      	bne.n	8008fca <create_chain+0x52>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	e0d3      	b.n	8009172 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d201      	bcs.n	8008fd8 <create_chain+0x60>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	e0cc      	b.n	8009172 <create_chain+0x1fa>
		scl = clst;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	2b04      	cmp	r3, #4
 8008fe2:	d164      	bne.n	80090ae <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	69b9      	ldr	r1, [r7, #24]
 8008fe8:	6938      	ldr	r0, [r7, #16]
 8008fea:	f7ff fdcb 	bl	8008b84 <find_bitmap>
 8008fee:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d003      	beq.n	8008ffe <create_chain+0x86>
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffc:	d101      	bne.n	8009002 <create_chain+0x8a>
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	e0b7      	b.n	8009172 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8009002:	2301      	movs	r3, #1
 8009004:	2201      	movs	r2, #1
 8009006:	69f9      	ldr	r1, [r7, #28]
 8009008:	6938      	ldr	r0, [r7, #16]
 800900a:	f7ff fe37 	bl	8008c7c <change_bitmap>
 800900e:	4603      	mov	r3, r0
 8009010:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8009012:	7dfb      	ldrb	r3, [r7, #23]
 8009014:	2b02      	cmp	r3, #2
 8009016:	d101      	bne.n	800901c <create_chain+0xa4>
 8009018:	2301      	movs	r3, #1
 800901a:	e0aa      	b.n	8009172 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800901c:	7dfb      	ldrb	r3, [r7, #23]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d102      	bne.n	8009028 <create_chain+0xb0>
 8009022:	f04f 33ff 	mov.w	r3, #4294967295
 8009026:	e0a4      	b.n	8009172 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d103      	bne.n	8009036 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2202      	movs	r2, #2
 8009032:	71da      	strb	r2, [r3, #7]
 8009034:	e011      	b.n	800905a <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	79db      	ldrb	r3, [r3, #7]
 800903a:	2b02      	cmp	r3, #2
 800903c:	d10d      	bne.n	800905a <create_chain+0xe2>
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	3301      	adds	r3, #1
 8009042:	69fa      	ldr	r2, [r7, #28]
 8009044:	429a      	cmp	r2, r3
 8009046:	d008      	beq.n	800905a <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	69ba      	ldr	r2, [r7, #24]
 800904e:	1ad2      	subs	r2, r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2203      	movs	r2, #3
 8009058:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	79db      	ldrb	r3, [r3, #7]
 800905e:	2b02      	cmp	r3, #2
 8009060:	d064      	beq.n	800912c <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	3301      	adds	r3, #1
 8009066:	69fa      	ldr	r2, [r7, #28]
 8009068:	429a      	cmp	r2, r3
 800906a:	d10b      	bne.n	8009084 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d003      	beq.n	800907c <create_chain+0x104>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	69db      	ldr	r3, [r3, #28]
 8009078:	3301      	adds	r3, #1
 800907a:	e000      	b.n	800907e <create_chain+0x106>
 800907c:	2302      	movs	r3, #2
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	61d3      	str	r3, [r2, #28]
 8009082:	e053      	b.n	800912c <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	69db      	ldr	r3, [r3, #28]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d102      	bne.n	8009092 <create_chain+0x11a>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8009092:	69fa      	ldr	r2, [r7, #28]
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f7ff fe89 	bl	8008dae <fill_last_frag>
 800909c:	4603      	mov	r3, r0
 800909e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d142      	bne.n	800912c <create_chain+0x1b4>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	61da      	str	r2, [r3, #28]
 80090ac:	e03e      	b.n	800912c <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	3301      	adds	r3, #1
 80090b6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	69db      	ldr	r3, [r3, #28]
 80090bc:	69fa      	ldr	r2, [r7, #28]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d307      	bcc.n	80090d2 <create_chain+0x15a>
				ncl = 2;
 80090c2:	2302      	movs	r3, #2
 80090c4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80090c6:	69fa      	ldr	r2, [r7, #28]
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d901      	bls.n	80090d2 <create_chain+0x15a>
 80090ce:	2300      	movs	r3, #0
 80090d0:	e04f      	b.n	8009172 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80090d2:	69f9      	ldr	r1, [r7, #28]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f7ff fb4b 	bl	8008770 <get_fat>
 80090da:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00e      	beq.n	8009100 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d003      	beq.n	80090f0 <create_chain+0x178>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ee:	d101      	bne.n	80090f4 <create_chain+0x17c>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	e03e      	b.n	8009172 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 80090f4:	69fa      	ldr	r2, [r7, #28]
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d1da      	bne.n	80090b2 <create_chain+0x13a>
 80090fc:	2300      	movs	r3, #0
 80090fe:	e038      	b.n	8009172 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8009100:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009102:	f04f 32ff 	mov.w	r2, #4294967295
 8009106:	69f9      	ldr	r1, [r7, #28]
 8009108:	6938      	ldr	r0, [r7, #16]
 800910a:	f7ff fc4b 	bl	80089a4 <put_fat>
 800910e:	4603      	mov	r3, r0
 8009110:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009112:	7dfb      	ldrb	r3, [r7, #23]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d109      	bne.n	800912c <create_chain+0x1b4>
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d006      	beq.n	800912c <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800911e:	69fa      	ldr	r2, [r7, #28]
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6938      	ldr	r0, [r7, #16]
 8009124:	f7ff fc3e 	bl	80089a4 <put_fat>
 8009128:	4603      	mov	r3, r0
 800912a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800912c:	7dfb      	ldrb	r3, [r7, #23]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d116      	bne.n	8009160 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	69fa      	ldr	r2, [r7, #28]
 8009136:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	699a      	ldr	r2, [r3, #24]
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	3b02      	subs	r3, #2
 8009142:	429a      	cmp	r2, r3
 8009144:	d804      	bhi.n	8009150 <create_chain+0x1d8>
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	1e5a      	subs	r2, r3, #1
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	791b      	ldrb	r3, [r3, #4]
 8009154:	f043 0301 	orr.w	r3, r3, #1
 8009158:	b2da      	uxtb	r2, r3
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	711a      	strb	r2, [r3, #4]
 800915e:	e007      	b.n	8009170 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009160:	7dfb      	ldrb	r3, [r7, #23]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d102      	bne.n	800916c <create_chain+0x1f4>
 8009166:	f04f 33ff 	mov.w	r3, #4294967295
 800916a:	e000      	b.n	800916e <create_chain+0x1f6>
 800916c:	2301      	movs	r3, #1
 800916e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009170:	69fb      	ldr	r3, [r7, #28]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3720      	adds	r7, #32
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800917a:	b5b0      	push	{r4, r5, r7, lr}
 800917c:	b088      	sub	sp, #32
 800917e:	af00      	add	r7, sp, #0
 8009180:	60f8      	str	r0, [r7, #12]
 8009182:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009190:	3304      	adds	r3, #4
 8009192:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009198:	f04f 0000 	mov.w	r0, #0
 800919c:	f04f 0100 	mov.w	r1, #0
 80091a0:	0a50      	lsrs	r0, r2, #9
 80091a2:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80091a6:	0a59      	lsrs	r1, r3, #9
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	895b      	ldrh	r3, [r3, #10]
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	2200      	movs	r2, #0
 80091b0:	461c      	mov	r4, r3
 80091b2:	4615      	mov	r5, r2
 80091b4:	4622      	mov	r2, r4
 80091b6:	462b      	mov	r3, r5
 80091b8:	f7f7 fdaa 	bl	8000d10 <__aeabi_uldivmod>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4613      	mov	r3, r2
 80091c2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	1d1a      	adds	r2, r3, #4
 80091c8:	61ba      	str	r2, [r7, #24]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d101      	bne.n	80091d8 <clmt_clust+0x5e>
 80091d4:	2300      	movs	r3, #0
 80091d6:	e010      	b.n	80091fa <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 80091d8:	69fa      	ldr	r2, [r7, #28]
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d307      	bcc.n	80091f0 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 80091e0:	69fa      	ldr	r2, [r7, #28]
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	61fb      	str	r3, [r7, #28]
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	3304      	adds	r3, #4
 80091ec:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80091ee:	e7e9      	b.n	80091c4 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 80091f0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	4413      	add	r3, r2
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3720      	adds	r7, #32
 80091fe:	46bd      	mov	sp, r7
 8009200:	bdb0      	pop	{r4, r5, r7, pc}

08009202 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b086      	sub	sp, #24
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2b04      	cmp	r3, #4
 8009218:	d102      	bne.n	8009220 <dir_sdi+0x1e>
 800921a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800921e:	e001      	b.n	8009224 <dir_sdi+0x22>
 8009220:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	429a      	cmp	r2, r3
 8009228:	d904      	bls.n	8009234 <dir_sdi+0x32>
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	f003 031f 	and.w	r3, r3, #31
 8009230:	2b00      	cmp	r3, #0
 8009232:	d001      	beq.n	8009238 <dir_sdi+0x36>
		return FR_INT_ERR;
 8009234:	2302      	movs	r3, #2
 8009236:	e066      	b.n	8009306 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d109      	bne.n	800925e <dir_sdi+0x5c>
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	2b02      	cmp	r3, #2
 8009250:	d905      	bls.n	800925e <dir_sdi+0x5c>
		clst = fs->dirbase;
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009256:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10c      	bne.n	800927e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	095b      	lsrs	r3, r3, #5
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	8912      	ldrh	r2, [r2, #8]
 800926c:	4293      	cmp	r3, r2
 800926e:	d301      	bcc.n	8009274 <dir_sdi+0x72>
 8009270:	2302      	movs	r3, #2
 8009272:	e048      	b.n	8009306 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	639a      	str	r2, [r3, #56]	; 0x38
 800927c:	e029      	b.n	80092d2 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	895b      	ldrh	r3, [r3, #10]
 8009282:	025b      	lsls	r3, r3, #9
 8009284:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009286:	e019      	b.n	80092bc <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6979      	ldr	r1, [r7, #20]
 800928c:	4618      	mov	r0, r3
 800928e:	f7ff fa6f 	bl	8008770 <get_fat>
 8009292:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929a:	d101      	bne.n	80092a0 <dir_sdi+0x9e>
 800929c:	2301      	movs	r3, #1
 800929e:	e032      	b.n	8009306 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d904      	bls.n	80092b0 <dir_sdi+0xae>
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d301      	bcc.n	80092b4 <dir_sdi+0xb2>
 80092b0:	2302      	movs	r3, #2
 80092b2:	e028      	b.n	8009306 <dir_sdi+0x104>
			ofs -= csz;
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80092bc:	683a      	ldr	r2, [r7, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d2e1      	bcs.n	8009288 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 80092c4:	6979      	ldr	r1, [r7, #20]
 80092c6:	6938      	ldr	r0, [r7, #16]
 80092c8:	f7ff fa34 	bl	8008734 <clust2sect>
 80092cc:	4602      	mov	r2, r0
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	697a      	ldr	r2, [r7, #20]
 80092d6:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <dir_sdi+0xe2>
 80092e0:	2302      	movs	r3, #2
 80092e2:	e010      	b.n	8009306 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	0a5b      	lsrs	r3, r3, #9
 80092ec:	441a      	add	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092fe:	441a      	add	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3718      	adds	r7, #24
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b086      	sub	sp, #24
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009322:	3320      	adds	r3, #32
 8009324:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00b      	beq.n	8009346 <dir_next+0x38>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	2b04      	cmp	r3, #4
 8009334:	d102      	bne.n	800933c <dir_next+0x2e>
 8009336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800933a:	e001      	b.n	8009340 <dir_next+0x32>
 800933c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	429a      	cmp	r2, r3
 8009344:	d801      	bhi.n	800934a <dir_next+0x3c>
 8009346:	2304      	movs	r3, #4
 8009348:	e0b2      	b.n	80094b0 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009350:	2b00      	cmp	r3, #0
 8009352:	f040 80a0 	bne.w	8009496 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935a:	1c5a      	adds	r2, r3, #1
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10b      	bne.n	8009380 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	095b      	lsrs	r3, r3, #5
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	8912      	ldrh	r2, [r2, #8]
 8009370:	4293      	cmp	r3, r2
 8009372:	f0c0 8090 	bcc.w	8009496 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	639a      	str	r2, [r3, #56]	; 0x38
 800937c:	2304      	movs	r3, #4
 800937e:	e097      	b.n	80094b0 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	0a5b      	lsrs	r3, r3, #9
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	8952      	ldrh	r2, [r2, #10]
 8009388:	3a01      	subs	r2, #1
 800938a:	4013      	ands	r3, r2
 800938c:	2b00      	cmp	r3, #0
 800938e:	f040 8082 	bne.w	8009496 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009398:	4619      	mov	r1, r3
 800939a:	4610      	mov	r0, r2
 800939c:	f7ff f9e8 	bl	8008770 <get_fat>
 80093a0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d801      	bhi.n	80093ac <dir_next+0x9e>
 80093a8:	2302      	movs	r3, #2
 80093aa:	e081      	b.n	80094b0 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b2:	d101      	bne.n	80093b8 <dir_next+0xaa>
 80093b4:	2301      	movs	r3, #1
 80093b6:	e07b      	b.n	80094b0 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	69db      	ldr	r3, [r3, #28]
 80093bc:	697a      	ldr	r2, [r7, #20]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d35f      	bcc.n	8009482 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d104      	bne.n	80093d2 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	639a      	str	r2, [r3, #56]	; 0x38
 80093ce:	2304      	movs	r3, #4
 80093d0:	e06e      	b.n	80094b0 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d8:	4619      	mov	r1, r3
 80093da:	4610      	mov	r0, r2
 80093dc:	f7ff fdcc 	bl	8008f78 <create_chain>
 80093e0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <dir_next+0xde>
 80093e8:	2307      	movs	r3, #7
 80093ea:	e061      	b.n	80094b0 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d101      	bne.n	80093f6 <dir_next+0xe8>
 80093f2:	2302      	movs	r3, #2
 80093f4:	e05c      	b.n	80094b0 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fc:	d101      	bne.n	8009402 <dir_next+0xf4>
 80093fe:	2301      	movs	r3, #1
 8009400:	e056      	b.n	80094b0 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	79db      	ldrb	r3, [r3, #7]
 8009406:	f043 0304 	orr.w	r3, r3, #4
 800940a:	b2da      	uxtb	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f7ff f8af 	bl	8008574 <sync_window>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <dir_next+0x112>
 800941c:	2301      	movs	r3, #1
 800941e:	e047      	b.n	80094b0 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	3338      	adds	r3, #56	; 0x38
 8009424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009428:	2100      	movs	r1, #0
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe fee2 	bl	80081f4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009430:	2300      	movs	r3, #0
 8009432:	613b      	str	r3, [r7, #16]
 8009434:	6979      	ldr	r1, [r7, #20]
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f7ff f97c 	bl	8008734 <clust2sect>
 800943c:	4602      	mov	r2, r0
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	635a      	str	r2, [r3, #52]	; 0x34
 8009442:	e012      	b.n	800946a <dir_next+0x15c>
						fs->wflag = 1;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2201      	movs	r2, #1
 8009448:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f7ff f892 	bl	8008574 <sync_window>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <dir_next+0x14c>
 8009456:	2301      	movs	r3, #1
 8009458:	e02a      	b.n	80094b0 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	3301      	adds	r3, #1
 800945e:	613b      	str	r3, [r7, #16]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009464:	1c5a      	adds	r2, r3, #1
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	635a      	str	r2, [r3, #52]	; 0x34
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	895b      	ldrh	r3, [r3, #10]
 800946e:	461a      	mov	r2, r3
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	4293      	cmp	r3, r2
 8009474:	d3e6      	bcc.n	8009444 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	1ad2      	subs	r2, r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	697a      	ldr	r2, [r7, #20]
 8009486:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8009488:	6979      	ldr	r1, [r7, #20]
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f7ff f952 	bl	8008734 <clust2sect>
 8009490:	4602      	mov	r2, r0
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094a8:	441a      	add	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3718      	adds	r7, #24
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80094c8:	2100      	movs	r1, #0
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7ff fe99 	bl	8009202 <dir_sdi>
 80094d0:	4603      	mov	r3, r0
 80094d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80094d4:	7dfb      	ldrb	r3, [r7, #23]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d140      	bne.n	800955c <dir_alloc+0xa4>
		n = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e2:	4619      	mov	r1, r3
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f7ff f889 	bl	80085fc <move_window>
 80094ea:	4603      	mov	r3, r0
 80094ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80094ee:	7dfb      	ldrb	r3, [r7, #23]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d132      	bne.n	800955a <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	2b04      	cmp	r3, #4
 80094fa:	d108      	bne.n	800950e <dir_alloc+0x56>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	b25b      	sxtb	r3, r3
 8009504:	43db      	mvns	r3, r3
 8009506:	b2db      	uxtb	r3, r3
 8009508:	09db      	lsrs	r3, r3, #7
 800950a:	b2db      	uxtb	r3, r3
 800950c:	e00f      	b.n	800952e <dir_alloc+0x76>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	2be5      	cmp	r3, #229	; 0xe5
 8009516:	d004      	beq.n	8009522 <dir_alloc+0x6a>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <dir_alloc+0x6e>
 8009522:	2301      	movs	r3, #1
 8009524:	e000      	b.n	8009528 <dir_alloc+0x70>
 8009526:	2300      	movs	r3, #0
 8009528:	f003 0301 	and.w	r3, r3, #1
 800952c:	b2db      	uxtb	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	d007      	beq.n	8009542 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	3301      	adds	r3, #1
 8009536:	613b      	str	r3, [r7, #16]
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	429a      	cmp	r2, r3
 800953e:	d102      	bne.n	8009546 <dir_alloc+0x8e>
 8009540:	e00c      	b.n	800955c <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009542:	2300      	movs	r3, #0
 8009544:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009546:	2101      	movs	r1, #1
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7ff fee0 	bl	800930e <dir_next>
 800954e:	4603      	mov	r3, r0
 8009550:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009552:	7dfb      	ldrb	r3, [r7, #23]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d0c2      	beq.n	80094de <dir_alloc+0x26>
 8009558:	e000      	b.n	800955c <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800955a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800955c:	7dfb      	ldrb	r3, [r7, #23]
 800955e:	2b04      	cmp	r3, #4
 8009560:	d101      	bne.n	8009566 <dir_alloc+0xae>
 8009562:	2307      	movs	r3, #7
 8009564:	75fb      	strb	r3, [r7, #23]
	return res;
 8009566:	7dfb      	ldrb	r3, [r7, #23]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	331a      	adds	r3, #26
 800957e:	4618      	mov	r0, r3
 8009580:	f7fe fc3a 	bl	8007df8 <ld_word>
 8009584:	4603      	mov	r3, r0
 8009586:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	2b03      	cmp	r3, #3
 800958e:	d109      	bne.n	80095a4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	3314      	adds	r3, #20
 8009594:	4618      	mov	r0, r3
 8009596:	f7fe fc2f 	bl	8007df8 <ld_word>
 800959a:	4603      	mov	r3, r0
 800959c:	041b      	lsls	r3, r3, #16
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80095a4:	68fb      	ldr	r3, [r7, #12]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b084      	sub	sp, #16
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	60f8      	str	r0, [r7, #12]
 80095b6:	60b9      	str	r1, [r7, #8]
 80095b8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	331a      	adds	r3, #26
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	b292      	uxth	r2, r2
 80095c2:	4611      	mov	r1, r2
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7fe fd29 	bl	800801c <st_word>
	if (fs->fs_type == FS_FAT32) {
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	2b03      	cmp	r3, #3
 80095d0:	d109      	bne.n	80095e6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	f103 0214 	add.w	r2, r3, #20
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	0c1b      	lsrs	r3, r3, #16
 80095dc:	b29b      	uxth	r3, r3
 80095de:	4619      	mov	r1, r3
 80095e0:	4610      	mov	r0, r2
 80095e2:	f7fe fd1b 	bl	800801c <st_word>
	}
}
 80095e6:	bf00      	nop
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
	...

080095f0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80095f0:	b590      	push	{r4, r7, lr}
 80095f2:	b087      	sub	sp, #28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	331a      	adds	r3, #26
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fe fbfa 	bl	8007df8 <ld_word>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <cmp_lfn+0x1e>
 800960a:	2300      	movs	r3, #0
 800960c:	e059      	b.n	80096c2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009616:	1e5a      	subs	r2, r3, #1
 8009618:	4613      	mov	r3, r2
 800961a:	005b      	lsls	r3, r3, #1
 800961c:	4413      	add	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4413      	add	r3, r2
 8009622:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009624:	2301      	movs	r3, #1
 8009626:	81fb      	strh	r3, [r7, #14]
 8009628:	2300      	movs	r3, #0
 800962a:	613b      	str	r3, [r7, #16]
 800962c:	e033      	b.n	8009696 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800962e:	4a27      	ldr	r2, [pc, #156]	; (80096cc <cmp_lfn+0xdc>)
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	4413      	add	r3, r2
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	4413      	add	r3, r2
 800963c:	4618      	mov	r0, r3
 800963e:	f7fe fbdb 	bl	8007df8 <ld_word>
 8009642:	4603      	mov	r3, r0
 8009644:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009646:	89fb      	ldrh	r3, [r7, #14]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d01a      	beq.n	8009682 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	2bfe      	cmp	r3, #254	; 0xfe
 8009650:	d812      	bhi.n	8009678 <cmp_lfn+0x88>
 8009652:	89bb      	ldrh	r3, [r7, #12]
 8009654:	4618      	mov	r0, r3
 8009656:	f002 ff15 	bl	800c484 <ff_wtoupper>
 800965a:	4603      	mov	r3, r0
 800965c:	461c      	mov	r4, r3
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	1c5a      	adds	r2, r3, #1
 8009662:	617a      	str	r2, [r7, #20]
 8009664:	005b      	lsls	r3, r3, #1
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	4413      	add	r3, r2
 800966a:	881b      	ldrh	r3, [r3, #0]
 800966c:	4618      	mov	r0, r3
 800966e:	f002 ff09 	bl	800c484 <ff_wtoupper>
 8009672:	4603      	mov	r3, r0
 8009674:	429c      	cmp	r4, r3
 8009676:	d001      	beq.n	800967c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009678:	2300      	movs	r3, #0
 800967a:	e022      	b.n	80096c2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800967c:	89bb      	ldrh	r3, [r7, #12]
 800967e:	81fb      	strh	r3, [r7, #14]
 8009680:	e006      	b.n	8009690 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009682:	89bb      	ldrh	r3, [r7, #12]
 8009684:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009688:	4293      	cmp	r3, r2
 800968a:	d001      	beq.n	8009690 <cmp_lfn+0xa0>
 800968c:	2300      	movs	r3, #0
 800968e:	e018      	b.n	80096c2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	3301      	adds	r3, #1
 8009694:	613b      	str	r3, [r7, #16]
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	2b0c      	cmp	r3, #12
 800969a:	d9c8      	bls.n	800962e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00b      	beq.n	80096c0 <cmp_lfn+0xd0>
 80096a8:	89fb      	ldrh	r3, [r7, #14]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d008      	beq.n	80096c0 <cmp_lfn+0xd0>
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	005b      	lsls	r3, r3, #1
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	4413      	add	r3, r2
 80096b6:	881b      	ldrh	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d001      	beq.n	80096c0 <cmp_lfn+0xd0>
 80096bc:	2300      	movs	r3, #0
 80096be:	e000      	b.n	80096c2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80096c0:	2301      	movs	r3, #1
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	371c      	adds	r7, #28
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd90      	pop	{r4, r7, pc}
 80096ca:	bf00      	nop
 80096cc:	080132f4 	.word	0x080132f4

080096d0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	331a      	adds	r3, #26
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe fb8a 	bl	8007df8 <ld_word>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <pick_lfn+0x1e>
 80096ea:	2300      	movs	r3, #0
 80096ec:	e04d      	b.n	800978a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096f6:	1e5a      	subs	r2, r3, #1
 80096f8:	4613      	mov	r3, r2
 80096fa:	005b      	lsls	r3, r3, #1
 80096fc:	4413      	add	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	4413      	add	r3, r2
 8009702:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009704:	2301      	movs	r3, #1
 8009706:	81fb      	strh	r3, [r7, #14]
 8009708:	2300      	movs	r3, #0
 800970a:	613b      	str	r3, [r7, #16]
 800970c:	e028      	b.n	8009760 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800970e:	4a21      	ldr	r2, [pc, #132]	; (8009794 <pick_lfn+0xc4>)
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	4413      	add	r3, r2
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	461a      	mov	r2, r3
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	4413      	add	r3, r2
 800971c:	4618      	mov	r0, r3
 800971e:	f7fe fb6b 	bl	8007df8 <ld_word>
 8009722:	4603      	mov	r3, r0
 8009724:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009726:	89fb      	ldrh	r3, [r7, #14]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00f      	beq.n	800974c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	2bfe      	cmp	r3, #254	; 0xfe
 8009730:	d901      	bls.n	8009736 <pick_lfn+0x66>
 8009732:	2300      	movs	r3, #0
 8009734:	e029      	b.n	800978a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8009736:	89bb      	ldrh	r3, [r7, #12]
 8009738:	81fb      	strh	r3, [r7, #14]
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	1c5a      	adds	r2, r3, #1
 800973e:	617a      	str	r2, [r7, #20]
 8009740:	005b      	lsls	r3, r3, #1
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	4413      	add	r3, r2
 8009746:	89fa      	ldrh	r2, [r7, #14]
 8009748:	801a      	strh	r2, [r3, #0]
 800974a:	e006      	b.n	800975a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800974c:	89bb      	ldrh	r3, [r7, #12]
 800974e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009752:	4293      	cmp	r3, r2
 8009754:	d001      	beq.n	800975a <pick_lfn+0x8a>
 8009756:	2300      	movs	r3, #0
 8009758:	e017      	b.n	800978a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	3301      	adds	r3, #1
 800975e:	613b      	str	r3, [r7, #16]
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	2b0c      	cmp	r3, #12
 8009764:	d9d3      	bls.n	800970e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00a      	beq.n	8009788 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	2bfe      	cmp	r3, #254	; 0xfe
 8009776:	d901      	bls.n	800977c <pick_lfn+0xac>
 8009778:	2300      	movs	r3, #0
 800977a:	e006      	b.n	800978a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	005b      	lsls	r3, r3, #1
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	4413      	add	r3, r2
 8009784:	2200      	movs	r2, #0
 8009786:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8009788:	2301      	movs	r3, #1
}
 800978a:	4618      	mov	r0, r3
 800978c:	3718      	adds	r7, #24
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	080132f4 	.word	0x080132f4

08009798 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b088      	sub	sp, #32
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	4611      	mov	r1, r2
 80097a4:	461a      	mov	r2, r3
 80097a6:	460b      	mov	r3, r1
 80097a8:	71fb      	strb	r3, [r7, #7]
 80097aa:	4613      	mov	r3, r2
 80097ac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	330d      	adds	r3, #13
 80097b2:	79ba      	ldrb	r2, [r7, #6]
 80097b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	330b      	adds	r3, #11
 80097ba:	220f      	movs	r2, #15
 80097bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	330c      	adds	r3, #12
 80097c2:	2200      	movs	r2, #0
 80097c4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	331a      	adds	r3, #26
 80097ca:	2100      	movs	r1, #0
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fe fc25 	bl	800801c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80097d2:	79fb      	ldrb	r3, [r7, #7]
 80097d4:	1e5a      	subs	r2, r3, #1
 80097d6:	4613      	mov	r3, r2
 80097d8:	005b      	lsls	r3, r3, #1
 80097da:	4413      	add	r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80097e2:	2300      	movs	r3, #0
 80097e4:	82fb      	strh	r3, [r7, #22]
 80097e6:	2300      	movs	r3, #0
 80097e8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80097ea:	8afb      	ldrh	r3, [r7, #22]
 80097ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d007      	beq.n	8009804 <put_lfn+0x6c>
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	1c5a      	adds	r2, r3, #1
 80097f8:	61fa      	str	r2, [r7, #28]
 80097fa:	005b      	lsls	r3, r3, #1
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	4413      	add	r3, r2
 8009800:	881b      	ldrh	r3, [r3, #0]
 8009802:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009804:	4a17      	ldr	r2, [pc, #92]	; (8009864 <put_lfn+0xcc>)
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	4413      	add	r3, r2
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	461a      	mov	r2, r3
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	4413      	add	r3, r2
 8009812:	8afa      	ldrh	r2, [r7, #22]
 8009814:	4611      	mov	r1, r2
 8009816:	4618      	mov	r0, r3
 8009818:	f7fe fc00 	bl	800801c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800981c:	8afb      	ldrh	r3, [r7, #22]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d102      	bne.n	8009828 <put_lfn+0x90>
 8009822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009826:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	3301      	adds	r3, #1
 800982c:	61bb      	str	r3, [r7, #24]
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	2b0c      	cmp	r3, #12
 8009832:	d9da      	bls.n	80097ea <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009834:	8afb      	ldrh	r3, [r7, #22]
 8009836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800983a:	4293      	cmp	r3, r2
 800983c:	d006      	beq.n	800984c <put_lfn+0xb4>
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	005b      	lsls	r3, r3, #1
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	4413      	add	r3, r2
 8009846:	881b      	ldrh	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d103      	bne.n	8009854 <put_lfn+0xbc>
 800984c:	79fb      	ldrb	r3, [r7, #7]
 800984e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009852:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	79fa      	ldrb	r2, [r7, #7]
 8009858:	701a      	strb	r2, [r3, #0]
}
 800985a:	bf00      	nop
 800985c:	3720      	adds	r7, #32
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	080132f4 	.word	0x080132f4

08009868 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b08c      	sub	sp, #48	; 0x30
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
 8009874:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009876:	220b      	movs	r2, #11
 8009878:	68b9      	ldr	r1, [r7, #8]
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f7fe fc9a 	bl	80081b4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	2b05      	cmp	r3, #5
 8009884:	d92b      	bls.n	80098de <gen_numname+0x76>
		sr = seq;
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800988a:	e022      	b.n	80098d2 <gen_numname+0x6a>
			wc = *lfn++;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	1c9a      	adds	r2, r3, #2
 8009890:	607a      	str	r2, [r7, #4]
 8009892:	881b      	ldrh	r3, [r3, #0]
 8009894:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009896:	2300      	movs	r3, #0
 8009898:	62bb      	str	r3, [r7, #40]	; 0x28
 800989a:	e017      	b.n	80098cc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	005a      	lsls	r2, r3, #1
 80098a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	4413      	add	r3, r2
 80098a8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80098aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80098ac:	085b      	lsrs	r3, r3, #1
 80098ae:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d005      	beq.n	80098c6 <gen_numname+0x5e>
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80098c0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80098c4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80098c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c8:	3301      	adds	r3, #1
 80098ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80098cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ce:	2b0f      	cmp	r3, #15
 80098d0:	d9e4      	bls.n	800989c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	881b      	ldrh	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1d8      	bne.n	800988c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80098de:	2307      	movs	r3, #7
 80098e0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	f003 030f 	and.w	r3, r3, #15
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	3330      	adds	r3, #48	; 0x30
 80098ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80098f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098f6:	2b39      	cmp	r3, #57	; 0x39
 80098f8:	d904      	bls.n	8009904 <gen_numname+0x9c>
 80098fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098fe:	3307      	adds	r3, #7
 8009900:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009906:	1e5a      	subs	r2, r3, #1
 8009908:	62ba      	str	r2, [r7, #40]	; 0x28
 800990a:	3330      	adds	r3, #48	; 0x30
 800990c:	443b      	add	r3, r7
 800990e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009912:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	091b      	lsrs	r3, r3, #4
 800991a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1df      	bne.n	80098e2 <gen_numname+0x7a>
	ns[i] = '~';
 8009922:	f107 0214 	add.w	r2, r7, #20
 8009926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009928:	4413      	add	r3, r2
 800992a:	227e      	movs	r2, #126	; 0x7e
 800992c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800992e:	2300      	movs	r3, #0
 8009930:	627b      	str	r3, [r7, #36]	; 0x24
 8009932:	e002      	b.n	800993a <gen_numname+0xd2>
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009936:	3301      	adds	r3, #1
 8009938:	627b      	str	r3, [r7, #36]	; 0x24
 800993a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993e:	429a      	cmp	r2, r3
 8009940:	d205      	bcs.n	800994e <gen_numname+0xe6>
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	4413      	add	r3, r2
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	2b20      	cmp	r3, #32
 800994c:	d1f2      	bne.n	8009934 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800994e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009950:	2b07      	cmp	r3, #7
 8009952:	d807      	bhi.n	8009964 <gen_numname+0xfc>
 8009954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009956:	1c5a      	adds	r2, r3, #1
 8009958:	62ba      	str	r2, [r7, #40]	; 0x28
 800995a:	3330      	adds	r3, #48	; 0x30
 800995c:	443b      	add	r3, r7
 800995e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009962:	e000      	b.n	8009966 <gen_numname+0xfe>
 8009964:	2120      	movs	r1, #32
 8009966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009968:	1c5a      	adds	r2, r3, #1
 800996a:	627a      	str	r2, [r7, #36]	; 0x24
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	4413      	add	r3, r2
 8009970:	460a      	mov	r2, r1
 8009972:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009976:	2b07      	cmp	r3, #7
 8009978:	d9e9      	bls.n	800994e <gen_numname+0xe6>
}
 800997a:	bf00      	nop
 800997c:	bf00      	nop
 800997e:	3730      	adds	r7, #48	; 0x30
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800998c:	2300      	movs	r3, #0
 800998e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009990:	230b      	movs	r3, #11
 8009992:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	b2da      	uxtb	r2, r3
 8009998:	0852      	lsrs	r2, r2, #1
 800999a:	01db      	lsls	r3, r3, #7
 800999c:	4313      	orrs	r3, r2
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	1c59      	adds	r1, r3, #1
 80099a4:	6079      	str	r1, [r7, #4]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	4413      	add	r3, r2
 80099aa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	60bb      	str	r3, [r7, #8]
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1ed      	bne.n	8009994 <sum_sfn+0x10>
	return sum;
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	bc80      	pop	{r7}
 80099c2:	4770      	bx	lr

080099c4 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b087      	sub	sp, #28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	3301      	adds	r3, #1
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	3301      	adds	r3, #1
 80099d4:	015b      	lsls	r3, r3, #5
 80099d6:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 80099d8:	2300      	movs	r3, #0
 80099da:	827b      	strh	r3, [r7, #18]
 80099dc:	2300      	movs	r3, #0
 80099de:	617b      	str	r3, [r7, #20]
 80099e0:	e018      	b.n	8009a14 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d103      	bne.n	80099f0 <xdir_sum+0x2c>
			i++;
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	3301      	adds	r3, #1
 80099ec:	617b      	str	r3, [r7, #20]
 80099ee:	e00e      	b.n	8009a0e <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80099f0:	8a7b      	ldrh	r3, [r7, #18]
 80099f2:	03db      	lsls	r3, r3, #15
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	8a7b      	ldrh	r3, [r7, #18]
 80099f8:	085b      	lsrs	r3, r3, #1
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	4413      	add	r3, r2
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	6879      	ldr	r1, [r7, #4]
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	440b      	add	r3, r1
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	4413      	add	r3, r2
 8009a0c:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	3301      	adds	r3, #1
 8009a12:	617b      	str	r3, [r7, #20]
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d3e2      	bcc.n	80099e2 <xdir_sum+0x1e>
		}
	}
	return sum;
 8009a1c:	8a7b      	ldrh	r3, [r7, #18]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	371c      	adds	r7, #28
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bc80      	pop	{r7}
 8009a26:	4770      	bx	lr

08009a28 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8009a30:	2300      	movs	r3, #0
 8009a32:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8009a34:	e01f      	b.n	8009a76 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8009a36:	89bb      	ldrh	r3, [r7, #12]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f002 fd23 	bl	800c484 <ff_wtoupper>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8009a42:	89fb      	ldrh	r3, [r7, #14]
 8009a44:	03db      	lsls	r3, r3, #15
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	89fb      	ldrh	r3, [r7, #14]
 8009a4a:	085b      	lsrs	r3, r3, #1
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	4413      	add	r3, r2
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	89bb      	ldrh	r3, [r7, #12]
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	4413      	add	r3, r2
 8009a5a:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8009a5c:	89fb      	ldrh	r3, [r7, #14]
 8009a5e:	03db      	lsls	r3, r3, #15
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	89fb      	ldrh	r3, [r7, #14]
 8009a64:	085b      	lsrs	r3, r3, #1
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	4413      	add	r3, r2
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	89bb      	ldrh	r3, [r7, #12]
 8009a6e:	0a1b      	lsrs	r3, r3, #8
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	4413      	add	r3, r2
 8009a74:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	1c9a      	adds	r2, r3, #2
 8009a7a:	607a      	str	r2, [r7, #4]
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	81bb      	strh	r3, [r7, #12]
 8009a80:	89bb      	ldrh	r3, [r7, #12]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1d7      	bne.n	8009a36 <xname_sum+0xe>
	}
	return sum;
 8009a86:	89fb      	ldrh	r3, [r7, #14]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8009a90:	b590      	push	{r4, r7, lr}
 8009a92:	b087      	sub	sp, #28
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4610      	mov	r0, r2
 8009aac:	f7fe fda6 	bl	80085fc <move_window>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d001      	beq.n	8009abe <load_xdir+0x2e>
 8009aba:	7bfb      	ldrb	r3, [r7, #15]
 8009abc:	e09f      	b.n	8009bfe <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	2b85      	cmp	r3, #133	; 0x85
 8009ac6:	d001      	beq.n	8009acc <load_xdir+0x3c>
 8009ac8:	2302      	movs	r3, #2
 8009aca:	e098      	b.n	8009bfe <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ad0:	2220      	movs	r2, #32
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	6938      	ldr	r0, [r7, #16]
 8009ad6:	f7fe fb6d 	bl	80081b4 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	3301      	adds	r3, #1
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	015b      	lsls	r3, r3, #5
 8009ae4:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	2b5f      	cmp	r3, #95	; 0x5f
 8009aea:	d903      	bls.n	8009af4 <load_xdir+0x64>
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8009af2:	d901      	bls.n	8009af8 <load_xdir+0x68>
 8009af4:	2302      	movs	r3, #2
 8009af6:	e082      	b.n	8009bfe <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8009af8:	2100      	movs	r1, #0
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7ff fc07 	bl	800930e <dir_next>
 8009b00:	4603      	mov	r3, r0
 8009b02:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d001      	beq.n	8009b0e <load_xdir+0x7e>
 8009b0a:	7bfb      	ldrb	r3, [r7, #15]
 8009b0c:	e077      	b.n	8009bfe <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b16:	4619      	mov	r1, r3
 8009b18:	4610      	mov	r0, r2
 8009b1a:	f7fe fd6f 	bl	80085fc <move_window>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d001      	beq.n	8009b2c <load_xdir+0x9c>
 8009b28:	7bfb      	ldrb	r3, [r7, #15]
 8009b2a:	e068      	b.n	8009bfe <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	2bc0      	cmp	r3, #192	; 0xc0
 8009b34:	d001      	beq.n	8009b3a <load_xdir+0xaa>
 8009b36:	2302      	movs	r3, #2
 8009b38:	e061      	b.n	8009bfe <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	f103 0020 	add.w	r0, r3, #32
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b44:	2220      	movs	r2, #32
 8009b46:	4619      	mov	r1, r3
 8009b48:	f7fe fb34 	bl	80081b4 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	3323      	adds	r3, #35	; 0x23
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	332c      	adds	r3, #44	; 0x2c
 8009b54:	4a2c      	ldr	r2, [pc, #176]	; (8009c08 <load_xdir+0x178>)
 8009b56:	fba2 2303 	umull	r2, r3, r2, r3
 8009b5a:	08db      	lsrs	r3, r3, #3
 8009b5c:	015b      	lsls	r3, r3, #5
 8009b5e:	68ba      	ldr	r2, [r7, #8]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d201      	bcs.n	8009b68 <load_xdir+0xd8>
 8009b64:	2302      	movs	r3, #2
 8009b66:	e04a      	b.n	8009bfe <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8009b68:	2340      	movs	r3, #64	; 0x40
 8009b6a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7ff fbcd 	bl	800930e <dir_next>
 8009b74:	4603      	mov	r3, r0
 8009b76:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d001      	beq.n	8009b82 <load_xdir+0xf2>
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
 8009b80:	e03d      	b.n	8009bfe <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	f7fe fd35 	bl	80085fc <move_window>
 8009b92:	4603      	mov	r3, r0
 8009b94:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d001      	beq.n	8009ba0 <load_xdir+0x110>
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
 8009b9e:	e02e      	b.n	8009bfe <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	2bc1      	cmp	r3, #193	; 0xc1
 8009ba8:	d001      	beq.n	8009bae <load_xdir+0x11e>
 8009baa:	2302      	movs	r3, #2
 8009bac:	e027      	b.n	8009bfe <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8009bb4:	d208      	bcs.n	8009bc8 <load_xdir+0x138>
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	18d0      	adds	r0, r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bc0:	2220      	movs	r2, #32
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	f7fe faf6 	bl	80081b4 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	3320      	adds	r3, #32
 8009bcc:	617b      	str	r3, [r7, #20]
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d3ca      	bcc.n	8009b6c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8009bdc:	d80e      	bhi.n	8009bfc <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8009bde:	6938      	ldr	r0, [r7, #16]
 8009be0:	f7ff fef0 	bl	80099c4 <xdir_sum>
 8009be4:	4603      	mov	r3, r0
 8009be6:	461c      	mov	r4, r3
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	3302      	adds	r3, #2
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fe f903 	bl	8007df8 <ld_word>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	429c      	cmp	r4, r3
 8009bf6:	d001      	beq.n	8009bfc <load_xdir+0x16c>
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	e000      	b.n	8009bfe <load_xdir+0x16e>
	}
	return FR_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	371c      	adds	r7, #28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd90      	pop	{r4, r7, pc}
 8009c06:	bf00      	nop
 8009c08:	88888889 	.word	0x88888889

08009c0c <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8009c0c:	b5b0      	push	{r4, r5, r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6808      	ldr	r0, [r1, #0]
 8009c1a:	6879      	ldr	r1, [r7, #4]
 8009c1c:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6a08      	ldr	r0, [r1, #32]
 8009c22:	6879      	ldr	r1, [r7, #4]
 8009c24:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8009c26:	6839      	ldr	r1, [r7, #0]
 8009c28:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8009c2a:	b2c8      	uxtb	r0, r1
 8009c2c:	6879      	ldr	r1, [r7, #4]
 8009c2e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8009c30:	6839      	ldr	r1, [r7, #0]
 8009c32:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8009c34:	2000      	movs	r0, #0
 8009c36:	460c      	mov	r4, r1
 8009c38:	4605      	mov	r5, r0
 8009c3a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8009c3e:	2300      	movs	r3, #0
 8009c40:	6879      	ldr	r1, [r7, #4]
 8009c42:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c52:	4619      	mov	r1, r3
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f7ff fad4 	bl	8009202 <dir_sdi>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009c5e:	7bfb      	ldrb	r3, [r7, #15]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d104      	bne.n	8009c6e <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f7ff ff13 	bl	8009a90 <load_xdir>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8009c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bdb0      	pop	{r4, r5, r7, pc}

08009c78 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8009c78:	b590      	push	{r4, r7, lr}
 8009c7a:	b087      	sub	sp, #28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	1c9c      	adds	r4, r3, #2
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f7ff fe99 	bl	80099c4 <xdir_sum>
 8009c92:	4603      	mov	r3, r0
 8009c94:	4619      	mov	r1, r3
 8009c96:	4620      	mov	r0, r4
 8009c98:	f7fe f9c0 	bl	800801c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7ff faa8 	bl	8009202 <dir_sdi>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8009cb6:	e026      	b.n	8009d06 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	4610      	mov	r0, r2
 8009cc4:	f7fe fc9a 	bl	80085fc <move_window>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009ccc:	7dfb      	ldrb	r3, [r7, #23]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d11d      	bne.n	8009d0e <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd6:	2220      	movs	r2, #32
 8009cd8:	68f9      	ldr	r1, [r7, #12]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fe fa6a 	bl	80081b4 <mem_cpy>
		dp->obj.fs->wflag = 1;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	3b01      	subs	r3, #1
 8009cec:	613b      	str	r3, [r7, #16]
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00e      	beq.n	8009d12 <store_xdir+0x9a>
		dirb += SZDIRE;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	3320      	adds	r3, #32
 8009cf8:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7ff fb06 	bl	800930e <dir_next>
 8009d02:	4603      	mov	r3, r0
 8009d04:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d0d5      	beq.n	8009cb8 <store_xdir+0x40>
 8009d0c:	e002      	b.n	8009d14 <store_xdir+0x9c>
		if (res != FR_OK) break;
 8009d0e:	bf00      	nop
 8009d10:	e000      	b.n	8009d14 <store_xdir+0x9c>
		if (--nent == 0) break;
 8009d12:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d002      	beq.n	8009d20 <store_xdir+0xa8>
 8009d1a:	7dfb      	ldrb	r3, [r7, #23]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d101      	bne.n	8009d24 <store_xdir+0xac>
 8009d20:	7dfb      	ldrb	r3, [r7, #23]
 8009d22:	e000      	b.n	8009d26 <store_xdir+0xae>
 8009d24:	2302      	movs	r3, #2
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	371c      	adds	r7, #28
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd90      	pop	{r4, r7, pc}

08009d2e <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8009d2e:	b590      	push	{r4, r7, lr}
 8009d30:	b085      	sub	sp, #20
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8009d38:	2240      	movs	r2, #64	; 0x40
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f7fe fa59 	bl	80081f4 <mem_set>
	dirb[XDIR_Type] = 0x85;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2285      	movs	r2, #133	; 0x85
 8009d46:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	3320      	adds	r3, #32
 8009d4c:	22c0      	movs	r2, #192	; 0xc0
 8009d4e:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8009d50:	2300      	movs	r3, #0
 8009d52:	72bb      	strb	r3, [r7, #10]
 8009d54:	2301      	movs	r3, #1
 8009d56:	72fb      	strb	r3, [r7, #11]
 8009d58:	2301      	movs	r3, #1
 8009d5a:	813b      	strh	r3, [r7, #8]
 8009d5c:	2340      	movs	r3, #64	; 0x40
 8009d5e:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	1c5a      	adds	r2, r3, #1
 8009d64:	60fa      	str	r2, [r7, #12]
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	4413      	add	r3, r2
 8009d6a:	22c1      	movs	r2, #193	; 0xc1
 8009d6c:	701a      	strb	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	1c5a      	adds	r2, r3, #1
 8009d72:	60fa      	str	r2, [r7, #12]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	4413      	add	r3, r2
 8009d78:	2200      	movs	r2, #0
 8009d7a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8009d7c:	893b      	ldrh	r3, [r7, #8]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00b      	beq.n	8009d9a <create_xdir+0x6c>
 8009d82:	7abb      	ldrb	r3, [r7, #10]
 8009d84:	005b      	lsls	r3, r3, #1
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	4413      	add	r3, r2
 8009d8a:	881b      	ldrh	r3, [r3, #0]
 8009d8c:	813b      	strh	r3, [r7, #8]
 8009d8e:	893b      	ldrh	r3, [r7, #8]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d002      	beq.n	8009d9a <create_xdir+0x6c>
 8009d94:	7abb      	ldrb	r3, [r7, #10]
 8009d96:	3301      	adds	r3, #1
 8009d98:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	4413      	add	r3, r2
 8009da0:	893a      	ldrh	r2, [r7, #8]
 8009da2:	4611      	mov	r1, r2
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7fe f939 	bl	800801c <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	3302      	adds	r3, #2
 8009dae:	60fb      	str	r3, [r7, #12]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f003 031f 	and.w	r3, r3, #31
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1e0      	bne.n	8009d7c <create_xdir+0x4e>
		nb++;
 8009dba:	7afb      	ldrb	r3, [r7, #11]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8009dc0:	7abb      	ldrb	r3, [r7, #10]
 8009dc2:	005b      	lsls	r3, r3, #1
 8009dc4:	683a      	ldr	r2, [r7, #0]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1c8      	bne.n	8009d60 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	3323      	adds	r3, #35	; 0x23
 8009dd2:	7aba      	ldrb	r2, [r7, #10]
 8009dd4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	7afa      	ldrb	r2, [r7, #11]
 8009ddc:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8009de4:	6838      	ldr	r0, [r7, #0]
 8009de6:	f7ff fe1f 	bl	8009a28 <xname_sum>
 8009dea:	4603      	mov	r3, r0
 8009dec:	4619      	mov	r1, r3
 8009dee:	4620      	mov	r0, r4
 8009df0:	f7fe f914 	bl	800801c <st_word>
}
 8009df4:	bf00      	nop
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd90      	pop	{r4, r7, pc}

08009dfc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8009e06:	2304      	movs	r3, #4
 8009e08:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8009e10:	23ff      	movs	r3, #255	; 0xff
 8009e12:	757b      	strb	r3, [r7, #21]
 8009e14:	23ff      	movs	r3, #255	; 0xff
 8009e16:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8009e18:	e09f      	b.n	8009f5a <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6938      	ldr	r0, [r7, #16]
 8009e22:	f7fe fbeb 	bl	80085fc <move_window>
 8009e26:	4603      	mov	r3, r0
 8009e28:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009e2a:	7dfb      	ldrb	r3, [r7, #23]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f040 809a 	bne.w	8009f66 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8009e3a:	7dbb      	ldrb	r3, [r7, #22]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d102      	bne.n	8009e46 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009e40:	2304      	movs	r3, #4
 8009e42:	75fb      	strb	r3, [r7, #23]
 8009e44:	e096      	b.n	8009f74 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	2b04      	cmp	r3, #4
 8009e4c:	d118      	bne.n	8009e80 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8009e4e:	7dbb      	ldrb	r3, [r7, #22]
 8009e50:	2b85      	cmp	r3, #133	; 0x85
 8009e52:	d179      	bne.n	8009f48 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7ff fe17 	bl	8009a90 <load_xdir>
 8009e62:	4603      	mov	r3, r0
 8009e64:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8009e66:	7dfb      	ldrb	r3, [r7, #23]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d17e      	bne.n	8009f6a <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	3304      	adds	r3, #4
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e78:	b2da      	uxtb	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	719a      	strb	r2, [r3, #6]
					}
					break;
 8009e7e:	e074      	b.n	8009f6a <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e84:	330b      	adds	r3, #11
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e8c:	73fb      	strb	r3, [r7, #15]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	7bfa      	ldrb	r2, [r7, #15]
 8009e92:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8009e94:	7dbb      	ldrb	r3, [r7, #22]
 8009e96:	2be5      	cmp	r3, #229	; 0xe5
 8009e98:	d00e      	beq.n	8009eb8 <dir_read+0xbc>
 8009e9a:	7dbb      	ldrb	r3, [r7, #22]
 8009e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e9e:	d00b      	beq.n	8009eb8 <dir_read+0xbc>
 8009ea0:	7bfb      	ldrb	r3, [r7, #15]
 8009ea2:	f023 0320 	bic.w	r3, r3, #32
 8009ea6:	2b08      	cmp	r3, #8
 8009ea8:	bf0c      	ite	eq
 8009eaa:	2301      	moveq	r3, #1
 8009eac:	2300      	movne	r3, #0
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d002      	beq.n	8009ebe <dir_read+0xc2>
				ord = 0xFF;
 8009eb8:	23ff      	movs	r3, #255	; 0xff
 8009eba:	757b      	strb	r3, [r7, #21]
 8009ebc:	e044      	b.n	8009f48 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8009ebe:	7bfb      	ldrb	r3, [r7, #15]
 8009ec0:	2b0f      	cmp	r3, #15
 8009ec2:	d12f      	bne.n	8009f24 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8009ec4:	7dbb      	ldrb	r3, [r7, #22]
 8009ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00d      	beq.n	8009eea <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ed2:	7b5b      	ldrb	r3, [r3, #13]
 8009ed4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8009ed6:	7dbb      	ldrb	r3, [r7, #22]
 8009ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009edc:	75bb      	strb	r3, [r7, #22]
 8009ede:	7dbb      	ldrb	r3, [r7, #22]
 8009ee0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009eea:	7dba      	ldrb	r2, [r7, #22]
 8009eec:	7d7b      	ldrb	r3, [r7, #21]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d115      	bne.n	8009f1e <dir_read+0x122>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ef6:	330d      	adds	r3, #13
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	7d3a      	ldrb	r2, [r7, #20]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d10e      	bne.n	8009f1e <dir_read+0x122>
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	68da      	ldr	r2, [r3, #12]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f08:	4619      	mov	r1, r3
 8009f0a:	4610      	mov	r0, r2
 8009f0c:	f7ff fbe0 	bl	80096d0 <pick_lfn>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d003      	beq.n	8009f1e <dir_read+0x122>
 8009f16:	7d7b      	ldrb	r3, [r7, #21]
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	e000      	b.n	8009f20 <dir_read+0x124>
 8009f1e:	23ff      	movs	r3, #255	; 0xff
 8009f20:	757b      	strb	r3, [r7, #21]
 8009f22:	e011      	b.n	8009f48 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8009f24:	7d7b      	ldrb	r3, [r7, #21]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d109      	bne.n	8009f3e <dir_read+0x142>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7ff fd28 	bl	8009984 <sum_sfn>
 8009f34:	4603      	mov	r3, r0
 8009f36:	461a      	mov	r2, r3
 8009f38:	7d3b      	ldrb	r3, [r7, #20]
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d017      	beq.n	8009f6e <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f04f 32ff 	mov.w	r2, #4294967295
 8009f44:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8009f46:	e012      	b.n	8009f6e <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009f48:	2100      	movs	r1, #0
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7ff f9df 	bl	800930e <dir_next>
 8009f50:	4603      	mov	r3, r0
 8009f52:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009f54:	7dfb      	ldrb	r3, [r7, #23]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10b      	bne.n	8009f72 <dir_read+0x176>
	while (dp->sect) {
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f47f af5b 	bne.w	8009e1a <dir_read+0x1e>
 8009f64:	e006      	b.n	8009f74 <dir_read+0x178>
		if (res != FR_OK) break;
 8009f66:	bf00      	nop
 8009f68:	e004      	b.n	8009f74 <dir_read+0x178>
					break;
 8009f6a:	bf00      	nop
 8009f6c:	e002      	b.n	8009f74 <dir_read+0x178>
					break;
 8009f6e:	bf00      	nop
 8009f70:	e000      	b.n	8009f74 <dir_read+0x178>
		if (res != FR_OK) break;
 8009f72:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009f74:	7dfb      	ldrb	r3, [r7, #23]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d002      	beq.n	8009f80 <dir_read+0x184>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 8009f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009f8a:	b590      	push	{r4, r7, lr}
 8009f8c:	b089      	sub	sp, #36	; 0x24
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009f98:	2100      	movs	r1, #0
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f7ff f931 	bl	8009202 <dir_sdi>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8009fa4:	7ffb      	ldrb	r3, [r7, #31]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d001      	beq.n	8009fae <dir_find+0x24>
 8009faa:	7ffb      	ldrb	r3, [r7, #31]
 8009fac:	e112      	b.n	800a1d4 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	2b04      	cmp	r3, #4
 8009fb4:	d164      	bne.n	800a080 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7ff fd34 	bl	8009a28 <xname_sum>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8009fc4:	e04f      	b.n	800a066 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	3324      	adds	r3, #36	; 0x24
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7fd ff13 	bl	8007df8 <ld_word>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	893b      	ldrh	r3, [r7, #8]
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d000      	beq.n	8009fde <dir_find+0x54>
 8009fdc:	e043      	b.n	800a066 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009fe6:	76fb      	strb	r3, [r7, #27]
 8009fe8:	2340      	movs	r3, #64	; 0x40
 8009fea:	617b      	str	r3, [r7, #20]
 8009fec:	2300      	movs	r3, #0
 8009fee:	613b      	str	r3, [r7, #16]
 8009ff0:	e029      	b.n	800a046 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f003 031f 	and.w	r3, r3, #31
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d102      	bne.n	800a002 <dir_find+0x78>
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	3302      	adds	r3, #2
 800a000:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	691a      	ldr	r2, [r3, #16]
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	4413      	add	r3, r2
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fd fef4 	bl	8007df8 <ld_word>
 800a010:	4603      	mov	r3, r0
 800a012:	4618      	mov	r0, r3
 800a014:	f002 fa36 	bl	800c484 <ff_wtoupper>
 800a018:	4603      	mov	r3, r0
 800a01a:	461c      	mov	r4, r3
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	68da      	ldr	r2, [r3, #12]
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	005b      	lsls	r3, r3, #1
 800a024:	4413      	add	r3, r2
 800a026:	881b      	ldrh	r3, [r3, #0]
 800a028:	4618      	mov	r0, r3
 800a02a:	f002 fa2b 	bl	800c484 <ff_wtoupper>
 800a02e:	4603      	mov	r3, r0
 800a030:	429c      	cmp	r4, r3
 800a032:	d10c      	bne.n	800a04e <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800a034:	7efb      	ldrb	r3, [r7, #27]
 800a036:	3b01      	subs	r3, #1
 800a038:	76fb      	strb	r3, [r7, #27]
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	3302      	adds	r3, #2
 800a03e:	617b      	str	r3, [r7, #20]
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	3301      	adds	r3, #1
 800a044:	613b      	str	r3, [r7, #16]
 800a046:	7efb      	ldrb	r3, [r7, #27]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1d2      	bne.n	8009ff2 <dir_find+0x68>
 800a04c:	e000      	b.n	800a050 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800a04e:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800a050:	7efb      	ldrb	r3, [r7, #27]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d107      	bne.n	800a066 <dir_find+0xdc>
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	68da      	ldr	r2, [r3, #12]
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	005b      	lsls	r3, r3, #1
 800a05e:	4413      	add	r3, r2
 800a060:	881b      	ldrh	r3, [r3, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d009      	beq.n	800a07a <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800a066:	2100      	movs	r1, #0
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f7ff fec7 	bl	8009dfc <dir_read>
 800a06e:	4603      	mov	r3, r0
 800a070:	77fb      	strb	r3, [r7, #31]
 800a072:	7ffb      	ldrb	r3, [r7, #31]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d0a6      	beq.n	8009fc6 <dir_find+0x3c>
 800a078:	e000      	b.n	800a07c <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800a07a:	bf00      	nop
		}
		return res;
 800a07c:	7ffb      	ldrb	r3, [r7, #31]
 800a07e:	e0a9      	b.n	800a1d4 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a080:	23ff      	movs	r3, #255	; 0xff
 800a082:	773b      	strb	r3, [r7, #28]
 800a084:	7f3b      	ldrb	r3, [r7, #28]
 800a086:	777b      	strb	r3, [r7, #29]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f04f 32ff 	mov.w	r2, #4294967295
 800a08e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a094:	4619      	mov	r1, r3
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f7fe fab0 	bl	80085fc <move_window>
 800a09c:	4603      	mov	r3, r0
 800a09e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800a0a0:	7ffb      	ldrb	r3, [r7, #31]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f040 8090 	bne.w	800a1c8 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a0b0:	7fbb      	ldrb	r3, [r7, #30]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d102      	bne.n	800a0bc <dir_find+0x132>
 800a0b6:	2304      	movs	r3, #4
 800a0b8:	77fb      	strb	r3, [r7, #31]
 800a0ba:	e08a      	b.n	800a1d2 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0c0:	330b      	adds	r3, #11
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0c8:	72fb      	strb	r3, [r7, #11]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	7afa      	ldrb	r2, [r7, #11]
 800a0ce:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a0d0:	7fbb      	ldrb	r3, [r7, #30]
 800a0d2:	2be5      	cmp	r3, #229	; 0xe5
 800a0d4:	d007      	beq.n	800a0e6 <dir_find+0x15c>
 800a0d6:	7afb      	ldrb	r3, [r7, #11]
 800a0d8:	f003 0308 	and.w	r3, r3, #8
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d009      	beq.n	800a0f4 <dir_find+0x16a>
 800a0e0:	7afb      	ldrb	r3, [r7, #11]
 800a0e2:	2b0f      	cmp	r3, #15
 800a0e4:	d006      	beq.n	800a0f4 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a0e6:	23ff      	movs	r3, #255	; 0xff
 800a0e8:	777b      	strb	r3, [r7, #29]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f0:	64da      	str	r2, [r3, #76]	; 0x4c
 800a0f2:	e05e      	b.n	800a1b2 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a0f4:	7afb      	ldrb	r3, [r7, #11]
 800a0f6:	2b0f      	cmp	r3, #15
 800a0f8:	d136      	bne.n	800a168 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800a100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a104:	2b00      	cmp	r3, #0
 800a106:	d154      	bne.n	800a1b2 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a108:	7fbb      	ldrb	r3, [r7, #30]
 800a10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00d      	beq.n	800a12e <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a116:	7b5b      	ldrb	r3, [r3, #13]
 800a118:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a11a:	7fbb      	ldrb	r3, [r7, #30]
 800a11c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a120:	77bb      	strb	r3, [r7, #30]
 800a122:	7fbb      	ldrb	r3, [r7, #30]
 800a124:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a12e:	7fba      	ldrb	r2, [r7, #30]
 800a130:	7f7b      	ldrb	r3, [r7, #29]
 800a132:	429a      	cmp	r2, r3
 800a134:	d115      	bne.n	800a162 <dir_find+0x1d8>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a13a:	330d      	adds	r3, #13
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	7f3a      	ldrb	r2, [r7, #28]
 800a140:	429a      	cmp	r2, r3
 800a142:	d10e      	bne.n	800a162 <dir_find+0x1d8>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	68da      	ldr	r2, [r3, #12]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a14c:	4619      	mov	r1, r3
 800a14e:	4610      	mov	r0, r2
 800a150:	f7ff fa4e 	bl	80095f0 <cmp_lfn>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d003      	beq.n	800a162 <dir_find+0x1d8>
 800a15a:	7f7b      	ldrb	r3, [r7, #29]
 800a15c:	3b01      	subs	r3, #1
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	e000      	b.n	800a164 <dir_find+0x1da>
 800a162:	23ff      	movs	r3, #255	; 0xff
 800a164:	777b      	strb	r3, [r7, #29]
 800a166:	e024      	b.n	800a1b2 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a168:	7f7b      	ldrb	r3, [r7, #29]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d109      	bne.n	800a182 <dir_find+0x1f8>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a172:	4618      	mov	r0, r3
 800a174:	f7ff fc06 	bl	8009984 <sum_sfn>
 800a178:	4603      	mov	r3, r0
 800a17a:	461a      	mov	r2, r3
 800a17c:	7f3b      	ldrb	r3, [r7, #28]
 800a17e:	4293      	cmp	r3, r2
 800a180:	d024      	beq.n	800a1cc <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800a188:	f003 0301 	and.w	r3, r3, #1
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10a      	bne.n	800a1a6 <dir_find+0x21c>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	3340      	adds	r3, #64	; 0x40
 800a198:	220b      	movs	r2, #11
 800a19a:	4619      	mov	r1, r3
 800a19c:	f7fe f844 	bl	8008228 <mem_cmp>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d014      	beq.n	800a1d0 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a1a6:	23ff      	movs	r3, #255	; 0xff
 800a1a8:	777b      	strb	r3, [r7, #29]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b0:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f7ff f8aa 	bl	800930e <dir_next>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800a1be:	7ffb      	ldrb	r3, [r7, #31]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f43f af65 	beq.w	800a090 <dir_find+0x106>
 800a1c6:	e004      	b.n	800a1d2 <dir_find+0x248>
		if (res != FR_OK) break;
 800a1c8:	bf00      	nop
 800a1ca:	e002      	b.n	800a1d2 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a1cc:	bf00      	nop
 800a1ce:	e000      	b.n	800a1d2 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a1d0:	bf00      	nop

	return res;
 800a1d2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3724      	adds	r7, #36	; 0x24
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd90      	pop	{r4, r7, pc}

0800a1dc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a1dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a1e0:	b0a0      	sub	sp, #128	; 0x80
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800a1f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <dir_register+0x22>
 800a1fa:	2306      	movs	r3, #6
 800a1fc:	e18e      	b.n	800a51c <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a1fe:	2300      	movs	r3, #0
 800a200:	677b      	str	r3, [r7, #116]	; 0x74
 800a202:	e002      	b.n	800a20a <dir_register+0x2e>
 800a204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a206:	3301      	adds	r3, #1
 800a208:	677b      	str	r3, [r7, #116]	; 0x74
 800a20a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a20c:	68da      	ldr	r2, [r3, #12]
 800a20e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a210:	005b      	lsls	r3, r3, #1
 800a212:	4413      	add	r3, r2
 800a214:	881b      	ldrh	r3, [r3, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1f4      	bne.n	800a204 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800a21a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	2b04      	cmp	r3, #4
 800a220:	f040 809f 	bne.w	800a362 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800a224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a226:	330e      	adds	r3, #14
 800a228:	4aa2      	ldr	r2, [pc, #648]	; (800a4b4 <dir_register+0x2d8>)
 800a22a:	fba2 2303 	umull	r2, r3, r2, r3
 800a22e:	08db      	lsrs	r3, r3, #3
 800a230:	3302      	adds	r3, #2
 800a232:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800a234:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f7ff f93e 	bl	80094b8 <dir_alloc>
 800a23c:	4603      	mov	r3, r0
 800a23e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800a242:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a246:	2b00      	cmp	r3, #0
 800a248:	d002      	beq.n	800a250 <dir_register+0x74>
 800a24a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a24e:	e165      	b.n	800a51c <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a254:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a256:	3b01      	subs	r3, #1
 800a258:	015b      	lsls	r3, r3, #5
 800a25a:	1ad2      	subs	r2, r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d072      	beq.n	800a34e <dir_register+0x172>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	79db      	ldrb	r3, [r3, #7]
 800a26c:	f003 0304 	and.w	r3, r3, #4
 800a270:	2b00      	cmp	r3, #0
 800a272:	d06c      	beq.n	800a34e <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a27a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a27c:	8949      	ldrh	r1, [r1, #10]
 800a27e:	0249      	lsls	r1, r1, #9
 800a280:	2000      	movs	r0, #0
 800a282:	460c      	mov	r4, r1
 800a284:	4605      	mov	r5, r0
 800a286:	eb12 0804 	adds.w	r8, r2, r4
 800a28a:	eb43 0905 	adc.w	r9, r3, r5
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4618      	mov	r0, r3
 800a298:	f7fe fd5a 	bl	8008d50 <fill_first_frag>
 800a29c:	4603      	mov	r3, r0
 800a29e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800a2a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d002      	beq.n	800a2b0 <dir_register+0xd4>
 800a2aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a2ae:	e135      	b.n	800a51c <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	f7fe fd77 	bl	8008dae <fill_last_frag>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800a2c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d002      	beq.n	800a2d4 <dir_register+0xf8>
 800a2ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a2d2:	e123      	b.n	800a51c <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	f107 0308 	add.w	r3, r7, #8
 800a2da:	4611      	mov	r1, r2
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7ff fc95 	bl	8009c0c <load_obj_dir>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800a2e8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d002      	beq.n	800a2f6 <dir_register+0x11a>
 800a2f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a2f4:	e112      	b.n	800a51c <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800a2f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a304:	4608      	mov	r0, r1
 800a306:	f7fd fece 	bl	80080a6 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800a30a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a318:	4608      	mov	r0, r1
 800a31a:	f7fd fec4 	bl	80080a6 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	79da      	ldrb	r2, [r3, #7]
 800a322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	3321      	adds	r3, #33	; 0x21
 800a328:	f042 0201 	orr.w	r2, r2, #1
 800a32c:	b2d2      	uxtb	r2, r2
 800a32e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800a330:	f107 0308 	add.w	r3, r7, #8
 800a334:	4618      	mov	r0, r3
 800a336:	f7ff fc9f 	bl	8009c78 <store_xdir>
 800a33a:	4603      	mov	r3, r0
 800a33c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800a340:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a344:	2b00      	cmp	r3, #0
 800a346:	d002      	beq.n	800a34e <dir_register+0x172>
 800a348:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a34c:	e0e6      	b.n	800a51c <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800a34e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a350:	691a      	ldr	r2, [r3, #16]
 800a352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	4619      	mov	r1, r3
 800a358:	4610      	mov	r0, r2
 800a35a:	f7ff fce8 	bl	8009d2e <create_xdir>
		return FR_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	e0dc      	b.n	800a51c <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800a368:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a36c:	220c      	movs	r2, #12
 800a36e:	4618      	mov	r0, r3
 800a370:	f7fd ff20 	bl	80081b4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a374:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a378:	f003 0301 	and.w	r3, r3, #1
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d033      	beq.n	800a3e8 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2240      	movs	r2, #64	; 0x40
 800a384:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800a388:	2301      	movs	r3, #1
 800a38a:	67bb      	str	r3, [r7, #120]	; 0x78
 800a38c:	e016      	b.n	800a3bc <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800a394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a396:	68da      	ldr	r2, [r3, #12]
 800a398:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800a39c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a39e:	f7ff fa63 	bl	8009868 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f7ff fdf1 	bl	8009f8a <dir_find>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800a3ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d106      	bne.n	800a3c4 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800a3b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	67bb      	str	r3, [r7, #120]	; 0x78
 800a3bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3be:	2b63      	cmp	r3, #99	; 0x63
 800a3c0:	d9e5      	bls.n	800a38e <dir_register+0x1b2>
 800a3c2:	e000      	b.n	800a3c6 <dir_register+0x1ea>
			if (res != FR_OK) break;
 800a3c4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a3c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3c8:	2b64      	cmp	r3, #100	; 0x64
 800a3ca:	d101      	bne.n	800a3d0 <dir_register+0x1f4>
 800a3cc:	2307      	movs	r3, #7
 800a3ce:	e0a5      	b.n	800a51c <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a3d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a3d4:	2b04      	cmp	r3, #4
 800a3d6:	d002      	beq.n	800a3de <dir_register+0x202>
 800a3d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a3dc:	e09e      	b.n	800a51c <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a3de:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a3e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a3ec:	f003 0302 	and.w	r3, r3, #2
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d007      	beq.n	800a404 <dir_register+0x228>
 800a3f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3f6:	330c      	adds	r3, #12
 800a3f8:	4a2f      	ldr	r2, [pc, #188]	; (800a4b8 <dir_register+0x2dc>)
 800a3fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a3fe:	089b      	lsrs	r3, r3, #2
 800a400:	3301      	adds	r3, #1
 800a402:	e000      	b.n	800a406 <dir_register+0x22a>
 800a404:	2301      	movs	r3, #1
 800a406:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a408:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f7ff f854 	bl	80094b8 <dir_alloc>
 800a410:	4603      	mov	r3, r0
 800a412:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a416:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d14f      	bne.n	800a4be <dir_register+0x2e2>
 800a41e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a420:	3b01      	subs	r3, #1
 800a422:	673b      	str	r3, [r7, #112]	; 0x70
 800a424:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a426:	2b00      	cmp	r3, #0
 800a428:	d049      	beq.n	800a4be <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a42e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a430:	015b      	lsls	r3, r3, #5
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	4619      	mov	r1, r3
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f7fe fee3 	bl	8009202 <dir_sdi>
 800a43c:	4603      	mov	r3, r0
 800a43e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800a442:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a446:	2b00      	cmp	r3, #0
 800a448:	d139      	bne.n	800a4be <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	3340      	adds	r3, #64	; 0x40
 800a44e:	4618      	mov	r0, r3
 800a450:	f7ff fa98 	bl	8009984 <sum_sfn>
 800a454:	4603      	mov	r3, r0
 800a456:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a45e:	4619      	mov	r1, r3
 800a460:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a462:	f7fe f8cb 	bl	80085fc <move_window>
 800a466:	4603      	mov	r3, r0
 800a468:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800a46c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a470:	2b00      	cmp	r3, #0
 800a472:	d123      	bne.n	800a4bc <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a476:	68d8      	ldr	r0, [r3, #12]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a47c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a47e:	b2da      	uxtb	r2, r3
 800a480:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800a484:	f7ff f988 	bl	8009798 <put_lfn>
				fs->wflag = 1;
 800a488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a48a:	2201      	movs	r2, #1
 800a48c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a48e:	2100      	movs	r1, #0
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f7fe ff3c 	bl	800930e <dir_next>
 800a496:	4603      	mov	r3, r0
 800a498:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800a49c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10c      	bne.n	800a4be <dir_register+0x2e2>
 800a4a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	673b      	str	r3, [r7, #112]	; 0x70
 800a4aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1d4      	bne.n	800a45a <dir_register+0x27e>
 800a4b0:	e005      	b.n	800a4be <dir_register+0x2e2>
 800a4b2:	bf00      	nop
 800a4b4:	88888889 	.word	0x88888889
 800a4b8:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800a4bc:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a4be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d128      	bne.n	800a518 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a4ce:	f7fe f895 	bl	80085fc <move_window>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800a4d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d11b      	bne.n	800a518 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e4:	2220      	movs	r2, #32
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7fd fe83 	bl	80081f4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	3340      	adds	r3, #64	; 0x40
 800a4f6:	220b      	movs	r2, #11
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	f7fd fe5b 	bl	80081b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a508:	330c      	adds	r3, #12
 800a50a:	f002 0218 	and.w	r2, r2, #24
 800a50e:	b2d2      	uxtb	r2, r2
 800a510:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a514:	2201      	movs	r2, #1
 800a516:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a518:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3780      	adds	r7, #128	; 0x80
 800a520:	46bd      	mov	sp, r7
 800a522:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a526:	bf00      	nop

0800a528 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08a      	sub	sp, #40	; 0x28
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	613b      	str	r3, [r7, #16]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	60fb      	str	r3, [r7, #12]
 800a540:	2300      	movs	r3, #0
 800a542:	617b      	str	r3, [r7, #20]
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	1c5a      	adds	r2, r3, #1
 800a54c:	61ba      	str	r2, [r7, #24]
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	4413      	add	r3, r2
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a556:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a558:	2b1f      	cmp	r3, #31
 800a55a:	d940      	bls.n	800a5de <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a55c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a55e:	2b2f      	cmp	r3, #47	; 0x2f
 800a560:	d006      	beq.n	800a570 <create_name+0x48>
 800a562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a564:	2b5c      	cmp	r3, #92	; 0x5c
 800a566:	d110      	bne.n	800a58a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a568:	e002      	b.n	800a570 <create_name+0x48>
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	3301      	adds	r3, #1
 800a56e:	61bb      	str	r3, [r7, #24]
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	4413      	add	r3, r2
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	2b2f      	cmp	r3, #47	; 0x2f
 800a57a:	d0f6      	beq.n	800a56a <create_name+0x42>
 800a57c:	693a      	ldr	r2, [r7, #16]
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	4413      	add	r3, r2
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	2b5c      	cmp	r3, #92	; 0x5c
 800a586:	d0f0      	beq.n	800a56a <create_name+0x42>
			break;
 800a588:	e02a      	b.n	800a5e0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	2bfe      	cmp	r3, #254	; 0xfe
 800a58e:	d901      	bls.n	800a594 <create_name+0x6c>
 800a590:	2306      	movs	r3, #6
 800a592:	e17d      	b.n	800a890 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a594:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a596:	b2db      	uxtb	r3, r3
 800a598:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a59a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a59c:	2101      	movs	r1, #1
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f001 ff36 	bl	800c410 <ff_convert>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a5a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d101      	bne.n	800a5b2 <create_name+0x8a>
 800a5ae:	2306      	movs	r3, #6
 800a5b0:	e16e      	b.n	800a890 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a5b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5b4:	2b7f      	cmp	r3, #127	; 0x7f
 800a5b6:	d809      	bhi.n	800a5cc <create_name+0xa4>
 800a5b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	488d      	ldr	r0, [pc, #564]	; (800a7f4 <create_name+0x2cc>)
 800a5be:	f7fd fe59 	bl	8008274 <chk_chr>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d001      	beq.n	800a5cc <create_name+0xa4>
 800a5c8:	2306      	movs	r3, #6
 800a5ca:	e161      	b.n	800a890 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	1c5a      	adds	r2, r3, #1
 800a5d0:	617a      	str	r2, [r7, #20]
 800a5d2:	005b      	lsls	r3, r3, #1
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a5da:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a5dc:	e7b4      	b.n	800a548 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a5de:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a5e0:	693a      	ldr	r2, [r7, #16]
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	441a      	add	r2, r3
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a5ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5ec:	2b1f      	cmp	r3, #31
 800a5ee:	d801      	bhi.n	800a5f4 <create_name+0xcc>
 800a5f0:	2304      	movs	r3, #4
 800a5f2:	e000      	b.n	800a5f6 <create_name+0xce>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a5fa:	e011      	b.n	800a620 <create_name+0xf8>
		w = lfn[di - 1];
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a602:	3b01      	subs	r3, #1
 800a604:	005b      	lsls	r3, r3, #1
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	4413      	add	r3, r2
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a60e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a610:	2b20      	cmp	r3, #32
 800a612:	d002      	beq.n	800a61a <create_name+0xf2>
 800a614:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a616:	2b2e      	cmp	r3, #46	; 0x2e
 800a618:	d106      	bne.n	800a628 <create_name+0x100>
		di--;
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	3b01      	subs	r3, #1
 800a61e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1ea      	bne.n	800a5fc <create_name+0xd4>
 800a626:	e000      	b.n	800a62a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a628:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	005b      	lsls	r3, r3, #1
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	4413      	add	r3, r2
 800a632:	2200      	movs	r2, #0
 800a634:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d101      	bne.n	800a640 <create_name+0x118>
 800a63c:	2306      	movs	r3, #6
 800a63e:	e127      	b.n	800a890 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	3340      	adds	r3, #64	; 0x40
 800a644:	220b      	movs	r2, #11
 800a646:	2120      	movs	r1, #32
 800a648:	4618      	mov	r0, r3
 800a64a:	f7fd fdd3 	bl	80081f4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a64e:	2300      	movs	r3, #0
 800a650:	61bb      	str	r3, [r7, #24]
 800a652:	e002      	b.n	800a65a <create_name+0x132>
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	3301      	adds	r3, #1
 800a658:	61bb      	str	r3, [r7, #24]
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	005b      	lsls	r3, r3, #1
 800a65e:	68fa      	ldr	r2, [r7, #12]
 800a660:	4413      	add	r3, r2
 800a662:	881b      	ldrh	r3, [r3, #0]
 800a664:	2b20      	cmp	r3, #32
 800a666:	d0f5      	beq.n	800a654 <create_name+0x12c>
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	005b      	lsls	r3, r3, #1
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	4413      	add	r3, r2
 800a670:	881b      	ldrh	r3, [r3, #0]
 800a672:	2b2e      	cmp	r3, #46	; 0x2e
 800a674:	d0ee      	beq.n	800a654 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d009      	beq.n	800a690 <create_name+0x168>
 800a67c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a680:	f043 0303 	orr.w	r3, r3, #3
 800a684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a688:	e002      	b.n	800a690 <create_name+0x168>
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	3b01      	subs	r3, #1
 800a68e:	617b      	str	r3, [r7, #20]
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d009      	beq.n	800a6aa <create_name+0x182>
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a69c:	3b01      	subs	r3, #1
 800a69e:	005b      	lsls	r3, r3, #1
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	881b      	ldrh	r3, [r3, #0]
 800a6a6:	2b2e      	cmp	r3, #46	; 0x2e
 800a6a8:	d1ef      	bne.n	800a68a <create_name+0x162>

	i = b = 0; ni = 8;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	623b      	str	r3, [r7, #32]
 800a6b4:	2308      	movs	r3, #8
 800a6b6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	1c5a      	adds	r2, r3, #1
 800a6bc:	61ba      	str	r2, [r7, #24]
 800a6be:	005b      	lsls	r3, r3, #1
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	881b      	ldrh	r3, [r3, #0]
 800a6c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a6c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f000 8090 	beq.w	800a7f0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a6d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6d2:	2b20      	cmp	r3, #32
 800a6d4:	d006      	beq.n	800a6e4 <create_name+0x1bc>
 800a6d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6d8:	2b2e      	cmp	r3, #46	; 0x2e
 800a6da:	d10a      	bne.n	800a6f2 <create_name+0x1ca>
 800a6dc:	69ba      	ldr	r2, [r7, #24]
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d006      	beq.n	800a6f2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6e8:	f043 0303 	orr.w	r3, r3, #3
 800a6ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a6f0:	e07d      	b.n	800a7ee <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a6f2:	6a3a      	ldr	r2, [r7, #32]
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d203      	bcs.n	800a702 <create_name+0x1da>
 800a6fa:	69ba      	ldr	r2, [r7, #24]
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d123      	bne.n	800a74a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	2b0b      	cmp	r3, #11
 800a706:	d106      	bne.n	800a716 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a70c:	f043 0303 	orr.w	r3, r3, #3
 800a710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a714:	e075      	b.n	800a802 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a716:	69ba      	ldr	r2, [r7, #24]
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d005      	beq.n	800a72a <create_name+0x202>
 800a71e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a722:	f043 0303 	orr.w	r3, r3, #3
 800a726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a72a:	69ba      	ldr	r2, [r7, #24]
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d866      	bhi.n	800a800 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	61bb      	str	r3, [r7, #24]
 800a736:	2308      	movs	r3, #8
 800a738:	623b      	str	r3, [r7, #32]
 800a73a:	230b      	movs	r3, #11
 800a73c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a73e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a748:	e051      	b.n	800a7ee <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a74a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a74c:	2b7f      	cmp	r3, #127	; 0x7f
 800a74e:	d914      	bls.n	800a77a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a752:	2100      	movs	r1, #0
 800a754:	4618      	mov	r0, r3
 800a756:	f001 fe5b 	bl	800c410 <ff_convert>
 800a75a:	4603      	mov	r3, r0
 800a75c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a75e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a760:	2b00      	cmp	r3, #0
 800a762:	d004      	beq.n	800a76e <create_name+0x246>
 800a764:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a766:	3b80      	subs	r3, #128	; 0x80
 800a768:	4a23      	ldr	r2, [pc, #140]	; (800a7f8 <create_name+0x2d0>)
 800a76a:	5cd3      	ldrb	r3, [r2, r3]
 800a76c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a76e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a772:	f043 0302 	orr.w	r3, r3, #2
 800a776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a77a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d007      	beq.n	800a790 <create_name+0x268>
 800a780:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a782:	4619      	mov	r1, r3
 800a784:	481d      	ldr	r0, [pc, #116]	; (800a7fc <create_name+0x2d4>)
 800a786:	f7fd fd75 	bl	8008274 <chk_chr>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d008      	beq.n	800a7a2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a790:	235f      	movs	r3, #95	; 0x5f
 800a792:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a798:	f043 0303 	orr.w	r3, r3, #3
 800a79c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a7a0:	e01b      	b.n	800a7da <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a7a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7a4:	2b40      	cmp	r3, #64	; 0x40
 800a7a6:	d909      	bls.n	800a7bc <create_name+0x294>
 800a7a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7aa:	2b5a      	cmp	r3, #90	; 0x5a
 800a7ac:	d806      	bhi.n	800a7bc <create_name+0x294>
					b |= 2;
 800a7ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a7b2:	f043 0302 	orr.w	r3, r3, #2
 800a7b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a7ba:	e00e      	b.n	800a7da <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a7bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7be:	2b60      	cmp	r3, #96	; 0x60
 800a7c0:	d90b      	bls.n	800a7da <create_name+0x2b2>
 800a7c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7c4:	2b7a      	cmp	r3, #122	; 0x7a
 800a7c6:	d808      	bhi.n	800a7da <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a7c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a7cc:	f043 0301 	orr.w	r3, r3, #1
 800a7d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a7d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7d6:	3b20      	subs	r3, #32
 800a7d8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a7da:	6a3b      	ldr	r3, [r7, #32]
 800a7dc:	1c5a      	adds	r2, r3, #1
 800a7de:	623a      	str	r2, [r7, #32]
 800a7e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a7e2:	b2d1      	uxtb	r1, r2
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	4413      	add	r3, r2
 800a7e8:	460a      	mov	r2, r1
 800a7ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800a7ee:	e763      	b.n	800a6b8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a7f0:	bf00      	nop
 800a7f2:	e006      	b.n	800a802 <create_name+0x2da>
 800a7f4:	08012fec 	.word	0x08012fec
 800a7f8:	08013274 	.word	0x08013274
 800a7fc:	08012ff8 	.word	0x08012ff8
			if (si > di) break;			/* No extension */
 800a800:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a808:	2be5      	cmp	r3, #229	; 0xe5
 800a80a:	d103      	bne.n	800a814 <create_name+0x2ec>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2205      	movs	r2, #5
 800a810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	2b08      	cmp	r3, #8
 800a818:	d104      	bne.n	800a824 <create_name+0x2fc>
 800a81a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a824:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a828:	f003 030c 	and.w	r3, r3, #12
 800a82c:	2b0c      	cmp	r3, #12
 800a82e:	d005      	beq.n	800a83c <create_name+0x314>
 800a830:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a834:	f003 0303 	and.w	r3, r3, #3
 800a838:	2b03      	cmp	r3, #3
 800a83a:	d105      	bne.n	800a848 <create_name+0x320>
 800a83c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a840:	f043 0302 	orr.w	r3, r3, #2
 800a844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a84c:	f003 0302 	and.w	r3, r3, #2
 800a850:	2b00      	cmp	r3, #0
 800a852:	d117      	bne.n	800a884 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a854:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a858:	f003 0303 	and.w	r3, r3, #3
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d105      	bne.n	800a86c <create_name+0x344>
 800a860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a864:	f043 0310 	orr.w	r3, r3, #16
 800a868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a86c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a870:	f003 030c 	and.w	r3, r3, #12
 800a874:	2b04      	cmp	r3, #4
 800a876:	d105      	bne.n	800a884 <create_name+0x35c>
 800a878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a87c:	f043 0308 	orr.w	r3, r3, #8
 800a880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a88a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800a88e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a890:	4618      	mov	r0, r3
 800a892:	3728      	adds	r7, #40	; 0x28
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b086      	sub	sp, #24
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a8ac:	e002      	b.n	800a8b4 <follow_path+0x1c>
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	603b      	str	r3, [r7, #0]
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	2b2f      	cmp	r3, #47	; 0x2f
 800a8ba:	d0f8      	beq.n	800a8ae <follow_path+0x16>
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	2b5c      	cmp	r3, #92	; 0x5c
 800a8c2:	d0f4      	beq.n	800a8ae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	2b1f      	cmp	r3, #31
 800a8d6:	d80a      	bhi.n	800a8ee <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2280      	movs	r2, #128	; 0x80
 800a8dc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f7fe fc8d 	bl	8009202 <dir_sdi>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	75fb      	strb	r3, [r7, #23]
 800a8ec:	e078      	b.n	800a9e0 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a8ee:	463b      	mov	r3, r7
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f7ff fe18 	bl	800a528 <create_name>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a8fc:	7dfb      	ldrb	r3, [r7, #23]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d169      	bne.n	800a9d6 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f7ff fb41 	bl	8009f8a <dir_find>
 800a908:	4603      	mov	r3, r0
 800a90a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800a912:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a914:	7dfb      	ldrb	r3, [r7, #23]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00a      	beq.n	800a930 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a91a:	7dfb      	ldrb	r3, [r7, #23]
 800a91c:	2b04      	cmp	r3, #4
 800a91e:	d15c      	bne.n	800a9da <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a920:	7afb      	ldrb	r3, [r7, #11]
 800a922:	f003 0304 	and.w	r3, r3, #4
 800a926:	2b00      	cmp	r3, #0
 800a928:	d157      	bne.n	800a9da <follow_path+0x142>
 800a92a:	2305      	movs	r3, #5
 800a92c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a92e:	e054      	b.n	800a9da <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a930:	7afb      	ldrb	r3, [r7, #11]
 800a932:	f003 0304 	and.w	r3, r3, #4
 800a936:	2b00      	cmp	r3, #0
 800a938:	d151      	bne.n	800a9de <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	799b      	ldrb	r3, [r3, #6]
 800a93e:	f003 0310 	and.w	r3, r3, #16
 800a942:	2b00      	cmp	r3, #0
 800a944:	d102      	bne.n	800a94c <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800a946:	2305      	movs	r3, #5
 800a948:	75fb      	strb	r3, [r7, #23]
 800a94a:	e049      	b.n	800a9e0 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	2b04      	cmp	r3, #4
 800a952:	d130      	bne.n	800a9b6 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	689a      	ldr	r2, [r3, #8]
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a962:	4613      	mov	r3, r2
 800a964:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a968:	693a      	ldr	r2, [r7, #16]
 800a96a:	79d2      	ldrb	r2, [r2, #7]
 800a96c:	431a      	orrs	r2, r3
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	3334      	adds	r3, #52	; 0x34
 800a980:	4618      	mov	r0, r3
 800a982:	f7fd fa50 	bl	8007e26 <ld_dword>
 800a986:	4602      	mov	r2, r0
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	3321      	adds	r3, #33	; 0x21
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	f003 0302 	and.w	r3, r3, #2
 800a998:	b2da      	uxtb	r2, r3
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	3338      	adds	r3, #56	; 0x38
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7fd fa60 	bl	8007e6a <ld_qword>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	6939      	ldr	r1, [r7, #16]
 800a9b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800a9b4:	e79b      	b.n	800a8ee <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9c4:	4413      	add	r3, r2
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	68f8      	ldr	r0, [r7, #12]
 800a9ca:	f7fe fdd1 	bl	8009570 <ld_clust>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a9d4:	e78b      	b.n	800a8ee <follow_path+0x56>
			if (res != FR_OK) break;
 800a9d6:	bf00      	nop
 800a9d8:	e002      	b.n	800a9e0 <follow_path+0x148>
				break;
 800a9da:	bf00      	nop
 800a9dc:	e000      	b.n	800a9e0 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a9de:	bf00      	nop
			}
		}
	}

	return res;
 800a9e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3718      	adds	r7, #24
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b087      	sub	sp, #28
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d031      	beq.n	800aa64 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	617b      	str	r3, [r7, #20]
 800aa06:	e002      	b.n	800aa0e <get_ldnumber+0x24>
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	617b      	str	r3, [r7, #20]
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	2b1f      	cmp	r3, #31
 800aa14:	d903      	bls.n	800aa1e <get_ldnumber+0x34>
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	2b3a      	cmp	r3, #58	; 0x3a
 800aa1c:	d1f4      	bne.n	800aa08 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	2b3a      	cmp	r3, #58	; 0x3a
 800aa24:	d11c      	bne.n	800aa60 <get_ldnumber+0x76>
			tp = *path;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	1c5a      	adds	r2, r3, #1
 800aa30:	60fa      	str	r2, [r7, #12]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	3b30      	subs	r3, #48	; 0x30
 800aa36:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	2b09      	cmp	r3, #9
 800aa3c:	d80e      	bhi.n	800aa5c <get_ldnumber+0x72>
 800aa3e:	68fa      	ldr	r2, [r7, #12]
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d10a      	bne.n	800aa5c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	2b03      	cmp	r3, #3
 800aa4a:	d807      	bhi.n	800aa5c <get_ldnumber+0x72>
					vol = (int)i;
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	3301      	adds	r3, #1
 800aa54:	617b      	str	r3, [r7, #20]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	697a      	ldr	r2, [r7, #20]
 800aa5a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	e002      	b.n	800aa66 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800aa60:	2300      	movs	r3, #0
 800aa62:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800aa64:	693b      	ldr	r3, [r7, #16]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	371c      	adds	r7, #28
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bc80      	pop	{r7}
 800aa6e:	4770      	bx	lr

0800aa70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	70da      	strb	r2, [r3, #3]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f04f 32ff 	mov.w	r2, #4294967295
 800aa86:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800aa88:	6839      	ldr	r1, [r7, #0]
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f7fd fdb6 	bl	80085fc <move_window>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d001      	beq.n	800aa9a <check_fs+0x2a>
 800aa96:	2304      	movs	r3, #4
 800aa98:	e044      	b.n	800ab24 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	3338      	adds	r3, #56	; 0x38
 800aa9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fd f9a8 	bl	8007df8 <ld_word>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	461a      	mov	r2, r3
 800aaac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d001      	beq.n	800aab8 <check_fs+0x48>
 800aab4:	2303      	movs	r3, #3
 800aab6:	e035      	b.n	800ab24 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aabe:	2be9      	cmp	r3, #233	; 0xe9
 800aac0:	d009      	beq.n	800aad6 <check_fs+0x66>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aac8:	2beb      	cmp	r3, #235	; 0xeb
 800aaca:	d11e      	bne.n	800ab0a <check_fs+0x9a>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aad2:	2b90      	cmp	r3, #144	; 0x90
 800aad4:	d119      	bne.n	800ab0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	3338      	adds	r3, #56	; 0x38
 800aada:	3336      	adds	r3, #54	; 0x36
 800aadc:	4618      	mov	r0, r3
 800aade:	f7fd f9a2 	bl	8007e26 <ld_dword>
 800aae2:	4603      	mov	r3, r0
 800aae4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aae8:	4a10      	ldr	r2, [pc, #64]	; (800ab2c <check_fs+0xbc>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d101      	bne.n	800aaf2 <check_fs+0x82>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	e018      	b.n	800ab24 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	3338      	adds	r3, #56	; 0x38
 800aaf6:	3352      	adds	r3, #82	; 0x52
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fd f994 	bl	8007e26 <ld_dword>
 800aafe:	4603      	mov	r3, r0
 800ab00:	4a0b      	ldr	r2, [pc, #44]	; (800ab30 <check_fs+0xc0>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d101      	bne.n	800ab0a <check_fs+0x9a>
 800ab06:	2300      	movs	r3, #0
 800ab08:	e00c      	b.n	800ab24 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	3338      	adds	r3, #56	; 0x38
 800ab0e:	220b      	movs	r2, #11
 800ab10:	4908      	ldr	r1, [pc, #32]	; (800ab34 <check_fs+0xc4>)
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fd fb88 	bl	8008228 <mem_cmp>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d101      	bne.n	800ab22 <check_fs+0xb2>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e000      	b.n	800ab24 <check_fs+0xb4>
#endif
	return 2;
 800ab22:	2302      	movs	r3, #2
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	00544146 	.word	0x00544146
 800ab30:	33544146 	.word	0x33544146
 800ab34:	08013000 	.word	0x08013000

0800ab38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ab38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab3c:	b09c      	sub	sp, #112	; 0x70
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	61f8      	str	r0, [r7, #28]
 800ab42:	61b9      	str	r1, [r7, #24]
 800ab44:	4613      	mov	r3, r2
 800ab46:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ab4e:	69f8      	ldr	r0, [r7, #28]
 800ab50:	f7ff ff4b 	bl	800a9ea <get_ldnumber>
 800ab54:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800ab56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	da01      	bge.n	800ab60 <find_volume+0x28>
 800ab5c:	230b      	movs	r3, #11
 800ab5e:	e337      	b.n	800b1d0 <find_volume+0x698>


	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ab60:	4a99      	ldr	r2, [pc, #612]	; (800adc8 <find_volume+0x290>)
 800ab62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab68:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ab6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d101      	bne.n	800ab74 <find_volume+0x3c>
 800ab70:	230c      	movs	r3, #12
 800ab72:	e32d      	b.n	800b1d0 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab78:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ab7a:	7dfb      	ldrb	r3, [r7, #23]
 800ab7c:	f023 0301 	bic.w	r3, r3, #1
 800ab80:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ab82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d01a      	beq.n	800abc0 <find_volume+0x88>

		stat = disk_status(fs->drv);
 800ab8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab8c:	785b      	ldrb	r3, [r3, #1]
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fd f894 	bl	8007cbc <disk_status>
 800ab94:	4603      	mov	r3, r0
 800ab96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ab9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ab9e:	f003 0301 	and.w	r3, r3, #1
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10c      	bne.n	800abc0 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800aba6:	7dfb      	ldrb	r3, [r7, #23]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d007      	beq.n	800abbc <find_volume+0x84>
 800abac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800abb0:	f003 0304 	and.w	r3, r3, #4
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d001      	beq.n	800abbc <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800abb8:	230a      	movs	r3, #10
 800abba:	e309      	b.n	800b1d0 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 800abbc:	2300      	movs	r3, #0
 800abbe:	e307      	b.n	800b1d0 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800abc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abc2:	2200      	movs	r2, #0
 800abc4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800abc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abc8:	b2da      	uxtb	r2, r3
 800abca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abcc:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800abce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abd0:	785b      	ldrb	r3, [r3, #1]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7fd f88c 	bl	8007cf0 <disk_initialize>
 800abd8:	4603      	mov	r3, r0
 800abda:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800abde:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800abe2:	f003 0301 	and.w	r3, r3, #1
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800abea:	2303      	movs	r3, #3
 800abec:	e2f0      	b.n	800b1d0 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800abee:	7dfb      	ldrb	r3, [r7, #23]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d007      	beq.n	800ac04 <find_volume+0xcc>
 800abf4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800abf8:	f003 0304 	and.w	r3, r3, #4
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d001      	beq.n	800ac04 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800ac00:	230a      	movs	r3, #10
 800ac02:	e2e5      	b.n	800b1d0 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ac04:	2300      	movs	r3, #0
 800ac06:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ac08:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ac0a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ac0c:	f7ff ff30 	bl	800aa70 <check_fs>
 800ac10:	4603      	mov	r3, r0
 800ac12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ac16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ac1a:	2b02      	cmp	r3, #2
 800ac1c:	d14d      	bne.n	800acba <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ac1e:	2300      	movs	r3, #0
 800ac20:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac22:	e020      	b.n	800ac66 <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ac24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac26:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ac2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac2c:	011b      	lsls	r3, r3, #4
 800ac2e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ac32:	4413      	add	r3, r2
 800ac34:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ac36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac38:	3304      	adds	r3, #4
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d006      	beq.n	800ac4e <find_volume+0x116>
 800ac40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac42:	3308      	adds	r3, #8
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7fd f8ee 	bl	8007e26 <ld_dword>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	e000      	b.n	800ac50 <find_volume+0x118>
 800ac4e:	2200      	movs	r2, #0
 800ac50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	3360      	adds	r3, #96	; 0x60
 800ac56:	f107 0110 	add.w	r1, r7, #16
 800ac5a:	440b      	add	r3, r1
 800ac5c:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ac60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac62:	3301      	adds	r3, #1
 800ac64:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac68:	2b03      	cmp	r3, #3
 800ac6a:	d9db      	bls.n	800ac24 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800ac70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d002      	beq.n	800ac7c <find_volume+0x144>
 800ac76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ac7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	3360      	adds	r3, #96	; 0x60
 800ac82:	f107 0210 	add.w	r2, r7, #16
 800ac86:	4413      	add	r3, r2
 800ac88:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800ac8c:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ac8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d005      	beq.n	800aca0 <find_volume+0x168>
 800ac94:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ac96:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ac98:	f7ff feea 	bl	800aa70 <check_fs>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	e000      	b.n	800aca2 <find_volume+0x16a>
 800aca0:	2303      	movs	r3, #3
 800aca2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800aca6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d905      	bls.n	800acba <find_volume+0x182>
 800acae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acb0:	3301      	adds	r3, #1
 800acb2:	65bb      	str	r3, [r7, #88]	; 0x58
 800acb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acb6:	2b03      	cmp	r3, #3
 800acb8:	d9e0      	bls.n	800ac7c <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800acba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800acbe:	2b04      	cmp	r3, #4
 800acc0:	d101      	bne.n	800acc6 <find_volume+0x18e>
 800acc2:	2301      	movs	r3, #1
 800acc4:	e284      	b.n	800b1d0 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800acc6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800acca:	2b01      	cmp	r3, #1
 800accc:	d901      	bls.n	800acd2 <find_volume+0x19a>
 800acce:	230d      	movs	r3, #13
 800acd0:	e27e      	b.n	800b1d0 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800acd2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	f040 80fa 	bne.w	800aed0 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800acdc:	230b      	movs	r3, #11
 800acde:	65bb      	str	r3, [r7, #88]	; 0x58
 800ace0:	e002      	b.n	800ace8 <find_volume+0x1b0>
 800ace2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ace4:	3301      	adds	r3, #1
 800ace6:	65bb      	str	r3, [r7, #88]	; 0x58
 800ace8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acea:	2b3f      	cmp	r3, #63	; 0x3f
 800acec:	d806      	bhi.n	800acfc <find_volume+0x1c4>
 800acee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800acf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acf2:	4413      	add	r3, r2
 800acf4:	3338      	adds	r3, #56	; 0x38
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d0f2      	beq.n	800ace2 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800acfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acfe:	2b3f      	cmp	r3, #63	; 0x3f
 800ad00:	d801      	bhi.n	800ad06 <find_volume+0x1ce>
 800ad02:	230d      	movs	r3, #13
 800ad04:	e264      	b.n	800b1d0 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800ad06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad08:	3338      	adds	r3, #56	; 0x38
 800ad0a:	3368      	adds	r3, #104	; 0x68
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7fd f873 	bl	8007df8 <ld_word>
 800ad12:	4603      	mov	r3, r0
 800ad14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad18:	d001      	beq.n	800ad1e <find_volume+0x1e6>
 800ad1a:	230d      	movs	r3, #13
 800ad1c:	e258      	b.n	800b1d0 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800ad1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad20:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800ad24:	2b09      	cmp	r3, #9
 800ad26:	d001      	beq.n	800ad2c <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800ad28:	230d      	movs	r3, #13
 800ad2a:	e251      	b.n	800b1d0 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800ad2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad2e:	3338      	adds	r3, #56	; 0x38
 800ad30:	3348      	adds	r3, #72	; 0x48
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7fd f899 	bl	8007e6a <ld_qword>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ad3e:	2000      	movs	r0, #0
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	68b9      	ldr	r1, [r7, #8]
 800ad46:	1851      	adds	r1, r2, r1
 800ad48:	6039      	str	r1, [r7, #0]
 800ad4a:	68f9      	ldr	r1, [r7, #12]
 800ad4c:	eb43 0101 	adc.w	r1, r3, r1
 800ad50:	6079      	str	r1, [r7, #4]
 800ad52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad56:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800ad5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d301      	bcc.n	800ad66 <find_volume+0x22e>
 800ad62:	230d      	movs	r3, #13
 800ad64:	e234      	b.n	800b1d0 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800ad66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad68:	3338      	adds	r3, #56	; 0x38
 800ad6a:	3354      	adds	r3, #84	; 0x54
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7fd f85a 	bl	8007e26 <ld_dword>
 800ad72:	4602      	mov	r2, r0
 800ad74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad76:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800ad78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad7a:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 800ad7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad80:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800ad82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad84:	789b      	ldrb	r3, [r3, #2]
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d001      	beq.n	800ad8e <find_volume+0x256>
 800ad8a:	230d      	movs	r3, #13
 800ad8c:	e220      	b.n	800b1d0 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800ad8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad90:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ad94:	461a      	mov	r2, r3
 800ad96:	2301      	movs	r3, #1
 800ad98:	4093      	lsls	r3, r2
 800ad9a:	b29a      	uxth	r2, r3
 800ad9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad9e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800ada0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ada2:	895b      	ldrh	r3, [r3, #10]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <find_volume+0x274>
 800ada8:	230d      	movs	r3, #13
 800adaa:	e211      	b.n	800b1d0 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800adac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adae:	3338      	adds	r3, #56	; 0x38
 800adb0:	335c      	adds	r3, #92	; 0x5c
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7fd f837 	bl	8007e26 <ld_dword>
 800adb8:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800adba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adbc:	4a03      	ldr	r2, [pc, #12]	; (800adcc <find_volume+0x294>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d906      	bls.n	800add0 <find_volume+0x298>
 800adc2:	230d      	movs	r3, #13
 800adc4:	e204      	b.n	800b1d0 <find_volume+0x698>
 800adc6:	bf00      	nop
 800adc8:	20001dac 	.word	0x20001dac
 800adcc:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800add0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800add2:	1c9a      	adds	r2, r3, #2
 800add4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800add6:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800add8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800addc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800adde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ade0:	3338      	adds	r3, #56	; 0x38
 800ade2:	3358      	adds	r3, #88	; 0x58
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7fd f81e 	bl	8007e26 <ld_dword>
 800adea:	4602      	mov	r2, r0
 800adec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800adee:	441a      	add	r2, r3
 800adf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adf2:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800adf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adf6:	3338      	adds	r3, #56	; 0x38
 800adf8:	3350      	adds	r3, #80	; 0x50
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fd f813 	bl	8007e26 <ld_dword>
 800ae00:	4602      	mov	r2, r0
 800ae02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae04:	441a      	add	r2, r3
 800ae06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae08:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800ae0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae0e:	2200      	movs	r2, #0
 800ae10:	469a      	mov	sl, r3
 800ae12:	4693      	mov	fp, r2
 800ae14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae16:	895b      	ldrh	r3, [r3, #10]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae1c:	fb02 f303 	mul.w	r3, r2, r3
 800ae20:	2200      	movs	r2, #0
 800ae22:	4698      	mov	r8, r3
 800ae24:	4691      	mov	r9, r2
 800ae26:	eb1a 0408 	adds.w	r4, sl, r8
 800ae2a:	eb4b 0509 	adc.w	r5, fp, r9
 800ae2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ae32:	42a2      	cmp	r2, r4
 800ae34:	41ab      	sbcs	r3, r5
 800ae36:	d201      	bcs.n	800ae3c <find_volume+0x304>
 800ae38:	230d      	movs	r3, #13
 800ae3a:	e1c9      	b.n	800b1d0 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800ae3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae3e:	3338      	adds	r3, #56	; 0x38
 800ae40:	3360      	adds	r3, #96	; 0x60
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7fc ffef 	bl	8007e26 <ld_dword>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae4c:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800ae4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae52:	4619      	mov	r1, r3
 800ae54:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ae56:	f7fd fc6d 	bl	8008734 <clust2sect>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ae60:	f7fd fbcc 	bl	80085fc <move_window>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d001      	beq.n	800ae6e <find_volume+0x336>
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e1b0      	b.n	800b1d0 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800ae6e:	2300      	movs	r3, #0
 800ae70:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae72:	e015      	b.n	800aea0 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800ae74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae78:	4413      	add	r3, r2
 800ae7a:	3338      	adds	r3, #56	; 0x38
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	2b81      	cmp	r3, #129	; 0x81
 800ae80:	d10b      	bne.n	800ae9a <find_volume+0x362>
 800ae82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae84:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ae88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae8a:	3314      	adds	r3, #20
 800ae8c:	4413      	add	r3, r2
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fc ffc9 	bl	8007e26 <ld_dword>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d007      	beq.n	800aeaa <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800ae9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae9c:	3320      	adds	r3, #32
 800ae9e:	65bb      	str	r3, [r7, #88]	; 0x58
 800aea0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aea6:	d3e5      	bcc.n	800ae74 <find_volume+0x33c>
 800aea8:	e000      	b.n	800aeac <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800aeaa:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800aeac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aeae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aeb2:	d101      	bne.n	800aeb8 <find_volume+0x380>
 800aeb4:	230d      	movs	r3, #13
 800aeb6:	e18b      	b.n	800b1d0 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800aeb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aeba:	f04f 32ff 	mov.w	r2, #4294967295
 800aebe:	619a      	str	r2, [r3, #24]
 800aec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aec2:	699a      	ldr	r2, [r3, #24]
 800aec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aec6:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800aec8:	2304      	movs	r3, #4
 800aeca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800aece:	e167      	b.n	800b1a0 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800aed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aed2:	3338      	adds	r3, #56	; 0x38
 800aed4:	330b      	adds	r3, #11
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7fc ff8e 	bl	8007df8 <ld_word>
 800aedc:	4603      	mov	r3, r0
 800aede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aee2:	d001      	beq.n	800aee8 <find_volume+0x3b0>
 800aee4:	230d      	movs	r3, #13
 800aee6:	e173      	b.n	800b1d0 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800aee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aeea:	3338      	adds	r3, #56	; 0x38
 800aeec:	3316      	adds	r3, #22
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7fc ff82 	bl	8007df8 <ld_word>
 800aef4:	4603      	mov	r3, r0
 800aef6:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800aef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d106      	bne.n	800af0c <find_volume+0x3d4>
 800aefe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af00:	3338      	adds	r3, #56	; 0x38
 800af02:	3324      	adds	r3, #36	; 0x24
 800af04:	4618      	mov	r0, r3
 800af06:	f7fc ff8e 	bl	8007e26 <ld_dword>
 800af0a:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800af0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af0e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800af10:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800af12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af14:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800af18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af1a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800af1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af1e:	789b      	ldrb	r3, [r3, #2]
 800af20:	2b01      	cmp	r3, #1
 800af22:	d005      	beq.n	800af30 <find_volume+0x3f8>
 800af24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af26:	789b      	ldrb	r3, [r3, #2]
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d001      	beq.n	800af30 <find_volume+0x3f8>
 800af2c:	230d      	movs	r3, #13
 800af2e:	e14f      	b.n	800b1d0 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800af30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af32:	789b      	ldrb	r3, [r3, #2]
 800af34:	461a      	mov	r2, r3
 800af36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af38:	fb02 f303 	mul.w	r3, r2, r3
 800af3c:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800af3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af44:	b29a      	uxth	r2, r3
 800af46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af48:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800af4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af4c:	895b      	ldrh	r3, [r3, #10]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d008      	beq.n	800af64 <find_volume+0x42c>
 800af52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af54:	895b      	ldrh	r3, [r3, #10]
 800af56:	461a      	mov	r2, r3
 800af58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af5a:	895b      	ldrh	r3, [r3, #10]
 800af5c:	3b01      	subs	r3, #1
 800af5e:	4013      	ands	r3, r2
 800af60:	2b00      	cmp	r3, #0
 800af62:	d001      	beq.n	800af68 <find_volume+0x430>
 800af64:	230d      	movs	r3, #13
 800af66:	e133      	b.n	800b1d0 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800af68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af6a:	3338      	adds	r3, #56	; 0x38
 800af6c:	3311      	adds	r3, #17
 800af6e:	4618      	mov	r0, r3
 800af70:	f7fc ff42 	bl	8007df8 <ld_word>
 800af74:	4603      	mov	r3, r0
 800af76:	461a      	mov	r2, r3
 800af78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af7a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800af7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af7e:	891b      	ldrh	r3, [r3, #8]
 800af80:	f003 030f 	and.w	r3, r3, #15
 800af84:	b29b      	uxth	r3, r3
 800af86:	2b00      	cmp	r3, #0
 800af88:	d001      	beq.n	800af8e <find_volume+0x456>
 800af8a:	230d      	movs	r3, #13
 800af8c:	e120      	b.n	800b1d0 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800af8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af90:	3338      	adds	r3, #56	; 0x38
 800af92:	3313      	adds	r3, #19
 800af94:	4618      	mov	r0, r3
 800af96:	f7fc ff2f 	bl	8007df8 <ld_word>
 800af9a:	4603      	mov	r3, r0
 800af9c:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800af9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d106      	bne.n	800afb2 <find_volume+0x47a>
 800afa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afa6:	3338      	adds	r3, #56	; 0x38
 800afa8:	3320      	adds	r3, #32
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fc ff3b 	bl	8007e26 <ld_dword>
 800afb0:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800afb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afb4:	3338      	adds	r3, #56	; 0x38
 800afb6:	330e      	adds	r3, #14
 800afb8:	4618      	mov	r0, r3
 800afba:	f7fc ff1d 	bl	8007df8 <ld_word>
 800afbe:	4603      	mov	r3, r0
 800afc0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800afc4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d101      	bne.n	800afd0 <find_volume+0x498>
 800afcc:	230d      	movs	r3, #13
 800afce:	e0ff      	b.n	800b1d0 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800afd0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800afd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afd6:	4413      	add	r3, r2
 800afd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afda:	8912      	ldrh	r2, [r2, #8]
 800afdc:	0912      	lsrs	r2, r2, #4
 800afde:	b292      	uxth	r2, r2
 800afe0:	4413      	add	r3, r2
 800afe2:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800afe4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800afe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afe8:	429a      	cmp	r2, r3
 800afea:	d201      	bcs.n	800aff0 <find_volume+0x4b8>
 800afec:	230d      	movs	r3, #13
 800afee:	e0ef      	b.n	800b1d0 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800aff0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aff8:	8952      	ldrh	r2, [r2, #10]
 800affa:	fbb3 f3f2 	udiv	r3, r3, r2
 800affe:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b002:	2b00      	cmp	r3, #0
 800b004:	d101      	bne.n	800b00a <find_volume+0x4d2>
 800b006:	230d      	movs	r3, #13
 800b008:	e0e2      	b.n	800b1d0 <find_volume+0x698>
		fmt = FS_FAT32;
 800b00a:	2303      	movs	r3, #3
 800b00c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b012:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b016:	4293      	cmp	r3, r2
 800b018:	d802      	bhi.n	800b020 <find_volume+0x4e8>
 800b01a:	2302      	movs	r3, #2
 800b01c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b022:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b026:	4293      	cmp	r3, r2
 800b028:	d802      	bhi.n	800b030 <find_volume+0x4f8>
 800b02a:	2301      	movs	r3, #1
 800b02c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b032:	1c9a      	adds	r2, r3, #2
 800b034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b036:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b03a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b03c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b03e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800b042:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b044:	441a      	add	r2, r3
 800b046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b048:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b04a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b04c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b04e:	441a      	add	r2, r3
 800b050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b052:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800b054:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b058:	2b03      	cmp	r3, #3
 800b05a:	d11e      	bne.n	800b09a <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b05c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b05e:	3338      	adds	r3, #56	; 0x38
 800b060:	332a      	adds	r3, #42	; 0x2a
 800b062:	4618      	mov	r0, r3
 800b064:	f7fc fec8 	bl	8007df8 <ld_word>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d001      	beq.n	800b072 <find_volume+0x53a>
 800b06e:	230d      	movs	r3, #13
 800b070:	e0ae      	b.n	800b1d0 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b074:	891b      	ldrh	r3, [r3, #8]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d001      	beq.n	800b07e <find_volume+0x546>
 800b07a:	230d      	movs	r3, #13
 800b07c:	e0a8      	b.n	800b1d0 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b07e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b080:	3338      	adds	r3, #56	; 0x38
 800b082:	332c      	adds	r3, #44	; 0x2c
 800b084:	4618      	mov	r0, r3
 800b086:	f7fc fece 	bl	8007e26 <ld_dword>
 800b08a:	4602      	mov	r2, r0
 800b08c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b08e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b092:	69db      	ldr	r3, [r3, #28]
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b098:	e01f      	b.n	800b0da <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b09a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b09c:	891b      	ldrh	r3, [r3, #8]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <find_volume+0x56e>
 800b0a2:	230d      	movs	r3, #13
 800b0a4:	e094      	b.n	800b1d0 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b0a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0ac:	441a      	add	r2, r3
 800b0ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0b0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b0b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d103      	bne.n	800b0c2 <find_volume+0x58a>
 800b0ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0bc:	69db      	ldr	r3, [r3, #28]
 800b0be:	005b      	lsls	r3, r3, #1
 800b0c0:	e00a      	b.n	800b0d8 <find_volume+0x5a0>
 800b0c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0c4:	69da      	ldr	r2, [r3, #28]
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	005b      	lsls	r3, r3, #1
 800b0ca:	4413      	add	r3, r2
 800b0cc:	085a      	lsrs	r2, r3, #1
 800b0ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0d0:	69db      	ldr	r3, [r3, #28]
 800b0d2:	f003 0301 	and.w	r3, r3, #1
 800b0d6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b0d8:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b0da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0dc:	6a1a      	ldr	r2, [r3, #32]
 800b0de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0e0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b0e4:	0a5b      	lsrs	r3, r3, #9
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d201      	bcs.n	800b0ee <find_volume+0x5b6>
 800b0ea:	230d      	movs	r3, #13
 800b0ec:	e070      	b.n	800b1d0 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b0ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0f4:	619a      	str	r2, [r3, #24]
 800b0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0f8:	699a      	ldr	r2, [r3, #24]
 800b0fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0fc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b0fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b100:	2280      	movs	r2, #128	; 0x80
 800b102:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b104:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b108:	2b03      	cmp	r3, #3
 800b10a:	d149      	bne.n	800b1a0 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b10c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b10e:	3338      	adds	r3, #56	; 0x38
 800b110:	3330      	adds	r3, #48	; 0x30
 800b112:	4618      	mov	r0, r3
 800b114:	f7fc fe70 	bl	8007df8 <ld_word>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d140      	bne.n	800b1a0 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b11e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b120:	3301      	adds	r3, #1
 800b122:	4619      	mov	r1, r3
 800b124:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b126:	f7fd fa69 	bl	80085fc <move_window>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d137      	bne.n	800b1a0 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800b130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b132:	2200      	movs	r2, #0
 800b134:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b138:	3338      	adds	r3, #56	; 0x38
 800b13a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fc fe5a 	bl	8007df8 <ld_word>
 800b144:	4603      	mov	r3, r0
 800b146:	461a      	mov	r2, r3
 800b148:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d127      	bne.n	800b1a0 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b152:	3338      	adds	r3, #56	; 0x38
 800b154:	4618      	mov	r0, r3
 800b156:	f7fc fe66 	bl	8007e26 <ld_dword>
 800b15a:	4603      	mov	r3, r0
 800b15c:	4a1f      	ldr	r2, [pc, #124]	; (800b1dc <find_volume+0x6a4>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d11e      	bne.n	800b1a0 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b164:	3338      	adds	r3, #56	; 0x38
 800b166:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7fc fe5b 	bl	8007e26 <ld_dword>
 800b170:	4603      	mov	r3, r0
 800b172:	4a1b      	ldr	r2, [pc, #108]	; (800b1e0 <find_volume+0x6a8>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d113      	bne.n	800b1a0 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b17a:	3338      	adds	r3, #56	; 0x38
 800b17c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b180:	4618      	mov	r0, r3
 800b182:	f7fc fe50 	bl	8007e26 <ld_dword>
 800b186:	4602      	mov	r2, r0
 800b188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b18a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b18c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b18e:	3338      	adds	r3, #56	; 0x38
 800b190:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b194:	4618      	mov	r0, r3
 800b196:	f7fc fe46 	bl	8007e26 <ld_dword>
 800b19a:	4602      	mov	r2, r0
 800b19c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b19e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b1a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1a2:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800b1a6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b1a8:	4b0e      	ldr	r3, [pc, #56]	; (800b1e4 <find_volume+0x6ac>)
 800b1aa:	881b      	ldrh	r3, [r3, #0]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	4b0c      	ldr	r3, [pc, #48]	; (800b1e4 <find_volume+0x6ac>)
 800b1b2:	801a      	strh	r2, [r3, #0]
 800b1b4:	4b0b      	ldr	r3, [pc, #44]	; (800b1e4 <find_volume+0x6ac>)
 800b1b6:	881a      	ldrh	r2, [r3, #0]
 800b1b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1ba:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b1bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1be:	4a0a      	ldr	r2, [pc, #40]	; (800b1e8 <find_volume+0x6b0>)
 800b1c0:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800b1c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1c4:	4a09      	ldr	r2, [pc, #36]	; (800b1ec <find_volume+0x6b4>)
 800b1c6:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b1c8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b1ca:	f7fd f9af 	bl	800852c <clear_lock>
#endif
	return FR_OK;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3770      	adds	r7, #112	; 0x70
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1da:	bf00      	nop
 800b1dc:	41615252 	.word	0x41615252
 800b1e0:	61417272 	.word	0x61417272
 800b1e4:	20001dbc 	.word	0x20001dbc
 800b1e8:	20002040 	.word	0x20002040
 800b1ec:	20001de0 	.word	0x20001de0

0800b1f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b1fa:	2309      	movs	r3, #9
 800b1fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d01c      	beq.n	800b23e <validate+0x4e>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d018      	beq.n	800b23e <validate+0x4e>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d013      	beq.n	800b23e <validate+0x4e>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	889a      	ldrh	r2, [r3, #4]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	88db      	ldrh	r3, [r3, #6]
 800b220:	429a      	cmp	r2, r3
 800b222:	d10c      	bne.n	800b23e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	785b      	ldrb	r3, [r3, #1]
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fc fd46 	bl	8007cbc <disk_status>
 800b230:	4603      	mov	r3, r0
 800b232:	f003 0301 	and.w	r3, r3, #1
 800b236:	2b00      	cmp	r3, #0
 800b238:	d101      	bne.n	800b23e <validate+0x4e>
			res = FR_OK;
 800b23a:	2300      	movs	r3, #0
 800b23c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b23e:	7bfb      	ldrb	r3, [r7, #15]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d102      	bne.n	800b24a <validate+0x5a>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	e000      	b.n	800b24c <validate+0x5c>
 800b24a:	2300      	movs	r3, #0
 800b24c:	683a      	ldr	r2, [r7, #0]
 800b24e:	6013      	str	r3, [r2, #0]
	return res;
 800b250:	7bfb      	ldrb	r3, [r7, #15]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
	...

0800b25c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b088      	sub	sp, #32
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	4613      	mov	r3, r2
 800b268:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b26e:	f107 0310 	add.w	r3, r7, #16
 800b272:	4618      	mov	r0, r3
 800b274:	f7ff fbb9 	bl	800a9ea <get_ldnumber>
 800b278:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	da01      	bge.n	800b284 <f_mount+0x28>
 800b280:	230b      	movs	r3, #11
 800b282:	e02b      	b.n	800b2dc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b284:	4a17      	ldr	r2, [pc, #92]	; (800b2e4 <f_mount+0x88>)
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b28c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d005      	beq.n	800b2a0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b294:	69b8      	ldr	r0, [r7, #24]
 800b296:	f7fd f949 	bl	800852c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	2200      	movs	r2, #0
 800b29e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d002      	beq.n	800b2ac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	490d      	ldr	r1, [pc, #52]	; (800b2e4 <f_mount+0x88>)
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d002      	beq.n	800b2c2 <f_mount+0x66>
 800b2bc:	79fb      	ldrb	r3, [r7, #7]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d001      	beq.n	800b2c6 <f_mount+0x6a>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	e00a      	b.n	800b2dc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b2c6:	f107 010c 	add.w	r1, r7, #12
 800b2ca:	f107 0308 	add.w	r3, r7, #8
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7ff fc31 	bl	800ab38 <find_volume>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b2da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3720      	adds	r7, #32
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	20001dac 	.word	0x20001dac

0800b2e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b2e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2ec:	b0a6      	sub	sp, #152	; 0x98
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	61f8      	str	r0, [r7, #28]
 800b2f2:	61b9      	str	r1, [r7, #24]
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d101      	bne.n	800b302 <f_open+0x1a>
 800b2fe:	2309      	movs	r3, #9
 800b300:	e2ae      	b.n	800b860 <f_open+0x578>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b302:	7dfb      	ldrb	r3, [r7, #23]
 800b304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b308:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800b30a:	7dfa      	ldrb	r2, [r7, #23]
 800b30c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800b310:	f107 0318 	add.w	r3, r7, #24
 800b314:	4618      	mov	r0, r3
 800b316:	f7ff fc0f 	bl	800ab38 <find_volume>
 800b31a:	4603      	mov	r3, r0
 800b31c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 800b320:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b324:	2b00      	cmp	r3, #0
 800b326:	f040 8292 	bne.w	800b84e <f_open+0x566>
		dj.obj.fs = fs;
 800b32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32c:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b32e:	69ba      	ldr	r2, [r7, #24]
 800b330:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b334:	4611      	mov	r1, r2
 800b336:	4618      	mov	r0, r3
 800b338:	f7ff faae 	bl	800a898 <follow_path>
 800b33c:	4603      	mov	r3, r0
 800b33e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b342:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b346:	2b00      	cmp	r3, #0
 800b348:	d11a      	bne.n	800b380 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b34a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800b34e:	b25b      	sxtb	r3, r3
 800b350:	2b00      	cmp	r3, #0
 800b352:	da03      	bge.n	800b35c <f_open+0x74>
				res = FR_INVALID_NAME;
 800b354:	2306      	movs	r3, #6
 800b356:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b35a:	e011      	b.n	800b380 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b35c:	7dfb      	ldrb	r3, [r7, #23]
 800b35e:	f023 0301 	bic.w	r3, r3, #1
 800b362:	2b00      	cmp	r3, #0
 800b364:	bf14      	ite	ne
 800b366:	2301      	movne	r3, #1
 800b368:	2300      	moveq	r3, #0
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	461a      	mov	r2, r3
 800b36e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b372:	4611      	mov	r1, r2
 800b374:	4618      	mov	r0, r3
 800b376:	f7fc ff97 	bl	80082a8 <chk_lock>
 800b37a:	4603      	mov	r3, r0
 800b37c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b380:	7dfb      	ldrb	r3, [r7, #23]
 800b382:	f003 031c 	and.w	r3, r3, #28
 800b386:	2b00      	cmp	r3, #0
 800b388:	f000 8115 	beq.w	800b5b6 <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 800b38c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b390:	2b00      	cmp	r3, #0
 800b392:	d017      	beq.n	800b3c4 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b394:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b398:	2b04      	cmp	r3, #4
 800b39a:	d10e      	bne.n	800b3ba <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b39c:	f7fc ffde 	bl	800835c <enq_lock>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d006      	beq.n	800b3b4 <f_open+0xcc>
 800b3a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fe ff16 	bl	800a1dc <dir_register>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	e000      	b.n	800b3b6 <f_open+0xce>
 800b3b4:	2312      	movs	r3, #18
 800b3b6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b3ba:	7dfb      	ldrb	r3, [r7, #23]
 800b3bc:	f043 0308 	orr.w	r3, r3, #8
 800b3c0:	75fb      	strb	r3, [r7, #23]
 800b3c2:	e011      	b.n	800b3e8 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b3c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b3c8:	f003 0311 	and.w	r3, r3, #17
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d003      	beq.n	800b3d8 <f_open+0xf0>
					res = FR_DENIED;
 800b3d0:	2307      	movs	r3, #7
 800b3d2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b3d6:	e007      	b.n	800b3e8 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b3d8:	7dfb      	ldrb	r3, [r7, #23]
 800b3da:	f003 0304 	and.w	r3, r3, #4
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d002      	beq.n	800b3e8 <f_open+0x100>
 800b3e2:	2308      	movs	r3, #8
 800b3e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b3e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f040 80fe 	bne.w	800b5ee <f_open+0x306>
 800b3f2:	7dfb      	ldrb	r3, [r7, #23]
 800b3f4:	f003 0308 	and.w	r3, r3, #8
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f000 80f8 	beq.w	800b5ee <f_open+0x306>
				dw = GET_FATTIME();
 800b3fe:	f7fc f9a5 	bl	800774c <get_fattime>
 800b402:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800b406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	2b04      	cmp	r3, #4
 800b40c:	f040 8084 	bne.w	800b518 <f_open+0x230>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800b410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800b416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b418:	691b      	ldr	r3, [r3, #16]
 800b41a:	3334      	adds	r3, #52	; 0x34
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7fc fd02 	bl	8007e26 <ld_dword>
 800b422:	4602      	mov	r2, r0
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	3338      	adds	r3, #56	; 0x38
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fc fd1b 	bl	8007e6a <ld_qword>
 800b434:	4602      	mov	r2, r0
 800b436:	460b      	mov	r3, r1
 800b438:	69f9      	ldr	r1, [r7, #28]
 800b43a:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b440:	691b      	ldr	r3, [r3, #16]
 800b442:	3321      	adds	r3, #33	; 0x21
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	f003 0302 	and.w	r3, r3, #2
 800b44a:	b2da      	uxtb	r2, r3
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	2200      	movs	r2, #0
 800b454:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800b456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	3308      	adds	r3, #8
 800b45c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800b460:	4618      	mov	r0, r3
 800b462:	f7fc fdf5 	bl	8008050 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800b466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b468:	691b      	ldr	r3, [r3, #16]
 800b46a:	3314      	adds	r3, #20
 800b46c:	2200      	movs	r2, #0
 800b46e:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800b470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b472:	691b      	ldr	r3, [r3, #16]
 800b474:	330c      	adds	r3, #12
 800b476:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fc fde8 	bl	8008050 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800b480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b482:	691b      	ldr	r3, [r3, #16]
 800b484:	3315      	adds	r3, #21
 800b486:	2200      	movs	r2, #0
 800b488:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800b48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	3304      	adds	r3, #4
 800b490:	2220      	movs	r2, #32
 800b492:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800b494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b496:	691b      	ldr	r3, [r3, #16]
 800b498:	3334      	adds	r3, #52	; 0x34
 800b49a:	2100      	movs	r1, #0
 800b49c:	4618      	mov	r0, r3
 800b49e:	f7fc fdd7 	bl	8008050 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800b4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b4aa:	f04f 0200 	mov.w	r2, #0
 800b4ae:	f04f 0300 	mov.w	r3, #0
 800b4b2:	4608      	mov	r0, r1
 800b4b4:	f7fc fdf7 	bl	80080a6 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800b4c0:	f04f 0200 	mov.w	r2, #0
 800b4c4:	f04f 0300 	mov.w	r3, #0
 800b4c8:	4608      	mov	r0, r1
 800b4ca:	f7fc fdec 	bl	80080a6 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d0:	691b      	ldr	r3, [r3, #16]
 800b4d2:	3321      	adds	r3, #33	; 0x21
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800b4d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7fe fbcb 	bl	8009c78 <store_xdir>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800b4e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d17e      	bne.n	800b5ee <f_open+0x306>
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d07a      	beq.n	800b5ee <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800b4f8:	69f8      	ldr	r0, [r7, #28]
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	689b      	ldr	r3, [r3, #8]
 800b4fe:	2200      	movs	r2, #0
 800b500:	4619      	mov	r1, r3
 800b502:	f7fd fc85 	bl	8008e10 <remove_chain>
 800b506:	4603      	mov	r3, r0
 800b508:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	689a      	ldr	r2, [r3, #8]
 800b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b512:	3a01      	subs	r2, #1
 800b514:	615a      	str	r2, [r3, #20]
 800b516:	e06a      	b.n	800b5ee <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b51a:	330e      	adds	r3, #14
 800b51c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800b520:	4618      	mov	r0, r3
 800b522:	f7fc fd95 	bl	8008050 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b526:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b528:	3316      	adds	r3, #22
 800b52a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800b52e:	4618      	mov	r0, r3
 800b530:	f7fc fd8e 	bl	8008050 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b536:	330b      	adds	r3, #11
 800b538:	2220      	movs	r2, #32
 800b53a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b540:	4611      	mov	r1, r2
 800b542:	4618      	mov	r0, r3
 800b544:	f7fe f814 	bl	8009570 <ld_clust>
 800b548:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b550:	2200      	movs	r2, #0
 800b552:	4618      	mov	r0, r3
 800b554:	f7fe f82b 	bl	80095ae <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b55a:	331c      	adds	r3, #28
 800b55c:	2100      	movs	r1, #0
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fc fd76 	bl	8008050 <st_dword>
					fs->wflag = 1;
 800b564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b566:	2201      	movs	r2, #1
 800b568:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b56a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d03d      	beq.n	800b5ee <f_open+0x306>
						dw = fs->winsect;
 800b572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b576:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						res = remove_chain(&dj.obj, cl, 0);
 800b57a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b57e:	2200      	movs	r2, #0
 800b580:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800b584:	4618      	mov	r0, r3
 800b586:	f7fd fc43 	bl	8008e10 <remove_chain>
 800b58a:	4603      	mov	r3, r0
 800b58c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if (res == FR_OK) {
 800b590:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b594:	2b00      	cmp	r3, #0
 800b596:	d12a      	bne.n	800b5ee <f_open+0x306>
							res = move_window(fs, dw);
 800b598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fd f82c 	bl	80085fc <move_window>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b5b0:	3a01      	subs	r2, #1
 800b5b2:	615a      	str	r2, [r3, #20]
 800b5b4:	e01b      	b.n	800b5ee <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b5b6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d117      	bne.n	800b5ee <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b5be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b5c2:	f003 0310 	and.w	r3, r3, #16
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d003      	beq.n	800b5d2 <f_open+0x2ea>
					res = FR_NO_FILE;
 800b5ca:	2304      	movs	r3, #4
 800b5cc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b5d0:	e00d      	b.n	800b5ee <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b5d2:	7dfb      	ldrb	r3, [r7, #23]
 800b5d4:	f003 0302 	and.w	r3, r3, #2
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d008      	beq.n	800b5ee <f_open+0x306>
 800b5dc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b5e0:	f003 0301 	and.w	r3, r3, #1
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d002      	beq.n	800b5ee <f_open+0x306>
						res = FR_DENIED;
 800b5e8:	2307      	movs	r3, #7
 800b5ea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 800b5ee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d128      	bne.n	800b648 <f_open+0x360>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b5f6:	7dfb      	ldrb	r3, [r7, #23]
 800b5f8:	f003 0308 	and.w	r3, r3, #8
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d003      	beq.n	800b608 <f_open+0x320>
				mode |= FA_MODIFIED;
 800b600:	7dfb      	ldrb	r3, [r7, #23]
 800b602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b606:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800b610:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b612:	69fb      	ldr	r3, [r7, #28]
 800b614:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b616:	7dfb      	ldrb	r3, [r7, #23]
 800b618:	f023 0301 	bic.w	r3, r3, #1
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	bf14      	ite	ne
 800b620:	2301      	movne	r3, #1
 800b622:	2300      	moveq	r3, #0
 800b624:	b2db      	uxtb	r3, r3
 800b626:	461a      	mov	r2, r3
 800b628:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b62c:	4611      	mov	r1, r2
 800b62e:	4618      	mov	r0, r3
 800b630:	f7fc feb4 	bl	800839c <inc_lock>
 800b634:	4602      	mov	r2, r0
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d102      	bne.n	800b648 <f_open+0x360>
 800b642:	2302      	movs	r3, #2
 800b644:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b648:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	f040 80fe 	bne.w	800b84e <f_open+0x566>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	2b04      	cmp	r3, #4
 800b658:	d12d      	bne.n	800b6b6 <f_open+0x3ce>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800b65a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800b660:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b664:	4613      	mov	r3, r2
 800b666:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b66a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b66e:	431a      	orrs	r2, r3
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800b674:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800b67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67c:	691b      	ldr	r3, [r3, #16]
 800b67e:	3334      	adds	r3, #52	; 0x34
 800b680:	4618      	mov	r0, r3
 800b682:	f7fc fbd0 	bl	8007e26 <ld_dword>
 800b686:	4602      	mov	r2, r0
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68e:	691b      	ldr	r3, [r3, #16]
 800b690:	3338      	adds	r3, #56	; 0x38
 800b692:	4618      	mov	r0, r3
 800b694:	f7fc fbe9 	bl	8007e6a <ld_qword>
 800b698:	4602      	mov	r2, r0
 800b69a:	460b      	mov	r3, r1
 800b69c:	69f9      	ldr	r1, [r7, #28]
 800b69e:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a4:	691b      	ldr	r3, [r3, #16]
 800b6a6:	3321      	adds	r3, #33	; 0x21
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	f003 0302 	and.w	r3, r3, #2
 800b6ae:	b2da      	uxtb	r2, r3
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	71da      	strb	r2, [r3, #7]
 800b6b4:	e016      	b.n	800b6e4 <f_open+0x3fc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b6ba:	4611      	mov	r1, r2
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fd ff57 	bl	8009570 <ld_clust>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b6c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6ca:	331c      	adds	r3, #28
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fc fbaa 	bl	8007e26 <ld_dword>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	60bb      	str	r3, [r7, #8]
 800b6d8:	60fa      	str	r2, [r7, #12]
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b6e0:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b6ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f2:	88da      	ldrh	r2, [r3, #6]
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b6f8:	69fb      	ldr	r3, [r7, #28]
 800b6fa:	7dfa      	ldrb	r2, [r7, #23]
 800b6fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	2200      	movs	r2, #0
 800b704:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	2200      	movs	r2, #0
 800b70c:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b70e:	69f9      	ldr	r1, [r7, #28]
 800b710:	f04f 0200 	mov.w	r2, #0
 800b714:	f04f 0300 	mov.w	r3, #0
 800b718:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b71c:	69fb      	ldr	r3, [r7, #28]
 800b71e:	3354      	adds	r3, #84	; 0x54
 800b720:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b724:	2100      	movs	r1, #0
 800b726:	4618      	mov	r0, r3
 800b728:	f7fc fd64 	bl	80081f4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b72c:	7dfb      	ldrb	r3, [r7, #23]
 800b72e:	f003 0320 	and.w	r3, r3, #32
 800b732:	2b00      	cmp	r3, #0
 800b734:	f000 808b 	beq.w	800b84e <f_open+0x566>
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b73e:	4313      	orrs	r3, r2
 800b740:	f000 8085 	beq.w	800b84e <f_open+0x566>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b74a:	69f9      	ldr	r1, [r7, #28]
 800b74c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	895b      	ldrh	r3, [r3, #10]
 800b754:	025b      	lsls	r3, r3, #9
 800b756:	67fb      	str	r3, [r7, #124]	; 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b760:	69fb      	ldr	r3, [r7, #28]
 800b762:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b766:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800b76a:	e026      	b.n	800b7ba <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b772:	4618      	mov	r0, r3
 800b774:	f7fc fffc 	bl	8008770 <get_fat>
 800b778:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					if (clst <= 1) res = FR_INT_ERR;
 800b77c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b780:	2b01      	cmp	r3, #1
 800b782:	d802      	bhi.n	800b78a <f_open+0x4a2>
 800b784:	2302      	movs	r3, #2
 800b786:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b78a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b792:	d102      	bne.n	800b79a <f_open+0x4b2>
 800b794:	2301      	movs	r3, #1
 800b796:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b79a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b79c:	2200      	movs	r2, #0
 800b79e:	469a      	mov	sl, r3
 800b7a0:	4693      	mov	fp, r2
 800b7a2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800b7a6:	ebb2 010a 	subs.w	r1, r2, sl
 800b7aa:	6039      	str	r1, [r7, #0]
 800b7ac:	eb63 030b 	sbc.w	r3, r3, fp
 800b7b0:	607b      	str	r3, [r7, #4]
 800b7b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7b6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800b7ba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d109      	bne.n	800b7d6 <f_open+0x4ee>
 800b7c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	4698      	mov	r8, r3
 800b7c8:	4691      	mov	r9, r2
 800b7ca:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800b7ce:	4590      	cmp	r8, r2
 800b7d0:	eb79 0303 	sbcs.w	r3, r9, r3
 800b7d4:	d3ca      	bcc.n	800b76c <f_open+0x484>
				}
				fp->clust = clst;
 800b7d6:	69fb      	ldr	r3, [r7, #28]
 800b7d8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b7dc:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b7de:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d133      	bne.n	800b84e <f_open+0x566>
 800b7e6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800b7ea:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800b7ee:	2500      	movs	r5, #0
 800b7f0:	ea54 0305 	orrs.w	r3, r4, r5
 800b7f4:	d02b      	beq.n	800b84e <f_open+0x566>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7fc ff99 	bl	8008734 <clust2sect>
 800b802:	67b8      	str	r0, [r7, #120]	; 0x78
 800b804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b806:	2b00      	cmp	r3, #0
 800b808:	d103      	bne.n	800b812 <f_open+0x52a>
						res = FR_INT_ERR;
 800b80a:	2302      	movs	r3, #2
 800b80c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b810:	e01d      	b.n	800b84e <f_open+0x566>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b812:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800b816:	f04f 0200 	mov.w	r2, #0
 800b81a:	f04f 0300 	mov.w	r3, #0
 800b81e:	0a42      	lsrs	r2, r0, #9
 800b820:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800b824:	0a4b      	lsrs	r3, r1, #9
 800b826:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b828:	441a      	add	r2, r3
 800b82a:	69fb      	ldr	r3, [r7, #28]
 800b82c:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b830:	7858      	ldrb	r0, [r3, #1]
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800b838:	69fb      	ldr	r3, [r7, #28]
 800b83a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b83c:	2301      	movs	r3, #1
 800b83e:	f7fc fa7d 	bl	8007d3c <disk_read>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d002      	beq.n	800b84e <f_open+0x566>
 800b848:	2301      	movs	r3, #1
 800b84a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b84e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b852:	2b00      	cmp	r3, #0
 800b854:	d002      	beq.n	800b85c <f_open+0x574>
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	2200      	movs	r2, #0
 800b85a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b85c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800b860:	4618      	mov	r0, r3
 800b862:	3798      	adds	r7, #152	; 0x98
 800b864:	46bd      	mov	sp, r7
 800b866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b86a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b86a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b86e:	b094      	sub	sp, #80	; 0x50
 800b870:	af00      	add	r7, sp, #0
 800b872:	61f8      	str	r0, [r7, #28]
 800b874:	61b9      	str	r1, [r7, #24]
 800b876:	617a      	str	r2, [r7, #20]
 800b878:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	63fb      	str	r3, [r7, #60]	; 0x3c


	*br = 0;	/* Clear read byte counter */
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	2200      	movs	r2, #0
 800b882:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b88a:	4611      	mov	r1, r2
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7ff fcaf 	bl	800b1f0 <validate>
 800b892:	4603      	mov	r3, r0
 800b894:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b898:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d108      	bne.n	800b8b2 <f_read+0x48>
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b8a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b8aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d002      	beq.n	800b8b8 <f_read+0x4e>
 800b8b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b8b6:	e14d      	b.n	800bb54 <f_read+0x2ea>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b8be:	f003 0301 	and.w	r3, r3, #1
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d101      	bne.n	800b8ca <f_read+0x60>
 800b8c6:	2307      	movs	r3, #7
 800b8c8:	e144      	b.n	800bb54 <f_read+0x2ea>
	remain = fp->obj.objsize - fp->fptr;
 800b8ca:	69fb      	ldr	r3, [r7, #28]
 800b8cc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b8d6:	ebb0 0c02 	subs.w	ip, r0, r2
 800b8da:	f8c7 c000 	str.w	ip, [r7]
 800b8de:	eb61 0303 	sbc.w	r3, r1, r3
 800b8e2:	607b      	str	r3, [r7, #4]
 800b8e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	469a      	mov	sl, r3
 800b8f2:	4693      	mov	fp, r2
 800b8f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b8f8:	4552      	cmp	r2, sl
 800b8fa:	eb73 030b 	sbcs.w	r3, r3, fp
 800b8fe:	f080 8124 	bcs.w	800bb4a <f_read+0x2e0>
 800b902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b904:	617b      	str	r3, [r7, #20]

	for ( ;  btr;								/* Repeat until all data read */
 800b906:	e120      	b.n	800bb4a <f_read+0x2e0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b908:	69fb      	ldr	r3, [r7, #28]
 800b90a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b90e:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800b912:	2500      	movs	r5, #0
 800b914:	ea54 0305 	orrs.w	r3, r4, r5
 800b918:	f040 80d9 	bne.w	800bace <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800b922:	f04f 0200 	mov.w	r2, #0
 800b926:	f04f 0300 	mov.w	r3, #0
 800b92a:	0a42      	lsrs	r2, r0, #9
 800b92c:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800b930:	0a4b      	lsrs	r3, r1, #9
 800b932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b934:	895b      	ldrh	r3, [r3, #10]
 800b936:	3b01      	subs	r3, #1
 800b938:	4013      	ands	r3, r2
 800b93a:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 800b93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d132      	bne.n	800b9a8 <f_read+0x13e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b948:	4313      	orrs	r3, r2
 800b94a:	d103      	bne.n	800b954 <f_read+0xea>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	64bb      	str	r3, [r7, #72]	; 0x48
 800b952:	e013      	b.n	800b97c <f_read+0x112>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d007      	beq.n	800b96c <f_read+0x102>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b962:	69f8      	ldr	r0, [r7, #28]
 800b964:	f7fd fc09 	bl	800917a <clmt_clust>
 800b968:	64b8      	str	r0, [r7, #72]	; 0x48
 800b96a:	e007      	b.n	800b97c <f_read+0x112>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b96c:	69fa      	ldr	r2, [r7, #28]
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b972:	4619      	mov	r1, r3
 800b974:	4610      	mov	r0, r2
 800b976:	f7fc fefb 	bl	8008770 <get_fat>
 800b97a:	64b8      	str	r0, [r7, #72]	; 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b97c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d805      	bhi.n	800b98e <f_read+0x124>
 800b982:	69fb      	ldr	r3, [r7, #28]
 800b984:	2202      	movs	r2, #2
 800b986:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800b98a:	2302      	movs	r3, #2
 800b98c:	e0e2      	b.n	800bb54 <f_read+0x2ea>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b98e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b990:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b994:	d105      	bne.n	800b9a2 <f_read+0x138>
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	2201      	movs	r2, #1
 800b99a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e0d8      	b.n	800bb54 <f_read+0x2ea>
				fp->clust = clst;				/* Update current cluster */
 800b9a2:	69fb      	ldr	r3, [r7, #28]
 800b9a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9a6:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	f7fc febf 	bl	8008734 <clust2sect>
 800b9b6:	62b8      	str	r0, [r7, #40]	; 0x28
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d105      	bne.n	800b9ca <f_read+0x160>
 800b9be:	69fb      	ldr	r3, [r7, #28]
 800b9c0:	2202      	movs	r2, #2
 800b9c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800b9c6:	2302      	movs	r3, #2
 800b9c8:	e0c4      	b.n	800bb54 <f_read+0x2ea>
			sect += csect;
 800b9ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ce:	4413      	add	r3, r2
 800b9d0:	62bb      	str	r3, [r7, #40]	; 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	0a5b      	lsrs	r3, r3, #9
 800b9d6:	643b      	str	r3, [r7, #64]	; 0x40
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b9d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d03b      	beq.n	800ba56 <f_read+0x1ec>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b9de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9e2:	4413      	add	r3, r2
 800b9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9e6:	8952      	ldrh	r2, [r2, #10]
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d905      	bls.n	800b9f8 <f_read+0x18e>
					cc = fs->csize - csect;
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ee:	895b      	ldrh	r3, [r3, #10]
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f4:	1ad3      	subs	r3, r2, r3
 800b9f6:	643b      	str	r3, [r7, #64]	; 0x40
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fa:	7858      	ldrb	r0, [r3, #1]
 800b9fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba02:	f7fc f99b 	bl	8007d3c <disk_read>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d005      	beq.n	800ba18 <f_read+0x1ae>
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ba14:	2301      	movs	r3, #1
 800ba16:	e09d      	b.n	800bb54 <f_read+0x2ea>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ba1e:	b25b      	sxtb	r3, r3
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	da14      	bge.n	800ba4e <f_read+0x1e4>
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2a:	1ad3      	subs	r3, r2, r3
 800ba2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d90d      	bls.n	800ba4e <f_read+0x1e4>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ba32:	69fb      	ldr	r3, [r7, #28]
 800ba34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba38:	1ad3      	subs	r3, r2, r3
 800ba3a:	025b      	lsls	r3, r3, #9
 800ba3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba3e:	18d0      	adds	r0, r2, r3
 800ba40:	69fb      	ldr	r3, [r7, #28]
 800ba42:	3354      	adds	r3, #84	; 0x54
 800ba44:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba48:	4619      	mov	r1, r3
 800ba4a:	f7fc fbb3 	bl	80081b4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ba4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba50:	025b      	lsls	r3, r3, #9
 800ba52:	647b      	str	r3, [r7, #68]	; 0x44
				continue;
 800ba54:	e059      	b.n	800bb0a <f_read+0x2a0>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d033      	beq.n	800bac8 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ba66:	b25b      	sxtb	r3, r3
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	da1b      	bge.n	800baa4 <f_read+0x23a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6e:	7858      	ldrb	r0, [r3, #1]
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	f7fc f97e 	bl	8007d7c <disk_write>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d005      	beq.n	800ba92 <f_read+0x228>
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e060      	b.n	800bb54 <f_read+0x2ea>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ba92:	69fb      	ldr	r3, [r7, #28]
 800ba94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ba98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba9c:	b2da      	uxtb	r2, r3
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800baa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa6:	7858      	ldrb	r0, [r3, #1]
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800baae:	2301      	movs	r3, #1
 800bab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bab2:	f7fc f943 	bl	8007d3c <disk_read>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d005      	beq.n	800bac8 <f_read+0x25e>
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bac4:	2301      	movs	r3, #1
 800bac6:	e045      	b.n	800bb54 <f_read+0x2ea>
			}
#endif
			fp->sect = sect;
 800bac8:	69fb      	ldr	r3, [r7, #28]
 800baca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bacc:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800bad4:	4613      	mov	r3, r2
 800bad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bada:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bade:	647b      	str	r3, [r7, #68]	; 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d901      	bls.n	800baec <f_read+0x282>
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	647b      	str	r3, [r7, #68]	; 0x44
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800baf2:	69fb      	ldr	r3, [r7, #28]
 800baf4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800baf8:	4613      	mov	r3, r2
 800bafa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bafe:	440b      	add	r3, r1
 800bb00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb02:	4619      	mov	r1, r3
 800bb04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bb06:	f7fc fb55 	bl	80081b4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bb0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb0e:	4413      	add	r3, r2
 800bb10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800bb18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb1a:	2000      	movs	r0, #0
 800bb1c:	4688      	mov	r8, r1
 800bb1e:	4681      	mov	r9, r0
 800bb20:	eb12 0108 	adds.w	r1, r2, r8
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	eb43 0309 	adc.w	r3, r3, r9
 800bb2a:	60fb      	str	r3, [r7, #12]
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bb32:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb3c:	441a      	add	r2, r3
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	601a      	str	r2, [r3, #0]
 800bb42:	697a      	ldr	r2, [r7, #20]
 800bb44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb46:	1ad3      	subs	r3, r2, r3
 800bb48:	617b      	str	r3, [r7, #20]
	for ( ;  btr;								/* Repeat until all data read */
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	f47f aedb 	bne.w	800b908 <f_read+0x9e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bb52:	2300      	movs	r3, #0
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3750      	adds	r7, #80	; 0x50
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bb5e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bb5e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb62:	b08c      	sub	sp, #48	; 0x30
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	2200      	movs	r2, #0
 800bb76:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f107 0210 	add.w	r2, r7, #16
 800bb7e:	4611      	mov	r1, r2
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7ff fb35 	bl	800b1f0 <validate>
 800bb86:	4603      	mov	r3, r0
 800bb88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bb8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d108      	bne.n	800bba6 <f_write+0x48>
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bb9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d002      	beq.n	800bbac <f_write+0x4e>
 800bba6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbaa:	e187      	b.n	800bebc <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bbb2:	f003 0302 	and.w	r3, r3, #2
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d101      	bne.n	800bbbe <f_write+0x60>
 800bbba:	2307      	movs	r3, #7
 800bbbc:	e17e      	b.n	800bebc <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	2b04      	cmp	r3, #4
 800bbc4:	f000 816a 	beq.w	800be9c <f_write+0x33e>
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	18d1      	adds	r1, r2, r3
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800bbd8:	4613      	mov	r3, r2
 800bbda:	4299      	cmp	r1, r3
 800bbdc:	f080 815e 	bcs.w	800be9c <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	43db      	mvns	r3, r3
 800bbea:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bbec:	e156      	b.n	800be9c <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800bbf4:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800bbf8:	2500      	movs	r5, #0
 800bbfa:	ea54 0305 	orrs.w	r3, r4, r5
 800bbfe:	f040 80fb 	bne.w	800bdf8 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800bc08:	f04f 0200 	mov.w	r2, #0
 800bc0c:	f04f 0300 	mov.w	r3, #0
 800bc10:	0a42      	lsrs	r2, r0, #9
 800bc12:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800bc16:	0a4b      	lsrs	r3, r1, #9
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	895b      	ldrh	r3, [r3, #10]
 800bc1c:	3b01      	subs	r3, #1
 800bc1e:	4013      	ands	r3, r2
 800bc20:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bc22:	69bb      	ldr	r3, [r7, #24]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d146      	bne.n	800bcb6 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	d10c      	bne.n	800bc4c <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d11a      	bne.n	800bc74 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2100      	movs	r1, #0
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fd f998 	bl	8008f78 <create_chain>
 800bc48:	62b8      	str	r0, [r7, #40]	; 0x28
 800bc4a:	e013      	b.n	800bc74 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d007      	beq.n	800bc64 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	f7fd fa8d 	bl	800917a <clmt_clust>
 800bc60:	62b8      	str	r0, [r7, #40]	; 0x28
 800bc62:	e007      	b.n	800bc74 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	4610      	mov	r0, r2
 800bc6e:	f7fd f983 	bl	8008f78 <create_chain>
 800bc72:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f000 8115 	beq.w	800bea6 <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d105      	bne.n	800bc8e <f_write+0x130>
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2202      	movs	r2, #2
 800bc86:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bc8a:	2302      	movs	r3, #2
 800bc8c:	e116      	b.n	800bebc <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc94:	d105      	bne.n	800bca2 <f_write+0x144>
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e10c      	b.n	800bebc <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bca6:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d102      	bne.n	800bcb6 <f_write+0x158>
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcb4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bcbc:	b25b      	sxtb	r3, r3
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	da1b      	bge.n	800bcfa <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	7858      	ldrb	r0, [r3, #1]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	f7fc f853 	bl	8007d7c <disk_write>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d005      	beq.n	800bce8 <f_write+0x18a>
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2201      	movs	r2, #1
 800bce0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bce4:	2301      	movs	r3, #1
 800bce6:	e0e9      	b.n	800bebc <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bcee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcf2:	b2da      	uxtb	r2, r3
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bcfa:	693a      	ldr	r2, [r7, #16]
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd00:	4619      	mov	r1, r3
 800bd02:	4610      	mov	r0, r2
 800bd04:	f7fc fd16 	bl	8008734 <clust2sect>
 800bd08:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d105      	bne.n	800bd1c <f_write+0x1be>
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2202      	movs	r2, #2
 800bd14:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bd18:	2302      	movs	r3, #2
 800bd1a:	e0cf      	b.n	800bebc <f_write+0x35e>
			sect += csect;
 800bd1c:	697a      	ldr	r2, [r7, #20]
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	4413      	add	r3, r2
 800bd22:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	0a5b      	lsrs	r3, r3, #9
 800bd28:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bd2a:	6a3b      	ldr	r3, [r7, #32]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d03f      	beq.n	800bdb0 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bd30:	69ba      	ldr	r2, [r7, #24]
 800bd32:	6a3b      	ldr	r3, [r7, #32]
 800bd34:	4413      	add	r3, r2
 800bd36:	693a      	ldr	r2, [r7, #16]
 800bd38:	8952      	ldrh	r2, [r2, #10]
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d905      	bls.n	800bd4a <f_write+0x1ec>
					cc = fs->csize - csect;
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	895b      	ldrh	r3, [r3, #10]
 800bd42:	461a      	mov	r2, r3
 800bd44:	69bb      	ldr	r3, [r7, #24]
 800bd46:	1ad3      	subs	r3, r2, r3
 800bd48:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	7858      	ldrb	r0, [r3, #1]
 800bd4e:	6a3b      	ldr	r3, [r7, #32]
 800bd50:	697a      	ldr	r2, [r7, #20]
 800bd52:	69f9      	ldr	r1, [r7, #28]
 800bd54:	f7fc f812 	bl	8007d7c <disk_write>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d005      	beq.n	800bd6a <f_write+0x20c>
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2201      	movs	r2, #1
 800bd62:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bd66:	2301      	movs	r3, #1
 800bd68:	e0a8      	b.n	800bebc <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	1ad3      	subs	r3, r2, r3
 800bd72:	6a3a      	ldr	r2, [r7, #32]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d917      	bls.n	800bda8 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	1ad3      	subs	r3, r2, r3
 800bd86:	025b      	lsls	r3, r3, #9
 800bd88:	69fa      	ldr	r2, [r7, #28]
 800bd8a:	4413      	add	r3, r2
 800bd8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd90:	4619      	mov	r1, r3
 800bd92:	f7fc fa0f 	bl	80081b4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bda0:	b2da      	uxtb	r2, r3
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bda8:	6a3b      	ldr	r3, [r7, #32]
 800bdaa:	025b      	lsls	r3, r3, #9
 800bdac:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bdae:	e04a      	b.n	800be46 <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdb4:	697a      	ldr	r2, [r7, #20]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d01b      	beq.n	800bdf2 <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bdc6:	4290      	cmp	r0, r2
 800bdc8:	eb71 0303 	sbcs.w	r3, r1, r3
 800bdcc:	d211      	bcs.n	800bdf2 <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	7858      	ldrb	r0, [r3, #1]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800bdd8:	2301      	movs	r3, #1
 800bdda:	697a      	ldr	r2, [r7, #20]
 800bddc:	f7fb ffae 	bl	8007d3c <disk_read>
 800bde0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d005      	beq.n	800bdf2 <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2201      	movs	r2, #1
 800bdea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e064      	b.n	800bebc <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	697a      	ldr	r2, [r7, #20]
 800bdf6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800bdfe:	4613      	mov	r3, r2
 800be00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be04:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800be08:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800be0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d901      	bls.n	800be16 <f_write+0x2b8>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800be22:	4613      	mov	r3, r2
 800be24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be28:	440b      	add	r3, r1
 800be2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be2c:	69f9      	ldr	r1, [r7, #28]
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fc f9c0 	bl	80081b4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be3e:	b2da      	uxtb	r2, r3
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800be46:	69fa      	ldr	r2, [r7, #28]
 800be48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4a:	4413      	add	r3, r2
 800be4c:	61fb      	str	r3, [r7, #28]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800be54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be56:	2000      	movs	r0, #0
 800be58:	4688      	mov	r8, r1
 800be5a:	4681      	mov	r9, r0
 800be5c:	eb12 0a08 	adds.w	sl, r2, r8
 800be60:	eb43 0b09 	adc.w	fp, r3, r9
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800be70:	68f9      	ldr	r1, [r7, #12]
 800be72:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800be76:	4282      	cmp	r2, r0
 800be78:	eb73 0c01 	sbcs.w	ip, r3, r1
 800be7c:	d201      	bcs.n	800be82 <f_write+0x324>
 800be7e:	4602      	mov	r2, r0
 800be80:	460b      	mov	r3, r1
 800be82:	68f9      	ldr	r1, [r7, #12]
 800be84:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8e:	441a      	add	r2, r3
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	601a      	str	r2, [r3, #0]
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	f47f aea5 	bne.w	800bbee <f_write+0x90>
 800bea4:	e000      	b.n	800bea8 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bea6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800beae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beb2:	b2da      	uxtb	r2, r3
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800beba:	2300      	movs	r3, #0
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3730      	adds	r7, #48	; 0x30
 800bec0:	46bd      	mov	sp, r7
 800bec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bec6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b09a      	sub	sp, #104	; 0x68
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800bed4:	4611      	mov	r1, r2
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7ff f98a 	bl	800b1f0 <validate>
 800bedc:	4603      	mov	r3, r0
 800bede:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800bee2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	f040 8105 	bne.w	800c0f6 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f000 80fd 	beq.w	800c0f6 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bf02:	b25b      	sxtb	r3, r3
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	da17      	bge.n	800bf38 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bf08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf0a:	7858      	ldrb	r0, [r3, #1]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf16:	2301      	movs	r3, #1
 800bf18:	f7fb ff30 	bl	8007d7c <disk_write>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d001      	beq.n	800bf26 <f_sync+0x60>
 800bf22:	2301      	movs	r3, #1
 800bf24:	e0e9      	b.n	800c0fa <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bf2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf30:	b2da      	uxtb	r2, r3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bf38:	f7fb fc08 	bl	800774c <get_fattime>
 800bf3c:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800bf3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	2b04      	cmp	r3, #4
 800bf44:	f040 808c 	bne.w	800c060 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7fc ff00 	bl	8008d50 <fill_first_frag>
 800bf50:	4603      	mov	r3, r0
 800bf52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800bf56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d10a      	bne.n	800bf74 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf64:	f04f 32ff 	mov.w	r2, #4294967295
 800bf68:	4619      	mov	r1, r3
 800bf6a:	f7fc ff20 	bl	8008dae <fill_last_frag>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800bf74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	f040 80bc 	bne.w	800c0f6 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	f107 0308 	add.w	r3, r7, #8
 800bf84:	4611      	mov	r1, r2
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7fd fe40 	bl	8009c0c <load_obj_dir>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800bf92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	f040 80ad 	bne.w	800c0f6 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800bf9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf9e:	691b      	ldr	r3, [r3, #16]
 800bfa0:	3304      	adds	r3, #4
 800bfa2:	781a      	ldrb	r2, [r3, #0]
 800bfa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfa6:	691b      	ldr	r3, [r3, #16]
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	f042 0220 	orr.w	r2, r2, #32
 800bfae:	b2d2      	uxtb	r2, r2
 800bfb0:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	79da      	ldrb	r2, [r3, #7]
 800bfb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfb8:	691b      	ldr	r3, [r3, #16]
 800bfba:	3321      	adds	r3, #33	; 0x21
 800bfbc:	f042 0201 	orr.w	r2, r2, #1
 800bfc0:	b2d2      	uxtb	r2, r2
 800bfc2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800bfc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfc6:	691b      	ldr	r3, [r3, #16]
 800bfc8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	4610      	mov	r0, r2
 800bfd4:	f7fc f83c 	bl	8008050 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800bfd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfda:	691b      	ldr	r3, [r3, #16]
 800bfdc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bfe6:	4608      	mov	r0, r1
 800bfe8:	f7fc f85d 	bl	80080a6 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800bfec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bffa:	4608      	mov	r0, r1
 800bffc:	f7fc f853 	bl	80080a6 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800c000:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	330c      	adds	r3, #12
 800c006:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c008:	4618      	mov	r0, r3
 800c00a:	f7fc f821 	bl	8008050 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800c00e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	3315      	adds	r3, #21
 800c014:	2200      	movs	r2, #0
 800c016:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800c018:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c01a:	691b      	ldr	r3, [r3, #16]
 800c01c:	3310      	adds	r3, #16
 800c01e:	2100      	movs	r1, #0
 800c020:	4618      	mov	r0, r3
 800c022:	f7fc f815 	bl	8008050 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800c026:	f107 0308 	add.w	r3, r7, #8
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7fd fe24 	bl	8009c78 <store_xdir>
 800c030:	4603      	mov	r3, r0
 800c032:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800c036:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d15b      	bne.n	800c0f6 <f_sync+0x230>
							res = sync_fs(fs);
 800c03e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c040:	4618      	mov	r0, r3
 800c042:	f7fc fb09 	bl	8008658 <sync_fs>
 800c046:	4603      	mov	r3, r0
 800c048:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c056:	b2da      	uxtb	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800c05e:	e04a      	b.n	800c0f6 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c060:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c066:	4619      	mov	r1, r3
 800c068:	4610      	mov	r0, r2
 800c06a:	f7fc fac7 	bl	80085fc <move_window>
 800c06e:	4603      	mov	r3, r0
 800c070:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800c074:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d13c      	bne.n	800c0f6 <f_sync+0x230>
					dir = fp->dir_ptr;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c080:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c084:	330b      	adds	r3, #11
 800c086:	781a      	ldrb	r2, [r3, #0]
 800c088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c08a:	330b      	adds	r3, #11
 800c08c:	f042 0220 	orr.w	r2, r2, #32
 800c090:	b2d2      	uxtb	r2, r2
 800c092:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6818      	ldr	r0, [r3, #0]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	461a      	mov	r2, r3
 800c09e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c0a0:	f7fd fa85 	bl	80095ae <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c0a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0a6:	f103 001c 	add.w	r0, r3, #28
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	f7fb ffcc 	bl	8008050 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c0b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0ba:	3316      	adds	r3, #22
 800c0bc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fb ffc6 	bl	8008050 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c0c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0c6:	3312      	adds	r3, #18
 800c0c8:	2100      	movs	r1, #0
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fb ffa6 	bl	800801c <st_word>
					fs->wflag = 1;
 800c0d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c0d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7fc fabd 	bl	8008658 <sync_fs>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c0ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0ee:	b2da      	uxtb	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c0f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3768      	adds	r7, #104	; 0x68
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c102:	b580      	push	{r7, lr}
 800c104:	b084      	sub	sp, #16
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f7ff fedb 	bl	800bec6 <f_sync>
 800c110:	4603      	mov	r3, r0
 800c112:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c114:	7bfb      	ldrb	r3, [r7, #15]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d118      	bne.n	800c14c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f107 0208 	add.w	r2, r7, #8
 800c120:	4611      	mov	r1, r2
 800c122:	4618      	mov	r0, r3
 800c124:	f7ff f864 	bl	800b1f0 <validate>
 800c128:	4603      	mov	r3, r0
 800c12a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c12c:	7bfb      	ldrb	r3, [r7, #15]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d10c      	bne.n	800c14c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c136:	4618      	mov	r0, r3
 800c138:	f7fc f9be 	bl	80084b8 <dec_lock>
 800c13c:	4603      	mov	r3, r0
 800c13e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c140:	7bfb      	ldrb	r3, [r7, #15]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d102      	bne.n	800c14c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b09a      	sub	sp, #104	; 0x68
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	60f8      	str	r0, [r7, #12]
 800c15e:	60b9      	str	r1, [r7, #8]
 800c160:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800c162:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c166:	f107 030c 	add.w	r3, r7, #12
 800c16a:	2200      	movs	r2, #0
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fe fce3 	bl	800ab38 <find_volume>
 800c172:	4603      	mov	r3, r0
 800c174:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800c178:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f040 80e6 	bne.w	800c34e <f_getfree+0x1f8>
		*fatfs = fs;				/* Return ptr to the fs object */
 800c182:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800c188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c18a:	699a      	ldr	r2, [r3, #24]
 800c18c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c18e:	69db      	ldr	r3, [r3, #28]
 800c190:	3b02      	subs	r3, #2
 800c192:	429a      	cmp	r2, r3
 800c194:	d804      	bhi.n	800c1a0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800c196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c198:	699a      	ldr	r2, [r3, #24]
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	601a      	str	r2, [r3, #0]
 800c19e:	e0d6      	b.n	800c34e <f_getfree+0x1f8>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800c1a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d128      	bne.n	800c1fe <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800c1ac:	2302      	movs	r3, #2
 800c1ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1b2:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800c1b4:	f107 0310 	add.w	r3, r7, #16
 800c1b8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fc fad8 	bl	8008770 <get_fat>
 800c1c0:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800c1c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c8:	d103      	bne.n	800c1d2 <f_getfree+0x7c>
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c1d0:	e0b0      	b.n	800c334 <f_getfree+0x1de>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800c1d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d103      	bne.n	800c1e0 <f_getfree+0x8a>
 800c1d8:	2302      	movs	r3, #2
 800c1da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c1de:	e0a9      	b.n	800c334 <f_getfree+0x1de>
					if (stat == 0) nfree++;
 800c1e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d102      	bne.n	800c1ec <f_getfree+0x96>
 800c1e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 800c1ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f4:	69db      	ldr	r3, [r3, #28]
 800c1f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d3db      	bcc.n	800c1b4 <f_getfree+0x5e>
 800c1fc:	e09a      	b.n	800c334 <f_getfree+0x1de>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800c1fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	2b04      	cmp	r3, #4
 800c204:	d146      	bne.n	800c294 <f_getfree+0x13e>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800c206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c208:	69db      	ldr	r3, [r3, #28]
 800c20a:	3b02      	subs	r3, #2
 800c20c:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 800c20e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c212:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 800c214:	2300      	movs	r3, #0
 800c216:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800c218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d10d      	bne.n	800c23a <f_getfree+0xe4>
 800c21e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c220:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c222:	1c5a      	adds	r2, r3, #1
 800c224:	65ba      	str	r2, [r7, #88]	; 0x58
 800c226:	4619      	mov	r1, r3
 800c228:	f7fc f9e8 	bl	80085fc <move_window>
 800c22c:	4603      	mov	r3, r0
 800c22e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c232:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c236:	2b00      	cmp	r3, #0
 800c238:	d179      	bne.n	800c32e <f_getfree+0x1d8>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800c23a:	2308      	movs	r3, #8
 800c23c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c23e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c242:	4413      	add	r3, r2
 800c244:	3338      	adds	r3, #56	; 0x38
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c24c:	e013      	b.n	800c276 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800c24e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c252:	f003 0301 	and.w	r3, r3, #1
 800c256:	2b00      	cmp	r3, #0
 800c258:	d102      	bne.n	800c260 <f_getfree+0x10a>
 800c25a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c25c:	3301      	adds	r3, #1
 800c25e:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 800c260:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c264:	085b      	lsrs	r3, r3, #1
 800c266:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800c26a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c26c:	3b01      	subs	r3, #1
 800c26e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c272:	3b01      	subs	r3, #1
 800c274:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d002      	beq.n	800c282 <f_getfree+0x12c>
 800c27c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d1e5      	bne.n	800c24e <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800c282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c284:	3301      	adds	r3, #1
 800c286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c28a:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 800c28c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d1c2      	bne.n	800c218 <f_getfree+0xc2>
 800c292:	e04f      	b.n	800c334 <f_getfree+0x1de>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800c294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c296:	69db      	ldr	r3, [r3, #28]
 800c298:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c29a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c29e:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	657b      	str	r3, [r7, #84]	; 0x54
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 800c2a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d113      	bne.n	800c2d6 <f_getfree+0x180>
							res = move_window(fs, sect++);
 800c2ae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c2b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2b2:	1c5a      	adds	r2, r3, #1
 800c2b4:	65ba      	str	r2, [r7, #88]	; 0x58
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	f7fc f9a0 	bl	80085fc <move_window>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 800c2c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d133      	bne.n	800c332 <f_getfree+0x1dc>
							p = fs->win;
 800c2ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2cc:	3338      	adds	r3, #56	; 0x38
 800c2ce:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 800c2d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2d4:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800c2d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	2b02      	cmp	r3, #2
 800c2dc:	d10f      	bne.n	800c2fe <f_getfree+0x1a8>
							if (ld_word(p) == 0) nfree++;
 800c2de:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c2e0:	f7fb fd8a 	bl	8007df8 <ld_word>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d102      	bne.n	800c2f0 <f_getfree+0x19a>
 800c2ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 800c2f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2f2:	3302      	adds	r3, #2
 800c2f4:	653b      	str	r3, [r7, #80]	; 0x50
 800c2f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2f8:	3b02      	subs	r3, #2
 800c2fa:	657b      	str	r3, [r7, #84]	; 0x54
 800c2fc:	e010      	b.n	800c320 <f_getfree+0x1ca>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800c2fe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c300:	f7fb fd91 	bl	8007e26 <ld_dword>
 800c304:	4603      	mov	r3, r0
 800c306:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d102      	bne.n	800c314 <f_getfree+0x1be>
 800c30e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c310:	3301      	adds	r3, #1
 800c312:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 800c314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c316:	3304      	adds	r3, #4
 800c318:	653b      	str	r3, [r7, #80]	; 0x50
 800c31a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c31c:	3b04      	subs	r3, #4
 800c31e:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 800c320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c322:	3b01      	subs	r3, #1
 800c324:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1bd      	bne.n	800c2a8 <f_getfree+0x152>
 800c32c:	e002      	b.n	800c334 <f_getfree+0x1de>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800c32e:	bf00      	nop
 800c330:	e000      	b.n	800c334 <f_getfree+0x1de>
							if (res != FR_OK) break;
 800c332:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c338:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800c33a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c33c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c33e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800c340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c342:	791a      	ldrb	r2, [r3, #4]
 800c344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c346:	f042 0201 	orr.w	r2, r2, #1
 800c34a:	b2d2      	uxtb	r2, r2
 800c34c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800c34e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c352:	4618      	mov	r0, r3
 800c354:	3768      	adds	r7, #104	; 0x68
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
	...

0800c35c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b087      	sub	sp, #28
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	4613      	mov	r3, r2
 800c368:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c36a:	2301      	movs	r3, #1
 800c36c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c36e:	2300      	movs	r3, #0
 800c370:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c372:	4b1e      	ldr	r3, [pc, #120]	; (800c3ec <FATFS_LinkDriverEx+0x90>)
 800c374:	7e1b      	ldrb	r3, [r3, #24]
 800c376:	b2db      	uxtb	r3, r3
 800c378:	2b03      	cmp	r3, #3
 800c37a:	d831      	bhi.n	800c3e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c37c:	4b1b      	ldr	r3, [pc, #108]	; (800c3ec <FATFS_LinkDriverEx+0x90>)
 800c37e:	7e1b      	ldrb	r3, [r3, #24]
 800c380:	b2db      	uxtb	r3, r3
 800c382:	461a      	mov	r2, r3
 800c384:	4b19      	ldr	r3, [pc, #100]	; (800c3ec <FATFS_LinkDriverEx+0x90>)
 800c386:	2100      	movs	r1, #0
 800c388:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c38a:	4b18      	ldr	r3, [pc, #96]	; (800c3ec <FATFS_LinkDriverEx+0x90>)
 800c38c:	7e1b      	ldrb	r3, [r3, #24]
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	4a16      	ldr	r2, [pc, #88]	; (800c3ec <FATFS_LinkDriverEx+0x90>)
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	4413      	add	r3, r2
 800c396:	68fa      	ldr	r2, [r7, #12]
 800c398:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c39a:	4b14      	ldr	r3, [pc, #80]	; (800c3ec <FATFS_LinkDriverEx+0x90>)
 800c39c:	7e1b      	ldrb	r3, [r3, #24]
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	4b12      	ldr	r3, [pc, #72]	; (800c3ec <FATFS_LinkDriverEx+0x90>)
 800c3a4:	4413      	add	r3, r2
 800c3a6:	79fa      	ldrb	r2, [r7, #7]
 800c3a8:	751a      	strb	r2, [r3, #20]
    DiskNum = disk.nbr++;
 800c3aa:	4b10      	ldr	r3, [pc, #64]	; (800c3ec <FATFS_LinkDriverEx+0x90>)
 800c3ac:	7e1b      	ldrb	r3, [r3, #24]
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	1c5a      	adds	r2, r3, #1
 800c3b2:	b2d1      	uxtb	r1, r2
 800c3b4:	4a0d      	ldr	r2, [pc, #52]	; (800c3ec <FATFS_LinkDriverEx+0x90>)
 800c3b6:	7611      	strb	r1, [r2, #24]
 800c3b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c3ba:	7dbb      	ldrb	r3, [r7, #22]
 800c3bc:	3330      	adds	r3, #48	; 0x30
 800c3be:	b2da      	uxtb	r2, r3
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	223a      	movs	r2, #58	; 0x3a
 800c3ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	3302      	adds	r3, #2
 800c3d0:	222f      	movs	r2, #47	; 0x2f
 800c3d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	3303      	adds	r3, #3
 800c3d8:	2200      	movs	r2, #0
 800c3da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c3e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	371c      	adds	r7, #28
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bc80      	pop	{r7}
 800c3ea:	4770      	bx	lr
 800c3ec:	20002240 	.word	0x20002240

0800c3f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b082      	sub	sp, #8
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	6839      	ldr	r1, [r7, #0]
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f7ff ffac 	bl	800c35c <FATFS_LinkDriverEx>
 800c404:	4603      	mov	r3, r0
}
 800c406:	4618      	mov	r0, r3
 800c408:	3708      	adds	r7, #8
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
	...

0800c410 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	4603      	mov	r3, r0
 800c418:	6039      	str	r1, [r7, #0]
 800c41a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c41c:	88fb      	ldrh	r3, [r7, #6]
 800c41e:	2b7f      	cmp	r3, #127	; 0x7f
 800c420:	d802      	bhi.n	800c428 <ff_convert+0x18>
		c = chr;
 800c422:	88fb      	ldrh	r3, [r7, #6]
 800c424:	81fb      	strh	r3, [r7, #14]
 800c426:	e025      	b.n	800c474 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d00b      	beq.n	800c446 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c42e:	88fb      	ldrh	r3, [r7, #6]
 800c430:	2bff      	cmp	r3, #255	; 0xff
 800c432:	d805      	bhi.n	800c440 <ff_convert+0x30>
 800c434:	88fb      	ldrh	r3, [r7, #6]
 800c436:	3b80      	subs	r3, #128	; 0x80
 800c438:	4a11      	ldr	r2, [pc, #68]	; (800c480 <ff_convert+0x70>)
 800c43a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c43e:	e000      	b.n	800c442 <ff_convert+0x32>
 800c440:	2300      	movs	r3, #0
 800c442:	81fb      	strh	r3, [r7, #14]
 800c444:	e016      	b.n	800c474 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c446:	2300      	movs	r3, #0
 800c448:	81fb      	strh	r3, [r7, #14]
 800c44a:	e009      	b.n	800c460 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c44c:	89fb      	ldrh	r3, [r7, #14]
 800c44e:	4a0c      	ldr	r2, [pc, #48]	; (800c480 <ff_convert+0x70>)
 800c450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c454:	88fa      	ldrh	r2, [r7, #6]
 800c456:	429a      	cmp	r2, r3
 800c458:	d006      	beq.n	800c468 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c45a:	89fb      	ldrh	r3, [r7, #14]
 800c45c:	3301      	adds	r3, #1
 800c45e:	81fb      	strh	r3, [r7, #14]
 800c460:	89fb      	ldrh	r3, [r7, #14]
 800c462:	2b7f      	cmp	r3, #127	; 0x7f
 800c464:	d9f2      	bls.n	800c44c <ff_convert+0x3c>
 800c466:	e000      	b.n	800c46a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c468:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c46a:	89fb      	ldrh	r3, [r7, #14]
 800c46c:	3380      	adds	r3, #128	; 0x80
 800c46e:	b29b      	uxth	r3, r3
 800c470:	b2db      	uxtb	r3, r3
 800c472:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c474:	89fb      	ldrh	r3, [r7, #14]
}
 800c476:	4618      	mov	r0, r3
 800c478:	3714      	adds	r7, #20
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bc80      	pop	{r7}
 800c47e:	4770      	bx	lr
 800c480:	08013304 	.word	0x08013304

0800c484 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c484:	b480      	push	{r7}
 800c486:	b087      	sub	sp, #28
 800c488:	af00      	add	r7, sp, #0
 800c48a:	4603      	mov	r3, r0
 800c48c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c48e:	88fb      	ldrh	r3, [r7, #6]
 800c490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c494:	d201      	bcs.n	800c49a <ff_wtoupper+0x16>
 800c496:	4b3d      	ldr	r3, [pc, #244]	; (800c58c <ff_wtoupper+0x108>)
 800c498:	e000      	b.n	800c49c <ff_wtoupper+0x18>
 800c49a:	4b3d      	ldr	r3, [pc, #244]	; (800c590 <ff_wtoupper+0x10c>)
 800c49c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	1c9a      	adds	r2, r3, #2
 800c4a2:	617a      	str	r2, [r7, #20]
 800c4a4:	881b      	ldrh	r3, [r3, #0]
 800c4a6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c4a8:	8a7b      	ldrh	r3, [r7, #18]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d068      	beq.n	800c580 <ff_wtoupper+0xfc>
 800c4ae:	88fa      	ldrh	r2, [r7, #6]
 800c4b0:	8a7b      	ldrh	r3, [r7, #18]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d364      	bcc.n	800c580 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	1c9a      	adds	r2, r3, #2
 800c4ba:	617a      	str	r2, [r7, #20]
 800c4bc:	881b      	ldrh	r3, [r3, #0]
 800c4be:	823b      	strh	r3, [r7, #16]
 800c4c0:	8a3b      	ldrh	r3, [r7, #16]
 800c4c2:	0a1b      	lsrs	r3, r3, #8
 800c4c4:	81fb      	strh	r3, [r7, #14]
 800c4c6:	8a3b      	ldrh	r3, [r7, #16]
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c4cc:	88fa      	ldrh	r2, [r7, #6]
 800c4ce:	8a79      	ldrh	r1, [r7, #18]
 800c4d0:	8a3b      	ldrh	r3, [r7, #16]
 800c4d2:	440b      	add	r3, r1
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	da49      	bge.n	800c56c <ff_wtoupper+0xe8>
			switch (cmd) {
 800c4d8:	89fb      	ldrh	r3, [r7, #14]
 800c4da:	2b08      	cmp	r3, #8
 800c4dc:	d84f      	bhi.n	800c57e <ff_wtoupper+0xfa>
 800c4de:	a201      	add	r2, pc, #4	; (adr r2, 800c4e4 <ff_wtoupper+0x60>)
 800c4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e4:	0800c509 	.word	0x0800c509
 800c4e8:	0800c51b 	.word	0x0800c51b
 800c4ec:	0800c531 	.word	0x0800c531
 800c4f0:	0800c539 	.word	0x0800c539
 800c4f4:	0800c541 	.word	0x0800c541
 800c4f8:	0800c549 	.word	0x0800c549
 800c4fc:	0800c551 	.word	0x0800c551
 800c500:	0800c559 	.word	0x0800c559
 800c504:	0800c561 	.word	0x0800c561
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c508:	88fa      	ldrh	r2, [r7, #6]
 800c50a:	8a7b      	ldrh	r3, [r7, #18]
 800c50c:	1ad3      	subs	r3, r2, r3
 800c50e:	005b      	lsls	r3, r3, #1
 800c510:	697a      	ldr	r2, [r7, #20]
 800c512:	4413      	add	r3, r2
 800c514:	881b      	ldrh	r3, [r3, #0]
 800c516:	80fb      	strh	r3, [r7, #6]
 800c518:	e027      	b.n	800c56a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c51a:	88fa      	ldrh	r2, [r7, #6]
 800c51c:	8a7b      	ldrh	r3, [r7, #18]
 800c51e:	1ad3      	subs	r3, r2, r3
 800c520:	b29b      	uxth	r3, r3
 800c522:	f003 0301 	and.w	r3, r3, #1
 800c526:	b29b      	uxth	r3, r3
 800c528:	88fa      	ldrh	r2, [r7, #6]
 800c52a:	1ad3      	subs	r3, r2, r3
 800c52c:	80fb      	strh	r3, [r7, #6]
 800c52e:	e01c      	b.n	800c56a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c530:	88fb      	ldrh	r3, [r7, #6]
 800c532:	3b10      	subs	r3, #16
 800c534:	80fb      	strh	r3, [r7, #6]
 800c536:	e018      	b.n	800c56a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c538:	88fb      	ldrh	r3, [r7, #6]
 800c53a:	3b20      	subs	r3, #32
 800c53c:	80fb      	strh	r3, [r7, #6]
 800c53e:	e014      	b.n	800c56a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c540:	88fb      	ldrh	r3, [r7, #6]
 800c542:	3b30      	subs	r3, #48	; 0x30
 800c544:	80fb      	strh	r3, [r7, #6]
 800c546:	e010      	b.n	800c56a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c548:	88fb      	ldrh	r3, [r7, #6]
 800c54a:	3b1a      	subs	r3, #26
 800c54c:	80fb      	strh	r3, [r7, #6]
 800c54e:	e00c      	b.n	800c56a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c550:	88fb      	ldrh	r3, [r7, #6]
 800c552:	3308      	adds	r3, #8
 800c554:	80fb      	strh	r3, [r7, #6]
 800c556:	e008      	b.n	800c56a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c558:	88fb      	ldrh	r3, [r7, #6]
 800c55a:	3b50      	subs	r3, #80	; 0x50
 800c55c:	80fb      	strh	r3, [r7, #6]
 800c55e:	e004      	b.n	800c56a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c560:	88fb      	ldrh	r3, [r7, #6]
 800c562:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800c566:	80fb      	strh	r3, [r7, #6]
 800c568:	bf00      	nop
			}
			break;
 800c56a:	e008      	b.n	800c57e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c56c:	89fb      	ldrh	r3, [r7, #14]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d195      	bne.n	800c49e <ff_wtoupper+0x1a>
 800c572:	8a3b      	ldrh	r3, [r7, #16]
 800c574:	005b      	lsls	r3, r3, #1
 800c576:	697a      	ldr	r2, [r7, #20]
 800c578:	4413      	add	r3, r2
 800c57a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c57c:	e78f      	b.n	800c49e <ff_wtoupper+0x1a>
			break;
 800c57e:	bf00      	nop
	}

	return chr;
 800c580:	88fb      	ldrh	r3, [r7, #6]
}
 800c582:	4618      	mov	r0, r3
 800c584:	371c      	adds	r7, #28
 800c586:	46bd      	mov	sp, r7
 800c588:	bc80      	pop	{r7}
 800c58a:	4770      	bx	lr
 800c58c:	08013404 	.word	0x08013404
 800c590:	080135f8 	.word	0x080135f8

0800c594 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c594:	b480      	push	{r7}
 800c596:	b085      	sub	sp, #20
 800c598:	af00      	add	r7, sp, #0
 800c59a:	4603      	mov	r3, r0
 800c59c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c5a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5a6:	2b84      	cmp	r3, #132	; 0x84
 800c5a8:	d005      	beq.n	800c5b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c5aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	3303      	adds	r3, #3
 800c5b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3714      	adds	r7, #20
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bc80      	pop	{r7}
 800c5c0:	4770      	bx	lr

0800c5c2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c5c2:	b480      	push	{r7}
 800c5c4:	b083      	sub	sp, #12
 800c5c6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5c8:	f3ef 8305 	mrs	r3, IPSR
 800c5cc:	607b      	str	r3, [r7, #4]
  return(result);
 800c5ce:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	bf14      	ite	ne
 800c5d4:	2301      	movne	r3, #1
 800c5d6:	2300      	moveq	r3, #0
 800c5d8:	b2db      	uxtb	r3, r3
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	370c      	adds	r7, #12
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bc80      	pop	{r7}
 800c5e2:	4770      	bx	lr

0800c5e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c5e8:	f001 faee 	bl	800dbc8 <vTaskStartScheduler>
  
  return osOK;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c5f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5f4:	b089      	sub	sp, #36	; 0x24
 800c5f6:	af04      	add	r7, sp, #16
 800c5f8:	6078      	str	r0, [r7, #4]
 800c5fa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	695b      	ldr	r3, [r3, #20]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d020      	beq.n	800c646 <osThreadCreate+0x54>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	699b      	ldr	r3, [r3, #24]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d01c      	beq.n	800c646 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	685c      	ldr	r4, [r3, #4]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681d      	ldr	r5, [r3, #0]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	691e      	ldr	r6, [r3, #16]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c61e:	4618      	mov	r0, r3
 800c620:	f7ff ffb8 	bl	800c594 <makeFreeRtosPriority>
 800c624:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c62e:	9202      	str	r2, [sp, #8]
 800c630:	9301      	str	r3, [sp, #4]
 800c632:	9100      	str	r1, [sp, #0]
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	4632      	mov	r2, r6
 800c638:	4629      	mov	r1, r5
 800c63a:	4620      	mov	r0, r4
 800c63c:	f001 f8ee 	bl	800d81c <xTaskCreateStatic>
 800c640:	4603      	mov	r3, r0
 800c642:	60fb      	str	r3, [r7, #12]
 800c644:	e01c      	b.n	800c680 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	685c      	ldr	r4, [r3, #4]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c652:	b29e      	uxth	r6, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7ff ff9a 	bl	800c594 <makeFreeRtosPriority>
 800c660:	4602      	mov	r2, r0
 800c662:	f107 030c 	add.w	r3, r7, #12
 800c666:	9301      	str	r3, [sp, #4]
 800c668:	9200      	str	r2, [sp, #0]
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	4632      	mov	r2, r6
 800c66e:	4629      	mov	r1, r5
 800c670:	4620      	mov	r0, r4
 800c672:	f001 f92f 	bl	800d8d4 <xTaskCreate>
 800c676:	4603      	mov	r3, r0
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d001      	beq.n	800c680 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c67c:	2300      	movs	r3, #0
 800c67e:	e000      	b.n	800c682 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c680:	68fb      	ldr	r3, [r7, #12]
}
 800c682:	4618      	mov	r0, r3
 800c684:	3714      	adds	r7, #20
 800c686:	46bd      	mov	sp, r7
 800c688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c68a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c68a:	b580      	push	{r7, lr}
 800c68c:	b084      	sub	sp, #16
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d001      	beq.n	800c6a0 <osDelay+0x16>
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	e000      	b.n	800c6a2 <osDelay+0x18>
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f001 fa5c 	bl	800db60 <vTaskDelay>
  
  return osOK;
 800c6a8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3710      	adds	r7, #16
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
	...

0800c6b4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b086      	sub	sp, #24
 800c6b8:	af02      	add	r7, sp, #8
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	607a      	str	r2, [r7, #4]
 800c6c0:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d013      	beq.n	800c6f2 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800c6ca:	7afb      	ldrb	r3, [r7, #11]
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d101      	bne.n	800c6d4 <osTimerCreate+0x20>
 800c6d0:	2101      	movs	r1, #1
 800c6d2:	e000      	b.n	800c6d6 <osTimerCreate+0x22>
 800c6d4:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800c6de:	9201      	str	r2, [sp, #4]
 800c6e0:	9300      	str	r3, [sp, #0]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	460a      	mov	r2, r1
 800c6e6:	2101      	movs	r1, #1
 800c6e8:	480b      	ldr	r0, [pc, #44]	; (800c718 <osTimerCreate+0x64>)
 800c6ea:	f002 f976 	bl	800e9da <xTimerCreateStatic>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	e00e      	b.n	800c710 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800c6f2:	7afb      	ldrb	r3, [r7, #11]
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d101      	bne.n	800c6fc <osTimerCreate+0x48>
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	e000      	b.n	800c6fe <osTimerCreate+0x4a>
 800c6fc:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800c702:	9300      	str	r3, [sp, #0]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2101      	movs	r1, #1
 800c708:	4803      	ldr	r0, [pc, #12]	; (800c718 <osTimerCreate+0x64>)
 800c70a:	f002 f945 	bl	800e998 <xTimerCreate>
 800c70e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800c710:	4618      	mov	r0, r3
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	08013040 	.word	0x08013040

0800c71c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b086      	sub	sp, #24
 800c720:	af02      	add	r7, sp, #8
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00f      	beq.n	800c74e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	2b01      	cmp	r3, #1
 800c732:	d10a      	bne.n	800c74a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	2203      	movs	r2, #3
 800c73a:	9200      	str	r2, [sp, #0]
 800c73c:	2200      	movs	r2, #0
 800c73e:	2100      	movs	r1, #0
 800c740:	2001      	movs	r0, #1
 800c742:	f000 fa11 	bl	800cb68 <xQueueGenericCreateStatic>
 800c746:	4603      	mov	r3, r0
 800c748:	e016      	b.n	800c778 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c74a:	2300      	movs	r3, #0
 800c74c:	e014      	b.n	800c778 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	2b01      	cmp	r3, #1
 800c752:	d110      	bne.n	800c776 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c754:	2203      	movs	r2, #3
 800c756:	2100      	movs	r1, #0
 800c758:	2001      	movs	r0, #1
 800c75a:	f000 fa7c 	bl	800cc56 <xQueueGenericCreate>
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d005      	beq.n	800c772 <osSemaphoreCreate+0x56>
 800c766:	2300      	movs	r3, #0
 800c768:	2200      	movs	r2, #0
 800c76a:	2100      	movs	r1, #0
 800c76c:	68f8      	ldr	r0, [r7, #12]
 800c76e:	f000 facf 	bl	800cd10 <xQueueGenericSend>
      return sema;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	e000      	b.n	800c778 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c776:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3710      	adds	r7, #16
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c780:	b590      	push	{r4, r7, lr}
 800c782:	b085      	sub	sp, #20
 800c784:	af02      	add	r7, sp, #8
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d011      	beq.n	800c7b6 <osMessageCreate+0x36>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	68db      	ldr	r3, [r3, #12]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d00d      	beq.n	800c7b6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6818      	ldr	r0, [r3, #0]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6859      	ldr	r1, [r3, #4]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	689a      	ldr	r2, [r3, #8]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	2400      	movs	r4, #0
 800c7ac:	9400      	str	r4, [sp, #0]
 800c7ae:	f000 f9db 	bl	800cb68 <xQueueGenericCreateStatic>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	e008      	b.n	800c7c8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6818      	ldr	r0, [r3, #0]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	4619      	mov	r1, r3
 800c7c2:	f000 fa48 	bl	800cc56 <xQueueGenericCreate>
 800c7c6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	370c      	adds	r7, #12
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd90      	pop	{r4, r7, pc}

0800c7d0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b086      	sub	sp, #24
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d101      	bne.n	800c7ee <osMessagePut+0x1e>
    ticks = 1;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c7ee:	f7ff fee8 	bl	800c5c2 <inHandlerMode>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d018      	beq.n	800c82a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c7f8:	f107 0210 	add.w	r2, r7, #16
 800c7fc:	f107 0108 	add.w	r1, r7, #8
 800c800:	2300      	movs	r3, #0
 800c802:	68f8      	ldr	r0, [r7, #12]
 800c804:	f000 fb82 	bl	800cf0c <xQueueGenericSendFromISR>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d001      	beq.n	800c812 <osMessagePut+0x42>
      return osErrorOS;
 800c80e:	23ff      	movs	r3, #255	; 0xff
 800c810:	e018      	b.n	800c844 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d014      	beq.n	800c842 <osMessagePut+0x72>
 800c818:	4b0c      	ldr	r3, [pc, #48]	; (800c84c <osMessagePut+0x7c>)
 800c81a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c81e:	601a      	str	r2, [r3, #0]
 800c820:	f3bf 8f4f 	dsb	sy
 800c824:	f3bf 8f6f 	isb	sy
 800c828:	e00b      	b.n	800c842 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c82a:	f107 0108 	add.w	r1, r7, #8
 800c82e:	2300      	movs	r3, #0
 800c830:	697a      	ldr	r2, [r7, #20]
 800c832:	68f8      	ldr	r0, [r7, #12]
 800c834:	f000 fa6c 	bl	800cd10 <xQueueGenericSend>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	d001      	beq.n	800c842 <osMessagePut+0x72>
      return osErrorOS;
 800c83e:	23ff      	movs	r3, #255	; 0xff
 800c840:	e000      	b.n	800c844 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c842:	2300      	movs	r3, #0
}
 800c844:	4618      	mov	r0, r3
 800c846:	3718      	adds	r7, #24
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	e000ed04 	.word	0xe000ed04

0800c850 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c850:	b590      	push	{r4, r7, lr}
 800c852:	b08b      	sub	sp, #44	; 0x2c
 800c854:	af00      	add	r7, sp, #0
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c860:	2300      	movs	r3, #0
 800c862:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d10a      	bne.n	800c880 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c86a:	2380      	movs	r3, #128	; 0x80
 800c86c:	617b      	str	r3, [r7, #20]
    return event;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	461c      	mov	r4, r3
 800c872:	f107 0314 	add.w	r3, r7, #20
 800c876:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c87a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c87e:	e054      	b.n	800c92a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c880:	2300      	movs	r3, #0
 800c882:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c884:	2300      	movs	r3, #0
 800c886:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c88e:	d103      	bne.n	800c898 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c890:	f04f 33ff 	mov.w	r3, #4294967295
 800c894:	627b      	str	r3, [r7, #36]	; 0x24
 800c896:	e009      	b.n	800c8ac <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d006      	beq.n	800c8ac <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d101      	bne.n	800c8ac <osMessageGet+0x5c>
      ticks = 1;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c8ac:	f7ff fe89 	bl	800c5c2 <inHandlerMode>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d01c      	beq.n	800c8f0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c8b6:	f107 0220 	add.w	r2, r7, #32
 800c8ba:	f107 0314 	add.w	r3, r7, #20
 800c8be:	3304      	adds	r3, #4
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	68b8      	ldr	r0, [r7, #8]
 800c8c4:	f000 fda6 	bl	800d414 <xQueueReceiveFromISR>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d102      	bne.n	800c8d4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c8ce:	2310      	movs	r3, #16
 800c8d0:	617b      	str	r3, [r7, #20]
 800c8d2:	e001      	b.n	800c8d8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c8d8:	6a3b      	ldr	r3, [r7, #32]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d01d      	beq.n	800c91a <osMessageGet+0xca>
 800c8de:	4b15      	ldr	r3, [pc, #84]	; (800c934 <osMessageGet+0xe4>)
 800c8e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8e4:	601a      	str	r2, [r3, #0]
 800c8e6:	f3bf 8f4f 	dsb	sy
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	e014      	b.n	800c91a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c8f0:	f107 0314 	add.w	r3, r7, #20
 800c8f4:	3304      	adds	r3, #4
 800c8f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	68b8      	ldr	r0, [r7, #8]
 800c8fc:	f000 fb9e 	bl	800d03c <xQueueReceive>
 800c900:	4603      	mov	r3, r0
 800c902:	2b01      	cmp	r3, #1
 800c904:	d102      	bne.n	800c90c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c906:	2310      	movs	r3, #16
 800c908:	617b      	str	r3, [r7, #20]
 800c90a:	e006      	b.n	800c91a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d101      	bne.n	800c916 <osMessageGet+0xc6>
 800c912:	2300      	movs	r3, #0
 800c914:	e000      	b.n	800c918 <osMessageGet+0xc8>
 800c916:	2340      	movs	r3, #64	; 0x40
 800c918:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	461c      	mov	r4, r3
 800c91e:	f107 0314 	add.w	r3, r7, #20
 800c922:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c926:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	372c      	adds	r7, #44	; 0x2c
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd90      	pop	{r4, r7, pc}
 800c932:	bf00      	nop
 800c934:	e000ed04 	.word	0xe000ed04

0800c938 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f103 0208 	add.w	r2, r3, #8
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f04f 32ff 	mov.w	r2, #4294967295
 800c950:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f103 0208 	add.w	r2, r3, #8
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f103 0208 	add.w	r2, r3, #8
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2200      	movs	r2, #0
 800c96a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c96c:	bf00      	nop
 800c96e:	370c      	adds	r7, #12
 800c970:	46bd      	mov	sp, r7
 800c972:	bc80      	pop	{r7}
 800c974:	4770      	bx	lr

0800c976 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c976:	b480      	push	{r7}
 800c978:	b083      	sub	sp, #12
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c984:	bf00      	nop
 800c986:	370c      	adds	r7, #12
 800c988:	46bd      	mov	sp, r7
 800c98a:	bc80      	pop	{r7}
 800c98c:	4770      	bx	lr

0800c98e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c98e:	b480      	push	{r7}
 800c990:	b085      	sub	sp, #20
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	689a      	ldr	r2, [r3, #8]
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	689b      	ldr	r3, [r3, #8]
 800c9b0:	683a      	ldr	r2, [r7, #0]
 800c9b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	683a      	ldr	r2, [r7, #0]
 800c9b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	1c5a      	adds	r2, r3, #1
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	601a      	str	r2, [r3, #0]
}
 800c9ca:	bf00      	nop
 800c9cc:	3714      	adds	r7, #20
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bc80      	pop	{r7}
 800c9d2:	4770      	bx	lr

0800c9d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b085      	sub	sp, #20
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ea:	d103      	bne.n	800c9f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	691b      	ldr	r3, [r3, #16]
 800c9f0:	60fb      	str	r3, [r7, #12]
 800c9f2:	e00c      	b.n	800ca0e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	3308      	adds	r3, #8
 800c9f8:	60fb      	str	r3, [r7, #12]
 800c9fa:	e002      	b.n	800ca02 <vListInsert+0x2e>
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	60fb      	str	r3, [r7, #12]
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	68ba      	ldr	r2, [r7, #8]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d2f6      	bcs.n	800c9fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	685a      	ldr	r2, [r3, #4]
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	683a      	ldr	r2, [r7, #0]
 800ca1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	68fa      	ldr	r2, [r7, #12]
 800ca22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	683a      	ldr	r2, [r7, #0]
 800ca28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	1c5a      	adds	r2, r3, #1
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	601a      	str	r2, [r3, #0]
}
 800ca3a:	bf00      	nop
 800ca3c:	3714      	adds	r7, #20
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bc80      	pop	{r7}
 800ca42:	4770      	bx	lr

0800ca44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ca44:	b480      	push	{r7}
 800ca46:	b085      	sub	sp, #20
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	691b      	ldr	r3, [r3, #16]
 800ca50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	6892      	ldr	r2, [r2, #8]
 800ca5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	6852      	ldr	r2, [r2, #4]
 800ca64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d103      	bne.n	800ca78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	689a      	ldr	r2, [r3, #8]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	1e5a      	subs	r2, r3, #1
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3714      	adds	r7, #20
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bc80      	pop	{r7}
 800ca94:	4770      	bx	lr
	...

0800ca98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d10a      	bne.n	800cac2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800caac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab0:	f383 8811 	msr	BASEPRI, r3
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cabe:	bf00      	nop
 800cac0:	e7fe      	b.n	800cac0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cac2:	f002 fb9b 	bl	800f1fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cace:	68f9      	ldr	r1, [r7, #12]
 800cad0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cad2:	fb01 f303 	mul.w	r3, r1, r3
 800cad6:	441a      	add	r2, r3
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2200      	movs	r2, #0
 800cae0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caf2:	3b01      	subs	r3, #1
 800caf4:	68f9      	ldr	r1, [r7, #12]
 800caf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800caf8:	fb01 f303 	mul.w	r3, r1, r3
 800cafc:	441a      	add	r2, r3
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	22ff      	movs	r2, #255	; 0xff
 800cb06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	22ff      	movs	r2, #255	; 0xff
 800cb0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d114      	bne.n	800cb42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	691b      	ldr	r3, [r3, #16]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d01a      	beq.n	800cb56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	3310      	adds	r3, #16
 800cb24:	4618      	mov	r0, r3
 800cb26:	f001 fae7 	bl	800e0f8 <xTaskRemoveFromEventList>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d012      	beq.n	800cb56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cb30:	4b0c      	ldr	r3, [pc, #48]	; (800cb64 <xQueueGenericReset+0xcc>)
 800cb32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb36:	601a      	str	r2, [r3, #0]
 800cb38:	f3bf 8f4f 	dsb	sy
 800cb3c:	f3bf 8f6f 	isb	sy
 800cb40:	e009      	b.n	800cb56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	3310      	adds	r3, #16
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7ff fef6 	bl	800c938 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	3324      	adds	r3, #36	; 0x24
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7ff fef1 	bl	800c938 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cb56:	f002 fb81 	bl	800f25c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cb5a:	2301      	movs	r3, #1
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3710      	adds	r7, #16
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	e000ed04 	.word	0xe000ed04

0800cb68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b08e      	sub	sp, #56	; 0x38
 800cb6c:	af02      	add	r7, sp, #8
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	607a      	str	r2, [r7, #4]
 800cb74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10a      	bne.n	800cb92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cb8e:	bf00      	nop
 800cb90:	e7fe      	b.n	800cb90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10a      	bne.n	800cbae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9c:	f383 8811 	msr	BASEPRI, r3
 800cba0:	f3bf 8f6f 	isb	sy
 800cba4:	f3bf 8f4f 	dsb	sy
 800cba8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cbaa:	bf00      	nop
 800cbac:	e7fe      	b.n	800cbac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d002      	beq.n	800cbba <xQueueGenericCreateStatic+0x52>
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d001      	beq.n	800cbbe <xQueueGenericCreateStatic+0x56>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e000      	b.n	800cbc0 <xQueueGenericCreateStatic+0x58>
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10a      	bne.n	800cbda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc8:	f383 8811 	msr	BASEPRI, r3
 800cbcc:	f3bf 8f6f 	isb	sy
 800cbd0:	f3bf 8f4f 	dsb	sy
 800cbd4:	623b      	str	r3, [r7, #32]
}
 800cbd6:	bf00      	nop
 800cbd8:	e7fe      	b.n	800cbd8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d102      	bne.n	800cbe6 <xQueueGenericCreateStatic+0x7e>
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d101      	bne.n	800cbea <xQueueGenericCreateStatic+0x82>
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e000      	b.n	800cbec <xQueueGenericCreateStatic+0x84>
 800cbea:	2300      	movs	r3, #0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d10a      	bne.n	800cc06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf4:	f383 8811 	msr	BASEPRI, r3
 800cbf8:	f3bf 8f6f 	isb	sy
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	61fb      	str	r3, [r7, #28]
}
 800cc02:	bf00      	nop
 800cc04:	e7fe      	b.n	800cc04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cc06:	2348      	movs	r3, #72	; 0x48
 800cc08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	2b48      	cmp	r3, #72	; 0x48
 800cc0e:	d00a      	beq.n	800cc26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	61bb      	str	r3, [r7, #24]
}
 800cc22:	bf00      	nop
 800cc24:	e7fe      	b.n	800cc24 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d00d      	beq.n	800cc4c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc32:	2201      	movs	r2, #1
 800cc34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc38:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	4613      	mov	r3, r2
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	68b9      	ldr	r1, [r7, #8]
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	f000 f843 	bl	800ccd2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800cc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3730      	adds	r7, #48	; 0x30
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b08a      	sub	sp, #40	; 0x28
 800cc5a:	af02      	add	r7, sp, #8
 800cc5c:	60f8      	str	r0, [r7, #12]
 800cc5e:	60b9      	str	r1, [r7, #8]
 800cc60:	4613      	mov	r3, r2
 800cc62:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10a      	bne.n	800cc80 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6e:	f383 8811 	msr	BASEPRI, r3
 800cc72:	f3bf 8f6f 	isb	sy
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	613b      	str	r3, [r7, #16]
}
 800cc7c:	bf00      	nop
 800cc7e:	e7fe      	b.n	800cc7e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d102      	bne.n	800cc8c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cc86:	2300      	movs	r3, #0
 800cc88:	61fb      	str	r3, [r7, #28]
 800cc8a:	e004      	b.n	800cc96 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	68ba      	ldr	r2, [r7, #8]
 800cc90:	fb02 f303 	mul.w	r3, r2, r3
 800cc94:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800cc96:	69fb      	ldr	r3, [r7, #28]
 800cc98:	3348      	adds	r3, #72	; 0x48
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f002 fbae 	bl	800f3fc <pvPortMalloc>
 800cca0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d00f      	beq.n	800ccc8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	3348      	adds	r3, #72	; 0x48
 800ccac:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ccb6:	79fa      	ldrb	r2, [r7, #7]
 800ccb8:	69bb      	ldr	r3, [r7, #24]
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	697a      	ldr	r2, [r7, #20]
 800ccc0:	68b9      	ldr	r1, [r7, #8]
 800ccc2:	68f8      	ldr	r0, [r7, #12]
 800ccc4:	f000 f805 	bl	800ccd2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ccc8:	69bb      	ldr	r3, [r7, #24]
	}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3720      	adds	r7, #32
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}

0800ccd2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ccd2:	b580      	push	{r7, lr}
 800ccd4:	b084      	sub	sp, #16
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	60f8      	str	r0, [r7, #12]
 800ccda:	60b9      	str	r1, [r7, #8]
 800ccdc:	607a      	str	r2, [r7, #4]
 800ccde:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d103      	bne.n	800ccee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cce6:	69bb      	ldr	r3, [r7, #24]
 800cce8:	69ba      	ldr	r2, [r7, #24]
 800ccea:	601a      	str	r2, [r3, #0]
 800ccec:	e002      	b.n	800ccf4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ccee:	69bb      	ldr	r3, [r7, #24]
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ccf4:	69bb      	ldr	r3, [r7, #24]
 800ccf6:	68fa      	ldr	r2, [r7, #12]
 800ccf8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ccfa:	69bb      	ldr	r3, [r7, #24]
 800ccfc:	68ba      	ldr	r2, [r7, #8]
 800ccfe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cd00:	2101      	movs	r1, #1
 800cd02:	69b8      	ldr	r0, [r7, #24]
 800cd04:	f7ff fec8 	bl	800ca98 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cd08:	bf00      	nop
 800cd0a:	3710      	adds	r7, #16
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b08e      	sub	sp, #56	; 0x38
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	60b9      	str	r1, [r7, #8]
 800cd1a:	607a      	str	r2, [r7, #4]
 800cd1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d10a      	bne.n	800cd42 <xQueueGenericSend+0x32>
	__asm volatile
 800cd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd30:	f383 8811 	msr	BASEPRI, r3
 800cd34:	f3bf 8f6f 	isb	sy
 800cd38:	f3bf 8f4f 	dsb	sy
 800cd3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd3e:	bf00      	nop
 800cd40:	e7fe      	b.n	800cd40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d103      	bne.n	800cd50 <xQueueGenericSend+0x40>
 800cd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d101      	bne.n	800cd54 <xQueueGenericSend+0x44>
 800cd50:	2301      	movs	r3, #1
 800cd52:	e000      	b.n	800cd56 <xQueueGenericSend+0x46>
 800cd54:	2300      	movs	r3, #0
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d10a      	bne.n	800cd70 <xQueueGenericSend+0x60>
	__asm volatile
 800cd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5e:	f383 8811 	msr	BASEPRI, r3
 800cd62:	f3bf 8f6f 	isb	sy
 800cd66:	f3bf 8f4f 	dsb	sy
 800cd6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd6c:	bf00      	nop
 800cd6e:	e7fe      	b.n	800cd6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d103      	bne.n	800cd7e <xQueueGenericSend+0x6e>
 800cd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d101      	bne.n	800cd82 <xQueueGenericSend+0x72>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e000      	b.n	800cd84 <xQueueGenericSend+0x74>
 800cd82:	2300      	movs	r3, #0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10a      	bne.n	800cd9e <xQueueGenericSend+0x8e>
	__asm volatile
 800cd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8c:	f383 8811 	msr	BASEPRI, r3
 800cd90:	f3bf 8f6f 	isb	sy
 800cd94:	f3bf 8f4f 	dsb	sy
 800cd98:	623b      	str	r3, [r7, #32]
}
 800cd9a:	bf00      	nop
 800cd9c:	e7fe      	b.n	800cd9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd9e:	f001 fb6f 	bl	800e480 <xTaskGetSchedulerState>
 800cda2:	4603      	mov	r3, r0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d102      	bne.n	800cdae <xQueueGenericSend+0x9e>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d101      	bne.n	800cdb2 <xQueueGenericSend+0xa2>
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e000      	b.n	800cdb4 <xQueueGenericSend+0xa4>
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d10a      	bne.n	800cdce <xQueueGenericSend+0xbe>
	__asm volatile
 800cdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdbc:	f383 8811 	msr	BASEPRI, r3
 800cdc0:	f3bf 8f6f 	isb	sy
 800cdc4:	f3bf 8f4f 	dsb	sy
 800cdc8:	61fb      	str	r3, [r7, #28]
}
 800cdca:	bf00      	nop
 800cdcc:	e7fe      	b.n	800cdcc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cdce:	f002 fa15 	bl	800f1fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d302      	bcc.n	800cde4 <xQueueGenericSend+0xd4>
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	2b02      	cmp	r3, #2
 800cde2:	d129      	bne.n	800ce38 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cde4:	683a      	ldr	r2, [r7, #0]
 800cde6:	68b9      	ldr	r1, [r7, #8]
 800cde8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdea:	f000 fbaa 	bl	800d542 <prvCopyDataToQueue>
 800cdee:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d010      	beq.n	800ce1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfa:	3324      	adds	r3, #36	; 0x24
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f001 f97b 	bl	800e0f8 <xTaskRemoveFromEventList>
 800ce02:	4603      	mov	r3, r0
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d013      	beq.n	800ce30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce08:	4b3f      	ldr	r3, [pc, #252]	; (800cf08 <xQueueGenericSend+0x1f8>)
 800ce0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce0e:	601a      	str	r2, [r3, #0]
 800ce10:	f3bf 8f4f 	dsb	sy
 800ce14:	f3bf 8f6f 	isb	sy
 800ce18:	e00a      	b.n	800ce30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d007      	beq.n	800ce30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ce20:	4b39      	ldr	r3, [pc, #228]	; (800cf08 <xQueueGenericSend+0x1f8>)
 800ce22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce26:	601a      	str	r2, [r3, #0]
 800ce28:	f3bf 8f4f 	dsb	sy
 800ce2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ce30:	f002 fa14 	bl	800f25c <vPortExitCritical>
				return pdPASS;
 800ce34:	2301      	movs	r3, #1
 800ce36:	e063      	b.n	800cf00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d103      	bne.n	800ce46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce3e:	f002 fa0d 	bl	800f25c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ce42:	2300      	movs	r3, #0
 800ce44:	e05c      	b.n	800cf00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d106      	bne.n	800ce5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce4c:	f107 0314 	add.w	r3, r7, #20
 800ce50:	4618      	mov	r0, r3
 800ce52:	f001 f9b3 	bl	800e1bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce56:	2301      	movs	r3, #1
 800ce58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce5a:	f002 f9ff 	bl	800f25c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce5e:	f000 ff23 	bl	800dca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce62:	f002 f9cb 	bl	800f1fc <vPortEnterCritical>
 800ce66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce6c:	b25b      	sxtb	r3, r3
 800ce6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce72:	d103      	bne.n	800ce7c <xQueueGenericSend+0x16c>
 800ce74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce76:	2200      	movs	r2, #0
 800ce78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce82:	b25b      	sxtb	r3, r3
 800ce84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce88:	d103      	bne.n	800ce92 <xQueueGenericSend+0x182>
 800ce8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce92:	f002 f9e3 	bl	800f25c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce96:	1d3a      	adds	r2, r7, #4
 800ce98:	f107 0314 	add.w	r3, r7, #20
 800ce9c:	4611      	mov	r1, r2
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f001 f9a2 	bl	800e1e8 <xTaskCheckForTimeOut>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d124      	bne.n	800cef4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ceaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ceac:	f000 fc41 	bl	800d732 <prvIsQueueFull>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d018      	beq.n	800cee8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ceb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb8:	3310      	adds	r3, #16
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	4611      	mov	r1, r2
 800cebe:	4618      	mov	r0, r3
 800cec0:	f001 f8ca 	bl	800e058 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cec6:	f000 fbcc 	bl	800d662 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ceca:	f000 fefb 	bl	800dcc4 <xTaskResumeAll>
 800cece:	4603      	mov	r3, r0
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	f47f af7c 	bne.w	800cdce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ced6:	4b0c      	ldr	r3, [pc, #48]	; (800cf08 <xQueueGenericSend+0x1f8>)
 800ced8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cedc:	601a      	str	r2, [r3, #0]
 800cede:	f3bf 8f4f 	dsb	sy
 800cee2:	f3bf 8f6f 	isb	sy
 800cee6:	e772      	b.n	800cdce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ceea:	f000 fbba 	bl	800d662 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ceee:	f000 fee9 	bl	800dcc4 <xTaskResumeAll>
 800cef2:	e76c      	b.n	800cdce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cef6:	f000 fbb4 	bl	800d662 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cefa:	f000 fee3 	bl	800dcc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cefe:	2300      	movs	r3, #0
		}
	}
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3738      	adds	r7, #56	; 0x38
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	e000ed04 	.word	0xe000ed04

0800cf0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b08e      	sub	sp, #56	; 0x38
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	607a      	str	r2, [r7, #4]
 800cf18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d10a      	bne.n	800cf3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf28:	f383 8811 	msr	BASEPRI, r3
 800cf2c:	f3bf 8f6f 	isb	sy
 800cf30:	f3bf 8f4f 	dsb	sy
 800cf34:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf36:	bf00      	nop
 800cf38:	e7fe      	b.n	800cf38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d103      	bne.n	800cf48 <xQueueGenericSendFromISR+0x3c>
 800cf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d101      	bne.n	800cf4c <xQueueGenericSendFromISR+0x40>
 800cf48:	2301      	movs	r3, #1
 800cf4a:	e000      	b.n	800cf4e <xQueueGenericSendFromISR+0x42>
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d10a      	bne.n	800cf68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cf52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf56:	f383 8811 	msr	BASEPRI, r3
 800cf5a:	f3bf 8f6f 	isb	sy
 800cf5e:	f3bf 8f4f 	dsb	sy
 800cf62:	623b      	str	r3, [r7, #32]
}
 800cf64:	bf00      	nop
 800cf66:	e7fe      	b.n	800cf66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	2b02      	cmp	r3, #2
 800cf6c:	d103      	bne.n	800cf76 <xQueueGenericSendFromISR+0x6a>
 800cf6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d101      	bne.n	800cf7a <xQueueGenericSendFromISR+0x6e>
 800cf76:	2301      	movs	r3, #1
 800cf78:	e000      	b.n	800cf7c <xQueueGenericSendFromISR+0x70>
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d10a      	bne.n	800cf96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf84:	f383 8811 	msr	BASEPRI, r3
 800cf88:	f3bf 8f6f 	isb	sy
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	61fb      	str	r3, [r7, #28]
}
 800cf92:	bf00      	nop
 800cf94:	e7fe      	b.n	800cf94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf96:	f002 f9f3 	bl	800f380 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cf9a:	f3ef 8211 	mrs	r2, BASEPRI
 800cf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa2:	f383 8811 	msr	BASEPRI, r3
 800cfa6:	f3bf 8f6f 	isb	sy
 800cfaa:	f3bf 8f4f 	dsb	sy
 800cfae:	61ba      	str	r2, [r7, #24]
 800cfb0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cfb2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cfb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d302      	bcc.n	800cfc8 <xQueueGenericSendFromISR+0xbc>
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	2b02      	cmp	r3, #2
 800cfc6:	d12c      	bne.n	800d022 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cfd2:	683a      	ldr	r2, [r7, #0]
 800cfd4:	68b9      	ldr	r1, [r7, #8]
 800cfd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfd8:	f000 fab3 	bl	800d542 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cfdc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800cfe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfe4:	d112      	bne.n	800d00c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d016      	beq.n	800d01c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff0:	3324      	adds	r3, #36	; 0x24
 800cff2:	4618      	mov	r0, r3
 800cff4:	f001 f880 	bl	800e0f8 <xTaskRemoveFromEventList>
 800cff8:	4603      	mov	r3, r0
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d00e      	beq.n	800d01c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d00b      	beq.n	800d01c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2201      	movs	r2, #1
 800d008:	601a      	str	r2, [r3, #0]
 800d00a:	e007      	b.n	800d01c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d00c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d010:	3301      	adds	r3, #1
 800d012:	b2db      	uxtb	r3, r3
 800d014:	b25a      	sxtb	r2, r3
 800d016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d01c:	2301      	movs	r3, #1
 800d01e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d020:	e001      	b.n	800d026 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d022:	2300      	movs	r3, #0
 800d024:	637b      	str	r3, [r7, #52]	; 0x34
 800d026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d028:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d030:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d034:	4618      	mov	r0, r3
 800d036:	3738      	adds	r7, #56	; 0x38
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b08c      	sub	sp, #48	; 0x30
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d048:	2300      	movs	r3, #0
 800d04a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d052:	2b00      	cmp	r3, #0
 800d054:	d10a      	bne.n	800d06c <xQueueReceive+0x30>
	__asm volatile
 800d056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d05a:	f383 8811 	msr	BASEPRI, r3
 800d05e:	f3bf 8f6f 	isb	sy
 800d062:	f3bf 8f4f 	dsb	sy
 800d066:	623b      	str	r3, [r7, #32]
}
 800d068:	bf00      	nop
 800d06a:	e7fe      	b.n	800d06a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d103      	bne.n	800d07a <xQueueReceive+0x3e>
 800d072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d076:	2b00      	cmp	r3, #0
 800d078:	d101      	bne.n	800d07e <xQueueReceive+0x42>
 800d07a:	2301      	movs	r3, #1
 800d07c:	e000      	b.n	800d080 <xQueueReceive+0x44>
 800d07e:	2300      	movs	r3, #0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10a      	bne.n	800d09a <xQueueReceive+0x5e>
	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	61fb      	str	r3, [r7, #28]
}
 800d096:	bf00      	nop
 800d098:	e7fe      	b.n	800d098 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d09a:	f001 f9f1 	bl	800e480 <xTaskGetSchedulerState>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d102      	bne.n	800d0aa <xQueueReceive+0x6e>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d101      	bne.n	800d0ae <xQueueReceive+0x72>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e000      	b.n	800d0b0 <xQueueReceive+0x74>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d10a      	bne.n	800d0ca <xQueueReceive+0x8e>
	__asm volatile
 800d0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b8:	f383 8811 	msr	BASEPRI, r3
 800d0bc:	f3bf 8f6f 	isb	sy
 800d0c0:	f3bf 8f4f 	dsb	sy
 800d0c4:	61bb      	str	r3, [r7, #24]
}
 800d0c6:	bf00      	nop
 800d0c8:	e7fe      	b.n	800d0c8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0ca:	f002 f897 	bl	800f1fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d01f      	beq.n	800d11a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d0da:	68b9      	ldr	r1, [r7, #8]
 800d0dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0de:	f000 fa9a 	bl	800d616 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e4:	1e5a      	subs	r2, r3, #1
 800d0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ec:	691b      	ldr	r3, [r3, #16]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00f      	beq.n	800d112 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f4:	3310      	adds	r3, #16
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f000 fffe 	bl	800e0f8 <xTaskRemoveFromEventList>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d007      	beq.n	800d112 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d102:	4b3d      	ldr	r3, [pc, #244]	; (800d1f8 <xQueueReceive+0x1bc>)
 800d104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d108:	601a      	str	r2, [r3, #0]
 800d10a:	f3bf 8f4f 	dsb	sy
 800d10e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d112:	f002 f8a3 	bl	800f25c <vPortExitCritical>
				return pdPASS;
 800d116:	2301      	movs	r3, #1
 800d118:	e069      	b.n	800d1ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d103      	bne.n	800d128 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d120:	f002 f89c 	bl	800f25c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d124:	2300      	movs	r3, #0
 800d126:	e062      	b.n	800d1ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d106      	bne.n	800d13c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d12e:	f107 0310 	add.w	r3, r7, #16
 800d132:	4618      	mov	r0, r3
 800d134:	f001 f842 	bl	800e1bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d138:	2301      	movs	r3, #1
 800d13a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d13c:	f002 f88e 	bl	800f25c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d140:	f000 fdb2 	bl	800dca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d144:	f002 f85a 	bl	800f1fc <vPortEnterCritical>
 800d148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d14e:	b25b      	sxtb	r3, r3
 800d150:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d154:	d103      	bne.n	800d15e <xQueueReceive+0x122>
 800d156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d158:	2200      	movs	r2, #0
 800d15a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d164:	b25b      	sxtb	r3, r3
 800d166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d16a:	d103      	bne.n	800d174 <xQueueReceive+0x138>
 800d16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16e:	2200      	movs	r2, #0
 800d170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d174:	f002 f872 	bl	800f25c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d178:	1d3a      	adds	r2, r7, #4
 800d17a:	f107 0310 	add.w	r3, r7, #16
 800d17e:	4611      	mov	r1, r2
 800d180:	4618      	mov	r0, r3
 800d182:	f001 f831 	bl	800e1e8 <xTaskCheckForTimeOut>
 800d186:	4603      	mov	r3, r0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d123      	bne.n	800d1d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d18c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d18e:	f000 faba 	bl	800d706 <prvIsQueueEmpty>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d017      	beq.n	800d1c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19a:	3324      	adds	r3, #36	; 0x24
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	4611      	mov	r1, r2
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f000 ff59 	bl	800e058 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1a8:	f000 fa5b 	bl	800d662 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1ac:	f000 fd8a 	bl	800dcc4 <xTaskResumeAll>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d189      	bne.n	800d0ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d1b6:	4b10      	ldr	r3, [pc, #64]	; (800d1f8 <xQueueReceive+0x1bc>)
 800d1b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1bc:	601a      	str	r2, [r3, #0]
 800d1be:	f3bf 8f4f 	dsb	sy
 800d1c2:	f3bf 8f6f 	isb	sy
 800d1c6:	e780      	b.n	800d0ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d1c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1ca:	f000 fa4a 	bl	800d662 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1ce:	f000 fd79 	bl	800dcc4 <xTaskResumeAll>
 800d1d2:	e77a      	b.n	800d0ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d1d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1d6:	f000 fa44 	bl	800d662 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1da:	f000 fd73 	bl	800dcc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1e0:	f000 fa91 	bl	800d706 <prvIsQueueEmpty>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	f43f af6f 	beq.w	800d0ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d1ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3730      	adds	r7, #48	; 0x30
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	e000ed04 	.word	0xe000ed04

0800d1fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b08e      	sub	sp, #56	; 0x38
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d206:	2300      	movs	r3, #0
 800d208:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d20e:	2300      	movs	r3, #0
 800d210:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d214:	2b00      	cmp	r3, #0
 800d216:	d10a      	bne.n	800d22e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21c:	f383 8811 	msr	BASEPRI, r3
 800d220:	f3bf 8f6f 	isb	sy
 800d224:	f3bf 8f4f 	dsb	sy
 800d228:	623b      	str	r3, [r7, #32]
}
 800d22a:	bf00      	nop
 800d22c:	e7fe      	b.n	800d22c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d232:	2b00      	cmp	r3, #0
 800d234:	d00a      	beq.n	800d24c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23a:	f383 8811 	msr	BASEPRI, r3
 800d23e:	f3bf 8f6f 	isb	sy
 800d242:	f3bf 8f4f 	dsb	sy
 800d246:	61fb      	str	r3, [r7, #28]
}
 800d248:	bf00      	nop
 800d24a:	e7fe      	b.n	800d24a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d24c:	f001 f918 	bl	800e480 <xTaskGetSchedulerState>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d102      	bne.n	800d25c <xQueueSemaphoreTake+0x60>
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d101      	bne.n	800d260 <xQueueSemaphoreTake+0x64>
 800d25c:	2301      	movs	r3, #1
 800d25e:	e000      	b.n	800d262 <xQueueSemaphoreTake+0x66>
 800d260:	2300      	movs	r3, #0
 800d262:	2b00      	cmp	r3, #0
 800d264:	d10a      	bne.n	800d27c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26a:	f383 8811 	msr	BASEPRI, r3
 800d26e:	f3bf 8f6f 	isb	sy
 800d272:	f3bf 8f4f 	dsb	sy
 800d276:	61bb      	str	r3, [r7, #24]
}
 800d278:	bf00      	nop
 800d27a:	e7fe      	b.n	800d27a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800d27c:	f001 ffbe 	bl	800f1fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d284:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d024      	beq.n	800d2d6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28e:	1e5a      	subs	r2, r3, #1
 800d290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d292:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d104      	bne.n	800d2a6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800d29c:	f001 faba 	bl	800e814 <pvTaskIncrementMutexHeldCount>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a8:	691b      	ldr	r3, [r3, #16]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d00f      	beq.n	800d2ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b0:	3310      	adds	r3, #16
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f000 ff20 	bl	800e0f8 <xTaskRemoveFromEventList>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d007      	beq.n	800d2ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d2be:	4b54      	ldr	r3, [pc, #336]	; (800d410 <xQueueSemaphoreTake+0x214>)
 800d2c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2c4:	601a      	str	r2, [r3, #0]
 800d2c6:	f3bf 8f4f 	dsb	sy
 800d2ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d2ce:	f001 ffc5 	bl	800f25c <vPortExitCritical>
				return pdPASS;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	e097      	b.n	800d406 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d111      	bne.n	800d300 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d00a      	beq.n	800d2f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e6:	f383 8811 	msr	BASEPRI, r3
 800d2ea:	f3bf 8f6f 	isb	sy
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	617b      	str	r3, [r7, #20]
}
 800d2f4:	bf00      	nop
 800d2f6:	e7fe      	b.n	800d2f6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d2f8:	f001 ffb0 	bl	800f25c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	e082      	b.n	800d406 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d302:	2b00      	cmp	r3, #0
 800d304:	d106      	bne.n	800d314 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d306:	f107 030c 	add.w	r3, r7, #12
 800d30a:	4618      	mov	r0, r3
 800d30c:	f000 ff56 	bl	800e1bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d310:	2301      	movs	r3, #1
 800d312:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d314:	f001 ffa2 	bl	800f25c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d318:	f000 fcc6 	bl	800dca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d31c:	f001 ff6e 	bl	800f1fc <vPortEnterCritical>
 800d320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d322:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d326:	b25b      	sxtb	r3, r3
 800d328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d32c:	d103      	bne.n	800d336 <xQueueSemaphoreTake+0x13a>
 800d32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d330:	2200      	movs	r2, #0
 800d332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d33c:	b25b      	sxtb	r3, r3
 800d33e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d342:	d103      	bne.n	800d34c <xQueueSemaphoreTake+0x150>
 800d344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d346:	2200      	movs	r2, #0
 800d348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d34c:	f001 ff86 	bl	800f25c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d350:	463a      	mov	r2, r7
 800d352:	f107 030c 	add.w	r3, r7, #12
 800d356:	4611      	mov	r1, r2
 800d358:	4618      	mov	r0, r3
 800d35a:	f000 ff45 	bl	800e1e8 <xTaskCheckForTimeOut>
 800d35e:	4603      	mov	r3, r0
 800d360:	2b00      	cmp	r3, #0
 800d362:	d132      	bne.n	800d3ca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d364:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d366:	f000 f9ce 	bl	800d706 <prvIsQueueEmpty>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d026      	beq.n	800d3be <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d109      	bne.n	800d38c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d378:	f001 ff40 	bl	800f1fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800d37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	4618      	mov	r0, r3
 800d382:	f001 f89b 	bl	800e4bc <xTaskPriorityInherit>
 800d386:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d388:	f001 ff68 	bl	800f25c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38e:	3324      	adds	r3, #36	; 0x24
 800d390:	683a      	ldr	r2, [r7, #0]
 800d392:	4611      	mov	r1, r2
 800d394:	4618      	mov	r0, r3
 800d396:	f000 fe5f 	bl	800e058 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d39a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d39c:	f000 f961 	bl	800d662 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d3a0:	f000 fc90 	bl	800dcc4 <xTaskResumeAll>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f47f af68 	bne.w	800d27c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d3ac:	4b18      	ldr	r3, [pc, #96]	; (800d410 <xQueueSemaphoreTake+0x214>)
 800d3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3b2:	601a      	str	r2, [r3, #0]
 800d3b4:	f3bf 8f4f 	dsb	sy
 800d3b8:	f3bf 8f6f 	isb	sy
 800d3bc:	e75e      	b.n	800d27c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d3be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3c0:	f000 f94f 	bl	800d662 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3c4:	f000 fc7e 	bl	800dcc4 <xTaskResumeAll>
 800d3c8:	e758      	b.n	800d27c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d3ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3cc:	f000 f949 	bl	800d662 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d3d0:	f000 fc78 	bl	800dcc4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3d6:	f000 f996 	bl	800d706 <prvIsQueueEmpty>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	f43f af4d 	beq.w	800d27c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d00d      	beq.n	800d404 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d3e8:	f001 ff08 	bl	800f1fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d3ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3ee:	f000 f891 	bl	800d514 <prvGetDisinheritPriorityAfterTimeout>
 800d3f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800d3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f001 f96a 	bl	800e6d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d400:	f001 ff2c 	bl	800f25c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d404:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800d406:	4618      	mov	r0, r3
 800d408:	3738      	adds	r7, #56	; 0x38
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	e000ed04 	.word	0xe000ed04

0800d414 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b08e      	sub	sp, #56	; 0x38
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	60b9      	str	r1, [r7, #8]
 800d41e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d426:	2b00      	cmp	r3, #0
 800d428:	d10a      	bne.n	800d440 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d42e:	f383 8811 	msr	BASEPRI, r3
 800d432:	f3bf 8f6f 	isb	sy
 800d436:	f3bf 8f4f 	dsb	sy
 800d43a:	623b      	str	r3, [r7, #32]
}
 800d43c:	bf00      	nop
 800d43e:	e7fe      	b.n	800d43e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d103      	bne.n	800d44e <xQueueReceiveFromISR+0x3a>
 800d446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d101      	bne.n	800d452 <xQueueReceiveFromISR+0x3e>
 800d44e:	2301      	movs	r3, #1
 800d450:	e000      	b.n	800d454 <xQueueReceiveFromISR+0x40>
 800d452:	2300      	movs	r3, #0
 800d454:	2b00      	cmp	r3, #0
 800d456:	d10a      	bne.n	800d46e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45c:	f383 8811 	msr	BASEPRI, r3
 800d460:	f3bf 8f6f 	isb	sy
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	61fb      	str	r3, [r7, #28]
}
 800d46a:	bf00      	nop
 800d46c:	e7fe      	b.n	800d46c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d46e:	f001 ff87 	bl	800f380 <vPortValidateInterruptPriority>
	__asm volatile
 800d472:	f3ef 8211 	mrs	r2, BASEPRI
 800d476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d47a:	f383 8811 	msr	BASEPRI, r3
 800d47e:	f3bf 8f6f 	isb	sy
 800d482:	f3bf 8f4f 	dsb	sy
 800d486:	61ba      	str	r2, [r7, #24]
 800d488:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d48a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d48c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d492:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d496:	2b00      	cmp	r3, #0
 800d498:	d02f      	beq.n	800d4fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4a4:	68b9      	ldr	r1, [r7, #8]
 800d4a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4a8:	f000 f8b5 	bl	800d616 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ae:	1e5a      	subs	r2, r3, #1
 800d4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d4b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4bc:	d112      	bne.n	800d4e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c0:	691b      	ldr	r3, [r3, #16]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d016      	beq.n	800d4f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c8:	3310      	adds	r3, #16
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f000 fe14 	bl	800e0f8 <xTaskRemoveFromEventList>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d00e      	beq.n	800d4f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d00b      	beq.n	800d4f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	601a      	str	r2, [r3, #0]
 800d4e2:	e007      	b.n	800d4f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d4e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	b25a      	sxtb	r2, r3
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	637b      	str	r3, [r7, #52]	; 0x34
 800d4f8:	e001      	b.n	800d4fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	637b      	str	r3, [r7, #52]	; 0x34
 800d4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d500:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	f383 8811 	msr	BASEPRI, r3
}
 800d508:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3738      	adds	r7, #56	; 0x38
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d514:	b480      	push	{r7}
 800d516:	b085      	sub	sp, #20
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d520:	2b00      	cmp	r3, #0
 800d522:	d006      	beq.n	800d532 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f1c3 0307 	rsb	r3, r3, #7
 800d52e:	60fb      	str	r3, [r7, #12]
 800d530:	e001      	b.n	800d536 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d532:	2300      	movs	r3, #0
 800d534:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d536:	68fb      	ldr	r3, [r7, #12]
	}
 800d538:	4618      	mov	r0, r3
 800d53a:	3714      	adds	r7, #20
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bc80      	pop	{r7}
 800d540:	4770      	bx	lr

0800d542 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d542:	b580      	push	{r7, lr}
 800d544:	b086      	sub	sp, #24
 800d546:	af00      	add	r7, sp, #0
 800d548:	60f8      	str	r0, [r7, #12]
 800d54a:	60b9      	str	r1, [r7, #8]
 800d54c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d54e:	2300      	movs	r3, #0
 800d550:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d556:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d10d      	bne.n	800d57c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d14d      	bne.n	800d604 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	4618      	mov	r0, r3
 800d56e:	f001 f82b 	bl	800e5c8 <xTaskPriorityDisinherit>
 800d572:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2200      	movs	r2, #0
 800d578:	605a      	str	r2, [r3, #4]
 800d57a:	e043      	b.n	800d604 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d119      	bne.n	800d5b6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	6898      	ldr	r0, [r3, #8]
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d58a:	461a      	mov	r2, r3
 800d58c:	68b9      	ldr	r1, [r7, #8]
 800d58e:	f002 fa30 	bl	800f9f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	689a      	ldr	r2, [r3, #8]
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d59a:	441a      	add	r2, r3
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	689a      	ldr	r2, [r3, #8]
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d32b      	bcc.n	800d604 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681a      	ldr	r2, [r3, #0]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	609a      	str	r2, [r3, #8]
 800d5b4:	e026      	b.n	800d604 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	68d8      	ldr	r0, [r3, #12]
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5be:	461a      	mov	r2, r3
 800d5c0:	68b9      	ldr	r1, [r7, #8]
 800d5c2:	f002 fa16 	bl	800f9f2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	68da      	ldr	r2, [r3, #12]
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ce:	425b      	negs	r3, r3
 800d5d0:	441a      	add	r2, r3
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	68da      	ldr	r2, [r3, #12]
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d207      	bcs.n	800d5f2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	685a      	ldr	r2, [r3, #4]
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ea:	425b      	negs	r3, r3
 800d5ec:	441a      	add	r2, r3
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2b02      	cmp	r3, #2
 800d5f6:	d105      	bne.n	800d604 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d002      	beq.n	800d604 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	3b01      	subs	r3, #1
 800d602:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	1c5a      	adds	r2, r3, #1
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d60c:	697b      	ldr	r3, [r7, #20]
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3718      	adds	r7, #24
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d616:	b580      	push	{r7, lr}
 800d618:	b082      	sub	sp, #8
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
 800d61e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d624:	2b00      	cmp	r3, #0
 800d626:	d018      	beq.n	800d65a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	68da      	ldr	r2, [r3, #12]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d630:	441a      	add	r2, r3
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	68da      	ldr	r2, [r3, #12]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	429a      	cmp	r2, r3
 800d640:	d303      	bcc.n	800d64a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	68d9      	ldr	r1, [r3, #12]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d652:	461a      	mov	r2, r3
 800d654:	6838      	ldr	r0, [r7, #0]
 800d656:	f002 f9cc 	bl	800f9f2 <memcpy>
	}
}
 800d65a:	bf00      	nop
 800d65c:	3708      	adds	r7, #8
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}

0800d662 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d662:	b580      	push	{r7, lr}
 800d664:	b084      	sub	sp, #16
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d66a:	f001 fdc7 	bl	800f1fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d674:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d676:	e011      	b.n	800d69c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d012      	beq.n	800d6a6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	3324      	adds	r3, #36	; 0x24
 800d684:	4618      	mov	r0, r3
 800d686:	f000 fd37 	bl	800e0f8 <xTaskRemoveFromEventList>
 800d68a:	4603      	mov	r3, r0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d001      	beq.n	800d694 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d690:	f000 fe0c 	bl	800e2ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d694:	7bfb      	ldrb	r3, [r7, #15]
 800d696:	3b01      	subs	r3, #1
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d69c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	dce9      	bgt.n	800d678 <prvUnlockQueue+0x16>
 800d6a4:	e000      	b.n	800d6a8 <prvUnlockQueue+0x46>
					break;
 800d6a6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	22ff      	movs	r2, #255	; 0xff
 800d6ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d6b0:	f001 fdd4 	bl	800f25c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d6b4:	f001 fda2 	bl	800f1fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6be:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6c0:	e011      	b.n	800d6e6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	691b      	ldr	r3, [r3, #16]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d012      	beq.n	800d6f0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	3310      	adds	r3, #16
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f000 fd12 	bl	800e0f8 <xTaskRemoveFromEventList>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d001      	beq.n	800d6de <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d6da:	f000 fde7 	bl	800e2ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d6de:	7bbb      	ldrb	r3, [r7, #14]
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	dce9      	bgt.n	800d6c2 <prvUnlockQueue+0x60>
 800d6ee:	e000      	b.n	800d6f2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d6f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	22ff      	movs	r2, #255	; 0xff
 800d6f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d6fa:	f001 fdaf 	bl	800f25c <vPortExitCritical>
}
 800d6fe:	bf00      	nop
 800d700:	3710      	adds	r7, #16
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d706:	b580      	push	{r7, lr}
 800d708:	b084      	sub	sp, #16
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d70e:	f001 fd75 	bl	800f1fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d716:	2b00      	cmp	r3, #0
 800d718:	d102      	bne.n	800d720 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d71a:	2301      	movs	r3, #1
 800d71c:	60fb      	str	r3, [r7, #12]
 800d71e:	e001      	b.n	800d724 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d720:	2300      	movs	r3, #0
 800d722:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d724:	f001 fd9a 	bl	800f25c <vPortExitCritical>

	return xReturn;
 800d728:	68fb      	ldr	r3, [r7, #12]
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3710      	adds	r7, #16
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d732:	b580      	push	{r7, lr}
 800d734:	b084      	sub	sp, #16
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d73a:	f001 fd5f 	bl	800f1fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d746:	429a      	cmp	r2, r3
 800d748:	d102      	bne.n	800d750 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d74a:	2301      	movs	r3, #1
 800d74c:	60fb      	str	r3, [r7, #12]
 800d74e:	e001      	b.n	800d754 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d750:	2300      	movs	r3, #0
 800d752:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d754:	f001 fd82 	bl	800f25c <vPortExitCritical>

	return xReturn;
 800d758:	68fb      	ldr	r3, [r7, #12]
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3710      	adds	r7, #16
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
	...

0800d764 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d764:	b480      	push	{r7}
 800d766:	b085      	sub	sp, #20
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d76e:	2300      	movs	r3, #0
 800d770:	60fb      	str	r3, [r7, #12]
 800d772:	e014      	b.n	800d79e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d774:	4a0e      	ldr	r2, [pc, #56]	; (800d7b0 <vQueueAddToRegistry+0x4c>)
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d10b      	bne.n	800d798 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d780:	490b      	ldr	r1, [pc, #44]	; (800d7b0 <vQueueAddToRegistry+0x4c>)
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	683a      	ldr	r2, [r7, #0]
 800d786:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d78a:	4a09      	ldr	r2, [pc, #36]	; (800d7b0 <vQueueAddToRegistry+0x4c>)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	00db      	lsls	r3, r3, #3
 800d790:	4413      	add	r3, r2
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d796:	e006      	b.n	800d7a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	3301      	adds	r3, #1
 800d79c:	60fb      	str	r3, [r7, #12]
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2b07      	cmp	r3, #7
 800d7a2:	d9e7      	bls.n	800d774 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d7a4:	bf00      	nop
 800d7a6:	bf00      	nop
 800d7a8:	3714      	adds	r7, #20
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bc80      	pop	{r7}
 800d7ae:	4770      	bx	lr
 800d7b0:	2000225c 	.word	0x2000225c

0800d7b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b086      	sub	sp, #24
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	60f8      	str	r0, [r7, #12]
 800d7bc:	60b9      	str	r1, [r7, #8]
 800d7be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d7c4:	f001 fd1a 	bl	800f1fc <vPortEnterCritical>
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7ce:	b25b      	sxtb	r3, r3
 800d7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7d4:	d103      	bne.n	800d7de <vQueueWaitForMessageRestricted+0x2a>
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7e4:	b25b      	sxtb	r3, r3
 800d7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ea:	d103      	bne.n	800d7f4 <vQueueWaitForMessageRestricted+0x40>
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7f4:	f001 fd32 	bl	800f25c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d106      	bne.n	800d80e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	3324      	adds	r3, #36	; 0x24
 800d804:	687a      	ldr	r2, [r7, #4]
 800d806:	68b9      	ldr	r1, [r7, #8]
 800d808:	4618      	mov	r0, r3
 800d80a:	f000 fc49 	bl	800e0a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d80e:	6978      	ldr	r0, [r7, #20]
 800d810:	f7ff ff27 	bl	800d662 <prvUnlockQueue>
	}
 800d814:	bf00      	nop
 800d816:	3718      	adds	r7, #24
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b08e      	sub	sp, #56	; 0x38
 800d820:	af04      	add	r7, sp, #16
 800d822:	60f8      	str	r0, [r7, #12]
 800d824:	60b9      	str	r1, [r7, #8]
 800d826:	607a      	str	r2, [r7, #4]
 800d828:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d82a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d10a      	bne.n	800d846 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d834:	f383 8811 	msr	BASEPRI, r3
 800d838:	f3bf 8f6f 	isb	sy
 800d83c:	f3bf 8f4f 	dsb	sy
 800d840:	623b      	str	r3, [r7, #32]
}
 800d842:	bf00      	nop
 800d844:	e7fe      	b.n	800d844 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d10a      	bne.n	800d862 <xTaskCreateStatic+0x46>
	__asm volatile
 800d84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d850:	f383 8811 	msr	BASEPRI, r3
 800d854:	f3bf 8f6f 	isb	sy
 800d858:	f3bf 8f4f 	dsb	sy
 800d85c:	61fb      	str	r3, [r7, #28]
}
 800d85e:	bf00      	nop
 800d860:	e7fe      	b.n	800d860 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d862:	23b4      	movs	r3, #180	; 0xb4
 800d864:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	2bb4      	cmp	r3, #180	; 0xb4
 800d86a:	d00a      	beq.n	800d882 <xTaskCreateStatic+0x66>
	__asm volatile
 800d86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d870:	f383 8811 	msr	BASEPRI, r3
 800d874:	f3bf 8f6f 	isb	sy
 800d878:	f3bf 8f4f 	dsb	sy
 800d87c:	61bb      	str	r3, [r7, #24]
}
 800d87e:	bf00      	nop
 800d880:	e7fe      	b.n	800d880 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d884:	2b00      	cmp	r3, #0
 800d886:	d01e      	beq.n	800d8c6 <xTaskCreateStatic+0xaa>
 800d888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d01b      	beq.n	800d8c6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d890:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d896:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89a:	2202      	movs	r2, #2
 800d89c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	9303      	str	r3, [sp, #12]
 800d8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a6:	9302      	str	r3, [sp, #8]
 800d8a8:	f107 0314 	add.w	r3, r7, #20
 800d8ac:	9301      	str	r3, [sp, #4]
 800d8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b0:	9300      	str	r3, [sp, #0]
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	68b9      	ldr	r1, [r7, #8]
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	f000 f851 	bl	800d960 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d8be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8c0:	f000 f8e4 	bl	800da8c <prvAddNewTaskToReadyList>
 800d8c4:	e001      	b.n	800d8ca <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d8ca:	697b      	ldr	r3, [r7, #20]
	}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3728      	adds	r7, #40	; 0x28
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b08c      	sub	sp, #48	; 0x30
 800d8d8:	af04      	add	r7, sp, #16
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	603b      	str	r3, [r7, #0]
 800d8e0:	4613      	mov	r3, r2
 800d8e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8e4:	88fb      	ldrh	r3, [r7, #6]
 800d8e6:	009b      	lsls	r3, r3, #2
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f001 fd87 	bl	800f3fc <pvPortMalloc>
 800d8ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d00e      	beq.n	800d914 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800d8f6:	20b4      	movs	r0, #180	; 0xb4
 800d8f8:	f001 fd80 	bl	800f3fc <pvPortMalloc>
 800d8fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d003      	beq.n	800d90c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	697a      	ldr	r2, [r7, #20]
 800d908:	631a      	str	r2, [r3, #48]	; 0x30
 800d90a:	e005      	b.n	800d918 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d90c:	6978      	ldr	r0, [r7, #20]
 800d90e:	f001 fe39 	bl	800f584 <vPortFree>
 800d912:	e001      	b.n	800d918 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d914:	2300      	movs	r3, #0
 800d916:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d017      	beq.n	800d94e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d91e:	69fb      	ldr	r3, [r7, #28]
 800d920:	2200      	movs	r2, #0
 800d922:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d926:	88fa      	ldrh	r2, [r7, #6]
 800d928:	2300      	movs	r3, #0
 800d92a:	9303      	str	r3, [sp, #12]
 800d92c:	69fb      	ldr	r3, [r7, #28]
 800d92e:	9302      	str	r3, [sp, #8]
 800d930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d932:	9301      	str	r3, [sp, #4]
 800d934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d936:	9300      	str	r3, [sp, #0]
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	68b9      	ldr	r1, [r7, #8]
 800d93c:	68f8      	ldr	r0, [r7, #12]
 800d93e:	f000 f80f 	bl	800d960 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d942:	69f8      	ldr	r0, [r7, #28]
 800d944:	f000 f8a2 	bl	800da8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d948:	2301      	movs	r3, #1
 800d94a:	61bb      	str	r3, [r7, #24]
 800d94c:	e002      	b.n	800d954 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d94e:	f04f 33ff 	mov.w	r3, #4294967295
 800d952:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d954:	69bb      	ldr	r3, [r7, #24]
	}
 800d956:	4618      	mov	r0, r3
 800d958:	3720      	adds	r7, #32
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
	...

0800d960 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b088      	sub	sp, #32
 800d964:	af00      	add	r7, sp, #0
 800d966:	60f8      	str	r0, [r7, #12]
 800d968:	60b9      	str	r1, [r7, #8]
 800d96a:	607a      	str	r2, [r7, #4]
 800d96c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d978:	3b01      	subs	r3, #1
 800d97a:	009b      	lsls	r3, r3, #2
 800d97c:	4413      	add	r3, r2
 800d97e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800d980:	69bb      	ldr	r3, [r7, #24]
 800d982:	f023 0307 	bic.w	r3, r3, #7
 800d986:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d988:	69bb      	ldr	r3, [r7, #24]
 800d98a:	f003 0307 	and.w	r3, r3, #7
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d00a      	beq.n	800d9a8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d996:	f383 8811 	msr	BASEPRI, r3
 800d99a:	f3bf 8f6f 	isb	sy
 800d99e:	f3bf 8f4f 	dsb	sy
 800d9a2:	617b      	str	r3, [r7, #20]
}
 800d9a4:	bf00      	nop
 800d9a6:	e7fe      	b.n	800d9a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	61fb      	str	r3, [r7, #28]
 800d9ac:	e012      	b.n	800d9d4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d9ae:	68ba      	ldr	r2, [r7, #8]
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	4413      	add	r3, r2
 800d9b4:	7819      	ldrb	r1, [r3, #0]
 800d9b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9b8:	69fb      	ldr	r3, [r7, #28]
 800d9ba:	4413      	add	r3, r2
 800d9bc:	3334      	adds	r3, #52	; 0x34
 800d9be:	460a      	mov	r2, r1
 800d9c0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800d9c2:	68ba      	ldr	r2, [r7, #8]
 800d9c4:	69fb      	ldr	r3, [r7, #28]
 800d9c6:	4413      	add	r3, r2
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d006      	beq.n	800d9dc <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9ce:	69fb      	ldr	r3, [r7, #28]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	61fb      	str	r3, [r7, #28]
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	2b0f      	cmp	r3, #15
 800d9d8:	d9e9      	bls.n	800d9ae <prvInitialiseNewTask+0x4e>
 800d9da:	e000      	b.n	800d9de <prvInitialiseNewTask+0x7e>
		{
			break;
 800d9dc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e8:	2b06      	cmp	r3, #6
 800d9ea:	d901      	bls.n	800d9f0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d9ec:	2306      	movs	r3, #6
 800d9ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fe:	2200      	movs	r2, #0
 800da00:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800da02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da04:	3304      	adds	r3, #4
 800da06:	4618      	mov	r0, r3
 800da08:	f7fe ffb5 	bl	800c976 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800da0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da0e:	3318      	adds	r3, #24
 800da10:	4618      	mov	r0, r3
 800da12:	f7fe ffb0 	bl	800c976 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800da16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1e:	f1c3 0207 	rsb	r2, r3, #7
 800da22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800da26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800da2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2e:	2200      	movs	r2, #0
 800da30:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800da34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da36:	2200      	movs	r2, #0
 800da38:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800da3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3e:	334c      	adds	r3, #76	; 0x4c
 800da40:	2260      	movs	r2, #96	; 0x60
 800da42:	2100      	movs	r1, #0
 800da44:	4618      	mov	r0, r3
 800da46:	f001 ffe2 	bl	800fa0e <memset>
 800da4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4c:	4a0c      	ldr	r2, [pc, #48]	; (800da80 <prvInitialiseNewTask+0x120>)
 800da4e:	651a      	str	r2, [r3, #80]	; 0x50
 800da50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da52:	4a0c      	ldr	r2, [pc, #48]	; (800da84 <prvInitialiseNewTask+0x124>)
 800da54:	655a      	str	r2, [r3, #84]	; 0x54
 800da56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da58:	4a0b      	ldr	r2, [pc, #44]	; (800da88 <prvInitialiseNewTask+0x128>)
 800da5a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800da5c:	683a      	ldr	r2, [r7, #0]
 800da5e:	68f9      	ldr	r1, [r7, #12]
 800da60:	69b8      	ldr	r0, [r7, #24]
 800da62:	f001 fad9 	bl	800f018 <pxPortInitialiseStack>
 800da66:	4602      	mov	r2, r0
 800da68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800da6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d002      	beq.n	800da78 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800da72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da78:	bf00      	nop
 800da7a:	3720      	adds	r7, #32
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	080136d4 	.word	0x080136d4
 800da84:	080136f4 	.word	0x080136f4
 800da88:	080136b4 	.word	0x080136b4

0800da8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800da94:	f001 fbb2 	bl	800f1fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800da98:	4b2a      	ldr	r3, [pc, #168]	; (800db44 <prvAddNewTaskToReadyList+0xb8>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	3301      	adds	r3, #1
 800da9e:	4a29      	ldr	r2, [pc, #164]	; (800db44 <prvAddNewTaskToReadyList+0xb8>)
 800daa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800daa2:	4b29      	ldr	r3, [pc, #164]	; (800db48 <prvAddNewTaskToReadyList+0xbc>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d109      	bne.n	800dabe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800daaa:	4a27      	ldr	r2, [pc, #156]	; (800db48 <prvAddNewTaskToReadyList+0xbc>)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dab0:	4b24      	ldr	r3, [pc, #144]	; (800db44 <prvAddNewTaskToReadyList+0xb8>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	2b01      	cmp	r3, #1
 800dab6:	d110      	bne.n	800dada <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dab8:	f000 fc1c 	bl	800e2f4 <prvInitialiseTaskLists>
 800dabc:	e00d      	b.n	800dada <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dabe:	4b23      	ldr	r3, [pc, #140]	; (800db4c <prvAddNewTaskToReadyList+0xc0>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d109      	bne.n	800dada <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dac6:	4b20      	ldr	r3, [pc, #128]	; (800db48 <prvAddNewTaskToReadyList+0xbc>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d802      	bhi.n	800dada <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dad4:	4a1c      	ldr	r2, [pc, #112]	; (800db48 <prvAddNewTaskToReadyList+0xbc>)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dada:	4b1d      	ldr	r3, [pc, #116]	; (800db50 <prvAddNewTaskToReadyList+0xc4>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	3301      	adds	r3, #1
 800dae0:	4a1b      	ldr	r2, [pc, #108]	; (800db50 <prvAddNewTaskToReadyList+0xc4>)
 800dae2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae8:	2201      	movs	r2, #1
 800daea:	409a      	lsls	r2, r3
 800daec:	4b19      	ldr	r3, [pc, #100]	; (800db54 <prvAddNewTaskToReadyList+0xc8>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4313      	orrs	r3, r2
 800daf2:	4a18      	ldr	r2, [pc, #96]	; (800db54 <prvAddNewTaskToReadyList+0xc8>)
 800daf4:	6013      	str	r3, [r2, #0]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dafa:	4613      	mov	r3, r2
 800dafc:	009b      	lsls	r3, r3, #2
 800dafe:	4413      	add	r3, r2
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	4a15      	ldr	r2, [pc, #84]	; (800db58 <prvAddNewTaskToReadyList+0xcc>)
 800db04:	441a      	add	r2, r3
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	3304      	adds	r3, #4
 800db0a:	4619      	mov	r1, r3
 800db0c:	4610      	mov	r0, r2
 800db0e:	f7fe ff3e 	bl	800c98e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800db12:	f001 fba3 	bl	800f25c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800db16:	4b0d      	ldr	r3, [pc, #52]	; (800db4c <prvAddNewTaskToReadyList+0xc0>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d00e      	beq.n	800db3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800db1e:	4b0a      	ldr	r3, [pc, #40]	; (800db48 <prvAddNewTaskToReadyList+0xbc>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db28:	429a      	cmp	r2, r3
 800db2a:	d207      	bcs.n	800db3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800db2c:	4b0b      	ldr	r3, [pc, #44]	; (800db5c <prvAddNewTaskToReadyList+0xd0>)
 800db2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db32:	601a      	str	r2, [r3, #0]
 800db34:	f3bf 8f4f 	dsb	sy
 800db38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db3c:	bf00      	nop
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	2000239c 	.word	0x2000239c
 800db48:	2000229c 	.word	0x2000229c
 800db4c:	200023a8 	.word	0x200023a8
 800db50:	200023b8 	.word	0x200023b8
 800db54:	200023a4 	.word	0x200023a4
 800db58:	200022a0 	.word	0x200022a0
 800db5c:	e000ed04 	.word	0xe000ed04

0800db60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800db68:	2300      	movs	r3, #0
 800db6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d017      	beq.n	800dba2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800db72:	4b13      	ldr	r3, [pc, #76]	; (800dbc0 <vTaskDelay+0x60>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d00a      	beq.n	800db90 <vTaskDelay+0x30>
	__asm volatile
 800db7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7e:	f383 8811 	msr	BASEPRI, r3
 800db82:	f3bf 8f6f 	isb	sy
 800db86:	f3bf 8f4f 	dsb	sy
 800db8a:	60bb      	str	r3, [r7, #8]
}
 800db8c:	bf00      	nop
 800db8e:	e7fe      	b.n	800db8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800db90:	f000 f88a 	bl	800dca8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800db94:	2100      	movs	r1, #0
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 fe50 	bl	800e83c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800db9c:	f000 f892 	bl	800dcc4 <xTaskResumeAll>
 800dba0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d107      	bne.n	800dbb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dba8:	4b06      	ldr	r3, [pc, #24]	; (800dbc4 <vTaskDelay+0x64>)
 800dbaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbae:	601a      	str	r2, [r3, #0]
 800dbb0:	f3bf 8f4f 	dsb	sy
 800dbb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dbb8:	bf00      	nop
 800dbba:	3710      	adds	r7, #16
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}
 800dbc0:	200023c4 	.word	0x200023c4
 800dbc4:	e000ed04 	.word	0xe000ed04

0800dbc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b08a      	sub	sp, #40	; 0x28
 800dbcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dbd6:	463a      	mov	r2, r7
 800dbd8:	1d39      	adds	r1, r7, #4
 800dbda:	f107 0308 	add.w	r3, r7, #8
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7f4 f8f4 	bl	8001dcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dbe4:	6839      	ldr	r1, [r7, #0]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	68ba      	ldr	r2, [r7, #8]
 800dbea:	9202      	str	r2, [sp, #8]
 800dbec:	9301      	str	r3, [sp, #4]
 800dbee:	2300      	movs	r3, #0
 800dbf0:	9300      	str	r3, [sp, #0]
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	460a      	mov	r2, r1
 800dbf6:	4924      	ldr	r1, [pc, #144]	; (800dc88 <vTaskStartScheduler+0xc0>)
 800dbf8:	4824      	ldr	r0, [pc, #144]	; (800dc8c <vTaskStartScheduler+0xc4>)
 800dbfa:	f7ff fe0f 	bl	800d81c <xTaskCreateStatic>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	4a23      	ldr	r2, [pc, #140]	; (800dc90 <vTaskStartScheduler+0xc8>)
 800dc02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dc04:	4b22      	ldr	r3, [pc, #136]	; (800dc90 <vTaskStartScheduler+0xc8>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d002      	beq.n	800dc12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	617b      	str	r3, [r7, #20]
 800dc10:	e001      	b.n	800dc16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dc12:	2300      	movs	r3, #0
 800dc14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d102      	bne.n	800dc22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dc1c:	f000 fe74 	bl	800e908 <xTimerCreateTimerTask>
 800dc20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d11b      	bne.n	800dc60 <vTaskStartScheduler+0x98>
	__asm volatile
 800dc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2c:	f383 8811 	msr	BASEPRI, r3
 800dc30:	f3bf 8f6f 	isb	sy
 800dc34:	f3bf 8f4f 	dsb	sy
 800dc38:	613b      	str	r3, [r7, #16]
}
 800dc3a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dc3c:	4b15      	ldr	r3, [pc, #84]	; (800dc94 <vTaskStartScheduler+0xcc>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	334c      	adds	r3, #76	; 0x4c
 800dc42:	4a15      	ldr	r2, [pc, #84]	; (800dc98 <vTaskStartScheduler+0xd0>)
 800dc44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dc46:	4b15      	ldr	r3, [pc, #84]	; (800dc9c <vTaskStartScheduler+0xd4>)
 800dc48:	f04f 32ff 	mov.w	r2, #4294967295
 800dc4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dc4e:	4b14      	ldr	r3, [pc, #80]	; (800dca0 <vTaskStartScheduler+0xd8>)
 800dc50:	2201      	movs	r2, #1
 800dc52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800dc54:	4b13      	ldr	r3, [pc, #76]	; (800dca4 <vTaskStartScheduler+0xdc>)
 800dc56:	2200      	movs	r2, #0
 800dc58:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dc5a:	f001 fa5d 	bl	800f118 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dc5e:	e00e      	b.n	800dc7e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc66:	d10a      	bne.n	800dc7e <vTaskStartScheduler+0xb6>
	__asm volatile
 800dc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc6c:	f383 8811 	msr	BASEPRI, r3
 800dc70:	f3bf 8f6f 	isb	sy
 800dc74:	f3bf 8f4f 	dsb	sy
 800dc78:	60fb      	str	r3, [r7, #12]
}
 800dc7a:	bf00      	nop
 800dc7c:	e7fe      	b.n	800dc7c <vTaskStartScheduler+0xb4>
}
 800dc7e:	bf00      	nop
 800dc80:	3718      	adds	r7, #24
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	08013044 	.word	0x08013044
 800dc8c:	0800e2c5 	.word	0x0800e2c5
 800dc90:	200023c0 	.word	0x200023c0
 800dc94:	2000229c 	.word	0x2000229c
 800dc98:	2000009c 	.word	0x2000009c
 800dc9c:	200023bc 	.word	0x200023bc
 800dca0:	200023a8 	.word	0x200023a8
 800dca4:	200023a0 	.word	0x200023a0

0800dca8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dca8:	b480      	push	{r7}
 800dcaa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800dcac:	4b04      	ldr	r3, [pc, #16]	; (800dcc0 <vTaskSuspendAll+0x18>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	4a03      	ldr	r2, [pc, #12]	; (800dcc0 <vTaskSuspendAll+0x18>)
 800dcb4:	6013      	str	r3, [r2, #0]
}
 800dcb6:	bf00      	nop
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bc80      	pop	{r7}
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop
 800dcc0:	200023c4 	.word	0x200023c4

0800dcc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dcca:	2300      	movs	r3, #0
 800dccc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dcd2:	4b41      	ldr	r3, [pc, #260]	; (800ddd8 <xTaskResumeAll+0x114>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d10a      	bne.n	800dcf0 <xTaskResumeAll+0x2c>
	__asm volatile
 800dcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcde:	f383 8811 	msr	BASEPRI, r3
 800dce2:	f3bf 8f6f 	isb	sy
 800dce6:	f3bf 8f4f 	dsb	sy
 800dcea:	603b      	str	r3, [r7, #0]
}
 800dcec:	bf00      	nop
 800dcee:	e7fe      	b.n	800dcee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dcf0:	f001 fa84 	bl	800f1fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dcf4:	4b38      	ldr	r3, [pc, #224]	; (800ddd8 <xTaskResumeAll+0x114>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	3b01      	subs	r3, #1
 800dcfa:	4a37      	ldr	r2, [pc, #220]	; (800ddd8 <xTaskResumeAll+0x114>)
 800dcfc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcfe:	4b36      	ldr	r3, [pc, #216]	; (800ddd8 <xTaskResumeAll+0x114>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d161      	bne.n	800ddca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dd06:	4b35      	ldr	r3, [pc, #212]	; (800dddc <xTaskResumeAll+0x118>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d05d      	beq.n	800ddca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd0e:	e02e      	b.n	800dd6e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800dd10:	4b33      	ldr	r3, [pc, #204]	; (800dde0 <xTaskResumeAll+0x11c>)
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	3318      	adds	r3, #24
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7fe fe91 	bl	800ca44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	3304      	adds	r3, #4
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7fe fe8c 	bl	800ca44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd30:	2201      	movs	r2, #1
 800dd32:	409a      	lsls	r2, r3
 800dd34:	4b2b      	ldr	r3, [pc, #172]	; (800dde4 <xTaskResumeAll+0x120>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	4a2a      	ldr	r2, [pc, #168]	; (800dde4 <xTaskResumeAll+0x120>)
 800dd3c:	6013      	str	r3, [r2, #0]
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd42:	4613      	mov	r3, r2
 800dd44:	009b      	lsls	r3, r3, #2
 800dd46:	4413      	add	r3, r2
 800dd48:	009b      	lsls	r3, r3, #2
 800dd4a:	4a27      	ldr	r2, [pc, #156]	; (800dde8 <xTaskResumeAll+0x124>)
 800dd4c:	441a      	add	r2, r3
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	3304      	adds	r3, #4
 800dd52:	4619      	mov	r1, r3
 800dd54:	4610      	mov	r0, r2
 800dd56:	f7fe fe1a 	bl	800c98e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd5e:	4b23      	ldr	r3, [pc, #140]	; (800ddec <xTaskResumeAll+0x128>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d302      	bcc.n	800dd6e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800dd68:	4b21      	ldr	r3, [pc, #132]	; (800ddf0 <xTaskResumeAll+0x12c>)
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd6e:	4b1c      	ldr	r3, [pc, #112]	; (800dde0 <xTaskResumeAll+0x11c>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d1cc      	bne.n	800dd10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d001      	beq.n	800dd80 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dd7c:	f000 fb5c 	bl	800e438 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800dd80:	4b1c      	ldr	r3, [pc, #112]	; (800ddf4 <xTaskResumeAll+0x130>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d010      	beq.n	800ddae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dd8c:	f000 f844 	bl	800de18 <xTaskIncrementTick>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d002      	beq.n	800dd9c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800dd96:	4b16      	ldr	r3, [pc, #88]	; (800ddf0 <xTaskResumeAll+0x12c>)
 800dd98:	2201      	movs	r2, #1
 800dd9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	3b01      	subs	r3, #1
 800dda0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d1f1      	bne.n	800dd8c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800dda8:	4b12      	ldr	r3, [pc, #72]	; (800ddf4 <xTaskResumeAll+0x130>)
 800ddaa:	2200      	movs	r2, #0
 800ddac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ddae:	4b10      	ldr	r3, [pc, #64]	; (800ddf0 <xTaskResumeAll+0x12c>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d009      	beq.n	800ddca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ddba:	4b0f      	ldr	r3, [pc, #60]	; (800ddf8 <xTaskResumeAll+0x134>)
 800ddbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddc0:	601a      	str	r2, [r3, #0]
 800ddc2:	f3bf 8f4f 	dsb	sy
 800ddc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ddca:	f001 fa47 	bl	800f25c <vPortExitCritical>

	return xAlreadyYielded;
 800ddce:	68bb      	ldr	r3, [r7, #8]
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3710      	adds	r7, #16
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	200023c4 	.word	0x200023c4
 800dddc:	2000239c 	.word	0x2000239c
 800dde0:	2000235c 	.word	0x2000235c
 800dde4:	200023a4 	.word	0x200023a4
 800dde8:	200022a0 	.word	0x200022a0
 800ddec:	2000229c 	.word	0x2000229c
 800ddf0:	200023b0 	.word	0x200023b0
 800ddf4:	200023ac 	.word	0x200023ac
 800ddf8:	e000ed04 	.word	0xe000ed04

0800ddfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b083      	sub	sp, #12
 800de00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800de02:	4b04      	ldr	r3, [pc, #16]	; (800de14 <xTaskGetTickCount+0x18>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800de08:	687b      	ldr	r3, [r7, #4]
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	370c      	adds	r7, #12
 800de0e:	46bd      	mov	sp, r7
 800de10:	bc80      	pop	{r7}
 800de12:	4770      	bx	lr
 800de14:	200023a0 	.word	0x200023a0

0800de18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b086      	sub	sp, #24
 800de1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800de1e:	2300      	movs	r3, #0
 800de20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de22:	4b51      	ldr	r3, [pc, #324]	; (800df68 <xTaskIncrementTick+0x150>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	f040 808d 	bne.w	800df46 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800de2c:	4b4f      	ldr	r3, [pc, #316]	; (800df6c <xTaskIncrementTick+0x154>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	3301      	adds	r3, #1
 800de32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800de34:	4a4d      	ldr	r2, [pc, #308]	; (800df6c <xTaskIncrementTick+0x154>)
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d120      	bne.n	800de82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800de40:	4b4b      	ldr	r3, [pc, #300]	; (800df70 <xTaskIncrementTick+0x158>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d00a      	beq.n	800de60 <xTaskIncrementTick+0x48>
	__asm volatile
 800de4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de4e:	f383 8811 	msr	BASEPRI, r3
 800de52:	f3bf 8f6f 	isb	sy
 800de56:	f3bf 8f4f 	dsb	sy
 800de5a:	603b      	str	r3, [r7, #0]
}
 800de5c:	bf00      	nop
 800de5e:	e7fe      	b.n	800de5e <xTaskIncrementTick+0x46>
 800de60:	4b43      	ldr	r3, [pc, #268]	; (800df70 <xTaskIncrementTick+0x158>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	60fb      	str	r3, [r7, #12]
 800de66:	4b43      	ldr	r3, [pc, #268]	; (800df74 <xTaskIncrementTick+0x15c>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4a41      	ldr	r2, [pc, #260]	; (800df70 <xTaskIncrementTick+0x158>)
 800de6c:	6013      	str	r3, [r2, #0]
 800de6e:	4a41      	ldr	r2, [pc, #260]	; (800df74 <xTaskIncrementTick+0x15c>)
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	6013      	str	r3, [r2, #0]
 800de74:	4b40      	ldr	r3, [pc, #256]	; (800df78 <xTaskIncrementTick+0x160>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	3301      	adds	r3, #1
 800de7a:	4a3f      	ldr	r2, [pc, #252]	; (800df78 <xTaskIncrementTick+0x160>)
 800de7c:	6013      	str	r3, [r2, #0]
 800de7e:	f000 fadb 	bl	800e438 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800de82:	4b3e      	ldr	r3, [pc, #248]	; (800df7c <xTaskIncrementTick+0x164>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	693a      	ldr	r2, [r7, #16]
 800de88:	429a      	cmp	r2, r3
 800de8a:	d34d      	bcc.n	800df28 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de8c:	4b38      	ldr	r3, [pc, #224]	; (800df70 <xTaskIncrementTick+0x158>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d101      	bne.n	800de9a <xTaskIncrementTick+0x82>
 800de96:	2301      	movs	r3, #1
 800de98:	e000      	b.n	800de9c <xTaskIncrementTick+0x84>
 800de9a:	2300      	movs	r3, #0
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d004      	beq.n	800deaa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dea0:	4b36      	ldr	r3, [pc, #216]	; (800df7c <xTaskIncrementTick+0x164>)
 800dea2:	f04f 32ff 	mov.w	r2, #4294967295
 800dea6:	601a      	str	r2, [r3, #0]
					break;
 800dea8:	e03e      	b.n	800df28 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800deaa:	4b31      	ldr	r3, [pc, #196]	; (800df70 <xTaskIncrementTick+0x158>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	68db      	ldr	r3, [r3, #12]
 800deb0:	68db      	ldr	r3, [r3, #12]
 800deb2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	685b      	ldr	r3, [r3, #4]
 800deb8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800deba:	693a      	ldr	r2, [r7, #16]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d203      	bcs.n	800deca <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dec2:	4a2e      	ldr	r2, [pc, #184]	; (800df7c <xTaskIncrementTick+0x164>)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6013      	str	r3, [r2, #0]
						break;
 800dec8:	e02e      	b.n	800df28 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	3304      	adds	r3, #4
 800dece:	4618      	mov	r0, r3
 800ded0:	f7fe fdb8 	bl	800ca44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d004      	beq.n	800dee6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	3318      	adds	r3, #24
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7fe fdaf 	bl	800ca44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deea:	2201      	movs	r2, #1
 800deec:	409a      	lsls	r2, r3
 800deee:	4b24      	ldr	r3, [pc, #144]	; (800df80 <xTaskIncrementTick+0x168>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4313      	orrs	r3, r2
 800def4:	4a22      	ldr	r2, [pc, #136]	; (800df80 <xTaskIncrementTick+0x168>)
 800def6:	6013      	str	r3, [r2, #0]
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800defc:	4613      	mov	r3, r2
 800defe:	009b      	lsls	r3, r3, #2
 800df00:	4413      	add	r3, r2
 800df02:	009b      	lsls	r3, r3, #2
 800df04:	4a1f      	ldr	r2, [pc, #124]	; (800df84 <xTaskIncrementTick+0x16c>)
 800df06:	441a      	add	r2, r3
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	3304      	adds	r3, #4
 800df0c:	4619      	mov	r1, r3
 800df0e:	4610      	mov	r0, r2
 800df10:	f7fe fd3d 	bl	800c98e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df18:	4b1b      	ldr	r3, [pc, #108]	; (800df88 <xTaskIncrementTick+0x170>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df1e:	429a      	cmp	r2, r3
 800df20:	d3b4      	bcc.n	800de8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800df22:	2301      	movs	r3, #1
 800df24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df26:	e7b1      	b.n	800de8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800df28:	4b17      	ldr	r3, [pc, #92]	; (800df88 <xTaskIncrementTick+0x170>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df2e:	4915      	ldr	r1, [pc, #84]	; (800df84 <xTaskIncrementTick+0x16c>)
 800df30:	4613      	mov	r3, r2
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	4413      	add	r3, r2
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	440b      	add	r3, r1
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d907      	bls.n	800df50 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800df40:	2301      	movs	r3, #1
 800df42:	617b      	str	r3, [r7, #20]
 800df44:	e004      	b.n	800df50 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800df46:	4b11      	ldr	r3, [pc, #68]	; (800df8c <xTaskIncrementTick+0x174>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	3301      	adds	r3, #1
 800df4c:	4a0f      	ldr	r2, [pc, #60]	; (800df8c <xTaskIncrementTick+0x174>)
 800df4e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800df50:	4b0f      	ldr	r3, [pc, #60]	; (800df90 <xTaskIncrementTick+0x178>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d001      	beq.n	800df5c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800df58:	2301      	movs	r3, #1
 800df5a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800df5c:	697b      	ldr	r3, [r7, #20]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3718      	adds	r7, #24
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	200023c4 	.word	0x200023c4
 800df6c:	200023a0 	.word	0x200023a0
 800df70:	20002354 	.word	0x20002354
 800df74:	20002358 	.word	0x20002358
 800df78:	200023b4 	.word	0x200023b4
 800df7c:	200023bc 	.word	0x200023bc
 800df80:	200023a4 	.word	0x200023a4
 800df84:	200022a0 	.word	0x200022a0
 800df88:	2000229c 	.word	0x2000229c
 800df8c:	200023ac 	.word	0x200023ac
 800df90:	200023b0 	.word	0x200023b0

0800df94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800df94:	b480      	push	{r7}
 800df96:	b087      	sub	sp, #28
 800df98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800df9a:	4b29      	ldr	r3, [pc, #164]	; (800e040 <vTaskSwitchContext+0xac>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d003      	beq.n	800dfaa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dfa2:	4b28      	ldr	r3, [pc, #160]	; (800e044 <vTaskSwitchContext+0xb0>)
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dfa8:	e044      	b.n	800e034 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800dfaa:	4b26      	ldr	r3, [pc, #152]	; (800e044 <vTaskSwitchContext+0xb0>)
 800dfac:	2200      	movs	r2, #0
 800dfae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800dfb0:	4b25      	ldr	r3, [pc, #148]	; (800e048 <vTaskSwitchContext+0xb4>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	fab3 f383 	clz	r3, r3
 800dfbc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dfbe:	7afb      	ldrb	r3, [r7, #11]
 800dfc0:	f1c3 031f 	rsb	r3, r3, #31
 800dfc4:	617b      	str	r3, [r7, #20]
 800dfc6:	4921      	ldr	r1, [pc, #132]	; (800e04c <vTaskSwitchContext+0xb8>)
 800dfc8:	697a      	ldr	r2, [r7, #20]
 800dfca:	4613      	mov	r3, r2
 800dfcc:	009b      	lsls	r3, r3, #2
 800dfce:	4413      	add	r3, r2
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	440b      	add	r3, r1
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d10a      	bne.n	800dff0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800dfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfde:	f383 8811 	msr	BASEPRI, r3
 800dfe2:	f3bf 8f6f 	isb	sy
 800dfe6:	f3bf 8f4f 	dsb	sy
 800dfea:	607b      	str	r3, [r7, #4]
}
 800dfec:	bf00      	nop
 800dfee:	e7fe      	b.n	800dfee <vTaskSwitchContext+0x5a>
 800dff0:	697a      	ldr	r2, [r7, #20]
 800dff2:	4613      	mov	r3, r2
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	4413      	add	r3, r2
 800dff8:	009b      	lsls	r3, r3, #2
 800dffa:	4a14      	ldr	r2, [pc, #80]	; (800e04c <vTaskSwitchContext+0xb8>)
 800dffc:	4413      	add	r3, r2
 800dffe:	613b      	str	r3, [r7, #16]
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	685a      	ldr	r2, [r3, #4]
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	605a      	str	r2, [r3, #4]
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	685a      	ldr	r2, [r3, #4]
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	3308      	adds	r3, #8
 800e012:	429a      	cmp	r2, r3
 800e014:	d104      	bne.n	800e020 <vTaskSwitchContext+0x8c>
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	685a      	ldr	r2, [r3, #4]
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	605a      	str	r2, [r3, #4]
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	68db      	ldr	r3, [r3, #12]
 800e026:	4a0a      	ldr	r2, [pc, #40]	; (800e050 <vTaskSwitchContext+0xbc>)
 800e028:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e02a:	4b09      	ldr	r3, [pc, #36]	; (800e050 <vTaskSwitchContext+0xbc>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	334c      	adds	r3, #76	; 0x4c
 800e030:	4a08      	ldr	r2, [pc, #32]	; (800e054 <vTaskSwitchContext+0xc0>)
 800e032:	6013      	str	r3, [r2, #0]
}
 800e034:	bf00      	nop
 800e036:	371c      	adds	r7, #28
 800e038:	46bd      	mov	sp, r7
 800e03a:	bc80      	pop	{r7}
 800e03c:	4770      	bx	lr
 800e03e:	bf00      	nop
 800e040:	200023c4 	.word	0x200023c4
 800e044:	200023b0 	.word	0x200023b0
 800e048:	200023a4 	.word	0x200023a4
 800e04c:	200022a0 	.word	0x200022a0
 800e050:	2000229c 	.word	0x2000229c
 800e054:	2000009c 	.word	0x2000009c

0800e058 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d10a      	bne.n	800e07e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e06c:	f383 8811 	msr	BASEPRI, r3
 800e070:	f3bf 8f6f 	isb	sy
 800e074:	f3bf 8f4f 	dsb	sy
 800e078:	60fb      	str	r3, [r7, #12]
}
 800e07a:	bf00      	nop
 800e07c:	e7fe      	b.n	800e07c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e07e:	4b07      	ldr	r3, [pc, #28]	; (800e09c <vTaskPlaceOnEventList+0x44>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	3318      	adds	r3, #24
 800e084:	4619      	mov	r1, r3
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f7fe fca4 	bl	800c9d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e08c:	2101      	movs	r1, #1
 800e08e:	6838      	ldr	r0, [r7, #0]
 800e090:	f000 fbd4 	bl	800e83c <prvAddCurrentTaskToDelayedList>
}
 800e094:	bf00      	nop
 800e096:	3710      	adds	r7, #16
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	2000229c 	.word	0x2000229c

0800e0a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b086      	sub	sp, #24
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	60f8      	str	r0, [r7, #12]
 800e0a8:	60b9      	str	r1, [r7, #8]
 800e0aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d10a      	bne.n	800e0c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b6:	f383 8811 	msr	BASEPRI, r3
 800e0ba:	f3bf 8f6f 	isb	sy
 800e0be:	f3bf 8f4f 	dsb	sy
 800e0c2:	617b      	str	r3, [r7, #20]
}
 800e0c4:	bf00      	nop
 800e0c6:	e7fe      	b.n	800e0c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e0c8:	4b0a      	ldr	r3, [pc, #40]	; (800e0f4 <vTaskPlaceOnEventListRestricted+0x54>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	3318      	adds	r3, #24
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	68f8      	ldr	r0, [r7, #12]
 800e0d2:	f7fe fc5c 	bl	800c98e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d002      	beq.n	800e0e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e0e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e0e2:	6879      	ldr	r1, [r7, #4]
 800e0e4:	68b8      	ldr	r0, [r7, #8]
 800e0e6:	f000 fba9 	bl	800e83c <prvAddCurrentTaskToDelayedList>
	}
 800e0ea:	bf00      	nop
 800e0ec:	3718      	adds	r7, #24
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	2000229c 	.word	0x2000229c

0800e0f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b086      	sub	sp, #24
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	68db      	ldr	r3, [r3, #12]
 800e104:	68db      	ldr	r3, [r3, #12]
 800e106:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d10a      	bne.n	800e124 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	60fb      	str	r3, [r7, #12]
}
 800e120:	bf00      	nop
 800e122:	e7fe      	b.n	800e122 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	3318      	adds	r3, #24
 800e128:	4618      	mov	r0, r3
 800e12a:	f7fe fc8b 	bl	800ca44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e12e:	4b1d      	ldr	r3, [pc, #116]	; (800e1a4 <xTaskRemoveFromEventList+0xac>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d11c      	bne.n	800e170 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	3304      	adds	r3, #4
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7fe fc82 	bl	800ca44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e144:	2201      	movs	r2, #1
 800e146:	409a      	lsls	r2, r3
 800e148:	4b17      	ldr	r3, [pc, #92]	; (800e1a8 <xTaskRemoveFromEventList+0xb0>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4313      	orrs	r3, r2
 800e14e:	4a16      	ldr	r2, [pc, #88]	; (800e1a8 <xTaskRemoveFromEventList+0xb0>)
 800e150:	6013      	str	r3, [r2, #0]
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e156:	4613      	mov	r3, r2
 800e158:	009b      	lsls	r3, r3, #2
 800e15a:	4413      	add	r3, r2
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	4a13      	ldr	r2, [pc, #76]	; (800e1ac <xTaskRemoveFromEventList+0xb4>)
 800e160:	441a      	add	r2, r3
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	3304      	adds	r3, #4
 800e166:	4619      	mov	r1, r3
 800e168:	4610      	mov	r0, r2
 800e16a:	f7fe fc10 	bl	800c98e <vListInsertEnd>
 800e16e:	e005      	b.n	800e17c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	3318      	adds	r3, #24
 800e174:	4619      	mov	r1, r3
 800e176:	480e      	ldr	r0, [pc, #56]	; (800e1b0 <xTaskRemoveFromEventList+0xb8>)
 800e178:	f7fe fc09 	bl	800c98e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e180:	4b0c      	ldr	r3, [pc, #48]	; (800e1b4 <xTaskRemoveFromEventList+0xbc>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e186:	429a      	cmp	r2, r3
 800e188:	d905      	bls.n	800e196 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e18a:	2301      	movs	r3, #1
 800e18c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e18e:	4b0a      	ldr	r3, [pc, #40]	; (800e1b8 <xTaskRemoveFromEventList+0xc0>)
 800e190:	2201      	movs	r2, #1
 800e192:	601a      	str	r2, [r3, #0]
 800e194:	e001      	b.n	800e19a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e196:	2300      	movs	r3, #0
 800e198:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800e19a:	697b      	ldr	r3, [r7, #20]
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3718      	adds	r7, #24
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}
 800e1a4:	200023c4 	.word	0x200023c4
 800e1a8:	200023a4 	.word	0x200023a4
 800e1ac:	200022a0 	.word	0x200022a0
 800e1b0:	2000235c 	.word	0x2000235c
 800e1b4:	2000229c 	.word	0x2000229c
 800e1b8:	200023b0 	.word	0x200023b0

0800e1bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b083      	sub	sp, #12
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e1c4:	4b06      	ldr	r3, [pc, #24]	; (800e1e0 <vTaskInternalSetTimeOutState+0x24>)
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e1cc:	4b05      	ldr	r3, [pc, #20]	; (800e1e4 <vTaskInternalSetTimeOutState+0x28>)
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	605a      	str	r2, [r3, #4]
}
 800e1d4:	bf00      	nop
 800e1d6:	370c      	adds	r7, #12
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bc80      	pop	{r7}
 800e1dc:	4770      	bx	lr
 800e1de:	bf00      	nop
 800e1e0:	200023b4 	.word	0x200023b4
 800e1e4:	200023a0 	.word	0x200023a0

0800e1e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b088      	sub	sp, #32
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d10a      	bne.n	800e20e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fc:	f383 8811 	msr	BASEPRI, r3
 800e200:	f3bf 8f6f 	isb	sy
 800e204:	f3bf 8f4f 	dsb	sy
 800e208:	613b      	str	r3, [r7, #16]
}
 800e20a:	bf00      	nop
 800e20c:	e7fe      	b.n	800e20c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d10a      	bne.n	800e22a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e218:	f383 8811 	msr	BASEPRI, r3
 800e21c:	f3bf 8f6f 	isb	sy
 800e220:	f3bf 8f4f 	dsb	sy
 800e224:	60fb      	str	r3, [r7, #12]
}
 800e226:	bf00      	nop
 800e228:	e7fe      	b.n	800e228 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e22a:	f000 ffe7 	bl	800f1fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e22e:	4b1d      	ldr	r3, [pc, #116]	; (800e2a4 <xTaskCheckForTimeOut+0xbc>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	69ba      	ldr	r2, [r7, #24]
 800e23a:	1ad3      	subs	r3, r2, r3
 800e23c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e246:	d102      	bne.n	800e24e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e248:	2300      	movs	r3, #0
 800e24a:	61fb      	str	r3, [r7, #28]
 800e24c:	e023      	b.n	800e296 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	4b15      	ldr	r3, [pc, #84]	; (800e2a8 <xTaskCheckForTimeOut+0xc0>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	429a      	cmp	r2, r3
 800e258:	d007      	beq.n	800e26a <xTaskCheckForTimeOut+0x82>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	69ba      	ldr	r2, [r7, #24]
 800e260:	429a      	cmp	r2, r3
 800e262:	d302      	bcc.n	800e26a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e264:	2301      	movs	r3, #1
 800e266:	61fb      	str	r3, [r7, #28]
 800e268:	e015      	b.n	800e296 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	697a      	ldr	r2, [r7, #20]
 800e270:	429a      	cmp	r2, r3
 800e272:	d20b      	bcs.n	800e28c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	1ad2      	subs	r2, r2, r3
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f7ff ff9b 	bl	800e1bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e286:	2300      	movs	r3, #0
 800e288:	61fb      	str	r3, [r7, #28]
 800e28a:	e004      	b.n	800e296 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	2200      	movs	r2, #0
 800e290:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e292:	2301      	movs	r3, #1
 800e294:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e296:	f000 ffe1 	bl	800f25c <vPortExitCritical>

	return xReturn;
 800e29a:	69fb      	ldr	r3, [r7, #28]
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3720      	adds	r7, #32
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}
 800e2a4:	200023a0 	.word	0x200023a0
 800e2a8:	200023b4 	.word	0x200023b4

0800e2ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e2b0:	4b03      	ldr	r3, [pc, #12]	; (800e2c0 <vTaskMissedYield+0x14>)
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	601a      	str	r2, [r3, #0]
}
 800e2b6:	bf00      	nop
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bc80      	pop	{r7}
 800e2bc:	4770      	bx	lr
 800e2be:	bf00      	nop
 800e2c0:	200023b0 	.word	0x200023b0

0800e2c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e2cc:	f000 f852 	bl	800e374 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e2d0:	4b06      	ldr	r3, [pc, #24]	; (800e2ec <prvIdleTask+0x28>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d9f9      	bls.n	800e2cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800e2d8:	4b05      	ldr	r3, [pc, #20]	; (800e2f0 <prvIdleTask+0x2c>)
 800e2da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2de:	601a      	str	r2, [r3, #0]
 800e2e0:	f3bf 8f4f 	dsb	sy
 800e2e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e2e8:	e7f0      	b.n	800e2cc <prvIdleTask+0x8>
 800e2ea:	bf00      	nop
 800e2ec:	200022a0 	.word	0x200022a0
 800e2f0:	e000ed04 	.word	0xe000ed04

0800e2f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	607b      	str	r3, [r7, #4]
 800e2fe:	e00c      	b.n	800e31a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	4613      	mov	r3, r2
 800e304:	009b      	lsls	r3, r3, #2
 800e306:	4413      	add	r3, r2
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	4a12      	ldr	r2, [pc, #72]	; (800e354 <prvInitialiseTaskLists+0x60>)
 800e30c:	4413      	add	r3, r2
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fe fb12 	bl	800c938 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	3301      	adds	r3, #1
 800e318:	607b      	str	r3, [r7, #4]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2b06      	cmp	r3, #6
 800e31e:	d9ef      	bls.n	800e300 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e320:	480d      	ldr	r0, [pc, #52]	; (800e358 <prvInitialiseTaskLists+0x64>)
 800e322:	f7fe fb09 	bl	800c938 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e326:	480d      	ldr	r0, [pc, #52]	; (800e35c <prvInitialiseTaskLists+0x68>)
 800e328:	f7fe fb06 	bl	800c938 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e32c:	480c      	ldr	r0, [pc, #48]	; (800e360 <prvInitialiseTaskLists+0x6c>)
 800e32e:	f7fe fb03 	bl	800c938 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e332:	480c      	ldr	r0, [pc, #48]	; (800e364 <prvInitialiseTaskLists+0x70>)
 800e334:	f7fe fb00 	bl	800c938 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e338:	480b      	ldr	r0, [pc, #44]	; (800e368 <prvInitialiseTaskLists+0x74>)
 800e33a:	f7fe fafd 	bl	800c938 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e33e:	4b0b      	ldr	r3, [pc, #44]	; (800e36c <prvInitialiseTaskLists+0x78>)
 800e340:	4a05      	ldr	r2, [pc, #20]	; (800e358 <prvInitialiseTaskLists+0x64>)
 800e342:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e344:	4b0a      	ldr	r3, [pc, #40]	; (800e370 <prvInitialiseTaskLists+0x7c>)
 800e346:	4a05      	ldr	r2, [pc, #20]	; (800e35c <prvInitialiseTaskLists+0x68>)
 800e348:	601a      	str	r2, [r3, #0]
}
 800e34a:	bf00      	nop
 800e34c:	3708      	adds	r7, #8
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
 800e352:	bf00      	nop
 800e354:	200022a0 	.word	0x200022a0
 800e358:	2000232c 	.word	0x2000232c
 800e35c:	20002340 	.word	0x20002340
 800e360:	2000235c 	.word	0x2000235c
 800e364:	20002370 	.word	0x20002370
 800e368:	20002388 	.word	0x20002388
 800e36c:	20002354 	.word	0x20002354
 800e370:	20002358 	.word	0x20002358

0800e374 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e37a:	e019      	b.n	800e3b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e37c:	f000 ff3e 	bl	800f1fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e380:	4b10      	ldr	r3, [pc, #64]	; (800e3c4 <prvCheckTasksWaitingTermination+0x50>)
 800e382:	68db      	ldr	r3, [r3, #12]
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	3304      	adds	r3, #4
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7fe fb59 	bl	800ca44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e392:	4b0d      	ldr	r3, [pc, #52]	; (800e3c8 <prvCheckTasksWaitingTermination+0x54>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	3b01      	subs	r3, #1
 800e398:	4a0b      	ldr	r2, [pc, #44]	; (800e3c8 <prvCheckTasksWaitingTermination+0x54>)
 800e39a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e39c:	4b0b      	ldr	r3, [pc, #44]	; (800e3cc <prvCheckTasksWaitingTermination+0x58>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	3b01      	subs	r3, #1
 800e3a2:	4a0a      	ldr	r2, [pc, #40]	; (800e3cc <prvCheckTasksWaitingTermination+0x58>)
 800e3a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e3a6:	f000 ff59 	bl	800f25c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f000 f810 	bl	800e3d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3b0:	4b06      	ldr	r3, [pc, #24]	; (800e3cc <prvCheckTasksWaitingTermination+0x58>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d1e1      	bne.n	800e37c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e3b8:	bf00      	nop
 800e3ba:	bf00      	nop
 800e3bc:	3708      	adds	r7, #8
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	20002370 	.word	0x20002370
 800e3c8:	2000239c 	.word	0x2000239c
 800e3cc:	20002384 	.word	0x20002384

0800e3d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b084      	sub	sp, #16
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	334c      	adds	r3, #76	; 0x4c
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f001 fbc1 	bl	800fb64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d108      	bne.n	800e3fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f001 f8c7 	bl	800f584 <vPortFree>
				vPortFree( pxTCB );
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f001 f8c4 	bl	800f584 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e3fc:	e018      	b.n	800e430 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e404:	2b01      	cmp	r3, #1
 800e406:	d103      	bne.n	800e410 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f001 f8bb 	bl	800f584 <vPortFree>
	}
 800e40e:	e00f      	b.n	800e430 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e416:	2b02      	cmp	r3, #2
 800e418:	d00a      	beq.n	800e430 <prvDeleteTCB+0x60>
	__asm volatile
 800e41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e41e:	f383 8811 	msr	BASEPRI, r3
 800e422:	f3bf 8f6f 	isb	sy
 800e426:	f3bf 8f4f 	dsb	sy
 800e42a:	60fb      	str	r3, [r7, #12]
}
 800e42c:	bf00      	nop
 800e42e:	e7fe      	b.n	800e42e <prvDeleteTCB+0x5e>
	}
 800e430:	bf00      	nop
 800e432:	3710      	adds	r7, #16
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}

0800e438 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e438:	b480      	push	{r7}
 800e43a:	b083      	sub	sp, #12
 800e43c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e43e:	4b0e      	ldr	r3, [pc, #56]	; (800e478 <prvResetNextTaskUnblockTime+0x40>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d101      	bne.n	800e44c <prvResetNextTaskUnblockTime+0x14>
 800e448:	2301      	movs	r3, #1
 800e44a:	e000      	b.n	800e44e <prvResetNextTaskUnblockTime+0x16>
 800e44c:	2300      	movs	r3, #0
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d004      	beq.n	800e45c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e452:	4b0a      	ldr	r3, [pc, #40]	; (800e47c <prvResetNextTaskUnblockTime+0x44>)
 800e454:	f04f 32ff 	mov.w	r2, #4294967295
 800e458:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e45a:	e008      	b.n	800e46e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e45c:	4b06      	ldr	r3, [pc, #24]	; (800e478 <prvResetNextTaskUnblockTime+0x40>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	68db      	ldr	r3, [r3, #12]
 800e462:	68db      	ldr	r3, [r3, #12]
 800e464:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	4a04      	ldr	r2, [pc, #16]	; (800e47c <prvResetNextTaskUnblockTime+0x44>)
 800e46c:	6013      	str	r3, [r2, #0]
}
 800e46e:	bf00      	nop
 800e470:	370c      	adds	r7, #12
 800e472:	46bd      	mov	sp, r7
 800e474:	bc80      	pop	{r7}
 800e476:	4770      	bx	lr
 800e478:	20002354 	.word	0x20002354
 800e47c:	200023bc 	.word	0x200023bc

0800e480 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e480:	b480      	push	{r7}
 800e482:	b083      	sub	sp, #12
 800e484:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e486:	4b0b      	ldr	r3, [pc, #44]	; (800e4b4 <xTaskGetSchedulerState+0x34>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d102      	bne.n	800e494 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e48e:	2301      	movs	r3, #1
 800e490:	607b      	str	r3, [r7, #4]
 800e492:	e008      	b.n	800e4a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e494:	4b08      	ldr	r3, [pc, #32]	; (800e4b8 <xTaskGetSchedulerState+0x38>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d102      	bne.n	800e4a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e49c:	2302      	movs	r3, #2
 800e49e:	607b      	str	r3, [r7, #4]
 800e4a0:	e001      	b.n	800e4a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e4a6:	687b      	ldr	r3, [r7, #4]
	}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	370c      	adds	r7, #12
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bc80      	pop	{r7}
 800e4b0:	4770      	bx	lr
 800e4b2:	bf00      	nop
 800e4b4:	200023a8 	.word	0x200023a8
 800e4b8:	200023c4 	.word	0x200023c4

0800e4bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d06e      	beq.n	800e5b0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4d6:	4b39      	ldr	r3, [pc, #228]	; (800e5bc <xTaskPriorityInherit+0x100>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d25e      	bcs.n	800e59e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	699b      	ldr	r3, [r3, #24]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	db06      	blt.n	800e4f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4e8:	4b34      	ldr	r3, [pc, #208]	; (800e5bc <xTaskPriorityInherit+0x100>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ee:	f1c3 0207 	rsb	r2, r3, #7
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	6959      	ldr	r1, [r3, #20]
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4fe:	4613      	mov	r3, r2
 800e500:	009b      	lsls	r3, r3, #2
 800e502:	4413      	add	r3, r2
 800e504:	009b      	lsls	r3, r3, #2
 800e506:	4a2e      	ldr	r2, [pc, #184]	; (800e5c0 <xTaskPriorityInherit+0x104>)
 800e508:	4413      	add	r3, r2
 800e50a:	4299      	cmp	r1, r3
 800e50c:	d101      	bne.n	800e512 <xTaskPriorityInherit+0x56>
 800e50e:	2301      	movs	r3, #1
 800e510:	e000      	b.n	800e514 <xTaskPriorityInherit+0x58>
 800e512:	2300      	movs	r3, #0
 800e514:	2b00      	cmp	r3, #0
 800e516:	d03a      	beq.n	800e58e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	3304      	adds	r3, #4
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7fe fa91 	bl	800ca44 <uxListRemove>
 800e522:	4603      	mov	r3, r0
 800e524:	2b00      	cmp	r3, #0
 800e526:	d115      	bne.n	800e554 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e52c:	4924      	ldr	r1, [pc, #144]	; (800e5c0 <xTaskPriorityInherit+0x104>)
 800e52e:	4613      	mov	r3, r2
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	4413      	add	r3, r2
 800e534:	009b      	lsls	r3, r3, #2
 800e536:	440b      	add	r3, r1
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d10a      	bne.n	800e554 <xTaskPriorityInherit+0x98>
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e542:	2201      	movs	r2, #1
 800e544:	fa02 f303 	lsl.w	r3, r2, r3
 800e548:	43da      	mvns	r2, r3
 800e54a:	4b1e      	ldr	r3, [pc, #120]	; (800e5c4 <xTaskPriorityInherit+0x108>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	4013      	ands	r3, r2
 800e550:	4a1c      	ldr	r2, [pc, #112]	; (800e5c4 <xTaskPriorityInherit+0x108>)
 800e552:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e554:	4b19      	ldr	r3, [pc, #100]	; (800e5bc <xTaskPriorityInherit+0x100>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e562:	2201      	movs	r2, #1
 800e564:	409a      	lsls	r2, r3
 800e566:	4b17      	ldr	r3, [pc, #92]	; (800e5c4 <xTaskPriorityInherit+0x108>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4313      	orrs	r3, r2
 800e56c:	4a15      	ldr	r2, [pc, #84]	; (800e5c4 <xTaskPriorityInherit+0x108>)
 800e56e:	6013      	str	r3, [r2, #0]
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e574:	4613      	mov	r3, r2
 800e576:	009b      	lsls	r3, r3, #2
 800e578:	4413      	add	r3, r2
 800e57a:	009b      	lsls	r3, r3, #2
 800e57c:	4a10      	ldr	r2, [pc, #64]	; (800e5c0 <xTaskPriorityInherit+0x104>)
 800e57e:	441a      	add	r2, r3
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	3304      	adds	r3, #4
 800e584:	4619      	mov	r1, r3
 800e586:	4610      	mov	r0, r2
 800e588:	f7fe fa01 	bl	800c98e <vListInsertEnd>
 800e58c:	e004      	b.n	800e598 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e58e:	4b0b      	ldr	r3, [pc, #44]	; (800e5bc <xTaskPriorityInherit+0x100>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e598:	2301      	movs	r3, #1
 800e59a:	60fb      	str	r3, [r7, #12]
 800e59c:	e008      	b.n	800e5b0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5a2:	4b06      	ldr	r3, [pc, #24]	; (800e5bc <xTaskPriorityInherit+0x100>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d201      	bcs.n	800e5b0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
	}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3710      	adds	r7, #16
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	2000229c 	.word	0x2000229c
 800e5c0:	200022a0 	.word	0x200022a0
 800e5c4:	200023a4 	.word	0x200023a4

0800e5c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b086      	sub	sp, #24
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d06e      	beq.n	800e6bc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e5de:	4b3a      	ldr	r3, [pc, #232]	; (800e6c8 <xTaskPriorityDisinherit+0x100>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	693a      	ldr	r2, [r7, #16]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d00a      	beq.n	800e5fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ec:	f383 8811 	msr	BASEPRI, r3
 800e5f0:	f3bf 8f6f 	isb	sy
 800e5f4:	f3bf 8f4f 	dsb	sy
 800e5f8:	60fb      	str	r3, [r7, #12]
}
 800e5fa:	bf00      	nop
 800e5fc:	e7fe      	b.n	800e5fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e602:	2b00      	cmp	r3, #0
 800e604:	d10a      	bne.n	800e61c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e60a:	f383 8811 	msr	BASEPRI, r3
 800e60e:	f3bf 8f6f 	isb	sy
 800e612:	f3bf 8f4f 	dsb	sy
 800e616:	60bb      	str	r3, [r7, #8]
}
 800e618:	bf00      	nop
 800e61a:	e7fe      	b.n	800e61a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e620:	1e5a      	subs	r2, r3, #1
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e62e:	429a      	cmp	r2, r3
 800e630:	d044      	beq.n	800e6bc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e636:	2b00      	cmp	r3, #0
 800e638:	d140      	bne.n	800e6bc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	3304      	adds	r3, #4
 800e63e:	4618      	mov	r0, r3
 800e640:	f7fe fa00 	bl	800ca44 <uxListRemove>
 800e644:	4603      	mov	r3, r0
 800e646:	2b00      	cmp	r3, #0
 800e648:	d115      	bne.n	800e676 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e64e:	491f      	ldr	r1, [pc, #124]	; (800e6cc <xTaskPriorityDisinherit+0x104>)
 800e650:	4613      	mov	r3, r2
 800e652:	009b      	lsls	r3, r3, #2
 800e654:	4413      	add	r3, r2
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	440b      	add	r3, r1
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d10a      	bne.n	800e676 <xTaskPriorityDisinherit+0xae>
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e664:	2201      	movs	r2, #1
 800e666:	fa02 f303 	lsl.w	r3, r2, r3
 800e66a:	43da      	mvns	r2, r3
 800e66c:	4b18      	ldr	r3, [pc, #96]	; (800e6d0 <xTaskPriorityDisinherit+0x108>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	4013      	ands	r3, r2
 800e672:	4a17      	ldr	r2, [pc, #92]	; (800e6d0 <xTaskPriorityDisinherit+0x108>)
 800e674:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e682:	f1c3 0207 	rsb	r2, r3, #7
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e68e:	2201      	movs	r2, #1
 800e690:	409a      	lsls	r2, r3
 800e692:	4b0f      	ldr	r3, [pc, #60]	; (800e6d0 <xTaskPriorityDisinherit+0x108>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4313      	orrs	r3, r2
 800e698:	4a0d      	ldr	r2, [pc, #52]	; (800e6d0 <xTaskPriorityDisinherit+0x108>)
 800e69a:	6013      	str	r3, [r2, #0]
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	4413      	add	r3, r2
 800e6a6:	009b      	lsls	r3, r3, #2
 800e6a8:	4a08      	ldr	r2, [pc, #32]	; (800e6cc <xTaskPriorityDisinherit+0x104>)
 800e6aa:	441a      	add	r2, r3
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	3304      	adds	r3, #4
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	4610      	mov	r0, r2
 800e6b4:	f7fe f96b 	bl	800c98e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e6bc:	697b      	ldr	r3, [r7, #20]
	}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3718      	adds	r7, #24
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	2000229c 	.word	0x2000229c
 800e6cc:	200022a0 	.word	0x200022a0
 800e6d0:	200023a4 	.word	0x200023a4

0800e6d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b088      	sub	sp, #32
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	f000 8088 	beq.w	800e7fe <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e6ee:	69bb      	ldr	r3, [r7, #24]
 800e6f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d10a      	bne.n	800e70c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fa:	f383 8811 	msr	BASEPRI, r3
 800e6fe:	f3bf 8f6f 	isb	sy
 800e702:	f3bf 8f4f 	dsb	sy
 800e706:	60fb      	str	r3, [r7, #12]
}
 800e708:	bf00      	nop
 800e70a:	e7fe      	b.n	800e70a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e70c:	69bb      	ldr	r3, [r7, #24]
 800e70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e710:	683a      	ldr	r2, [r7, #0]
 800e712:	429a      	cmp	r2, r3
 800e714:	d902      	bls.n	800e71c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	61fb      	str	r3, [r7, #28]
 800e71a:	e002      	b.n	800e722 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e720:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e722:	69bb      	ldr	r3, [r7, #24]
 800e724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e726:	69fa      	ldr	r2, [r7, #28]
 800e728:	429a      	cmp	r2, r3
 800e72a:	d068      	beq.n	800e7fe <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e72c:	69bb      	ldr	r3, [r7, #24]
 800e72e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e730:	697a      	ldr	r2, [r7, #20]
 800e732:	429a      	cmp	r2, r3
 800e734:	d163      	bne.n	800e7fe <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e736:	4b34      	ldr	r3, [pc, #208]	; (800e808 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	69ba      	ldr	r2, [r7, #24]
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d10a      	bne.n	800e756 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800e740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e744:	f383 8811 	msr	BASEPRI, r3
 800e748:	f3bf 8f6f 	isb	sy
 800e74c:	f3bf 8f4f 	dsb	sy
 800e750:	60bb      	str	r3, [r7, #8]
}
 800e752:	bf00      	nop
 800e754:	e7fe      	b.n	800e754 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e756:	69bb      	ldr	r3, [r7, #24]
 800e758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e75a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e75c:	69bb      	ldr	r3, [r7, #24]
 800e75e:	69fa      	ldr	r2, [r7, #28]
 800e760:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e762:	69bb      	ldr	r3, [r7, #24]
 800e764:	699b      	ldr	r3, [r3, #24]
 800e766:	2b00      	cmp	r3, #0
 800e768:	db04      	blt.n	800e774 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	f1c3 0207 	rsb	r2, r3, #7
 800e770:	69bb      	ldr	r3, [r7, #24]
 800e772:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e774:	69bb      	ldr	r3, [r7, #24]
 800e776:	6959      	ldr	r1, [r3, #20]
 800e778:	693a      	ldr	r2, [r7, #16]
 800e77a:	4613      	mov	r3, r2
 800e77c:	009b      	lsls	r3, r3, #2
 800e77e:	4413      	add	r3, r2
 800e780:	009b      	lsls	r3, r3, #2
 800e782:	4a22      	ldr	r2, [pc, #136]	; (800e80c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e784:	4413      	add	r3, r2
 800e786:	4299      	cmp	r1, r3
 800e788:	d101      	bne.n	800e78e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800e78a:	2301      	movs	r3, #1
 800e78c:	e000      	b.n	800e790 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800e78e:	2300      	movs	r3, #0
 800e790:	2b00      	cmp	r3, #0
 800e792:	d034      	beq.n	800e7fe <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e794:	69bb      	ldr	r3, [r7, #24]
 800e796:	3304      	adds	r3, #4
 800e798:	4618      	mov	r0, r3
 800e79a:	f7fe f953 	bl	800ca44 <uxListRemove>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d115      	bne.n	800e7d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e7a4:	69bb      	ldr	r3, [r7, #24]
 800e7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7a8:	4918      	ldr	r1, [pc, #96]	; (800e80c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e7aa:	4613      	mov	r3, r2
 800e7ac:	009b      	lsls	r3, r3, #2
 800e7ae:	4413      	add	r3, r2
 800e7b0:	009b      	lsls	r3, r3, #2
 800e7b2:	440b      	add	r3, r1
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d10a      	bne.n	800e7d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7be:	2201      	movs	r2, #1
 800e7c0:	fa02 f303 	lsl.w	r3, r2, r3
 800e7c4:	43da      	mvns	r2, r3
 800e7c6:	4b12      	ldr	r3, [pc, #72]	; (800e810 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	4013      	ands	r3, r2
 800e7cc:	4a10      	ldr	r2, [pc, #64]	; (800e810 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800e7ce:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e7d0:	69bb      	ldr	r3, [r7, #24]
 800e7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	409a      	lsls	r2, r3
 800e7d8:	4b0d      	ldr	r3, [pc, #52]	; (800e810 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	4313      	orrs	r3, r2
 800e7de:	4a0c      	ldr	r2, [pc, #48]	; (800e810 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800e7e0:	6013      	str	r3, [r2, #0]
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	009b      	lsls	r3, r3, #2
 800e7ea:	4413      	add	r3, r2
 800e7ec:	009b      	lsls	r3, r3, #2
 800e7ee:	4a07      	ldr	r2, [pc, #28]	; (800e80c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e7f0:	441a      	add	r2, r3
 800e7f2:	69bb      	ldr	r3, [r7, #24]
 800e7f4:	3304      	adds	r3, #4
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	4610      	mov	r0, r2
 800e7fa:	f7fe f8c8 	bl	800c98e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e7fe:	bf00      	nop
 800e800:	3720      	adds	r7, #32
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	2000229c 	.word	0x2000229c
 800e80c:	200022a0 	.word	0x200022a0
 800e810:	200023a4 	.word	0x200023a4

0800e814 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800e814:	b480      	push	{r7}
 800e816:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e818:	4b07      	ldr	r3, [pc, #28]	; (800e838 <pvTaskIncrementMutexHeldCount+0x24>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d004      	beq.n	800e82a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e820:	4b05      	ldr	r3, [pc, #20]	; (800e838 <pvTaskIncrementMutexHeldCount+0x24>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e826:	3201      	adds	r2, #1
 800e828:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e82a:	4b03      	ldr	r3, [pc, #12]	; (800e838 <pvTaskIncrementMutexHeldCount+0x24>)
 800e82c:	681b      	ldr	r3, [r3, #0]
	}
 800e82e:	4618      	mov	r0, r3
 800e830:	46bd      	mov	sp, r7
 800e832:	bc80      	pop	{r7}
 800e834:	4770      	bx	lr
 800e836:	bf00      	nop
 800e838:	2000229c 	.word	0x2000229c

0800e83c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e846:	4b29      	ldr	r3, [pc, #164]	; (800e8ec <prvAddCurrentTaskToDelayedList+0xb0>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e84c:	4b28      	ldr	r3, [pc, #160]	; (800e8f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	3304      	adds	r3, #4
 800e852:	4618      	mov	r0, r3
 800e854:	f7fe f8f6 	bl	800ca44 <uxListRemove>
 800e858:	4603      	mov	r3, r0
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d10b      	bne.n	800e876 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800e85e:	4b24      	ldr	r3, [pc, #144]	; (800e8f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e864:	2201      	movs	r2, #1
 800e866:	fa02 f303 	lsl.w	r3, r2, r3
 800e86a:	43da      	mvns	r2, r3
 800e86c:	4b21      	ldr	r3, [pc, #132]	; (800e8f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4013      	ands	r3, r2
 800e872:	4a20      	ldr	r2, [pc, #128]	; (800e8f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e874:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e87c:	d10a      	bne.n	800e894 <prvAddCurrentTaskToDelayedList+0x58>
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d007      	beq.n	800e894 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e884:	4b1a      	ldr	r3, [pc, #104]	; (800e8f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	3304      	adds	r3, #4
 800e88a:	4619      	mov	r1, r3
 800e88c:	481a      	ldr	r0, [pc, #104]	; (800e8f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e88e:	f7fe f87e 	bl	800c98e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e892:	e026      	b.n	800e8e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e894:	68fa      	ldr	r2, [r7, #12]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	4413      	add	r3, r2
 800e89a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e89c:	4b14      	ldr	r3, [pc, #80]	; (800e8f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	68ba      	ldr	r2, [r7, #8]
 800e8a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e8a4:	68ba      	ldr	r2, [r7, #8]
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d209      	bcs.n	800e8c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8ac:	4b13      	ldr	r3, [pc, #76]	; (800e8fc <prvAddCurrentTaskToDelayedList+0xc0>)
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	4b0f      	ldr	r3, [pc, #60]	; (800e8f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	3304      	adds	r3, #4
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	4610      	mov	r0, r2
 800e8ba:	f7fe f88b 	bl	800c9d4 <vListInsert>
}
 800e8be:	e010      	b.n	800e8e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8c0:	4b0f      	ldr	r3, [pc, #60]	; (800e900 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e8c2:	681a      	ldr	r2, [r3, #0]
 800e8c4:	4b0a      	ldr	r3, [pc, #40]	; (800e8f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	3304      	adds	r3, #4
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	4610      	mov	r0, r2
 800e8ce:	f7fe f881 	bl	800c9d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e8d2:	4b0c      	ldr	r3, [pc, #48]	; (800e904 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	68ba      	ldr	r2, [r7, #8]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d202      	bcs.n	800e8e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e8dc:	4a09      	ldr	r2, [pc, #36]	; (800e904 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	6013      	str	r3, [r2, #0]
}
 800e8e2:	bf00      	nop
 800e8e4:	3710      	adds	r7, #16
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	200023a0 	.word	0x200023a0
 800e8f0:	2000229c 	.word	0x2000229c
 800e8f4:	200023a4 	.word	0x200023a4
 800e8f8:	20002388 	.word	0x20002388
 800e8fc:	20002358 	.word	0x20002358
 800e900:	20002354 	.word	0x20002354
 800e904:	200023bc 	.word	0x200023bc

0800e908 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b08a      	sub	sp, #40	; 0x28
 800e90c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e90e:	2300      	movs	r3, #0
 800e910:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e912:	f000 fb41 	bl	800ef98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e916:	4b1c      	ldr	r3, [pc, #112]	; (800e988 <xTimerCreateTimerTask+0x80>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d021      	beq.n	800e962 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e91e:	2300      	movs	r3, #0
 800e920:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e922:	2300      	movs	r3, #0
 800e924:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e926:	1d3a      	adds	r2, r7, #4
 800e928:	f107 0108 	add.w	r1, r7, #8
 800e92c:	f107 030c 	add.w	r3, r7, #12
 800e930:	4618      	mov	r0, r3
 800e932:	f7f3 fa63 	bl	8001dfc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e936:	6879      	ldr	r1, [r7, #4]
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	68fa      	ldr	r2, [r7, #12]
 800e93c:	9202      	str	r2, [sp, #8]
 800e93e:	9301      	str	r3, [sp, #4]
 800e940:	2302      	movs	r3, #2
 800e942:	9300      	str	r3, [sp, #0]
 800e944:	2300      	movs	r3, #0
 800e946:	460a      	mov	r2, r1
 800e948:	4910      	ldr	r1, [pc, #64]	; (800e98c <xTimerCreateTimerTask+0x84>)
 800e94a:	4811      	ldr	r0, [pc, #68]	; (800e990 <xTimerCreateTimerTask+0x88>)
 800e94c:	f7fe ff66 	bl	800d81c <xTaskCreateStatic>
 800e950:	4603      	mov	r3, r0
 800e952:	4a10      	ldr	r2, [pc, #64]	; (800e994 <xTimerCreateTimerTask+0x8c>)
 800e954:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e956:	4b0f      	ldr	r3, [pc, #60]	; (800e994 <xTimerCreateTimerTask+0x8c>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d001      	beq.n	800e962 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e95e:	2301      	movs	r3, #1
 800e960:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d10a      	bne.n	800e97e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e96c:	f383 8811 	msr	BASEPRI, r3
 800e970:	f3bf 8f6f 	isb	sy
 800e974:	f3bf 8f4f 	dsb	sy
 800e978:	613b      	str	r3, [r7, #16]
}
 800e97a:	bf00      	nop
 800e97c:	e7fe      	b.n	800e97c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e97e:	697b      	ldr	r3, [r7, #20]
}
 800e980:	4618      	mov	r0, r3
 800e982:	3718      	adds	r7, #24
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}
 800e988:	200023f8 	.word	0x200023f8
 800e98c:	0801304c 	.word	0x0801304c
 800e990:	0800ebd5 	.word	0x0800ebd5
 800e994:	200023fc 	.word	0x200023fc

0800e998 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b088      	sub	sp, #32
 800e99c:	af02      	add	r7, sp, #8
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	607a      	str	r2, [r7, #4]
 800e9a4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800e9a6:	202c      	movs	r0, #44	; 0x2c
 800e9a8:	f000 fd28 	bl	800f3fc <pvPortMalloc>
 800e9ac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d00d      	beq.n	800e9d0 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	9301      	str	r3, [sp, #4]
 800e9b8:	6a3b      	ldr	r3, [r7, #32]
 800e9ba:	9300      	str	r3, [sp, #0]
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	687a      	ldr	r2, [r7, #4]
 800e9c0:	68b9      	ldr	r1, [r7, #8]
 800e9c2:	68f8      	ldr	r0, [r7, #12]
 800e9c4:	f000 f846 	bl	800ea54 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800e9d0:	697b      	ldr	r3, [r7, #20]
	}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3718      	adds	r7, #24
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}

0800e9da <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800e9da:	b580      	push	{r7, lr}
 800e9dc:	b08a      	sub	sp, #40	; 0x28
 800e9de:	af02      	add	r7, sp, #8
 800e9e0:	60f8      	str	r0, [r7, #12]
 800e9e2:	60b9      	str	r1, [r7, #8]
 800e9e4:	607a      	str	r2, [r7, #4]
 800e9e6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800e9e8:	232c      	movs	r3, #44	; 0x2c
 800e9ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800e9ec:	693b      	ldr	r3, [r7, #16]
 800e9ee:	2b2c      	cmp	r3, #44	; 0x2c
 800e9f0:	d00a      	beq.n	800ea08 <xTimerCreateStatic+0x2e>
	__asm volatile
 800e9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f6:	f383 8811 	msr	BASEPRI, r3
 800e9fa:	f3bf 8f6f 	isb	sy
 800e9fe:	f3bf 8f4f 	dsb	sy
 800ea02:	61bb      	str	r3, [r7, #24]
}
 800ea04:	bf00      	nop
 800ea06:	e7fe      	b.n	800ea06 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800ea08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d10a      	bne.n	800ea24 <xTimerCreateStatic+0x4a>
	__asm volatile
 800ea0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea12:	f383 8811 	msr	BASEPRI, r3
 800ea16:	f3bf 8f6f 	isb	sy
 800ea1a:	f3bf 8f4f 	dsb	sy
 800ea1e:	617b      	str	r3, [r7, #20]
}
 800ea20:	bf00      	nop
 800ea22:	e7fe      	b.n	800ea22 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ea24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea26:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800ea28:	69fb      	ldr	r3, [r7, #28]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d00d      	beq.n	800ea4a <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ea2e:	69fb      	ldr	r3, [r7, #28]
 800ea30:	9301      	str	r3, [sp, #4]
 800ea32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea34:	9300      	str	r3, [sp, #0]
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	68b9      	ldr	r1, [r7, #8]
 800ea3c:	68f8      	ldr	r0, [r7, #12]
 800ea3e:	f000 f809 	bl	800ea54 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	2201      	movs	r2, #1
 800ea46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800ea4a:	69fb      	ldr	r3, [r7, #28]
	}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3720      	adds	r7, #32
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b086      	sub	sp, #24
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	60b9      	str	r1, [r7, #8]
 800ea5e:	607a      	str	r2, [r7, #4]
 800ea60:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d10a      	bne.n	800ea7e <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800ea68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea6c:	f383 8811 	msr	BASEPRI, r3
 800ea70:	f3bf 8f6f 	isb	sy
 800ea74:	f3bf 8f4f 	dsb	sy
 800ea78:	617b      	str	r3, [r7, #20]
}
 800ea7a:	bf00      	nop
 800ea7c:	e7fe      	b.n	800ea7c <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ea7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d015      	beq.n	800eab0 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ea84:	f000 fa88 	bl	800ef98 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ea88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8a:	68fa      	ldr	r2, [r7, #12]
 800ea8c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ea8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea90:	68ba      	ldr	r2, [r7, #8]
 800ea92:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800ea94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea96:	687a      	ldr	r2, [r7, #4]
 800ea98:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800ea9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9c:	683a      	ldr	r2, [r7, #0]
 800ea9e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800eaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa2:	6a3a      	ldr	r2, [r7, #32]
 800eaa4:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800eaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa8:	3304      	adds	r3, #4
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7fd ff63 	bl	800c976 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800eab0:	bf00      	nop
 800eab2:	3718      	adds	r7, #24
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b08a      	sub	sp, #40	; 0x28
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	60f8      	str	r0, [r7, #12]
 800eac0:	60b9      	str	r1, [r7, #8]
 800eac2:	607a      	str	r2, [r7, #4]
 800eac4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800eac6:	2300      	movs	r3, #0
 800eac8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d10a      	bne.n	800eae6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ead0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead4:	f383 8811 	msr	BASEPRI, r3
 800ead8:	f3bf 8f6f 	isb	sy
 800eadc:	f3bf 8f4f 	dsb	sy
 800eae0:	623b      	str	r3, [r7, #32]
}
 800eae2:	bf00      	nop
 800eae4:	e7fe      	b.n	800eae4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eae6:	4b1a      	ldr	r3, [pc, #104]	; (800eb50 <xTimerGenericCommand+0x98>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d02a      	beq.n	800eb44 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	2b05      	cmp	r3, #5
 800eafe:	dc18      	bgt.n	800eb32 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eb00:	f7ff fcbe 	bl	800e480 <xTaskGetSchedulerState>
 800eb04:	4603      	mov	r3, r0
 800eb06:	2b02      	cmp	r3, #2
 800eb08:	d109      	bne.n	800eb1e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eb0a:	4b11      	ldr	r3, [pc, #68]	; (800eb50 <xTimerGenericCommand+0x98>)
 800eb0c:	6818      	ldr	r0, [r3, #0]
 800eb0e:	f107 0114 	add.w	r1, r7, #20
 800eb12:	2300      	movs	r3, #0
 800eb14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb16:	f7fe f8fb 	bl	800cd10 <xQueueGenericSend>
 800eb1a:	6278      	str	r0, [r7, #36]	; 0x24
 800eb1c:	e012      	b.n	800eb44 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eb1e:	4b0c      	ldr	r3, [pc, #48]	; (800eb50 <xTimerGenericCommand+0x98>)
 800eb20:	6818      	ldr	r0, [r3, #0]
 800eb22:	f107 0114 	add.w	r1, r7, #20
 800eb26:	2300      	movs	r3, #0
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f7fe f8f1 	bl	800cd10 <xQueueGenericSend>
 800eb2e:	6278      	str	r0, [r7, #36]	; 0x24
 800eb30:	e008      	b.n	800eb44 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eb32:	4b07      	ldr	r3, [pc, #28]	; (800eb50 <xTimerGenericCommand+0x98>)
 800eb34:	6818      	ldr	r0, [r3, #0]
 800eb36:	f107 0114 	add.w	r1, r7, #20
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	683a      	ldr	r2, [r7, #0]
 800eb3e:	f7fe f9e5 	bl	800cf0c <xQueueGenericSendFromISR>
 800eb42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3728      	adds	r7, #40	; 0x28
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	200023f8 	.word	0x200023f8

0800eb54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b088      	sub	sp, #32
 800eb58:	af02      	add	r7, sp, #8
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eb5e:	4b1c      	ldr	r3, [pc, #112]	; (800ebd0 <prvProcessExpiredTimer+0x7c>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	68db      	ldr	r3, [r3, #12]
 800eb64:	68db      	ldr	r3, [r3, #12]
 800eb66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	3304      	adds	r3, #4
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7fd ff69 	bl	800ca44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	69db      	ldr	r3, [r3, #28]
 800eb76:	2b01      	cmp	r3, #1
 800eb78:	d122      	bne.n	800ebc0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	699a      	ldr	r2, [r3, #24]
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	18d1      	adds	r1, r2, r3
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	683a      	ldr	r2, [r7, #0]
 800eb86:	6978      	ldr	r0, [r7, #20]
 800eb88:	f000 f8c8 	bl	800ed1c <prvInsertTimerInActiveList>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d016      	beq.n	800ebc0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb92:	2300      	movs	r3, #0
 800eb94:	9300      	str	r3, [sp, #0]
 800eb96:	2300      	movs	r3, #0
 800eb98:	687a      	ldr	r2, [r7, #4]
 800eb9a:	2100      	movs	r1, #0
 800eb9c:	6978      	ldr	r0, [r7, #20]
 800eb9e:	f7ff ff8b 	bl	800eab8 <xTimerGenericCommand>
 800eba2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d10a      	bne.n	800ebc0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800ebaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebae:	f383 8811 	msr	BASEPRI, r3
 800ebb2:	f3bf 8f6f 	isb	sy
 800ebb6:	f3bf 8f4f 	dsb	sy
 800ebba:	60fb      	str	r3, [r7, #12]
}
 800ebbc:	bf00      	nop
 800ebbe:	e7fe      	b.n	800ebbe <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc4:	6978      	ldr	r0, [r7, #20]
 800ebc6:	4798      	blx	r3
}
 800ebc8:	bf00      	nop
 800ebca:	3718      	adds	r7, #24
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}
 800ebd0:	200023f0 	.word	0x200023f0

0800ebd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ebdc:	f107 0308 	add.w	r3, r7, #8
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f000 f857 	bl	800ec94 <prvGetNextExpireTime>
 800ebe6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	4619      	mov	r1, r3
 800ebec:	68f8      	ldr	r0, [r7, #12]
 800ebee:	f000 f803 	bl	800ebf8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ebf2:	f000 f8d5 	bl	800eda0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ebf6:	e7f1      	b.n	800ebdc <prvTimerTask+0x8>

0800ebf8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b084      	sub	sp, #16
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ec02:	f7ff f851 	bl	800dca8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec06:	f107 0308 	add.w	r3, r7, #8
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f000 f866 	bl	800ecdc <prvSampleTimeNow>
 800ec10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d130      	bne.n	800ec7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d10a      	bne.n	800ec34 <prvProcessTimerOrBlockTask+0x3c>
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d806      	bhi.n	800ec34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ec26:	f7ff f84d 	bl	800dcc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ec2a:	68f9      	ldr	r1, [r7, #12]
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f7ff ff91 	bl	800eb54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ec32:	e024      	b.n	800ec7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d008      	beq.n	800ec4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ec3a:	4b13      	ldr	r3, [pc, #76]	; (800ec88 <prvProcessTimerOrBlockTask+0x90>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	bf0c      	ite	eq
 800ec44:	2301      	moveq	r3, #1
 800ec46:	2300      	movne	r3, #0
 800ec48:	b2db      	uxtb	r3, r3
 800ec4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ec4c:	4b0f      	ldr	r3, [pc, #60]	; (800ec8c <prvProcessTimerOrBlockTask+0x94>)
 800ec4e:	6818      	ldr	r0, [r3, #0]
 800ec50:	687a      	ldr	r2, [r7, #4]
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	1ad3      	subs	r3, r2, r3
 800ec56:	683a      	ldr	r2, [r7, #0]
 800ec58:	4619      	mov	r1, r3
 800ec5a:	f7fe fdab 	bl	800d7b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ec5e:	f7ff f831 	bl	800dcc4 <xTaskResumeAll>
 800ec62:	4603      	mov	r3, r0
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d10a      	bne.n	800ec7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ec68:	4b09      	ldr	r3, [pc, #36]	; (800ec90 <prvProcessTimerOrBlockTask+0x98>)
 800ec6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec6e:	601a      	str	r2, [r3, #0]
 800ec70:	f3bf 8f4f 	dsb	sy
 800ec74:	f3bf 8f6f 	isb	sy
}
 800ec78:	e001      	b.n	800ec7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ec7a:	f7ff f823 	bl	800dcc4 <xTaskResumeAll>
}
 800ec7e:	bf00      	nop
 800ec80:	3710      	adds	r7, #16
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	200023f4 	.word	0x200023f4
 800ec8c:	200023f8 	.word	0x200023f8
 800ec90:	e000ed04 	.word	0xe000ed04

0800ec94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ec94:	b480      	push	{r7}
 800ec96:	b085      	sub	sp, #20
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ec9c:	4b0e      	ldr	r3, [pc, #56]	; (800ecd8 <prvGetNextExpireTime+0x44>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	bf0c      	ite	eq
 800eca6:	2301      	moveq	r3, #1
 800eca8:	2300      	movne	r3, #0
 800ecaa:	b2db      	uxtb	r3, r3
 800ecac:	461a      	mov	r2, r3
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d105      	bne.n	800ecc6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ecba:	4b07      	ldr	r3, [pc, #28]	; (800ecd8 <prvGetNextExpireTime+0x44>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	68db      	ldr	r3, [r3, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	60fb      	str	r3, [r7, #12]
 800ecc4:	e001      	b.n	800ecca <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ecca:	68fb      	ldr	r3, [r7, #12]
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3714      	adds	r7, #20
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bc80      	pop	{r7}
 800ecd4:	4770      	bx	lr
 800ecd6:	bf00      	nop
 800ecd8:	200023f0 	.word	0x200023f0

0800ecdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b084      	sub	sp, #16
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ece4:	f7ff f88a 	bl	800ddfc <xTaskGetTickCount>
 800ece8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ecea:	4b0b      	ldr	r3, [pc, #44]	; (800ed18 <prvSampleTimeNow+0x3c>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	68fa      	ldr	r2, [r7, #12]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d205      	bcs.n	800ed00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ecf4:	f000 f8ee 	bl	800eed4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2201      	movs	r2, #1
 800ecfc:	601a      	str	r2, [r3, #0]
 800ecfe:	e002      	b.n	800ed06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2200      	movs	r2, #0
 800ed04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ed06:	4a04      	ldr	r2, [pc, #16]	; (800ed18 <prvSampleTimeNow+0x3c>)
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3710      	adds	r7, #16
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	bf00      	nop
 800ed18:	20002400 	.word	0x20002400

0800ed1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b086      	sub	sp, #24
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	60f8      	str	r0, [r7, #12]
 800ed24:	60b9      	str	r1, [r7, #8]
 800ed26:	607a      	str	r2, [r7, #4]
 800ed28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	68ba      	ldr	r2, [r7, #8]
 800ed32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	68fa      	ldr	r2, [r7, #12]
 800ed38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ed3a:	68ba      	ldr	r2, [r7, #8]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d812      	bhi.n	800ed68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	1ad2      	subs	r2, r2, r3
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	699b      	ldr	r3, [r3, #24]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d302      	bcc.n	800ed56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ed50:	2301      	movs	r3, #1
 800ed52:	617b      	str	r3, [r7, #20]
 800ed54:	e01b      	b.n	800ed8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ed56:	4b10      	ldr	r3, [pc, #64]	; (800ed98 <prvInsertTimerInActiveList+0x7c>)
 800ed58:	681a      	ldr	r2, [r3, #0]
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	3304      	adds	r3, #4
 800ed5e:	4619      	mov	r1, r3
 800ed60:	4610      	mov	r0, r2
 800ed62:	f7fd fe37 	bl	800c9d4 <vListInsert>
 800ed66:	e012      	b.n	800ed8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ed68:	687a      	ldr	r2, [r7, #4]
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d206      	bcs.n	800ed7e <prvInsertTimerInActiveList+0x62>
 800ed70:	68ba      	ldr	r2, [r7, #8]
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d302      	bcc.n	800ed7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ed78:	2301      	movs	r3, #1
 800ed7a:	617b      	str	r3, [r7, #20]
 800ed7c:	e007      	b.n	800ed8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ed7e:	4b07      	ldr	r3, [pc, #28]	; (800ed9c <prvInsertTimerInActiveList+0x80>)
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	3304      	adds	r3, #4
 800ed86:	4619      	mov	r1, r3
 800ed88:	4610      	mov	r0, r2
 800ed8a:	f7fd fe23 	bl	800c9d4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ed8e:	697b      	ldr	r3, [r7, #20]
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3718      	adds	r7, #24
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	200023f4 	.word	0x200023f4
 800ed9c:	200023f0 	.word	0x200023f0

0800eda0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b08c      	sub	sp, #48	; 0x30
 800eda4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eda6:	e081      	b.n	800eeac <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	db7d      	blt.n	800eeaa <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800edb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb4:	695b      	ldr	r3, [r3, #20]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d004      	beq.n	800edc4 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800edba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edbc:	3304      	adds	r3, #4
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7fd fe40 	bl	800ca44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800edc4:	1d3b      	adds	r3, r7, #4
 800edc6:	4618      	mov	r0, r3
 800edc8:	f7ff ff88 	bl	800ecdc <prvSampleTimeNow>
 800edcc:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	2b09      	cmp	r3, #9
 800edd2:	d86b      	bhi.n	800eeac <prvProcessReceivedCommands+0x10c>
 800edd4:	a201      	add	r2, pc, #4	; (adr r2, 800eddc <prvProcessReceivedCommands+0x3c>)
 800edd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edda:	bf00      	nop
 800eddc:	0800ee05 	.word	0x0800ee05
 800ede0:	0800ee05 	.word	0x0800ee05
 800ede4:	0800ee05 	.word	0x0800ee05
 800ede8:	0800eead 	.word	0x0800eead
 800edec:	0800ee61 	.word	0x0800ee61
 800edf0:	0800ee99 	.word	0x0800ee99
 800edf4:	0800ee05 	.word	0x0800ee05
 800edf8:	0800ee05 	.word	0x0800ee05
 800edfc:	0800eead 	.word	0x0800eead
 800ee00:	0800ee61 	.word	0x0800ee61
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ee04:	68fa      	ldr	r2, [r7, #12]
 800ee06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee08:	699b      	ldr	r3, [r3, #24]
 800ee0a:	18d1      	adds	r1, r2, r3
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	6a3a      	ldr	r2, [r7, #32]
 800ee10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee12:	f7ff ff83 	bl	800ed1c <prvInsertTimerInActiveList>
 800ee16:	4603      	mov	r3, r0
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d047      	beq.n	800eeac <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee22:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ee24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee26:	69db      	ldr	r3, [r3, #28]
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	d13f      	bne.n	800eeac <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ee2c:	68fa      	ldr	r2, [r7, #12]
 800ee2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee30:	699b      	ldr	r3, [r3, #24]
 800ee32:	441a      	add	r2, r3
 800ee34:	2300      	movs	r3, #0
 800ee36:	9300      	str	r3, [sp, #0]
 800ee38:	2300      	movs	r3, #0
 800ee3a:	2100      	movs	r1, #0
 800ee3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee3e:	f7ff fe3b 	bl	800eab8 <xTimerGenericCommand>
 800ee42:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800ee44:	69fb      	ldr	r3, [r7, #28]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d130      	bne.n	800eeac <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800ee4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee4e:	f383 8811 	msr	BASEPRI, r3
 800ee52:	f3bf 8f6f 	isb	sy
 800ee56:	f3bf 8f4f 	dsb	sy
 800ee5a:	61bb      	str	r3, [r7, #24]
}
 800ee5c:	bf00      	nop
 800ee5e:	e7fe      	b.n	800ee5e <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ee60:	68fa      	ldr	r2, [r7, #12]
 800ee62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee64:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ee66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee68:	699b      	ldr	r3, [r3, #24]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d10a      	bne.n	800ee84 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800ee6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee72:	f383 8811 	msr	BASEPRI, r3
 800ee76:	f3bf 8f6f 	isb	sy
 800ee7a:	f3bf 8f4f 	dsb	sy
 800ee7e:	617b      	str	r3, [r7, #20]
}
 800ee80:	bf00      	nop
 800ee82:	e7fe      	b.n	800ee82 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ee84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee86:	699a      	ldr	r2, [r3, #24]
 800ee88:	6a3b      	ldr	r3, [r7, #32]
 800ee8a:	18d1      	adds	r1, r2, r3
 800ee8c:	6a3b      	ldr	r3, [r7, #32]
 800ee8e:	6a3a      	ldr	r2, [r7, #32]
 800ee90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee92:	f7ff ff43 	bl	800ed1c <prvInsertTimerInActiveList>
					break;
 800ee96:	e009      	b.n	800eeac <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ee98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d104      	bne.n	800eeac <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800eea2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eea4:	f000 fb6e 	bl	800f584 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800eea8:	e000      	b.n	800eeac <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800eeaa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eeac:	4b08      	ldr	r3, [pc, #32]	; (800eed0 <prvProcessReceivedCommands+0x130>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f107 0108 	add.w	r1, r7, #8
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7fe f8c0 	bl	800d03c <xQueueReceive>
 800eebc:	4603      	mov	r3, r0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	f47f af72 	bne.w	800eda8 <prvProcessReceivedCommands+0x8>
	}
}
 800eec4:	bf00      	nop
 800eec6:	bf00      	nop
 800eec8:	3728      	adds	r7, #40	; 0x28
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	bf00      	nop
 800eed0:	200023f8 	.word	0x200023f8

0800eed4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b088      	sub	sp, #32
 800eed8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eeda:	e045      	b.n	800ef68 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eedc:	4b2c      	ldr	r3, [pc, #176]	; (800ef90 <prvSwitchTimerLists+0xbc>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	68db      	ldr	r3, [r3, #12]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eee6:	4b2a      	ldr	r3, [pc, #168]	; (800ef90 <prvSwitchTimerLists+0xbc>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	68db      	ldr	r3, [r3, #12]
 800eeec:	68db      	ldr	r3, [r3, #12]
 800eeee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	3304      	adds	r3, #4
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7fd fda5 	bl	800ca44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eefe:	68f8      	ldr	r0, [r7, #12]
 800ef00:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	69db      	ldr	r3, [r3, #28]
 800ef06:	2b01      	cmp	r3, #1
 800ef08:	d12e      	bne.n	800ef68 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	699b      	ldr	r3, [r3, #24]
 800ef0e:	693a      	ldr	r2, [r7, #16]
 800ef10:	4413      	add	r3, r2
 800ef12:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ef14:	68ba      	ldr	r2, [r7, #8]
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d90e      	bls.n	800ef3a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	68ba      	ldr	r2, [r7, #8]
 800ef20:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	68fa      	ldr	r2, [r7, #12]
 800ef26:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef28:	4b19      	ldr	r3, [pc, #100]	; (800ef90 <prvSwitchTimerLists+0xbc>)
 800ef2a:	681a      	ldr	r2, [r3, #0]
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	3304      	adds	r3, #4
 800ef30:	4619      	mov	r1, r3
 800ef32:	4610      	mov	r0, r2
 800ef34:	f7fd fd4e 	bl	800c9d4 <vListInsert>
 800ef38:	e016      	b.n	800ef68 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	9300      	str	r3, [sp, #0]
 800ef3e:	2300      	movs	r3, #0
 800ef40:	693a      	ldr	r2, [r7, #16]
 800ef42:	2100      	movs	r1, #0
 800ef44:	68f8      	ldr	r0, [r7, #12]
 800ef46:	f7ff fdb7 	bl	800eab8 <xTimerGenericCommand>
 800ef4a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d10a      	bne.n	800ef68 <prvSwitchTimerLists+0x94>
	__asm volatile
 800ef52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef56:	f383 8811 	msr	BASEPRI, r3
 800ef5a:	f3bf 8f6f 	isb	sy
 800ef5e:	f3bf 8f4f 	dsb	sy
 800ef62:	603b      	str	r3, [r7, #0]
}
 800ef64:	bf00      	nop
 800ef66:	e7fe      	b.n	800ef66 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef68:	4b09      	ldr	r3, [pc, #36]	; (800ef90 <prvSwitchTimerLists+0xbc>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d1b4      	bne.n	800eedc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ef72:	4b07      	ldr	r3, [pc, #28]	; (800ef90 <prvSwitchTimerLists+0xbc>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ef78:	4b06      	ldr	r3, [pc, #24]	; (800ef94 <prvSwitchTimerLists+0xc0>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	4a04      	ldr	r2, [pc, #16]	; (800ef90 <prvSwitchTimerLists+0xbc>)
 800ef7e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ef80:	4a04      	ldr	r2, [pc, #16]	; (800ef94 <prvSwitchTimerLists+0xc0>)
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	6013      	str	r3, [r2, #0]
}
 800ef86:	bf00      	nop
 800ef88:	3718      	adds	r7, #24
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	200023f0 	.word	0x200023f0
 800ef94:	200023f4 	.word	0x200023f4

0800ef98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ef9e:	f000 f92d 	bl	800f1fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800efa2:	4b15      	ldr	r3, [pc, #84]	; (800eff8 <prvCheckForValidListAndQueue+0x60>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d120      	bne.n	800efec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800efaa:	4814      	ldr	r0, [pc, #80]	; (800effc <prvCheckForValidListAndQueue+0x64>)
 800efac:	f7fd fcc4 	bl	800c938 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800efb0:	4813      	ldr	r0, [pc, #76]	; (800f000 <prvCheckForValidListAndQueue+0x68>)
 800efb2:	f7fd fcc1 	bl	800c938 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800efb6:	4b13      	ldr	r3, [pc, #76]	; (800f004 <prvCheckForValidListAndQueue+0x6c>)
 800efb8:	4a10      	ldr	r2, [pc, #64]	; (800effc <prvCheckForValidListAndQueue+0x64>)
 800efba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800efbc:	4b12      	ldr	r3, [pc, #72]	; (800f008 <prvCheckForValidListAndQueue+0x70>)
 800efbe:	4a10      	ldr	r2, [pc, #64]	; (800f000 <prvCheckForValidListAndQueue+0x68>)
 800efc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800efc2:	2300      	movs	r3, #0
 800efc4:	9300      	str	r3, [sp, #0]
 800efc6:	4b11      	ldr	r3, [pc, #68]	; (800f00c <prvCheckForValidListAndQueue+0x74>)
 800efc8:	4a11      	ldr	r2, [pc, #68]	; (800f010 <prvCheckForValidListAndQueue+0x78>)
 800efca:	210c      	movs	r1, #12
 800efcc:	200a      	movs	r0, #10
 800efce:	f7fd fdcb 	bl	800cb68 <xQueueGenericCreateStatic>
 800efd2:	4603      	mov	r3, r0
 800efd4:	4a08      	ldr	r2, [pc, #32]	; (800eff8 <prvCheckForValidListAndQueue+0x60>)
 800efd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800efd8:	4b07      	ldr	r3, [pc, #28]	; (800eff8 <prvCheckForValidListAndQueue+0x60>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d005      	beq.n	800efec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800efe0:	4b05      	ldr	r3, [pc, #20]	; (800eff8 <prvCheckForValidListAndQueue+0x60>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	490b      	ldr	r1, [pc, #44]	; (800f014 <prvCheckForValidListAndQueue+0x7c>)
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7fe fbbc 	bl	800d764 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800efec:	f000 f936 	bl	800f25c <vPortExitCritical>
}
 800eff0:	bf00      	nop
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	200023f8 	.word	0x200023f8
 800effc:	200023c8 	.word	0x200023c8
 800f000:	200023dc 	.word	0x200023dc
 800f004:	200023f0 	.word	0x200023f0
 800f008:	200023f4 	.word	0x200023f4
 800f00c:	2000247c 	.word	0x2000247c
 800f010:	20002404 	.word	0x20002404
 800f014:	08013054 	.word	0x08013054

0800f018 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f018:	b480      	push	{r7}
 800f01a:	b085      	sub	sp, #20
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	60f8      	str	r0, [r7, #12]
 800f020:	60b9      	str	r1, [r7, #8]
 800f022:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	3b04      	subs	r3, #4
 800f028:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f030:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	3b04      	subs	r3, #4
 800f036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	f023 0201 	bic.w	r2, r3, #1
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	3b04      	subs	r3, #4
 800f046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f048:	4a08      	ldr	r2, [pc, #32]	; (800f06c <pxPortInitialiseStack+0x54>)
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	3b14      	subs	r3, #20
 800f052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	3b20      	subs	r3, #32
 800f05e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f060:	68fb      	ldr	r3, [r7, #12]
}
 800f062:	4618      	mov	r0, r3
 800f064:	3714      	adds	r7, #20
 800f066:	46bd      	mov	sp, r7
 800f068:	bc80      	pop	{r7}
 800f06a:	4770      	bx	lr
 800f06c:	0800f071 	.word	0x0800f071

0800f070 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f070:	b480      	push	{r7}
 800f072:	b085      	sub	sp, #20
 800f074:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800f076:	2300      	movs	r3, #0
 800f078:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f07a:	4b12      	ldr	r3, [pc, #72]	; (800f0c4 <prvTaskExitError+0x54>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f082:	d00a      	beq.n	800f09a <prvTaskExitError+0x2a>
	__asm volatile
 800f084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f088:	f383 8811 	msr	BASEPRI, r3
 800f08c:	f3bf 8f6f 	isb	sy
 800f090:	f3bf 8f4f 	dsb	sy
 800f094:	60fb      	str	r3, [r7, #12]
}
 800f096:	bf00      	nop
 800f098:	e7fe      	b.n	800f098 <prvTaskExitError+0x28>
	__asm volatile
 800f09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f09e:	f383 8811 	msr	BASEPRI, r3
 800f0a2:	f3bf 8f6f 	isb	sy
 800f0a6:	f3bf 8f4f 	dsb	sy
 800f0aa:	60bb      	str	r3, [r7, #8]
}
 800f0ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f0ae:	bf00      	nop
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d0fc      	beq.n	800f0b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f0b6:	bf00      	nop
 800f0b8:	bf00      	nop
 800f0ba:	3714      	adds	r7, #20
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bc80      	pop	{r7}
 800f0c0:	4770      	bx	lr
 800f0c2:	bf00      	nop
 800f0c4:	20000098 	.word	0x20000098
	...

0800f0d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f0d0:	4b07      	ldr	r3, [pc, #28]	; (800f0f0 <pxCurrentTCBConst2>)
 800f0d2:	6819      	ldr	r1, [r3, #0]
 800f0d4:	6808      	ldr	r0, [r1, #0]
 800f0d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f0da:	f380 8809 	msr	PSP, r0
 800f0de:	f3bf 8f6f 	isb	sy
 800f0e2:	f04f 0000 	mov.w	r0, #0
 800f0e6:	f380 8811 	msr	BASEPRI, r0
 800f0ea:	f04e 0e0d 	orr.w	lr, lr, #13
 800f0ee:	4770      	bx	lr

0800f0f0 <pxCurrentTCBConst2>:
 800f0f0:	2000229c 	.word	0x2000229c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f0f4:	bf00      	nop
 800f0f6:	bf00      	nop

0800f0f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800f0f8:	4806      	ldr	r0, [pc, #24]	; (800f114 <prvPortStartFirstTask+0x1c>)
 800f0fa:	6800      	ldr	r0, [r0, #0]
 800f0fc:	6800      	ldr	r0, [r0, #0]
 800f0fe:	f380 8808 	msr	MSP, r0
 800f102:	b662      	cpsie	i
 800f104:	b661      	cpsie	f
 800f106:	f3bf 8f4f 	dsb	sy
 800f10a:	f3bf 8f6f 	isb	sy
 800f10e:	df00      	svc	0
 800f110:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f112:	bf00      	nop
 800f114:	e000ed08 	.word	0xe000ed08

0800f118 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b084      	sub	sp, #16
 800f11c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f11e:	4b32      	ldr	r3, [pc, #200]	; (800f1e8 <xPortStartScheduler+0xd0>)
 800f120:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	b2db      	uxtb	r3, r3
 800f128:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	22ff      	movs	r2, #255	; 0xff
 800f12e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	b2db      	uxtb	r3, r3
 800f136:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f138:	78fb      	ldrb	r3, [r7, #3]
 800f13a:	b2db      	uxtb	r3, r3
 800f13c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f140:	b2da      	uxtb	r2, r3
 800f142:	4b2a      	ldr	r3, [pc, #168]	; (800f1ec <xPortStartScheduler+0xd4>)
 800f144:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f146:	4b2a      	ldr	r3, [pc, #168]	; (800f1f0 <xPortStartScheduler+0xd8>)
 800f148:	2207      	movs	r2, #7
 800f14a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f14c:	e009      	b.n	800f162 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f14e:	4b28      	ldr	r3, [pc, #160]	; (800f1f0 <xPortStartScheduler+0xd8>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	3b01      	subs	r3, #1
 800f154:	4a26      	ldr	r2, [pc, #152]	; (800f1f0 <xPortStartScheduler+0xd8>)
 800f156:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f158:	78fb      	ldrb	r3, [r7, #3]
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	005b      	lsls	r3, r3, #1
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f162:	78fb      	ldrb	r3, [r7, #3]
 800f164:	b2db      	uxtb	r3, r3
 800f166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f16a:	2b80      	cmp	r3, #128	; 0x80
 800f16c:	d0ef      	beq.n	800f14e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f16e:	4b20      	ldr	r3, [pc, #128]	; (800f1f0 <xPortStartScheduler+0xd8>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	f1c3 0307 	rsb	r3, r3, #7
 800f176:	2b04      	cmp	r3, #4
 800f178:	d00a      	beq.n	800f190 <xPortStartScheduler+0x78>
	__asm volatile
 800f17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f17e:	f383 8811 	msr	BASEPRI, r3
 800f182:	f3bf 8f6f 	isb	sy
 800f186:	f3bf 8f4f 	dsb	sy
 800f18a:	60bb      	str	r3, [r7, #8]
}
 800f18c:	bf00      	nop
 800f18e:	e7fe      	b.n	800f18e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f190:	4b17      	ldr	r3, [pc, #92]	; (800f1f0 <xPortStartScheduler+0xd8>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	021b      	lsls	r3, r3, #8
 800f196:	4a16      	ldr	r2, [pc, #88]	; (800f1f0 <xPortStartScheduler+0xd8>)
 800f198:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f19a:	4b15      	ldr	r3, [pc, #84]	; (800f1f0 <xPortStartScheduler+0xd8>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f1a2:	4a13      	ldr	r2, [pc, #76]	; (800f1f0 <xPortStartScheduler+0xd8>)
 800f1a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	b2da      	uxtb	r2, r3
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f1ae:	4b11      	ldr	r3, [pc, #68]	; (800f1f4 <xPortStartScheduler+0xdc>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	4a10      	ldr	r2, [pc, #64]	; (800f1f4 <xPortStartScheduler+0xdc>)
 800f1b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f1b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f1ba:	4b0e      	ldr	r3, [pc, #56]	; (800f1f4 <xPortStartScheduler+0xdc>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	4a0d      	ldr	r2, [pc, #52]	; (800f1f4 <xPortStartScheduler+0xdc>)
 800f1c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f1c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f1c6:	f000 f8b9 	bl	800f33c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f1ca:	4b0b      	ldr	r3, [pc, #44]	; (800f1f8 <xPortStartScheduler+0xe0>)
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f1d0:	f7ff ff92 	bl	800f0f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f1d4:	f7fe fede 	bl	800df94 <vTaskSwitchContext>
	prvTaskExitError();
 800f1d8:	f7ff ff4a 	bl	800f070 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f1dc:	2300      	movs	r3, #0
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3710      	adds	r7, #16
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	e000e400 	.word	0xe000e400
 800f1ec:	200024c4 	.word	0x200024c4
 800f1f0:	200024c8 	.word	0x200024c8
 800f1f4:	e000ed20 	.word	0xe000ed20
 800f1f8:	20000098 	.word	0x20000098

0800f1fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b083      	sub	sp, #12
 800f200:	af00      	add	r7, sp, #0
	__asm volatile
 800f202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f206:	f383 8811 	msr	BASEPRI, r3
 800f20a:	f3bf 8f6f 	isb	sy
 800f20e:	f3bf 8f4f 	dsb	sy
 800f212:	607b      	str	r3, [r7, #4]
}
 800f214:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f216:	4b0f      	ldr	r3, [pc, #60]	; (800f254 <vPortEnterCritical+0x58>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	3301      	adds	r3, #1
 800f21c:	4a0d      	ldr	r2, [pc, #52]	; (800f254 <vPortEnterCritical+0x58>)
 800f21e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f220:	4b0c      	ldr	r3, [pc, #48]	; (800f254 <vPortEnterCritical+0x58>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	2b01      	cmp	r3, #1
 800f226:	d10f      	bne.n	800f248 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f228:	4b0b      	ldr	r3, [pc, #44]	; (800f258 <vPortEnterCritical+0x5c>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	b2db      	uxtb	r3, r3
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d00a      	beq.n	800f248 <vPortEnterCritical+0x4c>
	__asm volatile
 800f232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f236:	f383 8811 	msr	BASEPRI, r3
 800f23a:	f3bf 8f6f 	isb	sy
 800f23e:	f3bf 8f4f 	dsb	sy
 800f242:	603b      	str	r3, [r7, #0]
}
 800f244:	bf00      	nop
 800f246:	e7fe      	b.n	800f246 <vPortEnterCritical+0x4a>
	}
}
 800f248:	bf00      	nop
 800f24a:	370c      	adds	r7, #12
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bc80      	pop	{r7}
 800f250:	4770      	bx	lr
 800f252:	bf00      	nop
 800f254:	20000098 	.word	0x20000098
 800f258:	e000ed04 	.word	0xe000ed04

0800f25c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f25c:	b480      	push	{r7}
 800f25e:	b083      	sub	sp, #12
 800f260:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f262:	4b11      	ldr	r3, [pc, #68]	; (800f2a8 <vPortExitCritical+0x4c>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d10a      	bne.n	800f280 <vPortExitCritical+0x24>
	__asm volatile
 800f26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f26e:	f383 8811 	msr	BASEPRI, r3
 800f272:	f3bf 8f6f 	isb	sy
 800f276:	f3bf 8f4f 	dsb	sy
 800f27a:	607b      	str	r3, [r7, #4]
}
 800f27c:	bf00      	nop
 800f27e:	e7fe      	b.n	800f27e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f280:	4b09      	ldr	r3, [pc, #36]	; (800f2a8 <vPortExitCritical+0x4c>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	3b01      	subs	r3, #1
 800f286:	4a08      	ldr	r2, [pc, #32]	; (800f2a8 <vPortExitCritical+0x4c>)
 800f288:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f28a:	4b07      	ldr	r3, [pc, #28]	; (800f2a8 <vPortExitCritical+0x4c>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d105      	bne.n	800f29e <vPortExitCritical+0x42>
 800f292:	2300      	movs	r3, #0
 800f294:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	f383 8811 	msr	BASEPRI, r3
}
 800f29c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f29e:	bf00      	nop
 800f2a0:	370c      	adds	r7, #12
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bc80      	pop	{r7}
 800f2a6:	4770      	bx	lr
 800f2a8:	20000098 	.word	0x20000098
 800f2ac:	00000000 	.word	0x00000000

0800f2b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f2b0:	f3ef 8009 	mrs	r0, PSP
 800f2b4:	f3bf 8f6f 	isb	sy
 800f2b8:	4b0d      	ldr	r3, [pc, #52]	; (800f2f0 <pxCurrentTCBConst>)
 800f2ba:	681a      	ldr	r2, [r3, #0]
 800f2bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f2c0:	6010      	str	r0, [r2, #0]
 800f2c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800f2c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f2ca:	f380 8811 	msr	BASEPRI, r0
 800f2ce:	f7fe fe61 	bl	800df94 <vTaskSwitchContext>
 800f2d2:	f04f 0000 	mov.w	r0, #0
 800f2d6:	f380 8811 	msr	BASEPRI, r0
 800f2da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f2de:	6819      	ldr	r1, [r3, #0]
 800f2e0:	6808      	ldr	r0, [r1, #0]
 800f2e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f2e6:	f380 8809 	msr	PSP, r0
 800f2ea:	f3bf 8f6f 	isb	sy
 800f2ee:	4770      	bx	lr

0800f2f0 <pxCurrentTCBConst>:
 800f2f0:	2000229c 	.word	0x2000229c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f2f4:	bf00      	nop
 800f2f6:	bf00      	nop

0800f2f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b082      	sub	sp, #8
 800f2fc:	af00      	add	r7, sp, #0
	__asm volatile
 800f2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f302:	f383 8811 	msr	BASEPRI, r3
 800f306:	f3bf 8f6f 	isb	sy
 800f30a:	f3bf 8f4f 	dsb	sy
 800f30e:	607b      	str	r3, [r7, #4]
}
 800f310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f312:	f7fe fd81 	bl	800de18 <xTaskIncrementTick>
 800f316:	4603      	mov	r3, r0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d003      	beq.n	800f324 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f31c:	4b06      	ldr	r3, [pc, #24]	; (800f338 <SysTick_Handler+0x40>)
 800f31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f322:	601a      	str	r2, [r3, #0]
 800f324:	2300      	movs	r3, #0
 800f326:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	f383 8811 	msr	BASEPRI, r3
}
 800f32e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f330:	bf00      	nop
 800f332:	3708      	adds	r7, #8
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	e000ed04 	.word	0xe000ed04

0800f33c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f33c:	b480      	push	{r7}
 800f33e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f340:	4b0a      	ldr	r3, [pc, #40]	; (800f36c <vPortSetupTimerInterrupt+0x30>)
 800f342:	2200      	movs	r2, #0
 800f344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f346:	4b0a      	ldr	r3, [pc, #40]	; (800f370 <vPortSetupTimerInterrupt+0x34>)
 800f348:	2200      	movs	r2, #0
 800f34a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f34c:	4b09      	ldr	r3, [pc, #36]	; (800f374 <vPortSetupTimerInterrupt+0x38>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	4a09      	ldr	r2, [pc, #36]	; (800f378 <vPortSetupTimerInterrupt+0x3c>)
 800f352:	fba2 2303 	umull	r2, r3, r2, r3
 800f356:	099b      	lsrs	r3, r3, #6
 800f358:	4a08      	ldr	r2, [pc, #32]	; (800f37c <vPortSetupTimerInterrupt+0x40>)
 800f35a:	3b01      	subs	r3, #1
 800f35c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f35e:	4b03      	ldr	r3, [pc, #12]	; (800f36c <vPortSetupTimerInterrupt+0x30>)
 800f360:	2207      	movs	r2, #7
 800f362:	601a      	str	r2, [r3, #0]
}
 800f364:	bf00      	nop
 800f366:	46bd      	mov	sp, r7
 800f368:	bc80      	pop	{r7}
 800f36a:	4770      	bx	lr
 800f36c:	e000e010 	.word	0xe000e010
 800f370:	e000e018 	.word	0xe000e018
 800f374:	2000003c 	.word	0x2000003c
 800f378:	10624dd3 	.word	0x10624dd3
 800f37c:	e000e014 	.word	0xe000e014

0800f380 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f380:	b480      	push	{r7}
 800f382:	b085      	sub	sp, #20
 800f384:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f386:	f3ef 8305 	mrs	r3, IPSR
 800f38a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2b0f      	cmp	r3, #15
 800f390:	d914      	bls.n	800f3bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f392:	4a16      	ldr	r2, [pc, #88]	; (800f3ec <vPortValidateInterruptPriority+0x6c>)
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	4413      	add	r3, r2
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f39c:	4b14      	ldr	r3, [pc, #80]	; (800f3f0 <vPortValidateInterruptPriority+0x70>)
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	7afa      	ldrb	r2, [r7, #11]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d20a      	bcs.n	800f3bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3aa:	f383 8811 	msr	BASEPRI, r3
 800f3ae:	f3bf 8f6f 	isb	sy
 800f3b2:	f3bf 8f4f 	dsb	sy
 800f3b6:	607b      	str	r3, [r7, #4]
}
 800f3b8:	bf00      	nop
 800f3ba:	e7fe      	b.n	800f3ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f3bc:	4b0d      	ldr	r3, [pc, #52]	; (800f3f4 <vPortValidateInterruptPriority+0x74>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f3c4:	4b0c      	ldr	r3, [pc, #48]	; (800f3f8 <vPortValidateInterruptPriority+0x78>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d90a      	bls.n	800f3e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d0:	f383 8811 	msr	BASEPRI, r3
 800f3d4:	f3bf 8f6f 	isb	sy
 800f3d8:	f3bf 8f4f 	dsb	sy
 800f3dc:	603b      	str	r3, [r7, #0]
}
 800f3de:	bf00      	nop
 800f3e0:	e7fe      	b.n	800f3e0 <vPortValidateInterruptPriority+0x60>
	}
 800f3e2:	bf00      	nop
 800f3e4:	3714      	adds	r7, #20
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bc80      	pop	{r7}
 800f3ea:	4770      	bx	lr
 800f3ec:	e000e3f0 	.word	0xe000e3f0
 800f3f0:	200024c4 	.word	0x200024c4
 800f3f4:	e000ed0c 	.word	0xe000ed0c
 800f3f8:	200024c8 	.word	0x200024c8

0800f3fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b08a      	sub	sp, #40	; 0x28
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f404:	2300      	movs	r3, #0
 800f406:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f408:	f7fe fc4e 	bl	800dca8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f40c:	4b58      	ldr	r3, [pc, #352]	; (800f570 <pvPortMalloc+0x174>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d101      	bne.n	800f418 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f414:	f000 f910 	bl	800f638 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f418:	4b56      	ldr	r3, [pc, #344]	; (800f574 <pvPortMalloc+0x178>)
 800f41a:	681a      	ldr	r2, [r3, #0]
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	4013      	ands	r3, r2
 800f420:	2b00      	cmp	r3, #0
 800f422:	f040 808e 	bne.w	800f542 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d01d      	beq.n	800f468 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f42c:	2208      	movs	r2, #8
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	4413      	add	r3, r2
 800f432:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f003 0307 	and.w	r3, r3, #7
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d014      	beq.n	800f468 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f023 0307 	bic.w	r3, r3, #7
 800f444:	3308      	adds	r3, #8
 800f446:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f003 0307 	and.w	r3, r3, #7
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d00a      	beq.n	800f468 <pvPortMalloc+0x6c>
	__asm volatile
 800f452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f456:	f383 8811 	msr	BASEPRI, r3
 800f45a:	f3bf 8f6f 	isb	sy
 800f45e:	f3bf 8f4f 	dsb	sy
 800f462:	617b      	str	r3, [r7, #20]
}
 800f464:	bf00      	nop
 800f466:	e7fe      	b.n	800f466 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d069      	beq.n	800f542 <pvPortMalloc+0x146>
 800f46e:	4b42      	ldr	r3, [pc, #264]	; (800f578 <pvPortMalloc+0x17c>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	687a      	ldr	r2, [r7, #4]
 800f474:	429a      	cmp	r2, r3
 800f476:	d864      	bhi.n	800f542 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f478:	4b40      	ldr	r3, [pc, #256]	; (800f57c <pvPortMalloc+0x180>)
 800f47a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f47c:	4b3f      	ldr	r3, [pc, #252]	; (800f57c <pvPortMalloc+0x180>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f482:	e004      	b.n	800f48e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f486:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	429a      	cmp	r2, r3
 800f496:	d903      	bls.n	800f4a0 <pvPortMalloc+0xa4>
 800f498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d1f1      	bne.n	800f484 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f4a0:	4b33      	ldr	r3, [pc, #204]	; (800f570 <pvPortMalloc+0x174>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d04b      	beq.n	800f542 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f4aa:	6a3b      	ldr	r3, [r7, #32]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	2208      	movs	r2, #8
 800f4b0:	4413      	add	r3, r2
 800f4b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b6:	681a      	ldr	r2, [r3, #0]
 800f4b8:	6a3b      	ldr	r3, [r7, #32]
 800f4ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4be:	685a      	ldr	r2, [r3, #4]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	1ad2      	subs	r2, r2, r3
 800f4c4:	2308      	movs	r3, #8
 800f4c6:	005b      	lsls	r3, r3, #1
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d91f      	bls.n	800f50c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	4413      	add	r3, r2
 800f4d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4d4:	69bb      	ldr	r3, [r7, #24]
 800f4d6:	f003 0307 	and.w	r3, r3, #7
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d00a      	beq.n	800f4f4 <pvPortMalloc+0xf8>
	__asm volatile
 800f4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4e2:	f383 8811 	msr	BASEPRI, r3
 800f4e6:	f3bf 8f6f 	isb	sy
 800f4ea:	f3bf 8f4f 	dsb	sy
 800f4ee:	613b      	str	r3, [r7, #16]
}
 800f4f0:	bf00      	nop
 800f4f2:	e7fe      	b.n	800f4f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f6:	685a      	ldr	r2, [r3, #4]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	1ad2      	subs	r2, r2, r3
 800f4fc:	69bb      	ldr	r3, [r7, #24]
 800f4fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f506:	69b8      	ldr	r0, [r7, #24]
 800f508:	f000 f8f8 	bl	800f6fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f50c:	4b1a      	ldr	r3, [pc, #104]	; (800f578 <pvPortMalloc+0x17c>)
 800f50e:	681a      	ldr	r2, [r3, #0]
 800f510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	1ad3      	subs	r3, r2, r3
 800f516:	4a18      	ldr	r2, [pc, #96]	; (800f578 <pvPortMalloc+0x17c>)
 800f518:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f51a:	4b17      	ldr	r3, [pc, #92]	; (800f578 <pvPortMalloc+0x17c>)
 800f51c:	681a      	ldr	r2, [r3, #0]
 800f51e:	4b18      	ldr	r3, [pc, #96]	; (800f580 <pvPortMalloc+0x184>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	429a      	cmp	r2, r3
 800f524:	d203      	bcs.n	800f52e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f526:	4b14      	ldr	r3, [pc, #80]	; (800f578 <pvPortMalloc+0x17c>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4a15      	ldr	r2, [pc, #84]	; (800f580 <pvPortMalloc+0x184>)
 800f52c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f530:	685a      	ldr	r2, [r3, #4]
 800f532:	4b10      	ldr	r3, [pc, #64]	; (800f574 <pvPortMalloc+0x178>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	431a      	orrs	r2, r3
 800f538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53e:	2200      	movs	r2, #0
 800f540:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f542:	f7fe fbbf 	bl	800dcc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f546:	69fb      	ldr	r3, [r7, #28]
 800f548:	f003 0307 	and.w	r3, r3, #7
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d00a      	beq.n	800f566 <pvPortMalloc+0x16a>
	__asm volatile
 800f550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f554:	f383 8811 	msr	BASEPRI, r3
 800f558:	f3bf 8f6f 	isb	sy
 800f55c:	f3bf 8f4f 	dsb	sy
 800f560:	60fb      	str	r3, [r7, #12]
}
 800f562:	bf00      	nop
 800f564:	e7fe      	b.n	800f564 <pvPortMalloc+0x168>
	return pvReturn;
 800f566:	69fb      	ldr	r3, [r7, #28]
}
 800f568:	4618      	mov	r0, r3
 800f56a:	3728      	adds	r7, #40	; 0x28
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}
 800f570:	20009a04 	.word	0x20009a04
 800f574:	20009a10 	.word	0x20009a10
 800f578:	20009a08 	.word	0x20009a08
 800f57c:	200099fc 	.word	0x200099fc
 800f580:	20009a0c 	.word	0x20009a0c

0800f584 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b086      	sub	sp, #24
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d048      	beq.n	800f628 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f596:	2308      	movs	r3, #8
 800f598:	425b      	negs	r3, r3
 800f59a:	697a      	ldr	r2, [r7, #20]
 800f59c:	4413      	add	r3, r2
 800f59e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	685a      	ldr	r2, [r3, #4]
 800f5a8:	4b21      	ldr	r3, [pc, #132]	; (800f630 <vPortFree+0xac>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	4013      	ands	r3, r2
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d10a      	bne.n	800f5c8 <vPortFree+0x44>
	__asm volatile
 800f5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b6:	f383 8811 	msr	BASEPRI, r3
 800f5ba:	f3bf 8f6f 	isb	sy
 800f5be:	f3bf 8f4f 	dsb	sy
 800f5c2:	60fb      	str	r3, [r7, #12]
}
 800f5c4:	bf00      	nop
 800f5c6:	e7fe      	b.n	800f5c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d00a      	beq.n	800f5e6 <vPortFree+0x62>
	__asm volatile
 800f5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d4:	f383 8811 	msr	BASEPRI, r3
 800f5d8:	f3bf 8f6f 	isb	sy
 800f5dc:	f3bf 8f4f 	dsb	sy
 800f5e0:	60bb      	str	r3, [r7, #8]
}
 800f5e2:	bf00      	nop
 800f5e4:	e7fe      	b.n	800f5e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f5e6:	693b      	ldr	r3, [r7, #16]
 800f5e8:	685a      	ldr	r2, [r3, #4]
 800f5ea:	4b11      	ldr	r3, [pc, #68]	; (800f630 <vPortFree+0xac>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	4013      	ands	r3, r2
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d019      	beq.n	800f628 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d115      	bne.n	800f628 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	685a      	ldr	r2, [r3, #4]
 800f600:	4b0b      	ldr	r3, [pc, #44]	; (800f630 <vPortFree+0xac>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	43db      	mvns	r3, r3
 800f606:	401a      	ands	r2, r3
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f60c:	f7fe fb4c 	bl	800dca8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	685a      	ldr	r2, [r3, #4]
 800f614:	4b07      	ldr	r3, [pc, #28]	; (800f634 <vPortFree+0xb0>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	4413      	add	r3, r2
 800f61a:	4a06      	ldr	r2, [pc, #24]	; (800f634 <vPortFree+0xb0>)
 800f61c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f61e:	6938      	ldr	r0, [r7, #16]
 800f620:	f000 f86c 	bl	800f6fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f624:	f7fe fb4e 	bl	800dcc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f628:	bf00      	nop
 800f62a:	3718      	adds	r7, #24
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	20009a10 	.word	0x20009a10
 800f634:	20009a08 	.word	0x20009a08

0800f638 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f638:	b480      	push	{r7}
 800f63a:	b085      	sub	sp, #20
 800f63c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f63e:	f247 5330 	movw	r3, #30000	; 0x7530
 800f642:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f644:	4b27      	ldr	r3, [pc, #156]	; (800f6e4 <prvHeapInit+0xac>)
 800f646:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	f003 0307 	and.w	r3, r3, #7
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d00c      	beq.n	800f66c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	3307      	adds	r3, #7
 800f656:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	f023 0307 	bic.w	r3, r3, #7
 800f65e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f660:	68ba      	ldr	r2, [r7, #8]
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	1ad3      	subs	r3, r2, r3
 800f666:	4a1f      	ldr	r2, [pc, #124]	; (800f6e4 <prvHeapInit+0xac>)
 800f668:	4413      	add	r3, r2
 800f66a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f670:	4a1d      	ldr	r2, [pc, #116]	; (800f6e8 <prvHeapInit+0xb0>)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f676:	4b1c      	ldr	r3, [pc, #112]	; (800f6e8 <prvHeapInit+0xb0>)
 800f678:	2200      	movs	r2, #0
 800f67a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	68ba      	ldr	r2, [r7, #8]
 800f680:	4413      	add	r3, r2
 800f682:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f684:	2208      	movs	r2, #8
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	1a9b      	subs	r3, r3, r2
 800f68a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f023 0307 	bic.w	r3, r3, #7
 800f692:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	4a15      	ldr	r2, [pc, #84]	; (800f6ec <prvHeapInit+0xb4>)
 800f698:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f69a:	4b14      	ldr	r3, [pc, #80]	; (800f6ec <prvHeapInit+0xb4>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f6a2:	4b12      	ldr	r3, [pc, #72]	; (800f6ec <prvHeapInit+0xb4>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	68fa      	ldr	r2, [r7, #12]
 800f6b2:	1ad2      	subs	r2, r2, r3
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f6b8:	4b0c      	ldr	r3, [pc, #48]	; (800f6ec <prvHeapInit+0xb4>)
 800f6ba:	681a      	ldr	r2, [r3, #0]
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	4a0a      	ldr	r2, [pc, #40]	; (800f6f0 <prvHeapInit+0xb8>)
 800f6c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	4a09      	ldr	r2, [pc, #36]	; (800f6f4 <prvHeapInit+0xbc>)
 800f6ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f6d0:	4b09      	ldr	r3, [pc, #36]	; (800f6f8 <prvHeapInit+0xc0>)
 800f6d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f6d6:	601a      	str	r2, [r3, #0]
}
 800f6d8:	bf00      	nop
 800f6da:	3714      	adds	r7, #20
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bc80      	pop	{r7}
 800f6e0:	4770      	bx	lr
 800f6e2:	bf00      	nop
 800f6e4:	200024cc 	.word	0x200024cc
 800f6e8:	200099fc 	.word	0x200099fc
 800f6ec:	20009a04 	.word	0x20009a04
 800f6f0:	20009a0c 	.word	0x20009a0c
 800f6f4:	20009a08 	.word	0x20009a08
 800f6f8:	20009a10 	.word	0x20009a10

0800f6fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b085      	sub	sp, #20
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f704:	4b27      	ldr	r3, [pc, #156]	; (800f7a4 <prvInsertBlockIntoFreeList+0xa8>)
 800f706:	60fb      	str	r3, [r7, #12]
 800f708:	e002      	b.n	800f710 <prvInsertBlockIntoFreeList+0x14>
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	60fb      	str	r3, [r7, #12]
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	687a      	ldr	r2, [r7, #4]
 800f716:	429a      	cmp	r2, r3
 800f718:	d8f7      	bhi.n	800f70a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	685b      	ldr	r3, [r3, #4]
 800f722:	68ba      	ldr	r2, [r7, #8]
 800f724:	4413      	add	r3, r2
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	429a      	cmp	r2, r3
 800f72a:	d108      	bne.n	800f73e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	685a      	ldr	r2, [r3, #4]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	685b      	ldr	r3, [r3, #4]
 800f734:	441a      	add	r2, r3
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	68ba      	ldr	r2, [r7, #8]
 800f748:	441a      	add	r2, r3
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	429a      	cmp	r2, r3
 800f750:	d118      	bne.n	800f784 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	681a      	ldr	r2, [r3, #0]
 800f756:	4b14      	ldr	r3, [pc, #80]	; (800f7a8 <prvInsertBlockIntoFreeList+0xac>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d00d      	beq.n	800f77a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	685a      	ldr	r2, [r3, #4]
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	441a      	add	r2, r3
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	681a      	ldr	r2, [r3, #0]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	601a      	str	r2, [r3, #0]
 800f778:	e008      	b.n	800f78c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f77a:	4b0b      	ldr	r3, [pc, #44]	; (800f7a8 <prvInsertBlockIntoFreeList+0xac>)
 800f77c:	681a      	ldr	r2, [r3, #0]
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	601a      	str	r2, [r3, #0]
 800f782:	e003      	b.n	800f78c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	681a      	ldr	r2, [r3, #0]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f78c:	68fa      	ldr	r2, [r7, #12]
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	429a      	cmp	r2, r3
 800f792:	d002      	beq.n	800f79a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	687a      	ldr	r2, [r7, #4]
 800f798:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f79a:	bf00      	nop
 800f79c:	3714      	adds	r7, #20
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bc80      	pop	{r7}
 800f7a2:	4770      	bx	lr
 800f7a4:	200099fc 	.word	0x200099fc
 800f7a8:	20009a04 	.word	0x20009a04

0800f7ac <__errno>:
 800f7ac:	4b01      	ldr	r3, [pc, #4]	; (800f7b4 <__errno+0x8>)
 800f7ae:	6818      	ldr	r0, [r3, #0]
 800f7b0:	4770      	bx	lr
 800f7b2:	bf00      	nop
 800f7b4:	2000009c 	.word	0x2000009c

0800f7b8 <std>:
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	b510      	push	{r4, lr}
 800f7bc:	4604      	mov	r4, r0
 800f7be:	e9c0 3300 	strd	r3, r3, [r0]
 800f7c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f7c6:	6083      	str	r3, [r0, #8]
 800f7c8:	8181      	strh	r1, [r0, #12]
 800f7ca:	6643      	str	r3, [r0, #100]	; 0x64
 800f7cc:	81c2      	strh	r2, [r0, #14]
 800f7ce:	6183      	str	r3, [r0, #24]
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	2208      	movs	r2, #8
 800f7d4:	305c      	adds	r0, #92	; 0x5c
 800f7d6:	f000 f91a 	bl	800fa0e <memset>
 800f7da:	4b05      	ldr	r3, [pc, #20]	; (800f7f0 <std+0x38>)
 800f7dc:	6224      	str	r4, [r4, #32]
 800f7de:	6263      	str	r3, [r4, #36]	; 0x24
 800f7e0:	4b04      	ldr	r3, [pc, #16]	; (800f7f4 <std+0x3c>)
 800f7e2:	62a3      	str	r3, [r4, #40]	; 0x28
 800f7e4:	4b04      	ldr	r3, [pc, #16]	; (800f7f8 <std+0x40>)
 800f7e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f7e8:	4b04      	ldr	r3, [pc, #16]	; (800f7fc <std+0x44>)
 800f7ea:	6323      	str	r3, [r4, #48]	; 0x30
 800f7ec:	bd10      	pop	{r4, pc}
 800f7ee:	bf00      	nop
 800f7f0:	0800fc7d 	.word	0x0800fc7d
 800f7f4:	0800fc9f 	.word	0x0800fc9f
 800f7f8:	0800fcd7 	.word	0x0800fcd7
 800f7fc:	0800fcfb 	.word	0x0800fcfb

0800f800 <_cleanup_r>:
 800f800:	4901      	ldr	r1, [pc, #4]	; (800f808 <_cleanup_r+0x8>)
 800f802:	f000 b8af 	b.w	800f964 <_fwalk_reent>
 800f806:	bf00      	nop
 800f808:	08010d5d 	.word	0x08010d5d

0800f80c <__sfmoreglue>:
 800f80c:	2268      	movs	r2, #104	; 0x68
 800f80e:	b570      	push	{r4, r5, r6, lr}
 800f810:	1e4d      	subs	r5, r1, #1
 800f812:	4355      	muls	r5, r2
 800f814:	460e      	mov	r6, r1
 800f816:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f81a:	f000 f921 	bl	800fa60 <_malloc_r>
 800f81e:	4604      	mov	r4, r0
 800f820:	b140      	cbz	r0, 800f834 <__sfmoreglue+0x28>
 800f822:	2100      	movs	r1, #0
 800f824:	e9c0 1600 	strd	r1, r6, [r0]
 800f828:	300c      	adds	r0, #12
 800f82a:	60a0      	str	r0, [r4, #8]
 800f82c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f830:	f000 f8ed 	bl	800fa0e <memset>
 800f834:	4620      	mov	r0, r4
 800f836:	bd70      	pop	{r4, r5, r6, pc}

0800f838 <__sfp_lock_acquire>:
 800f838:	4801      	ldr	r0, [pc, #4]	; (800f840 <__sfp_lock_acquire+0x8>)
 800f83a:	f000 b8d8 	b.w	800f9ee <__retarget_lock_acquire_recursive>
 800f83e:	bf00      	nop
 800f840:	20009a15 	.word	0x20009a15

0800f844 <__sfp_lock_release>:
 800f844:	4801      	ldr	r0, [pc, #4]	; (800f84c <__sfp_lock_release+0x8>)
 800f846:	f000 b8d3 	b.w	800f9f0 <__retarget_lock_release_recursive>
 800f84a:	bf00      	nop
 800f84c:	20009a15 	.word	0x20009a15

0800f850 <__sinit_lock_acquire>:
 800f850:	4801      	ldr	r0, [pc, #4]	; (800f858 <__sinit_lock_acquire+0x8>)
 800f852:	f000 b8cc 	b.w	800f9ee <__retarget_lock_acquire_recursive>
 800f856:	bf00      	nop
 800f858:	20009a16 	.word	0x20009a16

0800f85c <__sinit_lock_release>:
 800f85c:	4801      	ldr	r0, [pc, #4]	; (800f864 <__sinit_lock_release+0x8>)
 800f85e:	f000 b8c7 	b.w	800f9f0 <__retarget_lock_release_recursive>
 800f862:	bf00      	nop
 800f864:	20009a16 	.word	0x20009a16

0800f868 <__sinit>:
 800f868:	b510      	push	{r4, lr}
 800f86a:	4604      	mov	r4, r0
 800f86c:	f7ff fff0 	bl	800f850 <__sinit_lock_acquire>
 800f870:	69a3      	ldr	r3, [r4, #24]
 800f872:	b11b      	cbz	r3, 800f87c <__sinit+0x14>
 800f874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f878:	f7ff bff0 	b.w	800f85c <__sinit_lock_release>
 800f87c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f880:	6523      	str	r3, [r4, #80]	; 0x50
 800f882:	4b13      	ldr	r3, [pc, #76]	; (800f8d0 <__sinit+0x68>)
 800f884:	4a13      	ldr	r2, [pc, #76]	; (800f8d4 <__sinit+0x6c>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	62a2      	str	r2, [r4, #40]	; 0x28
 800f88a:	42a3      	cmp	r3, r4
 800f88c:	bf08      	it	eq
 800f88e:	2301      	moveq	r3, #1
 800f890:	4620      	mov	r0, r4
 800f892:	bf08      	it	eq
 800f894:	61a3      	streq	r3, [r4, #24]
 800f896:	f000 f81f 	bl	800f8d8 <__sfp>
 800f89a:	6060      	str	r0, [r4, #4]
 800f89c:	4620      	mov	r0, r4
 800f89e:	f000 f81b 	bl	800f8d8 <__sfp>
 800f8a2:	60a0      	str	r0, [r4, #8]
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	f000 f817 	bl	800f8d8 <__sfp>
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	2104      	movs	r1, #4
 800f8ae:	60e0      	str	r0, [r4, #12]
 800f8b0:	6860      	ldr	r0, [r4, #4]
 800f8b2:	f7ff ff81 	bl	800f7b8 <std>
 800f8b6:	2201      	movs	r2, #1
 800f8b8:	2109      	movs	r1, #9
 800f8ba:	68a0      	ldr	r0, [r4, #8]
 800f8bc:	f7ff ff7c 	bl	800f7b8 <std>
 800f8c0:	2202      	movs	r2, #2
 800f8c2:	2112      	movs	r1, #18
 800f8c4:	68e0      	ldr	r0, [r4, #12]
 800f8c6:	f7ff ff77 	bl	800f7b8 <std>
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	61a3      	str	r3, [r4, #24]
 800f8ce:	e7d1      	b.n	800f874 <__sinit+0xc>
 800f8d0:	08013714 	.word	0x08013714
 800f8d4:	0800f801 	.word	0x0800f801

0800f8d8 <__sfp>:
 800f8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8da:	4607      	mov	r7, r0
 800f8dc:	f7ff ffac 	bl	800f838 <__sfp_lock_acquire>
 800f8e0:	4b1e      	ldr	r3, [pc, #120]	; (800f95c <__sfp+0x84>)
 800f8e2:	681e      	ldr	r6, [r3, #0]
 800f8e4:	69b3      	ldr	r3, [r6, #24]
 800f8e6:	b913      	cbnz	r3, 800f8ee <__sfp+0x16>
 800f8e8:	4630      	mov	r0, r6
 800f8ea:	f7ff ffbd 	bl	800f868 <__sinit>
 800f8ee:	3648      	adds	r6, #72	; 0x48
 800f8f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f8f4:	3b01      	subs	r3, #1
 800f8f6:	d503      	bpl.n	800f900 <__sfp+0x28>
 800f8f8:	6833      	ldr	r3, [r6, #0]
 800f8fa:	b30b      	cbz	r3, 800f940 <__sfp+0x68>
 800f8fc:	6836      	ldr	r6, [r6, #0]
 800f8fe:	e7f7      	b.n	800f8f0 <__sfp+0x18>
 800f900:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f904:	b9d5      	cbnz	r5, 800f93c <__sfp+0x64>
 800f906:	4b16      	ldr	r3, [pc, #88]	; (800f960 <__sfp+0x88>)
 800f908:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f90c:	60e3      	str	r3, [r4, #12]
 800f90e:	6665      	str	r5, [r4, #100]	; 0x64
 800f910:	f000 f86c 	bl	800f9ec <__retarget_lock_init_recursive>
 800f914:	f7ff ff96 	bl	800f844 <__sfp_lock_release>
 800f918:	2208      	movs	r2, #8
 800f91a:	4629      	mov	r1, r5
 800f91c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f920:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f924:	6025      	str	r5, [r4, #0]
 800f926:	61a5      	str	r5, [r4, #24]
 800f928:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f92c:	f000 f86f 	bl	800fa0e <memset>
 800f930:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f934:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f938:	4620      	mov	r0, r4
 800f93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f93c:	3468      	adds	r4, #104	; 0x68
 800f93e:	e7d9      	b.n	800f8f4 <__sfp+0x1c>
 800f940:	2104      	movs	r1, #4
 800f942:	4638      	mov	r0, r7
 800f944:	f7ff ff62 	bl	800f80c <__sfmoreglue>
 800f948:	4604      	mov	r4, r0
 800f94a:	6030      	str	r0, [r6, #0]
 800f94c:	2800      	cmp	r0, #0
 800f94e:	d1d5      	bne.n	800f8fc <__sfp+0x24>
 800f950:	f7ff ff78 	bl	800f844 <__sfp_lock_release>
 800f954:	230c      	movs	r3, #12
 800f956:	603b      	str	r3, [r7, #0]
 800f958:	e7ee      	b.n	800f938 <__sfp+0x60>
 800f95a:	bf00      	nop
 800f95c:	08013714 	.word	0x08013714
 800f960:	ffff0001 	.word	0xffff0001

0800f964 <_fwalk_reent>:
 800f964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f968:	4606      	mov	r6, r0
 800f96a:	4688      	mov	r8, r1
 800f96c:	2700      	movs	r7, #0
 800f96e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f972:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f976:	f1b9 0901 	subs.w	r9, r9, #1
 800f97a:	d505      	bpl.n	800f988 <_fwalk_reent+0x24>
 800f97c:	6824      	ldr	r4, [r4, #0]
 800f97e:	2c00      	cmp	r4, #0
 800f980:	d1f7      	bne.n	800f972 <_fwalk_reent+0xe>
 800f982:	4638      	mov	r0, r7
 800f984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f988:	89ab      	ldrh	r3, [r5, #12]
 800f98a:	2b01      	cmp	r3, #1
 800f98c:	d907      	bls.n	800f99e <_fwalk_reent+0x3a>
 800f98e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f992:	3301      	adds	r3, #1
 800f994:	d003      	beq.n	800f99e <_fwalk_reent+0x3a>
 800f996:	4629      	mov	r1, r5
 800f998:	4630      	mov	r0, r6
 800f99a:	47c0      	blx	r8
 800f99c:	4307      	orrs	r7, r0
 800f99e:	3568      	adds	r5, #104	; 0x68
 800f9a0:	e7e9      	b.n	800f976 <_fwalk_reent+0x12>
	...

0800f9a4 <__libc_init_array>:
 800f9a4:	b570      	push	{r4, r5, r6, lr}
 800f9a6:	2600      	movs	r6, #0
 800f9a8:	4d0c      	ldr	r5, [pc, #48]	; (800f9dc <__libc_init_array+0x38>)
 800f9aa:	4c0d      	ldr	r4, [pc, #52]	; (800f9e0 <__libc_init_array+0x3c>)
 800f9ac:	1b64      	subs	r4, r4, r5
 800f9ae:	10a4      	asrs	r4, r4, #2
 800f9b0:	42a6      	cmp	r6, r4
 800f9b2:	d109      	bne.n	800f9c8 <__libc_init_array+0x24>
 800f9b4:	f003 f94c 	bl	8012c50 <_init>
 800f9b8:	2600      	movs	r6, #0
 800f9ba:	4d0a      	ldr	r5, [pc, #40]	; (800f9e4 <__libc_init_array+0x40>)
 800f9bc:	4c0a      	ldr	r4, [pc, #40]	; (800f9e8 <__libc_init_array+0x44>)
 800f9be:	1b64      	subs	r4, r4, r5
 800f9c0:	10a4      	asrs	r4, r4, #2
 800f9c2:	42a6      	cmp	r6, r4
 800f9c4:	d105      	bne.n	800f9d2 <__libc_init_array+0x2e>
 800f9c6:	bd70      	pop	{r4, r5, r6, pc}
 800f9c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9cc:	4798      	blx	r3
 800f9ce:	3601      	adds	r6, #1
 800f9d0:	e7ee      	b.n	800f9b0 <__libc_init_array+0xc>
 800f9d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9d6:	4798      	blx	r3
 800f9d8:	3601      	adds	r6, #1
 800f9da:	e7f2      	b.n	800f9c2 <__libc_init_array+0x1e>
 800f9dc:	08013b48 	.word	0x08013b48
 800f9e0:	08013b48 	.word	0x08013b48
 800f9e4:	08013b48 	.word	0x08013b48
 800f9e8:	08013b4c 	.word	0x08013b4c

0800f9ec <__retarget_lock_init_recursive>:
 800f9ec:	4770      	bx	lr

0800f9ee <__retarget_lock_acquire_recursive>:
 800f9ee:	4770      	bx	lr

0800f9f0 <__retarget_lock_release_recursive>:
 800f9f0:	4770      	bx	lr

0800f9f2 <memcpy>:
 800f9f2:	440a      	add	r2, r1
 800f9f4:	4291      	cmp	r1, r2
 800f9f6:	f100 33ff 	add.w	r3, r0, #4294967295
 800f9fa:	d100      	bne.n	800f9fe <memcpy+0xc>
 800f9fc:	4770      	bx	lr
 800f9fe:	b510      	push	{r4, lr}
 800fa00:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa04:	4291      	cmp	r1, r2
 800fa06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa0a:	d1f9      	bne.n	800fa00 <memcpy+0xe>
 800fa0c:	bd10      	pop	{r4, pc}

0800fa0e <memset>:
 800fa0e:	4603      	mov	r3, r0
 800fa10:	4402      	add	r2, r0
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d100      	bne.n	800fa18 <memset+0xa>
 800fa16:	4770      	bx	lr
 800fa18:	f803 1b01 	strb.w	r1, [r3], #1
 800fa1c:	e7f9      	b.n	800fa12 <memset+0x4>
	...

0800fa20 <sbrk_aligned>:
 800fa20:	b570      	push	{r4, r5, r6, lr}
 800fa22:	4e0e      	ldr	r6, [pc, #56]	; (800fa5c <sbrk_aligned+0x3c>)
 800fa24:	460c      	mov	r4, r1
 800fa26:	6831      	ldr	r1, [r6, #0]
 800fa28:	4605      	mov	r5, r0
 800fa2a:	b911      	cbnz	r1, 800fa32 <sbrk_aligned+0x12>
 800fa2c:	f000 f8f6 	bl	800fc1c <_sbrk_r>
 800fa30:	6030      	str	r0, [r6, #0]
 800fa32:	4621      	mov	r1, r4
 800fa34:	4628      	mov	r0, r5
 800fa36:	f000 f8f1 	bl	800fc1c <_sbrk_r>
 800fa3a:	1c43      	adds	r3, r0, #1
 800fa3c:	d00a      	beq.n	800fa54 <sbrk_aligned+0x34>
 800fa3e:	1cc4      	adds	r4, r0, #3
 800fa40:	f024 0403 	bic.w	r4, r4, #3
 800fa44:	42a0      	cmp	r0, r4
 800fa46:	d007      	beq.n	800fa58 <sbrk_aligned+0x38>
 800fa48:	1a21      	subs	r1, r4, r0
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	f000 f8e6 	bl	800fc1c <_sbrk_r>
 800fa50:	3001      	adds	r0, #1
 800fa52:	d101      	bne.n	800fa58 <sbrk_aligned+0x38>
 800fa54:	f04f 34ff 	mov.w	r4, #4294967295
 800fa58:	4620      	mov	r0, r4
 800fa5a:	bd70      	pop	{r4, r5, r6, pc}
 800fa5c:	20009a1c 	.word	0x20009a1c

0800fa60 <_malloc_r>:
 800fa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa64:	1ccd      	adds	r5, r1, #3
 800fa66:	f025 0503 	bic.w	r5, r5, #3
 800fa6a:	3508      	adds	r5, #8
 800fa6c:	2d0c      	cmp	r5, #12
 800fa6e:	bf38      	it	cc
 800fa70:	250c      	movcc	r5, #12
 800fa72:	2d00      	cmp	r5, #0
 800fa74:	4607      	mov	r7, r0
 800fa76:	db01      	blt.n	800fa7c <_malloc_r+0x1c>
 800fa78:	42a9      	cmp	r1, r5
 800fa7a:	d905      	bls.n	800fa88 <_malloc_r+0x28>
 800fa7c:	230c      	movs	r3, #12
 800fa7e:	2600      	movs	r6, #0
 800fa80:	603b      	str	r3, [r7, #0]
 800fa82:	4630      	mov	r0, r6
 800fa84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa88:	4e2e      	ldr	r6, [pc, #184]	; (800fb44 <_malloc_r+0xe4>)
 800fa8a:	f001 fd47 	bl	801151c <__malloc_lock>
 800fa8e:	6833      	ldr	r3, [r6, #0]
 800fa90:	461c      	mov	r4, r3
 800fa92:	bb34      	cbnz	r4, 800fae2 <_malloc_r+0x82>
 800fa94:	4629      	mov	r1, r5
 800fa96:	4638      	mov	r0, r7
 800fa98:	f7ff ffc2 	bl	800fa20 <sbrk_aligned>
 800fa9c:	1c43      	adds	r3, r0, #1
 800fa9e:	4604      	mov	r4, r0
 800faa0:	d14d      	bne.n	800fb3e <_malloc_r+0xde>
 800faa2:	6834      	ldr	r4, [r6, #0]
 800faa4:	4626      	mov	r6, r4
 800faa6:	2e00      	cmp	r6, #0
 800faa8:	d140      	bne.n	800fb2c <_malloc_r+0xcc>
 800faaa:	6823      	ldr	r3, [r4, #0]
 800faac:	4631      	mov	r1, r6
 800faae:	4638      	mov	r0, r7
 800fab0:	eb04 0803 	add.w	r8, r4, r3
 800fab4:	f000 f8b2 	bl	800fc1c <_sbrk_r>
 800fab8:	4580      	cmp	r8, r0
 800faba:	d13a      	bne.n	800fb32 <_malloc_r+0xd2>
 800fabc:	6821      	ldr	r1, [r4, #0]
 800fabe:	3503      	adds	r5, #3
 800fac0:	1a6d      	subs	r5, r5, r1
 800fac2:	f025 0503 	bic.w	r5, r5, #3
 800fac6:	3508      	adds	r5, #8
 800fac8:	2d0c      	cmp	r5, #12
 800faca:	bf38      	it	cc
 800facc:	250c      	movcc	r5, #12
 800face:	4638      	mov	r0, r7
 800fad0:	4629      	mov	r1, r5
 800fad2:	f7ff ffa5 	bl	800fa20 <sbrk_aligned>
 800fad6:	3001      	adds	r0, #1
 800fad8:	d02b      	beq.n	800fb32 <_malloc_r+0xd2>
 800fada:	6823      	ldr	r3, [r4, #0]
 800fadc:	442b      	add	r3, r5
 800fade:	6023      	str	r3, [r4, #0]
 800fae0:	e00e      	b.n	800fb00 <_malloc_r+0xa0>
 800fae2:	6822      	ldr	r2, [r4, #0]
 800fae4:	1b52      	subs	r2, r2, r5
 800fae6:	d41e      	bmi.n	800fb26 <_malloc_r+0xc6>
 800fae8:	2a0b      	cmp	r2, #11
 800faea:	d916      	bls.n	800fb1a <_malloc_r+0xba>
 800faec:	1961      	adds	r1, r4, r5
 800faee:	42a3      	cmp	r3, r4
 800faf0:	6025      	str	r5, [r4, #0]
 800faf2:	bf18      	it	ne
 800faf4:	6059      	strne	r1, [r3, #4]
 800faf6:	6863      	ldr	r3, [r4, #4]
 800faf8:	bf08      	it	eq
 800fafa:	6031      	streq	r1, [r6, #0]
 800fafc:	5162      	str	r2, [r4, r5]
 800fafe:	604b      	str	r3, [r1, #4]
 800fb00:	4638      	mov	r0, r7
 800fb02:	f104 060b 	add.w	r6, r4, #11
 800fb06:	f001 fd0f 	bl	8011528 <__malloc_unlock>
 800fb0a:	f026 0607 	bic.w	r6, r6, #7
 800fb0e:	1d23      	adds	r3, r4, #4
 800fb10:	1af2      	subs	r2, r6, r3
 800fb12:	d0b6      	beq.n	800fa82 <_malloc_r+0x22>
 800fb14:	1b9b      	subs	r3, r3, r6
 800fb16:	50a3      	str	r3, [r4, r2]
 800fb18:	e7b3      	b.n	800fa82 <_malloc_r+0x22>
 800fb1a:	6862      	ldr	r2, [r4, #4]
 800fb1c:	42a3      	cmp	r3, r4
 800fb1e:	bf0c      	ite	eq
 800fb20:	6032      	streq	r2, [r6, #0]
 800fb22:	605a      	strne	r2, [r3, #4]
 800fb24:	e7ec      	b.n	800fb00 <_malloc_r+0xa0>
 800fb26:	4623      	mov	r3, r4
 800fb28:	6864      	ldr	r4, [r4, #4]
 800fb2a:	e7b2      	b.n	800fa92 <_malloc_r+0x32>
 800fb2c:	4634      	mov	r4, r6
 800fb2e:	6876      	ldr	r6, [r6, #4]
 800fb30:	e7b9      	b.n	800faa6 <_malloc_r+0x46>
 800fb32:	230c      	movs	r3, #12
 800fb34:	4638      	mov	r0, r7
 800fb36:	603b      	str	r3, [r7, #0]
 800fb38:	f001 fcf6 	bl	8011528 <__malloc_unlock>
 800fb3c:	e7a1      	b.n	800fa82 <_malloc_r+0x22>
 800fb3e:	6025      	str	r5, [r4, #0]
 800fb40:	e7de      	b.n	800fb00 <_malloc_r+0xa0>
 800fb42:	bf00      	nop
 800fb44:	20009a18 	.word	0x20009a18

0800fb48 <cleanup_glue>:
 800fb48:	b538      	push	{r3, r4, r5, lr}
 800fb4a:	460c      	mov	r4, r1
 800fb4c:	6809      	ldr	r1, [r1, #0]
 800fb4e:	4605      	mov	r5, r0
 800fb50:	b109      	cbz	r1, 800fb56 <cleanup_glue+0xe>
 800fb52:	f7ff fff9 	bl	800fb48 <cleanup_glue>
 800fb56:	4621      	mov	r1, r4
 800fb58:	4628      	mov	r0, r5
 800fb5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb5e:	f002 b9b5 	b.w	8011ecc <_free_r>
	...

0800fb64 <_reclaim_reent>:
 800fb64:	4b2c      	ldr	r3, [pc, #176]	; (800fc18 <_reclaim_reent+0xb4>)
 800fb66:	b570      	push	{r4, r5, r6, lr}
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	4604      	mov	r4, r0
 800fb6c:	4283      	cmp	r3, r0
 800fb6e:	d051      	beq.n	800fc14 <_reclaim_reent+0xb0>
 800fb70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fb72:	b143      	cbz	r3, 800fb86 <_reclaim_reent+0x22>
 800fb74:	68db      	ldr	r3, [r3, #12]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d14a      	bne.n	800fc10 <_reclaim_reent+0xac>
 800fb7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb7c:	6819      	ldr	r1, [r3, #0]
 800fb7e:	b111      	cbz	r1, 800fb86 <_reclaim_reent+0x22>
 800fb80:	4620      	mov	r0, r4
 800fb82:	f002 f9a3 	bl	8011ecc <_free_r>
 800fb86:	6961      	ldr	r1, [r4, #20]
 800fb88:	b111      	cbz	r1, 800fb90 <_reclaim_reent+0x2c>
 800fb8a:	4620      	mov	r0, r4
 800fb8c:	f002 f99e 	bl	8011ecc <_free_r>
 800fb90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fb92:	b111      	cbz	r1, 800fb9a <_reclaim_reent+0x36>
 800fb94:	4620      	mov	r0, r4
 800fb96:	f002 f999 	bl	8011ecc <_free_r>
 800fb9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fb9c:	b111      	cbz	r1, 800fba4 <_reclaim_reent+0x40>
 800fb9e:	4620      	mov	r0, r4
 800fba0:	f002 f994 	bl	8011ecc <_free_r>
 800fba4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fba6:	b111      	cbz	r1, 800fbae <_reclaim_reent+0x4a>
 800fba8:	4620      	mov	r0, r4
 800fbaa:	f002 f98f 	bl	8011ecc <_free_r>
 800fbae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fbb0:	b111      	cbz	r1, 800fbb8 <_reclaim_reent+0x54>
 800fbb2:	4620      	mov	r0, r4
 800fbb4:	f002 f98a 	bl	8011ecc <_free_r>
 800fbb8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fbba:	b111      	cbz	r1, 800fbc2 <_reclaim_reent+0x5e>
 800fbbc:	4620      	mov	r0, r4
 800fbbe:	f002 f985 	bl	8011ecc <_free_r>
 800fbc2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fbc4:	b111      	cbz	r1, 800fbcc <_reclaim_reent+0x68>
 800fbc6:	4620      	mov	r0, r4
 800fbc8:	f002 f980 	bl	8011ecc <_free_r>
 800fbcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fbce:	b111      	cbz	r1, 800fbd6 <_reclaim_reent+0x72>
 800fbd0:	4620      	mov	r0, r4
 800fbd2:	f002 f97b 	bl	8011ecc <_free_r>
 800fbd6:	69a3      	ldr	r3, [r4, #24]
 800fbd8:	b1e3      	cbz	r3, 800fc14 <_reclaim_reent+0xb0>
 800fbda:	4620      	mov	r0, r4
 800fbdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fbde:	4798      	blx	r3
 800fbe0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fbe2:	b1b9      	cbz	r1, 800fc14 <_reclaim_reent+0xb0>
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fbea:	f7ff bfad 	b.w	800fb48 <cleanup_glue>
 800fbee:	5949      	ldr	r1, [r1, r5]
 800fbf0:	b941      	cbnz	r1, 800fc04 <_reclaim_reent+0xa0>
 800fbf2:	3504      	adds	r5, #4
 800fbf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbf6:	2d80      	cmp	r5, #128	; 0x80
 800fbf8:	68d9      	ldr	r1, [r3, #12]
 800fbfa:	d1f8      	bne.n	800fbee <_reclaim_reent+0x8a>
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	f002 f965 	bl	8011ecc <_free_r>
 800fc02:	e7ba      	b.n	800fb7a <_reclaim_reent+0x16>
 800fc04:	680e      	ldr	r6, [r1, #0]
 800fc06:	4620      	mov	r0, r4
 800fc08:	f002 f960 	bl	8011ecc <_free_r>
 800fc0c:	4631      	mov	r1, r6
 800fc0e:	e7ef      	b.n	800fbf0 <_reclaim_reent+0x8c>
 800fc10:	2500      	movs	r5, #0
 800fc12:	e7ef      	b.n	800fbf4 <_reclaim_reent+0x90>
 800fc14:	bd70      	pop	{r4, r5, r6, pc}
 800fc16:	bf00      	nop
 800fc18:	2000009c 	.word	0x2000009c

0800fc1c <_sbrk_r>:
 800fc1c:	b538      	push	{r3, r4, r5, lr}
 800fc1e:	2300      	movs	r3, #0
 800fc20:	4d05      	ldr	r5, [pc, #20]	; (800fc38 <_sbrk_r+0x1c>)
 800fc22:	4604      	mov	r4, r0
 800fc24:	4608      	mov	r0, r1
 800fc26:	602b      	str	r3, [r5, #0]
 800fc28:	f7f4 fa3a 	bl	80040a0 <_sbrk>
 800fc2c:	1c43      	adds	r3, r0, #1
 800fc2e:	d102      	bne.n	800fc36 <_sbrk_r+0x1a>
 800fc30:	682b      	ldr	r3, [r5, #0]
 800fc32:	b103      	cbz	r3, 800fc36 <_sbrk_r+0x1a>
 800fc34:	6023      	str	r3, [r4, #0]
 800fc36:	bd38      	pop	{r3, r4, r5, pc}
 800fc38:	20009a20 	.word	0x20009a20

0800fc3c <siprintf>:
 800fc3c:	b40e      	push	{r1, r2, r3}
 800fc3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fc42:	b500      	push	{lr}
 800fc44:	b09c      	sub	sp, #112	; 0x70
 800fc46:	ab1d      	add	r3, sp, #116	; 0x74
 800fc48:	9002      	str	r0, [sp, #8]
 800fc4a:	9006      	str	r0, [sp, #24]
 800fc4c:	9107      	str	r1, [sp, #28]
 800fc4e:	9104      	str	r1, [sp, #16]
 800fc50:	4808      	ldr	r0, [pc, #32]	; (800fc74 <siprintf+0x38>)
 800fc52:	4909      	ldr	r1, [pc, #36]	; (800fc78 <siprintf+0x3c>)
 800fc54:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc58:	9105      	str	r1, [sp, #20]
 800fc5a:	6800      	ldr	r0, [r0, #0]
 800fc5c:	a902      	add	r1, sp, #8
 800fc5e:	9301      	str	r3, [sp, #4]
 800fc60:	f002 f9d8 	bl	8012014 <_svfiprintf_r>
 800fc64:	2200      	movs	r2, #0
 800fc66:	9b02      	ldr	r3, [sp, #8]
 800fc68:	701a      	strb	r2, [r3, #0]
 800fc6a:	b01c      	add	sp, #112	; 0x70
 800fc6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc70:	b003      	add	sp, #12
 800fc72:	4770      	bx	lr
 800fc74:	2000009c 	.word	0x2000009c
 800fc78:	ffff0208 	.word	0xffff0208

0800fc7c <__sread>:
 800fc7c:	b510      	push	{r4, lr}
 800fc7e:	460c      	mov	r4, r1
 800fc80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc84:	f002 fdb4 	bl	80127f0 <_read_r>
 800fc88:	2800      	cmp	r0, #0
 800fc8a:	bfab      	itete	ge
 800fc8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fc8e:	89a3      	ldrhlt	r3, [r4, #12]
 800fc90:	181b      	addge	r3, r3, r0
 800fc92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fc96:	bfac      	ite	ge
 800fc98:	6563      	strge	r3, [r4, #84]	; 0x54
 800fc9a:	81a3      	strhlt	r3, [r4, #12]
 800fc9c:	bd10      	pop	{r4, pc}

0800fc9e <__swrite>:
 800fc9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fca2:	461f      	mov	r7, r3
 800fca4:	898b      	ldrh	r3, [r1, #12]
 800fca6:	4605      	mov	r5, r0
 800fca8:	05db      	lsls	r3, r3, #23
 800fcaa:	460c      	mov	r4, r1
 800fcac:	4616      	mov	r6, r2
 800fcae:	d505      	bpl.n	800fcbc <__swrite+0x1e>
 800fcb0:	2302      	movs	r3, #2
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcb8:	f001 fc04 	bl	80114c4 <_lseek_r>
 800fcbc:	89a3      	ldrh	r3, [r4, #12]
 800fcbe:	4632      	mov	r2, r6
 800fcc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fcc4:	81a3      	strh	r3, [r4, #12]
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	463b      	mov	r3, r7
 800fcca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fcce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcd2:	f000 bf81 	b.w	8010bd8 <_write_r>

0800fcd6 <__sseek>:
 800fcd6:	b510      	push	{r4, lr}
 800fcd8:	460c      	mov	r4, r1
 800fcda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcde:	f001 fbf1 	bl	80114c4 <_lseek_r>
 800fce2:	1c43      	adds	r3, r0, #1
 800fce4:	89a3      	ldrh	r3, [r4, #12]
 800fce6:	bf15      	itete	ne
 800fce8:	6560      	strne	r0, [r4, #84]	; 0x54
 800fcea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fcee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fcf2:	81a3      	strheq	r3, [r4, #12]
 800fcf4:	bf18      	it	ne
 800fcf6:	81a3      	strhne	r3, [r4, #12]
 800fcf8:	bd10      	pop	{r4, pc}

0800fcfa <__sclose>:
 800fcfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcfe:	f000 bf9b 	b.w	8010c38 <_close_r>

0800fd02 <strcat>:
 800fd02:	4602      	mov	r2, r0
 800fd04:	b510      	push	{r4, lr}
 800fd06:	7814      	ldrb	r4, [r2, #0]
 800fd08:	4613      	mov	r3, r2
 800fd0a:	3201      	adds	r2, #1
 800fd0c:	2c00      	cmp	r4, #0
 800fd0e:	d1fa      	bne.n	800fd06 <strcat+0x4>
 800fd10:	3b01      	subs	r3, #1
 800fd12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd1a:	2a00      	cmp	r2, #0
 800fd1c:	d1f9      	bne.n	800fd12 <strcat+0x10>
 800fd1e:	bd10      	pop	{r4, pc}

0800fd20 <strcpy>:
 800fd20:	4603      	mov	r3, r0
 800fd22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd26:	f803 2b01 	strb.w	r2, [r3], #1
 800fd2a:	2a00      	cmp	r2, #0
 800fd2c:	d1f9      	bne.n	800fd22 <strcpy+0x2>
 800fd2e:	4770      	bx	lr

0800fd30 <strstr>:
 800fd30:	780a      	ldrb	r2, [r1, #0]
 800fd32:	b570      	push	{r4, r5, r6, lr}
 800fd34:	b96a      	cbnz	r2, 800fd52 <strstr+0x22>
 800fd36:	bd70      	pop	{r4, r5, r6, pc}
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d109      	bne.n	800fd50 <strstr+0x20>
 800fd3c:	460c      	mov	r4, r1
 800fd3e:	4605      	mov	r5, r0
 800fd40:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d0f6      	beq.n	800fd36 <strstr+0x6>
 800fd48:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800fd4c:	429e      	cmp	r6, r3
 800fd4e:	d0f7      	beq.n	800fd40 <strstr+0x10>
 800fd50:	3001      	adds	r0, #1
 800fd52:	7803      	ldrb	r3, [r0, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d1ef      	bne.n	800fd38 <strstr+0x8>
 800fd58:	4618      	mov	r0, r3
 800fd5a:	e7ec      	b.n	800fd36 <strstr+0x6>

0800fd5c <sulp>:
 800fd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd60:	460f      	mov	r7, r1
 800fd62:	4690      	mov	r8, r2
 800fd64:	f001 ff56 	bl	8011c14 <__ulp>
 800fd68:	4604      	mov	r4, r0
 800fd6a:	460d      	mov	r5, r1
 800fd6c:	f1b8 0f00 	cmp.w	r8, #0
 800fd70:	d011      	beq.n	800fd96 <sulp+0x3a>
 800fd72:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800fd76:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	dd0b      	ble.n	800fd96 <sulp+0x3a>
 800fd7e:	2400      	movs	r4, #0
 800fd80:	051b      	lsls	r3, r3, #20
 800fd82:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fd86:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fd8a:	4622      	mov	r2, r4
 800fd8c:	462b      	mov	r3, r5
 800fd8e:	f7f0 fc13 	bl	80005b8 <__aeabi_dmul>
 800fd92:	4604      	mov	r4, r0
 800fd94:	460d      	mov	r5, r1
 800fd96:	4620      	mov	r0, r4
 800fd98:	4629      	mov	r1, r5
 800fd9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800fda0 <_strtod_l>:
 800fda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fda4:	469b      	mov	fp, r3
 800fda6:	2300      	movs	r3, #0
 800fda8:	b09f      	sub	sp, #124	; 0x7c
 800fdaa:	931a      	str	r3, [sp, #104]	; 0x68
 800fdac:	4b9e      	ldr	r3, [pc, #632]	; (8010028 <_strtod_l+0x288>)
 800fdae:	4682      	mov	sl, r0
 800fdb0:	681f      	ldr	r7, [r3, #0]
 800fdb2:	460e      	mov	r6, r1
 800fdb4:	4638      	mov	r0, r7
 800fdb6:	9215      	str	r2, [sp, #84]	; 0x54
 800fdb8:	f7f0 fa3a 	bl	8000230 <strlen>
 800fdbc:	f04f 0800 	mov.w	r8, #0
 800fdc0:	4604      	mov	r4, r0
 800fdc2:	f04f 0900 	mov.w	r9, #0
 800fdc6:	9619      	str	r6, [sp, #100]	; 0x64
 800fdc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fdca:	781a      	ldrb	r2, [r3, #0]
 800fdcc:	2a2b      	cmp	r2, #43	; 0x2b
 800fdce:	d04c      	beq.n	800fe6a <_strtod_l+0xca>
 800fdd0:	d83a      	bhi.n	800fe48 <_strtod_l+0xa8>
 800fdd2:	2a0d      	cmp	r2, #13
 800fdd4:	d833      	bhi.n	800fe3e <_strtod_l+0x9e>
 800fdd6:	2a08      	cmp	r2, #8
 800fdd8:	d833      	bhi.n	800fe42 <_strtod_l+0xa2>
 800fdda:	2a00      	cmp	r2, #0
 800fddc:	d03d      	beq.n	800fe5a <_strtod_l+0xba>
 800fdde:	2300      	movs	r3, #0
 800fde0:	930a      	str	r3, [sp, #40]	; 0x28
 800fde2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800fde4:	782b      	ldrb	r3, [r5, #0]
 800fde6:	2b30      	cmp	r3, #48	; 0x30
 800fde8:	f040 80aa 	bne.w	800ff40 <_strtod_l+0x1a0>
 800fdec:	786b      	ldrb	r3, [r5, #1]
 800fdee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fdf2:	2b58      	cmp	r3, #88	; 0x58
 800fdf4:	d166      	bne.n	800fec4 <_strtod_l+0x124>
 800fdf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdf8:	4650      	mov	r0, sl
 800fdfa:	9301      	str	r3, [sp, #4]
 800fdfc:	ab1a      	add	r3, sp, #104	; 0x68
 800fdfe:	9300      	str	r3, [sp, #0]
 800fe00:	4a8a      	ldr	r2, [pc, #552]	; (801002c <_strtod_l+0x28c>)
 800fe02:	f8cd b008 	str.w	fp, [sp, #8]
 800fe06:	ab1b      	add	r3, sp, #108	; 0x6c
 800fe08:	a919      	add	r1, sp, #100	; 0x64
 800fe0a:	f001 f85d 	bl	8010ec8 <__gethex>
 800fe0e:	f010 0607 	ands.w	r6, r0, #7
 800fe12:	4604      	mov	r4, r0
 800fe14:	d005      	beq.n	800fe22 <_strtod_l+0x82>
 800fe16:	2e06      	cmp	r6, #6
 800fe18:	d129      	bne.n	800fe6e <_strtod_l+0xce>
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	3501      	adds	r5, #1
 800fe1e:	9519      	str	r5, [sp, #100]	; 0x64
 800fe20:	930a      	str	r3, [sp, #40]	; 0x28
 800fe22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	f040 858a 	bne.w	801093e <_strtod_l+0xb9e>
 800fe2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe2c:	b1d3      	cbz	r3, 800fe64 <_strtod_l+0xc4>
 800fe2e:	4642      	mov	r2, r8
 800fe30:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fe34:	4610      	mov	r0, r2
 800fe36:	4619      	mov	r1, r3
 800fe38:	b01f      	add	sp, #124	; 0x7c
 800fe3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe3e:	2a20      	cmp	r2, #32
 800fe40:	d1cd      	bne.n	800fdde <_strtod_l+0x3e>
 800fe42:	3301      	adds	r3, #1
 800fe44:	9319      	str	r3, [sp, #100]	; 0x64
 800fe46:	e7bf      	b.n	800fdc8 <_strtod_l+0x28>
 800fe48:	2a2d      	cmp	r2, #45	; 0x2d
 800fe4a:	d1c8      	bne.n	800fdde <_strtod_l+0x3e>
 800fe4c:	2201      	movs	r2, #1
 800fe4e:	920a      	str	r2, [sp, #40]	; 0x28
 800fe50:	1c5a      	adds	r2, r3, #1
 800fe52:	9219      	str	r2, [sp, #100]	; 0x64
 800fe54:	785b      	ldrb	r3, [r3, #1]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d1c3      	bne.n	800fde2 <_strtod_l+0x42>
 800fe5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe5c:	9619      	str	r6, [sp, #100]	; 0x64
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	f040 856b 	bne.w	801093a <_strtod_l+0xb9a>
 800fe64:	4642      	mov	r2, r8
 800fe66:	464b      	mov	r3, r9
 800fe68:	e7e4      	b.n	800fe34 <_strtod_l+0x94>
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	e7ef      	b.n	800fe4e <_strtod_l+0xae>
 800fe6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fe70:	b13a      	cbz	r2, 800fe82 <_strtod_l+0xe2>
 800fe72:	2135      	movs	r1, #53	; 0x35
 800fe74:	a81c      	add	r0, sp, #112	; 0x70
 800fe76:	f001 ffd1 	bl	8011e1c <__copybits>
 800fe7a:	4650      	mov	r0, sl
 800fe7c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800fe7e:	f001 fb99 	bl	80115b4 <_Bfree>
 800fe82:	3e01      	subs	r6, #1
 800fe84:	2e04      	cmp	r6, #4
 800fe86:	d806      	bhi.n	800fe96 <_strtod_l+0xf6>
 800fe88:	e8df f006 	tbb	[pc, r6]
 800fe8c:	1714030a 	.word	0x1714030a
 800fe90:	0a          	.byte	0x0a
 800fe91:	00          	.byte	0x00
 800fe92:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800fe96:	0721      	lsls	r1, r4, #28
 800fe98:	d5c3      	bpl.n	800fe22 <_strtod_l+0x82>
 800fe9a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800fe9e:	e7c0      	b.n	800fe22 <_strtod_l+0x82>
 800fea0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800fea2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800fea6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800feaa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800feae:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800feb2:	e7f0      	b.n	800fe96 <_strtod_l+0xf6>
 800feb4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010030 <_strtod_l+0x290>
 800feb8:	e7ed      	b.n	800fe96 <_strtod_l+0xf6>
 800feba:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800febe:	f04f 38ff 	mov.w	r8, #4294967295
 800fec2:	e7e8      	b.n	800fe96 <_strtod_l+0xf6>
 800fec4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fec6:	1c5a      	adds	r2, r3, #1
 800fec8:	9219      	str	r2, [sp, #100]	; 0x64
 800feca:	785b      	ldrb	r3, [r3, #1]
 800fecc:	2b30      	cmp	r3, #48	; 0x30
 800fece:	d0f9      	beq.n	800fec4 <_strtod_l+0x124>
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d0a6      	beq.n	800fe22 <_strtod_l+0x82>
 800fed4:	2301      	movs	r3, #1
 800fed6:	9307      	str	r3, [sp, #28]
 800fed8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800feda:	220a      	movs	r2, #10
 800fedc:	9308      	str	r3, [sp, #32]
 800fede:	2300      	movs	r3, #0
 800fee0:	469b      	mov	fp, r3
 800fee2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800fee6:	9819      	ldr	r0, [sp, #100]	; 0x64
 800fee8:	7805      	ldrb	r5, [r0, #0]
 800feea:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800feee:	b2d9      	uxtb	r1, r3
 800fef0:	2909      	cmp	r1, #9
 800fef2:	d927      	bls.n	800ff44 <_strtod_l+0x1a4>
 800fef4:	4622      	mov	r2, r4
 800fef6:	4639      	mov	r1, r7
 800fef8:	f002 fc96 	bl	8012828 <strncmp>
 800fefc:	2800      	cmp	r0, #0
 800fefe:	d033      	beq.n	800ff68 <_strtod_l+0x1c8>
 800ff00:	2000      	movs	r0, #0
 800ff02:	462a      	mov	r2, r5
 800ff04:	465c      	mov	r4, fp
 800ff06:	4603      	mov	r3, r0
 800ff08:	9004      	str	r0, [sp, #16]
 800ff0a:	2a65      	cmp	r2, #101	; 0x65
 800ff0c:	d001      	beq.n	800ff12 <_strtod_l+0x172>
 800ff0e:	2a45      	cmp	r2, #69	; 0x45
 800ff10:	d114      	bne.n	800ff3c <_strtod_l+0x19c>
 800ff12:	b91c      	cbnz	r4, 800ff1c <_strtod_l+0x17c>
 800ff14:	9a07      	ldr	r2, [sp, #28]
 800ff16:	4302      	orrs	r2, r0
 800ff18:	d09f      	beq.n	800fe5a <_strtod_l+0xba>
 800ff1a:	2400      	movs	r4, #0
 800ff1c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ff1e:	1c72      	adds	r2, r6, #1
 800ff20:	9219      	str	r2, [sp, #100]	; 0x64
 800ff22:	7872      	ldrb	r2, [r6, #1]
 800ff24:	2a2b      	cmp	r2, #43	; 0x2b
 800ff26:	d079      	beq.n	801001c <_strtod_l+0x27c>
 800ff28:	2a2d      	cmp	r2, #45	; 0x2d
 800ff2a:	f000 8083 	beq.w	8010034 <_strtod_l+0x294>
 800ff2e:	2700      	movs	r7, #0
 800ff30:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ff34:	2909      	cmp	r1, #9
 800ff36:	f240 8083 	bls.w	8010040 <_strtod_l+0x2a0>
 800ff3a:	9619      	str	r6, [sp, #100]	; 0x64
 800ff3c:	2500      	movs	r5, #0
 800ff3e:	e09f      	b.n	8010080 <_strtod_l+0x2e0>
 800ff40:	2300      	movs	r3, #0
 800ff42:	e7c8      	b.n	800fed6 <_strtod_l+0x136>
 800ff44:	f1bb 0f08 	cmp.w	fp, #8
 800ff48:	bfd5      	itete	le
 800ff4a:	9906      	ldrle	r1, [sp, #24]
 800ff4c:	9905      	ldrgt	r1, [sp, #20]
 800ff4e:	fb02 3301 	mlale	r3, r2, r1, r3
 800ff52:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ff56:	f100 0001 	add.w	r0, r0, #1
 800ff5a:	bfd4      	ite	le
 800ff5c:	9306      	strle	r3, [sp, #24]
 800ff5e:	9305      	strgt	r3, [sp, #20]
 800ff60:	f10b 0b01 	add.w	fp, fp, #1
 800ff64:	9019      	str	r0, [sp, #100]	; 0x64
 800ff66:	e7be      	b.n	800fee6 <_strtod_l+0x146>
 800ff68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ff6a:	191a      	adds	r2, r3, r4
 800ff6c:	9219      	str	r2, [sp, #100]	; 0x64
 800ff6e:	5d1a      	ldrb	r2, [r3, r4]
 800ff70:	f1bb 0f00 	cmp.w	fp, #0
 800ff74:	d036      	beq.n	800ffe4 <_strtod_l+0x244>
 800ff76:	465c      	mov	r4, fp
 800ff78:	9004      	str	r0, [sp, #16]
 800ff7a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ff7e:	2b09      	cmp	r3, #9
 800ff80:	d912      	bls.n	800ffa8 <_strtod_l+0x208>
 800ff82:	2301      	movs	r3, #1
 800ff84:	e7c1      	b.n	800ff0a <_strtod_l+0x16a>
 800ff86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ff88:	3001      	adds	r0, #1
 800ff8a:	1c5a      	adds	r2, r3, #1
 800ff8c:	9219      	str	r2, [sp, #100]	; 0x64
 800ff8e:	785a      	ldrb	r2, [r3, #1]
 800ff90:	2a30      	cmp	r2, #48	; 0x30
 800ff92:	d0f8      	beq.n	800ff86 <_strtod_l+0x1e6>
 800ff94:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ff98:	2b08      	cmp	r3, #8
 800ff9a:	f200 84d5 	bhi.w	8010948 <_strtod_l+0xba8>
 800ff9e:	9004      	str	r0, [sp, #16]
 800ffa0:	2000      	movs	r0, #0
 800ffa2:	4604      	mov	r4, r0
 800ffa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ffa6:	9308      	str	r3, [sp, #32]
 800ffa8:	3a30      	subs	r2, #48	; 0x30
 800ffaa:	f100 0301 	add.w	r3, r0, #1
 800ffae:	d013      	beq.n	800ffd8 <_strtod_l+0x238>
 800ffb0:	9904      	ldr	r1, [sp, #16]
 800ffb2:	1905      	adds	r5, r0, r4
 800ffb4:	4419      	add	r1, r3
 800ffb6:	9104      	str	r1, [sp, #16]
 800ffb8:	4623      	mov	r3, r4
 800ffba:	210a      	movs	r1, #10
 800ffbc:	42ab      	cmp	r3, r5
 800ffbe:	d113      	bne.n	800ffe8 <_strtod_l+0x248>
 800ffc0:	1823      	adds	r3, r4, r0
 800ffc2:	2b08      	cmp	r3, #8
 800ffc4:	f104 0401 	add.w	r4, r4, #1
 800ffc8:	4404      	add	r4, r0
 800ffca:	dc1b      	bgt.n	8010004 <_strtod_l+0x264>
 800ffcc:	230a      	movs	r3, #10
 800ffce:	9906      	ldr	r1, [sp, #24]
 800ffd0:	fb03 2301 	mla	r3, r3, r1, r2
 800ffd4:	9306      	str	r3, [sp, #24]
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ffda:	4618      	mov	r0, r3
 800ffdc:	1c51      	adds	r1, r2, #1
 800ffde:	9119      	str	r1, [sp, #100]	; 0x64
 800ffe0:	7852      	ldrb	r2, [r2, #1]
 800ffe2:	e7ca      	b.n	800ff7a <_strtod_l+0x1da>
 800ffe4:	4658      	mov	r0, fp
 800ffe6:	e7d3      	b.n	800ff90 <_strtod_l+0x1f0>
 800ffe8:	2b08      	cmp	r3, #8
 800ffea:	dc04      	bgt.n	800fff6 <_strtod_l+0x256>
 800ffec:	9f06      	ldr	r7, [sp, #24]
 800ffee:	434f      	muls	r7, r1
 800fff0:	9706      	str	r7, [sp, #24]
 800fff2:	3301      	adds	r3, #1
 800fff4:	e7e2      	b.n	800ffbc <_strtod_l+0x21c>
 800fff6:	1c5f      	adds	r7, r3, #1
 800fff8:	2f10      	cmp	r7, #16
 800fffa:	bfde      	ittt	le
 800fffc:	9f05      	ldrle	r7, [sp, #20]
 800fffe:	434f      	mulle	r7, r1
 8010000:	9705      	strle	r7, [sp, #20]
 8010002:	e7f6      	b.n	800fff2 <_strtod_l+0x252>
 8010004:	2c10      	cmp	r4, #16
 8010006:	bfdf      	itttt	le
 8010008:	230a      	movle	r3, #10
 801000a:	9905      	ldrle	r1, [sp, #20]
 801000c:	fb03 2301 	mlale	r3, r3, r1, r2
 8010010:	9305      	strle	r3, [sp, #20]
 8010012:	e7e0      	b.n	800ffd6 <_strtod_l+0x236>
 8010014:	2300      	movs	r3, #0
 8010016:	9304      	str	r3, [sp, #16]
 8010018:	2301      	movs	r3, #1
 801001a:	e77b      	b.n	800ff14 <_strtod_l+0x174>
 801001c:	2700      	movs	r7, #0
 801001e:	1cb2      	adds	r2, r6, #2
 8010020:	9219      	str	r2, [sp, #100]	; 0x64
 8010022:	78b2      	ldrb	r2, [r6, #2]
 8010024:	e784      	b.n	800ff30 <_strtod_l+0x190>
 8010026:	bf00      	nop
 8010028:	080139a0 	.word	0x080139a0
 801002c:	08013724 	.word	0x08013724
 8010030:	7ff00000 	.word	0x7ff00000
 8010034:	2701      	movs	r7, #1
 8010036:	e7f2      	b.n	801001e <_strtod_l+0x27e>
 8010038:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801003a:	1c51      	adds	r1, r2, #1
 801003c:	9119      	str	r1, [sp, #100]	; 0x64
 801003e:	7852      	ldrb	r2, [r2, #1]
 8010040:	2a30      	cmp	r2, #48	; 0x30
 8010042:	d0f9      	beq.n	8010038 <_strtod_l+0x298>
 8010044:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010048:	2908      	cmp	r1, #8
 801004a:	f63f af77 	bhi.w	800ff3c <_strtod_l+0x19c>
 801004e:	f04f 0e0a 	mov.w	lr, #10
 8010052:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8010056:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010058:	9209      	str	r2, [sp, #36]	; 0x24
 801005a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801005c:	1c51      	adds	r1, r2, #1
 801005e:	9119      	str	r1, [sp, #100]	; 0x64
 8010060:	7852      	ldrb	r2, [r2, #1]
 8010062:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8010066:	2d09      	cmp	r5, #9
 8010068:	d935      	bls.n	80100d6 <_strtod_l+0x336>
 801006a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801006c:	1b49      	subs	r1, r1, r5
 801006e:	2908      	cmp	r1, #8
 8010070:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8010074:	dc02      	bgt.n	801007c <_strtod_l+0x2dc>
 8010076:	4565      	cmp	r5, ip
 8010078:	bfa8      	it	ge
 801007a:	4665      	movge	r5, ip
 801007c:	b107      	cbz	r7, 8010080 <_strtod_l+0x2e0>
 801007e:	426d      	negs	r5, r5
 8010080:	2c00      	cmp	r4, #0
 8010082:	d14c      	bne.n	801011e <_strtod_l+0x37e>
 8010084:	9907      	ldr	r1, [sp, #28]
 8010086:	4301      	orrs	r1, r0
 8010088:	f47f aecb 	bne.w	800fe22 <_strtod_l+0x82>
 801008c:	2b00      	cmp	r3, #0
 801008e:	f47f aee4 	bne.w	800fe5a <_strtod_l+0xba>
 8010092:	2a69      	cmp	r2, #105	; 0x69
 8010094:	d026      	beq.n	80100e4 <_strtod_l+0x344>
 8010096:	dc23      	bgt.n	80100e0 <_strtod_l+0x340>
 8010098:	2a49      	cmp	r2, #73	; 0x49
 801009a:	d023      	beq.n	80100e4 <_strtod_l+0x344>
 801009c:	2a4e      	cmp	r2, #78	; 0x4e
 801009e:	f47f aedc 	bne.w	800fe5a <_strtod_l+0xba>
 80100a2:	499d      	ldr	r1, [pc, #628]	; (8010318 <_strtod_l+0x578>)
 80100a4:	a819      	add	r0, sp, #100	; 0x64
 80100a6:	f001 f95d 	bl	8011364 <__match>
 80100aa:	2800      	cmp	r0, #0
 80100ac:	f43f aed5 	beq.w	800fe5a <_strtod_l+0xba>
 80100b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80100b2:	781b      	ldrb	r3, [r3, #0]
 80100b4:	2b28      	cmp	r3, #40	; 0x28
 80100b6:	d12c      	bne.n	8010112 <_strtod_l+0x372>
 80100b8:	4998      	ldr	r1, [pc, #608]	; (801031c <_strtod_l+0x57c>)
 80100ba:	aa1c      	add	r2, sp, #112	; 0x70
 80100bc:	a819      	add	r0, sp, #100	; 0x64
 80100be:	f001 f965 	bl	801138c <__hexnan>
 80100c2:	2805      	cmp	r0, #5
 80100c4:	d125      	bne.n	8010112 <_strtod_l+0x372>
 80100c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80100c8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80100cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80100d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80100d4:	e6a5      	b.n	800fe22 <_strtod_l+0x82>
 80100d6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80100da:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80100de:	e7bc      	b.n	801005a <_strtod_l+0x2ba>
 80100e0:	2a6e      	cmp	r2, #110	; 0x6e
 80100e2:	e7dc      	b.n	801009e <_strtod_l+0x2fe>
 80100e4:	498e      	ldr	r1, [pc, #568]	; (8010320 <_strtod_l+0x580>)
 80100e6:	a819      	add	r0, sp, #100	; 0x64
 80100e8:	f001 f93c 	bl	8011364 <__match>
 80100ec:	2800      	cmp	r0, #0
 80100ee:	f43f aeb4 	beq.w	800fe5a <_strtod_l+0xba>
 80100f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80100f4:	498b      	ldr	r1, [pc, #556]	; (8010324 <_strtod_l+0x584>)
 80100f6:	3b01      	subs	r3, #1
 80100f8:	a819      	add	r0, sp, #100	; 0x64
 80100fa:	9319      	str	r3, [sp, #100]	; 0x64
 80100fc:	f001 f932 	bl	8011364 <__match>
 8010100:	b910      	cbnz	r0, 8010108 <_strtod_l+0x368>
 8010102:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010104:	3301      	adds	r3, #1
 8010106:	9319      	str	r3, [sp, #100]	; 0x64
 8010108:	f04f 0800 	mov.w	r8, #0
 801010c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8010328 <_strtod_l+0x588>
 8010110:	e687      	b.n	800fe22 <_strtod_l+0x82>
 8010112:	4886      	ldr	r0, [pc, #536]	; (801032c <_strtod_l+0x58c>)
 8010114:	f002 fb7e 	bl	8012814 <nan>
 8010118:	4680      	mov	r8, r0
 801011a:	4689      	mov	r9, r1
 801011c:	e681      	b.n	800fe22 <_strtod_l+0x82>
 801011e:	9b04      	ldr	r3, [sp, #16]
 8010120:	f1bb 0f00 	cmp.w	fp, #0
 8010124:	bf08      	it	eq
 8010126:	46a3      	moveq	fp, r4
 8010128:	1aeb      	subs	r3, r5, r3
 801012a:	2c10      	cmp	r4, #16
 801012c:	9806      	ldr	r0, [sp, #24]
 801012e:	4626      	mov	r6, r4
 8010130:	9307      	str	r3, [sp, #28]
 8010132:	bfa8      	it	ge
 8010134:	2610      	movge	r6, #16
 8010136:	f7f0 f9c5 	bl	80004c4 <__aeabi_ui2d>
 801013a:	2c09      	cmp	r4, #9
 801013c:	4680      	mov	r8, r0
 801013e:	4689      	mov	r9, r1
 8010140:	dd13      	ble.n	801016a <_strtod_l+0x3ca>
 8010142:	4b7b      	ldr	r3, [pc, #492]	; (8010330 <_strtod_l+0x590>)
 8010144:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010148:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801014c:	f7f0 fa34 	bl	80005b8 <__aeabi_dmul>
 8010150:	4680      	mov	r8, r0
 8010152:	9805      	ldr	r0, [sp, #20]
 8010154:	4689      	mov	r9, r1
 8010156:	f7f0 f9b5 	bl	80004c4 <__aeabi_ui2d>
 801015a:	4602      	mov	r2, r0
 801015c:	460b      	mov	r3, r1
 801015e:	4640      	mov	r0, r8
 8010160:	4649      	mov	r1, r9
 8010162:	f7f0 f873 	bl	800024c <__adddf3>
 8010166:	4680      	mov	r8, r0
 8010168:	4689      	mov	r9, r1
 801016a:	2c0f      	cmp	r4, #15
 801016c:	dc36      	bgt.n	80101dc <_strtod_l+0x43c>
 801016e:	9b07      	ldr	r3, [sp, #28]
 8010170:	2b00      	cmp	r3, #0
 8010172:	f43f ae56 	beq.w	800fe22 <_strtod_l+0x82>
 8010176:	dd22      	ble.n	80101be <_strtod_l+0x41e>
 8010178:	2b16      	cmp	r3, #22
 801017a:	dc09      	bgt.n	8010190 <_strtod_l+0x3f0>
 801017c:	496c      	ldr	r1, [pc, #432]	; (8010330 <_strtod_l+0x590>)
 801017e:	4642      	mov	r2, r8
 8010180:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010184:	464b      	mov	r3, r9
 8010186:	e9d1 0100 	ldrd	r0, r1, [r1]
 801018a:	f7f0 fa15 	bl	80005b8 <__aeabi_dmul>
 801018e:	e7c3      	b.n	8010118 <_strtod_l+0x378>
 8010190:	9a07      	ldr	r2, [sp, #28]
 8010192:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8010196:	4293      	cmp	r3, r2
 8010198:	db20      	blt.n	80101dc <_strtod_l+0x43c>
 801019a:	4d65      	ldr	r5, [pc, #404]	; (8010330 <_strtod_l+0x590>)
 801019c:	f1c4 040f 	rsb	r4, r4, #15
 80101a0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80101a4:	4642      	mov	r2, r8
 80101a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101aa:	464b      	mov	r3, r9
 80101ac:	f7f0 fa04 	bl	80005b8 <__aeabi_dmul>
 80101b0:	9b07      	ldr	r3, [sp, #28]
 80101b2:	1b1c      	subs	r4, r3, r4
 80101b4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80101b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80101bc:	e7e5      	b.n	801018a <_strtod_l+0x3ea>
 80101be:	9b07      	ldr	r3, [sp, #28]
 80101c0:	3316      	adds	r3, #22
 80101c2:	db0b      	blt.n	80101dc <_strtod_l+0x43c>
 80101c4:	9b04      	ldr	r3, [sp, #16]
 80101c6:	4640      	mov	r0, r8
 80101c8:	1b5d      	subs	r5, r3, r5
 80101ca:	4b59      	ldr	r3, [pc, #356]	; (8010330 <_strtod_l+0x590>)
 80101cc:	4649      	mov	r1, r9
 80101ce:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80101d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80101d6:	f7f0 fb19 	bl	800080c <__aeabi_ddiv>
 80101da:	e79d      	b.n	8010118 <_strtod_l+0x378>
 80101dc:	9b07      	ldr	r3, [sp, #28]
 80101de:	1ba6      	subs	r6, r4, r6
 80101e0:	441e      	add	r6, r3
 80101e2:	2e00      	cmp	r6, #0
 80101e4:	dd74      	ble.n	80102d0 <_strtod_l+0x530>
 80101e6:	f016 030f 	ands.w	r3, r6, #15
 80101ea:	d00a      	beq.n	8010202 <_strtod_l+0x462>
 80101ec:	4950      	ldr	r1, [pc, #320]	; (8010330 <_strtod_l+0x590>)
 80101ee:	4642      	mov	r2, r8
 80101f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80101f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101f8:	464b      	mov	r3, r9
 80101fa:	f7f0 f9dd 	bl	80005b8 <__aeabi_dmul>
 80101fe:	4680      	mov	r8, r0
 8010200:	4689      	mov	r9, r1
 8010202:	f036 060f 	bics.w	r6, r6, #15
 8010206:	d052      	beq.n	80102ae <_strtod_l+0x50e>
 8010208:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 801020c:	dd27      	ble.n	801025e <_strtod_l+0x4be>
 801020e:	f04f 0b00 	mov.w	fp, #0
 8010212:	f8cd b010 	str.w	fp, [sp, #16]
 8010216:	f8cd b020 	str.w	fp, [sp, #32]
 801021a:	f8cd b018 	str.w	fp, [sp, #24]
 801021e:	2322      	movs	r3, #34	; 0x22
 8010220:	f04f 0800 	mov.w	r8, #0
 8010224:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8010328 <_strtod_l+0x588>
 8010228:	f8ca 3000 	str.w	r3, [sl]
 801022c:	9b08      	ldr	r3, [sp, #32]
 801022e:	2b00      	cmp	r3, #0
 8010230:	f43f adf7 	beq.w	800fe22 <_strtod_l+0x82>
 8010234:	4650      	mov	r0, sl
 8010236:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010238:	f001 f9bc 	bl	80115b4 <_Bfree>
 801023c:	4650      	mov	r0, sl
 801023e:	9906      	ldr	r1, [sp, #24]
 8010240:	f001 f9b8 	bl	80115b4 <_Bfree>
 8010244:	4650      	mov	r0, sl
 8010246:	9904      	ldr	r1, [sp, #16]
 8010248:	f001 f9b4 	bl	80115b4 <_Bfree>
 801024c:	4650      	mov	r0, sl
 801024e:	9908      	ldr	r1, [sp, #32]
 8010250:	f001 f9b0 	bl	80115b4 <_Bfree>
 8010254:	4659      	mov	r1, fp
 8010256:	4650      	mov	r0, sl
 8010258:	f001 f9ac 	bl	80115b4 <_Bfree>
 801025c:	e5e1      	b.n	800fe22 <_strtod_l+0x82>
 801025e:	4b35      	ldr	r3, [pc, #212]	; (8010334 <_strtod_l+0x594>)
 8010260:	4640      	mov	r0, r8
 8010262:	9305      	str	r3, [sp, #20]
 8010264:	2300      	movs	r3, #0
 8010266:	4649      	mov	r1, r9
 8010268:	461f      	mov	r7, r3
 801026a:	1136      	asrs	r6, r6, #4
 801026c:	2e01      	cmp	r6, #1
 801026e:	dc21      	bgt.n	80102b4 <_strtod_l+0x514>
 8010270:	b10b      	cbz	r3, 8010276 <_strtod_l+0x4d6>
 8010272:	4680      	mov	r8, r0
 8010274:	4689      	mov	r9, r1
 8010276:	4b2f      	ldr	r3, [pc, #188]	; (8010334 <_strtod_l+0x594>)
 8010278:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801027c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010280:	4642      	mov	r2, r8
 8010282:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010286:	464b      	mov	r3, r9
 8010288:	f7f0 f996 	bl	80005b8 <__aeabi_dmul>
 801028c:	4b26      	ldr	r3, [pc, #152]	; (8010328 <_strtod_l+0x588>)
 801028e:	460a      	mov	r2, r1
 8010290:	400b      	ands	r3, r1
 8010292:	4929      	ldr	r1, [pc, #164]	; (8010338 <_strtod_l+0x598>)
 8010294:	4680      	mov	r8, r0
 8010296:	428b      	cmp	r3, r1
 8010298:	d8b9      	bhi.n	801020e <_strtod_l+0x46e>
 801029a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801029e:	428b      	cmp	r3, r1
 80102a0:	bf86      	itte	hi
 80102a2:	f04f 38ff 	movhi.w	r8, #4294967295
 80102a6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 801033c <_strtod_l+0x59c>
 80102aa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80102ae:	2300      	movs	r3, #0
 80102b0:	9305      	str	r3, [sp, #20]
 80102b2:	e07f      	b.n	80103b4 <_strtod_l+0x614>
 80102b4:	07f2      	lsls	r2, r6, #31
 80102b6:	d505      	bpl.n	80102c4 <_strtod_l+0x524>
 80102b8:	9b05      	ldr	r3, [sp, #20]
 80102ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102be:	f7f0 f97b 	bl	80005b8 <__aeabi_dmul>
 80102c2:	2301      	movs	r3, #1
 80102c4:	9a05      	ldr	r2, [sp, #20]
 80102c6:	3701      	adds	r7, #1
 80102c8:	3208      	adds	r2, #8
 80102ca:	1076      	asrs	r6, r6, #1
 80102cc:	9205      	str	r2, [sp, #20]
 80102ce:	e7cd      	b.n	801026c <_strtod_l+0x4cc>
 80102d0:	d0ed      	beq.n	80102ae <_strtod_l+0x50e>
 80102d2:	4276      	negs	r6, r6
 80102d4:	f016 020f 	ands.w	r2, r6, #15
 80102d8:	d00a      	beq.n	80102f0 <_strtod_l+0x550>
 80102da:	4b15      	ldr	r3, [pc, #84]	; (8010330 <_strtod_l+0x590>)
 80102dc:	4640      	mov	r0, r8
 80102de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102e2:	4649      	mov	r1, r9
 80102e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e8:	f7f0 fa90 	bl	800080c <__aeabi_ddiv>
 80102ec:	4680      	mov	r8, r0
 80102ee:	4689      	mov	r9, r1
 80102f0:	1136      	asrs	r6, r6, #4
 80102f2:	d0dc      	beq.n	80102ae <_strtod_l+0x50e>
 80102f4:	2e1f      	cmp	r6, #31
 80102f6:	dd23      	ble.n	8010340 <_strtod_l+0x5a0>
 80102f8:	f04f 0b00 	mov.w	fp, #0
 80102fc:	f8cd b010 	str.w	fp, [sp, #16]
 8010300:	f8cd b020 	str.w	fp, [sp, #32]
 8010304:	f8cd b018 	str.w	fp, [sp, #24]
 8010308:	2322      	movs	r3, #34	; 0x22
 801030a:	f04f 0800 	mov.w	r8, #0
 801030e:	f04f 0900 	mov.w	r9, #0
 8010312:	f8ca 3000 	str.w	r3, [sl]
 8010316:	e789      	b.n	801022c <_strtod_l+0x48c>
 8010318:	08013721 	.word	0x08013721
 801031c:	08013738 	.word	0x08013738
 8010320:	08013718 	.word	0x08013718
 8010324:	0801371b 	.word	0x0801371b
 8010328:	7ff00000 	.word	0x7ff00000
 801032c:	08013827 	.word	0x08013827
 8010330:	08013a38 	.word	0x08013a38
 8010334:	08013a10 	.word	0x08013a10
 8010338:	7ca00000 	.word	0x7ca00000
 801033c:	7fefffff 	.word	0x7fefffff
 8010340:	f016 0310 	ands.w	r3, r6, #16
 8010344:	bf18      	it	ne
 8010346:	236a      	movne	r3, #106	; 0x6a
 8010348:	4640      	mov	r0, r8
 801034a:	9305      	str	r3, [sp, #20]
 801034c:	4649      	mov	r1, r9
 801034e:	2300      	movs	r3, #0
 8010350:	4fb0      	ldr	r7, [pc, #704]	; (8010614 <_strtod_l+0x874>)
 8010352:	07f2      	lsls	r2, r6, #31
 8010354:	d504      	bpl.n	8010360 <_strtod_l+0x5c0>
 8010356:	e9d7 2300 	ldrd	r2, r3, [r7]
 801035a:	f7f0 f92d 	bl	80005b8 <__aeabi_dmul>
 801035e:	2301      	movs	r3, #1
 8010360:	1076      	asrs	r6, r6, #1
 8010362:	f107 0708 	add.w	r7, r7, #8
 8010366:	d1f4      	bne.n	8010352 <_strtod_l+0x5b2>
 8010368:	b10b      	cbz	r3, 801036e <_strtod_l+0x5ce>
 801036a:	4680      	mov	r8, r0
 801036c:	4689      	mov	r9, r1
 801036e:	9b05      	ldr	r3, [sp, #20]
 8010370:	b1c3      	cbz	r3, 80103a4 <_strtod_l+0x604>
 8010372:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010376:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801037a:	2b00      	cmp	r3, #0
 801037c:	4649      	mov	r1, r9
 801037e:	dd11      	ble.n	80103a4 <_strtod_l+0x604>
 8010380:	2b1f      	cmp	r3, #31
 8010382:	f340 8127 	ble.w	80105d4 <_strtod_l+0x834>
 8010386:	2b34      	cmp	r3, #52	; 0x34
 8010388:	bfd8      	it	le
 801038a:	f04f 33ff 	movle.w	r3, #4294967295
 801038e:	f04f 0800 	mov.w	r8, #0
 8010392:	bfcf      	iteee	gt
 8010394:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010398:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801039c:	fa03 f202 	lslle.w	r2, r3, r2
 80103a0:	ea02 0901 	andle.w	r9, r2, r1
 80103a4:	2200      	movs	r2, #0
 80103a6:	2300      	movs	r3, #0
 80103a8:	4640      	mov	r0, r8
 80103aa:	4649      	mov	r1, r9
 80103ac:	f7f0 fb6c 	bl	8000a88 <__aeabi_dcmpeq>
 80103b0:	2800      	cmp	r0, #0
 80103b2:	d1a1      	bne.n	80102f8 <_strtod_l+0x558>
 80103b4:	9b06      	ldr	r3, [sp, #24]
 80103b6:	465a      	mov	r2, fp
 80103b8:	9300      	str	r3, [sp, #0]
 80103ba:	4650      	mov	r0, sl
 80103bc:	4623      	mov	r3, r4
 80103be:	9908      	ldr	r1, [sp, #32]
 80103c0:	f001 f960 	bl	8011684 <__s2b>
 80103c4:	9008      	str	r0, [sp, #32]
 80103c6:	2800      	cmp	r0, #0
 80103c8:	f43f af21 	beq.w	801020e <_strtod_l+0x46e>
 80103cc:	9b04      	ldr	r3, [sp, #16]
 80103ce:	f04f 0b00 	mov.w	fp, #0
 80103d2:	1b5d      	subs	r5, r3, r5
 80103d4:	9b07      	ldr	r3, [sp, #28]
 80103d6:	f8cd b010 	str.w	fp, [sp, #16]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	bfb4      	ite	lt
 80103de:	462b      	movlt	r3, r5
 80103e0:	2300      	movge	r3, #0
 80103e2:	930e      	str	r3, [sp, #56]	; 0x38
 80103e4:	9b07      	ldr	r3, [sp, #28]
 80103e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80103ea:	9314      	str	r3, [sp, #80]	; 0x50
 80103ec:	9b08      	ldr	r3, [sp, #32]
 80103ee:	4650      	mov	r0, sl
 80103f0:	6859      	ldr	r1, [r3, #4]
 80103f2:	f001 f89f 	bl	8011534 <_Balloc>
 80103f6:	9006      	str	r0, [sp, #24]
 80103f8:	2800      	cmp	r0, #0
 80103fa:	f43f af10 	beq.w	801021e <_strtod_l+0x47e>
 80103fe:	9b08      	ldr	r3, [sp, #32]
 8010400:	300c      	adds	r0, #12
 8010402:	691a      	ldr	r2, [r3, #16]
 8010404:	f103 010c 	add.w	r1, r3, #12
 8010408:	3202      	adds	r2, #2
 801040a:	0092      	lsls	r2, r2, #2
 801040c:	f7ff faf1 	bl	800f9f2 <memcpy>
 8010410:	ab1c      	add	r3, sp, #112	; 0x70
 8010412:	9301      	str	r3, [sp, #4]
 8010414:	ab1b      	add	r3, sp, #108	; 0x6c
 8010416:	9300      	str	r3, [sp, #0]
 8010418:	4642      	mov	r2, r8
 801041a:	464b      	mov	r3, r9
 801041c:	4650      	mov	r0, sl
 801041e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8010422:	f001 fc71 	bl	8011d08 <__d2b>
 8010426:	901a      	str	r0, [sp, #104]	; 0x68
 8010428:	2800      	cmp	r0, #0
 801042a:	f43f aef8 	beq.w	801021e <_strtod_l+0x47e>
 801042e:	2101      	movs	r1, #1
 8010430:	4650      	mov	r0, sl
 8010432:	f001 f9bf 	bl	80117b4 <__i2b>
 8010436:	4603      	mov	r3, r0
 8010438:	9004      	str	r0, [sp, #16]
 801043a:	2800      	cmp	r0, #0
 801043c:	f43f aeef 	beq.w	801021e <_strtod_l+0x47e>
 8010440:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8010442:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010444:	2d00      	cmp	r5, #0
 8010446:	bfab      	itete	ge
 8010448:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801044a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 801044c:	18ee      	addge	r6, r5, r3
 801044e:	1b5c      	sublt	r4, r3, r5
 8010450:	9b05      	ldr	r3, [sp, #20]
 8010452:	bfa8      	it	ge
 8010454:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8010456:	eba5 0503 	sub.w	r5, r5, r3
 801045a:	4415      	add	r5, r2
 801045c:	4b6e      	ldr	r3, [pc, #440]	; (8010618 <_strtod_l+0x878>)
 801045e:	f105 35ff 	add.w	r5, r5, #4294967295
 8010462:	bfb8      	it	lt
 8010464:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8010466:	429d      	cmp	r5, r3
 8010468:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801046c:	f280 80c4 	bge.w	80105f8 <_strtod_l+0x858>
 8010470:	1b5b      	subs	r3, r3, r5
 8010472:	2b1f      	cmp	r3, #31
 8010474:	f04f 0701 	mov.w	r7, #1
 8010478:	eba2 0203 	sub.w	r2, r2, r3
 801047c:	f300 80b1 	bgt.w	80105e2 <_strtod_l+0x842>
 8010480:	2500      	movs	r5, #0
 8010482:	fa07 f303 	lsl.w	r3, r7, r3
 8010486:	930f      	str	r3, [sp, #60]	; 0x3c
 8010488:	18b7      	adds	r7, r6, r2
 801048a:	9b05      	ldr	r3, [sp, #20]
 801048c:	42be      	cmp	r6, r7
 801048e:	4414      	add	r4, r2
 8010490:	441c      	add	r4, r3
 8010492:	4633      	mov	r3, r6
 8010494:	bfa8      	it	ge
 8010496:	463b      	movge	r3, r7
 8010498:	42a3      	cmp	r3, r4
 801049a:	bfa8      	it	ge
 801049c:	4623      	movge	r3, r4
 801049e:	2b00      	cmp	r3, #0
 80104a0:	bfc2      	ittt	gt
 80104a2:	1aff      	subgt	r7, r7, r3
 80104a4:	1ae4      	subgt	r4, r4, r3
 80104a6:	1af6      	subgt	r6, r6, r3
 80104a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	dd17      	ble.n	80104de <_strtod_l+0x73e>
 80104ae:	461a      	mov	r2, r3
 80104b0:	4650      	mov	r0, sl
 80104b2:	9904      	ldr	r1, [sp, #16]
 80104b4:	f001 fa3c 	bl	8011930 <__pow5mult>
 80104b8:	9004      	str	r0, [sp, #16]
 80104ba:	2800      	cmp	r0, #0
 80104bc:	f43f aeaf 	beq.w	801021e <_strtod_l+0x47e>
 80104c0:	4601      	mov	r1, r0
 80104c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80104c4:	4650      	mov	r0, sl
 80104c6:	f001 f98b 	bl	80117e0 <__multiply>
 80104ca:	9009      	str	r0, [sp, #36]	; 0x24
 80104cc:	2800      	cmp	r0, #0
 80104ce:	f43f aea6 	beq.w	801021e <_strtod_l+0x47e>
 80104d2:	4650      	mov	r0, sl
 80104d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80104d6:	f001 f86d 	bl	80115b4 <_Bfree>
 80104da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104dc:	931a      	str	r3, [sp, #104]	; 0x68
 80104de:	2f00      	cmp	r7, #0
 80104e0:	f300 808e 	bgt.w	8010600 <_strtod_l+0x860>
 80104e4:	9b07      	ldr	r3, [sp, #28]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	dd08      	ble.n	80104fc <_strtod_l+0x75c>
 80104ea:	4650      	mov	r0, sl
 80104ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80104ee:	9906      	ldr	r1, [sp, #24]
 80104f0:	f001 fa1e 	bl	8011930 <__pow5mult>
 80104f4:	9006      	str	r0, [sp, #24]
 80104f6:	2800      	cmp	r0, #0
 80104f8:	f43f ae91 	beq.w	801021e <_strtod_l+0x47e>
 80104fc:	2c00      	cmp	r4, #0
 80104fe:	dd08      	ble.n	8010512 <_strtod_l+0x772>
 8010500:	4622      	mov	r2, r4
 8010502:	4650      	mov	r0, sl
 8010504:	9906      	ldr	r1, [sp, #24]
 8010506:	f001 fa6d 	bl	80119e4 <__lshift>
 801050a:	9006      	str	r0, [sp, #24]
 801050c:	2800      	cmp	r0, #0
 801050e:	f43f ae86 	beq.w	801021e <_strtod_l+0x47e>
 8010512:	2e00      	cmp	r6, #0
 8010514:	dd08      	ble.n	8010528 <_strtod_l+0x788>
 8010516:	4632      	mov	r2, r6
 8010518:	4650      	mov	r0, sl
 801051a:	9904      	ldr	r1, [sp, #16]
 801051c:	f001 fa62 	bl	80119e4 <__lshift>
 8010520:	9004      	str	r0, [sp, #16]
 8010522:	2800      	cmp	r0, #0
 8010524:	f43f ae7b 	beq.w	801021e <_strtod_l+0x47e>
 8010528:	4650      	mov	r0, sl
 801052a:	9a06      	ldr	r2, [sp, #24]
 801052c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801052e:	f001 fae5 	bl	8011afc <__mdiff>
 8010532:	4683      	mov	fp, r0
 8010534:	2800      	cmp	r0, #0
 8010536:	f43f ae72 	beq.w	801021e <_strtod_l+0x47e>
 801053a:	2400      	movs	r4, #0
 801053c:	68c3      	ldr	r3, [r0, #12]
 801053e:	9904      	ldr	r1, [sp, #16]
 8010540:	60c4      	str	r4, [r0, #12]
 8010542:	930b      	str	r3, [sp, #44]	; 0x2c
 8010544:	f001 fabe 	bl	8011ac4 <__mcmp>
 8010548:	42a0      	cmp	r0, r4
 801054a:	da6b      	bge.n	8010624 <_strtod_l+0x884>
 801054c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801054e:	ea53 0308 	orrs.w	r3, r3, r8
 8010552:	f040 8091 	bne.w	8010678 <_strtod_l+0x8d8>
 8010556:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801055a:	2b00      	cmp	r3, #0
 801055c:	f040 808c 	bne.w	8010678 <_strtod_l+0x8d8>
 8010560:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010564:	0d1b      	lsrs	r3, r3, #20
 8010566:	051b      	lsls	r3, r3, #20
 8010568:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801056c:	f240 8084 	bls.w	8010678 <_strtod_l+0x8d8>
 8010570:	f8db 3014 	ldr.w	r3, [fp, #20]
 8010574:	b91b      	cbnz	r3, 801057e <_strtod_l+0x7de>
 8010576:	f8db 3010 	ldr.w	r3, [fp, #16]
 801057a:	2b01      	cmp	r3, #1
 801057c:	dd7c      	ble.n	8010678 <_strtod_l+0x8d8>
 801057e:	4659      	mov	r1, fp
 8010580:	2201      	movs	r2, #1
 8010582:	4650      	mov	r0, sl
 8010584:	f001 fa2e 	bl	80119e4 <__lshift>
 8010588:	9904      	ldr	r1, [sp, #16]
 801058a:	4683      	mov	fp, r0
 801058c:	f001 fa9a 	bl	8011ac4 <__mcmp>
 8010590:	2800      	cmp	r0, #0
 8010592:	dd71      	ble.n	8010678 <_strtod_l+0x8d8>
 8010594:	9905      	ldr	r1, [sp, #20]
 8010596:	464b      	mov	r3, r9
 8010598:	4a20      	ldr	r2, [pc, #128]	; (801061c <_strtod_l+0x87c>)
 801059a:	2900      	cmp	r1, #0
 801059c:	f000 808c 	beq.w	80106b8 <_strtod_l+0x918>
 80105a0:	ea02 0109 	and.w	r1, r2, r9
 80105a4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80105a8:	f300 8086 	bgt.w	80106b8 <_strtod_l+0x918>
 80105ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80105b0:	f77f aeaa 	ble.w	8010308 <_strtod_l+0x568>
 80105b4:	4640      	mov	r0, r8
 80105b6:	4649      	mov	r1, r9
 80105b8:	4b19      	ldr	r3, [pc, #100]	; (8010620 <_strtod_l+0x880>)
 80105ba:	2200      	movs	r2, #0
 80105bc:	f7ef fffc 	bl	80005b8 <__aeabi_dmul>
 80105c0:	460b      	mov	r3, r1
 80105c2:	4303      	orrs	r3, r0
 80105c4:	bf08      	it	eq
 80105c6:	2322      	moveq	r3, #34	; 0x22
 80105c8:	4680      	mov	r8, r0
 80105ca:	4689      	mov	r9, r1
 80105cc:	bf08      	it	eq
 80105ce:	f8ca 3000 	streq.w	r3, [sl]
 80105d2:	e62f      	b.n	8010234 <_strtod_l+0x494>
 80105d4:	f04f 32ff 	mov.w	r2, #4294967295
 80105d8:	fa02 f303 	lsl.w	r3, r2, r3
 80105dc:	ea03 0808 	and.w	r8, r3, r8
 80105e0:	e6e0      	b.n	80103a4 <_strtod_l+0x604>
 80105e2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80105e6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80105ea:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80105ee:	35e2      	adds	r5, #226	; 0xe2
 80105f0:	fa07 f505 	lsl.w	r5, r7, r5
 80105f4:	970f      	str	r7, [sp, #60]	; 0x3c
 80105f6:	e747      	b.n	8010488 <_strtod_l+0x6e8>
 80105f8:	2301      	movs	r3, #1
 80105fa:	2500      	movs	r5, #0
 80105fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80105fe:	e743      	b.n	8010488 <_strtod_l+0x6e8>
 8010600:	463a      	mov	r2, r7
 8010602:	4650      	mov	r0, sl
 8010604:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010606:	f001 f9ed 	bl	80119e4 <__lshift>
 801060a:	901a      	str	r0, [sp, #104]	; 0x68
 801060c:	2800      	cmp	r0, #0
 801060e:	f47f af69 	bne.w	80104e4 <_strtod_l+0x744>
 8010612:	e604      	b.n	801021e <_strtod_l+0x47e>
 8010614:	08013750 	.word	0x08013750
 8010618:	fffffc02 	.word	0xfffffc02
 801061c:	7ff00000 	.word	0x7ff00000
 8010620:	39500000 	.word	0x39500000
 8010624:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010628:	d165      	bne.n	80106f6 <_strtod_l+0x956>
 801062a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801062c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010630:	b35a      	cbz	r2, 801068a <_strtod_l+0x8ea>
 8010632:	4a99      	ldr	r2, [pc, #612]	; (8010898 <_strtod_l+0xaf8>)
 8010634:	4293      	cmp	r3, r2
 8010636:	d12b      	bne.n	8010690 <_strtod_l+0x8f0>
 8010638:	9b05      	ldr	r3, [sp, #20]
 801063a:	4641      	mov	r1, r8
 801063c:	b303      	cbz	r3, 8010680 <_strtod_l+0x8e0>
 801063e:	464a      	mov	r2, r9
 8010640:	4b96      	ldr	r3, [pc, #600]	; (801089c <_strtod_l+0xafc>)
 8010642:	4013      	ands	r3, r2
 8010644:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010648:	f04f 32ff 	mov.w	r2, #4294967295
 801064c:	d81b      	bhi.n	8010686 <_strtod_l+0x8e6>
 801064e:	0d1b      	lsrs	r3, r3, #20
 8010650:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010654:	fa02 f303 	lsl.w	r3, r2, r3
 8010658:	4299      	cmp	r1, r3
 801065a:	d119      	bne.n	8010690 <_strtod_l+0x8f0>
 801065c:	4b90      	ldr	r3, [pc, #576]	; (80108a0 <_strtod_l+0xb00>)
 801065e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010660:	429a      	cmp	r2, r3
 8010662:	d102      	bne.n	801066a <_strtod_l+0x8ca>
 8010664:	3101      	adds	r1, #1
 8010666:	f43f adda 	beq.w	801021e <_strtod_l+0x47e>
 801066a:	f04f 0800 	mov.w	r8, #0
 801066e:	4b8b      	ldr	r3, [pc, #556]	; (801089c <_strtod_l+0xafc>)
 8010670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010672:	401a      	ands	r2, r3
 8010674:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8010678:	9b05      	ldr	r3, [sp, #20]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d19a      	bne.n	80105b4 <_strtod_l+0x814>
 801067e:	e5d9      	b.n	8010234 <_strtod_l+0x494>
 8010680:	f04f 33ff 	mov.w	r3, #4294967295
 8010684:	e7e8      	b.n	8010658 <_strtod_l+0x8b8>
 8010686:	4613      	mov	r3, r2
 8010688:	e7e6      	b.n	8010658 <_strtod_l+0x8b8>
 801068a:	ea53 0308 	orrs.w	r3, r3, r8
 801068e:	d081      	beq.n	8010594 <_strtod_l+0x7f4>
 8010690:	b1e5      	cbz	r5, 80106cc <_strtod_l+0x92c>
 8010692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010694:	421d      	tst	r5, r3
 8010696:	d0ef      	beq.n	8010678 <_strtod_l+0x8d8>
 8010698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801069a:	4640      	mov	r0, r8
 801069c:	4649      	mov	r1, r9
 801069e:	9a05      	ldr	r2, [sp, #20]
 80106a0:	b1c3      	cbz	r3, 80106d4 <_strtod_l+0x934>
 80106a2:	f7ff fb5b 	bl	800fd5c <sulp>
 80106a6:	4602      	mov	r2, r0
 80106a8:	460b      	mov	r3, r1
 80106aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80106ae:	f7ef fdcd 	bl	800024c <__adddf3>
 80106b2:	4680      	mov	r8, r0
 80106b4:	4689      	mov	r9, r1
 80106b6:	e7df      	b.n	8010678 <_strtod_l+0x8d8>
 80106b8:	4013      	ands	r3, r2
 80106ba:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80106be:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80106c2:	f04f 38ff 	mov.w	r8, #4294967295
 80106c6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80106ca:	e7d5      	b.n	8010678 <_strtod_l+0x8d8>
 80106cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80106ce:	ea13 0f08 	tst.w	r3, r8
 80106d2:	e7e0      	b.n	8010696 <_strtod_l+0x8f6>
 80106d4:	f7ff fb42 	bl	800fd5c <sulp>
 80106d8:	4602      	mov	r2, r0
 80106da:	460b      	mov	r3, r1
 80106dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80106e0:	f7ef fdb2 	bl	8000248 <__aeabi_dsub>
 80106e4:	2200      	movs	r2, #0
 80106e6:	2300      	movs	r3, #0
 80106e8:	4680      	mov	r8, r0
 80106ea:	4689      	mov	r9, r1
 80106ec:	f7f0 f9cc 	bl	8000a88 <__aeabi_dcmpeq>
 80106f0:	2800      	cmp	r0, #0
 80106f2:	d0c1      	beq.n	8010678 <_strtod_l+0x8d8>
 80106f4:	e608      	b.n	8010308 <_strtod_l+0x568>
 80106f6:	4658      	mov	r0, fp
 80106f8:	9904      	ldr	r1, [sp, #16]
 80106fa:	f001 fb61 	bl	8011dc0 <__ratio>
 80106fe:	2200      	movs	r2, #0
 8010700:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010704:	4606      	mov	r6, r0
 8010706:	460f      	mov	r7, r1
 8010708:	f7f0 f9d2 	bl	8000ab0 <__aeabi_dcmple>
 801070c:	2800      	cmp	r0, #0
 801070e:	d070      	beq.n	80107f2 <_strtod_l+0xa52>
 8010710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010712:	2b00      	cmp	r3, #0
 8010714:	d042      	beq.n	801079c <_strtod_l+0x9fc>
 8010716:	2600      	movs	r6, #0
 8010718:	4f62      	ldr	r7, [pc, #392]	; (80108a4 <_strtod_l+0xb04>)
 801071a:	4d62      	ldr	r5, [pc, #392]	; (80108a4 <_strtod_l+0xb04>)
 801071c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801071e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010722:	0d1b      	lsrs	r3, r3, #20
 8010724:	051b      	lsls	r3, r3, #20
 8010726:	930f      	str	r3, [sp, #60]	; 0x3c
 8010728:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801072a:	4b5f      	ldr	r3, [pc, #380]	; (80108a8 <_strtod_l+0xb08>)
 801072c:	429a      	cmp	r2, r3
 801072e:	f040 80c3 	bne.w	80108b8 <_strtod_l+0xb18>
 8010732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010734:	4640      	mov	r0, r8
 8010736:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 801073a:	4649      	mov	r1, r9
 801073c:	f001 fa6a 	bl	8011c14 <__ulp>
 8010740:	4602      	mov	r2, r0
 8010742:	460b      	mov	r3, r1
 8010744:	4630      	mov	r0, r6
 8010746:	4639      	mov	r1, r7
 8010748:	f7ef ff36 	bl	80005b8 <__aeabi_dmul>
 801074c:	4642      	mov	r2, r8
 801074e:	464b      	mov	r3, r9
 8010750:	f7ef fd7c 	bl	800024c <__adddf3>
 8010754:	460b      	mov	r3, r1
 8010756:	4951      	ldr	r1, [pc, #324]	; (801089c <_strtod_l+0xafc>)
 8010758:	4a54      	ldr	r2, [pc, #336]	; (80108ac <_strtod_l+0xb0c>)
 801075a:	4019      	ands	r1, r3
 801075c:	4291      	cmp	r1, r2
 801075e:	4680      	mov	r8, r0
 8010760:	d95d      	bls.n	801081e <_strtod_l+0xa7e>
 8010762:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010764:	4b4e      	ldr	r3, [pc, #312]	; (80108a0 <_strtod_l+0xb00>)
 8010766:	429a      	cmp	r2, r3
 8010768:	d103      	bne.n	8010772 <_strtod_l+0x9d2>
 801076a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801076c:	3301      	adds	r3, #1
 801076e:	f43f ad56 	beq.w	801021e <_strtod_l+0x47e>
 8010772:	f04f 38ff 	mov.w	r8, #4294967295
 8010776:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80108a0 <_strtod_l+0xb00>
 801077a:	4650      	mov	r0, sl
 801077c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801077e:	f000 ff19 	bl	80115b4 <_Bfree>
 8010782:	4650      	mov	r0, sl
 8010784:	9906      	ldr	r1, [sp, #24]
 8010786:	f000 ff15 	bl	80115b4 <_Bfree>
 801078a:	4650      	mov	r0, sl
 801078c:	9904      	ldr	r1, [sp, #16]
 801078e:	f000 ff11 	bl	80115b4 <_Bfree>
 8010792:	4659      	mov	r1, fp
 8010794:	4650      	mov	r0, sl
 8010796:	f000 ff0d 	bl	80115b4 <_Bfree>
 801079a:	e627      	b.n	80103ec <_strtod_l+0x64c>
 801079c:	f1b8 0f00 	cmp.w	r8, #0
 80107a0:	d119      	bne.n	80107d6 <_strtod_l+0xa36>
 80107a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80107a8:	b9e3      	cbnz	r3, 80107e4 <_strtod_l+0xa44>
 80107aa:	2200      	movs	r2, #0
 80107ac:	4630      	mov	r0, r6
 80107ae:	4639      	mov	r1, r7
 80107b0:	4b3c      	ldr	r3, [pc, #240]	; (80108a4 <_strtod_l+0xb04>)
 80107b2:	f7f0 f973 	bl	8000a9c <__aeabi_dcmplt>
 80107b6:	b9c8      	cbnz	r0, 80107ec <_strtod_l+0xa4c>
 80107b8:	2200      	movs	r2, #0
 80107ba:	4630      	mov	r0, r6
 80107bc:	4639      	mov	r1, r7
 80107be:	4b3c      	ldr	r3, [pc, #240]	; (80108b0 <_strtod_l+0xb10>)
 80107c0:	f7ef fefa 	bl	80005b8 <__aeabi_dmul>
 80107c4:	4604      	mov	r4, r0
 80107c6:	460d      	mov	r5, r1
 80107c8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80107cc:	9416      	str	r4, [sp, #88]	; 0x58
 80107ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80107d0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80107d4:	e7a2      	b.n	801071c <_strtod_l+0x97c>
 80107d6:	f1b8 0f01 	cmp.w	r8, #1
 80107da:	d103      	bne.n	80107e4 <_strtod_l+0xa44>
 80107dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107de:	2b00      	cmp	r3, #0
 80107e0:	f43f ad92 	beq.w	8010308 <_strtod_l+0x568>
 80107e4:	2600      	movs	r6, #0
 80107e6:	2400      	movs	r4, #0
 80107e8:	4f32      	ldr	r7, [pc, #200]	; (80108b4 <_strtod_l+0xb14>)
 80107ea:	e796      	b.n	801071a <_strtod_l+0x97a>
 80107ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80107ee:	4d30      	ldr	r5, [pc, #192]	; (80108b0 <_strtod_l+0xb10>)
 80107f0:	e7ea      	b.n	80107c8 <_strtod_l+0xa28>
 80107f2:	4b2f      	ldr	r3, [pc, #188]	; (80108b0 <_strtod_l+0xb10>)
 80107f4:	2200      	movs	r2, #0
 80107f6:	4630      	mov	r0, r6
 80107f8:	4639      	mov	r1, r7
 80107fa:	f7ef fedd 	bl	80005b8 <__aeabi_dmul>
 80107fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010800:	4604      	mov	r4, r0
 8010802:	460d      	mov	r5, r1
 8010804:	b933      	cbnz	r3, 8010814 <_strtod_l+0xa74>
 8010806:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801080a:	9010      	str	r0, [sp, #64]	; 0x40
 801080c:	9311      	str	r3, [sp, #68]	; 0x44
 801080e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8010812:	e783      	b.n	801071c <_strtod_l+0x97c>
 8010814:	4602      	mov	r2, r0
 8010816:	460b      	mov	r3, r1
 8010818:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801081c:	e7f7      	b.n	801080e <_strtod_l+0xa6e>
 801081e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8010822:	9b05      	ldr	r3, [sp, #20]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d1a8      	bne.n	801077a <_strtod_l+0x9da>
 8010828:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801082c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801082e:	0d1b      	lsrs	r3, r3, #20
 8010830:	051b      	lsls	r3, r3, #20
 8010832:	429a      	cmp	r2, r3
 8010834:	d1a1      	bne.n	801077a <_strtod_l+0x9da>
 8010836:	4620      	mov	r0, r4
 8010838:	4629      	mov	r1, r5
 801083a:	f7f0 fa81 	bl	8000d40 <__aeabi_d2lz>
 801083e:	f7ef fe8d 	bl	800055c <__aeabi_l2d>
 8010842:	4602      	mov	r2, r0
 8010844:	460b      	mov	r3, r1
 8010846:	4620      	mov	r0, r4
 8010848:	4629      	mov	r1, r5
 801084a:	f7ef fcfd 	bl	8000248 <__aeabi_dsub>
 801084e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010850:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010854:	ea43 0308 	orr.w	r3, r3, r8
 8010858:	4313      	orrs	r3, r2
 801085a:	4604      	mov	r4, r0
 801085c:	460d      	mov	r5, r1
 801085e:	d066      	beq.n	801092e <_strtod_l+0xb8e>
 8010860:	a309      	add	r3, pc, #36	; (adr r3, 8010888 <_strtod_l+0xae8>)
 8010862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010866:	f7f0 f919 	bl	8000a9c <__aeabi_dcmplt>
 801086a:	2800      	cmp	r0, #0
 801086c:	f47f ace2 	bne.w	8010234 <_strtod_l+0x494>
 8010870:	a307      	add	r3, pc, #28	; (adr r3, 8010890 <_strtod_l+0xaf0>)
 8010872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010876:	4620      	mov	r0, r4
 8010878:	4629      	mov	r1, r5
 801087a:	f7f0 f92d 	bl	8000ad8 <__aeabi_dcmpgt>
 801087e:	2800      	cmp	r0, #0
 8010880:	f43f af7b 	beq.w	801077a <_strtod_l+0x9da>
 8010884:	e4d6      	b.n	8010234 <_strtod_l+0x494>
 8010886:	bf00      	nop
 8010888:	94a03595 	.word	0x94a03595
 801088c:	3fdfffff 	.word	0x3fdfffff
 8010890:	35afe535 	.word	0x35afe535
 8010894:	3fe00000 	.word	0x3fe00000
 8010898:	000fffff 	.word	0x000fffff
 801089c:	7ff00000 	.word	0x7ff00000
 80108a0:	7fefffff 	.word	0x7fefffff
 80108a4:	3ff00000 	.word	0x3ff00000
 80108a8:	7fe00000 	.word	0x7fe00000
 80108ac:	7c9fffff 	.word	0x7c9fffff
 80108b0:	3fe00000 	.word	0x3fe00000
 80108b4:	bff00000 	.word	0xbff00000
 80108b8:	9b05      	ldr	r3, [sp, #20]
 80108ba:	b313      	cbz	r3, 8010902 <_strtod_l+0xb62>
 80108bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80108be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80108c2:	d81e      	bhi.n	8010902 <_strtod_l+0xb62>
 80108c4:	a326      	add	r3, pc, #152	; (adr r3, 8010960 <_strtod_l+0xbc0>)
 80108c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ca:	4620      	mov	r0, r4
 80108cc:	4629      	mov	r1, r5
 80108ce:	f7f0 f8ef 	bl	8000ab0 <__aeabi_dcmple>
 80108d2:	b190      	cbz	r0, 80108fa <_strtod_l+0xb5a>
 80108d4:	4629      	mov	r1, r5
 80108d6:	4620      	mov	r0, r4
 80108d8:	f7f0 f91e 	bl	8000b18 <__aeabi_d2uiz>
 80108dc:	2801      	cmp	r0, #1
 80108de:	bf38      	it	cc
 80108e0:	2001      	movcc	r0, #1
 80108e2:	f7ef fdef 	bl	80004c4 <__aeabi_ui2d>
 80108e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108e8:	4604      	mov	r4, r0
 80108ea:	460d      	mov	r5, r1
 80108ec:	b9d3      	cbnz	r3, 8010924 <_strtod_l+0xb84>
 80108ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80108f2:	9012      	str	r0, [sp, #72]	; 0x48
 80108f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80108f6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80108fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80108fc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8010900:	1a9f      	subs	r7, r3, r2
 8010902:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010906:	f001 f985 	bl	8011c14 <__ulp>
 801090a:	4602      	mov	r2, r0
 801090c:	460b      	mov	r3, r1
 801090e:	4630      	mov	r0, r6
 8010910:	4639      	mov	r1, r7
 8010912:	f7ef fe51 	bl	80005b8 <__aeabi_dmul>
 8010916:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801091a:	f7ef fc97 	bl	800024c <__adddf3>
 801091e:	4680      	mov	r8, r0
 8010920:	4689      	mov	r9, r1
 8010922:	e77e      	b.n	8010822 <_strtod_l+0xa82>
 8010924:	4602      	mov	r2, r0
 8010926:	460b      	mov	r3, r1
 8010928:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 801092c:	e7e3      	b.n	80108f6 <_strtod_l+0xb56>
 801092e:	a30e      	add	r3, pc, #56	; (adr r3, 8010968 <_strtod_l+0xbc8>)
 8010930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010934:	f7f0 f8b2 	bl	8000a9c <__aeabi_dcmplt>
 8010938:	e7a1      	b.n	801087e <_strtod_l+0xade>
 801093a:	2300      	movs	r3, #0
 801093c:	930a      	str	r3, [sp, #40]	; 0x28
 801093e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010940:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010942:	6013      	str	r3, [r2, #0]
 8010944:	f7ff ba71 	b.w	800fe2a <_strtod_l+0x8a>
 8010948:	2a65      	cmp	r2, #101	; 0x65
 801094a:	f43f ab63 	beq.w	8010014 <_strtod_l+0x274>
 801094e:	2a45      	cmp	r2, #69	; 0x45
 8010950:	f43f ab60 	beq.w	8010014 <_strtod_l+0x274>
 8010954:	2301      	movs	r3, #1
 8010956:	f7ff bb95 	b.w	8010084 <_strtod_l+0x2e4>
 801095a:	bf00      	nop
 801095c:	f3af 8000 	nop.w
 8010960:	ffc00000 	.word	0xffc00000
 8010964:	41dfffff 	.word	0x41dfffff
 8010968:	94a03595 	.word	0x94a03595
 801096c:	3fcfffff 	.word	0x3fcfffff

08010970 <strtof>:
 8010970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010974:	4f22      	ldr	r7, [pc, #136]	; (8010a00 <strtof+0x90>)
 8010976:	460a      	mov	r2, r1
 8010978:	4b22      	ldr	r3, [pc, #136]	; (8010a04 <strtof+0x94>)
 801097a:	4601      	mov	r1, r0
 801097c:	6838      	ldr	r0, [r7, #0]
 801097e:	f7ff fa0f 	bl	800fda0 <_strtod_l>
 8010982:	4602      	mov	r2, r0
 8010984:	460b      	mov	r3, r1
 8010986:	4606      	mov	r6, r0
 8010988:	460c      	mov	r4, r1
 801098a:	f7f0 f8af 	bl	8000aec <__aeabi_dcmpun>
 801098e:	b168      	cbz	r0, 80109ac <strtof+0x3c>
 8010990:	2c00      	cmp	r4, #0
 8010992:	481d      	ldr	r0, [pc, #116]	; (8010a08 <strtof+0x98>)
 8010994:	da06      	bge.n	80109a4 <strtof+0x34>
 8010996:	f001 ff43 	bl	8012820 <nanf>
 801099a:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 801099e:	4628      	mov	r0, r5
 80109a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109a8:	f001 bf3a 	b.w	8012820 <nanf>
 80109ac:	4621      	mov	r1, r4
 80109ae:	4630      	mov	r0, r6
 80109b0:	f7f0 f8d2 	bl	8000b58 <__aeabi_d2f>
 80109b4:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 80109b8:	4605      	mov	r5, r0
 80109ba:	4914      	ldr	r1, [pc, #80]	; (8010a0c <strtof+0x9c>)
 80109bc:	4640      	mov	r0, r8
 80109be:	f7f0 f991 	bl	8000ce4 <__aeabi_fcmpun>
 80109c2:	2800      	cmp	r0, #0
 80109c4:	d1eb      	bne.n	801099e <strtof+0x2e>
 80109c6:	4640      	mov	r0, r8
 80109c8:	4910      	ldr	r1, [pc, #64]	; (8010a0c <strtof+0x9c>)
 80109ca:	f7f0 f96d 	bl	8000ca8 <__aeabi_fcmple>
 80109ce:	2800      	cmp	r0, #0
 80109d0:	d1e5      	bne.n	801099e <strtof+0x2e>
 80109d2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80109d6:	f04f 32ff 	mov.w	r2, #4294967295
 80109da:	4630      	mov	r0, r6
 80109dc:	4621      	mov	r1, r4
 80109de:	4b0c      	ldr	r3, [pc, #48]	; (8010a10 <strtof+0xa0>)
 80109e0:	f7f0 f884 	bl	8000aec <__aeabi_dcmpun>
 80109e4:	b940      	cbnz	r0, 80109f8 <strtof+0x88>
 80109e6:	f04f 32ff 	mov.w	r2, #4294967295
 80109ea:	4630      	mov	r0, r6
 80109ec:	4621      	mov	r1, r4
 80109ee:	4b08      	ldr	r3, [pc, #32]	; (8010a10 <strtof+0xa0>)
 80109f0:	f7f0 f85e 	bl	8000ab0 <__aeabi_dcmple>
 80109f4:	2800      	cmp	r0, #0
 80109f6:	d0d2      	beq.n	801099e <strtof+0x2e>
 80109f8:	2222      	movs	r2, #34	; 0x22
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	601a      	str	r2, [r3, #0]
 80109fe:	e7ce      	b.n	801099e <strtof+0x2e>
 8010a00:	2000009c 	.word	0x2000009c
 8010a04:	20000104 	.word	0x20000104
 8010a08:	08013827 	.word	0x08013827
 8010a0c:	7f7fffff 	.word	0x7f7fffff
 8010a10:	7fefffff 	.word	0x7fefffff

08010a14 <strtok>:
 8010a14:	4b16      	ldr	r3, [pc, #88]	; (8010a70 <strtok+0x5c>)
 8010a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a1a:	681f      	ldr	r7, [r3, #0]
 8010a1c:	4605      	mov	r5, r0
 8010a1e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8010a20:	460e      	mov	r6, r1
 8010a22:	b9ec      	cbnz	r4, 8010a60 <strtok+0x4c>
 8010a24:	2050      	movs	r0, #80	; 0x50
 8010a26:	f000 fd5f 	bl	80114e8 <malloc>
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	65b8      	str	r0, [r7, #88]	; 0x58
 8010a2e:	b920      	cbnz	r0, 8010a3a <strtok+0x26>
 8010a30:	2157      	movs	r1, #87	; 0x57
 8010a32:	4b10      	ldr	r3, [pc, #64]	; (8010a74 <strtok+0x60>)
 8010a34:	4810      	ldr	r0, [pc, #64]	; (8010a78 <strtok+0x64>)
 8010a36:	f000 f8e1 	bl	8010bfc <__assert_func>
 8010a3a:	e9c0 4400 	strd	r4, r4, [r0]
 8010a3e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010a42:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010a46:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8010a4a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8010a4e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8010a52:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8010a56:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8010a5a:	6184      	str	r4, [r0, #24]
 8010a5c:	7704      	strb	r4, [r0, #28]
 8010a5e:	6244      	str	r4, [r0, #36]	; 0x24
 8010a60:	4631      	mov	r1, r6
 8010a62:	4628      	mov	r0, r5
 8010a64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010a66:	2301      	movs	r3, #1
 8010a68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a6c:	f000 b806 	b.w	8010a7c <__strtok_r>
 8010a70:	2000009c 	.word	0x2000009c
 8010a74:	08013778 	.word	0x08013778
 8010a78:	0801378f 	.word	0x0801378f

08010a7c <__strtok_r>:
 8010a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a7e:	b908      	cbnz	r0, 8010a84 <__strtok_r+0x8>
 8010a80:	6810      	ldr	r0, [r2, #0]
 8010a82:	b188      	cbz	r0, 8010aa8 <__strtok_r+0x2c>
 8010a84:	4604      	mov	r4, r0
 8010a86:	460f      	mov	r7, r1
 8010a88:	4620      	mov	r0, r4
 8010a8a:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010a8e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010a92:	b91e      	cbnz	r6, 8010a9c <__strtok_r+0x20>
 8010a94:	b965      	cbnz	r5, 8010ab0 <__strtok_r+0x34>
 8010a96:	4628      	mov	r0, r5
 8010a98:	6015      	str	r5, [r2, #0]
 8010a9a:	e005      	b.n	8010aa8 <__strtok_r+0x2c>
 8010a9c:	42b5      	cmp	r5, r6
 8010a9e:	d1f6      	bne.n	8010a8e <__strtok_r+0x12>
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d1f0      	bne.n	8010a86 <__strtok_r+0xa>
 8010aa4:	6014      	str	r4, [r2, #0]
 8010aa6:	7003      	strb	r3, [r0, #0]
 8010aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010aaa:	461c      	mov	r4, r3
 8010aac:	e00c      	b.n	8010ac8 <__strtok_r+0x4c>
 8010aae:	b915      	cbnz	r5, 8010ab6 <__strtok_r+0x3a>
 8010ab0:	460e      	mov	r6, r1
 8010ab2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010ab6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010aba:	42ab      	cmp	r3, r5
 8010abc:	d1f7      	bne.n	8010aae <__strtok_r+0x32>
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d0f3      	beq.n	8010aaa <__strtok_r+0x2e>
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010ac8:	6014      	str	r4, [r2, #0]
 8010aca:	e7ed      	b.n	8010aa8 <__strtok_r+0x2c>

08010acc <_strtol_l.constprop.0>:
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ad2:	4680      	mov	r8, r0
 8010ad4:	d001      	beq.n	8010ada <_strtol_l.constprop.0+0xe>
 8010ad6:	2b24      	cmp	r3, #36	; 0x24
 8010ad8:	d906      	bls.n	8010ae8 <_strtol_l.constprop.0+0x1c>
 8010ada:	f7fe fe67 	bl	800f7ac <__errno>
 8010ade:	2316      	movs	r3, #22
 8010ae0:	6003      	str	r3, [r0, #0]
 8010ae2:	2000      	movs	r0, #0
 8010ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ae8:	460d      	mov	r5, r1
 8010aea:	4f35      	ldr	r7, [pc, #212]	; (8010bc0 <_strtol_l.constprop.0+0xf4>)
 8010aec:	4628      	mov	r0, r5
 8010aee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010af2:	5de6      	ldrb	r6, [r4, r7]
 8010af4:	f016 0608 	ands.w	r6, r6, #8
 8010af8:	d1f8      	bne.n	8010aec <_strtol_l.constprop.0+0x20>
 8010afa:	2c2d      	cmp	r4, #45	; 0x2d
 8010afc:	d12f      	bne.n	8010b5e <_strtol_l.constprop.0+0x92>
 8010afe:	2601      	movs	r6, #1
 8010b00:	782c      	ldrb	r4, [r5, #0]
 8010b02:	1c85      	adds	r5, r0, #2
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d057      	beq.n	8010bb8 <_strtol_l.constprop.0+0xec>
 8010b08:	2b10      	cmp	r3, #16
 8010b0a:	d109      	bne.n	8010b20 <_strtol_l.constprop.0+0x54>
 8010b0c:	2c30      	cmp	r4, #48	; 0x30
 8010b0e:	d107      	bne.n	8010b20 <_strtol_l.constprop.0+0x54>
 8010b10:	7828      	ldrb	r0, [r5, #0]
 8010b12:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010b16:	2858      	cmp	r0, #88	; 0x58
 8010b18:	d149      	bne.n	8010bae <_strtol_l.constprop.0+0xe2>
 8010b1a:	2310      	movs	r3, #16
 8010b1c:	786c      	ldrb	r4, [r5, #1]
 8010b1e:	3502      	adds	r5, #2
 8010b20:	2700      	movs	r7, #0
 8010b22:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8010b26:	f10e 3eff 	add.w	lr, lr, #4294967295
 8010b2a:	fbbe f9f3 	udiv	r9, lr, r3
 8010b2e:	4638      	mov	r0, r7
 8010b30:	fb03 ea19 	mls	sl, r3, r9, lr
 8010b34:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010b38:	f1bc 0f09 	cmp.w	ip, #9
 8010b3c:	d814      	bhi.n	8010b68 <_strtol_l.constprop.0+0x9c>
 8010b3e:	4664      	mov	r4, ip
 8010b40:	42a3      	cmp	r3, r4
 8010b42:	dd22      	ble.n	8010b8a <_strtol_l.constprop.0+0xbe>
 8010b44:	2f00      	cmp	r7, #0
 8010b46:	db1d      	blt.n	8010b84 <_strtol_l.constprop.0+0xb8>
 8010b48:	4581      	cmp	r9, r0
 8010b4a:	d31b      	bcc.n	8010b84 <_strtol_l.constprop.0+0xb8>
 8010b4c:	d101      	bne.n	8010b52 <_strtol_l.constprop.0+0x86>
 8010b4e:	45a2      	cmp	sl, r4
 8010b50:	db18      	blt.n	8010b84 <_strtol_l.constprop.0+0xb8>
 8010b52:	2701      	movs	r7, #1
 8010b54:	fb00 4003 	mla	r0, r0, r3, r4
 8010b58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b5c:	e7ea      	b.n	8010b34 <_strtol_l.constprop.0+0x68>
 8010b5e:	2c2b      	cmp	r4, #43	; 0x2b
 8010b60:	bf04      	itt	eq
 8010b62:	782c      	ldrbeq	r4, [r5, #0]
 8010b64:	1c85      	addeq	r5, r0, #2
 8010b66:	e7cd      	b.n	8010b04 <_strtol_l.constprop.0+0x38>
 8010b68:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010b6c:	f1bc 0f19 	cmp.w	ip, #25
 8010b70:	d801      	bhi.n	8010b76 <_strtol_l.constprop.0+0xaa>
 8010b72:	3c37      	subs	r4, #55	; 0x37
 8010b74:	e7e4      	b.n	8010b40 <_strtol_l.constprop.0+0x74>
 8010b76:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010b7a:	f1bc 0f19 	cmp.w	ip, #25
 8010b7e:	d804      	bhi.n	8010b8a <_strtol_l.constprop.0+0xbe>
 8010b80:	3c57      	subs	r4, #87	; 0x57
 8010b82:	e7dd      	b.n	8010b40 <_strtol_l.constprop.0+0x74>
 8010b84:	f04f 37ff 	mov.w	r7, #4294967295
 8010b88:	e7e6      	b.n	8010b58 <_strtol_l.constprop.0+0x8c>
 8010b8a:	2f00      	cmp	r7, #0
 8010b8c:	da07      	bge.n	8010b9e <_strtol_l.constprop.0+0xd2>
 8010b8e:	2322      	movs	r3, #34	; 0x22
 8010b90:	4670      	mov	r0, lr
 8010b92:	f8c8 3000 	str.w	r3, [r8]
 8010b96:	2a00      	cmp	r2, #0
 8010b98:	d0a4      	beq.n	8010ae4 <_strtol_l.constprop.0+0x18>
 8010b9a:	1e69      	subs	r1, r5, #1
 8010b9c:	e005      	b.n	8010baa <_strtol_l.constprop.0+0xde>
 8010b9e:	b106      	cbz	r6, 8010ba2 <_strtol_l.constprop.0+0xd6>
 8010ba0:	4240      	negs	r0, r0
 8010ba2:	2a00      	cmp	r2, #0
 8010ba4:	d09e      	beq.n	8010ae4 <_strtol_l.constprop.0+0x18>
 8010ba6:	2f00      	cmp	r7, #0
 8010ba8:	d1f7      	bne.n	8010b9a <_strtol_l.constprop.0+0xce>
 8010baa:	6011      	str	r1, [r2, #0]
 8010bac:	e79a      	b.n	8010ae4 <_strtol_l.constprop.0+0x18>
 8010bae:	2430      	movs	r4, #48	; 0x30
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d1b5      	bne.n	8010b20 <_strtol_l.constprop.0+0x54>
 8010bb4:	2308      	movs	r3, #8
 8010bb6:	e7b3      	b.n	8010b20 <_strtol_l.constprop.0+0x54>
 8010bb8:	2c30      	cmp	r4, #48	; 0x30
 8010bba:	d0a9      	beq.n	8010b10 <_strtol_l.constprop.0+0x44>
 8010bbc:	230a      	movs	r3, #10
 8010bbe:	e7af      	b.n	8010b20 <_strtol_l.constprop.0+0x54>
 8010bc0:	08013829 	.word	0x08013829

08010bc4 <strtol>:
 8010bc4:	4613      	mov	r3, r2
 8010bc6:	460a      	mov	r2, r1
 8010bc8:	4601      	mov	r1, r0
 8010bca:	4802      	ldr	r0, [pc, #8]	; (8010bd4 <strtol+0x10>)
 8010bcc:	6800      	ldr	r0, [r0, #0]
 8010bce:	f7ff bf7d 	b.w	8010acc <_strtol_l.constprop.0>
 8010bd2:	bf00      	nop
 8010bd4:	2000009c 	.word	0x2000009c

08010bd8 <_write_r>:
 8010bd8:	b538      	push	{r3, r4, r5, lr}
 8010bda:	4604      	mov	r4, r0
 8010bdc:	4608      	mov	r0, r1
 8010bde:	4611      	mov	r1, r2
 8010be0:	2200      	movs	r2, #0
 8010be2:	4d05      	ldr	r5, [pc, #20]	; (8010bf8 <_write_r+0x20>)
 8010be4:	602a      	str	r2, [r5, #0]
 8010be6:	461a      	mov	r2, r3
 8010be8:	f7f3 fa0e 	bl	8004008 <_write>
 8010bec:	1c43      	adds	r3, r0, #1
 8010bee:	d102      	bne.n	8010bf6 <_write_r+0x1e>
 8010bf0:	682b      	ldr	r3, [r5, #0]
 8010bf2:	b103      	cbz	r3, 8010bf6 <_write_r+0x1e>
 8010bf4:	6023      	str	r3, [r4, #0]
 8010bf6:	bd38      	pop	{r3, r4, r5, pc}
 8010bf8:	20009a20 	.word	0x20009a20

08010bfc <__assert_func>:
 8010bfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010bfe:	4614      	mov	r4, r2
 8010c00:	461a      	mov	r2, r3
 8010c02:	4b09      	ldr	r3, [pc, #36]	; (8010c28 <__assert_func+0x2c>)
 8010c04:	4605      	mov	r5, r0
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	68d8      	ldr	r0, [r3, #12]
 8010c0a:	b14c      	cbz	r4, 8010c20 <__assert_func+0x24>
 8010c0c:	4b07      	ldr	r3, [pc, #28]	; (8010c2c <__assert_func+0x30>)
 8010c0e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010c12:	9100      	str	r1, [sp, #0]
 8010c14:	462b      	mov	r3, r5
 8010c16:	4906      	ldr	r1, [pc, #24]	; (8010c30 <__assert_func+0x34>)
 8010c18:	f000 f8dc 	bl	8010dd4 <fiprintf>
 8010c1c:	f001 fee6 	bl	80129ec <abort>
 8010c20:	4b04      	ldr	r3, [pc, #16]	; (8010c34 <__assert_func+0x38>)
 8010c22:	461c      	mov	r4, r3
 8010c24:	e7f3      	b.n	8010c0e <__assert_func+0x12>
 8010c26:	bf00      	nop
 8010c28:	2000009c 	.word	0x2000009c
 8010c2c:	080137ec 	.word	0x080137ec
 8010c30:	080137f9 	.word	0x080137f9
 8010c34:	08013827 	.word	0x08013827

08010c38 <_close_r>:
 8010c38:	b538      	push	{r3, r4, r5, lr}
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	4d05      	ldr	r5, [pc, #20]	; (8010c54 <_close_r+0x1c>)
 8010c3e:	4604      	mov	r4, r0
 8010c40:	4608      	mov	r0, r1
 8010c42:	602b      	str	r3, [r5, #0]
 8010c44:	f7f3 f9fc 	bl	8004040 <_close>
 8010c48:	1c43      	adds	r3, r0, #1
 8010c4a:	d102      	bne.n	8010c52 <_close_r+0x1a>
 8010c4c:	682b      	ldr	r3, [r5, #0]
 8010c4e:	b103      	cbz	r3, 8010c52 <_close_r+0x1a>
 8010c50:	6023      	str	r3, [r4, #0]
 8010c52:	bd38      	pop	{r3, r4, r5, pc}
 8010c54:	20009a20 	.word	0x20009a20

08010c58 <__sflush_r>:
 8010c58:	898a      	ldrh	r2, [r1, #12]
 8010c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c5c:	4605      	mov	r5, r0
 8010c5e:	0710      	lsls	r0, r2, #28
 8010c60:	460c      	mov	r4, r1
 8010c62:	d457      	bmi.n	8010d14 <__sflush_r+0xbc>
 8010c64:	684b      	ldr	r3, [r1, #4]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	dc04      	bgt.n	8010c74 <__sflush_r+0x1c>
 8010c6a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	dc01      	bgt.n	8010c74 <__sflush_r+0x1c>
 8010c70:	2000      	movs	r0, #0
 8010c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c76:	2e00      	cmp	r6, #0
 8010c78:	d0fa      	beq.n	8010c70 <__sflush_r+0x18>
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010c80:	682f      	ldr	r7, [r5, #0]
 8010c82:	602b      	str	r3, [r5, #0]
 8010c84:	d032      	beq.n	8010cec <__sflush_r+0x94>
 8010c86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010c88:	89a3      	ldrh	r3, [r4, #12]
 8010c8a:	075a      	lsls	r2, r3, #29
 8010c8c:	d505      	bpl.n	8010c9a <__sflush_r+0x42>
 8010c8e:	6863      	ldr	r3, [r4, #4]
 8010c90:	1ac0      	subs	r0, r0, r3
 8010c92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010c94:	b10b      	cbz	r3, 8010c9a <__sflush_r+0x42>
 8010c96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010c98:	1ac0      	subs	r0, r0, r3
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	4602      	mov	r2, r0
 8010c9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ca0:	4628      	mov	r0, r5
 8010ca2:	6a21      	ldr	r1, [r4, #32]
 8010ca4:	47b0      	blx	r6
 8010ca6:	1c43      	adds	r3, r0, #1
 8010ca8:	89a3      	ldrh	r3, [r4, #12]
 8010caa:	d106      	bne.n	8010cba <__sflush_r+0x62>
 8010cac:	6829      	ldr	r1, [r5, #0]
 8010cae:	291d      	cmp	r1, #29
 8010cb0:	d82c      	bhi.n	8010d0c <__sflush_r+0xb4>
 8010cb2:	4a29      	ldr	r2, [pc, #164]	; (8010d58 <__sflush_r+0x100>)
 8010cb4:	40ca      	lsrs	r2, r1
 8010cb6:	07d6      	lsls	r6, r2, #31
 8010cb8:	d528      	bpl.n	8010d0c <__sflush_r+0xb4>
 8010cba:	2200      	movs	r2, #0
 8010cbc:	6062      	str	r2, [r4, #4]
 8010cbe:	6922      	ldr	r2, [r4, #16]
 8010cc0:	04d9      	lsls	r1, r3, #19
 8010cc2:	6022      	str	r2, [r4, #0]
 8010cc4:	d504      	bpl.n	8010cd0 <__sflush_r+0x78>
 8010cc6:	1c42      	adds	r2, r0, #1
 8010cc8:	d101      	bne.n	8010cce <__sflush_r+0x76>
 8010cca:	682b      	ldr	r3, [r5, #0]
 8010ccc:	b903      	cbnz	r3, 8010cd0 <__sflush_r+0x78>
 8010cce:	6560      	str	r0, [r4, #84]	; 0x54
 8010cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010cd2:	602f      	str	r7, [r5, #0]
 8010cd4:	2900      	cmp	r1, #0
 8010cd6:	d0cb      	beq.n	8010c70 <__sflush_r+0x18>
 8010cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010cdc:	4299      	cmp	r1, r3
 8010cde:	d002      	beq.n	8010ce6 <__sflush_r+0x8e>
 8010ce0:	4628      	mov	r0, r5
 8010ce2:	f001 f8f3 	bl	8011ecc <_free_r>
 8010ce6:	2000      	movs	r0, #0
 8010ce8:	6360      	str	r0, [r4, #52]	; 0x34
 8010cea:	e7c2      	b.n	8010c72 <__sflush_r+0x1a>
 8010cec:	6a21      	ldr	r1, [r4, #32]
 8010cee:	2301      	movs	r3, #1
 8010cf0:	4628      	mov	r0, r5
 8010cf2:	47b0      	blx	r6
 8010cf4:	1c41      	adds	r1, r0, #1
 8010cf6:	d1c7      	bne.n	8010c88 <__sflush_r+0x30>
 8010cf8:	682b      	ldr	r3, [r5, #0]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d0c4      	beq.n	8010c88 <__sflush_r+0x30>
 8010cfe:	2b1d      	cmp	r3, #29
 8010d00:	d001      	beq.n	8010d06 <__sflush_r+0xae>
 8010d02:	2b16      	cmp	r3, #22
 8010d04:	d101      	bne.n	8010d0a <__sflush_r+0xb2>
 8010d06:	602f      	str	r7, [r5, #0]
 8010d08:	e7b2      	b.n	8010c70 <__sflush_r+0x18>
 8010d0a:	89a3      	ldrh	r3, [r4, #12]
 8010d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d10:	81a3      	strh	r3, [r4, #12]
 8010d12:	e7ae      	b.n	8010c72 <__sflush_r+0x1a>
 8010d14:	690f      	ldr	r7, [r1, #16]
 8010d16:	2f00      	cmp	r7, #0
 8010d18:	d0aa      	beq.n	8010c70 <__sflush_r+0x18>
 8010d1a:	0793      	lsls	r3, r2, #30
 8010d1c:	bf18      	it	ne
 8010d1e:	2300      	movne	r3, #0
 8010d20:	680e      	ldr	r6, [r1, #0]
 8010d22:	bf08      	it	eq
 8010d24:	694b      	ldreq	r3, [r1, #20]
 8010d26:	1bf6      	subs	r6, r6, r7
 8010d28:	600f      	str	r7, [r1, #0]
 8010d2a:	608b      	str	r3, [r1, #8]
 8010d2c:	2e00      	cmp	r6, #0
 8010d2e:	dd9f      	ble.n	8010c70 <__sflush_r+0x18>
 8010d30:	4633      	mov	r3, r6
 8010d32:	463a      	mov	r2, r7
 8010d34:	4628      	mov	r0, r5
 8010d36:	6a21      	ldr	r1, [r4, #32]
 8010d38:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8010d3c:	47e0      	blx	ip
 8010d3e:	2800      	cmp	r0, #0
 8010d40:	dc06      	bgt.n	8010d50 <__sflush_r+0xf8>
 8010d42:	89a3      	ldrh	r3, [r4, #12]
 8010d44:	f04f 30ff 	mov.w	r0, #4294967295
 8010d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d4c:	81a3      	strh	r3, [r4, #12]
 8010d4e:	e790      	b.n	8010c72 <__sflush_r+0x1a>
 8010d50:	4407      	add	r7, r0
 8010d52:	1a36      	subs	r6, r6, r0
 8010d54:	e7ea      	b.n	8010d2c <__sflush_r+0xd4>
 8010d56:	bf00      	nop
 8010d58:	20400001 	.word	0x20400001

08010d5c <_fflush_r>:
 8010d5c:	b538      	push	{r3, r4, r5, lr}
 8010d5e:	690b      	ldr	r3, [r1, #16]
 8010d60:	4605      	mov	r5, r0
 8010d62:	460c      	mov	r4, r1
 8010d64:	b913      	cbnz	r3, 8010d6c <_fflush_r+0x10>
 8010d66:	2500      	movs	r5, #0
 8010d68:	4628      	mov	r0, r5
 8010d6a:	bd38      	pop	{r3, r4, r5, pc}
 8010d6c:	b118      	cbz	r0, 8010d76 <_fflush_r+0x1a>
 8010d6e:	6983      	ldr	r3, [r0, #24]
 8010d70:	b90b      	cbnz	r3, 8010d76 <_fflush_r+0x1a>
 8010d72:	f7fe fd79 	bl	800f868 <__sinit>
 8010d76:	4b14      	ldr	r3, [pc, #80]	; (8010dc8 <_fflush_r+0x6c>)
 8010d78:	429c      	cmp	r4, r3
 8010d7a:	d11b      	bne.n	8010db4 <_fflush_r+0x58>
 8010d7c:	686c      	ldr	r4, [r5, #4]
 8010d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d0ef      	beq.n	8010d66 <_fflush_r+0xa>
 8010d86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010d88:	07d0      	lsls	r0, r2, #31
 8010d8a:	d404      	bmi.n	8010d96 <_fflush_r+0x3a>
 8010d8c:	0599      	lsls	r1, r3, #22
 8010d8e:	d402      	bmi.n	8010d96 <_fflush_r+0x3a>
 8010d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d92:	f7fe fe2c 	bl	800f9ee <__retarget_lock_acquire_recursive>
 8010d96:	4628      	mov	r0, r5
 8010d98:	4621      	mov	r1, r4
 8010d9a:	f7ff ff5d 	bl	8010c58 <__sflush_r>
 8010d9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010da0:	4605      	mov	r5, r0
 8010da2:	07da      	lsls	r2, r3, #31
 8010da4:	d4e0      	bmi.n	8010d68 <_fflush_r+0xc>
 8010da6:	89a3      	ldrh	r3, [r4, #12]
 8010da8:	059b      	lsls	r3, r3, #22
 8010daa:	d4dd      	bmi.n	8010d68 <_fflush_r+0xc>
 8010dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dae:	f7fe fe1f 	bl	800f9f0 <__retarget_lock_release_recursive>
 8010db2:	e7d9      	b.n	8010d68 <_fflush_r+0xc>
 8010db4:	4b05      	ldr	r3, [pc, #20]	; (8010dcc <_fflush_r+0x70>)
 8010db6:	429c      	cmp	r4, r3
 8010db8:	d101      	bne.n	8010dbe <_fflush_r+0x62>
 8010dba:	68ac      	ldr	r4, [r5, #8]
 8010dbc:	e7df      	b.n	8010d7e <_fflush_r+0x22>
 8010dbe:	4b04      	ldr	r3, [pc, #16]	; (8010dd0 <_fflush_r+0x74>)
 8010dc0:	429c      	cmp	r4, r3
 8010dc2:	bf08      	it	eq
 8010dc4:	68ec      	ldreq	r4, [r5, #12]
 8010dc6:	e7da      	b.n	8010d7e <_fflush_r+0x22>
 8010dc8:	080136d4 	.word	0x080136d4
 8010dcc:	080136f4 	.word	0x080136f4
 8010dd0:	080136b4 	.word	0x080136b4

08010dd4 <fiprintf>:
 8010dd4:	b40e      	push	{r1, r2, r3}
 8010dd6:	b503      	push	{r0, r1, lr}
 8010dd8:	4601      	mov	r1, r0
 8010dda:	ab03      	add	r3, sp, #12
 8010ddc:	4805      	ldr	r0, [pc, #20]	; (8010df4 <fiprintf+0x20>)
 8010dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8010de2:	6800      	ldr	r0, [r0, #0]
 8010de4:	9301      	str	r3, [sp, #4]
 8010de6:	f001 fa3d 	bl	8012264 <_vfiprintf_r>
 8010dea:	b002      	add	sp, #8
 8010dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8010df0:	b003      	add	sp, #12
 8010df2:	4770      	bx	lr
 8010df4:	2000009c 	.word	0x2000009c

08010df8 <rshift>:
 8010df8:	6903      	ldr	r3, [r0, #16]
 8010dfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010dfe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010e02:	f100 0414 	add.w	r4, r0, #20
 8010e06:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010e0a:	dd46      	ble.n	8010e9a <rshift+0xa2>
 8010e0c:	f011 011f 	ands.w	r1, r1, #31
 8010e10:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010e14:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010e18:	d10c      	bne.n	8010e34 <rshift+0x3c>
 8010e1a:	4629      	mov	r1, r5
 8010e1c:	f100 0710 	add.w	r7, r0, #16
 8010e20:	42b1      	cmp	r1, r6
 8010e22:	d335      	bcc.n	8010e90 <rshift+0x98>
 8010e24:	1a9b      	subs	r3, r3, r2
 8010e26:	009b      	lsls	r3, r3, #2
 8010e28:	1eea      	subs	r2, r5, #3
 8010e2a:	4296      	cmp	r6, r2
 8010e2c:	bf38      	it	cc
 8010e2e:	2300      	movcc	r3, #0
 8010e30:	4423      	add	r3, r4
 8010e32:	e015      	b.n	8010e60 <rshift+0x68>
 8010e34:	46a1      	mov	r9, r4
 8010e36:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010e3a:	f1c1 0820 	rsb	r8, r1, #32
 8010e3e:	40cf      	lsrs	r7, r1
 8010e40:	f105 0e04 	add.w	lr, r5, #4
 8010e44:	4576      	cmp	r6, lr
 8010e46:	46f4      	mov	ip, lr
 8010e48:	d816      	bhi.n	8010e78 <rshift+0x80>
 8010e4a:	1a9a      	subs	r2, r3, r2
 8010e4c:	0092      	lsls	r2, r2, #2
 8010e4e:	3a04      	subs	r2, #4
 8010e50:	3501      	adds	r5, #1
 8010e52:	42ae      	cmp	r6, r5
 8010e54:	bf38      	it	cc
 8010e56:	2200      	movcc	r2, #0
 8010e58:	18a3      	adds	r3, r4, r2
 8010e5a:	50a7      	str	r7, [r4, r2]
 8010e5c:	b107      	cbz	r7, 8010e60 <rshift+0x68>
 8010e5e:	3304      	adds	r3, #4
 8010e60:	42a3      	cmp	r3, r4
 8010e62:	eba3 0204 	sub.w	r2, r3, r4
 8010e66:	bf08      	it	eq
 8010e68:	2300      	moveq	r3, #0
 8010e6a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010e6e:	6102      	str	r2, [r0, #16]
 8010e70:	bf08      	it	eq
 8010e72:	6143      	streq	r3, [r0, #20]
 8010e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e78:	f8dc c000 	ldr.w	ip, [ip]
 8010e7c:	fa0c fc08 	lsl.w	ip, ip, r8
 8010e80:	ea4c 0707 	orr.w	r7, ip, r7
 8010e84:	f849 7b04 	str.w	r7, [r9], #4
 8010e88:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010e8c:	40cf      	lsrs	r7, r1
 8010e8e:	e7d9      	b.n	8010e44 <rshift+0x4c>
 8010e90:	f851 cb04 	ldr.w	ip, [r1], #4
 8010e94:	f847 cf04 	str.w	ip, [r7, #4]!
 8010e98:	e7c2      	b.n	8010e20 <rshift+0x28>
 8010e9a:	4623      	mov	r3, r4
 8010e9c:	e7e0      	b.n	8010e60 <rshift+0x68>

08010e9e <__hexdig_fun>:
 8010e9e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010ea2:	2b09      	cmp	r3, #9
 8010ea4:	d802      	bhi.n	8010eac <__hexdig_fun+0xe>
 8010ea6:	3820      	subs	r0, #32
 8010ea8:	b2c0      	uxtb	r0, r0
 8010eaa:	4770      	bx	lr
 8010eac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010eb0:	2b05      	cmp	r3, #5
 8010eb2:	d801      	bhi.n	8010eb8 <__hexdig_fun+0x1a>
 8010eb4:	3847      	subs	r0, #71	; 0x47
 8010eb6:	e7f7      	b.n	8010ea8 <__hexdig_fun+0xa>
 8010eb8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010ebc:	2b05      	cmp	r3, #5
 8010ebe:	d801      	bhi.n	8010ec4 <__hexdig_fun+0x26>
 8010ec0:	3827      	subs	r0, #39	; 0x27
 8010ec2:	e7f1      	b.n	8010ea8 <__hexdig_fun+0xa>
 8010ec4:	2000      	movs	r0, #0
 8010ec6:	4770      	bx	lr

08010ec8 <__gethex>:
 8010ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ecc:	b08b      	sub	sp, #44	; 0x2c
 8010ece:	9305      	str	r3, [sp, #20]
 8010ed0:	4bb2      	ldr	r3, [pc, #712]	; (801119c <__gethex+0x2d4>)
 8010ed2:	9002      	str	r0, [sp, #8]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	468b      	mov	fp, r1
 8010ed8:	4618      	mov	r0, r3
 8010eda:	4690      	mov	r8, r2
 8010edc:	9303      	str	r3, [sp, #12]
 8010ede:	f7ef f9a7 	bl	8000230 <strlen>
 8010ee2:	4682      	mov	sl, r0
 8010ee4:	9b03      	ldr	r3, [sp, #12]
 8010ee6:	f8db 2000 	ldr.w	r2, [fp]
 8010eea:	4403      	add	r3, r0
 8010eec:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010ef0:	9306      	str	r3, [sp, #24]
 8010ef2:	1c93      	adds	r3, r2, #2
 8010ef4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010ef8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010efc:	32fe      	adds	r2, #254	; 0xfe
 8010efe:	18d1      	adds	r1, r2, r3
 8010f00:	461f      	mov	r7, r3
 8010f02:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010f06:	9101      	str	r1, [sp, #4]
 8010f08:	2830      	cmp	r0, #48	; 0x30
 8010f0a:	d0f8      	beq.n	8010efe <__gethex+0x36>
 8010f0c:	f7ff ffc7 	bl	8010e9e <__hexdig_fun>
 8010f10:	4604      	mov	r4, r0
 8010f12:	2800      	cmp	r0, #0
 8010f14:	d13a      	bne.n	8010f8c <__gethex+0xc4>
 8010f16:	4652      	mov	r2, sl
 8010f18:	4638      	mov	r0, r7
 8010f1a:	9903      	ldr	r1, [sp, #12]
 8010f1c:	f001 fc84 	bl	8012828 <strncmp>
 8010f20:	4605      	mov	r5, r0
 8010f22:	2800      	cmp	r0, #0
 8010f24:	d166      	bne.n	8010ff4 <__gethex+0x12c>
 8010f26:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010f2a:	eb07 060a 	add.w	r6, r7, sl
 8010f2e:	f7ff ffb6 	bl	8010e9e <__hexdig_fun>
 8010f32:	2800      	cmp	r0, #0
 8010f34:	d060      	beq.n	8010ff8 <__gethex+0x130>
 8010f36:	4633      	mov	r3, r6
 8010f38:	7818      	ldrb	r0, [r3, #0]
 8010f3a:	461f      	mov	r7, r3
 8010f3c:	2830      	cmp	r0, #48	; 0x30
 8010f3e:	f103 0301 	add.w	r3, r3, #1
 8010f42:	d0f9      	beq.n	8010f38 <__gethex+0x70>
 8010f44:	f7ff ffab 	bl	8010e9e <__hexdig_fun>
 8010f48:	2301      	movs	r3, #1
 8010f4a:	fab0 f480 	clz	r4, r0
 8010f4e:	4635      	mov	r5, r6
 8010f50:	0964      	lsrs	r4, r4, #5
 8010f52:	9301      	str	r3, [sp, #4]
 8010f54:	463a      	mov	r2, r7
 8010f56:	4616      	mov	r6, r2
 8010f58:	7830      	ldrb	r0, [r6, #0]
 8010f5a:	3201      	adds	r2, #1
 8010f5c:	f7ff ff9f 	bl	8010e9e <__hexdig_fun>
 8010f60:	2800      	cmp	r0, #0
 8010f62:	d1f8      	bne.n	8010f56 <__gethex+0x8e>
 8010f64:	4652      	mov	r2, sl
 8010f66:	4630      	mov	r0, r6
 8010f68:	9903      	ldr	r1, [sp, #12]
 8010f6a:	f001 fc5d 	bl	8012828 <strncmp>
 8010f6e:	b980      	cbnz	r0, 8010f92 <__gethex+0xca>
 8010f70:	b94d      	cbnz	r5, 8010f86 <__gethex+0xbe>
 8010f72:	eb06 050a 	add.w	r5, r6, sl
 8010f76:	462a      	mov	r2, r5
 8010f78:	4616      	mov	r6, r2
 8010f7a:	7830      	ldrb	r0, [r6, #0]
 8010f7c:	3201      	adds	r2, #1
 8010f7e:	f7ff ff8e 	bl	8010e9e <__hexdig_fun>
 8010f82:	2800      	cmp	r0, #0
 8010f84:	d1f8      	bne.n	8010f78 <__gethex+0xb0>
 8010f86:	1bad      	subs	r5, r5, r6
 8010f88:	00ad      	lsls	r5, r5, #2
 8010f8a:	e004      	b.n	8010f96 <__gethex+0xce>
 8010f8c:	2400      	movs	r4, #0
 8010f8e:	4625      	mov	r5, r4
 8010f90:	e7e0      	b.n	8010f54 <__gethex+0x8c>
 8010f92:	2d00      	cmp	r5, #0
 8010f94:	d1f7      	bne.n	8010f86 <__gethex+0xbe>
 8010f96:	7833      	ldrb	r3, [r6, #0]
 8010f98:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010f9c:	2b50      	cmp	r3, #80	; 0x50
 8010f9e:	d139      	bne.n	8011014 <__gethex+0x14c>
 8010fa0:	7873      	ldrb	r3, [r6, #1]
 8010fa2:	2b2b      	cmp	r3, #43	; 0x2b
 8010fa4:	d02a      	beq.n	8010ffc <__gethex+0x134>
 8010fa6:	2b2d      	cmp	r3, #45	; 0x2d
 8010fa8:	d02c      	beq.n	8011004 <__gethex+0x13c>
 8010faa:	f04f 0900 	mov.w	r9, #0
 8010fae:	1c71      	adds	r1, r6, #1
 8010fb0:	7808      	ldrb	r0, [r1, #0]
 8010fb2:	f7ff ff74 	bl	8010e9e <__hexdig_fun>
 8010fb6:	1e43      	subs	r3, r0, #1
 8010fb8:	b2db      	uxtb	r3, r3
 8010fba:	2b18      	cmp	r3, #24
 8010fbc:	d82a      	bhi.n	8011014 <__gethex+0x14c>
 8010fbe:	f1a0 0210 	sub.w	r2, r0, #16
 8010fc2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010fc6:	f7ff ff6a 	bl	8010e9e <__hexdig_fun>
 8010fca:	1e43      	subs	r3, r0, #1
 8010fcc:	b2db      	uxtb	r3, r3
 8010fce:	2b18      	cmp	r3, #24
 8010fd0:	d91b      	bls.n	801100a <__gethex+0x142>
 8010fd2:	f1b9 0f00 	cmp.w	r9, #0
 8010fd6:	d000      	beq.n	8010fda <__gethex+0x112>
 8010fd8:	4252      	negs	r2, r2
 8010fda:	4415      	add	r5, r2
 8010fdc:	f8cb 1000 	str.w	r1, [fp]
 8010fe0:	b1d4      	cbz	r4, 8011018 <__gethex+0x150>
 8010fe2:	9b01      	ldr	r3, [sp, #4]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	bf14      	ite	ne
 8010fe8:	2700      	movne	r7, #0
 8010fea:	2706      	moveq	r7, #6
 8010fec:	4638      	mov	r0, r7
 8010fee:	b00b      	add	sp, #44	; 0x2c
 8010ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ff4:	463e      	mov	r6, r7
 8010ff6:	4625      	mov	r5, r4
 8010ff8:	2401      	movs	r4, #1
 8010ffa:	e7cc      	b.n	8010f96 <__gethex+0xce>
 8010ffc:	f04f 0900 	mov.w	r9, #0
 8011000:	1cb1      	adds	r1, r6, #2
 8011002:	e7d5      	b.n	8010fb0 <__gethex+0xe8>
 8011004:	f04f 0901 	mov.w	r9, #1
 8011008:	e7fa      	b.n	8011000 <__gethex+0x138>
 801100a:	230a      	movs	r3, #10
 801100c:	fb03 0202 	mla	r2, r3, r2, r0
 8011010:	3a10      	subs	r2, #16
 8011012:	e7d6      	b.n	8010fc2 <__gethex+0xfa>
 8011014:	4631      	mov	r1, r6
 8011016:	e7e1      	b.n	8010fdc <__gethex+0x114>
 8011018:	4621      	mov	r1, r4
 801101a:	1bf3      	subs	r3, r6, r7
 801101c:	3b01      	subs	r3, #1
 801101e:	2b07      	cmp	r3, #7
 8011020:	dc0a      	bgt.n	8011038 <__gethex+0x170>
 8011022:	9802      	ldr	r0, [sp, #8]
 8011024:	f000 fa86 	bl	8011534 <_Balloc>
 8011028:	4604      	mov	r4, r0
 801102a:	b940      	cbnz	r0, 801103e <__gethex+0x176>
 801102c:	4602      	mov	r2, r0
 801102e:	21de      	movs	r1, #222	; 0xde
 8011030:	4b5b      	ldr	r3, [pc, #364]	; (80111a0 <__gethex+0x2d8>)
 8011032:	485c      	ldr	r0, [pc, #368]	; (80111a4 <__gethex+0x2dc>)
 8011034:	f7ff fde2 	bl	8010bfc <__assert_func>
 8011038:	3101      	adds	r1, #1
 801103a:	105b      	asrs	r3, r3, #1
 801103c:	e7ef      	b.n	801101e <__gethex+0x156>
 801103e:	f04f 0b00 	mov.w	fp, #0
 8011042:	f100 0914 	add.w	r9, r0, #20
 8011046:	f1ca 0301 	rsb	r3, sl, #1
 801104a:	f8cd 9010 	str.w	r9, [sp, #16]
 801104e:	f8cd b004 	str.w	fp, [sp, #4]
 8011052:	9308      	str	r3, [sp, #32]
 8011054:	42b7      	cmp	r7, r6
 8011056:	d33f      	bcc.n	80110d8 <__gethex+0x210>
 8011058:	9f04      	ldr	r7, [sp, #16]
 801105a:	9b01      	ldr	r3, [sp, #4]
 801105c:	f847 3b04 	str.w	r3, [r7], #4
 8011060:	eba7 0709 	sub.w	r7, r7, r9
 8011064:	10bf      	asrs	r7, r7, #2
 8011066:	6127      	str	r7, [r4, #16]
 8011068:	4618      	mov	r0, r3
 801106a:	f000 fb55 	bl	8011718 <__hi0bits>
 801106e:	017f      	lsls	r7, r7, #5
 8011070:	f8d8 6000 	ldr.w	r6, [r8]
 8011074:	1a3f      	subs	r7, r7, r0
 8011076:	42b7      	cmp	r7, r6
 8011078:	dd62      	ble.n	8011140 <__gethex+0x278>
 801107a:	1bbf      	subs	r7, r7, r6
 801107c:	4639      	mov	r1, r7
 801107e:	4620      	mov	r0, r4
 8011080:	f000 feef 	bl	8011e62 <__any_on>
 8011084:	4682      	mov	sl, r0
 8011086:	b1a8      	cbz	r0, 80110b4 <__gethex+0x1ec>
 8011088:	f04f 0a01 	mov.w	sl, #1
 801108c:	1e7b      	subs	r3, r7, #1
 801108e:	1159      	asrs	r1, r3, #5
 8011090:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011094:	f003 021f 	and.w	r2, r3, #31
 8011098:	fa0a f202 	lsl.w	r2, sl, r2
 801109c:	420a      	tst	r2, r1
 801109e:	d009      	beq.n	80110b4 <__gethex+0x1ec>
 80110a0:	4553      	cmp	r3, sl
 80110a2:	dd05      	ble.n	80110b0 <__gethex+0x1e8>
 80110a4:	4620      	mov	r0, r4
 80110a6:	1eb9      	subs	r1, r7, #2
 80110a8:	f000 fedb 	bl	8011e62 <__any_on>
 80110ac:	2800      	cmp	r0, #0
 80110ae:	d144      	bne.n	801113a <__gethex+0x272>
 80110b0:	f04f 0a02 	mov.w	sl, #2
 80110b4:	4639      	mov	r1, r7
 80110b6:	4620      	mov	r0, r4
 80110b8:	f7ff fe9e 	bl	8010df8 <rshift>
 80110bc:	443d      	add	r5, r7
 80110be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80110c2:	42ab      	cmp	r3, r5
 80110c4:	da4a      	bge.n	801115c <__gethex+0x294>
 80110c6:	4621      	mov	r1, r4
 80110c8:	9802      	ldr	r0, [sp, #8]
 80110ca:	f000 fa73 	bl	80115b4 <_Bfree>
 80110ce:	2300      	movs	r3, #0
 80110d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80110d2:	27a3      	movs	r7, #163	; 0xa3
 80110d4:	6013      	str	r3, [r2, #0]
 80110d6:	e789      	b.n	8010fec <__gethex+0x124>
 80110d8:	1e73      	subs	r3, r6, #1
 80110da:	9a06      	ldr	r2, [sp, #24]
 80110dc:	9307      	str	r3, [sp, #28]
 80110de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80110e2:	4293      	cmp	r3, r2
 80110e4:	d019      	beq.n	801111a <__gethex+0x252>
 80110e6:	f1bb 0f20 	cmp.w	fp, #32
 80110ea:	d107      	bne.n	80110fc <__gethex+0x234>
 80110ec:	9b04      	ldr	r3, [sp, #16]
 80110ee:	9a01      	ldr	r2, [sp, #4]
 80110f0:	f843 2b04 	str.w	r2, [r3], #4
 80110f4:	9304      	str	r3, [sp, #16]
 80110f6:	2300      	movs	r3, #0
 80110f8:	469b      	mov	fp, r3
 80110fa:	9301      	str	r3, [sp, #4]
 80110fc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011100:	f7ff fecd 	bl	8010e9e <__hexdig_fun>
 8011104:	9b01      	ldr	r3, [sp, #4]
 8011106:	f000 000f 	and.w	r0, r0, #15
 801110a:	fa00 f00b 	lsl.w	r0, r0, fp
 801110e:	4303      	orrs	r3, r0
 8011110:	9301      	str	r3, [sp, #4]
 8011112:	f10b 0b04 	add.w	fp, fp, #4
 8011116:	9b07      	ldr	r3, [sp, #28]
 8011118:	e00d      	b.n	8011136 <__gethex+0x26e>
 801111a:	9a08      	ldr	r2, [sp, #32]
 801111c:	1e73      	subs	r3, r6, #1
 801111e:	4413      	add	r3, r2
 8011120:	42bb      	cmp	r3, r7
 8011122:	d3e0      	bcc.n	80110e6 <__gethex+0x21e>
 8011124:	4618      	mov	r0, r3
 8011126:	4652      	mov	r2, sl
 8011128:	9903      	ldr	r1, [sp, #12]
 801112a:	9309      	str	r3, [sp, #36]	; 0x24
 801112c:	f001 fb7c 	bl	8012828 <strncmp>
 8011130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011132:	2800      	cmp	r0, #0
 8011134:	d1d7      	bne.n	80110e6 <__gethex+0x21e>
 8011136:	461e      	mov	r6, r3
 8011138:	e78c      	b.n	8011054 <__gethex+0x18c>
 801113a:	f04f 0a03 	mov.w	sl, #3
 801113e:	e7b9      	b.n	80110b4 <__gethex+0x1ec>
 8011140:	da09      	bge.n	8011156 <__gethex+0x28e>
 8011142:	1bf7      	subs	r7, r6, r7
 8011144:	4621      	mov	r1, r4
 8011146:	463a      	mov	r2, r7
 8011148:	9802      	ldr	r0, [sp, #8]
 801114a:	f000 fc4b 	bl	80119e4 <__lshift>
 801114e:	4604      	mov	r4, r0
 8011150:	1bed      	subs	r5, r5, r7
 8011152:	f100 0914 	add.w	r9, r0, #20
 8011156:	f04f 0a00 	mov.w	sl, #0
 801115a:	e7b0      	b.n	80110be <__gethex+0x1f6>
 801115c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011160:	42a8      	cmp	r0, r5
 8011162:	dd72      	ble.n	801124a <__gethex+0x382>
 8011164:	1b45      	subs	r5, r0, r5
 8011166:	42ae      	cmp	r6, r5
 8011168:	dc35      	bgt.n	80111d6 <__gethex+0x30e>
 801116a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801116e:	2b02      	cmp	r3, #2
 8011170:	d029      	beq.n	80111c6 <__gethex+0x2fe>
 8011172:	2b03      	cmp	r3, #3
 8011174:	d02b      	beq.n	80111ce <__gethex+0x306>
 8011176:	2b01      	cmp	r3, #1
 8011178:	d11c      	bne.n	80111b4 <__gethex+0x2ec>
 801117a:	42ae      	cmp	r6, r5
 801117c:	d11a      	bne.n	80111b4 <__gethex+0x2ec>
 801117e:	2e01      	cmp	r6, #1
 8011180:	d112      	bne.n	80111a8 <__gethex+0x2e0>
 8011182:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011186:	9a05      	ldr	r2, [sp, #20]
 8011188:	2762      	movs	r7, #98	; 0x62
 801118a:	6013      	str	r3, [r2, #0]
 801118c:	2301      	movs	r3, #1
 801118e:	6123      	str	r3, [r4, #16]
 8011190:	f8c9 3000 	str.w	r3, [r9]
 8011194:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011196:	601c      	str	r4, [r3, #0]
 8011198:	e728      	b.n	8010fec <__gethex+0x124>
 801119a:	bf00      	nop
 801119c:	080139a0 	.word	0x080139a0
 80111a0:	08013929 	.word	0x08013929
 80111a4:	0801393a 	.word	0x0801393a
 80111a8:	4620      	mov	r0, r4
 80111aa:	1e71      	subs	r1, r6, #1
 80111ac:	f000 fe59 	bl	8011e62 <__any_on>
 80111b0:	2800      	cmp	r0, #0
 80111b2:	d1e6      	bne.n	8011182 <__gethex+0x2ba>
 80111b4:	4621      	mov	r1, r4
 80111b6:	9802      	ldr	r0, [sp, #8]
 80111b8:	f000 f9fc 	bl	80115b4 <_Bfree>
 80111bc:	2300      	movs	r3, #0
 80111be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80111c0:	2750      	movs	r7, #80	; 0x50
 80111c2:	6013      	str	r3, [r2, #0]
 80111c4:	e712      	b.n	8010fec <__gethex+0x124>
 80111c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d1f3      	bne.n	80111b4 <__gethex+0x2ec>
 80111cc:	e7d9      	b.n	8011182 <__gethex+0x2ba>
 80111ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d1d6      	bne.n	8011182 <__gethex+0x2ba>
 80111d4:	e7ee      	b.n	80111b4 <__gethex+0x2ec>
 80111d6:	1e6f      	subs	r7, r5, #1
 80111d8:	f1ba 0f00 	cmp.w	sl, #0
 80111dc:	d132      	bne.n	8011244 <__gethex+0x37c>
 80111de:	b127      	cbz	r7, 80111ea <__gethex+0x322>
 80111e0:	4639      	mov	r1, r7
 80111e2:	4620      	mov	r0, r4
 80111e4:	f000 fe3d 	bl	8011e62 <__any_on>
 80111e8:	4682      	mov	sl, r0
 80111ea:	2101      	movs	r1, #1
 80111ec:	117b      	asrs	r3, r7, #5
 80111ee:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80111f2:	f007 071f 	and.w	r7, r7, #31
 80111f6:	fa01 f707 	lsl.w	r7, r1, r7
 80111fa:	421f      	tst	r7, r3
 80111fc:	f04f 0702 	mov.w	r7, #2
 8011200:	4629      	mov	r1, r5
 8011202:	4620      	mov	r0, r4
 8011204:	bf18      	it	ne
 8011206:	f04a 0a02 	orrne.w	sl, sl, #2
 801120a:	1b76      	subs	r6, r6, r5
 801120c:	f7ff fdf4 	bl	8010df8 <rshift>
 8011210:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011214:	f1ba 0f00 	cmp.w	sl, #0
 8011218:	d048      	beq.n	80112ac <__gethex+0x3e4>
 801121a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801121e:	2b02      	cmp	r3, #2
 8011220:	d015      	beq.n	801124e <__gethex+0x386>
 8011222:	2b03      	cmp	r3, #3
 8011224:	d017      	beq.n	8011256 <__gethex+0x38e>
 8011226:	2b01      	cmp	r3, #1
 8011228:	d109      	bne.n	801123e <__gethex+0x376>
 801122a:	f01a 0f02 	tst.w	sl, #2
 801122e:	d006      	beq.n	801123e <__gethex+0x376>
 8011230:	f8d9 0000 	ldr.w	r0, [r9]
 8011234:	ea4a 0a00 	orr.w	sl, sl, r0
 8011238:	f01a 0f01 	tst.w	sl, #1
 801123c:	d10e      	bne.n	801125c <__gethex+0x394>
 801123e:	f047 0710 	orr.w	r7, r7, #16
 8011242:	e033      	b.n	80112ac <__gethex+0x3e4>
 8011244:	f04f 0a01 	mov.w	sl, #1
 8011248:	e7cf      	b.n	80111ea <__gethex+0x322>
 801124a:	2701      	movs	r7, #1
 801124c:	e7e2      	b.n	8011214 <__gethex+0x34c>
 801124e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011250:	f1c3 0301 	rsb	r3, r3, #1
 8011254:	9315      	str	r3, [sp, #84]	; 0x54
 8011256:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011258:	2b00      	cmp	r3, #0
 801125a:	d0f0      	beq.n	801123e <__gethex+0x376>
 801125c:	f04f 0c00 	mov.w	ip, #0
 8011260:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011264:	f104 0314 	add.w	r3, r4, #20
 8011268:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801126c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011270:	4618      	mov	r0, r3
 8011272:	f853 2b04 	ldr.w	r2, [r3], #4
 8011276:	f1b2 3fff 	cmp.w	r2, #4294967295
 801127a:	d01c      	beq.n	80112b6 <__gethex+0x3ee>
 801127c:	3201      	adds	r2, #1
 801127e:	6002      	str	r2, [r0, #0]
 8011280:	2f02      	cmp	r7, #2
 8011282:	f104 0314 	add.w	r3, r4, #20
 8011286:	d13d      	bne.n	8011304 <__gethex+0x43c>
 8011288:	f8d8 2000 	ldr.w	r2, [r8]
 801128c:	3a01      	subs	r2, #1
 801128e:	42b2      	cmp	r2, r6
 8011290:	d10a      	bne.n	80112a8 <__gethex+0x3e0>
 8011292:	2201      	movs	r2, #1
 8011294:	1171      	asrs	r1, r6, #5
 8011296:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801129a:	f006 061f 	and.w	r6, r6, #31
 801129e:	fa02 f606 	lsl.w	r6, r2, r6
 80112a2:	421e      	tst	r6, r3
 80112a4:	bf18      	it	ne
 80112a6:	4617      	movne	r7, r2
 80112a8:	f047 0720 	orr.w	r7, r7, #32
 80112ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80112ae:	601c      	str	r4, [r3, #0]
 80112b0:	9b05      	ldr	r3, [sp, #20]
 80112b2:	601d      	str	r5, [r3, #0]
 80112b4:	e69a      	b.n	8010fec <__gethex+0x124>
 80112b6:	4299      	cmp	r1, r3
 80112b8:	f843 cc04 	str.w	ip, [r3, #-4]
 80112bc:	d8d8      	bhi.n	8011270 <__gethex+0x3a8>
 80112be:	68a3      	ldr	r3, [r4, #8]
 80112c0:	459b      	cmp	fp, r3
 80112c2:	db17      	blt.n	80112f4 <__gethex+0x42c>
 80112c4:	6861      	ldr	r1, [r4, #4]
 80112c6:	9802      	ldr	r0, [sp, #8]
 80112c8:	3101      	adds	r1, #1
 80112ca:	f000 f933 	bl	8011534 <_Balloc>
 80112ce:	4681      	mov	r9, r0
 80112d0:	b918      	cbnz	r0, 80112da <__gethex+0x412>
 80112d2:	4602      	mov	r2, r0
 80112d4:	2184      	movs	r1, #132	; 0x84
 80112d6:	4b19      	ldr	r3, [pc, #100]	; (801133c <__gethex+0x474>)
 80112d8:	e6ab      	b.n	8011032 <__gethex+0x16a>
 80112da:	6922      	ldr	r2, [r4, #16]
 80112dc:	f104 010c 	add.w	r1, r4, #12
 80112e0:	3202      	adds	r2, #2
 80112e2:	0092      	lsls	r2, r2, #2
 80112e4:	300c      	adds	r0, #12
 80112e6:	f7fe fb84 	bl	800f9f2 <memcpy>
 80112ea:	4621      	mov	r1, r4
 80112ec:	9802      	ldr	r0, [sp, #8]
 80112ee:	f000 f961 	bl	80115b4 <_Bfree>
 80112f2:	464c      	mov	r4, r9
 80112f4:	6923      	ldr	r3, [r4, #16]
 80112f6:	1c5a      	adds	r2, r3, #1
 80112f8:	6122      	str	r2, [r4, #16]
 80112fa:	2201      	movs	r2, #1
 80112fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011300:	615a      	str	r2, [r3, #20]
 8011302:	e7bd      	b.n	8011280 <__gethex+0x3b8>
 8011304:	6922      	ldr	r2, [r4, #16]
 8011306:	455a      	cmp	r2, fp
 8011308:	dd0b      	ble.n	8011322 <__gethex+0x45a>
 801130a:	2101      	movs	r1, #1
 801130c:	4620      	mov	r0, r4
 801130e:	f7ff fd73 	bl	8010df8 <rshift>
 8011312:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011316:	3501      	adds	r5, #1
 8011318:	42ab      	cmp	r3, r5
 801131a:	f6ff aed4 	blt.w	80110c6 <__gethex+0x1fe>
 801131e:	2701      	movs	r7, #1
 8011320:	e7c2      	b.n	80112a8 <__gethex+0x3e0>
 8011322:	f016 061f 	ands.w	r6, r6, #31
 8011326:	d0fa      	beq.n	801131e <__gethex+0x456>
 8011328:	4453      	add	r3, sl
 801132a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801132e:	f000 f9f3 	bl	8011718 <__hi0bits>
 8011332:	f1c6 0620 	rsb	r6, r6, #32
 8011336:	42b0      	cmp	r0, r6
 8011338:	dbe7      	blt.n	801130a <__gethex+0x442>
 801133a:	e7f0      	b.n	801131e <__gethex+0x456>
 801133c:	08013929 	.word	0x08013929

08011340 <L_shift>:
 8011340:	f1c2 0208 	rsb	r2, r2, #8
 8011344:	0092      	lsls	r2, r2, #2
 8011346:	b570      	push	{r4, r5, r6, lr}
 8011348:	f1c2 0620 	rsb	r6, r2, #32
 801134c:	6843      	ldr	r3, [r0, #4]
 801134e:	6804      	ldr	r4, [r0, #0]
 8011350:	fa03 f506 	lsl.w	r5, r3, r6
 8011354:	432c      	orrs	r4, r5
 8011356:	40d3      	lsrs	r3, r2
 8011358:	6004      	str	r4, [r0, #0]
 801135a:	f840 3f04 	str.w	r3, [r0, #4]!
 801135e:	4288      	cmp	r0, r1
 8011360:	d3f4      	bcc.n	801134c <L_shift+0xc>
 8011362:	bd70      	pop	{r4, r5, r6, pc}

08011364 <__match>:
 8011364:	b530      	push	{r4, r5, lr}
 8011366:	6803      	ldr	r3, [r0, #0]
 8011368:	3301      	adds	r3, #1
 801136a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801136e:	b914      	cbnz	r4, 8011376 <__match+0x12>
 8011370:	6003      	str	r3, [r0, #0]
 8011372:	2001      	movs	r0, #1
 8011374:	bd30      	pop	{r4, r5, pc}
 8011376:	f813 2b01 	ldrb.w	r2, [r3], #1
 801137a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801137e:	2d19      	cmp	r5, #25
 8011380:	bf98      	it	ls
 8011382:	3220      	addls	r2, #32
 8011384:	42a2      	cmp	r2, r4
 8011386:	d0f0      	beq.n	801136a <__match+0x6>
 8011388:	2000      	movs	r0, #0
 801138a:	e7f3      	b.n	8011374 <__match+0x10>

0801138c <__hexnan>:
 801138c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011390:	2500      	movs	r5, #0
 8011392:	680b      	ldr	r3, [r1, #0]
 8011394:	4682      	mov	sl, r0
 8011396:	115e      	asrs	r6, r3, #5
 8011398:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801139c:	f013 031f 	ands.w	r3, r3, #31
 80113a0:	bf18      	it	ne
 80113a2:	3604      	addne	r6, #4
 80113a4:	1f37      	subs	r7, r6, #4
 80113a6:	46b9      	mov	r9, r7
 80113a8:	463c      	mov	r4, r7
 80113aa:	46ab      	mov	fp, r5
 80113ac:	b087      	sub	sp, #28
 80113ae:	4690      	mov	r8, r2
 80113b0:	6802      	ldr	r2, [r0, #0]
 80113b2:	9301      	str	r3, [sp, #4]
 80113b4:	f846 5c04 	str.w	r5, [r6, #-4]
 80113b8:	9502      	str	r5, [sp, #8]
 80113ba:	7851      	ldrb	r1, [r2, #1]
 80113bc:	1c53      	adds	r3, r2, #1
 80113be:	9303      	str	r3, [sp, #12]
 80113c0:	b341      	cbz	r1, 8011414 <__hexnan+0x88>
 80113c2:	4608      	mov	r0, r1
 80113c4:	9205      	str	r2, [sp, #20]
 80113c6:	9104      	str	r1, [sp, #16]
 80113c8:	f7ff fd69 	bl	8010e9e <__hexdig_fun>
 80113cc:	2800      	cmp	r0, #0
 80113ce:	d14f      	bne.n	8011470 <__hexnan+0xe4>
 80113d0:	9904      	ldr	r1, [sp, #16]
 80113d2:	9a05      	ldr	r2, [sp, #20]
 80113d4:	2920      	cmp	r1, #32
 80113d6:	d818      	bhi.n	801140a <__hexnan+0x7e>
 80113d8:	9b02      	ldr	r3, [sp, #8]
 80113da:	459b      	cmp	fp, r3
 80113dc:	dd13      	ble.n	8011406 <__hexnan+0x7a>
 80113de:	454c      	cmp	r4, r9
 80113e0:	d206      	bcs.n	80113f0 <__hexnan+0x64>
 80113e2:	2d07      	cmp	r5, #7
 80113e4:	dc04      	bgt.n	80113f0 <__hexnan+0x64>
 80113e6:	462a      	mov	r2, r5
 80113e8:	4649      	mov	r1, r9
 80113ea:	4620      	mov	r0, r4
 80113ec:	f7ff ffa8 	bl	8011340 <L_shift>
 80113f0:	4544      	cmp	r4, r8
 80113f2:	d950      	bls.n	8011496 <__hexnan+0x10a>
 80113f4:	2300      	movs	r3, #0
 80113f6:	f1a4 0904 	sub.w	r9, r4, #4
 80113fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80113fe:	461d      	mov	r5, r3
 8011400:	464c      	mov	r4, r9
 8011402:	f8cd b008 	str.w	fp, [sp, #8]
 8011406:	9a03      	ldr	r2, [sp, #12]
 8011408:	e7d7      	b.n	80113ba <__hexnan+0x2e>
 801140a:	2929      	cmp	r1, #41	; 0x29
 801140c:	d156      	bne.n	80114bc <__hexnan+0x130>
 801140e:	3202      	adds	r2, #2
 8011410:	f8ca 2000 	str.w	r2, [sl]
 8011414:	f1bb 0f00 	cmp.w	fp, #0
 8011418:	d050      	beq.n	80114bc <__hexnan+0x130>
 801141a:	454c      	cmp	r4, r9
 801141c:	d206      	bcs.n	801142c <__hexnan+0xa0>
 801141e:	2d07      	cmp	r5, #7
 8011420:	dc04      	bgt.n	801142c <__hexnan+0xa0>
 8011422:	462a      	mov	r2, r5
 8011424:	4649      	mov	r1, r9
 8011426:	4620      	mov	r0, r4
 8011428:	f7ff ff8a 	bl	8011340 <L_shift>
 801142c:	4544      	cmp	r4, r8
 801142e:	d934      	bls.n	801149a <__hexnan+0x10e>
 8011430:	4623      	mov	r3, r4
 8011432:	f1a8 0204 	sub.w	r2, r8, #4
 8011436:	f853 1b04 	ldr.w	r1, [r3], #4
 801143a:	429f      	cmp	r7, r3
 801143c:	f842 1f04 	str.w	r1, [r2, #4]!
 8011440:	d2f9      	bcs.n	8011436 <__hexnan+0xaa>
 8011442:	1b3b      	subs	r3, r7, r4
 8011444:	f023 0303 	bic.w	r3, r3, #3
 8011448:	3304      	adds	r3, #4
 801144a:	3401      	adds	r4, #1
 801144c:	3e03      	subs	r6, #3
 801144e:	42b4      	cmp	r4, r6
 8011450:	bf88      	it	hi
 8011452:	2304      	movhi	r3, #4
 8011454:	2200      	movs	r2, #0
 8011456:	4443      	add	r3, r8
 8011458:	f843 2b04 	str.w	r2, [r3], #4
 801145c:	429f      	cmp	r7, r3
 801145e:	d2fb      	bcs.n	8011458 <__hexnan+0xcc>
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	b91b      	cbnz	r3, 801146c <__hexnan+0xe0>
 8011464:	4547      	cmp	r7, r8
 8011466:	d127      	bne.n	80114b8 <__hexnan+0x12c>
 8011468:	2301      	movs	r3, #1
 801146a:	603b      	str	r3, [r7, #0]
 801146c:	2005      	movs	r0, #5
 801146e:	e026      	b.n	80114be <__hexnan+0x132>
 8011470:	3501      	adds	r5, #1
 8011472:	2d08      	cmp	r5, #8
 8011474:	f10b 0b01 	add.w	fp, fp, #1
 8011478:	dd06      	ble.n	8011488 <__hexnan+0xfc>
 801147a:	4544      	cmp	r4, r8
 801147c:	d9c3      	bls.n	8011406 <__hexnan+0x7a>
 801147e:	2300      	movs	r3, #0
 8011480:	2501      	movs	r5, #1
 8011482:	f844 3c04 	str.w	r3, [r4, #-4]
 8011486:	3c04      	subs	r4, #4
 8011488:	6822      	ldr	r2, [r4, #0]
 801148a:	f000 000f 	and.w	r0, r0, #15
 801148e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011492:	6022      	str	r2, [r4, #0]
 8011494:	e7b7      	b.n	8011406 <__hexnan+0x7a>
 8011496:	2508      	movs	r5, #8
 8011498:	e7b5      	b.n	8011406 <__hexnan+0x7a>
 801149a:	9b01      	ldr	r3, [sp, #4]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d0df      	beq.n	8011460 <__hexnan+0xd4>
 80114a0:	f04f 32ff 	mov.w	r2, #4294967295
 80114a4:	f1c3 0320 	rsb	r3, r3, #32
 80114a8:	fa22 f303 	lsr.w	r3, r2, r3
 80114ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80114b0:	401a      	ands	r2, r3
 80114b2:	f846 2c04 	str.w	r2, [r6, #-4]
 80114b6:	e7d3      	b.n	8011460 <__hexnan+0xd4>
 80114b8:	3f04      	subs	r7, #4
 80114ba:	e7d1      	b.n	8011460 <__hexnan+0xd4>
 80114bc:	2004      	movs	r0, #4
 80114be:	b007      	add	sp, #28
 80114c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080114c4 <_lseek_r>:
 80114c4:	b538      	push	{r3, r4, r5, lr}
 80114c6:	4604      	mov	r4, r0
 80114c8:	4608      	mov	r0, r1
 80114ca:	4611      	mov	r1, r2
 80114cc:	2200      	movs	r2, #0
 80114ce:	4d05      	ldr	r5, [pc, #20]	; (80114e4 <_lseek_r+0x20>)
 80114d0:	602a      	str	r2, [r5, #0]
 80114d2:	461a      	mov	r2, r3
 80114d4:	f7f2 fdd8 	bl	8004088 <_lseek>
 80114d8:	1c43      	adds	r3, r0, #1
 80114da:	d102      	bne.n	80114e2 <_lseek_r+0x1e>
 80114dc:	682b      	ldr	r3, [r5, #0]
 80114de:	b103      	cbz	r3, 80114e2 <_lseek_r+0x1e>
 80114e0:	6023      	str	r3, [r4, #0]
 80114e2:	bd38      	pop	{r3, r4, r5, pc}
 80114e4:	20009a20 	.word	0x20009a20

080114e8 <malloc>:
 80114e8:	4b02      	ldr	r3, [pc, #8]	; (80114f4 <malloc+0xc>)
 80114ea:	4601      	mov	r1, r0
 80114ec:	6818      	ldr	r0, [r3, #0]
 80114ee:	f7fe bab7 	b.w	800fa60 <_malloc_r>
 80114f2:	bf00      	nop
 80114f4:	2000009c 	.word	0x2000009c

080114f8 <__ascii_mbtowc>:
 80114f8:	b082      	sub	sp, #8
 80114fa:	b901      	cbnz	r1, 80114fe <__ascii_mbtowc+0x6>
 80114fc:	a901      	add	r1, sp, #4
 80114fe:	b142      	cbz	r2, 8011512 <__ascii_mbtowc+0x1a>
 8011500:	b14b      	cbz	r3, 8011516 <__ascii_mbtowc+0x1e>
 8011502:	7813      	ldrb	r3, [r2, #0]
 8011504:	600b      	str	r3, [r1, #0]
 8011506:	7812      	ldrb	r2, [r2, #0]
 8011508:	1e10      	subs	r0, r2, #0
 801150a:	bf18      	it	ne
 801150c:	2001      	movne	r0, #1
 801150e:	b002      	add	sp, #8
 8011510:	4770      	bx	lr
 8011512:	4610      	mov	r0, r2
 8011514:	e7fb      	b.n	801150e <__ascii_mbtowc+0x16>
 8011516:	f06f 0001 	mvn.w	r0, #1
 801151a:	e7f8      	b.n	801150e <__ascii_mbtowc+0x16>

0801151c <__malloc_lock>:
 801151c:	4801      	ldr	r0, [pc, #4]	; (8011524 <__malloc_lock+0x8>)
 801151e:	f7fe ba66 	b.w	800f9ee <__retarget_lock_acquire_recursive>
 8011522:	bf00      	nop
 8011524:	20009a14 	.word	0x20009a14

08011528 <__malloc_unlock>:
 8011528:	4801      	ldr	r0, [pc, #4]	; (8011530 <__malloc_unlock+0x8>)
 801152a:	f7fe ba61 	b.w	800f9f0 <__retarget_lock_release_recursive>
 801152e:	bf00      	nop
 8011530:	20009a14 	.word	0x20009a14

08011534 <_Balloc>:
 8011534:	b570      	push	{r4, r5, r6, lr}
 8011536:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011538:	4604      	mov	r4, r0
 801153a:	460d      	mov	r5, r1
 801153c:	b976      	cbnz	r6, 801155c <_Balloc+0x28>
 801153e:	2010      	movs	r0, #16
 8011540:	f7ff ffd2 	bl	80114e8 <malloc>
 8011544:	4602      	mov	r2, r0
 8011546:	6260      	str	r0, [r4, #36]	; 0x24
 8011548:	b920      	cbnz	r0, 8011554 <_Balloc+0x20>
 801154a:	2166      	movs	r1, #102	; 0x66
 801154c:	4b17      	ldr	r3, [pc, #92]	; (80115ac <_Balloc+0x78>)
 801154e:	4818      	ldr	r0, [pc, #96]	; (80115b0 <_Balloc+0x7c>)
 8011550:	f7ff fb54 	bl	8010bfc <__assert_func>
 8011554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011558:	6006      	str	r6, [r0, #0]
 801155a:	60c6      	str	r6, [r0, #12]
 801155c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801155e:	68f3      	ldr	r3, [r6, #12]
 8011560:	b183      	cbz	r3, 8011584 <_Balloc+0x50>
 8011562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011564:	68db      	ldr	r3, [r3, #12]
 8011566:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801156a:	b9b8      	cbnz	r0, 801159c <_Balloc+0x68>
 801156c:	2101      	movs	r1, #1
 801156e:	fa01 f605 	lsl.w	r6, r1, r5
 8011572:	1d72      	adds	r2, r6, #5
 8011574:	4620      	mov	r0, r4
 8011576:	0092      	lsls	r2, r2, #2
 8011578:	f000 fc94 	bl	8011ea4 <_calloc_r>
 801157c:	b160      	cbz	r0, 8011598 <_Balloc+0x64>
 801157e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011582:	e00e      	b.n	80115a2 <_Balloc+0x6e>
 8011584:	2221      	movs	r2, #33	; 0x21
 8011586:	2104      	movs	r1, #4
 8011588:	4620      	mov	r0, r4
 801158a:	f000 fc8b 	bl	8011ea4 <_calloc_r>
 801158e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011590:	60f0      	str	r0, [r6, #12]
 8011592:	68db      	ldr	r3, [r3, #12]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d1e4      	bne.n	8011562 <_Balloc+0x2e>
 8011598:	2000      	movs	r0, #0
 801159a:	bd70      	pop	{r4, r5, r6, pc}
 801159c:	6802      	ldr	r2, [r0, #0]
 801159e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80115a2:	2300      	movs	r3, #0
 80115a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80115a8:	e7f7      	b.n	801159a <_Balloc+0x66>
 80115aa:	bf00      	nop
 80115ac:	08013778 	.word	0x08013778
 80115b0:	080139b4 	.word	0x080139b4

080115b4 <_Bfree>:
 80115b4:	b570      	push	{r4, r5, r6, lr}
 80115b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80115b8:	4605      	mov	r5, r0
 80115ba:	460c      	mov	r4, r1
 80115bc:	b976      	cbnz	r6, 80115dc <_Bfree+0x28>
 80115be:	2010      	movs	r0, #16
 80115c0:	f7ff ff92 	bl	80114e8 <malloc>
 80115c4:	4602      	mov	r2, r0
 80115c6:	6268      	str	r0, [r5, #36]	; 0x24
 80115c8:	b920      	cbnz	r0, 80115d4 <_Bfree+0x20>
 80115ca:	218a      	movs	r1, #138	; 0x8a
 80115cc:	4b08      	ldr	r3, [pc, #32]	; (80115f0 <_Bfree+0x3c>)
 80115ce:	4809      	ldr	r0, [pc, #36]	; (80115f4 <_Bfree+0x40>)
 80115d0:	f7ff fb14 	bl	8010bfc <__assert_func>
 80115d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80115d8:	6006      	str	r6, [r0, #0]
 80115da:	60c6      	str	r6, [r0, #12]
 80115dc:	b13c      	cbz	r4, 80115ee <_Bfree+0x3a>
 80115de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80115e0:	6862      	ldr	r2, [r4, #4]
 80115e2:	68db      	ldr	r3, [r3, #12]
 80115e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80115e8:	6021      	str	r1, [r4, #0]
 80115ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80115ee:	bd70      	pop	{r4, r5, r6, pc}
 80115f0:	08013778 	.word	0x08013778
 80115f4:	080139b4 	.word	0x080139b4

080115f8 <__multadd>:
 80115f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115fc:	4607      	mov	r7, r0
 80115fe:	460c      	mov	r4, r1
 8011600:	461e      	mov	r6, r3
 8011602:	2000      	movs	r0, #0
 8011604:	690d      	ldr	r5, [r1, #16]
 8011606:	f101 0c14 	add.w	ip, r1, #20
 801160a:	f8dc 3000 	ldr.w	r3, [ip]
 801160e:	3001      	adds	r0, #1
 8011610:	b299      	uxth	r1, r3
 8011612:	fb02 6101 	mla	r1, r2, r1, r6
 8011616:	0c1e      	lsrs	r6, r3, #16
 8011618:	0c0b      	lsrs	r3, r1, #16
 801161a:	fb02 3306 	mla	r3, r2, r6, r3
 801161e:	b289      	uxth	r1, r1
 8011620:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011624:	4285      	cmp	r5, r0
 8011626:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801162a:	f84c 1b04 	str.w	r1, [ip], #4
 801162e:	dcec      	bgt.n	801160a <__multadd+0x12>
 8011630:	b30e      	cbz	r6, 8011676 <__multadd+0x7e>
 8011632:	68a3      	ldr	r3, [r4, #8]
 8011634:	42ab      	cmp	r3, r5
 8011636:	dc19      	bgt.n	801166c <__multadd+0x74>
 8011638:	6861      	ldr	r1, [r4, #4]
 801163a:	4638      	mov	r0, r7
 801163c:	3101      	adds	r1, #1
 801163e:	f7ff ff79 	bl	8011534 <_Balloc>
 8011642:	4680      	mov	r8, r0
 8011644:	b928      	cbnz	r0, 8011652 <__multadd+0x5a>
 8011646:	4602      	mov	r2, r0
 8011648:	21b5      	movs	r1, #181	; 0xb5
 801164a:	4b0c      	ldr	r3, [pc, #48]	; (801167c <__multadd+0x84>)
 801164c:	480c      	ldr	r0, [pc, #48]	; (8011680 <__multadd+0x88>)
 801164e:	f7ff fad5 	bl	8010bfc <__assert_func>
 8011652:	6922      	ldr	r2, [r4, #16]
 8011654:	f104 010c 	add.w	r1, r4, #12
 8011658:	3202      	adds	r2, #2
 801165a:	0092      	lsls	r2, r2, #2
 801165c:	300c      	adds	r0, #12
 801165e:	f7fe f9c8 	bl	800f9f2 <memcpy>
 8011662:	4621      	mov	r1, r4
 8011664:	4638      	mov	r0, r7
 8011666:	f7ff ffa5 	bl	80115b4 <_Bfree>
 801166a:	4644      	mov	r4, r8
 801166c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011670:	3501      	adds	r5, #1
 8011672:	615e      	str	r6, [r3, #20]
 8011674:	6125      	str	r5, [r4, #16]
 8011676:	4620      	mov	r0, r4
 8011678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801167c:	08013929 	.word	0x08013929
 8011680:	080139b4 	.word	0x080139b4

08011684 <__s2b>:
 8011684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011688:	4615      	mov	r5, r2
 801168a:	2209      	movs	r2, #9
 801168c:	461f      	mov	r7, r3
 801168e:	3308      	adds	r3, #8
 8011690:	460c      	mov	r4, r1
 8011692:	fb93 f3f2 	sdiv	r3, r3, r2
 8011696:	4606      	mov	r6, r0
 8011698:	2201      	movs	r2, #1
 801169a:	2100      	movs	r1, #0
 801169c:	429a      	cmp	r2, r3
 801169e:	db09      	blt.n	80116b4 <__s2b+0x30>
 80116a0:	4630      	mov	r0, r6
 80116a2:	f7ff ff47 	bl	8011534 <_Balloc>
 80116a6:	b940      	cbnz	r0, 80116ba <__s2b+0x36>
 80116a8:	4602      	mov	r2, r0
 80116aa:	21ce      	movs	r1, #206	; 0xce
 80116ac:	4b18      	ldr	r3, [pc, #96]	; (8011710 <__s2b+0x8c>)
 80116ae:	4819      	ldr	r0, [pc, #100]	; (8011714 <__s2b+0x90>)
 80116b0:	f7ff faa4 	bl	8010bfc <__assert_func>
 80116b4:	0052      	lsls	r2, r2, #1
 80116b6:	3101      	adds	r1, #1
 80116b8:	e7f0      	b.n	801169c <__s2b+0x18>
 80116ba:	9b08      	ldr	r3, [sp, #32]
 80116bc:	2d09      	cmp	r5, #9
 80116be:	6143      	str	r3, [r0, #20]
 80116c0:	f04f 0301 	mov.w	r3, #1
 80116c4:	6103      	str	r3, [r0, #16]
 80116c6:	dd16      	ble.n	80116f6 <__s2b+0x72>
 80116c8:	f104 0909 	add.w	r9, r4, #9
 80116cc:	46c8      	mov	r8, r9
 80116ce:	442c      	add	r4, r5
 80116d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80116d4:	4601      	mov	r1, r0
 80116d6:	220a      	movs	r2, #10
 80116d8:	4630      	mov	r0, r6
 80116da:	3b30      	subs	r3, #48	; 0x30
 80116dc:	f7ff ff8c 	bl	80115f8 <__multadd>
 80116e0:	45a0      	cmp	r8, r4
 80116e2:	d1f5      	bne.n	80116d0 <__s2b+0x4c>
 80116e4:	f1a5 0408 	sub.w	r4, r5, #8
 80116e8:	444c      	add	r4, r9
 80116ea:	1b2d      	subs	r5, r5, r4
 80116ec:	1963      	adds	r3, r4, r5
 80116ee:	42bb      	cmp	r3, r7
 80116f0:	db04      	blt.n	80116fc <__s2b+0x78>
 80116f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116f6:	2509      	movs	r5, #9
 80116f8:	340a      	adds	r4, #10
 80116fa:	e7f6      	b.n	80116ea <__s2b+0x66>
 80116fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011700:	4601      	mov	r1, r0
 8011702:	220a      	movs	r2, #10
 8011704:	4630      	mov	r0, r6
 8011706:	3b30      	subs	r3, #48	; 0x30
 8011708:	f7ff ff76 	bl	80115f8 <__multadd>
 801170c:	e7ee      	b.n	80116ec <__s2b+0x68>
 801170e:	bf00      	nop
 8011710:	08013929 	.word	0x08013929
 8011714:	080139b4 	.word	0x080139b4

08011718 <__hi0bits>:
 8011718:	0c02      	lsrs	r2, r0, #16
 801171a:	0412      	lsls	r2, r2, #16
 801171c:	4603      	mov	r3, r0
 801171e:	b9ca      	cbnz	r2, 8011754 <__hi0bits+0x3c>
 8011720:	0403      	lsls	r3, r0, #16
 8011722:	2010      	movs	r0, #16
 8011724:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011728:	bf04      	itt	eq
 801172a:	021b      	lsleq	r3, r3, #8
 801172c:	3008      	addeq	r0, #8
 801172e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011732:	bf04      	itt	eq
 8011734:	011b      	lsleq	r3, r3, #4
 8011736:	3004      	addeq	r0, #4
 8011738:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801173c:	bf04      	itt	eq
 801173e:	009b      	lsleq	r3, r3, #2
 8011740:	3002      	addeq	r0, #2
 8011742:	2b00      	cmp	r3, #0
 8011744:	db05      	blt.n	8011752 <__hi0bits+0x3a>
 8011746:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801174a:	f100 0001 	add.w	r0, r0, #1
 801174e:	bf08      	it	eq
 8011750:	2020      	moveq	r0, #32
 8011752:	4770      	bx	lr
 8011754:	2000      	movs	r0, #0
 8011756:	e7e5      	b.n	8011724 <__hi0bits+0xc>

08011758 <__lo0bits>:
 8011758:	6803      	ldr	r3, [r0, #0]
 801175a:	4602      	mov	r2, r0
 801175c:	f013 0007 	ands.w	r0, r3, #7
 8011760:	d00b      	beq.n	801177a <__lo0bits+0x22>
 8011762:	07d9      	lsls	r1, r3, #31
 8011764:	d421      	bmi.n	80117aa <__lo0bits+0x52>
 8011766:	0798      	lsls	r0, r3, #30
 8011768:	bf49      	itett	mi
 801176a:	085b      	lsrmi	r3, r3, #1
 801176c:	089b      	lsrpl	r3, r3, #2
 801176e:	2001      	movmi	r0, #1
 8011770:	6013      	strmi	r3, [r2, #0]
 8011772:	bf5c      	itt	pl
 8011774:	2002      	movpl	r0, #2
 8011776:	6013      	strpl	r3, [r2, #0]
 8011778:	4770      	bx	lr
 801177a:	b299      	uxth	r1, r3
 801177c:	b909      	cbnz	r1, 8011782 <__lo0bits+0x2a>
 801177e:	2010      	movs	r0, #16
 8011780:	0c1b      	lsrs	r3, r3, #16
 8011782:	b2d9      	uxtb	r1, r3
 8011784:	b909      	cbnz	r1, 801178a <__lo0bits+0x32>
 8011786:	3008      	adds	r0, #8
 8011788:	0a1b      	lsrs	r3, r3, #8
 801178a:	0719      	lsls	r1, r3, #28
 801178c:	bf04      	itt	eq
 801178e:	091b      	lsreq	r3, r3, #4
 8011790:	3004      	addeq	r0, #4
 8011792:	0799      	lsls	r1, r3, #30
 8011794:	bf04      	itt	eq
 8011796:	089b      	lsreq	r3, r3, #2
 8011798:	3002      	addeq	r0, #2
 801179a:	07d9      	lsls	r1, r3, #31
 801179c:	d403      	bmi.n	80117a6 <__lo0bits+0x4e>
 801179e:	085b      	lsrs	r3, r3, #1
 80117a0:	f100 0001 	add.w	r0, r0, #1
 80117a4:	d003      	beq.n	80117ae <__lo0bits+0x56>
 80117a6:	6013      	str	r3, [r2, #0]
 80117a8:	4770      	bx	lr
 80117aa:	2000      	movs	r0, #0
 80117ac:	4770      	bx	lr
 80117ae:	2020      	movs	r0, #32
 80117b0:	4770      	bx	lr
	...

080117b4 <__i2b>:
 80117b4:	b510      	push	{r4, lr}
 80117b6:	460c      	mov	r4, r1
 80117b8:	2101      	movs	r1, #1
 80117ba:	f7ff febb 	bl	8011534 <_Balloc>
 80117be:	4602      	mov	r2, r0
 80117c0:	b928      	cbnz	r0, 80117ce <__i2b+0x1a>
 80117c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80117c6:	4b04      	ldr	r3, [pc, #16]	; (80117d8 <__i2b+0x24>)
 80117c8:	4804      	ldr	r0, [pc, #16]	; (80117dc <__i2b+0x28>)
 80117ca:	f7ff fa17 	bl	8010bfc <__assert_func>
 80117ce:	2301      	movs	r3, #1
 80117d0:	6144      	str	r4, [r0, #20]
 80117d2:	6103      	str	r3, [r0, #16]
 80117d4:	bd10      	pop	{r4, pc}
 80117d6:	bf00      	nop
 80117d8:	08013929 	.word	0x08013929
 80117dc:	080139b4 	.word	0x080139b4

080117e0 <__multiply>:
 80117e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117e4:	4691      	mov	r9, r2
 80117e6:	690a      	ldr	r2, [r1, #16]
 80117e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80117ec:	460c      	mov	r4, r1
 80117ee:	429a      	cmp	r2, r3
 80117f0:	bfbe      	ittt	lt
 80117f2:	460b      	movlt	r3, r1
 80117f4:	464c      	movlt	r4, r9
 80117f6:	4699      	movlt	r9, r3
 80117f8:	6927      	ldr	r7, [r4, #16]
 80117fa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80117fe:	68a3      	ldr	r3, [r4, #8]
 8011800:	6861      	ldr	r1, [r4, #4]
 8011802:	eb07 060a 	add.w	r6, r7, sl
 8011806:	42b3      	cmp	r3, r6
 8011808:	b085      	sub	sp, #20
 801180a:	bfb8      	it	lt
 801180c:	3101      	addlt	r1, #1
 801180e:	f7ff fe91 	bl	8011534 <_Balloc>
 8011812:	b930      	cbnz	r0, 8011822 <__multiply+0x42>
 8011814:	4602      	mov	r2, r0
 8011816:	f240 115d 	movw	r1, #349	; 0x15d
 801181a:	4b43      	ldr	r3, [pc, #268]	; (8011928 <__multiply+0x148>)
 801181c:	4843      	ldr	r0, [pc, #268]	; (801192c <__multiply+0x14c>)
 801181e:	f7ff f9ed 	bl	8010bfc <__assert_func>
 8011822:	f100 0514 	add.w	r5, r0, #20
 8011826:	462b      	mov	r3, r5
 8011828:	2200      	movs	r2, #0
 801182a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801182e:	4543      	cmp	r3, r8
 8011830:	d321      	bcc.n	8011876 <__multiply+0x96>
 8011832:	f104 0314 	add.w	r3, r4, #20
 8011836:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801183a:	f109 0314 	add.w	r3, r9, #20
 801183e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011842:	9202      	str	r2, [sp, #8]
 8011844:	1b3a      	subs	r2, r7, r4
 8011846:	3a15      	subs	r2, #21
 8011848:	f022 0203 	bic.w	r2, r2, #3
 801184c:	3204      	adds	r2, #4
 801184e:	f104 0115 	add.w	r1, r4, #21
 8011852:	428f      	cmp	r7, r1
 8011854:	bf38      	it	cc
 8011856:	2204      	movcc	r2, #4
 8011858:	9201      	str	r2, [sp, #4]
 801185a:	9a02      	ldr	r2, [sp, #8]
 801185c:	9303      	str	r3, [sp, #12]
 801185e:	429a      	cmp	r2, r3
 8011860:	d80c      	bhi.n	801187c <__multiply+0x9c>
 8011862:	2e00      	cmp	r6, #0
 8011864:	dd03      	ble.n	801186e <__multiply+0x8e>
 8011866:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801186a:	2b00      	cmp	r3, #0
 801186c:	d059      	beq.n	8011922 <__multiply+0x142>
 801186e:	6106      	str	r6, [r0, #16]
 8011870:	b005      	add	sp, #20
 8011872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011876:	f843 2b04 	str.w	r2, [r3], #4
 801187a:	e7d8      	b.n	801182e <__multiply+0x4e>
 801187c:	f8b3 a000 	ldrh.w	sl, [r3]
 8011880:	f1ba 0f00 	cmp.w	sl, #0
 8011884:	d023      	beq.n	80118ce <__multiply+0xee>
 8011886:	46a9      	mov	r9, r5
 8011888:	f04f 0c00 	mov.w	ip, #0
 801188c:	f104 0e14 	add.w	lr, r4, #20
 8011890:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011894:	f8d9 1000 	ldr.w	r1, [r9]
 8011898:	fa1f fb82 	uxth.w	fp, r2
 801189c:	b289      	uxth	r1, r1
 801189e:	fb0a 110b 	mla	r1, sl, fp, r1
 80118a2:	4461      	add	r1, ip
 80118a4:	f8d9 c000 	ldr.w	ip, [r9]
 80118a8:	0c12      	lsrs	r2, r2, #16
 80118aa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80118ae:	fb0a c202 	mla	r2, sl, r2, ip
 80118b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80118b6:	b289      	uxth	r1, r1
 80118b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80118bc:	4577      	cmp	r7, lr
 80118be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80118c2:	f849 1b04 	str.w	r1, [r9], #4
 80118c6:	d8e3      	bhi.n	8011890 <__multiply+0xb0>
 80118c8:	9a01      	ldr	r2, [sp, #4]
 80118ca:	f845 c002 	str.w	ip, [r5, r2]
 80118ce:	9a03      	ldr	r2, [sp, #12]
 80118d0:	3304      	adds	r3, #4
 80118d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80118d6:	f1b9 0f00 	cmp.w	r9, #0
 80118da:	d020      	beq.n	801191e <__multiply+0x13e>
 80118dc:	46ae      	mov	lr, r5
 80118de:	f04f 0a00 	mov.w	sl, #0
 80118e2:	6829      	ldr	r1, [r5, #0]
 80118e4:	f104 0c14 	add.w	ip, r4, #20
 80118e8:	f8bc b000 	ldrh.w	fp, [ip]
 80118ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80118f0:	b289      	uxth	r1, r1
 80118f2:	fb09 220b 	mla	r2, r9, fp, r2
 80118f6:	4492      	add	sl, r2
 80118f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80118fc:	f84e 1b04 	str.w	r1, [lr], #4
 8011900:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011904:	f8be 1000 	ldrh.w	r1, [lr]
 8011908:	0c12      	lsrs	r2, r2, #16
 801190a:	fb09 1102 	mla	r1, r9, r2, r1
 801190e:	4567      	cmp	r7, ip
 8011910:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011914:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011918:	d8e6      	bhi.n	80118e8 <__multiply+0x108>
 801191a:	9a01      	ldr	r2, [sp, #4]
 801191c:	50a9      	str	r1, [r5, r2]
 801191e:	3504      	adds	r5, #4
 8011920:	e79b      	b.n	801185a <__multiply+0x7a>
 8011922:	3e01      	subs	r6, #1
 8011924:	e79d      	b.n	8011862 <__multiply+0x82>
 8011926:	bf00      	nop
 8011928:	08013929 	.word	0x08013929
 801192c:	080139b4 	.word	0x080139b4

08011930 <__pow5mult>:
 8011930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011934:	4615      	mov	r5, r2
 8011936:	f012 0203 	ands.w	r2, r2, #3
 801193a:	4606      	mov	r6, r0
 801193c:	460f      	mov	r7, r1
 801193e:	d007      	beq.n	8011950 <__pow5mult+0x20>
 8011940:	4c25      	ldr	r4, [pc, #148]	; (80119d8 <__pow5mult+0xa8>)
 8011942:	3a01      	subs	r2, #1
 8011944:	2300      	movs	r3, #0
 8011946:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801194a:	f7ff fe55 	bl	80115f8 <__multadd>
 801194e:	4607      	mov	r7, r0
 8011950:	10ad      	asrs	r5, r5, #2
 8011952:	d03d      	beq.n	80119d0 <__pow5mult+0xa0>
 8011954:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011956:	b97c      	cbnz	r4, 8011978 <__pow5mult+0x48>
 8011958:	2010      	movs	r0, #16
 801195a:	f7ff fdc5 	bl	80114e8 <malloc>
 801195e:	4602      	mov	r2, r0
 8011960:	6270      	str	r0, [r6, #36]	; 0x24
 8011962:	b928      	cbnz	r0, 8011970 <__pow5mult+0x40>
 8011964:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011968:	4b1c      	ldr	r3, [pc, #112]	; (80119dc <__pow5mult+0xac>)
 801196a:	481d      	ldr	r0, [pc, #116]	; (80119e0 <__pow5mult+0xb0>)
 801196c:	f7ff f946 	bl	8010bfc <__assert_func>
 8011970:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011974:	6004      	str	r4, [r0, #0]
 8011976:	60c4      	str	r4, [r0, #12]
 8011978:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801197c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011980:	b94c      	cbnz	r4, 8011996 <__pow5mult+0x66>
 8011982:	f240 2171 	movw	r1, #625	; 0x271
 8011986:	4630      	mov	r0, r6
 8011988:	f7ff ff14 	bl	80117b4 <__i2b>
 801198c:	2300      	movs	r3, #0
 801198e:	4604      	mov	r4, r0
 8011990:	f8c8 0008 	str.w	r0, [r8, #8]
 8011994:	6003      	str	r3, [r0, #0]
 8011996:	f04f 0900 	mov.w	r9, #0
 801199a:	07eb      	lsls	r3, r5, #31
 801199c:	d50a      	bpl.n	80119b4 <__pow5mult+0x84>
 801199e:	4639      	mov	r1, r7
 80119a0:	4622      	mov	r2, r4
 80119a2:	4630      	mov	r0, r6
 80119a4:	f7ff ff1c 	bl	80117e0 <__multiply>
 80119a8:	4680      	mov	r8, r0
 80119aa:	4639      	mov	r1, r7
 80119ac:	4630      	mov	r0, r6
 80119ae:	f7ff fe01 	bl	80115b4 <_Bfree>
 80119b2:	4647      	mov	r7, r8
 80119b4:	106d      	asrs	r5, r5, #1
 80119b6:	d00b      	beq.n	80119d0 <__pow5mult+0xa0>
 80119b8:	6820      	ldr	r0, [r4, #0]
 80119ba:	b938      	cbnz	r0, 80119cc <__pow5mult+0x9c>
 80119bc:	4622      	mov	r2, r4
 80119be:	4621      	mov	r1, r4
 80119c0:	4630      	mov	r0, r6
 80119c2:	f7ff ff0d 	bl	80117e0 <__multiply>
 80119c6:	6020      	str	r0, [r4, #0]
 80119c8:	f8c0 9000 	str.w	r9, [r0]
 80119cc:	4604      	mov	r4, r0
 80119ce:	e7e4      	b.n	801199a <__pow5mult+0x6a>
 80119d0:	4638      	mov	r0, r7
 80119d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119d6:	bf00      	nop
 80119d8:	08013b00 	.word	0x08013b00
 80119dc:	08013778 	.word	0x08013778
 80119e0:	080139b4 	.word	0x080139b4

080119e4 <__lshift>:
 80119e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119e8:	460c      	mov	r4, r1
 80119ea:	4607      	mov	r7, r0
 80119ec:	4691      	mov	r9, r2
 80119ee:	6923      	ldr	r3, [r4, #16]
 80119f0:	6849      	ldr	r1, [r1, #4]
 80119f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80119f6:	68a3      	ldr	r3, [r4, #8]
 80119f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80119fc:	f108 0601 	add.w	r6, r8, #1
 8011a00:	42b3      	cmp	r3, r6
 8011a02:	db0b      	blt.n	8011a1c <__lshift+0x38>
 8011a04:	4638      	mov	r0, r7
 8011a06:	f7ff fd95 	bl	8011534 <_Balloc>
 8011a0a:	4605      	mov	r5, r0
 8011a0c:	b948      	cbnz	r0, 8011a22 <__lshift+0x3e>
 8011a0e:	4602      	mov	r2, r0
 8011a10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011a14:	4b29      	ldr	r3, [pc, #164]	; (8011abc <__lshift+0xd8>)
 8011a16:	482a      	ldr	r0, [pc, #168]	; (8011ac0 <__lshift+0xdc>)
 8011a18:	f7ff f8f0 	bl	8010bfc <__assert_func>
 8011a1c:	3101      	adds	r1, #1
 8011a1e:	005b      	lsls	r3, r3, #1
 8011a20:	e7ee      	b.n	8011a00 <__lshift+0x1c>
 8011a22:	2300      	movs	r3, #0
 8011a24:	f100 0114 	add.w	r1, r0, #20
 8011a28:	f100 0210 	add.w	r2, r0, #16
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	4553      	cmp	r3, sl
 8011a30:	db37      	blt.n	8011aa2 <__lshift+0xbe>
 8011a32:	6920      	ldr	r0, [r4, #16]
 8011a34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011a38:	f104 0314 	add.w	r3, r4, #20
 8011a3c:	f019 091f 	ands.w	r9, r9, #31
 8011a40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011a44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011a48:	d02f      	beq.n	8011aaa <__lshift+0xc6>
 8011a4a:	468a      	mov	sl, r1
 8011a4c:	f04f 0c00 	mov.w	ip, #0
 8011a50:	f1c9 0e20 	rsb	lr, r9, #32
 8011a54:	681a      	ldr	r2, [r3, #0]
 8011a56:	fa02 f209 	lsl.w	r2, r2, r9
 8011a5a:	ea42 020c 	orr.w	r2, r2, ip
 8011a5e:	f84a 2b04 	str.w	r2, [sl], #4
 8011a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a66:	4298      	cmp	r0, r3
 8011a68:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011a6c:	d8f2      	bhi.n	8011a54 <__lshift+0x70>
 8011a6e:	1b03      	subs	r3, r0, r4
 8011a70:	3b15      	subs	r3, #21
 8011a72:	f023 0303 	bic.w	r3, r3, #3
 8011a76:	3304      	adds	r3, #4
 8011a78:	f104 0215 	add.w	r2, r4, #21
 8011a7c:	4290      	cmp	r0, r2
 8011a7e:	bf38      	it	cc
 8011a80:	2304      	movcc	r3, #4
 8011a82:	f841 c003 	str.w	ip, [r1, r3]
 8011a86:	f1bc 0f00 	cmp.w	ip, #0
 8011a8a:	d001      	beq.n	8011a90 <__lshift+0xac>
 8011a8c:	f108 0602 	add.w	r6, r8, #2
 8011a90:	3e01      	subs	r6, #1
 8011a92:	4638      	mov	r0, r7
 8011a94:	4621      	mov	r1, r4
 8011a96:	612e      	str	r6, [r5, #16]
 8011a98:	f7ff fd8c 	bl	80115b4 <_Bfree>
 8011a9c:	4628      	mov	r0, r5
 8011a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aa2:	f842 0f04 	str.w	r0, [r2, #4]!
 8011aa6:	3301      	adds	r3, #1
 8011aa8:	e7c1      	b.n	8011a2e <__lshift+0x4a>
 8011aaa:	3904      	subs	r1, #4
 8011aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ab0:	4298      	cmp	r0, r3
 8011ab2:	f841 2f04 	str.w	r2, [r1, #4]!
 8011ab6:	d8f9      	bhi.n	8011aac <__lshift+0xc8>
 8011ab8:	e7ea      	b.n	8011a90 <__lshift+0xac>
 8011aba:	bf00      	nop
 8011abc:	08013929 	.word	0x08013929
 8011ac0:	080139b4 	.word	0x080139b4

08011ac4 <__mcmp>:
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	690a      	ldr	r2, [r1, #16]
 8011ac8:	6900      	ldr	r0, [r0, #16]
 8011aca:	b530      	push	{r4, r5, lr}
 8011acc:	1a80      	subs	r0, r0, r2
 8011ace:	d10d      	bne.n	8011aec <__mcmp+0x28>
 8011ad0:	3314      	adds	r3, #20
 8011ad2:	3114      	adds	r1, #20
 8011ad4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011ad8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011adc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011ae0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011ae4:	4295      	cmp	r5, r2
 8011ae6:	d002      	beq.n	8011aee <__mcmp+0x2a>
 8011ae8:	d304      	bcc.n	8011af4 <__mcmp+0x30>
 8011aea:	2001      	movs	r0, #1
 8011aec:	bd30      	pop	{r4, r5, pc}
 8011aee:	42a3      	cmp	r3, r4
 8011af0:	d3f4      	bcc.n	8011adc <__mcmp+0x18>
 8011af2:	e7fb      	b.n	8011aec <__mcmp+0x28>
 8011af4:	f04f 30ff 	mov.w	r0, #4294967295
 8011af8:	e7f8      	b.n	8011aec <__mcmp+0x28>
	...

08011afc <__mdiff>:
 8011afc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b00:	460d      	mov	r5, r1
 8011b02:	4607      	mov	r7, r0
 8011b04:	4611      	mov	r1, r2
 8011b06:	4628      	mov	r0, r5
 8011b08:	4614      	mov	r4, r2
 8011b0a:	f7ff ffdb 	bl	8011ac4 <__mcmp>
 8011b0e:	1e06      	subs	r6, r0, #0
 8011b10:	d111      	bne.n	8011b36 <__mdiff+0x3a>
 8011b12:	4631      	mov	r1, r6
 8011b14:	4638      	mov	r0, r7
 8011b16:	f7ff fd0d 	bl	8011534 <_Balloc>
 8011b1a:	4602      	mov	r2, r0
 8011b1c:	b928      	cbnz	r0, 8011b2a <__mdiff+0x2e>
 8011b1e:	f240 2132 	movw	r1, #562	; 0x232
 8011b22:	4b3a      	ldr	r3, [pc, #232]	; (8011c0c <__mdiff+0x110>)
 8011b24:	483a      	ldr	r0, [pc, #232]	; (8011c10 <__mdiff+0x114>)
 8011b26:	f7ff f869 	bl	8010bfc <__assert_func>
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011b30:	4610      	mov	r0, r2
 8011b32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b36:	bfa4      	itt	ge
 8011b38:	4623      	movge	r3, r4
 8011b3a:	462c      	movge	r4, r5
 8011b3c:	4638      	mov	r0, r7
 8011b3e:	6861      	ldr	r1, [r4, #4]
 8011b40:	bfa6      	itte	ge
 8011b42:	461d      	movge	r5, r3
 8011b44:	2600      	movge	r6, #0
 8011b46:	2601      	movlt	r6, #1
 8011b48:	f7ff fcf4 	bl	8011534 <_Balloc>
 8011b4c:	4602      	mov	r2, r0
 8011b4e:	b918      	cbnz	r0, 8011b58 <__mdiff+0x5c>
 8011b50:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011b54:	4b2d      	ldr	r3, [pc, #180]	; (8011c0c <__mdiff+0x110>)
 8011b56:	e7e5      	b.n	8011b24 <__mdiff+0x28>
 8011b58:	f102 0814 	add.w	r8, r2, #20
 8011b5c:	46c2      	mov	sl, r8
 8011b5e:	f04f 0c00 	mov.w	ip, #0
 8011b62:	6927      	ldr	r7, [r4, #16]
 8011b64:	60c6      	str	r6, [r0, #12]
 8011b66:	692e      	ldr	r6, [r5, #16]
 8011b68:	f104 0014 	add.w	r0, r4, #20
 8011b6c:	f105 0914 	add.w	r9, r5, #20
 8011b70:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8011b74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011b78:	3410      	adds	r4, #16
 8011b7a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8011b7e:	f859 3b04 	ldr.w	r3, [r9], #4
 8011b82:	fa1f f18b 	uxth.w	r1, fp
 8011b86:	448c      	add	ip, r1
 8011b88:	b299      	uxth	r1, r3
 8011b8a:	0c1b      	lsrs	r3, r3, #16
 8011b8c:	ebac 0101 	sub.w	r1, ip, r1
 8011b90:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011b94:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011b98:	b289      	uxth	r1, r1
 8011b9a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8011b9e:	454e      	cmp	r6, r9
 8011ba0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011ba4:	f84a 3b04 	str.w	r3, [sl], #4
 8011ba8:	d8e7      	bhi.n	8011b7a <__mdiff+0x7e>
 8011baa:	1b73      	subs	r3, r6, r5
 8011bac:	3b15      	subs	r3, #21
 8011bae:	f023 0303 	bic.w	r3, r3, #3
 8011bb2:	3515      	adds	r5, #21
 8011bb4:	3304      	adds	r3, #4
 8011bb6:	42ae      	cmp	r6, r5
 8011bb8:	bf38      	it	cc
 8011bba:	2304      	movcc	r3, #4
 8011bbc:	4418      	add	r0, r3
 8011bbe:	4443      	add	r3, r8
 8011bc0:	461e      	mov	r6, r3
 8011bc2:	4605      	mov	r5, r0
 8011bc4:	4575      	cmp	r5, lr
 8011bc6:	d30e      	bcc.n	8011be6 <__mdiff+0xea>
 8011bc8:	f10e 0103 	add.w	r1, lr, #3
 8011bcc:	1a09      	subs	r1, r1, r0
 8011bce:	f021 0103 	bic.w	r1, r1, #3
 8011bd2:	3803      	subs	r0, #3
 8011bd4:	4586      	cmp	lr, r0
 8011bd6:	bf38      	it	cc
 8011bd8:	2100      	movcc	r1, #0
 8011bda:	4419      	add	r1, r3
 8011bdc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8011be0:	b18b      	cbz	r3, 8011c06 <__mdiff+0x10a>
 8011be2:	6117      	str	r7, [r2, #16]
 8011be4:	e7a4      	b.n	8011b30 <__mdiff+0x34>
 8011be6:	f855 8b04 	ldr.w	r8, [r5], #4
 8011bea:	fa1f f188 	uxth.w	r1, r8
 8011bee:	4461      	add	r1, ip
 8011bf0:	140c      	asrs	r4, r1, #16
 8011bf2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011bf6:	b289      	uxth	r1, r1
 8011bf8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011bfc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8011c00:	f846 1b04 	str.w	r1, [r6], #4
 8011c04:	e7de      	b.n	8011bc4 <__mdiff+0xc8>
 8011c06:	3f01      	subs	r7, #1
 8011c08:	e7e8      	b.n	8011bdc <__mdiff+0xe0>
 8011c0a:	bf00      	nop
 8011c0c:	08013929 	.word	0x08013929
 8011c10:	080139b4 	.word	0x080139b4

08011c14 <__ulp>:
 8011c14:	4b11      	ldr	r3, [pc, #68]	; (8011c5c <__ulp+0x48>)
 8011c16:	400b      	ands	r3, r1
 8011c18:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	dd02      	ble.n	8011c26 <__ulp+0x12>
 8011c20:	2000      	movs	r0, #0
 8011c22:	4619      	mov	r1, r3
 8011c24:	4770      	bx	lr
 8011c26:	425b      	negs	r3, r3
 8011c28:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8011c2c:	f04f 0000 	mov.w	r0, #0
 8011c30:	f04f 0100 	mov.w	r1, #0
 8011c34:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011c38:	da04      	bge.n	8011c44 <__ulp+0x30>
 8011c3a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011c3e:	fa43 f102 	asr.w	r1, r3, r2
 8011c42:	4770      	bx	lr
 8011c44:	f1a2 0314 	sub.w	r3, r2, #20
 8011c48:	2b1e      	cmp	r3, #30
 8011c4a:	bfd6      	itet	le
 8011c4c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8011c50:	2301      	movgt	r3, #1
 8011c52:	fa22 f303 	lsrle.w	r3, r2, r3
 8011c56:	4618      	mov	r0, r3
 8011c58:	4770      	bx	lr
 8011c5a:	bf00      	nop
 8011c5c:	7ff00000 	.word	0x7ff00000

08011c60 <__b2d>:
 8011c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c64:	6907      	ldr	r7, [r0, #16]
 8011c66:	f100 0914 	add.w	r9, r0, #20
 8011c6a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8011c6e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8011c72:	f1a7 0804 	sub.w	r8, r7, #4
 8011c76:	4630      	mov	r0, r6
 8011c78:	f7ff fd4e 	bl	8011718 <__hi0bits>
 8011c7c:	f1c0 0320 	rsb	r3, r0, #32
 8011c80:	280a      	cmp	r0, #10
 8011c82:	600b      	str	r3, [r1, #0]
 8011c84:	491f      	ldr	r1, [pc, #124]	; (8011d04 <__b2d+0xa4>)
 8011c86:	dc17      	bgt.n	8011cb8 <__b2d+0x58>
 8011c88:	45c1      	cmp	r9, r8
 8011c8a:	bf28      	it	cs
 8011c8c:	2200      	movcs	r2, #0
 8011c8e:	f1c0 0c0b 	rsb	ip, r0, #11
 8011c92:	fa26 f30c 	lsr.w	r3, r6, ip
 8011c96:	bf38      	it	cc
 8011c98:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8011c9c:	ea43 0501 	orr.w	r5, r3, r1
 8011ca0:	f100 0315 	add.w	r3, r0, #21
 8011ca4:	fa06 f303 	lsl.w	r3, r6, r3
 8011ca8:	fa22 f20c 	lsr.w	r2, r2, ip
 8011cac:	ea43 0402 	orr.w	r4, r3, r2
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	4629      	mov	r1, r5
 8011cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cb8:	45c1      	cmp	r9, r8
 8011cba:	bf2e      	itee	cs
 8011cbc:	2200      	movcs	r2, #0
 8011cbe:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8011cc2:	f1a7 0808 	subcc.w	r8, r7, #8
 8011cc6:	f1b0 030b 	subs.w	r3, r0, #11
 8011cca:	d016      	beq.n	8011cfa <__b2d+0x9a>
 8011ccc:	f1c3 0720 	rsb	r7, r3, #32
 8011cd0:	fa22 f107 	lsr.w	r1, r2, r7
 8011cd4:	45c8      	cmp	r8, r9
 8011cd6:	fa06 f603 	lsl.w	r6, r6, r3
 8011cda:	ea46 0601 	orr.w	r6, r6, r1
 8011cde:	bf94      	ite	ls
 8011ce0:	2100      	movls	r1, #0
 8011ce2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8011ce6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8011cea:	fa02 f003 	lsl.w	r0, r2, r3
 8011cee:	40f9      	lsrs	r1, r7
 8011cf0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011cf4:	ea40 0401 	orr.w	r4, r0, r1
 8011cf8:	e7da      	b.n	8011cb0 <__b2d+0x50>
 8011cfa:	4614      	mov	r4, r2
 8011cfc:	ea46 0501 	orr.w	r5, r6, r1
 8011d00:	e7d6      	b.n	8011cb0 <__b2d+0x50>
 8011d02:	bf00      	nop
 8011d04:	3ff00000 	.word	0x3ff00000

08011d08 <__d2b>:
 8011d08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011d0c:	2101      	movs	r1, #1
 8011d0e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8011d12:	4690      	mov	r8, r2
 8011d14:	461d      	mov	r5, r3
 8011d16:	f7ff fc0d 	bl	8011534 <_Balloc>
 8011d1a:	4604      	mov	r4, r0
 8011d1c:	b930      	cbnz	r0, 8011d2c <__d2b+0x24>
 8011d1e:	4602      	mov	r2, r0
 8011d20:	f240 310a 	movw	r1, #778	; 0x30a
 8011d24:	4b24      	ldr	r3, [pc, #144]	; (8011db8 <__d2b+0xb0>)
 8011d26:	4825      	ldr	r0, [pc, #148]	; (8011dbc <__d2b+0xb4>)
 8011d28:	f7fe ff68 	bl	8010bfc <__assert_func>
 8011d2c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8011d30:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8011d34:	bb2d      	cbnz	r5, 8011d82 <__d2b+0x7a>
 8011d36:	9301      	str	r3, [sp, #4]
 8011d38:	f1b8 0300 	subs.w	r3, r8, #0
 8011d3c:	d026      	beq.n	8011d8c <__d2b+0x84>
 8011d3e:	4668      	mov	r0, sp
 8011d40:	9300      	str	r3, [sp, #0]
 8011d42:	f7ff fd09 	bl	8011758 <__lo0bits>
 8011d46:	9900      	ldr	r1, [sp, #0]
 8011d48:	b1f0      	cbz	r0, 8011d88 <__d2b+0x80>
 8011d4a:	9a01      	ldr	r2, [sp, #4]
 8011d4c:	f1c0 0320 	rsb	r3, r0, #32
 8011d50:	fa02 f303 	lsl.w	r3, r2, r3
 8011d54:	430b      	orrs	r3, r1
 8011d56:	40c2      	lsrs	r2, r0
 8011d58:	6163      	str	r3, [r4, #20]
 8011d5a:	9201      	str	r2, [sp, #4]
 8011d5c:	9b01      	ldr	r3, [sp, #4]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	bf14      	ite	ne
 8011d62:	2102      	movne	r1, #2
 8011d64:	2101      	moveq	r1, #1
 8011d66:	61a3      	str	r3, [r4, #24]
 8011d68:	6121      	str	r1, [r4, #16]
 8011d6a:	b1c5      	cbz	r5, 8011d9e <__d2b+0x96>
 8011d6c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011d70:	4405      	add	r5, r0
 8011d72:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011d76:	603d      	str	r5, [r7, #0]
 8011d78:	6030      	str	r0, [r6, #0]
 8011d7a:	4620      	mov	r0, r4
 8011d7c:	b002      	add	sp, #8
 8011d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011d86:	e7d6      	b.n	8011d36 <__d2b+0x2e>
 8011d88:	6161      	str	r1, [r4, #20]
 8011d8a:	e7e7      	b.n	8011d5c <__d2b+0x54>
 8011d8c:	a801      	add	r0, sp, #4
 8011d8e:	f7ff fce3 	bl	8011758 <__lo0bits>
 8011d92:	2101      	movs	r1, #1
 8011d94:	9b01      	ldr	r3, [sp, #4]
 8011d96:	6121      	str	r1, [r4, #16]
 8011d98:	6163      	str	r3, [r4, #20]
 8011d9a:	3020      	adds	r0, #32
 8011d9c:	e7e5      	b.n	8011d6a <__d2b+0x62>
 8011d9e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8011da2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011da6:	6038      	str	r0, [r7, #0]
 8011da8:	6918      	ldr	r0, [r3, #16]
 8011daa:	f7ff fcb5 	bl	8011718 <__hi0bits>
 8011dae:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8011db2:	6031      	str	r1, [r6, #0]
 8011db4:	e7e1      	b.n	8011d7a <__d2b+0x72>
 8011db6:	bf00      	nop
 8011db8:	08013929 	.word	0x08013929
 8011dbc:	080139b4 	.word	0x080139b4

08011dc0 <__ratio>:
 8011dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dc4:	4688      	mov	r8, r1
 8011dc6:	4669      	mov	r1, sp
 8011dc8:	4681      	mov	r9, r0
 8011dca:	f7ff ff49 	bl	8011c60 <__b2d>
 8011dce:	460f      	mov	r7, r1
 8011dd0:	4604      	mov	r4, r0
 8011dd2:	460d      	mov	r5, r1
 8011dd4:	4640      	mov	r0, r8
 8011dd6:	a901      	add	r1, sp, #4
 8011dd8:	f7ff ff42 	bl	8011c60 <__b2d>
 8011ddc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011de0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011de4:	468b      	mov	fp, r1
 8011de6:	eba3 0c02 	sub.w	ip, r3, r2
 8011dea:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011dee:	1a9b      	subs	r3, r3, r2
 8011df0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	bfd5      	itete	le
 8011df8:	460a      	movle	r2, r1
 8011dfa:	462a      	movgt	r2, r5
 8011dfc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011e00:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011e04:	bfd8      	it	le
 8011e06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011e0a:	465b      	mov	r3, fp
 8011e0c:	4602      	mov	r2, r0
 8011e0e:	4639      	mov	r1, r7
 8011e10:	4620      	mov	r0, r4
 8011e12:	f7ee fcfb 	bl	800080c <__aeabi_ddiv>
 8011e16:	b003      	add	sp, #12
 8011e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011e1c <__copybits>:
 8011e1c:	3901      	subs	r1, #1
 8011e1e:	b570      	push	{r4, r5, r6, lr}
 8011e20:	1149      	asrs	r1, r1, #5
 8011e22:	6914      	ldr	r4, [r2, #16]
 8011e24:	3101      	adds	r1, #1
 8011e26:	f102 0314 	add.w	r3, r2, #20
 8011e2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011e2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011e32:	1f05      	subs	r5, r0, #4
 8011e34:	42a3      	cmp	r3, r4
 8011e36:	d30c      	bcc.n	8011e52 <__copybits+0x36>
 8011e38:	1aa3      	subs	r3, r4, r2
 8011e3a:	3b11      	subs	r3, #17
 8011e3c:	f023 0303 	bic.w	r3, r3, #3
 8011e40:	3211      	adds	r2, #17
 8011e42:	42a2      	cmp	r2, r4
 8011e44:	bf88      	it	hi
 8011e46:	2300      	movhi	r3, #0
 8011e48:	4418      	add	r0, r3
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	4288      	cmp	r0, r1
 8011e4e:	d305      	bcc.n	8011e5c <__copybits+0x40>
 8011e50:	bd70      	pop	{r4, r5, r6, pc}
 8011e52:	f853 6b04 	ldr.w	r6, [r3], #4
 8011e56:	f845 6f04 	str.w	r6, [r5, #4]!
 8011e5a:	e7eb      	b.n	8011e34 <__copybits+0x18>
 8011e5c:	f840 3b04 	str.w	r3, [r0], #4
 8011e60:	e7f4      	b.n	8011e4c <__copybits+0x30>

08011e62 <__any_on>:
 8011e62:	f100 0214 	add.w	r2, r0, #20
 8011e66:	6900      	ldr	r0, [r0, #16]
 8011e68:	114b      	asrs	r3, r1, #5
 8011e6a:	4298      	cmp	r0, r3
 8011e6c:	b510      	push	{r4, lr}
 8011e6e:	db11      	blt.n	8011e94 <__any_on+0x32>
 8011e70:	dd0a      	ble.n	8011e88 <__any_on+0x26>
 8011e72:	f011 011f 	ands.w	r1, r1, #31
 8011e76:	d007      	beq.n	8011e88 <__any_on+0x26>
 8011e78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011e7c:	fa24 f001 	lsr.w	r0, r4, r1
 8011e80:	fa00 f101 	lsl.w	r1, r0, r1
 8011e84:	428c      	cmp	r4, r1
 8011e86:	d10b      	bne.n	8011ea0 <__any_on+0x3e>
 8011e88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011e8c:	4293      	cmp	r3, r2
 8011e8e:	d803      	bhi.n	8011e98 <__any_on+0x36>
 8011e90:	2000      	movs	r0, #0
 8011e92:	bd10      	pop	{r4, pc}
 8011e94:	4603      	mov	r3, r0
 8011e96:	e7f7      	b.n	8011e88 <__any_on+0x26>
 8011e98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011e9c:	2900      	cmp	r1, #0
 8011e9e:	d0f5      	beq.n	8011e8c <__any_on+0x2a>
 8011ea0:	2001      	movs	r0, #1
 8011ea2:	e7f6      	b.n	8011e92 <__any_on+0x30>

08011ea4 <_calloc_r>:
 8011ea4:	b570      	push	{r4, r5, r6, lr}
 8011ea6:	fba1 5402 	umull	r5, r4, r1, r2
 8011eaa:	b934      	cbnz	r4, 8011eba <_calloc_r+0x16>
 8011eac:	4629      	mov	r1, r5
 8011eae:	f7fd fdd7 	bl	800fa60 <_malloc_r>
 8011eb2:	4606      	mov	r6, r0
 8011eb4:	b928      	cbnz	r0, 8011ec2 <_calloc_r+0x1e>
 8011eb6:	4630      	mov	r0, r6
 8011eb8:	bd70      	pop	{r4, r5, r6, pc}
 8011eba:	220c      	movs	r2, #12
 8011ebc:	2600      	movs	r6, #0
 8011ebe:	6002      	str	r2, [r0, #0]
 8011ec0:	e7f9      	b.n	8011eb6 <_calloc_r+0x12>
 8011ec2:	462a      	mov	r2, r5
 8011ec4:	4621      	mov	r1, r4
 8011ec6:	f7fd fda2 	bl	800fa0e <memset>
 8011eca:	e7f4      	b.n	8011eb6 <_calloc_r+0x12>

08011ecc <_free_r>:
 8011ecc:	b538      	push	{r3, r4, r5, lr}
 8011ece:	4605      	mov	r5, r0
 8011ed0:	2900      	cmp	r1, #0
 8011ed2:	d040      	beq.n	8011f56 <_free_r+0x8a>
 8011ed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ed8:	1f0c      	subs	r4, r1, #4
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	bfb8      	it	lt
 8011ede:	18e4      	addlt	r4, r4, r3
 8011ee0:	f7ff fb1c 	bl	801151c <__malloc_lock>
 8011ee4:	4a1c      	ldr	r2, [pc, #112]	; (8011f58 <_free_r+0x8c>)
 8011ee6:	6813      	ldr	r3, [r2, #0]
 8011ee8:	b933      	cbnz	r3, 8011ef8 <_free_r+0x2c>
 8011eea:	6063      	str	r3, [r4, #4]
 8011eec:	6014      	str	r4, [r2, #0]
 8011eee:	4628      	mov	r0, r5
 8011ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ef4:	f7ff bb18 	b.w	8011528 <__malloc_unlock>
 8011ef8:	42a3      	cmp	r3, r4
 8011efa:	d908      	bls.n	8011f0e <_free_r+0x42>
 8011efc:	6820      	ldr	r0, [r4, #0]
 8011efe:	1821      	adds	r1, r4, r0
 8011f00:	428b      	cmp	r3, r1
 8011f02:	bf01      	itttt	eq
 8011f04:	6819      	ldreq	r1, [r3, #0]
 8011f06:	685b      	ldreq	r3, [r3, #4]
 8011f08:	1809      	addeq	r1, r1, r0
 8011f0a:	6021      	streq	r1, [r4, #0]
 8011f0c:	e7ed      	b.n	8011eea <_free_r+0x1e>
 8011f0e:	461a      	mov	r2, r3
 8011f10:	685b      	ldr	r3, [r3, #4]
 8011f12:	b10b      	cbz	r3, 8011f18 <_free_r+0x4c>
 8011f14:	42a3      	cmp	r3, r4
 8011f16:	d9fa      	bls.n	8011f0e <_free_r+0x42>
 8011f18:	6811      	ldr	r1, [r2, #0]
 8011f1a:	1850      	adds	r0, r2, r1
 8011f1c:	42a0      	cmp	r0, r4
 8011f1e:	d10b      	bne.n	8011f38 <_free_r+0x6c>
 8011f20:	6820      	ldr	r0, [r4, #0]
 8011f22:	4401      	add	r1, r0
 8011f24:	1850      	adds	r0, r2, r1
 8011f26:	4283      	cmp	r3, r0
 8011f28:	6011      	str	r1, [r2, #0]
 8011f2a:	d1e0      	bne.n	8011eee <_free_r+0x22>
 8011f2c:	6818      	ldr	r0, [r3, #0]
 8011f2e:	685b      	ldr	r3, [r3, #4]
 8011f30:	4401      	add	r1, r0
 8011f32:	6011      	str	r1, [r2, #0]
 8011f34:	6053      	str	r3, [r2, #4]
 8011f36:	e7da      	b.n	8011eee <_free_r+0x22>
 8011f38:	d902      	bls.n	8011f40 <_free_r+0x74>
 8011f3a:	230c      	movs	r3, #12
 8011f3c:	602b      	str	r3, [r5, #0]
 8011f3e:	e7d6      	b.n	8011eee <_free_r+0x22>
 8011f40:	6820      	ldr	r0, [r4, #0]
 8011f42:	1821      	adds	r1, r4, r0
 8011f44:	428b      	cmp	r3, r1
 8011f46:	bf01      	itttt	eq
 8011f48:	6819      	ldreq	r1, [r3, #0]
 8011f4a:	685b      	ldreq	r3, [r3, #4]
 8011f4c:	1809      	addeq	r1, r1, r0
 8011f4e:	6021      	streq	r1, [r4, #0]
 8011f50:	6063      	str	r3, [r4, #4]
 8011f52:	6054      	str	r4, [r2, #4]
 8011f54:	e7cb      	b.n	8011eee <_free_r+0x22>
 8011f56:	bd38      	pop	{r3, r4, r5, pc}
 8011f58:	20009a18 	.word	0x20009a18

08011f5c <__ssputs_r>:
 8011f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f60:	688e      	ldr	r6, [r1, #8]
 8011f62:	4682      	mov	sl, r0
 8011f64:	429e      	cmp	r6, r3
 8011f66:	460c      	mov	r4, r1
 8011f68:	4690      	mov	r8, r2
 8011f6a:	461f      	mov	r7, r3
 8011f6c:	d838      	bhi.n	8011fe0 <__ssputs_r+0x84>
 8011f6e:	898a      	ldrh	r2, [r1, #12]
 8011f70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011f74:	d032      	beq.n	8011fdc <__ssputs_r+0x80>
 8011f76:	6825      	ldr	r5, [r4, #0]
 8011f78:	6909      	ldr	r1, [r1, #16]
 8011f7a:	3301      	adds	r3, #1
 8011f7c:	eba5 0901 	sub.w	r9, r5, r1
 8011f80:	6965      	ldr	r5, [r4, #20]
 8011f82:	444b      	add	r3, r9
 8011f84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011f8c:	106d      	asrs	r5, r5, #1
 8011f8e:	429d      	cmp	r5, r3
 8011f90:	bf38      	it	cc
 8011f92:	461d      	movcc	r5, r3
 8011f94:	0553      	lsls	r3, r2, #21
 8011f96:	d531      	bpl.n	8011ffc <__ssputs_r+0xa0>
 8011f98:	4629      	mov	r1, r5
 8011f9a:	f7fd fd61 	bl	800fa60 <_malloc_r>
 8011f9e:	4606      	mov	r6, r0
 8011fa0:	b950      	cbnz	r0, 8011fb8 <__ssputs_r+0x5c>
 8011fa2:	230c      	movs	r3, #12
 8011fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8011fa8:	f8ca 3000 	str.w	r3, [sl]
 8011fac:	89a3      	ldrh	r3, [r4, #12]
 8011fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fb2:	81a3      	strh	r3, [r4, #12]
 8011fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fb8:	464a      	mov	r2, r9
 8011fba:	6921      	ldr	r1, [r4, #16]
 8011fbc:	f7fd fd19 	bl	800f9f2 <memcpy>
 8011fc0:	89a3      	ldrh	r3, [r4, #12]
 8011fc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fca:	81a3      	strh	r3, [r4, #12]
 8011fcc:	6126      	str	r6, [r4, #16]
 8011fce:	444e      	add	r6, r9
 8011fd0:	6026      	str	r6, [r4, #0]
 8011fd2:	463e      	mov	r6, r7
 8011fd4:	6165      	str	r5, [r4, #20]
 8011fd6:	eba5 0509 	sub.w	r5, r5, r9
 8011fda:	60a5      	str	r5, [r4, #8]
 8011fdc:	42be      	cmp	r6, r7
 8011fde:	d900      	bls.n	8011fe2 <__ssputs_r+0x86>
 8011fe0:	463e      	mov	r6, r7
 8011fe2:	4632      	mov	r2, r6
 8011fe4:	4641      	mov	r1, r8
 8011fe6:	6820      	ldr	r0, [r4, #0]
 8011fe8:	f000 fd7a 	bl	8012ae0 <memmove>
 8011fec:	68a3      	ldr	r3, [r4, #8]
 8011fee:	2000      	movs	r0, #0
 8011ff0:	1b9b      	subs	r3, r3, r6
 8011ff2:	60a3      	str	r3, [r4, #8]
 8011ff4:	6823      	ldr	r3, [r4, #0]
 8011ff6:	4433      	add	r3, r6
 8011ff8:	6023      	str	r3, [r4, #0]
 8011ffa:	e7db      	b.n	8011fb4 <__ssputs_r+0x58>
 8011ffc:	462a      	mov	r2, r5
 8011ffe:	f000 fd89 	bl	8012b14 <_realloc_r>
 8012002:	4606      	mov	r6, r0
 8012004:	2800      	cmp	r0, #0
 8012006:	d1e1      	bne.n	8011fcc <__ssputs_r+0x70>
 8012008:	4650      	mov	r0, sl
 801200a:	6921      	ldr	r1, [r4, #16]
 801200c:	f7ff ff5e 	bl	8011ecc <_free_r>
 8012010:	e7c7      	b.n	8011fa2 <__ssputs_r+0x46>
	...

08012014 <_svfiprintf_r>:
 8012014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012018:	4698      	mov	r8, r3
 801201a:	898b      	ldrh	r3, [r1, #12]
 801201c:	4607      	mov	r7, r0
 801201e:	061b      	lsls	r3, r3, #24
 8012020:	460d      	mov	r5, r1
 8012022:	4614      	mov	r4, r2
 8012024:	b09d      	sub	sp, #116	; 0x74
 8012026:	d50e      	bpl.n	8012046 <_svfiprintf_r+0x32>
 8012028:	690b      	ldr	r3, [r1, #16]
 801202a:	b963      	cbnz	r3, 8012046 <_svfiprintf_r+0x32>
 801202c:	2140      	movs	r1, #64	; 0x40
 801202e:	f7fd fd17 	bl	800fa60 <_malloc_r>
 8012032:	6028      	str	r0, [r5, #0]
 8012034:	6128      	str	r0, [r5, #16]
 8012036:	b920      	cbnz	r0, 8012042 <_svfiprintf_r+0x2e>
 8012038:	230c      	movs	r3, #12
 801203a:	603b      	str	r3, [r7, #0]
 801203c:	f04f 30ff 	mov.w	r0, #4294967295
 8012040:	e0d1      	b.n	80121e6 <_svfiprintf_r+0x1d2>
 8012042:	2340      	movs	r3, #64	; 0x40
 8012044:	616b      	str	r3, [r5, #20]
 8012046:	2300      	movs	r3, #0
 8012048:	9309      	str	r3, [sp, #36]	; 0x24
 801204a:	2320      	movs	r3, #32
 801204c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012050:	2330      	movs	r3, #48	; 0x30
 8012052:	f04f 0901 	mov.w	r9, #1
 8012056:	f8cd 800c 	str.w	r8, [sp, #12]
 801205a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012200 <_svfiprintf_r+0x1ec>
 801205e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012062:	4623      	mov	r3, r4
 8012064:	469a      	mov	sl, r3
 8012066:	f813 2b01 	ldrb.w	r2, [r3], #1
 801206a:	b10a      	cbz	r2, 8012070 <_svfiprintf_r+0x5c>
 801206c:	2a25      	cmp	r2, #37	; 0x25
 801206e:	d1f9      	bne.n	8012064 <_svfiprintf_r+0x50>
 8012070:	ebba 0b04 	subs.w	fp, sl, r4
 8012074:	d00b      	beq.n	801208e <_svfiprintf_r+0x7a>
 8012076:	465b      	mov	r3, fp
 8012078:	4622      	mov	r2, r4
 801207a:	4629      	mov	r1, r5
 801207c:	4638      	mov	r0, r7
 801207e:	f7ff ff6d 	bl	8011f5c <__ssputs_r>
 8012082:	3001      	adds	r0, #1
 8012084:	f000 80aa 	beq.w	80121dc <_svfiprintf_r+0x1c8>
 8012088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801208a:	445a      	add	r2, fp
 801208c:	9209      	str	r2, [sp, #36]	; 0x24
 801208e:	f89a 3000 	ldrb.w	r3, [sl]
 8012092:	2b00      	cmp	r3, #0
 8012094:	f000 80a2 	beq.w	80121dc <_svfiprintf_r+0x1c8>
 8012098:	2300      	movs	r3, #0
 801209a:	f04f 32ff 	mov.w	r2, #4294967295
 801209e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120a2:	f10a 0a01 	add.w	sl, sl, #1
 80120a6:	9304      	str	r3, [sp, #16]
 80120a8:	9307      	str	r3, [sp, #28]
 80120aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80120ae:	931a      	str	r3, [sp, #104]	; 0x68
 80120b0:	4654      	mov	r4, sl
 80120b2:	2205      	movs	r2, #5
 80120b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120b8:	4851      	ldr	r0, [pc, #324]	; (8012200 <_svfiprintf_r+0x1ec>)
 80120ba:	f000 fd03 	bl	8012ac4 <memchr>
 80120be:	9a04      	ldr	r2, [sp, #16]
 80120c0:	b9d8      	cbnz	r0, 80120fa <_svfiprintf_r+0xe6>
 80120c2:	06d0      	lsls	r0, r2, #27
 80120c4:	bf44      	itt	mi
 80120c6:	2320      	movmi	r3, #32
 80120c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120cc:	0711      	lsls	r1, r2, #28
 80120ce:	bf44      	itt	mi
 80120d0:	232b      	movmi	r3, #43	; 0x2b
 80120d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120d6:	f89a 3000 	ldrb.w	r3, [sl]
 80120da:	2b2a      	cmp	r3, #42	; 0x2a
 80120dc:	d015      	beq.n	801210a <_svfiprintf_r+0xf6>
 80120de:	4654      	mov	r4, sl
 80120e0:	2000      	movs	r0, #0
 80120e2:	f04f 0c0a 	mov.w	ip, #10
 80120e6:	9a07      	ldr	r2, [sp, #28]
 80120e8:	4621      	mov	r1, r4
 80120ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120ee:	3b30      	subs	r3, #48	; 0x30
 80120f0:	2b09      	cmp	r3, #9
 80120f2:	d94e      	bls.n	8012192 <_svfiprintf_r+0x17e>
 80120f4:	b1b0      	cbz	r0, 8012124 <_svfiprintf_r+0x110>
 80120f6:	9207      	str	r2, [sp, #28]
 80120f8:	e014      	b.n	8012124 <_svfiprintf_r+0x110>
 80120fa:	eba0 0308 	sub.w	r3, r0, r8
 80120fe:	fa09 f303 	lsl.w	r3, r9, r3
 8012102:	4313      	orrs	r3, r2
 8012104:	46a2      	mov	sl, r4
 8012106:	9304      	str	r3, [sp, #16]
 8012108:	e7d2      	b.n	80120b0 <_svfiprintf_r+0x9c>
 801210a:	9b03      	ldr	r3, [sp, #12]
 801210c:	1d19      	adds	r1, r3, #4
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	9103      	str	r1, [sp, #12]
 8012112:	2b00      	cmp	r3, #0
 8012114:	bfbb      	ittet	lt
 8012116:	425b      	neglt	r3, r3
 8012118:	f042 0202 	orrlt.w	r2, r2, #2
 801211c:	9307      	strge	r3, [sp, #28]
 801211e:	9307      	strlt	r3, [sp, #28]
 8012120:	bfb8      	it	lt
 8012122:	9204      	strlt	r2, [sp, #16]
 8012124:	7823      	ldrb	r3, [r4, #0]
 8012126:	2b2e      	cmp	r3, #46	; 0x2e
 8012128:	d10c      	bne.n	8012144 <_svfiprintf_r+0x130>
 801212a:	7863      	ldrb	r3, [r4, #1]
 801212c:	2b2a      	cmp	r3, #42	; 0x2a
 801212e:	d135      	bne.n	801219c <_svfiprintf_r+0x188>
 8012130:	9b03      	ldr	r3, [sp, #12]
 8012132:	3402      	adds	r4, #2
 8012134:	1d1a      	adds	r2, r3, #4
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	9203      	str	r2, [sp, #12]
 801213a:	2b00      	cmp	r3, #0
 801213c:	bfb8      	it	lt
 801213e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012142:	9305      	str	r3, [sp, #20]
 8012144:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8012204 <_svfiprintf_r+0x1f0>
 8012148:	2203      	movs	r2, #3
 801214a:	4650      	mov	r0, sl
 801214c:	7821      	ldrb	r1, [r4, #0]
 801214e:	f000 fcb9 	bl	8012ac4 <memchr>
 8012152:	b140      	cbz	r0, 8012166 <_svfiprintf_r+0x152>
 8012154:	2340      	movs	r3, #64	; 0x40
 8012156:	eba0 000a 	sub.w	r0, r0, sl
 801215a:	fa03 f000 	lsl.w	r0, r3, r0
 801215e:	9b04      	ldr	r3, [sp, #16]
 8012160:	3401      	adds	r4, #1
 8012162:	4303      	orrs	r3, r0
 8012164:	9304      	str	r3, [sp, #16]
 8012166:	f814 1b01 	ldrb.w	r1, [r4], #1
 801216a:	2206      	movs	r2, #6
 801216c:	4826      	ldr	r0, [pc, #152]	; (8012208 <_svfiprintf_r+0x1f4>)
 801216e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012172:	f000 fca7 	bl	8012ac4 <memchr>
 8012176:	2800      	cmp	r0, #0
 8012178:	d038      	beq.n	80121ec <_svfiprintf_r+0x1d8>
 801217a:	4b24      	ldr	r3, [pc, #144]	; (801220c <_svfiprintf_r+0x1f8>)
 801217c:	bb1b      	cbnz	r3, 80121c6 <_svfiprintf_r+0x1b2>
 801217e:	9b03      	ldr	r3, [sp, #12]
 8012180:	3307      	adds	r3, #7
 8012182:	f023 0307 	bic.w	r3, r3, #7
 8012186:	3308      	adds	r3, #8
 8012188:	9303      	str	r3, [sp, #12]
 801218a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801218c:	4433      	add	r3, r6
 801218e:	9309      	str	r3, [sp, #36]	; 0x24
 8012190:	e767      	b.n	8012062 <_svfiprintf_r+0x4e>
 8012192:	460c      	mov	r4, r1
 8012194:	2001      	movs	r0, #1
 8012196:	fb0c 3202 	mla	r2, ip, r2, r3
 801219a:	e7a5      	b.n	80120e8 <_svfiprintf_r+0xd4>
 801219c:	2300      	movs	r3, #0
 801219e:	f04f 0c0a 	mov.w	ip, #10
 80121a2:	4619      	mov	r1, r3
 80121a4:	3401      	adds	r4, #1
 80121a6:	9305      	str	r3, [sp, #20]
 80121a8:	4620      	mov	r0, r4
 80121aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121ae:	3a30      	subs	r2, #48	; 0x30
 80121b0:	2a09      	cmp	r2, #9
 80121b2:	d903      	bls.n	80121bc <_svfiprintf_r+0x1a8>
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d0c5      	beq.n	8012144 <_svfiprintf_r+0x130>
 80121b8:	9105      	str	r1, [sp, #20]
 80121ba:	e7c3      	b.n	8012144 <_svfiprintf_r+0x130>
 80121bc:	4604      	mov	r4, r0
 80121be:	2301      	movs	r3, #1
 80121c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80121c4:	e7f0      	b.n	80121a8 <_svfiprintf_r+0x194>
 80121c6:	ab03      	add	r3, sp, #12
 80121c8:	9300      	str	r3, [sp, #0]
 80121ca:	462a      	mov	r2, r5
 80121cc:	4638      	mov	r0, r7
 80121ce:	4b10      	ldr	r3, [pc, #64]	; (8012210 <_svfiprintf_r+0x1fc>)
 80121d0:	a904      	add	r1, sp, #16
 80121d2:	f3af 8000 	nop.w
 80121d6:	1c42      	adds	r2, r0, #1
 80121d8:	4606      	mov	r6, r0
 80121da:	d1d6      	bne.n	801218a <_svfiprintf_r+0x176>
 80121dc:	89ab      	ldrh	r3, [r5, #12]
 80121de:	065b      	lsls	r3, r3, #25
 80121e0:	f53f af2c 	bmi.w	801203c <_svfiprintf_r+0x28>
 80121e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80121e6:	b01d      	add	sp, #116	; 0x74
 80121e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121ec:	ab03      	add	r3, sp, #12
 80121ee:	9300      	str	r3, [sp, #0]
 80121f0:	462a      	mov	r2, r5
 80121f2:	4638      	mov	r0, r7
 80121f4:	4b06      	ldr	r3, [pc, #24]	; (8012210 <_svfiprintf_r+0x1fc>)
 80121f6:	a904      	add	r1, sp, #16
 80121f8:	f000 f9d4 	bl	80125a4 <_printf_i>
 80121fc:	e7eb      	b.n	80121d6 <_svfiprintf_r+0x1c2>
 80121fe:	bf00      	nop
 8012200:	08013b0c 	.word	0x08013b0c
 8012204:	08013b12 	.word	0x08013b12
 8012208:	08013b16 	.word	0x08013b16
 801220c:	00000000 	.word	0x00000000
 8012210:	08011f5d 	.word	0x08011f5d

08012214 <__sfputc_r>:
 8012214:	6893      	ldr	r3, [r2, #8]
 8012216:	b410      	push	{r4}
 8012218:	3b01      	subs	r3, #1
 801221a:	2b00      	cmp	r3, #0
 801221c:	6093      	str	r3, [r2, #8]
 801221e:	da07      	bge.n	8012230 <__sfputc_r+0x1c>
 8012220:	6994      	ldr	r4, [r2, #24]
 8012222:	42a3      	cmp	r3, r4
 8012224:	db01      	blt.n	801222a <__sfputc_r+0x16>
 8012226:	290a      	cmp	r1, #10
 8012228:	d102      	bne.n	8012230 <__sfputc_r+0x1c>
 801222a:	bc10      	pop	{r4}
 801222c:	f000 bb10 	b.w	8012850 <__swbuf_r>
 8012230:	6813      	ldr	r3, [r2, #0]
 8012232:	1c58      	adds	r0, r3, #1
 8012234:	6010      	str	r0, [r2, #0]
 8012236:	7019      	strb	r1, [r3, #0]
 8012238:	4608      	mov	r0, r1
 801223a:	bc10      	pop	{r4}
 801223c:	4770      	bx	lr

0801223e <__sfputs_r>:
 801223e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012240:	4606      	mov	r6, r0
 8012242:	460f      	mov	r7, r1
 8012244:	4614      	mov	r4, r2
 8012246:	18d5      	adds	r5, r2, r3
 8012248:	42ac      	cmp	r4, r5
 801224a:	d101      	bne.n	8012250 <__sfputs_r+0x12>
 801224c:	2000      	movs	r0, #0
 801224e:	e007      	b.n	8012260 <__sfputs_r+0x22>
 8012250:	463a      	mov	r2, r7
 8012252:	4630      	mov	r0, r6
 8012254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012258:	f7ff ffdc 	bl	8012214 <__sfputc_r>
 801225c:	1c43      	adds	r3, r0, #1
 801225e:	d1f3      	bne.n	8012248 <__sfputs_r+0xa>
 8012260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012264 <_vfiprintf_r>:
 8012264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012268:	460d      	mov	r5, r1
 801226a:	4614      	mov	r4, r2
 801226c:	4698      	mov	r8, r3
 801226e:	4606      	mov	r6, r0
 8012270:	b09d      	sub	sp, #116	; 0x74
 8012272:	b118      	cbz	r0, 801227c <_vfiprintf_r+0x18>
 8012274:	6983      	ldr	r3, [r0, #24]
 8012276:	b90b      	cbnz	r3, 801227c <_vfiprintf_r+0x18>
 8012278:	f7fd faf6 	bl	800f868 <__sinit>
 801227c:	4b89      	ldr	r3, [pc, #548]	; (80124a4 <_vfiprintf_r+0x240>)
 801227e:	429d      	cmp	r5, r3
 8012280:	d11b      	bne.n	80122ba <_vfiprintf_r+0x56>
 8012282:	6875      	ldr	r5, [r6, #4]
 8012284:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012286:	07d9      	lsls	r1, r3, #31
 8012288:	d405      	bmi.n	8012296 <_vfiprintf_r+0x32>
 801228a:	89ab      	ldrh	r3, [r5, #12]
 801228c:	059a      	lsls	r2, r3, #22
 801228e:	d402      	bmi.n	8012296 <_vfiprintf_r+0x32>
 8012290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012292:	f7fd fbac 	bl	800f9ee <__retarget_lock_acquire_recursive>
 8012296:	89ab      	ldrh	r3, [r5, #12]
 8012298:	071b      	lsls	r3, r3, #28
 801229a:	d501      	bpl.n	80122a0 <_vfiprintf_r+0x3c>
 801229c:	692b      	ldr	r3, [r5, #16]
 801229e:	b9eb      	cbnz	r3, 80122dc <_vfiprintf_r+0x78>
 80122a0:	4629      	mov	r1, r5
 80122a2:	4630      	mov	r0, r6
 80122a4:	f000 fb34 	bl	8012910 <__swsetup_r>
 80122a8:	b1c0      	cbz	r0, 80122dc <_vfiprintf_r+0x78>
 80122aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80122ac:	07dc      	lsls	r4, r3, #31
 80122ae:	d50e      	bpl.n	80122ce <_vfiprintf_r+0x6a>
 80122b0:	f04f 30ff 	mov.w	r0, #4294967295
 80122b4:	b01d      	add	sp, #116	; 0x74
 80122b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ba:	4b7b      	ldr	r3, [pc, #492]	; (80124a8 <_vfiprintf_r+0x244>)
 80122bc:	429d      	cmp	r5, r3
 80122be:	d101      	bne.n	80122c4 <_vfiprintf_r+0x60>
 80122c0:	68b5      	ldr	r5, [r6, #8]
 80122c2:	e7df      	b.n	8012284 <_vfiprintf_r+0x20>
 80122c4:	4b79      	ldr	r3, [pc, #484]	; (80124ac <_vfiprintf_r+0x248>)
 80122c6:	429d      	cmp	r5, r3
 80122c8:	bf08      	it	eq
 80122ca:	68f5      	ldreq	r5, [r6, #12]
 80122cc:	e7da      	b.n	8012284 <_vfiprintf_r+0x20>
 80122ce:	89ab      	ldrh	r3, [r5, #12]
 80122d0:	0598      	lsls	r0, r3, #22
 80122d2:	d4ed      	bmi.n	80122b0 <_vfiprintf_r+0x4c>
 80122d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80122d6:	f7fd fb8b 	bl	800f9f0 <__retarget_lock_release_recursive>
 80122da:	e7e9      	b.n	80122b0 <_vfiprintf_r+0x4c>
 80122dc:	2300      	movs	r3, #0
 80122de:	9309      	str	r3, [sp, #36]	; 0x24
 80122e0:	2320      	movs	r3, #32
 80122e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80122e6:	2330      	movs	r3, #48	; 0x30
 80122e8:	f04f 0901 	mov.w	r9, #1
 80122ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80122f0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80124b0 <_vfiprintf_r+0x24c>
 80122f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80122f8:	4623      	mov	r3, r4
 80122fa:	469a      	mov	sl, r3
 80122fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012300:	b10a      	cbz	r2, 8012306 <_vfiprintf_r+0xa2>
 8012302:	2a25      	cmp	r2, #37	; 0x25
 8012304:	d1f9      	bne.n	80122fa <_vfiprintf_r+0x96>
 8012306:	ebba 0b04 	subs.w	fp, sl, r4
 801230a:	d00b      	beq.n	8012324 <_vfiprintf_r+0xc0>
 801230c:	465b      	mov	r3, fp
 801230e:	4622      	mov	r2, r4
 8012310:	4629      	mov	r1, r5
 8012312:	4630      	mov	r0, r6
 8012314:	f7ff ff93 	bl	801223e <__sfputs_r>
 8012318:	3001      	adds	r0, #1
 801231a:	f000 80aa 	beq.w	8012472 <_vfiprintf_r+0x20e>
 801231e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012320:	445a      	add	r2, fp
 8012322:	9209      	str	r2, [sp, #36]	; 0x24
 8012324:	f89a 3000 	ldrb.w	r3, [sl]
 8012328:	2b00      	cmp	r3, #0
 801232a:	f000 80a2 	beq.w	8012472 <_vfiprintf_r+0x20e>
 801232e:	2300      	movs	r3, #0
 8012330:	f04f 32ff 	mov.w	r2, #4294967295
 8012334:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012338:	f10a 0a01 	add.w	sl, sl, #1
 801233c:	9304      	str	r3, [sp, #16]
 801233e:	9307      	str	r3, [sp, #28]
 8012340:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012344:	931a      	str	r3, [sp, #104]	; 0x68
 8012346:	4654      	mov	r4, sl
 8012348:	2205      	movs	r2, #5
 801234a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801234e:	4858      	ldr	r0, [pc, #352]	; (80124b0 <_vfiprintf_r+0x24c>)
 8012350:	f000 fbb8 	bl	8012ac4 <memchr>
 8012354:	9a04      	ldr	r2, [sp, #16]
 8012356:	b9d8      	cbnz	r0, 8012390 <_vfiprintf_r+0x12c>
 8012358:	06d1      	lsls	r1, r2, #27
 801235a:	bf44      	itt	mi
 801235c:	2320      	movmi	r3, #32
 801235e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012362:	0713      	lsls	r3, r2, #28
 8012364:	bf44      	itt	mi
 8012366:	232b      	movmi	r3, #43	; 0x2b
 8012368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801236c:	f89a 3000 	ldrb.w	r3, [sl]
 8012370:	2b2a      	cmp	r3, #42	; 0x2a
 8012372:	d015      	beq.n	80123a0 <_vfiprintf_r+0x13c>
 8012374:	4654      	mov	r4, sl
 8012376:	2000      	movs	r0, #0
 8012378:	f04f 0c0a 	mov.w	ip, #10
 801237c:	9a07      	ldr	r2, [sp, #28]
 801237e:	4621      	mov	r1, r4
 8012380:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012384:	3b30      	subs	r3, #48	; 0x30
 8012386:	2b09      	cmp	r3, #9
 8012388:	d94e      	bls.n	8012428 <_vfiprintf_r+0x1c4>
 801238a:	b1b0      	cbz	r0, 80123ba <_vfiprintf_r+0x156>
 801238c:	9207      	str	r2, [sp, #28]
 801238e:	e014      	b.n	80123ba <_vfiprintf_r+0x156>
 8012390:	eba0 0308 	sub.w	r3, r0, r8
 8012394:	fa09 f303 	lsl.w	r3, r9, r3
 8012398:	4313      	orrs	r3, r2
 801239a:	46a2      	mov	sl, r4
 801239c:	9304      	str	r3, [sp, #16]
 801239e:	e7d2      	b.n	8012346 <_vfiprintf_r+0xe2>
 80123a0:	9b03      	ldr	r3, [sp, #12]
 80123a2:	1d19      	adds	r1, r3, #4
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	9103      	str	r1, [sp, #12]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	bfbb      	ittet	lt
 80123ac:	425b      	neglt	r3, r3
 80123ae:	f042 0202 	orrlt.w	r2, r2, #2
 80123b2:	9307      	strge	r3, [sp, #28]
 80123b4:	9307      	strlt	r3, [sp, #28]
 80123b6:	bfb8      	it	lt
 80123b8:	9204      	strlt	r2, [sp, #16]
 80123ba:	7823      	ldrb	r3, [r4, #0]
 80123bc:	2b2e      	cmp	r3, #46	; 0x2e
 80123be:	d10c      	bne.n	80123da <_vfiprintf_r+0x176>
 80123c0:	7863      	ldrb	r3, [r4, #1]
 80123c2:	2b2a      	cmp	r3, #42	; 0x2a
 80123c4:	d135      	bne.n	8012432 <_vfiprintf_r+0x1ce>
 80123c6:	9b03      	ldr	r3, [sp, #12]
 80123c8:	3402      	adds	r4, #2
 80123ca:	1d1a      	adds	r2, r3, #4
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	9203      	str	r2, [sp, #12]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	bfb8      	it	lt
 80123d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80123d8:	9305      	str	r3, [sp, #20]
 80123da:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80124b4 <_vfiprintf_r+0x250>
 80123de:	2203      	movs	r2, #3
 80123e0:	4650      	mov	r0, sl
 80123e2:	7821      	ldrb	r1, [r4, #0]
 80123e4:	f000 fb6e 	bl	8012ac4 <memchr>
 80123e8:	b140      	cbz	r0, 80123fc <_vfiprintf_r+0x198>
 80123ea:	2340      	movs	r3, #64	; 0x40
 80123ec:	eba0 000a 	sub.w	r0, r0, sl
 80123f0:	fa03 f000 	lsl.w	r0, r3, r0
 80123f4:	9b04      	ldr	r3, [sp, #16]
 80123f6:	3401      	adds	r4, #1
 80123f8:	4303      	orrs	r3, r0
 80123fa:	9304      	str	r3, [sp, #16]
 80123fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012400:	2206      	movs	r2, #6
 8012402:	482d      	ldr	r0, [pc, #180]	; (80124b8 <_vfiprintf_r+0x254>)
 8012404:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012408:	f000 fb5c 	bl	8012ac4 <memchr>
 801240c:	2800      	cmp	r0, #0
 801240e:	d03f      	beq.n	8012490 <_vfiprintf_r+0x22c>
 8012410:	4b2a      	ldr	r3, [pc, #168]	; (80124bc <_vfiprintf_r+0x258>)
 8012412:	bb1b      	cbnz	r3, 801245c <_vfiprintf_r+0x1f8>
 8012414:	9b03      	ldr	r3, [sp, #12]
 8012416:	3307      	adds	r3, #7
 8012418:	f023 0307 	bic.w	r3, r3, #7
 801241c:	3308      	adds	r3, #8
 801241e:	9303      	str	r3, [sp, #12]
 8012420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012422:	443b      	add	r3, r7
 8012424:	9309      	str	r3, [sp, #36]	; 0x24
 8012426:	e767      	b.n	80122f8 <_vfiprintf_r+0x94>
 8012428:	460c      	mov	r4, r1
 801242a:	2001      	movs	r0, #1
 801242c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012430:	e7a5      	b.n	801237e <_vfiprintf_r+0x11a>
 8012432:	2300      	movs	r3, #0
 8012434:	f04f 0c0a 	mov.w	ip, #10
 8012438:	4619      	mov	r1, r3
 801243a:	3401      	adds	r4, #1
 801243c:	9305      	str	r3, [sp, #20]
 801243e:	4620      	mov	r0, r4
 8012440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012444:	3a30      	subs	r2, #48	; 0x30
 8012446:	2a09      	cmp	r2, #9
 8012448:	d903      	bls.n	8012452 <_vfiprintf_r+0x1ee>
 801244a:	2b00      	cmp	r3, #0
 801244c:	d0c5      	beq.n	80123da <_vfiprintf_r+0x176>
 801244e:	9105      	str	r1, [sp, #20]
 8012450:	e7c3      	b.n	80123da <_vfiprintf_r+0x176>
 8012452:	4604      	mov	r4, r0
 8012454:	2301      	movs	r3, #1
 8012456:	fb0c 2101 	mla	r1, ip, r1, r2
 801245a:	e7f0      	b.n	801243e <_vfiprintf_r+0x1da>
 801245c:	ab03      	add	r3, sp, #12
 801245e:	9300      	str	r3, [sp, #0]
 8012460:	462a      	mov	r2, r5
 8012462:	4630      	mov	r0, r6
 8012464:	4b16      	ldr	r3, [pc, #88]	; (80124c0 <_vfiprintf_r+0x25c>)
 8012466:	a904      	add	r1, sp, #16
 8012468:	f3af 8000 	nop.w
 801246c:	4607      	mov	r7, r0
 801246e:	1c78      	adds	r0, r7, #1
 8012470:	d1d6      	bne.n	8012420 <_vfiprintf_r+0x1bc>
 8012472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012474:	07d9      	lsls	r1, r3, #31
 8012476:	d405      	bmi.n	8012484 <_vfiprintf_r+0x220>
 8012478:	89ab      	ldrh	r3, [r5, #12]
 801247a:	059a      	lsls	r2, r3, #22
 801247c:	d402      	bmi.n	8012484 <_vfiprintf_r+0x220>
 801247e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012480:	f7fd fab6 	bl	800f9f0 <__retarget_lock_release_recursive>
 8012484:	89ab      	ldrh	r3, [r5, #12]
 8012486:	065b      	lsls	r3, r3, #25
 8012488:	f53f af12 	bmi.w	80122b0 <_vfiprintf_r+0x4c>
 801248c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801248e:	e711      	b.n	80122b4 <_vfiprintf_r+0x50>
 8012490:	ab03      	add	r3, sp, #12
 8012492:	9300      	str	r3, [sp, #0]
 8012494:	462a      	mov	r2, r5
 8012496:	4630      	mov	r0, r6
 8012498:	4b09      	ldr	r3, [pc, #36]	; (80124c0 <_vfiprintf_r+0x25c>)
 801249a:	a904      	add	r1, sp, #16
 801249c:	f000 f882 	bl	80125a4 <_printf_i>
 80124a0:	e7e4      	b.n	801246c <_vfiprintf_r+0x208>
 80124a2:	bf00      	nop
 80124a4:	080136d4 	.word	0x080136d4
 80124a8:	080136f4 	.word	0x080136f4
 80124ac:	080136b4 	.word	0x080136b4
 80124b0:	08013b0c 	.word	0x08013b0c
 80124b4:	08013b12 	.word	0x08013b12
 80124b8:	08013b16 	.word	0x08013b16
 80124bc:	00000000 	.word	0x00000000
 80124c0:	0801223f 	.word	0x0801223f

080124c4 <_printf_common>:
 80124c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124c8:	4616      	mov	r6, r2
 80124ca:	4699      	mov	r9, r3
 80124cc:	688a      	ldr	r2, [r1, #8]
 80124ce:	690b      	ldr	r3, [r1, #16]
 80124d0:	4607      	mov	r7, r0
 80124d2:	4293      	cmp	r3, r2
 80124d4:	bfb8      	it	lt
 80124d6:	4613      	movlt	r3, r2
 80124d8:	6033      	str	r3, [r6, #0]
 80124da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80124de:	460c      	mov	r4, r1
 80124e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80124e4:	b10a      	cbz	r2, 80124ea <_printf_common+0x26>
 80124e6:	3301      	adds	r3, #1
 80124e8:	6033      	str	r3, [r6, #0]
 80124ea:	6823      	ldr	r3, [r4, #0]
 80124ec:	0699      	lsls	r1, r3, #26
 80124ee:	bf42      	ittt	mi
 80124f0:	6833      	ldrmi	r3, [r6, #0]
 80124f2:	3302      	addmi	r3, #2
 80124f4:	6033      	strmi	r3, [r6, #0]
 80124f6:	6825      	ldr	r5, [r4, #0]
 80124f8:	f015 0506 	ands.w	r5, r5, #6
 80124fc:	d106      	bne.n	801250c <_printf_common+0x48>
 80124fe:	f104 0a19 	add.w	sl, r4, #25
 8012502:	68e3      	ldr	r3, [r4, #12]
 8012504:	6832      	ldr	r2, [r6, #0]
 8012506:	1a9b      	subs	r3, r3, r2
 8012508:	42ab      	cmp	r3, r5
 801250a:	dc28      	bgt.n	801255e <_printf_common+0x9a>
 801250c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012510:	1e13      	subs	r3, r2, #0
 8012512:	6822      	ldr	r2, [r4, #0]
 8012514:	bf18      	it	ne
 8012516:	2301      	movne	r3, #1
 8012518:	0692      	lsls	r2, r2, #26
 801251a:	d42d      	bmi.n	8012578 <_printf_common+0xb4>
 801251c:	4649      	mov	r1, r9
 801251e:	4638      	mov	r0, r7
 8012520:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012524:	47c0      	blx	r8
 8012526:	3001      	adds	r0, #1
 8012528:	d020      	beq.n	801256c <_printf_common+0xa8>
 801252a:	6823      	ldr	r3, [r4, #0]
 801252c:	68e5      	ldr	r5, [r4, #12]
 801252e:	f003 0306 	and.w	r3, r3, #6
 8012532:	2b04      	cmp	r3, #4
 8012534:	bf18      	it	ne
 8012536:	2500      	movne	r5, #0
 8012538:	6832      	ldr	r2, [r6, #0]
 801253a:	f04f 0600 	mov.w	r6, #0
 801253e:	68a3      	ldr	r3, [r4, #8]
 8012540:	bf08      	it	eq
 8012542:	1aad      	subeq	r5, r5, r2
 8012544:	6922      	ldr	r2, [r4, #16]
 8012546:	bf08      	it	eq
 8012548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801254c:	4293      	cmp	r3, r2
 801254e:	bfc4      	itt	gt
 8012550:	1a9b      	subgt	r3, r3, r2
 8012552:	18ed      	addgt	r5, r5, r3
 8012554:	341a      	adds	r4, #26
 8012556:	42b5      	cmp	r5, r6
 8012558:	d11a      	bne.n	8012590 <_printf_common+0xcc>
 801255a:	2000      	movs	r0, #0
 801255c:	e008      	b.n	8012570 <_printf_common+0xac>
 801255e:	2301      	movs	r3, #1
 8012560:	4652      	mov	r2, sl
 8012562:	4649      	mov	r1, r9
 8012564:	4638      	mov	r0, r7
 8012566:	47c0      	blx	r8
 8012568:	3001      	adds	r0, #1
 801256a:	d103      	bne.n	8012574 <_printf_common+0xb0>
 801256c:	f04f 30ff 	mov.w	r0, #4294967295
 8012570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012574:	3501      	adds	r5, #1
 8012576:	e7c4      	b.n	8012502 <_printf_common+0x3e>
 8012578:	2030      	movs	r0, #48	; 0x30
 801257a:	18e1      	adds	r1, r4, r3
 801257c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012580:	1c5a      	adds	r2, r3, #1
 8012582:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012586:	4422      	add	r2, r4
 8012588:	3302      	adds	r3, #2
 801258a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801258e:	e7c5      	b.n	801251c <_printf_common+0x58>
 8012590:	2301      	movs	r3, #1
 8012592:	4622      	mov	r2, r4
 8012594:	4649      	mov	r1, r9
 8012596:	4638      	mov	r0, r7
 8012598:	47c0      	blx	r8
 801259a:	3001      	adds	r0, #1
 801259c:	d0e6      	beq.n	801256c <_printf_common+0xa8>
 801259e:	3601      	adds	r6, #1
 80125a0:	e7d9      	b.n	8012556 <_printf_common+0x92>
	...

080125a4 <_printf_i>:
 80125a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80125a8:	7e0f      	ldrb	r7, [r1, #24]
 80125aa:	4691      	mov	r9, r2
 80125ac:	2f78      	cmp	r7, #120	; 0x78
 80125ae:	4680      	mov	r8, r0
 80125b0:	460c      	mov	r4, r1
 80125b2:	469a      	mov	sl, r3
 80125b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80125b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80125ba:	d807      	bhi.n	80125cc <_printf_i+0x28>
 80125bc:	2f62      	cmp	r7, #98	; 0x62
 80125be:	d80a      	bhi.n	80125d6 <_printf_i+0x32>
 80125c0:	2f00      	cmp	r7, #0
 80125c2:	f000 80d9 	beq.w	8012778 <_printf_i+0x1d4>
 80125c6:	2f58      	cmp	r7, #88	; 0x58
 80125c8:	f000 80a4 	beq.w	8012714 <_printf_i+0x170>
 80125cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80125d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80125d4:	e03a      	b.n	801264c <_printf_i+0xa8>
 80125d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80125da:	2b15      	cmp	r3, #21
 80125dc:	d8f6      	bhi.n	80125cc <_printf_i+0x28>
 80125de:	a101      	add	r1, pc, #4	; (adr r1, 80125e4 <_printf_i+0x40>)
 80125e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80125e4:	0801263d 	.word	0x0801263d
 80125e8:	08012651 	.word	0x08012651
 80125ec:	080125cd 	.word	0x080125cd
 80125f0:	080125cd 	.word	0x080125cd
 80125f4:	080125cd 	.word	0x080125cd
 80125f8:	080125cd 	.word	0x080125cd
 80125fc:	08012651 	.word	0x08012651
 8012600:	080125cd 	.word	0x080125cd
 8012604:	080125cd 	.word	0x080125cd
 8012608:	080125cd 	.word	0x080125cd
 801260c:	080125cd 	.word	0x080125cd
 8012610:	0801275f 	.word	0x0801275f
 8012614:	08012681 	.word	0x08012681
 8012618:	08012741 	.word	0x08012741
 801261c:	080125cd 	.word	0x080125cd
 8012620:	080125cd 	.word	0x080125cd
 8012624:	08012781 	.word	0x08012781
 8012628:	080125cd 	.word	0x080125cd
 801262c:	08012681 	.word	0x08012681
 8012630:	080125cd 	.word	0x080125cd
 8012634:	080125cd 	.word	0x080125cd
 8012638:	08012749 	.word	0x08012749
 801263c:	682b      	ldr	r3, [r5, #0]
 801263e:	1d1a      	adds	r2, r3, #4
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	602a      	str	r2, [r5, #0]
 8012644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801264c:	2301      	movs	r3, #1
 801264e:	e0a4      	b.n	801279a <_printf_i+0x1f6>
 8012650:	6820      	ldr	r0, [r4, #0]
 8012652:	6829      	ldr	r1, [r5, #0]
 8012654:	0606      	lsls	r6, r0, #24
 8012656:	f101 0304 	add.w	r3, r1, #4
 801265a:	d50a      	bpl.n	8012672 <_printf_i+0xce>
 801265c:	680e      	ldr	r6, [r1, #0]
 801265e:	602b      	str	r3, [r5, #0]
 8012660:	2e00      	cmp	r6, #0
 8012662:	da03      	bge.n	801266c <_printf_i+0xc8>
 8012664:	232d      	movs	r3, #45	; 0x2d
 8012666:	4276      	negs	r6, r6
 8012668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801266c:	230a      	movs	r3, #10
 801266e:	485e      	ldr	r0, [pc, #376]	; (80127e8 <_printf_i+0x244>)
 8012670:	e019      	b.n	80126a6 <_printf_i+0x102>
 8012672:	680e      	ldr	r6, [r1, #0]
 8012674:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012678:	602b      	str	r3, [r5, #0]
 801267a:	bf18      	it	ne
 801267c:	b236      	sxthne	r6, r6
 801267e:	e7ef      	b.n	8012660 <_printf_i+0xbc>
 8012680:	682b      	ldr	r3, [r5, #0]
 8012682:	6820      	ldr	r0, [r4, #0]
 8012684:	1d19      	adds	r1, r3, #4
 8012686:	6029      	str	r1, [r5, #0]
 8012688:	0601      	lsls	r1, r0, #24
 801268a:	d501      	bpl.n	8012690 <_printf_i+0xec>
 801268c:	681e      	ldr	r6, [r3, #0]
 801268e:	e002      	b.n	8012696 <_printf_i+0xf2>
 8012690:	0646      	lsls	r6, r0, #25
 8012692:	d5fb      	bpl.n	801268c <_printf_i+0xe8>
 8012694:	881e      	ldrh	r6, [r3, #0]
 8012696:	2f6f      	cmp	r7, #111	; 0x6f
 8012698:	bf0c      	ite	eq
 801269a:	2308      	moveq	r3, #8
 801269c:	230a      	movne	r3, #10
 801269e:	4852      	ldr	r0, [pc, #328]	; (80127e8 <_printf_i+0x244>)
 80126a0:	2100      	movs	r1, #0
 80126a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80126a6:	6865      	ldr	r5, [r4, #4]
 80126a8:	2d00      	cmp	r5, #0
 80126aa:	bfa8      	it	ge
 80126ac:	6821      	ldrge	r1, [r4, #0]
 80126ae:	60a5      	str	r5, [r4, #8]
 80126b0:	bfa4      	itt	ge
 80126b2:	f021 0104 	bicge.w	r1, r1, #4
 80126b6:	6021      	strge	r1, [r4, #0]
 80126b8:	b90e      	cbnz	r6, 80126be <_printf_i+0x11a>
 80126ba:	2d00      	cmp	r5, #0
 80126bc:	d04d      	beq.n	801275a <_printf_i+0x1b6>
 80126be:	4615      	mov	r5, r2
 80126c0:	fbb6 f1f3 	udiv	r1, r6, r3
 80126c4:	fb03 6711 	mls	r7, r3, r1, r6
 80126c8:	5dc7      	ldrb	r7, [r0, r7]
 80126ca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80126ce:	4637      	mov	r7, r6
 80126d0:	42bb      	cmp	r3, r7
 80126d2:	460e      	mov	r6, r1
 80126d4:	d9f4      	bls.n	80126c0 <_printf_i+0x11c>
 80126d6:	2b08      	cmp	r3, #8
 80126d8:	d10b      	bne.n	80126f2 <_printf_i+0x14e>
 80126da:	6823      	ldr	r3, [r4, #0]
 80126dc:	07de      	lsls	r6, r3, #31
 80126de:	d508      	bpl.n	80126f2 <_printf_i+0x14e>
 80126e0:	6923      	ldr	r3, [r4, #16]
 80126e2:	6861      	ldr	r1, [r4, #4]
 80126e4:	4299      	cmp	r1, r3
 80126e6:	bfde      	ittt	le
 80126e8:	2330      	movle	r3, #48	; 0x30
 80126ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80126ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80126f2:	1b52      	subs	r2, r2, r5
 80126f4:	6122      	str	r2, [r4, #16]
 80126f6:	464b      	mov	r3, r9
 80126f8:	4621      	mov	r1, r4
 80126fa:	4640      	mov	r0, r8
 80126fc:	f8cd a000 	str.w	sl, [sp]
 8012700:	aa03      	add	r2, sp, #12
 8012702:	f7ff fedf 	bl	80124c4 <_printf_common>
 8012706:	3001      	adds	r0, #1
 8012708:	d14c      	bne.n	80127a4 <_printf_i+0x200>
 801270a:	f04f 30ff 	mov.w	r0, #4294967295
 801270e:	b004      	add	sp, #16
 8012710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012714:	4834      	ldr	r0, [pc, #208]	; (80127e8 <_printf_i+0x244>)
 8012716:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801271a:	6829      	ldr	r1, [r5, #0]
 801271c:	6823      	ldr	r3, [r4, #0]
 801271e:	f851 6b04 	ldr.w	r6, [r1], #4
 8012722:	6029      	str	r1, [r5, #0]
 8012724:	061d      	lsls	r5, r3, #24
 8012726:	d514      	bpl.n	8012752 <_printf_i+0x1ae>
 8012728:	07df      	lsls	r7, r3, #31
 801272a:	bf44      	itt	mi
 801272c:	f043 0320 	orrmi.w	r3, r3, #32
 8012730:	6023      	strmi	r3, [r4, #0]
 8012732:	b91e      	cbnz	r6, 801273c <_printf_i+0x198>
 8012734:	6823      	ldr	r3, [r4, #0]
 8012736:	f023 0320 	bic.w	r3, r3, #32
 801273a:	6023      	str	r3, [r4, #0]
 801273c:	2310      	movs	r3, #16
 801273e:	e7af      	b.n	80126a0 <_printf_i+0xfc>
 8012740:	6823      	ldr	r3, [r4, #0]
 8012742:	f043 0320 	orr.w	r3, r3, #32
 8012746:	6023      	str	r3, [r4, #0]
 8012748:	2378      	movs	r3, #120	; 0x78
 801274a:	4828      	ldr	r0, [pc, #160]	; (80127ec <_printf_i+0x248>)
 801274c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012750:	e7e3      	b.n	801271a <_printf_i+0x176>
 8012752:	0659      	lsls	r1, r3, #25
 8012754:	bf48      	it	mi
 8012756:	b2b6      	uxthmi	r6, r6
 8012758:	e7e6      	b.n	8012728 <_printf_i+0x184>
 801275a:	4615      	mov	r5, r2
 801275c:	e7bb      	b.n	80126d6 <_printf_i+0x132>
 801275e:	682b      	ldr	r3, [r5, #0]
 8012760:	6826      	ldr	r6, [r4, #0]
 8012762:	1d18      	adds	r0, r3, #4
 8012764:	6961      	ldr	r1, [r4, #20]
 8012766:	6028      	str	r0, [r5, #0]
 8012768:	0635      	lsls	r5, r6, #24
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	d501      	bpl.n	8012772 <_printf_i+0x1ce>
 801276e:	6019      	str	r1, [r3, #0]
 8012770:	e002      	b.n	8012778 <_printf_i+0x1d4>
 8012772:	0670      	lsls	r0, r6, #25
 8012774:	d5fb      	bpl.n	801276e <_printf_i+0x1ca>
 8012776:	8019      	strh	r1, [r3, #0]
 8012778:	2300      	movs	r3, #0
 801277a:	4615      	mov	r5, r2
 801277c:	6123      	str	r3, [r4, #16]
 801277e:	e7ba      	b.n	80126f6 <_printf_i+0x152>
 8012780:	682b      	ldr	r3, [r5, #0]
 8012782:	2100      	movs	r1, #0
 8012784:	1d1a      	adds	r2, r3, #4
 8012786:	602a      	str	r2, [r5, #0]
 8012788:	681d      	ldr	r5, [r3, #0]
 801278a:	6862      	ldr	r2, [r4, #4]
 801278c:	4628      	mov	r0, r5
 801278e:	f000 f999 	bl	8012ac4 <memchr>
 8012792:	b108      	cbz	r0, 8012798 <_printf_i+0x1f4>
 8012794:	1b40      	subs	r0, r0, r5
 8012796:	6060      	str	r0, [r4, #4]
 8012798:	6863      	ldr	r3, [r4, #4]
 801279a:	6123      	str	r3, [r4, #16]
 801279c:	2300      	movs	r3, #0
 801279e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80127a2:	e7a8      	b.n	80126f6 <_printf_i+0x152>
 80127a4:	462a      	mov	r2, r5
 80127a6:	4649      	mov	r1, r9
 80127a8:	4640      	mov	r0, r8
 80127aa:	6923      	ldr	r3, [r4, #16]
 80127ac:	47d0      	blx	sl
 80127ae:	3001      	adds	r0, #1
 80127b0:	d0ab      	beq.n	801270a <_printf_i+0x166>
 80127b2:	6823      	ldr	r3, [r4, #0]
 80127b4:	079b      	lsls	r3, r3, #30
 80127b6:	d413      	bmi.n	80127e0 <_printf_i+0x23c>
 80127b8:	68e0      	ldr	r0, [r4, #12]
 80127ba:	9b03      	ldr	r3, [sp, #12]
 80127bc:	4298      	cmp	r0, r3
 80127be:	bfb8      	it	lt
 80127c0:	4618      	movlt	r0, r3
 80127c2:	e7a4      	b.n	801270e <_printf_i+0x16a>
 80127c4:	2301      	movs	r3, #1
 80127c6:	4632      	mov	r2, r6
 80127c8:	4649      	mov	r1, r9
 80127ca:	4640      	mov	r0, r8
 80127cc:	47d0      	blx	sl
 80127ce:	3001      	adds	r0, #1
 80127d0:	d09b      	beq.n	801270a <_printf_i+0x166>
 80127d2:	3501      	adds	r5, #1
 80127d4:	68e3      	ldr	r3, [r4, #12]
 80127d6:	9903      	ldr	r1, [sp, #12]
 80127d8:	1a5b      	subs	r3, r3, r1
 80127da:	42ab      	cmp	r3, r5
 80127dc:	dcf2      	bgt.n	80127c4 <_printf_i+0x220>
 80127de:	e7eb      	b.n	80127b8 <_printf_i+0x214>
 80127e0:	2500      	movs	r5, #0
 80127e2:	f104 0619 	add.w	r6, r4, #25
 80127e6:	e7f5      	b.n	80127d4 <_printf_i+0x230>
 80127e8:	08013b1d 	.word	0x08013b1d
 80127ec:	08013b2e 	.word	0x08013b2e

080127f0 <_read_r>:
 80127f0:	b538      	push	{r3, r4, r5, lr}
 80127f2:	4604      	mov	r4, r0
 80127f4:	4608      	mov	r0, r1
 80127f6:	4611      	mov	r1, r2
 80127f8:	2200      	movs	r2, #0
 80127fa:	4d05      	ldr	r5, [pc, #20]	; (8012810 <_read_r+0x20>)
 80127fc:	602a      	str	r2, [r5, #0]
 80127fe:	461a      	mov	r2, r3
 8012800:	f7f1 fbe5 	bl	8003fce <_read>
 8012804:	1c43      	adds	r3, r0, #1
 8012806:	d102      	bne.n	801280e <_read_r+0x1e>
 8012808:	682b      	ldr	r3, [r5, #0]
 801280a:	b103      	cbz	r3, 801280e <_read_r+0x1e>
 801280c:	6023      	str	r3, [r4, #0]
 801280e:	bd38      	pop	{r3, r4, r5, pc}
 8012810:	20009a20 	.word	0x20009a20

08012814 <nan>:
 8012814:	2000      	movs	r0, #0
 8012816:	4901      	ldr	r1, [pc, #4]	; (801281c <nan+0x8>)
 8012818:	4770      	bx	lr
 801281a:	bf00      	nop
 801281c:	7ff80000 	.word	0x7ff80000

08012820 <nanf>:
 8012820:	4800      	ldr	r0, [pc, #0]	; (8012824 <nanf+0x4>)
 8012822:	4770      	bx	lr
 8012824:	7fc00000 	.word	0x7fc00000

08012828 <strncmp>:
 8012828:	4603      	mov	r3, r0
 801282a:	b510      	push	{r4, lr}
 801282c:	b172      	cbz	r2, 801284c <strncmp+0x24>
 801282e:	3901      	subs	r1, #1
 8012830:	1884      	adds	r4, r0, r2
 8012832:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012836:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801283a:	4290      	cmp	r0, r2
 801283c:	d101      	bne.n	8012842 <strncmp+0x1a>
 801283e:	42a3      	cmp	r3, r4
 8012840:	d101      	bne.n	8012846 <strncmp+0x1e>
 8012842:	1a80      	subs	r0, r0, r2
 8012844:	bd10      	pop	{r4, pc}
 8012846:	2800      	cmp	r0, #0
 8012848:	d1f3      	bne.n	8012832 <strncmp+0xa>
 801284a:	e7fa      	b.n	8012842 <strncmp+0x1a>
 801284c:	4610      	mov	r0, r2
 801284e:	e7f9      	b.n	8012844 <strncmp+0x1c>

08012850 <__swbuf_r>:
 8012850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012852:	460e      	mov	r6, r1
 8012854:	4614      	mov	r4, r2
 8012856:	4605      	mov	r5, r0
 8012858:	b118      	cbz	r0, 8012862 <__swbuf_r+0x12>
 801285a:	6983      	ldr	r3, [r0, #24]
 801285c:	b90b      	cbnz	r3, 8012862 <__swbuf_r+0x12>
 801285e:	f7fd f803 	bl	800f868 <__sinit>
 8012862:	4b21      	ldr	r3, [pc, #132]	; (80128e8 <__swbuf_r+0x98>)
 8012864:	429c      	cmp	r4, r3
 8012866:	d12b      	bne.n	80128c0 <__swbuf_r+0x70>
 8012868:	686c      	ldr	r4, [r5, #4]
 801286a:	69a3      	ldr	r3, [r4, #24]
 801286c:	60a3      	str	r3, [r4, #8]
 801286e:	89a3      	ldrh	r3, [r4, #12]
 8012870:	071a      	lsls	r2, r3, #28
 8012872:	d52f      	bpl.n	80128d4 <__swbuf_r+0x84>
 8012874:	6923      	ldr	r3, [r4, #16]
 8012876:	b36b      	cbz	r3, 80128d4 <__swbuf_r+0x84>
 8012878:	6923      	ldr	r3, [r4, #16]
 801287a:	6820      	ldr	r0, [r4, #0]
 801287c:	b2f6      	uxtb	r6, r6
 801287e:	1ac0      	subs	r0, r0, r3
 8012880:	6963      	ldr	r3, [r4, #20]
 8012882:	4637      	mov	r7, r6
 8012884:	4283      	cmp	r3, r0
 8012886:	dc04      	bgt.n	8012892 <__swbuf_r+0x42>
 8012888:	4621      	mov	r1, r4
 801288a:	4628      	mov	r0, r5
 801288c:	f7fe fa66 	bl	8010d5c <_fflush_r>
 8012890:	bb30      	cbnz	r0, 80128e0 <__swbuf_r+0x90>
 8012892:	68a3      	ldr	r3, [r4, #8]
 8012894:	3001      	adds	r0, #1
 8012896:	3b01      	subs	r3, #1
 8012898:	60a3      	str	r3, [r4, #8]
 801289a:	6823      	ldr	r3, [r4, #0]
 801289c:	1c5a      	adds	r2, r3, #1
 801289e:	6022      	str	r2, [r4, #0]
 80128a0:	701e      	strb	r6, [r3, #0]
 80128a2:	6963      	ldr	r3, [r4, #20]
 80128a4:	4283      	cmp	r3, r0
 80128a6:	d004      	beq.n	80128b2 <__swbuf_r+0x62>
 80128a8:	89a3      	ldrh	r3, [r4, #12]
 80128aa:	07db      	lsls	r3, r3, #31
 80128ac:	d506      	bpl.n	80128bc <__swbuf_r+0x6c>
 80128ae:	2e0a      	cmp	r6, #10
 80128b0:	d104      	bne.n	80128bc <__swbuf_r+0x6c>
 80128b2:	4621      	mov	r1, r4
 80128b4:	4628      	mov	r0, r5
 80128b6:	f7fe fa51 	bl	8010d5c <_fflush_r>
 80128ba:	b988      	cbnz	r0, 80128e0 <__swbuf_r+0x90>
 80128bc:	4638      	mov	r0, r7
 80128be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128c0:	4b0a      	ldr	r3, [pc, #40]	; (80128ec <__swbuf_r+0x9c>)
 80128c2:	429c      	cmp	r4, r3
 80128c4:	d101      	bne.n	80128ca <__swbuf_r+0x7a>
 80128c6:	68ac      	ldr	r4, [r5, #8]
 80128c8:	e7cf      	b.n	801286a <__swbuf_r+0x1a>
 80128ca:	4b09      	ldr	r3, [pc, #36]	; (80128f0 <__swbuf_r+0xa0>)
 80128cc:	429c      	cmp	r4, r3
 80128ce:	bf08      	it	eq
 80128d0:	68ec      	ldreq	r4, [r5, #12]
 80128d2:	e7ca      	b.n	801286a <__swbuf_r+0x1a>
 80128d4:	4621      	mov	r1, r4
 80128d6:	4628      	mov	r0, r5
 80128d8:	f000 f81a 	bl	8012910 <__swsetup_r>
 80128dc:	2800      	cmp	r0, #0
 80128de:	d0cb      	beq.n	8012878 <__swbuf_r+0x28>
 80128e0:	f04f 37ff 	mov.w	r7, #4294967295
 80128e4:	e7ea      	b.n	80128bc <__swbuf_r+0x6c>
 80128e6:	bf00      	nop
 80128e8:	080136d4 	.word	0x080136d4
 80128ec:	080136f4 	.word	0x080136f4
 80128f0:	080136b4 	.word	0x080136b4

080128f4 <__ascii_wctomb>:
 80128f4:	4603      	mov	r3, r0
 80128f6:	4608      	mov	r0, r1
 80128f8:	b141      	cbz	r1, 801290c <__ascii_wctomb+0x18>
 80128fa:	2aff      	cmp	r2, #255	; 0xff
 80128fc:	d904      	bls.n	8012908 <__ascii_wctomb+0x14>
 80128fe:	228a      	movs	r2, #138	; 0x8a
 8012900:	f04f 30ff 	mov.w	r0, #4294967295
 8012904:	601a      	str	r2, [r3, #0]
 8012906:	4770      	bx	lr
 8012908:	2001      	movs	r0, #1
 801290a:	700a      	strb	r2, [r1, #0]
 801290c:	4770      	bx	lr
	...

08012910 <__swsetup_r>:
 8012910:	4b32      	ldr	r3, [pc, #200]	; (80129dc <__swsetup_r+0xcc>)
 8012912:	b570      	push	{r4, r5, r6, lr}
 8012914:	681d      	ldr	r5, [r3, #0]
 8012916:	4606      	mov	r6, r0
 8012918:	460c      	mov	r4, r1
 801291a:	b125      	cbz	r5, 8012926 <__swsetup_r+0x16>
 801291c:	69ab      	ldr	r3, [r5, #24]
 801291e:	b913      	cbnz	r3, 8012926 <__swsetup_r+0x16>
 8012920:	4628      	mov	r0, r5
 8012922:	f7fc ffa1 	bl	800f868 <__sinit>
 8012926:	4b2e      	ldr	r3, [pc, #184]	; (80129e0 <__swsetup_r+0xd0>)
 8012928:	429c      	cmp	r4, r3
 801292a:	d10f      	bne.n	801294c <__swsetup_r+0x3c>
 801292c:	686c      	ldr	r4, [r5, #4]
 801292e:	89a3      	ldrh	r3, [r4, #12]
 8012930:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012934:	0719      	lsls	r1, r3, #28
 8012936:	d42c      	bmi.n	8012992 <__swsetup_r+0x82>
 8012938:	06dd      	lsls	r5, r3, #27
 801293a:	d411      	bmi.n	8012960 <__swsetup_r+0x50>
 801293c:	2309      	movs	r3, #9
 801293e:	6033      	str	r3, [r6, #0]
 8012940:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012944:	f04f 30ff 	mov.w	r0, #4294967295
 8012948:	81a3      	strh	r3, [r4, #12]
 801294a:	e03e      	b.n	80129ca <__swsetup_r+0xba>
 801294c:	4b25      	ldr	r3, [pc, #148]	; (80129e4 <__swsetup_r+0xd4>)
 801294e:	429c      	cmp	r4, r3
 8012950:	d101      	bne.n	8012956 <__swsetup_r+0x46>
 8012952:	68ac      	ldr	r4, [r5, #8]
 8012954:	e7eb      	b.n	801292e <__swsetup_r+0x1e>
 8012956:	4b24      	ldr	r3, [pc, #144]	; (80129e8 <__swsetup_r+0xd8>)
 8012958:	429c      	cmp	r4, r3
 801295a:	bf08      	it	eq
 801295c:	68ec      	ldreq	r4, [r5, #12]
 801295e:	e7e6      	b.n	801292e <__swsetup_r+0x1e>
 8012960:	0758      	lsls	r0, r3, #29
 8012962:	d512      	bpl.n	801298a <__swsetup_r+0x7a>
 8012964:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012966:	b141      	cbz	r1, 801297a <__swsetup_r+0x6a>
 8012968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801296c:	4299      	cmp	r1, r3
 801296e:	d002      	beq.n	8012976 <__swsetup_r+0x66>
 8012970:	4630      	mov	r0, r6
 8012972:	f7ff faab 	bl	8011ecc <_free_r>
 8012976:	2300      	movs	r3, #0
 8012978:	6363      	str	r3, [r4, #52]	; 0x34
 801297a:	89a3      	ldrh	r3, [r4, #12]
 801297c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012980:	81a3      	strh	r3, [r4, #12]
 8012982:	2300      	movs	r3, #0
 8012984:	6063      	str	r3, [r4, #4]
 8012986:	6923      	ldr	r3, [r4, #16]
 8012988:	6023      	str	r3, [r4, #0]
 801298a:	89a3      	ldrh	r3, [r4, #12]
 801298c:	f043 0308 	orr.w	r3, r3, #8
 8012990:	81a3      	strh	r3, [r4, #12]
 8012992:	6923      	ldr	r3, [r4, #16]
 8012994:	b94b      	cbnz	r3, 80129aa <__swsetup_r+0x9a>
 8012996:	89a3      	ldrh	r3, [r4, #12]
 8012998:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801299c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80129a0:	d003      	beq.n	80129aa <__swsetup_r+0x9a>
 80129a2:	4621      	mov	r1, r4
 80129a4:	4630      	mov	r0, r6
 80129a6:	f000 f84d 	bl	8012a44 <__smakebuf_r>
 80129aa:	89a0      	ldrh	r0, [r4, #12]
 80129ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80129b0:	f010 0301 	ands.w	r3, r0, #1
 80129b4:	d00a      	beq.n	80129cc <__swsetup_r+0xbc>
 80129b6:	2300      	movs	r3, #0
 80129b8:	60a3      	str	r3, [r4, #8]
 80129ba:	6963      	ldr	r3, [r4, #20]
 80129bc:	425b      	negs	r3, r3
 80129be:	61a3      	str	r3, [r4, #24]
 80129c0:	6923      	ldr	r3, [r4, #16]
 80129c2:	b943      	cbnz	r3, 80129d6 <__swsetup_r+0xc6>
 80129c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80129c8:	d1ba      	bne.n	8012940 <__swsetup_r+0x30>
 80129ca:	bd70      	pop	{r4, r5, r6, pc}
 80129cc:	0781      	lsls	r1, r0, #30
 80129ce:	bf58      	it	pl
 80129d0:	6963      	ldrpl	r3, [r4, #20]
 80129d2:	60a3      	str	r3, [r4, #8]
 80129d4:	e7f4      	b.n	80129c0 <__swsetup_r+0xb0>
 80129d6:	2000      	movs	r0, #0
 80129d8:	e7f7      	b.n	80129ca <__swsetup_r+0xba>
 80129da:	bf00      	nop
 80129dc:	2000009c 	.word	0x2000009c
 80129e0:	080136d4 	.word	0x080136d4
 80129e4:	080136f4 	.word	0x080136f4
 80129e8:	080136b4 	.word	0x080136b4

080129ec <abort>:
 80129ec:	2006      	movs	r0, #6
 80129ee:	b508      	push	{r3, lr}
 80129f0:	f000 f8e8 	bl	8012bc4 <raise>
 80129f4:	2001      	movs	r0, #1
 80129f6:	f7f1 fae0 	bl	8003fba <_exit>

080129fa <__swhatbuf_r>:
 80129fa:	b570      	push	{r4, r5, r6, lr}
 80129fc:	460e      	mov	r6, r1
 80129fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a02:	4614      	mov	r4, r2
 8012a04:	2900      	cmp	r1, #0
 8012a06:	461d      	mov	r5, r3
 8012a08:	b096      	sub	sp, #88	; 0x58
 8012a0a:	da08      	bge.n	8012a1e <__swhatbuf_r+0x24>
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012a12:	602a      	str	r2, [r5, #0]
 8012a14:	061a      	lsls	r2, r3, #24
 8012a16:	d410      	bmi.n	8012a3a <__swhatbuf_r+0x40>
 8012a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a1c:	e00e      	b.n	8012a3c <__swhatbuf_r+0x42>
 8012a1e:	466a      	mov	r2, sp
 8012a20:	f000 f8ec 	bl	8012bfc <_fstat_r>
 8012a24:	2800      	cmp	r0, #0
 8012a26:	dbf1      	blt.n	8012a0c <__swhatbuf_r+0x12>
 8012a28:	9a01      	ldr	r2, [sp, #4]
 8012a2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012a2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012a32:	425a      	negs	r2, r3
 8012a34:	415a      	adcs	r2, r3
 8012a36:	602a      	str	r2, [r5, #0]
 8012a38:	e7ee      	b.n	8012a18 <__swhatbuf_r+0x1e>
 8012a3a:	2340      	movs	r3, #64	; 0x40
 8012a3c:	2000      	movs	r0, #0
 8012a3e:	6023      	str	r3, [r4, #0]
 8012a40:	b016      	add	sp, #88	; 0x58
 8012a42:	bd70      	pop	{r4, r5, r6, pc}

08012a44 <__smakebuf_r>:
 8012a44:	898b      	ldrh	r3, [r1, #12]
 8012a46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012a48:	079d      	lsls	r5, r3, #30
 8012a4a:	4606      	mov	r6, r0
 8012a4c:	460c      	mov	r4, r1
 8012a4e:	d507      	bpl.n	8012a60 <__smakebuf_r+0x1c>
 8012a50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012a54:	6023      	str	r3, [r4, #0]
 8012a56:	6123      	str	r3, [r4, #16]
 8012a58:	2301      	movs	r3, #1
 8012a5a:	6163      	str	r3, [r4, #20]
 8012a5c:	b002      	add	sp, #8
 8012a5e:	bd70      	pop	{r4, r5, r6, pc}
 8012a60:	466a      	mov	r2, sp
 8012a62:	ab01      	add	r3, sp, #4
 8012a64:	f7ff ffc9 	bl	80129fa <__swhatbuf_r>
 8012a68:	9900      	ldr	r1, [sp, #0]
 8012a6a:	4605      	mov	r5, r0
 8012a6c:	4630      	mov	r0, r6
 8012a6e:	f7fc fff7 	bl	800fa60 <_malloc_r>
 8012a72:	b948      	cbnz	r0, 8012a88 <__smakebuf_r+0x44>
 8012a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a78:	059a      	lsls	r2, r3, #22
 8012a7a:	d4ef      	bmi.n	8012a5c <__smakebuf_r+0x18>
 8012a7c:	f023 0303 	bic.w	r3, r3, #3
 8012a80:	f043 0302 	orr.w	r3, r3, #2
 8012a84:	81a3      	strh	r3, [r4, #12]
 8012a86:	e7e3      	b.n	8012a50 <__smakebuf_r+0xc>
 8012a88:	4b0d      	ldr	r3, [pc, #52]	; (8012ac0 <__smakebuf_r+0x7c>)
 8012a8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8012a8c:	89a3      	ldrh	r3, [r4, #12]
 8012a8e:	6020      	str	r0, [r4, #0]
 8012a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a94:	81a3      	strh	r3, [r4, #12]
 8012a96:	9b00      	ldr	r3, [sp, #0]
 8012a98:	6120      	str	r0, [r4, #16]
 8012a9a:	6163      	str	r3, [r4, #20]
 8012a9c:	9b01      	ldr	r3, [sp, #4]
 8012a9e:	b15b      	cbz	r3, 8012ab8 <__smakebuf_r+0x74>
 8012aa0:	4630      	mov	r0, r6
 8012aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012aa6:	f000 f8bb 	bl	8012c20 <_isatty_r>
 8012aaa:	b128      	cbz	r0, 8012ab8 <__smakebuf_r+0x74>
 8012aac:	89a3      	ldrh	r3, [r4, #12]
 8012aae:	f023 0303 	bic.w	r3, r3, #3
 8012ab2:	f043 0301 	orr.w	r3, r3, #1
 8012ab6:	81a3      	strh	r3, [r4, #12]
 8012ab8:	89a0      	ldrh	r0, [r4, #12]
 8012aba:	4305      	orrs	r5, r0
 8012abc:	81a5      	strh	r5, [r4, #12]
 8012abe:	e7cd      	b.n	8012a5c <__smakebuf_r+0x18>
 8012ac0:	0800f801 	.word	0x0800f801

08012ac4 <memchr>:
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	b510      	push	{r4, lr}
 8012ac8:	b2c9      	uxtb	r1, r1
 8012aca:	4402      	add	r2, r0
 8012acc:	4293      	cmp	r3, r2
 8012ace:	4618      	mov	r0, r3
 8012ad0:	d101      	bne.n	8012ad6 <memchr+0x12>
 8012ad2:	2000      	movs	r0, #0
 8012ad4:	e003      	b.n	8012ade <memchr+0x1a>
 8012ad6:	7804      	ldrb	r4, [r0, #0]
 8012ad8:	3301      	adds	r3, #1
 8012ada:	428c      	cmp	r4, r1
 8012adc:	d1f6      	bne.n	8012acc <memchr+0x8>
 8012ade:	bd10      	pop	{r4, pc}

08012ae0 <memmove>:
 8012ae0:	4288      	cmp	r0, r1
 8012ae2:	b510      	push	{r4, lr}
 8012ae4:	eb01 0402 	add.w	r4, r1, r2
 8012ae8:	d902      	bls.n	8012af0 <memmove+0x10>
 8012aea:	4284      	cmp	r4, r0
 8012aec:	4623      	mov	r3, r4
 8012aee:	d807      	bhi.n	8012b00 <memmove+0x20>
 8012af0:	1e43      	subs	r3, r0, #1
 8012af2:	42a1      	cmp	r1, r4
 8012af4:	d008      	beq.n	8012b08 <memmove+0x28>
 8012af6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012afa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012afe:	e7f8      	b.n	8012af2 <memmove+0x12>
 8012b00:	4601      	mov	r1, r0
 8012b02:	4402      	add	r2, r0
 8012b04:	428a      	cmp	r2, r1
 8012b06:	d100      	bne.n	8012b0a <memmove+0x2a>
 8012b08:	bd10      	pop	{r4, pc}
 8012b0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b12:	e7f7      	b.n	8012b04 <memmove+0x24>

08012b14 <_realloc_r>:
 8012b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b18:	4680      	mov	r8, r0
 8012b1a:	4614      	mov	r4, r2
 8012b1c:	460e      	mov	r6, r1
 8012b1e:	b921      	cbnz	r1, 8012b2a <_realloc_r+0x16>
 8012b20:	4611      	mov	r1, r2
 8012b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b26:	f7fc bf9b 	b.w	800fa60 <_malloc_r>
 8012b2a:	b92a      	cbnz	r2, 8012b38 <_realloc_r+0x24>
 8012b2c:	f7ff f9ce 	bl	8011ecc <_free_r>
 8012b30:	4625      	mov	r5, r4
 8012b32:	4628      	mov	r0, r5
 8012b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b38:	f000 f882 	bl	8012c40 <_malloc_usable_size_r>
 8012b3c:	4284      	cmp	r4, r0
 8012b3e:	4607      	mov	r7, r0
 8012b40:	d802      	bhi.n	8012b48 <_realloc_r+0x34>
 8012b42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012b46:	d812      	bhi.n	8012b6e <_realloc_r+0x5a>
 8012b48:	4621      	mov	r1, r4
 8012b4a:	4640      	mov	r0, r8
 8012b4c:	f7fc ff88 	bl	800fa60 <_malloc_r>
 8012b50:	4605      	mov	r5, r0
 8012b52:	2800      	cmp	r0, #0
 8012b54:	d0ed      	beq.n	8012b32 <_realloc_r+0x1e>
 8012b56:	42bc      	cmp	r4, r7
 8012b58:	4622      	mov	r2, r4
 8012b5a:	4631      	mov	r1, r6
 8012b5c:	bf28      	it	cs
 8012b5e:	463a      	movcs	r2, r7
 8012b60:	f7fc ff47 	bl	800f9f2 <memcpy>
 8012b64:	4631      	mov	r1, r6
 8012b66:	4640      	mov	r0, r8
 8012b68:	f7ff f9b0 	bl	8011ecc <_free_r>
 8012b6c:	e7e1      	b.n	8012b32 <_realloc_r+0x1e>
 8012b6e:	4635      	mov	r5, r6
 8012b70:	e7df      	b.n	8012b32 <_realloc_r+0x1e>

08012b72 <_raise_r>:
 8012b72:	291f      	cmp	r1, #31
 8012b74:	b538      	push	{r3, r4, r5, lr}
 8012b76:	4604      	mov	r4, r0
 8012b78:	460d      	mov	r5, r1
 8012b7a:	d904      	bls.n	8012b86 <_raise_r+0x14>
 8012b7c:	2316      	movs	r3, #22
 8012b7e:	6003      	str	r3, [r0, #0]
 8012b80:	f04f 30ff 	mov.w	r0, #4294967295
 8012b84:	bd38      	pop	{r3, r4, r5, pc}
 8012b86:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012b88:	b112      	cbz	r2, 8012b90 <_raise_r+0x1e>
 8012b8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012b8e:	b94b      	cbnz	r3, 8012ba4 <_raise_r+0x32>
 8012b90:	4620      	mov	r0, r4
 8012b92:	f000 f831 	bl	8012bf8 <_getpid_r>
 8012b96:	462a      	mov	r2, r5
 8012b98:	4601      	mov	r1, r0
 8012b9a:	4620      	mov	r0, r4
 8012b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ba0:	f000 b818 	b.w	8012bd4 <_kill_r>
 8012ba4:	2b01      	cmp	r3, #1
 8012ba6:	d00a      	beq.n	8012bbe <_raise_r+0x4c>
 8012ba8:	1c59      	adds	r1, r3, #1
 8012baa:	d103      	bne.n	8012bb4 <_raise_r+0x42>
 8012bac:	2316      	movs	r3, #22
 8012bae:	6003      	str	r3, [r0, #0]
 8012bb0:	2001      	movs	r0, #1
 8012bb2:	e7e7      	b.n	8012b84 <_raise_r+0x12>
 8012bb4:	2400      	movs	r4, #0
 8012bb6:	4628      	mov	r0, r5
 8012bb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012bbc:	4798      	blx	r3
 8012bbe:	2000      	movs	r0, #0
 8012bc0:	e7e0      	b.n	8012b84 <_raise_r+0x12>
	...

08012bc4 <raise>:
 8012bc4:	4b02      	ldr	r3, [pc, #8]	; (8012bd0 <raise+0xc>)
 8012bc6:	4601      	mov	r1, r0
 8012bc8:	6818      	ldr	r0, [r3, #0]
 8012bca:	f7ff bfd2 	b.w	8012b72 <_raise_r>
 8012bce:	bf00      	nop
 8012bd0:	2000009c 	.word	0x2000009c

08012bd4 <_kill_r>:
 8012bd4:	b538      	push	{r3, r4, r5, lr}
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	4d06      	ldr	r5, [pc, #24]	; (8012bf4 <_kill_r+0x20>)
 8012bda:	4604      	mov	r4, r0
 8012bdc:	4608      	mov	r0, r1
 8012bde:	4611      	mov	r1, r2
 8012be0:	602b      	str	r3, [r5, #0]
 8012be2:	f7f1 f9da 	bl	8003f9a <_kill>
 8012be6:	1c43      	adds	r3, r0, #1
 8012be8:	d102      	bne.n	8012bf0 <_kill_r+0x1c>
 8012bea:	682b      	ldr	r3, [r5, #0]
 8012bec:	b103      	cbz	r3, 8012bf0 <_kill_r+0x1c>
 8012bee:	6023      	str	r3, [r4, #0]
 8012bf0:	bd38      	pop	{r3, r4, r5, pc}
 8012bf2:	bf00      	nop
 8012bf4:	20009a20 	.word	0x20009a20

08012bf8 <_getpid_r>:
 8012bf8:	f7f1 b9c8 	b.w	8003f8c <_getpid>

08012bfc <_fstat_r>:
 8012bfc:	b538      	push	{r3, r4, r5, lr}
 8012bfe:	2300      	movs	r3, #0
 8012c00:	4d06      	ldr	r5, [pc, #24]	; (8012c1c <_fstat_r+0x20>)
 8012c02:	4604      	mov	r4, r0
 8012c04:	4608      	mov	r0, r1
 8012c06:	4611      	mov	r1, r2
 8012c08:	602b      	str	r3, [r5, #0]
 8012c0a:	f7f1 fa24 	bl	8004056 <_fstat>
 8012c0e:	1c43      	adds	r3, r0, #1
 8012c10:	d102      	bne.n	8012c18 <_fstat_r+0x1c>
 8012c12:	682b      	ldr	r3, [r5, #0]
 8012c14:	b103      	cbz	r3, 8012c18 <_fstat_r+0x1c>
 8012c16:	6023      	str	r3, [r4, #0]
 8012c18:	bd38      	pop	{r3, r4, r5, pc}
 8012c1a:	bf00      	nop
 8012c1c:	20009a20 	.word	0x20009a20

08012c20 <_isatty_r>:
 8012c20:	b538      	push	{r3, r4, r5, lr}
 8012c22:	2300      	movs	r3, #0
 8012c24:	4d05      	ldr	r5, [pc, #20]	; (8012c3c <_isatty_r+0x1c>)
 8012c26:	4604      	mov	r4, r0
 8012c28:	4608      	mov	r0, r1
 8012c2a:	602b      	str	r3, [r5, #0]
 8012c2c:	f7f1 fa22 	bl	8004074 <_isatty>
 8012c30:	1c43      	adds	r3, r0, #1
 8012c32:	d102      	bne.n	8012c3a <_isatty_r+0x1a>
 8012c34:	682b      	ldr	r3, [r5, #0]
 8012c36:	b103      	cbz	r3, 8012c3a <_isatty_r+0x1a>
 8012c38:	6023      	str	r3, [r4, #0]
 8012c3a:	bd38      	pop	{r3, r4, r5, pc}
 8012c3c:	20009a20 	.word	0x20009a20

08012c40 <_malloc_usable_size_r>:
 8012c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c44:	1f18      	subs	r0, r3, #4
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	bfbc      	itt	lt
 8012c4a:	580b      	ldrlt	r3, [r1, r0]
 8012c4c:	18c0      	addlt	r0, r0, r3
 8012c4e:	4770      	bx	lr

08012c50 <_init>:
 8012c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c52:	bf00      	nop
 8012c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c56:	bc08      	pop	{r3}
 8012c58:	469e      	mov	lr, r3
 8012c5a:	4770      	bx	lr

08012c5c <_fini>:
 8012c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c5e:	bf00      	nop
 8012c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c62:	bc08      	pop	{r3}
 8012c64:	469e      	mov	lr, r3
 8012c66:	4770      	bx	lr
