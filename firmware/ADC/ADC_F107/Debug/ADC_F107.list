
ADC_F107.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000983c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08009a2c  08009a2c  00019a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f38  08009f38  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08009f38  08009f38  00019f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f40  08009f40  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f40  08009f40  00019f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f44  08009f44  00019f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08009f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002720  200000c4  0800a00c  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200027e4  0800a00c  000227e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000242ea  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d46  00000000  00000000  000443d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001958  00000000  00000000  00049120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b8  00000000  00000000  0004aa78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024bf3  00000000  00000000  0004c230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001df7e  00000000  00000000  00070e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8699  00000000  00000000  0008eda1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015743a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075e8  00000000  00000000  00157490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000c4 	.word	0x200000c4
 800020c:	00000000 	.word	0x00000000
 8000210:	08009a14 	.word	0x08009a14

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000c8 	.word	0x200000c8
 800022c:	08009a14 	.word	0x08009a14

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_uldivmod>:
 8000254:	b953      	cbnz	r3, 800026c <__aeabi_uldivmod+0x18>
 8000256:	b94a      	cbnz	r2, 800026c <__aeabi_uldivmod+0x18>
 8000258:	2900      	cmp	r1, #0
 800025a:	bf08      	it	eq
 800025c:	2800      	cmpeq	r0, #0
 800025e:	bf1c      	itt	ne
 8000260:	f04f 31ff 	movne.w	r1, #4294967295
 8000264:	f04f 30ff 	movne.w	r0, #4294967295
 8000268:	f000 b96e 	b.w	8000548 <__aeabi_idiv0>
 800026c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000270:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	f8dd e004 	ldr.w	lr, [sp, #4]
 800027c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000280:	b004      	add	sp, #16
 8000282:	4770      	bx	lr

08000284 <__udivmoddi4>:
 8000284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000288:	9e08      	ldr	r6, [sp, #32]
 800028a:	460d      	mov	r5, r1
 800028c:	4604      	mov	r4, r0
 800028e:	468e      	mov	lr, r1
 8000290:	2b00      	cmp	r3, #0
 8000292:	f040 8083 	bne.w	800039c <__udivmoddi4+0x118>
 8000296:	428a      	cmp	r2, r1
 8000298:	4617      	mov	r7, r2
 800029a:	d947      	bls.n	800032c <__udivmoddi4+0xa8>
 800029c:	fab2 f382 	clz	r3, r2
 80002a0:	b14b      	cbz	r3, 80002b6 <__udivmoddi4+0x32>
 80002a2:	f1c3 0120 	rsb	r1, r3, #32
 80002a6:	fa05 fe03 	lsl.w	lr, r5, r3
 80002aa:	fa20 f101 	lsr.w	r1, r0, r1
 80002ae:	409f      	lsls	r7, r3
 80002b0:	ea41 0e0e 	orr.w	lr, r1, lr
 80002b4:	409c      	lsls	r4, r3
 80002b6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002ba:	fbbe fcf8 	udiv	ip, lr, r8
 80002be:	fa1f f987 	uxth.w	r9, r7
 80002c2:	fb08 e21c 	mls	r2, r8, ip, lr
 80002c6:	fb0c f009 	mul.w	r0, ip, r9
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80002d0:	4290      	cmp	r0, r2
 80002d2:	d90a      	bls.n	80002ea <__udivmoddi4+0x66>
 80002d4:	18ba      	adds	r2, r7, r2
 80002d6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80002da:	f080 8118 	bcs.w	800050e <__udivmoddi4+0x28a>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f240 8115 	bls.w	800050e <__udivmoddi4+0x28a>
 80002e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80002e8:	443a      	add	r2, r7
 80002ea:	1a12      	subs	r2, r2, r0
 80002ec:	fbb2 f0f8 	udiv	r0, r2, r8
 80002f0:	fb08 2210 	mls	r2, r8, r0, r2
 80002f4:	fb00 f109 	mul.w	r1, r0, r9
 80002f8:	b2a4      	uxth	r4, r4
 80002fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002fe:	42a1      	cmp	r1, r4
 8000300:	d909      	bls.n	8000316 <__udivmoddi4+0x92>
 8000302:	193c      	adds	r4, r7, r4
 8000304:	f100 32ff 	add.w	r2, r0, #4294967295
 8000308:	f080 8103 	bcs.w	8000512 <__udivmoddi4+0x28e>
 800030c:	42a1      	cmp	r1, r4
 800030e:	f240 8100 	bls.w	8000512 <__udivmoddi4+0x28e>
 8000312:	3802      	subs	r0, #2
 8000314:	443c      	add	r4, r7
 8000316:	1a64      	subs	r4, r4, r1
 8000318:	2100      	movs	r1, #0
 800031a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031e:	b11e      	cbz	r6, 8000328 <__udivmoddi4+0xa4>
 8000320:	2200      	movs	r2, #0
 8000322:	40dc      	lsrs	r4, r3
 8000324:	e9c6 4200 	strd	r4, r2, [r6]
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xac>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f382 	clz	r3, r2
 8000334:	2b00      	cmp	r3, #0
 8000336:	d14f      	bne.n	80003d8 <__udivmoddi4+0x154>
 8000338:	1a8d      	subs	r5, r1, r2
 800033a:	2101      	movs	r1, #1
 800033c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000340:	fa1f f882 	uxth.w	r8, r2
 8000344:	fbb5 fcfe 	udiv	ip, r5, lr
 8000348:	fb0e 551c 	mls	r5, lr, ip, r5
 800034c:	fb08 f00c 	mul.w	r0, r8, ip
 8000350:	0c22      	lsrs	r2, r4, #16
 8000352:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000356:	42a8      	cmp	r0, r5
 8000358:	d907      	bls.n	800036a <__udivmoddi4+0xe6>
 800035a:	197d      	adds	r5, r7, r5
 800035c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0xe4>
 8000362:	42a8      	cmp	r0, r5
 8000364:	f200 80e9 	bhi.w	800053a <__udivmoddi4+0x2b6>
 8000368:	4694      	mov	ip, r2
 800036a:	1a2d      	subs	r5, r5, r0
 800036c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000370:	fb0e 5510 	mls	r5, lr, r0, r5
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	b2a4      	uxth	r4, r4
 800037a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800037e:	45a0      	cmp	r8, r4
 8000380:	d907      	bls.n	8000392 <__udivmoddi4+0x10e>
 8000382:	193c      	adds	r4, r7, r4
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	d202      	bcs.n	8000390 <__udivmoddi4+0x10c>
 800038a:	45a0      	cmp	r8, r4
 800038c:	f200 80d9 	bhi.w	8000542 <__udivmoddi4+0x2be>
 8000390:	4610      	mov	r0, r2
 8000392:	eba4 0408 	sub.w	r4, r4, r8
 8000396:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039a:	e7c0      	b.n	800031e <__udivmoddi4+0x9a>
 800039c:	428b      	cmp	r3, r1
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x12e>
 80003a0:	2e00      	cmp	r6, #0
 80003a2:	f000 80b1 	beq.w	8000508 <__udivmoddi4+0x284>
 80003a6:	2100      	movs	r1, #0
 80003a8:	e9c6 0500 	strd	r0, r5, [r6]
 80003ac:	4608      	mov	r0, r1
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f183 	clz	r1, r3
 80003b6:	2900      	cmp	r1, #0
 80003b8:	d14b      	bne.n	8000452 <__udivmoddi4+0x1ce>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0x140>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80b9 	bhi.w	8000536 <__udivmoddi4+0x2b2>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb65 0303 	sbc.w	r3, r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d0aa      	beq.n	8000328 <__udivmoddi4+0xa4>
 80003d2:	e9c6 4e00 	strd	r4, lr, [r6]
 80003d6:	e7a7      	b.n	8000328 <__udivmoddi4+0xa4>
 80003d8:	409f      	lsls	r7, r3
 80003da:	f1c3 0220 	rsb	r2, r3, #32
 80003de:	40d1      	lsrs	r1, r2
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f0:	fa24 f202 	lsr.w	r2, r4, r2
 80003f4:	409d      	lsls	r5, r3
 80003f6:	fb00 fc08 	mul.w	ip, r0, r8
 80003fa:	432a      	orrs	r2, r5
 80003fc:	0c15      	lsrs	r5, r2, #16
 80003fe:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000402:	45ac      	cmp	ip, r5
 8000404:	fa04 f403 	lsl.w	r4, r4, r3
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x19a>
 800040a:	197d      	adds	r5, r7, r5
 800040c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000410:	f080 808f 	bcs.w	8000532 <__udivmoddi4+0x2ae>
 8000414:	45ac      	cmp	ip, r5
 8000416:	f240 808c 	bls.w	8000532 <__udivmoddi4+0x2ae>
 800041a:	3802      	subs	r0, #2
 800041c:	443d      	add	r5, r7
 800041e:	eba5 050c 	sub.w	r5, r5, ip
 8000422:	fbb5 f1fe 	udiv	r1, r5, lr
 8000426:	fb0e 5c11 	mls	ip, lr, r1, r5
 800042a:	fb01 f908 	mul.w	r9, r1, r8
 800042e:	b295      	uxth	r5, r2
 8000430:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000434:	45a9      	cmp	r9, r5
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x1c4>
 8000438:	197d      	adds	r5, r7, r5
 800043a:	f101 32ff 	add.w	r2, r1, #4294967295
 800043e:	d274      	bcs.n	800052a <__udivmoddi4+0x2a6>
 8000440:	45a9      	cmp	r9, r5
 8000442:	d972      	bls.n	800052a <__udivmoddi4+0x2a6>
 8000444:	3902      	subs	r1, #2
 8000446:	443d      	add	r5, r7
 8000448:	eba5 0509 	sub.w	r5, r5, r9
 800044c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000450:	e778      	b.n	8000344 <__udivmoddi4+0xc0>
 8000452:	f1c1 0720 	rsb	r7, r1, #32
 8000456:	408b      	lsls	r3, r1
 8000458:	fa22 fc07 	lsr.w	ip, r2, r7
 800045c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000460:	fa25 f407 	lsr.w	r4, r5, r7
 8000464:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000468:	fbb4 f9fe 	udiv	r9, r4, lr
 800046c:	fa1f f88c 	uxth.w	r8, ip
 8000470:	fb0e 4419 	mls	r4, lr, r9, r4
 8000474:	fa20 f307 	lsr.w	r3, r0, r7
 8000478:	fb09 fa08 	mul.w	sl, r9, r8
 800047c:	408d      	lsls	r5, r1
 800047e:	431d      	orrs	r5, r3
 8000480:	0c2b      	lsrs	r3, r5, #16
 8000482:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000486:	45a2      	cmp	sl, r4
 8000488:	fa02 f201 	lsl.w	r2, r2, r1
 800048c:	fa00 f301 	lsl.w	r3, r0, r1
 8000490:	d909      	bls.n	80004a6 <__udivmoddi4+0x222>
 8000492:	eb1c 0404 	adds.w	r4, ip, r4
 8000496:	f109 30ff 	add.w	r0, r9, #4294967295
 800049a:	d248      	bcs.n	800052e <__udivmoddi4+0x2aa>
 800049c:	45a2      	cmp	sl, r4
 800049e:	d946      	bls.n	800052e <__udivmoddi4+0x2aa>
 80004a0:	f1a9 0902 	sub.w	r9, r9, #2
 80004a4:	4464      	add	r4, ip
 80004a6:	eba4 040a 	sub.w	r4, r4, sl
 80004aa:	fbb4 f0fe 	udiv	r0, r4, lr
 80004ae:	fb0e 4410 	mls	r4, lr, r0, r4
 80004b2:	fb00 fa08 	mul.w	sl, r0, r8
 80004b6:	b2ad      	uxth	r5, r5
 80004b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004bc:	45a2      	cmp	sl, r4
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x24e>
 80004c0:	eb1c 0404 	adds.w	r4, ip, r4
 80004c4:	f100 35ff 	add.w	r5, r0, #4294967295
 80004c8:	d22d      	bcs.n	8000526 <__udivmoddi4+0x2a2>
 80004ca:	45a2      	cmp	sl, r4
 80004cc:	d92b      	bls.n	8000526 <__udivmoddi4+0x2a2>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4464      	add	r4, ip
 80004d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004d6:	fba0 8902 	umull	r8, r9, r0, r2
 80004da:	eba4 040a 	sub.w	r4, r4, sl
 80004de:	454c      	cmp	r4, r9
 80004e0:	46c6      	mov	lr, r8
 80004e2:	464d      	mov	r5, r9
 80004e4:	d319      	bcc.n	800051a <__udivmoddi4+0x296>
 80004e6:	d016      	beq.n	8000516 <__udivmoddi4+0x292>
 80004e8:	b15e      	cbz	r6, 8000502 <__udivmoddi4+0x27e>
 80004ea:	ebb3 020e 	subs.w	r2, r3, lr
 80004ee:	eb64 0405 	sbc.w	r4, r4, r5
 80004f2:	fa04 f707 	lsl.w	r7, r4, r7
 80004f6:	fa22 f301 	lsr.w	r3, r2, r1
 80004fa:	431f      	orrs	r7, r3
 80004fc:	40cc      	lsrs	r4, r1
 80004fe:	e9c6 7400 	strd	r7, r4, [r6]
 8000502:	2100      	movs	r1, #0
 8000504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000508:	4631      	mov	r1, r6
 800050a:	4630      	mov	r0, r6
 800050c:	e70c      	b.n	8000328 <__udivmoddi4+0xa4>
 800050e:	468c      	mov	ip, r1
 8000510:	e6eb      	b.n	80002ea <__udivmoddi4+0x66>
 8000512:	4610      	mov	r0, r2
 8000514:	e6ff      	b.n	8000316 <__udivmoddi4+0x92>
 8000516:	4543      	cmp	r3, r8
 8000518:	d2e6      	bcs.n	80004e8 <__udivmoddi4+0x264>
 800051a:	ebb8 0e02 	subs.w	lr, r8, r2
 800051e:	eb69 050c 	sbc.w	r5, r9, ip
 8000522:	3801      	subs	r0, #1
 8000524:	e7e0      	b.n	80004e8 <__udivmoddi4+0x264>
 8000526:	4628      	mov	r0, r5
 8000528:	e7d3      	b.n	80004d2 <__udivmoddi4+0x24e>
 800052a:	4611      	mov	r1, r2
 800052c:	e78c      	b.n	8000448 <__udivmoddi4+0x1c4>
 800052e:	4681      	mov	r9, r0
 8000530:	e7b9      	b.n	80004a6 <__udivmoddi4+0x222>
 8000532:	4608      	mov	r0, r1
 8000534:	e773      	b.n	800041e <__udivmoddi4+0x19a>
 8000536:	4608      	mov	r0, r1
 8000538:	e749      	b.n	80003ce <__udivmoddi4+0x14a>
 800053a:	f1ac 0c02 	sub.w	ip, ip, #2
 800053e:	443d      	add	r5, r7
 8000540:	e713      	b.n	800036a <__udivmoddi4+0xe6>
 8000542:	3802      	subs	r0, #2
 8000544:	443c      	add	r4, r7
 8000546:	e724      	b.n	8000392 <__udivmoddi4+0x10e>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <adc_init>:

adc_object adc_main;


void adc_init(I2C_HandleTypeDef* hi2c)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	adc_main.hi2c=hi2c;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <adc_init+0x18>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6013      	str	r3, [r2, #0]
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	2000248c 	.word	0x2000248c

08000568 <adc_loop>:


void adc_loop()
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
 while(1)
 {
   adc_read_value(&adc_main);
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <adc_loop+0x14>)
 800056e:	f000 f807 	bl	8000580 <adc_read_value>
   osDelay(ADC_UPDATE_INTERVAL);
 8000572:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000576:	f004 ff78 	bl	800546a <osDelay>
   adc_read_value(&adc_main);
 800057a:	e7f7      	b.n	800056c <adc_loop+0x4>
 800057c:	2000248c 	.word	0x2000248c

08000580 <adc_read_value>:
 }
}


void adc_read_value(adc_object* self_object)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af02      	add	r7, sp, #8
 8000586:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive(self_object->hi2c,ADC_I2C_ADDR,(uint8_t*)&self_object->adc_ch1_value,sizeof(self_object->adc_ch1_value),1000);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6818      	ldr	r0, [r3, #0]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	1d1a      	adds	r2, r3, #4
 8000590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2302      	movs	r3, #2
 8000598:	2169      	movs	r1, #105	; 0x69
 800059a:	f002 fca9 	bl	8002ef0 <HAL_I2C_Master_Receive>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <puck_event_callback>:
	 free(p);
 }
 */

void puck_event_callback(smac_event event_id)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	switch(event_id)
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d10e      	bne.n	80005d6 <puck_event_callback+0x2e>
	{
	  case SMAC_EVNT_RX_OUT_Q_CHANGED:
		  puck_main.rx_message[0]=0;
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <puck_event_callback+0x38>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	761a      	strb	r2, [r3, #24]
		  puck_main.rx_message_last_byte_index=0;
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <puck_event_callback+0x38>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	64da      	str	r2, [r3, #76]	; 0x4c
		  xQueueReset(puck_main.rxQ);
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <puck_event_callback+0x38>)
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 f87a 	bl	80056c4 <xQueueGenericReset>
		  PUCK_f();
 80005d0:	f000 fb98 	bl	8000d04 <PUCK_f>
	  break;
 80005d4:	bf00      	nop
	};
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20002494 	.word	0x20002494

080005e4 <puck_analyzer>:

analyzer_err_code puck_analyzer(uint8_t new_byte)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
  switch(puck_main.analyzer.stage)
 80005ee:	4b4b      	ldr	r3, [pc, #300]	; (800071c <puck_analyzer+0x138>)
 80005f0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	f200 808c 	bhi.w	8000712 <puck_analyzer+0x12e>
 80005fa:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <puck_analyzer+0x1c>)
 80005fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000600:	08000611 	.word	0x08000611
 8000604:	08000671 	.word	0x08000671
 8000608:	0800068f 	.word	0x0800068f
 800060c:	080006ef 	.word	0x080006ef
  {
     case PUCK_ANALYZER_STAGE1:
    	 if(puck_main.analyzer.stage1_msg[puck_main.analyzer.byte_counter]==new_byte){
 8000610:	4b42      	ldr	r3, [pc, #264]	; (800071c <puck_analyzer+0x138>)
 8000612:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000616:	4a41      	ldr	r2, [pc, #260]	; (800071c <puck_analyzer+0x138>)
 8000618:	4413      	add	r3, r2
 800061a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800061e:	79fa      	ldrb	r2, [r7, #7]
 8000620:	429a      	cmp	r2, r3
 8000622:	d11b      	bne.n	800065c <puck_analyzer+0x78>
    		 puck_main.analyzer.byte_counter++;
 8000624:	4b3d      	ldr	r3, [pc, #244]	; (800071c <puck_analyzer+0x138>)
 8000626:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800062a:	3301      	adds	r3, #1
 800062c:	4a3b      	ldr	r2, [pc, #236]	; (800071c <puck_analyzer+0x138>)
 800062e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    		 if(puck_main.analyzer.byte_counter==PUCK_CMD_LEN){
 8000632:	4b3a      	ldr	r3, [pc, #232]	; (800071c <puck_analyzer+0x138>)
 8000634:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000638:	2b06      	cmp	r3, #6
 800063a:	d167      	bne.n	800070c <puck_analyzer+0x128>
    			 puck_main.analyzer.byte_counter=0;
 800063c:	4b37      	ldr	r3, [pc, #220]	; (800071c <puck_analyzer+0x138>)
 800063e:	2200      	movs	r2, #0
 8000640:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    			 puck_main.analyzer.stage=PUCK_ANALYZER_STAGE1_DELAY;
 8000644:	4b35      	ldr	r3, [pc, #212]	; (800071c <puck_analyzer+0x138>)
 8000646:	2201      	movs	r2, #1
 8000648:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    			 timed_callback_set(puck_main.analyzer.stage1_timed_callback,75);
 800064c:	4b33      	ldr	r3, [pc, #204]	; (800071c <puck_analyzer+0x138>)
 800064e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000652:	214b      	movs	r1, #75	; 0x4b
 8000654:	4618      	mov	r0, r3
 8000656:	f001 fc33 	bl	8001ec0 <timed_callback_set>
    		 }
    	 }
    	 else {
    		 if(puck_main.analyzer.byte_counter!=0) puck_main.analyzer.byte_counter=0;
    	 }
    	break;
 800065a:	e057      	b.n	800070c <puck_analyzer+0x128>
    		 if(puck_main.analyzer.byte_counter!=0) puck_main.analyzer.byte_counter=0;
 800065c:	4b2f      	ldr	r3, [pc, #188]	; (800071c <puck_analyzer+0x138>)
 800065e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000662:	2b00      	cmp	r3, #0
 8000664:	d052      	beq.n	800070c <puck_analyzer+0x128>
 8000666:	4b2d      	ldr	r3, [pc, #180]	; (800071c <puck_analyzer+0x138>)
 8000668:	2200      	movs	r2, #0
 800066a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    	break;
 800066e:	e04d      	b.n	800070c <puck_analyzer+0x128>
    case PUCK_ANALYZER_STAGE1_DELAY:
    	timed_callback_off(puck_main.analyzer.stage1_timed_callback);
 8000670:	4b2a      	ldr	r3, [pc, #168]	; (800071c <puck_analyzer+0x138>)
 8000672:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fc37 	bl	8001eea <timed_callback_off>
    	puck_main.analyzer.byte_counter=0;
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <puck_analyzer+0x138>)
 800067e:	2200      	movs	r2, #0
 8000680:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    	puck_main.analyzer.stage=PUCK_ANALYZER_STAGE1;
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <puck_analyzer+0x138>)
 8000686:	2200      	movs	r2, #0
 8000688:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    	break;
 800068c:	e041      	b.n	8000712 <puck_analyzer+0x12e>
    case PUCK_ANALYZER_STAGE2:
		 if(puck_main.analyzer.stage2_msg[puck_main.analyzer.byte_counter]==new_byte){
 800068e:	4b23      	ldr	r3, [pc, #140]	; (800071c <puck_analyzer+0x138>)
 8000690:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <puck_analyzer+0x138>)
 8000696:	4413      	add	r3, r2
 8000698:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800069c:	79fa      	ldrb	r2, [r7, #7]
 800069e:	429a      	cmp	r2, r3
 80006a0:	d11b      	bne.n	80006da <puck_analyzer+0xf6>
			 puck_main.analyzer.byte_counter++;
 80006a2:	4b1e      	ldr	r3, [pc, #120]	; (800071c <puck_analyzer+0x138>)
 80006a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a1c      	ldr	r2, [pc, #112]	; (800071c <puck_analyzer+0x138>)
 80006ac:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
			 if(puck_main.analyzer.byte_counter==PUCK_CMD_LEN){
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <puck_analyzer+0x138>)
 80006b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80006b6:	2b06      	cmp	r3, #6
 80006b8:	d12a      	bne.n	8000710 <puck_analyzer+0x12c>
				 puck_main.analyzer.byte_counter=0;
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <puck_analyzer+0x138>)
 80006bc:	2200      	movs	r2, #0
 80006be:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				 puck_main.analyzer.stage=PUCK_ANALYZER_STAGE2_DELAY;
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <puck_analyzer+0x138>)
 80006c4:	2203      	movs	r2, #3
 80006c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
				 timed_callback_set(puck_main.analyzer.stage2_timed_callback,50);
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <puck_analyzer+0x138>)
 80006cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80006d0:	2132      	movs	r1, #50	; 0x32
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fbf4 	bl	8001ec0 <timed_callback_set>
			 }
		 }
		 else {
			 if(puck_main.analyzer.byte_counter!=0) puck_main.analyzer.byte_counter=0;
		 }
    	break;
 80006d8:	e01a      	b.n	8000710 <puck_analyzer+0x12c>
			 if(puck_main.analyzer.byte_counter!=0) puck_main.analyzer.byte_counter=0;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <puck_analyzer+0x138>)
 80006dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d015      	beq.n	8000710 <puck_analyzer+0x12c>
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <puck_analyzer+0x138>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    	break;
 80006ec:	e010      	b.n	8000710 <puck_analyzer+0x12c>
    case PUCK_ANALYZER_STAGE2_DELAY:
    	timed_callback_off(puck_main.analyzer.stage2_timed_callback);
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <puck_analyzer+0x138>)
 80006f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 fbf8 	bl	8001eea <timed_callback_off>
    	puck_main.analyzer.byte_counter=0;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <puck_analyzer+0x138>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    	puck_main.analyzer.stage=PUCK_ANALYZER_STAGE1;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <puck_analyzer+0x138>)
 8000704:	2200      	movs	r2, #0
 8000706:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    	break;
 800070a:	e002      	b.n	8000712 <puck_analyzer+0x12e>
    	break;
 800070c:	bf00      	nop
 800070e:	e000      	b.n	8000712 <puck_analyzer+0x12e>
    	break;
 8000710:	bf00      	nop
  };
  return SMAC_ANALYZER_OK;
 8000712:	2300      	movs	r3, #0
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20002494 	.word	0x20002494

08000720 <puck_stage1_timed_callback>:

void puck_stage1_timed_callback()
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  if(puck_main.analyzer.stage==PUCK_ANALYZER_STAGE1_DELAY) {
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <puck_stage1_timed_callback+0x28>)
 8000726:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800072a:	2b01      	cmp	r3, #1
 800072c:	d107      	bne.n	800073e <puck_stage1_timed_callback+0x1e>
	  puck_main.analyzer.stage=PUCK_ANALYZER_STAGE2;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <puck_stage1_timed_callback+0x28>)
 8000730:	2202      	movs	r2, #2
 8000732:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	  puck_main.analyzer.byte_counter=0;
 8000736:	4b04      	ldr	r3, [pc, #16]	; (8000748 <puck_stage1_timed_callback+0x28>)
 8000738:	2200      	movs	r2, #0
 800073a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	20002494 	.word	0x20002494

0800074c <puck_stage2_timed_callback>:

void puck_stage2_timed_callback()
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  if(puck_main.analyzer.stage==PUCK_ANALYZER_STAGE2_DELAY) {
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <puck_stage2_timed_callback+0x3c>)
 8000752:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8000756:	2b03      	cmp	r3, #3
 8000758:	d111      	bne.n	800077e <puck_stage2_timed_callback+0x32>
	puck_main.analyzer.stage=PUCK_ANALYZER_STAGE1;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <puck_stage2_timed_callback+0x3c>)
 800075c:	2200      	movs	r2, #0
 800075e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	puck_main.analyzer.byte_counter=0;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <puck_stage2_timed_callback+0x3c>)
 8000764:	2200      	movs	r2, #0
 8000766:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	puck_main.smac->active_rx_outQ=puck_main.rxQ;
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <puck_stage2_timed_callback+0x3c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a06      	ldr	r2, [pc, #24]	; (8000788 <puck_stage2_timed_callback+0x3c>)
 8000770:	6912      	ldr	r2, [r2, #16]
 8000772:	631a      	str	r2, [r3, #48]	; 0x30
	puck_main.smac->event_status=SMAC_EVNT_RX_OUT_Q_CHANGED;
 8000774:	4b04      	ldr	r3, [pc, #16]	; (8000788 <puck_stage2_timed_callback+0x3c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2201      	movs	r2, #1
 800077a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20002494 	.word	0x20002494

0800078c <puck_init>:


void puck_init( smac_controller* smac,osMessageQId rxQ,osMessageQId instrument_rxQ)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
	puck_commands_init();
 8000798:	f000 f85c 	bl	8000854 <puck_commands_init>

	puck_main.smac=smac;                                                                                  // standard initializations steps
 800079c:	4a26      	ldr	r2, [pc, #152]	; (8000838 <puck_init+0xac>)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	6013      	str	r3, [r2, #0]
	puck_main.rxQ=rxQ;                                                                                    // standard initializations steps
 80007a2:	4a25      	ldr	r2, [pc, #148]	; (8000838 <puck_init+0xac>)
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	6113      	str	r3, [r2, #16]
	smac_register_rx_outQ(puck_main.smac,puck_main.rxQ,INACTIVE_QUEUE_FLAG,&puck_event_callback);         // standard initializations steps
 80007a8:	4b23      	ldr	r3, [pc, #140]	; (8000838 <puck_init+0xac>)
 80007aa:	6818      	ldr	r0, [r3, #0]
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <puck_init+0xac>)
 80007ae:	6919      	ldr	r1, [r3, #16]
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <puck_init+0xb0>)
 80007b2:	2214      	movs	r2, #20
 80007b4:	f001 f830 	bl	8001818 <smac_register_rx_outQ>

	puck_main.rx_message_last_byte_index=0;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <puck_init+0xac>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	64da      	str	r2, [r3, #76]	; 0x4c
	puck_main.rx_mode=PUCK_RX_ASCII_MODE;
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <puck_init+0xac>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	puck_main.instrument_rxQ=instrument_rxQ;
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <puck_init+0xac>)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6153      	str	r3, [r2, #20]
	puck_main.smac->analyzer=&puck_analyzer;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <puck_init+0xac>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <puck_init+0xb4>)
 80007d2:	639a      	str	r2, [r3, #56]	; 0x38


	puck_main.analyzer.stage1_delay=750;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <puck_init+0xac>)
 80007d6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80007da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	puck_main.analyzer.stage1_delay=500;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <puck_init+0xac>)
 80007e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	memcpy(puck_main.analyzer.stage1_msg,"@@@@@@",6);
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <puck_init+0xac>)
 80007ea:	4a16      	ldr	r2, [pc, #88]	; (8000844 <puck_init+0xb8>)
 80007ec:	33a1      	adds	r3, #161	; 0xa1
 80007ee:	6810      	ldr	r0, [r2, #0]
 80007f0:	6018      	str	r0, [r3, #0]
 80007f2:	8892      	ldrh	r2, [r2, #4]
 80007f4:	809a      	strh	r2, [r3, #4]
	memcpy(puck_main.analyzer.stage2_msg,"!!!!!!",6);
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <puck_init+0xac>)
 80007f8:	4a13      	ldr	r2, [pc, #76]	; (8000848 <puck_init+0xbc>)
 80007fa:	33a7      	adds	r3, #167	; 0xa7
 80007fc:	6810      	ldr	r0, [r2, #0]
 80007fe:	6018      	str	r0, [r3, #0]
 8000800:	8892      	ldrh	r2, [r2, #4]
 8000802:	809a      	strh	r2, [r3, #4]

	puck_main.analyzer.stage=PUCK_ANALYZER_STAGE1;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <puck_init+0xac>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	puck_main.analyzer.byte_counter=0;
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <puck_init+0xac>)
 800080e:	2200      	movs	r2, #0
 8000810:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	puck_main.analyzer.stage1_timed_callback=timed_callback_register_new(&puck_stage1_timed_callback);
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <puck_init+0xc0>)
 8000816:	f001 fabd 	bl	8001d94 <timed_callback_register_new>
 800081a:	4603      	mov	r3, r0
 800081c:	4a06      	ldr	r2, [pc, #24]	; (8000838 <puck_init+0xac>)
 800081e:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	puck_main.analyzer.stage2_timed_callback=timed_callback_register_new(&puck_stage2_timed_callback);
 8000822:	480b      	ldr	r0, [pc, #44]	; (8000850 <puck_init+0xc4>)
 8000824:	f001 fab6 	bl	8001d94 <timed_callback_register_new>
 8000828:	4603      	mov	r3, r0
 800082a:	4a03      	ldr	r2, [pc, #12]	; (8000838 <puck_init+0xac>)
 800082c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20002494 	.word	0x20002494
 800083c:	080005a9 	.word	0x080005a9
 8000840:	080005e5 	.word	0x080005e5
 8000844:	08009ae8 	.word	0x08009ae8
 8000848:	08009af0 	.word	0x08009af0
 800084c:	08000721 	.word	0x08000721
 8000850:	0800074d 	.word	0x0800074d

08000854 <puck_commands_init>:


err_code puck_commands_init(void){
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0


	puck_main.cmd_functions[0] =PUCKRM_f;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <puck_commands_init+0x74>)
 800085a:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <puck_commands_init+0x78>)
 800085c:	655a      	str	r2, [r3, #84]	; 0x54
	puck_main.cmd_functions[1] =PUCKWM_f;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <puck_commands_init+0x74>)
 8000860:	4a1b      	ldr	r2, [pc, #108]	; (80008d0 <puck_commands_init+0x7c>)
 8000862:	659a      	str	r2, [r3, #88]	; 0x58
	puck_main.cmd_functions[2] =PUCKFM_f;
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <puck_commands_init+0x74>)
 8000866:	4a1b      	ldr	r2, [pc, #108]	; (80008d4 <puck_commands_init+0x80>)
 8000868:	65da      	str	r2, [r3, #92]	; 0x5c
	puck_main.cmd_functions[3] =PUCKEM_f;
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <puck_commands_init+0x74>)
 800086c:	4a1a      	ldr	r2, [pc, #104]	; (80008d8 <puck_commands_init+0x84>)
 800086e:	661a      	str	r2, [r3, #96]	; 0x60
	puck_main.cmd_functions[4] =PUCKGA_f;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <puck_commands_init+0x74>)
 8000872:	4a1a      	ldr	r2, [pc, #104]	; (80008dc <puck_commands_init+0x88>)
 8000874:	665a      	str	r2, [r3, #100]	; 0x64
	puck_main.cmd_functions[5] =PUCKSA_f;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <puck_commands_init+0x74>)
 8000878:	4a19      	ldr	r2, [pc, #100]	; (80008e0 <puck_commands_init+0x8c>)
 800087a:	669a      	str	r2, [r3, #104]	; 0x68
	puck_main.cmd_functions[6] =PUCKSZ_f;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <puck_commands_init+0x74>)
 800087e:	4a19      	ldr	r2, [pc, #100]	; (80008e4 <puck_commands_init+0x90>)
 8000880:	66da      	str	r2, [r3, #108]	; 0x6c
	puck_main.cmd_functions[7] =PUCK_f;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <puck_commands_init+0x74>)
 8000884:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <puck_commands_init+0x94>)
 8000886:	671a      	str	r2, [r3, #112]	; 0x70
	puck_main.cmd_functions[8] =PUCKTY_f;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <puck_commands_init+0x74>)
 800088a:	4a18      	ldr	r2, [pc, #96]	; (80008ec <puck_commands_init+0x98>)
 800088c:	675a      	str	r2, [r3, #116]	; 0x74
	puck_main.cmd_functions[9] =PUCKVR_f;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <puck_commands_init+0x74>)
 8000890:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <puck_commands_init+0x9c>)
 8000892:	679a      	str	r2, [r3, #120]	; 0x78
	puck_main.cmd_functions[10] =PUCKIM_f;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <puck_commands_init+0x74>)
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <puck_commands_init+0xa0>)
 8000898:	67da      	str	r2, [r3, #124]	; 0x7c
	puck_main.cmd_functions[11] =PUCKVB_f;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <puck_commands_init+0x74>)
 800089c:	4a16      	ldr	r2, [pc, #88]	; (80008f8 <puck_commands_init+0xa4>)
 800089e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	puck_main.cmd_functions[12] =PUCKSB_f;
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <puck_commands_init+0x74>)
 80008a4:	4a15      	ldr	r2, [pc, #84]	; (80008fc <puck_commands_init+0xa8>)
 80008a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	puck_main.datasheet.start_addr=(uint8_t*)&sensor_default_datasheet;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <puck_commands_init+0x74>)
 80008ac:	4a14      	ldr	r2, [pc, #80]	; (8000900 <puck_commands_init+0xac>)
 80008ae:	60da      	str	r2, [r3, #12]
	puck_main.datasheet.size=PUCK_DATASHEET_SIZE;
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <puck_commands_init+0x74>)
 80008b2:	2260      	movs	r2, #96	; 0x60
 80008b4:	605a      	str	r2, [r3, #4]
	puck_main.datasheet.data_pointer_offset=0;
 80008b6:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <puck_commands_init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]

	return RES_OK;
 80008bc:	2300      	movs	r3, #0
  }
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	20002494 	.word	0x20002494
 80008cc:	08000b91 	.word	0x08000b91
 80008d0:	08000c59 	.word	0x08000c59
 80008d4:	08000c67 	.word	0x08000c67
 80008d8:	08000c75 	.word	0x08000c75
 80008dc:	08000c85 	.word	0x08000c85
 80008e0:	08000ca1 	.word	0x08000ca1
 80008e4:	08000ce9 	.word	0x08000ce9
 80008e8:	08000d05 	.word	0x08000d05
 80008ec:	08000d21 	.word	0x08000d21
 80008f0:	08000d2f 	.word	0x08000d2f
 80008f4:	08000d3d 	.word	0x08000d3d
 80008f8:	08000d69 	.word	0x08000d69
 80008fc:	08000d77 	.word	0x08000d77
 8000900:	08009c74 	.word	0x08009c74

08000904 <puck_loop>:


void puck_loop()
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  uint8_t b;
  while(1)
  {
	  if(xQueueReceive(puck_main.rxQ,&b,1)==pdTRUE){
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <puck_loop+0x38>)
 800090c:	691b      	ldr	r3, [r3, #16]
 800090e:	1df9      	adds	r1, r7, #7
 8000910:	2201      	movs	r2, #1
 8000912:	4618      	mov	r0, r3
 8000914:	f005 f9a8 	bl	8005c68 <xQueueReceive>
 8000918:	4603      	mov	r3, r0
 800091a:	2b01      	cmp	r3, #1
 800091c:	d109      	bne.n	8000932 <puck_loop+0x2e>
		  switch(puck_main.rx_mode)
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <puck_loop+0x38>)
 8000920:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000924:	2b00      	cmp	r3, #0
 8000926:	d105      	bne.n	8000934 <puck_loop+0x30>
		  {
		   case PUCK_RX_ASCII_MODE:
		    puck_new_byte_processing(b);
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f808 	bl	8000940 <puck_new_byte_processing>
		   break;
 8000930:	e000      	b.n	8000934 <puck_loop+0x30>
		  };
 8000932:	bf00      	nop
	  }
	  osDelay(1);
 8000934:	2001      	movs	r0, #1
 8000936:	f004 fd98 	bl	800546a <osDelay>
	  if(xQueueReceive(puck_main.rxQ,&b,1)==pdTRUE){
 800093a:	e7e6      	b.n	800090a <puck_loop+0x6>
 800093c:	20002494 	.word	0x20002494

08000940 <puck_new_byte_processing>:
}



err_code puck_new_byte_processing(uint8_t new_byte)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
	int func_index;

	if(puck_update_rx_message(new_byte)==PUCK_MSG_COMPLETE){
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	4618      	mov	r0, r3
 800094e:	f000 f835 	bl	80009bc <puck_update_rx_message>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d126      	bne.n	80009a6 <puck_new_byte_processing+0x66>
		for(int i=0;i<PUCK_CMD_LEN;i++) puck_main.rx_msg_params[i]=0x00;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	e008      	b.n	8000970 <puck_new_byte_processing+0x30>
 800095e:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <puck_new_byte_processing+0x70>)
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	3322      	adds	r3, #34	; 0x22
 8000964:	2100      	movs	r1, #0
 8000966:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	3301      	adds	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	2b05      	cmp	r3, #5
 8000974:	ddf3      	ble.n	800095e <puck_new_byte_processing+0x1e>
		puck_split_rx_message(puck_main.rx_msg_params," ");
 8000976:	490f      	ldr	r1, [pc, #60]	; (80009b4 <puck_new_byte_processing+0x74>)
 8000978:	480f      	ldr	r0, [pc, #60]	; (80009b8 <puck_new_byte_processing+0x78>)
 800097a:	f000 f853 	bl	8000a24 <puck_split_rx_message>
		func_index=puck_get_cmd_pattern_index(puck_main.rx_msg_params[0]);
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <puck_new_byte_processing+0x70>)
 8000980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000984:	4618      	mov	r0, r3
 8000986:	f000 f875 	bl	8000a74 <puck_get_cmd_pattern_index>
 800098a:	4603      	mov	r3, r0
 800098c:	613b      	str	r3, [r7, #16]
		if(func_index!=PUCK_CMD_UNKNOWN)
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	2b0d      	cmp	r3, #13
 8000992:	d008      	beq.n	80009a6 <puck_new_byte_processing+0x66>
		{
			puck_err_code error_num=puck_main.cmd_functions[func_index]();
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <puck_new_byte_processing+0x70>)
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	3314      	adds	r3, #20
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	4413      	add	r3, r2
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	4798      	blx	r3
 80009a2:	4603      	mov	r3, r0
 80009a4:	73fb      	strb	r3, [r7, #15]
    	      //puck_err_patterns[puck_err_code];
             }
		    //uart_send_str("PUCKRDY\r");
		}
	}
	return 0;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20002494 	.word	0x20002494
 80009b4:	08009af8 	.word	0x08009af8
 80009b8:	2000251c 	.word	0x2000251c

080009bc <puck_update_rx_message>:

puck_message_status puck_update_rx_message(uint8_t new_byte)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]

		if(new_byte==0x0D){ //end of string detected "\n" or "\r", replace it with 0x00
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2b0d      	cmp	r3, #13
 80009ca:	d10a      	bne.n	80009e2 <puck_update_rx_message+0x26>
			puck_main.rx_message[puck_main.rx_message_last_byte_index]=0x00;
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <puck_update_rx_message+0x60>)
 80009ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d0:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <puck_update_rx_message+0x60>)
 80009d2:	4413      	add	r3, r2
 80009d4:	2200      	movs	r2, #0
 80009d6:	761a      	strb	r2, [r3, #24]
			puck_main.rx_message_last_byte_index=0;
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <puck_update_rx_message+0x60>)
 80009da:	2200      	movs	r2, #0
 80009dc:	64da      	str	r2, [r3, #76]	; 0x4c
			return PUCK_MSG_COMPLETE;
 80009de:	2300      	movs	r3, #0
 80009e0:	e017      	b.n	8000a12 <puck_update_rx_message+0x56>
		}

		puck_main.rx_message[puck_main.rx_message_last_byte_index]=new_byte;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <puck_update_rx_message+0x60>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <puck_update_rx_message+0x60>)
 80009e8:	4413      	add	r3, r2
 80009ea:	79fa      	ldrb	r2, [r7, #7]
 80009ec:	761a      	strb	r2, [r3, #24]
		puck_main.rx_message_last_byte_index++;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <puck_update_rx_message+0x60>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	3301      	adds	r3, #1
 80009f4:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <puck_update_rx_message+0x60>)
 80009f6:	64d3      	str	r3, [r2, #76]	; 0x4c
		puck_main.rx_message_last_byte_index %= PUCK_MSG_BUFFER_SIZE;
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <puck_update_rx_message+0x60>)
 80009fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <puck_update_rx_message+0x64>)
 80009fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000a02:	091b      	lsrs	r3, r3, #4
 8000a04:	2132      	movs	r1, #50	; 0x32
 8000a06:	fb01 f303 	mul.w	r3, r1, r3
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	4a03      	ldr	r2, [pc, #12]	; (8000a1c <puck_update_rx_message+0x60>)
 8000a0e:	64d3      	str	r3, [r2, #76]	; 0x4c
		return PUCK_MSG_INCOMPLETE;
 8000a10:	2301      	movs	r3, #1

}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	20002494 	.word	0x20002494
 8000a20:	51eb851f 	.word	0x51eb851f

08000a24 <puck_split_rx_message>:


err_code puck_split_rx_message(char** s_array,char* delimiter)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
    char* p = strtok ((char*)puck_main.rx_message,delimiter);
 8000a2e:	6839      	ldr	r1, [r7, #0]
 8000a30:	480f      	ldr	r0, [pc, #60]	; (8000a70 <puck_split_rx_message+0x4c>)
 8000a32:	f007 ff8d 	bl	8008950 <strtok>
 8000a36:	60f8      	str	r0, [r7, #12]
	  s_array[0]=p;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	601a      	str	r2, [r3, #0]
	for(int i=1;p!= NULL;i++){
 8000a3e:	2301      	movs	r3, #1
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	e00d      	b.n	8000a60 <puck_split_rx_message+0x3c>
    p = strtok (NULL,delimiter);
 8000a44:	6839      	ldr	r1, [r7, #0]
 8000a46:	2000      	movs	r0, #0
 8000a48:	f007 ff82 	bl	8008950 <strtok>
 8000a4c:	60f8      	str	r0, [r7, #12]
	  s_array[i]=p;
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	601a      	str	r2, [r3, #0]
	for(int i=1;p!= NULL;i++){
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1ee      	bne.n	8000a44 <puck_split_rx_message+0x20>
	}
	return 0;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200024ac 	.word	0x200024ac

08000a74 <puck_get_cmd_pattern_index>:


puck_func_index puck_get_cmd_pattern_index(char* cmd_string){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

  for(int i=0;i<PUCK_NUM_OF_COMMANDS;i++) if (strcmp(puck_cmd_patterns[i],cmd_string)==0) return i;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	e010      	b.n	8000aa4 <puck_get_cmd_pattern_index+0x30>
 8000a82:	4a0c      	ldr	r2, [pc, #48]	; (8000ab4 <puck_get_cmd_pattern_index+0x40>)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fbcf 	bl	8000230 <strcmp>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <puck_get_cmd_pattern_index+0x2a>
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	e006      	b.n	8000aac <puck_get_cmd_pattern_index+0x38>
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2b0c      	cmp	r3, #12
 8000aa8:	ddeb      	ble.n	8000a82 <puck_get_cmd_pattern_index+0xe>
  return PUCK_CMD_UNKNOWN;
 8000aaa:	230d      	movs	r3, #13

}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000000 	.word	0x20000000

08000ab8 <puck_send_integer>:


void puck_send_integer(uint32_t msg)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	char* tt=(char*)malloc(10);
 8000ac0:	200a      	movs	r0, #10
 8000ac2:	f007 fd81 	bl	80085c8 <malloc>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	60fb      	str	r3, [r7, #12]
    sprintf(tt,"%d\r",msg);
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	490c      	ldr	r1, [pc, #48]	; (8000b00 <puck_send_integer+0x48>)
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f007 fec0 	bl	8008854 <siprintf>

    if(smac_send(puck_main.smac,tt,strlen(tt),FREE_MEMORY_FLAG)!=RES_OK)
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <puck_send_integer+0x4c>)
 8000ad6:	681c      	ldr	r4, [r3, #0]
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f7ff fbb3 	bl	8000244 <strlen>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	68f9      	ldr	r1, [r7, #12]
 8000ae6:	4620      	mov	r0, r4
 8000ae8:	f000 fe64 	bl	80017b4 <smac_send>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d002      	beq.n	8000af8 <puck_send_integer+0x40>
    {
    	free(tt);
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f007 fd70 	bl	80085d8 <free>
    }
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	08009afc 	.word	0x08009afc
 8000b04:	20002494 	.word	0x20002494

08000b08 <puck_send_raw>:
void puck_send_raw(uint8_t* msg,uint32_t len,uint8_t mem_free_flag)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	4613      	mov	r3, r2
 8000b14:	71fb      	strb	r3, [r7, #7]
	err_code res=smac_send(puck_main.smac,msg,len,mem_free_flag);
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <puck_send_raw+0x3c>)
 8000b18:	6818      	ldr	r0, [r3, #0]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	68f9      	ldr	r1, [r7, #12]
 8000b22:	f000 fe47 	bl	80017b4 <smac_send>
 8000b26:	4603      	mov	r3, r0
 8000b28:	75fb      	strb	r3, [r7, #23]
    if(res!=RES_OK && mem_free_flag==FREE_MEMORY_FLAG)
 8000b2a:	7dfb      	ldrb	r3, [r7, #23]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d005      	beq.n	8000b3c <puck_send_raw+0x34>
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d102      	bne.n	8000b3c <puck_send_raw+0x34>
    {
    	free(msg);
 8000b36:	68f8      	ldr	r0, [r7, #12]
 8000b38:	f007 fd4e 	bl	80085d8 <free>
    }
}
 8000b3c:	bf00      	nop
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20002494 	.word	0x20002494

08000b48 <puck_send_string>:
void puck_send_string(char* msg,uint8_t mem_free_flag)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	70fb      	strb	r3, [r7, #3]
	err_code res=smac_send(puck_main.smac,msg,strlen(msg), mem_free_flag);
 8000b54:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <puck_send_string+0x44>)
 8000b56:	681c      	ldr	r4, [r3, #0]
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff fb73 	bl	8000244 <strlen>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	78fb      	ldrb	r3, [r7, #3]
 8000b64:	6879      	ldr	r1, [r7, #4]
 8000b66:	4620      	mov	r0, r4
 8000b68:	f000 fe24 	bl	80017b4 <smac_send>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	73fb      	strb	r3, [r7, #15]
    if(res!=RES_OK && mem_free_flag==FREE_MEMORY_FLAG)
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d005      	beq.n	8000b82 <puck_send_string+0x3a>
 8000b76:	78fb      	ldrb	r3, [r7, #3]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d102      	bne.n	8000b82 <puck_send_string+0x3a>
    {
    	free(msg);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f007 fd2b 	bl	80085d8 <free>
    }

}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd90      	pop	{r4, r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20002494 	.word	0x20002494

08000b90 <PUCKRM_f>:



puck_err_code PUCKRM_f()
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
	unsigned long num_of_rx_bytes=atol(puck_main.rx_msg_params[1]);
 8000b96:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <PUCKRM_f+0xbc>)
 8000b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f007 fbeb 	bl	8008378 <atol>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	60bb      	str	r3, [r7, #8]
	if(num_of_rx_bytes<=PUCK_MAX_READ_BYTES){
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bac:	d840      	bhi.n	8000c30 <PUCKRM_f+0xa0>
         uint8_t* new_ptr=(uint8_t*)malloc(num_of_rx_bytes+2);
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	3302      	adds	r3, #2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f007 fd08 	bl	80085c8 <malloc>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	607b      	str	r3, [r7, #4]
         new_ptr[0]='[';
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	225b      	movs	r2, #91	; 0x5b
 8000bc0:	701a      	strb	r2, [r3, #0]
         new_ptr[num_of_rx_bytes+1]=']';
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	225d      	movs	r2, #93	; 0x5d
 8000bcc:	701a      	strb	r2, [r3, #0]
         if(new_ptr){
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d025      	beq.n	8000c20 <PUCKRM_f+0x90>
        	 for(int i=1;i<=num_of_rx_bytes;i++){
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	e01e      	b.n	8000c18 <PUCKRM_f+0x88>
        		 new_ptr[i]=*(puck_main.datasheet.start_addr+puck_main.datasheet.data_pointer_offset);
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <PUCKRM_f+0xbc>)
 8000bdc:	68da      	ldr	r2, [r3, #12]
 8000bde:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <PUCKRM_f+0xbc>)
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	441a      	add	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	440b      	add	r3, r1
 8000bea:	7812      	ldrb	r2, [r2, #0]
 8000bec:	701a      	strb	r2, [r3, #0]
        		 puck_main.datasheet.data_pointer_offset++;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <PUCKRM_f+0xbc>)
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	4a15      	ldr	r2, [pc, #84]	; (8000c4c <PUCKRM_f+0xbc>)
 8000bf6:	6093      	str	r3, [r2, #8]
        		 puck_main.datasheet.data_pointer_offset%=PUCK_DATASHEET_SIZE;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <PUCKRM_f+0xbc>)
 8000bfa:	6899      	ldr	r1, [r3, #8]
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <PUCKRM_f+0xc0>)
 8000bfe:	fba3 2301 	umull	r2, r3, r3, r1
 8000c02:	099a      	lsrs	r2, r3, #6
 8000c04:	4613      	mov	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	4413      	add	r3, r2
 8000c0a:	015b      	lsls	r3, r3, #5
 8000c0c:	1aca      	subs	r2, r1, r3
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <PUCKRM_f+0xbc>)
 8000c10:	609a      	str	r2, [r3, #8]
        	 for(int i=1;i<=num_of_rx_bytes;i++){
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	3301      	adds	r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d2dc      	bcs.n	8000bda <PUCKRM_f+0x4a>
        	 }
         }
         puck_send_raw(new_ptr,num_of_rx_bytes+2,FREE_MEMORY_FLAG);
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	3302      	adds	r3, #2
 8000c24:	2200      	movs	r2, #0
 8000c26:	4619      	mov	r1, r3
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff6d 	bl	8000b08 <puck_send_raw>
 8000c2e:	e005      	b.n	8000c3c <PUCKRM_f+0xac>
	}
	else{
		puck_send_string(puck_error_messages[PUCK_ERR_ERR020],KEEP_MEMORY_FLAG);
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <PUCKRM_f+0xc4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2101      	movs	r1, #1
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff86 	bl	8000b48 <puck_send_string>
	}
	PUCK_f();
 8000c3c:	f000 f862 	bl	8000d04 <PUCK_f>
    return PUCK_ERR_NO_ERR;
 8000c40:	2306      	movs	r3, #6
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20002494 	.word	0x20002494
 8000c50:	aaaaaaab 	.word	0xaaaaaaab
 8000c54:	20000034 	.word	0x20000034

08000c58 <PUCKWM_f>:
puck_err_code PUCKWM_f()
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return PUCK_ERR_NO_ERR;
 8000c5c:	2306      	movs	r3, #6
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <PUCKFM_f>:
puck_err_code PUCKFM_f()
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  return PUCK_ERR_NO_ERR;
 8000c6a:	2306      	movs	r3, #6
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <PUCKEM_f>:
puck_err_code PUCKEM_f()
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return PUCK_ERR_NO_ERR;
 8000c78:	2306      	movs	r3, #6
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
	...

08000c84 <PUCKGA_f>:
puck_err_code PUCKGA_f()
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  puck_send_integer(puck_main.datasheet.data_pointer_offset);
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <PUCKGA_f+0x18>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff13 	bl	8000ab8 <puck_send_integer>
  PUCK_f();
 8000c92:	f000 f837 	bl	8000d04 <PUCK_f>
  return PUCK_ERR_NO_ERR;
 8000c96:	2306      	movs	r3, #6
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20002494 	.word	0x20002494

08000ca0 <PUCKSA_f>:
puck_err_code PUCKSA_f()
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
	unsigned long new_ptr=atol(puck_main.rx_msg_params[1]);
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <PUCKSA_f+0x40>)
 8000ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cac:	4618      	mov	r0, r3
 8000cae:	f007 fb63 	bl	8008378 <atol>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	607b      	str	r3, [r7, #4]
	if(new_ptr>=PUCK_DATASHEET_SIZE){
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b5f      	cmp	r3, #95	; 0x5f
 8000cba:	d906      	bls.n	8000cca <PUCKSA_f+0x2a>
		puck_send_string(puck_error_messages[PUCK_ERR_ERR021],KEEP_MEMORY_FLAG);
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <PUCKSA_f+0x44>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff40 	bl	8000b48 <puck_send_string>
 8000cc8:	e002      	b.n	8000cd0 <PUCKSA_f+0x30>
	}
	else{
		puck_main.datasheet.data_pointer_offset=new_ptr;
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <PUCKSA_f+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6093      	str	r3, [r2, #8]
	}
	PUCK_f();
 8000cd0:	f000 f818 	bl	8000d04 <PUCK_f>
	return PUCK_ERR_NO_ERR;
 8000cd4:	2306      	movs	r3, #6
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20002494 	.word	0x20002494
 8000ce4:	20000034 	.word	0x20000034

08000ce8 <PUCKSZ_f>:
puck_err_code PUCKSZ_f()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
    puck_send_integer(puck_main.datasheet.size);
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <PUCKSZ_f+0x18>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fee1 	bl	8000ab8 <puck_send_integer>
	PUCK_f();
 8000cf6:	f000 f805 	bl	8000d04 <PUCK_f>
	return PUCK_ERR_NO_ERR;
 8000cfa:	2306      	movs	r3, #6
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20002494 	.word	0x20002494

08000d04 <PUCK_f>:
puck_err_code PUCK_f()//done
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	puck_send_string(puck_messages[PUCK_MSG_PUCKRDY],KEEP_MEMORY_FLAG);
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <PUCK_f+0x18>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff1a 	bl	8000b48 <puck_send_string>
    return PUCK_ERR_NO_ERR;
 8000d14:	2306      	movs	r3, #6
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000004c 	.word	0x2000004c

08000d20 <PUCKTY_f>:
puck_err_code PUCKTY_f()
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return PUCK_ERR_NO_ERR;
 8000d24:	2306      	movs	r3, #6
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr

08000d2e <PUCKVR_f>:
puck_err_code PUCKVR_f()
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  return PUCK_ERR_NO_ERR;
 8000d32:	2306      	movs	r3, #6
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <PUCKIM_f>:
puck_err_code PUCKIM_f()
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  puck_main.smac->active_rx_outQ=ssp_main.rxQ;
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <PUCKIM_f+0x24>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <PUCKIM_f+0x28>)
 8000d46:	6852      	ldr	r2, [r2, #4]
 8000d48:	631a      	str	r2, [r3, #48]	; 0x30
  puck_main.smac->event_status=SMAC_EVNT_RX_OUT_Q_CHANGED;
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <PUCKIM_f+0x24>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return PUCK_ERR_NO_ERR;
 8000d54:	2306      	movs	r3, #6
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20002494 	.word	0x20002494
 8000d64:	2000258c 	.word	0x2000258c

08000d68 <PUCKVB_f>:
puck_err_code PUCKVB_f()
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  {
   uart_send_str("NO\r");
  }
  return 0;
  */
  return PUCK_ERR_NO_ERR;
 8000d6c:	2306      	movs	r3, #6
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr

08000d76 <PUCKSB_f>:
puck_err_code PUCKSB_f()
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
    // return error 0010
    return 6;
  }
  return 0;
  */
  return PUCK_ERR_NO_ERR;
 8000d7a:	2306      	movs	r3, #6
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <ssp_init>:

ssp_str ssp_main;
extern adc_object adc_main;

void ssp_init(smac_controller* smac,osMessageQId rxQ)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
	ssp_main.smac=smac;                                                                              // standard initializations steps
 8000d8e:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <ssp_init+0x30>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6013      	str	r3, [r2, #0]
	ssp_main.rxQ=rxQ;                                                                                // standard initializations steps
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <ssp_init+0x30>)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	6053      	str	r3, [r2, #4]
	smac_register_rx_outQ(ssp_main.smac,ssp_main.rxQ,ACTIVE_QUEUE_FLAG,&ssp_event_callback);         // standard initializations steps
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <ssp_init+0x30>)
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <ssp_init+0x30>)
 8000da0:	6859      	ldr	r1, [r3, #4]
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <ssp_init+0x34>)
 8000da4:	220a      	movs	r2, #10
 8000da6:	f000 fd37 	bl	8001818 <smac_register_rx_outQ>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000258c 	.word	0x2000258c
 8000db8:	08000dbd 	.word	0x08000dbd

08000dbc <ssp_event_callback>:


void ssp_event_callback(smac_event event_id)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
	switch(event_id)
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d10c      	bne.n	8000de6 <ssp_event_callback+0x2a>
	{
	  case SMAC_EVNT_RX_OUT_Q_CHANGED:
		  ssp_main.rx_message_last_byte_index=0;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <ssp_event_callback+0x34>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	63da      	str	r2, [r3, #60]	; 0x3c
		  ssp_main.rx_message[0]=0;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <ssp_event_callback+0x34>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	721a      	strb	r2, [r3, #8]
		  xQueueReset(ssp_main.rxQ);
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <ssp_event_callback+0x34>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f004 fc70 	bl	80056c4 <xQueueGenericReset>
	  break;
 8000de4:	bf00      	nop
	};
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	2000258c 	.word	0x2000258c

08000df4 <ssp_loop>:


void ssp_loop()
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
	uint8_t b;
	while(1)
    {
	  while(xQueueReceive(ssp_main.rxQ,&b,1)==pdTRUE){
 8000dfa:	e003      	b.n	8000e04 <ssp_loop+0x10>
			ssp_new_byte_processing(b);
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f810 	bl	8000e24 <ssp_new_byte_processing>
	  while(xQueueReceive(ssp_main.rxQ,&b,1)==pdTRUE){
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <ssp_loop+0x2c>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	1df9      	adds	r1, r7, #7
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f004 ff2b 	bl	8005c68 <xQueueReceive>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d0f1      	beq.n	8000dfc <ssp_loop+0x8>
	  }
      osDelay(1);
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f004 fb26 	bl	800546a <osDelay>
	  while(xQueueReceive(ssp_main.rxQ,&b,1)==pdTRUE){
 8000e1e:	e7f1      	b.n	8000e04 <ssp_loop+0x10>
 8000e20:	2000258c 	.word	0x2000258c

08000e24 <ssp_new_byte_processing>:
    }
}


err_code ssp_new_byte_processing(uint8_t new_byte)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
	char *path[2];
	path[0] = "action";
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <ssp_new_byte_processing+0x60>)
 8000e30:	613b      	str	r3, [r7, #16]
	path[1] = NULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]

	int action_type=0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]

	if(ssp_update_rx_message(new_byte)==SSP_MSG_COMPLETE){
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f879 	bl	8000f34 <ssp_update_rx_message>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d117      	bne.n	8000e78 <ssp_new_byte_processing+0x54>
		ssp_main.jsonMsg.string=ssp_main.rx_message;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <ssp_new_byte_processing+0x64>)
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <ssp_new_byte_processing+0x68>)
 8000e4c:	645a      	str	r2, [r3, #68]	; 0x44
		ssp_main.jsonMsg.len = strlen(ssp_main.jsonMsg.string);
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <ssp_new_byte_processing+0x64>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff f9f6 	bl	8000244 <strlen>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <ssp_new_byte_processing+0x64>)
 8000e5c:	6493      	str	r3, [r2, #72]	; 0x48
		lwJsonGetInt(path, &ssp_main.jsonMsg, &action_type);
 8000e5e:	f107 020c 	add.w	r2, r7, #12
 8000e62:	f107 0310 	add.w	r3, r7, #16
 8000e66:	490a      	ldr	r1, [pc, #40]	; (8000e90 <ssp_new_byte_processing+0x6c>)
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f006 fe21 	bl	8007ab0 <lwJsonGetInt>
		if(action_type==ACTION_DATA_REQUEST){
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d101      	bne.n	8000e78 <ssp_new_byte_processing+0x54>
			ssp_send_data();
 8000e74:	f000 f80e 	bl	8000e94 <ssp_send_data>
		}
	}
	return RES_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	08009b00 	.word	0x08009b00
 8000e88:	2000258c 	.word	0x2000258c
 8000e8c:	20002594 	.word	0x20002594
 8000e90:	200025d0 	.word	0x200025d0

08000e94 <ssp_send_data>:

char json_buffer[50];

void ssp_send_data()
{
 8000e94:	b598      	push	{r3, r4, r7, lr}
 8000e96:	af00      	add	r7, sp, #0


	ssp_main.jsonMsg.string = json_buffer;
 8000e98:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <ssp_send_data+0x84>)
 8000e9a:	4a20      	ldr	r2, [pc, #128]	; (8000f1c <ssp_send_data+0x88>)
 8000e9c:	645a      	str	r2, [r3, #68]	; 0x44
	ssp_main.jsonMsg.len = 45;
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <ssp_send_data+0x84>)
 8000ea0:	222d      	movs	r2, #45	; 0x2d
 8000ea2:	649a      	str	r2, [r3, #72]	; 0x48
	json_buffer[0]=0;
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <ssp_send_data+0x88>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
	lwJsonWriteStart(&ssp_main.jsonMsg);
 8000eaa:	481d      	ldr	r0, [pc, #116]	; (8000f20 <ssp_send_data+0x8c>)
 8000eac:	f006 fbae 	bl	800760c <lwJsonWriteStart>
	lwJsonStartObject(&ssp_main.jsonMsg);
 8000eb0:	481b      	ldr	r0, [pc, #108]	; (8000f20 <ssp_send_data+0x8c>)
 8000eb2:	f006 fbed 	bl	8007690 <lwJsonStartObject>
	lwJsonAddIntToObject(&ssp_main.jsonMsg, "adc_channel",1);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	491a      	ldr	r1, [pc, #104]	; (8000f24 <ssp_send_data+0x90>)
 8000eba:	4819      	ldr	r0, [pc, #100]	; (8000f20 <ssp_send_data+0x8c>)
 8000ebc:	f006 fc24 	bl	8007708 <lwJsonAddIntToObject>
	lwJsonAddIntToObject(&ssp_main.jsonMsg, "adc_value",adc_main.adc_ch1_value);
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <ssp_send_data+0x94>)
 8000ec2:	889b      	ldrh	r3, [r3, #4]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4919      	ldr	r1, [pc, #100]	; (8000f2c <ssp_send_data+0x98>)
 8000ec8:	4815      	ldr	r0, [pc, #84]	; (8000f20 <ssp_send_data+0x8c>)
 8000eca:	f006 fc1d 	bl	8007708 <lwJsonAddIntToObject>
	lwJsonCloseObject(&ssp_main.jsonMsg);
 8000ece:	4814      	ldr	r0, [pc, #80]	; (8000f20 <ssp_send_data+0x8c>)
 8000ed0:	f006 fbfc 	bl	80076cc <lwJsonCloseObject>
	lwJsonWriteEnd(&ssp_main.jsonMsg);
 8000ed4:	4812      	ldr	r0, [pc, #72]	; (8000f20 <ssp_send_data+0x8c>)
 8000ed6:	f006 fbb6 	bl	8007646 <lwJsonWriteEnd>
    strcat(json_buffer,"\r");
 8000eda:	4810      	ldr	r0, [pc, #64]	; (8000f1c <ssp_send_data+0x88>)
 8000edc:	f7ff f9b2 	bl	8000244 <strlen>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <ssp_send_data+0x88>)
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4911      	ldr	r1, [pc, #68]	; (8000f30 <ssp_send_data+0x9c>)
 8000eea:	461a      	mov	r2, r3
 8000eec:	460b      	mov	r3, r1
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	8013      	strh	r3, [r2, #0]
	smac_send(ssp_main.smac,json_buffer,strlen(json_buffer),KEEP_MEMORY_FLAG);json_buffer[49]=0;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <ssp_send_data+0x84>)
 8000ef4:	681c      	ldr	r4, [r3, #0]
 8000ef6:	4809      	ldr	r0, [pc, #36]	; (8000f1c <ssp_send_data+0x88>)
 8000ef8:	f7ff f9a4 	bl	8000244 <strlen>
 8000efc:	4603      	mov	r3, r0
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	2301      	movs	r3, #1
 8000f02:	4906      	ldr	r1, [pc, #24]	; (8000f1c <ssp_send_data+0x88>)
 8000f04:	4620      	mov	r0, r4
 8000f06:	f000 fc55 	bl	80017b4 <smac_send>
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <ssp_send_data+0x88>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8000f12:	bf00      	nop
 8000f14:	bd98      	pop	{r3, r4, r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2000258c 	.word	0x2000258c
 8000f1c:	20002558 	.word	0x20002558
 8000f20:	200025d0 	.word	0x200025d0
 8000f24:	08009b08 	.word	0x08009b08
 8000f28:	2000248c 	.word	0x2000248c
 8000f2c:	08009b14 	.word	0x08009b14
 8000f30:	08009b20 	.word	0x08009b20

08000f34 <ssp_update_rx_message>:


ssp_message_status ssp_update_rx_message(uint8_t new_byte)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]

		if(new_byte==0x0D){ //end of string detected "\r", replace it with 0x00
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b0d      	cmp	r3, #13
 8000f42:	d10a      	bne.n	8000f5a <ssp_update_rx_message+0x26>
			ssp_main.rx_message[ssp_main.rx_message_last_byte_index]=0x00;
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <ssp_update_rx_message+0x60>)
 8000f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f48:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <ssp_update_rx_message+0x60>)
 8000f4a:	4413      	add	r3, r2
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	721a      	strb	r2, [r3, #8]
			ssp_main.rx_message_last_byte_index=0;
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <ssp_update_rx_message+0x60>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	63da      	str	r2, [r3, #60]	; 0x3c
			return SSP_MSG_COMPLETE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e017      	b.n	8000f8a <ssp_update_rx_message+0x56>
		}

		ssp_main.rx_message[ssp_main.rx_message_last_byte_index]=new_byte;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <ssp_update_rx_message+0x60>)
 8000f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f5e:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <ssp_update_rx_message+0x60>)
 8000f60:	4413      	add	r3, r2
 8000f62:	79fa      	ldrb	r2, [r7, #7]
 8000f64:	721a      	strb	r2, [r3, #8]
		ssp_main.rx_message_last_byte_index++;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <ssp_update_rx_message+0x60>)
 8000f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	4a09      	ldr	r2, [pc, #36]	; (8000f94 <ssp_update_rx_message+0x60>)
 8000f6e:	63d3      	str	r3, [r2, #60]	; 0x3c
		ssp_main.rx_message_last_byte_index %= SSP_MSG_BUFFER_SIZE;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <ssp_update_rx_message+0x60>)
 8000f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <ssp_update_rx_message+0x64>)
 8000f76:	fba3 1302 	umull	r1, r3, r3, r2
 8000f7a:	091b      	lsrs	r3, r3, #4
 8000f7c:	2132      	movs	r1, #50	; 0x32
 8000f7e:	fb01 f303 	mul.w	r3, r1, r3
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	4a03      	ldr	r2, [pc, #12]	; (8000f94 <ssp_update_rx_message+0x60>)
 8000f86:	63d3      	str	r3, [r2, #60]	; 0x3c
		return SSP_MSG_INCOMPLETE;
 8000f88:	2301      	movs	r3, #1

}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	2000258c 	.word	0x2000258c
 8000f98:	51eb851f 	.word	0x51eb851f

08000f9c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <vApplicationGetIdleTaskMemory+0x28>)
 8000fac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2280      	movs	r2, #128	; 0x80
 8000fb8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	200000e0 	.word	0x200000e0
 8000fc8:	20000194 	.word	0x20000194

08000fcc <uart_start_rx_it>:
extern smac_list smac_main_list;



void uart_start_rx_it(UART_HandleTypeDef* huart,uint8_t* rx_byte_ptr)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]

   HAL_UART_Receive_IT(huart,rx_byte_ptr,1);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	6839      	ldr	r1, [r7, #0]
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f003 fdc3 	bl	8004b66 <HAL_UART_Receive_IT>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <uart_rx_it>:




void uart_rx_it(UART_HandleTypeDef *huart)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	for(int i=0;i<smac_main_list.new_smac_index;i++){
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	e027      	b.n	8001046 <uart_rx_it+0x5e>
		if(huart==smac_main_list.items[i]->huart){
 8000ff6:	4a18      	ldr	r2, [pc, #96]	; (8001058 <uart_rx_it+0x70>)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	429a      	cmp	r2, r3
 8001004:	d11c      	bne.n	8001040 <uart_rx_it+0x58>
			osMessagePut(smac_main_list.items[i]->rx_inQ,smac_main_list.items[i]->rx_byte_raw,1);
 8001006:	4a14      	ldr	r2, [pc, #80]	; (8001058 <uart_rx_it+0x70>)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100e:	6858      	ldr	r0, [r3, #4]
 8001010:	4a11      	ldr	r2, [pc, #68]	; (8001058 <uart_rx_it+0x70>)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001018:	7a1b      	ldrb	r3, [r3, #8]
 800101a:	2201      	movs	r2, #1
 800101c:	4619      	mov	r1, r3
 800101e:	f004 fa61 	bl	80054e4 <osMessagePut>
			uart_start_rx_it(smac_main_list.items[i]->huart,&smac_main_list.items[i]->rx_byte_raw);
 8001022:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <uart_rx_it+0x70>)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	490a      	ldr	r1, [pc, #40]	; (8001058 <uart_rx_it+0x70>)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001034:	3308      	adds	r3, #8
 8001036:	4619      	mov	r1, r3
 8001038:	4610      	mov	r0, r2
 800103a:	f7ff ffc7 	bl	8000fcc <uart_start_rx_it>
			return;
 800103e:	e008      	b.n	8001052 <uart_rx_it+0x6a>
	for(int i=0;i<smac_main_list.new_smac_index;i++){
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3301      	adds	r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <uart_rx_it+0x70>)
 8001048:	7b1b      	ldrb	r3, [r3, #12]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4293      	cmp	r3, r2
 8001050:	dbd1      	blt.n	8000ff6 <uart_rx_it+0xe>
		}
	}

}
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2000272c 	.word	0x2000272c

0800105c <uart_tx_it>:

void uart_tx_it(UART_HandleTypeDef *huart)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	for(int i=0;i<smac_main_list.new_smac_index;i++){
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	e02a      	b.n	80010c0 <uart_tx_it+0x64>
		if(huart==smac_main_list.items[i]->huart){
 800106a:	4a1a      	ldr	r2, [pc, #104]	; (80010d4 <uart_tx_it+0x78>)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	429a      	cmp	r2, r3
 8001078:	d11f      	bne.n	80010ba <uart_tx_it+0x5e>
			if(smac_main_list.items[i]->last_tx_message->free_after_use == 	FREE_MEMORY_FLAG) {
 800107a:	4a16      	ldr	r2, [pc, #88]	; (80010d4 <uart_tx_it+0x78>)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	799b      	ldrb	r3, [r3, #6]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d108      	bne.n	800109c <uart_tx_it+0x40>
			  free(smac_main_list.items[i]->last_tx_message->data_pointer);
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <uart_tx_it+0x78>)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f007 fa9e 	bl	80085d8 <free>
			}
			free(smac_main_list.items[i]->last_tx_message);
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <uart_tx_it+0x78>)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f007 fa96 	bl	80085d8 <free>
			smac_main_list.items[i]->tx_media_status=TX_MEDIA_READY;
 80010ac:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <uart_tx_it+0x78>)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b4:	2200      	movs	r2, #0
 80010b6:	751a      	strb	r2, [r3, #20]
			return;
 80010b8:	e008      	b.n	80010cc <uart_tx_it+0x70>
	for(int i=0;i<smac_main_list.new_smac_index;i++){
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3301      	adds	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <uart_tx_it+0x78>)
 80010c2:	7b1b      	ldrb	r3, [r3, #12]
 80010c4:	461a      	mov	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4293      	cmp	r3, r2
 80010ca:	dbce      	blt.n	800106a <uart_tx_it+0xe>
		}
	}
}
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2000272c 	.word	0x2000272c

080010d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d8:	b5b0      	push	{r4, r5, r7, lr}
 80010da:	b0b4      	sub	sp, #208	; 0xd0
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010de:	f000 ff39 	bl	8001f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e2:	f000 f8c9 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e6:	f000 f9d3 	bl	8001490 <MX_GPIO_Init>
  MX_DMA_Init();
 80010ea:	f000 f9b3 	bl	8001454 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80010ee:	f000 f987 	bl	8001400 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80010f2:	f000 f90b 	bl	800130c <MX_I2C1_Init>
  MX_TIM2_Init();
 80010f6:	f000 f937 	bl	8001368 <MX_TIM2_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of uart1_smac_rx_inQ */
  osMessageQDef(uart1_smac_rx_inQ, 100, uint8_t);
 80010fa:	4b4e      	ldr	r3, [pc, #312]	; (8001234 <main+0x15c>)
 80010fc:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8001100:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001102:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uart1_smac_rx_inQHandle = osMessageCreate(osMessageQ(uart1_smac_rx_inQ), NULL);
 8001106:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f004 f9c0 	bl	8005492 <osMessageCreate>
 8001112:	4603      	mov	r3, r0
 8001114:	4a48      	ldr	r2, [pc, #288]	; (8001238 <main+0x160>)
 8001116:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart1_smac_tx_outQ */
  osMessageQDef(uart1_smac_tx_outQ, 10, uint8_t*);
 8001118:	4b48      	ldr	r3, [pc, #288]	; (800123c <main+0x164>)
 800111a:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 800111e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001120:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uart1_smac_tx_outQHandle = osMessageCreate(osMessageQ(uart1_smac_tx_outQ), NULL);
 8001124:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f004 f9b1 	bl	8005492 <osMessageCreate>
 8001130:	4603      	mov	r3, r0
 8001132:	4a43      	ldr	r2, [pc, #268]	; (8001240 <main+0x168>)
 8001134:	6013      	str	r3, [r2, #0]

  /* definition and creation of puck_rxQ */
  osMessageQDef(puck_rxQ, 50, uint8_t);
 8001136:	4b43      	ldr	r3, [pc, #268]	; (8001244 <main+0x16c>)
 8001138:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 800113c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800113e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  puck_rxQHandle = osMessageCreate(osMessageQ(puck_rxQ), NULL);
 8001142:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f004 f9a2 	bl	8005492 <osMessageCreate>
 800114e:	4603      	mov	r3, r0
 8001150:	4a3d      	ldr	r2, [pc, #244]	; (8001248 <main+0x170>)
 8001152:	6013      	str	r3, [r2, #0]

  /* definition and creation of ssp_rxQ */
  osMessageQDef(ssp_rxQ, 50, uint8_t);
 8001154:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <main+0x16c>)
 8001156:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800115a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800115c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ssp_rxQHandle = osMessageCreate(osMessageQ(ssp_rxQ), NULL);
 8001160:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f004 f993 	bl	8005492 <osMessageCreate>
 800116c:	4603      	mov	r3, r0
 800116e:	4a37      	ldr	r2, [pc, #220]	; (800124c <main+0x174>)
 8001170:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8001172:	4b37      	ldr	r3, [pc, #220]	; (8001250 <main+0x178>)
 8001174:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001178:	461d      	mov	r5, r3
 800117a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800117c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800117e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001182:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001186:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f004 f920 	bl	80053d2 <osThreadCreate>
 8001192:	4603      	mov	r3, r0
 8001194:	4a2f      	ldr	r2, [pc, #188]	; (8001254 <main+0x17c>)
 8001196:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart1_smac_t */
  osThreadDef(uart1_smac_t, uart1_smac_f, osPriorityNormal, 0, 256);
 8001198:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <main+0x180>)
 800119a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800119e:	461d      	mov	r5, r3
 80011a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart1_smac_tHandle = osThreadCreate(osThread(uart1_smac_t), NULL);
 80011ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f004 f90d 	bl	80053d2 <osThreadCreate>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a28      	ldr	r2, [pc, #160]	; (800125c <main+0x184>)
 80011bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of puck_t */
  osThreadDef(puck_t, puck_f, osPriorityNormal, 0, 256);
 80011be:	4b28      	ldr	r3, [pc, #160]	; (8001260 <main+0x188>)
 80011c0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80011c4:	461d      	mov	r5, r3
 80011c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  puck_tHandle = osThreadCreate(osThread(puck_t), NULL);
 80011d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f004 f8fa 	bl	80053d2 <osThreadCreate>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a20      	ldr	r2, [pc, #128]	; (8001264 <main+0x18c>)
 80011e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of ssp_t */
  osThreadDef(ssp_t, ssp_f, osPriorityNormal, 0, 256);
 80011e4:	4b20      	ldr	r3, [pc, #128]	; (8001268 <main+0x190>)
 80011e6:	f107 0420 	add.w	r4, r7, #32
 80011ea:	461d      	mov	r5, r3
 80011ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ssp_tHandle = osThreadCreate(osThread(ssp_t), NULL);
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f004 f8e7 	bl	80053d2 <osThreadCreate>
 8001204:	4603      	mov	r3, r0
 8001206:	4a19      	ldr	r2, [pc, #100]	; (800126c <main+0x194>)
 8001208:	6013      	str	r3, [r2, #0]

  /* definition and creation of adc_t */
  osThreadDef(adc_t, adc_f, osPriorityNormal, 0, 256);
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <main+0x198>)
 800120c:	1d3c      	adds	r4, r7, #4
 800120e:	461d      	mov	r5, r3
 8001210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001214:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adc_tHandle = osThreadCreate(osThread(adc_t), NULL);
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f004 f8d6 	bl	80053d2 <osThreadCreate>
 8001226:	4603      	mov	r3, r0
 8001228:	4a12      	ldr	r2, [pc, #72]	; (8001274 <main+0x19c>)
 800122a:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800122c:	f004 f8ca 	bl	80053c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001230:	e7fe      	b.n	8001230 <main+0x158>
 8001232:	bf00      	nop
 8001234:	08009b58 	.word	0x08009b58
 8001238:	20002728 	.word	0x20002728
 800123c:	08009b68 	.word	0x08009b68
 8001240:	200025e8 	.word	0x200025e8
 8001244:	08009b78 	.word	0x08009b78
 8001248:	20002724 	.word	0x20002724
 800124c:	200025e0 	.word	0x200025e0
 8001250:	08009b88 	.word	0x08009b88
 8001254:	200025e4 	.word	0x200025e4
 8001258:	08009ba4 	.word	0x08009ba4
 800125c:	20002640 	.word	0x20002640
 8001260:	08009bc0 	.word	0x08009bc0
 8001264:	20002720 	.word	0x20002720
 8001268:	08009bdc 	.word	0x08009bdc
 800126c:	200026d4 	.word	0x200026d4
 8001270:	08009bf8 	.word	0x08009bf8
 8001274:	20002688 	.word	0x20002688

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	; 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0318 	add.w	r3, r7, #24
 8001282:	2238      	movs	r2, #56	; 0x38
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f007 f9bc 	bl	8008604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800129a:	2302      	movs	r3, #2
 800129c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129e:	2301      	movs	r3, #1
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a2:	2310      	movs	r3, #16
 80012a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012aa:	2302      	movs	r3, #2
 80012ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80012ae:	2300      	movs	r3, #0
 80012b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012bc:	f107 0318 	add.w	r3, r7, #24
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 fa6f 	bl	80037a4 <HAL_RCC_OscConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012cc:	f000 f9aa 	bl	8001624 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d0:	230f      	movs	r3, #15
 80012d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d4:	2302      	movs	r3, #2
 80012d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2101      	movs	r1, #1
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 fd70 	bl	8003dd0 <HAL_RCC_ClockConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012f6:	f000 f995 	bl	8001624 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80012fa:	4b03      	ldr	r3, [pc, #12]	; (8001308 <SystemClock_Config+0x90>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]
}
 8001300:	bf00      	nop
 8001302:	3750      	adds	r7, #80	; 0x50
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	42420070 	.word	0x42420070

0800130c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_I2C1_Init+0x50>)
 8001312:	4a13      	ldr	r2, [pc, #76]	; (8001360 <MX_I2C1_Init+0x54>)
 8001314:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_I2C1_Init+0x50>)
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <MX_I2C1_Init+0x58>)
 800131a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_I2C1_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_I2C1_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_I2C1_Init+0x50>)
 800132a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800132e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <MX_I2C1_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_I2C1_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <MX_I2C1_Init+0x50>)
 800134a:	f001 fc8d 	bl	8002c68 <HAL_I2C_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001354:	f000 f966 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200025ec 	.word	0x200025ec
 8001360:	40005400 	.word	0x40005400
 8001364:	000186a0 	.word	0x000186a0

08001368 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	463b      	mov	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_TIM2_Init+0x94>)
 8001386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800138a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_TIM2_Init+0x94>)
 800138e:	220a      	movs	r2, #10
 8001390:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_TIM2_Init+0x94>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000;
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_TIM2_Init+0x94>)
 800139a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800139e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <MX_TIM2_Init+0x94>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_TIM2_Init+0x94>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013ac:	4813      	ldr	r0, [pc, #76]	; (80013fc <MX_TIM2_Init+0x94>)
 80013ae:	f002 ff35 	bl	800421c <HAL_TIM_Base_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013b8:	f000 f934 	bl	8001624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	4619      	mov	r1, r3
 80013c8:	480c      	ldr	r0, [pc, #48]	; (80013fc <MX_TIM2_Init+0x94>)
 80013ca:	f003 f8d9 	bl	8004580 <HAL_TIM_ConfigClockSource>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013d4:	f000 f926 	bl	8001624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_TIM2_Init+0x94>)
 80013e6:	f003 fab5 	bl	8004954 <HAL_TIMEx_MasterConfigSynchronization>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013f0:	f000 f918 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200026d8 	.word	0x200026d8

08001400 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <MX_USART1_UART_Init+0x50>)
 8001408:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <MX_USART1_UART_Init+0x4c>)
 800140c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001410:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_USART1_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <MX_USART1_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001438:	f003 fb04 	bl	8004a44 <HAL_UART_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001442:	f000 f8ef 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000268c 	.word	0x2000268c
 8001450:	40013800 	.word	0x40013800

08001454 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_DMA_Init+0x38>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <MX_DMA_Init+0x38>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6153      	str	r3, [r2, #20]
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_DMA_Init+0x38>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2105      	movs	r1, #5
 8001476:	200e      	movs	r0, #14
 8001478:	f000 fe53 	bl	8002122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800147c:	200e      	movs	r0, #14
 800147e:	f000 fe6c 	bl	800215a <HAL_NVIC_EnableIRQ>

}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000

08001490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_GPIO_Init+0x40>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <MX_GPIO_Init+0x40>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	6193      	str	r3, [r2, #24]
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <MX_GPIO_Init+0x40>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <MX_GPIO_Init+0x40>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <MX_GPIO_Init+0x40>)
 80014b4:	f043 0308 	orr.w	r3, r3, #8
 80014b8:	6193      	str	r3, [r2, #24]
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <MX_GPIO_Init+0x40>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]

}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	40021000 	.word	0x40021000

080014d4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uart_rx_it(huart);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff fd83 	bl	8000fe8 <uart_rx_it>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  uart_tx_it(huart);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fdb2 	bl	800105c <uart_tx_it>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  timed_callbacks_list_init(&htim2);
 8001508:	4814      	ldr	r0, [pc, #80]	; (800155c <StartDefaultTask+0x5c>)
 800150a:	f000 fc2d 	bl	8001d68 <timed_callbacks_list_init>
  smac_list_init();
 800150e:	f000 f88f 	bl	8001630 <smac_list_init>
  uart1_smac=smac_create_new(&huart1,uart1_smac_rx_inQHandle,uart1_smac_tx_outQHandle);
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <StartDefaultTask+0x60>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a13      	ldr	r2, [pc, #76]	; (8001564 <StartDefaultTask+0x64>)
 8001518:	6812      	ldr	r2, [r2, #0]
 800151a:	4619      	mov	r1, r3
 800151c:	4812      	ldr	r0, [pc, #72]	; (8001568 <StartDefaultTask+0x68>)
 800151e:	f000 f893 	bl	8001648 <smac_create_new>
 8001522:	4603      	mov	r3, r0
 8001524:	4a11      	ldr	r2, [pc, #68]	; (800156c <StartDefaultTask+0x6c>)
 8001526:	6013      	str	r3, [r2, #0]
  puck_init(uart1_smac,puck_rxQHandle,ssp_rxQHandle);
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <StartDefaultTask+0x6c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a10      	ldr	r2, [pc, #64]	; (8001570 <StartDefaultTask+0x70>)
 800152e:	6811      	ldr	r1, [r2, #0]
 8001530:	4a10      	ldr	r2, [pc, #64]	; (8001574 <StartDefaultTask+0x74>)
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f929 	bl	800078c <puck_init>
  ssp_init(uart1_smac,ssp_rxQHandle);
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <StartDefaultTask+0x6c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <StartDefaultTask+0x74>)
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fc1d 	bl	8000d84 <ssp_init>
  adc_init(&hi2c1);
 800154a:	480b      	ldr	r0, [pc, #44]	; (8001578 <StartDefaultTask+0x78>)
 800154c:	f7fe fffe 	bl	800054c <adc_init>
	 */
	 //smac_send(uart1_smac,tt,10,KEEP_MEMORY_FLAG);

	 //sprintf(uart_buf,"adc:%d\r",adc_main.adc_ch1_value);
	 //HAL_UART_Transmit(&huart1,uart_buf,strlen(uart_buf),100);
	 osDelay(1000);
 8001550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001554:	f003 ff89 	bl	800546a <osDelay>
 8001558:	e7fa      	b.n	8001550 <StartDefaultTask+0x50>
 800155a:	bf00      	nop
 800155c:	200026d8 	.word	0x200026d8
 8001560:	20002728 	.word	0x20002728
 8001564:	200025e8 	.word	0x200025e8
 8001568:	2000268c 	.word	0x2000268c
 800156c:	200026d0 	.word	0x200026d0
 8001570:	20002724 	.word	0x20002724
 8001574:	200025e0 	.word	0x200025e0
 8001578:	200025ec 	.word	0x200025ec

0800157c <uart1_smac_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart1_smac_f */
void uart1_smac_f(void const * argument)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart1_smac_f */
  /* Infinite loop */
  osDelay(100);
 8001584:	2064      	movs	r0, #100	; 0x64
 8001586:	f003 ff70 	bl	800546a <osDelay>
  smac_loop(uart1_smac);
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <uart1_smac_f+0x20>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f8a4 	bl	80016dc <smac_loop>
  /* USER CODE END uart1_smac_f */
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200026d0 	.word	0x200026d0

080015a0 <puck_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_puck_f */
void puck_f(void const * argument)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN puck_f */
  /* Infinite loop */
  osDelay(100);
 80015a8:	2064      	movs	r0, #100	; 0x64
 80015aa:	f003 ff5e 	bl	800546a <osDelay>
  puck_loop();
 80015ae:	f7ff f9a9 	bl	8000904 <puck_loop>
  /* USER CODE END puck_f */
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <ssp_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ssp_f */
void ssp_f(void const * argument)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ssp_f */
  /* Infinite loop */
  osDelay(100);
 80015c2:	2064      	movs	r0, #100	; 0x64
 80015c4:	f003 ff51 	bl	800546a <osDelay>
  ssp_loop();
 80015c8:	f7ff fc14 	bl	8000df4 <ssp_loop>
  /* USER CODE END ssp_f */
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <adc_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_adc_f */
void adc_f(void const * argument)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN adc_f */
  /* Infinite loop */
  osDelay(100);
 80015dc:	2064      	movs	r0, #100	; 0x64
 80015de:	f003 ff44 	bl	800546a <osDelay>
  adc_loop();
 80015e2:	f7fe ffc1 	bl	8000568 <adc_loop>
  /* USER CODE END adc_f */
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a08      	ldr	r2, [pc, #32]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d102      	bne.n	8001608 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8001602:	f000 fcbd 	bl	8001f80 <HAL_IncTick>
  else if (htim->Instance == TIM2) { // should be every 10 ms
	  timed_callbacks_update();
   }

  /* USER CODE END Callback 1 */
}
 8001606:	e006      	b.n	8001616 <HAL_TIM_PeriodElapsedCallback+0x26>
  else if (htim->Instance == TIM2) { // should be every 10 ms
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001610:	d101      	bne.n	8001616 <HAL_TIM_PeriodElapsedCallback+0x26>
	  timed_callbacks_update();
 8001612:	f000 fbf7 	bl	8001e04 <timed_callbacks_update>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40012c00 	.word	0x40012c00

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162c:	e7fe      	b.n	800162c <Error_Handler+0x8>
	...

08001630 <smac_list_init>:
HAL_UART_Transmit(&huart1,"t1",2,100);
}
*/

void smac_list_init()
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
	smac_main_list.new_smac_index=0;
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <smac_list_init+0x14>)
 8001636:	2200      	movs	r2, #0
 8001638:	731a      	strb	r2, [r3, #12]
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	2000272c 	.word	0x2000272c

08001648 <smac_create_new>:



smac_controller* smac_create_new(UART_HandleTypeDef* huart,osMessageQId uart_rxQHandle,osMessageQId uart_txQHandle)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
	if(smac_main_list.new_smac_index<NUM_OF_SMAC_CONTROLLERS){
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <smac_create_new+0x90>)
 8001656:	7b1b      	ldrb	r3, [r3, #12]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d838      	bhi.n	80016ce <smac_create_new+0x86>
	  smac_controller* new_dispatcher = (smac_controller*) malloc(sizeof(smac_controller));
 800165c:	2040      	movs	r0, #64	; 0x40
 800165e:	f006 ffb3 	bl	80085c8 <malloc>
 8001662:	4603      	mov	r3, r0
 8001664:	617b      	str	r3, [r7, #20]
	  smac_main_list.items[smac_main_list.new_smac_index]=new_dispatcher;
 8001666:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <smac_create_new+0x90>)
 8001668:	7b1b      	ldrb	r3, [r3, #12]
 800166a:	4619      	mov	r1, r3
 800166c:	4a1a      	ldr	r2, [pc, #104]	; (80016d8 <smac_create_new+0x90>)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	  new_dispatcher->huart=huart;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	601a      	str	r2, [r3, #0]
	  new_dispatcher->rx_inQ=uart_rxQHandle;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	605a      	str	r2, [r3, #4]
	  new_dispatcher->tx_outQ=uart_txQHandle;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	60da      	str	r2, [r3, #12]
	  new_dispatcher->last_tx_message=0;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
	  new_dispatcher->tx_media_status=TX_MEDIA_READY;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2200      	movs	r2, #0
 8001690:	751a      	strb	r2, [r3, #20]
	  new_dispatcher->new_rx_outQ_index=0;
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	  new_dispatcher->active_rx_outQ=0;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	2200      	movs	r2, #0
 800169e:	631a      	str	r2, [r3, #48]	; 0x30
	  new_dispatcher->analyzer=0;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	2200      	movs	r2, #0
 80016a4:	639a      	str	r2, [r3, #56]	; 0x38
	  new_dispatcher->event_status=SMAC_EVNT_NONE;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	  smac_main_list.new_smac_index++;
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <smac_create_new+0x90>)
 80016b0:	7b1b      	ldrb	r3, [r3, #12]
 80016b2:	3301      	adds	r3, #1
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <smac_create_new+0x90>)
 80016b8:	731a      	strb	r2, [r3, #12]


	  uart_start_rx_it(new_dispatcher->huart,&new_dispatcher->rx_byte_raw);
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3308      	adds	r3, #8
 80016c2:	4619      	mov	r1, r3
 80016c4:	4610      	mov	r0, r2
 80016c6:	f7ff fc81 	bl	8000fcc <uart_start_rx_it>

      return new_dispatcher;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	e000      	b.n	80016d0 <smac_create_new+0x88>
	}
	return 0;
 80016ce:	2300      	movs	r3, #0

}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	2000272c 	.word	0x2000272c

080016dc <smac_loop>:


void smac_loop(smac_controller* self_object)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
   uint8_t b;
   while(1)
   {
	  //Events
	  if(self_object->event_status!=SMAC_EVNT_NONE){
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d02d      	beq.n	800174a <smac_loop+0x6e>
		  for(int i=0;i<self_object->new_rx_outQ_index;i++){
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	e00d      	b.n	8001710 <smac_loop+0x34>
			  self_object->event_callback[i](self_object->event_status);
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3308      	adds	r3, #8
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8001706:	4610      	mov	r0, r2
 8001708:	4798      	blx	r3
		  for(int i=0;i<self_object->new_rx_outQ_index;i++){
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3301      	adds	r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4293      	cmp	r3, r2
 800171c:	dbea      	blt.n	80016f4 <smac_loop+0x18>
		  }
		  self_object->event_status=SMAC_EVNT_NONE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	  }

	  //RX part
      while(xQueueReceive(self_object->rx_inQ,&b,1)==pdTRUE){
 8001726:	e010      	b.n	800174a <smac_loop+0x6e>
    	  if(self_object->analyzer!=0) self_object->analyzer(b);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172c:	2b00      	cmp	r3, #0
 800172e:	d004      	beq.n	800173a <smac_loop+0x5e>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001734:	7afa      	ldrb	r2, [r7, #11]
 8001736:	4610      	mov	r0, r2
 8001738:	4798      	blx	r3
    	  osMessagePut(self_object->active_rx_outQ,b,1);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	7afa      	ldrb	r2, [r7, #11]
 8001740:	4611      	mov	r1, r2
 8001742:	2201      	movs	r2, #1
 8001744:	4618      	mov	r0, r3
 8001746:	f003 fecd 	bl	80054e4 <osMessagePut>
      while(xQueueReceive(self_object->rx_inQ,&b,1)==pdTRUE){
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f107 010b 	add.w	r1, r7, #11
 8001752:	2201      	movs	r2, #1
 8001754:	4618      	mov	r0, r3
 8001756:	f004 fa87 	bl	8005c68 <xQueueReceive>
 800175a:	4603      	mov	r3, r0
 800175c:	2b01      	cmp	r3, #1
 800175e:	d0e3      	beq.n	8001728 <smac_loop+0x4c>
	  }

      //TX part
      while(uxQueueMessagesWaiting(self_object->tx_outQ)>0){
 8001760:	e01c      	b.n	800179c <smac_loop+0xc0>
        if(self_object->tx_media_status==TX_MEDIA_READY){
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7d1b      	ldrb	r3, [r3, #20]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d118      	bne.n	800179c <smac_loop+0xc0>
          if(xQueueReceive(self_object->tx_outQ,&self_object->last_tx_message,1)==pdTRUE){
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68d8      	ldr	r0, [r3, #12]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3310      	adds	r3, #16
 8001772:	2201      	movs	r2, #1
 8001774:	4619      	mov	r1, r3
 8001776:	f004 fa77 	bl	8005c68 <xQueueReceive>
 800177a:	4603      	mov	r3, r0
 800177c:	2b01      	cmp	r3, #1
 800177e:	d10d      	bne.n	800179c <smac_loop+0xc0>
    	       self_object->tx_media_status=TX_MEDIA_BUSY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	751a      	strb	r2, [r3, #20]
               HAL_UART_Transmit_IT(self_object->huart,self_object->last_tx_message->data_pointer,self_object->last_tx_message->data_size);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	6819      	ldr	r1, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	889b      	ldrh	r3, [r3, #4]
 8001796:	461a      	mov	r2, r3
 8001798:	f003 f9a1 	bl	8004ade <HAL_UART_Transmit_IT>
      while(uxQueueMessagesWaiting(self_object->tx_outQ)>0){
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f004 fb41 	bl	8005e28 <uxQueueMessagesWaiting>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1da      	bne.n	8001762 <smac_loop+0x86>
           }
         }
      }

     osDelay(1);
 80017ac:	2001      	movs	r0, #1
 80017ae:	f003 fe5c 	bl	800546a <osDelay>
	  if(self_object->event_status!=SMAC_EVNT_NONE){
 80017b2:	e797      	b.n	80016e4 <smac_loop+0x8>

080017b4 <smac_send>:
   }
}

err_code smac_send(smac_controller* self_object,void* mem_ptr,uint16_t mem_size, uint8_t mem_free_after_use_flag)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	4611      	mov	r1, r2
 80017c0:	461a      	mov	r2, r3
 80017c2:	460b      	mov	r3, r1
 80017c4:	80fb      	strh	r3, [r7, #6]
 80017c6:	4613      	mov	r3, r2
 80017c8:	717b      	strb	r3, [r7, #5]
   if(mem_size>0){
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d01e      	beq.n	800180e <smac_send+0x5a>
	memory_block_ptr* new_memory_block_pointer=(memory_block_ptr*) malloc(sizeof(memory_block_ptr));
 80017d0:	2008      	movs	r0, #8
 80017d2:	f006 fef9 	bl	80085c8 <malloc>
 80017d6:	4603      	mov	r3, r0
 80017d8:	617b      	str	r3, [r7, #20]

	new_memory_block_pointer->data_pointer=mem_ptr;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	68ba      	ldr	r2, [r7, #8]
 80017de:	601a      	str	r2, [r3, #0]
	new_memory_block_pointer->data_size=mem_size;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	88fa      	ldrh	r2, [r7, #6]
 80017e4:	809a      	strh	r2, [r3, #4]
	new_memory_block_pointer->free_after_use=mem_free_after_use_flag;
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	797a      	ldrb	r2, [r7, #5]
 80017ea:	719a      	strb	r2, [r3, #6]

	if(osMessagePut(self_object->tx_outQ,(uint32_t)new_memory_block_pointer,1)==osOK){
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	6979      	ldr	r1, [r7, #20]
 80017f2:	2201      	movs	r2, #1
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 fe75 	bl	80054e4 <osMessagePut>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <smac_send+0x50>
	 return RES_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	e005      	b.n	8001810 <smac_send+0x5c>
	}
	else{
	 free(new_memory_block_pointer);
 8001804:	6978      	ldr	r0, [r7, #20]
 8001806:	f006 fee7 	bl	80085d8 <free>
	 return RES_ERR;
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <smac_send+0x5c>
	}
   }
   else{
		return RES_ERR;
 800180e:	2301      	movs	r3, #1
   }
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <smac_register_rx_outQ>:

err_code smac_register_rx_outQ(smac_controller* self_object, osMessageQId   rx_outQ, uint8_t activeQ_flag, void (*event_callback)(smac_event event_id))
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	4613      	mov	r3, r2
 8001826:	71fb      	strb	r3, [r7, #7]
	if(self_object->new_rx_outQ_index<NUM_OF_RX_OUT_QUEUES){
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800182e:	2b02      	cmp	r3, #2
 8001830:	d821      	bhi.n	8001876 <smac_register_rx_outQ+0x5e>
		 self_object->rx_outQ[self_object->new_rx_outQ_index]=rx_outQ;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001838:	461a      	mov	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3206      	adds	r2, #6
 800183e:	68b9      	ldr	r1, [r7, #8]
 8001840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		 if(activeQ_flag==ACTIVE_QUEUE_FLAG) self_object->active_rx_outQ=rx_outQ;
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	2b0a      	cmp	r3, #10
 8001848:	d102      	bne.n	8001850 <smac_register_rx_outQ+0x38>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
		 self_object->event_callback[self_object->new_rx_outQ_index]=event_callback;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	3308      	adds	r3, #8
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	605a      	str	r2, [r3, #4]
		 self_object->new_rx_outQ_index++;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001868:	3301      	adds	r3, #1
 800186a:	b2da      	uxtb	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	     return RES_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <smac_register_rx_outQ+0x60>
	}
	return RES_ERR;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
	...

08001884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_MspInit+0x68>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	4a17      	ldr	r2, [pc, #92]	; (80018ec <HAL_MspInit+0x68>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6193      	str	r3, [r2, #24]
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_MspInit+0x68>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_MspInit+0x68>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a11      	ldr	r2, [pc, #68]	; (80018ec <HAL_MspInit+0x68>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HAL_MspInit+0x68>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	210f      	movs	r1, #15
 80018be:	f06f 0001 	mvn.w	r0, #1
 80018c2:	f000 fc2e 	bl	8002122 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_MspInit+0x6c>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <HAL_MspInit+0x6c>)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40010000 	.word	0x40010000

080018f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a15      	ldr	r2, [pc, #84]	; (8001964 <HAL_I2C_MspInit+0x70>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d123      	bne.n	800195c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_I2C_MspInit+0x74>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	4a13      	ldr	r2, [pc, #76]	; (8001968 <HAL_I2C_MspInit+0x74>)
 800191a:	f043 0308 	orr.w	r3, r3, #8
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_I2C_MspInit+0x74>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800192c:	23c0      	movs	r3, #192	; 0xc0
 800192e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001930:	2312      	movs	r3, #18
 8001932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	4619      	mov	r1, r3
 800193e:	480b      	ldr	r0, [pc, #44]	; (800196c <HAL_I2C_MspInit+0x78>)
 8001940:	f001 f80e 	bl	8002960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_I2C_MspInit+0x74>)
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	4a07      	ldr	r2, [pc, #28]	; (8001968 <HAL_I2C_MspInit+0x74>)
 800194a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800194e:	61d3      	str	r3, [r2, #28]
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_I2C_MspInit+0x74>)
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800195c:	bf00      	nop
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40005400 	.word	0x40005400
 8001968:	40021000 	.word	0x40021000
 800196c:	40010c00 	.word	0x40010c00

08001970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001980:	d113      	bne.n	80019aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_TIM_Base_MspInit+0x44>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a0b      	ldr	r2, [pc, #44]	; (80019b4 <HAL_TIM_Base_MspInit+0x44>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	61d3      	str	r3, [r2, #28]
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_TIM_Base_MspInit+0x44>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2105      	movs	r1, #5
 800199e:	201c      	movs	r0, #28
 80019a0:	f000 fbbf 	bl	8002122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019a4:	201c      	movs	r0, #28
 80019a6:	f000 fbd8 	bl	800215a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000

080019b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0310 	add.w	r3, r7, #16
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a33      	ldr	r2, [pc, #204]	; (8001aa0 <HAL_UART_MspInit+0xe8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d15f      	bne.n	8001a98 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019d8:	4b32      	ldr	r3, [pc, #200]	; (8001aa4 <HAL_UART_MspInit+0xec>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a31      	ldr	r2, [pc, #196]	; (8001aa4 <HAL_UART_MspInit+0xec>)
 80019de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <HAL_UART_MspInit+0xec>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <HAL_UART_MspInit+0xec>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a2b      	ldr	r2, [pc, #172]	; (8001aa4 <HAL_UART_MspInit+0xec>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <HAL_UART_MspInit+0xec>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4822      	ldr	r0, [pc, #136]	; (8001aa8 <HAL_UART_MspInit+0xf0>)
 8001a1e:	f000 ff9f 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	4619      	mov	r1, r3
 8001a36:	481c      	ldr	r0, [pc, #112]	; (8001aa8 <HAL_UART_MspInit+0xf0>)
 8001a38:	f000 ff92 	bl	8002960 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_UART_MspInit+0xf4>)
 8001a3e:	4a1c      	ldr	r2, [pc, #112]	; (8001ab0 <HAL_UART_MspInit+0xf8>)
 8001a40:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <HAL_UART_MspInit+0xf4>)
 8001a44:	2210      	movs	r2, #16
 8001a46:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a48:	4b18      	ldr	r3, [pc, #96]	; (8001aac <HAL_UART_MspInit+0xf4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <HAL_UART_MspInit+0xf4>)
 8001a50:	2280      	movs	r2, #128	; 0x80
 8001a52:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <HAL_UART_MspInit+0xf4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_UART_MspInit+0xf4>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_UART_MspInit+0xf4>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_UART_MspInit+0xf4>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001a6c:	480f      	ldr	r0, [pc, #60]	; (8001aac <HAL_UART_MspInit+0xf4>)
 8001a6e:	f000 fb83 	bl	8002178 <HAL_DMA_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001a78:	f7ff fdd4 	bl	8001624 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <HAL_UART_MspInit+0xf4>)
 8001a80:	635a      	str	r2, [r3, #52]	; 0x34
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_UART_MspInit+0xf4>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2105      	movs	r1, #5
 8001a8c:	2025      	movs	r0, #37	; 0x25
 8001a8e:	f000 fb48 	bl	8002122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a92:	2025      	movs	r0, #37	; 0x25
 8001a94:	f000 fb61 	bl	800215a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a98:	bf00      	nop
 8001a9a:	3720      	adds	r7, #32
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40013800 	.word	0x40013800
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010800 	.word	0x40010800
 8001aac:	20002644 	.word	0x20002644
 8001ab0:	40020044 	.word	0x40020044

08001ab4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08c      	sub	sp, #48	; 0x30
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	2019      	movs	r0, #25
 8001aca:	f000 fb2a 	bl	8002122 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ace:	2019      	movs	r0, #25
 8001ad0:	f000 fb43 	bl	800215a <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ad4:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <HAL_InitTick+0x9c>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a1d      	ldr	r2, [pc, #116]	; (8001b50 <HAL_InitTick+0x9c>)
 8001ada:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <HAL_InitTick+0x9c>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001aec:	f107 0210 	add.w	r2, r7, #16
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4611      	mov	r1, r2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 fb42 	bl	8004180 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001afc:	f002 fb2c 	bl	8004158 <HAL_RCC_GetPCLK2Freq>
 8001b00:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b04:	4a13      	ldr	r2, [pc, #76]	; (8001b54 <HAL_InitTick+0xa0>)
 8001b06:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0a:	0c9b      	lsrs	r3, r3, #18
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_InitTick+0xa4>)
 8001b12:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <HAL_InitTick+0xa8>)
 8001b14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <HAL_InitTick+0xa4>)
 8001b18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b1c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b1e:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <HAL_InitTick+0xa4>)
 8001b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b22:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <HAL_InitTick+0xa4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_InitTick+0xa4>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001b30:	4809      	ldr	r0, [pc, #36]	; (8001b58 <HAL_InitTick+0xa4>)
 8001b32:	f002 fb73 	bl	800421c <HAL_TIM_Base_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d104      	bne.n	8001b46 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001b3c:	4806      	ldr	r0, [pc, #24]	; (8001b58 <HAL_InitTick+0xa4>)
 8001b3e:	f002 fbbd 	bl	80042bc <HAL_TIM_Base_Start_IT>
 8001b42:	4603      	mov	r3, r0
 8001b44:	e000      	b.n	8001b48 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3730      	adds	r7, #48	; 0x30
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000
 8001b54:	431bde83 	.word	0x431bde83
 8001b58:	2000273c 	.word	0x2000273c
 8001b5c:	40012c00 	.word	0x40012c00

08001b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <NMI_Handler+0x4>

08001b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <HardFault_Handler+0x4>

08001b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <MemManage_Handler+0x4>

08001b72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <BusFault_Handler+0x4>

08001b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <UsageFault_Handler+0x4>

08001b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
	...

08001b8c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <DMA1_Channel4_IRQHandler+0x10>)
 8001b92:	f000 fca9 	bl	80024e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20002644 	.word	0x20002644

08001ba0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <TIM1_UP_IRQHandler+0x10>)
 8001ba6:	f002 fbe3 	bl	8004370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	2000273c 	.word	0x2000273c

08001bb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <TIM2_IRQHandler+0x10>)
 8001bba:	f002 fbd9 	bl	8004370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200026d8 	.word	0x200026d8

08001bc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <USART1_IRQHandler+0x10>)
 8001bce:	f002 fffb 	bl	8004bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000268c 	.word	0x2000268c

08001bdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
	return 1;
 8001be0:	2301      	movs	r3, #1
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <_kill>:

int _kill(int pid, int sig)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bf4:	f006 fbc4 	bl	8008380 <__errno>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2216      	movs	r2, #22
 8001bfc:	601a      	str	r2, [r3, #0]
	return -1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_exit>:

void _exit (int status)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c12:	f04f 31ff 	mov.w	r1, #4294967295
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffe7 	bl	8001bea <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c1c:	e7fe      	b.n	8001c1c <_exit+0x12>

08001c1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	e00a      	b.n	8001c46 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c30:	f3af 8000 	nop.w
 8001c34:	4601      	mov	r1, r0
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	60ba      	str	r2, [r7, #8]
 8001c3c:	b2ca      	uxtb	r2, r1
 8001c3e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	3301      	adds	r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	dbf0      	blt.n	8001c30 <_read+0x12>
	}

return len;
 8001c4e:	687b      	ldr	r3, [r7, #4]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	e009      	b.n	8001c7e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	60ba      	str	r2, [r7, #8]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	dbf1      	blt.n	8001c6a <_write+0x12>
	}
	return len;
 8001c86:	687b      	ldr	r3, [r7, #4]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_close>:

int _close(int file)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	return -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr

08001ca6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cb6:	605a      	str	r2, [r3, #4]
	return 0;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <_isatty>:

int _isatty(int file)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	return 1;
 8001ccc:	2301      	movs	r3, #1
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf8:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <_sbrk+0x5c>)
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <_sbrk+0x60>)
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <_sbrk+0x64>)
 8001d0e:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <_sbrk+0x68>)
 8001d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d207      	bcs.n	8001d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d20:	f006 fb2e 	bl	8008380 <__errno>
 8001d24:	4603      	mov	r3, r0
 8001d26:	220c      	movs	r2, #12
 8001d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	e009      	b.n	8001d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4a05      	ldr	r2, [pc, #20]	; (8001d54 <_sbrk+0x64>)
 8001d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20010000 	.word	0x20010000
 8001d50:	00000400 	.word	0x00000400
 8001d54:	20000394 	.word	0x20000394
 8001d58:	200027e8 	.word	0x200027e8

08001d5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <timed_callbacks_list_init>:


timed_callbacks_list_t  timed_callbacks_list;

void timed_callbacks_list_init(TIM_HandleTypeDef* htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	timed_callbacks_list.new_callback_index=0;
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <timed_callbacks_list_init+0x28>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	751a      	strb	r2, [r3, #20]
	timed_callbacks_list.htim=htim;
 8001d76:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <timed_callbacks_list_init+0x28>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6193      	str	r3, [r2, #24]
	HAL_TIM_Base_Start_IT(timed_callbacks_list.htim);
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <timed_callbacks_list_init+0x28>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f002 fa9b 	bl	80042bc <HAL_TIM_Base_Start_IT>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20002784 	.word	0x20002784

08001d94 <timed_callback_register_new>:

timed_callback_t* timed_callback_register_new(void (*callback)(void))
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	if(timed_callbacks_list.new_callback_index<NUM_OF_TIMERS){
 8001d9c:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <timed_callback_register_new+0x6c>)
 8001d9e:	7d1b      	ldrb	r3, [r3, #20]
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d828      	bhi.n	8001df6 <timed_callback_register_new+0x62>
		timed_callback_t* new_chronometer = (timed_callback_t*) malloc(sizeof(timed_callback_t));
 8001da4:	2010      	movs	r0, #16
 8001da6:	f006 fc0f 	bl	80085c8 <malloc>
 8001daa:	4603      	mov	r3, r0
 8001dac:	60fb      	str	r3, [r7, #12]
		timed_callbacks_list.callbacks[timed_callbacks_list.new_callback_index]=new_chronometer;
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <timed_callback_register_new+0x6c>)
 8001db0:	7d1b      	ldrb	r3, [r3, #20]
 8001db2:	4619      	mov	r1, r3
 8001db4:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <timed_callback_register_new+0x6c>)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

		new_chronometer->status=TIMER_TIMED_OUT;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
		new_chronometer->value=0;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	605a      	str	r2, [r3, #4]
		new_chronometer->target_time=0;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
		if(callback!=0) new_chronometer->callback=callback=callback;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <timed_callback_register_new+0x48>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	e004      	b.n	8001de6 <timed_callback_register_new+0x52>
		else new_chronometer->callback=callback=0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	60da      	str	r2, [r3, #12]

		timed_callbacks_list.new_callback_index++;
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <timed_callback_register_new+0x6c>)
 8001de8:	7d1b      	ldrb	r3, [r3, #20]
 8001dea:	3301      	adds	r3, #1
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <timed_callback_register_new+0x6c>)
 8001df0:	751a      	strb	r2, [r3, #20]

		return new_chronometer;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	e000      	b.n	8001df8 <timed_callback_register_new+0x64>
	}
	return 0;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20002784 	.word	0x20002784

08001e04 <timed_callbacks_update>:

void timed_callbacks_update()
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0

 for(int i=0;i<timed_callbacks_list.new_callback_index;i++){
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	e049      	b.n	8001ea4 <timed_callbacks_update+0xa0>

  if(timed_callbacks_list.callbacks[i]->status==TIMER_UPDATE_REQUIRED)
 8001e10:	4a2a      	ldr	r2, [pc, #168]	; (8001ebc <timed_callbacks_update+0xb8>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d116      	bne.n	8001e4c <timed_callbacks_update+0x48>
  {
	  timed_callbacks_list.callbacks[i]->value=timed_callbacks_list.callbacks[i]->target_time;
 8001e1e:	4a27      	ldr	r2, [pc, #156]	; (8001ebc <timed_callbacks_update+0xb8>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e26:	4925      	ldr	r1, [pc, #148]	; (8001ebc <timed_callbacks_update+0xb8>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	605a      	str	r2, [r3, #4]
	  timed_callbacks_list.callbacks[i]->target_time=0;
 8001e32:	4a22      	ldr	r2, [pc, #136]	; (8001ebc <timed_callbacks_update+0xb8>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
	  timed_callbacks_list.callbacks[i]->status=TIMER_ACTIVE;
 8001e3e:	4a1f      	ldr	r2, [pc, #124]	; (8001ebc <timed_callbacks_update+0xb8>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e46:	2201      	movs	r2, #1
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	e028      	b.n	8001e9e <timed_callbacks_update+0x9a>
  }
  else if(timed_callbacks_list.callbacks[i]->status!=TIMER_TIMED_OUT)
 8001e4c:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <timed_callbacks_update+0xb8>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d021      	beq.n	8001e9e <timed_callbacks_update+0x9a>
  {
	  if(timed_callbacks_list.callbacks[i]->status==TIMER_ACTIVE)
 8001e5a:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <timed_callbacks_update+0xb8>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d11a      	bne.n	8001e9e <timed_callbacks_update+0x9a>
	  {
		  if(timed_callbacks_list.callbacks[i]->value==0)
 8001e68:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <timed_callbacks_update+0xb8>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10c      	bne.n	8001e90 <timed_callbacks_update+0x8c>
			  {
			    timed_callbacks_list.callbacks[i]->status=TIMER_TIMED_OUT;
 8001e76:	4a11      	ldr	r2, [pc, #68]	; (8001ebc <timed_callbacks_update+0xb8>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
			    timed_callbacks_list.callbacks[i]->callback();
 8001e82:	4a0e      	ldr	r2, [pc, #56]	; (8001ebc <timed_callbacks_update+0xb8>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4798      	blx	r3
 8001e8e:	e006      	b.n	8001e9e <timed_callbacks_update+0x9a>
			  }
		  else timed_callbacks_list.callbacks[i]->value--;
 8001e90:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <timed_callbacks_update+0xb8>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	3a01      	subs	r2, #1
 8001e9c:	605a      	str	r2, [r3, #4]
 for(int i=0;i<timed_callbacks_list.new_callback_index;i++){
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <timed_callbacks_update+0xb8>)
 8001ea6:	7d1b      	ldrb	r3, [r3, #20]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4293      	cmp	r3, r2
 8001eae:	dbaf      	blt.n	8001e10 <timed_callbacks_update+0xc>
	  }
  }
 }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20002784 	.word	0x20002784

08001ec0 <timed_callback_set>:

void timed_callback_set(timed_callback_t* self_object,uint32_t value)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  while(self_object->status==TIMER_UPDATE_REQUIRED){}
 8001eca:	bf00      	nop
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d0fb      	beq.n	8001ecc <timed_callback_set+0xc>

  self_object->target_time=value;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	601a      	str	r2, [r3, #0]
  self_object->status=TIMER_UPDATE_REQUIRED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2202      	movs	r2, #2
 8001ede:	609a      	str	r2, [r3, #8]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr

08001eea <timed_callback_off>:

void timed_callback_off(timed_callback_t* self_object)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
	self_object->value=0;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	605a      	str	r2, [r3, #4]
	self_object->status=TIMER_TIMED_OUT;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f08:	480c      	ldr	r0, [pc, #48]	; (8001f3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f0a:	490d      	ldr	r1, [pc, #52]	; (8001f40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f10:	e002      	b.n	8001f18 <LoopCopyDataInit>

08001f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f16:	3304      	adds	r3, #4

08001f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f1c:	d3f9      	bcc.n	8001f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f20:	4c0a      	ldr	r4, [pc, #40]	; (8001f4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f24:	e001      	b.n	8001f2a <LoopFillZerobss>

08001f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f28:	3204      	adds	r2, #4

08001f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f2c:	d3fb      	bcc.n	8001f26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f2e:	f7ff ff15 	bl	8001d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f32:	f006 fb21 	bl	8008578 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f36:	f7ff f8cf 	bl	80010d8 <main>
  bx lr
 8001f3a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f40:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8001f44:	08009f48 	.word	0x08009f48
  ldr r2, =_sbss
 8001f48:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8001f4c:	200027e4 	.word	0x200027e4

08001f50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f50:	e7fe      	b.n	8001f50 <ADC1_2_IRQHandler>
	...

08001f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <HAL_Init+0x28>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <HAL_Init+0x28>)
 8001f5e:	f043 0310 	orr.w	r3, r3, #16
 8001f62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f64:	2003      	movs	r0, #3
 8001f66:	f000 f8d1 	bl	800210c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f6a:	200f      	movs	r0, #15
 8001f6c:	f7ff fda2 	bl	8001ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f70:	f7ff fc88 	bl	8001884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40022000 	.word	0x40022000

08001f80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <HAL_IncTick+0x1c>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a03      	ldr	r2, [pc, #12]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	20000058 	.word	0x20000058
 8001fa0:	200027a0 	.word	0x200027a0

08001fa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa8:	4b02      	ldr	r3, [pc, #8]	; (8001fb4 <HAL_GetTick+0x10>)
 8001faa:	681b      	ldr	r3, [r3, #0]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	200027a0 	.word	0x200027a0

08001fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fea:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	60d3      	str	r3, [r2, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <__NVIC_GetPriorityGrouping+0x18>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	f003 0307 	and.w	r3, r3, #7
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	2b00      	cmp	r3, #0
 800202c:	db0b      	blt.n	8002046 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	f003 021f 	and.w	r2, r3, #31
 8002034:	4906      	ldr	r1, [pc, #24]	; (8002050 <__NVIC_EnableIRQ+0x34>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	2001      	movs	r0, #1
 800203e:	fa00 f202 	lsl.w	r2, r0, r2
 8002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	e000e100 	.word	0xe000e100

08002054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	6039      	str	r1, [r7, #0]
 800205e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002064:	2b00      	cmp	r3, #0
 8002066:	db0a      	blt.n	800207e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	b2da      	uxtb	r2, r3
 800206c:	490c      	ldr	r1, [pc, #48]	; (80020a0 <__NVIC_SetPriority+0x4c>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	0112      	lsls	r2, r2, #4
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	440b      	add	r3, r1
 8002078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800207c:	e00a      	b.n	8002094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4908      	ldr	r1, [pc, #32]	; (80020a4 <__NVIC_SetPriority+0x50>)
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	3b04      	subs	r3, #4
 800208c:	0112      	lsls	r2, r2, #4
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	440b      	add	r3, r1
 8002092:	761a      	strb	r2, [r3, #24]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000e100 	.word	0xe000e100
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	; 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f1c3 0307 	rsb	r3, r3, #7
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	bf28      	it	cs
 80020c6:	2304      	movcs	r3, #4
 80020c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3304      	adds	r3, #4
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d902      	bls.n	80020d8 <NVIC_EncodePriority+0x30>
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3b03      	subs	r3, #3
 80020d6:	e000      	b.n	80020da <NVIC_EncodePriority+0x32>
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	f04f 32ff 	mov.w	r2, #4294967295
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43da      	mvns	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	401a      	ands	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f0:	f04f 31ff 	mov.w	r1, #4294967295
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	fa01 f303 	lsl.w	r3, r1, r3
 80020fa:	43d9      	mvns	r1, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002100:	4313      	orrs	r3, r2
         );
}
 8002102:	4618      	mov	r0, r3
 8002104:	3724      	adds	r7, #36	; 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ff4f 	bl	8001fb8 <__NVIC_SetPriorityGrouping>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002122:	b580      	push	{r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002134:	f7ff ff64 	bl	8002000 <__NVIC_GetPriorityGrouping>
 8002138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	6978      	ldr	r0, [r7, #20]
 8002140:	f7ff ffb2 	bl	80020a8 <NVIC_EncodePriority>
 8002144:	4602      	mov	r2, r0
 8002146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff81 	bl	8002054 <__NVIC_SetPriority>
}
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff57 	bl	800201c <__NVIC_EnableIRQ>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e059      	b.n	8002242 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	4b2d      	ldr	r3, [pc, #180]	; (800224c <HAL_DMA_Init+0xd4>)
 8002196:	429a      	cmp	r2, r3
 8002198:	d80f      	bhi.n	80021ba <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	4b2b      	ldr	r3, [pc, #172]	; (8002250 <HAL_DMA_Init+0xd8>)
 80021a2:	4413      	add	r3, r2
 80021a4:	4a2b      	ldr	r2, [pc, #172]	; (8002254 <HAL_DMA_Init+0xdc>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	009a      	lsls	r2, r3, #2
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a28      	ldr	r2, [pc, #160]	; (8002258 <HAL_DMA_Init+0xe0>)
 80021b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80021b8:	e00e      	b.n	80021d8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	4b26      	ldr	r3, [pc, #152]	; (800225c <HAL_DMA_Init+0xe4>)
 80021c2:	4413      	add	r3, r2
 80021c4:	4a23      	ldr	r2, [pc, #140]	; (8002254 <HAL_DMA_Init+0xdc>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	009a      	lsls	r2, r3, #2
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a22      	ldr	r2, [pc, #136]	; (8002260 <HAL_DMA_Init+0xe8>)
 80021d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80021f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80021fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002208:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002214:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	40020407 	.word	0x40020407
 8002250:	bffdfff8 	.word	0xbffdfff8
 8002254:	cccccccd 	.word	0xcccccccd
 8002258:	40020000 	.word	0x40020000
 800225c:	bffdfbf8 	.word	0xbffdfbf8
 8002260:	40020400 	.word	0x40020400

08002264 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002276:	2b02      	cmp	r3, #2
 8002278:	d008      	beq.n	800228c <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2204      	movs	r2, #4
 800227e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e020      	b.n	80022ce <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 020e 	bic.w	r2, r2, #14
 800229a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b4:	2101      	movs	r1, #1
 80022b6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d005      	beq.n	80022fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2204      	movs	r2, #4
 80022f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	e0d6      	b.n	80024a8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 020e 	bic.w	r2, r2, #14
 8002308:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0201 	bic.w	r2, r2, #1
 8002318:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	4b64      	ldr	r3, [pc, #400]	; (80024b4 <HAL_DMA_Abort_IT+0x1dc>)
 8002322:	429a      	cmp	r2, r3
 8002324:	d958      	bls.n	80023d8 <HAL_DMA_Abort_IT+0x100>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a63      	ldr	r2, [pc, #396]	; (80024b8 <HAL_DMA_Abort_IT+0x1e0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d04f      	beq.n	80023d0 <HAL_DMA_Abort_IT+0xf8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a61      	ldr	r2, [pc, #388]	; (80024bc <HAL_DMA_Abort_IT+0x1e4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d048      	beq.n	80023cc <HAL_DMA_Abort_IT+0xf4>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a60      	ldr	r2, [pc, #384]	; (80024c0 <HAL_DMA_Abort_IT+0x1e8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d040      	beq.n	80023c6 <HAL_DMA_Abort_IT+0xee>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a5e      	ldr	r2, [pc, #376]	; (80024c4 <HAL_DMA_Abort_IT+0x1ec>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d038      	beq.n	80023c0 <HAL_DMA_Abort_IT+0xe8>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a5d      	ldr	r2, [pc, #372]	; (80024c8 <HAL_DMA_Abort_IT+0x1f0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d030      	beq.n	80023ba <HAL_DMA_Abort_IT+0xe2>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a5b      	ldr	r2, [pc, #364]	; (80024cc <HAL_DMA_Abort_IT+0x1f4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d028      	beq.n	80023b4 <HAL_DMA_Abort_IT+0xdc>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a53      	ldr	r2, [pc, #332]	; (80024b4 <HAL_DMA_Abort_IT+0x1dc>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d020      	beq.n	80023ae <HAL_DMA_Abort_IT+0xd6>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a57      	ldr	r2, [pc, #348]	; (80024d0 <HAL_DMA_Abort_IT+0x1f8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d019      	beq.n	80023aa <HAL_DMA_Abort_IT+0xd2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a56      	ldr	r2, [pc, #344]	; (80024d4 <HAL_DMA_Abort_IT+0x1fc>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d012      	beq.n	80023a6 <HAL_DMA_Abort_IT+0xce>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a54      	ldr	r2, [pc, #336]	; (80024d8 <HAL_DMA_Abort_IT+0x200>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00a      	beq.n	80023a0 <HAL_DMA_Abort_IT+0xc8>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a53      	ldr	r2, [pc, #332]	; (80024dc <HAL_DMA_Abort_IT+0x204>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d102      	bne.n	800239a <HAL_DMA_Abort_IT+0xc2>
 8002394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002398:	e01b      	b.n	80023d2 <HAL_DMA_Abort_IT+0xfa>
 800239a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800239e:	e018      	b.n	80023d2 <HAL_DMA_Abort_IT+0xfa>
 80023a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023a4:	e015      	b.n	80023d2 <HAL_DMA_Abort_IT+0xfa>
 80023a6:	2310      	movs	r3, #16
 80023a8:	e013      	b.n	80023d2 <HAL_DMA_Abort_IT+0xfa>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e011      	b.n	80023d2 <HAL_DMA_Abort_IT+0xfa>
 80023ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023b2:	e00e      	b.n	80023d2 <HAL_DMA_Abort_IT+0xfa>
 80023b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023b8:	e00b      	b.n	80023d2 <HAL_DMA_Abort_IT+0xfa>
 80023ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023be:	e008      	b.n	80023d2 <HAL_DMA_Abort_IT+0xfa>
 80023c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c4:	e005      	b.n	80023d2 <HAL_DMA_Abort_IT+0xfa>
 80023c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ca:	e002      	b.n	80023d2 <HAL_DMA_Abort_IT+0xfa>
 80023cc:	2310      	movs	r3, #16
 80023ce:	e000      	b.n	80023d2 <HAL_DMA_Abort_IT+0xfa>
 80023d0:	2301      	movs	r3, #1
 80023d2:	4a43      	ldr	r2, [pc, #268]	; (80024e0 <HAL_DMA_Abort_IT+0x208>)
 80023d4:	6053      	str	r3, [r2, #4]
 80023d6:	e057      	b.n	8002488 <HAL_DMA_Abort_IT+0x1b0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a36      	ldr	r2, [pc, #216]	; (80024b8 <HAL_DMA_Abort_IT+0x1e0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d04f      	beq.n	8002482 <HAL_DMA_Abort_IT+0x1aa>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a35      	ldr	r2, [pc, #212]	; (80024bc <HAL_DMA_Abort_IT+0x1e4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d048      	beq.n	800247e <HAL_DMA_Abort_IT+0x1a6>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a33      	ldr	r2, [pc, #204]	; (80024c0 <HAL_DMA_Abort_IT+0x1e8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d040      	beq.n	8002478 <HAL_DMA_Abort_IT+0x1a0>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a32      	ldr	r2, [pc, #200]	; (80024c4 <HAL_DMA_Abort_IT+0x1ec>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d038      	beq.n	8002472 <HAL_DMA_Abort_IT+0x19a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a30      	ldr	r2, [pc, #192]	; (80024c8 <HAL_DMA_Abort_IT+0x1f0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d030      	beq.n	800246c <HAL_DMA_Abort_IT+0x194>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a2f      	ldr	r2, [pc, #188]	; (80024cc <HAL_DMA_Abort_IT+0x1f4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d028      	beq.n	8002466 <HAL_DMA_Abort_IT+0x18e>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a26      	ldr	r2, [pc, #152]	; (80024b4 <HAL_DMA_Abort_IT+0x1dc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d020      	beq.n	8002460 <HAL_DMA_Abort_IT+0x188>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a2b      	ldr	r2, [pc, #172]	; (80024d0 <HAL_DMA_Abort_IT+0x1f8>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d019      	beq.n	800245c <HAL_DMA_Abort_IT+0x184>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a29      	ldr	r2, [pc, #164]	; (80024d4 <HAL_DMA_Abort_IT+0x1fc>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d012      	beq.n	8002458 <HAL_DMA_Abort_IT+0x180>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a28      	ldr	r2, [pc, #160]	; (80024d8 <HAL_DMA_Abort_IT+0x200>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d00a      	beq.n	8002452 <HAL_DMA_Abort_IT+0x17a>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a26      	ldr	r2, [pc, #152]	; (80024dc <HAL_DMA_Abort_IT+0x204>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d102      	bne.n	800244c <HAL_DMA_Abort_IT+0x174>
 8002446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800244a:	e01b      	b.n	8002484 <HAL_DMA_Abort_IT+0x1ac>
 800244c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002450:	e018      	b.n	8002484 <HAL_DMA_Abort_IT+0x1ac>
 8002452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002456:	e015      	b.n	8002484 <HAL_DMA_Abort_IT+0x1ac>
 8002458:	2310      	movs	r3, #16
 800245a:	e013      	b.n	8002484 <HAL_DMA_Abort_IT+0x1ac>
 800245c:	2301      	movs	r3, #1
 800245e:	e011      	b.n	8002484 <HAL_DMA_Abort_IT+0x1ac>
 8002460:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002464:	e00e      	b.n	8002484 <HAL_DMA_Abort_IT+0x1ac>
 8002466:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800246a:	e00b      	b.n	8002484 <HAL_DMA_Abort_IT+0x1ac>
 800246c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002470:	e008      	b.n	8002484 <HAL_DMA_Abort_IT+0x1ac>
 8002472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002476:	e005      	b.n	8002484 <HAL_DMA_Abort_IT+0x1ac>
 8002478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800247c:	e002      	b.n	8002484 <HAL_DMA_Abort_IT+0x1ac>
 800247e:	2310      	movs	r3, #16
 8002480:	e000      	b.n	8002484 <HAL_DMA_Abort_IT+0x1ac>
 8002482:	2301      	movs	r3, #1
 8002484:	4a17      	ldr	r2, [pc, #92]	; (80024e4 <HAL_DMA_Abort_IT+0x20c>)
 8002486:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	4798      	blx	r3
    } 
  }
  return status;
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40020080 	.word	0x40020080
 80024b8:	40020008 	.word	0x40020008
 80024bc:	4002001c 	.word	0x4002001c
 80024c0:	40020030 	.word	0x40020030
 80024c4:	40020044 	.word	0x40020044
 80024c8:	40020058 	.word	0x40020058
 80024cc:	4002006c 	.word	0x4002006c
 80024d0:	40020408 	.word	0x40020408
 80024d4:	4002041c 	.word	0x4002041c
 80024d8:	40020430 	.word	0x40020430
 80024dc:	40020444 	.word	0x40020444
 80024e0:	40020400 	.word	0x40020400
 80024e4:	40020000 	.word	0x40020000

080024e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	2204      	movs	r2, #4
 8002506:	409a      	lsls	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80d6 	beq.w	80026be <HAL_DMA_IRQHandler+0x1d6>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80d0 	beq.w	80026be <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d107      	bne.n	800253c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0204 	bic.w	r2, r2, #4
 800253a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	4b9b      	ldr	r3, [pc, #620]	; (80027b0 <HAL_DMA_IRQHandler+0x2c8>)
 8002544:	429a      	cmp	r2, r3
 8002546:	d958      	bls.n	80025fa <HAL_DMA_IRQHandler+0x112>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a99      	ldr	r2, [pc, #612]	; (80027b4 <HAL_DMA_IRQHandler+0x2cc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d04f      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x10a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a98      	ldr	r2, [pc, #608]	; (80027b8 <HAL_DMA_IRQHandler+0x2d0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d048      	beq.n	80025ee <HAL_DMA_IRQHandler+0x106>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a96      	ldr	r2, [pc, #600]	; (80027bc <HAL_DMA_IRQHandler+0x2d4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d040      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x100>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a95      	ldr	r2, [pc, #596]	; (80027c0 <HAL_DMA_IRQHandler+0x2d8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d038      	beq.n	80025e2 <HAL_DMA_IRQHandler+0xfa>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a93      	ldr	r2, [pc, #588]	; (80027c4 <HAL_DMA_IRQHandler+0x2dc>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d030      	beq.n	80025dc <HAL_DMA_IRQHandler+0xf4>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a92      	ldr	r2, [pc, #584]	; (80027c8 <HAL_DMA_IRQHandler+0x2e0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d028      	beq.n	80025d6 <HAL_DMA_IRQHandler+0xee>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a89      	ldr	r2, [pc, #548]	; (80027b0 <HAL_DMA_IRQHandler+0x2c8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d020      	beq.n	80025d0 <HAL_DMA_IRQHandler+0xe8>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a8e      	ldr	r2, [pc, #568]	; (80027cc <HAL_DMA_IRQHandler+0x2e4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d019      	beq.n	80025cc <HAL_DMA_IRQHandler+0xe4>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a8c      	ldr	r2, [pc, #560]	; (80027d0 <HAL_DMA_IRQHandler+0x2e8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d012      	beq.n	80025c8 <HAL_DMA_IRQHandler+0xe0>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a8b      	ldr	r2, [pc, #556]	; (80027d4 <HAL_DMA_IRQHandler+0x2ec>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d00a      	beq.n	80025c2 <HAL_DMA_IRQHandler+0xda>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a89      	ldr	r2, [pc, #548]	; (80027d8 <HAL_DMA_IRQHandler+0x2f0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d102      	bne.n	80025bc <HAL_DMA_IRQHandler+0xd4>
 80025b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025ba:	e01b      	b.n	80025f4 <HAL_DMA_IRQHandler+0x10c>
 80025bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025c0:	e018      	b.n	80025f4 <HAL_DMA_IRQHandler+0x10c>
 80025c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025c6:	e015      	b.n	80025f4 <HAL_DMA_IRQHandler+0x10c>
 80025c8:	2340      	movs	r3, #64	; 0x40
 80025ca:	e013      	b.n	80025f4 <HAL_DMA_IRQHandler+0x10c>
 80025cc:	2304      	movs	r3, #4
 80025ce:	e011      	b.n	80025f4 <HAL_DMA_IRQHandler+0x10c>
 80025d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80025d4:	e00e      	b.n	80025f4 <HAL_DMA_IRQHandler+0x10c>
 80025d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025da:	e00b      	b.n	80025f4 <HAL_DMA_IRQHandler+0x10c>
 80025dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025e0:	e008      	b.n	80025f4 <HAL_DMA_IRQHandler+0x10c>
 80025e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025e6:	e005      	b.n	80025f4 <HAL_DMA_IRQHandler+0x10c>
 80025e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ec:	e002      	b.n	80025f4 <HAL_DMA_IRQHandler+0x10c>
 80025ee:	2340      	movs	r3, #64	; 0x40
 80025f0:	e000      	b.n	80025f4 <HAL_DMA_IRQHandler+0x10c>
 80025f2:	2304      	movs	r3, #4
 80025f4:	4a79      	ldr	r2, [pc, #484]	; (80027dc <HAL_DMA_IRQHandler+0x2f4>)
 80025f6:	6053      	str	r3, [r2, #4]
 80025f8:	e057      	b.n	80026aa <HAL_DMA_IRQHandler+0x1c2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a6d      	ldr	r2, [pc, #436]	; (80027b4 <HAL_DMA_IRQHandler+0x2cc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d04f      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x1bc>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a6b      	ldr	r2, [pc, #428]	; (80027b8 <HAL_DMA_IRQHandler+0x2d0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d048      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x1b8>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a6a      	ldr	r2, [pc, #424]	; (80027bc <HAL_DMA_IRQHandler+0x2d4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d040      	beq.n	800269a <HAL_DMA_IRQHandler+0x1b2>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a68      	ldr	r2, [pc, #416]	; (80027c0 <HAL_DMA_IRQHandler+0x2d8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d038      	beq.n	8002694 <HAL_DMA_IRQHandler+0x1ac>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a67      	ldr	r2, [pc, #412]	; (80027c4 <HAL_DMA_IRQHandler+0x2dc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d030      	beq.n	800268e <HAL_DMA_IRQHandler+0x1a6>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a65      	ldr	r2, [pc, #404]	; (80027c8 <HAL_DMA_IRQHandler+0x2e0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d028      	beq.n	8002688 <HAL_DMA_IRQHandler+0x1a0>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a5d      	ldr	r2, [pc, #372]	; (80027b0 <HAL_DMA_IRQHandler+0x2c8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d020      	beq.n	8002682 <HAL_DMA_IRQHandler+0x19a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a61      	ldr	r2, [pc, #388]	; (80027cc <HAL_DMA_IRQHandler+0x2e4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d019      	beq.n	800267e <HAL_DMA_IRQHandler+0x196>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a60      	ldr	r2, [pc, #384]	; (80027d0 <HAL_DMA_IRQHandler+0x2e8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d012      	beq.n	800267a <HAL_DMA_IRQHandler+0x192>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a5e      	ldr	r2, [pc, #376]	; (80027d4 <HAL_DMA_IRQHandler+0x2ec>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00a      	beq.n	8002674 <HAL_DMA_IRQHandler+0x18c>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a5d      	ldr	r2, [pc, #372]	; (80027d8 <HAL_DMA_IRQHandler+0x2f0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d102      	bne.n	800266e <HAL_DMA_IRQHandler+0x186>
 8002668:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800266c:	e01b      	b.n	80026a6 <HAL_DMA_IRQHandler+0x1be>
 800266e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002672:	e018      	b.n	80026a6 <HAL_DMA_IRQHandler+0x1be>
 8002674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002678:	e015      	b.n	80026a6 <HAL_DMA_IRQHandler+0x1be>
 800267a:	2340      	movs	r3, #64	; 0x40
 800267c:	e013      	b.n	80026a6 <HAL_DMA_IRQHandler+0x1be>
 800267e:	2304      	movs	r3, #4
 8002680:	e011      	b.n	80026a6 <HAL_DMA_IRQHandler+0x1be>
 8002682:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002686:	e00e      	b.n	80026a6 <HAL_DMA_IRQHandler+0x1be>
 8002688:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800268c:	e00b      	b.n	80026a6 <HAL_DMA_IRQHandler+0x1be>
 800268e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002692:	e008      	b.n	80026a6 <HAL_DMA_IRQHandler+0x1be>
 8002694:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002698:	e005      	b.n	80026a6 <HAL_DMA_IRQHandler+0x1be>
 800269a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800269e:	e002      	b.n	80026a6 <HAL_DMA_IRQHandler+0x1be>
 80026a0:	2340      	movs	r3, #64	; 0x40
 80026a2:	e000      	b.n	80026a6 <HAL_DMA_IRQHandler+0x1be>
 80026a4:	2304      	movs	r3, #4
 80026a6:	4a4e      	ldr	r2, [pc, #312]	; (80027e0 <HAL_DMA_IRQHandler+0x2f8>)
 80026a8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 8136 	beq.w	8002920 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026bc:	e130      	b.n	8002920 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	2202      	movs	r2, #2
 80026c4:	409a      	lsls	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 80f8 	beq.w	80028c0 <HAL_DMA_IRQHandler+0x3d8>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80f2 	beq.w	80028c0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10b      	bne.n	8002702 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 020a 	bic.w	r2, r2, #10
 80026f8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <HAL_DMA_IRQHandler+0x2c8>)
 800270a:	429a      	cmp	r2, r3
 800270c:	d973      	bls.n	80027f6 <HAL_DMA_IRQHandler+0x30e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a28      	ldr	r2, [pc, #160]	; (80027b4 <HAL_DMA_IRQHandler+0x2cc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d06a      	beq.n	80027ee <HAL_DMA_IRQHandler+0x306>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a26      	ldr	r2, [pc, #152]	; (80027b8 <HAL_DMA_IRQHandler+0x2d0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d063      	beq.n	80027ea <HAL_DMA_IRQHandler+0x302>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a25      	ldr	r2, [pc, #148]	; (80027bc <HAL_DMA_IRQHandler+0x2d4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d05b      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x2fc>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a23      	ldr	r2, [pc, #140]	; (80027c0 <HAL_DMA_IRQHandler+0x2d8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d038      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x2c0>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a22      	ldr	r2, [pc, #136]	; (80027c4 <HAL_DMA_IRQHandler+0x2dc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d030      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x2ba>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a20      	ldr	r2, [pc, #128]	; (80027c8 <HAL_DMA_IRQHandler+0x2e0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d028      	beq.n	800279c <HAL_DMA_IRQHandler+0x2b4>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a18      	ldr	r2, [pc, #96]	; (80027b0 <HAL_DMA_IRQHandler+0x2c8>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d020      	beq.n	8002796 <HAL_DMA_IRQHandler+0x2ae>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <HAL_DMA_IRQHandler+0x2e4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d019      	beq.n	8002792 <HAL_DMA_IRQHandler+0x2aa>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1b      	ldr	r2, [pc, #108]	; (80027d0 <HAL_DMA_IRQHandler+0x2e8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d012      	beq.n	800278e <HAL_DMA_IRQHandler+0x2a6>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a19      	ldr	r2, [pc, #100]	; (80027d4 <HAL_DMA_IRQHandler+0x2ec>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00a      	beq.n	8002788 <HAL_DMA_IRQHandler+0x2a0>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <HAL_DMA_IRQHandler+0x2f0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d102      	bne.n	8002782 <HAL_DMA_IRQHandler+0x29a>
 800277c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002780:	e036      	b.n	80027f0 <HAL_DMA_IRQHandler+0x308>
 8002782:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002786:	e033      	b.n	80027f0 <HAL_DMA_IRQHandler+0x308>
 8002788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800278c:	e030      	b.n	80027f0 <HAL_DMA_IRQHandler+0x308>
 800278e:	2320      	movs	r3, #32
 8002790:	e02e      	b.n	80027f0 <HAL_DMA_IRQHandler+0x308>
 8002792:	2302      	movs	r3, #2
 8002794:	e02c      	b.n	80027f0 <HAL_DMA_IRQHandler+0x308>
 8002796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800279a:	e029      	b.n	80027f0 <HAL_DMA_IRQHandler+0x308>
 800279c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027a0:	e026      	b.n	80027f0 <HAL_DMA_IRQHandler+0x308>
 80027a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027a6:	e023      	b.n	80027f0 <HAL_DMA_IRQHandler+0x308>
 80027a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027ac:	e020      	b.n	80027f0 <HAL_DMA_IRQHandler+0x308>
 80027ae:	bf00      	nop
 80027b0:	40020080 	.word	0x40020080
 80027b4:	40020008 	.word	0x40020008
 80027b8:	4002001c 	.word	0x4002001c
 80027bc:	40020030 	.word	0x40020030
 80027c0:	40020044 	.word	0x40020044
 80027c4:	40020058 	.word	0x40020058
 80027c8:	4002006c 	.word	0x4002006c
 80027cc:	40020408 	.word	0x40020408
 80027d0:	4002041c 	.word	0x4002041c
 80027d4:	40020430 	.word	0x40020430
 80027d8:	40020444 	.word	0x40020444
 80027dc:	40020400 	.word	0x40020400
 80027e0:	40020000 	.word	0x40020000
 80027e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027e8:	e002      	b.n	80027f0 <HAL_DMA_IRQHandler+0x308>
 80027ea:	2320      	movs	r3, #32
 80027ec:	e000      	b.n	80027f0 <HAL_DMA_IRQHandler+0x308>
 80027ee:	2302      	movs	r3, #2
 80027f0:	4a4e      	ldr	r2, [pc, #312]	; (800292c <HAL_DMA_IRQHandler+0x444>)
 80027f2:	6053      	str	r3, [r2, #4]
 80027f4:	e057      	b.n	80028a6 <HAL_DMA_IRQHandler+0x3be>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a4d      	ldr	r2, [pc, #308]	; (8002930 <HAL_DMA_IRQHandler+0x448>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d04f      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x3b8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a4b      	ldr	r2, [pc, #300]	; (8002934 <HAL_DMA_IRQHandler+0x44c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d048      	beq.n	800289c <HAL_DMA_IRQHandler+0x3b4>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a4a      	ldr	r2, [pc, #296]	; (8002938 <HAL_DMA_IRQHandler+0x450>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d040      	beq.n	8002896 <HAL_DMA_IRQHandler+0x3ae>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a48      	ldr	r2, [pc, #288]	; (800293c <HAL_DMA_IRQHandler+0x454>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d038      	beq.n	8002890 <HAL_DMA_IRQHandler+0x3a8>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a47      	ldr	r2, [pc, #284]	; (8002940 <HAL_DMA_IRQHandler+0x458>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d030      	beq.n	800288a <HAL_DMA_IRQHandler+0x3a2>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a45      	ldr	r2, [pc, #276]	; (8002944 <HAL_DMA_IRQHandler+0x45c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d028      	beq.n	8002884 <HAL_DMA_IRQHandler+0x39c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a44      	ldr	r2, [pc, #272]	; (8002948 <HAL_DMA_IRQHandler+0x460>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d020      	beq.n	800287e <HAL_DMA_IRQHandler+0x396>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a42      	ldr	r2, [pc, #264]	; (800294c <HAL_DMA_IRQHandler+0x464>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d019      	beq.n	800287a <HAL_DMA_IRQHandler+0x392>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a41      	ldr	r2, [pc, #260]	; (8002950 <HAL_DMA_IRQHandler+0x468>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d012      	beq.n	8002876 <HAL_DMA_IRQHandler+0x38e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a3f      	ldr	r2, [pc, #252]	; (8002954 <HAL_DMA_IRQHandler+0x46c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00a      	beq.n	8002870 <HAL_DMA_IRQHandler+0x388>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a3e      	ldr	r2, [pc, #248]	; (8002958 <HAL_DMA_IRQHandler+0x470>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d102      	bne.n	800286a <HAL_DMA_IRQHandler+0x382>
 8002864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002868:	e01b      	b.n	80028a2 <HAL_DMA_IRQHandler+0x3ba>
 800286a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800286e:	e018      	b.n	80028a2 <HAL_DMA_IRQHandler+0x3ba>
 8002870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002874:	e015      	b.n	80028a2 <HAL_DMA_IRQHandler+0x3ba>
 8002876:	2320      	movs	r3, #32
 8002878:	e013      	b.n	80028a2 <HAL_DMA_IRQHandler+0x3ba>
 800287a:	2302      	movs	r3, #2
 800287c:	e011      	b.n	80028a2 <HAL_DMA_IRQHandler+0x3ba>
 800287e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002882:	e00e      	b.n	80028a2 <HAL_DMA_IRQHandler+0x3ba>
 8002884:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002888:	e00b      	b.n	80028a2 <HAL_DMA_IRQHandler+0x3ba>
 800288a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800288e:	e008      	b.n	80028a2 <HAL_DMA_IRQHandler+0x3ba>
 8002890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002894:	e005      	b.n	80028a2 <HAL_DMA_IRQHandler+0x3ba>
 8002896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800289a:	e002      	b.n	80028a2 <HAL_DMA_IRQHandler+0x3ba>
 800289c:	2320      	movs	r3, #32
 800289e:	e000      	b.n	80028a2 <HAL_DMA_IRQHandler+0x3ba>
 80028a0:	2302      	movs	r3, #2
 80028a2:	4a2e      	ldr	r2, [pc, #184]	; (800295c <HAL_DMA_IRQHandler+0x474>)
 80028a4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d034      	beq.n	8002920 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80028be:	e02f      	b.n	8002920 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	2208      	movs	r2, #8
 80028c6:	409a      	lsls	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d028      	beq.n	8002922 <HAL_DMA_IRQHandler+0x43a>
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d023      	beq.n	8002922 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 020e 	bic.w	r2, r2, #14
 80028e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f2:	2101      	movs	r1, #1
 80028f4:	fa01 f202 	lsl.w	r2, r1, r2
 80028f8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	2b00      	cmp	r3, #0
 8002916:	d004      	beq.n	8002922 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4798      	blx	r3
    }
  }
  return;
 8002920:	bf00      	nop
 8002922:	bf00      	nop
}
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40020400 	.word	0x40020400
 8002930:	40020008 	.word	0x40020008
 8002934:	4002001c 	.word	0x4002001c
 8002938:	40020030 	.word	0x40020030
 800293c:	40020044 	.word	0x40020044
 8002940:	40020058 	.word	0x40020058
 8002944:	4002006c 	.word	0x4002006c
 8002948:	40020080 	.word	0x40020080
 800294c:	40020408 	.word	0x40020408
 8002950:	4002041c 	.word	0x4002041c
 8002954:	40020430 	.word	0x40020430
 8002958:	40020444 	.word	0x40020444
 800295c:	40020000 	.word	0x40020000

08002960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002960:	b480      	push	{r7}
 8002962:	b08b      	sub	sp, #44	; 0x2c
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800296a:	2300      	movs	r3, #0
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800296e:	2300      	movs	r3, #0
 8002970:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002972:	e169      	b.n	8002c48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002974:	2201      	movs	r2, #1
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	69fa      	ldr	r2, [r7, #28]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	429a      	cmp	r2, r3
 800298e:	f040 8158 	bne.w	8002c42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4a9a      	ldr	r2, [pc, #616]	; (8002c00 <HAL_GPIO_Init+0x2a0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d05e      	beq.n	8002a5a <HAL_GPIO_Init+0xfa>
 800299c:	4a98      	ldr	r2, [pc, #608]	; (8002c00 <HAL_GPIO_Init+0x2a0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d875      	bhi.n	8002a8e <HAL_GPIO_Init+0x12e>
 80029a2:	4a98      	ldr	r2, [pc, #608]	; (8002c04 <HAL_GPIO_Init+0x2a4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d058      	beq.n	8002a5a <HAL_GPIO_Init+0xfa>
 80029a8:	4a96      	ldr	r2, [pc, #600]	; (8002c04 <HAL_GPIO_Init+0x2a4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d86f      	bhi.n	8002a8e <HAL_GPIO_Init+0x12e>
 80029ae:	4a96      	ldr	r2, [pc, #600]	; (8002c08 <HAL_GPIO_Init+0x2a8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d052      	beq.n	8002a5a <HAL_GPIO_Init+0xfa>
 80029b4:	4a94      	ldr	r2, [pc, #592]	; (8002c08 <HAL_GPIO_Init+0x2a8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d869      	bhi.n	8002a8e <HAL_GPIO_Init+0x12e>
 80029ba:	4a94      	ldr	r2, [pc, #592]	; (8002c0c <HAL_GPIO_Init+0x2ac>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d04c      	beq.n	8002a5a <HAL_GPIO_Init+0xfa>
 80029c0:	4a92      	ldr	r2, [pc, #584]	; (8002c0c <HAL_GPIO_Init+0x2ac>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d863      	bhi.n	8002a8e <HAL_GPIO_Init+0x12e>
 80029c6:	4a92      	ldr	r2, [pc, #584]	; (8002c10 <HAL_GPIO_Init+0x2b0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d046      	beq.n	8002a5a <HAL_GPIO_Init+0xfa>
 80029cc:	4a90      	ldr	r2, [pc, #576]	; (8002c10 <HAL_GPIO_Init+0x2b0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d85d      	bhi.n	8002a8e <HAL_GPIO_Init+0x12e>
 80029d2:	2b12      	cmp	r3, #18
 80029d4:	d82a      	bhi.n	8002a2c <HAL_GPIO_Init+0xcc>
 80029d6:	2b12      	cmp	r3, #18
 80029d8:	d859      	bhi.n	8002a8e <HAL_GPIO_Init+0x12e>
 80029da:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <HAL_GPIO_Init+0x80>)
 80029dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e0:	08002a5b 	.word	0x08002a5b
 80029e4:	08002a35 	.word	0x08002a35
 80029e8:	08002a47 	.word	0x08002a47
 80029ec:	08002a89 	.word	0x08002a89
 80029f0:	08002a8f 	.word	0x08002a8f
 80029f4:	08002a8f 	.word	0x08002a8f
 80029f8:	08002a8f 	.word	0x08002a8f
 80029fc:	08002a8f 	.word	0x08002a8f
 8002a00:	08002a8f 	.word	0x08002a8f
 8002a04:	08002a8f 	.word	0x08002a8f
 8002a08:	08002a8f 	.word	0x08002a8f
 8002a0c:	08002a8f 	.word	0x08002a8f
 8002a10:	08002a8f 	.word	0x08002a8f
 8002a14:	08002a8f 	.word	0x08002a8f
 8002a18:	08002a8f 	.word	0x08002a8f
 8002a1c:	08002a8f 	.word	0x08002a8f
 8002a20:	08002a8f 	.word	0x08002a8f
 8002a24:	08002a3d 	.word	0x08002a3d
 8002a28:	08002a51 	.word	0x08002a51
 8002a2c:	4a79      	ldr	r2, [pc, #484]	; (8002c14 <HAL_GPIO_Init+0x2b4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a32:	e02c      	b.n	8002a8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	623b      	str	r3, [r7, #32]
          break;
 8002a3a:	e029      	b.n	8002a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	3304      	adds	r3, #4
 8002a42:	623b      	str	r3, [r7, #32]
          break;
 8002a44:	e024      	b.n	8002a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	3308      	adds	r3, #8
 8002a4c:	623b      	str	r3, [r7, #32]
          break;
 8002a4e:	e01f      	b.n	8002a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	330c      	adds	r3, #12
 8002a56:	623b      	str	r3, [r7, #32]
          break;
 8002a58:	e01a      	b.n	8002a90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d102      	bne.n	8002a68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a62:	2304      	movs	r3, #4
 8002a64:	623b      	str	r3, [r7, #32]
          break;
 8002a66:	e013      	b.n	8002a90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d105      	bne.n	8002a7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a70:	2308      	movs	r3, #8
 8002a72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	611a      	str	r2, [r3, #16]
          break;
 8002a7a:	e009      	b.n	8002a90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a7c:	2308      	movs	r3, #8
 8002a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	615a      	str	r2, [r3, #20]
          break;
 8002a86:	e003      	b.n	8002a90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	623b      	str	r3, [r7, #32]
          break;
 8002a8c:	e000      	b.n	8002a90 <HAL_GPIO_Init+0x130>
          break;
 8002a8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	2bff      	cmp	r3, #255	; 0xff
 8002a94:	d801      	bhi.n	8002a9a <HAL_GPIO_Init+0x13a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	e001      	b.n	8002a9e <HAL_GPIO_Init+0x13e>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2bff      	cmp	r3, #255	; 0xff
 8002aa4:	d802      	bhi.n	8002aac <HAL_GPIO_Init+0x14c>
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	e002      	b.n	8002ab2 <HAL_GPIO_Init+0x152>
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	3b08      	subs	r3, #8
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	210f      	movs	r1, #15
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	6a39      	ldr	r1, [r7, #32]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8002acc:	431a      	orrs	r2, r3
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 80b1 	beq.w	8002c42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ae0:	4b4d      	ldr	r3, [pc, #308]	; (8002c18 <HAL_GPIO_Init+0x2b8>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	4a4c      	ldr	r2, [pc, #304]	; (8002c18 <HAL_GPIO_Init+0x2b8>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6193      	str	r3, [r2, #24]
 8002aec:	4b4a      	ldr	r3, [pc, #296]	; (8002c18 <HAL_GPIO_Init+0x2b8>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002af8:	4a48      	ldr	r2, [pc, #288]	; (8002c1c <HAL_GPIO_Init+0x2bc>)
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	089b      	lsrs	r3, r3, #2
 8002afe:	3302      	adds	r3, #2
 8002b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	220f      	movs	r2, #15
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a40      	ldr	r2, [pc, #256]	; (8002c20 <HAL_GPIO_Init+0x2c0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d013      	beq.n	8002b4c <HAL_GPIO_Init+0x1ec>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a3f      	ldr	r2, [pc, #252]	; (8002c24 <HAL_GPIO_Init+0x2c4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d00d      	beq.n	8002b48 <HAL_GPIO_Init+0x1e8>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a3e      	ldr	r2, [pc, #248]	; (8002c28 <HAL_GPIO_Init+0x2c8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d007      	beq.n	8002b44 <HAL_GPIO_Init+0x1e4>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a3d      	ldr	r2, [pc, #244]	; (8002c2c <HAL_GPIO_Init+0x2cc>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d101      	bne.n	8002b40 <HAL_GPIO_Init+0x1e0>
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e006      	b.n	8002b4e <HAL_GPIO_Init+0x1ee>
 8002b40:	2304      	movs	r3, #4
 8002b42:	e004      	b.n	8002b4e <HAL_GPIO_Init+0x1ee>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e002      	b.n	8002b4e <HAL_GPIO_Init+0x1ee>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <HAL_GPIO_Init+0x1ee>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b50:	f002 0203 	and.w	r2, r2, #3
 8002b54:	0092      	lsls	r2, r2, #2
 8002b56:	4093      	lsls	r3, r2
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b5e:	492f      	ldr	r1, [pc, #188]	; (8002c1c <HAL_GPIO_Init+0x2bc>)
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	089b      	lsrs	r3, r3, #2
 8002b64:	3302      	adds	r3, #2
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b78:	4b2d      	ldr	r3, [pc, #180]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	492c      	ldr	r1, [pc, #176]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	600b      	str	r3, [r1, #0]
 8002b84:	e006      	b.n	8002b94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b86:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	4928      	ldr	r1, [pc, #160]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d006      	beq.n	8002bae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ba0:	4b23      	ldr	r3, [pc, #140]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	4922      	ldr	r1, [pc, #136]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
 8002bac:	e006      	b.n	8002bbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bae:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	491e      	ldr	r1, [pc, #120]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d006      	beq.n	8002bd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bc8:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	4918      	ldr	r1, [pc, #96]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]
 8002bd4:	e006      	b.n	8002be4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bd6:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	4914      	ldr	r1, [pc, #80]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d021      	beq.n	8002c34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	490e      	ldr	r1, [pc, #56]	; (8002c30 <HAL_GPIO_Init+0x2d0>)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60cb      	str	r3, [r1, #12]
 8002bfc:	e021      	b.n	8002c42 <HAL_GPIO_Init+0x2e2>
 8002bfe:	bf00      	nop
 8002c00:	10320000 	.word	0x10320000
 8002c04:	10310000 	.word	0x10310000
 8002c08:	10220000 	.word	0x10220000
 8002c0c:	10210000 	.word	0x10210000
 8002c10:	10120000 	.word	0x10120000
 8002c14:	10110000 	.word	0x10110000
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40010000 	.word	0x40010000
 8002c20:	40010800 	.word	0x40010800
 8002c24:	40010c00 	.word	0x40010c00
 8002c28:	40011000 	.word	0x40011000
 8002c2c:	40011400 	.word	0x40011400
 8002c30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_GPIO_Init+0x304>)
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	4909      	ldr	r1, [pc, #36]	; (8002c64 <HAL_GPIO_Init+0x304>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	3301      	adds	r3, #1
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f47f ae8e 	bne.w	8002974 <HAL_GPIO_Init+0x14>
  }
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	372c      	adds	r7, #44	; 0x2c
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	40010400 	.word	0x40010400

08002c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e12b      	b.n	8002ed2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fe fe30 	bl	80018f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2224      	movs	r2, #36	; 0x24
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ccc:	f001 fa30 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 8002cd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4a81      	ldr	r2, [pc, #516]	; (8002edc <HAL_I2C_Init+0x274>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d807      	bhi.n	8002cec <HAL_I2C_Init+0x84>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4a80      	ldr	r2, [pc, #512]	; (8002ee0 <HAL_I2C_Init+0x278>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	bf94      	ite	ls
 8002ce4:	2301      	movls	r3, #1
 8002ce6:	2300      	movhi	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	e006      	b.n	8002cfa <HAL_I2C_Init+0x92>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4a7d      	ldr	r2, [pc, #500]	; (8002ee4 <HAL_I2C_Init+0x27c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	bf94      	ite	ls
 8002cf4:	2301      	movls	r3, #1
 8002cf6:	2300      	movhi	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e0e7      	b.n	8002ed2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4a78      	ldr	r2, [pc, #480]	; (8002ee8 <HAL_I2C_Init+0x280>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	0c9b      	lsrs	r3, r3, #18
 8002d0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4a6a      	ldr	r2, [pc, #424]	; (8002edc <HAL_I2C_Init+0x274>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d802      	bhi.n	8002d3c <HAL_I2C_Init+0xd4>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	e009      	b.n	8002d50 <HAL_I2C_Init+0xe8>
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	4a69      	ldr	r2, [pc, #420]	; (8002eec <HAL_I2C_Init+0x284>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	099b      	lsrs	r3, r3, #6
 8002d4e:	3301      	adds	r3, #1
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	430b      	orrs	r3, r1
 8002d56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	495c      	ldr	r1, [pc, #368]	; (8002edc <HAL_I2C_Init+0x274>)
 8002d6c:	428b      	cmp	r3, r1
 8002d6e:	d819      	bhi.n	8002da4 <HAL_I2C_Init+0x13c>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1e59      	subs	r1, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d7e:	1c59      	adds	r1, r3, #1
 8002d80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d84:	400b      	ands	r3, r1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HAL_I2C_Init+0x138>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1e59      	subs	r1, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d98:	3301      	adds	r3, #1
 8002d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9e:	e051      	b.n	8002e44 <HAL_I2C_Init+0x1dc>
 8002da0:	2304      	movs	r3, #4
 8002da2:	e04f      	b.n	8002e44 <HAL_I2C_Init+0x1dc>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d111      	bne.n	8002dd0 <HAL_I2C_Init+0x168>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1e58      	subs	r0, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	440b      	add	r3, r1
 8002dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2301      	moveq	r3, #1
 8002dca:	2300      	movne	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	e012      	b.n	8002df6 <HAL_I2C_Init+0x18e>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1e58      	subs	r0, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6859      	ldr	r1, [r3, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	0099      	lsls	r1, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de6:	3301      	adds	r3, #1
 8002de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf0c      	ite	eq
 8002df0:	2301      	moveq	r3, #1
 8002df2:	2300      	movne	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_I2C_Init+0x196>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e022      	b.n	8002e44 <HAL_I2C_Init+0x1dc>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10e      	bne.n	8002e24 <HAL_I2C_Init+0x1bc>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1e58      	subs	r0, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6859      	ldr	r1, [r3, #4]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	440b      	add	r3, r1
 8002e14:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e18:	3301      	adds	r3, #1
 8002e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e22:	e00f      	b.n	8002e44 <HAL_I2C_Init+0x1dc>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	1e58      	subs	r0, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6859      	ldr	r1, [r3, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	0099      	lsls	r1, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	6809      	ldr	r1, [r1, #0]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69da      	ldr	r2, [r3, #28]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6911      	ldr	r1, [r2, #16]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68d2      	ldr	r2, [r2, #12]
 8002e7e:	4311      	orrs	r1, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	000186a0 	.word	0x000186a0
 8002ee0:	001e847f 	.word	0x001e847f
 8002ee4:	003d08ff 	.word	0x003d08ff
 8002ee8:	431bde83 	.word	0x431bde83
 8002eec:	10624dd3 	.word	0x10624dd3

08002ef0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08c      	sub	sp, #48	; 0x30
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	461a      	mov	r2, r3
 8002efc:	460b      	mov	r3, r1
 8002efe:	817b      	strh	r3, [r7, #10]
 8002f00:	4613      	mov	r3, r2
 8002f02:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f08:	f7ff f84c 	bl	8001fa4 <HAL_GetTick>
 8002f0c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	f040 823f 	bne.w	800339a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	2319      	movs	r3, #25
 8002f22:	2201      	movs	r2, #1
 8002f24:	497f      	ldr	r1, [pc, #508]	; (8003124 <HAL_I2C_Master_Receive+0x234>)
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fb10 	bl	800354c <I2C_WaitOnFlagUntilTimeout>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002f32:	2302      	movs	r3, #2
 8002f34:	e232      	b.n	800339c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_I2C_Master_Receive+0x54>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e22b      	b.n	800339c <HAL_I2C_Master_Receive+0x4ac>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d007      	beq.n	8002f6a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0201 	orr.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2222      	movs	r2, #34	; 0x22
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2210      	movs	r2, #16
 8002f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	893a      	ldrh	r2, [r7, #8]
 8002f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4a5f      	ldr	r2, [pc, #380]	; (8003128 <HAL_I2C_Master_Receive+0x238>)
 8002faa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fac:	8979      	ldrh	r1, [r7, #10]
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f9fc 	bl	80033b0 <I2C_MasterRequestRead>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e1ec      	b.n	800339c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d113      	bne.n	8002ff2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	e1c0      	b.n	8003374 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d11e      	bne.n	8003038 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003008:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800300a:	b672      	cpsid	i
}
 800300c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	61bb      	str	r3, [r7, #24]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003032:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003034:	b662      	cpsie	i
}
 8003036:	e035      	b.n	80030a4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	2b02      	cmp	r3, #2
 800303e:	d11e      	bne.n	800307e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800304e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003050:	b672      	cpsid	i
}
 8003052:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003078:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800307a:	b662      	cpsie	i
}
 800307c:	e012      	b.n	80030a4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800308c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308e:	2300      	movs	r3, #0
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80030a4:	e166      	b.n	8003374 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	f200 811f 	bhi.w	80032ee <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d123      	bne.n	8003100 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fb1b 	bl	80036f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e167      	b.n	800339c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030fe:	e139      	b.n	8003374 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	2b02      	cmp	r3, #2
 8003106:	d152      	bne.n	80031ae <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	2200      	movs	r2, #0
 8003110:	4906      	ldr	r1, [pc, #24]	; (800312c <HAL_I2C_Master_Receive+0x23c>)
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fa1a 	bl	800354c <I2C_WaitOnFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e13c      	b.n	800339c <HAL_I2C_Master_Receive+0x4ac>
 8003122:	bf00      	nop
 8003124:	00100002 	.word	0x00100002
 8003128:	ffff0000 	.word	0xffff0000
 800312c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003130:	b672      	cpsid	i
}
 8003132:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003142:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003176:	b662      	cpsie	i
}
 8003178:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031ac:	e0e2      	b.n	8003374 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	2200      	movs	r2, #0
 80031b6:	497b      	ldr	r1, [pc, #492]	; (80033a4 <HAL_I2C_Master_Receive+0x4b4>)
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 f9c7 	bl	800354c <I2C_WaitOnFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0e9      	b.n	800339c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031d8:	b672      	cpsid	i
}
 80031da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003204:	b29b      	uxth	r3, r3
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800320e:	4b66      	ldr	r3, [pc, #408]	; (80033a8 <HAL_I2C_Master_Receive+0x4b8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	08db      	lsrs	r3, r3, #3
 8003214:	4a65      	ldr	r2, [pc, #404]	; (80033ac <HAL_I2C_Master_Receive+0x4bc>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	0a1a      	lsrs	r2, r3, #8
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	00da      	lsls	r2, r3, #3
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	3b01      	subs	r3, #1
 800322c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d118      	bne.n	8003266 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f043 0220 	orr.w	r2, r3, #32
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003256:	b662      	cpsie	i
}
 8003258:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e09a      	b.n	800339c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b04      	cmp	r3, #4
 8003272:	d1d9      	bne.n	8003228 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003282:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032b6:	b662      	cpsie	i
}
 80032b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032ec:	e042      	b.n	8003374 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 fa00 	bl	80036f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e04c      	b.n	800339c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b04      	cmp	r3, #4
 8003340:	d118      	bne.n	8003374 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003378:	2b00      	cmp	r3, #0
 800337a:	f47f ae94 	bne.w	80030a6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	e000      	b.n	800339c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800339a:	2302      	movs	r3, #2
  }
}
 800339c:	4618      	mov	r0, r3
 800339e:	3728      	adds	r7, #40	; 0x28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	00010004 	.word	0x00010004
 80033a8:	20000050 	.word	0x20000050
 80033ac:	14f8b589 	.word	0x14f8b589

080033b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	607a      	str	r2, [r7, #4]
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	460b      	mov	r3, r1
 80033be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d006      	beq.n	80033ea <I2C_MasterRequestRead+0x3a>
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d003      	beq.n	80033ea <I2C_MasterRequestRead+0x3a>
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033e8:	d108      	bne.n	80033fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	e00b      	b.n	8003414 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	2b11      	cmp	r3, #17
 8003402:	d107      	bne.n	8003414 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003412:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f893 	bl	800354c <I2C_WaitOnFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00d      	beq.n	8003448 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800343a:	d103      	bne.n	8003444 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003442:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e079      	b.n	800353c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003450:	d108      	bne.n	8003464 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003452:	897b      	ldrh	r3, [r7, #10]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	b2da      	uxtb	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	611a      	str	r2, [r3, #16]
 8003462:	e05f      	b.n	8003524 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003464:	897b      	ldrh	r3, [r7, #10]
 8003466:	11db      	asrs	r3, r3, #7
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f003 0306 	and.w	r3, r3, #6
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f063 030f 	orn	r3, r3, #15
 8003474:	b2da      	uxtb	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4930      	ldr	r1, [pc, #192]	; (8003544 <I2C_MasterRequestRead+0x194>)
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f8b9 	bl	80035fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e054      	b.n	800353c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003492:	897b      	ldrh	r3, [r7, #10]
 8003494:	b2da      	uxtb	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4929      	ldr	r1, [pc, #164]	; (8003548 <I2C_MasterRequestRead+0x198>)
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f8a9 	bl	80035fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e044      	b.n	800353c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f831 	bl	800354c <I2C_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00d      	beq.n	800350c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034fe:	d103      	bne.n	8003508 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e017      	b.n	800353c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800350c:	897b      	ldrh	r3, [r7, #10]
 800350e:	11db      	asrs	r3, r3, #7
 8003510:	b2db      	uxtb	r3, r3
 8003512:	f003 0306 	and.w	r3, r3, #6
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f063 030e 	orn	r3, r3, #14
 800351c:	b2da      	uxtb	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	4907      	ldr	r1, [pc, #28]	; (8003548 <I2C_MasterRequestRead+0x198>)
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f865 	bl	80035fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	00010008 	.word	0x00010008
 8003548:	00010002 	.word	0x00010002

0800354c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	4613      	mov	r3, r2
 800355a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800355c:	e025      	b.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003564:	d021      	beq.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003566:	f7fe fd1d 	bl	8001fa4 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d302      	bcc.n	800357c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d116      	bne.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f043 0220 	orr.w	r2, r3, #32
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e023      	b.n	80035f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	0c1b      	lsrs	r3, r3, #16
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d10d      	bne.n	80035d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	43da      	mvns	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4013      	ands	r3, r2
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	e00c      	b.n	80035ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	43da      	mvns	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4013      	ands	r3, r2
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	bf0c      	ite	eq
 80035e2:	2301      	moveq	r3, #1
 80035e4:	2300      	movne	r3, #0
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	461a      	mov	r2, r3
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d0b6      	beq.n	800355e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
 8003606:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003608:	e051      	b.n	80036ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003618:	d123      	bne.n	8003662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003628:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003632:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f043 0204 	orr.w	r2, r3, #4
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e046      	b.n	80036f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d021      	beq.n	80036ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366a:	f7fe fc9b 	bl	8001fa4 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	429a      	cmp	r2, r3
 8003678:	d302      	bcc.n	8003680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d116      	bne.n	80036ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f043 0220 	orr.w	r2, r3, #32
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e020      	b.n	80036f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	0c1b      	lsrs	r3, r3, #16
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d10c      	bne.n	80036d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	43da      	mvns	r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4013      	ands	r3, r2
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	bf14      	ite	ne
 80036ca:	2301      	movne	r3, #1
 80036cc:	2300      	moveq	r3, #0
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	e00b      	b.n	80036ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	43da      	mvns	r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	4013      	ands	r3, r2
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf14      	ite	ne
 80036e4:	2301      	movne	r3, #1
 80036e6:	2300      	moveq	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d18d      	bne.n	800360a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003704:	e042      	b.n	800378c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b10      	cmp	r3, #16
 8003712:	d119      	bne.n	8003748 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0210 	mvn.w	r2, #16
 800371c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e029      	b.n	800379c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003748:	f7fe fc2c 	bl	8001fa4 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	429a      	cmp	r2, r3
 8003756:	d302      	bcc.n	800375e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d116      	bne.n	800378c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	f043 0220 	orr.w	r2, r3, #32
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e007      	b.n	800379c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003796:	2b40      	cmp	r3, #64	; 0x40
 8003798:	d1b5      	bne.n	8003706 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e304      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 8087 	beq.w	80038d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037c4:	4b92      	ldr	r3, [pc, #584]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d00c      	beq.n	80037ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037d0:	4b8f      	ldr	r3, [pc, #572]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d112      	bne.n	8003802 <HAL_RCC_OscConfig+0x5e>
 80037dc:	4b8c      	ldr	r3, [pc, #560]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e8:	d10b      	bne.n	8003802 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ea:	4b89      	ldr	r3, [pc, #548]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d06c      	beq.n	80038d0 <HAL_RCC_OscConfig+0x12c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d168      	bne.n	80038d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e2de      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380a:	d106      	bne.n	800381a <HAL_RCC_OscConfig+0x76>
 800380c:	4b80      	ldr	r3, [pc, #512]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a7f      	ldr	r2, [pc, #508]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	e02e      	b.n	8003878 <HAL_RCC_OscConfig+0xd4>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10c      	bne.n	800383c <HAL_RCC_OscConfig+0x98>
 8003822:	4b7b      	ldr	r3, [pc, #492]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a7a      	ldr	r2, [pc, #488]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	4b78      	ldr	r3, [pc, #480]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a77      	ldr	r2, [pc, #476]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e01d      	b.n	8003878 <HAL_RCC_OscConfig+0xd4>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0xbc>
 8003846:	4b72      	ldr	r3, [pc, #456]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a71      	ldr	r2, [pc, #452]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800384c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	4b6f      	ldr	r3, [pc, #444]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a6e      	ldr	r2, [pc, #440]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e00b      	b.n	8003878 <HAL_RCC_OscConfig+0xd4>
 8003860:	4b6b      	ldr	r3, [pc, #428]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a6a      	ldr	r2, [pc, #424]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	4b68      	ldr	r3, [pc, #416]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a67      	ldr	r2, [pc, #412]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003876:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d013      	beq.n	80038a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fe fb90 	bl	8001fa4 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003888:	f7fe fb8c 	bl	8001fa4 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	; 0x64
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e292      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389a:	4b5d      	ldr	r3, [pc, #372]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0xe4>
 80038a6:	e014      	b.n	80038d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fe fb7c 	bl	8001fa4 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b0:	f7fe fb78 	bl	8001fa4 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	; 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e27e      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c2:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x10c>
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d063      	beq.n	80039a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038de:	4b4c      	ldr	r3, [pc, #304]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00b      	beq.n	8003902 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038ea:	4b49      	ldr	r3, [pc, #292]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d11c      	bne.n	8003930 <HAL_RCC_OscConfig+0x18c>
 80038f6:	4b46      	ldr	r3, [pc, #280]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d116      	bne.n	8003930 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003902:	4b43      	ldr	r3, [pc, #268]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_RCC_OscConfig+0x176>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d001      	beq.n	800391a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e252      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391a:	4b3d      	ldr	r3, [pc, #244]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4939      	ldr	r1, [pc, #228]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392e:	e03a      	b.n	80039a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d020      	beq.n	800397a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003938:	4b36      	ldr	r3, [pc, #216]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 800393a:	2201      	movs	r2, #1
 800393c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393e:	f7fe fb31 	bl	8001fa4 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003946:	f7fe fb2d 	bl	8001fa4 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e233      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003958:	4b2d      	ldr	r3, [pc, #180]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003964:	4b2a      	ldr	r3, [pc, #168]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4927      	ldr	r1, [pc, #156]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003974:	4313      	orrs	r3, r2
 8003976:	600b      	str	r3, [r1, #0]
 8003978:	e015      	b.n	80039a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800397a:	4b26      	ldr	r3, [pc, #152]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003980:	f7fe fb10 	bl	8001fa4 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003988:	f7fe fb0c 	bl	8001fa4 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e212      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399a:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d03a      	beq.n	8003a28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d019      	beq.n	80039ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ba:	4b17      	ldr	r3, [pc, #92]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c0:	f7fe faf0 	bl	8001fa4 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c8:	f7fe faec 	bl	8001fa4 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e1f2      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039da:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039e6:	2001      	movs	r0, #1
 80039e8:	f000 fbfa 	bl	80041e0 <RCC_Delay>
 80039ec:	e01c      	b.n	8003a28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ee:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f4:	f7fe fad6 	bl	8001fa4 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039fa:	e00f      	b.n	8003a1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039fc:	f7fe fad2 	bl	8001fa4 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d908      	bls.n	8003a1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e1d8      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000
 8003a14:	42420000 	.word	0x42420000
 8003a18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a1c:	4b9b      	ldr	r3, [pc, #620]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e9      	bne.n	80039fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80a6 	beq.w	8003b82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a36:	2300      	movs	r3, #0
 8003a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3a:	4b94      	ldr	r3, [pc, #592]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10d      	bne.n	8003a62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a46:	4b91      	ldr	r3, [pc, #580]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	4a90      	ldr	r2, [pc, #576]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a50:	61d3      	str	r3, [r2, #28]
 8003a52:	4b8e      	ldr	r3, [pc, #568]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a62:	4b8b      	ldr	r3, [pc, #556]	; (8003c90 <HAL_RCC_OscConfig+0x4ec>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d118      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a6e:	4b88      	ldr	r3, [pc, #544]	; (8003c90 <HAL_RCC_OscConfig+0x4ec>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a87      	ldr	r2, [pc, #540]	; (8003c90 <HAL_RCC_OscConfig+0x4ec>)
 8003a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a7a:	f7fe fa93 	bl	8001fa4 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a82:	f7fe fa8f 	bl	8001fa4 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b64      	cmp	r3, #100	; 0x64
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e195      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a94:	4b7e      	ldr	r3, [pc, #504]	; (8003c90 <HAL_RCC_OscConfig+0x4ec>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d106      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x312>
 8003aa8:	4b78      	ldr	r3, [pc, #480]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	4a77      	ldr	r2, [pc, #476]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003aae:	f043 0301 	orr.w	r3, r3, #1
 8003ab2:	6213      	str	r3, [r2, #32]
 8003ab4:	e02d      	b.n	8003b12 <HAL_RCC_OscConfig+0x36e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x334>
 8003abe:	4b73      	ldr	r3, [pc, #460]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	4a72      	ldr	r2, [pc, #456]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	6213      	str	r3, [r2, #32]
 8003aca:	4b70      	ldr	r3, [pc, #448]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	4a6f      	ldr	r2, [pc, #444]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003ad0:	f023 0304 	bic.w	r3, r3, #4
 8003ad4:	6213      	str	r3, [r2, #32]
 8003ad6:	e01c      	b.n	8003b12 <HAL_RCC_OscConfig+0x36e>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2b05      	cmp	r3, #5
 8003ade:	d10c      	bne.n	8003afa <HAL_RCC_OscConfig+0x356>
 8003ae0:	4b6a      	ldr	r3, [pc, #424]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	4a69      	ldr	r2, [pc, #420]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003ae6:	f043 0304 	orr.w	r3, r3, #4
 8003aea:	6213      	str	r3, [r2, #32]
 8003aec:	4b67      	ldr	r3, [pc, #412]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	4a66      	ldr	r2, [pc, #408]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6213      	str	r3, [r2, #32]
 8003af8:	e00b      	b.n	8003b12 <HAL_RCC_OscConfig+0x36e>
 8003afa:	4b64      	ldr	r3, [pc, #400]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	4a63      	ldr	r2, [pc, #396]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	6213      	str	r3, [r2, #32]
 8003b06:	4b61      	ldr	r3, [pc, #388]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	4a60      	ldr	r2, [pc, #384]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003b0c:	f023 0304 	bic.w	r3, r3, #4
 8003b10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d015      	beq.n	8003b46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1a:	f7fe fa43 	bl	8001fa4 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b20:	e00a      	b.n	8003b38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b22:	f7fe fa3f 	bl	8001fa4 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e143      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b38:	4b54      	ldr	r3, [pc, #336]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0ee      	beq.n	8003b22 <HAL_RCC_OscConfig+0x37e>
 8003b44:	e014      	b.n	8003b70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b46:	f7fe fa2d 	bl	8001fa4 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4c:	e00a      	b.n	8003b64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4e:	f7fe fa29 	bl	8001fa4 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e12d      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b64:	4b49      	ldr	r3, [pc, #292]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1ee      	bne.n	8003b4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b70:	7dfb      	ldrb	r3, [r7, #23]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d105      	bne.n	8003b82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b76:	4b45      	ldr	r3, [pc, #276]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	4a44      	ldr	r2, [pc, #272]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b80:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 808c 	beq.w	8003ca4 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003b8c:	4b3f      	ldr	r3, [pc, #252]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b98:	d10e      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003b9a:	4b3c      	ldr	r3, [pc, #240]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d108      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003ba6:	4b39      	ldr	r3, [pc, #228]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e103      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d14e      	bne.n	8003c5e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003bc0:	4b32      	ldr	r3, [pc, #200]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d009      	beq.n	8003be0 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003bcc:	4b2f      	ldr	r3, [pc, #188]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0ef      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003be0:	4b2c      	ldr	r3, [pc, #176]	; (8003c94 <HAL_RCC_OscConfig+0x4f0>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be6:	f7fe f9dd 	bl	8001fa4 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003bee:	f7fe f9d9 	bl	8001fa4 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b64      	cmp	r3, #100	; 0x64
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e0df      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003c00:	4b22      	ldr	r3, [pc, #136]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1f0      	bne.n	8003bee <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003c0c:	4b1f      	ldr	r3, [pc, #124]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c18:	491c      	ldr	r1, [pc, #112]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003c1e:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	4918      	ldr	r1, [pc, #96]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003c30:	4b18      	ldr	r3, [pc, #96]	; (8003c94 <HAL_RCC_OscConfig+0x4f0>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c36:	f7fe f9b5 	bl	8001fa4 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003c3e:	f7fe f9b1 	bl	8001fa4 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b64      	cmp	r3, #100	; 0x64
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e0b7      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003c50:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0f0      	beq.n	8003c3e <HAL_RCC_OscConfig+0x49a>
 8003c5c:	e022      	b.n	8003ca4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003c5e:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <HAL_RCC_OscConfig+0x4e8>)
 8003c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <HAL_RCC_OscConfig+0x4f0>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7fe f998 	bl	8001fa4 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003c76:	e00f      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003c78:	f7fe f994 	bl	8001fa4 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b64      	cmp	r3, #100	; 0x64
 8003c84:	d908      	bls.n	8003c98 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e09a      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
 8003c8a:	bf00      	nop
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40007000 	.word	0x40007000
 8003c94:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003c98:	4b4b      	ldr	r3, [pc, #300]	; (8003dc8 <HAL_RCC_OscConfig+0x624>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e9      	bne.n	8003c78 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8088 	beq.w	8003dbe <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cae:	4b46      	ldr	r3, [pc, #280]	; (8003dc8 <HAL_RCC_OscConfig+0x624>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d068      	beq.n	8003d8c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d14d      	bne.n	8003d5e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc2:	4b42      	ldr	r3, [pc, #264]	; (8003dcc <HAL_RCC_OscConfig+0x628>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fe f96c 	bl	8001fa4 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd0:	f7fe f968 	bl	8001fa4 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e06e      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce2:	4b39      	ldr	r3, [pc, #228]	; (8003dc8 <HAL_RCC_OscConfig+0x624>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf6:	d10f      	bne.n	8003d18 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003cf8:	4b33      	ldr	r3, [pc, #204]	; (8003dc8 <HAL_RCC_OscConfig+0x624>)
 8003cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4931      	ldr	r1, [pc, #196]	; (8003dc8 <HAL_RCC_OscConfig+0x624>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d06:	4b30      	ldr	r3, [pc, #192]	; (8003dc8 <HAL_RCC_OscConfig+0x624>)
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	f023 020f 	bic.w	r2, r3, #15
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	492d      	ldr	r1, [pc, #180]	; (8003dc8 <HAL_RCC_OscConfig+0x624>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d18:	4b2b      	ldr	r3, [pc, #172]	; (8003dc8 <HAL_RCC_OscConfig+0x624>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	4927      	ldr	r1, [pc, #156]	; (8003dc8 <HAL_RCC_OscConfig+0x624>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d30:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <HAL_RCC_OscConfig+0x628>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d36:	f7fe f935 	bl	8001fa4 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3e:	f7fe f931 	bl	8001fa4 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e037      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d50:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <HAL_RCC_OscConfig+0x624>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x59a>
 8003d5c:	e02f      	b.n	8003dbe <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5e:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <HAL_RCC_OscConfig+0x628>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7fe f91e 	bl	8001fa4 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6c:	f7fe f91a 	bl	8001fa4 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e020      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d7e:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <HAL_RCC_OscConfig+0x624>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x5c8>
 8003d8a:	e018      	b.n	8003dbe <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e013      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_OscConfig+0x624>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d106      	bne.n	8003dba <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d001      	beq.n	8003dbe <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	42420060 	.word	0x42420060

08003dd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0d0      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003de4:	4b6a      	ldr	r3, [pc, #424]	; (8003f90 <HAL_RCC_ClockConfig+0x1c0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d910      	bls.n	8003e14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df2:	4b67      	ldr	r3, [pc, #412]	; (8003f90 <HAL_RCC_ClockConfig+0x1c0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 0207 	bic.w	r2, r3, #7
 8003dfa:	4965      	ldr	r1, [pc, #404]	; (8003f90 <HAL_RCC_ClockConfig+0x1c0>)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e02:	4b63      	ldr	r3, [pc, #396]	; (8003f90 <HAL_RCC_ClockConfig+0x1c0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0b8      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d020      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e2c:	4b59      	ldr	r3, [pc, #356]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4a58      	ldr	r2, [pc, #352]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e44:	4b53      	ldr	r3, [pc, #332]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	4a52      	ldr	r2, [pc, #328]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e50:	4b50      	ldr	r3, [pc, #320]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	494d      	ldr	r1, [pc, #308]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d040      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	4b47      	ldr	r3, [pc, #284]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d115      	bne.n	8003eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e07f      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d107      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8e:	4b41      	ldr	r3, [pc, #260]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e073      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9e:	4b3d      	ldr	r3, [pc, #244]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e06b      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eae:	4b39      	ldr	r3, [pc, #228]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f023 0203 	bic.w	r2, r3, #3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	4936      	ldr	r1, [pc, #216]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ec0:	f7fe f870 	bl	8001fa4 <HAL_GetTick>
 8003ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec8:	f7fe f86c 	bl	8001fa4 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e053      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ede:	4b2d      	ldr	r3, [pc, #180]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f003 020c 	and.w	r2, r3, #12
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d1eb      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef0:	4b27      	ldr	r3, [pc, #156]	; (8003f90 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d210      	bcs.n	8003f20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efe:	4b24      	ldr	r3, [pc, #144]	; (8003f90 <HAL_RCC_ClockConfig+0x1c0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 0207 	bic.w	r2, r3, #7
 8003f06:	4922      	ldr	r1, [pc, #136]	; (8003f90 <HAL_RCC_ClockConfig+0x1c0>)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0e:	4b20      	ldr	r3, [pc, #128]	; (8003f90 <HAL_RCC_ClockConfig+0x1c0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e032      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f2c:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4916      	ldr	r1, [pc, #88]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f4a:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	490e      	ldr	r1, [pc, #56]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f5e:	f000 f821 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8003f62:	4602      	mov	r2, r0
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	490a      	ldr	r1, [pc, #40]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003f70:	5ccb      	ldrb	r3, [r1, r3]
 8003f72:	fa22 f303 	lsr.w	r3, r2, r3
 8003f76:	4a09      	ldr	r2, [pc, #36]	; (8003f9c <HAL_RCC_ClockConfig+0x1cc>)
 8003f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f7a:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <HAL_RCC_ClockConfig+0x1d0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fd fd98 	bl	8001ab4 <HAL_InitTick>

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40022000 	.word	0x40022000
 8003f94:	40021000 	.word	0x40021000
 8003f98:	08009cd4 	.word	0x08009cd4
 8003f9c:	20000050 	.word	0x20000050
 8003fa0:	20000054 	.word	0x20000054

08003fa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa6:	b091      	sub	sp, #68	; 0x44
 8003fa8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8003faa:	4b56      	ldr	r3, [pc, #344]	; (8004104 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fac:	f107 0414 	add.w	r4, r7, #20
 8003fb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fb2:	c407      	stmia	r4!, {r0, r1, r2}
 8003fb4:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8003fb6:	4b54      	ldr	r3, [pc, #336]	; (8004108 <HAL_RCC_GetSysClockFreq+0x164>)
 8003fb8:	1d3c      	adds	r4, r7, #4
 8003fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8003fc8:	2300      	movs	r3, #0
 8003fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fcc:	2300      	movs	r3, #0
 8003fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd8:	2300      	movs	r3, #0
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fdc:	4b4b      	ldr	r3, [pc, #300]	; (800410c <HAL_RCC_GetSysClockFreq+0x168>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe4:	f003 030c 	and.w	r3, r3, #12
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d002      	beq.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x4e>
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d003      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x54>
 8003ff0:	e080      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ff2:	4b47      	ldr	r3, [pc, #284]	; (8004110 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003ff4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ff6:	e080      	b.n	80040fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffa:	0c9b      	lsrs	r3, r3, #18
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004004:	4413      	add	r3, r2
 8004006:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800400c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d066      	beq.n	80040e4 <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004016:	4b3d      	ldr	r3, [pc, #244]	; (800410c <HAL_RCC_GetSysClockFreq+0x168>)
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004022:	4413      	add	r3, r2
 8004024:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8004028:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800402a:	4b38      	ldr	r3, [pc, #224]	; (800410c <HAL_RCC_GetSysClockFreq+0x168>)
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d044      	beq.n	80040c0 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004036:	4b35      	ldr	r3, [pc, #212]	; (800410c <HAL_RCC_GetSysClockFreq+0x168>)
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	091b      	lsrs	r3, r3, #4
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	3301      	adds	r3, #1
 8004042:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004044:	4b31      	ldr	r3, [pc, #196]	; (800410c <HAL_RCC_GetSysClockFreq+0x168>)
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	0a1b      	lsrs	r3, r3, #8
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	3302      	adds	r3, #2
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	4618      	mov	r0, r3
 8004056:	f04f 0100 	mov.w	r1, #0
 800405a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405c:	461a      	mov	r2, r3
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	fb02 f501 	mul.w	r5, r2, r1
 8004066:	fb00 f403 	mul.w	r4, r0, r3
 800406a:	442c      	add	r4, r5
 800406c:	fba0 2302 	umull	r2, r3, r0, r2
 8004070:	18e1      	adds	r1, r4, r3
 8004072:	460b      	mov	r3, r1
 8004074:	4926      	ldr	r1, [pc, #152]	; (8004110 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004076:	fb01 f003 	mul.w	r0, r1, r3
 800407a:	2100      	movs	r1, #0
 800407c:	fb01 f102 	mul.w	r1, r1, r2
 8004080:	4401      	add	r1, r0
 8004082:	4823      	ldr	r0, [pc, #140]	; (8004110 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004084:	fba2 4500 	umull	r4, r5, r2, r0
 8004088:	194b      	adds	r3, r1, r5
 800408a:	461d      	mov	r5, r3
 800408c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408e:	4618      	mov	r0, r3
 8004090:	f04f 0100 	mov.w	r1, #0
 8004094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004096:	461a      	mov	r2, r3
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	fb02 fc01 	mul.w	ip, r2, r1
 80040a0:	fb00 f603 	mul.w	r6, r0, r3
 80040a4:	4466      	add	r6, ip
 80040a6:	fba0 2302 	umull	r2, r3, r0, r2
 80040aa:	18f1      	adds	r1, r6, r3
 80040ac:	460b      	mov	r3, r1
 80040ae:	4620      	mov	r0, r4
 80040b0:	4629      	mov	r1, r5
 80040b2:	f7fc f8cf 	bl	8000254 <__aeabi_uldivmod>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4613      	mov	r3, r2
 80040bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040be:	e007      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80040c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c2:	4a13      	ldr	r2, [pc, #76]	; (8004110 <HAL_RCC_GetSysClockFreq+0x16c>)
 80040c4:	fb02 f203 	mul.w	r2, r2, r3
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80040d0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80040d4:	461a      	mov	r2, r3
 80040d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d8:	4293      	cmp	r3, r2
 80040da:	d108      	bne.n	80040ee <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 80040dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040e2:	e004      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e6:	4a0b      	ldr	r2, [pc, #44]	; (8004114 <HAL_RCC_GetSysClockFreq+0x170>)
 80040e8:	fb02 f303 	mul.w	r3, r2, r3
 80040ec:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 80040ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040f2:	e002      	b.n	80040fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040f4:	4b08      	ldr	r3, [pc, #32]	; (8004118 <HAL_RCC_GetSysClockFreq+0x174>)
 80040f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3744      	adds	r7, #68	; 0x44
 8004100:	46bd      	mov	sp, r7
 8004102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004104:	08009c14 	.word	0x08009c14
 8004108:	08009c24 	.word	0x08009c24
 800410c:	40021000 	.word	0x40021000
 8004110:	00989680 	.word	0x00989680
 8004114:	003d0900 	.word	0x003d0900
 8004118:	007a1200 	.word	0x007a1200

0800411c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004120:	4b02      	ldr	r3, [pc, #8]	; (800412c <HAL_RCC_GetHCLKFreq+0x10>)
 8004122:	681b      	ldr	r3, [r3, #0]
}
 8004124:	4618      	mov	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr
 800412c:	20000050 	.word	0x20000050

08004130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004134:	f7ff fff2 	bl	800411c <HAL_RCC_GetHCLKFreq>
 8004138:	4602      	mov	r2, r0
 800413a:	4b05      	ldr	r3, [pc, #20]	; (8004150 <HAL_RCC_GetPCLK1Freq+0x20>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	0a1b      	lsrs	r3, r3, #8
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	4903      	ldr	r1, [pc, #12]	; (8004154 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004146:	5ccb      	ldrb	r3, [r1, r3]
 8004148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800414c:	4618      	mov	r0, r3
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40021000 	.word	0x40021000
 8004154:	08009ce4 	.word	0x08009ce4

08004158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800415c:	f7ff ffde 	bl	800411c <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	0adb      	lsrs	r3, r3, #11
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4903      	ldr	r1, [pc, #12]	; (800417c <HAL_RCC_GetPCLK2Freq+0x24>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004174:	4618      	mov	r0, r3
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40021000 	.word	0x40021000
 800417c:	08009ce4 	.word	0x08009ce4

08004180 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	220f      	movs	r2, #15
 800418e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004190:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <HAL_RCC_GetClockConfig+0x58>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f003 0203 	and.w	r2, r3, #3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800419c:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <HAL_RCC_GetClockConfig+0x58>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <HAL_RCC_GetClockConfig+0x58>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80041b4:	4b08      	ldr	r3, [pc, #32]	; (80041d8 <HAL_RCC_GetClockConfig+0x58>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	08db      	lsrs	r3, r3, #3
 80041ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80041c2:	4b06      	ldr	r3, [pc, #24]	; (80041dc <HAL_RCC_GetClockConfig+0x5c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0207 	and.w	r2, r3, #7
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr
 80041d8:	40021000 	.word	0x40021000
 80041dc:	40022000 	.word	0x40022000

080041e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041e8:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <RCC_Delay+0x34>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <RCC_Delay+0x38>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	0a5b      	lsrs	r3, r3, #9
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	fb02 f303 	mul.w	r3, r2, r3
 80041fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041fc:	bf00      	nop
  }
  while (Delay --);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1e5a      	subs	r2, r3, #1
 8004202:	60fa      	str	r2, [r7, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f9      	bne.n	80041fc <RCC_Delay+0x1c>
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr
 8004214:	20000050 	.word	0x20000050
 8004218:	10624dd3 	.word	0x10624dd3

0800421c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e041      	b.n	80042b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7fd fb94 	bl	8001970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3304      	adds	r3, #4
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f000 fa78 	bl	8004750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d001      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e03f      	b.n	8004354 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1b      	ldr	r2, [pc, #108]	; (8004360 <HAL_TIM_Base_Start_IT+0xa4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d013      	beq.n	800431e <HAL_TIM_Base_Start_IT+0x62>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fe:	d00e      	beq.n	800431e <HAL_TIM_Base_Start_IT+0x62>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a17      	ldr	r2, [pc, #92]	; (8004364 <HAL_TIM_Base_Start_IT+0xa8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d009      	beq.n	800431e <HAL_TIM_Base_Start_IT+0x62>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a16      	ldr	r2, [pc, #88]	; (8004368 <HAL_TIM_Base_Start_IT+0xac>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d004      	beq.n	800431e <HAL_TIM_Base_Start_IT+0x62>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a14      	ldr	r2, [pc, #80]	; (800436c <HAL_TIM_Base_Start_IT+0xb0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d111      	bne.n	8004342 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b06      	cmp	r3, #6
 800432e:	d010      	beq.n	8004352 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004340:	e007      	b.n	8004352 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f042 0201 	orr.w	r2, r2, #1
 8004350:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40012c00 	.word	0x40012c00
 8004364:	40000400 	.word	0x40000400
 8004368:	40000800 	.word	0x40000800
 800436c:	40000c00 	.word	0x40000c00

08004370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b02      	cmp	r3, #2
 8004384:	d122      	bne.n	80043cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b02      	cmp	r3, #2
 8004392:	d11b      	bne.n	80043cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0202 	mvn.w	r2, #2
 800439c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f9b1 	bl	800471a <HAL_TIM_IC_CaptureCallback>
 80043b8:	e005      	b.n	80043c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f9a4 	bl	8004708 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f9b3 	bl	800472c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d122      	bne.n	8004420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d11b      	bne.n	8004420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0204 	mvn.w	r2, #4
 80043f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2202      	movs	r2, #2
 80043f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f987 	bl	800471a <HAL_TIM_IC_CaptureCallback>
 800440c:	e005      	b.n	800441a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f97a 	bl	8004708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f989 	bl	800472c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b08      	cmp	r3, #8
 800442c:	d122      	bne.n	8004474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b08      	cmp	r3, #8
 800443a:	d11b      	bne.n	8004474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0208 	mvn.w	r2, #8
 8004444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2204      	movs	r2, #4
 800444a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f95d 	bl	800471a <HAL_TIM_IC_CaptureCallback>
 8004460:	e005      	b.n	800446e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f950 	bl	8004708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f95f 	bl	800472c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b10      	cmp	r3, #16
 8004480:	d122      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b10      	cmp	r3, #16
 800448e:	d11b      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0210 	mvn.w	r2, #16
 8004498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2208      	movs	r2, #8
 800449e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f933 	bl	800471a <HAL_TIM_IC_CaptureCallback>
 80044b4:	e005      	b.n	80044c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f926 	bl	8004708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f935 	bl	800472c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d10e      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d107      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0201 	mvn.w	r2, #1
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fd f87e 	bl	80015f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fe:	2b80      	cmp	r3, #128	; 0x80
 8004500:	d10e      	bne.n	8004520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450c:	2b80      	cmp	r3, #128	; 0x80
 800450e:	d107      	bne.n	8004520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fa89 	bl	8004a32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b40      	cmp	r3, #64	; 0x40
 800452c:	d10e      	bne.n	800454c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d107      	bne.n	800454c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f8f9 	bl	800473e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b20      	cmp	r3, #32
 8004558:	d10e      	bne.n	8004578 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b20      	cmp	r3, #32
 8004566:	d107      	bne.n	8004578 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0220 	mvn.w	r2, #32
 8004570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fa54 	bl	8004a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004578:	bf00      	nop
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_TIM_ConfigClockSource+0x18>
 8004594:	2302      	movs	r3, #2
 8004596:	e0b3      	b.n	8004700 <HAL_TIM_ConfigClockSource+0x180>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d0:	d03e      	beq.n	8004650 <HAL_TIM_ConfigClockSource+0xd0>
 80045d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d6:	f200 8087 	bhi.w	80046e8 <HAL_TIM_ConfigClockSource+0x168>
 80045da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045de:	f000 8085 	beq.w	80046ec <HAL_TIM_ConfigClockSource+0x16c>
 80045e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e6:	d87f      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x168>
 80045e8:	2b70      	cmp	r3, #112	; 0x70
 80045ea:	d01a      	beq.n	8004622 <HAL_TIM_ConfigClockSource+0xa2>
 80045ec:	2b70      	cmp	r3, #112	; 0x70
 80045ee:	d87b      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x168>
 80045f0:	2b60      	cmp	r3, #96	; 0x60
 80045f2:	d050      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x116>
 80045f4:	2b60      	cmp	r3, #96	; 0x60
 80045f6:	d877      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x168>
 80045f8:	2b50      	cmp	r3, #80	; 0x50
 80045fa:	d03c      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0xf6>
 80045fc:	2b50      	cmp	r3, #80	; 0x50
 80045fe:	d873      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x168>
 8004600:	2b40      	cmp	r3, #64	; 0x40
 8004602:	d058      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x136>
 8004604:	2b40      	cmp	r3, #64	; 0x40
 8004606:	d86f      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x168>
 8004608:	2b30      	cmp	r3, #48	; 0x30
 800460a:	d064      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x156>
 800460c:	2b30      	cmp	r3, #48	; 0x30
 800460e:	d86b      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x168>
 8004610:	2b20      	cmp	r3, #32
 8004612:	d060      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x156>
 8004614:	2b20      	cmp	r3, #32
 8004616:	d867      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x168>
 8004618:	2b00      	cmp	r3, #0
 800461a:	d05c      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x156>
 800461c:	2b10      	cmp	r3, #16
 800461e:	d05a      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004620:	e062      	b.n	80046e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6899      	ldr	r1, [r3, #8]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f000 f970 	bl	8004916 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004644:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	609a      	str	r2, [r3, #8]
      break;
 800464e:	e04e      	b.n	80046ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	6899      	ldr	r1, [r3, #8]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f000 f959 	bl	8004916 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004672:	609a      	str	r2, [r3, #8]
      break;
 8004674:	e03b      	b.n	80046ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6859      	ldr	r1, [r3, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	461a      	mov	r2, r3
 8004684:	f000 f8d0 	bl	8004828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2150      	movs	r1, #80	; 0x50
 800468e:	4618      	mov	r0, r3
 8004690:	f000 f927 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 8004694:	e02b      	b.n	80046ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6859      	ldr	r1, [r3, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	461a      	mov	r2, r3
 80046a4:	f000 f8ee 	bl	8004884 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2160      	movs	r1, #96	; 0x60
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 f917 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 80046b4:	e01b      	b.n	80046ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6859      	ldr	r1, [r3, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	461a      	mov	r2, r3
 80046c4:	f000 f8b0 	bl	8004828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2140      	movs	r1, #64	; 0x40
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 f907 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 80046d4:	e00b      	b.n	80046ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f000 f8fe 	bl	80048e2 <TIM_ITRx_SetConfig>
        break;
 80046e6:	e002      	b.n	80046ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80046e8:	bf00      	nop
 80046ea:	e000      	b.n	80046ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80046ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr

0800473e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr

08004750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a2d      	ldr	r2, [pc, #180]	; (8004818 <TIM_Base_SetConfig+0xc8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00f      	beq.n	8004788 <TIM_Base_SetConfig+0x38>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476e:	d00b      	beq.n	8004788 <TIM_Base_SetConfig+0x38>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a2a      	ldr	r2, [pc, #168]	; (800481c <TIM_Base_SetConfig+0xcc>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d007      	beq.n	8004788 <TIM_Base_SetConfig+0x38>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a29      	ldr	r2, [pc, #164]	; (8004820 <TIM_Base_SetConfig+0xd0>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d003      	beq.n	8004788 <TIM_Base_SetConfig+0x38>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a28      	ldr	r2, [pc, #160]	; (8004824 <TIM_Base_SetConfig+0xd4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d108      	bne.n	800479a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a1e      	ldr	r2, [pc, #120]	; (8004818 <TIM_Base_SetConfig+0xc8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00f      	beq.n	80047c2 <TIM_Base_SetConfig+0x72>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a8:	d00b      	beq.n	80047c2 <TIM_Base_SetConfig+0x72>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a1b      	ldr	r2, [pc, #108]	; (800481c <TIM_Base_SetConfig+0xcc>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d007      	beq.n	80047c2 <TIM_Base_SetConfig+0x72>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a1a      	ldr	r2, [pc, #104]	; (8004820 <TIM_Base_SetConfig+0xd0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d003      	beq.n	80047c2 <TIM_Base_SetConfig+0x72>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a19      	ldr	r2, [pc, #100]	; (8004824 <TIM_Base_SetConfig+0xd4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d108      	bne.n	80047d4 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a07      	ldr	r2, [pc, #28]	; (8004818 <TIM_Base_SetConfig+0xc8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d103      	bne.n	8004808 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	615a      	str	r2, [r3, #20]
}
 800480e:	bf00      	nop
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr
 8004818:	40012c00 	.word	0x40012c00
 800481c:	40000400 	.word	0x40000400
 8004820:	40000800 	.word	0x40000800
 8004824:	40000c00 	.word	0x40000c00

08004828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f023 0201 	bic.w	r2, r3, #1
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f023 030a 	bic.w	r3, r3, #10
 8004864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	621a      	str	r2, [r3, #32]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr

08004884 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	f023 0210 	bic.w	r2, r3, #16
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	031b      	lsls	r3, r3, #12
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	621a      	str	r2, [r3, #32]
}
 80048d8:	bf00      	nop
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr

080048e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b085      	sub	sp, #20
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	f043 0307 	orr.w	r3, r3, #7
 8004904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	609a      	str	r2, [r3, #8]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr

08004916 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004916:	b480      	push	{r7}
 8004918:	b087      	sub	sp, #28
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	607a      	str	r2, [r7, #4]
 8004922:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004930:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	021a      	lsls	r2, r3, #8
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	431a      	orrs	r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	4313      	orrs	r3, r2
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	609a      	str	r2, [r3, #8]
}
 800494a:	bf00      	nop
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	bc80      	pop	{r7}
 8004952:	4770      	bx	lr

08004954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004968:	2302      	movs	r3, #2
 800496a:	e04b      	b.n	8004a04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004992:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a19      	ldr	r2, [pc, #100]	; (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d013      	beq.n	80049d8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b8:	d00e      	beq.n	80049d8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a15      	ldr	r2, [pc, #84]	; (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d009      	beq.n	80049d8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a13      	ldr	r2, [pc, #76]	; (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d004      	beq.n	80049d8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a12      	ldr	r2, [pc, #72]	; (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d10c      	bne.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40012c00 	.word	0x40012c00
 8004a14:	40000400 	.word	0x40000400
 8004a18:	40000800 	.word	0x40000800
 8004a1c:	40000c00 	.word	0x40000c00

08004a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bc80      	pop	{r7}
 8004a30:	4770      	bx	lr

08004a32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr

08004a44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e03f      	b.n	8004ad6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fc ffa4 	bl	80019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2224      	movs	r2, #36	; 0x24
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fbe5 	bl	8005258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695a      	ldr	r2, [r3, #20]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004abc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d130      	bne.n	8004b5a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_UART_Transmit_IT+0x26>
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e029      	b.n	8004b5c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_UART_Transmit_IT+0x38>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e022      	b.n	8004b5c <HAL_UART_Transmit_IT+0x7e>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	88fa      	ldrh	r2, [r7, #6]
 8004b28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	88fa      	ldrh	r2, [r7, #6]
 8004b2e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2221      	movs	r2, #33	; 0x21
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b54:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	e000      	b.n	8004b5c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004b5a:	2302      	movs	r3, #2
  }
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr

08004b66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	4613      	mov	r3, r2
 8004b72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d11d      	bne.n	8004bbc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_UART_Receive_IT+0x26>
 8004b86:	88fb      	ldrh	r3, [r7, #6]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e016      	b.n	8004bbe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_UART_Receive_IT+0x38>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e00f      	b.n	8004bbe <HAL_UART_Receive_IT+0x58>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004bac:	88fb      	ldrh	r3, [r7, #6]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	68b9      	ldr	r1, [r7, #8]
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 f9c6 	bl	8004f44 <UART_Start_Receive_IT>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	e000      	b.n	8004bbe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004bbc:	2302      	movs	r3, #2
  }
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08a      	sub	sp, #40	; 0x28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10d      	bne.n	8004c1a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_UART_IRQHandler+0x52>
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fa76 	bl	8005104 <UART_Receive_IT>
      return;
 8004c18:	e17b      	b.n	8004f12 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80b1 	beq.w	8004d84 <HAL_UART_IRQHandler+0x1bc>
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d105      	bne.n	8004c38 <HAL_UART_IRQHandler+0x70>
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 80a6 	beq.w	8004d84 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_UART_IRQHandler+0x90>
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	f043 0201 	orr.w	r2, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_UART_IRQHandler+0xb0>
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	f043 0202 	orr.w	r2, r3, #2
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <HAL_UART_IRQHandler+0xd0>
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f043 0204 	orr.w	r2, r3, #4
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00f      	beq.n	8004cc2 <HAL_UART_IRQHandler+0xfa>
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d104      	bne.n	8004cb6 <HAL_UART_IRQHandler+0xee>
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d005      	beq.n	8004cc2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	f043 0208 	orr.w	r2, r3, #8
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 811e 	beq.w	8004f08 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d007      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x11e>
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fa0f 	bl	8005104 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	bf14      	ite	ne
 8004cf4:	2301      	movne	r3, #1
 8004cf6:	2300      	moveq	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d102      	bne.n	8004d0e <HAL_UART_IRQHandler+0x146>
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d031      	beq.n	8004d72 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f951 	bl	8004fb6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d023      	beq.n	8004d6a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695a      	ldr	r2, [r3, #20]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d30:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d013      	beq.n	8004d62 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3e:	4a76      	ldr	r2, [pc, #472]	; (8004f18 <HAL_UART_IRQHandler+0x350>)
 8004d40:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fd fac6 	bl	80022d8 <HAL_DMA_Abort_IT>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d016      	beq.n	8004d80 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d60:	e00e      	b.n	8004d80 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8da 	bl	8004f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d68:	e00a      	b.n	8004d80 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f8d6 	bl	8004f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d70:	e006      	b.n	8004d80 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f8d2 	bl	8004f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d7e:	e0c3      	b.n	8004f08 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d80:	bf00      	nop
    return;
 8004d82:	e0c1      	b.n	8004f08 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	f040 80a1 	bne.w	8004ed0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 809b 	beq.w	8004ed0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 8095 	beq.w	8004ed0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d04e      	beq.n	8004e68 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004dd4:	8a3b      	ldrh	r3, [r7, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 8098 	beq.w	8004f0c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004de0:	8a3a      	ldrh	r2, [r7, #16]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	f080 8092 	bcs.w	8004f0c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	8a3a      	ldrh	r2, [r7, #16]
 8004dec:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d02b      	beq.n	8004e50 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e06:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695a      	ldr	r2, [r3, #20]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0201 	bic.w	r2, r2, #1
 8004e16:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695a      	ldr	r2, [r3, #20]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e26:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0210 	bic.w	r2, r2, #16
 8004e44:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fd fa0a 	bl	8002264 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f864 	bl	8004f2e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e66:	e051      	b.n	8004f0c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d047      	beq.n	8004f10 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004e80:	8a7b      	ldrh	r3, [r7, #18]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d044      	beq.n	8004f10 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e94:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695a      	ldr	r2, [r3, #20]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0210 	bic.w	r2, r2, #16
 8004ec2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ec4:	8a7b      	ldrh	r3, [r7, #18]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f830 	bl	8004f2e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004ece:	e01f      	b.n	8004f10 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d008      	beq.n	8004eec <HAL_UART_IRQHandler+0x324>
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f8a6 	bl	8005036 <UART_Transmit_IT>
    return;
 8004eea:	e012      	b.n	8004f12 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00d      	beq.n	8004f12 <HAL_UART_IRQHandler+0x34a>
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d008      	beq.n	8004f12 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f8e7 	bl	80050d4 <UART_EndTransmit_IT>
    return;
 8004f06:	e004      	b.n	8004f12 <HAL_UART_IRQHandler+0x34a>
    return;
 8004f08:	bf00      	nop
 8004f0a:	e002      	b.n	8004f12 <HAL_UART_IRQHandler+0x34a>
      return;
 8004f0c:	bf00      	nop
 8004f0e:	e000      	b.n	8004f12 <HAL_UART_IRQHandler+0x34a>
      return;
 8004f10:	bf00      	nop
  }
}
 8004f12:	3728      	adds	r7, #40	; 0x28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	0800500f 	.word	0x0800500f

08004f1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bc80      	pop	{r7}
 8004f2c:	4770      	bx	lr

08004f2e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	460b      	mov	r3, r1
 8004f38:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	88fa      	ldrh	r2, [r7, #6]
 8004f5c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	88fa      	ldrh	r2, [r7, #6]
 8004f62:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2222      	movs	r2, #34	; 0x22
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f88:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695a      	ldr	r2, [r3, #20]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0201 	orr.w	r2, r2, #1
 8004f98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f042 0220 	orr.w	r2, r2, #32
 8004fa8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr

08004fb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fcc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695a      	ldr	r2, [r3, #20]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0201 	bic.w	r2, r2, #1
 8004fdc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d107      	bne.n	8004ff6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0210 	bic.w	r2, r2, #16
 8004ff4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	bc80      	pop	{r7}
 800500c:	4770      	bx	lr

0800500e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b084      	sub	sp, #16
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7ff ff77 	bl	8004f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005036:	b480      	push	{r7}
 8005038:	b085      	sub	sp, #20
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b21      	cmp	r3, #33	; 0x21
 8005048:	d13e      	bne.n	80050c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005052:	d114      	bne.n	800507e <UART_Transmit_IT+0x48>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d110      	bne.n	800507e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005070:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	1c9a      	adds	r2, r3, #2
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	621a      	str	r2, [r3, #32]
 800507c:	e008      	b.n	8005090 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	1c59      	adds	r1, r3, #1
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6211      	str	r1, [r2, #32]
 8005088:	781a      	ldrb	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29b      	uxth	r3, r3
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	4619      	mov	r1, r3
 800509e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10f      	bne.n	80050c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	e000      	b.n	80050ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050c8:	2302      	movs	r3, #2
  }
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr

080050d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7fc f9f8 	bl	80014ea <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b22      	cmp	r3, #34	; 0x22
 8005116:	f040 8099 	bne.w	800524c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005122:	d117      	bne.n	8005154 <UART_Receive_IT+0x50>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d113      	bne.n	8005154 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800512c:	2300      	movs	r3, #0
 800512e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005134:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	b29b      	uxth	r3, r3
 800513e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005142:	b29a      	uxth	r2, r3
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	1c9a      	adds	r2, r3, #2
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	629a      	str	r2, [r3, #40]	; 0x28
 8005152:	e026      	b.n	80051a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005158:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800515a:	2300      	movs	r3, #0
 800515c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005166:	d007      	beq.n	8005178 <UART_Receive_IT+0x74>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <UART_Receive_IT+0x82>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d106      	bne.n	8005186 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	b2da      	uxtb	r2, r3
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	701a      	strb	r2, [r3, #0]
 8005184:	e008      	b.n	8005198 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005192:	b2da      	uxtb	r2, r3
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	4619      	mov	r1, r3
 80051b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d148      	bne.n	8005248 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0220 	bic.w	r2, r2, #32
 80051c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695a      	ldr	r2, [r3, #20]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0201 	bic.w	r2, r2, #1
 80051e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d123      	bne.n	800523e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0210 	bic.w	r2, r2, #16
 800520a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0310 	and.w	r3, r3, #16
 8005216:	2b10      	cmp	r3, #16
 8005218:	d10a      	bne.n	8005230 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005234:	4619      	mov	r1, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff fe79 	bl	8004f2e <HAL_UARTEx_RxEventCallback>
 800523c:	e002      	b.n	8005244 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fc f948 	bl	80014d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e002      	b.n	800524e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e000      	b.n	800524e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800524c:	2302      	movs	r3, #2
  }
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005292:	f023 030c 	bic.w	r3, r3, #12
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	68b9      	ldr	r1, [r7, #8]
 800529c:	430b      	orrs	r3, r1
 800529e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699a      	ldr	r2, [r3, #24]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a2c      	ldr	r2, [pc, #176]	; (800536c <UART_SetConfig+0x114>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d103      	bne.n	80052c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052c0:	f7fe ff4a 	bl	8004158 <HAL_RCC_GetPCLK2Freq>
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	e002      	b.n	80052ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052c8:	f7fe ff32 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 80052cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4613      	mov	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	009a      	lsls	r2, r3, #2
 80052d8:	441a      	add	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e4:	4a22      	ldr	r2, [pc, #136]	; (8005370 <UART_SetConfig+0x118>)
 80052e6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ea:	095b      	lsrs	r3, r3, #5
 80052ec:	0119      	lsls	r1, r3, #4
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	009a      	lsls	r2, r3, #2
 80052f8:	441a      	add	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	fbb2 f2f3 	udiv	r2, r2, r3
 8005304:	4b1a      	ldr	r3, [pc, #104]	; (8005370 <UART_SetConfig+0x118>)
 8005306:	fba3 0302 	umull	r0, r3, r3, r2
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	2064      	movs	r0, #100	; 0x64
 800530e:	fb00 f303 	mul.w	r3, r0, r3
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	3332      	adds	r3, #50	; 0x32
 8005318:	4a15      	ldr	r2, [pc, #84]	; (8005370 <UART_SetConfig+0x118>)
 800531a:	fba2 2303 	umull	r2, r3, r2, r3
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005324:	4419      	add	r1, r3
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4613      	mov	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	009a      	lsls	r2, r3, #2
 8005330:	441a      	add	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	fbb2 f2f3 	udiv	r2, r2, r3
 800533c:	4b0c      	ldr	r3, [pc, #48]	; (8005370 <UART_SetConfig+0x118>)
 800533e:	fba3 0302 	umull	r0, r3, r3, r2
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	2064      	movs	r0, #100	; 0x64
 8005346:	fb00 f303 	mul.w	r3, r0, r3
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	3332      	adds	r3, #50	; 0x32
 8005350:	4a07      	ldr	r2, [pc, #28]	; (8005370 <UART_SetConfig+0x118>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	f003 020f 	and.w	r2, r3, #15
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	440a      	add	r2, r1
 8005362:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40013800 	.word	0x40013800
 8005370:	51eb851f 	.word	0x51eb851f

08005374 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	4603      	mov	r3, r0
 800537c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005386:	2b84      	cmp	r3, #132	; 0x84
 8005388:	d005      	beq.n	8005396 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800538a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4413      	add	r3, r2
 8005392:	3303      	adds	r3, #3
 8005394:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005396:	68fb      	ldr	r3, [r7, #12]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr

080053a2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053a8:	f3ef 8305 	mrs	r3, IPSR
 80053ac:	607b      	str	r3, [r7, #4]
  return(result);
 80053ae:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf14      	ite	ne
 80053b4:	2301      	movne	r3, #1
 80053b6:	2300      	moveq	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc80      	pop	{r7}
 80053c2:	4770      	bx	lr

080053c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80053c8:	f001 f832 	bl	8006430 <vTaskStartScheduler>
  
  return osOK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80053d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053d4:	b089      	sub	sp, #36	; 0x24
 80053d6:	af04      	add	r7, sp, #16
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d020      	beq.n	8005426 <osThreadCreate+0x54>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d01c      	beq.n	8005426 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685c      	ldr	r4, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681d      	ldr	r5, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691e      	ldr	r6, [r3, #16]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff ffb8 	bl	8005374 <makeFreeRtosPriority>
 8005404:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800540e:	9202      	str	r2, [sp, #8]
 8005410:	9301      	str	r3, [sp, #4]
 8005412:	9100      	str	r1, [sp, #0]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	4632      	mov	r2, r6
 8005418:	4629      	mov	r1, r5
 800541a:	4620      	mov	r0, r4
 800541c:	f000 fe32 	bl	8006084 <xTaskCreateStatic>
 8005420:	4603      	mov	r3, r0
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	e01c      	b.n	8005460 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685c      	ldr	r4, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005432:	b29e      	uxth	r6, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff ff9a 	bl	8005374 <makeFreeRtosPriority>
 8005440:	4602      	mov	r2, r0
 8005442:	f107 030c 	add.w	r3, r7, #12
 8005446:	9301      	str	r3, [sp, #4]
 8005448:	9200      	str	r2, [sp, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	4632      	mov	r2, r6
 800544e:	4629      	mov	r1, r5
 8005450:	4620      	mov	r0, r4
 8005452:	f000 fe73 	bl	800613c <xTaskCreate>
 8005456:	4603      	mov	r3, r0
 8005458:	2b01      	cmp	r3, #1
 800545a:	d001      	beq.n	8005460 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800545c:	2300      	movs	r3, #0
 800545e:	e000      	b.n	8005462 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005460:	68fb      	ldr	r3, [r7, #12]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800546a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <osDelay+0x16>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	e000      	b.n	8005482 <osDelay+0x18>
 8005480:	2301      	movs	r3, #1
 8005482:	4618      	mov	r0, r3
 8005484:	f000 ffa0 	bl	80063c8 <vTaskDelay>
  
  return osOK;
 8005488:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005492:	b590      	push	{r4, r7, lr}
 8005494:	b085      	sub	sp, #20
 8005496:	af02      	add	r7, sp, #8
 8005498:	6078      	str	r0, [r7, #4]
 800549a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d011      	beq.n	80054c8 <osMessageCreate+0x36>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00d      	beq.n	80054c8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6859      	ldr	r1, [r3, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	2400      	movs	r4, #0
 80054be:	9400      	str	r4, [sp, #0]
 80054c0:	f000 f968 	bl	8005794 <xQueueGenericCreateStatic>
 80054c4:	4603      	mov	r3, r0
 80054c6:	e008      	b.n	80054da <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6818      	ldr	r0, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	4619      	mov	r1, r3
 80054d4:	f000 f9d5 	bl	8005882 <xQueueGenericCreate>
 80054d8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd90      	pop	{r4, r7, pc}
	...

080054e4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80054f0:	2300      	movs	r3, #0
 80054f2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <osMessagePut+0x1e>
    ticks = 1;
 80054fe:	2301      	movs	r3, #1
 8005500:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005502:	f7ff ff4e 	bl	80053a2 <inHandlerMode>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d018      	beq.n	800553e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800550c:	f107 0210 	add.w	r2, r7, #16
 8005510:	f107 0108 	add.w	r1, r7, #8
 8005514:	2300      	movs	r3, #0
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 fb0e 	bl	8005b38 <xQueueGenericSendFromISR>
 800551c:	4603      	mov	r3, r0
 800551e:	2b01      	cmp	r3, #1
 8005520:	d001      	beq.n	8005526 <osMessagePut+0x42>
      return osErrorOS;
 8005522:	23ff      	movs	r3, #255	; 0xff
 8005524:	e018      	b.n	8005558 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d014      	beq.n	8005556 <osMessagePut+0x72>
 800552c:	4b0c      	ldr	r3, [pc, #48]	; (8005560 <osMessagePut+0x7c>)
 800552e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	e00b      	b.n	8005556 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800553e:	f107 0108 	add.w	r1, r7, #8
 8005542:	2300      	movs	r3, #0
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f9f8 	bl	800593c <xQueueGenericSend>
 800554c:	4603      	mov	r3, r0
 800554e:	2b01      	cmp	r3, #1
 8005550:	d001      	beq.n	8005556 <osMessagePut+0x72>
      return osErrorOS;
 8005552:	23ff      	movs	r3, #255	; 0xff
 8005554:	e000      	b.n	8005558 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	e000ed04 	.word	0xe000ed04

08005564 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f103 0208 	add.w	r2, r3, #8
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f04f 32ff 	mov.w	r2, #4294967295
 800557c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f103 0208 	add.w	r2, r3, #8
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f103 0208 	add.w	r2, r3, #8
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	bc80      	pop	{r7}
 80055a0:	4770      	bx	lr

080055a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bc80      	pop	{r7}
 80055b8:	4770      	bx	lr

080055ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055ba:	b480      	push	{r7}
 80055bc:	b085      	sub	sp, #20
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	601a      	str	r2, [r3, #0]
}
 80055f6:	bf00      	nop
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bc80      	pop	{r7}
 80055fe:	4770      	bx	lr

08005600 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005616:	d103      	bne.n	8005620 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	e00c      	b.n	800563a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3308      	adds	r3, #8
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	e002      	b.n	800562e <vListInsert+0x2e>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	429a      	cmp	r2, r3
 8005638:	d2f6      	bcs.n	8005628 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	601a      	str	r2, [r3, #0]
}
 8005666:	bf00      	nop
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	6892      	ldr	r2, [r2, #8]
 8005686:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6852      	ldr	r2, [r2, #4]
 8005690:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	429a      	cmp	r2, r3
 800569a:	d103      	bne.n	80056a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	1e5a      	subs	r2, r3, #1
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr
	...

080056c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80056ea:	bf00      	nop
 80056ec:	e7fe      	b.n	80056ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80056ee:	f001 fcb5 	bl	800705c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fa:	68f9      	ldr	r1, [r7, #12]
 80056fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056fe:	fb01 f303 	mul.w	r3, r1, r3
 8005702:	441a      	add	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571e:	3b01      	subs	r3, #1
 8005720:	68f9      	ldr	r1, [r7, #12]
 8005722:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005724:	fb01 f303 	mul.w	r3, r1, r3
 8005728:	441a      	add	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	22ff      	movs	r2, #255	; 0xff
 8005732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	22ff      	movs	r2, #255	; 0xff
 800573a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d114      	bne.n	800576e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d01a      	beq.n	8005782 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3310      	adds	r3, #16
 8005750:	4618      	mov	r0, r3
 8005752:	f001 f8c5 	bl	80068e0 <xTaskRemoveFromEventList>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d012      	beq.n	8005782 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800575c:	4b0c      	ldr	r3, [pc, #48]	; (8005790 <xQueueGenericReset+0xcc>)
 800575e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	e009      	b.n	8005782 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3310      	adds	r3, #16
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff fef6 	bl	8005564 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3324      	adds	r3, #36	; 0x24
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff fef1 	bl	8005564 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005782:	f001 fc9b 	bl	80070bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005786:	2301      	movs	r3, #1
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	e000ed04 	.word	0xe000ed04

08005794 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08e      	sub	sp, #56	; 0x38
 8005798:	af02      	add	r7, sp, #8
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10a      	bne.n	80057be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057ba:	bf00      	nop
 80057bc:	e7fe      	b.n	80057bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057d6:	bf00      	nop
 80057d8:	e7fe      	b.n	80057d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <xQueueGenericCreateStatic+0x52>
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <xQueueGenericCreateStatic+0x56>
 80057e6:	2301      	movs	r3, #1
 80057e8:	e000      	b.n	80057ec <xQueueGenericCreateStatic+0x58>
 80057ea:	2300      	movs	r3, #0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	623b      	str	r3, [r7, #32]
}
 8005802:	bf00      	nop
 8005804:	e7fe      	b.n	8005804 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d102      	bne.n	8005812 <xQueueGenericCreateStatic+0x7e>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <xQueueGenericCreateStatic+0x82>
 8005812:	2301      	movs	r3, #1
 8005814:	e000      	b.n	8005818 <xQueueGenericCreateStatic+0x84>
 8005816:	2300      	movs	r3, #0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10a      	bne.n	8005832 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	61fb      	str	r3, [r7, #28]
}
 800582e:	bf00      	nop
 8005830:	e7fe      	b.n	8005830 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005832:	2348      	movs	r3, #72	; 0x48
 8005834:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b48      	cmp	r3, #72	; 0x48
 800583a:	d00a      	beq.n	8005852 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	61bb      	str	r3, [r7, #24]
}
 800584e:	bf00      	nop
 8005850:	e7fe      	b.n	8005850 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00d      	beq.n	8005878 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800585c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005864:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	4613      	mov	r3, r2
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 f843 	bl	80058fe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800587a:	4618      	mov	r0, r3
 800587c:	3730      	adds	r7, #48	; 0x30
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005882:	b580      	push	{r7, lr}
 8005884:	b08a      	sub	sp, #40	; 0x28
 8005886:	af02      	add	r7, sp, #8
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	4613      	mov	r3, r2
 800588e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10a      	bne.n	80058ac <xQueueGenericCreate+0x2a>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	613b      	str	r3, [r7, #16]
}
 80058a8:	bf00      	nop
 80058aa:	e7fe      	b.n	80058aa <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80058b2:	2300      	movs	r3, #0
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	e004      	b.n	80058c2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	fb02 f303 	mul.w	r3, r2, r3
 80058c0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	3348      	adds	r3, #72	; 0x48
 80058c6:	4618      	mov	r0, r3
 80058c8:	f001 fcc8 	bl	800725c <pvPortMalloc>
 80058cc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00f      	beq.n	80058f4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	3348      	adds	r3, #72	; 0x48
 80058d8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058e2:	79fa      	ldrb	r2, [r7, #7]
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	4613      	mov	r3, r2
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	68b9      	ldr	r1, [r7, #8]
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 f805 	bl	80058fe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80058f4:	69bb      	ldr	r3, [r7, #24]
	}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3720      	adds	r7, #32
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
 800590a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	e002      	b.n	8005920 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800592c:	2101      	movs	r1, #1
 800592e:	69b8      	ldr	r0, [r7, #24]
 8005930:	f7ff fec8 	bl	80056c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08e      	sub	sp, #56	; 0x38
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800594a:	2300      	movs	r3, #0
 800594c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10a      	bne.n	800596e <xQueueGenericSend+0x32>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800596a:	bf00      	nop
 800596c:	e7fe      	b.n	800596c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d103      	bne.n	800597c <xQueueGenericSend+0x40>
 8005974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <xQueueGenericSend+0x44>
 800597c:	2301      	movs	r3, #1
 800597e:	e000      	b.n	8005982 <xQueueGenericSend+0x46>
 8005980:	2300      	movs	r3, #0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10a      	bne.n	800599c <xQueueGenericSend+0x60>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005998:	bf00      	nop
 800599a:	e7fe      	b.n	800599a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d103      	bne.n	80059aa <xQueueGenericSend+0x6e>
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <xQueueGenericSend+0x72>
 80059aa:	2301      	movs	r3, #1
 80059ac:	e000      	b.n	80059b0 <xQueueGenericSend+0x74>
 80059ae:	2300      	movs	r3, #0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10a      	bne.n	80059ca <xQueueGenericSend+0x8e>
	__asm volatile
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	623b      	str	r3, [r7, #32]
}
 80059c6:	bf00      	nop
 80059c8:	e7fe      	b.n	80059c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059ca:	f001 f94d 	bl	8006c68 <xTaskGetSchedulerState>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d102      	bne.n	80059da <xQueueGenericSend+0x9e>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <xQueueGenericSend+0xa2>
 80059da:	2301      	movs	r3, #1
 80059dc:	e000      	b.n	80059e0 <xQueueGenericSend+0xa4>
 80059de:	2300      	movs	r3, #0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10a      	bne.n	80059fa <xQueueGenericSend+0xbe>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	61fb      	str	r3, [r7, #28]
}
 80059f6:	bf00      	nop
 80059f8:	e7fe      	b.n	80059f8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059fa:	f001 fb2f 	bl	800705c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d302      	bcc.n	8005a10 <xQueueGenericSend+0xd4>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d129      	bne.n	8005a64 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a16:	f000 fa25 	bl	8005e64 <prvCopyDataToQueue>
 8005a1a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d010      	beq.n	8005a46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	3324      	adds	r3, #36	; 0x24
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 ff59 	bl	80068e0 <xTaskRemoveFromEventList>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d013      	beq.n	8005a5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a34:	4b3f      	ldr	r3, [pc, #252]	; (8005b34 <xQueueGenericSend+0x1f8>)
 8005a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	e00a      	b.n	8005a5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d007      	beq.n	8005a5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a4c:	4b39      	ldr	r3, [pc, #228]	; (8005b34 <xQueueGenericSend+0x1f8>)
 8005a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a5c:	f001 fb2e 	bl	80070bc <vPortExitCritical>
				return pdPASS;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e063      	b.n	8005b2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d103      	bne.n	8005a72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a6a:	f001 fb27 	bl	80070bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e05c      	b.n	8005b2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d106      	bne.n	8005a86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a78:	f107 0314 	add.w	r3, r7, #20
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 ff91 	bl	80069a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a82:	2301      	movs	r3, #1
 8005a84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a86:	f001 fb19 	bl	80070bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a8a:	f000 fd3b 	bl	8006504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a8e:	f001 fae5 	bl	800705c <vPortEnterCritical>
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a98:	b25b      	sxtb	r3, r3
 8005a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9e:	d103      	bne.n	8005aa8 <xQueueGenericSend+0x16c>
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aae:	b25b      	sxtb	r3, r3
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab4:	d103      	bne.n	8005abe <xQueueGenericSend+0x182>
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005abe:	f001 fafd 	bl	80070bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ac2:	1d3a      	adds	r2, r7, #4
 8005ac4:	f107 0314 	add.w	r3, r7, #20
 8005ac8:	4611      	mov	r1, r2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 ff80 	bl	80069d0 <xTaskCheckForTimeOut>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d124      	bne.n	8005b20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ad6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ad8:	f000 fabc 	bl	8006054 <prvIsQueueFull>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d018      	beq.n	8005b14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	3310      	adds	r3, #16
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	4611      	mov	r1, r2
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fed4 	bl	8006898 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005af2:	f000 fa47 	bl	8005f84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005af6:	f000 fd13 	bl	8006520 <xTaskResumeAll>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f47f af7c 	bne.w	80059fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005b02:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <xQueueGenericSend+0x1f8>)
 8005b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	e772      	b.n	80059fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b16:	f000 fa35 	bl	8005f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b1a:	f000 fd01 	bl	8006520 <xTaskResumeAll>
 8005b1e:	e76c      	b.n	80059fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b22:	f000 fa2f 	bl	8005f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b26:	f000 fcfb 	bl	8006520 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b2a:	2300      	movs	r3, #0
		}
	}
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3738      	adds	r7, #56	; 0x38
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	e000ed04 	.word	0xe000ed04

08005b38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08e      	sub	sp, #56	; 0x38
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d103      	bne.n	8005b74 <xQueueGenericSendFromISR+0x3c>
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <xQueueGenericSendFromISR+0x40>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <xQueueGenericSendFromISR+0x42>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	623b      	str	r3, [r7, #32]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d103      	bne.n	8005ba2 <xQueueGenericSendFromISR+0x6a>
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <xQueueGenericSendFromISR+0x6e>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <xQueueGenericSendFromISR+0x70>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10a      	bne.n	8005bc2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	61fb      	str	r3, [r7, #28]
}
 8005bbe:	bf00      	nop
 8005bc0:	e7fe      	b.n	8005bc0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bc2:	f001 fb0d 	bl	80071e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005bc6:	f3ef 8211 	mrs	r2, BASEPRI
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	61ba      	str	r2, [r7, #24]
 8005bdc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005bde:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005be0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d302      	bcc.n	8005bf4 <xQueueGenericSendFromISR+0xbc>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d12c      	bne.n	8005c4e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c04:	f000 f92e 	bl	8005e64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c08:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c10:	d112      	bne.n	8005c38 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d016      	beq.n	8005c48 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1c:	3324      	adds	r3, #36	; 0x24
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fe5e 	bl	80068e0 <xTaskRemoveFromEventList>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00e      	beq.n	8005c48 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	e007      	b.n	8005c48 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	b25a      	sxtb	r2, r3
 8005c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005c4c:	e001      	b.n	8005c52 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	637b      	str	r3, [r7, #52]	; 0x34
 8005c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c54:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3738      	adds	r7, #56	; 0x38
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08c      	sub	sp, #48	; 0x30
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c74:	2300      	movs	r3, #0
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <xQueueReceive+0x30>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	623b      	str	r3, [r7, #32]
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <xQueueReceive+0x3e>
 8005c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <xQueueReceive+0x42>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e000      	b.n	8005cac <xQueueReceive+0x44>
 8005caa:	2300      	movs	r3, #0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10a      	bne.n	8005cc6 <xQueueReceive+0x5e>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	61fb      	str	r3, [r7, #28]
}
 8005cc2:	bf00      	nop
 8005cc4:	e7fe      	b.n	8005cc4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cc6:	f000 ffcf 	bl	8006c68 <xTaskGetSchedulerState>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d102      	bne.n	8005cd6 <xQueueReceive+0x6e>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <xQueueReceive+0x72>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <xQueueReceive+0x74>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <xQueueReceive+0x8e>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	61bb      	str	r3, [r7, #24]
}
 8005cf2:	bf00      	nop
 8005cf4:	e7fe      	b.n	8005cf4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cf6:	f001 f9b1 	bl	800705c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d01f      	beq.n	8005d46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d0a:	f000 f915 	bl	8005f38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	1e5a      	subs	r2, r3, #1
 8005d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00f      	beq.n	8005d3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	3310      	adds	r3, #16
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fddc 	bl	80068e0 <xTaskRemoveFromEventList>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d007      	beq.n	8005d3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d2e:	4b3d      	ldr	r3, [pc, #244]	; (8005e24 <xQueueReceive+0x1bc>)
 8005d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d3e:	f001 f9bd 	bl	80070bc <vPortExitCritical>
				return pdPASS;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e069      	b.n	8005e1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d103      	bne.n	8005d54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d4c:	f001 f9b6 	bl	80070bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d50:	2300      	movs	r3, #0
 8005d52:	e062      	b.n	8005e1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d5a:	f107 0310 	add.w	r3, r7, #16
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fe20 	bl	80069a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d64:	2301      	movs	r3, #1
 8005d66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d68:	f001 f9a8 	bl	80070bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d6c:	f000 fbca 	bl	8006504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d70:	f001 f974 	bl	800705c <vPortEnterCritical>
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d7a:	b25b      	sxtb	r3, r3
 8005d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d80:	d103      	bne.n	8005d8a <xQueueReceive+0x122>
 8005d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d90:	b25b      	sxtb	r3, r3
 8005d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d96:	d103      	bne.n	8005da0 <xQueueReceive+0x138>
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005da0:	f001 f98c 	bl	80070bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005da4:	1d3a      	adds	r2, r7, #4
 8005da6:	f107 0310 	add.w	r3, r7, #16
 8005daa:	4611      	mov	r1, r2
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fe0f 	bl	80069d0 <xTaskCheckForTimeOut>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d123      	bne.n	8005e00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dba:	f000 f935 	bl	8006028 <prvIsQueueEmpty>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d017      	beq.n	8005df4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	3324      	adds	r3, #36	; 0x24
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	4611      	mov	r1, r2
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 fd63 	bl	8006898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dd4:	f000 f8d6 	bl	8005f84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005dd8:	f000 fba2 	bl	8006520 <xTaskResumeAll>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d189      	bne.n	8005cf6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005de2:	4b10      	ldr	r3, [pc, #64]	; (8005e24 <xQueueReceive+0x1bc>)
 8005de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	e780      	b.n	8005cf6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005df6:	f000 f8c5 	bl	8005f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dfa:	f000 fb91 	bl	8006520 <xTaskResumeAll>
 8005dfe:	e77a      	b.n	8005cf6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e02:	f000 f8bf 	bl	8005f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e06:	f000 fb8b 	bl	8006520 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e0c:	f000 f90c 	bl	8006028 <prvIsQueueEmpty>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f43f af6f 	beq.w	8005cf6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3730      	adds	r7, #48	; 0x30
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	e000ed04 	.word	0xe000ed04

08005e28 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	60bb      	str	r3, [r7, #8]
}
 8005e48:	bf00      	nop
 8005e4a:	e7fe      	b.n	8005e4a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005e4c:	f001 f906 	bl	800705c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e54:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005e56:	f001 f931 	bl	80070bc <vPortExitCritical>

	return uxReturn;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e70:	2300      	movs	r3, #0
 8005e72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10d      	bne.n	8005e9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d14d      	bne.n	8005f26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 ff08 	bl	8006ca4 <xTaskPriorityDisinherit>
 8005e94:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	605a      	str	r2, [r3, #4]
 8005e9c:	e043      	b.n	8005f26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d119      	bne.n	8005ed8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6898      	ldr	r0, [r3, #8]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	461a      	mov	r2, r3
 8005eae:	68b9      	ldr	r1, [r7, #8]
 8005eb0:	f002 fb9a 	bl	80085e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	441a      	add	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	689a      	ldr	r2, [r3, #8]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d32b      	bcc.n	8005f26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	609a      	str	r2, [r3, #8]
 8005ed6:	e026      	b.n	8005f26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	68d8      	ldr	r0, [r3, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	68b9      	ldr	r1, [r7, #8]
 8005ee4:	f002 fb80 	bl	80085e8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	425b      	negs	r3, r3
 8005ef2:	441a      	add	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d207      	bcs.n	8005f14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0c:	425b      	negs	r3, r3
 8005f0e:	441a      	add	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d105      	bne.n	8005f26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f2e:	697b      	ldr	r3, [r7, #20]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d018      	beq.n	8005f7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	441a      	add	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d303      	bcc.n	8005f6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68d9      	ldr	r1, [r3, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f74:	461a      	mov	r2, r3
 8005f76:	6838      	ldr	r0, [r7, #0]
 8005f78:	f002 fb36 	bl	80085e8 <memcpy>
	}
}
 8005f7c:	bf00      	nop
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f8c:	f001 f866 	bl	800705c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f98:	e011      	b.n	8005fbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d012      	beq.n	8005fc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3324      	adds	r3, #36	; 0x24
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 fc9a 	bl	80068e0 <xTaskRemoveFromEventList>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fb2:	f000 fd6f 	bl	8006a94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	dce9      	bgt.n	8005f9a <prvUnlockQueue+0x16>
 8005fc6:	e000      	b.n	8005fca <prvUnlockQueue+0x46>
					break;
 8005fc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	22ff      	movs	r2, #255	; 0xff
 8005fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fd2:	f001 f873 	bl	80070bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fd6:	f001 f841 	bl	800705c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fe0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fe2:	e011      	b.n	8006008 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d012      	beq.n	8006012 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3310      	adds	r3, #16
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 fc75 	bl	80068e0 <xTaskRemoveFromEventList>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ffc:	f000 fd4a 	bl	8006a94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006000:	7bbb      	ldrb	r3, [r7, #14]
 8006002:	3b01      	subs	r3, #1
 8006004:	b2db      	uxtb	r3, r3
 8006006:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006008:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800600c:	2b00      	cmp	r3, #0
 800600e:	dce9      	bgt.n	8005fe4 <prvUnlockQueue+0x60>
 8006010:	e000      	b.n	8006014 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006012:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	22ff      	movs	r2, #255	; 0xff
 8006018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800601c:	f001 f84e 	bl	80070bc <vPortExitCritical>
}
 8006020:	bf00      	nop
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006030:	f001 f814 	bl	800705c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	2b00      	cmp	r3, #0
 800603a:	d102      	bne.n	8006042 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800603c:	2301      	movs	r3, #1
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	e001      	b.n	8006046 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006042:	2300      	movs	r3, #0
 8006044:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006046:	f001 f839 	bl	80070bc <vPortExitCritical>

	return xReturn;
 800604a:	68fb      	ldr	r3, [r7, #12]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800605c:	f000 fffe 	bl	800705c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006068:	429a      	cmp	r2, r3
 800606a:	d102      	bne.n	8006072 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800606c:	2301      	movs	r3, #1
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	e001      	b.n	8006076 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006076:	f001 f821 	bl	80070bc <vPortExitCritical>

	return xReturn;
 800607a:	68fb      	ldr	r3, [r7, #12]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08e      	sub	sp, #56	; 0x38
 8006088:	af04      	add	r7, sp, #16
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10a      	bne.n	80060ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8006098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	623b      	str	r3, [r7, #32]
}
 80060aa:	bf00      	nop
 80060ac:	e7fe      	b.n	80060ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <xTaskCreateStatic+0x46>
	__asm volatile
 80060b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	61fb      	str	r3, [r7, #28]
}
 80060c6:	bf00      	nop
 80060c8:	e7fe      	b.n	80060c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060ca:	23b4      	movs	r3, #180	; 0xb4
 80060cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2bb4      	cmp	r3, #180	; 0xb4
 80060d2:	d00a      	beq.n	80060ea <xTaskCreateStatic+0x66>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	61bb      	str	r3, [r7, #24]
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01e      	beq.n	800612e <xTaskCreateStatic+0xaa>
 80060f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d01b      	beq.n	800612e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	2202      	movs	r2, #2
 8006104:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006108:	2300      	movs	r3, #0
 800610a:	9303      	str	r3, [sp, #12]
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	9302      	str	r3, [sp, #8]
 8006110:	f107 0314 	add.w	r3, r7, #20
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 f851 	bl	80061c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006126:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006128:	f000 f8e4 	bl	80062f4 <prvAddNewTaskToReadyList>
 800612c:	e001      	b.n	8006132 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006132:	697b      	ldr	r3, [r7, #20]
	}
 8006134:	4618      	mov	r0, r3
 8006136:	3728      	adds	r7, #40	; 0x28
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08c      	sub	sp, #48	; 0x30
 8006140:	af04      	add	r7, sp, #16
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	4613      	mov	r3, r2
 800614a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800614c:	88fb      	ldrh	r3, [r7, #6]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4618      	mov	r0, r3
 8006152:	f001 f883 	bl	800725c <pvPortMalloc>
 8006156:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00e      	beq.n	800617c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800615e:	20b4      	movs	r0, #180	; 0xb4
 8006160:	f001 f87c 	bl	800725c <pvPortMalloc>
 8006164:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	631a      	str	r2, [r3, #48]	; 0x30
 8006172:	e005      	b.n	8006180 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006174:	6978      	ldr	r0, [r7, #20]
 8006176:	f001 f935 	bl	80073e4 <vPortFree>
 800617a:	e001      	b.n	8006180 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800617c:	2300      	movs	r3, #0
 800617e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d017      	beq.n	80061b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800618e:	88fa      	ldrh	r2, [r7, #6]
 8006190:	2300      	movs	r3, #0
 8006192:	9303      	str	r3, [sp, #12]
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	9302      	str	r3, [sp, #8]
 8006198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619a:	9301      	str	r3, [sp, #4]
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	68b9      	ldr	r1, [r7, #8]
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 f80f 	bl	80061c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061aa:	69f8      	ldr	r0, [r7, #28]
 80061ac:	f000 f8a2 	bl	80062f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061b0:	2301      	movs	r3, #1
 80061b2:	61bb      	str	r3, [r7, #24]
 80061b4:	e002      	b.n	80061bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061b6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061bc:	69bb      	ldr	r3, [r7, #24]
	}
 80061be:	4618      	mov	r0, r3
 80061c0:	3720      	adds	r7, #32
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80061e0:	3b01      	subs	r3, #1
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	f023 0307 	bic.w	r3, r3, #7
 80061ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <prvInitialiseNewTask+0x48>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	617b      	str	r3, [r7, #20]
}
 800620c:	bf00      	nop
 800620e:	e7fe      	b.n	800620e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006210:	2300      	movs	r3, #0
 8006212:	61fb      	str	r3, [r7, #28]
 8006214:	e012      	b.n	800623c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	4413      	add	r3, r2
 800621c:	7819      	ldrb	r1, [r3, #0]
 800621e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	4413      	add	r3, r2
 8006224:	3334      	adds	r3, #52	; 0x34
 8006226:	460a      	mov	r2, r1
 8006228:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	4413      	add	r3, r2
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d006      	beq.n	8006244 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	3301      	adds	r3, #1
 800623a:	61fb      	str	r3, [r7, #28]
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	2b0f      	cmp	r3, #15
 8006240:	d9e9      	bls.n	8006216 <prvInitialiseNewTask+0x4e>
 8006242:	e000      	b.n	8006246 <prvInitialiseNewTask+0x7e>
		{
			break;
 8006244:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	2b06      	cmp	r3, #6
 8006252:	d901      	bls.n	8006258 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006254:	2306      	movs	r3, #6
 8006256:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800625c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006262:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006266:	2200      	movs	r2, #0
 8006268:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626c:	3304      	adds	r3, #4
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff f997 	bl	80055a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006276:	3318      	adds	r3, #24
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff f992 	bl	80055a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006282:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006286:	f1c3 0207 	rsb	r2, r3, #7
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006292:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	2200      	movs	r2, #0
 8006298:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	334c      	adds	r3, #76	; 0x4c
 80062a8:	2260      	movs	r2, #96	; 0x60
 80062aa:	2100      	movs	r1, #0
 80062ac:	4618      	mov	r0, r3
 80062ae:	f002 f9a9 	bl	8008604 <memset>
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	4a0c      	ldr	r2, [pc, #48]	; (80062e8 <prvInitialiseNewTask+0x120>)
 80062b6:	651a      	str	r2, [r3, #80]	; 0x50
 80062b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ba:	4a0c      	ldr	r2, [pc, #48]	; (80062ec <prvInitialiseNewTask+0x124>)
 80062bc:	655a      	str	r2, [r3, #84]	; 0x54
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	4a0b      	ldr	r2, [pc, #44]	; (80062f0 <prvInitialiseNewTask+0x128>)
 80062c2:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	68f9      	ldr	r1, [r7, #12]
 80062c8:	69b8      	ldr	r0, [r7, #24]
 80062ca:	f000 fdd7 	bl	8006e7c <pxPortInitialiseStack>
 80062ce:	4602      	mov	r2, r0
 80062d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80062d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062e0:	bf00      	nop
 80062e2:	3720      	adds	r7, #32
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	08009d0c 	.word	0x08009d0c
 80062ec:	08009d2c 	.word	0x08009d2c
 80062f0:	08009cec 	.word	0x08009cec

080062f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062fc:	f000 feae 	bl	800705c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006300:	4b2a      	ldr	r3, [pc, #168]	; (80063ac <prvAddNewTaskToReadyList+0xb8>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3301      	adds	r3, #1
 8006306:	4a29      	ldr	r2, [pc, #164]	; (80063ac <prvAddNewTaskToReadyList+0xb8>)
 8006308:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800630a:	4b29      	ldr	r3, [pc, #164]	; (80063b0 <prvAddNewTaskToReadyList+0xbc>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d109      	bne.n	8006326 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006312:	4a27      	ldr	r2, [pc, #156]	; (80063b0 <prvAddNewTaskToReadyList+0xbc>)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006318:	4b24      	ldr	r3, [pc, #144]	; (80063ac <prvAddNewTaskToReadyList+0xb8>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d110      	bne.n	8006342 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006320:	f000 fbdc 	bl	8006adc <prvInitialiseTaskLists>
 8006324:	e00d      	b.n	8006342 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006326:	4b23      	ldr	r3, [pc, #140]	; (80063b4 <prvAddNewTaskToReadyList+0xc0>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d109      	bne.n	8006342 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800632e:	4b20      	ldr	r3, [pc, #128]	; (80063b0 <prvAddNewTaskToReadyList+0xbc>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	429a      	cmp	r2, r3
 800633a:	d802      	bhi.n	8006342 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800633c:	4a1c      	ldr	r2, [pc, #112]	; (80063b0 <prvAddNewTaskToReadyList+0xbc>)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006342:	4b1d      	ldr	r3, [pc, #116]	; (80063b8 <prvAddNewTaskToReadyList+0xc4>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3301      	adds	r3, #1
 8006348:	4a1b      	ldr	r2, [pc, #108]	; (80063b8 <prvAddNewTaskToReadyList+0xc4>)
 800634a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	2201      	movs	r2, #1
 8006352:	409a      	lsls	r2, r3
 8006354:	4b19      	ldr	r3, [pc, #100]	; (80063bc <prvAddNewTaskToReadyList+0xc8>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4313      	orrs	r3, r2
 800635a:	4a18      	ldr	r2, [pc, #96]	; (80063bc <prvAddNewTaskToReadyList+0xc8>)
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006362:	4613      	mov	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4a15      	ldr	r2, [pc, #84]	; (80063c0 <prvAddNewTaskToReadyList+0xcc>)
 800636c:	441a      	add	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	3304      	adds	r3, #4
 8006372:	4619      	mov	r1, r3
 8006374:	4610      	mov	r0, r2
 8006376:	f7ff f920 	bl	80055ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800637a:	f000 fe9f 	bl	80070bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800637e:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <prvAddNewTaskToReadyList+0xc0>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00e      	beq.n	80063a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006386:	4b0a      	ldr	r3, [pc, #40]	; (80063b0 <prvAddNewTaskToReadyList+0xbc>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	429a      	cmp	r2, r3
 8006392:	d207      	bcs.n	80063a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006394:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <prvAddNewTaskToReadyList+0xd0>)
 8006396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063a4:	bf00      	nop
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20000498 	.word	0x20000498
 80063b0:	20000398 	.word	0x20000398
 80063b4:	200004a4 	.word	0x200004a4
 80063b8:	200004b4 	.word	0x200004b4
 80063bc:	200004a0 	.word	0x200004a0
 80063c0:	2000039c 	.word	0x2000039c
 80063c4:	e000ed04 	.word	0xe000ed04

080063c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d017      	beq.n	800640a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063da:	4b13      	ldr	r3, [pc, #76]	; (8006428 <vTaskDelay+0x60>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <vTaskDelay+0x30>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	60bb      	str	r3, [r7, #8]
}
 80063f4:	bf00      	nop
 80063f6:	e7fe      	b.n	80063f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80063f8:	f000 f884 	bl	8006504 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063fc:	2100      	movs	r1, #0
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fcd6 	bl	8006db0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006404:	f000 f88c 	bl	8006520 <xTaskResumeAll>
 8006408:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d107      	bne.n	8006420 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006410:	4b06      	ldr	r3, [pc, #24]	; (800642c <vTaskDelay+0x64>)
 8006412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006420:	bf00      	nop
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	200004c0 	.word	0x200004c0
 800642c:	e000ed04 	.word	0xe000ed04

08006430 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08a      	sub	sp, #40	; 0x28
 8006434:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006436:	2300      	movs	r3, #0
 8006438:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800643a:	2300      	movs	r3, #0
 800643c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800643e:	463a      	mov	r2, r7
 8006440:	1d39      	adds	r1, r7, #4
 8006442:	f107 0308 	add.w	r3, r7, #8
 8006446:	4618      	mov	r0, r3
 8006448:	f7fa fda8 	bl	8000f9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	9202      	str	r2, [sp, #8]
 8006454:	9301      	str	r3, [sp, #4]
 8006456:	2300      	movs	r3, #0
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	2300      	movs	r3, #0
 800645c:	460a      	mov	r2, r1
 800645e:	4921      	ldr	r1, [pc, #132]	; (80064e4 <vTaskStartScheduler+0xb4>)
 8006460:	4821      	ldr	r0, [pc, #132]	; (80064e8 <vTaskStartScheduler+0xb8>)
 8006462:	f7ff fe0f 	bl	8006084 <xTaskCreateStatic>
 8006466:	4603      	mov	r3, r0
 8006468:	4a20      	ldr	r2, [pc, #128]	; (80064ec <vTaskStartScheduler+0xbc>)
 800646a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800646c:	4b1f      	ldr	r3, [pc, #124]	; (80064ec <vTaskStartScheduler+0xbc>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006474:	2301      	movs	r3, #1
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	e001      	b.n	800647e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800647a:	2300      	movs	r3, #0
 800647c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d11b      	bne.n	80064bc <vTaskStartScheduler+0x8c>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	613b      	str	r3, [r7, #16]
}
 8006496:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006498:	4b15      	ldr	r3, [pc, #84]	; (80064f0 <vTaskStartScheduler+0xc0>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	334c      	adds	r3, #76	; 0x4c
 800649e:	4a15      	ldr	r2, [pc, #84]	; (80064f4 <vTaskStartScheduler+0xc4>)
 80064a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064a2:	4b15      	ldr	r3, [pc, #84]	; (80064f8 <vTaskStartScheduler+0xc8>)
 80064a4:	f04f 32ff 	mov.w	r2, #4294967295
 80064a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064aa:	4b14      	ldr	r3, [pc, #80]	; (80064fc <vTaskStartScheduler+0xcc>)
 80064ac:	2201      	movs	r2, #1
 80064ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80064b0:	4b13      	ldr	r3, [pc, #76]	; (8006500 <vTaskStartScheduler+0xd0>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064b6:	f000 fd5f 	bl	8006f78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064ba:	e00e      	b.n	80064da <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c2:	d10a      	bne.n	80064da <vTaskStartScheduler+0xaa>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	60fb      	str	r3, [r7, #12]
}
 80064d6:	bf00      	nop
 80064d8:	e7fe      	b.n	80064d8 <vTaskStartScheduler+0xa8>
}
 80064da:	bf00      	nop
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	08009c34 	.word	0x08009c34
 80064e8:	08006aad 	.word	0x08006aad
 80064ec:	200004bc 	.word	0x200004bc
 80064f0:	20000398 	.word	0x20000398
 80064f4:	20000060 	.word	0x20000060
 80064f8:	200004b8 	.word	0x200004b8
 80064fc:	200004a4 	.word	0x200004a4
 8006500:	2000049c 	.word	0x2000049c

08006504 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006508:	4b04      	ldr	r3, [pc, #16]	; (800651c <vTaskSuspendAll+0x18>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3301      	adds	r3, #1
 800650e:	4a03      	ldr	r2, [pc, #12]	; (800651c <vTaskSuspendAll+0x18>)
 8006510:	6013      	str	r3, [r2, #0]
}
 8006512:	bf00      	nop
 8006514:	46bd      	mov	sp, r7
 8006516:	bc80      	pop	{r7}
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	200004c0 	.word	0x200004c0

08006520 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800652a:	2300      	movs	r3, #0
 800652c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800652e:	4b41      	ldr	r3, [pc, #260]	; (8006634 <xTaskResumeAll+0x114>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10a      	bne.n	800654c <xTaskResumeAll+0x2c>
	__asm volatile
 8006536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653a:	f383 8811 	msr	BASEPRI, r3
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	603b      	str	r3, [r7, #0]
}
 8006548:	bf00      	nop
 800654a:	e7fe      	b.n	800654a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800654c:	f000 fd86 	bl	800705c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006550:	4b38      	ldr	r3, [pc, #224]	; (8006634 <xTaskResumeAll+0x114>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3b01      	subs	r3, #1
 8006556:	4a37      	ldr	r2, [pc, #220]	; (8006634 <xTaskResumeAll+0x114>)
 8006558:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800655a:	4b36      	ldr	r3, [pc, #216]	; (8006634 <xTaskResumeAll+0x114>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d161      	bne.n	8006626 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006562:	4b35      	ldr	r3, [pc, #212]	; (8006638 <xTaskResumeAll+0x118>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d05d      	beq.n	8006626 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800656a:	e02e      	b.n	80065ca <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800656c:	4b33      	ldr	r3, [pc, #204]	; (800663c <xTaskResumeAll+0x11c>)
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	3318      	adds	r3, #24
 8006578:	4618      	mov	r0, r3
 800657a:	f7ff f879 	bl	8005670 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	3304      	adds	r3, #4
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff f874 	bl	8005670 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	2201      	movs	r2, #1
 800658e:	409a      	lsls	r2, r3
 8006590:	4b2b      	ldr	r3, [pc, #172]	; (8006640 <xTaskResumeAll+0x120>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4313      	orrs	r3, r2
 8006596:	4a2a      	ldr	r2, [pc, #168]	; (8006640 <xTaskResumeAll+0x120>)
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4a27      	ldr	r2, [pc, #156]	; (8006644 <xTaskResumeAll+0x124>)
 80065a8:	441a      	add	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3304      	adds	r3, #4
 80065ae:	4619      	mov	r1, r3
 80065b0:	4610      	mov	r0, r2
 80065b2:	f7ff f802 	bl	80055ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ba:	4b23      	ldr	r3, [pc, #140]	; (8006648 <xTaskResumeAll+0x128>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d302      	bcc.n	80065ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80065c4:	4b21      	ldr	r3, [pc, #132]	; (800664c <xTaskResumeAll+0x12c>)
 80065c6:	2201      	movs	r2, #1
 80065c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065ca:	4b1c      	ldr	r3, [pc, #112]	; (800663c <xTaskResumeAll+0x11c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1cc      	bne.n	800656c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065d8:	f000 fb22 	bl	8006c20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80065dc:	4b1c      	ldr	r3, [pc, #112]	; (8006650 <xTaskResumeAll+0x130>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d010      	beq.n	800660a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065e8:	f000 f836 	bl	8006658 <xTaskIncrementTick>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80065f2:	4b16      	ldr	r3, [pc, #88]	; (800664c <xTaskResumeAll+0x12c>)
 80065f4:	2201      	movs	r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1f1      	bne.n	80065e8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006604:	4b12      	ldr	r3, [pc, #72]	; (8006650 <xTaskResumeAll+0x130>)
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800660a:	4b10      	ldr	r3, [pc, #64]	; (800664c <xTaskResumeAll+0x12c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d009      	beq.n	8006626 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006612:	2301      	movs	r3, #1
 8006614:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006616:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <xTaskResumeAll+0x134>)
 8006618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006626:	f000 fd49 	bl	80070bc <vPortExitCritical>

	return xAlreadyYielded;
 800662a:	68bb      	ldr	r3, [r7, #8]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	200004c0 	.word	0x200004c0
 8006638:	20000498 	.word	0x20000498
 800663c:	20000458 	.word	0x20000458
 8006640:	200004a0 	.word	0x200004a0
 8006644:	2000039c 	.word	0x2000039c
 8006648:	20000398 	.word	0x20000398
 800664c:	200004ac 	.word	0x200004ac
 8006650:	200004a8 	.word	0x200004a8
 8006654:	e000ed04 	.word	0xe000ed04

08006658 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006662:	4b51      	ldr	r3, [pc, #324]	; (80067a8 <xTaskIncrementTick+0x150>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	f040 808d 	bne.w	8006786 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800666c:	4b4f      	ldr	r3, [pc, #316]	; (80067ac <xTaskIncrementTick+0x154>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3301      	adds	r3, #1
 8006672:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006674:	4a4d      	ldr	r2, [pc, #308]	; (80067ac <xTaskIncrementTick+0x154>)
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d120      	bne.n	80066c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006680:	4b4b      	ldr	r3, [pc, #300]	; (80067b0 <xTaskIncrementTick+0x158>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00a      	beq.n	80066a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	603b      	str	r3, [r7, #0]
}
 800669c:	bf00      	nop
 800669e:	e7fe      	b.n	800669e <xTaskIncrementTick+0x46>
 80066a0:	4b43      	ldr	r3, [pc, #268]	; (80067b0 <xTaskIncrementTick+0x158>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	4b43      	ldr	r3, [pc, #268]	; (80067b4 <xTaskIncrementTick+0x15c>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a41      	ldr	r2, [pc, #260]	; (80067b0 <xTaskIncrementTick+0x158>)
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	4a41      	ldr	r2, [pc, #260]	; (80067b4 <xTaskIncrementTick+0x15c>)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	4b40      	ldr	r3, [pc, #256]	; (80067b8 <xTaskIncrementTick+0x160>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3301      	adds	r3, #1
 80066ba:	4a3f      	ldr	r2, [pc, #252]	; (80067b8 <xTaskIncrementTick+0x160>)
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	f000 faaf 	bl	8006c20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066c2:	4b3e      	ldr	r3, [pc, #248]	; (80067bc <xTaskIncrementTick+0x164>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d34d      	bcc.n	8006768 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066cc:	4b38      	ldr	r3, [pc, #224]	; (80067b0 <xTaskIncrementTick+0x158>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <xTaskIncrementTick+0x82>
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <xTaskIncrementTick+0x84>
 80066da:	2300      	movs	r3, #0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d004      	beq.n	80066ea <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e0:	4b36      	ldr	r3, [pc, #216]	; (80067bc <xTaskIncrementTick+0x164>)
 80066e2:	f04f 32ff 	mov.w	r2, #4294967295
 80066e6:	601a      	str	r2, [r3, #0]
					break;
 80066e8:	e03e      	b.n	8006768 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80066ea:	4b31      	ldr	r3, [pc, #196]	; (80067b0 <xTaskIncrementTick+0x158>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d203      	bcs.n	800670a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006702:	4a2e      	ldr	r2, [pc, #184]	; (80067bc <xTaskIncrementTick+0x164>)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6013      	str	r3, [r2, #0]
						break;
 8006708:	e02e      	b.n	8006768 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	3304      	adds	r3, #4
 800670e:	4618      	mov	r0, r3
 8006710:	f7fe ffae 	bl	8005670 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006718:	2b00      	cmp	r3, #0
 800671a:	d004      	beq.n	8006726 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	3318      	adds	r3, #24
 8006720:	4618      	mov	r0, r3
 8006722:	f7fe ffa5 	bl	8005670 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672a:	2201      	movs	r2, #1
 800672c:	409a      	lsls	r2, r3
 800672e:	4b24      	ldr	r3, [pc, #144]	; (80067c0 <xTaskIncrementTick+0x168>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4313      	orrs	r3, r2
 8006734:	4a22      	ldr	r2, [pc, #136]	; (80067c0 <xTaskIncrementTick+0x168>)
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673c:	4613      	mov	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4a1f      	ldr	r2, [pc, #124]	; (80067c4 <xTaskIncrementTick+0x16c>)
 8006746:	441a      	add	r2, r3
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	3304      	adds	r3, #4
 800674c:	4619      	mov	r1, r3
 800674e:	4610      	mov	r0, r2
 8006750:	f7fe ff33 	bl	80055ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006758:	4b1b      	ldr	r3, [pc, #108]	; (80067c8 <xTaskIncrementTick+0x170>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675e:	429a      	cmp	r2, r3
 8006760:	d3b4      	bcc.n	80066cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006762:	2301      	movs	r3, #1
 8006764:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006766:	e7b1      	b.n	80066cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006768:	4b17      	ldr	r3, [pc, #92]	; (80067c8 <xTaskIncrementTick+0x170>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676e:	4915      	ldr	r1, [pc, #84]	; (80067c4 <xTaskIncrementTick+0x16c>)
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d907      	bls.n	8006790 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006780:	2301      	movs	r3, #1
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	e004      	b.n	8006790 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006786:	4b11      	ldr	r3, [pc, #68]	; (80067cc <xTaskIncrementTick+0x174>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3301      	adds	r3, #1
 800678c:	4a0f      	ldr	r2, [pc, #60]	; (80067cc <xTaskIncrementTick+0x174>)
 800678e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006790:	4b0f      	ldr	r3, [pc, #60]	; (80067d0 <xTaskIncrementTick+0x178>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006798:	2301      	movs	r3, #1
 800679a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800679c:	697b      	ldr	r3, [r7, #20]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	200004c0 	.word	0x200004c0
 80067ac:	2000049c 	.word	0x2000049c
 80067b0:	20000450 	.word	0x20000450
 80067b4:	20000454 	.word	0x20000454
 80067b8:	200004b0 	.word	0x200004b0
 80067bc:	200004b8 	.word	0x200004b8
 80067c0:	200004a0 	.word	0x200004a0
 80067c4:	2000039c 	.word	0x2000039c
 80067c8:	20000398 	.word	0x20000398
 80067cc:	200004a8 	.word	0x200004a8
 80067d0:	200004ac 	.word	0x200004ac

080067d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067da:	4b29      	ldr	r3, [pc, #164]	; (8006880 <vTaskSwitchContext+0xac>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067e2:	4b28      	ldr	r3, [pc, #160]	; (8006884 <vTaskSwitchContext+0xb0>)
 80067e4:	2201      	movs	r2, #1
 80067e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067e8:	e044      	b.n	8006874 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80067ea:	4b26      	ldr	r3, [pc, #152]	; (8006884 <vTaskSwitchContext+0xb0>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80067f0:	4b25      	ldr	r3, [pc, #148]	; (8006888 <vTaskSwitchContext+0xb4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	fab3 f383 	clz	r3, r3
 80067fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80067fe:	7afb      	ldrb	r3, [r7, #11]
 8006800:	f1c3 031f 	rsb	r3, r3, #31
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	4921      	ldr	r1, [pc, #132]	; (800688c <vTaskSwitchContext+0xb8>)
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	440b      	add	r3, r1
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10a      	bne.n	8006830 <vTaskSwitchContext+0x5c>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	607b      	str	r3, [r7, #4]
}
 800682c:	bf00      	nop
 800682e:	e7fe      	b.n	800682e <vTaskSwitchContext+0x5a>
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4a14      	ldr	r2, [pc, #80]	; (800688c <vTaskSwitchContext+0xb8>)
 800683c:	4413      	add	r3, r2
 800683e:	613b      	str	r3, [r7, #16]
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	605a      	str	r2, [r3, #4]
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	3308      	adds	r3, #8
 8006852:	429a      	cmp	r2, r3
 8006854:	d104      	bne.n	8006860 <vTaskSwitchContext+0x8c>
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	605a      	str	r2, [r3, #4]
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	4a0a      	ldr	r2, [pc, #40]	; (8006890 <vTaskSwitchContext+0xbc>)
 8006868:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800686a:	4b09      	ldr	r3, [pc, #36]	; (8006890 <vTaskSwitchContext+0xbc>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	334c      	adds	r3, #76	; 0x4c
 8006870:	4a08      	ldr	r2, [pc, #32]	; (8006894 <vTaskSwitchContext+0xc0>)
 8006872:	6013      	str	r3, [r2, #0]
}
 8006874:	bf00      	nop
 8006876:	371c      	adds	r7, #28
 8006878:	46bd      	mov	sp, r7
 800687a:	bc80      	pop	{r7}
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	200004c0 	.word	0x200004c0
 8006884:	200004ac 	.word	0x200004ac
 8006888:	200004a0 	.word	0x200004a0
 800688c:	2000039c 	.word	0x2000039c
 8006890:	20000398 	.word	0x20000398
 8006894:	20000060 	.word	0x20000060

08006898 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10a      	bne.n	80068be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	60fb      	str	r3, [r7, #12]
}
 80068ba:	bf00      	nop
 80068bc:	e7fe      	b.n	80068bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068be:	4b07      	ldr	r3, [pc, #28]	; (80068dc <vTaskPlaceOnEventList+0x44>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3318      	adds	r3, #24
 80068c4:	4619      	mov	r1, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7fe fe9a 	bl	8005600 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068cc:	2101      	movs	r1, #1
 80068ce:	6838      	ldr	r0, [r7, #0]
 80068d0:	f000 fa6e 	bl	8006db0 <prvAddCurrentTaskToDelayedList>
}
 80068d4:	bf00      	nop
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20000398 	.word	0x20000398

080068e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	60fb      	str	r3, [r7, #12]
}
 8006908:	bf00      	nop
 800690a:	e7fe      	b.n	800690a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	3318      	adds	r3, #24
 8006910:	4618      	mov	r0, r3
 8006912:	f7fe fead 	bl	8005670 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006916:	4b1d      	ldr	r3, [pc, #116]	; (800698c <xTaskRemoveFromEventList+0xac>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d11c      	bne.n	8006958 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	3304      	adds	r3, #4
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe fea4 	bl	8005670 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	2201      	movs	r2, #1
 800692e:	409a      	lsls	r2, r3
 8006930:	4b17      	ldr	r3, [pc, #92]	; (8006990 <xTaskRemoveFromEventList+0xb0>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4313      	orrs	r3, r2
 8006936:	4a16      	ldr	r2, [pc, #88]	; (8006990 <xTaskRemoveFromEventList+0xb0>)
 8006938:	6013      	str	r3, [r2, #0]
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693e:	4613      	mov	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4a13      	ldr	r2, [pc, #76]	; (8006994 <xTaskRemoveFromEventList+0xb4>)
 8006948:	441a      	add	r2, r3
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	3304      	adds	r3, #4
 800694e:	4619      	mov	r1, r3
 8006950:	4610      	mov	r0, r2
 8006952:	f7fe fe32 	bl	80055ba <vListInsertEnd>
 8006956:	e005      	b.n	8006964 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	3318      	adds	r3, #24
 800695c:	4619      	mov	r1, r3
 800695e:	480e      	ldr	r0, [pc, #56]	; (8006998 <xTaskRemoveFromEventList+0xb8>)
 8006960:	f7fe fe2b 	bl	80055ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006968:	4b0c      	ldr	r3, [pc, #48]	; (800699c <xTaskRemoveFromEventList+0xbc>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696e:	429a      	cmp	r2, r3
 8006970:	d905      	bls.n	800697e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006972:	2301      	movs	r3, #1
 8006974:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006976:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <xTaskRemoveFromEventList+0xc0>)
 8006978:	2201      	movs	r2, #1
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	e001      	b.n	8006982 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800697e:	2300      	movs	r3, #0
 8006980:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006982:	697b      	ldr	r3, [r7, #20]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	200004c0 	.word	0x200004c0
 8006990:	200004a0 	.word	0x200004a0
 8006994:	2000039c 	.word	0x2000039c
 8006998:	20000458 	.word	0x20000458
 800699c:	20000398 	.word	0x20000398
 80069a0:	200004ac 	.word	0x200004ac

080069a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80069ac:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <vTaskInternalSetTimeOutState+0x24>)
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80069b4:	4b05      	ldr	r3, [pc, #20]	; (80069cc <vTaskInternalSetTimeOutState+0x28>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	605a      	str	r2, [r3, #4]
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bc80      	pop	{r7}
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	200004b0 	.word	0x200004b0
 80069cc:	2000049c 	.word	0x2000049c

080069d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b088      	sub	sp, #32
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10a      	bne.n	80069f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	613b      	str	r3, [r7, #16]
}
 80069f2:	bf00      	nop
 80069f4:	e7fe      	b.n	80069f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10a      	bne.n	8006a12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	60fb      	str	r3, [r7, #12]
}
 8006a0e:	bf00      	nop
 8006a10:	e7fe      	b.n	8006a10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006a12:	f000 fb23 	bl	800705c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a16:	4b1d      	ldr	r3, [pc, #116]	; (8006a8c <xTaskCheckForTimeOut+0xbc>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2e:	d102      	bne.n	8006a36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a30:	2300      	movs	r3, #0
 8006a32:	61fb      	str	r3, [r7, #28]
 8006a34:	e023      	b.n	8006a7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	4b15      	ldr	r3, [pc, #84]	; (8006a90 <xTaskCheckForTimeOut+0xc0>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d007      	beq.n	8006a52 <xTaskCheckForTimeOut+0x82>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d302      	bcc.n	8006a52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	61fb      	str	r3, [r7, #28]
 8006a50:	e015      	b.n	8006a7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d20b      	bcs.n	8006a74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	1ad2      	subs	r2, r2, r3
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff ff9b 	bl	80069a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	61fb      	str	r3, [r7, #28]
 8006a72:	e004      	b.n	8006a7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a7e:	f000 fb1d 	bl	80070bc <vPortExitCritical>

	return xReturn;
 8006a82:	69fb      	ldr	r3, [r7, #28]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3720      	adds	r7, #32
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	2000049c 	.word	0x2000049c
 8006a90:	200004b0 	.word	0x200004b0

08006a94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a94:	b480      	push	{r7}
 8006a96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a98:	4b03      	ldr	r3, [pc, #12]	; (8006aa8 <vTaskMissedYield+0x14>)
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]
}
 8006a9e:	bf00      	nop
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bc80      	pop	{r7}
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	200004ac 	.word	0x200004ac

08006aac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ab4:	f000 f852 	bl	8006b5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ab8:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <prvIdleTask+0x28>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d9f9      	bls.n	8006ab4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ac0:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <prvIdleTask+0x2c>)
 8006ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ad0:	e7f0      	b.n	8006ab4 <prvIdleTask+0x8>
 8006ad2:	bf00      	nop
 8006ad4:	2000039c 	.word	0x2000039c
 8006ad8:	e000ed04 	.word	0xe000ed04

08006adc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	607b      	str	r3, [r7, #4]
 8006ae6:	e00c      	b.n	8006b02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	4613      	mov	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4a12      	ldr	r2, [pc, #72]	; (8006b3c <prvInitialiseTaskLists+0x60>)
 8006af4:	4413      	add	r3, r2
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fe fd34 	bl	8005564 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3301      	adds	r3, #1
 8006b00:	607b      	str	r3, [r7, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b06      	cmp	r3, #6
 8006b06:	d9ef      	bls.n	8006ae8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b08:	480d      	ldr	r0, [pc, #52]	; (8006b40 <prvInitialiseTaskLists+0x64>)
 8006b0a:	f7fe fd2b 	bl	8005564 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b0e:	480d      	ldr	r0, [pc, #52]	; (8006b44 <prvInitialiseTaskLists+0x68>)
 8006b10:	f7fe fd28 	bl	8005564 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b14:	480c      	ldr	r0, [pc, #48]	; (8006b48 <prvInitialiseTaskLists+0x6c>)
 8006b16:	f7fe fd25 	bl	8005564 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b1a:	480c      	ldr	r0, [pc, #48]	; (8006b4c <prvInitialiseTaskLists+0x70>)
 8006b1c:	f7fe fd22 	bl	8005564 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b20:	480b      	ldr	r0, [pc, #44]	; (8006b50 <prvInitialiseTaskLists+0x74>)
 8006b22:	f7fe fd1f 	bl	8005564 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b26:	4b0b      	ldr	r3, [pc, #44]	; (8006b54 <prvInitialiseTaskLists+0x78>)
 8006b28:	4a05      	ldr	r2, [pc, #20]	; (8006b40 <prvInitialiseTaskLists+0x64>)
 8006b2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b2c:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <prvInitialiseTaskLists+0x7c>)
 8006b2e:	4a05      	ldr	r2, [pc, #20]	; (8006b44 <prvInitialiseTaskLists+0x68>)
 8006b30:	601a      	str	r2, [r3, #0]
}
 8006b32:	bf00      	nop
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	2000039c 	.word	0x2000039c
 8006b40:	20000428 	.word	0x20000428
 8006b44:	2000043c 	.word	0x2000043c
 8006b48:	20000458 	.word	0x20000458
 8006b4c:	2000046c 	.word	0x2000046c
 8006b50:	20000484 	.word	0x20000484
 8006b54:	20000450 	.word	0x20000450
 8006b58:	20000454 	.word	0x20000454

08006b5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b62:	e019      	b.n	8006b98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b64:	f000 fa7a 	bl	800705c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006b68:	4b10      	ldr	r3, [pc, #64]	; (8006bac <prvCheckTasksWaitingTermination+0x50>)
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3304      	adds	r3, #4
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fe fd7b 	bl	8005670 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b7a:	4b0d      	ldr	r3, [pc, #52]	; (8006bb0 <prvCheckTasksWaitingTermination+0x54>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	4a0b      	ldr	r2, [pc, #44]	; (8006bb0 <prvCheckTasksWaitingTermination+0x54>)
 8006b82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b84:	4b0b      	ldr	r3, [pc, #44]	; (8006bb4 <prvCheckTasksWaitingTermination+0x58>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	4a0a      	ldr	r2, [pc, #40]	; (8006bb4 <prvCheckTasksWaitingTermination+0x58>)
 8006b8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b8e:	f000 fa95 	bl	80070bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f810 	bl	8006bb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b98:	4b06      	ldr	r3, [pc, #24]	; (8006bb4 <prvCheckTasksWaitingTermination+0x58>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e1      	bne.n	8006b64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ba0:	bf00      	nop
 8006ba2:	bf00      	nop
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	2000046c 	.word	0x2000046c
 8006bb0:	20000498 	.word	0x20000498
 8006bb4:	20000480 	.word	0x20000480

08006bb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	334c      	adds	r3, #76	; 0x4c
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f001 fdd9 	bl	800877c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d108      	bne.n	8006be6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 fc03 	bl	80073e4 <vPortFree>
				vPortFree( pxTCB );
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fc00 	bl	80073e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006be4:	e018      	b.n	8006c18 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d103      	bne.n	8006bf8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fbf7 	bl	80073e4 <vPortFree>
	}
 8006bf6:	e00f      	b.n	8006c18 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d00a      	beq.n	8006c18 <prvDeleteTCB+0x60>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	60fb      	str	r3, [r7, #12]
}
 8006c14:	bf00      	nop
 8006c16:	e7fe      	b.n	8006c16 <prvDeleteTCB+0x5e>
	}
 8006c18:	bf00      	nop
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c26:	4b0e      	ldr	r3, [pc, #56]	; (8006c60 <prvResetNextTaskUnblockTime+0x40>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <prvResetNextTaskUnblockTime+0x14>
 8006c30:	2301      	movs	r3, #1
 8006c32:	e000      	b.n	8006c36 <prvResetNextTaskUnblockTime+0x16>
 8006c34:	2300      	movs	r3, #0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d004      	beq.n	8006c44 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c3a:	4b0a      	ldr	r3, [pc, #40]	; (8006c64 <prvResetNextTaskUnblockTime+0x44>)
 8006c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c40:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c42:	e008      	b.n	8006c56 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c44:	4b06      	ldr	r3, [pc, #24]	; (8006c60 <prvResetNextTaskUnblockTime+0x40>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	4a04      	ldr	r2, [pc, #16]	; (8006c64 <prvResetNextTaskUnblockTime+0x44>)
 8006c54:	6013      	str	r3, [r2, #0]
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bc80      	pop	{r7}
 8006c5e:	4770      	bx	lr
 8006c60:	20000450 	.word	0x20000450
 8006c64:	200004b8 	.word	0x200004b8

08006c68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c6e:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <xTaskGetSchedulerState+0x34>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d102      	bne.n	8006c7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c76:	2301      	movs	r3, #1
 8006c78:	607b      	str	r3, [r7, #4]
 8006c7a:	e008      	b.n	8006c8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c7c:	4b08      	ldr	r3, [pc, #32]	; (8006ca0 <xTaskGetSchedulerState+0x38>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d102      	bne.n	8006c8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c84:	2302      	movs	r3, #2
 8006c86:	607b      	str	r3, [r7, #4]
 8006c88:	e001      	b.n	8006c8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c8e:	687b      	ldr	r3, [r7, #4]
	}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bc80      	pop	{r7}
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	200004a4 	.word	0x200004a4
 8006ca0:	200004c0 	.word	0x200004c0

08006ca4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d06e      	beq.n	8006d98 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006cba:	4b3a      	ldr	r3, [pc, #232]	; (8006da4 <xTaskPriorityDisinherit+0x100>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d00a      	beq.n	8006cda <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	60fb      	str	r3, [r7, #12]
}
 8006cd6:	bf00      	nop
 8006cd8:	e7fe      	b.n	8006cd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	60bb      	str	r3, [r7, #8]
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cfc:	1e5a      	subs	r2, r3, #1
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d044      	beq.n	8006d98 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d140      	bne.n	8006d98 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	3304      	adds	r3, #4
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe fca8 	bl	8005670 <uxListRemove>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d115      	bne.n	8006d52 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2a:	491f      	ldr	r1, [pc, #124]	; (8006da8 <xTaskPriorityDisinherit+0x104>)
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	440b      	add	r3, r1
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10a      	bne.n	8006d52 <xTaskPriorityDisinherit+0xae>
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d40:	2201      	movs	r2, #1
 8006d42:	fa02 f303 	lsl.w	r3, r2, r3
 8006d46:	43da      	mvns	r2, r3
 8006d48:	4b18      	ldr	r3, [pc, #96]	; (8006dac <xTaskPriorityDisinherit+0x108>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	4a17      	ldr	r2, [pc, #92]	; (8006dac <xTaskPriorityDisinherit+0x108>)
 8006d50:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5e:	f1c3 0207 	rsb	r2, r3, #7
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	409a      	lsls	r2, r3
 8006d6e:	4b0f      	ldr	r3, [pc, #60]	; (8006dac <xTaskPriorityDisinherit+0x108>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	4a0d      	ldr	r2, [pc, #52]	; (8006dac <xTaskPriorityDisinherit+0x108>)
 8006d76:	6013      	str	r3, [r2, #0]
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4a08      	ldr	r2, [pc, #32]	; (8006da8 <xTaskPriorityDisinherit+0x104>)
 8006d86:	441a      	add	r2, r3
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4610      	mov	r0, r2
 8006d90:	f7fe fc13 	bl	80055ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d94:	2301      	movs	r3, #1
 8006d96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d98:	697b      	ldr	r3, [r7, #20]
	}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	20000398 	.word	0x20000398
 8006da8:	2000039c 	.word	0x2000039c
 8006dac:	200004a0 	.word	0x200004a0

08006db0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006dba:	4b29      	ldr	r3, [pc, #164]	; (8006e60 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dc0:	4b28      	ldr	r3, [pc, #160]	; (8006e64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fe fc52 	bl	8005670 <uxListRemove>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10b      	bne.n	8006dea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006dd2:	4b24      	ldr	r3, [pc, #144]	; (8006e64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	2201      	movs	r2, #1
 8006dda:	fa02 f303 	lsl.w	r3, r2, r3
 8006dde:	43da      	mvns	r2, r3
 8006de0:	4b21      	ldr	r3, [pc, #132]	; (8006e68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4013      	ands	r3, r2
 8006de6:	4a20      	ldr	r2, [pc, #128]	; (8006e68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006de8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df0:	d10a      	bne.n	8006e08 <prvAddCurrentTaskToDelayedList+0x58>
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d007      	beq.n	8006e08 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006df8:	4b1a      	ldr	r3, [pc, #104]	; (8006e64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	4619      	mov	r1, r3
 8006e00:	481a      	ldr	r0, [pc, #104]	; (8006e6c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006e02:	f7fe fbda 	bl	80055ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e06:	e026      	b.n	8006e56 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e10:	4b14      	ldr	r3, [pc, #80]	; (8006e64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d209      	bcs.n	8006e34 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e20:	4b13      	ldr	r3, [pc, #76]	; (8006e70 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	4b0f      	ldr	r3, [pc, #60]	; (8006e64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3304      	adds	r3, #4
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	f7fe fbe7 	bl	8005600 <vListInsert>
}
 8006e32:	e010      	b.n	8006e56 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e34:	4b0f      	ldr	r3, [pc, #60]	; (8006e74 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	4619      	mov	r1, r3
 8006e40:	4610      	mov	r0, r2
 8006e42:	f7fe fbdd 	bl	8005600 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e46:	4b0c      	ldr	r3, [pc, #48]	; (8006e78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d202      	bcs.n	8006e56 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006e50:	4a09      	ldr	r2, [pc, #36]	; (8006e78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	6013      	str	r3, [r2, #0]
}
 8006e56:	bf00      	nop
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	2000049c 	.word	0x2000049c
 8006e64:	20000398 	.word	0x20000398
 8006e68:	200004a0 	.word	0x200004a0
 8006e6c:	20000484 	.word	0x20000484
 8006e70:	20000454 	.word	0x20000454
 8006e74:	20000450 	.word	0x20000450
 8006e78:	200004b8 	.word	0x200004b8

08006e7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	3b04      	subs	r3, #4
 8006e8c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3b04      	subs	r3, #4
 8006e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f023 0201 	bic.w	r2, r3, #1
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3b04      	subs	r3, #4
 8006eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006eac:	4a08      	ldr	r2, [pc, #32]	; (8006ed0 <pxPortInitialiseStack+0x54>)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3b14      	subs	r3, #20
 8006eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3b20      	subs	r3, #32
 8006ec2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bc80      	pop	{r7}
 8006ece:	4770      	bx	lr
 8006ed0:	08006ed5 	.word	0x08006ed5

08006ed4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ede:	4b12      	ldr	r3, [pc, #72]	; (8006f28 <prvTaskExitError+0x54>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee6:	d00a      	beq.n	8006efe <prvTaskExitError+0x2a>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	60fb      	str	r3, [r7, #12]
}
 8006efa:	bf00      	nop
 8006efc:	e7fe      	b.n	8006efc <prvTaskExitError+0x28>
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	60bb      	str	r3, [r7, #8]
}
 8006f10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f12:	bf00      	nop
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0fc      	beq.n	8006f14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f1a:	bf00      	nop
 8006f1c:	bf00      	nop
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bc80      	pop	{r7}
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	2000005c 	.word	0x2000005c
 8006f2c:	00000000 	.word	0x00000000

08006f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f30:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <pxCurrentTCBConst2>)
 8006f32:	6819      	ldr	r1, [r3, #0]
 8006f34:	6808      	ldr	r0, [r1, #0]
 8006f36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006f3a:	f380 8809 	msr	PSP, r0
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f04f 0000 	mov.w	r0, #0
 8006f46:	f380 8811 	msr	BASEPRI, r0
 8006f4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006f4e:	4770      	bx	lr

08006f50 <pxCurrentTCBConst2>:
 8006f50:	20000398 	.word	0x20000398
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f54:	bf00      	nop
 8006f56:	bf00      	nop

08006f58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006f58:	4806      	ldr	r0, [pc, #24]	; (8006f74 <prvPortStartFirstTask+0x1c>)
 8006f5a:	6800      	ldr	r0, [r0, #0]
 8006f5c:	6800      	ldr	r0, [r0, #0]
 8006f5e:	f380 8808 	msr	MSP, r0
 8006f62:	b662      	cpsie	i
 8006f64:	b661      	cpsie	f
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	df00      	svc	0
 8006f70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f72:	bf00      	nop
 8006f74:	e000ed08 	.word	0xe000ed08

08006f78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f7e:	4b32      	ldr	r3, [pc, #200]	; (8007048 <xPortStartScheduler+0xd0>)
 8006f80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	22ff      	movs	r2, #255	; 0xff
 8006f8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	4b2a      	ldr	r3, [pc, #168]	; (800704c <xPortStartScheduler+0xd4>)
 8006fa4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006fa6:	4b2a      	ldr	r3, [pc, #168]	; (8007050 <xPortStartScheduler+0xd8>)
 8006fa8:	2207      	movs	r2, #7
 8006faa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fac:	e009      	b.n	8006fc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006fae:	4b28      	ldr	r3, [pc, #160]	; (8007050 <xPortStartScheduler+0xd8>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	4a26      	ldr	r2, [pc, #152]	; (8007050 <xPortStartScheduler+0xd8>)
 8006fb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006fb8:	78fb      	ldrb	r3, [r7, #3]
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fc2:	78fb      	ldrb	r3, [r7, #3]
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fca:	2b80      	cmp	r3, #128	; 0x80
 8006fcc:	d0ef      	beq.n	8006fae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006fce:	4b20      	ldr	r3, [pc, #128]	; (8007050 <xPortStartScheduler+0xd8>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f1c3 0307 	rsb	r3, r3, #7
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	d00a      	beq.n	8006ff0 <xPortStartScheduler+0x78>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	60bb      	str	r3, [r7, #8]
}
 8006fec:	bf00      	nop
 8006fee:	e7fe      	b.n	8006fee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ff0:	4b17      	ldr	r3, [pc, #92]	; (8007050 <xPortStartScheduler+0xd8>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	021b      	lsls	r3, r3, #8
 8006ff6:	4a16      	ldr	r2, [pc, #88]	; (8007050 <xPortStartScheduler+0xd8>)
 8006ff8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ffa:	4b15      	ldr	r3, [pc, #84]	; (8007050 <xPortStartScheduler+0xd8>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007002:	4a13      	ldr	r2, [pc, #76]	; (8007050 <xPortStartScheduler+0xd8>)
 8007004:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	b2da      	uxtb	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800700e:	4b11      	ldr	r3, [pc, #68]	; (8007054 <xPortStartScheduler+0xdc>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a10      	ldr	r2, [pc, #64]	; (8007054 <xPortStartScheduler+0xdc>)
 8007014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007018:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800701a:	4b0e      	ldr	r3, [pc, #56]	; (8007054 <xPortStartScheduler+0xdc>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a0d      	ldr	r2, [pc, #52]	; (8007054 <xPortStartScheduler+0xdc>)
 8007020:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007024:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007026:	f000 f8b9 	bl	800719c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800702a:	4b0b      	ldr	r3, [pc, #44]	; (8007058 <xPortStartScheduler+0xe0>)
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007030:	f7ff ff92 	bl	8006f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007034:	f7ff fbce 	bl	80067d4 <vTaskSwitchContext>
	prvTaskExitError();
 8007038:	f7ff ff4c 	bl	8006ed4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	e000e400 	.word	0xe000e400
 800704c:	200004c4 	.word	0x200004c4
 8007050:	200004c8 	.word	0x200004c8
 8007054:	e000ed20 	.word	0xe000ed20
 8007058:	2000005c 	.word	0x2000005c

0800705c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	607b      	str	r3, [r7, #4]
}
 8007074:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007076:	4b0f      	ldr	r3, [pc, #60]	; (80070b4 <vPortEnterCritical+0x58>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3301      	adds	r3, #1
 800707c:	4a0d      	ldr	r2, [pc, #52]	; (80070b4 <vPortEnterCritical+0x58>)
 800707e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007080:	4b0c      	ldr	r3, [pc, #48]	; (80070b4 <vPortEnterCritical+0x58>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d10f      	bne.n	80070a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007088:	4b0b      	ldr	r3, [pc, #44]	; (80070b8 <vPortEnterCritical+0x5c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00a      	beq.n	80070a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	603b      	str	r3, [r7, #0]
}
 80070a4:	bf00      	nop
 80070a6:	e7fe      	b.n	80070a6 <vPortEnterCritical+0x4a>
	}
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bc80      	pop	{r7}
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	2000005c 	.word	0x2000005c
 80070b8:	e000ed04 	.word	0xe000ed04

080070bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80070c2:	4b11      	ldr	r3, [pc, #68]	; (8007108 <vPortExitCritical+0x4c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10a      	bne.n	80070e0 <vPortExitCritical+0x24>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	607b      	str	r3, [r7, #4]
}
 80070dc:	bf00      	nop
 80070de:	e7fe      	b.n	80070de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80070e0:	4b09      	ldr	r3, [pc, #36]	; (8007108 <vPortExitCritical+0x4c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3b01      	subs	r3, #1
 80070e6:	4a08      	ldr	r2, [pc, #32]	; (8007108 <vPortExitCritical+0x4c>)
 80070e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070ea:	4b07      	ldr	r3, [pc, #28]	; (8007108 <vPortExitCritical+0x4c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d105      	bne.n	80070fe <vPortExitCritical+0x42>
 80070f2:	2300      	movs	r3, #0
 80070f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	f383 8811 	msr	BASEPRI, r3
}
 80070fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80070fe:	bf00      	nop
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	bc80      	pop	{r7}
 8007106:	4770      	bx	lr
 8007108:	2000005c 	.word	0x2000005c
 800710c:	00000000 	.word	0x00000000

08007110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007110:	f3ef 8009 	mrs	r0, PSP
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	4b0d      	ldr	r3, [pc, #52]	; (8007150 <pxCurrentTCBConst>)
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007120:	6010      	str	r0, [r2, #0]
 8007122:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007126:	f04f 0050 	mov.w	r0, #80	; 0x50
 800712a:	f380 8811 	msr	BASEPRI, r0
 800712e:	f7ff fb51 	bl	80067d4 <vTaskSwitchContext>
 8007132:	f04f 0000 	mov.w	r0, #0
 8007136:	f380 8811 	msr	BASEPRI, r0
 800713a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800713e:	6819      	ldr	r1, [r3, #0]
 8007140:	6808      	ldr	r0, [r1, #0]
 8007142:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007146:	f380 8809 	msr	PSP, r0
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	4770      	bx	lr

08007150 <pxCurrentTCBConst>:
 8007150:	20000398 	.word	0x20000398
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007154:	bf00      	nop
 8007156:	bf00      	nop

08007158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	607b      	str	r3, [r7, #4]
}
 8007170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007172:	f7ff fa71 	bl	8006658 <xTaskIncrementTick>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800717c:	4b06      	ldr	r3, [pc, #24]	; (8007198 <SysTick_Handler+0x40>)
 800717e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	2300      	movs	r3, #0
 8007186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	f383 8811 	msr	BASEPRI, r3
}
 800718e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007190:	bf00      	nop
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	e000ed04 	.word	0xe000ed04

0800719c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800719c:	b480      	push	{r7}
 800719e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071a0:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <vPortSetupTimerInterrupt+0x30>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071a6:	4b0a      	ldr	r3, [pc, #40]	; (80071d0 <vPortSetupTimerInterrupt+0x34>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071ac:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <vPortSetupTimerInterrupt+0x38>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a09      	ldr	r2, [pc, #36]	; (80071d8 <vPortSetupTimerInterrupt+0x3c>)
 80071b2:	fba2 2303 	umull	r2, r3, r2, r3
 80071b6:	099b      	lsrs	r3, r3, #6
 80071b8:	4a08      	ldr	r2, [pc, #32]	; (80071dc <vPortSetupTimerInterrupt+0x40>)
 80071ba:	3b01      	subs	r3, #1
 80071bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80071be:	4b03      	ldr	r3, [pc, #12]	; (80071cc <vPortSetupTimerInterrupt+0x30>)
 80071c0:	2207      	movs	r2, #7
 80071c2:	601a      	str	r2, [r3, #0]
}
 80071c4:	bf00      	nop
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bc80      	pop	{r7}
 80071ca:	4770      	bx	lr
 80071cc:	e000e010 	.word	0xe000e010
 80071d0:	e000e018 	.word	0xe000e018
 80071d4:	20000050 	.word	0x20000050
 80071d8:	10624dd3 	.word	0x10624dd3
 80071dc:	e000e014 	.word	0xe000e014

080071e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80071e6:	f3ef 8305 	mrs	r3, IPSR
 80071ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b0f      	cmp	r3, #15
 80071f0:	d914      	bls.n	800721c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071f2:	4a16      	ldr	r2, [pc, #88]	; (800724c <vPortValidateInterruptPriority+0x6c>)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	4413      	add	r3, r2
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071fc:	4b14      	ldr	r3, [pc, #80]	; (8007250 <vPortValidateInterruptPriority+0x70>)
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	7afa      	ldrb	r2, [r7, #11]
 8007202:	429a      	cmp	r2, r3
 8007204:	d20a      	bcs.n	800721c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	607b      	str	r3, [r7, #4]
}
 8007218:	bf00      	nop
 800721a:	e7fe      	b.n	800721a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800721c:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <vPortValidateInterruptPriority+0x74>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007224:	4b0c      	ldr	r3, [pc, #48]	; (8007258 <vPortValidateInterruptPriority+0x78>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	429a      	cmp	r2, r3
 800722a:	d90a      	bls.n	8007242 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	603b      	str	r3, [r7, #0]
}
 800723e:	bf00      	nop
 8007240:	e7fe      	b.n	8007240 <vPortValidateInterruptPriority+0x60>
	}
 8007242:	bf00      	nop
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	bc80      	pop	{r7}
 800724a:	4770      	bx	lr
 800724c:	e000e3f0 	.word	0xe000e3f0
 8007250:	200004c4 	.word	0x200004c4
 8007254:	e000ed0c 	.word	0xe000ed0c
 8007258:	200004c8 	.word	0x200004c8

0800725c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08a      	sub	sp, #40	; 0x28
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007264:	2300      	movs	r3, #0
 8007266:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007268:	f7ff f94c 	bl	8006504 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800726c:	4b58      	ldr	r3, [pc, #352]	; (80073d0 <pvPortMalloc+0x174>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007274:	f000 f910 	bl	8007498 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007278:	4b56      	ldr	r3, [pc, #344]	; (80073d4 <pvPortMalloc+0x178>)
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4013      	ands	r3, r2
 8007280:	2b00      	cmp	r3, #0
 8007282:	f040 808e 	bne.w	80073a2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01d      	beq.n	80072c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800728c:	2208      	movs	r2, #8
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4413      	add	r3, r2
 8007292:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f003 0307 	and.w	r3, r3, #7
 800729a:	2b00      	cmp	r3, #0
 800729c:	d014      	beq.n	80072c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f023 0307 	bic.w	r3, r3, #7
 80072a4:	3308      	adds	r3, #8
 80072a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <pvPortMalloc+0x6c>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	617b      	str	r3, [r7, #20]
}
 80072c4:	bf00      	nop
 80072c6:	e7fe      	b.n	80072c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d069      	beq.n	80073a2 <pvPortMalloc+0x146>
 80072ce:	4b42      	ldr	r3, [pc, #264]	; (80073d8 <pvPortMalloc+0x17c>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d864      	bhi.n	80073a2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80072d8:	4b40      	ldr	r3, [pc, #256]	; (80073dc <pvPortMalloc+0x180>)
 80072da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80072dc:	4b3f      	ldr	r3, [pc, #252]	; (80073dc <pvPortMalloc+0x180>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072e2:	e004      	b.n	80072ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d903      	bls.n	8007300 <pvPortMalloc+0xa4>
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1f1      	bne.n	80072e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007300:	4b33      	ldr	r3, [pc, #204]	; (80073d0 <pvPortMalloc+0x174>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007306:	429a      	cmp	r2, r3
 8007308:	d04b      	beq.n	80073a2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2208      	movs	r2, #8
 8007310:	4413      	add	r3, r2
 8007312:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	1ad2      	subs	r2, r2, r3
 8007324:	2308      	movs	r3, #8
 8007326:	005b      	lsls	r3, r3, #1
 8007328:	429a      	cmp	r2, r3
 800732a:	d91f      	bls.n	800736c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800732c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4413      	add	r3, r2
 8007332:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	f003 0307 	and.w	r3, r3, #7
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <pvPortMalloc+0xf8>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	613b      	str	r3, [r7, #16]
}
 8007350:	bf00      	nop
 8007352:	e7fe      	b.n	8007352 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	1ad2      	subs	r2, r2, r3
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007366:	69b8      	ldr	r0, [r7, #24]
 8007368:	f000 f8f8 	bl	800755c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800736c:	4b1a      	ldr	r3, [pc, #104]	; (80073d8 <pvPortMalloc+0x17c>)
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	4a18      	ldr	r2, [pc, #96]	; (80073d8 <pvPortMalloc+0x17c>)
 8007378:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800737a:	4b17      	ldr	r3, [pc, #92]	; (80073d8 <pvPortMalloc+0x17c>)
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	4b18      	ldr	r3, [pc, #96]	; (80073e0 <pvPortMalloc+0x184>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d203      	bcs.n	800738e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007386:	4b14      	ldr	r3, [pc, #80]	; (80073d8 <pvPortMalloc+0x17c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a15      	ldr	r2, [pc, #84]	; (80073e0 <pvPortMalloc+0x184>)
 800738c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	4b10      	ldr	r3, [pc, #64]	; (80073d4 <pvPortMalloc+0x178>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	431a      	orrs	r2, r3
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	2200      	movs	r2, #0
 80073a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073a2:	f7ff f8bd 	bl	8006520 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	f003 0307 	and.w	r3, r3, #7
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00a      	beq.n	80073c6 <pvPortMalloc+0x16a>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	60fb      	str	r3, [r7, #12]
}
 80073c2:	bf00      	nop
 80073c4:	e7fe      	b.n	80073c4 <pvPortMalloc+0x168>
	return pvReturn;
 80073c6:	69fb      	ldr	r3, [r7, #28]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3728      	adds	r7, #40	; 0x28
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	20002474 	.word	0x20002474
 80073d4:	20002480 	.word	0x20002480
 80073d8:	20002478 	.word	0x20002478
 80073dc:	2000246c 	.word	0x2000246c
 80073e0:	2000247c 	.word	0x2000247c

080073e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d048      	beq.n	8007488 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80073f6:	2308      	movs	r3, #8
 80073f8:	425b      	negs	r3, r3
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	4413      	add	r3, r2
 80073fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	4b21      	ldr	r3, [pc, #132]	; (8007490 <vPortFree+0xac>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4013      	ands	r3, r2
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10a      	bne.n	8007428 <vPortFree+0x44>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	60fb      	str	r3, [r7, #12]
}
 8007424:	bf00      	nop
 8007426:	e7fe      	b.n	8007426 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00a      	beq.n	8007446 <vPortFree+0x62>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	60bb      	str	r3, [r7, #8]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	4b11      	ldr	r3, [pc, #68]	; (8007490 <vPortFree+0xac>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4013      	ands	r3, r2
 8007450:	2b00      	cmp	r3, #0
 8007452:	d019      	beq.n	8007488 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d115      	bne.n	8007488 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <vPortFree+0xac>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	43db      	mvns	r3, r3
 8007466:	401a      	ands	r2, r3
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800746c:	f7ff f84a 	bl	8006504 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	4b07      	ldr	r3, [pc, #28]	; (8007494 <vPortFree+0xb0>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4413      	add	r3, r2
 800747a:	4a06      	ldr	r2, [pc, #24]	; (8007494 <vPortFree+0xb0>)
 800747c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800747e:	6938      	ldr	r0, [r7, #16]
 8007480:	f000 f86c 	bl	800755c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007484:	f7ff f84c 	bl	8006520 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007488:	bf00      	nop
 800748a:	3718      	adds	r7, #24
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	20002480 	.word	0x20002480
 8007494:	20002478 	.word	0x20002478

08007498 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800749e:	f44f 53fd 	mov.w	r3, #8096	; 0x1fa0
 80074a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80074a4:	4b27      	ldr	r3, [pc, #156]	; (8007544 <prvHeapInit+0xac>)
 80074a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f003 0307 	and.w	r3, r3, #7
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00c      	beq.n	80074cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3307      	adds	r3, #7
 80074b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 0307 	bic.w	r3, r3, #7
 80074be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	4a1f      	ldr	r2, [pc, #124]	; (8007544 <prvHeapInit+0xac>)
 80074c8:	4413      	add	r3, r2
 80074ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074d0:	4a1d      	ldr	r2, [pc, #116]	; (8007548 <prvHeapInit+0xb0>)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80074d6:	4b1c      	ldr	r3, [pc, #112]	; (8007548 <prvHeapInit+0xb0>)
 80074d8:	2200      	movs	r2, #0
 80074da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	4413      	add	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80074e4:	2208      	movs	r2, #8
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	1a9b      	subs	r3, r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f023 0307 	bic.w	r3, r3, #7
 80074f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4a15      	ldr	r2, [pc, #84]	; (800754c <prvHeapInit+0xb4>)
 80074f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80074fa:	4b14      	ldr	r3, [pc, #80]	; (800754c <prvHeapInit+0xb4>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2200      	movs	r2, #0
 8007500:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007502:	4b12      	ldr	r3, [pc, #72]	; (800754c <prvHeapInit+0xb4>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2200      	movs	r2, #0
 8007508:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	1ad2      	subs	r2, r2, r3
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007518:	4b0c      	ldr	r3, [pc, #48]	; (800754c <prvHeapInit+0xb4>)
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	4a0a      	ldr	r2, [pc, #40]	; (8007550 <prvHeapInit+0xb8>)
 8007526:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	4a09      	ldr	r2, [pc, #36]	; (8007554 <prvHeapInit+0xbc>)
 800752e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007530:	4b09      	ldr	r3, [pc, #36]	; (8007558 <prvHeapInit+0xc0>)
 8007532:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007536:	601a      	str	r2, [r3, #0]
}
 8007538:	bf00      	nop
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	bc80      	pop	{r7}
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	200004cc 	.word	0x200004cc
 8007548:	2000246c 	.word	0x2000246c
 800754c:	20002474 	.word	0x20002474
 8007550:	2000247c 	.word	0x2000247c
 8007554:	20002478 	.word	0x20002478
 8007558:	20002480 	.word	0x20002480

0800755c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007564:	4b27      	ldr	r3, [pc, #156]	; (8007604 <prvInsertBlockIntoFreeList+0xa8>)
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	e002      	b.n	8007570 <prvInsertBlockIntoFreeList+0x14>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	429a      	cmp	r2, r3
 8007578:	d8f7      	bhi.n	800756a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	4413      	add	r3, r2
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	429a      	cmp	r2, r3
 800758a:	d108      	bne.n	800759e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	441a      	add	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	441a      	add	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d118      	bne.n	80075e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	4b14      	ldr	r3, [pc, #80]	; (8007608 <prvInsertBlockIntoFreeList+0xac>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d00d      	beq.n	80075da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	441a      	add	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	601a      	str	r2, [r3, #0]
 80075d8:	e008      	b.n	80075ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80075da:	4b0b      	ldr	r3, [pc, #44]	; (8007608 <prvInsertBlockIntoFreeList+0xac>)
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	e003      	b.n	80075ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d002      	beq.n	80075fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075fa:	bf00      	nop
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	bc80      	pop	{r7}
 8007602:	4770      	bx	lr
 8007604:	2000246c 	.word	0x2000246c
 8007608:	20002474 	.word	0x20002474

0800760c <lwJsonWriteStart>:
static int lwJsonCheckWriteError(LwJsonMsg *msg);
static int lwJsonAddNameAndValuePair(LwJsonMsg *msg, const char *name, LwJsonValueType type, LwJsonValue *value);
static int lwJsonAddValueToArray(LwJsonMsg *msg, LwJsonValueType type, LwJsonValue *value);
static int lwJsonIsValidUTF8String(const char *string);

int lwJsonWriteStart(LwJsonMsg *msg) {
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
    if (msg == NULL) {
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d102      	bne.n	8007620 <lwJsonWriteStart+0x14>
        return -EINVAL;
 800761a:	f06f 0315 	mvn.w	r3, #21
 800761e:	e00d      	b.n	800763c <lwJsonWriteStart+0x30>
    }
    if (msg->string == NULL) {
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d102      	bne.n	800762e <lwJsonWriteStart+0x22>
        return -EINVAL;
 8007628:	f06f 0315 	mvn.w	r3, #21
 800762c:	e006      	b.n	800763c <lwJsonWriteStart+0x30>
    }

    msg->_offset = 0;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	609a      	str	r2, [r3, #8]
    msg->_lastError = 0;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	60da      	str	r2, [r3, #12]
    return 0;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	bc80      	pop	{r7}
 8007644:	4770      	bx	lr

08007646 <lwJsonWriteEnd>:

int lwJsonWriteEnd(LwJsonMsg *msg) {
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
    if (msg == NULL) {
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d102      	bne.n	800765a <lwJsonWriteEnd+0x14>
        return -EPERM;
 8007654:	f04f 33ff 	mov.w	r3, #4294967295
 8007658:	e015      	b.n	8007686 <lwJsonWriteEnd+0x40>
    }
    if (msg->string == NULL) {
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d102      	bne.n	8007668 <lwJsonWriteEnd+0x22>
        return -EINVAL;
 8007662:	f06f 0315 	mvn.w	r3, #21
 8007666:	e00e      	b.n	8007686 <lwJsonWriteEnd+0x40>
    }

    if (msg->_lastError < 0) {
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	da02      	bge.n	8007676 <lwJsonWriteEnd+0x30>
        return msg->_lastError;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	e007      	b.n	8007686 <lwJsonWriteEnd+0x40>
    }

    msg->string[msg->_offset] = 0;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	4413      	add	r3, r2
 8007680:	2200      	movs	r2, #0
 8007682:	701a      	strb	r2, [r3, #0]

    return 0;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	bc80      	pop	{r7}
 800768e:	4770      	bx	lr

08007690 <lwJsonStartObject>:
    }

    msg->_offset += offset;
}

int lwJsonStartObject(LwJsonMsg *msg) {
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
    if (lwJsonCheckWriteError(msg) != 0) {
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f8ab 	bl	80077f4 <lwJsonCheckWriteError>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <lwJsonStartObject+0x1a>
        return msg->_lastError;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	e00c      	b.n	80076c4 <lwJsonStartObject+0x34>
    }

    msg->string[msg->_offset] = '{';
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	4413      	add	r3, r2
 80076b4:	227b      	movs	r2, #123	; 0x7b
 80076b6:	701a      	strb	r2, [r3, #0]
    msg->_offset++;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	609a      	str	r2, [r3, #8]
    return 0;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <lwJsonCloseObject>:
    msg->string[msg->_offset] = '[';
    msg->_offset++;
    return 0;
}

int lwJsonCloseObject(LwJsonMsg *msg) {
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
    if (lwJsonCheckWriteError(msg) != 0) {
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f88d 	bl	80077f4 <lwJsonCheckWriteError>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <lwJsonCloseObject+0x1a>
        return msg->_lastError;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	e00c      	b.n	8007700 <lwJsonCloseObject+0x34>
    }

    msg->string[msg->_offset] = '}';
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	4413      	add	r3, r2
 80076f0:	227d      	movs	r2, #125	; 0x7d
 80076f2:	701a      	strb	r2, [r3, #0]
    msg->_offset++;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	1c5a      	adds	r2, r3, #1
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	609a      	str	r2, [r3, #8]
    return 0;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <lwJsonAddIntToObject>:
    }

    return lwJsonAddValueToArray(msg, type, &jsonValue);
}

int lwJsonAddIntToObject(LwJsonMsg *msg, const char *name, int32_t value) {
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
    LwJsonValueType type = LWJSON_VAL_NUMBER;
 8007714:	2301      	movs	r3, #1
 8007716:	75fb      	strb	r3, [r7, #23]
    LwJsonValue jsonValue;
    jsonValue.valueInt = value;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	613b      	str	r3, [r7, #16]
    return lwJsonAddNameAndValuePair(msg, name, type, &jsonValue);
 800771c:	f107 0310 	add.w	r3, r7, #16
 8007720:	7dfa      	ldrb	r2, [r7, #23]
 8007722:	68b9      	ldr	r1, [r7, #8]
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 f887 	bl	8007838 <lwJsonAddNameAndValuePair>
 800772a:	4603      	mov	r3, r0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <lwJsonCalculateValueStringLength>:

    return 0;
}


static int lwJsonCalculateValueStringLength(LwJsonValueType type, LwJsonValue *value) {
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	6039      	str	r1, [r7, #0]
 800773e:	71fb      	strb	r3, [r7, #7]
    unsigned int valueLen = 0;
 8007740:	2300      	movs	r3, #0
 8007742:	60fb      	str	r3, [r7, #12]
    auxString[0]=0;
 8007744:	4b29      	ldr	r3, [pc, #164]	; (80077ec <lwJsonCalculateValueStringLength+0xb8>)
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]

    switch (type) {
 800774a:	79fb      	ldrb	r3, [r7, #7]
 800774c:	2b05      	cmp	r3, #5
 800774e:	d848      	bhi.n	80077e2 <lwJsonCalculateValueStringLength+0xae>
 8007750:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <lwJsonCalculateValueStringLength+0x24>)
 8007752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007756:	bf00      	nop
 8007758:	08007771 	.word	0x08007771
 800775c:	0800778f 	.word	0x0800778f
 8007760:	080077b3 	.word	0x080077b3
 8007764:	080077d7 	.word	0x080077d7
 8007768:	080077d7 	.word	0x080077d7
 800776c:	080077dd 	.word	0x080077dd
    case LWJSON_VAL_STRING:
        if (value == NULL) {
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d102      	bne.n	800777c <lwJsonCalculateValueStringLength+0x48>
            return -EINVAL;
 8007776:	f06f 0315 	mvn.w	r3, #21
 800777a:	e033      	b.n	80077e4 <lwJsonCalculateValueStringLength+0xb0>
        }
        valueLen = strlen(value->valueString) + 2;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4618      	mov	r0, r3
 8007782:	f7f8 fd5f 	bl	8000244 <strlen>
 8007786:	4603      	mov	r3, r0
 8007788:	3302      	adds	r3, #2
 800778a:	60fb      	str	r3, [r7, #12]
        break;
 800778c:	e029      	b.n	80077e2 <lwJsonCalculateValueStringLength+0xae>
    case LWJSON_VAL_NUMBER:
        if (value == NULL) {
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d102      	bne.n	800779a <lwJsonCalculateValueStringLength+0x66>
            return -EINVAL;
 8007794:	f06f 0315 	mvn.w	r3, #21
 8007798:	e024      	b.n	80077e4 <lwJsonCalculateValueStringLength+0xb0>
        }
        sprintf(auxString, "%ld", value->valueInt);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	461a      	mov	r2, r3
 80077a0:	4913      	ldr	r1, [pc, #76]	; (80077f0 <lwJsonCalculateValueStringLength+0xbc>)
 80077a2:	4812      	ldr	r0, [pc, #72]	; (80077ec <lwJsonCalculateValueStringLength+0xb8>)
 80077a4:	f001 f856 	bl	8008854 <siprintf>
        valueLen = strlen(auxString);
 80077a8:	4810      	ldr	r0, [pc, #64]	; (80077ec <lwJsonCalculateValueStringLength+0xb8>)
 80077aa:	f7f8 fd4b 	bl	8000244 <strlen>
 80077ae:	60f8      	str	r0, [r7, #12]
        break;
 80077b0:	e017      	b.n	80077e2 <lwJsonCalculateValueStringLength+0xae>
    case LWJSON_VAL_BOOLEAN:
        if (value == NULL) {
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d102      	bne.n	80077be <lwJsonCalculateValueStringLength+0x8a>
            return -EINVAL;
 80077b8:	f06f 0315 	mvn.w	r3, #21
 80077bc:	e012      	b.n	80077e4 <lwJsonCalculateValueStringLength+0xb0>
        }
        if(value->valueBool == true) {
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <lwJsonCalculateValueStringLength+0x9a>
            // true
            valueLen += 4;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	3304      	adds	r3, #4
 80077ca:	60fb      	str	r3, [r7, #12]
        } else {
            // false
            valueLen += 5;
        }
        break;
 80077cc:	e009      	b.n	80077e2 <lwJsonCalculateValueStringLength+0xae>
            valueLen += 5;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3305      	adds	r3, #5
 80077d2:	60fb      	str	r3, [r7, #12]
        break;
 80077d4:	e005      	b.n	80077e2 <lwJsonCalculateValueStringLength+0xae>
    case LWJSON_VAL_OBJECT:
    case LWJSON_VAL_ARRAY:
        valueLen = 1;
 80077d6:	2301      	movs	r3, #1
 80077d8:	60fb      	str	r3, [r7, #12]
        break;
 80077da:	e002      	b.n	80077e2 <lwJsonCalculateValueStringLength+0xae>
    case LWJSON_VAL_NULL:
        valueLen = 4;
 80077dc:	2304      	movs	r3, #4
 80077de:	60fb      	str	r3, [r7, #12]
        break;
 80077e0:	bf00      	nop
    }

    return valueLen;
 80077e2:	68fb      	ldr	r3, [r7, #12]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	200027a4 	.word	0x200027a4
 80077f0:	08009c40 	.word	0x08009c40

080077f4 <lwJsonCheckWriteError>:

static int lwJsonCheckWriteError(LwJsonMsg *msg) {
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
    if (msg == NULL) {
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d106      	bne.n	8007810 <lwJsonCheckWriteError+0x1c>
        msg->_lastError = (-EINVAL);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f06f 0215 	mvn.w	r2, #21
 8007808:	60da      	str	r2, [r3, #12]
        return -EINVAL;
 800780a:	f06f 0315 	mvn.w	r3, #21
 800780e:	e00d      	b.n	800782c <lwJsonCheckWriteError+0x38>
    }
    if (msg->_offset >= msg->len) {
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	429a      	cmp	r2, r3
 800781a:	d306      	bcc.n	800782a <lwJsonCheckWriteError+0x36>
        msg->_lastError = (-ENOMEM);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f06f 020b 	mvn.w	r2, #11
 8007822:	60da      	str	r2, [r3, #12]
        return -ENOMEM;
 8007824:	f06f 030b 	mvn.w	r3, #11
 8007828:	e000      	b.n	800782c <lwJsonCheckWriteError+0x38>
    }

    return 0;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	bc80      	pop	{r7}
 8007834:	4770      	bx	lr
	...

08007838 <lwJsonAddNameAndValuePair>:

static int lwJsonAddNameAndValuePair(LwJsonMsg *msg, const char *name, LwJsonValueType type, LwJsonValue *value) {
 8007838:	b580      	push	{r7, lr}
 800783a:	b088      	sub	sp, #32
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	603b      	str	r3, [r7, #0]
 8007844:	4613      	mov	r3, r2
 8007846:	71fb      	strb	r3, [r7, #7]
    unsigned int entryLen = 0;
 8007848:	2300      	movs	r3, #0
 800784a:	61fb      	str	r3, [r7, #28]
    unsigned int nameLen;
    unsigned int valueLen = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	617b      	str	r3, [r7, #20]
    unsigned char flagSeparator = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	76fb      	strb	r3, [r7, #27]
    auxString[0]=0;
 8007854:	4b90      	ldr	r3, [pc, #576]	; (8007a98 <lwJsonAddNameAndValuePair+0x260>)
 8007856:	2200      	movs	r2, #0
 8007858:	701a      	strb	r2, [r3, #0]

    if (lwJsonCheckWriteError(msg) != 0) {
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f7ff ffca 	bl	80077f4 <lwJsonCheckWriteError>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <lwJsonAddNameAndValuePair+0x34>
        return msg->_lastError;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	e111      	b.n	8007a90 <lwJsonAddNameAndValuePair+0x258>
    }
    if (name == NULL) {
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d106      	bne.n	8007880 <lwJsonAddNameAndValuePair+0x48>
        msg->_lastError = (-EINVAL);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f06f 0215 	mvn.w	r2, #21
 8007878:	60da      	str	r2, [r3, #12]
        return -EINVAL;
 800787a:	f06f 0315 	mvn.w	r3, #21
 800787e:	e107      	b.n	8007a90 <lwJsonAddNameAndValuePair+0x258>
    }

    // Calculate and check len
    valueLen = lwJsonCalculateValueStringLength(type, value);
 8007880:	79fb      	ldrb	r3, [r7, #7]
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	4618      	mov	r0, r3
 8007886:	f7ff ff55 	bl	8007734 <lwJsonCalculateValueStringLength>
 800788a:	4603      	mov	r3, r0
 800788c:	617b      	str	r3, [r7, #20]
    if (valueLen < 0) {
        return -EINVAL;
    }

    // Calculate space
    nameLen = strlen(name);
 800788e:	68b8      	ldr	r0, [r7, #8]
 8007890:	f7f8 fcd8 	bl	8000244 <strlen>
 8007894:	6138      	str	r0, [r7, #16]
    entryLen = nameLen + valueLen + 3;
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	4413      	add	r3, r2
 800789c:	3303      	adds	r3, #3
 800789e:	61fb      	str	r3, [r7, #28]
    if (msg->string[msg->_offset - 1] != '{') {
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	4413      	add	r3, r2
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	2b7b      	cmp	r3, #123	; 0x7b
 80078b0:	d004      	beq.n	80078bc <lwJsonAddNameAndValuePair+0x84>
        entryLen ++;
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	3301      	adds	r3, #1
 80078b6:	61fb      	str	r3, [r7, #28]
        flagSeparator = 1;
 80078b8:	2301      	movs	r3, #1
 80078ba:	76fb      	strb	r3, [r7, #27]
    }

    // Check space
    if (msg->_offset > (msg->len - entryLen)) {
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6859      	ldr	r1, [r3, #4]
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	1acb      	subs	r3, r1, r3
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d906      	bls.n	80078da <lwJsonAddNameAndValuePair+0xa2>
        msg->_lastError = (-ENOMEM);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f06f 020b 	mvn.w	r2, #11
 80078d2:	60da      	str	r2, [r3, #12]
        return -ENOMEM;
 80078d4:	f06f 030b 	mvn.w	r3, #11
 80078d8:	e0da      	b.n	8007a90 <lwJsonAddNameAndValuePair+0x258>
    }

    // Add separator if necessary
    if (flagSeparator != 0) {
 80078da:	7efb      	ldrb	r3, [r7, #27]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00b      	beq.n	80078f8 <lwJsonAddNameAndValuePair+0xc0>
        msg->string[msg->_offset] = ',';
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	4413      	add	r3, r2
 80078ea:	222c      	movs	r2, #44	; 0x2c
 80078ec:	701a      	strb	r2, [r3, #0]
        msg->_offset++;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	1c5a      	adds	r2, r3, #1
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	609a      	str	r2, [r3, #8]
    }

    // Add name
    msg->string[msg->_offset] = '"';
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	4413      	add	r3, r2
 8007902:	2222      	movs	r2, #34	; 0x22
 8007904:	701a      	strb	r2, [r3, #0]
    msg->_offset++;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	1c5a      	adds	r2, r3, #1
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	609a      	str	r2, [r3, #8]
    strcpy(msg->string + msg->_offset, name);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	4413      	add	r3, r2
 800791a:	68b9      	ldr	r1, [r7, #8]
 800791c:	4618      	mov	r0, r3
 800791e:	f000 fffc 	bl	800891a <strcpy>
    msg->_offset += nameLen;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	689a      	ldr	r2, [r3, #8]
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	441a      	add	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	609a      	str	r2, [r3, #8]
    strcpy(msg->string + msg->_offset, "\":");
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	4413      	add	r3, r2
 8007938:	4a58      	ldr	r2, [pc, #352]	; (8007a9c <lwJsonAddNameAndValuePair+0x264>)
 800793a:	8811      	ldrh	r1, [r2, #0]
 800793c:	7892      	ldrb	r2, [r2, #2]
 800793e:	8019      	strh	r1, [r3, #0]
 8007940:	709a      	strb	r2, [r3, #2]
    msg->_offset += 2;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	1c9a      	adds	r2, r3, #2
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	609a      	str	r2, [r3, #8]

    // Add value
    switch (type) {
 800794c:	79fb      	ldrb	r3, [r7, #7]
 800794e:	2b05      	cmp	r3, #5
 8007950:	f200 809d 	bhi.w	8007a8e <lwJsonAddNameAndValuePair+0x256>
 8007954:	a201      	add	r2, pc, #4	; (adr r2, 800795c <lwJsonAddNameAndValuePair+0x124>)
 8007956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795a:	bf00      	nop
 800795c:	08007975 	.word	0x08007975
 8007960:	080079cb 	.word	0x080079cb
 8007964:	080079f9 	.word	0x080079f9
 8007968:	08007a39 	.word	0x08007a39
 800796c:	08007a53 	.word	0x08007a53
 8007970:	08007a6d 	.word	0x08007a6d
    case LWJSON_VAL_STRING:
        msg->string[msg->_offset] = '"';
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	4413      	add	r3, r2
 800797e:	2222      	movs	r2, #34	; 0x22
 8007980:	701a      	strb	r2, [r3, #0]
        msg->_offset++;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	1c5a      	adds	r2, r3, #1
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	609a      	str	r2, [r3, #8]
        strcpy(msg->string + msg->_offset, value->valueString);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	441a      	add	r2, r3
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4619      	mov	r1, r3
 800799c:	4610      	mov	r0, r2
 800799e:	f000 ffbc 	bl	800891a <strcpy>
        msg->_offset += valueLen - 2;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	689a      	ldr	r2, [r3, #8]
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	4413      	add	r3, r2
 80079aa:	1e9a      	subs	r2, r3, #2
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	609a      	str	r2, [r3, #8]
        msg->string[msg->_offset] = '"';
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	4413      	add	r3, r2
 80079ba:	2222      	movs	r2, #34	; 0x22
 80079bc:	701a      	strb	r2, [r3, #0]
        msg->_offset++;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	1c5a      	adds	r2, r3, #1
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	609a      	str	r2, [r3, #8]
        break;
 80079c8:	e061      	b.n	8007a8e <lwJsonAddNameAndValuePair+0x256>
    case LWJSON_VAL_NUMBER:
        sprintf(auxString, "%ld", value->valueInt);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	4933      	ldr	r1, [pc, #204]	; (8007aa0 <lwJsonAddNameAndValuePair+0x268>)
 80079d2:	4831      	ldr	r0, [pc, #196]	; (8007a98 <lwJsonAddNameAndValuePair+0x260>)
 80079d4:	f000 ff3e 	bl	8008854 <siprintf>
        strcpy(msg->string + msg->_offset, auxString);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	4413      	add	r3, r2
 80079e2:	492d      	ldr	r1, [pc, #180]	; (8007a98 <lwJsonAddNameAndValuePair+0x260>)
 80079e4:	4618      	mov	r0, r3
 80079e6:	f000 ff98 	bl	800891a <strcpy>
        msg->_offset += valueLen;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	689a      	ldr	r2, [r3, #8]
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	441a      	add	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	609a      	str	r2, [r3, #8]
        break;
 80079f6:	e04a      	b.n	8007a8e <lwJsonAddNameAndValuePair+0x256>
    case LWJSON_VAL_BOOLEAN:
        if (value->valueBool == true) {
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00a      	beq.n	8007a16 <lwJsonAddNameAndValuePair+0x1de>
            strcpy(msg->string + msg->_offset, "true");
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	4413      	add	r3, r2
 8007a0a:	4a26      	ldr	r2, [pc, #152]	; (8007aa4 <lwJsonAddNameAndValuePair+0x26c>)
 8007a0c:	6810      	ldr	r0, [r2, #0]
 8007a0e:	6018      	str	r0, [r3, #0]
 8007a10:	7912      	ldrb	r2, [r2, #4]
 8007a12:	711a      	strb	r2, [r3, #4]
 8007a14:	e009      	b.n	8007a2a <lwJsonAddNameAndValuePair+0x1f2>
        } else {
            strcpy(msg->string + msg->_offset, "false");
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	4413      	add	r3, r2
 8007a20:	4a21      	ldr	r2, [pc, #132]	; (8007aa8 <lwJsonAddNameAndValuePair+0x270>)
 8007a22:	6810      	ldr	r0, [r2, #0]
 8007a24:	6018      	str	r0, [r3, #0]
 8007a26:	8892      	ldrh	r2, [r2, #4]
 8007a28:	809a      	strh	r2, [r3, #4]
        }
        msg->_offset += valueLen;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	689a      	ldr	r2, [r3, #8]
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	441a      	add	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	609a      	str	r2, [r3, #8]
        break;
 8007a36:	e02a      	b.n	8007a8e <lwJsonAddNameAndValuePair+0x256>
    case LWJSON_VAL_OBJECT:
        msg->string[msg->_offset] = '{';
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	4413      	add	r3, r2
 8007a42:	227b      	movs	r2, #123	; 0x7b
 8007a44:	701a      	strb	r2, [r3, #0]
        msg->_offset++;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	609a      	str	r2, [r3, #8]
        break;
 8007a50:	e01d      	b.n	8007a8e <lwJsonAddNameAndValuePair+0x256>
    case LWJSON_VAL_ARRAY:
        msg->string[msg->_offset] = '[';
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	225b      	movs	r2, #91	; 0x5b
 8007a5e:	701a      	strb	r2, [r3, #0]
        msg->_offset++;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	1c5a      	adds	r2, r3, #1
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	609a      	str	r2, [r3, #8]
        break;
 8007a6a:	e010      	b.n	8007a8e <lwJsonAddNameAndValuePair+0x256>
    case LWJSON_VAL_NULL:
        strcpy(msg->string + msg->_offset, "null");
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	4413      	add	r3, r2
 8007a76:	4a0d      	ldr	r2, [pc, #52]	; (8007aac <lwJsonAddNameAndValuePair+0x274>)
 8007a78:	6810      	ldr	r0, [r2, #0]
 8007a7a:	6018      	str	r0, [r3, #0]
 8007a7c:	7912      	ldrb	r2, [r2, #4]
 8007a7e:	711a      	strb	r2, [r3, #4]
        msg->_offset += valueLen;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	689a      	ldr	r2, [r3, #8]
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	441a      	add	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	609a      	str	r2, [r3, #8]
        break;
 8007a8c:	bf00      	nop
    }

    return 0;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3720      	adds	r7, #32
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	200027a4 	.word	0x200027a4
 8007a9c:	08009c3c 	.word	0x08009c3c
 8007aa0:	08009c40 	.word	0x08009c40
 8007aa4:	08009c44 	.word	0x08009c44
 8007aa8:	08009c4c 	.word	0x08009c4c
 8007aac:	08009c54 	.word	0x08009c54

08007ab0 <lwJsonGetInt>:
    value[stringLen] = 0;

    return 0;
}

int lwJsonGetInt(const char **path, const LwJsonMsg *msg, int *value) {
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b08a      	sub	sp, #40	; 0x28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
    int result;
    LwJsonMsg jsonNumber;

    result = lwJsonFindValue(path, msg, LWJSON_VAL_NUMBER, &jsonNumber);
 8007abc:	f107 0314 	add.w	r3, r7, #20
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	68b9      	ldr	r1, [r7, #8]
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 f812 	bl	8007aee <lwJsonFindValue>
 8007aca:	6278      	str	r0, [r7, #36]	; 0x24
    if (result != 0) {
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <lwJsonGetInt+0x26>
        return result;
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	e007      	b.n	8007ae6 <lwJsonGetInt+0x36>
    }

    // Get integer
    (*value) = atoi(jsonNumber.string);
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 fc49 	bl	8008370 <atoi>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	601a      	str	r2, [r3, #0]

    return 0;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3728      	adds	r7, #40	; 0x28
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <lwJsonFindValue>:

    return 0;
}


static int lwJsonFindValue(const char **path, const LwJsonMsg *msg, LwJsonValueType expectedType, LwJsonMsg *value) {
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b088      	sub	sp, #32
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	60f8      	str	r0, [r7, #12]
 8007af6:	60b9      	str	r1, [r7, #8]
 8007af8:	603b      	str	r3, [r7, #0]
 8007afa:	4613      	mov	r3, r2
 8007afc:	71fb      	strb	r3, [r7, #7]
    int result;
    LwJsonFindResult findResult;

    if (msg == NULL || value == NULL) {
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <lwJsonFindValue+0x1c>
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d102      	bne.n	8007b10 <lwJsonFindValue+0x22>
        return -EINVAL;
 8007b0a:	f06f 0315 	mvn.w	r3, #21
 8007b0e:	e01d      	b.n	8007b4c <lwJsonFindValue+0x5e>
    }

    result = lwJsonFind(path, msg, &findResult);
 8007b10:	f107 0310 	add.w	r3, r7, #16
 8007b14:	461a      	mov	r2, r3
 8007b16:	68b9      	ldr	r1, [r7, #8]
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 f81b 	bl	8007b54 <lwJsonFind>
 8007b1e:	61f8      	str	r0, [r7, #28]
    if (result != 0) {
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <lwJsonFindValue+0x3c>
        return result;
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	e010      	b.n	8007b4c <lwJsonFindValue+0x5e>
    }
    if (findResult.type != expectedType) {
 8007b2a:	7e3b      	ldrb	r3, [r7, #24]
 8007b2c:	79fa      	ldrb	r2, [r7, #7]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d002      	beq.n	8007b38 <lwJsonFindValue+0x4a>
        return -EPERM;
 8007b32:	f04f 33ff 	mov.w	r3, #4294967295
 8007b36:	e009      	b.n	8007b4c <lwJsonFindValue+0x5e>
    }

    value->string = &msg->string[findResult.offset];
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	441a      	add	r2, r3
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	601a      	str	r2, [r3, #0]
    value->len = findResult.len;
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	605a      	str	r2, [r3, #4]

    return 0;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3720      	adds	r7, #32
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <lwJsonFind>:

static int lwJsonFind(const char **path, const LwJsonMsg *msg, LwJsonFindResult *findResult) {
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b092      	sub	sp, #72	; 0x48
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
    LwJsonParser parser;

    if (path == NULL || msg == NULL || findResult == NULL) {
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d005      	beq.n	8007b72 <lwJsonFind+0x1e>
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <lwJsonFind+0x1e>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d102      	bne.n	8007b78 <lwJsonFind+0x24>
        return -EINVAL;
 8007b72:	f06f 0315 	mvn.w	r3, #21
 8007b76:	e0a4      	b.n	8007cc2 <lwJsonFind+0x16e>
    }

    // Init Parser
    parser.searchDepth = lwJsonCalculatePathDepth(path);
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 fb90 	bl	800829e <lwJsonCalculatePathDepth>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	633b      	str	r3, [r7, #48]	; 0x30
    if (parser.searchDepth > LWJSON_DEPTH_MAX) {
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	2b08      	cmp	r3, #8
 8007b86:	d902      	bls.n	8007b8e <lwJsonFind+0x3a>
        return -EPERM;
 8007b88:	f04f 33ff 	mov.w	r3, #4294967295
 8007b8c:	e099      	b.n	8007cc2 <lwJsonFind+0x16e>
    }
    parser.path = path;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	617b      	str	r3, [r7, #20]
    parser.msg = msg;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	61bb      	str	r3, [r7, #24]
    parser.depth = 0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	62bb      	str	r3, [r7, #40]	; 0x28
    parser.findDepth = 0;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    parser.state = LWJSON_SM_START;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    parser.findResult = findResult;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	647b      	str	r3, [r7, #68]	; 0x44

    for (parser.p = msg->string; (parser.p[0] != 0) && ((parser.p - msg->string) < msg->len); parser.p++) {
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	643b      	str	r3, [r7, #64]	; 0x40
 8007bae:	e06c      	b.n	8007c8a <lwJsonFind+0x136>
        // Filter chars
        PrefilterChar(parser.p);
 8007bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 f88a 	bl	8007ccc <PrefilterChar>
        if (SkippableChar(parser.p[0])) {
 8007bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 f899 	bl	8007cf4 <SkippableChar>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d15c      	bne.n	8007c82 <lwJsonFind+0x12e>
            continue;
        }

        switch (parser.state) {
 8007bc8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007bcc:	2b0a      	cmp	r3, #10
 8007bce:	d855      	bhi.n	8007c7c <lwJsonFind+0x128>
 8007bd0:	a201      	add	r2, pc, #4	; (adr r2, 8007bd8 <lwJsonFind+0x84>)
 8007bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd6:	bf00      	nop
 8007bd8:	08007c05 	.word	0x08007c05
 8007bdc:	08007c11 	.word	0x08007c11
 8007be0:	08007c29 	.word	0x08007c29
 8007be4:	08007c35 	.word	0x08007c35
 8007be8:	08007c41 	.word	0x08007c41
 8007bec:	08007c1d 	.word	0x08007c1d
 8007bf0:	08007c4d 	.word	0x08007c4d
 8007bf4:	08007c65 	.word	0x08007c65
 8007bf8:	08007c59 	.word	0x08007c59
 8007bfc:	08007c71 	.word	0x08007c71
 8007c00:	08007c71 	.word	0x08007c71
        case LWJSON_SM_START:
            FindSmStartHandler(&parser);
 8007c04:	f107 0314 	add.w	r3, r7, #20
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 f886 	bl	8007d1a <FindSmStartHandler>
            break;
 8007c0e:	e039      	b.n	8007c84 <lwJsonFind+0x130>
        case LWJSON_SM_OBJECT:
            FindSmObjectHandler(&parser);
 8007c10:	f107 0314 	add.w	r3, r7, #20
 8007c14:	4618      	mov	r0, r3
 8007c16:	f000 f8a5 	bl	8007d64 <FindSmObjectHandler>
            break;
 8007c1a:	e033      	b.n	8007c84 <lwJsonFind+0x130>
        case LWJSON_SM_ARRAY:
            FindSmArrayHandler(&parser);
 8007c1c:	f107 0314 	add.w	r3, r7, #20
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 f8c7 	bl	8007db4 <FindSmArrayHandler>
            break;
 8007c26:	e02d      	b.n	8007c84 <lwJsonFind+0x130>
        case LWJSON_SM_NAME:
            FindSmNameHandler(&parser);
 8007c28:	f107 0314 	add.w	r3, r7, #20
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 f8db 	bl	8007de8 <FindSmNameHandler>
            break;
 8007c32:	e027      	b.n	8007c84 <lwJsonFind+0x130>
        case LWJSON_SM_NAME_END:
            FindSmNameEndHandler(&parser);
 8007c34:	f107 0314 	add.w	r3, r7, #20
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 f93a 	bl	8007eb2 <FindSmNameEndHandler>
            break;
 8007c3e:	e021      	b.n	8007c84 <lwJsonFind+0x130>
        case LWJSON_SM_VALUE:
            FindSmValueHandler(&parser);
 8007c40:	f107 0314 	add.w	r3, r7, #20
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 f949 	bl	8007edc <FindSmValueHandler>
            break;
 8007c4a:	e01b      	b.n	8007c84 <lwJsonFind+0x130>
        case LWJSON_SM_STRING:
            FindSmStringHandler(&parser);
 8007c4c:	f107 0314 	add.w	r3, r7, #20
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 f9fd 	bl	8008050 <FindSmStringHandler>
            break;
 8007c56:	e015      	b.n	8007c84 <lwJsonFind+0x130>
        case LWJSON_SM_NUMBER:
            FindSmNumberHandler(&parser);
 8007c58:	f107 0314 	add.w	r3, r7, #20
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 fa1d 	bl	800809c <FindSmNumberHandler>
            break;
 8007c62:	e00f      	b.n	8007c84 <lwJsonFind+0x130>
        case LWJSON_SM_VALUE_END:
            FindSmValueEndHandler(&parser);
 8007c64:	f107 0314 	add.w	r3, r7, #20
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 fa3f 	bl	80080ec <FindSmValueEndHandler>
            break;
 8007c6e:	e009      	b.n	8007c84 <lwJsonFind+0x130>
        case LWJSON_SM_OBJECT_END:
        case LWJSON_SM_ARRAY_END:
            FindSmLevelEndHandler(&parser);
 8007c70:	f107 0314 	add.w	r3, r7, #20
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 fad5 	bl	8008224 <FindSmLevelEndHandler>
            break;
 8007c7a:	e003      	b.n	8007c84 <lwJsonFind+0x130>
        default:
            return -EPERM;
 8007c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c80:	e01f      	b.n	8007cc2 <lwJsonFind+0x16e>
            continue;
 8007c82:	bf00      	nop
    for (parser.p = msg->string; (parser.p[0] != 0) && ((parser.p - msg->string) < msg->len); parser.p++) {
 8007c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c86:	3301      	adds	r3, #1
 8007c88:	643b      	str	r3, [r7, #64]	; 0x40
 8007c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d008      	beq.n	8007ca4 <lwJsonFind+0x150>
 8007c92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d385      	bcc.n	8007bb0 <lwJsonFind+0x5c>
        }
    }

    if (parser.state != LWJSON_SM_END) {
 8007ca4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007ca8:	2b0b      	cmp	r3, #11
 8007caa:	d002      	beq.n	8007cb2 <lwJsonFind+0x15e>
        return -EPERM;
 8007cac:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb0:	e007      	b.n	8007cc2 <lwJsonFind+0x16e>
    }
    //Comprobar si no se ha encontrado
    if (parser.findDepth < parser.searchDepth) {
 8007cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d202      	bcs.n	8007cc0 <lwJsonFind+0x16c>
        return -ENOENT;
 8007cba:	f06f 0301 	mvn.w	r3, #1
 8007cbe:	e000      	b.n	8007cc2 <lwJsonFind+0x16e>
    }
    return 0;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3748      	adds	r7, #72	; 0x48
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop

08007ccc <PrefilterChar>:

static void PrefilterChar(char *p) {
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
    // Substitute LF and CR with space. It avoids problems in array parsing
    if ((*p) == '\r' || (*p) == '\n') {
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	2b0d      	cmp	r3, #13
 8007cda:	d003      	beq.n	8007ce4 <PrefilterChar+0x18>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	2b0a      	cmp	r3, #10
 8007ce2:	d102      	bne.n	8007cea <PrefilterChar+0x1e>
        (*p) = ' ';
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	701a      	strb	r2, [r3, #0]
    }
}
 8007cea:	bf00      	nop
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bc80      	pop	{r7}
 8007cf2:	4770      	bx	lr

08007cf4 <SkippableChar>:

static bool SkippableChar(char c) {
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	71fb      	strb	r3, [r7, #7]

    if (c == '\t' || c == ' ') {
 8007cfe:	79fb      	ldrb	r3, [r7, #7]
 8007d00:	2b09      	cmp	r3, #9
 8007d02:	d002      	beq.n	8007d0a <SkippableChar+0x16>
 8007d04:	79fb      	ldrb	r3, [r7, #7]
 8007d06:	2b20      	cmp	r3, #32
 8007d08:	d101      	bne.n	8007d0e <SkippableChar+0x1a>
        return true;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e000      	b.n	8007d10 <SkippableChar+0x1c>
    }

    return false;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bc80      	pop	{r7}
 8007d18:	4770      	bx	lr

08007d1a <FindSmStartHandler>:

static void FindSmStartHandler(LwJsonParser *parser) {
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b082      	sub	sp, #8
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
    // Inicio. Se debe encontrar '{'
    if (parser->p[0] == '{') {
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	2b7b      	cmp	r3, #123	; 0x7b
 8007d2a:	d107      	bne.n	8007d3c <FindSmStartHandler+0x22>
        parser->state = LWJSON_SM_OBJECT;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	745a      	strb	r2, [r3, #17]
        lwJsonParserPush(parser, LWJSON_PARENT_OBJECT);
 8007d32:	2100      	movs	r1, #0
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 face 	bl	80082d6 <lwJsonParserPush>
        parser->state = LWJSON_SM_ARRAY;
        lwJsonParserPush(parser, LWJSON_PARENT_ARRAY);
    } else {
        parser->state = LWJSON_SM_ERROR;
    }
}
 8007d3a:	e00f      	b.n	8007d5c <FindSmStartHandler+0x42>
    } else if (parser->p[0] == '[') {
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	2b5b      	cmp	r3, #91	; 0x5b
 8007d44:	d107      	bne.n	8007d56 <FindSmStartHandler+0x3c>
        parser->state = LWJSON_SM_ARRAY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2205      	movs	r2, #5
 8007d4a:	745a      	strb	r2, [r3, #17]
        lwJsonParserPush(parser, LWJSON_PARENT_ARRAY);
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fac1 	bl	80082d6 <lwJsonParserPush>
}
 8007d54:	e002      	b.n	8007d5c <FindSmStartHandler+0x42>
        parser->state = LWJSON_SM_ERROR;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	220c      	movs	r2, #12
 8007d5a:	745a      	strb	r2, [r3, #17]
}
 8007d5c:	bf00      	nop
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <FindSmObjectHandler>:

static void FindSmObjectHandler(LwJsonParser *parser) {
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]

    // Inicio de objeto. Se debe encontrar el incio del nombre '"'
    if (parser->p[0] == '"') {
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	2b22      	cmp	r3, #34	; 0x22
 8007d74:	d108      	bne.n	8007d88 <FindSmObjectHandler+0x24>
        parser->state = LWJSON_SM_NAME;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2202      	movs	r2, #2
 8007d7a:	745a      	strb	r2, [r3, #17]
        parser->lastName = &parser->p[1];
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	625a      	str	r2, [r3, #36]	; 0x24
        parser->state = LWJSON_SM_OBJECT_END;
        parser->p--;
    } else {
        parser->state = LWJSON_SM_ERROR;
    }
}
 8007d86:	e010      	b.n	8007daa <FindSmObjectHandler+0x46>
    } else if (parser->p[0] == '}') {
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	2b7d      	cmp	r3, #125	; 0x7d
 8007d90:	d108      	bne.n	8007da4 <FindSmObjectHandler+0x40>
        parser->state = LWJSON_SM_OBJECT_END;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2209      	movs	r2, #9
 8007d96:	745a      	strb	r2, [r3, #17]
        parser->p--;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9c:	1e5a      	subs	r2, r3, #1
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007da2:	e002      	b.n	8007daa <FindSmObjectHandler+0x46>
        parser->state = LWJSON_SM_ERROR;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	220c      	movs	r2, #12
 8007da8:	745a      	strb	r2, [r3, #17]
}
 8007daa:	bf00      	nop
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bc80      	pop	{r7}
 8007db2:	4770      	bx	lr

08007db4 <FindSmArrayHandler>:

static void FindSmArrayHandler(LwJsonParser *parser) {
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]

    if (parser->p[0] == ']') {
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	2b5d      	cmp	r3, #93	; 0x5d
 8007dc4:	d103      	bne.n	8007dce <FindSmArrayHandler+0x1a>
        parser->state = LWJSON_SM_ARRAY_END;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	220a      	movs	r2, #10
 8007dca:	745a      	strb	r2, [r3, #17]
 8007dcc:	e002      	b.n	8007dd4 <FindSmArrayHandler+0x20>
    } else {
        parser->state = LWJSON_SM_VALUE;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2204      	movs	r2, #4
 8007dd2:	745a      	strb	r2, [r3, #17]
    }
    parser->p--;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd8:	1e5a      	subs	r2, r3, #1
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007dde:	bf00      	nop
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bc80      	pop	{r7}
 8007de6:	4770      	bx	lr

08007de8 <FindSmNameHandler>:

static void FindSmNameHandler(LwJsonParser *parser) {
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
    uint32_t nameLen;

    while (parser->state == LWJSON_SM_NAME) {
 8007df0:	e056      	b.n	8007ea0 <FindSmNameHandler+0xb8>
        // Nombre. Puede encontrarse un car�cter v�lido o el fin de nombre
        if ((parser->p[0]) == '"') {
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	2b22      	cmp	r3, #34	; 0x22
 8007dfa:	d143      	bne.n	8007e84 <FindSmNameHandler+0x9c>
            parser->state = LWJSON_SM_NAME_END;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2203      	movs	r2, #3
 8007e00:	745a      	strb	r2, [r3, #17]
            if ((parser->depth == (parser->findDepth + 1)) && (parser->findDepth < parser->searchDepth)) {
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	695a      	ldr	r2, [r3, #20]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d147      	bne.n	8007ea0 <FindSmNameHandler+0xb8>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	699a      	ldr	r2, [r3, #24]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d241      	bcs.n	8007ea0 <FindSmNameHandler+0xb8>
                // Comprobar que las longitudes coinciden
                nameLen = parser->p - parser->lastName;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	60fb      	str	r3, [r7, #12]
                if (strlen(parser->path[parser->findDepth]) == nameLen) {
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7f8 fa04 	bl	8000244 <strlen>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d12d      	bne.n	8007ea0 <FindSmNameHandler+0xb8>
                    // Comprobar que las cadenas coinciden
                    if (strncmp(parser->path[parser->findDepth], parser->lastName, nameLen) == 0) {
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	6818      	ldr	r0, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	f000 fd66 	bl	800892a <strncmp>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d11d      	bne.n	8007ea0 <FindSmNameHandler+0xb8>
                        parser->findDepth++;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	1c5a      	adds	r2, r3, #1
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	619a      	str	r2, [r3, #24]
                        if (parser->findDepth == parser->searchDepth) {
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	699a      	ldr	r2, [r3, #24]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d112      	bne.n	8007ea0 <FindSmNameHandler+0xb8>
                            parser->searchValuePending = true;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2020 	strb.w	r2, [r3, #32]
 8007e82:	e00d      	b.n	8007ea0 <FindSmNameHandler+0xb8>
                        }
                    }
                }
            }
        } else if ((parser->p[0]) < 32) {
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	2b1f      	cmp	r3, #31
 8007e8c:	d803      	bhi.n	8007e96 <FindSmNameHandler+0xae>
            parser->state = LWJSON_SM_ERROR;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	220c      	movs	r2, #12
 8007e92:	745a      	strb	r2, [r3, #17]
 8007e94:	e004      	b.n	8007ea0 <FindSmNameHandler+0xb8>
        } else {
            parser->p++;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9a:	1c5a      	adds	r2, r3, #1
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	62da      	str	r2, [r3, #44]	; 0x2c
    while (parser->state == LWJSON_SM_NAME) {
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	7c5b      	ldrb	r3, [r3, #17]
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d0a4      	beq.n	8007df2 <FindSmNameHandler+0xa>
        }
    }
}
 8007ea8:	bf00      	nop
 8007eaa:	bf00      	nop
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <FindSmNameEndHandler>:

static void FindSmNameEndHandler(LwJsonParser *parser) {
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
    if((parser->p[0]) == ':') {
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	2b3a      	cmp	r3, #58	; 0x3a
 8007ec2:	d103      	bne.n	8007ecc <FindSmNameEndHandler+0x1a>
        parser->state = LWJSON_SM_VALUE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2204      	movs	r2, #4
 8007ec8:	745a      	strb	r2, [r3, #17]
    } else {
        parser->state = LWJSON_SM_ERROR;
    }
}
 8007eca:	e002      	b.n	8007ed2 <FindSmNameEndHandler+0x20>
        parser->state = LWJSON_SM_ERROR;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	220c      	movs	r2, #12
 8007ed0:	745a      	strb	r2, [r3, #17]
}
 8007ed2:	bf00      	nop
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bc80      	pop	{r7}
 8007eda:	4770      	bx	lr

08007edc <FindSmValueHandler>:

static void FindSmValueHandler(LwJsonParser *parser) {
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
    char currentChar;
    LwJsonValueType tempType;
    char findArrayString[10];

    // Guardar offset si es necesario
    if (parser->searchValuePending) {
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d008      	beq.n	8007f00 <FindSmValueHandler+0x24>
        parser->findResult->offset = (parser->p - parser->msg->string);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	1ad2      	subs	r2, r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efe:	601a      	str	r2, [r3, #0]
    }

    currentChar = parser->p[0];
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	75bb      	strb	r3, [r7, #22]

    // Valor. Varias opciones
    if (currentChar == '\"') {
 8007f08:	7dbb      	ldrb	r3, [r7, #22]
 8007f0a:	2b22      	cmp	r3, #34	; 0x22
 8007f0c:	d105      	bne.n	8007f1a <FindSmValueHandler+0x3e>
        parser->state = LWJSON_SM_STRING;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2206      	movs	r2, #6
 8007f12:	745a      	strb	r2, [r3, #17]
        tempType = LWJSON_VAL_STRING;
 8007f14:	2300      	movs	r3, #0
 8007f16:	75fb      	strb	r3, [r7, #23]
 8007f18:	e07f      	b.n	800801a <FindSmValueHandler+0x13e>
    } else if ((currentChar == '-') || ((currentChar >= '0') && (currentChar <='9'))) {
 8007f1a:	7dbb      	ldrb	r3, [r7, #22]
 8007f1c:	2b2d      	cmp	r3, #45	; 0x2d
 8007f1e:	d005      	beq.n	8007f2c <FindSmValueHandler+0x50>
 8007f20:	7dbb      	ldrb	r3, [r7, #22]
 8007f22:	2b2f      	cmp	r3, #47	; 0x2f
 8007f24:	d908      	bls.n	8007f38 <FindSmValueHandler+0x5c>
 8007f26:	7dbb      	ldrb	r3, [r7, #22]
 8007f28:	2b39      	cmp	r3, #57	; 0x39
 8007f2a:	d805      	bhi.n	8007f38 <FindSmValueHandler+0x5c>
        // S�lo soporta enteros
        parser->state = LWJSON_SM_NUMBER;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2208      	movs	r2, #8
 8007f30:	745a      	strb	r2, [r3, #17]
        tempType = LWJSON_VAL_NUMBER;
 8007f32:	2301      	movs	r3, #1
 8007f34:	75fb      	strb	r3, [r7, #23]
 8007f36:	e070      	b.n	800801a <FindSmValueHandler+0x13e>
    } else if (currentChar == '[') {
 8007f38:	7dbb      	ldrb	r3, [r7, #22]
 8007f3a:	2b5b      	cmp	r3, #91	; 0x5b
 8007f3c:	d133      	bne.n	8007fa6 <FindSmValueHandler+0xca>
        tempType = LWJSON_VAL_ARRAY;
 8007f3e:	2304      	movs	r3, #4
 8007f40:	75fb      	strb	r3, [r7, #23]
        parser->state = LWJSON_SM_ARRAY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2205      	movs	r2, #5
 8007f46:	745a      	strb	r2, [r3, #17]
        lwJsonParserPush(parser, LWJSON_PARENT_ARRAY);
 8007f48:	2101      	movs	r1, #1
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f9c3 	bl	80082d6 <lwJsonParserPush>
        if ((parser->depth == (parser->findDepth + 1)) && (parser->findDepth < parser->searchDepth)) {
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	695a      	ldr	r2, [r3, #20]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d15d      	bne.n	800801a <FindSmValueHandler+0x13e>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	699a      	ldr	r2, [r3, #24]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d257      	bcs.n	800801a <FindSmValueHandler+0x13e>
            // Comprobar si se busca este �ndice de array
            sprintf(findArrayString, "[%u]", parser->currentArrayIndex);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f6e:	f107 030c 	add.w	r3, r7, #12
 8007f72:	4934      	ldr	r1, [pc, #208]	; (8008044 <FindSmValueHandler+0x168>)
 8007f74:	4618      	mov	r0, r3
 8007f76:	f000 fc6d 	bl	8008854 <siprintf>
            if (strcmp(parser->path[parser->findDepth], findArrayString) == 0) {
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f107 020c 	add.w	r2, r7, #12
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7f8 f94e 	bl	8000230 <strcmp>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d13f      	bne.n	800801a <FindSmValueHandler+0x13e>
                parser->findDepth++;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	1c5a      	adds	r2, r3, #1
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	619a      	str	r2, [r3, #24]
 8007fa4:	e039      	b.n	800801a <FindSmValueHandler+0x13e>
            }
        }
    } else if (currentChar == '{') {
 8007fa6:	7dbb      	ldrb	r3, [r7, #22]
 8007fa8:	2b7b      	cmp	r3, #123	; 0x7b
 8007faa:	d109      	bne.n	8007fc0 <FindSmValueHandler+0xe4>
        tempType = LWJSON_VAL_OBJECT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	75fb      	strb	r3, [r7, #23]
        parser->state = LWJSON_SM_OBJECT;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	745a      	strb	r2, [r3, #17]
        lwJsonParserPush(parser, LWJSON_PARENT_OBJECT);
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f98c 	bl	80082d6 <lwJsonParserPush>
 8007fbe:	e02c      	b.n	800801a <FindSmValueHandler+0x13e>
    } else if (strncmp(parser->p, "true", strlen("true")) == 0) {
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	2204      	movs	r2, #4
 8007fc6:	4920      	ldr	r1, [pc, #128]	; (8008048 <FindSmValueHandler+0x16c>)
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 fcae 	bl	800892a <strncmp>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10a      	bne.n	8007fea <FindSmValueHandler+0x10e>
        tempType = LWJSON_VAL_BOOLEAN;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	75fb      	strb	r3, [r7, #23]
        parser->p += strlen("true") - 1;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fdc:	1cda      	adds	r2, r3, #3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	62da      	str	r2, [r3, #44]	; 0x2c
        parser->state = LWJSON_SM_VALUE_END;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2207      	movs	r2, #7
 8007fe6:	745a      	strb	r2, [r3, #17]
 8007fe8:	e017      	b.n	800801a <FindSmValueHandler+0x13e>
    } else if (strncmp(parser->p, "false", strlen("false")) == 0) {
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fee:	2205      	movs	r2, #5
 8007ff0:	4916      	ldr	r1, [pc, #88]	; (800804c <FindSmValueHandler+0x170>)
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 fc99 	bl	800892a <strncmp>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10a      	bne.n	8008014 <FindSmValueHandler+0x138>
        tempType = LWJSON_VAL_BOOLEAN;
 8007ffe:	2302      	movs	r3, #2
 8008000:	75fb      	strb	r3, [r7, #23]
        parser->p += strlen("false") - 1;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008006:	1d1a      	adds	r2, r3, #4
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	62da      	str	r2, [r3, #44]	; 0x2c
        parser->state = LWJSON_SM_VALUE_END;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2207      	movs	r2, #7
 8008010:	745a      	strb	r2, [r3, #17]
 8008012:	e002      	b.n	800801a <FindSmValueHandler+0x13e>
    } else {
        parser->state = LWJSON_SM_ERROR;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	220c      	movs	r2, #12
 8008018:	745a      	strb	r2, [r3, #17]
    }

    // Actualizar tipo e indicar fin
    if (parser->searchValuePending) {
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00b      	beq.n	800803c <FindSmValueHandler+0x160>
        parser->searchValuePending = false;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2020 	strb.w	r2, [r3, #32]
        parser->found = true;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        parser->findResult->type = tempType;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008038:	7dfa      	ldrb	r2, [r7, #23]
 800803a:	721a      	strb	r2, [r3, #8]
    }
}
 800803c:	bf00      	nop
 800803e:	3718      	adds	r7, #24
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	08009c6c 	.word	0x08009c6c
 8008048:	08009c5c 	.word	0x08009c5c
 800804c:	08009c64 	.word	0x08009c64

08008050 <FindSmStringHandler>:

static void FindSmStringHandler(LwJsonParser *parser) {
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
    // Valor string. Puede encontrarse un car�cter v�lido o el fin de nombre
    while (parser->state == LWJSON_SM_STRING) {
 8008058:	e016      	b.n	8008088 <FindSmStringHandler+0x38>
        if ((parser->p[0]) == '"') {
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b22      	cmp	r3, #34	; 0x22
 8008062:	d103      	bne.n	800806c <FindSmStringHandler+0x1c>
            parser->state = LWJSON_SM_VALUE_END;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2207      	movs	r2, #7
 8008068:	745a      	strb	r2, [r3, #17]
 800806a:	e00d      	b.n	8008088 <FindSmStringHandler+0x38>
        } else if ((parser->p[0]) < 32) {
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	2b1f      	cmp	r3, #31
 8008074:	d803      	bhi.n	800807e <FindSmStringHandler+0x2e>
            parser->state = LWJSON_SM_ERROR;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	220c      	movs	r2, #12
 800807a:	745a      	strb	r2, [r3, #17]
 800807c:	e004      	b.n	8008088 <FindSmStringHandler+0x38>
        } else {
            parser->p++;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008082:	1c5a      	adds	r2, r3, #1
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	62da      	str	r2, [r3, #44]	; 0x2c
    while (parser->state == LWJSON_SM_STRING) {
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	7c5b      	ldrb	r3, [r3, #17]
 800808c:	2b06      	cmp	r3, #6
 800808e:	d0e4      	beq.n	800805a <FindSmStringHandler+0xa>
        }
    }
}
 8008090:	bf00      	nop
 8008092:	bf00      	nop
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	bc80      	pop	{r7}
 800809a:	4770      	bx	lr

0800809c <FindSmNumberHandler>:

static void FindSmNumberHandler(LwJsonParser *parser) {
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
    while (parser->state == LWJSON_SM_NUMBER) {
 80080a4:	e017      	b.n	80080d6 <FindSmNumberHandler+0x3a>
        // S�lo se soportan enteros. Si no se encuentra un entero, se pasa directamente a VALUE_END
        if (((parser->p[0]) >= '0') && ((parser->p[0]) <= '9')) {
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	2b2f      	cmp	r3, #47	; 0x2f
 80080ae:	d90a      	bls.n	80080c6 <FindSmNumberHandler+0x2a>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	2b39      	cmp	r3, #57	; 0x39
 80080b8:	d805      	bhi.n	80080c6 <FindSmNumberHandler+0x2a>
            parser->p++;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080be:	1c5a      	adds	r2, r3, #1
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80080c4:	e007      	b.n	80080d6 <FindSmNumberHandler+0x3a>
        } else {
            parser->state = LWJSON_SM_VALUE_END;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2207      	movs	r2, #7
 80080ca:	745a      	strb	r2, [r3, #17]
            parser->p--;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d0:	1e5a      	subs	r2, r3, #1
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	62da      	str	r2, [r3, #44]	; 0x2c
    while (parser->state == LWJSON_SM_NUMBER) {
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	7c5b      	ldrb	r3, [r3, #17]
 80080da:	2b08      	cmp	r3, #8
 80080dc:	d0e3      	beq.n	80080a6 <FindSmNumberHandler+0xa>
        }
    }
}
 80080de:	bf00      	nop
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bc80      	pop	{r7}
 80080e8:	4770      	bx	lr
	...

080080ec <FindSmValueEndHandler>:

static void FindSmValueEndHandler(LwJsonParser *parser) {
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
    char findArrayString[10];
    char c;

    if (parser->found) {
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d017      	beq.n	800812e <FindSmValueEndHandler+0x42>
        if (parser->depth == parser->searchDepth) {
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	695a      	ldr	r2, [r3, #20]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	429a      	cmp	r2, r3
 8008108:	d111      	bne.n	800812e <FindSmValueEndHandler+0x42>
            parser->findResult->len = (parser->p - parser->msg->string) - parser->findResult->offset;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	4619      	mov	r1, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008122:	1a8a      	subs	r2, r1, r2
 8008124:	605a      	str	r2, [r3, #4]
            parser->found = false;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
    }

    // Sanity check
    if (parser->depth == 0) {
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d06f      	beq.n	8008216 <FindSmValueEndHandler+0x12a>
        return;
    }

    c = parser->stack[parser->depth - 1];
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	3b01      	subs	r3, #1
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	4413      	add	r3, r2
 8008140:	7a1b      	ldrb	r3, [r3, #8]
 8008142:	75fb      	strb	r3, [r7, #23]
    if (c == LWJSON_PARENT_OBJECT) {
 8008144:	7dfb      	ldrb	r3, [r7, #23]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d119      	bne.n	800817e <FindSmValueEndHandler+0x92>
        // Another attribute or object end accepted
        if ((*parser->p) == ',') {
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	2b2c      	cmp	r3, #44	; 0x2c
 8008152:	d103      	bne.n	800815c <FindSmValueEndHandler+0x70>
            parser->state = LWJSON_SM_OBJECT;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	745a      	strb	r2, [r3, #17]
 800815a:	e05d      	b.n	8008218 <FindSmValueEndHandler+0x12c>
        } else if((*parser->p) == '}') {
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	2b7d      	cmp	r3, #125	; 0x7d
 8008164:	d107      	bne.n	8008176 <FindSmValueEndHandler+0x8a>
            parser->state = LWJSON_SM_OBJECT_END;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2209      	movs	r2, #9
 800816a:	745a      	strb	r2, [r3, #17]
            lwJsonParserPop(parser, LWJSON_PARENT_OBJECT);
 800816c:	2100      	movs	r1, #0
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f8d4 	bl	800831c <lwJsonParserPop>
 8008174:	e050      	b.n	8008218 <FindSmValueEndHandler+0x12c>
        } else {
            parser->state = LWJSON_SM_ERROR;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	220c      	movs	r2, #12
 800817a:	745a      	strb	r2, [r3, #17]
 800817c:	e04c      	b.n	8008218 <FindSmValueEndHandler+0x12c>
        }
    } else if (c == LWJSON_PARENT_ARRAY) {
 800817e:	7dfb      	ldrb	r3, [r7, #23]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d149      	bne.n	8008218 <FindSmValueEndHandler+0x12c>
        // Another item or array end accepted
        if ((*parser->p) == ',') {
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	2b2c      	cmp	r3, #44	; 0x2c
 800818c:	d132      	bne.n	80081f4 <FindSmValueEndHandler+0x108>
            parser->state = LWJSON_SM_VALUE;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2204      	movs	r2, #4
 8008192:	745a      	strb	r2, [r3, #17]
            if ((parser->depth == (parser->findDepth + 1)) && (parser->findDepth < parser->searchDepth)) {
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	695a      	ldr	r2, [r3, #20]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	3301      	adds	r3, #1
 800819e:	429a      	cmp	r2, r3
 80081a0:	d13a      	bne.n	8008218 <FindSmValueEndHandler+0x12c>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	699a      	ldr	r2, [r3, #24]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d234      	bcs.n	8008218 <FindSmValueEndHandler+0x12c>
                // Update array search Index
                parser->currentArrayIndex++;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	629a      	str	r2, [r3, #40]	; 0x28
                // Comprobar si se busca este �ndice de array
                sprintf(findArrayString, "[%u]", parser->currentArrayIndex);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081bc:	f107 030c 	add.w	r3, r7, #12
 80081c0:	4917      	ldr	r1, [pc, #92]	; (8008220 <FindSmValueEndHandler+0x134>)
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 fb46 	bl	8008854 <siprintf>
                if (strcmp(parser->path[parser->findDepth], findArrayString) == 0) {
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	699b      	ldr	r3, [r3, #24]
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f107 020c 	add.w	r2, r7, #12
 80081da:	4611      	mov	r1, r2
 80081dc:	4618      	mov	r0, r3
 80081de:	f7f8 f827 	bl	8000230 <strcmp>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d117      	bne.n	8008218 <FindSmValueEndHandler+0x12c>
                    parser->findDepth++;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	1c5a      	adds	r2, r3, #1
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	619a      	str	r2, [r3, #24]
 80081f2:	e011      	b.n	8008218 <FindSmValueEndHandler+0x12c>
                }
            }
        } else if ((*parser->p) == ']') {
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	2b5d      	cmp	r3, #93	; 0x5d
 80081fc:	d107      	bne.n	800820e <FindSmValueEndHandler+0x122>
            parser->state = LWJSON_SM_ARRAY_END;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	220a      	movs	r2, #10
 8008202:	745a      	strb	r2, [r3, #17]
            lwJsonParserPop(parser, LWJSON_PARENT_ARRAY);
 8008204:	2101      	movs	r1, #1
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f888 	bl	800831c <lwJsonParserPop>
 800820c:	e004      	b.n	8008218 <FindSmValueEndHandler+0x12c>
        } else {
            parser->state = LWJSON_SM_ERROR;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	220c      	movs	r2, #12
 8008212:	745a      	strb	r2, [r3, #17]
 8008214:	e000      	b.n	8008218 <FindSmValueEndHandler+0x12c>
        return;
 8008216:	bf00      	nop
        }
    }
}
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	08009c6c 	.word	0x08009c6c

08008224 <FindSmLevelEndHandler>:

static void FindSmLevelEndHandler(LwJsonParser *parser) {
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
    if ((parser->findDepth < parser->searchDepth) && (parser->depth == parser->findDepth)) {
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	699a      	ldr	r2, [r3, #24]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	429a      	cmp	r2, r3
 8008236:	d208      	bcs.n	800824a <FindSmLevelEndHandler+0x26>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	695a      	ldr	r2, [r3, #20]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	429a      	cmp	r2, r3
 8008242:	d102      	bne.n	800824a <FindSmLevelEndHandler+0x26>
        // Start search again
        parser->findDepth = 0;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	619a      	str	r2, [r3, #24]
    }
    if(parser->found) {
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008250:	2b00      	cmp	r3, #0
 8008252:	d017      	beq.n	8008284 <FindSmLevelEndHandler+0x60>
        if(parser->depth == parser->searchDepth) {
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	695a      	ldr	r2, [r3, #20]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	429a      	cmp	r2, r3
 800825e:	d111      	bne.n	8008284 <FindSmLevelEndHandler+0x60>
            parser->findResult->len = (parser->p - parser->msg->string) - parser->findResult->offset;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	4619      	mov	r1, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008278:	1a8a      	subs	r2, r1, r2
 800827a:	605a      	str	r2, [r3, #4]
            parser->found = false;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
    }
    parser->p--;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008288:	1e5a      	subs	r2, r3, #1
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	62da      	str	r2, [r3, #44]	; 0x2c
    parser->state = LWJSON_SM_VALUE_END;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2207      	movs	r2, #7
 8008292:	745a      	strb	r2, [r3, #17]
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	bc80      	pop	{r7}
 800829c:	4770      	bx	lr

0800829e <lwJsonCalculatePathDepth>:

static uint32_t lwJsonCalculatePathDepth(const char **path) {
 800829e:	b480      	push	{r7}
 80082a0:	b085      	sub	sp, #20
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
    uint32_t result = 0;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60fb      	str	r3, [r7, #12]

    while (result <= LWJSON_DEPTH_MAX) {
 80082aa:	e009      	b.n	80082c0 <lwJsonCalculatePathDepth+0x22>
        if (path[result] == NULL) {
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	4413      	add	r3, r2
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d006      	beq.n	80082c8 <lwJsonCalculatePathDepth+0x2a>
            break;
        }
        result++;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3301      	adds	r3, #1
 80082be:	60fb      	str	r3, [r7, #12]
    while (result <= LWJSON_DEPTH_MAX) {
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2b08      	cmp	r3, #8
 80082c4:	d9f2      	bls.n	80082ac <lwJsonCalculatePathDepth+0xe>
 80082c6:	e000      	b.n	80082ca <lwJsonCalculatePathDepth+0x2c>
            break;
 80082c8:	bf00      	nop
    }

    return result;
 80082ca:	68fb      	ldr	r3, [r7, #12]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bc80      	pop	{r7}
 80082d4:	4770      	bx	lr

080082d6 <lwJsonParserPush>:

static void lwJsonParserPush(LwJsonParser *parser, LwJsonParentType parent) {
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	460b      	mov	r3, r1
 80082e0:	70fb      	strb	r3, [r7, #3]
    // Actualizar parser path
    parser->stack[parser->depth] = parent;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	4413      	add	r3, r2
 80082ea:	78fa      	ldrb	r2, [r7, #3]
 80082ec:	721a      	strb	r2, [r3, #8]
    parser->depth++;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	615a      	str	r2, [r3, #20]

    if (parent == LWJSON_PARENT_ARRAY) {
 80082f8:	78fb      	ldrb	r3, [r7, #3]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d102      	bne.n	8008304 <lwJsonParserPush+0x2e>
        parser->currentArrayIndex = 0;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (parser->depth > LWJSON_DEPTH_MAX) {
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	2b08      	cmp	r3, #8
 800830a:	d902      	bls.n	8008312 <lwJsonParserPush+0x3c>
        parser->state = LWJSON_SM_ERROR;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	220c      	movs	r2, #12
 8008310:	745a      	strb	r2, [r3, #17]
    }
}
 8008312:	bf00      	nop
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	bc80      	pop	{r7}
 800831a:	4770      	bx	lr

0800831c <lwJsonParserPop>:

static void lwJsonParserPop(LwJsonParser *parser, LwJsonParentType expectedParent) {
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	70fb      	strb	r3, [r7, #3]
    if (parser->depth == 0) {
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d102      	bne.n	8008336 <lwJsonParserPop+0x1a>
        parser->state = LWJSON_SM_ERROR;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	220c      	movs	r2, #12
 8008334:	745a      	strb	r2, [r3, #17]
    }
    parser->depth--;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	1e5a      	subs	r2, r3, #1
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	615a      	str	r2, [r3, #20]

    if (parser->stack[parser->depth] != expectedParent) {
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	695b      	ldr	r3, [r3, #20]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	4413      	add	r3, r2
 8008348:	7a1b      	ldrb	r3, [r3, #8]
 800834a:	78fa      	ldrb	r2, [r7, #3]
 800834c:	429a      	cmp	r2, r3
 800834e:	d003      	beq.n	8008358 <lwJsonParserPop+0x3c>
        parser->state = LWJSON_SM_ERROR;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	220c      	movs	r2, #12
 8008354:	745a      	strb	r2, [r3, #17]
    } else if (parser->depth == 0) {
        // End
        parser->state = LWJSON_SM_END;
    }
}
 8008356:	e006      	b.n	8008366 <lwJsonParserPop+0x4a>
    } else if (parser->depth == 0) {
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d102      	bne.n	8008366 <lwJsonParserPop+0x4a>
        parser->state = LWJSON_SM_END;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	220b      	movs	r2, #11
 8008364:	745a      	strb	r2, [r3, #17]
}
 8008366:	bf00      	nop
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	bc80      	pop	{r7}
 800836e:	4770      	bx	lr

08008370 <atoi>:
 8008370:	220a      	movs	r2, #10
 8008372:	2100      	movs	r1, #0
 8008374:	f000 bbce 	b.w	8008b14 <strtol>

08008378 <atol>:
 8008378:	220a      	movs	r2, #10
 800837a:	2100      	movs	r1, #0
 800837c:	f000 bbca 	b.w	8008b14 <strtol>

08008380 <__errno>:
 8008380:	4b01      	ldr	r3, [pc, #4]	; (8008388 <__errno+0x8>)
 8008382:	6818      	ldr	r0, [r3, #0]
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	20000060 	.word	0x20000060

0800838c <std>:
 800838c:	2300      	movs	r3, #0
 800838e:	b510      	push	{r4, lr}
 8008390:	4604      	mov	r4, r0
 8008392:	e9c0 3300 	strd	r3, r3, [r0]
 8008396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800839a:	6083      	str	r3, [r0, #8]
 800839c:	8181      	strh	r1, [r0, #12]
 800839e:	6643      	str	r3, [r0, #100]	; 0x64
 80083a0:	81c2      	strh	r2, [r0, #14]
 80083a2:	6183      	str	r3, [r0, #24]
 80083a4:	4619      	mov	r1, r3
 80083a6:	2208      	movs	r2, #8
 80083a8:	305c      	adds	r0, #92	; 0x5c
 80083aa:	f000 f92b 	bl	8008604 <memset>
 80083ae:	4b05      	ldr	r3, [pc, #20]	; (80083c4 <std+0x38>)
 80083b0:	6224      	str	r4, [r4, #32]
 80083b2:	6263      	str	r3, [r4, #36]	; 0x24
 80083b4:	4b04      	ldr	r3, [pc, #16]	; (80083c8 <std+0x3c>)
 80083b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80083b8:	4b04      	ldr	r3, [pc, #16]	; (80083cc <std+0x40>)
 80083ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083bc:	4b04      	ldr	r3, [pc, #16]	; (80083d0 <std+0x44>)
 80083be:	6323      	str	r3, [r4, #48]	; 0x30
 80083c0:	bd10      	pop	{r4, pc}
 80083c2:	bf00      	nop
 80083c4:	08008895 	.word	0x08008895
 80083c8:	080088b7 	.word	0x080088b7
 80083cc:	080088ef 	.word	0x080088ef
 80083d0:	08008913 	.word	0x08008913

080083d4 <_cleanup_r>:
 80083d4:	4901      	ldr	r1, [pc, #4]	; (80083dc <_cleanup_r+0x8>)
 80083d6:	f000 b8af 	b.w	8008538 <_fwalk_reent>
 80083da:	bf00      	nop
 80083dc:	08008cb5 	.word	0x08008cb5

080083e0 <__sfmoreglue>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	2568      	movs	r5, #104	; 0x68
 80083e4:	1e4a      	subs	r2, r1, #1
 80083e6:	4355      	muls	r5, r2
 80083e8:	460e      	mov	r6, r1
 80083ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083ee:	f000 f95d 	bl	80086ac <_malloc_r>
 80083f2:	4604      	mov	r4, r0
 80083f4:	b140      	cbz	r0, 8008408 <__sfmoreglue+0x28>
 80083f6:	2100      	movs	r1, #0
 80083f8:	e9c0 1600 	strd	r1, r6, [r0]
 80083fc:	300c      	adds	r0, #12
 80083fe:	60a0      	str	r0, [r4, #8]
 8008400:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008404:	f000 f8fe 	bl	8008604 <memset>
 8008408:	4620      	mov	r0, r4
 800840a:	bd70      	pop	{r4, r5, r6, pc}

0800840c <__sfp_lock_acquire>:
 800840c:	4801      	ldr	r0, [pc, #4]	; (8008414 <__sfp_lock_acquire+0x8>)
 800840e:	f000 b8d8 	b.w	80085c2 <__retarget_lock_acquire_recursive>
 8008412:	bf00      	nop
 8008414:	200027de 	.word	0x200027de

08008418 <__sfp_lock_release>:
 8008418:	4801      	ldr	r0, [pc, #4]	; (8008420 <__sfp_lock_release+0x8>)
 800841a:	f000 b8d3 	b.w	80085c4 <__retarget_lock_release_recursive>
 800841e:	bf00      	nop
 8008420:	200027de 	.word	0x200027de

08008424 <__sinit_lock_acquire>:
 8008424:	4801      	ldr	r0, [pc, #4]	; (800842c <__sinit_lock_acquire+0x8>)
 8008426:	f000 b8cc 	b.w	80085c2 <__retarget_lock_acquire_recursive>
 800842a:	bf00      	nop
 800842c:	200027d9 	.word	0x200027d9

08008430 <__sinit_lock_release>:
 8008430:	4801      	ldr	r0, [pc, #4]	; (8008438 <__sinit_lock_release+0x8>)
 8008432:	f000 b8c7 	b.w	80085c4 <__retarget_lock_release_recursive>
 8008436:	bf00      	nop
 8008438:	200027d9 	.word	0x200027d9

0800843c <__sinit>:
 800843c:	b510      	push	{r4, lr}
 800843e:	4604      	mov	r4, r0
 8008440:	f7ff fff0 	bl	8008424 <__sinit_lock_acquire>
 8008444:	69a3      	ldr	r3, [r4, #24]
 8008446:	b11b      	cbz	r3, 8008450 <__sinit+0x14>
 8008448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800844c:	f7ff bff0 	b.w	8008430 <__sinit_lock_release>
 8008450:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008454:	6523      	str	r3, [r4, #80]	; 0x50
 8008456:	4b13      	ldr	r3, [pc, #76]	; (80084a4 <__sinit+0x68>)
 8008458:	4a13      	ldr	r2, [pc, #76]	; (80084a8 <__sinit+0x6c>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	62a2      	str	r2, [r4, #40]	; 0x28
 800845e:	42a3      	cmp	r3, r4
 8008460:	bf08      	it	eq
 8008462:	2301      	moveq	r3, #1
 8008464:	4620      	mov	r0, r4
 8008466:	bf08      	it	eq
 8008468:	61a3      	streq	r3, [r4, #24]
 800846a:	f000 f81f 	bl	80084ac <__sfp>
 800846e:	6060      	str	r0, [r4, #4]
 8008470:	4620      	mov	r0, r4
 8008472:	f000 f81b 	bl	80084ac <__sfp>
 8008476:	60a0      	str	r0, [r4, #8]
 8008478:	4620      	mov	r0, r4
 800847a:	f000 f817 	bl	80084ac <__sfp>
 800847e:	2200      	movs	r2, #0
 8008480:	2104      	movs	r1, #4
 8008482:	60e0      	str	r0, [r4, #12]
 8008484:	6860      	ldr	r0, [r4, #4]
 8008486:	f7ff ff81 	bl	800838c <std>
 800848a:	2201      	movs	r2, #1
 800848c:	2109      	movs	r1, #9
 800848e:	68a0      	ldr	r0, [r4, #8]
 8008490:	f7ff ff7c 	bl	800838c <std>
 8008494:	2202      	movs	r2, #2
 8008496:	2112      	movs	r1, #18
 8008498:	68e0      	ldr	r0, [r4, #12]
 800849a:	f7ff ff77 	bl	800838c <std>
 800849e:	2301      	movs	r3, #1
 80084a0:	61a3      	str	r3, [r4, #24]
 80084a2:	e7d1      	b.n	8008448 <__sinit+0xc>
 80084a4:	08009d4c 	.word	0x08009d4c
 80084a8:	080083d5 	.word	0x080083d5

080084ac <__sfp>:
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	4607      	mov	r7, r0
 80084b0:	f7ff ffac 	bl	800840c <__sfp_lock_acquire>
 80084b4:	4b1e      	ldr	r3, [pc, #120]	; (8008530 <__sfp+0x84>)
 80084b6:	681e      	ldr	r6, [r3, #0]
 80084b8:	69b3      	ldr	r3, [r6, #24]
 80084ba:	b913      	cbnz	r3, 80084c2 <__sfp+0x16>
 80084bc:	4630      	mov	r0, r6
 80084be:	f7ff ffbd 	bl	800843c <__sinit>
 80084c2:	3648      	adds	r6, #72	; 0x48
 80084c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80084c8:	3b01      	subs	r3, #1
 80084ca:	d503      	bpl.n	80084d4 <__sfp+0x28>
 80084cc:	6833      	ldr	r3, [r6, #0]
 80084ce:	b30b      	cbz	r3, 8008514 <__sfp+0x68>
 80084d0:	6836      	ldr	r6, [r6, #0]
 80084d2:	e7f7      	b.n	80084c4 <__sfp+0x18>
 80084d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084d8:	b9d5      	cbnz	r5, 8008510 <__sfp+0x64>
 80084da:	4b16      	ldr	r3, [pc, #88]	; (8008534 <__sfp+0x88>)
 80084dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084e0:	60e3      	str	r3, [r4, #12]
 80084e2:	6665      	str	r5, [r4, #100]	; 0x64
 80084e4:	f000 f86c 	bl	80085c0 <__retarget_lock_init_recursive>
 80084e8:	f7ff ff96 	bl	8008418 <__sfp_lock_release>
 80084ec:	2208      	movs	r2, #8
 80084ee:	4629      	mov	r1, r5
 80084f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80084f8:	6025      	str	r5, [r4, #0]
 80084fa:	61a5      	str	r5, [r4, #24]
 80084fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008500:	f000 f880 	bl	8008604 <memset>
 8008504:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008508:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800850c:	4620      	mov	r0, r4
 800850e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008510:	3468      	adds	r4, #104	; 0x68
 8008512:	e7d9      	b.n	80084c8 <__sfp+0x1c>
 8008514:	2104      	movs	r1, #4
 8008516:	4638      	mov	r0, r7
 8008518:	f7ff ff62 	bl	80083e0 <__sfmoreglue>
 800851c:	4604      	mov	r4, r0
 800851e:	6030      	str	r0, [r6, #0]
 8008520:	2800      	cmp	r0, #0
 8008522:	d1d5      	bne.n	80084d0 <__sfp+0x24>
 8008524:	f7ff ff78 	bl	8008418 <__sfp_lock_release>
 8008528:	230c      	movs	r3, #12
 800852a:	603b      	str	r3, [r7, #0]
 800852c:	e7ee      	b.n	800850c <__sfp+0x60>
 800852e:	bf00      	nop
 8008530:	08009d4c 	.word	0x08009d4c
 8008534:	ffff0001 	.word	0xffff0001

08008538 <_fwalk_reent>:
 8008538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800853c:	4606      	mov	r6, r0
 800853e:	4688      	mov	r8, r1
 8008540:	2700      	movs	r7, #0
 8008542:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008546:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800854a:	f1b9 0901 	subs.w	r9, r9, #1
 800854e:	d505      	bpl.n	800855c <_fwalk_reent+0x24>
 8008550:	6824      	ldr	r4, [r4, #0]
 8008552:	2c00      	cmp	r4, #0
 8008554:	d1f7      	bne.n	8008546 <_fwalk_reent+0xe>
 8008556:	4638      	mov	r0, r7
 8008558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800855c:	89ab      	ldrh	r3, [r5, #12]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d907      	bls.n	8008572 <_fwalk_reent+0x3a>
 8008562:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008566:	3301      	adds	r3, #1
 8008568:	d003      	beq.n	8008572 <_fwalk_reent+0x3a>
 800856a:	4629      	mov	r1, r5
 800856c:	4630      	mov	r0, r6
 800856e:	47c0      	blx	r8
 8008570:	4307      	orrs	r7, r0
 8008572:	3568      	adds	r5, #104	; 0x68
 8008574:	e7e9      	b.n	800854a <_fwalk_reent+0x12>
	...

08008578 <__libc_init_array>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	2600      	movs	r6, #0
 800857c:	4d0c      	ldr	r5, [pc, #48]	; (80085b0 <__libc_init_array+0x38>)
 800857e:	4c0d      	ldr	r4, [pc, #52]	; (80085b4 <__libc_init_array+0x3c>)
 8008580:	1b64      	subs	r4, r4, r5
 8008582:	10a4      	asrs	r4, r4, #2
 8008584:	42a6      	cmp	r6, r4
 8008586:	d109      	bne.n	800859c <__libc_init_array+0x24>
 8008588:	f001 fa44 	bl	8009a14 <_init>
 800858c:	2600      	movs	r6, #0
 800858e:	4d0a      	ldr	r5, [pc, #40]	; (80085b8 <__libc_init_array+0x40>)
 8008590:	4c0a      	ldr	r4, [pc, #40]	; (80085bc <__libc_init_array+0x44>)
 8008592:	1b64      	subs	r4, r4, r5
 8008594:	10a4      	asrs	r4, r4, #2
 8008596:	42a6      	cmp	r6, r4
 8008598:	d105      	bne.n	80085a6 <__libc_init_array+0x2e>
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f855 3b04 	ldr.w	r3, [r5], #4
 80085a0:	4798      	blx	r3
 80085a2:	3601      	adds	r6, #1
 80085a4:	e7ee      	b.n	8008584 <__libc_init_array+0xc>
 80085a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085aa:	4798      	blx	r3
 80085ac:	3601      	adds	r6, #1
 80085ae:	e7f2      	b.n	8008596 <__libc_init_array+0x1e>
 80085b0:	08009f40 	.word	0x08009f40
 80085b4:	08009f40 	.word	0x08009f40
 80085b8:	08009f40 	.word	0x08009f40
 80085bc:	08009f44 	.word	0x08009f44

080085c0 <__retarget_lock_init_recursive>:
 80085c0:	4770      	bx	lr

080085c2 <__retarget_lock_acquire_recursive>:
 80085c2:	4770      	bx	lr

080085c4 <__retarget_lock_release_recursive>:
 80085c4:	4770      	bx	lr
	...

080085c8 <malloc>:
 80085c8:	4b02      	ldr	r3, [pc, #8]	; (80085d4 <malloc+0xc>)
 80085ca:	4601      	mov	r1, r0
 80085cc:	6818      	ldr	r0, [r3, #0]
 80085ce:	f000 b86d 	b.w	80086ac <_malloc_r>
 80085d2:	bf00      	nop
 80085d4:	20000060 	.word	0x20000060

080085d8 <free>:
 80085d8:	4b02      	ldr	r3, [pc, #8]	; (80085e4 <free+0xc>)
 80085da:	4601      	mov	r1, r0
 80085dc:	6818      	ldr	r0, [r3, #0]
 80085de:	f000 b819 	b.w	8008614 <_free_r>
 80085e2:	bf00      	nop
 80085e4:	20000060 	.word	0x20000060

080085e8 <memcpy>:
 80085e8:	440a      	add	r2, r1
 80085ea:	4291      	cmp	r1, r2
 80085ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80085f0:	d100      	bne.n	80085f4 <memcpy+0xc>
 80085f2:	4770      	bx	lr
 80085f4:	b510      	push	{r4, lr}
 80085f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085fa:	4291      	cmp	r1, r2
 80085fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008600:	d1f9      	bne.n	80085f6 <memcpy+0xe>
 8008602:	bd10      	pop	{r4, pc}

08008604 <memset>:
 8008604:	4603      	mov	r3, r0
 8008606:	4402      	add	r2, r0
 8008608:	4293      	cmp	r3, r2
 800860a:	d100      	bne.n	800860e <memset+0xa>
 800860c:	4770      	bx	lr
 800860e:	f803 1b01 	strb.w	r1, [r3], #1
 8008612:	e7f9      	b.n	8008608 <memset+0x4>

08008614 <_free_r>:
 8008614:	b538      	push	{r3, r4, r5, lr}
 8008616:	4605      	mov	r5, r0
 8008618:	2900      	cmp	r1, #0
 800861a:	d043      	beq.n	80086a4 <_free_r+0x90>
 800861c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008620:	1f0c      	subs	r4, r1, #4
 8008622:	2b00      	cmp	r3, #0
 8008624:	bfb8      	it	lt
 8008626:	18e4      	addlt	r4, r4, r3
 8008628:	f000 fba4 	bl	8008d74 <__malloc_lock>
 800862c:	4a1e      	ldr	r2, [pc, #120]	; (80086a8 <_free_r+0x94>)
 800862e:	6813      	ldr	r3, [r2, #0]
 8008630:	4610      	mov	r0, r2
 8008632:	b933      	cbnz	r3, 8008642 <_free_r+0x2e>
 8008634:	6063      	str	r3, [r4, #4]
 8008636:	6014      	str	r4, [r2, #0]
 8008638:	4628      	mov	r0, r5
 800863a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800863e:	f000 bb9f 	b.w	8008d80 <__malloc_unlock>
 8008642:	42a3      	cmp	r3, r4
 8008644:	d90a      	bls.n	800865c <_free_r+0x48>
 8008646:	6821      	ldr	r1, [r4, #0]
 8008648:	1862      	adds	r2, r4, r1
 800864a:	4293      	cmp	r3, r2
 800864c:	bf01      	itttt	eq
 800864e:	681a      	ldreq	r2, [r3, #0]
 8008650:	685b      	ldreq	r3, [r3, #4]
 8008652:	1852      	addeq	r2, r2, r1
 8008654:	6022      	streq	r2, [r4, #0]
 8008656:	6063      	str	r3, [r4, #4]
 8008658:	6004      	str	r4, [r0, #0]
 800865a:	e7ed      	b.n	8008638 <_free_r+0x24>
 800865c:	461a      	mov	r2, r3
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	b10b      	cbz	r3, 8008666 <_free_r+0x52>
 8008662:	42a3      	cmp	r3, r4
 8008664:	d9fa      	bls.n	800865c <_free_r+0x48>
 8008666:	6811      	ldr	r1, [r2, #0]
 8008668:	1850      	adds	r0, r2, r1
 800866a:	42a0      	cmp	r0, r4
 800866c:	d10b      	bne.n	8008686 <_free_r+0x72>
 800866e:	6820      	ldr	r0, [r4, #0]
 8008670:	4401      	add	r1, r0
 8008672:	1850      	adds	r0, r2, r1
 8008674:	4283      	cmp	r3, r0
 8008676:	6011      	str	r1, [r2, #0]
 8008678:	d1de      	bne.n	8008638 <_free_r+0x24>
 800867a:	6818      	ldr	r0, [r3, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	4401      	add	r1, r0
 8008680:	6011      	str	r1, [r2, #0]
 8008682:	6053      	str	r3, [r2, #4]
 8008684:	e7d8      	b.n	8008638 <_free_r+0x24>
 8008686:	d902      	bls.n	800868e <_free_r+0x7a>
 8008688:	230c      	movs	r3, #12
 800868a:	602b      	str	r3, [r5, #0]
 800868c:	e7d4      	b.n	8008638 <_free_r+0x24>
 800868e:	6820      	ldr	r0, [r4, #0]
 8008690:	1821      	adds	r1, r4, r0
 8008692:	428b      	cmp	r3, r1
 8008694:	bf01      	itttt	eq
 8008696:	6819      	ldreq	r1, [r3, #0]
 8008698:	685b      	ldreq	r3, [r3, #4]
 800869a:	1809      	addeq	r1, r1, r0
 800869c:	6021      	streq	r1, [r4, #0]
 800869e:	6063      	str	r3, [r4, #4]
 80086a0:	6054      	str	r4, [r2, #4]
 80086a2:	e7c9      	b.n	8008638 <_free_r+0x24>
 80086a4:	bd38      	pop	{r3, r4, r5, pc}
 80086a6:	bf00      	nop
 80086a8:	20002484 	.word	0x20002484

080086ac <_malloc_r>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	1ccd      	adds	r5, r1, #3
 80086b0:	f025 0503 	bic.w	r5, r5, #3
 80086b4:	3508      	adds	r5, #8
 80086b6:	2d0c      	cmp	r5, #12
 80086b8:	bf38      	it	cc
 80086ba:	250c      	movcc	r5, #12
 80086bc:	2d00      	cmp	r5, #0
 80086be:	4606      	mov	r6, r0
 80086c0:	db01      	blt.n	80086c6 <_malloc_r+0x1a>
 80086c2:	42a9      	cmp	r1, r5
 80086c4:	d903      	bls.n	80086ce <_malloc_r+0x22>
 80086c6:	230c      	movs	r3, #12
 80086c8:	6033      	str	r3, [r6, #0]
 80086ca:	2000      	movs	r0, #0
 80086cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086ce:	f000 fb51 	bl	8008d74 <__malloc_lock>
 80086d2:	4921      	ldr	r1, [pc, #132]	; (8008758 <_malloc_r+0xac>)
 80086d4:	680a      	ldr	r2, [r1, #0]
 80086d6:	4614      	mov	r4, r2
 80086d8:	b99c      	cbnz	r4, 8008702 <_malloc_r+0x56>
 80086da:	4f20      	ldr	r7, [pc, #128]	; (800875c <_malloc_r+0xb0>)
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	b923      	cbnz	r3, 80086ea <_malloc_r+0x3e>
 80086e0:	4621      	mov	r1, r4
 80086e2:	4630      	mov	r0, r6
 80086e4:	f000 f8a6 	bl	8008834 <_sbrk_r>
 80086e8:	6038      	str	r0, [r7, #0]
 80086ea:	4629      	mov	r1, r5
 80086ec:	4630      	mov	r0, r6
 80086ee:	f000 f8a1 	bl	8008834 <_sbrk_r>
 80086f2:	1c43      	adds	r3, r0, #1
 80086f4:	d123      	bne.n	800873e <_malloc_r+0x92>
 80086f6:	230c      	movs	r3, #12
 80086f8:	4630      	mov	r0, r6
 80086fa:	6033      	str	r3, [r6, #0]
 80086fc:	f000 fb40 	bl	8008d80 <__malloc_unlock>
 8008700:	e7e3      	b.n	80086ca <_malloc_r+0x1e>
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	1b5b      	subs	r3, r3, r5
 8008706:	d417      	bmi.n	8008738 <_malloc_r+0x8c>
 8008708:	2b0b      	cmp	r3, #11
 800870a:	d903      	bls.n	8008714 <_malloc_r+0x68>
 800870c:	6023      	str	r3, [r4, #0]
 800870e:	441c      	add	r4, r3
 8008710:	6025      	str	r5, [r4, #0]
 8008712:	e004      	b.n	800871e <_malloc_r+0x72>
 8008714:	6863      	ldr	r3, [r4, #4]
 8008716:	42a2      	cmp	r2, r4
 8008718:	bf0c      	ite	eq
 800871a:	600b      	streq	r3, [r1, #0]
 800871c:	6053      	strne	r3, [r2, #4]
 800871e:	4630      	mov	r0, r6
 8008720:	f000 fb2e 	bl	8008d80 <__malloc_unlock>
 8008724:	f104 000b 	add.w	r0, r4, #11
 8008728:	1d23      	adds	r3, r4, #4
 800872a:	f020 0007 	bic.w	r0, r0, #7
 800872e:	1ac2      	subs	r2, r0, r3
 8008730:	d0cc      	beq.n	80086cc <_malloc_r+0x20>
 8008732:	1a1b      	subs	r3, r3, r0
 8008734:	50a3      	str	r3, [r4, r2]
 8008736:	e7c9      	b.n	80086cc <_malloc_r+0x20>
 8008738:	4622      	mov	r2, r4
 800873a:	6864      	ldr	r4, [r4, #4]
 800873c:	e7cc      	b.n	80086d8 <_malloc_r+0x2c>
 800873e:	1cc4      	adds	r4, r0, #3
 8008740:	f024 0403 	bic.w	r4, r4, #3
 8008744:	42a0      	cmp	r0, r4
 8008746:	d0e3      	beq.n	8008710 <_malloc_r+0x64>
 8008748:	1a21      	subs	r1, r4, r0
 800874a:	4630      	mov	r0, r6
 800874c:	f000 f872 	bl	8008834 <_sbrk_r>
 8008750:	3001      	adds	r0, #1
 8008752:	d1dd      	bne.n	8008710 <_malloc_r+0x64>
 8008754:	e7cf      	b.n	80086f6 <_malloc_r+0x4a>
 8008756:	bf00      	nop
 8008758:	20002484 	.word	0x20002484
 800875c:	20002488 	.word	0x20002488

08008760 <cleanup_glue>:
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	460c      	mov	r4, r1
 8008764:	6809      	ldr	r1, [r1, #0]
 8008766:	4605      	mov	r5, r0
 8008768:	b109      	cbz	r1, 800876e <cleanup_glue+0xe>
 800876a:	f7ff fff9 	bl	8008760 <cleanup_glue>
 800876e:	4621      	mov	r1, r4
 8008770:	4628      	mov	r0, r5
 8008772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008776:	f7ff bf4d 	b.w	8008614 <_free_r>
	...

0800877c <_reclaim_reent>:
 800877c:	4b2c      	ldr	r3, [pc, #176]	; (8008830 <_reclaim_reent+0xb4>)
 800877e:	b570      	push	{r4, r5, r6, lr}
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4604      	mov	r4, r0
 8008784:	4283      	cmp	r3, r0
 8008786:	d051      	beq.n	800882c <_reclaim_reent+0xb0>
 8008788:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800878a:	b143      	cbz	r3, 800879e <_reclaim_reent+0x22>
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d14a      	bne.n	8008828 <_reclaim_reent+0xac>
 8008792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008794:	6819      	ldr	r1, [r3, #0]
 8008796:	b111      	cbz	r1, 800879e <_reclaim_reent+0x22>
 8008798:	4620      	mov	r0, r4
 800879a:	f7ff ff3b 	bl	8008614 <_free_r>
 800879e:	6961      	ldr	r1, [r4, #20]
 80087a0:	b111      	cbz	r1, 80087a8 <_reclaim_reent+0x2c>
 80087a2:	4620      	mov	r0, r4
 80087a4:	f7ff ff36 	bl	8008614 <_free_r>
 80087a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80087aa:	b111      	cbz	r1, 80087b2 <_reclaim_reent+0x36>
 80087ac:	4620      	mov	r0, r4
 80087ae:	f7ff ff31 	bl	8008614 <_free_r>
 80087b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80087b4:	b111      	cbz	r1, 80087bc <_reclaim_reent+0x40>
 80087b6:	4620      	mov	r0, r4
 80087b8:	f7ff ff2c 	bl	8008614 <_free_r>
 80087bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80087be:	b111      	cbz	r1, 80087c6 <_reclaim_reent+0x4a>
 80087c0:	4620      	mov	r0, r4
 80087c2:	f7ff ff27 	bl	8008614 <_free_r>
 80087c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80087c8:	b111      	cbz	r1, 80087d0 <_reclaim_reent+0x54>
 80087ca:	4620      	mov	r0, r4
 80087cc:	f7ff ff22 	bl	8008614 <_free_r>
 80087d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80087d2:	b111      	cbz	r1, 80087da <_reclaim_reent+0x5e>
 80087d4:	4620      	mov	r0, r4
 80087d6:	f7ff ff1d 	bl	8008614 <_free_r>
 80087da:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80087dc:	b111      	cbz	r1, 80087e4 <_reclaim_reent+0x68>
 80087de:	4620      	mov	r0, r4
 80087e0:	f7ff ff18 	bl	8008614 <_free_r>
 80087e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087e6:	b111      	cbz	r1, 80087ee <_reclaim_reent+0x72>
 80087e8:	4620      	mov	r0, r4
 80087ea:	f7ff ff13 	bl	8008614 <_free_r>
 80087ee:	69a3      	ldr	r3, [r4, #24]
 80087f0:	b1e3      	cbz	r3, 800882c <_reclaim_reent+0xb0>
 80087f2:	4620      	mov	r0, r4
 80087f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80087f6:	4798      	blx	r3
 80087f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80087fa:	b1b9      	cbz	r1, 800882c <_reclaim_reent+0xb0>
 80087fc:	4620      	mov	r0, r4
 80087fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008802:	f7ff bfad 	b.w	8008760 <cleanup_glue>
 8008806:	5949      	ldr	r1, [r1, r5]
 8008808:	b941      	cbnz	r1, 800881c <_reclaim_reent+0xa0>
 800880a:	3504      	adds	r5, #4
 800880c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800880e:	2d80      	cmp	r5, #128	; 0x80
 8008810:	68d9      	ldr	r1, [r3, #12]
 8008812:	d1f8      	bne.n	8008806 <_reclaim_reent+0x8a>
 8008814:	4620      	mov	r0, r4
 8008816:	f7ff fefd 	bl	8008614 <_free_r>
 800881a:	e7ba      	b.n	8008792 <_reclaim_reent+0x16>
 800881c:	680e      	ldr	r6, [r1, #0]
 800881e:	4620      	mov	r0, r4
 8008820:	f7ff fef8 	bl	8008614 <_free_r>
 8008824:	4631      	mov	r1, r6
 8008826:	e7ef      	b.n	8008808 <_reclaim_reent+0x8c>
 8008828:	2500      	movs	r5, #0
 800882a:	e7ef      	b.n	800880c <_reclaim_reent+0x90>
 800882c:	bd70      	pop	{r4, r5, r6, pc}
 800882e:	bf00      	nop
 8008830:	20000060 	.word	0x20000060

08008834 <_sbrk_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	2300      	movs	r3, #0
 8008838:	4d05      	ldr	r5, [pc, #20]	; (8008850 <_sbrk_r+0x1c>)
 800883a:	4604      	mov	r4, r0
 800883c:	4608      	mov	r0, r1
 800883e:	602b      	str	r3, [r5, #0]
 8008840:	f7f9 fa56 	bl	8001cf0 <_sbrk>
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d102      	bne.n	800884e <_sbrk_r+0x1a>
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	b103      	cbz	r3, 800884e <_sbrk_r+0x1a>
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	200027e0 	.word	0x200027e0

08008854 <siprintf>:
 8008854:	b40e      	push	{r1, r2, r3}
 8008856:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800885a:	b500      	push	{lr}
 800885c:	b09c      	sub	sp, #112	; 0x70
 800885e:	ab1d      	add	r3, sp, #116	; 0x74
 8008860:	9002      	str	r0, [sp, #8]
 8008862:	9006      	str	r0, [sp, #24]
 8008864:	9107      	str	r1, [sp, #28]
 8008866:	9104      	str	r1, [sp, #16]
 8008868:	4808      	ldr	r0, [pc, #32]	; (800888c <siprintf+0x38>)
 800886a:	4909      	ldr	r1, [pc, #36]	; (8008890 <siprintf+0x3c>)
 800886c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008870:	9105      	str	r1, [sp, #20]
 8008872:	6800      	ldr	r0, [r0, #0]
 8008874:	a902      	add	r1, sp, #8
 8008876:	9301      	str	r3, [sp, #4]
 8008878:	f000 fae4 	bl	8008e44 <_svfiprintf_r>
 800887c:	2200      	movs	r2, #0
 800887e:	9b02      	ldr	r3, [sp, #8]
 8008880:	701a      	strb	r2, [r3, #0]
 8008882:	b01c      	add	sp, #112	; 0x70
 8008884:	f85d eb04 	ldr.w	lr, [sp], #4
 8008888:	b003      	add	sp, #12
 800888a:	4770      	bx	lr
 800888c:	20000060 	.word	0x20000060
 8008890:	ffff0208 	.word	0xffff0208

08008894 <__sread>:
 8008894:	b510      	push	{r4, lr}
 8008896:	460c      	mov	r4, r1
 8008898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800889c:	f000 fec0 	bl	8009620 <_read_r>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	bfab      	itete	ge
 80088a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088a6:	89a3      	ldrhlt	r3, [r4, #12]
 80088a8:	181b      	addge	r3, r3, r0
 80088aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088ae:	bfac      	ite	ge
 80088b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80088b2:	81a3      	strhlt	r3, [r4, #12]
 80088b4:	bd10      	pop	{r4, pc}

080088b6 <__swrite>:
 80088b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ba:	461f      	mov	r7, r3
 80088bc:	898b      	ldrh	r3, [r1, #12]
 80088be:	4605      	mov	r5, r0
 80088c0:	05db      	lsls	r3, r3, #23
 80088c2:	460c      	mov	r4, r1
 80088c4:	4616      	mov	r6, r2
 80088c6:	d505      	bpl.n	80088d4 <__swrite+0x1e>
 80088c8:	2302      	movs	r3, #2
 80088ca:	2200      	movs	r2, #0
 80088cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d0:	f000 fa3e 	bl	8008d50 <_lseek_r>
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	4632      	mov	r2, r6
 80088d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088dc:	81a3      	strh	r3, [r4, #12]
 80088de:	4628      	mov	r0, r5
 80088e0:	463b      	mov	r3, r7
 80088e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088ea:	f000 b91d 	b.w	8008b28 <_write_r>

080088ee <__sseek>:
 80088ee:	b510      	push	{r4, lr}
 80088f0:	460c      	mov	r4, r1
 80088f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f6:	f000 fa2b 	bl	8008d50 <_lseek_r>
 80088fa:	1c43      	adds	r3, r0, #1
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	bf15      	itete	ne
 8008900:	6560      	strne	r0, [r4, #84]	; 0x54
 8008902:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008906:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800890a:	81a3      	strheq	r3, [r4, #12]
 800890c:	bf18      	it	ne
 800890e:	81a3      	strhne	r3, [r4, #12]
 8008910:	bd10      	pop	{r4, pc}

08008912 <__sclose>:
 8008912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008916:	f000 b937 	b.w	8008b88 <_close_r>

0800891a <strcpy>:
 800891a:	4603      	mov	r3, r0
 800891c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008920:	f803 2b01 	strb.w	r2, [r3], #1
 8008924:	2a00      	cmp	r2, #0
 8008926:	d1f9      	bne.n	800891c <strcpy+0x2>
 8008928:	4770      	bx	lr

0800892a <strncmp>:
 800892a:	b510      	push	{r4, lr}
 800892c:	b16a      	cbz	r2, 800894a <strncmp+0x20>
 800892e:	3901      	subs	r1, #1
 8008930:	1884      	adds	r4, r0, r2
 8008932:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008936:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800893a:	4293      	cmp	r3, r2
 800893c:	d103      	bne.n	8008946 <strncmp+0x1c>
 800893e:	42a0      	cmp	r0, r4
 8008940:	d001      	beq.n	8008946 <strncmp+0x1c>
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1f5      	bne.n	8008932 <strncmp+0x8>
 8008946:	1a98      	subs	r0, r3, r2
 8008948:	bd10      	pop	{r4, pc}
 800894a:	4610      	mov	r0, r2
 800894c:	e7fc      	b.n	8008948 <strncmp+0x1e>
	...

08008950 <strtok>:
 8008950:	4b16      	ldr	r3, [pc, #88]	; (80089ac <strtok+0x5c>)
 8008952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008956:	681f      	ldr	r7, [r3, #0]
 8008958:	4605      	mov	r5, r0
 800895a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800895c:	460e      	mov	r6, r1
 800895e:	b9ec      	cbnz	r4, 800899c <strtok+0x4c>
 8008960:	2050      	movs	r0, #80	; 0x50
 8008962:	f7ff fe31 	bl	80085c8 <malloc>
 8008966:	4602      	mov	r2, r0
 8008968:	65b8      	str	r0, [r7, #88]	; 0x58
 800896a:	b920      	cbnz	r0, 8008976 <strtok+0x26>
 800896c:	2157      	movs	r1, #87	; 0x57
 800896e:	4b10      	ldr	r3, [pc, #64]	; (80089b0 <strtok+0x60>)
 8008970:	4810      	ldr	r0, [pc, #64]	; (80089b4 <strtok+0x64>)
 8008972:	f000 f8eb 	bl	8008b4c <__assert_func>
 8008976:	e9c0 4400 	strd	r4, r4, [r0]
 800897a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800897e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008982:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008986:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800898a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800898e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008992:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008996:	6184      	str	r4, [r0, #24]
 8008998:	7704      	strb	r4, [r0, #28]
 800899a:	6244      	str	r4, [r0, #36]	; 0x24
 800899c:	4631      	mov	r1, r6
 800899e:	4628      	mov	r0, r5
 80089a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089a2:	2301      	movs	r3, #1
 80089a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089a8:	f000 b806 	b.w	80089b8 <__strtok_r>
 80089ac:	20000060 	.word	0x20000060
 80089b0:	08009d50 	.word	0x08009d50
 80089b4:	08009d67 	.word	0x08009d67

080089b8 <__strtok_r>:
 80089b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ba:	b908      	cbnz	r0, 80089c0 <__strtok_r+0x8>
 80089bc:	6810      	ldr	r0, [r2, #0]
 80089be:	b188      	cbz	r0, 80089e4 <__strtok_r+0x2c>
 80089c0:	4604      	mov	r4, r0
 80089c2:	460f      	mov	r7, r1
 80089c4:	4620      	mov	r0, r4
 80089c6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80089ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 80089ce:	b91e      	cbnz	r6, 80089d8 <__strtok_r+0x20>
 80089d0:	b965      	cbnz	r5, 80089ec <__strtok_r+0x34>
 80089d2:	4628      	mov	r0, r5
 80089d4:	6015      	str	r5, [r2, #0]
 80089d6:	e005      	b.n	80089e4 <__strtok_r+0x2c>
 80089d8:	42b5      	cmp	r5, r6
 80089da:	d1f6      	bne.n	80089ca <__strtok_r+0x12>
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1f0      	bne.n	80089c2 <__strtok_r+0xa>
 80089e0:	6014      	str	r4, [r2, #0]
 80089e2:	7003      	strb	r3, [r0, #0]
 80089e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089e6:	461c      	mov	r4, r3
 80089e8:	e00c      	b.n	8008a04 <__strtok_r+0x4c>
 80089ea:	b915      	cbnz	r5, 80089f2 <__strtok_r+0x3a>
 80089ec:	460e      	mov	r6, r1
 80089ee:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089f2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80089f6:	42ab      	cmp	r3, r5
 80089f8:	d1f7      	bne.n	80089ea <__strtok_r+0x32>
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d0f3      	beq.n	80089e6 <__strtok_r+0x2e>
 80089fe:	2300      	movs	r3, #0
 8008a00:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008a04:	6014      	str	r4, [r2, #0]
 8008a06:	e7ed      	b.n	80089e4 <__strtok_r+0x2c>

08008a08 <_strtol_l.isra.0>:
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a0e:	4686      	mov	lr, r0
 8008a10:	d001      	beq.n	8008a16 <_strtol_l.isra.0+0xe>
 8008a12:	2b24      	cmp	r3, #36	; 0x24
 8008a14:	d906      	bls.n	8008a24 <_strtol_l.isra.0+0x1c>
 8008a16:	f7ff fcb3 	bl	8008380 <__errno>
 8008a1a:	2316      	movs	r3, #22
 8008a1c:	6003      	str	r3, [r0, #0]
 8008a1e:	2000      	movs	r0, #0
 8008a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a24:	468c      	mov	ip, r1
 8008a26:	4e3a      	ldr	r6, [pc, #232]	; (8008b10 <_strtol_l.isra.0+0x108>)
 8008a28:	4660      	mov	r0, ip
 8008a2a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008a2e:	5da5      	ldrb	r5, [r4, r6]
 8008a30:	f015 0508 	ands.w	r5, r5, #8
 8008a34:	d1f8      	bne.n	8008a28 <_strtol_l.isra.0+0x20>
 8008a36:	2c2d      	cmp	r4, #45	; 0x2d
 8008a38:	d133      	bne.n	8008aa2 <_strtol_l.isra.0+0x9a>
 8008a3a:	f04f 0801 	mov.w	r8, #1
 8008a3e:	f89c 4000 	ldrb.w	r4, [ip]
 8008a42:	f100 0c02 	add.w	ip, r0, #2
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d05d      	beq.n	8008b06 <_strtol_l.isra.0+0xfe>
 8008a4a:	2b10      	cmp	r3, #16
 8008a4c:	d10c      	bne.n	8008a68 <_strtol_l.isra.0+0x60>
 8008a4e:	2c30      	cmp	r4, #48	; 0x30
 8008a50:	d10a      	bne.n	8008a68 <_strtol_l.isra.0+0x60>
 8008a52:	f89c 0000 	ldrb.w	r0, [ip]
 8008a56:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008a5a:	2858      	cmp	r0, #88	; 0x58
 8008a5c:	d14e      	bne.n	8008afc <_strtol_l.isra.0+0xf4>
 8008a5e:	2310      	movs	r3, #16
 8008a60:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8008a64:	f10c 0c02 	add.w	ip, ip, #2
 8008a68:	2500      	movs	r5, #0
 8008a6a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8008a6e:	3f01      	subs	r7, #1
 8008a70:	fbb7 f9f3 	udiv	r9, r7, r3
 8008a74:	4628      	mov	r0, r5
 8008a76:	fb03 7a19 	mls	sl, r3, r9, r7
 8008a7a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8008a7e:	2e09      	cmp	r6, #9
 8008a80:	d818      	bhi.n	8008ab4 <_strtol_l.isra.0+0xac>
 8008a82:	4634      	mov	r4, r6
 8008a84:	42a3      	cmp	r3, r4
 8008a86:	dd24      	ble.n	8008ad2 <_strtol_l.isra.0+0xca>
 8008a88:	2d00      	cmp	r5, #0
 8008a8a:	db1f      	blt.n	8008acc <_strtol_l.isra.0+0xc4>
 8008a8c:	4581      	cmp	r9, r0
 8008a8e:	d31d      	bcc.n	8008acc <_strtol_l.isra.0+0xc4>
 8008a90:	d101      	bne.n	8008a96 <_strtol_l.isra.0+0x8e>
 8008a92:	45a2      	cmp	sl, r4
 8008a94:	db1a      	blt.n	8008acc <_strtol_l.isra.0+0xc4>
 8008a96:	2501      	movs	r5, #1
 8008a98:	fb00 4003 	mla	r0, r0, r3, r4
 8008a9c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008aa0:	e7eb      	b.n	8008a7a <_strtol_l.isra.0+0x72>
 8008aa2:	2c2b      	cmp	r4, #43	; 0x2b
 8008aa4:	bf08      	it	eq
 8008aa6:	f89c 4000 	ldrbeq.w	r4, [ip]
 8008aaa:	46a8      	mov	r8, r5
 8008aac:	bf08      	it	eq
 8008aae:	f100 0c02 	addeq.w	ip, r0, #2
 8008ab2:	e7c8      	b.n	8008a46 <_strtol_l.isra.0+0x3e>
 8008ab4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8008ab8:	2e19      	cmp	r6, #25
 8008aba:	d801      	bhi.n	8008ac0 <_strtol_l.isra.0+0xb8>
 8008abc:	3c37      	subs	r4, #55	; 0x37
 8008abe:	e7e1      	b.n	8008a84 <_strtol_l.isra.0+0x7c>
 8008ac0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8008ac4:	2e19      	cmp	r6, #25
 8008ac6:	d804      	bhi.n	8008ad2 <_strtol_l.isra.0+0xca>
 8008ac8:	3c57      	subs	r4, #87	; 0x57
 8008aca:	e7db      	b.n	8008a84 <_strtol_l.isra.0+0x7c>
 8008acc:	f04f 35ff 	mov.w	r5, #4294967295
 8008ad0:	e7e4      	b.n	8008a9c <_strtol_l.isra.0+0x94>
 8008ad2:	2d00      	cmp	r5, #0
 8008ad4:	da08      	bge.n	8008ae8 <_strtol_l.isra.0+0xe0>
 8008ad6:	2322      	movs	r3, #34	; 0x22
 8008ad8:	4638      	mov	r0, r7
 8008ada:	f8ce 3000 	str.w	r3, [lr]
 8008ade:	2a00      	cmp	r2, #0
 8008ae0:	d09e      	beq.n	8008a20 <_strtol_l.isra.0+0x18>
 8008ae2:	f10c 31ff 	add.w	r1, ip, #4294967295
 8008ae6:	e007      	b.n	8008af8 <_strtol_l.isra.0+0xf0>
 8008ae8:	f1b8 0f00 	cmp.w	r8, #0
 8008aec:	d000      	beq.n	8008af0 <_strtol_l.isra.0+0xe8>
 8008aee:	4240      	negs	r0, r0
 8008af0:	2a00      	cmp	r2, #0
 8008af2:	d095      	beq.n	8008a20 <_strtol_l.isra.0+0x18>
 8008af4:	2d00      	cmp	r5, #0
 8008af6:	d1f4      	bne.n	8008ae2 <_strtol_l.isra.0+0xda>
 8008af8:	6011      	str	r1, [r2, #0]
 8008afa:	e791      	b.n	8008a20 <_strtol_l.isra.0+0x18>
 8008afc:	2430      	movs	r4, #48	; 0x30
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1b2      	bne.n	8008a68 <_strtol_l.isra.0+0x60>
 8008b02:	2308      	movs	r3, #8
 8008b04:	e7b0      	b.n	8008a68 <_strtol_l.isra.0+0x60>
 8008b06:	2c30      	cmp	r4, #48	; 0x30
 8008b08:	d0a3      	beq.n	8008a52 <_strtol_l.isra.0+0x4a>
 8008b0a:	230a      	movs	r3, #10
 8008b0c:	e7ac      	b.n	8008a68 <_strtol_l.isra.0+0x60>
 8008b0e:	bf00      	nop
 8008b10:	08009e05 	.word	0x08009e05

08008b14 <strtol>:
 8008b14:	4613      	mov	r3, r2
 8008b16:	460a      	mov	r2, r1
 8008b18:	4601      	mov	r1, r0
 8008b1a:	4802      	ldr	r0, [pc, #8]	; (8008b24 <strtol+0x10>)
 8008b1c:	6800      	ldr	r0, [r0, #0]
 8008b1e:	f7ff bf73 	b.w	8008a08 <_strtol_l.isra.0>
 8008b22:	bf00      	nop
 8008b24:	20000060 	.word	0x20000060

08008b28 <_write_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	4608      	mov	r0, r1
 8008b2e:	4611      	mov	r1, r2
 8008b30:	2200      	movs	r2, #0
 8008b32:	4d05      	ldr	r5, [pc, #20]	; (8008b48 <_write_r+0x20>)
 8008b34:	602a      	str	r2, [r5, #0]
 8008b36:	461a      	mov	r2, r3
 8008b38:	f7f9 f88e 	bl	8001c58 <_write>
 8008b3c:	1c43      	adds	r3, r0, #1
 8008b3e:	d102      	bne.n	8008b46 <_write_r+0x1e>
 8008b40:	682b      	ldr	r3, [r5, #0]
 8008b42:	b103      	cbz	r3, 8008b46 <_write_r+0x1e>
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	bd38      	pop	{r3, r4, r5, pc}
 8008b48:	200027e0 	.word	0x200027e0

08008b4c <__assert_func>:
 8008b4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b4e:	4614      	mov	r4, r2
 8008b50:	461a      	mov	r2, r3
 8008b52:	4b09      	ldr	r3, [pc, #36]	; (8008b78 <__assert_func+0x2c>)
 8008b54:	4605      	mov	r5, r0
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68d8      	ldr	r0, [r3, #12]
 8008b5a:	b14c      	cbz	r4, 8008b70 <__assert_func+0x24>
 8008b5c:	4b07      	ldr	r3, [pc, #28]	; (8008b7c <__assert_func+0x30>)
 8008b5e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b62:	9100      	str	r1, [sp, #0]
 8008b64:	462b      	mov	r3, r5
 8008b66:	4906      	ldr	r1, [pc, #24]	; (8008b80 <__assert_func+0x34>)
 8008b68:	f000 f8e0 	bl	8008d2c <fiprintf>
 8008b6c:	f000 fe2a 	bl	80097c4 <abort>
 8008b70:	4b04      	ldr	r3, [pc, #16]	; (8008b84 <__assert_func+0x38>)
 8008b72:	461c      	mov	r4, r3
 8008b74:	e7f3      	b.n	8008b5e <__assert_func+0x12>
 8008b76:	bf00      	nop
 8008b78:	20000060 	.word	0x20000060
 8008b7c:	08009dc8 	.word	0x08009dc8
 8008b80:	08009dd5 	.word	0x08009dd5
 8008b84:	08009e03 	.word	0x08009e03

08008b88 <_close_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	4d05      	ldr	r5, [pc, #20]	; (8008ba4 <_close_r+0x1c>)
 8008b8e:	4604      	mov	r4, r0
 8008b90:	4608      	mov	r0, r1
 8008b92:	602b      	str	r3, [r5, #0]
 8008b94:	f7f9 f87c 	bl	8001c90 <_close>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d102      	bne.n	8008ba2 <_close_r+0x1a>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	b103      	cbz	r3, 8008ba2 <_close_r+0x1a>
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	200027e0 	.word	0x200027e0

08008ba8 <__sflush_r>:
 8008ba8:	898a      	ldrh	r2, [r1, #12]
 8008baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bae:	4605      	mov	r5, r0
 8008bb0:	0710      	lsls	r0, r2, #28
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	d458      	bmi.n	8008c68 <__sflush_r+0xc0>
 8008bb6:	684b      	ldr	r3, [r1, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	dc05      	bgt.n	8008bc8 <__sflush_r+0x20>
 8008bbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	dc02      	bgt.n	8008bc8 <__sflush_r+0x20>
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bca:	2e00      	cmp	r6, #0
 8008bcc:	d0f9      	beq.n	8008bc2 <__sflush_r+0x1a>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bd4:	682f      	ldr	r7, [r5, #0]
 8008bd6:	602b      	str	r3, [r5, #0]
 8008bd8:	d032      	beq.n	8008c40 <__sflush_r+0x98>
 8008bda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bdc:	89a3      	ldrh	r3, [r4, #12]
 8008bde:	075a      	lsls	r2, r3, #29
 8008be0:	d505      	bpl.n	8008bee <__sflush_r+0x46>
 8008be2:	6863      	ldr	r3, [r4, #4]
 8008be4:	1ac0      	subs	r0, r0, r3
 8008be6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008be8:	b10b      	cbz	r3, 8008bee <__sflush_r+0x46>
 8008bea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bec:	1ac0      	subs	r0, r0, r3
 8008bee:	2300      	movs	r3, #0
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	6a21      	ldr	r1, [r4, #32]
 8008bf8:	47b0      	blx	r6
 8008bfa:	1c43      	adds	r3, r0, #1
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	d106      	bne.n	8008c0e <__sflush_r+0x66>
 8008c00:	6829      	ldr	r1, [r5, #0]
 8008c02:	291d      	cmp	r1, #29
 8008c04:	d82c      	bhi.n	8008c60 <__sflush_r+0xb8>
 8008c06:	4a2a      	ldr	r2, [pc, #168]	; (8008cb0 <__sflush_r+0x108>)
 8008c08:	40ca      	lsrs	r2, r1
 8008c0a:	07d6      	lsls	r6, r2, #31
 8008c0c:	d528      	bpl.n	8008c60 <__sflush_r+0xb8>
 8008c0e:	2200      	movs	r2, #0
 8008c10:	6062      	str	r2, [r4, #4]
 8008c12:	6922      	ldr	r2, [r4, #16]
 8008c14:	04d9      	lsls	r1, r3, #19
 8008c16:	6022      	str	r2, [r4, #0]
 8008c18:	d504      	bpl.n	8008c24 <__sflush_r+0x7c>
 8008c1a:	1c42      	adds	r2, r0, #1
 8008c1c:	d101      	bne.n	8008c22 <__sflush_r+0x7a>
 8008c1e:	682b      	ldr	r3, [r5, #0]
 8008c20:	b903      	cbnz	r3, 8008c24 <__sflush_r+0x7c>
 8008c22:	6560      	str	r0, [r4, #84]	; 0x54
 8008c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c26:	602f      	str	r7, [r5, #0]
 8008c28:	2900      	cmp	r1, #0
 8008c2a:	d0ca      	beq.n	8008bc2 <__sflush_r+0x1a>
 8008c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c30:	4299      	cmp	r1, r3
 8008c32:	d002      	beq.n	8008c3a <__sflush_r+0x92>
 8008c34:	4628      	mov	r0, r5
 8008c36:	f7ff fced 	bl	8008614 <_free_r>
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	6360      	str	r0, [r4, #52]	; 0x34
 8008c3e:	e7c1      	b.n	8008bc4 <__sflush_r+0x1c>
 8008c40:	6a21      	ldr	r1, [r4, #32]
 8008c42:	2301      	movs	r3, #1
 8008c44:	4628      	mov	r0, r5
 8008c46:	47b0      	blx	r6
 8008c48:	1c41      	adds	r1, r0, #1
 8008c4a:	d1c7      	bne.n	8008bdc <__sflush_r+0x34>
 8008c4c:	682b      	ldr	r3, [r5, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d0c4      	beq.n	8008bdc <__sflush_r+0x34>
 8008c52:	2b1d      	cmp	r3, #29
 8008c54:	d001      	beq.n	8008c5a <__sflush_r+0xb2>
 8008c56:	2b16      	cmp	r3, #22
 8008c58:	d101      	bne.n	8008c5e <__sflush_r+0xb6>
 8008c5a:	602f      	str	r7, [r5, #0]
 8008c5c:	e7b1      	b.n	8008bc2 <__sflush_r+0x1a>
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c64:	81a3      	strh	r3, [r4, #12]
 8008c66:	e7ad      	b.n	8008bc4 <__sflush_r+0x1c>
 8008c68:	690f      	ldr	r7, [r1, #16]
 8008c6a:	2f00      	cmp	r7, #0
 8008c6c:	d0a9      	beq.n	8008bc2 <__sflush_r+0x1a>
 8008c6e:	0793      	lsls	r3, r2, #30
 8008c70:	bf18      	it	ne
 8008c72:	2300      	movne	r3, #0
 8008c74:	680e      	ldr	r6, [r1, #0]
 8008c76:	bf08      	it	eq
 8008c78:	694b      	ldreq	r3, [r1, #20]
 8008c7a:	eba6 0807 	sub.w	r8, r6, r7
 8008c7e:	600f      	str	r7, [r1, #0]
 8008c80:	608b      	str	r3, [r1, #8]
 8008c82:	f1b8 0f00 	cmp.w	r8, #0
 8008c86:	dd9c      	ble.n	8008bc2 <__sflush_r+0x1a>
 8008c88:	4643      	mov	r3, r8
 8008c8a:	463a      	mov	r2, r7
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	6a21      	ldr	r1, [r4, #32]
 8008c90:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c92:	47b0      	blx	r6
 8008c94:	2800      	cmp	r0, #0
 8008c96:	dc06      	bgt.n	8008ca6 <__sflush_r+0xfe>
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ca2:	81a3      	strh	r3, [r4, #12]
 8008ca4:	e78e      	b.n	8008bc4 <__sflush_r+0x1c>
 8008ca6:	4407      	add	r7, r0
 8008ca8:	eba8 0800 	sub.w	r8, r8, r0
 8008cac:	e7e9      	b.n	8008c82 <__sflush_r+0xda>
 8008cae:	bf00      	nop
 8008cb0:	20400001 	.word	0x20400001

08008cb4 <_fflush_r>:
 8008cb4:	b538      	push	{r3, r4, r5, lr}
 8008cb6:	690b      	ldr	r3, [r1, #16]
 8008cb8:	4605      	mov	r5, r0
 8008cba:	460c      	mov	r4, r1
 8008cbc:	b913      	cbnz	r3, 8008cc4 <_fflush_r+0x10>
 8008cbe:	2500      	movs	r5, #0
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	bd38      	pop	{r3, r4, r5, pc}
 8008cc4:	b118      	cbz	r0, 8008cce <_fflush_r+0x1a>
 8008cc6:	6983      	ldr	r3, [r0, #24]
 8008cc8:	b90b      	cbnz	r3, 8008cce <_fflush_r+0x1a>
 8008cca:	f7ff fbb7 	bl	800843c <__sinit>
 8008cce:	4b14      	ldr	r3, [pc, #80]	; (8008d20 <_fflush_r+0x6c>)
 8008cd0:	429c      	cmp	r4, r3
 8008cd2:	d11b      	bne.n	8008d0c <_fflush_r+0x58>
 8008cd4:	686c      	ldr	r4, [r5, #4]
 8008cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0ef      	beq.n	8008cbe <_fflush_r+0xa>
 8008cde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ce0:	07d0      	lsls	r0, r2, #31
 8008ce2:	d404      	bmi.n	8008cee <_fflush_r+0x3a>
 8008ce4:	0599      	lsls	r1, r3, #22
 8008ce6:	d402      	bmi.n	8008cee <_fflush_r+0x3a>
 8008ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cea:	f7ff fc6a 	bl	80085c2 <__retarget_lock_acquire_recursive>
 8008cee:	4628      	mov	r0, r5
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	f7ff ff59 	bl	8008ba8 <__sflush_r>
 8008cf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cf8:	4605      	mov	r5, r0
 8008cfa:	07da      	lsls	r2, r3, #31
 8008cfc:	d4e0      	bmi.n	8008cc0 <_fflush_r+0xc>
 8008cfe:	89a3      	ldrh	r3, [r4, #12]
 8008d00:	059b      	lsls	r3, r3, #22
 8008d02:	d4dd      	bmi.n	8008cc0 <_fflush_r+0xc>
 8008d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d06:	f7ff fc5d 	bl	80085c4 <__retarget_lock_release_recursive>
 8008d0a:	e7d9      	b.n	8008cc0 <_fflush_r+0xc>
 8008d0c:	4b05      	ldr	r3, [pc, #20]	; (8008d24 <_fflush_r+0x70>)
 8008d0e:	429c      	cmp	r4, r3
 8008d10:	d101      	bne.n	8008d16 <_fflush_r+0x62>
 8008d12:	68ac      	ldr	r4, [r5, #8]
 8008d14:	e7df      	b.n	8008cd6 <_fflush_r+0x22>
 8008d16:	4b04      	ldr	r3, [pc, #16]	; (8008d28 <_fflush_r+0x74>)
 8008d18:	429c      	cmp	r4, r3
 8008d1a:	bf08      	it	eq
 8008d1c:	68ec      	ldreq	r4, [r5, #12]
 8008d1e:	e7da      	b.n	8008cd6 <_fflush_r+0x22>
 8008d20:	08009d0c 	.word	0x08009d0c
 8008d24:	08009d2c 	.word	0x08009d2c
 8008d28:	08009cec 	.word	0x08009cec

08008d2c <fiprintf>:
 8008d2c:	b40e      	push	{r1, r2, r3}
 8008d2e:	b503      	push	{r0, r1, lr}
 8008d30:	4601      	mov	r1, r0
 8008d32:	ab03      	add	r3, sp, #12
 8008d34:	4805      	ldr	r0, [pc, #20]	; (8008d4c <fiprintf+0x20>)
 8008d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d3a:	6800      	ldr	r0, [r0, #0]
 8008d3c:	9301      	str	r3, [sp, #4]
 8008d3e:	f000 f9a9 	bl	8009094 <_vfiprintf_r>
 8008d42:	b002      	add	sp, #8
 8008d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d48:	b003      	add	sp, #12
 8008d4a:	4770      	bx	lr
 8008d4c:	20000060 	.word	0x20000060

08008d50 <_lseek_r>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	4604      	mov	r4, r0
 8008d54:	4608      	mov	r0, r1
 8008d56:	4611      	mov	r1, r2
 8008d58:	2200      	movs	r2, #0
 8008d5a:	4d05      	ldr	r5, [pc, #20]	; (8008d70 <_lseek_r+0x20>)
 8008d5c:	602a      	str	r2, [r5, #0]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	f7f8 ffba 	bl	8001cd8 <_lseek>
 8008d64:	1c43      	adds	r3, r0, #1
 8008d66:	d102      	bne.n	8008d6e <_lseek_r+0x1e>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	b103      	cbz	r3, 8008d6e <_lseek_r+0x1e>
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	bd38      	pop	{r3, r4, r5, pc}
 8008d70:	200027e0 	.word	0x200027e0

08008d74 <__malloc_lock>:
 8008d74:	4801      	ldr	r0, [pc, #4]	; (8008d7c <__malloc_lock+0x8>)
 8008d76:	f7ff bc24 	b.w	80085c2 <__retarget_lock_acquire_recursive>
 8008d7a:	bf00      	nop
 8008d7c:	200027da 	.word	0x200027da

08008d80 <__malloc_unlock>:
 8008d80:	4801      	ldr	r0, [pc, #4]	; (8008d88 <__malloc_unlock+0x8>)
 8008d82:	f7ff bc1f 	b.w	80085c4 <__retarget_lock_release_recursive>
 8008d86:	bf00      	nop
 8008d88:	200027da 	.word	0x200027da

08008d8c <__ssputs_r>:
 8008d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d90:	688e      	ldr	r6, [r1, #8]
 8008d92:	4682      	mov	sl, r0
 8008d94:	429e      	cmp	r6, r3
 8008d96:	460c      	mov	r4, r1
 8008d98:	4690      	mov	r8, r2
 8008d9a:	461f      	mov	r7, r3
 8008d9c:	d838      	bhi.n	8008e10 <__ssputs_r+0x84>
 8008d9e:	898a      	ldrh	r2, [r1, #12]
 8008da0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008da4:	d032      	beq.n	8008e0c <__ssputs_r+0x80>
 8008da6:	6825      	ldr	r5, [r4, #0]
 8008da8:	6909      	ldr	r1, [r1, #16]
 8008daa:	3301      	adds	r3, #1
 8008dac:	eba5 0901 	sub.w	r9, r5, r1
 8008db0:	6965      	ldr	r5, [r4, #20]
 8008db2:	444b      	add	r3, r9
 8008db4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008db8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dbc:	106d      	asrs	r5, r5, #1
 8008dbe:	429d      	cmp	r5, r3
 8008dc0:	bf38      	it	cc
 8008dc2:	461d      	movcc	r5, r3
 8008dc4:	0553      	lsls	r3, r2, #21
 8008dc6:	d531      	bpl.n	8008e2c <__ssputs_r+0xa0>
 8008dc8:	4629      	mov	r1, r5
 8008dca:	f7ff fc6f 	bl	80086ac <_malloc_r>
 8008dce:	4606      	mov	r6, r0
 8008dd0:	b950      	cbnz	r0, 8008de8 <__ssputs_r+0x5c>
 8008dd2:	230c      	movs	r3, #12
 8008dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd8:	f8ca 3000 	str.w	r3, [sl]
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008de2:	81a3      	strh	r3, [r4, #12]
 8008de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de8:	464a      	mov	r2, r9
 8008dea:	6921      	ldr	r1, [r4, #16]
 8008dec:	f7ff fbfc 	bl	80085e8 <memcpy>
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dfa:	81a3      	strh	r3, [r4, #12]
 8008dfc:	6126      	str	r6, [r4, #16]
 8008dfe:	444e      	add	r6, r9
 8008e00:	6026      	str	r6, [r4, #0]
 8008e02:	463e      	mov	r6, r7
 8008e04:	6165      	str	r5, [r4, #20]
 8008e06:	eba5 0509 	sub.w	r5, r5, r9
 8008e0a:	60a5      	str	r5, [r4, #8]
 8008e0c:	42be      	cmp	r6, r7
 8008e0e:	d900      	bls.n	8008e12 <__ssputs_r+0x86>
 8008e10:	463e      	mov	r6, r7
 8008e12:	4632      	mov	r2, r6
 8008e14:	4641      	mov	r1, r8
 8008e16:	6820      	ldr	r0, [r4, #0]
 8008e18:	f000 fd4e 	bl	80098b8 <memmove>
 8008e1c:	68a3      	ldr	r3, [r4, #8]
 8008e1e:	6822      	ldr	r2, [r4, #0]
 8008e20:	1b9b      	subs	r3, r3, r6
 8008e22:	4432      	add	r2, r6
 8008e24:	2000      	movs	r0, #0
 8008e26:	60a3      	str	r3, [r4, #8]
 8008e28:	6022      	str	r2, [r4, #0]
 8008e2a:	e7db      	b.n	8008de4 <__ssputs_r+0x58>
 8008e2c:	462a      	mov	r2, r5
 8008e2e:	f000 fd5d 	bl	80098ec <_realloc_r>
 8008e32:	4606      	mov	r6, r0
 8008e34:	2800      	cmp	r0, #0
 8008e36:	d1e1      	bne.n	8008dfc <__ssputs_r+0x70>
 8008e38:	4650      	mov	r0, sl
 8008e3a:	6921      	ldr	r1, [r4, #16]
 8008e3c:	f7ff fbea 	bl	8008614 <_free_r>
 8008e40:	e7c7      	b.n	8008dd2 <__ssputs_r+0x46>
	...

08008e44 <_svfiprintf_r>:
 8008e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e48:	4698      	mov	r8, r3
 8008e4a:	898b      	ldrh	r3, [r1, #12]
 8008e4c:	4607      	mov	r7, r0
 8008e4e:	061b      	lsls	r3, r3, #24
 8008e50:	460d      	mov	r5, r1
 8008e52:	4614      	mov	r4, r2
 8008e54:	b09d      	sub	sp, #116	; 0x74
 8008e56:	d50e      	bpl.n	8008e76 <_svfiprintf_r+0x32>
 8008e58:	690b      	ldr	r3, [r1, #16]
 8008e5a:	b963      	cbnz	r3, 8008e76 <_svfiprintf_r+0x32>
 8008e5c:	2140      	movs	r1, #64	; 0x40
 8008e5e:	f7ff fc25 	bl	80086ac <_malloc_r>
 8008e62:	6028      	str	r0, [r5, #0]
 8008e64:	6128      	str	r0, [r5, #16]
 8008e66:	b920      	cbnz	r0, 8008e72 <_svfiprintf_r+0x2e>
 8008e68:	230c      	movs	r3, #12
 8008e6a:	603b      	str	r3, [r7, #0]
 8008e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e70:	e0d1      	b.n	8009016 <_svfiprintf_r+0x1d2>
 8008e72:	2340      	movs	r3, #64	; 0x40
 8008e74:	616b      	str	r3, [r5, #20]
 8008e76:	2300      	movs	r3, #0
 8008e78:	9309      	str	r3, [sp, #36]	; 0x24
 8008e7a:	2320      	movs	r3, #32
 8008e7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e80:	2330      	movs	r3, #48	; 0x30
 8008e82:	f04f 0901 	mov.w	r9, #1
 8008e86:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009030 <_svfiprintf_r+0x1ec>
 8008e8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e92:	4623      	mov	r3, r4
 8008e94:	469a      	mov	sl, r3
 8008e96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e9a:	b10a      	cbz	r2, 8008ea0 <_svfiprintf_r+0x5c>
 8008e9c:	2a25      	cmp	r2, #37	; 0x25
 8008e9e:	d1f9      	bne.n	8008e94 <_svfiprintf_r+0x50>
 8008ea0:	ebba 0b04 	subs.w	fp, sl, r4
 8008ea4:	d00b      	beq.n	8008ebe <_svfiprintf_r+0x7a>
 8008ea6:	465b      	mov	r3, fp
 8008ea8:	4622      	mov	r2, r4
 8008eaa:	4629      	mov	r1, r5
 8008eac:	4638      	mov	r0, r7
 8008eae:	f7ff ff6d 	bl	8008d8c <__ssputs_r>
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	f000 80aa 	beq.w	800900c <_svfiprintf_r+0x1c8>
 8008eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eba:	445a      	add	r2, fp
 8008ebc:	9209      	str	r2, [sp, #36]	; 0x24
 8008ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 80a2 	beq.w	800900c <_svfiprintf_r+0x1c8>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	f04f 32ff 	mov.w	r2, #4294967295
 8008ece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ed2:	f10a 0a01 	add.w	sl, sl, #1
 8008ed6:	9304      	str	r3, [sp, #16]
 8008ed8:	9307      	str	r3, [sp, #28]
 8008eda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ede:	931a      	str	r3, [sp, #104]	; 0x68
 8008ee0:	4654      	mov	r4, sl
 8008ee2:	2205      	movs	r2, #5
 8008ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee8:	4851      	ldr	r0, [pc, #324]	; (8009030 <_svfiprintf_r+0x1ec>)
 8008eea:	f000 fcd7 	bl	800989c <memchr>
 8008eee:	9a04      	ldr	r2, [sp, #16]
 8008ef0:	b9d8      	cbnz	r0, 8008f2a <_svfiprintf_r+0xe6>
 8008ef2:	06d0      	lsls	r0, r2, #27
 8008ef4:	bf44      	itt	mi
 8008ef6:	2320      	movmi	r3, #32
 8008ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008efc:	0711      	lsls	r1, r2, #28
 8008efe:	bf44      	itt	mi
 8008f00:	232b      	movmi	r3, #43	; 0x2b
 8008f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f06:	f89a 3000 	ldrb.w	r3, [sl]
 8008f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f0c:	d015      	beq.n	8008f3a <_svfiprintf_r+0xf6>
 8008f0e:	4654      	mov	r4, sl
 8008f10:	2000      	movs	r0, #0
 8008f12:	f04f 0c0a 	mov.w	ip, #10
 8008f16:	9a07      	ldr	r2, [sp, #28]
 8008f18:	4621      	mov	r1, r4
 8008f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f1e:	3b30      	subs	r3, #48	; 0x30
 8008f20:	2b09      	cmp	r3, #9
 8008f22:	d94e      	bls.n	8008fc2 <_svfiprintf_r+0x17e>
 8008f24:	b1b0      	cbz	r0, 8008f54 <_svfiprintf_r+0x110>
 8008f26:	9207      	str	r2, [sp, #28]
 8008f28:	e014      	b.n	8008f54 <_svfiprintf_r+0x110>
 8008f2a:	eba0 0308 	sub.w	r3, r0, r8
 8008f2e:	fa09 f303 	lsl.w	r3, r9, r3
 8008f32:	4313      	orrs	r3, r2
 8008f34:	46a2      	mov	sl, r4
 8008f36:	9304      	str	r3, [sp, #16]
 8008f38:	e7d2      	b.n	8008ee0 <_svfiprintf_r+0x9c>
 8008f3a:	9b03      	ldr	r3, [sp, #12]
 8008f3c:	1d19      	adds	r1, r3, #4
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	9103      	str	r1, [sp, #12]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	bfbb      	ittet	lt
 8008f46:	425b      	neglt	r3, r3
 8008f48:	f042 0202 	orrlt.w	r2, r2, #2
 8008f4c:	9307      	strge	r3, [sp, #28]
 8008f4e:	9307      	strlt	r3, [sp, #28]
 8008f50:	bfb8      	it	lt
 8008f52:	9204      	strlt	r2, [sp, #16]
 8008f54:	7823      	ldrb	r3, [r4, #0]
 8008f56:	2b2e      	cmp	r3, #46	; 0x2e
 8008f58:	d10c      	bne.n	8008f74 <_svfiprintf_r+0x130>
 8008f5a:	7863      	ldrb	r3, [r4, #1]
 8008f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f5e:	d135      	bne.n	8008fcc <_svfiprintf_r+0x188>
 8008f60:	9b03      	ldr	r3, [sp, #12]
 8008f62:	3402      	adds	r4, #2
 8008f64:	1d1a      	adds	r2, r3, #4
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	9203      	str	r2, [sp, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	bfb8      	it	lt
 8008f6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f72:	9305      	str	r3, [sp, #20]
 8008f74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009040 <_svfiprintf_r+0x1fc>
 8008f78:	2203      	movs	r2, #3
 8008f7a:	4650      	mov	r0, sl
 8008f7c:	7821      	ldrb	r1, [r4, #0]
 8008f7e:	f000 fc8d 	bl	800989c <memchr>
 8008f82:	b140      	cbz	r0, 8008f96 <_svfiprintf_r+0x152>
 8008f84:	2340      	movs	r3, #64	; 0x40
 8008f86:	eba0 000a 	sub.w	r0, r0, sl
 8008f8a:	fa03 f000 	lsl.w	r0, r3, r0
 8008f8e:	9b04      	ldr	r3, [sp, #16]
 8008f90:	3401      	adds	r4, #1
 8008f92:	4303      	orrs	r3, r0
 8008f94:	9304      	str	r3, [sp, #16]
 8008f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f9a:	2206      	movs	r2, #6
 8008f9c:	4825      	ldr	r0, [pc, #148]	; (8009034 <_svfiprintf_r+0x1f0>)
 8008f9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fa2:	f000 fc7b 	bl	800989c <memchr>
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	d038      	beq.n	800901c <_svfiprintf_r+0x1d8>
 8008faa:	4b23      	ldr	r3, [pc, #140]	; (8009038 <_svfiprintf_r+0x1f4>)
 8008fac:	bb1b      	cbnz	r3, 8008ff6 <_svfiprintf_r+0x1b2>
 8008fae:	9b03      	ldr	r3, [sp, #12]
 8008fb0:	3307      	adds	r3, #7
 8008fb2:	f023 0307 	bic.w	r3, r3, #7
 8008fb6:	3308      	adds	r3, #8
 8008fb8:	9303      	str	r3, [sp, #12]
 8008fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fbc:	4433      	add	r3, r6
 8008fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc0:	e767      	b.n	8008e92 <_svfiprintf_r+0x4e>
 8008fc2:	460c      	mov	r4, r1
 8008fc4:	2001      	movs	r0, #1
 8008fc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fca:	e7a5      	b.n	8008f18 <_svfiprintf_r+0xd4>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f04f 0c0a 	mov.w	ip, #10
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	3401      	adds	r4, #1
 8008fd6:	9305      	str	r3, [sp, #20]
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fde:	3a30      	subs	r2, #48	; 0x30
 8008fe0:	2a09      	cmp	r2, #9
 8008fe2:	d903      	bls.n	8008fec <_svfiprintf_r+0x1a8>
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d0c5      	beq.n	8008f74 <_svfiprintf_r+0x130>
 8008fe8:	9105      	str	r1, [sp, #20]
 8008fea:	e7c3      	b.n	8008f74 <_svfiprintf_r+0x130>
 8008fec:	4604      	mov	r4, r0
 8008fee:	2301      	movs	r3, #1
 8008ff0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ff4:	e7f0      	b.n	8008fd8 <_svfiprintf_r+0x194>
 8008ff6:	ab03      	add	r3, sp, #12
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	462a      	mov	r2, r5
 8008ffc:	4638      	mov	r0, r7
 8008ffe:	4b0f      	ldr	r3, [pc, #60]	; (800903c <_svfiprintf_r+0x1f8>)
 8009000:	a904      	add	r1, sp, #16
 8009002:	f3af 8000 	nop.w
 8009006:	1c42      	adds	r2, r0, #1
 8009008:	4606      	mov	r6, r0
 800900a:	d1d6      	bne.n	8008fba <_svfiprintf_r+0x176>
 800900c:	89ab      	ldrh	r3, [r5, #12]
 800900e:	065b      	lsls	r3, r3, #25
 8009010:	f53f af2c 	bmi.w	8008e6c <_svfiprintf_r+0x28>
 8009014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009016:	b01d      	add	sp, #116	; 0x74
 8009018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800901c:	ab03      	add	r3, sp, #12
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	462a      	mov	r2, r5
 8009022:	4638      	mov	r0, r7
 8009024:	4b05      	ldr	r3, [pc, #20]	; (800903c <_svfiprintf_r+0x1f8>)
 8009026:	a904      	add	r1, sp, #16
 8009028:	f000 f9d4 	bl	80093d4 <_printf_i>
 800902c:	e7eb      	b.n	8009006 <_svfiprintf_r+0x1c2>
 800902e:	bf00      	nop
 8009030:	08009f05 	.word	0x08009f05
 8009034:	08009f0f 	.word	0x08009f0f
 8009038:	00000000 	.word	0x00000000
 800903c:	08008d8d 	.word	0x08008d8d
 8009040:	08009f0b 	.word	0x08009f0b

08009044 <__sfputc_r>:
 8009044:	6893      	ldr	r3, [r2, #8]
 8009046:	b410      	push	{r4}
 8009048:	3b01      	subs	r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	6093      	str	r3, [r2, #8]
 800904e:	da07      	bge.n	8009060 <__sfputc_r+0x1c>
 8009050:	6994      	ldr	r4, [r2, #24]
 8009052:	42a3      	cmp	r3, r4
 8009054:	db01      	blt.n	800905a <__sfputc_r+0x16>
 8009056:	290a      	cmp	r1, #10
 8009058:	d102      	bne.n	8009060 <__sfputc_r+0x1c>
 800905a:	bc10      	pop	{r4}
 800905c:	f000 baf2 	b.w	8009644 <__swbuf_r>
 8009060:	6813      	ldr	r3, [r2, #0]
 8009062:	1c58      	adds	r0, r3, #1
 8009064:	6010      	str	r0, [r2, #0]
 8009066:	7019      	strb	r1, [r3, #0]
 8009068:	4608      	mov	r0, r1
 800906a:	bc10      	pop	{r4}
 800906c:	4770      	bx	lr

0800906e <__sfputs_r>:
 800906e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009070:	4606      	mov	r6, r0
 8009072:	460f      	mov	r7, r1
 8009074:	4614      	mov	r4, r2
 8009076:	18d5      	adds	r5, r2, r3
 8009078:	42ac      	cmp	r4, r5
 800907a:	d101      	bne.n	8009080 <__sfputs_r+0x12>
 800907c:	2000      	movs	r0, #0
 800907e:	e007      	b.n	8009090 <__sfputs_r+0x22>
 8009080:	463a      	mov	r2, r7
 8009082:	4630      	mov	r0, r6
 8009084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009088:	f7ff ffdc 	bl	8009044 <__sfputc_r>
 800908c:	1c43      	adds	r3, r0, #1
 800908e:	d1f3      	bne.n	8009078 <__sfputs_r+0xa>
 8009090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009094 <_vfiprintf_r>:
 8009094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009098:	460d      	mov	r5, r1
 800909a:	4614      	mov	r4, r2
 800909c:	4698      	mov	r8, r3
 800909e:	4606      	mov	r6, r0
 80090a0:	b09d      	sub	sp, #116	; 0x74
 80090a2:	b118      	cbz	r0, 80090ac <_vfiprintf_r+0x18>
 80090a4:	6983      	ldr	r3, [r0, #24]
 80090a6:	b90b      	cbnz	r3, 80090ac <_vfiprintf_r+0x18>
 80090a8:	f7ff f9c8 	bl	800843c <__sinit>
 80090ac:	4b89      	ldr	r3, [pc, #548]	; (80092d4 <_vfiprintf_r+0x240>)
 80090ae:	429d      	cmp	r5, r3
 80090b0:	d11b      	bne.n	80090ea <_vfiprintf_r+0x56>
 80090b2:	6875      	ldr	r5, [r6, #4]
 80090b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090b6:	07d9      	lsls	r1, r3, #31
 80090b8:	d405      	bmi.n	80090c6 <_vfiprintf_r+0x32>
 80090ba:	89ab      	ldrh	r3, [r5, #12]
 80090bc:	059a      	lsls	r2, r3, #22
 80090be:	d402      	bmi.n	80090c6 <_vfiprintf_r+0x32>
 80090c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090c2:	f7ff fa7e 	bl	80085c2 <__retarget_lock_acquire_recursive>
 80090c6:	89ab      	ldrh	r3, [r5, #12]
 80090c8:	071b      	lsls	r3, r3, #28
 80090ca:	d501      	bpl.n	80090d0 <_vfiprintf_r+0x3c>
 80090cc:	692b      	ldr	r3, [r5, #16]
 80090ce:	b9eb      	cbnz	r3, 800910c <_vfiprintf_r+0x78>
 80090d0:	4629      	mov	r1, r5
 80090d2:	4630      	mov	r0, r6
 80090d4:	f000 fb08 	bl	80096e8 <__swsetup_r>
 80090d8:	b1c0      	cbz	r0, 800910c <_vfiprintf_r+0x78>
 80090da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090dc:	07dc      	lsls	r4, r3, #31
 80090de:	d50e      	bpl.n	80090fe <_vfiprintf_r+0x6a>
 80090e0:	f04f 30ff 	mov.w	r0, #4294967295
 80090e4:	b01d      	add	sp, #116	; 0x74
 80090e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ea:	4b7b      	ldr	r3, [pc, #492]	; (80092d8 <_vfiprintf_r+0x244>)
 80090ec:	429d      	cmp	r5, r3
 80090ee:	d101      	bne.n	80090f4 <_vfiprintf_r+0x60>
 80090f0:	68b5      	ldr	r5, [r6, #8]
 80090f2:	e7df      	b.n	80090b4 <_vfiprintf_r+0x20>
 80090f4:	4b79      	ldr	r3, [pc, #484]	; (80092dc <_vfiprintf_r+0x248>)
 80090f6:	429d      	cmp	r5, r3
 80090f8:	bf08      	it	eq
 80090fa:	68f5      	ldreq	r5, [r6, #12]
 80090fc:	e7da      	b.n	80090b4 <_vfiprintf_r+0x20>
 80090fe:	89ab      	ldrh	r3, [r5, #12]
 8009100:	0598      	lsls	r0, r3, #22
 8009102:	d4ed      	bmi.n	80090e0 <_vfiprintf_r+0x4c>
 8009104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009106:	f7ff fa5d 	bl	80085c4 <__retarget_lock_release_recursive>
 800910a:	e7e9      	b.n	80090e0 <_vfiprintf_r+0x4c>
 800910c:	2300      	movs	r3, #0
 800910e:	9309      	str	r3, [sp, #36]	; 0x24
 8009110:	2320      	movs	r3, #32
 8009112:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009116:	2330      	movs	r3, #48	; 0x30
 8009118:	f04f 0901 	mov.w	r9, #1
 800911c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009120:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80092e0 <_vfiprintf_r+0x24c>
 8009124:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009128:	4623      	mov	r3, r4
 800912a:	469a      	mov	sl, r3
 800912c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009130:	b10a      	cbz	r2, 8009136 <_vfiprintf_r+0xa2>
 8009132:	2a25      	cmp	r2, #37	; 0x25
 8009134:	d1f9      	bne.n	800912a <_vfiprintf_r+0x96>
 8009136:	ebba 0b04 	subs.w	fp, sl, r4
 800913a:	d00b      	beq.n	8009154 <_vfiprintf_r+0xc0>
 800913c:	465b      	mov	r3, fp
 800913e:	4622      	mov	r2, r4
 8009140:	4629      	mov	r1, r5
 8009142:	4630      	mov	r0, r6
 8009144:	f7ff ff93 	bl	800906e <__sfputs_r>
 8009148:	3001      	adds	r0, #1
 800914a:	f000 80aa 	beq.w	80092a2 <_vfiprintf_r+0x20e>
 800914e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009150:	445a      	add	r2, fp
 8009152:	9209      	str	r2, [sp, #36]	; 0x24
 8009154:	f89a 3000 	ldrb.w	r3, [sl]
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 80a2 	beq.w	80092a2 <_vfiprintf_r+0x20e>
 800915e:	2300      	movs	r3, #0
 8009160:	f04f 32ff 	mov.w	r2, #4294967295
 8009164:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009168:	f10a 0a01 	add.w	sl, sl, #1
 800916c:	9304      	str	r3, [sp, #16]
 800916e:	9307      	str	r3, [sp, #28]
 8009170:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009174:	931a      	str	r3, [sp, #104]	; 0x68
 8009176:	4654      	mov	r4, sl
 8009178:	2205      	movs	r2, #5
 800917a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800917e:	4858      	ldr	r0, [pc, #352]	; (80092e0 <_vfiprintf_r+0x24c>)
 8009180:	f000 fb8c 	bl	800989c <memchr>
 8009184:	9a04      	ldr	r2, [sp, #16]
 8009186:	b9d8      	cbnz	r0, 80091c0 <_vfiprintf_r+0x12c>
 8009188:	06d1      	lsls	r1, r2, #27
 800918a:	bf44      	itt	mi
 800918c:	2320      	movmi	r3, #32
 800918e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009192:	0713      	lsls	r3, r2, #28
 8009194:	bf44      	itt	mi
 8009196:	232b      	movmi	r3, #43	; 0x2b
 8009198:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800919c:	f89a 3000 	ldrb.w	r3, [sl]
 80091a0:	2b2a      	cmp	r3, #42	; 0x2a
 80091a2:	d015      	beq.n	80091d0 <_vfiprintf_r+0x13c>
 80091a4:	4654      	mov	r4, sl
 80091a6:	2000      	movs	r0, #0
 80091a8:	f04f 0c0a 	mov.w	ip, #10
 80091ac:	9a07      	ldr	r2, [sp, #28]
 80091ae:	4621      	mov	r1, r4
 80091b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091b4:	3b30      	subs	r3, #48	; 0x30
 80091b6:	2b09      	cmp	r3, #9
 80091b8:	d94e      	bls.n	8009258 <_vfiprintf_r+0x1c4>
 80091ba:	b1b0      	cbz	r0, 80091ea <_vfiprintf_r+0x156>
 80091bc:	9207      	str	r2, [sp, #28]
 80091be:	e014      	b.n	80091ea <_vfiprintf_r+0x156>
 80091c0:	eba0 0308 	sub.w	r3, r0, r8
 80091c4:	fa09 f303 	lsl.w	r3, r9, r3
 80091c8:	4313      	orrs	r3, r2
 80091ca:	46a2      	mov	sl, r4
 80091cc:	9304      	str	r3, [sp, #16]
 80091ce:	e7d2      	b.n	8009176 <_vfiprintf_r+0xe2>
 80091d0:	9b03      	ldr	r3, [sp, #12]
 80091d2:	1d19      	adds	r1, r3, #4
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	9103      	str	r1, [sp, #12]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	bfbb      	ittet	lt
 80091dc:	425b      	neglt	r3, r3
 80091de:	f042 0202 	orrlt.w	r2, r2, #2
 80091e2:	9307      	strge	r3, [sp, #28]
 80091e4:	9307      	strlt	r3, [sp, #28]
 80091e6:	bfb8      	it	lt
 80091e8:	9204      	strlt	r2, [sp, #16]
 80091ea:	7823      	ldrb	r3, [r4, #0]
 80091ec:	2b2e      	cmp	r3, #46	; 0x2e
 80091ee:	d10c      	bne.n	800920a <_vfiprintf_r+0x176>
 80091f0:	7863      	ldrb	r3, [r4, #1]
 80091f2:	2b2a      	cmp	r3, #42	; 0x2a
 80091f4:	d135      	bne.n	8009262 <_vfiprintf_r+0x1ce>
 80091f6:	9b03      	ldr	r3, [sp, #12]
 80091f8:	3402      	adds	r4, #2
 80091fa:	1d1a      	adds	r2, r3, #4
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	9203      	str	r2, [sp, #12]
 8009200:	2b00      	cmp	r3, #0
 8009202:	bfb8      	it	lt
 8009204:	f04f 33ff 	movlt.w	r3, #4294967295
 8009208:	9305      	str	r3, [sp, #20]
 800920a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80092f0 <_vfiprintf_r+0x25c>
 800920e:	2203      	movs	r2, #3
 8009210:	4650      	mov	r0, sl
 8009212:	7821      	ldrb	r1, [r4, #0]
 8009214:	f000 fb42 	bl	800989c <memchr>
 8009218:	b140      	cbz	r0, 800922c <_vfiprintf_r+0x198>
 800921a:	2340      	movs	r3, #64	; 0x40
 800921c:	eba0 000a 	sub.w	r0, r0, sl
 8009220:	fa03 f000 	lsl.w	r0, r3, r0
 8009224:	9b04      	ldr	r3, [sp, #16]
 8009226:	3401      	adds	r4, #1
 8009228:	4303      	orrs	r3, r0
 800922a:	9304      	str	r3, [sp, #16]
 800922c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009230:	2206      	movs	r2, #6
 8009232:	482c      	ldr	r0, [pc, #176]	; (80092e4 <_vfiprintf_r+0x250>)
 8009234:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009238:	f000 fb30 	bl	800989c <memchr>
 800923c:	2800      	cmp	r0, #0
 800923e:	d03f      	beq.n	80092c0 <_vfiprintf_r+0x22c>
 8009240:	4b29      	ldr	r3, [pc, #164]	; (80092e8 <_vfiprintf_r+0x254>)
 8009242:	bb1b      	cbnz	r3, 800928c <_vfiprintf_r+0x1f8>
 8009244:	9b03      	ldr	r3, [sp, #12]
 8009246:	3307      	adds	r3, #7
 8009248:	f023 0307 	bic.w	r3, r3, #7
 800924c:	3308      	adds	r3, #8
 800924e:	9303      	str	r3, [sp, #12]
 8009250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009252:	443b      	add	r3, r7
 8009254:	9309      	str	r3, [sp, #36]	; 0x24
 8009256:	e767      	b.n	8009128 <_vfiprintf_r+0x94>
 8009258:	460c      	mov	r4, r1
 800925a:	2001      	movs	r0, #1
 800925c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009260:	e7a5      	b.n	80091ae <_vfiprintf_r+0x11a>
 8009262:	2300      	movs	r3, #0
 8009264:	f04f 0c0a 	mov.w	ip, #10
 8009268:	4619      	mov	r1, r3
 800926a:	3401      	adds	r4, #1
 800926c:	9305      	str	r3, [sp, #20]
 800926e:	4620      	mov	r0, r4
 8009270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009274:	3a30      	subs	r2, #48	; 0x30
 8009276:	2a09      	cmp	r2, #9
 8009278:	d903      	bls.n	8009282 <_vfiprintf_r+0x1ee>
 800927a:	2b00      	cmp	r3, #0
 800927c:	d0c5      	beq.n	800920a <_vfiprintf_r+0x176>
 800927e:	9105      	str	r1, [sp, #20]
 8009280:	e7c3      	b.n	800920a <_vfiprintf_r+0x176>
 8009282:	4604      	mov	r4, r0
 8009284:	2301      	movs	r3, #1
 8009286:	fb0c 2101 	mla	r1, ip, r1, r2
 800928a:	e7f0      	b.n	800926e <_vfiprintf_r+0x1da>
 800928c:	ab03      	add	r3, sp, #12
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	462a      	mov	r2, r5
 8009292:	4630      	mov	r0, r6
 8009294:	4b15      	ldr	r3, [pc, #84]	; (80092ec <_vfiprintf_r+0x258>)
 8009296:	a904      	add	r1, sp, #16
 8009298:	f3af 8000 	nop.w
 800929c:	4607      	mov	r7, r0
 800929e:	1c78      	adds	r0, r7, #1
 80092a0:	d1d6      	bne.n	8009250 <_vfiprintf_r+0x1bc>
 80092a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092a4:	07d9      	lsls	r1, r3, #31
 80092a6:	d405      	bmi.n	80092b4 <_vfiprintf_r+0x220>
 80092a8:	89ab      	ldrh	r3, [r5, #12]
 80092aa:	059a      	lsls	r2, r3, #22
 80092ac:	d402      	bmi.n	80092b4 <_vfiprintf_r+0x220>
 80092ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092b0:	f7ff f988 	bl	80085c4 <__retarget_lock_release_recursive>
 80092b4:	89ab      	ldrh	r3, [r5, #12]
 80092b6:	065b      	lsls	r3, r3, #25
 80092b8:	f53f af12 	bmi.w	80090e0 <_vfiprintf_r+0x4c>
 80092bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092be:	e711      	b.n	80090e4 <_vfiprintf_r+0x50>
 80092c0:	ab03      	add	r3, sp, #12
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	462a      	mov	r2, r5
 80092c6:	4630      	mov	r0, r6
 80092c8:	4b08      	ldr	r3, [pc, #32]	; (80092ec <_vfiprintf_r+0x258>)
 80092ca:	a904      	add	r1, sp, #16
 80092cc:	f000 f882 	bl	80093d4 <_printf_i>
 80092d0:	e7e4      	b.n	800929c <_vfiprintf_r+0x208>
 80092d2:	bf00      	nop
 80092d4:	08009d0c 	.word	0x08009d0c
 80092d8:	08009d2c 	.word	0x08009d2c
 80092dc:	08009cec 	.word	0x08009cec
 80092e0:	08009f05 	.word	0x08009f05
 80092e4:	08009f0f 	.word	0x08009f0f
 80092e8:	00000000 	.word	0x00000000
 80092ec:	0800906f 	.word	0x0800906f
 80092f0:	08009f0b 	.word	0x08009f0b

080092f4 <_printf_common>:
 80092f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f8:	4616      	mov	r6, r2
 80092fa:	4699      	mov	r9, r3
 80092fc:	688a      	ldr	r2, [r1, #8]
 80092fe:	690b      	ldr	r3, [r1, #16]
 8009300:	4607      	mov	r7, r0
 8009302:	4293      	cmp	r3, r2
 8009304:	bfb8      	it	lt
 8009306:	4613      	movlt	r3, r2
 8009308:	6033      	str	r3, [r6, #0]
 800930a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800930e:	460c      	mov	r4, r1
 8009310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009314:	b10a      	cbz	r2, 800931a <_printf_common+0x26>
 8009316:	3301      	adds	r3, #1
 8009318:	6033      	str	r3, [r6, #0]
 800931a:	6823      	ldr	r3, [r4, #0]
 800931c:	0699      	lsls	r1, r3, #26
 800931e:	bf42      	ittt	mi
 8009320:	6833      	ldrmi	r3, [r6, #0]
 8009322:	3302      	addmi	r3, #2
 8009324:	6033      	strmi	r3, [r6, #0]
 8009326:	6825      	ldr	r5, [r4, #0]
 8009328:	f015 0506 	ands.w	r5, r5, #6
 800932c:	d106      	bne.n	800933c <_printf_common+0x48>
 800932e:	f104 0a19 	add.w	sl, r4, #25
 8009332:	68e3      	ldr	r3, [r4, #12]
 8009334:	6832      	ldr	r2, [r6, #0]
 8009336:	1a9b      	subs	r3, r3, r2
 8009338:	42ab      	cmp	r3, r5
 800933a:	dc28      	bgt.n	800938e <_printf_common+0x9a>
 800933c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009340:	1e13      	subs	r3, r2, #0
 8009342:	6822      	ldr	r2, [r4, #0]
 8009344:	bf18      	it	ne
 8009346:	2301      	movne	r3, #1
 8009348:	0692      	lsls	r2, r2, #26
 800934a:	d42d      	bmi.n	80093a8 <_printf_common+0xb4>
 800934c:	4649      	mov	r1, r9
 800934e:	4638      	mov	r0, r7
 8009350:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009354:	47c0      	blx	r8
 8009356:	3001      	adds	r0, #1
 8009358:	d020      	beq.n	800939c <_printf_common+0xa8>
 800935a:	6823      	ldr	r3, [r4, #0]
 800935c:	68e5      	ldr	r5, [r4, #12]
 800935e:	f003 0306 	and.w	r3, r3, #6
 8009362:	2b04      	cmp	r3, #4
 8009364:	bf18      	it	ne
 8009366:	2500      	movne	r5, #0
 8009368:	6832      	ldr	r2, [r6, #0]
 800936a:	f04f 0600 	mov.w	r6, #0
 800936e:	68a3      	ldr	r3, [r4, #8]
 8009370:	bf08      	it	eq
 8009372:	1aad      	subeq	r5, r5, r2
 8009374:	6922      	ldr	r2, [r4, #16]
 8009376:	bf08      	it	eq
 8009378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800937c:	4293      	cmp	r3, r2
 800937e:	bfc4      	itt	gt
 8009380:	1a9b      	subgt	r3, r3, r2
 8009382:	18ed      	addgt	r5, r5, r3
 8009384:	341a      	adds	r4, #26
 8009386:	42b5      	cmp	r5, r6
 8009388:	d11a      	bne.n	80093c0 <_printf_common+0xcc>
 800938a:	2000      	movs	r0, #0
 800938c:	e008      	b.n	80093a0 <_printf_common+0xac>
 800938e:	2301      	movs	r3, #1
 8009390:	4652      	mov	r2, sl
 8009392:	4649      	mov	r1, r9
 8009394:	4638      	mov	r0, r7
 8009396:	47c0      	blx	r8
 8009398:	3001      	adds	r0, #1
 800939a:	d103      	bne.n	80093a4 <_printf_common+0xb0>
 800939c:	f04f 30ff 	mov.w	r0, #4294967295
 80093a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093a4:	3501      	adds	r5, #1
 80093a6:	e7c4      	b.n	8009332 <_printf_common+0x3e>
 80093a8:	2030      	movs	r0, #48	; 0x30
 80093aa:	18e1      	adds	r1, r4, r3
 80093ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093b0:	1c5a      	adds	r2, r3, #1
 80093b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093b6:	4422      	add	r2, r4
 80093b8:	3302      	adds	r3, #2
 80093ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093be:	e7c5      	b.n	800934c <_printf_common+0x58>
 80093c0:	2301      	movs	r3, #1
 80093c2:	4622      	mov	r2, r4
 80093c4:	4649      	mov	r1, r9
 80093c6:	4638      	mov	r0, r7
 80093c8:	47c0      	blx	r8
 80093ca:	3001      	adds	r0, #1
 80093cc:	d0e6      	beq.n	800939c <_printf_common+0xa8>
 80093ce:	3601      	adds	r6, #1
 80093d0:	e7d9      	b.n	8009386 <_printf_common+0x92>
	...

080093d4 <_printf_i>:
 80093d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093d8:	460c      	mov	r4, r1
 80093da:	7e27      	ldrb	r7, [r4, #24]
 80093dc:	4691      	mov	r9, r2
 80093de:	2f78      	cmp	r7, #120	; 0x78
 80093e0:	4680      	mov	r8, r0
 80093e2:	469a      	mov	sl, r3
 80093e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80093e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093ea:	d807      	bhi.n	80093fc <_printf_i+0x28>
 80093ec:	2f62      	cmp	r7, #98	; 0x62
 80093ee:	d80a      	bhi.n	8009406 <_printf_i+0x32>
 80093f0:	2f00      	cmp	r7, #0
 80093f2:	f000 80d9 	beq.w	80095a8 <_printf_i+0x1d4>
 80093f6:	2f58      	cmp	r7, #88	; 0x58
 80093f8:	f000 80a4 	beq.w	8009544 <_printf_i+0x170>
 80093fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009400:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009404:	e03a      	b.n	800947c <_printf_i+0xa8>
 8009406:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800940a:	2b15      	cmp	r3, #21
 800940c:	d8f6      	bhi.n	80093fc <_printf_i+0x28>
 800940e:	a001      	add	r0, pc, #4	; (adr r0, 8009414 <_printf_i+0x40>)
 8009410:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009414:	0800946d 	.word	0x0800946d
 8009418:	08009481 	.word	0x08009481
 800941c:	080093fd 	.word	0x080093fd
 8009420:	080093fd 	.word	0x080093fd
 8009424:	080093fd 	.word	0x080093fd
 8009428:	080093fd 	.word	0x080093fd
 800942c:	08009481 	.word	0x08009481
 8009430:	080093fd 	.word	0x080093fd
 8009434:	080093fd 	.word	0x080093fd
 8009438:	080093fd 	.word	0x080093fd
 800943c:	080093fd 	.word	0x080093fd
 8009440:	0800958f 	.word	0x0800958f
 8009444:	080094b1 	.word	0x080094b1
 8009448:	08009571 	.word	0x08009571
 800944c:	080093fd 	.word	0x080093fd
 8009450:	080093fd 	.word	0x080093fd
 8009454:	080095b1 	.word	0x080095b1
 8009458:	080093fd 	.word	0x080093fd
 800945c:	080094b1 	.word	0x080094b1
 8009460:	080093fd 	.word	0x080093fd
 8009464:	080093fd 	.word	0x080093fd
 8009468:	08009579 	.word	0x08009579
 800946c:	680b      	ldr	r3, [r1, #0]
 800946e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009472:	1d1a      	adds	r2, r3, #4
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	600a      	str	r2, [r1, #0]
 8009478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800947c:	2301      	movs	r3, #1
 800947e:	e0a4      	b.n	80095ca <_printf_i+0x1f6>
 8009480:	6825      	ldr	r5, [r4, #0]
 8009482:	6808      	ldr	r0, [r1, #0]
 8009484:	062e      	lsls	r6, r5, #24
 8009486:	f100 0304 	add.w	r3, r0, #4
 800948a:	d50a      	bpl.n	80094a2 <_printf_i+0xce>
 800948c:	6805      	ldr	r5, [r0, #0]
 800948e:	600b      	str	r3, [r1, #0]
 8009490:	2d00      	cmp	r5, #0
 8009492:	da03      	bge.n	800949c <_printf_i+0xc8>
 8009494:	232d      	movs	r3, #45	; 0x2d
 8009496:	426d      	negs	r5, r5
 8009498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800949c:	230a      	movs	r3, #10
 800949e:	485e      	ldr	r0, [pc, #376]	; (8009618 <_printf_i+0x244>)
 80094a0:	e019      	b.n	80094d6 <_printf_i+0x102>
 80094a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80094a6:	6805      	ldr	r5, [r0, #0]
 80094a8:	600b      	str	r3, [r1, #0]
 80094aa:	bf18      	it	ne
 80094ac:	b22d      	sxthne	r5, r5
 80094ae:	e7ef      	b.n	8009490 <_printf_i+0xbc>
 80094b0:	680b      	ldr	r3, [r1, #0]
 80094b2:	6825      	ldr	r5, [r4, #0]
 80094b4:	1d18      	adds	r0, r3, #4
 80094b6:	6008      	str	r0, [r1, #0]
 80094b8:	0628      	lsls	r0, r5, #24
 80094ba:	d501      	bpl.n	80094c0 <_printf_i+0xec>
 80094bc:	681d      	ldr	r5, [r3, #0]
 80094be:	e002      	b.n	80094c6 <_printf_i+0xf2>
 80094c0:	0669      	lsls	r1, r5, #25
 80094c2:	d5fb      	bpl.n	80094bc <_printf_i+0xe8>
 80094c4:	881d      	ldrh	r5, [r3, #0]
 80094c6:	2f6f      	cmp	r7, #111	; 0x6f
 80094c8:	bf0c      	ite	eq
 80094ca:	2308      	moveq	r3, #8
 80094cc:	230a      	movne	r3, #10
 80094ce:	4852      	ldr	r0, [pc, #328]	; (8009618 <_printf_i+0x244>)
 80094d0:	2100      	movs	r1, #0
 80094d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094d6:	6866      	ldr	r6, [r4, #4]
 80094d8:	2e00      	cmp	r6, #0
 80094da:	bfa8      	it	ge
 80094dc:	6821      	ldrge	r1, [r4, #0]
 80094de:	60a6      	str	r6, [r4, #8]
 80094e0:	bfa4      	itt	ge
 80094e2:	f021 0104 	bicge.w	r1, r1, #4
 80094e6:	6021      	strge	r1, [r4, #0]
 80094e8:	b90d      	cbnz	r5, 80094ee <_printf_i+0x11a>
 80094ea:	2e00      	cmp	r6, #0
 80094ec:	d04d      	beq.n	800958a <_printf_i+0x1b6>
 80094ee:	4616      	mov	r6, r2
 80094f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80094f4:	fb03 5711 	mls	r7, r3, r1, r5
 80094f8:	5dc7      	ldrb	r7, [r0, r7]
 80094fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094fe:	462f      	mov	r7, r5
 8009500:	42bb      	cmp	r3, r7
 8009502:	460d      	mov	r5, r1
 8009504:	d9f4      	bls.n	80094f0 <_printf_i+0x11c>
 8009506:	2b08      	cmp	r3, #8
 8009508:	d10b      	bne.n	8009522 <_printf_i+0x14e>
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	07df      	lsls	r7, r3, #31
 800950e:	d508      	bpl.n	8009522 <_printf_i+0x14e>
 8009510:	6923      	ldr	r3, [r4, #16]
 8009512:	6861      	ldr	r1, [r4, #4]
 8009514:	4299      	cmp	r1, r3
 8009516:	bfde      	ittt	le
 8009518:	2330      	movle	r3, #48	; 0x30
 800951a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800951e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009522:	1b92      	subs	r2, r2, r6
 8009524:	6122      	str	r2, [r4, #16]
 8009526:	464b      	mov	r3, r9
 8009528:	4621      	mov	r1, r4
 800952a:	4640      	mov	r0, r8
 800952c:	f8cd a000 	str.w	sl, [sp]
 8009530:	aa03      	add	r2, sp, #12
 8009532:	f7ff fedf 	bl	80092f4 <_printf_common>
 8009536:	3001      	adds	r0, #1
 8009538:	d14c      	bne.n	80095d4 <_printf_i+0x200>
 800953a:	f04f 30ff 	mov.w	r0, #4294967295
 800953e:	b004      	add	sp, #16
 8009540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009544:	4834      	ldr	r0, [pc, #208]	; (8009618 <_printf_i+0x244>)
 8009546:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800954a:	680e      	ldr	r6, [r1, #0]
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009552:	061f      	lsls	r7, r3, #24
 8009554:	600e      	str	r6, [r1, #0]
 8009556:	d514      	bpl.n	8009582 <_printf_i+0x1ae>
 8009558:	07d9      	lsls	r1, r3, #31
 800955a:	bf44      	itt	mi
 800955c:	f043 0320 	orrmi.w	r3, r3, #32
 8009560:	6023      	strmi	r3, [r4, #0]
 8009562:	b91d      	cbnz	r5, 800956c <_printf_i+0x198>
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	f023 0320 	bic.w	r3, r3, #32
 800956a:	6023      	str	r3, [r4, #0]
 800956c:	2310      	movs	r3, #16
 800956e:	e7af      	b.n	80094d0 <_printf_i+0xfc>
 8009570:	6823      	ldr	r3, [r4, #0]
 8009572:	f043 0320 	orr.w	r3, r3, #32
 8009576:	6023      	str	r3, [r4, #0]
 8009578:	2378      	movs	r3, #120	; 0x78
 800957a:	4828      	ldr	r0, [pc, #160]	; (800961c <_printf_i+0x248>)
 800957c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009580:	e7e3      	b.n	800954a <_printf_i+0x176>
 8009582:	065e      	lsls	r6, r3, #25
 8009584:	bf48      	it	mi
 8009586:	b2ad      	uxthmi	r5, r5
 8009588:	e7e6      	b.n	8009558 <_printf_i+0x184>
 800958a:	4616      	mov	r6, r2
 800958c:	e7bb      	b.n	8009506 <_printf_i+0x132>
 800958e:	680b      	ldr	r3, [r1, #0]
 8009590:	6826      	ldr	r6, [r4, #0]
 8009592:	1d1d      	adds	r5, r3, #4
 8009594:	6960      	ldr	r0, [r4, #20]
 8009596:	600d      	str	r5, [r1, #0]
 8009598:	0635      	lsls	r5, r6, #24
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	d501      	bpl.n	80095a2 <_printf_i+0x1ce>
 800959e:	6018      	str	r0, [r3, #0]
 80095a0:	e002      	b.n	80095a8 <_printf_i+0x1d4>
 80095a2:	0671      	lsls	r1, r6, #25
 80095a4:	d5fb      	bpl.n	800959e <_printf_i+0x1ca>
 80095a6:	8018      	strh	r0, [r3, #0]
 80095a8:	2300      	movs	r3, #0
 80095aa:	4616      	mov	r6, r2
 80095ac:	6123      	str	r3, [r4, #16]
 80095ae:	e7ba      	b.n	8009526 <_printf_i+0x152>
 80095b0:	680b      	ldr	r3, [r1, #0]
 80095b2:	1d1a      	adds	r2, r3, #4
 80095b4:	600a      	str	r2, [r1, #0]
 80095b6:	681e      	ldr	r6, [r3, #0]
 80095b8:	2100      	movs	r1, #0
 80095ba:	4630      	mov	r0, r6
 80095bc:	6862      	ldr	r2, [r4, #4]
 80095be:	f000 f96d 	bl	800989c <memchr>
 80095c2:	b108      	cbz	r0, 80095c8 <_printf_i+0x1f4>
 80095c4:	1b80      	subs	r0, r0, r6
 80095c6:	6060      	str	r0, [r4, #4]
 80095c8:	6863      	ldr	r3, [r4, #4]
 80095ca:	6123      	str	r3, [r4, #16]
 80095cc:	2300      	movs	r3, #0
 80095ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095d2:	e7a8      	b.n	8009526 <_printf_i+0x152>
 80095d4:	4632      	mov	r2, r6
 80095d6:	4649      	mov	r1, r9
 80095d8:	4640      	mov	r0, r8
 80095da:	6923      	ldr	r3, [r4, #16]
 80095dc:	47d0      	blx	sl
 80095de:	3001      	adds	r0, #1
 80095e0:	d0ab      	beq.n	800953a <_printf_i+0x166>
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	079b      	lsls	r3, r3, #30
 80095e6:	d413      	bmi.n	8009610 <_printf_i+0x23c>
 80095e8:	68e0      	ldr	r0, [r4, #12]
 80095ea:	9b03      	ldr	r3, [sp, #12]
 80095ec:	4298      	cmp	r0, r3
 80095ee:	bfb8      	it	lt
 80095f0:	4618      	movlt	r0, r3
 80095f2:	e7a4      	b.n	800953e <_printf_i+0x16a>
 80095f4:	2301      	movs	r3, #1
 80095f6:	4632      	mov	r2, r6
 80095f8:	4649      	mov	r1, r9
 80095fa:	4640      	mov	r0, r8
 80095fc:	47d0      	blx	sl
 80095fe:	3001      	adds	r0, #1
 8009600:	d09b      	beq.n	800953a <_printf_i+0x166>
 8009602:	3501      	adds	r5, #1
 8009604:	68e3      	ldr	r3, [r4, #12]
 8009606:	9903      	ldr	r1, [sp, #12]
 8009608:	1a5b      	subs	r3, r3, r1
 800960a:	42ab      	cmp	r3, r5
 800960c:	dcf2      	bgt.n	80095f4 <_printf_i+0x220>
 800960e:	e7eb      	b.n	80095e8 <_printf_i+0x214>
 8009610:	2500      	movs	r5, #0
 8009612:	f104 0619 	add.w	r6, r4, #25
 8009616:	e7f5      	b.n	8009604 <_printf_i+0x230>
 8009618:	08009f16 	.word	0x08009f16
 800961c:	08009f27 	.word	0x08009f27

08009620 <_read_r>:
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	4604      	mov	r4, r0
 8009624:	4608      	mov	r0, r1
 8009626:	4611      	mov	r1, r2
 8009628:	2200      	movs	r2, #0
 800962a:	4d05      	ldr	r5, [pc, #20]	; (8009640 <_read_r+0x20>)
 800962c:	602a      	str	r2, [r5, #0]
 800962e:	461a      	mov	r2, r3
 8009630:	f7f8 faf5 	bl	8001c1e <_read>
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	d102      	bne.n	800963e <_read_r+0x1e>
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	b103      	cbz	r3, 800963e <_read_r+0x1e>
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	bd38      	pop	{r3, r4, r5, pc}
 8009640:	200027e0 	.word	0x200027e0

08009644 <__swbuf_r>:
 8009644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009646:	460e      	mov	r6, r1
 8009648:	4614      	mov	r4, r2
 800964a:	4605      	mov	r5, r0
 800964c:	b118      	cbz	r0, 8009656 <__swbuf_r+0x12>
 800964e:	6983      	ldr	r3, [r0, #24]
 8009650:	b90b      	cbnz	r3, 8009656 <__swbuf_r+0x12>
 8009652:	f7fe fef3 	bl	800843c <__sinit>
 8009656:	4b21      	ldr	r3, [pc, #132]	; (80096dc <__swbuf_r+0x98>)
 8009658:	429c      	cmp	r4, r3
 800965a:	d12b      	bne.n	80096b4 <__swbuf_r+0x70>
 800965c:	686c      	ldr	r4, [r5, #4]
 800965e:	69a3      	ldr	r3, [r4, #24]
 8009660:	60a3      	str	r3, [r4, #8]
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	071a      	lsls	r2, r3, #28
 8009666:	d52f      	bpl.n	80096c8 <__swbuf_r+0x84>
 8009668:	6923      	ldr	r3, [r4, #16]
 800966a:	b36b      	cbz	r3, 80096c8 <__swbuf_r+0x84>
 800966c:	6923      	ldr	r3, [r4, #16]
 800966e:	6820      	ldr	r0, [r4, #0]
 8009670:	b2f6      	uxtb	r6, r6
 8009672:	1ac0      	subs	r0, r0, r3
 8009674:	6963      	ldr	r3, [r4, #20]
 8009676:	4637      	mov	r7, r6
 8009678:	4283      	cmp	r3, r0
 800967a:	dc04      	bgt.n	8009686 <__swbuf_r+0x42>
 800967c:	4621      	mov	r1, r4
 800967e:	4628      	mov	r0, r5
 8009680:	f7ff fb18 	bl	8008cb4 <_fflush_r>
 8009684:	bb30      	cbnz	r0, 80096d4 <__swbuf_r+0x90>
 8009686:	68a3      	ldr	r3, [r4, #8]
 8009688:	3001      	adds	r0, #1
 800968a:	3b01      	subs	r3, #1
 800968c:	60a3      	str	r3, [r4, #8]
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	1c5a      	adds	r2, r3, #1
 8009692:	6022      	str	r2, [r4, #0]
 8009694:	701e      	strb	r6, [r3, #0]
 8009696:	6963      	ldr	r3, [r4, #20]
 8009698:	4283      	cmp	r3, r0
 800969a:	d004      	beq.n	80096a6 <__swbuf_r+0x62>
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	07db      	lsls	r3, r3, #31
 80096a0:	d506      	bpl.n	80096b0 <__swbuf_r+0x6c>
 80096a2:	2e0a      	cmp	r6, #10
 80096a4:	d104      	bne.n	80096b0 <__swbuf_r+0x6c>
 80096a6:	4621      	mov	r1, r4
 80096a8:	4628      	mov	r0, r5
 80096aa:	f7ff fb03 	bl	8008cb4 <_fflush_r>
 80096ae:	b988      	cbnz	r0, 80096d4 <__swbuf_r+0x90>
 80096b0:	4638      	mov	r0, r7
 80096b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b4:	4b0a      	ldr	r3, [pc, #40]	; (80096e0 <__swbuf_r+0x9c>)
 80096b6:	429c      	cmp	r4, r3
 80096b8:	d101      	bne.n	80096be <__swbuf_r+0x7a>
 80096ba:	68ac      	ldr	r4, [r5, #8]
 80096bc:	e7cf      	b.n	800965e <__swbuf_r+0x1a>
 80096be:	4b09      	ldr	r3, [pc, #36]	; (80096e4 <__swbuf_r+0xa0>)
 80096c0:	429c      	cmp	r4, r3
 80096c2:	bf08      	it	eq
 80096c4:	68ec      	ldreq	r4, [r5, #12]
 80096c6:	e7ca      	b.n	800965e <__swbuf_r+0x1a>
 80096c8:	4621      	mov	r1, r4
 80096ca:	4628      	mov	r0, r5
 80096cc:	f000 f80c 	bl	80096e8 <__swsetup_r>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d0cb      	beq.n	800966c <__swbuf_r+0x28>
 80096d4:	f04f 37ff 	mov.w	r7, #4294967295
 80096d8:	e7ea      	b.n	80096b0 <__swbuf_r+0x6c>
 80096da:	bf00      	nop
 80096dc:	08009d0c 	.word	0x08009d0c
 80096e0:	08009d2c 	.word	0x08009d2c
 80096e4:	08009cec 	.word	0x08009cec

080096e8 <__swsetup_r>:
 80096e8:	4b32      	ldr	r3, [pc, #200]	; (80097b4 <__swsetup_r+0xcc>)
 80096ea:	b570      	push	{r4, r5, r6, lr}
 80096ec:	681d      	ldr	r5, [r3, #0]
 80096ee:	4606      	mov	r6, r0
 80096f0:	460c      	mov	r4, r1
 80096f2:	b125      	cbz	r5, 80096fe <__swsetup_r+0x16>
 80096f4:	69ab      	ldr	r3, [r5, #24]
 80096f6:	b913      	cbnz	r3, 80096fe <__swsetup_r+0x16>
 80096f8:	4628      	mov	r0, r5
 80096fa:	f7fe fe9f 	bl	800843c <__sinit>
 80096fe:	4b2e      	ldr	r3, [pc, #184]	; (80097b8 <__swsetup_r+0xd0>)
 8009700:	429c      	cmp	r4, r3
 8009702:	d10f      	bne.n	8009724 <__swsetup_r+0x3c>
 8009704:	686c      	ldr	r4, [r5, #4]
 8009706:	89a3      	ldrh	r3, [r4, #12]
 8009708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800970c:	0719      	lsls	r1, r3, #28
 800970e:	d42c      	bmi.n	800976a <__swsetup_r+0x82>
 8009710:	06dd      	lsls	r5, r3, #27
 8009712:	d411      	bmi.n	8009738 <__swsetup_r+0x50>
 8009714:	2309      	movs	r3, #9
 8009716:	6033      	str	r3, [r6, #0]
 8009718:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800971c:	f04f 30ff 	mov.w	r0, #4294967295
 8009720:	81a3      	strh	r3, [r4, #12]
 8009722:	e03e      	b.n	80097a2 <__swsetup_r+0xba>
 8009724:	4b25      	ldr	r3, [pc, #148]	; (80097bc <__swsetup_r+0xd4>)
 8009726:	429c      	cmp	r4, r3
 8009728:	d101      	bne.n	800972e <__swsetup_r+0x46>
 800972a:	68ac      	ldr	r4, [r5, #8]
 800972c:	e7eb      	b.n	8009706 <__swsetup_r+0x1e>
 800972e:	4b24      	ldr	r3, [pc, #144]	; (80097c0 <__swsetup_r+0xd8>)
 8009730:	429c      	cmp	r4, r3
 8009732:	bf08      	it	eq
 8009734:	68ec      	ldreq	r4, [r5, #12]
 8009736:	e7e6      	b.n	8009706 <__swsetup_r+0x1e>
 8009738:	0758      	lsls	r0, r3, #29
 800973a:	d512      	bpl.n	8009762 <__swsetup_r+0x7a>
 800973c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800973e:	b141      	cbz	r1, 8009752 <__swsetup_r+0x6a>
 8009740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009744:	4299      	cmp	r1, r3
 8009746:	d002      	beq.n	800974e <__swsetup_r+0x66>
 8009748:	4630      	mov	r0, r6
 800974a:	f7fe ff63 	bl	8008614 <_free_r>
 800974e:	2300      	movs	r3, #0
 8009750:	6363      	str	r3, [r4, #52]	; 0x34
 8009752:	89a3      	ldrh	r3, [r4, #12]
 8009754:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009758:	81a3      	strh	r3, [r4, #12]
 800975a:	2300      	movs	r3, #0
 800975c:	6063      	str	r3, [r4, #4]
 800975e:	6923      	ldr	r3, [r4, #16]
 8009760:	6023      	str	r3, [r4, #0]
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	f043 0308 	orr.w	r3, r3, #8
 8009768:	81a3      	strh	r3, [r4, #12]
 800976a:	6923      	ldr	r3, [r4, #16]
 800976c:	b94b      	cbnz	r3, 8009782 <__swsetup_r+0x9a>
 800976e:	89a3      	ldrh	r3, [r4, #12]
 8009770:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009778:	d003      	beq.n	8009782 <__swsetup_r+0x9a>
 800977a:	4621      	mov	r1, r4
 800977c:	4630      	mov	r0, r6
 800977e:	f000 f84d 	bl	800981c <__smakebuf_r>
 8009782:	89a0      	ldrh	r0, [r4, #12]
 8009784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009788:	f010 0301 	ands.w	r3, r0, #1
 800978c:	d00a      	beq.n	80097a4 <__swsetup_r+0xbc>
 800978e:	2300      	movs	r3, #0
 8009790:	60a3      	str	r3, [r4, #8]
 8009792:	6963      	ldr	r3, [r4, #20]
 8009794:	425b      	negs	r3, r3
 8009796:	61a3      	str	r3, [r4, #24]
 8009798:	6923      	ldr	r3, [r4, #16]
 800979a:	b943      	cbnz	r3, 80097ae <__swsetup_r+0xc6>
 800979c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097a0:	d1ba      	bne.n	8009718 <__swsetup_r+0x30>
 80097a2:	bd70      	pop	{r4, r5, r6, pc}
 80097a4:	0781      	lsls	r1, r0, #30
 80097a6:	bf58      	it	pl
 80097a8:	6963      	ldrpl	r3, [r4, #20]
 80097aa:	60a3      	str	r3, [r4, #8]
 80097ac:	e7f4      	b.n	8009798 <__swsetup_r+0xb0>
 80097ae:	2000      	movs	r0, #0
 80097b0:	e7f7      	b.n	80097a2 <__swsetup_r+0xba>
 80097b2:	bf00      	nop
 80097b4:	20000060 	.word	0x20000060
 80097b8:	08009d0c 	.word	0x08009d0c
 80097bc:	08009d2c 	.word	0x08009d2c
 80097c0:	08009cec 	.word	0x08009cec

080097c4 <abort>:
 80097c4:	2006      	movs	r0, #6
 80097c6:	b508      	push	{r3, lr}
 80097c8:	f000 f8de 	bl	8009988 <raise>
 80097cc:	2001      	movs	r0, #1
 80097ce:	f7f8 fa1c 	bl	8001c0a <_exit>

080097d2 <__swhatbuf_r>:
 80097d2:	b570      	push	{r4, r5, r6, lr}
 80097d4:	460e      	mov	r6, r1
 80097d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097da:	4614      	mov	r4, r2
 80097dc:	2900      	cmp	r1, #0
 80097de:	461d      	mov	r5, r3
 80097e0:	b096      	sub	sp, #88	; 0x58
 80097e2:	da07      	bge.n	80097f4 <__swhatbuf_r+0x22>
 80097e4:	2300      	movs	r3, #0
 80097e6:	602b      	str	r3, [r5, #0]
 80097e8:	89b3      	ldrh	r3, [r6, #12]
 80097ea:	061a      	lsls	r2, r3, #24
 80097ec:	d410      	bmi.n	8009810 <__swhatbuf_r+0x3e>
 80097ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097f2:	e00e      	b.n	8009812 <__swhatbuf_r+0x40>
 80097f4:	466a      	mov	r2, sp
 80097f6:	f000 f8e3 	bl	80099c0 <_fstat_r>
 80097fa:	2800      	cmp	r0, #0
 80097fc:	dbf2      	blt.n	80097e4 <__swhatbuf_r+0x12>
 80097fe:	9a01      	ldr	r2, [sp, #4]
 8009800:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009804:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009808:	425a      	negs	r2, r3
 800980a:	415a      	adcs	r2, r3
 800980c:	602a      	str	r2, [r5, #0]
 800980e:	e7ee      	b.n	80097ee <__swhatbuf_r+0x1c>
 8009810:	2340      	movs	r3, #64	; 0x40
 8009812:	2000      	movs	r0, #0
 8009814:	6023      	str	r3, [r4, #0]
 8009816:	b016      	add	sp, #88	; 0x58
 8009818:	bd70      	pop	{r4, r5, r6, pc}
	...

0800981c <__smakebuf_r>:
 800981c:	898b      	ldrh	r3, [r1, #12]
 800981e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009820:	079d      	lsls	r5, r3, #30
 8009822:	4606      	mov	r6, r0
 8009824:	460c      	mov	r4, r1
 8009826:	d507      	bpl.n	8009838 <__smakebuf_r+0x1c>
 8009828:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800982c:	6023      	str	r3, [r4, #0]
 800982e:	6123      	str	r3, [r4, #16]
 8009830:	2301      	movs	r3, #1
 8009832:	6163      	str	r3, [r4, #20]
 8009834:	b002      	add	sp, #8
 8009836:	bd70      	pop	{r4, r5, r6, pc}
 8009838:	466a      	mov	r2, sp
 800983a:	ab01      	add	r3, sp, #4
 800983c:	f7ff ffc9 	bl	80097d2 <__swhatbuf_r>
 8009840:	9900      	ldr	r1, [sp, #0]
 8009842:	4605      	mov	r5, r0
 8009844:	4630      	mov	r0, r6
 8009846:	f7fe ff31 	bl	80086ac <_malloc_r>
 800984a:	b948      	cbnz	r0, 8009860 <__smakebuf_r+0x44>
 800984c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009850:	059a      	lsls	r2, r3, #22
 8009852:	d4ef      	bmi.n	8009834 <__smakebuf_r+0x18>
 8009854:	f023 0303 	bic.w	r3, r3, #3
 8009858:	f043 0302 	orr.w	r3, r3, #2
 800985c:	81a3      	strh	r3, [r4, #12]
 800985e:	e7e3      	b.n	8009828 <__smakebuf_r+0xc>
 8009860:	4b0d      	ldr	r3, [pc, #52]	; (8009898 <__smakebuf_r+0x7c>)
 8009862:	62b3      	str	r3, [r6, #40]	; 0x28
 8009864:	89a3      	ldrh	r3, [r4, #12]
 8009866:	6020      	str	r0, [r4, #0]
 8009868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800986c:	81a3      	strh	r3, [r4, #12]
 800986e:	9b00      	ldr	r3, [sp, #0]
 8009870:	6120      	str	r0, [r4, #16]
 8009872:	6163      	str	r3, [r4, #20]
 8009874:	9b01      	ldr	r3, [sp, #4]
 8009876:	b15b      	cbz	r3, 8009890 <__smakebuf_r+0x74>
 8009878:	4630      	mov	r0, r6
 800987a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800987e:	f000 f8b1 	bl	80099e4 <_isatty_r>
 8009882:	b128      	cbz	r0, 8009890 <__smakebuf_r+0x74>
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	f023 0303 	bic.w	r3, r3, #3
 800988a:	f043 0301 	orr.w	r3, r3, #1
 800988e:	81a3      	strh	r3, [r4, #12]
 8009890:	89a0      	ldrh	r0, [r4, #12]
 8009892:	4305      	orrs	r5, r0
 8009894:	81a5      	strh	r5, [r4, #12]
 8009896:	e7cd      	b.n	8009834 <__smakebuf_r+0x18>
 8009898:	080083d5 	.word	0x080083d5

0800989c <memchr>:
 800989c:	4603      	mov	r3, r0
 800989e:	b510      	push	{r4, lr}
 80098a0:	b2c9      	uxtb	r1, r1
 80098a2:	4402      	add	r2, r0
 80098a4:	4293      	cmp	r3, r2
 80098a6:	4618      	mov	r0, r3
 80098a8:	d101      	bne.n	80098ae <memchr+0x12>
 80098aa:	2000      	movs	r0, #0
 80098ac:	e003      	b.n	80098b6 <memchr+0x1a>
 80098ae:	7804      	ldrb	r4, [r0, #0]
 80098b0:	3301      	adds	r3, #1
 80098b2:	428c      	cmp	r4, r1
 80098b4:	d1f6      	bne.n	80098a4 <memchr+0x8>
 80098b6:	bd10      	pop	{r4, pc}

080098b8 <memmove>:
 80098b8:	4288      	cmp	r0, r1
 80098ba:	b510      	push	{r4, lr}
 80098bc:	eb01 0402 	add.w	r4, r1, r2
 80098c0:	d902      	bls.n	80098c8 <memmove+0x10>
 80098c2:	4284      	cmp	r4, r0
 80098c4:	4623      	mov	r3, r4
 80098c6:	d807      	bhi.n	80098d8 <memmove+0x20>
 80098c8:	1e43      	subs	r3, r0, #1
 80098ca:	42a1      	cmp	r1, r4
 80098cc:	d008      	beq.n	80098e0 <memmove+0x28>
 80098ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098d6:	e7f8      	b.n	80098ca <memmove+0x12>
 80098d8:	4601      	mov	r1, r0
 80098da:	4402      	add	r2, r0
 80098dc:	428a      	cmp	r2, r1
 80098de:	d100      	bne.n	80098e2 <memmove+0x2a>
 80098e0:	bd10      	pop	{r4, pc}
 80098e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098ea:	e7f7      	b.n	80098dc <memmove+0x24>

080098ec <_realloc_r>:
 80098ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ee:	4607      	mov	r7, r0
 80098f0:	4614      	mov	r4, r2
 80098f2:	460e      	mov	r6, r1
 80098f4:	b921      	cbnz	r1, 8009900 <_realloc_r+0x14>
 80098f6:	4611      	mov	r1, r2
 80098f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80098fc:	f7fe bed6 	b.w	80086ac <_malloc_r>
 8009900:	b922      	cbnz	r2, 800990c <_realloc_r+0x20>
 8009902:	f7fe fe87 	bl	8008614 <_free_r>
 8009906:	4625      	mov	r5, r4
 8009908:	4628      	mov	r0, r5
 800990a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800990c:	f000 f87a 	bl	8009a04 <_malloc_usable_size_r>
 8009910:	42a0      	cmp	r0, r4
 8009912:	d20f      	bcs.n	8009934 <_realloc_r+0x48>
 8009914:	4621      	mov	r1, r4
 8009916:	4638      	mov	r0, r7
 8009918:	f7fe fec8 	bl	80086ac <_malloc_r>
 800991c:	4605      	mov	r5, r0
 800991e:	2800      	cmp	r0, #0
 8009920:	d0f2      	beq.n	8009908 <_realloc_r+0x1c>
 8009922:	4631      	mov	r1, r6
 8009924:	4622      	mov	r2, r4
 8009926:	f7fe fe5f 	bl	80085e8 <memcpy>
 800992a:	4631      	mov	r1, r6
 800992c:	4638      	mov	r0, r7
 800992e:	f7fe fe71 	bl	8008614 <_free_r>
 8009932:	e7e9      	b.n	8009908 <_realloc_r+0x1c>
 8009934:	4635      	mov	r5, r6
 8009936:	e7e7      	b.n	8009908 <_realloc_r+0x1c>

08009938 <_raise_r>:
 8009938:	291f      	cmp	r1, #31
 800993a:	b538      	push	{r3, r4, r5, lr}
 800993c:	4604      	mov	r4, r0
 800993e:	460d      	mov	r5, r1
 8009940:	d904      	bls.n	800994c <_raise_r+0x14>
 8009942:	2316      	movs	r3, #22
 8009944:	6003      	str	r3, [r0, #0]
 8009946:	f04f 30ff 	mov.w	r0, #4294967295
 800994a:	bd38      	pop	{r3, r4, r5, pc}
 800994c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800994e:	b112      	cbz	r2, 8009956 <_raise_r+0x1e>
 8009950:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009954:	b94b      	cbnz	r3, 800996a <_raise_r+0x32>
 8009956:	4620      	mov	r0, r4
 8009958:	f000 f830 	bl	80099bc <_getpid_r>
 800995c:	462a      	mov	r2, r5
 800995e:	4601      	mov	r1, r0
 8009960:	4620      	mov	r0, r4
 8009962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009966:	f000 b817 	b.w	8009998 <_kill_r>
 800996a:	2b01      	cmp	r3, #1
 800996c:	d00a      	beq.n	8009984 <_raise_r+0x4c>
 800996e:	1c59      	adds	r1, r3, #1
 8009970:	d103      	bne.n	800997a <_raise_r+0x42>
 8009972:	2316      	movs	r3, #22
 8009974:	6003      	str	r3, [r0, #0]
 8009976:	2001      	movs	r0, #1
 8009978:	e7e7      	b.n	800994a <_raise_r+0x12>
 800997a:	2400      	movs	r4, #0
 800997c:	4628      	mov	r0, r5
 800997e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009982:	4798      	blx	r3
 8009984:	2000      	movs	r0, #0
 8009986:	e7e0      	b.n	800994a <_raise_r+0x12>

08009988 <raise>:
 8009988:	4b02      	ldr	r3, [pc, #8]	; (8009994 <raise+0xc>)
 800998a:	4601      	mov	r1, r0
 800998c:	6818      	ldr	r0, [r3, #0]
 800998e:	f7ff bfd3 	b.w	8009938 <_raise_r>
 8009992:	bf00      	nop
 8009994:	20000060 	.word	0x20000060

08009998 <_kill_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	2300      	movs	r3, #0
 800999c:	4d06      	ldr	r5, [pc, #24]	; (80099b8 <_kill_r+0x20>)
 800999e:	4604      	mov	r4, r0
 80099a0:	4608      	mov	r0, r1
 80099a2:	4611      	mov	r1, r2
 80099a4:	602b      	str	r3, [r5, #0]
 80099a6:	f7f8 f920 	bl	8001bea <_kill>
 80099aa:	1c43      	adds	r3, r0, #1
 80099ac:	d102      	bne.n	80099b4 <_kill_r+0x1c>
 80099ae:	682b      	ldr	r3, [r5, #0]
 80099b0:	b103      	cbz	r3, 80099b4 <_kill_r+0x1c>
 80099b2:	6023      	str	r3, [r4, #0]
 80099b4:	bd38      	pop	{r3, r4, r5, pc}
 80099b6:	bf00      	nop
 80099b8:	200027e0 	.word	0x200027e0

080099bc <_getpid_r>:
 80099bc:	f7f8 b90e 	b.w	8001bdc <_getpid>

080099c0 <_fstat_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	2300      	movs	r3, #0
 80099c4:	4d06      	ldr	r5, [pc, #24]	; (80099e0 <_fstat_r+0x20>)
 80099c6:	4604      	mov	r4, r0
 80099c8:	4608      	mov	r0, r1
 80099ca:	4611      	mov	r1, r2
 80099cc:	602b      	str	r3, [r5, #0]
 80099ce:	f7f8 f96a 	bl	8001ca6 <_fstat>
 80099d2:	1c43      	adds	r3, r0, #1
 80099d4:	d102      	bne.n	80099dc <_fstat_r+0x1c>
 80099d6:	682b      	ldr	r3, [r5, #0]
 80099d8:	b103      	cbz	r3, 80099dc <_fstat_r+0x1c>
 80099da:	6023      	str	r3, [r4, #0]
 80099dc:	bd38      	pop	{r3, r4, r5, pc}
 80099de:	bf00      	nop
 80099e0:	200027e0 	.word	0x200027e0

080099e4 <_isatty_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	2300      	movs	r3, #0
 80099e8:	4d05      	ldr	r5, [pc, #20]	; (8009a00 <_isatty_r+0x1c>)
 80099ea:	4604      	mov	r4, r0
 80099ec:	4608      	mov	r0, r1
 80099ee:	602b      	str	r3, [r5, #0]
 80099f0:	f7f8 f968 	bl	8001cc4 <_isatty>
 80099f4:	1c43      	adds	r3, r0, #1
 80099f6:	d102      	bne.n	80099fe <_isatty_r+0x1a>
 80099f8:	682b      	ldr	r3, [r5, #0]
 80099fa:	b103      	cbz	r3, 80099fe <_isatty_r+0x1a>
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	bd38      	pop	{r3, r4, r5, pc}
 8009a00:	200027e0 	.word	0x200027e0

08009a04 <_malloc_usable_size_r>:
 8009a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a08:	1f18      	subs	r0, r3, #4
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	bfbc      	itt	lt
 8009a0e:	580b      	ldrlt	r3, [r1, r0]
 8009a10:	18c0      	addlt	r0, r0, r3
 8009a12:	4770      	bx	lr

08009a14 <_init>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	bf00      	nop
 8009a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1a:	bc08      	pop	{r3}
 8009a1c:	469e      	mov	lr, r3
 8009a1e:	4770      	bx	lr

08009a20 <_fini>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	bf00      	nop
 8009a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a26:	bc08      	pop	{r3}
 8009a28:	469e      	mov	lr, r3
 8009a2a:	4770      	bx	lr
